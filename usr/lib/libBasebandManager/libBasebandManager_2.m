void sub_1BF40484C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb2_ENK3__2clEv_block_invoke(_QWORD *a1, xpc_object_t *a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  xpc_object_t v8;
  uint64_t v9;
  uint64_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  std::__shared_weak_count *v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  unsigned int v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unsigned int v23;
  xpc_object_t object;
  std::__shared_weak_count *v26;

  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    v26 = v7;
    if (v7)
    {
      if (!a1[4])
      {
        v13 = v7;
LABEL_25:
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        return;
      }
      v8 = xpc_null_create();
      object = v8;
      v9 = MEMORY[0x1C3B8A86C](*a2);
      v10 = MEMORY[0x1E0C81350];
      if (v9 == MEMORY[0x1E0C81350])
      {
        v14 = *a3;
        if (v14 && MEMORY[0x1C3B8A86C](v14) == MEMORY[0x1E0C812F8])
          xpc_retain(v14);
        else
          v14 = xpc_null_create();
        v15 = xpc_null_create();
        object = v14;
        xpc_release(v8);
        xpc_release(v15);
      }
      else
      {
        v11 = xpc_dictionary_create(0, 0, 0);
        if (v11 || (v11 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8A86C](v11) == MEMORY[0x1E0C812F8])
          {
            xpc_retain(v11);
            v12 = v11;
          }
          else
          {
            v12 = xpc_null_create();
          }
        }
        else
        {
          v12 = xpc_null_create();
          v11 = 0;
        }
        xpc_release(v11);
        v16 = xpc_null_create();
        v17 = object;
        object = v12;
        xpc_release(v17);
        xpc_release(v16);
        v18 = *a2;
        if (*a2)
          xpc_retain(*a2);
        else
          v18 = xpc_null_create();
        xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E0CFB2C8], v18);
        v19 = xpc_null_create();
        xpc_release(v18);
        xpc_release(v19);
      }
      if (MEMORY[0x1C3B8A86C](*a2) == v10)
        v20 = 0;
      else
        v20 = -534716416;
      v23 = v20;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v23, &object);
      xpc_release(object);
      v13 = v26;
      if (v26)
        goto LABEL_25;
    }
  }
}

void sub_1BF404CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  xpc_release(v11);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  void *v31;
  void *v32;
  NSObject *v33;
  unint64_t *v34;
  unint64_t v35;
  void **v36;
  void *v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  void *v41;
  void **v42;
  xpc_object_t v43;
  xpc_object_t v44;
  std::__shared_weak_count *v45;
  const void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  void *__p[5];
  std::__shared_weak_count *v51;
  void *aBlock;
  unsigned int v53;
  std::string __dst;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    v4 = (const void *)*MEMORY[0x1E0CFBCE8];
    v5 = strlen((const char *)*MEMORY[0x1E0CFBCE8]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        __p[2] = (void *)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 1;
            if (!v2[1])
            {
LABEL_79:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              goto LABEL_81;
            }
LABEL_61:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v37 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v37 = __p[1];
            if (v37)
            {
              v38 = xpc_dictionary_create(0, 0, 0);
              if (v38 || (v38 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8A86C](v38) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v38);
                  v39 = v38;
                }
                else
                {
                  v39 = xpc_null_create();
                }
              }
              else
              {
                v39 = xpc_null_create();
                v38 = 0;
              }
              xpc_release(v38);
              v40 = xpc_null_create();
              v41 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
              xpc_release(v41);
              xpc_release(v40);
              if (SHIBYTE(__p[2]) >= 0)
                v42 = __p;
              else
                v42 = (void **)__p[0];
              v43 = xpc_string_create((const char *)v42);
              if (!v43)
                v43 = xpc_null_create();
              xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x1E0CFB0D0], v43);
              v44 = xpc_null_create();
              xpc_release(v43);
              xpc_release(v44);
            }
            v53 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, &v53, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_79;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v36 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v36 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
        _os_log_impl(&dword_1BF335000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 1;
        if (!v2[1])
          goto LABEL_79;
        goto LABEL_61;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_1ED70FD08;
  }
  v14 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v15 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
      goto LABEL_36;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_37;
    goto LABEL_52;
  }
LABEL_36:
  if (v18)
  {
LABEL_37:
    __p[0] = (void *)MEMORY[0x1E0C809B0];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb3_ENK3__3clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_137;
    __p[4] = *((void **)v2 + 2);
    v28 = (std::__shared_weak_count *)v2[3];
    v51 = v28;
    if (v28)
    {
      p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
      do
        v30 = __ldxr(p_shared_weak_owners);
      while (__stxr(v30 + 1, p_shared_weak_owners));
    }
    v31 = (void *)v2[1];
    if (v31)
      v31 = _Block_copy(v31);
    aBlock = v31;
    v32 = _Block_copy(__p);
    v33 = v3[17];
    if (v33)
      dispatch_retain(v33);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
    (*(void (**)(std::string::size_type, std::string *))(*(_QWORD *)v18 + 288))(v18, &__dst);
    if (__dst.__r_.__value_.__l.__size_)
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    if (__dst.__r_.__value_.__r.__words[0])
      _Block_release(__dst.__r_.__value_.__l.__data_);
    if (aBlock)
      _Block_release(aBlock);
    if (v51)
      std::__shared_weak_count::__release_weak(v51);
  }
LABEL_52:
  if (v17)
  {
    v34 = (unint64_t *)&v17->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_81:
  v45 = (std::__shared_weak_count *)v2[3];
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  v46 = (const void *)v2[1];
  if (v46)
    _Block_release(v46);
  operator delete(v2);
  v47 = (std::__shared_weak_count *)a1[2];
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  operator delete(a1);
}

void sub_1BF4052D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb3_ENK3__3clEv_block_invoke(_QWORD *a1, _QWORD *a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  xpc_object_t v9;
  uint64_t v10;
  uint64_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  unsigned int v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unsigned int v17;
  xpc_object_t object;
  std::__shared_weak_count *v20;

  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    v20 = v7;
    if (v7)
    {
      v8 = v7;
      if (a1[4])
      {
        v9 = xpc_null_create();
        object = v9;
        v10 = MEMORY[0x1C3B8A86C](*a2);
        v11 = MEMORY[0x1E0C81350];
        if (v10 == MEMORY[0x1E0C81350])
        {
          v12 = *a3;
          if (v12 && MEMORY[0x1C3B8A86C](v12) == MEMORY[0x1E0C812F8])
            xpc_retain(v12);
          else
            v12 = xpc_null_create();
          v13 = xpc_null_create();
          object = v12;
          xpc_release(v9);
          xpc_release(v13);
        }
        if (MEMORY[0x1C3B8A86C](*a2) == v11)
          v14 = 0;
        else
          v14 = -534716416;
        v17 = v14;
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v17, &object);
        xpc_release(object);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_1BF40561C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  xpc_release(v11);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb4_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  void *v31;
  void *v32;
  NSObject *v33;
  unint64_t *v34;
  unint64_t v35;
  void **v36;
  void *v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  void *v41;
  void **v42;
  xpc_object_t v43;
  xpc_object_t v44;
  std::__shared_weak_count *v45;
  const void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  void *__p[5];
  std::__shared_weak_count *v51;
  void *aBlock;
  unsigned int v53;
  std::string __dst;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    v4 = (const void *)*MEMORY[0x1E0CFB688];
    v5 = strlen((const char *)*MEMORY[0x1E0CFB688]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        __p[2] = (void *)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 1;
            if (!v2[1])
            {
LABEL_79:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              goto LABEL_81;
            }
LABEL_61:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v37 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v37 = __p[1];
            if (v37)
            {
              v38 = xpc_dictionary_create(0, 0, 0);
              if (v38 || (v38 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8A86C](v38) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v38);
                  v39 = v38;
                }
                else
                {
                  v39 = xpc_null_create();
                }
              }
              else
              {
                v39 = xpc_null_create();
                v38 = 0;
              }
              xpc_release(v38);
              v40 = xpc_null_create();
              v41 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
              xpc_release(v41);
              xpc_release(v40);
              if (SHIBYTE(__p[2]) >= 0)
                v42 = __p;
              else
                v42 = (void **)__p[0];
              v43 = xpc_string_create((const char *)v42);
              if (!v43)
                v43 = xpc_null_create();
              xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x1E0CFB0D0], v43);
              v44 = xpc_null_create();
              xpc_release(v43);
              xpc_release(v44);
            }
            v53 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, &v53, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_79;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v36 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v36 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
        _os_log_impl(&dword_1BF335000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 1;
        if (!v2[1])
          goto LABEL_79;
        goto LABEL_61;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_1ED70FD08;
  }
  v14 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v15 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
      goto LABEL_36;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_37;
    goto LABEL_52;
  }
LABEL_36:
  if (v18)
  {
LABEL_37:
    __p[0] = (void *)MEMORY[0x1E0C809B0];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb4_ENK3__4clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_138;
    __p[4] = *((void **)v2 + 2);
    v28 = (std::__shared_weak_count *)v2[3];
    v51 = v28;
    if (v28)
    {
      p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
      do
        v30 = __ldxr(p_shared_weak_owners);
      while (__stxr(v30 + 1, p_shared_weak_owners));
    }
    v31 = (void *)v2[1];
    if (v31)
      v31 = _Block_copy(v31);
    aBlock = v31;
    v32 = _Block_copy(__p);
    v33 = v3[17];
    if (v33)
      dispatch_retain(v33);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
    (*(void (**)(std::string::size_type, std::string *))(*(_QWORD *)v18 + 296))(v18, &__dst);
    if (__dst.__r_.__value_.__l.__size_)
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    if (__dst.__r_.__value_.__r.__words[0])
      _Block_release(__dst.__r_.__value_.__l.__data_);
    if (aBlock)
      _Block_release(aBlock);
    if (v51)
      std::__shared_weak_count::__release_weak(v51);
  }
LABEL_52:
  if (v17)
  {
    v34 = (unint64_t *)&v17->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_81:
  v45 = (std::__shared_weak_count *)v2[3];
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  v46 = (const void *)v2[1];
  if (v46)
    _Block_release(v46);
  operator delete(v2);
  v47 = (std::__shared_weak_count *)a1[2];
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  operator delete(a1);
}

void sub_1BF405C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb4_ENK3__4clEv_block_invoke(_QWORD *a1, _QWORD *a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  xpc_object_t v9;
  uint64_t v10;
  uint64_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  unsigned int v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unsigned int v17;
  xpc_object_t object;
  std::__shared_weak_count *v20;

  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    v20 = v7;
    if (v7)
    {
      v8 = v7;
      if (a1[4])
      {
        v9 = xpc_null_create();
        object = v9;
        v10 = MEMORY[0x1C3B8A86C](*a2);
        v11 = MEMORY[0x1E0C81350];
        if (v10 == MEMORY[0x1E0C81350])
        {
          v12 = *a3;
          if (v12 && MEMORY[0x1C3B8A86C](v12) == MEMORY[0x1E0C812F8])
            xpc_retain(v12);
          else
            v12 = xpc_null_create();
          v13 = xpc_null_create();
          object = v12;
          xpc_release(v9);
          xpc_release(v13);
        }
        if (MEMORY[0x1C3B8A86C](*a2) == v11)
          v14 = 0;
        else
          v14 = -534716416;
        v17 = v14;
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v17, &object);
        xpc_release(object);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_1BF405F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  xpc_release(v11);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb5_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  void *v31;
  void *v32;
  NSObject *v33;
  unint64_t *v34;
  unint64_t v35;
  void **v36;
  void *v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  void *v41;
  void **v42;
  xpc_object_t v43;
  xpc_object_t v44;
  std::__shared_weak_count *v45;
  const void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  void *__p[5];
  std::__shared_weak_count *v51;
  void *aBlock;
  unsigned int v53;
  std::string __dst;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    v4 = (const void *)*MEMORY[0x1E0CFBFC0];
    v5 = strlen((const char *)*MEMORY[0x1E0CFBFC0]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        __p[2] = (void *)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 1;
            if (!v2[1])
            {
LABEL_79:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              goto LABEL_81;
            }
LABEL_61:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v37 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v37 = __p[1];
            if (v37)
            {
              v38 = xpc_dictionary_create(0, 0, 0);
              if (v38 || (v38 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8A86C](v38) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v38);
                  v39 = v38;
                }
                else
                {
                  v39 = xpc_null_create();
                }
              }
              else
              {
                v39 = xpc_null_create();
                v38 = 0;
              }
              xpc_release(v38);
              v40 = xpc_null_create();
              v41 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
              xpc_release(v41);
              xpc_release(v40);
              if (SHIBYTE(__p[2]) >= 0)
                v42 = __p;
              else
                v42 = (void **)__p[0];
              v43 = xpc_string_create((const char *)v42);
              if (!v43)
                v43 = xpc_null_create();
              xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x1E0CFB0D0], v43);
              v44 = xpc_null_create();
              xpc_release(v43);
              xpc_release(v44);
            }
            v53 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, &v53, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_79;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v36 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v36 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
        _os_log_impl(&dword_1BF335000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 1;
        if (!v2[1])
          goto LABEL_79;
        goto LABEL_61;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_1ED70FD08;
  }
  v14 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v15 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
      goto LABEL_36;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_37;
    goto LABEL_52;
  }
LABEL_36:
  if (v18)
  {
LABEL_37:
    __p[0] = (void *)MEMORY[0x1E0C809B0];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb5_ENK3__5clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_139_0;
    __p[4] = *((void **)v2 + 2);
    v28 = (std::__shared_weak_count *)v2[3];
    v51 = v28;
    if (v28)
    {
      p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
      do
        v30 = __ldxr(p_shared_weak_owners);
      while (__stxr(v30 + 1, p_shared_weak_owners));
    }
    v31 = (void *)v2[1];
    if (v31)
      v31 = _Block_copy(v31);
    aBlock = v31;
    v32 = _Block_copy(__p);
    v33 = v3[17];
    if (v33)
      dispatch_retain(v33);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
    (*(void (**)(std::string::size_type, std::string *))(*(_QWORD *)v18 + 232))(v18, &__dst);
    if (__dst.__r_.__value_.__l.__size_)
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    if (__dst.__r_.__value_.__r.__words[0])
      _Block_release(__dst.__r_.__value_.__l.__data_);
    if (aBlock)
      _Block_release(aBlock);
    if (v51)
      std::__shared_weak_count::__release_weak(v51);
  }
LABEL_52:
  if (v17)
  {
    v34 = (unint64_t *)&v17->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_81:
  v45 = (std::__shared_weak_count *)v2[3];
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  v46 = (const void *)v2[1];
  if (v46)
    _Block_release(v46);
  operator delete(v2);
  v47 = (std::__shared_weak_count *)a1[2];
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  operator delete(a1);
}

void sub_1BF4065A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb5_ENK3__5clEv_block_invoke(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  xpc_object_t v8;
  xpc_object_t v9;
  std::__shared_weak_count *v10;
  xpc_object_t v11;
  uint64_t v12;
  uint64_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  unsigned int v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unsigned int v19;
  xpc_object_t xdict;
  std::__shared_weak_count *v22;

  v4 = (std::__shared_weak_count *)a1[5];
  if (!v4)
    return;
  v7 = std::__shared_weak_count::lock(v4);
  v22 = v7;
  if (!v7)
    return;
  if (!a1[4])
  {
    v10 = v7;
LABEL_22:
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  v8 = xpc_dictionary_create(0, 0, 0);
  v9 = v8;
  if (v8)
  {
    xdict = v8;
  }
  else
  {
    v9 = xpc_null_create();
    xdict = v9;
    if (!v9)
    {
      v11 = xpc_null_create();
      v9 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x1C3B8A86C](v9) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v9);
    goto LABEL_13;
  }
  v11 = xpc_null_create();
LABEL_12:
  xdict = v11;
LABEL_13:
  xpc_release(v9);
  v12 = MEMORY[0x1C3B8A86C](*a3);
  v13 = MEMORY[0x1E0C81350];
  if (v12 != MEMORY[0x1E0C81350])
  {
    v14 = (xpc_object_t)*a3;
    if (v14)
      xpc_retain(v14);
    else
      v14 = xpc_null_create();
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFC228], v14);
    v15 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v15);
  }
  if (MEMORY[0x1C3B8A86C](*a2) == v13)
    v16 = 0;
  else
    v16 = -534716416;
  v19 = v16;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v19, &xdict);
  xpc_release(xdict);
  v10 = v22;
  if (v22)
    goto LABEL_22;
}

void sub_1BF406970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
  xpc_release(object);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb6_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;
  const object *v29;
  xpc_object_t *v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  NSObject *v34;
  xpc_object_t v35;
  uint64_t v36;
  xpc_object_t v37;
  CFTypeRef v38;
  CFTypeID v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_weak_owners;
  unint64_t v42;
  void *v43;
  void *v44;
  NSObject *v45;
  unint64_t *v46;
  unint64_t v47;
  xpc_object_t v48;
  void *v49;
  xpc_object_t *v50;
  xpc_object_t v51;
  xpc_object_t v52;
  std::__shared_weak_count *v53;
  const void *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  xpc_object_t object[6];
  std::__shared_weak_count *v59;
  void *aBlock;
  xpc_object_t v61;
  CFTypeRef cf;
  CFTypeRef v63;
  std::string __dst;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(object, 170, 24);
    v4 = (const void *)*MEMORY[0x1E0CFBF50];
    v5 = strlen((const char *)*MEMORY[0x1E0CFBF50]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        object[2] = (xpc_object_t)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)object = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 2;
            if (!v2[2])
            {
LABEL_92:
              if (SHIBYTE(object[2]) < 0)
                operator delete(object[0]);
              goto LABEL_94;
            }
LABEL_43:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v31 = (xpc_object_t)HIBYTE(object[2]);
            if (SHIBYTE(object[2]) < 0)
              v31 = object[1];
            if (v31)
            {
              v32 = xpc_dictionary_create(0, 0, 0);
              if (v32 || (v32 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8A86C](v32) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v32);
                  v33 = v32;
                }
                else
                {
                  v33 = xpc_null_create();
                }
              }
              else
              {
                v33 = xpc_null_create();
                v32 = 0;
              }
              xpc_release(v32);
              v48 = xpc_null_create();
              v49 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
              xpc_release(v49);
              xpc_release(v48);
              if (SHIBYTE(object[2]) >= 0)
                v50 = object;
              else
                v50 = (xpc_object_t *)object[0];
              v51 = xpc_string_create((const char *)v50);
              if (!v51)
                v51 = xpc_null_create();
              xpc_dictionary_set_value(v33, (const char *)*MEMORY[0x1E0CFB0D0], v51);
              v52 = xpc_null_create();
              xpc_release(v51);
              xpc_release(v52);
            }
            LODWORD(v63) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, (unsigned int *)&v63, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_92;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v30 = object;
        if (SHIBYTE(object[2]) < 0)
          v30 = (xpc_object_t *)object[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
        _os_log_impl(&dword_1BF335000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 2;
        if (!v2[2])
          goto LABEL_92;
        goto LABEL_43;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)object;
    object[0] = 0;
    object[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_1ED70FD08;
  }
  v14 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v15 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
      goto LABEL_36;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_37;
LABEL_51:
    v34 = v3[11];
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object[0]) = 0;
      _os_log_error_impl(&dword_1BF335000, v34, OS_LOG_TYPE_ERROR, "No radio driver", (uint8_t *)object, 2u);
    }
    v35 = xpc_null_create();
    v36 = v2[2];
    object[0] = v35;
    v37 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v36 + 16))(v36, 3760250880, object);
    xpc_release(object[0]);
    xpc_release(v37);
    goto LABEL_78;
  }
LABEL_36:
  if (!v18)
    goto LABEL_51;
LABEL_37:
  v28 = (void *)v2[1];
  v61 = v28;
  if (v28)
    xpc_retain(v28);
  else
    v61 = xpc_null_create();
  xpc::bridge((xpc *)&v61, v29);
  v38 = cf;
  if (cf && (v39 = CFGetTypeID(cf), v39 == CFDictionaryGetTypeID()))
  {
    v63 = v38;
    CFRetain(v38);
  }
  else
  {
    v63 = 0;
  }
  object[0] = (xpc_object_t)MEMORY[0x1E0C809B0];
  object[1] = (xpc_object_t)1174405120;
  object[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb6_ENK3__6clEv_block_invoke;
  object[3] = &__block_descriptor_tmp_140;
  object[4] = v3;
  object[5] = *((xpc_object_t *)v2 + 3);
  v40 = (std::__shared_weak_count *)v2[4];
  v59 = v40;
  if (v40)
  {
    p_shared_weak_owners = (unint64_t *)&v40->__shared_weak_owners_;
    do
      v42 = __ldxr(p_shared_weak_owners);
    while (__stxr(v42 + 1, p_shared_weak_owners));
  }
  v43 = (void *)v2[2];
  if (v43)
    v43 = _Block_copy(v43);
  aBlock = v43;
  v44 = _Block_copy(object);
  v45 = v3[17];
  if (v45)
    dispatch_retain(v45);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v45;
  (*(void (**)(std::string::size_type, CFTypeRef *, std::string *))(*(_QWORD *)v18 + 248))(v18, &v63, &__dst);
  if (__dst.__r_.__value_.__l.__size_)
    dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
  if (__dst.__r_.__value_.__r.__words[0])
    _Block_release(__dst.__r_.__value_.__l.__data_);
  if (v63)
    CFRelease(v63);
  if (cf)
    CFRelease(cf);
  xpc_release(v61);
  if (aBlock)
    _Block_release(aBlock);
  if (v59)
    std::__shared_weak_count::__release_weak(v59);
LABEL_78:
  if (v17)
  {
    v46 = (unint64_t *)&v17->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_94:
  v53 = (std::__shared_weak_count *)v2[4];
  if (v53)
    std::__shared_weak_count::__release_weak(v53);
  v54 = (const void *)v2[2];
  if (v54)
    _Block_release(v54);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v55 = (std::__shared_weak_count *)a1[2];
  if (v55)
  {
    v56 = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  operator delete(a1);
}

void sub_1BF40709C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,xpc_object_t a21,CFTypeRef a22,CFTypeRef cf,xpc_object_t aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb6_ENK3__6clEv_block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  xpc_object_t v13;
  uint64_t v14;
  xpc_object_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _BYTE object[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *a2;
        if (*a2)
          v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v9 = 0;
        if (v9)
        {
          v10 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)object = 138412290;
            *(_QWORD *)&object[4] = v8;
            _os_log_error_impl(&dword_1BF335000, v10, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
            v8 = *a2;
          }
        }
        if (v8)
          v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v11 = 0;
        if (v11)
          v12 = 3760250880;
        else
          v12 = 0;
        v13 = xpc_null_create();
        v14 = a1[7];
        *(_QWORD *)object = v13;
        v15 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, _BYTE *))(v14 + 16))(v14, v12, object);
        xpc_release(*(xpc_object_t *)object);
        xpc_release(v15);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF40748C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb7_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  xpc_object_t value;
  std::string *v29;
  std::string::size_type size;
  xpc_object_t v31;
  xpc_object_t v32;
  NSObject *v33;
  xpc_object_t v34;
  uint64_t v35;
  xpc_object_t v36;
  int v37;
  NSObject *v38;
  _BOOL4 v39;
  std::string *v40;
  xpc_object_t v41;
  xpc_object_t v42;
  void *v43;
  const object *v44;
  CFTypeRef v45;
  CFTypeID v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_weak_owners;
  unint64_t v49;
  void *v50;
  void *v51;
  NSObject *v52;
  NSObject *v53;
  xpc_object_t v54;
  uint64_t v55;
  xpc_object_t v56;
  unint64_t *v57;
  unint64_t v58;
  xpc_object_t v59;
  void *v60;
  std::string *p_object;
  xpc_object_t v62;
  xpc_object_t v63;
  std::__shared_weak_count *v64;
  const void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::string object;
  void *v70;
  _QWORD *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  void *aBlock;
  xpc_object_t v75;
  CFTypeRef cf;
  CFTypeRef v77;
  std::string __dst;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = (_QWORD *)**a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(&object, 170, sizeof(object));
    v4 = (const void *)*MEMORY[0x1E0CFBF50];
    v5 = strlen((const char *)*MEMORY[0x1E0CFBF50]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        object.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&object.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 2;
            if (!v2[2])
            {
LABEL_109:
              if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
                operator delete(object.__r_.__value_.__l.__data_);
              goto LABEL_111;
            }
LABEL_43:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            size = HIBYTE(object.__r_.__value_.__r.__words[2]);
            if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = object.__r_.__value_.__l.__size_;
            if (size)
            {
              v31 = xpc_dictionary_create(0, 0, 0);
              if (v31 || (v31 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8A86C](v31) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v31);
                  v32 = v31;
                }
                else
                {
                  v32 = xpc_null_create();
                }
              }
              else
              {
                v32 = xpc_null_create();
                v31 = 0;
              }
              xpc_release(v31);
              v59 = xpc_null_create();
              v60 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
              xpc_release(v60);
              xpc_release(v59);
              if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_object = &object;
              else
                p_object = (std::string *)object.__r_.__value_.__r.__words[0];
              v62 = xpc_string_create((const char *)p_object);
              if (!v62)
                v62 = xpc_null_create();
              xpc_dictionary_set_value(v32, (const char *)*MEMORY[0x1E0CFB0D0], v62);
              v63 = xpc_null_create();
              xpc_release(v62);
              xpc_release(v63);
            }
            LODWORD(v77) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, (unsigned int *)&v77, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_109;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v29 = &object;
        if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v29 = (std::string *)object.__r_.__value_.__r.__words[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
        _os_log_impl(&dword_1BF335000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 2;
        if (!v2[2])
          goto LABEL_109;
        goto LABEL_43;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)&object.__r_.__value_.__l.__data_;
    *(_OWORD *)&object.__r_.__value_.__l.__data_ = 0uLL;
    v11 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_1ED70FD08;
  }
  v14 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v15 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
    {
LABEL_36:
      if (v18)
        goto LABEL_37;
LABEL_51:
      v33 = v3[11];
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        LOWORD(object.__r_.__value_.__l.__data_) = 0;
        _os_log_error_impl(&dword_1BF335000, v33, OS_LOG_TYPE_ERROR, "No radio driver", (uint8_t *)&object, 2u);
      }
      v34 = xpc_null_create();
      v35 = v2[2];
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
      v36 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, std::string *))(v35 + 16))(v35, 3760250880, &object);
      xpc_release(object.__r_.__value_.__l.__data_);
      xpc_release(v36);
      goto LABEL_96;
    }
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (v27)
    goto LABEL_36;
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (!v18)
    goto LABEL_51;
LABEL_37:
  value = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFBAF8]);
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value)
    xpc_retain(value);
  else
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  v37 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object.__r_.__value_.__l.__data_);
  v38 = v3[11];
  v39 = os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
  if (v37 == 1)
  {
    if (v39)
    {
      LOWORD(object.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1BF335000, v38, OS_LOG_TYPE_DEFAULT, "#I RF Self Test in FTM requested", (uint8_t *)&object, 2u);
    }
    goto LABEL_65;
  }
  if (v39)
  {
    LOWORD(object.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1BF335000, v38, OS_LOG_TYPE_DEFAULT, "#I RF Self Test in AST2 mode requested", (uint8_t *)&object, 2u);
  }
  memset(&object, 0, sizeof(object));
  ctu::cf::assign();
  __dst = object;
  if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = &__dst;
  else
    v40 = (std::string *)object.__r_.__value_.__r.__words[0];
  v41 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)v40);
  v42 = v41;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (v42)
      goto LABEL_65;
LABEL_93:
    v53 = v3[11];
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_1BF335000, v53, OS_LOG_TYPE_ERROR, "Ticket was not provided", (uint8_t *)&object, 2u);
    }
    v54 = xpc_null_create();
    v55 = v2[2];
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
    v56 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, std::string *))(v55 + 16))(v55, 3760250882, &object);
    xpc_release(object.__r_.__value_.__l.__data_);
    xpc_release(v56);
    goto LABEL_96;
  }
  if (!v41)
    goto LABEL_93;
LABEL_65:
  v43 = (void *)v2[1];
  v75 = v43;
  if (v43)
    xpc_retain(v43);
  else
    v75 = xpc_null_create();
  xpc::bridge((xpc *)&v75, v44);
  v45 = cf;
  if (cf && (v46 = CFGetTypeID(cf), v46 == CFDictionaryGetTypeID()))
  {
    v77 = v45;
    CFRetain(v45);
  }
  else
  {
    v77 = 0;
  }
  object.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
  object.__r_.__value_.__l.__size_ = 1174405120;
  object.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb7_ENK3__7clEv_block_invoke;
  v70 = &__block_descriptor_tmp_141_0;
  v71 = v3;
  v72 = v2[3];
  v47 = (std::__shared_weak_count *)v2[4];
  v73 = v47;
  if (v47)
  {
    p_shared_weak_owners = (unint64_t *)&v47->__shared_weak_owners_;
    do
      v49 = __ldxr(p_shared_weak_owners);
    while (__stxr(v49 + 1, p_shared_weak_owners));
  }
  v50 = (void *)v2[2];
  if (v50)
    v50 = _Block_copy(v50);
  aBlock = v50;
  v51 = _Block_copy(&object);
  v52 = v3[17];
  if (v52)
    dispatch_retain(v52);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v52;
  (*(void (**)(std::string::size_type, CFTypeRef *, std::string *))(*(_QWORD *)v18 + 256))(v18, &v77, &__dst);
  if (__dst.__r_.__value_.__l.__size_)
    dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
  if (__dst.__r_.__value_.__r.__words[0])
    _Block_release(__dst.__r_.__value_.__l.__data_);
  if (v77)
    CFRelease(v77);
  if (cf)
    CFRelease(cf);
  xpc_release(v75);
  if (aBlock)
    _Block_release(aBlock);
  if (v73)
    std::__shared_weak_count::__release_weak(v73);
LABEL_96:
  if (v17)
  {
    v57 = (unint64_t *)&v17->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_111:
  v64 = (std::__shared_weak_count *)v2[4];
  if (v64)
    std::__shared_weak_count::__release_weak(v64);
  v65 = (const void *)v2[2];
  if (v65)
    _Block_release(v65);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v66 = (std::__shared_weak_count *)a1[2];
  if (v66)
  {
    v67 = (unint64_t *)&v66->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  operator delete(a1);
}

void sub_1BF407D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,xpc_object_t a21,CFTypeRef a22,CFTypeRef cf,void *aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb7_ENK3__7clEv_block_invoke(_QWORD *a1, uint64_t *a2, ctu **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  NSObject *v13;
  uint64_t (*v14)(uint64_t);
  unsigned int v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unsigned int v18;
  std::__shared_weak_count *v20;
  _BYTE object[24];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    v20 = v8;
    if (v8)
    {
      v10 = v8;
      if (a1[5])
      {
        v11 = *a2;
        if (*a2)
          v12 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v12 = 0;
        if (v12)
        {
          v13 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)object = 138412290;
            *(_QWORD *)&object[4] = v11;
            _os_log_error_impl(&dword_1BF335000, v13, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
            v11 = *a2;
          }
        }
        if (v11)
          v14 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v14 = 0;
        if (v14)
          v15 = -534716416;
        else
          v15 = 0;
        v18 = v15;
        ctu::cf_to_xpc(*a3, v9);
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::object>(a1 + 7, &v18, (void **)object);
        xpc_release(*(xpc_object_t *)object);
      }
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_1BF4081E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, xpc_object_t object)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb8_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  xpc_object_t value;
  xpc_object_t v29;
  void *v30;
  const object *v31;
  xpc_object_t *v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  NSObject *v36;
  xpc_object_t v37;
  uint64_t v38;
  xpc_object_t v39;
  NSObject *v40;
  xpc_object_t v41;
  uint64_t v42;
  xpc_object_t v43;
  CFTypeRef v44;
  CFTypeID v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_weak_owners;
  unint64_t v48;
  void *v49;
  void *v50;
  NSObject *v51;
  unint64_t *v52;
  unint64_t v53;
  xpc_object_t v54;
  void *v55;
  xpc_object_t *v56;
  xpc_object_t v57;
  xpc_object_t v58;
  std::__shared_weak_count *v59;
  const void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  xpc_object_t object[6];
  std::__shared_weak_count *v65;
  void *aBlock;
  xpc_object_t v67;
  CFTypeRef cf;
  CFTypeRef v69;
  std::string __dst;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(object, 170, 24);
    v4 = (const void *)*MEMORY[0x1E0CFC010];
    v5 = strlen((const char *)*MEMORY[0x1E0CFC010]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        object[2] = (xpc_object_t)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)object = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 2;
            if (!v2[2])
            {
LABEL_98:
              if (SHIBYTE(object[2]) < 0)
                operator delete(object[0]);
              goto LABEL_100;
            }
LABEL_45:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v33 = (xpc_object_t)HIBYTE(object[2]);
            if (SHIBYTE(object[2]) < 0)
              v33 = object[1];
            if (v33)
            {
              v34 = xpc_dictionary_create(0, 0, 0);
              if (v34 || (v34 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8A86C](v34) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v34);
                  v35 = v34;
                }
                else
                {
                  v35 = xpc_null_create();
                }
              }
              else
              {
                v35 = xpc_null_create();
                v34 = 0;
              }
              xpc_release(v34);
              v54 = xpc_null_create();
              v55 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
              xpc_release(v55);
              xpc_release(v54);
              if (SHIBYTE(object[2]) >= 0)
                v56 = object;
              else
                v56 = (xpc_object_t *)object[0];
              v57 = xpc_string_create((const char *)v56);
              if (!v57)
                v57 = xpc_null_create();
              xpc_dictionary_set_value(v35, (const char *)*MEMORY[0x1E0CFB0D0], v57);
              v58 = xpc_null_create();
              xpc_release(v57);
              xpc_release(v58);
            }
            LODWORD(v69) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, (unsigned int *)&v69, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_98;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v32 = object;
        if (SHIBYTE(object[2]) < 0)
          v32 = (xpc_object_t *)object[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
        _os_log_impl(&dword_1BF335000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 2;
        if (!v2[2])
          goto LABEL_98;
        goto LABEL_45;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)object;
    object[0] = 0;
    object[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_1ED70FD08;
  }
  v14 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v15 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
    {
LABEL_36:
      if (v18)
        goto LABEL_37;
LABEL_53:
      v36 = v3[11];
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        LOWORD(object[0]) = 0;
        _os_log_error_impl(&dword_1BF335000, v36, OS_LOG_TYPE_ERROR, "No radio driver", (uint8_t *)object, 2u);
      }
      v37 = xpc_null_create();
      v38 = v2[2];
      object[0] = v37;
      v39 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v38 + 16))(v38, 3760250880, object);
      xpc_release(object[0]);
      xpc_release(v39);
      goto LABEL_84;
    }
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (v27)
    goto LABEL_36;
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (!v18)
    goto LABEL_53;
LABEL_37:
  memset(object, 0, 24);
  ctu::cf::assign();
  memset(&__dst, 0, sizeof(__dst));
  value = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)&__dst);
  v29 = value;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (v29)
      goto LABEL_39;
LABEL_57:
    v40 = v3[11];
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object[0]) = 0;
      _os_log_error_impl(&dword_1BF335000, v40, OS_LOG_TYPE_ERROR, "Ticket was not provided", (uint8_t *)object, 2u);
    }
    v41 = xpc_null_create();
    v42 = v2[2];
    object[0] = v41;
    v43 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v42 + 16))(v42, 3760250882, object);
    xpc_release(object[0]);
    xpc_release(v43);
    goto LABEL_84;
  }
  if (!value)
    goto LABEL_57;
LABEL_39:
  v30 = (void *)v2[1];
  v67 = v30;
  if (v30)
    xpc_retain(v30);
  else
    v67 = xpc_null_create();
  xpc::bridge((xpc *)&v67, v31);
  v44 = cf;
  if (cf && (v45 = CFGetTypeID(cf), v45 == CFDictionaryGetTypeID()))
  {
    v69 = v44;
    CFRetain(v44);
  }
  else
  {
    v69 = 0;
  }
  object[0] = (xpc_object_t)MEMORY[0x1E0C809B0];
  object[1] = (xpc_object_t)1174405120;
  object[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb8_ENK3__8clEv_block_invoke;
  object[3] = &__block_descriptor_tmp_142_0;
  object[4] = v3;
  object[5] = *((xpc_object_t *)v2 + 3);
  v46 = (std::__shared_weak_count *)v2[4];
  v65 = v46;
  if (v46)
  {
    p_shared_weak_owners = (unint64_t *)&v46->__shared_weak_owners_;
    do
      v48 = __ldxr(p_shared_weak_owners);
    while (__stxr(v48 + 1, p_shared_weak_owners));
  }
  v49 = (void *)v2[2];
  if (v49)
    v49 = _Block_copy(v49);
  aBlock = v49;
  v50 = _Block_copy(object);
  v51 = v3[17];
  if (v51)
    dispatch_retain(v51);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v51;
  (*(void (**)(std::string::size_type, CFTypeRef *, std::string *))(*(_QWORD *)v18 + 240))(v18, &v69, &__dst);
  if (__dst.__r_.__value_.__l.__size_)
    dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
  if (__dst.__r_.__value_.__r.__words[0])
    _Block_release(__dst.__r_.__value_.__l.__data_);
  if (v69)
    CFRelease(v69);
  if (cf)
    CFRelease(cf);
  xpc_release(v67);
  if (aBlock)
    _Block_release(aBlock);
  if (v65)
    std::__shared_weak_count::__release_weak(v65);
LABEL_84:
  if (v17)
  {
    v52 = (unint64_t *)&v17->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_100:
  v59 = (std::__shared_weak_count *)v2[4];
  if (v59)
    std::__shared_weak_count::__release_weak(v59);
  v60 = (const void *)v2[2];
  if (v60)
    _Block_release(v60);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v61 = (std::__shared_weak_count *)a1[2];
  if (v61)
  {
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  operator delete(a1);
}

void sub_1BF4089FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,xpc_object_t a21,CFTypeRef a22,CFTypeRef cf,void *aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb8_ENK3__8clEv_block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  xpc_object_t v13;
  uint64_t v14;
  xpc_object_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _BYTE object[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *a2;
        if (*a2)
          v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v9 = 0;
        if (v9)
        {
          v10 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)object = 138412290;
            *(_QWORD *)&object[4] = v8;
            _os_log_error_impl(&dword_1BF335000, v10, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
            v8 = *a2;
          }
        }
        if (v8)
          v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v11 = 0;
        if (v11)
          v12 = 3760250880;
        else
          v12 = 0;
        v13 = xpc_null_create();
        v14 = a1[7];
        *(_QWORD *)object = v13;
        v15 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, _BYTE *))(v14 + 16))(v14, v12, object);
        xpc_release(*(xpc_object_t *)object);
        xpc_release(v15);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF408E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb9_E3__9EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  xpc_object_t *v25;
  uint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  xpc_object_t v29;
  uint64_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  uint64_t v36;
  xpc_object_t v37;
  unint64_t *v38;
  unint64_t v39;
  xpc_object_t v40;
  void *v41;
  xpc_object_t *v42;
  xpc_object_t v43;
  xpc_object_t v44;
  std::__shared_weak_count *v45;
  const void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unsigned int v50;
  xpc_object_t object[4];
  std::string __dst;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = (_QWORD *)**a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(object, 170, 24);
    v4 = (const void *)*MEMORY[0x1E0CFB898];
    v5 = strlen((const char *)*MEMORY[0x1E0CFB898]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        object[2] = (xpc_object_t)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)object = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = object;
            if (SHIBYTE(object[2]) < 0)
              v25 = (xpc_object_t *)object[0];
            LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
            _os_log_impl(&dword_1BF335000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
            v26 = v2 + 1;
            if (!v2[1])
              goto LABEL_65;
            goto LABEL_42;
          }
        }
        else
        {
          v24 = v3[11];
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v26 = v2 + 1;
        if (!v2[1])
        {
LABEL_65:
          if (SHIBYTE(object[2]) < 0)
            operator delete(object[0]);
          goto LABEL_67;
        }
LABEL_42:
        __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
        v32 = (xpc_object_t)HIBYTE(object[2]);
        if (SHIBYTE(object[2]) < 0)
          v32 = object[1];
        if (v32)
        {
          v33 = xpc_dictionary_create(0, 0, 0);
          if (v33 || (v33 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x1C3B8A86C](v33) == MEMORY[0x1E0C812F8])
            {
              xpc_retain(v33);
              v34 = v33;
            }
            else
            {
              v34 = xpc_null_create();
            }
          }
          else
          {
            v34 = xpc_null_create();
            v33 = 0;
          }
          xpc_release(v33);
          v40 = xpc_null_create();
          v41 = (void *)__dst.__r_.__value_.__r.__words[0];
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
          xpc_release(v41);
          xpc_release(v40);
          if (SHIBYTE(object[2]) >= 0)
            v42 = object;
          else
            v42 = (xpc_object_t *)object[0];
          v43 = xpc_string_create((const char *)v42);
          if (!v43)
            v43 = xpc_null_create();
          xpc_dictionary_set_value(v34, (const char *)*MEMORY[0x1E0CFB0D0], v43);
          v44 = xpc_null_create();
          xpc_release(v43);
          xpc_release(v44);
        }
        v50 = -534716415;
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v26, &v50, (void **)&__dst.__r_.__value_.__l.__data_);
        xpc_release(__dst.__r_.__value_.__l.__data_);
        goto LABEL_65;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)object;
    object[0] = 0;
    object[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_1ED70FD08;
  }
  v14 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v15 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
      goto LABEL_38;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_38;
  }
  v27 = (unint64_t *)&v14->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_39;
LABEL_50:
    v35 = xpc_null_create();
    v36 = v2[1];
    object[0] = v35;
    v37 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v36 + 16))(v36, 3760250880, object);
    xpc_release(object[0]);
    xpc_release(v37);
    goto LABEL_51;
  }
LABEL_38:
  if (!v18)
    goto LABEL_50;
LABEL_39:
  (*(void (**)(std::string::size_type, _QWORD))(*(_QWORD *)v18 + 312))(v18, 0);
  (*(void (**)(std::string::size_type, uint64_t))(*(_QWORD *)v18 + 312))(v18, 1);
  (*(void (**)(std::string::size_type))(*(_QWORD *)v18 + 320))(v18);
  v29 = xpc_null_create();
  v30 = v2[1];
  object[0] = v29;
  v31 = xpc_null_create();
  (*(void (**)(uint64_t, _QWORD, xpc_object_t *))(v30 + 16))(v30, 0, object);
  xpc_release(object[0]);
  xpc_release(v31);
LABEL_51:
  if (v17)
  {
    v38 = (unint64_t *)&v17->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_67:
  v45 = (std::__shared_weak_count *)v2[3];
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  v46 = (const void *)v2[1];
  if (v46)
    _Block_release(v46);
  operator delete(v2);
  v47 = (std::__shared_weak_count *)a1[2];
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  operator delete(a1);
}

void sub_1BF409474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, xpc_object_t __p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb10_E4__10EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::string::size_type v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  std::string *v24;
  __int128 v25;
  NSObject *v26;
  uint64_t *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_weak_owners;
  unint64_t v32;
  void *v33;
  void *v34;
  NSObject *v35;
  void *v36;
  const object *v37;
  _BYTE *v38;
  uint64_t v39;
  xpc_object_t v40;
  xpc_object_t v41;
  xpc_object_t v42;
  uint64_t v43;
  xpc_object_t v44;
  CFTypeRef v45;
  CFTypeID v46;
  unint64_t *v47;
  unint64_t v48;
  xpc_object_t v49;
  void *v50;
  const char *v51;
  xpc_object_t v52;
  xpc_object_t v53;
  std::__shared_weak_count *v54;
  const void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  xpc_object_t object;
  CFTypeRef cf;
  CFTypeRef v61;
  _BYTE aBlock[24];
  void *v63;
  _QWORD *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  void *v67;
  std::string __dst;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = (_QWORD *)**a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(aBlock, 170, sizeof(aBlock));
    v4 = (const void *)*MEMORY[0x1E0CFB5D8];
    v5 = strlen((const char *)*MEMORY[0x1E0CFB5D8]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v21 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v21 = v5 | 7;
      v22 = v21 + 1;
      p_dst = (std::string *)operator new(v21 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_33:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v23 = (char *)operator new(0x28uLL);
        strcpy(v23, " rejected; ABM is shutting down ");
        v24 = std::string::append(&__dst, v23, 0x20uLL);
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        *(_QWORD *)&aBlock[16] = *((_QWORD *)&v24->__r_.__value_.__l + 2);
        *(_OWORD *)aBlock = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        operator delete(v23);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v26 = v3[11];
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
LABEL_35:
            v27 = v2 + 1;
            if (!v2[1])
            {
LABEL_95:
              if ((aBlock[23] & 0x80000000) != 0)
                operator delete(*(void **)aBlock);
              goto LABEL_97;
            }
LABEL_55:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v39 = aBlock[23];
            if (aBlock[23] < 0)
              v39 = *(_QWORD *)&aBlock[8];
            if (v39)
            {
              v40 = xpc_dictionary_create(0, 0, 0);
              if (v40 || (v40 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8A86C](v40) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v40);
                  v41 = v40;
                }
                else
                {
                  v41 = xpc_null_create();
                }
              }
              else
              {
                v41 = xpc_null_create();
                v40 = 0;
              }
              xpc_release(v40);
              v49 = xpc_null_create();
              v50 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
              xpc_release(v50);
              xpc_release(v49);
              if (aBlock[23] >= 0)
                v51 = aBlock;
              else
                v51 = *(const char **)aBlock;
              v52 = xpc_string_create(v51);
              if (!v52)
                v52 = xpc_null_create();
              xpc_dictionary_set_value(v41, (const char *)*MEMORY[0x1E0CFB0D0], v52);
              v53 = xpc_null_create();
              xpc_release(v52);
              xpc_release(v53);
            }
            LODWORD(v61) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v27, (unsigned int *)&v61, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_95;
          }
        }
        else
        {
          v26 = v3[11];
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
            goto LABEL_35;
        }
        v38 = aBlock;
        if (aBlock[23] < 0)
          v38 = *(_BYTE **)aBlock;
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
        _os_log_impl(&dword_1BF335000, v26, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v27 = v2 + 1;
        if (!v2[1])
          goto LABEL_95;
        goto LABEL_55;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_33;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)aBlock;
    *(_OWORD *)aBlock = 0uLL;
    v11 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (*(_QWORD *)&aBlock[8])
    {
      v14 = (unint64_t *)(*(_QWORD *)&aBlock[8] + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)&aBlock[8] + 16))(*(_QWORD *)&aBlock[8]);
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&aBlock[8]);
      }
    }
    v9 = off_1ED70FD08;
  }
  v16 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v17 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v19 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v19)
      v20 = __dst.__r_.__value_.__r.__words[0];
    else
      v20 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v16)
      goto LABEL_41;
  }
  else
  {
    v19 = 0;
    v20 = 0;
    if (!v16)
      goto LABEL_41;
  }
  v28 = (unint64_t *)&v16->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (v20)
      goto LABEL_42;
    goto LABEL_63;
  }
LABEL_41:
  if (v20)
  {
LABEL_42:
    *(_QWORD *)aBlock = MEMORY[0x1E0C809B0];
    *(_QWORD *)&aBlock[8] = 1174405120;
    *(_QWORD *)&aBlock[16] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb10_ENK4__10clEv_block_invoke;
    v63 = &__block_descriptor_tmp_143_1;
    v64 = v3;
    v65 = v2[2];
    v30 = (std::__shared_weak_count *)v2[3];
    v66 = v30;
    if (v30)
    {
      p_shared_weak_owners = (unint64_t *)&v30->__shared_weak_owners_;
      do
        v32 = __ldxr(p_shared_weak_owners);
      while (__stxr(v32 + 1, p_shared_weak_owners));
    }
    v33 = (void *)v2[1];
    if (v33)
      v33 = _Block_copy(v33);
    v67 = v33;
    v34 = _Block_copy(aBlock);
    v35 = v3[17];
    if (v35)
      dispatch_retain(v35);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
    v36 = (void *)v2[4];
    object = v36;
    if (v36)
      xpc_retain(v36);
    else
      object = xpc_null_create();
    xpc::bridge((xpc *)&object, v37);
    v45 = cf;
    if (cf && (v46 = CFGetTypeID(cf), v46 == CFDictionaryGetTypeID()))
    {
      v61 = v45;
      CFRetain(v45);
    }
    else
    {
      v61 = 0;
    }
    (*(void (**)(std::string::size_type, std::string *, CFTypeRef *))(*(_QWORD *)v20 + 344))(v20, &__dst, &v61);
    if (v61)
      CFRelease(v61);
    if (cf)
      CFRelease(cf);
    xpc_release(object);
    if (__dst.__r_.__value_.__l.__size_)
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    if (__dst.__r_.__value_.__r.__words[0])
      _Block_release(__dst.__r_.__value_.__l.__data_);
    if (v67)
      _Block_release(v67);
    if (v66)
      std::__shared_weak_count::__release_weak(v66);
    goto LABEL_81;
  }
LABEL_63:
  v42 = xpc_null_create();
  v43 = v2[1];
  *(_QWORD *)aBlock = v42;
  v44 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, _BYTE *))(v43 + 16))(v43, 3760250880, aBlock);
  xpc_release(*(xpc_object_t *)aBlock);
  xpc_release(v44);
LABEL_81:
  if (v19)
  {
    v47 = (unint64_t *)&v19->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
LABEL_97:
  xpc_release((xpc_object_t)v2[4]);
  v2[4] = 0;
  v54 = (std::__shared_weak_count *)v2[3];
  if (v54)
    std::__shared_weak_count::__release_weak(v54);
  v55 = (const void *)v2[1];
  if (v55)
    _Block_release(v55);
  operator delete(v2);
  v56 = (std::__shared_weak_count *)a1[2];
  if (v56)
  {
    v57 = (unint64_t *)&v56->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  operator delete(a1);
}

void sub_1BF409D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, CFTypeRef a11, CFTypeRef cf, xpc_object_t object, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,void *a23,xpc_object_t aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb10_ENK4__10clEv_block_invoke(_QWORD *a1, uint64_t *a2, ctu **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  NSObject *v13;
  uint64_t (*v14)(uint64_t);
  unsigned int v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  ctu *v18;
  uint64_t (*v19)(uint64_t);
  NSObject *v20;
  unsigned int v21;
  std::__shared_weak_count *v23;
  _BYTE object[24];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    v23 = v8;
    if (v8)
    {
      v10 = v8;
      if (a1[5])
      {
        v11 = *a2;
        if (*a2)
          v12 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v12 = 0;
        if (v12)
        {
          v13 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)object = 138412290;
            *(_QWORD *)&object[4] = v11;
            _os_log_error_impl(&dword_1BF335000, v13, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
          }
        }
        else
        {
          v18 = *a3;
          v19 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          if (!*a3)
            v19 = 0;
          if (v19)
          {
            v20 = *(NSObject **)(v7 + 88);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)object = 138412290;
              *(_QWORD *)&object[4] = v18;
              _os_log_impl(&dword_1BF335000, v20, OS_LOG_TYPE_DEFAULT, "#I Get Antenna Port Info: %@", object, 0xCu);
            }
          }
        }
        if (*a2)
          v14 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v14 = 0;
        if (v14)
          v15 = -534716416;
        else
          v15 = 0;
        v21 = v15;
        ctu::cf_to_xpc(*a3, v9);
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::object>(a1 + 7, &v21, (void **)object);
        xpc_release(*(xpc_object_t *)object);
      }
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_1BF40A178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, xpc_object_t object)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb11_E4__11EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;
  const object *v29;
  xpc_object_t *v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  uint64_t v35;
  xpc_object_t v36;
  CFTypeRef v37;
  CFTypeID v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_weak_owners;
  unint64_t v41;
  void *v42;
  void *v43;
  NSObject *v44;
  unint64_t *v45;
  unint64_t v46;
  xpc_object_t v47;
  void *v48;
  xpc_object_t *v49;
  xpc_object_t v50;
  xpc_object_t v51;
  std::__shared_weak_count *v52;
  const void *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  xpc_object_t object[6];
  std::__shared_weak_count *v58;
  void *aBlock;
  xpc_object_t v60;
  CFTypeRef cf;
  CFTypeRef v62;
  std::string __dst;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(object, 170, 24);
    v4 = (const void *)*MEMORY[0x1E0CFB5E8];
    v5 = strlen((const char *)*MEMORY[0x1E0CFB5E8]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        object[2] = (xpc_object_t)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)object = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 1;
            if (!v2[1])
            {
LABEL_90:
              if (SHIBYTE(object[2]) < 0)
                operator delete(object[0]);
              goto LABEL_92;
            }
LABEL_43:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v31 = (xpc_object_t)HIBYTE(object[2]);
            if (SHIBYTE(object[2]) < 0)
              v31 = object[1];
            if (v31)
            {
              v32 = xpc_dictionary_create(0, 0, 0);
              if (v32 || (v32 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8A86C](v32) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v32);
                  v33 = v32;
                }
                else
                {
                  v33 = xpc_null_create();
                }
              }
              else
              {
                v33 = xpc_null_create();
                v32 = 0;
              }
              xpc_release(v32);
              v47 = xpc_null_create();
              v48 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
              xpc_release(v48);
              xpc_release(v47);
              if (SHIBYTE(object[2]) >= 0)
                v49 = object;
              else
                v49 = (xpc_object_t *)object[0];
              v50 = xpc_string_create((const char *)v49);
              if (!v50)
                v50 = xpc_null_create();
              xpc_dictionary_set_value(v33, (const char *)*MEMORY[0x1E0CFB0D0], v50);
              v51 = xpc_null_create();
              xpc_release(v50);
              xpc_release(v51);
            }
            LODWORD(v62) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, (unsigned int *)&v62, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_90;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v30 = object;
        if (SHIBYTE(object[2]) < 0)
          v30 = (xpc_object_t *)object[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
        _os_log_impl(&dword_1BF335000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 1;
        if (!v2[1])
          goto LABEL_90;
        goto LABEL_43;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)object;
    object[0] = 0;
    object[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_1ED70FD08;
  }
  v14 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v15 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
      goto LABEL_36;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_37;
    goto LABEL_51;
  }
LABEL_36:
  if (v18)
  {
LABEL_37:
    v28 = (void *)v2[4];
    v60 = v28;
    if (v28)
      xpc_retain(v28);
    else
      v60 = xpc_null_create();
    xpc::bridge((xpc *)&v60, v29);
    v37 = cf;
    if (cf && (v38 = CFGetTypeID(cf), v38 == CFDictionaryGetTypeID()))
    {
      v62 = v37;
      CFRetain(v37);
    }
    else
    {
      v62 = 0;
    }
    object[0] = (xpc_object_t)MEMORY[0x1E0C809B0];
    object[1] = (xpc_object_t)1174405120;
    object[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb11_ENK4__11clEv_block_invoke;
    object[3] = &__block_descriptor_tmp_144_0;
    object[4] = v3;
    object[5] = *((xpc_object_t *)v2 + 2);
    v39 = (std::__shared_weak_count *)v2[3];
    v58 = v39;
    if (v39)
    {
      p_shared_weak_owners = (unint64_t *)&v39->__shared_weak_owners_;
      do
        v41 = __ldxr(p_shared_weak_owners);
      while (__stxr(v41 + 1, p_shared_weak_owners));
    }
    v42 = (void *)v2[1];
    if (v42)
      v42 = _Block_copy(v42);
    aBlock = v42;
    v43 = _Block_copy(object);
    v44 = v3[17];
    if (v44)
      dispatch_retain(v44);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v44;
    (*(void (**)(std::string::size_type, CFTypeRef *, std::string *))(*(_QWORD *)v18 + 352))(v18, &v62, &__dst);
    if (__dst.__r_.__value_.__l.__size_)
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    if (__dst.__r_.__value_.__r.__words[0])
      _Block_release(__dst.__r_.__value_.__l.__data_);
    if (v62)
      CFRelease(v62);
    if (cf)
      CFRelease(cf);
    xpc_release(v60);
    if (aBlock)
      _Block_release(aBlock);
    if (v58)
      std::__shared_weak_count::__release_weak(v58);
    goto LABEL_76;
  }
LABEL_51:
  v34 = xpc_null_create();
  v35 = v2[1];
  object[0] = v34;
  v36 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v35 + 16))(v35, 3760250880, object);
  xpc_release(object[0]);
  xpc_release(v36);
LABEL_76:
  if (v17)
  {
    v45 = (unint64_t *)&v17->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_92:
  xpc_release((xpc_object_t)v2[4]);
  v2[4] = 0;
  v52 = (std::__shared_weak_count *)v2[3];
  if (v52)
    std::__shared_weak_count::__release_weak(v52);
  v53 = (const void *)v2[1];
  if (v53)
    _Block_release(v53);
  operator delete(v2);
  v54 = (std::__shared_weak_count *)a1[2];
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  operator delete(a1);
}

void sub_1BF40A870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,xpc_object_t a21,CFTypeRef a22,CFTypeRef cf,xpc_object_t aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb11_ENK4__11clEv_block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  xpc_object_t v13;
  uint64_t v14;
  xpc_object_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _BYTE object[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *a2;
        if (*a2)
          v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v9 = 0;
        if (v9)
        {
          v10 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)object = 138412290;
            *(_QWORD *)&object[4] = v8;
            _os_log_error_impl(&dword_1BF335000, v10, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
            v8 = *a2;
          }
        }
        if (v8)
          v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v11 = 0;
        if (v11)
          v12 = 3760250880;
        else
          v12 = 0;
        v13 = xpc_null_create();
        v14 = a1[7];
        *(_QWORD *)object = v13;
        v15 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, _BYTE *))(v14 + 16))(v14, v12, object);
        xpc_release(*(xpc_object_t *)object);
        xpc_release(v15);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF40AC64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb12_E4__12EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;
  const object *v29;
  xpc_object_t *v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  uint64_t v35;
  xpc_object_t v36;
  CFTypeRef v37;
  CFTypeID v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_weak_owners;
  unint64_t v41;
  void *v42;
  void *v43;
  NSObject *v44;
  unint64_t *v45;
  unint64_t v46;
  xpc_object_t v47;
  void *v48;
  xpc_object_t *v49;
  xpc_object_t v50;
  xpc_object_t v51;
  std::__shared_weak_count *v52;
  const void *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  xpc_object_t object[6];
  std::__shared_weak_count *v58;
  void *aBlock;
  xpc_object_t v60;
  CFTypeRef cf;
  CFTypeRef v62;
  std::string __dst;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(object, 170, 24);
    v4 = (const void *)*MEMORY[0x1E0CFB050];
    v5 = strlen((const char *)*MEMORY[0x1E0CFB050]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        object[2] = (xpc_object_t)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)object = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 1;
            if (!v2[1])
            {
LABEL_90:
              if (SHIBYTE(object[2]) < 0)
                operator delete(object[0]);
              goto LABEL_92;
            }
LABEL_43:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v31 = (xpc_object_t)HIBYTE(object[2]);
            if (SHIBYTE(object[2]) < 0)
              v31 = object[1];
            if (v31)
            {
              v32 = xpc_dictionary_create(0, 0, 0);
              if (v32 || (v32 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8A86C](v32) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v32);
                  v33 = v32;
                }
                else
                {
                  v33 = xpc_null_create();
                }
              }
              else
              {
                v33 = xpc_null_create();
                v32 = 0;
              }
              xpc_release(v32);
              v47 = xpc_null_create();
              v48 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
              xpc_release(v48);
              xpc_release(v47);
              if (SHIBYTE(object[2]) >= 0)
                v49 = object;
              else
                v49 = (xpc_object_t *)object[0];
              v50 = xpc_string_create((const char *)v49);
              if (!v50)
                v50 = xpc_null_create();
              xpc_dictionary_set_value(v33, (const char *)*MEMORY[0x1E0CFB0D0], v50);
              v51 = xpc_null_create();
              xpc_release(v50);
              xpc_release(v51);
            }
            LODWORD(v62) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, (unsigned int *)&v62, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_90;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v30 = object;
        if (SHIBYTE(object[2]) < 0)
          v30 = (xpc_object_t *)object[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
        _os_log_impl(&dword_1BF335000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 1;
        if (!v2[1])
          goto LABEL_90;
        goto LABEL_43;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)object;
    object[0] = 0;
    object[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_1ED70FD08;
  }
  v14 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v15 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
      goto LABEL_36;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_37;
    goto LABEL_51;
  }
LABEL_36:
  if (v18)
  {
LABEL_37:
    v28 = (void *)v2[4];
    v60 = v28;
    if (v28)
      xpc_retain(v28);
    else
      v60 = xpc_null_create();
    xpc::bridge((xpc *)&v60, v29);
    v37 = cf;
    if (cf && (v38 = CFGetTypeID(cf), v38 == CFDictionaryGetTypeID()))
    {
      v62 = v37;
      CFRetain(v37);
    }
    else
    {
      v62 = 0;
    }
    object[0] = (xpc_object_t)MEMORY[0x1E0C809B0];
    object[1] = (xpc_object_t)1174405120;
    object[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb12_ENK4__12clEv_block_invoke;
    object[3] = &__block_descriptor_tmp_145;
    object[4] = v3;
    object[5] = *((xpc_object_t *)v2 + 2);
    v39 = (std::__shared_weak_count *)v2[3];
    v58 = v39;
    if (v39)
    {
      p_shared_weak_owners = (unint64_t *)&v39->__shared_weak_owners_;
      do
        v41 = __ldxr(p_shared_weak_owners);
      while (__stxr(v41 + 1, p_shared_weak_owners));
    }
    v42 = (void *)v2[1];
    if (v42)
      v42 = _Block_copy(v42);
    aBlock = v42;
    v43 = _Block_copy(object);
    v44 = v3[17];
    if (v44)
      dispatch_retain(v44);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v44;
    (*(void (**)(std::string::size_type, CFTypeRef *, std::string *))(*(_QWORD *)v18 + 360))(v18, &v62, &__dst);
    if (__dst.__r_.__value_.__l.__size_)
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    if (__dst.__r_.__value_.__r.__words[0])
      _Block_release(__dst.__r_.__value_.__l.__data_);
    if (v62)
      CFRelease(v62);
    if (cf)
      CFRelease(cf);
    xpc_release(v60);
    if (aBlock)
      _Block_release(aBlock);
    if (v58)
      std::__shared_weak_count::__release_weak(v58);
    goto LABEL_76;
  }
LABEL_51:
  v34 = xpc_null_create();
  v35 = v2[1];
  object[0] = v34;
  v36 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v35 + 16))(v35, 3760250880, object);
  xpc_release(object[0]);
  xpc_release(v36);
LABEL_76:
  if (v17)
  {
    v45 = (unint64_t *)&v17->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_92:
  xpc_release((xpc_object_t)v2[4]);
  v2[4] = 0;
  v52 = (std::__shared_weak_count *)v2[3];
  if (v52)
    std::__shared_weak_count::__release_weak(v52);
  v53 = (const void *)v2[1];
  if (v53)
    _Block_release(v53);
  operator delete(v2);
  v54 = (std::__shared_weak_count *)a1[2];
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  operator delete(a1);
}

void sub_1BF40B374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,xpc_object_t a21,CFTypeRef a22,CFTypeRef cf,xpc_object_t aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb12_ENK4__12clEv_block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  xpc_object_t v13;
  uint64_t v14;
  xpc_object_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _BYTE object[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *a2;
        if (*a2)
          v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v9 = 0;
        if (v9)
        {
          v10 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)object = 138412290;
            *(_QWORD *)&object[4] = v8;
            _os_log_error_impl(&dword_1BF335000, v10, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
            v8 = *a2;
          }
        }
        if (v8)
          v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v11 = 0;
        if (v11)
          v12 = 3760250880;
        else
          v12 = 0;
        v13 = xpc_null_create();
        v14 = a1[7];
        *(_QWORD *)object = v13;
        v15 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, _BYTE *))(v14 + 16))(v14, v12, object);
        xpc_release(*(xpc_object_t *)object);
        xpc_release(v15);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF40B768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb13_E4__13EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  void *v31;
  void *v32;
  NSObject *v33;
  unint64_t *v34;
  unint64_t v35;
  void **v36;
  void *v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  void *v41;
  void **v42;
  xpc_object_t v43;
  xpc_object_t v44;
  std::__shared_weak_count *v45;
  const void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  void *__p[5];
  std::__shared_weak_count *v51;
  void *aBlock;
  unsigned int v53;
  std::string __dst;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    v4 = (const void *)*MEMORY[0x1E0CFBE38];
    v5 = strlen((const char *)*MEMORY[0x1E0CFBE38]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        __p[2] = (void *)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 1;
            if (!v2[1])
            {
LABEL_79:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              goto LABEL_81;
            }
LABEL_61:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v37 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v37 = __p[1];
            if (v37)
            {
              v38 = xpc_dictionary_create(0, 0, 0);
              if (v38 || (v38 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8A86C](v38) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v38);
                  v39 = v38;
                }
                else
                {
                  v39 = xpc_null_create();
                }
              }
              else
              {
                v39 = xpc_null_create();
                v38 = 0;
              }
              xpc_release(v38);
              v40 = xpc_null_create();
              v41 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
              xpc_release(v41);
              xpc_release(v40);
              if (SHIBYTE(__p[2]) >= 0)
                v42 = __p;
              else
                v42 = (void **)__p[0];
              v43 = xpc_string_create((const char *)v42);
              if (!v43)
                v43 = xpc_null_create();
              xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x1E0CFB0D0], v43);
              v44 = xpc_null_create();
              xpc_release(v43);
              xpc_release(v44);
            }
            v53 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, &v53, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_79;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v36 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v36 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
        _os_log_impl(&dword_1BF335000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 1;
        if (!v2[1])
          goto LABEL_79;
        goto LABEL_61;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_1ED70FD08;
  }
  v14 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v15 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
      goto LABEL_36;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_37;
    goto LABEL_52;
  }
LABEL_36:
  if (v18)
  {
LABEL_37:
    __p[0] = (void *)MEMORY[0x1E0C809B0];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb13_ENK4__13clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_146;
    __p[4] = *((void **)v2 + 2);
    v28 = (std::__shared_weak_count *)v2[3];
    v51 = v28;
    if (v28)
    {
      p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
      do
        v30 = __ldxr(p_shared_weak_owners);
      while (__stxr(v30 + 1, p_shared_weak_owners));
    }
    v31 = (void *)v2[1];
    if (v31)
      v31 = _Block_copy(v31);
    aBlock = v31;
    v32 = _Block_copy(__p);
    v33 = v3[17];
    if (v33)
      dispatch_retain(v33);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
    (*(void (**)(std::string::size_type, std::string *))(*(_QWORD *)v18 + 384))(v18, &__dst);
    if (__dst.__r_.__value_.__l.__size_)
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    if (__dst.__r_.__value_.__r.__words[0])
      _Block_release(__dst.__r_.__value_.__l.__data_);
    if (aBlock)
      _Block_release(aBlock);
    if (v51)
      std::__shared_weak_count::__release_weak(v51);
  }
LABEL_52:
  if (v17)
  {
    v34 = (unint64_t *)&v17->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_81:
  v45 = (std::__shared_weak_count *)v2[3];
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  v46 = (const void *)v2[1];
  if (v46)
    _Block_release(v46);
  operator delete(v2);
  v47 = (std::__shared_weak_count *)a1[2];
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  operator delete(a1);
}

void sub_1BF40BDAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb13_ENK4__13clEv_block_invoke(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  xpc_object_t v8;
  xpc_object_t v9;
  std::__shared_weak_count *v10;
  xpc_object_t v11;
  uint64_t v12;
  uint64_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  unsigned int v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unsigned int v19;
  xpc_object_t xdict;
  std::__shared_weak_count *v22;

  v4 = (std::__shared_weak_count *)a1[5];
  if (!v4)
    return;
  v7 = std::__shared_weak_count::lock(v4);
  v22 = v7;
  if (!v7)
    return;
  if (!a1[4])
  {
    v10 = v7;
LABEL_22:
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  v8 = xpc_dictionary_create(0, 0, 0);
  v9 = v8;
  if (v8)
  {
    xdict = v8;
  }
  else
  {
    v9 = xpc_null_create();
    xdict = v9;
    if (!v9)
    {
      v11 = xpc_null_create();
      v9 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x1C3B8A86C](v9) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v9);
    goto LABEL_13;
  }
  v11 = xpc_null_create();
LABEL_12:
  xdict = v11;
LABEL_13:
  xpc_release(v9);
  v12 = MEMORY[0x1C3B8A86C](*a3);
  v13 = MEMORY[0x1E0C81350];
  if (v12 != MEMORY[0x1E0C81350])
  {
    v14 = (xpc_object_t)*a3;
    if (v14)
      xpc_retain(v14);
    else
      v14 = xpc_null_create();
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB400], v14);
    v15 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v15);
  }
  if (MEMORY[0x1C3B8A86C](*a2) == v13)
    v16 = 0;
  else
    v16 = -534716416;
  v19 = v16;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v19, &xdict);
  xpc_release(xdict);
  v10 = v22;
  if (v22)
    goto LABEL_22;
}

void sub_1BF40C174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
  xpc_release(object);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::initialize(dispatch::group_session)::$_0>(RadioModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  RadioModule **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(RadioModule ***)a1;
  RadioModule::finishInitialization_sync(**(RadioModule ***)a1);
  operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete((void *)a1);
  }
  else
  {
LABEL_5:
    operator delete((void *)a1);
  }
}

void sub_1BF40C22C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::setPreference<__CFDictionary *>(std::string const&,__CFDictionary *)::{lambda(void)#1}>(os_unfair_lock_s *a1, uint64_t *a2)
{
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  const char *v7;
  _BOOL8 v8;
  const __CFString *v10;

  v3 = a1 + 4;
  os_unfair_lock_lock(a1 + 4);
  v4 = a2[2];
  v5 = *a2;
  v6 = *(const void **)a2[1];
  if (*(char *)(v5 + 23) >= 0)
    v7 = (const char *)v5;
  else
    v7 = *(const char **)v5;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v10, v7);
  v8 = ctu::cf::plist_adapter::set<__CFArray *>(v4, v6, v10, 1);
  MEMORY[0x1C3B8936C](&v10);
  os_unfair_lock_unlock(v3);
  return v8;
}

uint64_t ___ZN3ctu20SharedSynchronizableI11RadioModuleE13connect_eventIN5boost8signals26signalIFvjENS5_19optional_last_valueIvEEiNSt3__14lessIiEENS4_8functionIS7_EENSD_IFvRKNS5_10connectionEjEEENS5_5mutexEEES1_vJjEEEDTcl7connectfp_cvNSA_10shared_ptrIS1_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSQ_SS_E_block_invoke(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[5];
  v2 = a1[6];
  v3 = (_QWORD *)(a1[4] + (v2 >> 1) - 120);
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>::~slot(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 32, a1 + 32, 2);
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*(_QWORD *)a1)
  {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)a1, *(_QWORD *)a1);
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(unsigned int)>>::~DispatchSlot(uint64_t a1)
{
  const void *v2;

  dispatch_release(*(dispatch_object_t *)a1);
  v2 = *(const void **)(a1 + 8);
  if (v2)
    _Block_release(v2);
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy((_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  _QWORD *v1;

  v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>::~connection_body(a1);
  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  __int128 v2;
  pthread_mutex_t *v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int i;
  unsigned int v10;
  uint64_t v11;
  char v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  char *v22;
  char *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v32;
  _OWORD v33[10];
  unint64_t v34;
  void *__p;
  uint64_t v36;
  pthread_mutex_t *v37;
  _QWORD v38[4];

  v38[3] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[8] = v2;
  v33[9] = v2;
  v33[6] = v2;
  v33[7] = v2;
  v33[4] = v2;
  v33[5] = v2;
  v33[2] = v2;
  v33[3] = v2;
  v33[0] = v2;
  v33[1] = v2;
  v3 = *(pthread_mutex_t **)(a1 + 48);
  v34 = 10;
  __p = v33;
  v36 = 0;
  v37 = v3;
  pthread_mutex_lock(v3);
  v4 = *(uint64_t **)(a1 + 32);
  if (!v4)
    goto LABEL_40;
  v5 = *v4;
  if (*v4 == v4[1])
    goto LABEL_40;
  do
  {
    memset(v38, 170, 24);
    v6 = *(_DWORD *)v5 ^ (*(int *)v5 >> 31);
    if (v6 == 2)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v5 + 8) + 16))(&v32);
      v38[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
      LODWORD(v38[0]) = 1;
      if (v32)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
          goto LABEL_26;
LABEL_19:
        v11 = *(_QWORD *)(v5 + 16);
        if (!v11)
          goto LABEL_27;
        if (!atomic_load((unsigned int *)(v11 + 8)))
          goto LABEL_27;
LABEL_21:
        v13 = 0;
        if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
          goto LABEL_30;
        goto LABEL_22;
      }
LABEL_18:
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v6 != 1)
    {
      LODWORD(v38[0]) = 0;
      v38[1] = 0;
      v38[2] = 0;
      goto LABEL_18;
    }
    v7 = *(_QWORD *)(v5 + 16);
    if (!v7)
    {
LABEL_25:
      v38[1] = 0;
      v38[2] = v7;
      LODWORD(v38[0]) = 0;
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    v8 = (unsigned int *)(v7 + 8);
    for (i = *(_DWORD *)(v7 + 8); ; i = v10)
    {
      if (!i)
      {
        v7 = 0;
        goto LABEL_25;
      }
      v10 = __ldxr(v8);
      if (v10 != i)
      {
        __clrex();
        continue;
      }
      if (!__stxr(i + 1, v8))
        break;
    }
    v38[1] = *(_QWORD *)(v5 + 8);
    v38[2] = v7;
    LODWORD(v38[0]) = 0;
    if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) != 2)
      goto LABEL_19;
LABEL_26:
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v5 + 8) + 24))(*(_QWORD *)(v5 + 8)))
      goto LABEL_21;
LABEL_27:
    if (*(_BYTE *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = 0;
      boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v33);
    }
    v13 = 1;
    if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
    {
LABEL_30:
      v14 = (unsigned int *)v38[2];
      if (v38[2])
      {
        v15 = (unsigned int *)(v38[2] + 8);
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
          v18 = v14 + 3;
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
            (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 24))(v14);
        }
      }
      goto LABEL_38;
    }
LABEL_22:
    if (v38[1])
      (*(void (**)(_QWORD))(*(_QWORD *)v38[1] + 8))(v38[1]);
LABEL_38:
    if ((v13 & 1) != 0)
      break;
    v5 += 24;
  }
  while (v5 != *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
LABEL_40:
  v21 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v37);
  v22 = (char *)__p;
  if (__p)
  {
    if (v36 - 1 >= 0)
    {
      v23 = (char *)__p + 16 * v36;
      do
      {
        v24 = (unsigned int *)*((_QWORD *)v23 - 1);
        if (v24)
        {
          v25 = v24 + 2;
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 16))(v24);
            v28 = v24 + 3;
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
              (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 24))(v24);
          }
        }
        v23 -= 16;
      }
      while (v23 > v22);
    }
    if (v34 >= 0xB)
      operator delete(__p);
  }
  return v21 != 0;
}

void sub_1BF40CABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *(_QWORD *)(result + 40);
  v2 = (_QWORD *)(result + 32);
  *a2 = *(_QWORD *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = *(unsigned int **)(result + 40);
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
    if (v6)
    {
      v7 = v6 + 2;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
        v10 = v6 + 3;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
      }
    }
  }
  else
  {
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>>::dispose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3)
          v3(v1 + 32, v1 + 32, 2);
      }
      *(_QWORD *)(v1 + 24) = 0;
    }
    if (*(_QWORD *)v1)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v1, *(_QWORD *)v1);
      operator delete(*(void **)v1);
    }
    operator delete((void *)v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>>::get_untyped_deleter()
{
  return 0;
}

_QWORD *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  *a1 = off_1E7903CB0;
  v2 = (unsigned int *)a1[7];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  v9 = (unsigned int *)a1[5];
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
      v13 = v9 + 3;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
    }
  }
  *a1 = &unk_1E78FDD98;
  v16 = (unsigned int *)a1[2];
  if (v16)
  {
    v17 = v16 + 3;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16);
  }
  return a1;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(unsigned int)>::~function(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(unsigned int)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  NSObject *v6;
  void *v7;
  const void *v8;
  const char *v9;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v9 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001BF5418CBLL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001BF5418CBLL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      v8 = (const void *)*((_QWORD *)a2 + 1);
      if (v8)
LABEL_9:
        _Block_release(v8);
    }
  }
  else
  {
    v6 = *(NSObject **)a1;
    v7 = *(void **)(a1 + 8);
    *(_QWORD *)a2 = *(_QWORD *)a1;
    if (v7)
    {
      v7 = _Block_copy(v7);
      v6 = *(NSObject **)a2;
    }
    *((_QWORD *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      v8 = *(const void **)(a1 + 8);
      if (v8)
        goto LABEL_9;
    }
  }
}

void boost::detail::function::void_function_obj_invoker1<ctu::DispatchSlot<dispatch::block<void({block_pointer})(unsigned int)>>,void,unsigned int>::invoke(uint64_t a1, int a2)
{
  const void *v3;
  NSObject *v4;
  void *v5;
  const void *v6;
  void *v7;
  const void *v8;
  void *v9;
  const void *v10;
  void *v11;
  const void *v12;
  void *v13;
  const void *v14;
  void *v15;
  const void *v16;
  void *v17;
  char v18;
  _DWORD *v19;
  _QWORD *v20;
  void *v21;
  void (*v22)(_QWORD *, _QWORD *, uint64_t);
  _QWORD v23[3];
  _QWORD block[6];

  v4 = *(NSObject **)a1;
  v3 = *(const void **)(a1 + 8);
  if (!v3)
  {
    v6 = 0;
    goto LABEL_10;
  }
  v5 = _Block_copy(v3);
  v6 = v5;
  if (!v5)
  {
LABEL_10:
    v18 = 1;
LABEL_11:
    v17 = 0;
    v23[0] = 0;
    goto LABEL_21;
  }
  v7 = _Block_copy(v5);
  v8 = v7;
  if (!v7)
  {
    v18 = 0;
    goto LABEL_11;
  }
  v9 = _Block_copy(v7);
  v10 = v9;
  if (v9)
  {
    v11 = _Block_copy(v9);
    v12 = v11;
    if (v11)
    {
      v13 = _Block_copy(v11);
      v14 = v13;
      if (v13)
      {
        v15 = _Block_copy(v13);
        v16 = v15;
        if (v15)
        {
          v17 = _Block_copy(v15);
          v23[0] = v17;
          _Block_release(v16);
        }
        else
        {
          v17 = 0;
          v23[0] = 0;
        }
        _Block_release(v14);
      }
      else
      {
        v17 = 0;
        v23[0] = 0;
      }
      _Block_release(v12);
    }
    else
    {
      v17 = 0;
      v23[0] = 0;
    }
    _Block_release(v10);
  }
  else
  {
    v17 = 0;
    v23[0] = 0;
  }
  _Block_release(v8);
  v18 = 0;
LABEL_21:
  v19 = operator new(4uLL);
  *v19 = a2;
  v20 = operator new(0x20uLL);
  *v20 = boost::function1<void,unsigned int>::assign_to<dispatch::block<void({block_pointer})>>(dispatch::block<void({block_pointer})>)::stored_vtable;
  if (v17)
    v21 = _Block_copy(v17);
  else
    v21 = 0;
  v20[1] = v21;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvjEEEj_block_invoke;
  block[3] = &__block_descriptor_tmp_149;
  block[4] = v20;
  block[5] = v19;
  dispatch_async(v4, block);
  if (boost::function1<void,unsigned int>::assign_to<dispatch::block<void({block_pointer})>>(dispatch::block<void({block_pointer})>)::stored_vtable)
  {
    if ((boost::function1<void,unsigned int>::assign_to<dispatch::block<void({block_pointer})>>(dispatch::block<void({block_pointer})>)::stored_vtable & 1) == 0)
    {
      v22 = *(void (**)(_QWORD *, _QWORD *, uint64_t))((unint64_t)boost::function1<void,unsigned int>::assign_to<dispatch::block<void({block_pointer})>>(dispatch::block<void({block_pointer})>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL);
      if (v22)
        v22(v23, v23, 2);
    }
  }
  if ((v18 & 1) == 0)
    _Block_release(v6);
}

void sub_1BF40D224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  const void *v9;
  const void *v10;
  char v11;

  if (v10)
    _Block_release(v10);
  if ((v11 & 1) == 0)
    _Block_release(v9);
  _Unwind_Resume(exception_object);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvjEEEj_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v3;
  uint64_t v4;
  void (*v5)(uint64_t *, uint64_t *, uint64_t);
  void *v6;
  std::runtime_error v7;

  v1 = *(_QWORD **)(a1 + 32);
  if (!*v1)
  {
    std::runtime_error::runtime_error(&v7, "call to empty boost::function");
    v7.__vftable = (std::runtime_error_vtbl *)&unk_1E78FE000;
    boost::throw_exception<boost::bad_function_call>(&v7);
  }
  (*(void (**)(_QWORD *, _QWORD))((*v1 & 0xFFFFFFFFFFFFFFFELL) + 8))(v1 + 1, **(unsigned int **)(a1 + 40));
  v3 = *(uint64_t **)(a1 + 32);
  if (v3)
  {
    v4 = *v3;
    if (*v3)
    {
      if ((v4 & 1) == 0)
      {
        v5 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
        if (v5)
          v5(v3 + 1, v3 + 1, 2);
      }
      *v3 = 0;
    }
    operator delete(v3);
  }
  v6 = *(void **)(a1 + 40);
  if (v6)
    operator delete(v6);
}

void sub_1BF40D320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(unsigned int)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  void *v6;
  void *v7;
  const char *v8;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v8 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001BF541909 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001BF541909 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
LABEL_9:
        _Block_release(v7);
    }
  }
  else
  {
    v6 = *a1;
    if (*a1)
      v6 = _Block_copy(v6);
    *(_QWORD *)a2 = v6;
    if (a3 == 1)
    {
      v7 = *a1;
      if (*a1)
        goto LABEL_9;
    }
  }
}

uint64_t boost::detail::function::void_function_obj_invoker1<dispatch::block<void({block_pointer})(unsigned int)>,void,unsigned int>::invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 16))();
}

uint64_t boost::function1<void,unsigned int>::move_assign(uint64_t result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  __int128 v7;

  if (a2 != (uint64_t *)result)
  {
    v2 = a2;
    v3 = (uint64_t *)result;
    v4 = *a2;
    if (*a2)
    {
      *(_QWORD *)result = v4;
      if ((v4 & 1) != 0)
      {
        v7 = *(_OWORD *)(a2 + 1);
        *(_QWORD *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      v5 = *(_QWORD *)result;
      if (!*(_QWORD *)result)
        return result;
      if ((v5 & 1) == 0)
      {
        v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6)
          result = v6(result + 8, result + 8, 2);
      }
      v2 = v3;
    }
    *v2 = 0;
  }
  return result;
}

void sub_1BF40D4D0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_1BF40D4E0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *boost::function1<void,unsigned int>::~function1(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

_QWORD *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<RadioModule>>::~foreign_weak_ptr_impl(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E7903E28;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<RadioModule>>::~foreign_weak_ptr_impl(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_1E7903E28;
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<RadioModule>>::lock(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 8);
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = 0;
LABEL_6:
  v7 = operator new(0x18uLL);
  *v7 = &off_1E7903E78;
  v7[1] = v6;
  v7[2] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *a2 = v7;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *a2 = v7;
  }
}

void sub_1BF40D69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<RadioModule>>::expired(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  return !v1 || *(_QWORD *)(v1 + 8) == -1;
}

_QWORD *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<RadioModule>>::clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E7903E28;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

_QWORD *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<RadioModule>>::~foreign_shared_ptr_impl(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_1E7903E78;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<RadioModule>>::~foreign_shared_ptr_impl(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_1E7903E78;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

_QWORD *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<RadioModule>>::clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E7903E78;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::sleep(dispatch::group_session)::$_0>(RadioModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;
  NSObject *v14;

  v2 = *a1;
  v3 = **a1;
  v4 = *(uint64_t **)(v3 + 272);
  if (v4)
  {
    v5 = _Block_copy(&__block_literal_global_4);
    v6 = v5;
    v7 = *(NSObject **)(v3 + 136);
    if (v7)
    {
      dispatch_retain(v7);
      v13 = v6;
      v14 = v7;
      radio::HealthService::enterLowPower(v4, (uint64_t)&v13);
      dispatch_release(v7);
      if (!v6)
        goto LABEL_7;
      goto LABEL_6;
    }
    v13 = v5;
    v14 = 0;
    radio::HealthService::enterLowPower(v4, (uint64_t)&v13);
    if (v6)
LABEL_6:
      _Block_release(v6);
  }
LABEL_7:
  v8 = v2[1];
  if (v8)
  {
    dispatch_group_leave(v8);
    v9 = v2[1];
    if (v9)
      dispatch_release(v9);
  }
  operator delete(v2);
  v10 = (std::__shared_weak_count *)a1[2];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::wake(dispatch::group_session)::$_0>(RadioModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;
  NSObject *v14;

  v2 = *a1;
  v3 = **a1;
  v4 = *(uint64_t **)(v3 + 272);
  if (v4)
  {
    v5 = _Block_copy(&__block_literal_global_153);
    v6 = v5;
    v7 = *(NSObject **)(v3 + 136);
    if (v7)
    {
      dispatch_retain(v7);
      v13 = v6;
      v14 = v7;
      radio::HealthService::exitLowPower(v4, (uint64_t)&v13);
      dispatch_release(v7);
      if (!v6)
        goto LABEL_7;
      goto LABEL_6;
    }
    v13 = v5;
    v14 = 0;
    radio::HealthService::exitLowPower(v4, (uint64_t)&v13);
    if (v6)
LABEL_6:
      _Block_release(v6);
  }
LABEL_7:
  v8 = v2[1];
  if (v8)
  {
    dispatch_group_leave(v8);
    v9 = v2[1];
    if (v9)
      dispatch_release(v9);
  }
  operator delete(v2);
  v10 = (std::__shared_weak_count *)a1[2];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  operator delete(a1);
}

void std::__shared_ptr_pointer<radio::HealthService *,std::shared_ptr<radio::HealthService>::__shared_ptr_default_delete<radio::HealthService,radio::HealthService>,std::allocator<radio::HealthService>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<radio::HealthService *,std::shared_ptr<radio::HealthService>::__shared_ptr_default_delete<radio::HealthService,radio::HealthService>,std::allocator<radio::HealthService>>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (std::__shared_weak_count *)v1[1];
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      operator delete(v1);
    }
    else
    {
LABEL_6:
      operator delete(v1);
    }
  }
}

uint64_t std::__shared_ptr_pointer<radio::HealthService *,std::shared_ptr<radio::HealthService>::__shared_ptr_default_delete<radio::HealthService,radio::HealthService>,std::allocator<radio::HealthService>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF541A60)
    return a1 + 24;
  if (((v3 & 0x80000001BF541A60 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF541A60))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF541A60 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

BOOL ctu::cf::plist_adapter::set<BOOL>(uint64_t a1, int a2, char *a3, int a4)
{
  const __CFString **v7;
  const __CFString *v8;
  const __CFString *v9;
  _BOOL8 v10;
  CFStringRef key[2];

  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)key, a3);
  v7 = (const __CFString **)MEMORY[0x1E0C9AE50];
  if (!a2)
    v7 = (const __CFString **)MEMORY[0x1E0C9AE40];
  v8 = *v7;
  key[1] = v8;
  if (v8)
  {
    v9 = (const __CFString *)*MEMORY[0x1E0C9B250];
    CFPreferencesSetValue(key[0], v8, *(CFStringRef *)(a1 + 8), *(CFStringRef *)(a1 + 16), (CFStringRef)*MEMORY[0x1E0C9B250]);
    if (a4)
      v10 = CFPreferencesSynchronize(*(CFStringRef *)(a1 + 8), *(CFStringRef *)(a1 + 16), v9) != 0;
    else
      v10 = 1;
    CFRelease(v8);
  }
  else
  {
    v10 = 0;
  }
  MEMORY[0x1C3B8936C](key);
  return v10;
}

void sub_1BF40DC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  MEMORY[0x1C3B8936C](&a9);
  _Unwind_Resume(a1);
}

BOOL ctu::cf::plist_adapter::set<unsigned int>(uint64_t a1, unsigned int a2, const __CFString *a3, int a4)
{
  const __CFAllocator *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  const __CFString *v10;
  _BOOL8 v11;
  uint64_t valuePtr;

  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  valuePtr = a2;
  v8 = CFNumberCreate(v7, kCFNumberLongLongType, &valuePtr);
  if (!v8)
    return 0;
  v9 = v8;
  v10 = (const __CFString *)*MEMORY[0x1E0C9B250];
  CFPreferencesSetValue(a3, v8, *(CFStringRef *)(a1 + 8), *(CFStringRef *)(a1 + 16), (CFStringRef)*MEMORY[0x1E0C9B250]);
  if (a4)
    v11 = CFPreferencesSynchronize(*(CFStringRef *)(a1 + 8), *(CFStringRef *)(a1 + 16), v10) != 0;
  else
    v11 = 1;
  CFRelease(v9);
  return v11;
}

void sub_1BF40DD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_125()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1BF335000);
  }
  return result;
}

uint64_t __cxx_global_var_init_126_0()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1BF335000);
  }
  return result;
}

uint64_t __cxx_global_var_init_127_0()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1BF335000);
  }
  return result;
}

uint64_t __cxx_global_var_init_128_0()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_1BF335000);
  }
  return result;
}

_QWORD *Capabilities::create_default_global@<X0>(_QWORD *a1@<X8>)
{
  void *v3;
  _QWORD *result;

  v3 = operator new(1uLL);
  *a1 = v3;
  result = operator new(0x20uLL);
  *result = off_1E7903F88;
  result[1] = 0;
  result[2] = 0;
  result[3] = v3;
  a1[1] = result;
  return result;
}

void sub_1BF40DE54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t Capabilities::isCMHandDetectionSupported(Capabilities *this)
{
  capabilities::abs::supportsCMHandDetection(this);
  return objc_msgSend(MEMORY[0x1E0CA5600], "isCallHandednessAvailable");
}

void std::__shared_ptr_pointer<Capabilities *,std::shared_ptr<Capabilities>::__shared_ptr_default_delete<Capabilities,Capabilities>,std::allocator<Capabilities>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<Capabilities *,std::shared_ptr<Capabilities>::__shared_ptr_default_delete<Capabilities,Capabilities>,std::allocator<Capabilities>>::__on_zero_shared(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 24);
  if (v1)
    operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<Capabilities *,std::shared_ptr<Capabilities>::__shared_ptr_default_delete<Capabilities,Capabilities>,std::allocator<Capabilities>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF541B30)
    return a1 + 24;
  if (((v3 & 0x80000001BF541B30 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF541B30))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF541B30 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void abm::debug::registerLogServer(uint64_t a1)
{
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_16;
  block[4] = a1;
  if (abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce != -1)
    dispatch_once(&abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
}

void ___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  capabilities::abs *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  capabilities::radio *v25;
  uint64_t v26;
  xpc_object_t v27;
  _QWORD v28[2];
  xpc_object_t object;
  xpc_object_t xdict;

  xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  ctu::LogServer::getConfig(**(ctu::LogServer ***)(a1 + 32));
  v28[0] = &xdict;
  v28[1] = "kDomainLogLevels";
  object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc::dict::object_proxy::operator xpc::dict((uint64_t)v28, &object);
  v2 = MEMORY[0x1C3B8A86C](object);
  v3 = MEMORY[0x1E0C812F8];
  if (v2 != MEMORY[0x1E0C812F8])
  {
    v4 = xpc_dictionary_create(0, 0, 0);
    if (v4 || (v4 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8A86C](v4) == v3)
      {
        xpc_retain(v4);
        v5 = v4;
      }
      else
      {
        v5 = xpc_null_create();
      }
    }
    else
    {
      v5 = xpc_null_create();
      v4 = 0;
    }
    xpc_release(v4);
    v6 = xpc_null_create();
    v7 = object;
    object = v5;
    xpc_release(v7);
    xpc_release(v6);
  }
  v8 = xpc_int64_create(1);
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(object, "libetl", v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  v10 = xpc_int64_create(1);
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(object, "libtu", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  v12 = xpc_int64_create(1);
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(object, "trace.diag.cfg", v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  v14 = xpc_int64_create(1);
  if (!v14)
    v14 = xpc_null_create();
  xpc_dictionary_set_value(object, "trace.diag.svc", v14);
  v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  v16 = xpc_int64_create(1);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(object, "libktl", v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  v18 = object;
  if (object)
    xpc_retain(object);
  else
    v18 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kDomainLogLevels", v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  v27 = xdict;
  if (xdict)
    xpc_retain(xdict);
  else
    v27 = xpc_null_create();
  ctu::LogServer::updateConfig();
  xpc_release(v27);
  v20 = (capabilities::abs *)operator new(0x10uLL);
  v21 = *(_QWORD **)(a1 + 32);
  *(_QWORD *)v20 = *v21;
  v22 = v21[1];
  *((_QWORD *)v20 + 1) = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 16);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  _MergedGlobals_8 = (uint64_t)v20;
  if (!qword_1ED70FFB8)
  {
    v20 = (capabilities::abs *)os_log_create("com.apple.telephony.abm", "libtu");
    qword_1ED70FFB8 = (uint64_t)v20;
  }
  capabilities::abs::TUDebugFlags(v20);
  TelephonyUtilDebugSetFlags();
  v25 = (capabilities::radio *)TelephonyUtilDebugRegisterDelegate();
  v26 = capabilities::radio::ice(v25);
  if ((v26 & 1) == 0 && capabilities::radio::maverick((capabilities::radio *)v26))
  {
    if (!qword_1ED70FFC0)
      qword_1ED70FFC0 = (uint64_t)os_log_create("com.apple.telephony.abm", "libetl");
    ETLDebugRegisterDelegate();
  }
  if (!qword_1ED70FFC8)
    qword_1ED70FFC8 = (uint64_t)os_log_create("com.apple.telephony.abm", "bbu");
  BBUpdaterRegisterGlobalLogSink();
  xpc_release(object);
  xpc_release(xdict);
}

void sub_1BF40E3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, xpc_object_t a13, xpc_object_t a14)
{
  xpc_release(object);
  xpc_release(a13);
  xpc_release(a14);
  _Unwind_Resume(a1);
}

void abm::debug::handleDebugPrintTelephonyUtil(abm::debug *this, const char *a2, const char *a3, char *a4)
{
  abm::debug::handleDebugPrint(0, this, (uint64_t)a2, (uint64_t)a3);
}

void abm::debug::handleDebugPrintBinaryTelephonyUtil(uint64_t a1, int a2, uint64_t a3, int a4)
{
  const char *v6;
  const char *v7;

  v6 = "misc";
  if (!a2)
    v6 = "send";
  if (a2 == 1)
    v7 = "recv";
  else
    v7 = v6;
  abm::debug::handleDebugPrintBinary(a1, 0, (uint64_t)v7, a3, a4);
}

void abm::debug::handleDebugPrintETL(abm::debug *this, const char *a2, const char *a3, char *a4)
{
  abm::debug::handleDebugPrint(1, this, (uint64_t)a2, (uint64_t)a3);
}

void abm::debug::handleDebugPrintBinaryETL(uint64_t a1, int a2, uint64_t a3, int a4)
{
  const char *v6;
  const char *v7;

  v6 = "misc";
  if (!a2)
    v6 = "send";
  if (a2 == 1)
    v7 = "recv";
  else
    v7 = v6;
  abm::debug::handleDebugPrintBinary(a1, 1, (uint64_t)v7, a3, a4);
}

uint64_t abm::debug::handleDebugPrintBBU(abm::debug *this, void *a2, const char *a3, const char *a4)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  size_t v14;
  abm::debug *v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  size_t v19;
  void **v20;
  uint64_t v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  void *__dst[3];
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void *__p[2];
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v35 = 0xAAAAAAAAAAAAAAAALL;
  v45 = v5;
  v44 = v5;
  v43 = v5;
  v42 = v5;
  v41 = v5;
  v40 = v5;
  v39 = v5;
  v38 = v5;
  v37 = v5;
  *(_OWORD *)__p = v5;
  v34 = v5;
  v31 = v5;
  v32 = v5;
  v29 = v5;
  v30 = v5;
  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v36 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v28 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v28 + *(_QWORD *)(v28 - 24)) = v9;
  v10 = (std::ios_base *)((char *)&v28 + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v10, &v29);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v28 = v6 + 24;
  v36 = v7;
  std::streambuf::basic_streambuf();
  v11 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v29 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v34 = 0u;
  LODWORD(v35) = 16;
  v12 = (_QWORD *)std::ostream::operator<<();
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)":", 1);
  v14 = strlen(a3);
  v15 = (abm::debug *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)a3, v14);
  memset(__dst, 170, sizeof(__dst));
  if ((v35 & 0x10) != 0)
  {
    v21 = *((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1) < (unint64_t)v32)
    {
      *((_QWORD *)&v34 + 1) = v32;
      v21 = v32;
    }
    v22 = (const void *)*((_QWORD *)&v31 + 1);
    v19 = v21 - *((_QWORD *)&v31 + 1);
    if ((unint64_t)(v21 - *((_QWORD *)&v31 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v35 & 8) == 0)
    {
      v19 = 0;
      HIBYTE(__dst[2]) = 0;
      v20 = __dst;
      goto LABEL_14;
    }
    v22 = (const void *)v30;
    v19 = v31 - v30;
    if ((_QWORD)v31 - (_QWORD)v30 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_22:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v19 >= 0x17)
  {
    v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v23 = v19 | 7;
    v24 = v23 + 1;
    v20 = (void **)operator new(v23 + 1);
    __dst[1] = (void *)v19;
    __dst[2] = (void *)(v24 | 0x8000000000000000);
    __dst[0] = v20;
    goto LABEL_13;
  }
  HIBYTE(__dst[2]) = v19;
  v20 = __dst;
  if (v19)
LABEL_13:
    v15 = (abm::debug *)memmove(v20, v22, v19);
LABEL_14:
  *((_BYTE *)v20 + v19) = 0;
  v25 = __dst;
  if (SHIBYTE(__dst[2]) < 0)
    v25 = (void **)__dst[0];
  abm::debug::handleDebugPrintBBUHelper(v15, v16, v17, v18, v25);
  if (SHIBYTE(__dst[2]) < 0)
    operator delete(__dst[0]);
  v28 = *v8;
  *(uint64_t *)((char *)&v28 + *(_QWORD *)(v28 - 24)) = v8[3];
  *(_QWORD *)&v29 = v11 + 16;
  if (SBYTE7(v34) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B89E4C](&v36);
}

void sub_1BF40E7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a17);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void abm::debug::handleDebugPrint(int a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v10;
  __int128 v11;
  uint64_t v12;
  ctu::Clock *v13;
  std::string *v14;
  const char *v15;
  size_t v16;
  void *v17;
  void **v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;
  int v24;
  size_t size;
  std::string *data;
  _BYTE *v27;
  unint64_t v28;
  unsigned __int8 *v29;
  char *v30;
  int v31;
  char *v32;
  std::string::size_type v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  NSObject *v39;
  std::string::__raw *v40;
  std::string::size_type v41;
  std::string::pointer v42;
  NSObject *v43;
  std::string::__raw *v44;
  std::string::__raw *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  std::string::pointer v51;
  std::__shared_weak_count *v52;
  void *__dst[2];
  unint64_t v54;
  std::string *v55;
  std::__shared_weak_count *v56;
  _OWORD v57[3];
  unint64_t v58;
  std::__shared_weak_count *v60;
  uint8_t buf[4];
  std::string::__raw *v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)_MergedGlobals_8;
  if (!_MergedGlobals_8)
    return;
  v6 = *(std::__shared_weak_count **)(_MergedGlobals_8 + 8);
  if (!v6)
    return;
  v10 = std::__shared_weak_count::lock(v6);
  v60 = v10;
  if (!v10)
    return;
  if (!*v4)
  {
    v19 = v10;
LABEL_73:
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v50 = __ldaxr(p_shared_owners);
    while (__stlxr(v50 - 1, p_shared_owners));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    return;
  }
  v58 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v57[1] = v11;
  v57[2] = v11;
  v57[0] = v11;
  ctu::LogMessageBuffer::LogMessageBuffer((ctu::LogMessageBuffer *)v57);
  if (a2 && *a2)
  {
    v12 = MEMORY[0x1C3B89768](v57, a2);
    MEMORY[0x1C3B89768](v12, ": ");
  }
  MEMORY[0x1C3B892DC](&v55, a3, a4);
  ctu::operator<<();
  v13 = (ctu::Clock *)MEMORY[0x1C3B892F4](&v55);
  ctu::Clock::now_in_nanoseconds(v13);
  v14 = (std::string *)operator new(0x60uLL);
  v15 = abm::debug::kLogDomainMap[a1];
  v16 = strlen(v15);
  if (v16 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v17 = (void *)v16;
  if (v16 >= 0x17)
  {
    v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v20 = v16 | 7;
    v21 = v20 + 1;
    v18 = (void **)operator new(v20 + 1);
    __dst[1] = v17;
    v54 = v21 | 0x8000000000000000;
    __dst[0] = v18;
    goto LABEL_16;
  }
  HIBYTE(v54) = v16;
  v18 = __dst;
  if (v16)
LABEL_16:
    memmove(v18, v15, (size_t)v17);
  *((_BYTE *)v17 + (_QWORD)v18) = 0;
  MEMORY[0x1C3B892C4](v57);
  ctu::LogMessageBuffer::takeMetadata((ctu::LogMessageBuffer *)v57);
  ctu::LogMessage::LogMessage();
  v55 = v14;
  v22 = (std::__shared_weak_count *)operator new(0x20uLL);
  v22->__vftable = (std::__shared_weak_count_vtbl *)off_1E7904038;
  v22->__shared_owners_ = 0;
  v22->__shared_weak_owners_ = 0;
  v22[1].__vftable = (std::__shared_weak_count_vtbl *)v14;
  v56 = v22;
  if (SHIBYTE(v54) < 0)
  {
    operator delete(__dst[0]);
    v23 = v14 + 2;
    v24 = SHIBYTE(v14[2].__r_.__value_.__r.__words[2]);
    if ((v24 & 0x80000000) == 0)
      goto LABEL_19;
  }
  else
  {
    v23 = v14 + 2;
    v24 = SHIBYTE(v14[2].__r_.__value_.__r.__words[2]);
    if ((v24 & 0x80000000) == 0)
    {
LABEL_19:
      size = v24;
      data = v23;
      goto LABEL_22;
    }
  }
  data = (std::string *)v14[2].__r_.__value_.__l.__data_;
  size = v14[2].__r_.__value_.__l.__size_;
LABEL_22:
  v27 = memchr(data, 10, size);
  if (v27)
    v28 = (unint64_t)v27;
  else
    v28 = (unint64_t)data + size;
  if (v28 - (_QWORD)data != size)
  {
    v29 = (unsigned __int8 *)(v28 + 1);
    if ((std::string *)(v28 + 1) != (std::string *)((char *)data + size))
    {
      v30 = (char *)data + size + ~v28;
      do
      {
        v31 = *v29;
        if (v31 != 10)
          *(_BYTE *)v28++ = v31;
        ++v29;
        --v30;
      }
      while (v30);
      LOBYTE(v24) = *((_BYTE *)&v14[2].__r_.__value_.__s + 23);
    }
  }
  if ((v24 & 0x80) == 0)
  {
    v32 = (char *)v23 + v24;
    v33 = v28 - (_QWORD)v23;
    if (v24 >= v28 - (unint64_t)v23)
      goto LABEL_34;
LABEL_52:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  v42 = v14[2].__r_.__value_.__l.__data_;
  v41 = v14[2].__r_.__value_.__l.__size_;
  v32 = &v42[v41];
  v33 = v28 - (_QWORD)v42;
  if (v41 < v28 - (unint64_t)v42)
    goto LABEL_52;
LABEL_34:
  if (&v32[-v28] == (char *)-1)
  {
    if ((v24 & 0x80) != 0)
    {
      v51 = v14[2].__r_.__value_.__l.__data_;
      v14[2].__r_.__value_.__l.__size_ = v33;
      v51[v33] = 0;
      v34 = v56;
      v52 = v56;
      if (!v56)
        goto LABEL_38;
    }
    else
    {
      *((_BYTE *)&v14[2].__r_.__value_.__s + 23) = v33 & 0x7F;
      v23->__r_.__value_.__s.__data_[v33] = 0;
      v34 = v56;
      v52 = v56;
      if (!v56)
        goto LABEL_38;
    }
  }
  else
  {
    std::string::__erase_external_with_move(v23, v33, (std::string::size_type)&v32[-v28]);
    v34 = v56;
    v52 = v56;
    if (!v56)
      goto LABEL_38;
  }
  v35 = (unint64_t *)&v34->__shared_owners_;
  do
    v36 = __ldxr(v35);
  while (__stxr(v36 + 1, v35));
LABEL_38:
  ctu::LogServer::log();
  if (v52)
  {
    v37 = (unint64_t *)&v52->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (a1)
  {
    if (a1 == 1)
    {
      v43 = qword_1ED70FFC0;
      if (qword_1ED70FFC0 && os_log_type_enabled((os_log_t)qword_1ED70FFC0, OS_LOG_TYPE_DEBUG))
      {
        v44 = (std::string::__raw *)&v55[2];
        if (SHIBYTE(v55[2].__r_.__value_.__r.__words[2]) < 0)
          v44 = (std::string::__raw *)v44->__words[0];
        *(_DWORD *)buf = 136315138;
        v62 = v44;
        _os_log_debug_impl(&dword_1BF335000, v43, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
      }
    }
    else if (a1 == 3)
    {
      v39 = qword_1ED70FFC8;
      if (qword_1ED70FFC8)
      {
        if (os_log_type_enabled((os_log_t)qword_1ED70FFC8, OS_LOG_TYPE_DEFAULT))
        {
          v40 = (std::string::__raw *)&v55[2];
          if (SHIBYTE(v55[2].__r_.__value_.__r.__words[2]) < 0)
            v40 = (std::string::__raw *)v40->__words[0];
          *(_DWORD *)buf = 136315138;
          v62 = v40;
LABEL_66:
          _os_log_impl(&dword_1BF335000, v39, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
        }
      }
    }
  }
  else
  {
    v39 = qword_1ED70FFB8;
    if (qword_1ED70FFB8 && os_log_type_enabled((os_log_t)qword_1ED70FFB8, OS_LOG_TYPE_DEFAULT))
    {
      v45 = (std::string::__raw *)&v55[2];
      if (SHIBYTE(v55[2].__r_.__value_.__r.__words[2]) < 0)
        v45 = (std::string::__raw *)v45->__words[0];
      *(_DWORD *)buf = 136315138;
      v62 = v45;
      goto LABEL_66;
    }
  }
  v46 = v56;
  if (v56)
  {
    v47 = (unint64_t *)&v56->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  MEMORY[0x1C3B892F4](v57);
  v19 = v60;
  if (v60)
    goto LABEL_73;
}

void sub_1BF40ED74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;

  MEMORY[0x1C3B892F4](&a24);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v24 - 112);
  _Unwind_Resume(a1);
}

void sub_1BF40EE0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void sub_1BF40EE20()
{
  void *v0;

  operator delete(v0);
  JUMPOUT(0x1BF40EE68);
}

void sub_1BF40EE4C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  if (a16 < 0)
    operator delete(__p);
  operator delete(v16);
  JUMPOUT(0x1BF40EE68);
}

void std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF541BFBLL)
    return a1 + 24;
  if (((v3 & 0x80000001BF541BFBLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF541BFBLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF541BFBLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void abm::debug::handleDebugPrintBinary(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v5;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  ctu::Clock *v17;
  std::__shared_weak_count_vtbl *v18;
  const char *v19;
  size_t v20;
  void *v21;
  void **v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  NSObject *v31;
  void **v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  void *__dst[2];
  unint64_t v39;
  std::__shared_weak_count_vtbl *v40;
  std::__shared_weak_count *v41;
  void *__p[2];
  uint64_t v43;
  _OWORD v44[3];
  unint64_t v45;
  std::__shared_weak_count *v47;
  uint8_t buf[4];
  int v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  void **v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)_MergedGlobals_8;
  if (!_MergedGlobals_8)
    return;
  v7 = *(std::__shared_weak_count **)(_MergedGlobals_8 + 8);
  if (!v7)
    return;
  v11 = std::__shared_weak_count::lock(v7);
  v47 = v11;
  if (!v11)
    return;
  if (!*v5)
  {
    v23 = v11;
LABEL_39:
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    return;
  }
  v45 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v44[1] = v12;
  v44[2] = v12;
  v44[0] = v12;
  ctu::LogMessageBuffer::LogMessageBuffer((ctu::LogMessageBuffer *)v44);
  v13 = MEMORY[0x1C3B89768](v44, a1);
  MEMORY[0x1C3B89768](v13, " (");
  v14 = ctu::operator<<();
  v15 = MEMORY[0x1C3B89768](v14, ") ");
  v16 = MEMORY[0x1C3B89768](v15, a3);
  MEMORY[0x1C3B89768](v16, "\n");
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v43 = 0xAAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAAAAAA00;
  ctu::assign();
  v17 = (ctu::Clock *)MEMORY[0x1C3B89774](v44, __p);
  ctu::Clock::now_in_nanoseconds(v17);
  v18 = (std::__shared_weak_count_vtbl *)operator new(0x60uLL);
  v19 = abm::debug::kLogDomainMap[a2];
  v20 = strlen(v19);
  if (v20 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = (void *)v20;
  if (v20 >= 0x17)
  {
    v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v24 = v20 | 7;
    v25 = v24 + 1;
    v22 = (void **)operator new(v24 + 1);
    __dst[1] = v21;
    v39 = v25 | 0x8000000000000000;
    __dst[0] = v22;
    goto LABEL_13;
  }
  HIBYTE(v39) = v20;
  v22 = __dst;
  if (v20)
LABEL_13:
    memmove(v22, v19, (size_t)v21);
  *((_BYTE *)v21 + (_QWORD)v22) = 0;
  MEMORY[0x1C3B892C4](v44);
  ctu::LogMessageBuffer::takeMetadata((ctu::LogMessageBuffer *)v44);
  ctu::LogMessage::LogMessage();
  v40 = v18;
  v26 = (std::__shared_weak_count *)operator new(0x20uLL);
  v26->__shared_owners_ = 0;
  v27 = (unint64_t *)&v26->__shared_owners_;
  v26->__vftable = (std::__shared_weak_count_vtbl *)off_1E7904038;
  v26->__shared_weak_owners_ = 0;
  v26[1].__vftable = v18;
  v41 = v26;
  if (SHIBYTE(v39) < 0)
    operator delete(__dst[0]);
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
  ctu::LogServer::log();
  if (v26)
  {
    v29 = (unint64_t *)&v26->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (a2)
  {
    if (a2 == 1)
    {
      v31 = qword_1ED70FFC0;
      if (qword_1ED70FFC0)
      {
        if (os_log_type_enabled((os_log_t)qword_1ED70FFC0, OS_LOG_TYPE_DEBUG))
        {
          v32 = __p;
          if (v43 < 0)
            v32 = (void **)__p[0];
          goto LABEL_46;
        }
      }
    }
  }
  else
  {
    v31 = qword_1ED70FFB8;
    if (qword_1ED70FFB8 && os_log_type_enabled((os_log_t)qword_1ED70FFB8, OS_LOG_TYPE_DEBUG))
    {
      v32 = __p;
      if (v43 < 0)
        v32 = (void **)__p[0];
LABEL_46:
      *(_DWORD *)buf = 67109634;
      v49 = a5;
      v50 = 2080;
      v51 = a3;
      v52 = 2080;
      v53 = v32;
      _os_log_debug_impl(&dword_1BF335000, v31, OS_LOG_TYPE_DEBUG, "(%d) %s: %s", buf, 0x1Cu);
      v33 = v41;
      if (!v41)
        goto LABEL_36;
      goto LABEL_32;
    }
  }
  v33 = v41;
  if (!v41)
    goto LABEL_36;
LABEL_32:
  v34 = (unint64_t *)&v33->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
LABEL_36:
  if (SHIBYTE(v43) < 0)
    operator delete(__p[0]);
  MEMORY[0x1C3B892F4](v44);
  v23 = v47;
  if (v47)
    goto LABEL_39;
}

void sub_1BF40F360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (a24 < 0)
  {
    operator delete(__p);
    MEMORY[0x1C3B892F4](&a25);
    std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
    _Unwind_Resume(a1);
  }
  MEMORY[0x1C3B892F4](&a25);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void abm::debug::handleDebugPrintBBUHelper(abm::debug *this, void *a2, uint64_t a3, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  abm::debug::handleDebugPrint(3, "", (uint64_t)"%s", (uint64_t)va);
}

uint64_t support::fs::toString@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if ((_DWORD)result == 1)
  {
    a2[23] = 9;
    strcpy(a2, "_wireless");
  }
  else if ((_DWORD)result)
  {
    a2[23] = 0;
    *a2 = 0;
  }
  else
  {
    a2[23] = 6;
    strcpy(a2, "mobile");
  }
  return result;
}

uint64_t support::fs::updateOwner(const char *a1, uint64_t a2, uint64_t a3)
{
  const char *v5;
  timespec v6;
  size_t v7;
  __darwin_ino64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  stat *v14;
  uint64_t updated;
  void *v16;
  const char *v17;
  DIR *v18;
  DIR *v19;
  dirent *v20;
  char *v21;
  const std::string::value_type **v22;
  char v23;
  __int128 v24;
  int v25;
  size_t v26;
  unint64_t v27;
  char *p_dst;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  std::string *v32;
  std::string::size_type size;
  std::string *v34;
  __int128 v35;
  std::string::size_type v36;
  std::string *v37;
  std::string *v38;
  timespec v39;
  std::string *v40;
  std::string *p_p;
  size_t v42;
  __darwin_ino64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  int st_gid_high;
  void *v48;
  stat *v49;
  void *v50;
  std::string *v51;
  DIR *v52;
  DIR *v53;
  dirent *v54;
  void **v55;
  char *v57;
  std::string v58;
  std::string __p;
  std::string v60;
  void *v61;
  char *v62;
  uint64_t v63;
  stat __dst;

  v5 = a1;
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v6.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__dst.st_blksize = v6;
  *(timespec *)__dst.st_qspare = v6;
  __dst.st_birthtimespec = v6;
  *(timespec *)&__dst.st_size = v6;
  __dst.st_mtimespec = v6;
  __dst.st_ctimespec = v6;
  *(timespec *)&__dst.st_uid = v6;
  __dst.st_atimespec = v6;
  *(timespec *)&__dst.st_dev = v6;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (!stat(a1, &__dst))
  {
    v17 = v5[23] >= 0 ? v5 : *(const char **)v5;
    v18 = opendir(v17);
    if (v18)
    {
      v19 = v18;
      v20 = readdir(v18);
      closedir(v19);
      if (v20)
      {
        v61 = 0;
        v62 = 0;
        v63 = 0;
        support::fs::readDir(v5, (uint64_t)&v61);
        v21 = (char *)v61;
        v57 = v62;
        if (v61 == v62)
        {
          updated = 0;
          if (v61)
            goto LABEL_105;
          return updated;
        }
        v22 = (const std::string::value_type **)((char *)v61 + 24);
        while (1)
        {
          memset(&v60, 170, sizeof(v60));
          if (*((char *)v22 - 1) < 0)
          {
            std::string::__init_copy_ctor_external(&v60, *(v22 - 3), (std::string::size_type)*(v22 - 2));
          }
          else
          {
            v24 = *(_OWORD *)(v22 - 3);
            v60.__r_.__value_.__r.__words[2] = (std::string::size_type)*(v22 - 1);
            *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v24;
          }
          memset(&__p, 170, sizeof(__p));
          v25 = v5[23];
          if (v25 >= 0)
            v26 = *((unsigned __int8 *)v5 + 23);
          else
            v26 = *((_QWORD *)v5 + 1);
          v27 = v26 + 1;
          memset(&__dst, 170, 24);
          if (v26 + 1 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v27 >= 0x17)
          {
            v29 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v27 | 7) != 0x17)
              v29 = v27 | 7;
            v30 = v29 + 1;
            p_dst = (char *)operator new(v29 + 1);
            __dst.st_ino = v26 + 1;
            *(_QWORD *)&__dst.st_uid = v30 | 0x8000000000000000;
            *(_QWORD *)&__dst.st_dev = p_dst;
          }
          else
          {
            memset(&__dst, 0, 24);
            p_dst = (char *)&__dst;
            HIBYTE(__dst.st_gid) = v26 + 1;
            if (!v26)
              goto LABEL_47;
          }
          if (v25 >= 0)
            v31 = v5;
          else
            v31 = *(const char **)v5;
          memmove(p_dst, v31, v26);
LABEL_47:
          *(_WORD *)&p_dst[v26] = 47;
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v32 = &v60;
          else
            v32 = (std::string *)v60.__r_.__value_.__r.__words[0];
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
          else
            size = v60.__r_.__value_.__l.__size_;
          v34 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v32, size);
          v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__dst.st_gid) < 0)
            operator delete(*(void **)&__dst.st_dev);
          v36 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v36 = v60.__r_.__value_.__l.__size_;
          if (v36 == 2)
          {
            v38 = &v60;
            if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v38 = (std::string *)v60.__r_.__value_.__r.__words[0];
            if (LOWORD(v38->__r_.__value_.__l.__data_) == 11822)
            {
LABEL_70:
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_p = &__p;
              else
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              v42 = strlen((const char *)p_p);
              if (v42 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              v43 = v42;
              if (v42 >= 0x17)
              {
                v45 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v42 | 7) != 0x17)
                  v45 = v42 | 7;
                v46 = v45 + 1;
                v44 = operator new(v45 + 1);
                __dst.st_ino = v43;
                *(_QWORD *)&__dst.st_uid = v46 | 0x8000000000000000;
                *(_QWORD *)&__dst.st_dev = v44;
              }
              else
              {
                HIBYTE(__dst.st_gid) = v42;
                v44 = &__dst;
                if (!v42)
                {
LABEL_81:
                  v44[v43] = 0;
                  st_gid_high = SHIBYTE(__dst.st_gid);
                  v48 = *(void **)&__dst.st_dev;
                  if ((__dst.st_gid & 0x80000000) == 0)
                    v49 = &__dst;
                  else
                    v49 = *(stat **)&__dst.st_dev;
                  updated = chown((const char *)v49, a2, a3) == 0;
                  if (st_gid_high < 0)
                  {
                    v50 = v48;
LABEL_86:
                    operator delete(v50);
                    goto LABEL_87;
                  }
                  goto LABEL_87;
                }
              }
              memmove(v44, p_p, v43);
              goto LABEL_81;
            }
          }
          else if (v36 == 1)
          {
            v37 = &v60;
            if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v37 = (std::string *)v60.__r_.__value_.__r.__words[0];
            if (v37->__r_.__value_.__s.__data_[0] == 46)
              goto LABEL_70;
          }
          v39.tv_sec = 0xAAAAAAAAAAAAAAAALL;
          v39.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
          *(timespec *)&__dst.st_blksize = v39;
          *(timespec *)__dst.st_qspare = v39;
          __dst.st_birthtimespec = v39;
          *(timespec *)&__dst.st_size = v39;
          __dst.st_mtimespec = v39;
          __dst.st_ctimespec = v39;
          *(timespec *)&__dst.st_uid = v39;
          __dst.st_atimespec = v39;
          *(timespec *)&__dst.st_dev = v39;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v40 = &__p;
          else
            v40 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (stat((const char *)v40, &__dst))
            goto LABEL_70;
          v51 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          v52 = opendir((const char *)v51);
          v53 = v52;
          if (!v52)
            goto LABEL_70;
          v54 = readdir(v52);
          closedir(v53);
          if (!v54)
            goto LABEL_70;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v58, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          else
            v58 = __p;
          updated = support::fs::updateOwner(&v58, a2, a3);
          if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
          {
            v50 = (void *)v58.__r_.__value_.__r.__words[0];
            goto LABEL_86;
          }
LABEL_87:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
LABEL_91:
              operator delete(v60.__r_.__value_.__l.__data_);
          }
          else if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
          {
            goto LABEL_91;
          }
          if (v22 == (const std::string::value_type **)v57)
            v23 = 0;
          else
            v23 = updated;
          v22 += 3;
          if ((v23 & 1) == 0)
          {
            v21 = (char *)v61;
            if (!v61)
              return updated;
LABEL_105:
            v55 = (void **)v62;
            v16 = v21;
            if (v62 != v21)
            {
              do
              {
                if (*((char *)v55 - 1) < 0)
                  operator delete(*(v55 - 3));
                v55 -= 3;
              }
              while (v55 != (void **)v21);
              v16 = v61;
            }
            v62 = v21;
LABEL_112:
            operator delete(v16);
            return updated;
          }
        }
      }
    }
  }
  if (v5[23] < 0)
    v5 = *(const char **)v5;
  v7 = strlen(v5);
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v9 = operator new(v10 + 1);
    __dst.st_ino = v8;
    *(_QWORD *)&__dst.st_uid = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst.st_dev = v9;
    goto LABEL_13;
  }
  HIBYTE(__dst.st_gid) = v7;
  v9 = &__dst;
  if (v7)
LABEL_13:
    memmove(v9, v5, v8);
  *((_BYTE *)v9 + v8) = 0;
  v12 = SHIBYTE(__dst.st_gid);
  v13 = *(void **)&__dst.st_dev;
  if ((__dst.st_gid & 0x80000000) == 0)
    v14 = &__dst;
  else
    v14 = *(stat **)&__dst.st_dev;
  updated = chown((const char *)v14, a2, a3) == 0;
  if (v12 < 0)
  {
    v16 = v13;
    goto LABEL_112;
  }
  return updated;
}

void sub_1BF40FA20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31)
{
  std::vector<std::string>::~vector[abi:ne180100](&a31);
  _Unwind_Resume(a1);
}

void sub_1BF40FA50()
{
  JUMPOUT(0x1BF40FA80);
}

DIR *support::fs::isDir(const char *a1)
{
  const char *v1;
  timespec v2;
  DIR *result;
  const char *v4;
  DIR *v5;
  dirent *v6;
  stat v7;

  v1 = a1;
  v2.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v2.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v7.st_blksize = v2;
  *(timespec *)v7.st_qspare = v2;
  v7.st_birthtimespec = v2;
  *(timespec *)&v7.st_size = v2;
  v7.st_mtimespec = v2;
  v7.st_ctimespec = v2;
  *(timespec *)&v7.st_uid = v2;
  v7.st_atimespec = v2;
  *(timespec *)&v7.st_dev = v2;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (stat(a1, &v7))
    return 0;
  if (v1[23] >= 0)
    v4 = v1;
  else
    v4 = *(const char **)v1;
  result = opendir(v4);
  if (result)
  {
    v5 = result;
    v6 = readdir(result);
    closedir(v5);
    return (DIR *)(v6 != 0);
  }
  return result;
}

BOOL support::fs::chown(const char *a1, uid_t a2, gid_t a3)
{
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  return chown(a1, a2, a3) == 0;
}

DIR *support::fs::readDir(const char *a1, uint64_t a2)
{
  DIR *result;
  DIR *v4;
  dirent *v5;
  dirent *v6;
  size_t d_namlen;
  _BYTE *v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  _BYTE __dst[24];

  if (a1[23] < 0)
    a1 = *(const char **)a1;
  result = opendir(a1);
  if (result)
  {
    v4 = result;
    v5 = readdir(result);
    if (v5)
    {
      v6 = v5;
      do
      {
        memset(__dst, 170, sizeof(__dst));
        d_namlen = v6->d_namlen;
        if (d_namlen >= 0x17)
        {
          if ((d_namlen | 7) == 0x17)
            v11 = ((unsigned __int16)d_namlen & 0xFFF8) + 8;
          else
            v11 = d_namlen | 7;
          v8 = operator new(v11 + 1);
          *(_QWORD *)&__dst[8] = d_namlen;
          *(_QWORD *)&__dst[16] = v11 - 0x7FFFFFFFFFFFFFFFLL;
          *(_QWORD *)__dst = v8;
        }
        else
        {
          __dst[23] = v6->d_namlen;
          v8 = __dst;
          if (!(_DWORD)d_namlen)
          {
            __dst[d_namlen] = 0;
            v9 = *(std::string **)(a2 + 8);
            if ((unint64_t)v9 < *(_QWORD *)(a2 + 16))
              goto LABEL_10;
            goto LABEL_17;
          }
        }
        memmove(v8, v6->d_name, d_namlen);
        v8[d_namlen] = 0;
        v9 = *(std::string **)(a2 + 8);
        if ((unint64_t)v9 < *(_QWORD *)(a2 + 16))
        {
LABEL_10:
          if ((__dst[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)__dst, *(std::string::size_type *)&__dst[8]);
          }
          else
          {
            v10 = *(_OWORD *)__dst;
            v9->__r_.__value_.__r.__words[2] = *(_QWORD *)&__dst[16];
            *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
          }
          *(_QWORD *)(a2 + 8) = v9 + 1;
          *(_QWORD *)(a2 + 8) = v9 + 1;
          if ((__dst[23] & 0x80000000) == 0)
            goto LABEL_6;
LABEL_21:
          operator delete(*(void **)__dst);
          goto LABEL_6;
        }
LABEL_17:
        *(_QWORD *)(a2 + 8) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a2, (uint64_t)__dst);
        if ((__dst[23] & 0x80000000) != 0)
          goto LABEL_21;
LABEL_6:
        v6 = readdir(v4);
      }
      while (v6);
    }
    return (DIR *)closedir(v4);
  }
  return result;
}

void sub_1BF40FCE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 8) = v16;
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t support::fs::getUidGid(int a1, uid_t *a2, gid_t *a3)
{
  passwd *v5;
  unsigned __int8 v7;
  NSObject *v8;
  void *__p[3];
  uint8_t buf[4];
  void **v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  memset(__p, 170, sizeof(__p));
  if (a1 == 1)
  {
    HIBYTE(__p[2]) = 9;
    strcpy((char *)__p, "_wireless");
    v5 = getpwnam((const char *)__p);
    if (v5)
      goto LABEL_4;
    goto LABEL_6;
  }
  if (!a1)
  {
    HIBYTE(__p[2]) = 6;
    strcpy((char *)__p, "mobile");
    v5 = getpwnam((const char *)__p);
    if (v5)
    {
LABEL_4:
      *a2 = v5->pw_uid;
      *a3 = v5->pw_gid;
      return 1;
    }
LABEL_6:
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED7100E0 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v8 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
        return 0;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
      v8 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
        return 0;
    }
    *(_DWORD *)buf = 136315138;
    v11 = __p;
    _os_log_error_impl(&dword_1BF335000, v8, OS_LOG_TYPE_ERROR, "Getting uid and gid: failed to get passwd for %s", buf, 0xCu);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
  return 0;
}

BOOL support::fs::writeToCompletion(support::fs *this, char *__buf, size_t __nbyte)
{
  int v4;
  size_t v5;
  ssize_t v6;

  v4 = (int)this;
  do
  {
    v5 = __nbyte;
    if (!__nbyte)
      break;
    v6 = write(v4, __buf, __nbyte);
    __nbyte = v5 - v6;
    __buf += v6;
  }
  while ((v6 & 0x8000000000000000) == 0);
  return v5 == 0;
}

BOOL support::fs::writeToCompletion(FILE *__stream, __sFILE *__ptr, size_t __nitems)
{
  size_t v5;
  size_t v6;

  while (1)
  {
    v5 = __nitems;
    if (!__nitems)
      break;
    v6 = fwrite(__ptr, 1uLL, __nitems, __stream);
    __nitems = v5 - v6;
    __ptr = (__sFILE *)((char *)__ptr + v6);
    if (!v6)
      return v5 == 0;
  }
  fflush(__stream);
  return 1;
}

uint64_t support::fs::openFile(const char *a1, int a2, unsigned int a3)
{
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  return open(a1, a2, a3);
}

BOOL support::fs::closeFile(support::fs *this)
{
  int v1;
  int v2;

  v1 = (int)this;
  do
    v2 = close(v1);
  while (v2 && *__error() == 4);
  return v2 == 0;
}

BOOL support::fs::copyFile(const char *a1, const char *a2, int a3)
{
  const char *v6;
  size_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  int v13;
  int v14;
  const char *v15;
  size_t v16;
  size_t v17;
  _BYTE *v18;
  unsigned __int8 v19;
  NSObject *v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  int v25;
  int v26;
  ssize_t v27;
  _BYTE *v28;
  ssize_t v29;
  __int128 v30;
  unsigned __int8 v31;
  NSObject *v32;
  const char *v34;
  const char *v35;
  _BYTE __dst[1024];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (a1[23] >= 0)
    v6 = a1;
  else
    v6 = *(const char **)a1;
  v7 = strlen(v6);
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v9 = operator new(v10 + 1);
    *(_QWORD *)&__dst[8] = v8;
    *(_QWORD *)&__dst[16] = v11 | 0x8000000000000000;
    *(_QWORD *)__dst = v9;
    goto LABEL_11;
  }
  __dst[23] = v7;
  v9 = __dst;
  if (v7)
LABEL_11:
    memmove(v9, v6, v8);
  v9[v8] = 0;
  if (__dst[23] >= 0)
    v12 = __dst;
  else
    v12 = *(const char **)__dst;
  v13 = open(v12, 0, 420);
  v14 = v13;
  if ((__dst[23] & 0x80000000) == 0)
  {
    if ((v13 & 0x80000000) == 0)
      goto LABEL_17;
LABEL_25:
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED7100E0 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v20 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
        return 0;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
      v20 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
        return 0;
    }
    if (a1[23] >= 0)
      v34 = a1;
    else
      v34 = *(const char **)a1;
    *(_DWORD *)__dst = 136315138;
    *(_QWORD *)&__dst[4] = v34;
    _os_log_error_impl(&dword_1BF335000, v20, OS_LOG_TYPE_ERROR, "Failed to open the source file(%s)", __dst, 0xCu);
    return 0;
  }
  operator delete(*(void **)__dst);
  if (v14 < 0)
    goto LABEL_25;
LABEL_17:
  if (a2[23] >= 0)
    v15 = a2;
  else
    v15 = *(const char **)a2;
  v16 = strlen(v15);
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v17 = v16;
  if (v16 >= 0x17)
  {
    v22 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v22 = v16 | 7;
    v23 = v22 + 1;
    v18 = operator new(v22 + 1);
    *(_QWORD *)&__dst[8] = v17;
    *(_QWORD *)&__dst[16] = v23 | 0x8000000000000000;
    *(_QWORD *)__dst = v18;
    goto LABEL_32;
  }
  __dst[23] = v16;
  v18 = __dst;
  if (v16)
LABEL_32:
    memmove(v18, v15, v17);
  v18[v17] = 0;
  if (__dst[23] >= 0)
    v24 = __dst;
  else
    v24 = *(const char **)__dst;
  v25 = open(v24, 1541, 420);
  v26 = v25;
  if ((__dst[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__dst);
    if ((v26 & 0x80000000) == 0)
      goto LABEL_38;
  }
  else if ((v25 & 0x80000000) == 0)
  {
LABEL_38:
    memset(__dst, 170, sizeof(__dst));
    v27 = read(v14, __dst, 0x400uLL);
    if (v27 < 1)
    {
LABEL_44:
      v21 = v27 == 0;
      if (!v27 && a3)
      {
        *(_QWORD *)&v30 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&__dst[112] = v30;
        *(_OWORD *)&__dst[128] = v30;
        *(_OWORD *)&__dst[80] = v30;
        *(_OWORD *)&__dst[96] = v30;
        *(_OWORD *)&__dst[48] = v30;
        *(_OWORD *)&__dst[64] = v30;
        *(_OWORD *)&__dst[16] = v30;
        *(_OWORD *)&__dst[32] = v30;
        *(_OWORD *)__dst = v30;
        if (fstat(v14, (stat *)__dst))
          v21 = 0;
        else
          v21 = fchmod(v26, *(mode_t *)&__dst[4]) == 0;
      }
    }
    else
    {
      v28 = __dst;
      do
      {
        while (!v27)
        {
          memset(__dst, 170, sizeof(__dst));
          v27 = read(v14, __dst, 0x400uLL);
          v28 = __dst;
          if (v27 <= 0)
            goto LABEL_44;
        }
        v29 = write(v26, v28, v27);
        v27 -= v29;
        v28 += v29;
      }
      while ((v29 & 0x8000000000000000) == 0);
      v21 = 0;
    }
    while (close(v26) && *__error() == 4)
      ;
    goto LABEL_56;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED7100E0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
  }
  if (GetOsLogContext(void)::onceToken != -1)
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
    v32 = qword_1ED7100E0;
    if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
      goto LABEL_52;
LABEL_65:
    if (a2[23] >= 0)
      v35 = a2;
    else
      v35 = *(const char **)a2;
    *(_DWORD *)__dst = 136315138;
    *(_QWORD *)&__dst[4] = v35;
    _os_log_error_impl(&dword_1BF335000, v32, OS_LOG_TYPE_ERROR, "Failed to open the destination file(%s)", __dst, 0xCu);
    goto LABEL_52;
  }
  v32 = qword_1ED7100E0;
  if (os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
    goto LABEL_65;
LABEL_52:
  v21 = 0;
LABEL_56:
  while (close(v14) && *__error() == 4)
    ;
  return v21;
}

void sub_1BF41053C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL support::fs::loadFile(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  _BOOL8 v4;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  __int128 v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  _QWORD __b[91];

  __b[89] = *MEMORY[0x1E0C80C00];
  memset(__b, 170, 0x240uLL);
  std::ifstream::basic_ifstream(__b);
  if (!__b[17]
    || (std::istream::tellg(), std::istream::seekg(), std::istream::tellg(), v3 = __b[88], std::istream::seekg(), !v3)
    || *(_DWORD *)((char *)&__b[4] + *(_QWORD *)(__b[0] - 24)))
  {
    v4 = 0;
    goto LABEL_5;
  }
  v7 = *(char **)a2;
  v6 = *(char **)(a2 + 8);
  v8 = (unint64_t)&v6[-*(_QWORD *)a2];
  v9 = v3 - v8;
  if (v3 <= v8)
  {
    if (v3 < v8)
      *(_QWORD *)(a2 + 8) = &v7[v3];
    goto LABEL_36;
  }
  v10 = *(_QWORD *)(a2 + 16);
  if (v10 - (uint64_t)v6 < v9)
  {
    if ((v3 & 0x8000000000000000) != 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = v10 - (_QWORD)v7;
    v12 = 2 * v11;
    if (2 * v11 <= v3)
      v12 = v3;
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v14 = (char *)operator new(v13);
    v15 = &v14[v8];
    v16 = &v14[v13];
    bzero(&v14[v8], v3 - v8);
    if (v6 == v7)
      goto LABEL_34;
    if (v8 >= 8 && (unint64_t)(v7 - v14) >= 0x20)
    {
      if (v8 < 0x20)
      {
        v17 = 0;
        goto LABEL_26;
      }
      v17 = v8 & 0xFFFFFFFFFFFFFFE0;
      v18 = v6 - 16;
      v19 = &v14[v6 - 16 - v7];
      v20 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v21 = *(_OWORD *)v18;
        *((_OWORD *)v19 - 1) = *((_OWORD *)v18 - 1);
        *(_OWORD *)v19 = v21;
        v19 -= 32;
        v18 -= 32;
        v20 -= 32;
      }
      while (v20);
      if (v8 == v17)
        goto LABEL_33;
      if ((v8 & 0x18) != 0)
      {
LABEL_26:
        v15 -= v8 & 0xFFFFFFFFFFFFFFF8;
        v22 = &v6[-v17 - 8];
        v23 = (char *)(v22 - v7);
        v24 = v17 - (v8 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v25 = *(_QWORD *)v22;
          v22 -= 8;
          *(_QWORD *)&v23[(_QWORD)v14] = v25;
          v23 -= 8;
          v24 += 8;
        }
        while (v24);
        v6 -= v8 & 0xFFFFFFFFFFFFFFF8;
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_33;
        goto LABEL_31;
      }
      v15 -= v17;
      v6 -= v17;
    }
LABEL_31:
    v26 = v15 - 1;
    do
    {
      v27 = *--v6;
      *v26-- = v27;
    }
    while (v6 != v7);
LABEL_33:
    v6 = v7;
    v15 = v14;
LABEL_34:
    *(_QWORD *)a2 = v15;
    *(_QWORD *)(a2 + 8) = &v14[v3];
    *(_QWORD *)(a2 + 16) = v16;
    if (v6)
      operator delete(v6);
    goto LABEL_36;
  }
  bzero(*(void **)(a2 + 8), v3 - v8);
  *(_QWORD *)(a2 + 8) = &v6[v9];
LABEL_36:
  std::istream::read();
  v4 = __b[1] == (int)v3;
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)__b + *(_QWORD *)(__b[0] - 24)), *(_DWORD *)((char *)&__b[4] + *(_QWORD *)(__b[0] - 24)) | 4);
LABEL_5:
  __b[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)__b + *(_QWORD *)(__b[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1C3B89C6C](&__b[2]);
  std::istream::~istream();
  MEMORY[0x1C3B89E4C](&__b[53]);
  return v4;
}

void sub_1BF41087C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ifstream::~ifstream((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::basic_ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FA8];
  v3 = MEMORY[0x1E0DE4FA8] + 64;
  a1[53] = MEMORY[0x1E0DE4FA8] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x1C3B89C60](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_1BF410970(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1C3B89E4C](v1 + 424);
  _Unwind_Resume(a1);
}

BOOL support::fs::getFileSize(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
  {
    std::istream::tellg();
    std::istream::seekg();
    std::istream::tellg();
    *a2 = v5;
    std::istream::seekg();
  }
  return v2 != 0;
}

{
  uint64_t v2;
  _BOOL8 v4;
  _QWORD v6[90];

  v6[89] = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int8 *)(a1 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  memset(v6, 170, 0x240uLL);
  std::ifstream::basic_ifstream(v6);
  v4 = v6[17] != 0;
  if (v6[17])
  {
    std::istream::tellg();
    std::istream::seekg();
    std::istream::tellg();
    *a2 = v6[88];
    std::istream::seekg();
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)v6 + *(_QWORD *)(v6[0] - 24)), *(_DWORD *)((char *)&v6[4] + *(_QWORD *)(v6[0] - 24)) | 4);
  }
  v6[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1C3B89C6C](&v6[2]);
  std::istream::~istream();
  MEMORY[0x1C3B89E4C](&v6[53]);
  return v4;
}

_QWORD *std::ifstream::~ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F40];
  v3 = *MEMORY[0x1E0DE4F40];
  *a1 = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1C3B89C6C](a1 + 2);
  std::istream::~istream();
  MEMORY[0x1C3B89E4C](a1 + 53);
  return a1;
}

uint64_t support::fs::loadFile(const char *a1, uint64_t a2)
{
  FILE *v3;
  FILE *v4;
  unint64_t v5;
  size_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  __int128 v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  char *v30;

  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v3 = fopen(a1, "rb");
  if (v3)
  {
    v4 = v3;
    fseek(v3, 0, 2);
    v5 = MEMORY[0x1C3B8A224](v4);
    if (v5 != -1)
    {
      v6 = v5;
      v8 = *(char **)a2;
      v7 = *(char **)(a2 + 8);
      v9 = (unint64_t)&v7[-*(_QWORD *)a2];
      v10 = v5 - v9;
      if (v5 <= v9)
      {
        if (v5 < v9)
          *(_QWORD *)(a2 + 8) = &v8[v5];
        goto LABEL_36;
      }
      v11 = *(_QWORD *)(a2 + 16);
      if (v11 - (uint64_t)v7 >= v10)
      {
        bzero(*(void **)(a2 + 8), v10);
        *(_QWORD *)(a2 + 8) = &v7[v10];
LABEL_36:
        rewind(v4);
        v30 = *(char **)a2;
        v19 = 1;
        fread(v30, v6, 1uLL, v4);
        fclose(v4);
        return v19;
      }
      if ((v5 & 0x8000000000000000) != 0)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v12 = v11 - (_QWORD)v8;
      v13 = 2 * v12;
      if (2 * v12 <= v5)
        v13 = v5;
      if (v12 >= 0x3FFFFFFFFFFFFFFFLL)
        v14 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      v15 = (char *)operator new(v14);
      v16 = &v15[v9];
      v17 = &v15[v14];
      bzero(&v15[v9], v10);
      if (v7 == v8)
      {
LABEL_34:
        *(_QWORD *)a2 = v16;
        *(_QWORD *)(a2 + 8) = &v15[v6];
        *(_QWORD *)(a2 + 16) = v17;
        if (v7)
          operator delete(v7);
        goto LABEL_36;
      }
      if (v9 >= 8 && (unint64_t)(v8 - v15) >= 0x20)
      {
        if (v9 < 0x20)
        {
          v18 = 0;
          goto LABEL_26;
        }
        v18 = v9 & 0xFFFFFFFFFFFFFFE0;
        v20 = v7 - 16;
        v21 = &v15[v7 - 16 - v8];
        v22 = v9 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v23 = *(_OWORD *)v20;
          *((_OWORD *)v21 - 1) = *((_OWORD *)v20 - 1);
          *(_OWORD *)v21 = v23;
          v21 -= 32;
          v20 -= 32;
          v22 -= 32;
        }
        while (v22);
        if (v9 == v18)
          goto LABEL_33;
        if ((v9 & 0x18) != 0)
        {
LABEL_26:
          v16 -= v9 & 0xFFFFFFFFFFFFFFF8;
          v24 = &v7[-v18 - 8];
          v25 = (char *)(v24 - v8);
          v26 = v18 - (v9 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v27 = *(_QWORD *)v24;
            v24 -= 8;
            *(_QWORD *)&v25[(_QWORD)v15] = v27;
            v25 -= 8;
            v26 += 8;
          }
          while (v26);
          v7 -= v9 & 0xFFFFFFFFFFFFFFF8;
          if (v9 == (v9 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_33;
          goto LABEL_31;
        }
        v16 -= v18;
        v7 -= v18;
      }
LABEL_31:
      v28 = v16 - 1;
      do
      {
        v29 = *--v7;
        *v28-- = v29;
      }
      while (v7 != v8);
LABEL_33:
      v7 = v8;
      v16 = v15;
      goto LABEL_34;
    }
  }
  return 0;
}

BOOL support::fs::fileExists(const char *a1)
{
  timespec v1;
  stat v3;

  v1.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v1.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v3.st_blksize = v1;
  *(timespec *)v3.st_qspare = v1;
  v3.st_birthtimespec = v1;
  *(timespec *)&v3.st_size = v1;
  v3.st_mtimespec = v1;
  v3.st_ctimespec = v1;
  *(timespec *)&v3.st_uid = v1;
  v3.st_atimespec = v1;
  *(timespec *)&v3.st_dev = v1;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  return stat(a1, &v3) == 0;
}

void support::fs::createUniqueFilename(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  unsigned int v5;
  char *v6;
  timespec v7;
  std::string *v8;
  uint64_t v9;
  std::sub_match<const char *> *v10;
  std::sub_match<std::__wrap_iter<const char *>> *v11;
  __int128 v12;
  int v13;
  int v14;
  unsigned int v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  int v20;
  std::sub_match<const char *> *v21;
  uint64_t v22;
  void **v23;
  __int128 v24;
  void *tv_nsec;
  unsigned __int8 *v26;
  void *v27;
  char *tv_sec;
  uint64_t v29;
  size_t size;
  std::string *v31;
  _BYTE *v32;
  char v33;
  std::string *v34;
  size_t v35;
  unint64_t v36;
  uint64_t v37;
  std::string *v38;
  char *i;
  size_t v40;
  std::string *v41;
  _BYTE *v42;
  int v43;
  unsigned __int8 *v44;
  int v45;
  char *v46;
  char *v47;
  char *v48;
  char v49;
  unsigned __int8 v50;
  std::string *v51;
  size_t v52;
  size_t v53;
  unint64_t v54;
  uint64_t v55;
  void *v56;
  std::string::size_type v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char v62;
  unsigned __int8 v63;
  std::string *v64;
  size_t v65;
  size_t v66;
  unint64_t v67;
  uint64_t v68;
  void *v69;
  std::string::size_type v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  __darwin_time_t v76;
  BOOL v77;
  uint64_t *p_tv_nsec;
  char *v79;
  timespec *p_st_ctimespec;
  char *v81;
  unsigned __int8 v82;
  std::string *v83;
  char *v84;
  char v85;
  unsigned __int8 v86;
  std::string *v87;
  size_t v88;
  size_t v89;
  unint64_t v90;
  uint64_t v91;
  void *v92;
  std::string::size_type v93;
  char *v94;
  size_t v95;
  unint64_t v96;
  uint64_t v97;
  std::string *v98;
  char *st_blocks;
  char *v100;
  char *v101;
  char v102;
  unsigned __int8 v103;
  std::string *v104;
  size_t v105;
  size_t v106;
  unint64_t v107;
  uint64_t v108;
  void *v109;
  std::string::size_type v110;
  char *v111;
  char *v112;
  char *v113;
  dev_t st_rdev;
  int v115;
  _QWORD *v116;
  timespec *v117;
  std::sub_match<const char *> *v118;
  std::sub_match<const char *> *st_ino;
  __int16 v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  unint64_t v124;
  __darwin_time_t v125;
  _QWORD *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  void *v131;
  __darwin_time_t v132;
  uint64_t v133;
  uint64_t v134;
  __darwin_time_t v135;
  __int16 v136;
  __int128 v137;
  uint64_t v138;
  __int128 v139;
  int v140;
  uint64_t v141;
  unint64_t v142;
  __darwin_time_t v143;
  __darwin_time_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  char *v155;
  uint64_t v156;
  unint64_t v157;
  char *v158;
  uint64_t v159;
  char *v160;
  _QWORD *v161;
  char *v162;
  char v163;
  size_t v164;
  std::string *v165;
  _BYTE *v166;
  char v167;
  std::string *v168;
  size_t v169;
  unint64_t v170;
  uint64_t v171;
  std::string *v172;
  char *v173;
  char first;
  unsigned __int8 v175;
  std::string *v176;
  size_t v177;
  size_t v178;
  unint64_t v179;
  uint64_t v180;
  void *v181;
  std::string::size_type v182;
  char *v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  char *__s;
  size_t v191;
  char v192;
  uint64_t v193;
  char *v194;
  blkcnt_t v195;
  char *v196;
  std::string v197;
  void *__p[4];
  std::string v199;
  std::locale v200[2];
  __int128 v201;
  __int128 v202;
  __int128 v203;
  stat v204;
  __int128 v205;
  _BYTE v206[32];
  uint64_t v207;
  uint64_t v208;
  char v209;
  uint64_t v210;
  uint64_t v211;
  char v212;
  char v213;
  uint64_t v214;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v203 = v4;
  v201 = v4;
  v202 = v4;
  *(_OWORD *)&v200[0].__locale_ = v4;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)v200, "^([/_\\-[:alnum:]]*)(.*)", 0);
  memset(&v199, 170, sizeof(v199));
  v187 = a2;
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v199, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v199 = *(std::string *)a1;
  v5 = 0;
  v6 = &v206[24];
  v188 = a1;
  v196 = &v206[24];
  while (1)
  {
    v7.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v7.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&v204.st_blksize = v7;
    *(timespec *)v204.st_qspare = v7;
    v204.st_birthtimespec = v7;
    *(timespec *)&v204.st_size = v7;
    v204.st_mtimespec = v7;
    v204.st_ctimespec = v7;
    *(timespec *)&v204.st_uid = v7;
    v204.st_atimespec = v7;
    *(timespec *)&v204.st_dev = v7;
    if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v199;
    else
      v8 = (std::string *)v199.__r_.__value_.__r.__words[0];
    if (stat((const char *)v8, &v204))
    {
      *(std::string *)v187 = v199;
      goto LABEL_333;
    }
    v9 = *(unsigned __int8 *)(a1 + 23);
    if ((v9 & 0x80u) == 0)
      v10 = (std::sub_match<const char *> *)a1;
    else
      v10 = *(std::sub_match<const char *> **)a1;
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(a1 + 8);
    v11 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v10 + v9);
    *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *((_OWORD *)v6 + 2) = v12;
    *((_OWORD *)v6 + 3) = v12;
    *(_OWORD *)v6 = v12;
    *((_OWORD *)v6 + 1) = v12;
    v207 = 0;
    v208 = 0;
    v209 = 0;
    v210 = 0;
    v211 = 0;
    v212 = 0;
    v213 = 0;
    v214 = 0;
    v205 = 0u;
    memset(v206, 0, 25);
    *(_OWORD *)&v204.st_birthtimespec.tv_nsec = v12;
    v204.st_ctimespec.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v204.st_atimespec.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    memset(&v204.st_mtimespec, 0, 17);
    memset(&v204.st_ctimespec.tv_nsec, 0, 17);
    LOBYTE(v204.st_size) = 0;
    v204.st_blocks = 0;
    memset(&v204, 0, 41);
    v13 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v200, v10, (std::sub_match<const char *> *)((char *)v10 + v9), (std::vector<std::csub_match> *)&v204, 4160);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)&v205, (uint64_t)v10, v11, (uint64_t *)&v204.st_dev, 0);
    if (*(_QWORD *)&v204.st_dev)
    {
      v204.st_ino = *(_QWORD *)&v204.st_dev;
      operator delete(*(void **)&v204.st_dev);
    }
    if (v212)
      v14 = v13 ^ 1;
    else
      v14 = 1;
    if ((_QWORD)v205)
    {
      *((_QWORD *)&v205 + 1) = v205;
      operator delete((void *)v205);
    }
    if ((v13 & v14) == 0)
      break;
    v15 = v5 + 1;
    memset(__p, 170, 24);
    std::to_string((std::string *)&v205, v15);
    v16 = std::string::insert((std::string *)&v205, 0, "$1-", 3uLL);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    *(_QWORD *)&v204.st_uid = *((_QWORD *)&v16->__r_.__value_.__l + 2);
    *(_OWORD *)&v204.st_dev = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v18 = std::string::append((std::string *)&v204, "$2", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __p[2] = (void *)v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v6 = v196;
    if (SHIBYTE(v204.st_gid) < 0)
    {
      operator delete(*(void **)&v204.st_dev);
      v189 = v15;
      if ((v206[7] & 0x80000000) != 0)
LABEL_298:
        operator delete((void *)v205);
    }
    else
    {
      v189 = v15;
      if ((v206[7] & 0x80000000) != 0)
        goto LABEL_298;
    }
    memset(&v197, 0, sizeof(v197));
    v20 = *(char *)(a1 + 23);
    if (v20 >= 0)
      v21 = (std::sub_match<const char *> *)a1;
    else
      v21 = *(std::sub_match<const char *> **)a1;
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 23);
    else
      v22 = *(_QWORD *)(a1 + 8);
    v23 = __p;
    if (SHIBYTE(__p[2]) < 0)
      v23 = (void **)__p[0];
    __s = (char *)v23;
    *(_QWORD *)&v24 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v204.st_gen = v24;
    v204.st_size = 0xAAAAAAAAAAAAAAAALL;
    v204.st_ctimespec.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(&v204.st_rdev + 1) = -1431655766;
    *(_QWORD *)&v204.st_dev = v21;
    v204.st_ino = (__darwin_ino64_t)v21 + v22;
    *(_QWORD *)&v204.st_uid = v200;
    v204.st_rdev = 0;
    memset(&v204.st_birthtimespec, 0, 17);
    memset(&v204.st_blocks, 0, 17);
    LOBYTE(v204.st_qspare[0]) = 0;
    v204.st_qspare[1] = 0;
    memset(&v204.st_atimespec, 0, 41);
    *((_OWORD *)v6 + 2) = v24;
    *((_OWORD *)v6 + 3) = v24;
    *(_OWORD *)v6 = v24;
    *((_OWORD *)v6 + 1) = v24;
    v207 = 0;
    v208 = 0;
    v209 = 0;
    v210 = 0;
    v211 = 0;
    v212 = 0;
    v213 = 0;
    v214 = 0;
    v205 = 0u;
    memset(v206, 0, 25);
    std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v200, v21, (std::sub_match<const char *> *)((char *)v21 + v22), (std::vector<std::csub_match> *)&v205, 0);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)&v204.st_atimespec, (uint64_t)v21, (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v21 + v22), (uint64_t *)&v205, 0);
    if ((_QWORD)v205)
    {
      *((_QWORD *)&v205 + 1) = v205;
      operator delete((void *)v205);
    }
    tv_nsec = (void *)v204.st_atimespec.tv_nsec;
    if (v204.st_atimespec.tv_nsec != v204.st_atimespec.tv_sec)
    {
      v191 = strlen(__s);
      v26 = (unsigned __int8 *)&__s[v191];
      while (2)
      {
        tv_sec = (char *)v204.st_birthtimespec.tv_sec;
        v29 = v204.st_birthtimespec.tv_nsec;
        while (tv_sec != (char *)v29)
        {
          v33 = *tv_sec;
          if ((SHIBYTE(v197.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (HIBYTE(v197.__r_.__value_.__r.__words[2]) != 22)
            {
              size = HIBYTE(v197.__r_.__value_.__r.__words[2]);
              *((_BYTE *)&v197.__r_.__value_.__s + 23) = (*((_BYTE *)&v197.__r_.__value_.__s + 23) + 1) & 0x7F;
              v31 = &v197;
              goto LABEL_41;
            }
            v34 = &v197;
            size = 22;
LABEL_49:
            if (size + 1 > 2 * size)
              v36 = size + 1;
            else
              v36 = 2 * size;
            v37 = (v36 & 0x7FFFFFFFFFFFFFF8) + 8;
            if ((v36 | 7) != 0x17)
              v37 = v36 | 7;
            if (v36 >= 0x17)
              v35 = v37 + 1;
            else
              v35 = 23;
LABEL_57:
            v38 = (std::string *)operator new(v35);
            v31 = v38;
            if (!size || (memmove(v38, v34, size), size != 22))
              operator delete(v34);
            v197.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
            v197.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
            goto LABEL_62;
          }
          size = (v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (v197.__r_.__value_.__l.__size_ == size)
          {
            if ((v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
              std::string::__throw_length_error[abi:ne180100]();
            v34 = (std::string *)v197.__r_.__value_.__r.__words[0];
            v35 = 0x7FFFFFFFFFFFFFF7;
            if (size < 0x3FFFFFFFFFFFFFF3)
              goto LABEL_49;
            goto LABEL_57;
          }
          size = v197.__r_.__value_.__l.__size_;
          v31 = (std::string *)v197.__r_.__value_.__r.__words[0];
LABEL_62:
          v197.__r_.__value_.__l.__size_ = size + 1;
LABEL_41:
          v32 = (char *)v31 + size;
          *v32 = v33;
          v32[1] = 0;
          ++tv_sec;
        }
        if (v191)
        {
          for (i = __s; i != (char *)v26; ++i)
          {
            v43 = *i;
            if (v43 != 36)
              goto LABEL_135;
            v44 = (unsigned __int8 *)(i + 1);
            if (i + 1 == (char *)v26)
              goto LABEL_134;
            v45 = (char)*v44;
            v43 = *v44;
            if (v45 <= 38)
            {
              if (v45 == 36)
              {
                ++i;
                v82 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
                if ((SHIBYTE(v197.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_136;
                goto LABEL_161;
              }
              if (v45 != 38)
                goto LABEL_123;
              v46 = *(char **)v204.st_atimespec.tv_sec;
              v47 = *(char **)(v204.st_atimespec.tv_sec + 8);
              if (*(char **)v204.st_atimespec.tv_sec == v47)
              {
LABEL_179:
                i = (char *)v44;
                continue;
              }
              while (2)
              {
                while (2)
                {
                  v49 = *v46;
                  v50 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
                  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
                  {
                    v52 = (v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                    if (v197.__r_.__value_.__l.__size_ == v52)
                    {
                      if ((v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
                        goto LABEL_339;
                      v51 = (std::string *)v197.__r_.__value_.__r.__words[0];
                      v53 = 0x7FFFFFFFFFFFFFF7;
                      if (v52 < 0x3FFFFFFFFFFFFFF3)
                        goto LABEL_82;
                      goto LABEL_90;
                    }
                    v52 = v197.__r_.__value_.__l.__size_;
                    v57 = v197.__r_.__value_.__r.__words[0];
                  }
                  else
                  {
                    if (HIBYTE(v197.__r_.__value_.__r.__words[2]) != 22)
                    {
                      *((_BYTE *)&v197.__r_.__value_.__s + 23) = (*((_BYTE *)&v197.__r_.__value_.__s + 23) + 1) & 0x7F;
                      v48 = (char *)&v197 + v50;
                      *v48 = v49;
                      v48[1] = 0;
                      if (++v46 == v47)
                        goto LABEL_201;
                      continue;
                    }
                    v51 = &v197;
                    v52 = 22;
LABEL_82:
                    if (v52 + 1 > 2 * v52)
                      v54 = v52 + 1;
                    else
                      v54 = 2 * v52;
                    v55 = (v54 & 0x7FFFFFFFFFFFFFF8) + 8;
                    if ((v54 | 7) != 0x17)
                      v55 = v54 | 7;
                    if (v54 >= 0x17)
                      v53 = v55 + 1;
                    else
                      v53 = 23;
LABEL_90:
                    v56 = operator new(v53);
                    v57 = (std::string::size_type)v56;
                    if (!v52 || (memmove(v56, v51, v52), v52 != 22))
                      operator delete(v51);
                    v197.__r_.__value_.__r.__words[0] = v57;
                    v197.__r_.__value_.__r.__words[2] = v53 | 0x8000000000000000;
                  }
                  break;
                }
                v197.__r_.__value_.__l.__size_ = v52 + 1;
                v58 = (char *)(v57 + v52);
                *v58 = v49;
                v58[1] = 0;
                if (++v46 == v47)
                  goto LABEL_201;
                continue;
              }
            }
            if (v45 != 39)
            {
              if (v45 == 96)
              {
                v59 = (char *)v204.st_birthtimespec.tv_sec;
                v60 = v204.st_birthtimespec.tv_nsec;
                if (v204.st_birthtimespec.tv_sec == v204.st_birthtimespec.tv_nsec)
                  goto LABEL_179;
                while (2)
                {
                  while (2)
                  {
                    v62 = *v59;
                    v63 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
                    if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
                    {
                      v65 = (v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                      if (v197.__r_.__value_.__l.__size_ == v65)
                      {
                        if ((v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
                          goto LABEL_339;
                        v64 = (std::string *)v197.__r_.__value_.__r.__words[0];
                        v66 = 0x7FFFFFFFFFFFFFF7;
                        if (v65 < 0x3FFFFFFFFFFFFFF3)
                          goto LABEL_108;
                        goto LABEL_116;
                      }
                      v65 = v197.__r_.__value_.__l.__size_;
                      v70 = v197.__r_.__value_.__r.__words[0];
                    }
                    else
                    {
                      if (HIBYTE(v197.__r_.__value_.__r.__words[2]) != 22)
                      {
                        *((_BYTE *)&v197.__r_.__value_.__s + 23) = (*((_BYTE *)&v197.__r_.__value_.__s + 23) + 1) & 0x7F;
                        v61 = (char *)&v197 + v63;
                        *v61 = v62;
                        v61[1] = 0;
                        if (++v59 == (char *)v60)
                          goto LABEL_201;
                        continue;
                      }
                      v64 = &v197;
                      v65 = 22;
LABEL_108:
                      if (v65 + 1 > 2 * v65)
                        v67 = v65 + 1;
                      else
                        v67 = 2 * v65;
                      v68 = (v67 & 0x7FFFFFFFFFFFFFF8) + 8;
                      if ((v67 | 7) != 0x17)
                        v68 = v67 | 7;
                      if (v67 >= 0x17)
                        v66 = v68 + 1;
                      else
                        v66 = 23;
LABEL_116:
                      v69 = operator new(v66);
                      v70 = (std::string::size_type)v69;
                      if (!v65 || (memmove(v69, v64, v65), v65 != 22))
                        operator delete(v64);
                      v197.__r_.__value_.__r.__words[0] = v70;
                      v197.__r_.__value_.__r.__words[2] = v66 | 0x8000000000000000;
                    }
                    break;
                  }
                  v197.__r_.__value_.__l.__size_ = v65 + 1;
                  v71 = (char *)(v70 + v65);
                  *v71 = v62;
                  v71[1] = 0;
                  if (++v59 == (char *)v60)
                    goto LABEL_201;
                  continue;
                }
              }
LABEL_123:
              if ((v43 - 48) <= 9)
              {
                v72 = *v44 - 48;
                if (i + 2 != (char *)v26)
                {
                  v73 = i[2];
                  v74 = v73 - 48;
                  v75 = v73 + 10 * (int)v72 - 48;
                  if (v74 > 9)
                  {
                    v44 = (unsigned __int8 *)(i + 1);
                  }
                  else
                  {
                    v72 = v75;
                    v44 = (unsigned __int8 *)(i + 2);
                  }
                }
                v76 = v204.st_atimespec.tv_sec + 24 * (int)v72;
                v77 = 0xAAAAAAAAAAAAAAABLL * ((v204.st_atimespec.tv_nsec - v204.st_atimespec.tv_sec) >> 3) > v72;
                p_tv_nsec = &v204.st_mtimespec.tv_nsec;
                if (v77)
                  p_tv_nsec = (uint64_t *)v76;
                v79 = (char *)*p_tv_nsec;
                p_st_ctimespec = (timespec *)(v76 + 8);
                if (!v77)
                  p_st_ctimespec = &v204.st_ctimespec;
                v81 = (char *)p_st_ctimespec->tv_sec;
                if (v79 == (char *)p_st_ctimespec->tv_sec)
                  goto LABEL_179;
                while (2)
                {
                  while (2)
                  {
                    v85 = *v79;
                    v86 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
                    if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
                    {
                      v88 = (v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                      if (v197.__r_.__value_.__l.__size_ == v88)
                      {
                        if ((v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
                          goto LABEL_339;
                        v87 = (std::string *)v197.__r_.__value_.__r.__words[0];
                        v89 = 0x7FFFFFFFFFFFFFF7;
                        if (v88 < 0x3FFFFFFFFFFFFFF3)
                          goto LABEL_145;
                        goto LABEL_153;
                      }
                      v88 = v197.__r_.__value_.__l.__size_;
                      v93 = v197.__r_.__value_.__r.__words[0];
                    }
                    else
                    {
                      if (HIBYTE(v197.__r_.__value_.__r.__words[2]) != 22)
                      {
                        *((_BYTE *)&v197.__r_.__value_.__s + 23) = (*((_BYTE *)&v197.__r_.__value_.__s + 23) + 1) & 0x7F;
                        v84 = (char *)&v197 + v86;
                        *v84 = v85;
                        v84[1] = 0;
                        if (++v79 == v81)
                          goto LABEL_201;
                        continue;
                      }
                      v87 = &v197;
                      v88 = 22;
LABEL_145:
                      if (v88 + 1 > 2 * v88)
                        v90 = v88 + 1;
                      else
                        v90 = 2 * v88;
                      v91 = (v90 & 0x7FFFFFFFFFFFFFF8) + 8;
                      if ((v90 | 7) != 0x17)
                        v91 = v90 | 7;
                      if (v90 >= 0x17)
                        v89 = v91 + 1;
                      else
                        v89 = 23;
LABEL_153:
                      v92 = operator new(v89);
                      v93 = (std::string::size_type)v92;
                      if (!v88 || (memmove(v92, v87, v88), v88 != 22))
                        operator delete(v87);
                      v197.__r_.__value_.__r.__words[0] = v93;
                      v197.__r_.__value_.__r.__words[2] = v89 | 0x8000000000000000;
                    }
                    break;
                  }
                  v197.__r_.__value_.__l.__size_ = v88 + 1;
                  v94 = (char *)(v93 + v88);
                  *v94 = v85;
                  v94[1] = 0;
                  if (++v79 == v81)
                    goto LABEL_201;
                  continue;
                }
              }
LABEL_134:
              LOBYTE(v43) = 36;
LABEL_135:
              v82 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
              if ((SHIBYTE(v197.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_136:
                if (v82 == 22)
                {
                  v83 = &v197;
                  v40 = 22;
                  goto LABEL_164;
                }
                v40 = v82;
                *((_BYTE *)&v197.__r_.__value_.__s + 23) = (v82 + 1) & 0x7F;
                v41 = &v197;
LABEL_66:
                v42 = (char *)v41 + v40;
                *v42 = v43;
                v42[1] = 0;
                continue;
              }
LABEL_161:
              v40 = (v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if (v197.__r_.__value_.__l.__size_ == v40)
              {
                if ((v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
LABEL_339:
                  std::string::__throw_length_error[abi:ne180100]();
                v6 = v196;
                v83 = (std::string *)v197.__r_.__value_.__r.__words[0];
                v95 = 0x7FFFFFFFFFFFFFF7;
                if (v40 < 0x3FFFFFFFFFFFFFF3)
                {
LABEL_164:
                  if (v40 + 1 > 2 * v40)
                    v96 = v40 + 1;
                  else
                    v96 = 2 * v40;
                  v97 = (v96 & 0x7FFFFFFFFFFFFFF8) + 8;
                  if ((v96 | 7) != 0x17)
                    v97 = v96 | 7;
                  if (v96 >= 0x17)
                    v95 = v97 + 1;
                  else
                    v95 = 23;
                }
                v98 = (std::string *)operator new(v95);
                v41 = v98;
                if (!v40 || (memmove(v98, v83, v40), v40 != 22))
                  operator delete(v83);
                v197.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
                v197.__r_.__value_.__r.__words[2] = v95 | 0x8000000000000000;
              }
              else
              {
                v40 = v197.__r_.__value_.__l.__size_;
                v41 = (std::string *)v197.__r_.__value_.__r.__words[0];
              }
              v197.__r_.__value_.__l.__size_ = v40 + 1;
              goto LABEL_66;
            }
            st_blocks = (char *)v204.st_blocks;
            v100 = *(char **)&v204.st_blksize;
            if (v204.st_blocks == *(_QWORD *)&v204.st_blksize)
              goto LABEL_179;
            do
            {
              while (1)
              {
                v102 = *st_blocks;
                v103 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
                if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
                  break;
                if (HIBYTE(v197.__r_.__value_.__r.__words[2]) == 22)
                {
                  v104 = &v197;
                  v105 = 22;
LABEL_187:
                  if (v105 + 1 > 2 * v105)
                    v107 = v105 + 1;
                  else
                    v107 = 2 * v105;
                  v108 = (v107 & 0x7FFFFFFFFFFFFFF8) + 8;
                  if ((v107 | 7) != 0x17)
                    v108 = v107 | 7;
                  if (v107 >= 0x17)
                    v106 = v108 + 1;
                  else
                    v106 = 23;
                  goto LABEL_195;
                }
                *((_BYTE *)&v197.__r_.__value_.__s + 23) = (*((_BYTE *)&v197.__r_.__value_.__s + 23) + 1) & 0x7F;
                v101 = (char *)&v197 + v103;
                *v101 = v102;
                v101[1] = 0;
                if (++st_blocks == v100)
                  goto LABEL_201;
              }
              v105 = (v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if (v197.__r_.__value_.__l.__size_ != v105)
              {
                v105 = v197.__r_.__value_.__l.__size_;
                v110 = v197.__r_.__value_.__r.__words[0];
                goto LABEL_200;
              }
              if ((v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
                goto LABEL_339;
              v104 = (std::string *)v197.__r_.__value_.__r.__words[0];
              v106 = 0x7FFFFFFFFFFFFFF7;
              if (v105 < 0x3FFFFFFFFFFFFFF3)
                goto LABEL_187;
LABEL_195:
              v109 = operator new(v106);
              v110 = (std::string::size_type)v109;
              if (!v105 || (memmove(v109, v104, v105), v105 != 22))
                operator delete(v104);
              v197.__r_.__value_.__r.__words[0] = v110;
              v197.__r_.__value_.__r.__words[2] = v106 | 0x8000000000000000;
LABEL_200:
              v197.__r_.__value_.__l.__size_ = v105 + 1;
              v111 = (char *)(v110 + v105);
              *v111 = v102;
              v111[1] = 0;
              ++st_blocks;
            }
            while (st_blocks != v100);
LABEL_201:
            i = (char *)v44;
            v6 = v196;
          }
        }
        v113 = (char *)v204.st_blocks;
        v112 = *(char **)&v204.st_blksize;
        st_rdev = v204.st_rdev;
        v115 = v204.st_rdev | 0x800;
        v204.st_rdev |= 0x800u;
        v27 = (void *)v204.st_atimespec.tv_sec;
        v116 = &v204.st_mtimespec.tv_nsec;
        if (v204.st_atimespec.tv_nsec != v204.st_atimespec.tv_sec)
          v116 = (_QWORD *)v204.st_atimespec.tv_sec;
        v117 = (timespec *)(v204.st_atimespec.tv_sec + 8);
        if (v204.st_atimespec.tv_nsec == v204.st_atimespec.tv_sec)
          v117 = &v204.st_ctimespec;
        v118 = (std::sub_match<const char *> *)v117->tv_sec;
        st_ino = (std::sub_match<const char *> *)v204.st_ino;
        if (*v116 != v117->tv_sec)
        {
          v194 = *(char **)&v204.st_blksize;
          v195 = v204.st_blocks;
          goto LABEL_208;
        }
        if ((std::sub_match<const char *> *)v204.st_ino != v118)
        {
          v138 = *(_QWORD *)&v204.st_uid;
          *(_QWORD *)&v139 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v139 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *((_OWORD *)v6 + 2) = v139;
          *((_OWORD *)v6 + 3) = v139;
          *(_OWORD *)v6 = v139;
          *((_OWORD *)v6 + 1) = v139;
          v207 = 0;
          v208 = 0;
          v209 = 0;
          v210 = 0;
          v211 = 0;
          v212 = 0;
          v213 = 0;
          v214 = 0;
          v205 = 0u;
          memset(v206, 0, 25);
          v140 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v138, v118, st_ino, (std::vector<std::csub_match> *)&v205, st_rdev | 0x860u);
          v141 = v207;
          v142 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v205 + 1) - v205) >> 3);
          v143 = v204.st_atimespec.tv_sec;
          v144 = v204.st_atimespec.tv_nsec;
          v145 = 0xAAAAAAAAAAAAAAABLL * ((v204.st_atimespec.tv_nsec - v204.st_atimespec.tv_sec) >> 3);
          if (v142 <= v145)
          {
            if (v142 < v145)
            {
              v144 = v204.st_atimespec.tv_sec + 8 * ((uint64_t)(*((_QWORD *)&v205 + 1) - v205) >> 3);
              v204.st_atimespec.tv_nsec = v144;
            }
          }
          else
          {
            std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append((std::vector<std::ssub_match> *)&v204.st_atimespec, v142 - v145);
            v143 = v204.st_atimespec.tv_sec;
            v144 = v204.st_atimespec.tv_nsec;
          }
          if (v144 == v143)
          {
            v158 = (char *)v205;
          }
          else
          {
            v156 = 0;
            v157 = 0;
            v159 = *((_QWORD *)&v205 + 1);
            v158 = (char *)v205;
            do
            {
              if (0xAAAAAAAAAAAAAAABLL * ((v159 - (uint64_t)v158) >> 3) <= v157)
                v160 = &v206[8];
              else
                v160 = &v158[v156];
              *(_QWORD *)(v143 + v156) = (char *)v118 + *(_QWORD *)v160 - v141;
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v205 + 1) - v205) >> 3) <= v157)
                v161 = &v206[16];
              else
                v161 = (_QWORD *)(v205 + v156 + 8);
              *(_QWORD *)(v204.st_atimespec.tv_sec + v156 + 8) = (char *)v118 + *v161 - v141;
              v159 = *((_QWORD *)&v205 + 1);
              v158 = (char *)v205;
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v205 + 1) - v205) >> 3) <= v157)
                v162 = v6;
              else
                v162 = (char *)(v205 + v156 + 16);
              v163 = *v162;
              v143 = v204.st_atimespec.tv_sec;
              *(_BYTE *)(v204.st_atimespec.tv_sec + v156 + 16) = v163;
              ++v157;
              v156 += 24;
            }
            while (v157 < 0xAAAAAAAAAAAAAAABLL * ((v204.st_atimespec.tv_nsec - v143) >> 3));
          }
          v204.st_mtimespec.tv_nsec = (uint64_t)st_ino;
          v204.st_ctimespec.tv_sec = (__darwin_time_t)st_ino;
          v204.st_birthtimespec.tv_sec = (__darwin_time_t)v118 + v207 - v141;
          v204.st_birthtimespec.tv_nsec = (uint64_t)v118 + v208 - v141;
          LOBYTE(v204.st_size) = v209;
          LOBYTE(v204.st_ctimespec.tv_nsec) = 0;
          v204.st_blocks = (blkcnt_t)v118 + v210 - v141;
          *(_QWORD *)&v204.st_blksize = (char *)v118 + v211 - v141;
          LOBYTE(v204.st_gen) = v212;
          LOBYTE(v204.st_qspare[0]) = v213;
          if (v158)
          {
            *((_QWORD *)&v205 + 1) = v158;
            operator delete(v158);
          }
          if (v140)
          {
            v27 = (void *)v204.st_atimespec.tv_sec;
LABEL_38:
            if ((void *)v204.st_atimespec.tv_nsec != v27)
              continue;
            while (2)
            {
              if (v113 == v112)
                goto LABEL_326;
              v167 = *v113;
              if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
              {
                v164 = (v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                if (v197.__r_.__value_.__l.__size_ == v164)
                {
                  if ((v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
                    std::string::__throw_length_error[abi:ne180100]();
                  v168 = (std::string *)v197.__r_.__value_.__r.__words[0];
                  v169 = 0x7FFFFFFFFFFFFFF7;
                  if (v164 < 0x3FFFFFFFFFFFFFF3)
                  {
LABEL_283:
                    if (v164 + 1 > 2 * v164)
                      v170 = v164 + 1;
                    else
                      v170 = 2 * v164;
                    v171 = (v170 & 0x7FFFFFFFFFFFFFF8) + 8;
                    if ((v170 | 7) != 0x17)
                      v171 = v170 | 7;
                    if (v170 >= 0x17)
                      v169 = v171 + 1;
                    else
                      v169 = 23;
                  }
                  v172 = (std::string *)operator new(v169);
                  v165 = v172;
                  if (!v164 || (memmove(v172, v168, v164), v164 != 22))
                    operator delete(v168);
                  v197.__r_.__value_.__r.__words[0] = (std::string::size_type)v165;
                  v197.__r_.__value_.__r.__words[2] = v169 | 0x8000000000000000;
                }
                else
                {
                  v164 = v197.__r_.__value_.__l.__size_;
                  v165 = (std::string *)v197.__r_.__value_.__r.__words[0];
                }
                v197.__r_.__value_.__l.__size_ = v164 + 1;
              }
              else
              {
                if (HIBYTE(v197.__r_.__value_.__r.__words[2]) == 22)
                {
                  v168 = &v197;
                  v164 = 22;
                  goto LABEL_283;
                }
                v164 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
                *((_BYTE *)&v197.__r_.__value_.__s + 23) = (*((_BYTE *)&v197.__r_.__value_.__s + 23) + 1) & 0x7F;
                v165 = &v197;
              }
              v166 = (char *)v165 + v164;
              *v166 = v167;
              v166[1] = 0;
              ++v113;
              continue;
            }
          }
          v194 = v112;
          v195 = (blkcnt_t)v113;
          v118 = (std::sub_match<const char *> *)((char *)v118 + 1);
          v115 = v204.st_rdev;
          st_ino = (std::sub_match<const char *> *)v204.st_ino;
LABEL_208:
          v120 = v115;
          v204.st_rdev = v115 | 0x80;
          v121 = *(_QWORD *)&v204.st_uid;
          *(_QWORD *)&v122 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v122 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *((_OWORD *)v6 + 2) = v122;
          *((_OWORD *)v6 + 3) = v122;
          *(_OWORD *)v6 = v122;
          *((_OWORD *)v6 + 1) = v122;
          v207 = 0;
          v208 = 0;
          v209 = 0;
          v210 = 0;
          v211 = 0;
          v212 = 0;
          v213 = 0;
          v214 = 0;
          v205 = 0u;
          memset(v206, 0, 25);
          v193 = (uint64_t)st_ino;
          v192 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v121, v118, st_ino, (std::vector<std::csub_match> *)&v205, v115 | 0x80u);
          v123 = v207;
          v124 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v205 + 1) - v205) >> 3);
          v125 = v204.st_atimespec.tv_sec;
          v126 = (_QWORD *)v204.st_atimespec.tv_nsec;
          v127 = 0xAAAAAAAAAAAAAAABLL * ((v204.st_atimespec.tv_nsec - v204.st_atimespec.tv_sec) >> 3);
          v128 = v124 - v127;
          if (v124 <= v127)
          {
            if (v124 < v127)
            {
              v126 = (_QWORD *)(v204.st_atimespec.tv_sec + 8 * ((uint64_t)(*((_QWORD *)&v205 + 1) - v205) >> 3));
              v204.st_atimespec.tv_nsec = (uint64_t)v126;
            }
            v6 = v196;
            v113 = (char *)v195;
            v136 = v120;
            if (v126 != (_QWORD *)v204.st_atimespec.tv_sec)
            {
LABEL_235:
              v147 = 0;
              v148 = 0;
              v149 = *((_QWORD *)&v205 + 1);
              v150 = v205;
              do
              {
                v151 = 0xAAAAAAAAAAAAAAABLL * ((v149 - v150) >> 3);
                v152 = (_QWORD *)(v150 + v147);
                if (v151 <= v148)
                  v153 = &v206[8];
                else
                  v153 = v152;
                *(_QWORD *)(v125 + v147) = (char *)v118 + *v153 - v123;
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v205 + 1) - v205) >> 3) <= v148)
                  v154 = &v206[16];
                else
                  v154 = (_QWORD *)(v205 + v147 + 8);
                *(_QWORD *)(v204.st_atimespec.tv_sec + v147 + 8) = (char *)v118 + *v154 - v123;
                v149 = *((_QWORD *)&v205 + 1);
                v150 = v205;
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v205 + 1) - v205) >> 3) <= v148)
                  v155 = v6;
                else
                  v155 = (char *)(v205 + v147 + 16);
                v125 = v204.st_atimespec.tv_sec;
                *(_BYTE *)(v204.st_atimespec.tv_sec + v147 + 16) = *v155;
                ++v148;
                v147 += 24;
              }
              while (v148 < 0xAAAAAAAAAAAAAAABLL * ((v204.st_atimespec.tv_nsec - v125) >> 3));
            }
          }
          else
          {
            if (0xAAAAAAAAAAAAAAABLL * ((v204.st_mtimespec.tv_sec - v204.st_atimespec.tv_nsec) >> 3) >= v128)
            {
              v133 = v204.st_atimespec.tv_nsec + 24 * v128;
              v146 = 8 * ((uint64_t)(*((_QWORD *)&v205 + 1) - v205) >> 3)
                   - 8 * ((v204.st_atimespec.tv_nsec - v204.st_atimespec.tv_sec) >> 3);
              do
              {
                *v126 = 0;
                v126[1] = 0;
                *((_BYTE *)v126 + 16) = 0;
                v126 += 3;
                v146 -= 24;
              }
              while (v146);
              v204.st_atimespec.tv_nsec = v133;
              v6 = v196;
              v113 = (char *)v195;
              v136 = v120;
            }
            else
            {
              if (v124 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              v129 = 0x5555555555555556 * ((v204.st_mtimespec.tv_sec - v204.st_atimespec.tv_sec) >> 3);
              if (v129 <= v124)
                v129 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v205 + 1) - v205) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v204.st_mtimespec.tv_sec - v204.st_atimespec.tv_sec) >> 3) >= 0x555555555555555)
                v130 = 0xAAAAAAAAAAAAAAALL;
              else
                v130 = v129;
              if (v130 > 0xAAAAAAAAAAAAAAALL)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v131 = operator new(24 * v130);
              v132 = (__darwin_time_t)v131 + 24 * v127;
              v133 = (uint64_t)v131 + 24 * v124;
              v134 = 24 * v124 - 24 * v127;
              v135 = v132;
              do
              {
                *(_QWORD *)v135 = 0;
                *(_QWORD *)(v135 + 8) = 0;
                *(_BYTE *)(v135 + 16) = 0;
                v135 += 24;
                v134 -= 24;
              }
              while (v134);
              v113 = (char *)v195;
              v136 = v120;
              if (v126 != (_QWORD *)v125)
              {
                do
                {
                  v137 = *(_OWORD *)(v126 - 3);
                  *(_QWORD *)(v132 - 8) = *(v126 - 1);
                  *(_OWORD *)(v132 - 24) = v137;
                  v132 -= 24;
                  v126 -= 3;
                }
                while (v126 != (_QWORD *)v125);
                v126 = (_QWORD *)v125;
              }
              v204.st_atimespec.tv_sec = v132;
              v204.st_atimespec.tv_nsec = v133;
              v204.st_mtimespec.tv_sec = (__darwin_time_t)v131 + 24 * v130;
              v6 = v196;
              if (v126)
              {
                operator delete(v126);
                v133 = v204.st_atimespec.tv_nsec;
              }
            }
            v125 = v204.st_atimespec.tv_sec;
            if (v133 != v204.st_atimespec.tv_sec)
              goto LABEL_235;
          }
          v204.st_mtimespec.tv_nsec = v193;
          v204.st_ctimespec.tv_sec = v193;
          v204.st_birthtimespec.tv_sec = (__darwin_time_t)v118 + v207 - v123;
          v204.st_birthtimespec.tv_nsec = (uint64_t)v118 + v208 - v123;
          LOBYTE(v204.st_size) = v209;
          LOBYTE(v204.st_ctimespec.tv_nsec) = 0;
          v204.st_blocks = (blkcnt_t)v118 + v210 - v123;
          *(_QWORD *)&v204.st_blksize = (char *)v118 + v211 - v123;
          LOBYTE(v204.st_gen) = v212;
          if ((v136 & 0x800) == 0)
            v204.st_qspare[1] = (uint64_t_t)v118 + v207 - v123;
          LOBYTE(v204.st_qspare[0]) = v213;
          v112 = v194;
          if ((_QWORD)v205)
          {
            *((_QWORD *)&v205 + 1) = v205;
            operator delete((void *)v205);
          }
          v27 = (void *)v204.st_atimespec.tv_sec;
          if ((v192 & 1) != 0)
            goto LABEL_38;
        }
        break;
      }
      if (v27)
      {
        v204.st_atimespec.tv_nsec = (uint64_t)v27;
        operator delete(v27);
      }
      v27 = 0;
      LOBYTE(v204.st_qspare[0]) = 0;
      memset(&v204.st_atimespec, 0, 41);
      memset(&v204.st_birthtimespec, 0, 17);
      memset(&v204.st_blocks, 0, 17);
      v204.st_qspare[1] = 0;
      goto LABEL_38;
    }
    if (!v22)
    {
      v5 = v189;
      if (!v204.st_atimespec.tv_nsec)
        goto LABEL_302;
LABEL_301:
      v204.st_atimespec.tv_nsec = (uint64_t)tv_nsec;
      operator delete(tv_nsec);
      goto LABEL_302;
    }
    do
    {
      while (1)
      {
        first = (char)v21->first;
        v175 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
          break;
        if (HIBYTE(v197.__r_.__value_.__r.__words[2]) == 22)
        {
          v176 = &v197;
          v177 = 22;
LABEL_312:
          if (v177 + 1 > 2 * v177)
            v179 = v177 + 1;
          else
            v179 = 2 * v177;
          v180 = (v179 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v179 | 7) != 0x17)
            v180 = v179 | 7;
          if (v179 >= 0x17)
            v178 = v180 + 1;
          else
            v178 = 23;
          goto LABEL_320;
        }
        *((_BYTE *)&v197.__r_.__value_.__s + 23) = (*((_BYTE *)&v197.__r_.__value_.__s + 23) + 1) & 0x7F;
        v173 = (char *)&v197 + v175;
        *v173 = first;
        v173[1] = 0;
        v21 = (std::sub_match<const char *> *)((char *)v21 + 1);
        if (!--v22)
          goto LABEL_326;
      }
      v177 = (v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v197.__r_.__value_.__l.__size_ != v177)
      {
        v177 = v197.__r_.__value_.__l.__size_;
        v182 = v197.__r_.__value_.__r.__words[0];
        goto LABEL_325;
      }
      if ((v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v176 = (std::string *)v197.__r_.__value_.__r.__words[0];
      v178 = 0x7FFFFFFFFFFFFFF7;
      if (v177 < 0x3FFFFFFFFFFFFFF3)
        goto LABEL_312;
LABEL_320:
      v181 = operator new(v178);
      v182 = (std::string::size_type)v181;
      if (!v177 || (memmove(v181, v176, v177), v177 != 22))
        operator delete(v176);
      v197.__r_.__value_.__r.__words[0] = v182;
      v197.__r_.__value_.__r.__words[2] = v178 | 0x8000000000000000;
LABEL_325:
      v197.__r_.__value_.__l.__size_ = v177 + 1;
      v183 = (char *)(v182 + v177);
      *v183 = first;
      v183[1] = 0;
      v21 = (std::sub_match<const char *> *)((char *)v21 + 1);
      --v22;
    }
    while (v22);
LABEL_326:
    tv_nsec = (void *)v204.st_atimespec.tv_sec;
    a1 = v188;
    v5 = v189;
    if (v204.st_atimespec.tv_sec)
      goto LABEL_301;
LABEL_302:
    if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v199.__r_.__value_.__l.__data_);
      v199 = v197;
      if (SHIBYTE(__p[2]) < 0)
LABEL_5:
        operator delete(__p[0]);
    }
    else
    {
      v199 = v197;
      if (SHIBYTE(__p[2]) < 0)
        goto LABEL_5;
    }
  }
  *(_BYTE *)(v187 + 23) = 0;
  *(_BYTE *)v187 = 0;
  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v199.__r_.__value_.__l.__data_);
LABEL_333:
  v184 = (std::__shared_weak_count *)v203;
  if ((_QWORD)v203)
  {
    v185 = (unint64_t *)(v203 + 8);
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  std::locale::~locale(v200);
}

void sub_1BF412294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::locale a43)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a43);
  _Unwind_Resume(a1);
}

void sub_1BF4122A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,std::locale a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v59;

  if (a59 < 0)
    operator delete(__p);
  if (*(char *)(v59 - 185) < 0)
    operator delete(*(void **)(v59 - 208));
  if (a44 < 0)
    operator delete(a39);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a46);
  _Unwind_Resume(a1);
}

void support::fs::createUniquePath(const char *a1@<X0>, std::string *a2@<X8>)
{
  const char *v2;
  timespec v4;
  timespec v5;
  size_t v6;
  __darwin_ino64_t v7;
  int v8;
  timespec v9;
  stat *p_dst;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  timespec v18;
  const char *v19;
  stat __dst;
  stat __src;
  timespec v22;
  timespec v23;
  timespec v24;
  timespec v25;
  timespec v26;
  timespec v27;
  timespec v28;
  uint64_t v29;

  v2 = a1;
  v29 = *MEMORY[0x1E0C80C00];
  v4.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v4.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__src.st_blksize = v4;
  *(timespec *)__src.st_qspare = v4;
  __src.st_birthtimespec = v4;
  *(timespec *)&__src.st_size = v4;
  __src.st_mtimespec = v4;
  __src.st_ctimespec = v4;
  *(timespec *)&__src.st_uid = v4;
  __src.st_atimespec = v4;
  *(timespec *)&__src.st_dev = v4;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (!stat(a1, &__src))
  {
    v5.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v5.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    v27 = v5;
    v28 = v5;
    v25 = v5;
    v26 = v5;
    v23 = v5;
    v24 = v5;
    *(timespec *)__src.st_qspare = v5;
    v22 = v5;
    *(timespec *)&__src.st_size = v5;
    *(timespec *)&__src.st_blksize = v5;
    __src.st_ctimespec = v5;
    __src.st_birthtimespec = v5;
    __src.st_atimespec = v5;
    __src.st_mtimespec = v5;
    *(timespec *)&__src.st_dev = v5;
    *(timespec *)&__src.st_uid = v5;
    snprintf((char *)&__src, 0x100uLL, "-%u", 1);
    memset(a2, 170, sizeof(std::string));
    v6 = strlen((const char *)&__src);
    if (v6 > 0x7FFFFFFFFFFFFFF7)
LABEL_32:
      std::string::__throw_length_error[abi:ne180100]();
    v7 = v6;
    v8 = 2;
    while (v7 < 0x17)
    {
      HIBYTE(__dst.st_gid) = v7;
      p_dst = &__dst;
      if (v7)
        goto LABEL_15;
LABEL_16:
      *((_BYTE *)&p_dst->st_dev + v7) = 0;
      v13 = v2[23];
      if (v13 >= 0)
        v14 = v2;
      else
        v14 = *(const std::string::value_type **)v2;
      if (v13 >= 0)
        v15 = *((unsigned __int8 *)v2 + 23);
      else
        v15 = *((_QWORD *)v2 + 1);
      v16 = std::string::insert((std::string *)&__dst, 0, v14, v15);
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      a2->__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.st_gid) < 0)
        operator delete(*(void **)&__dst.st_dev);
      v18.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v18.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&__dst.st_blksize = v18;
      *(timespec *)__dst.st_qspare = v18;
      __dst.st_birthtimespec = v18;
      *(timespec *)&__dst.st_size = v18;
      __dst.st_mtimespec = v18;
      __dst.st_ctimespec = v18;
      *(timespec *)&__dst.st_uid = v18;
      __dst.st_atimespec = v18;
      *(timespec *)&__dst.st_dev = v18;
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = (const char *)a2;
      else
        v19 = (const char *)a2->__r_.__value_.__r.__words[0];
      if (stat(v19, &__dst))
        return;
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
        operator delete(a2->__r_.__value_.__l.__data_);
      v9.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v9.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      v27 = v9;
      v28 = v9;
      v25 = v9;
      v26 = v9;
      v23 = v9;
      v24 = v9;
      *(timespec *)__src.st_qspare = v9;
      v22 = v9;
      *(timespec *)&__src.st_size = v9;
      *(timespec *)&__src.st_blksize = v9;
      __src.st_ctimespec = v9;
      __src.st_birthtimespec = v9;
      __src.st_atimespec = v9;
      __src.st_mtimespec = v9;
      *(timespec *)&__src.st_dev = v9;
      *(timespec *)&__src.st_uid = v9;
      snprintf((char *)&__src, 0x100uLL, "-%u", v8);
      memset(a2, 170, sizeof(std::string));
      v7 = strlen((const char *)&__src);
      ++v8;
      if (v7 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_32;
    }
    v11 = (v7 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v11 = v7 | 7;
    v12 = v11 + 1;
    p_dst = (stat *)operator new(v11 + 1);
    __dst.st_ino = v7;
    *(_QWORD *)&__dst.st_uid = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst.st_dev = p_dst;
LABEL_15:
    memcpy(p_dst, &__src, v7);
    goto LABEL_16;
  }
  if (v2[23] < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v2;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v2 + 2);
  }
}

void sub_1BF412668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL support::fs::createDir(const char *a1, mode_t a2, int a3)
{
  const char *v5;
  timespec v6;
  const char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  void **v11;
  std::string::size_type v12;
  uint64_t v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  timespec v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _BYTE __p[56];
  void *v27[2];
  uint64_t v28;
  stat v29;

  v5 = a1;
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v6.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v29.st_blksize = v6;
  *(timespec *)v29.st_qspare = v6;
  v29.st_birthtimespec = v6;
  *(timespec *)&v29.st_size = v6;
  v29.st_mtimespec = v6;
  v29.st_ctimespec = v6;
  *(timespec *)&v29.st_uid = v6;
  v29.st_atimespec = v6;
  *(timespec *)&v29.st_dev = v6;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (!stat(a1, &v29))
    return 1;
  if (!a3)
  {
    if (v5[23] >= 0)
      v21 = v5;
    else
      v21 = *(const char **)v5;
    return mkdir(v21, a2) == 0;
  }
  v27[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v28 = 0x1AAAAAAAAAAAAAALL;
  v27[0] = (void *)0xAAAAAAAAAAAA002FLL;
  memset(&__p[32], 170, 24);
  ctu::tokenize();
  memset(__p, 0, 24);
  if (v5[23] >= 0)
    v7 = v5;
  else
    v7 = *(const char **)v5;
  if (*v7 == 47)
  {
    *(_OWORD *)__p = *(_OWORD *)v27;
    *(_QWORD *)&__p[16] = v28;
  }
  v8 = *(_QWORD *)&__p[32];
  if (*(_QWORD *)&__p[40] != *(_QWORD *)&__p[32])
  {
    v9 = 0;
    v10 = 1;
    while (1)
    {
      if (v10 != 1)
      {
        if (v28 >= 0)
          v11 = v27;
        else
          v11 = (void **)v27[0];
        if (v28 >= 0)
          v12 = HIBYTE(v28);
        else
          v12 = (std::string::size_type)v27[1];
        std::string::append((std::string *)__p, (const std::string::value_type *)v11, v12);
        v8 = *(_QWORD *)&__p[32];
      }
      v13 = v8 + 24 * v9;
      v14 = *(char *)(v13 + 23);
      v15 = v14 >= 0 ? (const std::string::value_type *)v13 : *(const std::string::value_type **)v13;
      v16 = v14 >= 0 ? *(unsigned __int8 *)(v13 + 23) : *(_QWORD *)(v13 + 8);
      std::string::append((std::string *)__p, v15, v16);
      v17.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v17.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&v29.st_blksize = v17;
      *(timespec *)v29.st_qspare = v17;
      v29.st_birthtimespec = v17;
      *(timespec *)&v29.st_size = v17;
      v29.st_mtimespec = v17;
      v29.st_ctimespec = v17;
      *(timespec *)&v29.st_uid = v17;
      v29.st_atimespec = v17;
      *(timespec *)&v29.st_dev = v17;
      v18 = __p[23] >= 0 ? __p : *(const char **)__p;
      if (stat(v18, &v29))
      {
        v19 = __p[23] >= 0 ? __p : *(const char **)__p;
        if (mkdir(v19, a2))
          break;
      }
      v9 = v10;
      v8 = *(_QWORD *)&__p[32];
      ++v10;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&__p[40] - *(_QWORD *)&__p[32]) >> 3) <= v9)
        goto LABEL_42;
    }
    v20 = 0;
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_42:
  v20 = 1;
  if ((__p[23] & 0x80000000) != 0)
LABEL_43:
    operator delete(*(void **)__p);
LABEL_44:
  v22 = *(_QWORD *)&__p[32];
  if (*(_QWORD *)&__p[32])
  {
    v23 = *(_QWORD *)&__p[40];
    v24 = *(void **)&__p[32];
    if (*(_QWORD *)&__p[40] != *(_QWORD *)&__p[32])
    {
      do
      {
        if (*(char *)(v23 - 1) < 0)
          operator delete(*(void **)(v23 - 24));
        v23 -= 24;
      }
      while (v23 != v22);
      v24 = *(void **)&__p[32];
    }
    *(_QWORD *)&__p[40] = v22;
    operator delete(v24);
  }
  if (SHIBYTE(v28) < 0)
    operator delete(v27[0]);
  return v20;
}

void sub_1BF412928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::vector<std::string>::~vector[abi:ne180100](&a16);
    if ((a24 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    std::vector<std::string>::~vector[abi:ne180100](&a16);
    if ((a24 & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete(a19);
  _Unwind_Resume(a1);
}

BOOL support::fs::rename(const std::__fs::filesystem::path *a1, const std::__fs::filesystem::path *a2, std::error_code *a3)
{
  int v3;

  if ((a1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    a1 = (const std::__fs::filesystem::path *)a1->__pn_.__r_.__value_.__r.__words[0];
  if ((a2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    a2 = (const std::__fs::filesystem::path *)a2->__pn_.__r_.__value_.__r.__words[0];
  rename(a1, a2, a3);
  return v3 == 0;
}

BOOL support::fs::chmod(const char *a1, mode_t a2)
{
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  return chmod(a1, a2) == 0;
}

uint64_t support::fs::removeDir(const char *a1)
{
  const std::__fs::filesystem::path *v1;
  timespec v2;
  _BOOL8 v3;
  std::error_code *v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  char *v8;
  __int128 v9;
  int v10;
  std::string::size_type size;
  std::string *v12;
  std::string *p_p;
  int v14;
  size_t v15;
  unint64_t v16;
  char *p_dst;
  uint64_t v18;
  uint64_t v19;
  const std::__fs::filesystem::path *v20;
  std::string *v21;
  std::string *v22;
  std::string::size_type v23;
  char v24;
  timespec v25;
  std::string *v26;
  std::error_code *v27;
  const std::__fs::filesystem::path *v28;
  std::string *v29;
  char v30;
  std::string *v31;
  DIR *v32;
  DIR *v33;
  dirent *v34;
  const std::__fs::filesystem::path *v35;
  const char *v36;
  void **v37;
  void **v38;
  void *v39;
  std::string __p;
  void *v42;
  void **v43;
  uint64_t v44;
  stat __dst;
  _QWORD v46[5];

  v1 = (const std::__fs::filesystem::path *)a1;
  v46[2] = *MEMORY[0x1E0C80C00];
  v2.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v2.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__dst.st_blksize = v2;
  *(timespec *)__dst.st_qspare = v2;
  __dst.st_birthtimespec = v2;
  *(timespec *)&__dst.st_size = v2;
  __dst.st_mtimespec = v2;
  __dst.st_ctimespec = v2;
  *(timespec *)&__dst.st_uid = v2;
  __dst.st_atimespec = v2;
  *(timespec *)&__dst.st_dev = v2;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (stat(a1, &__dst))
    return 1;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  support::fs::readDir((const char *)v1, (uint64_t)&v42);
  v5 = 0;
  while (1)
  {
    v6 = v5;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v43 - (_BYTE *)v42) >> 3);
    v3 = v7 <= v5;
    if (v7 <= v5)
      break;
    v8 = (char *)v42 + 24 * v5;
    memset(&__p, 170, sizeof(__p));
    if (v8[23] < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v9 = *(_OWORD *)v8;
      __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
    }
    v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    if (size == 2)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      if (LOWORD(p_p->__r_.__value_.__l.__data_) == 11822)
      {
LABEL_58:
        v30 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_7;
        goto LABEL_6;
      }
    }
    else if (size == 1)
    {
      v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &__p;
      if (v12->__r_.__value_.__s.__data_[0] == 46)
        goto LABEL_58;
    }
    v14 = SHIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]);
    if (v14 >= 0)
      v15 = HIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]);
    else
      v15 = v1->__pn_.__r_.__value_.__l.__size_;
    v16 = v15 + 1;
    memset(&__dst, 170, 24);
    if (v15 + 1 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v16 >= 0x17)
    {
      v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v18 = v16 | 7;
      v19 = v18 + 1;
      p_dst = (char *)operator new(v18 + 1);
      __dst.st_ino = v15 + 1;
      *(_QWORD *)&__dst.st_uid = v19 | 0x8000000000000000;
      *(_QWORD *)&__dst.st_dev = p_dst;
    }
    else
    {
      memset(&__dst, 0, 24);
      p_dst = (char *)&__dst;
      HIBYTE(__dst.st_gid) = v15 + 1;
      if (!v15)
        goto LABEL_38;
    }
    if (v14 >= 0)
      v20 = v1;
    else
      v20 = (const std::__fs::filesystem::path *)v1->__pn_.__r_.__value_.__r.__words[0];
    memmove(p_dst, v20, v15);
LABEL_38:
    *(_WORD *)&p_dst[v15] = 47;
    if (v10 >= 0)
      v21 = &__p;
    else
      v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v22 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v21, size);
    v23 = v22->__r_.__value_.__r.__words[0];
    v46[0] = v22->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v46 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
    v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = v23;
    __p.__r_.__value_.__l.__size_ = v46[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v46 + 7);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v24;
    if (SHIBYTE(__dst.st_gid) < 0)
    {
      operator delete(*(void **)&__dst.st_dev);
      v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v23 = __p.__r_.__value_.__r.__words[0];
    }
    v25.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v25.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&__dst.st_blksize = v25;
    *(timespec *)__dst.st_qspare = v25;
    __dst.st_birthtimespec = v25;
    *(timespec *)&__dst.st_size = v25;
    __dst.st_mtimespec = v25;
    __dst.st_ctimespec = v25;
    *(timespec *)&__dst.st_uid = v25;
    __dst.st_atimespec = v25;
    if (v24 >= 0)
      v26 = &__p;
    else
      v26 = (std::string *)v23;
    *(timespec *)&__dst.st_dev = v25;
    if (!stat((const char *)v26, &__dst)
      && ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? (v31 = &__p)
        : (v31 = (std::string *)__p.__r_.__value_.__r.__words[0]),
          (v32 = opendir((const char *)v31), (v33 = v32) != 0) && (v34 = readdir(v32), closedir(v33), v34)))
    {
      std::string::append(&__p, "/", 1uLL);
      v30 = support::fs::removeDir(&__p);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_7;
    }
    else
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = (const std::__fs::filesystem::path *)&__p;
      else
        v28 = (const std::__fs::filesystem::path *)__p.__r_.__value_.__r.__words[0];
      if (!remove(v28, v27))
        goto LABEL_58;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &__p;
      else
        v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v30 = unlink((const char *)v29) == 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_7;
    }
LABEL_6:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_7:
    v5 = v6 + 1;
    if ((v30 & 1) == 0)
      goto LABEL_75;
  }
  if ((v1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = v1;
  else
    v35 = (const std::__fs::filesystem::path *)v1->__pn_.__r_.__value_.__r.__words[0];
  if (remove(v35, v4))
  {
    if ((v1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = (const char *)v1;
    else
      v36 = (const char *)v1->__pn_.__r_.__value_.__r.__words[0];
    unlink(v36);
  }
LABEL_75:
  v37 = (void **)v42;
  if (v42)
  {
    v38 = v43;
    v39 = v42;
    if (v43 != v42)
    {
      do
      {
        if (*((char *)v38 - 1) < 0)
          operator delete(*(v38 - 3));
        v38 -= 3;
      }
      while (v38 != v37);
      v39 = v42;
    }
    v43 = v37;
    operator delete(v39);
  }
  return v3;
}

void sub_1BF412E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_1BF412E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if ((a16 & 0x80000000) == 0)
  {
    std::vector<std::string>::~vector[abi:ne180100](&a17);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::vector<std::string>::~vector[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

BOOL support::fs::removeFile(const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  const std::__fs::filesystem::path *v2;
  const char *v3;

  v2 = a1;
  if ((a1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    a1 = (const std::__fs::filesystem::path *)a1->__pn_.__r_.__value_.__r.__words[0];
  if (!remove(a1, a2))
    return 1;
  if ((v2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = (const char *)v2;
  else
    v3 = (const char *)v2->__pn_.__r_.__value_.__r.__words[0];
  return unlink(v3) == 0;
}

uint64_t support::fs::removeDirContents(const char *a1, unint64_t a2)
{
  const char *v3;
  void **v4;
  void **v5;
  double v6;
  __int128 v7;
  int v8;
  std::string::size_type v9;
  std::string *v10;
  std::string *v11;
  int v12;
  size_t v13;
  unint64_t v14;
  stat *p_dst;
  std::string::size_type v16;
  void **v17;
  void **v18;
  const char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  std::string *v24;
  std::string *v25;
  __int128 v26;
  timespec v27;
  void **v28;
  char v29;
  int v30;
  timespec v31;
  void **v32;
  std::error_code *v33;
  const std::__fs::filesystem::path *v34;
  void **v35;
  void **v36;
  DIR *v37;
  DIR *v38;
  dirent *v39;
  int v40;
  size_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  std::string *v47;
  std::string::size_type size;
  std::string *v49;
  __int128 v50;
  char v51;
  char v52;
  void **v53;
  void *v54;
  time_t v56;
  char v57;
  int v58;
  std::string v59;
  void *__p[4];
  std::string v61;
  void *v62;
  void **v63;
  uint64_t v64;
  stat __dst;

  v3 = a1;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  support::fs::readDir(a1, (uint64_t)&v62);
  v56 = time(0);
  v5 = (void **)v62;
  v4 = v63;
  if (v62 == v63)
  {
    v52 = 1;
    if (v62)
      goto LABEL_105;
    return v52 & 1;
  }
  v6 = (double)a2;
  v57 = 1;
  while (1)
  {
    memset(&v61, 170, sizeof(v61));
    if (*((char *)v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v61, (const std::string::value_type *)*v5, (std::string::size_type)v5[1]);
    }
    else
    {
      v7 = *(_OWORD *)v5;
      v61.__r_.__value_.__r.__words[2] = (std::string::size_type)v5[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v7;
    }
    v8 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
    v9 = (v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? HIBYTE(v61.__r_.__value_.__r.__words[2])
       : v61.__r_.__value_.__l.__size_;
    if (v9 == 2)
      break;
    if (v9 == 1)
    {
      v10 = (std::string *)v61.__r_.__value_.__r.__words[0];
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = &v61;
      if (v10->__r_.__value_.__s.__data_[0] == 46)
        goto LABEL_95;
    }
LABEL_19:
    memset(__p, 170, 24);
    v12 = v3[23];
    if (v12 >= 0)
      v13 = *((unsigned __int8 *)v3 + 23);
    else
      v13 = *((_QWORD *)v3 + 1);
    v14 = v13 + 1;
    memset(&__dst, 170, 24);
    if (v13 + 1 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v14 >= 0x17)
    {
      v58 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
      v16 = v9;
      v17 = v5;
      v18 = v4;
      v19 = v3;
      v20 = a2;
      v21 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v21 = v14 | 7;
      v22 = v21 + 1;
      p_dst = (stat *)operator new(v21 + 1);
      __dst.st_ino = v13 + 1;
      *(_QWORD *)&__dst.st_uid = v22 | 0x8000000000000000;
      *(_QWORD *)&__dst.st_dev = p_dst;
      a2 = v20;
      v3 = v19;
      v4 = v18;
      v5 = v17;
      v9 = v16;
      v8 = v58;
    }
    else
    {
      memset(&__dst, 0, 24);
      p_dst = &__dst;
      HIBYTE(__dst.st_gid) = v13 + 1;
      if (!v13)
        goto LABEL_33;
    }
    if (v12 >= 0)
      v23 = v3;
    else
      v23 = *(const char **)v3;
    memmove(p_dst, v23, v13);
LABEL_33:
    *(_WORD *)((char *)&p_dst->st_dev + v13) = 47;
    if (v8 >= 0)
      v24 = &v61;
    else
      v24 = (std::string *)v61.__r_.__value_.__r.__words[0];
    v25 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v24, v9);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    __p[2] = (void *)v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.st_gid) < 0)
    {
      operator delete(*(void **)&__dst.st_dev);
      if (!a2)
        goto LABEL_47;
    }
    else if (!a2)
    {
      goto LABEL_47;
    }
    v27.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v27.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&__dst.st_blksize = v27;
    *(timespec *)__dst.st_qspare = v27;
    __dst.st_birthtimespec = v27;
    *(timespec *)&__dst.st_size = v27;
    __dst.st_mtimespec = v27;
    __dst.st_ctimespec = v27;
    __dst.st_atimespec = v27;
    *(timespec *)&__dst.st_dev = v27;
    *(timespec *)&__dst.st_uid = v27;
    if (SHIBYTE(__p[2]) >= 0)
      v28 = __p;
    else
      v28 = (void **)__p[0];
    if (!stat((const char *)v28, &__dst) && difftime(v56, __dst.st_ctimespec.tv_sec) >= v6)
    {
LABEL_47:
      v31.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v31.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&__dst.st_blksize = v31;
      *(timespec *)__dst.st_qspare = v31;
      __dst.st_birthtimespec = v31;
      *(timespec *)&__dst.st_size = v31;
      __dst.st_mtimespec = v31;
      __dst.st_ctimespec = v31;
      __dst.st_atimespec = v31;
      *(timespec *)&__dst.st_dev = v31;
      *(timespec *)&__dst.st_uid = v31;
      if (SHIBYTE(__p[2]) >= 0)
        v32 = __p;
      else
        v32 = (void **)__p[0];
      if (stat((const char *)v32, &__dst)
        || (SHIBYTE(__p[2]) >= 0 ? (v36 = __p) : (v36 = (void **)__p[0]),
            (v37 = opendir((const char *)v36), (v38 = v37) == 0) || (v39 = readdir(v37), closedir(v38), !v39)))
      {
        if (SHIBYTE(__p[2]) >= 0)
          v34 = (const std::__fs::filesystem::path *)__p;
        else
          v34 = (const std::__fs::filesystem::path *)__p[0];
        if (!remove(v34, v33)
          || (SHIBYTE(__p[2]) >= 0 ? (v35 = __p) : (v35 = (void **)__p[0]), !unlink((const char *)v35)))
        {
LABEL_89:
          v30 = 0;
          v57 = 1;
          v29 = 1;
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
            goto LABEL_91;
          goto LABEL_90;
        }
        goto LABEL_59;
      }
      v40 = v3[23];
      if (v40 >= 0)
        v41 = *((unsigned __int8 *)v3 + 23);
      else
        v41 = *((_QWORD *)v3 + 1);
      v42 = v41 + 1;
      memset(&v59, 170, sizeof(v59));
      if (v41 + 1 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v42 >= 0x17)
      {
        v44 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v42 | 7) != 0x17)
          v44 = v42 | 7;
        v45 = v44 + 1;
        v43 = (char *)operator new(v44 + 1);
        v59.__r_.__value_.__l.__size_ = v41 + 1;
        v59.__r_.__value_.__r.__words[2] = v45 | 0x8000000000000000;
        v59.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
      }
      else
      {
        memset(&v59, 0, sizeof(v59));
        v43 = (char *)&v59;
        *((_BYTE *)&v59.__r_.__value_.__s + 23) = v41 + 1;
        if (!v41)
          goto LABEL_80;
      }
      if (v40 >= 0)
        v46 = v3;
      else
        v46 = *(const char **)v3;
      memmove(v43, v46, v41);
LABEL_80:
      *(_WORD *)&v43[v41] = 47;
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v47 = &v61;
      else
        v47 = (std::string *)v61.__r_.__value_.__r.__words[0];
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      else
        size = v61.__r_.__value_.__l.__size_;
      v49 = std::string::append(&v59, (const std::string::value_type *)v47, size);
      v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      *(_QWORD *)&__dst.st_uid = *((_QWORD *)&v49->__r_.__value_.__l + 2);
      *(_OWORD *)&__dst.st_dev = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      v51 = support::fs::removeDir((const char *)&__dst);
      if (SHIBYTE(__dst.st_gid) < 0)
      {
        operator delete(*(void **)&__dst.st_dev);
        if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_88;
      }
      else if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_88:
        if ((v51 & 1) != 0)
          goto LABEL_89;
LABEL_59:
        v57 = 0;
        v29 = 0;
        v30 = 2;
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
          goto LABEL_91;
        goto LABEL_90;
      }
      operator delete(v59.__r_.__value_.__l.__data_);
      if ((v51 & 1) != 0)
        goto LABEL_89;
      goto LABEL_59;
    }
    v29 = 0;
    v30 = 3;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_91;
LABEL_90:
    operator delete(__p[0]);
LABEL_91:
    if ((v29 & 1) != 0)
      goto LABEL_95;
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_93;
LABEL_96:
    operator delete(v61.__r_.__value_.__l.__data_);
    if (v30 != 3)
      goto LABEL_97;
LABEL_3:
    v5 += 3;
    if (v5 == v4)
      goto LABEL_102;
  }
  v11 = (std::string *)v61.__r_.__value_.__r.__words[0];
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v61;
  if (LOWORD(v11->__r_.__value_.__l.__data_) != 11822)
    goto LABEL_19;
LABEL_95:
  v30 = 0;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_96;
LABEL_93:
  if (v30 == 3)
    goto LABEL_3;
LABEL_97:
  if (!v30)
    goto LABEL_3;
LABEL_102:
  v5 = (void **)v62;
  v52 = v57;
  if (!v62)
    return v52 & 1;
LABEL_105:
  v53 = v63;
  v54 = v5;
  if (v63 != v5)
  {
    do
    {
      if (*((char *)v53 - 1) < 0)
        operator delete(*(v53 - 3));
      v53 -= 3;
    }
    while (v53 != v5);
    v54 = v62;
  }
  v63 = v5;
  operator delete(v54);
  return v52 & 1;
}

void sub_1BF413460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a23 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  std::vector<std::string>::~vector[abi:ne180100](&a31);
  _Unwind_Resume(a1);
}

void support::fs::moveDirUnique(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const std::__fs::filesystem::path *v4;
  timespec v6;
  const char *v7;
  DIR *v8;
  DIR *v9;
  dirent *v10;
  std::error_code *v11;
  const std::__fs::filesystem::path *v12;
  const std::__fs::filesystem::path *v13;
  int v14;
  std::string __p;
  stat v16;

  v4 = (const std::__fs::filesystem::path *)a1;
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v6.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v16.st_blksize = v6;
  *(timespec *)v16.st_qspare = v6;
  v16.st_birthtimespec = v6;
  *(timespec *)&v16.st_size = v6;
  v16.st_mtimespec = v6;
  v16.st_ctimespec = v6;
  *(timespec *)&v16.st_uid = v6;
  v16.st_atimespec = v6;
  *(timespec *)&v16.st_dev = v6;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (stat(a1, &v16))
    goto LABEL_4;
  v7 = (v4->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
     ? (const char *)v4
     : (const char *)v4->__pn_.__r_.__value_.__r.__words[0];
  v8 = opendir(v7);
  if (!v8)
    goto LABEL_4;
  v9 = v8;
  v10 = readdir(v8);
  closedir(v9);
  if (!v10)
    goto LABEL_4;
  memset((void *)a3, 170, 24);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  support::fs::createUniquePath((const char *)&__p, (std::string *)a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v4->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = v4;
  else
    v12 = (const std::__fs::filesystem::path *)v4->__pn_.__r_.__value_.__r.__words[0];
  if (*(char *)(a3 + 23) >= 0)
    v13 = (const std::__fs::filesystem::path *)a3;
  else
    v13 = *(const std::__fs::filesystem::path **)a3;
  rename(v12, v13, v11);
  if (v14)
  {
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
LABEL_4:
    *(_BYTE *)(a3 + 23) = 0;
    *(_BYTE *)a3 = 0;
  }
}

void sub_1BF41366C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void support::fs::getFileName(std::string *a1@<X8>)
{
  __int128 v2;
  void **v3;
  void *v4;
  void *__p[3];

  memset(__p, 170, sizeof(__p));
  ctu::tokenize();
  if (*((char *)__p[1] - 1) < 0)
  {
    std::string::__init_copy_ctor_external(a1, *((const std::string::value_type **)__p[1] - 3), *((_QWORD *)__p[1] - 2));
  }
  else
  {
    v2 = *(_OWORD *)((char *)__p[1] - 24);
    a1->__r_.__value_.__r.__words[2] = *((_QWORD *)__p[1] - 1);
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v2;
  }
  if (__p[0])
  {
    v3 = (void **)__p[1];
    v4 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != __p[0]);
      v4 = __p[0];
    }
    operator delete(v4);
  }
}

void sub_1BF41373C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

uint64_t support::fs::lockDir(const char *a1)
{
  uint64_t v1;
  _QWORD v3[2];
  pid_t v4;
  int v5;

  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v1 = open(a1, 0);
  if ((v1 & 0x80000000) != 0)
    return v1;
  v5 = 1;
  v3[0] = 0;
  v3[1] = 0;
  v4 = getpid();
  if ((fcntl(v1, 9, v3) & 0x80000000) == 0)
    return v1;
  close(v1);
  return 0xFFFFFFFFLL;
}

BOOL support::fs::unlockDir(support::fs *this)
{
  int v1;
  _BOOL8 v2;
  _QWORD v4[2];
  pid_t v5;
  int v6;

  v1 = (int)this;
  v6 = 2;
  v4[0] = 0;
  v4[1] = 0;
  v5 = getpid();
  v2 = fcntl(v1, 9, v4) == 0;
  close(v1);
  return v2;
}

BOOL support::fs::getFilteredFiles(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  DIR *v7;
  DIR *v8;
  dirent *v9;
  char *d_name;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  std::string::size_type v19;
  _BYTE *v20;
  _WORD *v21;
  DIR *v22;
  uint64_t v23;
  uint64_t v24;
  timespec v25;
  int v26;
  size_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  const std::string::value_type *v33;
  std::string *v34;
  __int128 v35;
  void **v36;
  std::sub_match<const char *> *v37;
  std::sub_match<std::__wrap_iter<const char *>> *v38;
  __int128 v39;
  int v40;
  int v41;
  unint64_t v42;
  __int128 v43;
  std::string *v44;
  unsigned __int8 v45;
  NSObject *v46;
  _BOOL8 result;
  int *v48;
  char *v49;
  char v50;
  const char *v52;
  std::string v53;
  _BYTE __dst[24];
  void *__p[2];
  _QWORD v56[9];
  __int128 v57;
  uint64_t v58;
  stat v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  *__error() = 0;
  if (a1[23] < 0)
  {
    v7 = opendir(*(const char **)a1);
    if (v7)
      goto LABEL_3;
  }
  else
  {
    v7 = opendir(a1);
    if (v7)
    {
LABEL_3:
      v8 = v7;
      v9 = readdir(v7);
      if (v9)
      {
        v52 = a1;
        v50 = 0;
        while (1)
        {
          d_name = v9->d_name;
          memset(__dst, 170, sizeof(__dst));
          v11 = strlen(v9->d_name);
          if (v11 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v12 = v11;
          if (v11 >= 0x17)
            break;
          __dst[23] = v11;
          v13 = __dst;
          if (v11)
            goto LABEL_12;
LABEL_13:
          v13[v12] = 0;
          v16 = __dst[23];
          v17 = __dst[23];
          v18 = *(_QWORD *)&__dst[8];
          if (__dst[23] >= 0)
            v19 = __dst[23];
          else
            v19 = *(_QWORD *)&__dst[8];
          if (v19 == 2)
          {
            v21 = *(_WORD **)__dst;
            if (__dst[23] >= 0)
              v21 = __dst;
            if (*v21 == 11822)
              goto LABEL_73;
          }
          else if (v19 == 1)
          {
            v20 = *(_BYTE **)__dst;
            if (__dst[23] >= 0)
              v20 = __dst;
            if (*v20 == 46)
              goto LABEL_73;
          }
          if ((a4 & 1) != 0)
            goto LABEL_53;
          v22 = v8;
          v23 = a4;
          v24 = a3;
          v25.tv_sec = 0xAAAAAAAAAAAAAAAALL;
          v25.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
          *(timespec *)&v59.st_blksize = v25;
          *(timespec *)v59.st_qspare = v25;
          v59.st_birthtimespec = v25;
          *(timespec *)&v59.st_size = v25;
          v59.st_mtimespec = v25;
          v59.st_ctimespec = v25;
          *(timespec *)&v59.st_uid = v25;
          v59.st_atimespec = v25;
          *(timespec *)&v59.st_dev = v25;
          v26 = v52[23];
          if (v26 >= 0)
            v27 = *((unsigned __int8 *)v52 + 23);
          else
            v27 = *((_QWORD *)v52 + 1);
          v28 = v27 + 1;
          memset(&v53, 170, sizeof(v53));
          if (v27 + 1 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v28 >= 0x17)
          {
            v30 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v28 | 7) != 0x17)
              v30 = v28 | 7;
            v31 = v30 + 1;
            v29 = (char *)operator new(v30 + 1);
            v53.__r_.__value_.__l.__size_ = v27 + 1;
            v53.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
            v53.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
          }
          else
          {
            memset(&v53, 0, sizeof(v53));
            v29 = (char *)&v53;
            *((_BYTE *)&v53.__r_.__value_.__s + 23) = v27 + 1;
            if (!v27)
              goto LABEL_40;
          }
          if (v26 >= 0)
            v32 = v52;
          else
            v32 = *(const char **)v52;
          memmove(v29, v32, v27);
LABEL_40:
          a3 = v24;
          *(_WORD *)&v29[v27] = 47;
          if (v17 >= 0)
            v33 = __dst;
          else
            v33 = *(const std::string::value_type **)__dst;
          v34 = std::string::append(&v53, v33, v19);
          a4 = v23;
          v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          v56[0] = *((_QWORD *)&v34->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          if (v56[0] >= 0)
            v36 = __p;
          else
            v36 = (void **)__p[0];
          lstat((const char *)v36, &v59);
          v8 = v22;
          if (SHIBYTE(v56[0]) < 0)
          {
            operator delete(__p[0]);
            if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_48:
              if ((v59.st_mode & 0xF000) != 0xA000)
                goto LABEL_52;
              goto LABEL_73;
            }
          }
          else if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_48;
          }
          operator delete(v53.__r_.__value_.__l.__data_);
          if ((v59.st_mode & 0xF000) != 0xA000)
          {
LABEL_52:
            v16 = __dst[23];
            v18 = *(_QWORD *)&__dst[8];
            LOBYTE(v17) = __dst[23];
LABEL_53:
            if ((v17 & 0x80u) == 0)
              v37 = (std::sub_match<const char *> *)__dst;
            else
              v37 = *(std::sub_match<const char *> **)__dst;
            if ((v17 & 0x80u) != 0)
              v16 = v18;
            v38 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v37 + v16);
            *(_QWORD *)&v39 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v57 = v39;
            v56[6] = 0xAAAAAAAAAAAAAA00;
            v56[3] = 0xAAAAAAAAAAAAAAAALL;
            v56[4] = 0;
            v56[5] = 0;
            v56[7] = 0;
            v56[8] = 0;
            LOBYTE(v57) = 0;
            BYTE8(v57) = 0;
            v58 = 0;
            *(_OWORD *)__p = 0u;
            memset(v56, 0, 25);
            *(_OWORD *)&v59.st_birthtimespec.tv_nsec = v39;
            v59.st_ctimespec.tv_sec = 0xAAAAAAAAAAAAAAAALL;
            v59.st_atimespec.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
            memset(&v59.st_mtimespec, 0, 17);
            memset(&v59.st_ctimespec.tv_nsec, 0, 17);
            LOBYTE(v59.st_size) = 0;
            v59.st_blocks = 0;
            memset(&v59, 0, 41);
            v40 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a2, v37, (std::sub_match<const char *> *)((char *)v37 + v16), (std::vector<std::csub_match> *)&v59, 4160);
            std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__p, (uint64_t)v37, v38, (uint64_t *)&v59.st_dev, 0);
            if (*(_QWORD *)&v59.st_dev)
            {
              v59.st_ino = *(_QWORD *)&v59.st_dev;
              operator delete(*(void **)&v59.st_dev);
            }
            if ((_BYTE)v57)
              v41 = v40 ^ 1;
            else
              v41 = 1;
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            if ((v40 & v41) != 0)
            {
              v42 = *(_QWORD *)(a3 + 8);
              if (v42 >= *(_QWORD *)(a3 + 16))
              {
                v44 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a3, (uint64_t)__dst);
              }
              else
              {
                if ((__dst[23] & 0x80000000) != 0)
                {
                  std::string::__init_copy_ctor_external(*(std::string **)(a3 + 8), *(const std::string::value_type **)__dst, *(std::string::size_type *)&__dst[8]);
                }
                else
                {
                  v43 = *(_OWORD *)__dst;
                  *(_QWORD *)(v42 + 16) = *(_QWORD *)&__dst[16];
                  *(_OWORD *)v42 = v43;
                }
                v44 = (std::string *)(v42 + 24);
                *(_QWORD *)(a3 + 8) = v42 + 24;
              }
              *(_QWORD *)(a3 + 8) = v44;
              v50 = 1;
            }
          }
LABEL_73:
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          v9 = readdir(v8);
          if (!v9)
            goto LABEL_85;
        }
        v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17)
          v14 = v11 | 7;
        v15 = v14 + 1;
        v13 = operator new(v14 + 1);
        *(_QWORD *)&__dst[8] = v12;
        *(_QWORD *)&__dst[16] = v15 | 0x8000000000000000;
        *(_QWORD *)__dst = v13;
LABEL_12:
        memmove(v13, d_name, v12);
        goto LABEL_13;
      }
      v50 = 0;
LABEL_85:
      closedir(v8);
      return v50 & 1;
    }
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED7100E0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v46 = qword_1ED7100E0;
    result = os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
    v46 = qword_1ED7100E0;
    result = os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v48 = __error();
  v49 = strerror(*v48);
  v59.st_dev = 136315394;
  *(_QWORD *)&v59.st_mode = a1;
  WORD2(v59.st_ino) = 2080;
  *(__darwin_ino64_t *)((char *)&v59.st_ino + 6) = (__darwin_ino64_t)v49;
  _os_log_error_impl(&dword_1BF335000, v46, OS_LOG_TYPE_ERROR, "Error %s (%s)\n", (uint8_t *)&v59, 0x16u);
  return 0;
}

void sub_1BF413E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49)
{
  uint64_t v49;
  uint64_t v50;

  *(_QWORD *)(v49 + 8) = v50;
  if (a30 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BF41404C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ifstream::~ifstream(&a9);
  _Unwind_Resume(a1);
}

void support::fs::getBasePath(const std::string::value_type **a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v2;
  size_t v4;
  size_t v5;
  std::string::size_type size;
  char v7;
  std::string *p_p;
  unsigned __int8 *v9;
  BOOL v10;
  BOOL v11;
  size_t v12;
  __int128 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  std::string __p;

  v2 = (unsigned __int8 *)a1;
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1])
    {
      std::string::__init_copy_ctor_external((std::string *)a2, *a1, 0);
      return;
    }
  }
  else if (!*((_BYTE *)a1 + 23))
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_QWORD *)(a2 + 16) = a1[2];
    return;
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  memset(&__p, 170, sizeof(__p));
  support::fs::getFileName(&__p);
  v4 = *((_QWORD *)v2 + 1);
  if ((v2[23] & 0x80u) == 0)
  {
    v5 = v2[23];
  }
  else
  {
    v2 = *(unsigned __int8 **)v2;
    v5 = v4;
  }
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  v9 = &v2[v5];
  if (v5)
    v10 = size == 0;
  else
    v10 = 1;
  if (v10)
  {
    v15 = &v2[v5];
  }
  else
  {
    v14 = v2;
    v15 = &v2[v5];
    do
    {
      if (*v14 == p_p->__r_.__value_.__s.__data_[0])
      {
        v16 = 1;
        while (size != v16)
        {
          if (&v14[v16] == v9)
            goto LABEL_20;
          v17 = v14[v16];
          v18 = p_p->__r_.__value_.__s.__data_[v16++];
          if (v17 != v18)
            goto LABEL_37;
        }
        v15 = v14;
      }
LABEL_37:
      ++v14;
    }
    while (v14 != v9);
  }
LABEL_20:
  v11 = v15 != v9 || size == 0;
  if (v11 && v15 - v2 != -1)
  {
    if (v5 >= v15 - v2)
      v12 = v15 - v2;
    else
      v12 = v5;
    if (v12 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v12 >= 0x17)
    {
      v19 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17)
        v19 = v12 | 7;
      v20 = v19 + 1;
      v13 = (__int128 *)operator new(v19 + 1);
      *((_QWORD *)&v21 + 1) = v12;
      v22 = v20 | 0x8000000000000000;
      *(_QWORD *)&v21 = v13;
    }
    else
    {
      HIBYTE(v22) = v12;
      v13 = &v21;
      if (!v12)
      {
        LOBYTE(v21) = 0;
        if ((*(char *)(a2 + 23) & 0x80000000) == 0)
        {
LABEL_33:
          *(_OWORD *)a2 = v21;
          *(_QWORD *)(a2 + 16) = v22;
          v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          goto LABEL_34;
        }
LABEL_49:
        operator delete(*(void **)a2);
        goto LABEL_33;
      }
    }
    memmove(v13, v2, v12);
    *((_BYTE *)v13 + v12) = 0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_49;
  }
LABEL_34:
  if (v7 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF414290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void support::fs::getLastNumberDir(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string::size_type v7;
  std::string::size_type v8;
  int v9;
  std::string::size_type v10;
  std::string::size_type v11;
  std::string::size_type v12;
  int v13;
  size_t v14;
  unint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  void **v23;
  void **v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  char *v31;
  char *v32;
  unsigned int v33;
  void *v34;
  __int128 v35;
  std::string *v36;
  unsigned int v37;
  std::string::size_type v38;
  std::string::size_type v39;
  void **v40;
  int v41;
  size_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  std::string *v47;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  void **v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::string v59;
  std::string v60;
  std::string __p;
  std::locale v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  std::string v68;
  void *v69;
  void **v70;
  uint64_t v71;
  _BYTE v72[48];
  __int128 v73;
  void *__dst[3];
  std::string v75;
  std::string v76;
  std::string v77;

  memset(&v77, 170, sizeof(v77));
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v77 = *(std::string *)a1;
  v4 = (std::string *)v77.__r_.__value_.__r.__words[0];
  if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v77;
  else
    v5 = (std::string *)v77.__r_.__value_.__r.__words[0];
  if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v77.__r_.__value_.__r.__words[2]);
  else
    size = v77.__r_.__value_.__l.__size_;
  v7 = size + 1;
  do
  {
    v8 = v7 - 1;
    if (v7 == 1)
      goto LABEL_20;
    v9 = v5->__r_.__value_.__s.__data_[v7-- - 2];
  }
  while (v9 == 47);
  if (v8)
  {
    v10 = v8 - 1;
    if ((*((_BYTE *)&v77.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (v77.__r_.__value_.__l.__size_ > v10)
      {
        v77.__r_.__value_.__l.__size_ = v8;
        goto LABEL_19;
      }
    }
    else if (v10 < HIBYTE(v77.__r_.__value_.__r.__words[2]))
    {
      *((_BYTE *)&v77.__r_.__value_.__s + 23) = v8 & 0x7F;
      v4 = &v77;
LABEL_19:
      v4->__r_.__value_.__s.__data_[v8] = 0;
      goto LABEL_20;
    }
    std::string::__throw_out_of_range[abi:ne180100]();
  }
LABEL_20:
  memset(&v76, 170, sizeof(v76));
  support::fs::getBasePath((const std::string::value_type **)&v77.__r_.__value_.__l.__data_, (uint64_t)&v76);
  v11 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
  if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v11 = v77.__r_.__value_.__l.__size_;
  if (!v11)
    goto LABEL_33;
  v12 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
  if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v12 = v76.__r_.__value_.__l.__size_;
  if (!v12)
  {
LABEL_33:
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
      if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_132;
      goto LABEL_137;
    }
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    goto LABEL_131;
  }
  memset(&v75, 170, sizeof(v75));
  support::fs::getFileName(&v75);
  v13 = SHIBYTE(v75.__r_.__value_.__r.__words[2]);
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
  else
    v14 = v75.__r_.__value_.__l.__size_;
  v15 = v14 + 13;
  memset(__dst, 170, sizeof(__dst));
  if (v14 + 13 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v15 >= 0x17)
  {
    v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v17 = v15 | 7;
    v18 = v17 + 1;
    v16 = (void **)operator new(v17 + 1);
    __dst[1] = (void *)(v14 + 13);
    __dst[2] = (void *)(v18 | 0x8000000000000000);
    __dst[0] = v16;
  }
  else
  {
    memset(__dst, 0, sizeof(__dst));
    v16 = __dst;
    HIBYTE(__dst[2]) = v14 + 13;
    if (!v14)
      goto LABEL_44;
  }
  if (v13 >= 0)
    v19 = &v75;
  else
    v19 = (std::string *)v75.__r_.__value_.__r.__words[0];
  memmove(v16, v19, v14);
LABEL_44:
  strcpy((char *)v16 + v14, "-[[:alnum:]]*");
  *(_QWORD *)&v20 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v72[32] = v20;
  v73 = v20;
  *(_OWORD *)v72 = v20;
  *(_OWORD *)&v72[16] = v20;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v72, (uint64_t)__dst, 0);
  v69 = 0;
  v70 = 0;
  v71 = 0;
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v68, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
  else
    v68 = v76;
  std::locale::locale(&v62, (const std::locale *)v72);
  v63 = *(_OWORD *)&v72[8];
  v64 = *(_OWORD *)&v72[24];
  v65 = *(_QWORD *)&v72[40];
  v66 = (std::__shared_weak_count *)v73;
  if ((_QWORD)v73)
  {
    v21 = (unint64_t *)(v73 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v67 = *((_QWORD *)&v73 + 1);
  if (!support::fs::getFilteredFiles((const char *)&v68, (uint64_t)&v62, (uint64_t)&v69, 0))
  {
    v28 = v66;
    if (v66)
    {
      p_shared_owners = (unint64_t *)&v66->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    std::locale::~locale(&v62);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
    goto LABEL_89;
  }
  v23 = (void **)v69;
  v24 = v70;
  v25 = v66;
  if (v66)
  {
    v26 = (unint64_t *)&v66->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  std::locale::~locale(&v62);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v68.__r_.__value_.__l.__data_);
    if (v23 == v24)
    {
LABEL_89:
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      {
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
        a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
        v40 = (void **)v69;
        if (!v69)
          goto LABEL_125;
        goto LABEL_118;
      }
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
LABEL_117:
      v40 = (void **)v69;
      if (!v69)
        goto LABEL_125;
      goto LABEL_118;
    }
  }
  else if (v23 == v24)
  {
    goto LABEL_89;
  }
  v31 = (char *)v69;
  v32 = (char *)v70;
  if (v69 != v70)
  {
    v33 = 0;
    while (1)
    {
      memset(&__p, 170, sizeof(__p));
      ctu::tokenize();
      memset(&v60, 170, sizeof(v60));
      if (*(char *)(__p.__r_.__value_.__l.__size_ - 1) < 0)
      {
        std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)(__p.__r_.__value_.__l.__size_ - 24), *(_QWORD *)(__p.__r_.__value_.__l.__size_ - 16));
      }
      else
      {
        v35 = *(_OWORD *)(__p.__r_.__value_.__l.__size_ - 24);
        v60.__r_.__value_.__r.__words[2] = *(_QWORD *)(__p.__r_.__value_.__l.__size_ - 8);
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v35;
      }
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = &v60;
      else
        v36 = (std::string *)v60.__r_.__value_.__r.__words[0];
      v37 = strtol((const char *)v36, 0, 0);
      if (v33 <= v37)
        v33 = v37;
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v60.__r_.__value_.__l.__data_);
        v38 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0])
        {
LABEL_84:
          v39 = __p.__r_.__value_.__l.__size_;
          v34 = (void *)v38;
          if (__p.__r_.__value_.__l.__size_ != v38)
          {
            do
            {
              if (*(char *)(v39 - 1) < 0)
                operator delete(*(void **)(v39 - 24));
              v39 -= 24;
            }
            while (v39 != v38);
            v34 = (void *)__p.__r_.__value_.__r.__words[0];
          }
          __p.__r_.__value_.__l.__size_ = v38;
          operator delete(v34);
        }
      }
      else
      {
        v38 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0])
          goto LABEL_84;
      }
      v31 += 24;
      if (v31 == v32)
        goto LABEL_94;
    }
  }
  v33 = 0;
LABEL_94:
  v41 = SHIBYTE(v77.__r_.__value_.__r.__words[2]);
  if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
  else
    v42 = v77.__r_.__value_.__l.__size_;
  v43 = v42 + 1;
  memset(&v60, 170, sizeof(v60));
  if (v42 + 1 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v43 >= 0x17)
  {
    v45 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v45 = v43 | 7;
    v46 = v45 + 1;
    v44 = (char *)operator new(v45 + 1);
    v60.__r_.__value_.__l.__size_ = v42 + 1;
    v60.__r_.__value_.__r.__words[2] = v46 | 0x8000000000000000;
    v60.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
  }
  else
  {
    memset(&v60, 0, sizeof(v60));
    v44 = (char *)&v60;
    *((_BYTE *)&v60.__r_.__value_.__s + 23) = v42 + 1;
    if (!v42)
      goto LABEL_108;
  }
  if (v41 >= 0)
    v47 = &v77;
  else
    v47 = (std::string *)v77.__r_.__value_.__r.__words[0];
  memmove(v44, v47, v42);
LABEL_108:
  *(_WORD *)&v44[v42] = 45;
  std::to_string(&v59, v33);
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v48 = &v59;
  else
    v48 = (std::string *)v59.__r_.__value_.__r.__words[0];
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v49 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
  else
    v49 = v59.__r_.__value_.__l.__size_;
  v50 = std::string::append(&v60, (const std::string::value_type *)v48, v49);
  v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  v52 = std::string::append(&__p, "/", 1uLL);
  v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_116:
      if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_117;
      goto LABEL_141;
    }
  }
  else if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_116;
  }
  operator delete(v59.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_117;
LABEL_141:
  operator delete(v60.__r_.__value_.__l.__data_);
  v40 = (void **)v69;
  if (!v69)
    goto LABEL_125;
LABEL_118:
  v54 = v70;
  v55 = v40;
  if (v70 != v40)
  {
    do
    {
      if (*((char *)v54 - 1) < 0)
        operator delete(*(v54 - 3));
      v54 -= 3;
    }
    while (v54 != v40);
    v55 = v69;
  }
  v70 = v40;
  operator delete(v55);
LABEL_125:
  v56 = (std::__shared_weak_count *)v73;
  if (!(_QWORD)v73)
    goto LABEL_129;
  v57 = (unint64_t *)(v73 + 8);
  do
    v58 = __ldaxr(v57);
  while (__stlxr(v58 - 1, v57));
  if (!v58)
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
    std::locale::~locale((std::locale *)v72);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    {
LABEL_130:
      if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_131;
      goto LABEL_136;
    }
  }
  else
  {
LABEL_129:
    std::locale::~locale((std::locale *)v72);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_130;
  }
  operator delete(__dst[0]);
  if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_131:
    if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_132;
    goto LABEL_137;
  }
LABEL_136:
  operator delete(v75.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_132:
    if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_138:
    operator delete(v77.__r_.__value_.__l.__data_);
    return;
  }
LABEL_137:
  operator delete(v76.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_138;
}

void sub_1BF414A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,std::locale a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,uint64_t a46,std::locale a47)
{
  uint64_t v47;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0)
      {
LABEL_8:
        std::vector<std::string>::~vector[abi:ne180100](&a44);
        std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a47);
        if (*(char *)(v47 - 161) < 0)
        {
          operator delete(*(void **)(v47 - 184));
          if ((*(char *)(v47 - 137) & 0x80000000) == 0)
          {
LABEL_10:
            if ((*(char *)(v47 - 113) & 0x80000000) == 0)
              goto LABEL_11;
            goto LABEL_15;
          }
        }
        else if ((*(char *)(v47 - 137) & 0x80000000) == 0)
        {
          goto LABEL_10;
        }
        operator delete(*(void **)(v47 - 160));
        if ((*(char *)(v47 - 113) & 0x80000000) == 0)
        {
LABEL_11:
          if ((*(char *)(v47 - 89) & 0x80000000) == 0)
            goto LABEL_12;
          goto LABEL_16;
        }
LABEL_15:
        operator delete(*(void **)(v47 - 136));
        if ((*(char *)(v47 - 89) & 0x80000000) == 0)
LABEL_12:
          _Unwind_Resume(a1);
LABEL_16:
        operator delete(*(void **)(v47 - 112));
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a16);
      goto LABEL_8;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a21 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL support::fs::getPartitionInfo(uint64_t a1, _QWORD *a2, _QWORD *a3, unint64_t *a4)
{
  int v7;
  _BOOL8 result;
  int v9;
  uint64_t f_bavail;
  statvfs v11;

  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 23))
    {
      memset(&v11, 0, sizeof(v11));
      v7 = statvfs((const char *)a1, &v11);
      result = v7 == 0;
      if (v7)
        return result;
LABEL_7:
      *a4 = v11.f_frsize;
      f_bavail = v11.f_bavail;
      *a2 = v11.f_blocks;
      *a3 = f_bavail;
      return result;
    }
    return 0;
  }
  if (!*(_QWORD *)(a1 + 8))
    return 0;
  memset(&v11, 0, sizeof(v11));
  v9 = statvfs(*(const char **)a1, &v11);
  result = v9 == 0;
  if (!v9)
    goto LABEL_7;
  return result;
}

_QWORD *support::fs::readCurrentLine@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  const std::locale::facet *v6;
  unsigned __int8 v7;
  std::locale v9[16];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::istream::tellg();
  v4 = v10;
  if (v10 >= 2)
  {
    do
    {
      std::istream::seekg();
      if (std::istream::peek() == 10)
        break;
    }
    while (v4-- > 1);
  }
  std::istream::seekg();
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v6 = std::locale::use_facet(v9, MEMORY[0x1E0DE4A90]);
  v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(v9);
  return std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (uint64_t)a2, v7);
}

void sub_1BF414D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

void sub_1BF414D5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
  {
    operator delete(*(void **)v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  v11 = -86;
  MEMORY[0x1C3B89CA8](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_1BF414EB8(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1BF414E84);
  }
  __cxa_rethrow();
}

void sub_1BF414EFC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void metric::sendCoreAnalyticsEvent(const void **a1, xpc_object_t *a2)
{
  int v2;
  size_t v3;
  unint64_t v4;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const void *v11;
  unsigned __int8 v12;
  NSObject *v13;
  void **v14;
  xpc_object_t object;
  void *__p[4];
  uint8_t buf[4];
  void **v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *((char *)a1 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a1 + 23);
  else
    v3 = (size_t)a1[1];
  v4 = v3 + 20;
  memset(__p, 170, 24);
  if (v3 + 20 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    v10 = (char *)operator new(v8 + 1);
    __p[1] = (void *)(v3 + 20);
    __p[2] = (void *)(v9 | 0x8000000000000000);
    __p[0] = v10;
    v7 = v10 + 20;
    *((_DWORD *)v10 + 4) = 779710063;
    *(_OWORD *)v10 = *(_OWORD *)"com.apple.Telephony.";
  }
  else
  {
    HIDWORD(__p[2]) = 0;
    HIBYTE(__p[2]) = v3 + 20;
    v7 = (char *)&__p[2] + 4;
    LODWORD(__p[2]) = 779710063;
    *(_OWORD *)__p = *(_OWORD *)"com.apple.Telephony.";
    if (!v3)
      goto LABEL_15;
  }
  if (v2 >= 0)
    v11 = a1;
  else
    v11 = *a1;
  memmove(v7, v11, v3);
LABEL_15:
  v7[v3] = 0;
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED7100E0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v13 = qword_1ED7100E0;
    if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_DEFAULT))
      goto LABEL_21;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
    v13 = qword_1ED7100E0;
    if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_DEFAULT))
      goto LABEL_21;
  }
  v14 = __p;
  if (SHIBYTE(__p[2]) < 0)
    v14 = (void **)__p[0];
  *(_DWORD *)buf = 136315138;
  v18 = v14;
  _os_log_impl(&dword_1BF335000, v13, OS_LOG_TYPE_DEFAULT, "Sending CoreAnalytics event: %s", buf, 0xCu);
LABEL_21:
  object = *a2;
  if (*a2)
    xpc_retain(*a2);
  else
    object = xpc_null_create();
  analytics_send_event_lazy();
  xpc_release(object);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
}

void sub_1BF4151C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

xpc_object_t ___ZN6metric22sendCoreAnalyticsEventENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictE_block_invoke(uint64_t a1)
{
  xpc_object_t v1;
  xpc_object_t v2;

  v1 = *(xpc_object_t *)(a1 + 32);
  if (v1)
    xpc_retain(*(xpc_object_t *)(a1 + 32));
  else
    v1 = xpc_null_create();
  v2 = xpc_null_create();
  xpc_release(v2);
  return v1;
}

void sub_1BF415258(_Unwind_Exception *a1)
{
  void *v1;

  xpc_release(v1);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  void *v3;
  xpc_object_t result;

  v3 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v3;
  if (v3)
    return xpc_retain(v3);
  result = xpc_null_create();
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(_QWORD *)(a1 + 32) = 0;
}

void DataModule::create(capabilities::radio *a1@<X0>, uint64_t **a2@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  NSObject *v33;
  uint64_t v34[2];
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t);
  void *v40;
  uint64_t *v41;
  uint64_t block;
  uint64_t v43;
  _QWORD *(*v44)(uint64_t);
  void *v45;
  _QWORD *v46;
  uint64_t **v47;

  *a2 = 0;
  a2[1] = 0;
  if (!capabilities::radio::supportsDataService(a1))
    return;
  v4 = operator new(0x140uLL);
  v5 = v4;
  v6 = *(_QWORD *)a1;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  v34[0] = v6;
  v34[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  DataModule::DataModule((uint64_t)v4, v34);
  v35 = (uint64_t *)v5;
  v36 = 0xAAAAAAAAAAAAAAAALL;
  v10 = (std::__shared_weak_count *)operator new(0x20uLL);
  v10->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)off_1E79044C8;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  v36 = (unint64_t)v10;
  v12 = (std::__shared_weak_count *)*((_QWORD *)v5 + 16);
  if (v12)
  {
    if (v12->__shared_owners_ != -1)
      goto LABEL_17;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v14 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    *((_QWORD *)v5 + 15) = v5;
    *((_QWORD *)v5 + 16) = v10;
    std::__shared_weak_count::__release_weak(v12);
  }
  else
  {
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    *((_QWORD *)v5 + 15) = v5;
    *((_QWORD *)v5 + 16) = v10;
  }
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (v19)
  {
LABEL_17:
    v20 = v35;
    if (v35[13])
      goto LABEL_18;
    goto LABEL_33;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  v20 = v35;
  if (v35[13])
  {
LABEL_18:
    v21 = (std::__shared_weak_count *)v20[16];
    if (!v21 || (v22 = v20[15], (v23 = std::__shared_weak_count::lock(v21)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v24 = v23;
    block = v22;
    v43 = (uint64_t)v23;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v20 + 7));
    v25 = v22 + 48;
    if (!v22)
      v25 = 0;
    v37 = v25;
    v38 = (uint64_t)v24;
    block = 0;
    v43 = 0;
    ctu::TrackedLogger::registerLoggerToServer();
    v26 = (std::__shared_weak_count *)v38;
    if (v38)
    {
      v27 = (unint64_t *)(v38 + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = (std::__shared_weak_count *)v43;
    if (v43)
    {
      v30 = (unint64_t *)(v43 + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v20 = v35;
  }
LABEL_33:
  v32 = v36;
  *a2 = v20;
  a2[1] = (uint64_t *)v32;
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  v37 = MEMORY[0x1E0C809B0];
  v38 = 0x40000000;
  v39 = ___ZN10DataModule4initEv_block_invoke;
  v40 = &__block_descriptor_tmp_18;
  v41 = v20;
  block = MEMORY[0x1E0C809B0];
  v35 = &v37;
  v43 = 0x40000000;
  v44 = ___ZNK3ctu20SharedSynchronizableI10DataModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v45 = &__block_descriptor_tmp_31_2;
  v46 = v20 + 15;
  v47 = &v35;
  v33 = v20[17];
  if (v20[18])
    dispatch_async_and_wait(v33, &block);
  else
    dispatch_sync(v33, &block);
}

void sub_1BF41559C()
{
  __break(1u);
}

void sub_1BF4155E0()
{
  __cxa_end_catch();
  JUMPOUT(0x1BF41561CLL);
}

void sub_1BF4155F0()
{
  JUMPOUT(0x1BF415620);
}

void sub_1BF4155FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1BF41565C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void DataModule::init(DataModule *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN10DataModule4initEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_18;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI10DataModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_31_2;
  block[4] = (char *)this + 120;
  block[5] = &v4;
  v2 = (char *)this + 136;
  v1 = *((_QWORD *)this + 17);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

const char *DataModule::getName(DataModule *this)
{
  return "data.mod";
}

_BYTE *DataModule::getShutdownStages@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *v3;
  _BYTE *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(1uLL);
  *a1 = v3;
  *v3 = 3;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

uint64_t DataModule::DataModule(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *initially_inactive;
  NSObject *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE v20[16];
  _QWORD block[5];
  _BYTE v22[16];

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_1E7908A38;
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(_QWORD *)a1 = &unk_1E78FC4E8;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_1E78FC4E8;
    *(_QWORD *)(a1 + 8) = v3;
  }
  *(_QWORD *)a1 = off_1E79040B8;
  *(_QWORD *)(a1 + 48) = &unk_1E7904128;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v20, "com.apple.telephony.abm", "data.mod");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_2;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v11 = GetABMLogServer(void)::sLogServer;
    v10 = *(std::__shared_weak_count **)algn_1ED710088;
    if (*(_QWORD *)algn_1ED710088)
      goto LABEL_12;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v11 = GetABMLogServer(void)::sLogServer;
    v10 = *(std::__shared_weak_count **)algn_1ED710088;
    if (*(_QWORD *)algn_1ED710088)
    {
LABEL_12:
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v15 = dispatch_queue_create_with_target_V2("data.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v15, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v15);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v15;
  if (v15)
  {
    dispatch_retain(v15);
    *(_QWORD *)(a1 + 144) = 0;
    dispatch_release(v15);
  }
  else
  {
    *(_QWORD *)(a1 + 144) = 0;
  }
  *(_QWORD *)(a1 + 48) = off_1E7904488;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)block);
  *(_QWORD *)(a1 + 56) = &unk_1E78FB900;
  *(_QWORD *)(a1 + 104) = v11;
  *(_QWORD *)(a1 + 112) = v10;
  if (v10)
  {
    v16 = (unint64_t *)&v10->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
    *(_QWORD *)(a1 + 48) = off_1E7904518;
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
    *(_QWORD *)(a1 + 48) = off_1E7904518;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v20);
  *(_QWORD *)a1 = off_1E79040B8;
  *(_QWORD *)(a1 + 48) = &unk_1E7904128;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 176) = 1;
  *(_QWORD *)(a1 + 168) = &off_1E78FBEA8;
  *(_BYTE *)(a1 + 192) = 1;
  *(_QWORD *)(a1 + 184) = &off_1E78FBEF0;
  *(_BYTE *)(a1 + 208) = 1;
  *(_QWORD *)(a1 + 200) = &off_1E78FBF38;
  *(_BYTE *)(a1 + 224) = 1;
  *(_QWORD *)(a1 + 216) = &off_1E78FBF80;
  *(_BYTE *)(a1 + 240) = 1;
  *(_QWORD *)(a1 + 232) = &off_1E78FBFC8;
  *(_BYTE *)(a1 + 256) = 1;
  *(_QWORD *)(a1 + 248) = &off_1E78FBEF0;
  *(_BYTE *)(a1 + 272) = 1;
  *(_QWORD *)(a1 + 264) = &off_1E78FBF38;
  *(_QWORD *)(a1 + 280) = "kKeyPropertyDataAggregationProtocol";
  *(_QWORD *)(a1 + 288) = "kKeyPropertyDataAggregationMaxDatagrams";
  *(_QWORD *)(a1 + 296) = "kKeyPropertyDataAggregationMaxSize";
  *(_QWORD *)(a1 + 304) = "kKeyPropertyDataFlowControl";
  *(_QWORD *)(a1 + 312) = "kKeyPropertyDataPowerSave";
  return a1;
}

void sub_1BF415B00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  Service *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v4 - 64));
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  Service::~Service(v2);
  _Unwind_Resume(a1);
}

void sub_1BF415B3C(_Unwind_Exception *a1)
{
  Service *v1;

  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void DataModule::~DataModule(DataModule *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;

  *(_QWORD *)this = off_1E79040B8;
  *((_QWORD *)this + 6) = &unk_1E7904128;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *((_QWORD *)this + 6) = off_1E7904488;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v5 = *((_QWORD *)this + 18);
  if (v5)
    dispatch_release(v5);
  v6 = *((_QWORD *)this + 17);
  if (v6)
    dispatch_release(v6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  *(_QWORD *)this = off_1E7908A38;
  v8 = *((_QWORD *)this + 3);
  if (v8)
  {
    v9 = *((_QWORD *)this + 4);
    v10 = (void *)*((_QWORD *)this + 3);
    if (v9 != v8)
    {
      do
      {
        if (*(char *)(v9 - 1) < 0)
          operator delete(*(void **)(v9 - 24));
        v9 -= 24;
      }
      while (v9 != v8);
      v10 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v8;
    operator delete(v10);
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
}

{
  void *v1;

  DataModule::~DataModule(this);
  operator delete(v1);
}

void `non-virtual thunk to'DataModule::~DataModule(DataModule *this)
{
  DataModule::~DataModule((DataModule *)((char *)this - 48));
}

{
  void *v1;

  DataModule::~DataModule((DataModule *)((char *)this - 48));
  operator delete(v1);
}

void ___ZN10DataModule4initEv_block_invoke(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1BF335000, v1, OS_LOG_TYPE_DEFAULT, "#I Initializing", v2, 2u);
  }
}

void DataModule::shutdown(uint64_t a1)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN10DataModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v1[3] = &__block_descriptor_tmp_8_4;
  v1[4] = a1;
  ctu::SharedSynchronizable<DataModule>::execute_wrapped((uint64_t *)(a1 + 120), (uint64_t)v1);
}

void ___ZN10DataModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 160);
  *(_QWORD *)(v1 + 152) = 0;
  *(_QWORD *)(v1 + 160) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void DataModule::initialize(_QWORD *a1, NSObject **a2)
{
  uint64_t *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD v15[5];
  dispatch_group_t group;

  v3 = a1 + 15;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1174405120;
  v15[2] = ___ZN10DataModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v15[3] = &__block_descriptor_tmp_12_4;
  v4 = *a2;
  v15[4] = a1;
  group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  ctu::SharedSynchronizable<DataModule>::execute_wrapped(v3, (uint64_t)v15);
  v5 = (std::__shared_weak_count *)a1[16];
  if (!v5 || (v6 = a1[15], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v9 = operator new(8uLL);
  *v9 = a1;
  v10 = a1[17];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = operator new(0x18uLL);
  *v13 = v9;
  v13[1] = v6;
  v13[2] = v8;
  dispatch_async_f(v10, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<DataModule>::execute_wrapped<DataModule::initialize(dispatch::group_session)::$_0>(DataModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<DataModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<DataModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN10DataModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  _QWORD aBlock[6];
  std::__shared_weak_count *v13;
  const void *v14;
  char *v15;
  __int128 v16;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (v3 = *(_QWORD *)(v1 + 120), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v15 = (char *)operator new(0x19uLL);
  v16 = xmmword_1BF53F3F0;
  strcpy(v15, "kCommandGetDataProperty");
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10DataModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_11_6;
  aBlock[4] = v1;
  aBlock[5] = v3;
  v13 = v5;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  v11 = _Block_copy(aBlock);
  v14 = v11;
  Service::registerCommandHandler(v1, (uint64_t)&v15, &v14);
  if (v11)
    _Block_release(v11);
  if (SHIBYTE(v16) < 0)
    operator delete(v15);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF41604C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  std::__shared_weak_count *v16;
  const void *v17;
  uint64_t v18;

  if (v17)
    _Block_release(v17);
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if ((*(char *)(v18 - 33) & 0x80000000) == 0)
    {
LABEL_5:
      std::__shared_weak_count::__release_weak(v16);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v18 - 33) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v18 - 56));
  std::__shared_weak_count::__release_weak(v16);
  _Unwind_Resume(a1);
}

void sub_1BF4160A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void ___ZN10DataModule10initializeEN8dispatch13group_sessionE_block_invoke_2(_QWORD *a1, void **a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  void *v10;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  xpc_object_t object;
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 1174405120;
      v14[2] = ___ZN10DataModule10initializeEN8dispatch13group_sessionE_block_invoke_3;
      v14[3] = &__block_descriptor_tmp_9_6;
      v10 = *a2;
      v14[4] = v7;
      object = v10;
      if (v10)
      {
        xpc_retain(v10);
        v11 = *a3;
        if (!*a3)
          goto LABEL_9;
      }
      else
      {
        object = xpc_null_create();
        v11 = *a3;
        if (!*a3)
        {
LABEL_9:
          aBlock = v11;
          ctu::SharedSynchronizable<DataModule>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v14);
          if (aBlock)
            _Block_release(aBlock);
          xpc_release(object);
          object = 0;
          goto LABEL_12;
        }
      }
      v11 = _Block_copy(v11);
      goto LABEL_9;
    }
  }
}

void ___ZN10DataModule10initializeEN8dispatch13group_sessionE_block_invoke_3(_QWORD *a1)
{
  xpc_object_t v2;
  uint64_t v3;
  void *v4;
  void *aBlock;
  void *v6;

  v3 = a1[4];
  v2 = (xpc_object_t)a1[5];
  v6 = v2;
  if (!v2)
  {
    v2 = xpc_null_create();
    v6 = v2;
    v4 = (void *)a1[6];
    if (!v4)
      goto LABEL_6;
    goto LABEL_5;
  }
  xpc_retain(v2);
  v4 = (void *)a1[6];
  if (v4)
LABEL_5:
    v4 = _Block_copy(v4);
LABEL_6:
  aBlock = v4;
  DataModule::getDataProperty_sync(v3, &v6, (uint64_t *)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(v2);
}

void sub_1BF416290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock)
{
  void *v9;

  if (aBlock)
    _Block_release(aBlock);
  xpc_release(v9);
  _Unwind_Resume(a1);
}

void DataModule::getDataProperty_sync(uint64_t a1, void **a2, uint64_t *a3)
{
  char *v6;
  std::string *v7;
  __int128 v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  uint8_t *v21;
  uint64_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  void *v25;
  std::string::size_type v26;
  CommandDriverFactory *v27;
  void *v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  xpc_object_t v41;
  xpc_object_t v42;
  int DataPropertyTypeFromDict;
  uint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  NSObject *v49;
  xpc_object_t v50;
  uint64_t v51;
  xpc_object_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  xpc_object_t v56;
  void *v57;
  uint8_t *v58;
  xpc_object_t v59;
  xpc_object_t v60;
  void *v61;
  dispatch_object_t v62;
  void *v63;
  dispatch_object_t v64;
  void *v65;
  dispatch_object_t size;
  xpc_object_t v67[3];
  xpc_object_t object;
  std::__shared_weak_count *v69;
  xpc_object_t v70;
  std::__shared_weak_count *v71;
  _QWORD aBlock[6];
  std::__shared_weak_count *v73;
  xpc_object_t v74;
  void *v75;
  uint8_t buf[32];
  std::string v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1))
  {
    memset(buf, 170, 24);
    v77.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
    *(_OWORD *)&v77.__r_.__value_.__r.__words[1] = xmmword_1BF53F3F0;
    strcpy(v77.__r_.__value_.__l.__data_, "kCommandGetDataProperty");
    v6 = (char *)operator new(0x28uLL);
    strcpy(v6, " rejected; ABM is shutting down ");
    v7 = std::string::append(&v77, v6, 0x20uLL);
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    *(_QWORD *)&buf[16] = *((_QWORD *)&v7->__r_.__value_.__l + 2);
    *(_OWORD *)buf = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    operator delete(v6);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v77.__r_.__value_.__l.__data_);
      v9 = *(NSObject **)(a1 + 88);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
LABEL_4:
        if (!*a3)
        {
LABEL_117:
          if ((char)buf[23] < 0)
            operator delete(*(void **)buf);
          return;
        }
LABEL_23:
        v77.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
        v77.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
        v22 = buf[23];
        if ((buf[23] & 0x80u) != 0)
          v22 = *(_QWORD *)&buf[8];
        if (v22)
        {
          v23 = xpc_dictionary_create(0, 0, 0);
          if (v23 || (v23 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x1C3B8A86C](v23) == MEMORY[0x1E0C812F8])
            {
              xpc_retain(v23);
              v24 = v23;
            }
            else
            {
              v24 = xpc_null_create();
            }
          }
          else
          {
            v24 = xpc_null_create();
            v23 = 0;
          }
          xpc_release(v23);
          v56 = xpc_null_create();
          v57 = (void *)v77.__r_.__value_.__r.__words[0];
          v77.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
          xpc_release(v57);
          xpc_release(v56);
          if ((buf[23] & 0x80u) == 0)
            v58 = buf;
          else
            v58 = *(uint8_t **)buf;
          v59 = xpc_string_create((const char *)v58);
          if (!v59)
            v59 = xpc_null_create();
          xpc_dictionary_set_value(v24, (const char *)*MEMORY[0x1E0CFB0D0], v59);
          v60 = xpc_null_create();
          xpc_release(v59);
          xpc_release(v60);
        }
        LODWORD(v70) = -534716415;
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, (unsigned int *)&v70, (void **)&v77.__r_.__value_.__l.__data_);
        xpc_release(v77.__r_.__value_.__l.__data_);
        goto LABEL_117;
      }
    }
    else
    {
      v9 = *(NSObject **)(a1 + 88);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        goto LABEL_4;
    }
    v21 = buf;
    if ((buf[23] & 0x80u) != 0)
      v21 = *(uint8_t **)buf;
    LODWORD(v77.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v77.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
    _os_log_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&v77, 0xCu);
    if (!*a3)
      goto LABEL_117;
    goto LABEL_23;
  }
  v10 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v10 || (v11 = *(_QWORD *)(a1 + 120), (v12 = std::__shared_weak_count::lock(v10)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v13 = v12;
  p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  v77.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  v77.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10DataModule20getDataProperty_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_25_3;
  aBlock[4] = a1;
  aBlock[5] = v11;
  v73 = v13;
  do
    v18 = __ldxr(p_shared_weak_owners);
  while (__stxr(v18 + 1, p_shared_weak_owners));
  v19 = *a2;
  v74 = v19;
  if (!v19)
  {
    v74 = xpc_null_create();
    v20 = (void *)*a3;
    if (!*a3)
      goto LABEL_32;
    goto LABEL_31;
  }
  xpc_retain(v19);
  v20 = (void *)*a3;
  if (*a3)
LABEL_31:
    v20 = _Block_copy(v20);
LABEL_32:
  v75 = v20;
  v25 = _Block_copy(aBlock);
  v26 = *(_QWORD *)(a1 + 136);
  if (v26)
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  v77.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
  v77.__r_.__value_.__l.__size_ = v26;
  v70 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v71 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v27 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v28 = (void *)off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v27);
    v29 = *(_OWORD *)buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v30 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v29;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v33 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v34 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v28 = (void *)off_1ED70FD08;
  }
  v36 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  v67[1] = v28;
  v67[2] = *((xpc_object_t *)&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v37 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(xpc_object_t *__return_ptr, void *))(*(_QWORD *)v28 + 96))(&object, v28);
  v70 = 0;
  v71 = 0;
  if (v69)
  {
    v71 = std::__shared_weak_count::lock(v69);
    if (v71)
      v70 = object;
    if (v69)
      std::__shared_weak_count::__release_weak(v69);
  }
  if (!v36)
    goto LABEL_58;
  v39 = (unint64_t *)&v36->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
    v41 = v70;
    if (v70)
      goto LABEL_59;
  }
  else
  {
LABEL_58:
    v41 = v70;
    if (v70)
    {
LABEL_59:
      v42 = *a2;
      v67[0] = v42;
      if (v42)
      {
        xpc_retain(v42);
      }
      else
      {
        v42 = xpc_null_create();
        v67[0] = v42;
      }
      DataPropertyTypeFromDict = abm::data::getDataPropertyTypeFromDict(v67);
      xpc_release(v42);
      v67[0] = 0;
      switch(DataPropertyTypeFromDict)
      {
        case 0:
          abm::data::DataAggregationProtocol::toDict((abm::data::DataAggregationProtocol *)(a1 + 168), &object);
          v44 = *a3;
          *(_QWORD *)buf = object;
          object = xpc_null_create();
          (*(void (**)(uint64_t, _QWORD, uint8_t *))(v44 + 16))(v44, 0, buf);
          xpc_release(*(xpc_object_t *)buf);
          xpc_release(object);
          break;
        case 1:
          v45 = (void *)v77.__r_.__value_.__r.__words[0];
          if (v77.__r_.__value_.__r.__words[0])
            v45 = _Block_copy(v77.__r_.__value_.__l.__data_);
          v65 = v45;
          size = (dispatch_object_t)v77.__r_.__value_.__l.__size_;
          if (v77.__r_.__value_.__l.__size_)
            dispatch_retain((dispatch_object_t)v77.__r_.__value_.__l.__size_);
          (*(void (**)(xpc_object_t, void **))(*(_QWORD *)v41 + 48))(v41, &v65);
          if (size)
            dispatch_release(size);
          if (v65)
            _Block_release(v65);
          break;
        case 2:
          v46 = (void *)v77.__r_.__value_.__r.__words[0];
          if (v77.__r_.__value_.__r.__words[0])
            v46 = _Block_copy(v77.__r_.__value_.__l.__data_);
          v63 = v46;
          v64 = (dispatch_object_t)v77.__r_.__value_.__l.__size_;
          if (v77.__r_.__value_.__l.__size_)
            dispatch_retain((dispatch_object_t)v77.__r_.__value_.__l.__size_);
          (*(void (**)(xpc_object_t, void **))(*(_QWORD *)v41 + 56))(v41, &v63);
          if (v64)
            dispatch_release(v64);
          if (v63)
            _Block_release(v63);
          break;
        case 3:
          v47 = (void *)v77.__r_.__value_.__r.__words[0];
          if (v77.__r_.__value_.__r.__words[0])
            v47 = _Block_copy(v77.__r_.__value_.__l.__data_);
          v61 = v47;
          v62 = (dispatch_object_t)v77.__r_.__value_.__l.__size_;
          if (v77.__r_.__value_.__l.__size_)
            dispatch_retain((dispatch_object_t)v77.__r_.__value_.__l.__size_);
          (*(void (**)(xpc_object_t, void **))(*(_QWORD *)v41 + 64))(v41, &v61);
          if (v62)
            dispatch_release(v62);
          if (v61)
            _Block_release(v61);
          break;
        case 4:
          abm::data::DataPowerSave::toDict((abm::data::DataPowerSave *)(a1 + 232), &object);
          v48 = *a3;
          *(_QWORD *)buf = object;
          object = xpc_null_create();
          (*(void (**)(uint64_t, _QWORD, uint8_t *))(v48 + 16))(v48, 0, buf);
          xpc_release(*(xpc_object_t *)buf);
          xpc_release(object);
          break;
        default:
          v49 = *(NSObject **)(a1 + 88);
          if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1BF335000, v49, OS_LOG_TYPE_ERROR, "Invalid property name", buf, 2u);
          }
          v50 = xpc_null_create();
          v51 = *a3;
          *(_QWORD *)buf = v50;
          v52 = xpc_null_create();
          (*(void (**)(uint64_t, uint64_t, uint8_t *))(v51 + 16))(v51, 3760250880, buf);
          xpc_release(*(xpc_object_t *)buf);
          xpc_release(v52);
          break;
      }
    }
  }
  v53 = v71;
  if (v71)
  {
    v54 = (unint64_t *)&v71->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (v77.__r_.__value_.__l.__size_)
    dispatch_release((dispatch_object_t)v77.__r_.__value_.__l.__size_);
  if (v77.__r_.__value_.__r.__words[0])
    _Block_release(v77.__r_.__value_.__l.__data_);
  if (v75)
    _Block_release(v75);
  xpc_release(v74);
  v74 = 0;
  if (v73)
    std::__shared_weak_count::__release_weak(v73);
  std::__shared_weak_count::__release_weak(v13);
}

void sub_1BF416AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, xpc_object_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,xpc_object_t object,void *aBlock)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

xpc::dict *xpc::dict::dict(xpc::dict *this, void **a2)
{
  void *v3;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  if (v3)
    xpc_retain(v3);
  else
    *(_QWORD *)this = xpc_null_create();
  return this;
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10DataModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10DataModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void DataModule::finishInitialization_sync(std::__shared_weak_count **this)
{
  const char *v2;
  size_t v3;
  void *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  const void *v24;
  size_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  NSObject *v32;
  _QWORD v33[6];
  std::__shared_weak_count *v34;
  void *aBlock;
  dispatch_object_t object;
  void *__p[2];
  unint64_t v38;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v41;
  __int128 v42;

  v2 = (const char *)((uint64_t (*)(std::__shared_weak_count **))(*this)->__shared_weak_owners_)(this);
  v3 = strlen(v2);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    v5 = (void **)operator new(v6 + 1);
    __dst[1] = v4;
    v41 = v7 | 0x8000000000000000;
    __dst[0] = v5;
  }
  else
  {
    HIBYTE(v41) = v3;
    v5 = __dst;
    if (!v3)
      goto LABEL_9;
  }
  memmove(v5, v2, (size_t)v4);
LABEL_9:
  *((_BYTE *)v4 + (_QWORD)v5) = 0;
  cf = 0;
  AppleBasebandManager::create();
  v8 = v42;
  v42 = 0uLL;
  v9 = this[20];
  *(_OWORD *)(this + 19) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_18;
  v13 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
  {
LABEL_18:
    v15 = cf;
    if (!cf)
      goto LABEL_20;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  v15 = cf;
  if (cf)
LABEL_19:
    CFRelease(v15);
LABEL_20:
  if (SHIBYTE(v41) < 0)
    operator delete(__dst[0]);
  v16 = this[16];
  if (!v16 || (v17 = this[15], (v18 = std::__shared_weak_count::lock(v16)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = v18;
  p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
  do
    v21 = __ldxr(p_shared_weak_owners);
  while (__stxr(v21 + 1, p_shared_weak_owners));
  v22 = (unint64_t *)&v18->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v19);
  }
  v24 = (const void *)*MEMORY[0x1E0CFBD68];
  v25 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  if (v25 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v26 = (void *)v25;
  if (v25 >= 0x17)
  {
    v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v28 = v25 | 7;
    v29 = v28 + 1;
    v27 = operator new(v28 + 1);
    __p[1] = v26;
    v38 = v29 | 0x8000000000000000;
    __p[0] = v27;
  }
  else
  {
    HIBYTE(v38) = v25;
    v27 = __p;
    if (!v25)
      goto LABEL_38;
  }
  memmove(v27, v24, (size_t)v26);
LABEL_38:
  *((_BYTE *)v26 + (_QWORD)v27) = 0;
  v33[0] = MEMORY[0x1E0C809B0];
  v33[1] = 1174405120;
  v33[2] = ___ZN10DataModule25finishInitialization_syncEv_block_invoke;
  v33[3] = &__block_descriptor_tmp_15_3;
  v33[4] = this;
  v33[5] = v17;
  v34 = v19;
  do
    v30 = __ldxr(p_shared_weak_owners);
  while (__stxr(v30 + 1, p_shared_weak_owners));
  v31 = _Block_copy(v33);
  v32 = this[17];
  if (v32)
    dispatch_retain((dispatch_object_t)this[17]);
  aBlock = v31;
  object = v32;
  AppleBasebandManager::setEventHandler();
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (SHIBYTE(v38) < 0)
    operator delete(__p[0]);
  AppleBasebandManager::eventsOn((AppleBasebandManager *)this[19]);
  if (v34)
    std::__shared_weak_count::__release_weak(v34);
  std::__shared_weak_count::__release_weak(v19);
}

void sub_1BF4170C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::__shared_weak_count *v30;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  std::__shared_weak_count::__release_weak(v30);
  _Unwind_Resume(a1);
}

void ___ZN10DataModule25finishInitialization_syncEv_block_invoke(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  const void *v8;
  char v9;
  size_t v10;
  void **v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  __int128 v15;
  uint64_t v16;
  void *__p[2];
  uint64_t v18;
  _QWORD v19[2];
  unint64_t v20;
  std::__shared_weak_count *v22;
  uint64_t v23;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v22 = v6;
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v20 = 0xAAAAAAAAAAAAAAAALL;
        abm::client::Event::getData(*a2);
        v8 = (const void *)0xAAAAAAAAAAAAAAAALL;
        if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
        {
          v19[0] = 0xAAAAAAAAAAAAAAAALL;
          v19[1] = 0xAAAAAAAAAAAAAAAALL;
          ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v19, (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL);
          __p[0] = 0;
          __p[1] = 0;
          v18 = 0;
          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v23, (const char *)*MEMORY[0x1E0CFB530]);
          ctu::cf::map_adapter::getString();
          MEMORY[0x1C3B8936C](&v23);
          v18 = v16;
          *(_OWORD *)__p = v15;
          v9 = HIBYTE(v16);
          if (v16 >= 0)
            v10 = HIBYTE(v16);
          else
            v10 = *((_QWORD *)&v15 + 1);
          if (v10 == strlen((const char *)*MEMORY[0x1E0CFB980]))
          {
            v11 = v16 >= 0 ? __p : (void **)__p[0];
            if (!memcmp(v11, (const void *)*MEMORY[0x1E0CFB980], v10))
            {
              v14[0] = MEMORY[0x1E0C809B0];
              v14[1] = 0x40000000;
              v14[2] = ___ZN10DataModule25finishInitialization_syncEv_block_invoke_2;
              v14[3] = &__block_descriptor_tmp_13_7;
              v14[4] = v5;
              ctu::SharedSynchronizable<DataModule>::execute_wrapped((uint64_t *)(v5 + 120), (uint64_t)v14);
              v9 = HIBYTE(v18);
            }
          }
          if (v9 < 0)
            operator delete(__p[0]);
          MEMORY[0x1C3B893A8](v19);
          v8 = (const void *)v20;
        }
        if (v8)
          CFRelease(v8);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void ___ZN10DataModule25finishInitialization_syncEv_block_invoke_2(uint64_t a1)
{
  DataModule *v1;

  v1 = *(DataModule **)(a1 + 32);
  DataModule::configureDataFormat_sync(v1);
  DataModule::configureQMAPSettings_sync(v1);
  DataModule::configureDataPowerSave_sync((dispatch_object_t *)v1);
  DataModule::configureCapabilities_sync(v1);
  DataModule::configureLowLatencyCapability_sync(v1);
  DataModule::configureLLDataFormat_sync(v1);
}

void DataModule::configureDataFormat_sync(DataModule *this)
{
  capabilities::abs *v2;
  unsigned int v3;
  capabilities::abs *v4;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  NSObject *v20;
  CommandDriverFactory *v21;
  uint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  capabilities::abs *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void *v43;
  dispatch_object_t object;
  uint64_t (**v45)(abm::data::DataAggregationProtocol *__hidden);
  BOOL v46;
  int v47;
  uint64_t (**v48)(abm::data::DataAggregationMaxDatagrams *__hidden);
  char v49;
  int v50;
  uint64_t (**v51)(abm::data::DataAggregationMaxSize *__hidden);
  char v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  _QWORD aBlock[6];
  std::__shared_weak_count *v61;
  void *v62;
  dispatch_object_t v63;
  __int128 v64;

  v2 = (capabilities::abs *)capabilities::abs::dataAggregationProtocol(this);
  v3 = v2;
  v4 = (capabilities::abs *)capabilities::abs::dataAggregationDatagramMaxCount(v2);
  v5 = (int)v4;
  v6 = capabilities::abs::dataAggregationMaxSizeBytes(v4);
  v7 = v6;
  v8 = v3 < 3;
  if (v3 >= 3)
    v9 = 3;
  else
    v9 = v3;
  *((_BYTE *)this + 176) = v8;
  *((_DWORD *)this + 45) = v9;
  *((_BYTE *)this + 192) = 1;
  *((_DWORD *)this + 49) = v5;
  *((_BYTE *)this + 208) = 1;
  *((_DWORD *)this + 53) = v6;
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v10 || (v11 = *((_QWORD *)this + 15), (v12 = std::__shared_weak_count::lock(v10)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v13 = v12;
  p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  v62 = (void *)0xAAAAAAAAAAAAAAAALL;
  v63 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10DataModule24configureDataFormat_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_17_1;
  aBlock[4] = this;
  aBlock[5] = v11;
  v61 = v13;
  do
    v18 = __ldxr(p_shared_weak_owners);
  while (__stxr(v18 + 1, p_shared_weak_owners));
  v19 = _Block_copy(aBlock);
  v20 = *((_QWORD *)this + 17);
  if (v20)
    dispatch_retain(v20);
  v62 = v19;
  v63 = v20;
  v58 = 0xAAAAAAAAAAAAAAAALL;
  v59 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v21 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v22 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v21);
    v23 = v64;
    v64 = 0uLL;
    v24 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v23;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
    if (*((_QWORD *)&v64 + 1))
    {
      v28 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v22 = off_1ED70FD08;
  }
  v30 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  v54 = v22;
  v55 = *(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v31 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v22 + 96))(&v56, v22);
  v58 = 0;
  v59 = 0;
  v33 = (capabilities::abs *)v57;
  if (v57)
  {
    v59 = std::__shared_weak_count::lock(v57);
    if (v59)
      v58 = v56;
    v33 = (capabilities::abs *)v57;
    if (v57)
      std::__shared_weak_count::__release_weak(v57);
  }
  if (v30)
  {
    v34 = (unint64_t *)&v30->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v36 = capabilities::abs::defaultDataInterfaceID(v33);
  v37 = v58;
  if (v58)
  {
    v38 = v36;
    v46 = v8;
    v45 = &off_1E78FBEA8;
    v47 = v9;
    v49 = 1;
    v48 = &off_1E78FBEF0;
    v50 = v5;
    v52 = 1;
    v51 = &off_1E78FBF38;
    v53 = v7;
    v39 = v62;
    if (v62)
      v39 = _Block_copy(v62);
    v43 = v39;
    object = v63;
    if (v63)
      dispatch_retain(v63);
    (*(void (**)(unint64_t, uint64_t (***)(abm::data::DataAggregationProtocol *__hidden), uint64_t, void **))(*(_QWORD *)v37 + 72))(v37, &v45, v38, &v43);
    if (object)
      dispatch_release(object);
    if (v43)
      _Block_release(v43);
  }
  v40 = v59;
  if (v59)
  {
    v41 = (unint64_t *)&v59->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (v63)
    dispatch_release(v63);
  if (v62)
    _Block_release(v62);
  if (v61)
    std::__shared_weak_count::__release_weak(v61);
  std::__shared_weak_count::__release_weak(v13);
}

void sub_1BF417794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30)
{
  std::__shared_weak_count *v30;
  uint64_t v31;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v31 - 112);
  if (a30)
    std::__shared_weak_count::__release_weak(a30);
  std::__shared_weak_count::__release_weak(v30);
  _Unwind_Resume(a1);
}

void DataModule::configureQMAPSettings_sync(DataModule *this)
{
  char v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  NSObject *v13;
  CommandDriverFactory *v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  dispatch_object_t object;
  uint64_t (**v35)(abm::data::DataFlowControl *__hidden);
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  _QWORD aBlock[6];
  std::__shared_weak_count *v45;
  void *v46;
  dispatch_object_t v47;
  __int128 v48;

  v2 = capabilities::abs::dataFlowControlEnabled(this);
  *((_BYTE *)this + 224) = 1;
  *((_BYTE *)this + 225) = v2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v3 || (v4 = *((_QWORD *)this + 15), (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  v46 = (void *)0xAAAAAAAAAAAAAAAALL;
  v47 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10DataModule26configureQMAPSettings_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_19_2;
  aBlock[4] = this;
  aBlock[5] = v4;
  v45 = v6;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  v12 = _Block_copy(aBlock);
  v13 = *((_QWORD *)this + 17);
  if (v13)
    dispatch_retain(v13);
  v46 = v12;
  v47 = v13;
  v42 = 0xAAAAAAAAAAAAAAAALL;
  v43 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v14 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v15 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v14);
    v16 = v48;
    v48 = 0uLL;
    v17 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v16;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
    if (*((_QWORD *)&v48 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v15 = off_1ED70FD08;
  }
  v23 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  v38 = v15;
  v39 = *(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v24 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v15 + 96))(&v40, v15);
  v42 = 0;
  v43 = 0;
  if (v41)
  {
    v43 = std::__shared_weak_count::lock(v41);
    if (v43)
      v42 = v40;
    if (v41)
      std::__shared_weak_count::__release_weak(v41);
  }
  if (!v23)
    goto LABEL_37;
  v26 = (unint64_t *)&v23->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    v28 = v42;
    if (!v42)
      goto LABEL_46;
  }
  else
  {
LABEL_37:
    v28 = v42;
    if (!v42)
      goto LABEL_46;
  }
  v36 = 1;
  v35 = &off_1E78FBF80;
  v37 = v2;
  v29 = v46;
  if (v46)
    v29 = _Block_copy(v46);
  v33 = v29;
  object = v47;
  if (v47)
    dispatch_retain(v47);
  (*(void (**)(unint64_t, uint64_t (***)(abm::data::DataFlowControl *__hidden), void **))(*(_QWORD *)v28 + 80))(v28, &v35, &v33);
  if (object)
    dispatch_release(object);
  if (v33)
    _Block_release(v33);
LABEL_46:
  v30 = v43;
  if (v43)
  {
    v31 = (unint64_t *)&v43->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v47)
    dispatch_release(v47);
  if (v46)
    _Block_release(v46);
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1BF417B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  std::__shared_weak_count *v26;
  uint64_t v27;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v27 - 80);
  if (a26)
    std::__shared_weak_count::__release_weak(a26);
  std::__shared_weak_count::__release_weak(v26);
  _Unwind_Resume(a1);
}

void DataModule::configureDataPowerSave_sync(dispatch_object_t *this)
{
  char v2;
  std::__shared_weak_count *v3;
  dispatch_object_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  NSObject *v13;
  CommandDriverFactory *v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  dispatch_object_t object;
  uint64_t (**v35)(abm::data::DataPowerSave *__hidden);
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  _QWORD aBlock[6];
  std::__shared_weak_count *v44;
  void *v45;
  dispatch_object_t v46;
  __int128 v47;

  v2 = capabilities::abs::dataPowerSaveEnabled((capabilities::abs *)this);
  *((_BYTE *)this + 240) = 1;
  *((_BYTE *)this + 241) = v2;
  v3 = (std::__shared_weak_count *)this[16];
  if (!v3 || (v4 = this[15], (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  v45 = (void *)0xAAAAAAAAAAAAAAAALL;
  v46 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10DataModule27configureDataPowerSave_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_20_1;
  aBlock[4] = this;
  aBlock[5] = v4;
  v44 = v6;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  v12 = _Block_copy(aBlock);
  v13 = this[17];
  if (v13)
    dispatch_retain(this[17]);
  v45 = v12;
  v46 = v13;
  v41 = 0xAAAAAAAAAAAAAAAALL;
  v42 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v14 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v15 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v14);
    v16 = v47;
    v47 = 0uLL;
    v17 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v16;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
    if (*((_QWORD *)&v47 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v15 = off_1ED70FD08;
  }
  v23 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  v37 = v15;
  v38 = *(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v24 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v15 + 96))(&v39, v15);
  v41 = 0;
  v42 = 0;
  if (v40)
  {
    v42 = std::__shared_weak_count::lock(v40);
    if (v42)
      v41 = v39;
    if (v40)
      std::__shared_weak_count::__release_weak(v40);
  }
  if (!v23)
    goto LABEL_37;
  v26 = (unint64_t *)&v23->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    v28 = v41;
    if (!v41)
      goto LABEL_46;
  }
  else
  {
LABEL_37:
    v28 = v41;
    if (!v41)
      goto LABEL_46;
  }
  v36 = *((_WORD *)this + 120);
  v35 = &off_1E78FBFC8;
  v29 = v45;
  if (v45)
    v29 = _Block_copy(v45);
  v33 = v29;
  object = v46;
  if (v46)
    dispatch_retain(v46);
  (*(void (**)(unint64_t, uint64_t (***)(abm::data::DataPowerSave *__hidden), void **))(*(_QWORD *)v28 + 88))(v28, &v35, &v33);
  if (object)
    dispatch_release(object);
  if (v33)
    _Block_release(v33);
LABEL_46:
  v30 = v42;
  if (v42)
  {
    v31 = (unint64_t *)&v42->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v46)
    dispatch_release(v46);
  if (v45)
    _Block_release(v45);
  if (v44)
    std::__shared_weak_count::__release_weak(v44);
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1BF417F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  std::__shared_weak_count *v26;
  uint64_t v27;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v27 - 64);
  if (a26)
    std::__shared_weak_count::__release_weak(a26);
  std::__shared_weak_count::__release_weak(v26);
  _Unwind_Resume(a1);
}

void DataModule::configureCapabilities_sync(DataModule *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  NSObject *v12;
  CommandDriverFactory *v13;
  uint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  dispatch_object_t object;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  _QWORD aBlock[6];
  std::__shared_weak_count *v41;
  void *v42;
  dispatch_object_t v43;
  __int128 v44;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v2 || (v3 = *((_QWORD *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v42 = (void *)0xAAAAAAAAAAAAAAAALL;
  v43 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10DataModule26configureCapabilities_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_21_2;
  aBlock[4] = this;
  aBlock[5] = v3;
  v41 = v5;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  v11 = _Block_copy(aBlock);
  v12 = *((_QWORD *)this + 17);
  if (v12)
    dispatch_retain(v12);
  v42 = v11;
  v43 = v12;
  v38 = 0xAAAAAAAAAAAAAAAALL;
  v39 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v13 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v14 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v13);
    v15 = v44;
    v44 = 0uLL;
    v16 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v15;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
    if (*((_QWORD *)&v44 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v14 = off_1ED70FD08;
  }
  v22 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  v34 = v14;
  v35 = *(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v23 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v14 + 96))(&v36, v14);
  v38 = 0;
  v39 = 0;
  if (v37)
  {
    v39 = std::__shared_weak_count::lock(v37);
    if (v39)
      v38 = v36;
    if (v37)
      std::__shared_weak_count::__release_weak(v37);
  }
  if (!v22)
    goto LABEL_37;
  v25 = (unint64_t *)&v22->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    v27 = v38;
    if (!v38)
      goto LABEL_46;
  }
  else
  {
LABEL_37:
    v27 = v38;
    if (!v38)
      goto LABEL_46;
  }
  v28 = v42;
  if (v42)
    v28 = _Block_copy(v42);
  v32 = v28;
  object = v43;
  if (v43)
    dispatch_retain(v43);
  (*(void (**)(unint64_t, void **))(*(_QWORD *)v27 + 96))(v27, &v32);
  if (object)
    dispatch_release(object);
  if (v32)
    _Block_release(v32);
LABEL_46:
  v29 = v39;
  if (v39)
  {
    v30 = (unint64_t *)&v39->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v43)
    dispatch_release(v43);
  if (v42)
    _Block_release(v42);
  if (v41)
    std::__shared_weak_count::__release_weak(v41);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF418284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  std::__shared_weak_count *v24;
  uint64_t v25;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v25 - 64);
  if (a24)
    std::__shared_weak_count::__release_weak(a24);
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void DataModule::configureLowLatencyCapability_sync(DataModule *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  NSObject *v12;
  CommandDriverFactory *v13;
  uint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  dispatch_object_t object;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  _QWORD aBlock[6];
  std::__shared_weak_count *v41;
  void *v42;
  dispatch_object_t v43;
  __int128 v44;

  if (!capabilities::radio::supportsLowLatencyData(this))
    return;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v2 || (v3 = *((_QWORD *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v42 = (void *)0xAAAAAAAAAAAAAAAALL;
  v43 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10DataModule34configureLowLatencyCapability_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_22_1;
  aBlock[4] = this;
  aBlock[5] = v3;
  v41 = v5;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  v11 = _Block_copy(aBlock);
  v12 = *((_QWORD *)this + 17);
  if (v12)
    dispatch_retain(v12);
  v42 = v11;
  v43 = v12;
  v38 = 0xAAAAAAAAAAAAAAAALL;
  v39 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v13 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v14 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v13);
    v15 = v44;
    v44 = 0uLL;
    v16 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v15;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
    if (*((_QWORD *)&v44 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v14 = off_1ED70FD08;
  }
  v22 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  v34 = v14;
  v35 = *(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v23 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v14 + 96))(&v36, v14);
  v38 = 0;
  v39 = 0;
  if (v37)
  {
    v39 = std::__shared_weak_count::lock(v37);
    if (v39)
      v38 = v36;
    if (v37)
      std::__shared_weak_count::__release_weak(v37);
  }
  if (!v22)
    goto LABEL_38;
  v25 = (unint64_t *)&v22->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    v27 = v38;
    if (v38)
      goto LABEL_39;
  }
  else
  {
LABEL_38:
    v27 = v38;
    if (v38)
    {
LABEL_39:
      v28 = v42;
      if (v42)
        v28 = _Block_copy(v42);
      v32 = v28;
      object = v43;
      if (v43)
        dispatch_retain(v43);
      (*(void (**)(unint64_t, void **))(*(_QWORD *)v27 + 104))(v27, &v32);
      if (object)
        dispatch_release(object);
      if (v32)
        _Block_release(v32);
    }
  }
  v29 = v39;
  if (v39)
  {
    v30 = (unint64_t *)&v39->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v43)
    dispatch_release(v43);
  if (v42)
    _Block_release(v42);
  if (v41)
    std::__shared_weak_count::__release_weak(v41);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF41860C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  std::__shared_weak_count *v24;
  uint64_t v25;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v25 - 64);
  if (a24)
    std::__shared_weak_count::__release_weak(a24);
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void DataModule::configureLLDataFormat_sync(DataModule *this)
{
  capabilities::abs *v2;
  capabilities::abs *v3;
  unsigned int v4;
  capabilities::abs *v5;
  int v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  NSObject *v21;
  CommandDriverFactory *v22;
  uint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  capabilities::abs *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void *v44;
  dispatch_object_t object;
  uint64_t (**v46)(abm::data::DataAggregationProtocol *__hidden);
  BOOL v47;
  int v48;
  uint64_t (**v49)(abm::data::DataAggregationMaxDatagrams *__hidden);
  char v50;
  int v51;
  uint64_t (**v52)(abm::data::DataAggregationMaxSize *__hidden);
  char v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  _QWORD aBlock[6];
  std::__shared_weak_count *v62;
  void *v63;
  dispatch_object_t v64;
  __int128 v65;

  v2 = (capabilities::abs *)capabilities::radio::supportsLowLatencyData(this);
  if ((_DWORD)v2)
  {
    v3 = (capabilities::abs *)capabilities::abs::dataAggregationProtocol(v2);
    v4 = v3;
    v5 = (capabilities::abs *)capabilities::abs::LLDataAggregationDatagramMaxCount(v3);
    v6 = (int)v5;
    v7 = capabilities::abs::LLDataAggregationMaxSizeBytes(v5);
    v8 = v7;
    v9 = v4 < 3;
    if (v4 >= 3)
      v10 = 3;
    else
      v10 = v4;
    *((_BYTE *)this + 176) = v9;
    *((_DWORD *)this + 45) = v10;
    *((_BYTE *)this + 256) = 1;
    *((_DWORD *)this + 65) = v6;
    *((_BYTE *)this + 272) = 1;
    *((_DWORD *)this + 69) = v7;
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v11 || (v12 = *((_QWORD *)this + 15), (v13 = std::__shared_weak_count::lock(v11)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v14 = v13;
    p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v14);
    }
    v63 = (void *)0xAAAAAAAAAAAAAAAALL;
    v64 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN10DataModule26configureLLDataFormat_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_18_5;
    aBlock[4] = this;
    aBlock[5] = v12;
    v62 = v14;
    do
      v19 = __ldxr(p_shared_weak_owners);
    while (__stxr(v19 + 1, p_shared_weak_owners));
    v20 = _Block_copy(aBlock);
    v21 = *((_QWORD *)this + 17);
    if (v21)
      dispatch_retain(v21);
    v63 = v20;
    v64 = v21;
    v59 = 0xAAAAAAAAAAAAAAAALL;
    v60 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
    v22 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    v23 = off_1ED70FD08;
    if (!off_1ED70FD08)
    {
      CommandDriverFactory::create_default_global(v22);
      v24 = v65;
      v65 = 0uLL;
      v25 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
      off_1ED70FD08 = v24;
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v28 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
      if (*((_QWORD *)&v65 + 1))
      {
        v29 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v23 = off_1ED70FD08;
    }
    v31 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    v55 = v23;
    v56 = *(&off_1ED70FD08 + 1);
    if (*(&off_1ED70FD08 + 1))
    {
      v32 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v23 + 96))(&v57, v23);
    v59 = 0;
    v60 = 0;
    v34 = (capabilities::abs *)v58;
    if (v58)
    {
      v60 = std::__shared_weak_count::lock(v58);
      if (v60)
        v59 = v57;
      v34 = (capabilities::abs *)v58;
      if (v58)
        std::__shared_weak_count::__release_weak(v58);
    }
    if (v31)
    {
      v35 = (unint64_t *)&v31->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v37 = capabilities::abs::LLDataInterfaceID(v34);
    v38 = v59;
    if (v59)
    {
      v39 = v37;
      v47 = v9;
      v46 = &off_1E78FBEA8;
      v48 = v10;
      v50 = 1;
      v49 = &off_1E78FBEF0;
      v51 = v6;
      v53 = 1;
      v52 = &off_1E78FBF38;
      v54 = v8;
      v40 = v63;
      if (v63)
        v40 = _Block_copy(v63);
      v44 = v40;
      object = v64;
      if (v64)
        dispatch_retain(v64);
      (*(void (**)(unint64_t, uint64_t (***)(abm::data::DataAggregationProtocol *__hidden), uint64_t, void **))(*(_QWORD *)v38 + 72))(v38, &v46, v39, &v44);
      if (object)
        dispatch_release(object);
      if (v44)
        _Block_release(v44);
    }
    v41 = v60;
    if (v60)
    {
      v42 = (unint64_t *)&v60->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    if (v64)
      dispatch_release(v64);
    if (v63)
      _Block_release(v63);
    if (v62)
      std::__shared_weak_count::__release_weak(v62);
    std::__shared_weak_count::__release_weak(v14);
  }
}

void sub_1BF418A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30)
{
  std::__shared_weak_count *v30;
  uint64_t v31;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v31 - 112);
  if (a30)
    std::__shared_weak_count::__release_weak(a30);
  std::__shared_weak_count::__release_weak(v30);
  _Unwind_Resume(a1);
}

void ___ZN10DataModule24configureDataFormat_syncEv_block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *a2;
        v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        if (!*a2)
          v9 = 0;
        v10 = *(NSObject **)(v5 + 88);
        if (v9)
        {
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            v13 = 138412290;
            v14 = v8;
            _os_log_error_impl(&dword_1BF335000, v10, OS_LOG_TYPE_ERROR, "Failed setting DataFormat: %@", (uint8_t *)&v13, 0xCu);
          }
        }
        else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v13) = 0;
          _os_log_impl(&dword_1BF335000, v10, OS_LOG_TYPE_DEFAULT, "#I Success setting DataFormat", (uint8_t *)&v13, 2u);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void ___ZN10DataModule26configureLLDataFormat_syncEv_block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *a2;
        v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        if (!*a2)
          v9 = 0;
        v10 = *(NSObject **)(v5 + 88);
        if (v9)
        {
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            v13 = 138412290;
            v14 = v8;
            _os_log_error_impl(&dword_1BF335000, v10, OS_LOG_TYPE_ERROR, "Failed setting Low Latency DataFormat: %@", (uint8_t *)&v13, 0xCu);
          }
        }
        else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v13) = 0;
          _os_log_impl(&dword_1BF335000, v10, OS_LOG_TYPE_DEFAULT, "#I Success setting Low Latency DataFormat", (uint8_t *)&v13, 2u);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void ___ZN10DataModule26configureQMAPSettings_syncEv_block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *a2;
        v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        if (!*a2)
          v9 = 0;
        v10 = *(NSObject **)(v5 + 88);
        if (v9)
        {
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            v13 = 138412290;
            v14 = v8;
            _os_log_error_impl(&dword_1BF335000, v10, OS_LOG_TYPE_ERROR, "Failed setting QMAPSettings: %@", (uint8_t *)&v13, 0xCu);
          }
        }
        else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v13) = 0;
          _os_log_impl(&dword_1BF335000, v10, OS_LOG_TYPE_DEFAULT, "#I Success setting QMAPSettings", (uint8_t *)&v13, 2u);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void ___ZN10DataModule27configureDataPowerSave_syncEv_block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *a2;
        v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        if (!*a2)
          v9 = 0;
        v10 = *(NSObject **)(v5 + 88);
        if (v9)
        {
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            v13 = 138412290;
            v14 = v8;
            _os_log_error_impl(&dword_1BF335000, v10, OS_LOG_TYPE_ERROR, "Failed setting DataPowerSave: %@", (uint8_t *)&v13, 0xCu);
          }
        }
        else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v13) = 0;
          _os_log_impl(&dword_1BF335000, v10, OS_LOG_TYPE_DEFAULT, "#I Success setting DataPowerSave", (uint8_t *)&v13, 2u);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void ___ZN10DataModule26configureCapabilities_syncEv_block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *a2;
        v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        if (!*a2)
          v9 = 0;
        v10 = *(NSObject **)(v5 + 88);
        if (v9)
        {
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            v13 = 138412290;
            v14 = v8;
            _os_log_error_impl(&dword_1BF335000, v10, OS_LOG_TYPE_ERROR, "Failed setting Capabilities: %@", (uint8_t *)&v13, 0xCu);
          }
        }
        else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v13) = 0;
          _os_log_impl(&dword_1BF335000, v10, OS_LOG_TYPE_DEFAULT, "#I Success setting Capabilities", (uint8_t *)&v13, 2u);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void ___ZN10DataModule34configureLowLatencyCapability_syncEv_block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *a2;
        v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        if (!*a2)
          v9 = 0;
        v10 = *(NSObject **)(v5 + 88);
        if (v9)
        {
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            v13 = 138412290;
            v14 = v8;
            _os_log_error_impl(&dword_1BF335000, v10, OS_LOG_TYPE_ERROR, "Failed setting low latency Capability: %@", (uint8_t *)&v13, 0xCu);
          }
        }
        else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v13) = 0;
          _os_log_impl(&dword_1BF335000, v10, OS_LOG_TYPE_DEFAULT, "#I Success setting low latency Capability", (uint8_t *)&v13, 2u);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void ___ZN10DataModule20getDataProperty_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  xpc_object_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t (*v11)(uint64_t);
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  xpc_object_t v15;
  char *v16;
  xpc_object_t v17;
  xpc_object_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  char *DataPropertyNameFromDict;
  uint64_t v22;
  char *v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  std::__shared_weak_count *v28;
  xpc_object_t object;
  unsigned int v30;
  uint8_t buf[4];
  char *v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 32);
  v30 = 0;
  v7 = xpc_null_create();
  object = v7;
  v8 = *(std::__shared_weak_count **)(a1 + 48);
  if (v8)
  {
    v9 = std::__shared_weak_count::lock(v8);
    v28 = v9;
    if (v9)
    {
      v10 = v9;
      if (*(_QWORD *)(a1 + 40))
      {
        if (*a2)
          v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v11 = 0;
        if (v11)
        {
          v12 = *(NSObject **)(v6 + 88);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            xpc::dict::dict((xpc::dict *)&v26, (void **)(a1 + 56));
            DataPropertyNameFromDict = abm::data::getDataPropertyNameFromDict(&v26);
            v22 = *a2;
            *(_DWORD *)buf = 136315394;
            v32 = DataPropertyNameFromDict;
            v33 = 2112;
            v34 = v22;
            _os_log_error_impl(&dword_1BF335000, v12, OS_LOG_TYPE_ERROR, "Failed getting %s: %@", buf, 0x16u);
            xpc_release(v26);
            v26 = 0;
          }
          v30 = -534716414;
        }
        else
        {
          v13 = MEMORY[0x1C3B8A86C](*a3);
          v14 = *(NSObject **)(v6 + 88);
          if (v13 == MEMORY[0x1E0C81350])
          {
            if (os_log_type_enabled(*(os_log_t *)(v6 + 88), OS_LOG_TYPE_ERROR))
            {
              xpc::dict::dict((xpc::dict *)&v24, (void **)(a1 + 56));
              v23 = abm::data::getDataPropertyNameFromDict(&v24);
              *(_DWORD *)buf = 136315138;
              v32 = v23;
              _os_log_error_impl(&dword_1BF335000, v14, OS_LOG_TYPE_ERROR, "Failed getting %s: invalid response data", buf, 0xCu);
              xpc_release(v24);
              v24 = 0;
            }
            v30 = -534716416;
          }
          else
          {
            if (os_log_type_enabled(*(os_log_t *)(v6 + 88), OS_LOG_TYPE_DEFAULT))
            {
              v15 = *(xpc_object_t *)(a1 + 56);
              v25 = v15;
              if (v15)
              {
                xpc_retain(v15);
              }
              else
              {
                v15 = xpc_null_create();
                v25 = v15;
              }
              v16 = abm::data::getDataPropertyNameFromDict(&v25);
              *(_DWORD *)buf = 136315138;
              v32 = v16;
              _os_log_impl(&dword_1BF335000, v14, OS_LOG_TYPE_DEFAULT, "#I Success getting %s", buf, 0xCu);
              xpc_release(v15);
              v25 = 0;
            }
            v17 = (xpc_object_t)*a3;
            if (v17 && MEMORY[0x1C3B8A86C](v17) == MEMORY[0x1E0C812F8])
              xpc_retain(v17);
            else
              v17 = xpc_null_create();
            v18 = xpc_null_create();
            object = v17;
            xpc_release(v7);
            xpc_release(v18);
          }
        }
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 64), &v30, &object);
      }
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  xpc_release(object);
}

void sub_1BF419544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, uint64_t a11, xpc_object_t a12, char a13, uint64_t a14, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void *__copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10DataModuleEE56c15_ZTSN3xpc4dictE64c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  void *result;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (void *)a2[7];
  a1[7] = v7;
  if (v7)
  {
    xpc_retain(v7);
    result = (void *)a2[8];
    if (!result)
      goto LABEL_9;
    goto LABEL_8;
  }
  a1[7] = xpc_null_create();
  result = (void *)a2[8];
  if (result)
LABEL_8:
    result = _Block_copy(result);
LABEL_9:
  a1[8] = result;
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10DataModuleEE56c15_ZTSN3xpc4dictE64c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 64);
  if (v2)
    _Block_release(v2);
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(_QWORD *)(a1 + 56) = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

uint64_t dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,xpc::object)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t ctu::Loggable<DataModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<DataModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<DataModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<DataModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7904488;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<DataModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7904488;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__shared_ptr_pointer<DataModule *,std::shared_ptr<DataModule> ctu::SharedSynchronizable<DataModule>::make_shared_ptr<DataModule>(DataModule*)::{lambda(DataModule *)#1},std::allocator<DataModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<DataModule *,std::shared_ptr<DataModule> ctu::SharedSynchronizable<DataModule>::make_shared_ptr<DataModule>(DataModule*)::{lambda(DataModule *)#1},std::allocator<DataModule>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<DataModule> ctu::SharedSynchronizable<DataModule>::make_shared_ptr<DataModule>(DataModule*)::{lambda(DataModule*)#1}::operator() const(DataModule*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<DataModule *,std::shared_ptr<DataModule> ctu::SharedSynchronizable<DataModule>::make_shared_ptr<DataModule>(DataModule*)::{lambda(DataModule *)#1},std::allocator<DataModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI10DataModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI10DataModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI10DataModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI10DataModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<DataModule> ctu::SharedSynchronizable<DataModule>::make_shared_ptr<DataModule>(DataModule*)::{lambda(DataModule*)#1}::operator() const(DataModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *ctu::SharedLoggable<DataModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7904488;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<DataModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7904488;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void ctu::SharedSynchronizable<DataModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI10DataModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E7904570;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI10DataModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10DataModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10DataModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void dispatch::async<void ctu::SharedSynchronizable<DataModule>::execute_wrapped<DataModule::initialize(dispatch::group_session)::$_0>(DataModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<DataModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<DataModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  std::__shared_weak_count ***v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(std::__shared_weak_count ****)a1;
  DataModule::finishInitialization_sync(**(std::__shared_weak_count ****)a1);
  operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete((void *)a1);
  }
  else
  {
LABEL_5:
    operator delete((void *)a1);
  }
}

void sub_1BF419BB0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_26()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1BF335000);
  }
  return result;
}

uint64_t __cxx_global_var_init_27_0()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1BF335000);
  }
  return result;
}

void ABMServerFactory::create(uint64_t *a1@<X8>)
{
  _ZNSt3__115allocate_sharedB8ne180100I16ABMServerFactoryNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(a1);
}

void ABMServerFactory::ABMServerFactory(ABMServerFactory *this)
{
  _QWORD *v1;

  Factory::Factory(this);
  *v1 = &off_1E79045B0;
}

{
  _QWORD *v1;

  Factory::Factory(this);
  *v1 = &off_1E79045B0;
}

void ABMServerFactory::~ABMServerFactory(ABMServerFactory *this)
{
  void *v1;

  Factory::~Factory(this);
  operator delete(v1);
}

void ABMServerFactory::createServiceManager(uint64_t *a1@<X1>, _OWORD *a2@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  __n128 v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8[2];

  v2 = (std::__shared_weak_count *)a1[1];
  v8[0] = *a1;
  v8[1] = (uint64_t)v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5.n128_f64[0] = ABMServiceManager::create(v8, a2);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v2->__on_zero_shared)(v2, v5);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF419D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double ABMServerFactory::createBBServerConnection@<D0>(_OWORD *a1@<X8>)
{
  double result;
  double v4[3];

  _ZNSt3__115allocate_sharedB8ne180100I19QMIServerConnectionNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((uint64_t *)v4);
  result = v4[0];
  *a1 = *(_OWORD *)v4;
  return result;
}

void ABMServerFactory::createRouterServer(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void _ZNSt3__115allocate_sharedB8ne180100I16ABMServerFactoryNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(uint64_t *a1@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  uint64_t v4;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;

  v2 = (std::__shared_weak_count *)operator new(0x30uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)off_1E7904600;
  Factory::Factory((Factory *)&v2[1]);
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E79045B0;
  *a1 = v4;
  a1[1] = (uint64_t)v2;
  shared_weak_owners = (std::__shared_weak_count *)v2[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      return;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    v2[1].__shared_owners_ = v4;
    v2[1].__shared_weak_owners_ = (uint64_t)v2;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v10 = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v2[1].__shared_owners_ = v4;
    v2[1].__shared_weak_owners_ = (uint64_t)v2;
  }
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1BF419ED0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ABMServerFactory>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E7904600;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ABMServerFactory>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E7904600;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<ABMServerFactory>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 24))(a1 + 24);
}

void _ZNSt3__115allocate_sharedB8ne180100I19QMIServerConnectionNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(uint64_t *a1@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  uint64_t v4;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;

  v2 = (std::__shared_weak_count *)operator new(0x90uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E7904650;
  v4 = MEMORY[0x1C3B88EE0](&v2[1]);
  *a1 = v4;
  a1[1] = (uint64_t)v2;
  shared_weak_owners = (std::__shared_weak_count *)v2[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      return;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    v2[1].__shared_owners_ = v4;
    v2[1].__shared_weak_owners_ = (uint64_t)v2;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v10 = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v2[1].__shared_owners_ = v4;
    v2[1].__shared_weak_owners_ = (uint64_t)v2;
  }
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1BF41A024(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QMIServerConnection>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E7904650;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIServerConnection>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E7904650;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<QMIServerConnection>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

const char *AccessorySimulatorDelegate::getName(AccessorySimulatorDelegate *this)
{
  return "AccessorySimulator.delegate";
}

uint64_t AccessorySimulatorDelegate::create@<X0>(_QWORD *a1@<X0>, NSObject **a2@<X1>, std::__shared_weak_count_vtbl **a3@<X8>)
{
  std::__shared_weak_count_vtbl *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *on_zero_shared;
  unint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;
  NSObject *v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  _QWORD v27[3];
  _QWORD *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v25 = 0;
  v26 = 0;
  v6 = (std::__shared_weak_count_vtbl *)operator new(0x80uLL);
  v7 = a1[3];
  if (!v7)
    goto LABEL_4;
  if ((_QWORD *)v7 != a1)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
LABEL_4:
    v28 = (_QWORD *)v7;
    goto LABEL_6;
  }
  v28 = v27;
  (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v27);
LABEL_6:
  v8 = *a2;
  v24 = v8;
  if (v8)
    dispatch_retain(v8);
  AccessorySimulatorDelegate::AccessorySimulatorDelegate((uint64_t)v6, v27, &v24);
  v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  v11->__vftable = (std::__shared_weak_count_vtbl *)off_1E7904798;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = v6;
  on_zero_shared = (std::__shared_weak_count *)v6->__on_zero_shared;
  if (on_zero_shared)
  {
    if (on_zero_shared->__shared_owners_ != -1)
      goto LABEL_21;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
    v6->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
    std::__shared_weak_count::__release_weak(on_zero_shared);
  }
  else
  {
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    v18 = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    v6->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
  }
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v25 = v6;
  v26 = v11;
  if (v8)
    dispatch_release(v8);
  v21 = v28;
  if (v28 == v27)
  {
    v22 = 4;
    v21 = v27;
    goto LABEL_27;
  }
  if (v28)
  {
    v22 = 5;
LABEL_27:
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v21 + 8 * v22))(v21, v9, v10);
  }
  result = (*((uint64_t (**)(std::__shared_weak_count_vtbl *))v6->~__shared_weak_count + 7))(v6);
  *a3 = v6;
  a3[1] = (std::__shared_weak_count_vtbl *)v11;
  return result;
}

void sub_1BF41A27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;

  operator delete(v15);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t AccessorySimulatorDelegate::AccessorySimulatorDelegate(uint64_t a1, _QWORD *a2, NSObject **a3)
{
  _QWORD *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E79046A0;
  v5 = (_QWORD *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      v13 = v12;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v12);
    }
    else
    {
      v13 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    }
  }
  else
  {
    v13 = 0;
  }
  v6 = *a3;
  if (v6)
    dispatch_retain(v6);
  v7 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
    dispatch_retain(v6);
  *(_QWORD *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 40), "com.apple.telephony.abm", v7);
  *(_QWORD *)a1 = off_1E79048A8;
  v8 = (uint64_t)v13;
  if (!v13)
    goto LABEL_13;
  if (v13 != v12)
  {
    v8 = (*(uint64_t (**)(void))(*v13 + 16))();
LABEL_13:
    *(_QWORD *)(a1 + 72) = v8;
    goto LABEL_15;
  }
  *(_QWORD *)(a1 + 72) = a1 + 48;
  (*(void (**)(_QWORD *))(v12[0] + 24))(v12);
LABEL_15:
  *(_BYTE *)(a1 + 80) = 0;
  if (v6)
    dispatch_release(v6);
  v9 = v13;
  if (v13 == v12)
  {
    v10 = 4;
    v9 = v12;
    goto LABEL_21;
  }
  if (v13)
  {
    v10 = 5;
LABEL_21:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  *(_QWORD *)a1 = off_1E79046A0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  return a1;
}

void sub_1BF41A508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  NSObject *v13;
  _QWORD *v14;

  ctu::SharedLoggable<AccessoriesDelegateBase,ctu::OsLogLogger>::~SharedLoggable(v14);
  if (v13)
    dispatch_release(v13);
  if (a13 == &a10)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(a1);
  }
  if (!a13)
    _Unwind_Resume(a1);
  (*(void (**)(void))(*a13 + 40))();
  _Unwind_Resume(a1);
}

void AccessorySimulatorDelegate::~AccessorySimulatorDelegate(AccessorySimulatorDelegate *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  AccessorySimulatorDelegate *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;

  *(_QWORD *)this = off_1E79046A0;
  v2 = (_QWORD *)*((_QWORD *)this + 13);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
    operator delete(v4);
  *(_QWORD *)this = off_1E79048A8;
  v5 = (AccessorySimulatorDelegate *)*((_QWORD *)this + 9);
  if (v5 == (AccessorySimulatorDelegate *)((char *)this + 48))
  {
    v6 = 4;
    v5 = (AccessorySimulatorDelegate *)((char *)this + 48);
  }
  else
  {
    if (!v5)
      goto LABEL_10;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_10:
  MEMORY[0x1C3B89240]((char *)this + 40);
  v7 = *((_QWORD *)this + 4);
  if (v7)
    dispatch_release(v7);
  v8 = *((_QWORD *)this + 3);
  if (v8)
    dispatch_release(v8);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  AccessorySimulatorDelegate *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;

  *(_QWORD *)this = off_1E79046A0;
  v2 = (_QWORD *)*((_QWORD *)this + 13);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
    operator delete(v4);
  *(_QWORD *)this = off_1E79048A8;
  v5 = (AccessorySimulatorDelegate *)*((_QWORD *)this + 9);
  if (v5 == (AccessorySimulatorDelegate *)((char *)this + 48))
  {
    v6 = 4;
    v5 = (AccessorySimulatorDelegate *)((char *)this + 48);
  }
  else
  {
    if (!v5)
      goto LABEL_10;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_10:
  MEMORY[0x1C3B89240]((char *)this + 40);
  v7 = *((_QWORD *)this + 4);
  if (v7)
    dispatch_release(v7);
  v8 = *((_QWORD *)this + 3);
  if (v8)
    dispatch_release(v8);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  AccessorySimulatorDelegate *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;

  *(_QWORD *)this = off_1E79046A0;
  v2 = (_QWORD *)*((_QWORD *)this + 13);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
    operator delete(v4);
  *(_QWORD *)this = off_1E79048A8;
  v5 = (AccessorySimulatorDelegate *)*((_QWORD *)this + 9);
  if (v5 == (AccessorySimulatorDelegate *)((char *)this + 48))
  {
    v6 = 4;
    v5 = (AccessorySimulatorDelegate *)((char *)this + 48);
  }
  else
  {
    if (!v5)
      goto LABEL_10;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_10:
  MEMORY[0x1C3B89240]((char *)this + 40);
  v7 = *((_QWORD *)this + 4);
  if (v7)
    dispatch_release(v7);
  v8 = *((_QWORD *)this + 3);
  if (v8)
    dispatch_release(v8);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  operator delete(this);
}

uint64_t AccessorySimulatorDelegate::handleServerCommand(uint64_t a1, unsigned __int8 *a2, void **a3)
{
  const void *v6;
  size_t v7;
  size_t v8;
  void **p_dst;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  int v16;
  void **v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  char v25;
  void *v26;
  const void *v27;
  size_t v28;
  size_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  int v37;
  void **v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  char v44;
  _QWORD v46[5];
  _QWORD v47[5];
  xpc_object_t object;
  void **__dst;
  size_t v50;
  int64_t v51;

  v6 = (const void *)*MEMORY[0x1E0CFC040];
  v7 = strlen((const char *)*MEMORY[0x1E0CFC040]);
  if (v7 > 0x7FFFFFFFFFFFFFF7)
LABEL_71:
    std::string::__throw_length_error[abi:ne180100]();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    v50 = v8;
    v51 = v11 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v51) = v7;
  p_dst = (void **)&__dst;
  if (v7)
LABEL_8:
    memmove(p_dst, v6, v8);
  v12 = 0;
  *((_BYTE *)p_dst + v8) = 0;
  v13 = a2[23];
  if ((v13 & 0x80u) == 0)
    v14 = a2[23];
  else
    v14 = *((_QWORD *)a2 + 1);
  v15 = HIBYTE(v51);
  v16 = SHIBYTE(v51);
  if (v51 < 0)
    v15 = v50;
  if (v14 != v15)
  {
LABEL_28:
    if ((v16 & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_32;
  }
  if (v51 >= 0)
    v17 = (void **)&__dst;
  else
    v17 = __dst;
  if ((v13 & 0x80) != 0)
  {
    v12 = memcmp(*(const void **)a2, v17, *((_QWORD *)a2 + 1)) == 0;
    goto LABEL_28;
  }
  if (a2[23])
  {
    v18 = v13 - 1;
    v19 = a2;
    do
    {
      v21 = *v19++;
      v20 = v21;
      v23 = *(unsigned __int8 *)v17;
      v17 = (void **)((char *)v17 + 1);
      v22 = v23;
      v24 = v18-- != 0;
      v25 = v24;
      v12 = v20 == v22;
    }
    while (v20 == v22 && (v25 & 1) != 0);
    goto LABEL_28;
  }
  v12 = 1;
  if ((SHIBYTE(v51) & 0x80000000) == 0)
  {
LABEL_29:
    if (!v12)
      goto LABEL_37;
    goto LABEL_33;
  }
LABEL_32:
  operator delete(__dst);
  if (!v12)
    goto LABEL_37;
LABEL_33:
  v47[0] = MEMORY[0x1E0C809B0];
  v47[1] = 1174405120;
  v47[2] = ___ZN26AccessorySimulatorDelegate19handleServerCommandENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictE_block_invoke;
  v47[3] = &__block_descriptor_tmp_19;
  v26 = *a3;
  v47[4] = a1;
  object = v26;
  if (v26)
    xpc_retain(v26);
  else
    object = xpc_null_create();
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v47);
  xpc_release(object);
  object = 0;
LABEL_37:
  v27 = (const void *)*MEMORY[0x1E0CFC008];
  v28 = strlen((const char *)*MEMORY[0x1E0CFC008]);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_71;
  v29 = v28;
  if (v28 >= 0x17)
  {
    v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v31 = v28 | 7;
    v32 = v31 + 1;
    v30 = (void **)operator new(v31 + 1);
    v50 = v29;
    v51 = v32 | 0x8000000000000000;
    __dst = v30;
    goto LABEL_44;
  }
  HIBYTE(v51) = v28;
  v30 = (void **)&__dst;
  if (v28)
LABEL_44:
    memmove(v30, v27, v29);
  v33 = 0;
  *((_BYTE *)v30 + v29) = 0;
  v34 = a2[23];
  if ((v34 & 0x80u) == 0)
    v35 = a2[23];
  else
    v35 = *((_QWORD *)a2 + 1);
  v36 = HIBYTE(v51);
  v37 = SHIBYTE(v51);
  if (v51 < 0)
    v36 = v50;
  if (v35 != v36)
  {
LABEL_64:
    if ((v37 & 0x80000000) == 0)
      goto LABEL_65;
LABEL_69:
    operator delete(__dst);
    if (!v33)
      return v12;
    goto LABEL_66;
  }
  if (v51 >= 0)
    v38 = (void **)&__dst;
  else
    v38 = __dst;
  if ((v34 & 0x80) != 0)
  {
    v33 = memcmp(*(const void **)a2, v38, *((_QWORD *)a2 + 1)) == 0;
    goto LABEL_64;
  }
  if (a2[23])
  {
    v39 = v34 - 1;
    do
    {
      v41 = *a2++;
      v40 = v41;
      v43 = *(unsigned __int8 *)v38;
      v38 = (void **)((char *)v38 + 1);
      v42 = v43;
      v24 = v39-- != 0;
      v44 = v24;
      v33 = v40 == v42;
    }
    while (v40 == v42 && (v44 & 1) != 0);
    goto LABEL_64;
  }
  v33 = 1;
  if (SHIBYTE(v51) < 0)
    goto LABEL_69;
LABEL_65:
  if (v33)
  {
LABEL_66:
    v46[0] = MEMORY[0x1E0C809B0];
    v46[1] = 0x40000000;
    v46[2] = ___ZN26AccessorySimulatorDelegate19handleServerCommandENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictE_block_invoke_3;
    v46[3] = &__block_descriptor_tmp_4_0;
    v46[4] = a1;
    ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v46);
    return 1;
  }
  return v12;
}

void ___ZN26AccessorySimulatorDelegate19handleServerCommandENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictE_block_invoke(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t ***v13;
  uint64_t **v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  CFTypeRef v18;
  void **v19;
  unsigned __int16 *v20;
  unint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  uint64_t v25;
  _QWORD *v26;
  _BOOL8 v27;
  unint64_t v28;
  unint64_t v29;
  size_t prime;
  void *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  size_t v36;
  size_t v37;
  size_t v38;
  _QWORD *i;
  size_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint8x8_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  size_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  unint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  void **v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  void *v66;
  char *v67;
  CFTypeRef v68;
  void *__p;
  __int128 v70;
  CFTypeRef cf;
  xpc_object_t object;
  CFTypeRef v73;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(void **)(a1 + 40);
  object = v1;
  v73 = 0;
  if (v1)
    xpc_retain(v1);
  else
    object = xpc_null_create();
  v3 = abm::AccessoryInfo::create();
  v5 = v4;
  xpc_release(object);
  object = 0;
  v6 = (unsigned __int16)v3;
  v7 = *(_QWORD *)(v2 + 96);
  if ((v3 & 0xFFFF0000) != 0x10000)
  {
    if (v7)
    {
      v10 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
      v10.i16[0] = vaddlv_u8(v10);
      if (v10.u32[0] > 1uLL)
      {
        v11 = (unsigned __int16)v3;
        if (v7 <= (unsigned __int16)v3)
          v11 = (unsigned __int16)v3 % v7;
      }
      else
      {
        v11 = ((_DWORD)v7 - 1) & (unsigned __int16)v3;
      }
      v19 = *(void ***)(*(_QWORD *)(v2 + 88) + 8 * v11);
      if (v19)
      {
        v20 = (unsigned __int16 *)*v19;
        if (*v19)
        {
          if (v10.u32[0] < 2uLL)
          {
            while (1)
            {
              v22 = *((_QWORD *)v20 + 1);
              if (v22 == (unsigned __int16)v3)
              {
                if (v20[8] == (unsigned __int16)v3)
                  goto LABEL_121;
              }
              else if ((v22 & (v7 - 1)) != v11)
              {
                goto LABEL_48;
              }
              v20 = *(unsigned __int16 **)v20;
              if (!v20)
                goto LABEL_48;
            }
          }
          do
          {
            v21 = *((_QWORD *)v20 + 1);
            if (v21 == (unsigned __int16)v3)
            {
              if (v20[8] == (unsigned __int16)v3)
                goto LABEL_121;
            }
            else
            {
              if (v21 >= v7)
                v21 %= v7;
              if (v21 != v11)
                break;
            }
            v20 = *(unsigned __int16 **)v20;
          }
          while (v20);
        }
      }
    }
    else
    {
      v11 = 0xAAAAAAAAAAAAAAAALL;
    }
LABEL_48:
    v20 = (unsigned __int16 *)operator new(0x20uLL);
    *(_QWORD *)v20 = 0;
    *((_QWORD *)v20 + 1) = (unsigned __int16)v3;
    v20[8] = v3;
    v20[9] = -1;
    *(_QWORD *)(v20 + 10) = 0;
    v20[14] = 0;
    v23 = (float)(unint64_t)(*(_QWORD *)(v2 + 112) + 1);
    v24 = *(float *)(v2 + 120);
    if (v7 && (float)(v24 * (float)v7) >= v23)
    {
      v25 = *(_QWORD *)(v2 + 88);
      v26 = *(_QWORD **)(v25 + 8 * v11);
      if (v26)
      {
LABEL_51:
        *(_QWORD *)v20 = *v26;
        goto LABEL_119;
      }
LABEL_113:
      *(_QWORD *)v20 = *(_QWORD *)(v2 + 104);
      *(_QWORD *)(v2 + 104) = v20;
      *(_QWORD *)(v25 + 8 * v11) = v2 + 104;
      if (!*(_QWORD *)v20)
      {
LABEL_120:
        ++*(_QWORD *)(v2 + 112);
LABEL_121:
        v18 = 0;
        *(_QWORD *)(v20 + 9) = v3;
        *(_DWORD *)(v20 + 13) = v5;
        goto LABEL_122;
      }
      v52 = *(_QWORD *)(*(_QWORD *)v20 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v52 >= v7)
          v52 %= v7;
      }
      else
      {
        v52 &= v7 - 1;
      }
      v26 = (_QWORD *)(*(_QWORD *)(v2 + 88) + 8 * v52);
LABEL_119:
      *v26 = v20;
      goto LABEL_120;
    }
    v27 = 1;
    if (v7 >= 3)
      v27 = (v7 & (v7 - 1)) != 0;
    v28 = v27 | (2 * v7);
    v29 = vcvtps_u32_f32(v23 / v24);
    if (v28 <= v29)
      prime = v29;
    else
      prime = v28;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(v2 + 96);
    }
    if (prime > v7)
    {
LABEL_62:
      if (prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v31 = operator new(8 * prime);
      v32 = *(void **)(v2 + 88);
      *(_QWORD *)(v2 + 88) = v31;
      if (v32)
        operator delete(v32);
      v33 = 0;
      *(_QWORD *)(v2 + 96) = prime;
      do
        *(_QWORD *)(*(_QWORD *)(v2 + 88) + 8 * v33++) = 0;
      while (prime != v33);
      v35 = v2 + 104;
      v34 = *(_QWORD **)(v2 + 104);
      if (!v34)
        goto LABEL_94;
      v36 = v34[1];
      v37 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v38 = v36 & v37;
        *(_QWORD *)(*(_QWORD *)(v2 + 88) + 8 * v38) = v35;
        for (i = (_QWORD *)*v34; *v34; i = (_QWORD *)*v34)
        {
          v40 = i[1] & v37;
          if (v40 == v38)
          {
            v34 = i;
          }
          else
          {
            v41 = *(_QWORD *)(v2 + 88);
            if (*(_QWORD *)(v41 + 8 * v40))
            {
              *v34 = *i;
              v42 = 8 * v40;
              *i = **(_QWORD **)(*(_QWORD *)(v2 + 88) + v42);
              **(_QWORD **)(*(_QWORD *)(v2 + 88) + v42) = i;
            }
            else
            {
              *(_QWORD *)(v41 + 8 * v40) = v34;
              v34 = i;
              v38 = v40;
            }
          }
        }
        goto LABEL_94;
      }
      if (v36 >= prime)
        v36 %= prime;
      *(_QWORD *)(*(_QWORD *)(v2 + 88) + 8 * v36) = v35;
      v46 = (_QWORD *)*v34;
      if (!*v34)
      {
LABEL_94:
        v7 = prime;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_95;
        goto LABEL_112;
      }
      while (1)
      {
        v48 = v46[1];
        if (v48 >= prime)
          v48 %= prime;
        if (v48 == v36)
          goto LABEL_88;
        v49 = *(_QWORD *)(v2 + 88);
        if (*(_QWORD *)(v49 + 8 * v48))
        {
          *v34 = *v46;
          v47 = 8 * v48;
          *v46 = **(_QWORD **)(*(_QWORD *)(v2 + 88) + v47);
          **(_QWORD **)(*(_QWORD *)(v2 + 88) + v47) = v46;
          v46 = v34;
LABEL_88:
          v34 = v46;
          v46 = (_QWORD *)*v46;
          if (!v46)
            goto LABEL_94;
        }
        else
        {
          *(_QWORD *)(v49 + 8 * v48) = v34;
          v34 = v46;
          v46 = (_QWORD *)*v46;
          v36 = v48;
          if (!v46)
            goto LABEL_94;
        }
      }
    }
    if (prime < v7)
    {
      v43 = vcvtps_u32_f32((float)*(unint64_t *)(v2 + 112) / *(float *)(v2 + 120));
      if (v7 < 3 || (v44 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v44.i16[0] = vaddlv_u8(v44), v44.u32[0] > 1uLL))
      {
        v43 = std::__next_prime(v43);
      }
      else
      {
        v45 = 1 << -(char)__clz(v43 - 1);
        if (v43 >= 2)
          v43 = v45;
      }
      if (prime <= v43)
        prime = v43;
      if (prime < v7)
      {
        if (!prime)
        {
          v51 = *(void **)(v2 + 88);
          *(_QWORD *)(v2 + 88) = 0;
          if (v51)
            operator delete(v51);
          v7 = 0;
          *(_QWORD *)(v2 + 96) = 0;
          goto LABEL_112;
        }
        goto LABEL_62;
      }
      v7 = *(_QWORD *)(v2 + 96);
    }
    if ((v7 & (v7 - 1)) != 0)
    {
LABEL_95:
      if (v7 <= (unsigned __int16)v3)
      {
        v11 = (unsigned __int16)v3 % v7;
        v25 = *(_QWORD *)(v2 + 88);
        v26 = *(_QWORD **)(v25 + 8 * v11);
        if (v26)
          goto LABEL_51;
      }
      else
      {
        v11 = (unsigned __int16)v3;
        v25 = *(_QWORD *)(v2 + 88);
        v26 = *(_QWORD **)(v25 + 8 * (unsigned __int16)v3);
        if (v26)
          goto LABEL_51;
      }
      goto LABEL_113;
    }
LABEL_112:
    v11 = ((_DWORD)v7 - 1) & (unsigned __int16)v3;
    v25 = *(_QWORD *)(v2 + 88);
    v26 = *(_QWORD **)(v25 + 8 * v11);
    if (v26)
      goto LABEL_51;
    goto LABEL_113;
  }
  if (!v7)
    goto LABEL_29;
  v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = (unsigned __int16)v3;
    if (v7 <= (unsigned __int16)v3)
      v9 = (unsigned __int16)v3 % v7;
  }
  else
  {
    v9 = ((_DWORD)v7 - 1) & (unsigned __int16)v3;
  }
  v12 = *(_QWORD *)(v2 + 88);
  v13 = *(uint64_t ****)(v12 + 8 * v9);
  if (!v13 || (v14 = *v13) == 0)
  {
LABEL_29:
    __p = operator new(0x48uLL);
    v70 = xmmword_1BF541F10;
    strcpy((char *)__p, "Invalid AccessoryID, could not find in cached accessory dictionary");
    (*(void (**)(CFTypeRef *__return_ptr, uint64_t, void **, uint64_t))(*(_QWORD *)v2 + 48))(&cf, v2, &__p, 5);
    v18 = cf;
    v73 = cf;
    cf = 0;
    if (SHIBYTE(v70) < 0)
      operator delete(__p);
    goto LABEL_122;
  }
  v15 = v7 - 1;
  if (v8.u32[0] < 2uLL)
  {
    while (1)
    {
      v16 = v14[1];
      if (v16 == (uint64_t *)(unsigned __int16)v3)
      {
        if (*((unsigned __int16 *)v14 + 8) == (unsigned __int16)v3)
          goto LABEL_100;
      }
      else if (((unint64_t)v16 & v15) != v9)
      {
        goto LABEL_29;
      }
      v14 = (uint64_t **)*v14;
      if (!v14)
        goto LABEL_29;
    }
  }
  while (1)
  {
    v17 = (unint64_t)v14[1];
    if (v17 == (unsigned __int16)v3)
      break;
    if (v17 >= v7)
      v17 %= v7;
    if (v17 != v9)
      goto LABEL_29;
LABEL_24:
    v14 = (uint64_t **)*v14;
    if (!v14)
      goto LABEL_29;
  }
  if (*((unsigned __int16 *)v14 + 8) != (unsigned __int16)v3)
    goto LABEL_24;
LABEL_100:
  if (v8.u32[0] > 1uLL)
  {
    v50 = (unsigned __int16)v3;
    if (v7 <= (unsigned __int16)v3)
      v50 = (unsigned __int16)v3 % v7;
  }
  else
  {
    v50 = ((_DWORD)v7 - 1) & (unsigned __int16)v3;
  }
  v55 = *(void ***)(v12 + 8 * v50);
  if (!v55 || (v56 = *v55) == 0)
  {
LABEL_151:
    v18 = 0;
    goto LABEL_122;
  }
  if (v8.u32[0] < 2uLL)
  {
    while (1)
    {
      v57 = v56[1];
      if (v57 == (unsigned __int16)v3)
      {
        if (*((unsigned __int16 *)v56 + 8) == (unsigned __int16)v3)
          goto LABEL_152;
      }
      else if ((v57 & v15) != v50)
      {
        goto LABEL_151;
      }
      v18 = 0;
      v56 = (_QWORD *)*v56;
      if (!v56)
        goto LABEL_122;
    }
  }
  while (2)
  {
    v58 = v56[1];
    if (v58 != (unsigned __int16)v3)
    {
      if (v58 >= v7)
        v58 %= v7;
      if (v58 != v50)
        goto LABEL_151;
      goto LABEL_146;
    }
    if (*((unsigned __int16 *)v56 + 8) != (unsigned __int16)v3)
    {
LABEL_146:
      v18 = 0;
      v56 = (_QWORD *)*v56;
      if (!v56)
        goto LABEL_122;
      continue;
    }
    break;
  }
LABEL_152:
  if (v8.u32[0] > 1uLL)
  {
    if (v7 <= (unsigned __int16)v3)
      v6 = (unsigned __int16)v3 % v7;
  }
  else
  {
    v6 = v15 & (unsigned __int16)v3;
  }
  v59 = *(_QWORD **)(v12 + 8 * v6);
  do
  {
    v60 = v59;
    v59 = (_QWORD *)*v59;
  }
  while (v59 != v56);
  if (v60 == (_QWORD *)(v2 + 104))
    goto LABEL_169;
  v61 = v60[1];
  if (v8.u32[0] > 1uLL)
  {
    if (v61 >= v7)
      v61 %= v7;
  }
  else
  {
    v61 &= v15;
  }
  if (v61 != v6)
  {
LABEL_169:
    if (!*v56)
      goto LABEL_170;
    v62 = *(_QWORD *)(*v56 + 8);
    if (v8.u32[0] > 1uLL)
    {
      if (v62 >= v7)
        v62 %= v7;
    }
    else
    {
      v62 &= v15;
    }
    if (v62 != v6)
LABEL_170:
      *(_QWORD *)(v12 + 8 * v6) = 0;
  }
  v63 = *v56;
  if (*v56)
  {
    v64 = *(_QWORD *)(v63 + 8);
    if (v8.u32[0] > 1uLL)
    {
      if (v64 >= v7)
        v64 %= v7;
    }
    else
    {
      v64 &= v15;
    }
    if (v64 != v6)
    {
      *(_QWORD *)(*(_QWORD *)(v2 + 88) + 8 * v64) = v60;
      v63 = *v56;
    }
  }
  *v60 = v63;
  *v56 = 0;
  --*(_QWORD *)(v2 + 112);
  operator delete(v56);
  v18 = 0;
LABEL_122:
  if (*(_BYTE *)(v2 + 80) && *(_QWORD *)(v2 + 72))
  {
    v68 = v18;
    if (v18)
      CFRetain(v18);
    v53 = operator new(0xCuLL);
    v66 = v53 + 3;
    v67 = (char *)(v53 + 3);
    *(_QWORD *)v53 = v3;
    v53[2] = v5;
    v65 = v53;
    v54 = *(_QWORD *)(v2 + 72);
    if (!v54)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, CFTypeRef *, void **))(*(_QWORD *)v54 + 48))(v54, &v68, &v65);
    if (v65)
    {
      v66 = v65;
      operator delete(v65);
    }
    if (v68)
      CFRelease(v68);
  }
  if (v18)
    CFRelease(v18);
}

void sub_1BF41B3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, const void *a18)
{
  void *v18;

  operator delete(v18);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a18);
  _Unwind_Resume(a1);
}

void sub_1BF41B3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  const void *v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, const void *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1BF41B3DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, xpc_object_t object,const void *a21)
{
  if (a18 < 0)
  {
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a21);
    _Unwind_Resume(a1);
  }
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a21);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_40c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  void *v3;
  xpc_object_t result;

  v3 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (v3)
    return xpc_retain(v3);
  result = xpc_null_create();
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
}

void ___ZN26AccessorySimulatorDelegate19handleServerCommandENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictE_block_invoke_3(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _DWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  int v10;
  void *__p;
  void *v12;
  char *v13;
  CFTypeRef cf;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 80))
  {
    v2 = *(uint64_t **)(v1 + 104);
    if (v2)
    {
      v3 = *(_QWORD *)(v1 + 72);
      if (v3)
      {
        *((_WORD *)v2 + 10) = 1;
LABEL_5:
        v9 = *(uint64_t *)((char *)v2 + 18);
        v10 = *(_DWORD *)((char *)v2 + 26);
        __p = 0;
        v12 = 0;
        v13 = 0;
        cf = 0;
        v4 = operator new(0xCuLL);
        v12 = v4 + 3;
        v13 = (char *)(v4 + 3);
        *(_QWORD *)v4 = v9;
        v4[2] = v10;
        __p = v4;
        (*(void (**)(uint64_t, CFTypeRef *, void **))(*(_QWORD *)v3 + 48))(v3, &cf, &__p);
        if (__p)
        {
          v12 = __p;
          operator delete(__p);
        }
        if (cf)
          CFRelease(cf);
        while (1)
        {
          v2 = (uint64_t *)*v2;
          if (!v2)
            break;
          v3 = *(_QWORD *)(v1 + 72);
          *((_WORD *)v2 + 10) = 1;
          if (v3)
            goto LABEL_5;
        }
      }
      else
      {
        do
        {
          *((_WORD *)v2 + 10) = 1;
          v2 = (uint64_t *)*v2;
        }
        while (v2);
      }
    }
  }
  if (*(_QWORD *)(v1 + 112))
  {
    v5 = *(_QWORD **)(v1 + 104);
    if (v5)
    {
      do
      {
        v6 = (_QWORD *)*v5;
        operator delete(v5);
        v5 = v6;
      }
      while (v6);
    }
    *(_QWORD *)(v1 + 104) = 0;
    v7 = *(_QWORD *)(v1 + 96);
    if (v7)
    {
      for (i = 0; i != v7; ++i)
        *(_QWORD *)(*(_QWORD *)(v1 + 88) + 8 * i) = 0;
    }
    *(_QWORD *)(v1 + 112) = 0;
  }
}

void sub_1BF41B628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, const void *a14)
{
  if (__p)
  {
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a14);
    _Unwind_Resume(a1);
  }
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a14);
  _Unwind_Resume(a1);
}

void AccessorySimulatorDelegate::start(AccessorySimulatorDelegate *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN26AccessorySimulatorDelegate5startEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_5_10;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN26AccessorySimulatorDelegate5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  uint64_t *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  void *__p;
  void *v11;
  char *v12;
  CFTypeRef cf;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = *(NSObject **)(v1 + 40);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      LOWORD(v8) = 0;
      _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Already started", (uint8_t *)&v8, 2u);
    }
  }
  else
  {
    if (v4)
    {
      LOWORD(v8) = 0;
      _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Starting", (uint8_t *)&v8, 2u);
    }
    *(_BYTE *)(v1 + 80) = 1;
    v5 = *(uint64_t **)(v1 + 104);
    if (v5)
    {
      v6 = *(_QWORD *)(v1 + 72);
      if (v6)
      {
LABEL_8:
        v8 = *(uint64_t *)((char *)v5 + 18);
        v9 = *(_DWORD *)((char *)v5 + 26);
        __p = 0;
        v11 = 0;
        v12 = 0;
        cf = 0;
        v7 = operator new(0xCuLL);
        v11 = v7 + 3;
        v12 = (char *)(v7 + 3);
        *(_QWORD *)v7 = v8;
        v7[2] = v9;
        __p = v7;
        (*(void (**)(uint64_t, CFTypeRef *, void **))(*(_QWORD *)v6 + 48))(v6, &cf, &__p);
        if (__p)
        {
          v11 = __p;
          operator delete(__p);
        }
        if (cf)
          CFRelease(cf);
        while (1)
        {
          v5 = (uint64_t *)*v5;
          if (!v5)
            break;
          v6 = *(_QWORD *)(v1 + 72);
          if (v6)
            goto LABEL_8;
        }
      }
      else
      {
        do
          v5 = (uint64_t *)*v5;
        while (v5);
      }
    }
  }
}

void sub_1BF41B814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, const void *a14)
{
  if (__p)
  {
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a14);
    _Unwind_Resume(a1);
  }
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a14);
  _Unwind_Resume(a1);
}

void AccessorySimulatorDelegate::stop(AccessorySimulatorDelegate *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN26AccessorySimulatorDelegate4stopEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_6_2;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN26AccessorySimulatorDelegate4stopEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  uint8_t v5[16];
  uint8_t buf[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = *(NSObject **)(v1 + 40);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Stopping", buf, 2u);
    }
    *(_BYTE *)(v1 + 80) = 0;
  }
  else if (v4)
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Already stopped", v5, 2u);
  }
}

void std::__shared_ptr_pointer<AccessorySimulatorDelegate *,std::shared_ptr<AccessorySimulatorDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<AccessorySimulatorDelegate>(AccessorySimulatorDelegate*)::{lambda(AccessorySimulatorDelegate *)#1},std::allocator<AccessorySimulatorDelegate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<AccessorySimulatorDelegate *,std::shared_ptr<AccessorySimulatorDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<AccessorySimulatorDelegate>(AccessorySimulatorDelegate*)::{lambda(AccessorySimulatorDelegate *)#1},std::allocator<AccessorySimulatorDelegate>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<AccessorySimulatorDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<AccessorySimulatorDelegate>(AccessorySimulatorDelegate*)::{lambda(AccessorySimulatorDelegate*)#1}::operator() const(AccessorySimulatorDelegate*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<AccessorySimulatorDelegate *,std::shared_ptr<AccessorySimulatorDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<AccessorySimulatorDelegate>(AccessorySimulatorDelegate*)::{lambda(AccessorySimulatorDelegate *)#1},std::allocator<AccessorySimulatorDelegate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI26AccessorySimulatorDelega"
                     "teEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI26AccessorySimu"
                                "latorDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI26AccessorySimulatorDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI26AccessorySimulatorDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<AccessorySimulatorDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<AccessorySimulatorDelegate>(AccessorySimulatorDelegate*)::{lambda(AccessorySimulatorDelegate*)#1}::operator() const(AccessorySimulatorDelegate*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

char *ABMGetRootVersionString@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1BF53F3D0;
  strcpy(result, "AppleBasebandServices_Manager-1180");
  return result;
}

void WiFiManager::create(WiFiManager *this@<X0>, WiFiManager **a2@<X8>)
{
  WiFiManager *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 v16;
  NSObject *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint8_t buf[8];

  v5 = (WiFiManager *)operator new(0x40uLL);
  WiFiManager::WiFiManager(v5, (const char *)this);
  v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_1E7904858;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  v21 = v6;
  *(_QWORD *)buf = 0;
  v8 = (std::__shared_weak_count *)*((_QWORD *)v5 + 2);
  if (v8)
  {
    if (v8->__shared_owners_ != -1)
      goto LABEL_14;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    *((_QWORD *)v5 + 1) = v5;
    *((_QWORD *)v5 + 2) = v6;
    std::__shared_weak_count::__release_weak(v8);
  }
  else
  {
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v13 = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    *((_QWORD *)v5 + 1) = v5;
    *((_QWORD *)v5 + 2) = v6;
  }
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_14:
  if (*(_QWORD *)buf)
    WiFiManager::~WiFiManager(*(WiFiManager **)buf);
  if (v5 && (WiFiManager::init(v5) & 1) != 0)
  {
    *a2 = v5;
    a2[1] = (WiFiManager *)v6;
    return;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED7100E0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v17 = qword_1ED7100E0;
    if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
      goto LABEL_23;
LABEL_29:
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF335000, v17, OS_LOG_TYPE_ERROR, "Failed to create WiFi Manager!", buf, 2u);
    *a2 = 0;
    a2[1] = 0;
    v18 = v21;
    if (!v21)
      return;
    goto LABEL_24;
  }
  dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
  v17 = qword_1ED7100E0;
  if (os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
    goto LABEL_29;
LABEL_23:
  *a2 = 0;
  a2[1] = 0;
  v18 = v21;
  if (!v21)
    return;
LABEL_24:
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
}

void sub_1BF41BD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF41BD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unique_ptr<WiFiManager>::~unique_ptr[abi:ne180100]((WiFiManager **)va);
  _Unwind_Resume(a1);
}

void sub_1BF41BD74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t WiFiManager::init(WiFiManager *this)
{
  id v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  NSObject *v11;
  uint64_t v12;
  _QWORD v13[6];
  std::__shared_weak_count *v14;

  *((_BYTE *)this + 24) = 1;
  v2 = objc_alloc_init(MEMORY[0x1E0D1BA50]);
  *((_QWORD *)this + 4) = v2;
  if (v2)
  {
    objc_msgSend(v2, "activate");
    v3 = *((_QWORD *)this + 1);
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (v4)
    {
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v6 = __ldxr(p_shared_weak_owners);
      while (__stxr(v6 + 1, p_shared_weak_owners));
    }
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3321888768;
    v13[2] = ___ZN11WiFiManager4initEv_block_invoke;
    v13[3] = &__block_descriptor_56_e8_40c36_ZTSNSt3__18weak_ptrI11WiFiManagerEE_e18_v16__0__CWFEvent_8l;
    v13[4] = this;
    v13[5] = v3;
    v14 = v4;
    if (v4)
    {
      v7 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    objc_msgSend(*((id *)this + 4), "setEventHandler:", v13);
    v12 = 0;
    v9 = objc_msgSend(*((id *)this + 4), "startMonitoringEventType:error:", 1, &v12);
    if (v14)
      std::__shared_weak_count::__release_weak(v14);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    return v9;
  }
  else
  {
    v11 = *(NSObject **)this;
    if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v12) = 0;
      _os_log_error_impl(&dword_1BF335000, v11, OS_LOG_TYPE_ERROR, "Failed to create WiFiManager interface", (uint8_t *)&v12, 2u);
    }
    return 0;
  }
}

void sub_1BF41BEE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  std::__shared_weak_count *v16;

  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if (!v16)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v16)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v16);
  _Unwind_Resume(exception_object);
}

void WiFiManager::WiFiManager(WiFiManager *this, const char *__s)
{
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  void **v13;
  std::string __dst;
  std::string v15;
  void *__p[2];
  int64_t v17;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4)
LABEL_8:
    memcpy(p_dst, __s, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  v9 = std::string::append(&__dst, ".", 1uLL);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v15, "WiFiManager", 0xBuLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v17 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v17 >= 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  ctu::OsLogLogger::OsLogLogger(this, "com.apple.telephony.abm", (const char *)v13);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_17:
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_15;
LABEL_18:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_15;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_17;
LABEL_14:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_18;
LABEL_15:
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = 0;
}

void sub_1BF41C09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void WiFiManager::~WiFiManager(WiFiManager *this)
{
  uint64_t v2;
  uint64_t i;
  NSObject *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  const void *v10;
  std::__shared_weak_count *v11;

  v2 = *((_QWORD *)this + 5);
  for (i = *((_QWORD *)this + 6); i != v2; i -= 16)
  {
    v4 = *(NSObject **)(i - 8);
    if (v4)
      dispatch_release(v4);
    v5 = *(const void **)(i - 16);
    if (v5)
      _Block_release(v5);
  }
  *((_QWORD *)this + 6) = v2;
  objc_msgSend(*((id *)this + 4), "invalidate");
  v6 = *((_QWORD *)this + 5);
  if (v6)
  {
    v7 = *((_QWORD *)this + 6);
    v8 = (void *)*((_QWORD *)this + 5);
    if (v7 != v6)
    {
      do
      {
        v9 = *(NSObject **)(v7 - 8);
        if (v9)
          dispatch_release(v9);
        v10 = *(const void **)(v7 - 16);
        if (v10)
          _Block_release(v10);
        v7 -= 16;
      }
      while (v7 != v6);
      v8 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v6;
    operator delete(v8);
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  JUMPOUT(0x1C3B89240);
}

void ___ZN11WiFiManager4initEv_block_invoke(_QWORD *a1, void *a2)
{
  std::__shared_weak_count *v3;
  os_log_t *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  uint8_t v12[16];

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (os_log_t *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8 && objc_msgSend(a2, "type") == 1)
      {
        v11 = *v5;
        if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)v12 = 0;
          _os_log_debug_impl(&dword_1BF335000, v11, OS_LOG_TYPE_DEBUG, "#D WiFiManager Power Change Event", v12, 2u);
        }
        WiFiManager::notifyClients((id *)v5);
      }
    }
  }
}

void WiFiManager::notifyClients(id *this)
{
  int v2;
  NSObject *v3;
  const char *v4;
  char *v5;
  char *v6;
  void *v7;
  NSObject *v8;
  char v9;
  void *v10;
  const void *v11;
  void *v12;
  char v13;
  __int128 v14;
  uint64_t (*v15)(uint64_t);
  void *v16;
  void *aBlock;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(this[4], "powerOn");
  *((_BYTE *)this + 24) = v2;
  v3 = *this;
  if (os_log_type_enabled((os_log_t)*this, OS_LOG_TYPE_DEFAULT))
  {
    v4 = "Off";
    if (v2)
      v4 = "On";
    LODWORD(v14) = 136315138;
    *(_QWORD *)((char *)&v14 + 4) = v4;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Notifying WiFi Power: %s", (uint8_t *)&v14, 0xCu);
  }
  v5 = (char *)this[5];
  v6 = (char *)this[6];
  if (v5 != v6)
  {
    while (*(_QWORD *)v5)
    {
      v7 = _Block_copy(*(const void **)v5);
      v8 = *((_QWORD *)v5 + 1);
      if (v8)
        goto LABEL_10;
LABEL_11:
      v9 = *((_BYTE *)this + 24);
      if (v7)
      {
        v10 = _Block_copy(v7);
        v11 = v10;
        *(_QWORD *)&v14 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v14 + 1) = 3321888768;
        v15 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_0;
        v16 = &__block_descriptor_41_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE_e5_v8__0l;
        if (v10)
        {
          v12 = _Block_copy(v10);
          v13 = 0;
        }
        else
        {
          v12 = 0;
          v13 = 1;
        }
      }
      else
      {
        v11 = 0;
        v12 = 0;
        *(_QWORD *)&v14 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v14 + 1) = 3321888768;
        v13 = 1;
        v15 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_0;
        v16 = &__block_descriptor_41_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE_e5_v8__0l;
      }
      aBlock = v12;
      v18 = v9;
      dispatch_async(v8, &v14);
      if (aBlock)
        _Block_release(aBlock);
      if ((v13 & 1) == 0)
        _Block_release(v11);
      if (v8)
        dispatch_release(v8);
      if (v7)
        _Block_release(v7);
      v5 += 16;
      if (v5 == v6)
        return;
    }
    v7 = 0;
    v8 = *((_QWORD *)v5 + 1);
    if (!v8)
      goto LABEL_11;
LABEL_10:
    dispatch_retain(v8);
    goto LABEL_11;
  }
}

void sub_1BF41C4B4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11WiFiManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11WiFiManagerEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t WiFiManager::getWiFiState(WiFiManager *this)
{
  return *((unsigned __int8 *)this + 24);
}

_QWORD *WiFiManager::registerCallback(_QWORD *a1, void **a2)
{
  _QWORD *v4;
  void *v5;
  NSObject *v6;
  _QWORD *result;

  v4 = (_QWORD *)a1[6];
  if ((unint64_t)v4 >= a1[7])
  {
    result = std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>(a1 + 5, (uint64_t)a2);
    a1[6] = result;
  }
  else
  {
    v5 = *a2;
    if (*a2)
      v5 = _Block_copy(v5);
    v6 = a2[1];
    *v4 = v5;
    v4[1] = v6;
    if (v6)
      dispatch_retain(v6);
    result = v4 + 2;
    a1[6] = v4 + 2;
  }
  return result;
}

WiFiManager **std::unique_ptr<WiFiManager>::~unique_ptr[abi:ne180100](WiFiManager **a1)
{
  WiFiManager *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    WiFiManager::~WiFiManager(v2);
  return a1;
}

void std::__shared_ptr_pointer<WiFiManager *,std::shared_ptr<WiFiManager>::__shared_ptr_default_delete<WiFiManager,WiFiManager>,std::allocator<WiFiManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

WiFiManager *std::__shared_ptr_pointer<WiFiManager *,std::shared_ptr<WiFiManager>::__shared_ptr_default_delete<WiFiManager,WiFiManager>,std::allocator<WiFiManager>>::__on_zero_shared(uint64_t a1)
{
  WiFiManager *result;

  result = *(WiFiManager **)(a1 + 24);
  if (result)
    WiFiManager::~WiFiManager(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<WiFiManager *,std::shared_ptr<WiFiManager>::__shared_ptr_default_delete<WiFiManager,WiFiManager>,std::allocator<WiFiManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF542105)
    return a1 + 24;
  if (((v3 & 0x80000001BF542105 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF542105))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF542105 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t AccessoriesDelegateBase::AccessoriesDelegateBase(uint64_t a1, uint64_t a2, NSObject **a3, char *a4)
{
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v7 = a1 + 8;
  v8 = *a3;
  *(_QWORD *)(v7 + 16) = *a3;
  if (v8)
    dispatch_retain(v8);
  *(_QWORD *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 40), "com.apple.telephony.abm", a4);
  *(_QWORD *)a1 = off_1E79048A8;
  v9 = a1 + 48;
  v10 = *(_QWORD *)(a2 + 24);
  if (!v10)
    goto LABEL_6;
  if (v10 != a2)
  {
    v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v9);
LABEL_6:
    *(_QWORD *)(a1 + 72) = v10;
    *(_BYTE *)(a1 + 80) = 0;
    return a1;
  }
  *(_QWORD *)(a1 + 72) = v9;
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24));
  *(_BYTE *)(a1 + 80) = 0;
  return a1;
}

void sub_1BF41C764(_Unwind_Exception *a1)
{
  _QWORD *v1;

  ctu::SharedLoggable<AccessoriesDelegateBase,ctu::OsLogLogger>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

void sub_1BF41C778(_Unwind_Exception *a1)
{
  _QWORD *v1;

  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v1);
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedLoggable<AccessoriesDelegateBase,ctu::OsLogLogger>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  MEMORY[0x1C3B89240](a1 + 4);
  v2 = a1[3];
  if (v2)
    dispatch_release(v2);
  v3 = a1[2];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void AccessoriesDelegateBase::~AccessoriesDelegateBase(AccessoriesDelegateBase *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;

  *(_QWORD *)this = off_1E79048A8;
  v2 = (char *)this + 48;
  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  MEMORY[0x1C3B89240]((char *)this + 40);
  v5 = *((_QWORD *)this + 4);
  if (v5)
    dispatch_release(v5);
  v6 = *((_QWORD *)this + 3);
  if (v6)
    dispatch_release(v6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

uint64_t AccessoriesDelegateBase::createError@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, CFIndex a3@<X2>, CFErrorRef *a4@<X8>)
{
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  std::ios_base *v13;
  uint64_t v14;
  _QWORD *v15;
  const char *v16;
  size_t v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  const void *v25;
  std::string::size_type v26;
  std::string *p_dst;
  uint64_t v28;
  uint64_t v29;
  const __CFAllocator *v30;
  const void *v31;
  std::string __dst;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  void *__p[2];
  __int128 v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  const void *v54;
  std::string v55;
  std::string v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v42 = 0xAAAAAAAAAAAAAAAALL;
  v52 = v8;
  v51 = v8;
  v50 = v8;
  v49 = v8;
  v48 = v8;
  v47 = v8;
  v46 = v8;
  v45 = v8;
  v44 = v8;
  *(_OWORD *)__p = v8;
  v41 = v8;
  v38 = v8;
  v39 = v8;
  v36 = v8;
  v37 = v8;
  v9 = MEMORY[0x1E0DE4FE0];
  v10 = MEMORY[0x1E0DE4FE0] + 64;
  v43 = MEMORY[0x1E0DE4FE0] + 64;
  v11 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v35 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v35 + *(_QWORD *)(v35 - 24)) = v12;
  v13 = (std::ios_base *)((char *)&v35 + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v13, &v36);
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  v35 = v9 + 24;
  v43 = v10;
  std::streambuf::basic_streambuf();
  v14 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v36 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v41 = 0u;
  LODWORD(v42) = 16;
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"\n", 1);
  v16 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v17 = strlen(v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)":\n", 2);
  v20 = *(char *)(a2 + 23);
  if (v20 >= 0)
    v21 = a2;
  else
    v21 = *(_QWORD *)a2;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(a2 + 23);
  else
    v22 = *(_QWORD *)(a2 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
  v34 = 0xAAAAAAAAAAAAAAAALL;
  if ((v42 & 0x10) != 0)
  {
    v24 = *((_QWORD *)&v41 + 1);
    if (*((_QWORD *)&v41 + 1) < (unint64_t)v39)
    {
      *((_QWORD *)&v41 + 1) = v39;
      v24 = v39;
    }
    v25 = (const void *)*((_QWORD *)&v38 + 1);
    v26 = v24 - *((_QWORD *)&v38 + 1);
    if ((unint64_t)(v24 - *((_QWORD *)&v38 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_40;
  }
  else
  {
    if ((v42 & 8) == 0)
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
      __dst.__r_.__value_.__s.__data_[0] = 0;
      v23 = 0;
LABEL_16:
      v55 = __dst;
      goto LABEL_22;
    }
    v25 = (const void *)v37;
    v26 = v38 - v37;
    if ((_QWORD)v38 - (_QWORD)v37 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_40:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v26 >= 0x17)
  {
    v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v28 = v26 | 7;
    v29 = v28 + 1;
    p_dst = (std::string *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v26;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_20:
    memmove(p_dst, v25, v26);
    p_dst->__r_.__value_.__s.__data_[v26] = 0;
    v23 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_16;
    goto LABEL_21;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v26;
  p_dst = &__dst;
  if (v26)
    goto LABEL_20;
  __dst.__r_.__value_.__s.__data_[0] = 0;
  v23 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_16;
LABEL_21:
  std::string::__init_copy_ctor_external(&v55, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
LABEL_22:
  v53 = 0;
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v56, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
  else
    v56 = v55;
  v54 = 0;
  v30 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (ctu::cf::convert_copy())
    v31 = v54;
  else
    v31 = 0;
  if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v34 = (unint64_t)v31;
    if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_30;
LABEL_37:
    operator delete(v55.__r_.__value_.__l.__data_);
    if ((v23 & 0x80000000) == 0)
      goto LABEL_31;
    goto LABEL_38;
  }
  operator delete(v56.__r_.__value_.__l.__data_);
  v34 = (unint64_t)v31;
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_37;
LABEL_30:
  if ((v23 & 0x80000000) == 0)
    goto LABEL_31;
LABEL_38:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_31:
  v56.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0C9AFB0];
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
  *a4 = (CFErrorRef)0xAAAAAAAAAAAAAAAALL;
  *a4 = CFErrorCreateWithUserInfoKeysAndValues(v30, (CFErrorDomain)*MEMORY[0x1E0C9AFD0], a3, (const void *const *)&v56.__r_.__value_.__l.__data_, (const void *const *)&v55.__r_.__value_.__l.__data_, 1);
  if (v31)
    CFRelease(v31);
  v35 = *v11;
  *(uint64_t *)((char *)&v35 + *(_QWORD *)(v35 - 24)) = v11[3];
  *(_QWORD *)&v36 = v14 + 16;
  if (SBYTE7(v41) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B89E4C](&v43);
}

void sub_1BF41CC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17)
{
  int v17;
  uint64_t v18;

  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef((const void **)(v18 - 176));
  if (*(char *)(v18 - 137) < 0)
  {
    operator delete(*(void **)(v18 - 160));
    if ((v17 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((v17 & 0x80000000) == 0)
  {
LABEL_6:
    std::ostringstream::~ostringstream((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  goto LABEL_6;
}

uint64_t AccessoriesDelegateBase::handleServerCommand()
{
  return 0;
}

_QWORD *BasebandCrashReasonFilter::create@<X0>(_QWORD *a1@<X8>)
{
  BasebandCrashReasonFilter *v3;

  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  v3 = (BasebandCrashReasonFilter *)operator new(0x60uLL);
  BasebandCrashReasonFilter::BasebandCrashReasonFilter(v3);
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  return std::shared_ptr<BasebandCrashReasonFilter>::shared_ptr[abi:ne180100]<BasebandCrashReasonFilter,std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter*)#1},void>(a1, (uint64_t)v3);
}

void sub_1BF41CDB0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void BasebandCrashReasonFilter::~BasebandCrashReasonFilter(BasebandCrashReasonFilter *this)
{
  char *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  std::__shared_weak_count *v12;
  uint8_t v13[16];

  *(_QWORD *)this = off_1E7904990;
  v2 = (char *)this + 40;
  v3 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Gone!", v13, 2u);
  }
  v4 = *((_QWORD *)this + 9);
  if (v4)
  {
    v5 = *((_QWORD *)this + 10);
    v6 = (void *)*((_QWORD *)this + 9);
    if (v5 != v4)
    {
      do
      {
        if (*(char *)(v5 - 9) < 0)
          operator delete(*(void **)(v5 - 32));
        v5 -= 32;
      }
      while (v5 != v4);
      v6 = (void *)*((_QWORD *)this + 9);
    }
    *((_QWORD *)this + 10) = v4;
    operator delete(v6);
  }
  v7 = *((_QWORD *)this + 6);
  if (v7)
  {
    v8 = *((_QWORD *)this + 7);
    v9 = (void *)*((_QWORD *)this + 6);
    if (v8 != v7)
    {
      do
      {
        if (*(char *)(v8 - 9) < 0)
          operator delete(*(void **)(v8 - 32));
        v8 -= 32;
      }
      while (v8 != v7);
      v9 = (void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v7;
    operator delete(v9);
  }
  MEMORY[0x1C3B89240](v2);
  v10 = *((_QWORD *)this + 4);
  if (v10)
    dispatch_release(v10);
  v11 = *((_QWORD *)this + 3);
  if (v11)
    dispatch_release(v11);
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
}

{
  void *v1;

  BasebandCrashReasonFilter::~BasebandCrashReasonFilter(this);
  operator delete(v1);
}

void **std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 9) < 0)
          operator delete(*(v3 - 4));
        v3 -= 4;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void BasebandCrashReasonFilter::BasebandCrashReasonFilter(BasebandCrashReasonFilter *this)
{
  NSObject *initially_inactive;
  NSObject *v3;
  void **v4;
  NSObject *v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  __int128 v13;
  char v14[8];

  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v12, "com.apple.telephony.abm", "bb.crashreason.fltr");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v3 = dispatch_queue_create_with_target_V2("BasebandCrashReasonFilter", initially_inactive, 0);
  dispatch_set_qos_class_floor(v3, QOS_CLASS_UTILITY, 0);
  dispatch_activate(v3);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    *((_QWORD *)this + 4) = 0;
    dispatch_release(v3);
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger((BasebandCrashReasonFilter *)((char *)this + 40), (const ctu::OsLogLogger *)v14);
  MEMORY[0x1C3B89240](v14);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v12);
  *(_QWORD *)this = off_1E7904990;
  *((_OWORD *)this + 3) = 0u;
  v4 = (void **)((char *)this + 48);
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  v5 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v12) = 0;
    _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "#I initializing baseband crash reason patterns and masks from preferences file", (uint8_t *)&v12, 2u);
  }
  BasebandCrashReasonFilter::readBasebandCrashReasonPatternsFromPreferences(this, &v12);
  v6 = (void **)*v4;
  if (*v4)
  {
    v7 = (void **)*((_QWORD *)this + 7);
    v8 = *v4;
    if (v7 != v6)
    {
      do
      {
        if (*((char *)v7 - 9) < 0)
          operator delete(*(v7 - 4));
        v7 -= 4;
      }
      while (v7 != v6);
      v8 = *v4;
    }
    *((_QWORD *)this + 7) = v6;
    operator delete(v8);
    *v4 = 0;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 8) = 0;
  }
  v9 = v12;
  *((_QWORD *)this + 6) = v12;
  v10 = (void *)v13;
  *(_OWORD *)((char *)this + 56) = v13;
  if (v10 == v9)
  {
    v11 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v12) = 0;
      _os_log_impl(&dword_1BF335000, v11, OS_LOG_TYPE_DEFAULT, "#I default pattern masks for baseband crash reason patterns and masks will be used", (uint8_t *)&v12, 2u);
    }
    std::vector<ResetInfo::RegexPatternAndReasonMask>::__assign_with_size[abi:ne180100]<ResetInfo::RegexPatternAndReasonMask*,ResetInfo::RegexPatternAndReasonMask*>((void **)this + 6, *((void ***)this + 9), *((char **)this + 10), (uint64_t)(*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 5);
  }
}

void sub_1BF41D184(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;

  std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100]((void **)(v1 + 72));
  std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100](v3);
  ctu::SharedLoggable<AccessoriesDelegateBase,ctu::OsLogLogger>::~SharedLoggable(v2);
  _Unwind_Resume(a1);
}

void BasebandCrashReasonFilter::readBasebandCrashReasonPatternsFromPreferences(BasebandCrashReasonFilter *this@<X0>, void **a2@<X8>)
{
  _QWORD *v4;
  uint64_t (***v5)(_QWORD, uint64_t);
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  const __CFArray *v16;
  CFTypeRef v17;
  void **v18;
  void **i;
  NSObject *v20;
  CFArrayRef v21;
  void *__p[4];
  uint64_t v23;
  std::__shared_weak_count *v24;
  CFTypeRef cf;
  const __CFArray *v26;

  v26 = 0;
  cf = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1ED70FAF0)
  {
    v5 = (uint64_t (***)(_QWORD, uint64_t))operator new(0x18uLL);
    MEMORY[0x1C3B893B4](v5, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
    v4 = operator new(0x20uLL);
    *v4 = &unk_1E78FFBE0;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = v5;
    v6 = (std::__shared_weak_count *)off_1ED70FAF8;
    qword_1ED70FAF0 = (uint64_t)v5;
    off_1ED70FAF8 = v4;
    if (!v6)
    {
      v23 = (uint64_t)v5;
      v24 = (std::__shared_weak_count *)v4;
LABEL_10:
      v9 = v4 + 1;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      goto LABEL_12;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v5 = (uint64_t (***)(_QWORD, uint64_t))qword_1ED70FAF0;
  v4 = off_1ED70FAF8;
  v23 = qword_1ED70FAF0;
  v24 = (std::__shared_weak_count *)off_1ED70FAF8;
  if (off_1ED70FAF8)
    goto LABEL_10;
LABEL_12:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_1BF542260;
  strcpy((char *)__p[0], "BasebandCrashReasonRegexPatterns");
  v11 = Preferences::getPreference<__CFArray const*>(v5, (const char *)__p, &v26);
  if (v26)
    v12 = v11;
  else
    v12 = 0;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v13 = v24;
  if (!v24)
    goto LABEL_21;
  v14 = (unint64_t *)&v24->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v12)
      goto LABEL_22;
  }
  else
  {
LABEL_21:
    if (v12)
    {
LABEL_22:
      v16 = v26;
      v17 = cf;
      cf = v26;
      if (v17)
        CFRelease(v17);
      v21 = v16;
      if (v16)
        CFRetain(v16);
      BasebandCrashReasonFilter::convertBasebandCrashReasonPatternsFromCFSharedArrayToVector(&v21, __p);
      v18 = (void **)*a2;
      if (*a2)
      {
        for (i = (void **)a2[1]; i != v18; i -= 4)
        {
          if (*((char *)i - 9) < 0)
            operator delete(*(i - 4));
        }
        operator delete(v18);
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
      }
      *(_OWORD *)a2 = *(_OWORD *)__p;
      a2[2] = __p[2];
      memset(__p, 0, 24);
      if (v16)
        CFRelease(v16);
      goto LABEL_38;
    }
  }
  v20 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl(&dword_1BF335000, v20, OS_LOG_TYPE_DEFAULT, "#I no baseband crash reason patterns entry found in ABMProperties", (uint8_t *)__p, 2u);
  }
LABEL_38:
  if (cf)
    CFRelease(cf);
}

uint64_t BasebandCrashReasonFilter::shouldSetSCD(uint64_t a1, uint64_t a2)
{
  return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, a2, (__int128 **)(a1 + 48));
}

uint64_t BasebandCrashReasonFilter::shouldSetCOF(uint64_t a1, uint64_t a2)
{
  return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, a2, (__int128 **)(a1 + 48));
}

uint64_t BasebandCrashReasonFilter::readBasebandCrashReasonPatternsFromFactoryFile@<X0>(_QWORD *a1@<X8>)
{
  const __CFArray *v3;
  uint64_t v4;
  CFArrayRef v6;
  __CFString *v7[2];
  uint64_t v8;
  const __CFArray *v9;
  _QWORD v10[3];

  memset(v10, 170, sizeof(v10));
  MEMORY[0x1C3B893B4](v10, CFSTR("/AppleInternal/Cellular/Factory/BasebandCOFSCD.plist"), *MEMORY[0x1E0C9B260]);
  v9 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v7, "BasebandCrashReasonRegexPatterns");
  v3 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v10, v7[0]);
  MEMORY[0x1C3B8936C](v7);
  v9 = v3;
  v6 = v3;
  if (v3)
    CFRetain(v3);
  BasebandCrashReasonFilter::convertBasebandCrashReasonPatternsFromCFSharedArrayToVector(&v6, (void **)v7);
  v4 = v8;
  *(_OWORD *)a1 = *(_OWORD *)v7;
  a1[2] = v4;
  v7[1] = 0;
  v8 = 0;
  v7[0] = 0;
  if (v3)
  {
    CFRelease(v3);
    CFRelease(v3);
  }
  return MEMORY[0x1C3B893C0](v10);
}

void sub_1BF41D638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  uint64_t v3;
  const void *v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, const void *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100](v2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va1);
  MEMORY[0x1C3B893C0](v3 - 40);
  _Unwind_Resume(a1);
}

void BasebandCrashReasonFilter::convertBasebandCrashReasonPatternsFromCFSharedArrayToVector(CFArrayRef *a1@<X1>, void **a2@<X8>)
{
  CFArrayRef *v2;
  unint64_t Count;
  void **v4;
  void **v5;
  void **v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  void **v12;
  CFIndex i;
  const void *ValueAtIndex;
  const void *v15;
  CFTypeID v16;
  int Int;
  unint64_t v18;
  void **v19;
  __int128 v20;
  unint64_t v21;
  void **v22;
  uint64_t v23;
  unint64_t v24;
  CFArrayRef *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  void **v33;
  int v34;
  std::string __p;
  int v37;
  std::string v38;
  _QWORD v39[2];
  const void *v40;
  uint64_t v41;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (!*a1)
    return;
  v2 = a1;
  Count = CFArrayGetCount(*a1);
  v4 = a2;
  v5 = (void **)*a2;
  if (Count > ((_BYTE *)a2[2] - (_BYTE *)*a2) >> 5)
  {
    v6 = (void **)a2[1];
    v7 = (char *)operator new(32 * Count);
    v8 = &v7[32 * Count];
    v9 = &v7[(char *)v6 - (char *)v5];
    if (v6 == v5)
    {
      v4 = a2;
      *a2 = v9;
      a2[1] = v9;
      a2[2] = v8;
      if (v5)
LABEL_12:
        operator delete(v5);
    }
    else
    {
      v10 = &v7[(char *)v6 - (char *)v5];
      do
      {
        v11 = *((_OWORD *)v6 - 2);
        *((_QWORD *)v10 - 2) = *(v6 - 2);
        *((_OWORD *)v10 - 2) = v11;
        *(v6 - 3) = 0;
        *(v6 - 2) = 0;
        *(v6 - 4) = 0;
        *((_DWORD *)v10 - 2) = *((_DWORD *)v6 - 2);
        v10 -= 32;
        v6 -= 4;
      }
      while (v6 != v5);
      v5 = (void **)*a2;
      v12 = (void **)a2[1];
      *a2 = v10;
      a2[1] = v9;
      a2[2] = v8;
      while (v12 != v5)
      {
        if (*((char *)v12 - 9) < 0)
          operator delete(*(v12 - 4));
        v12 -= 4;
      }
      v4 = a2;
      if (v5)
        goto LABEL_12;
    }
  }
  if (Count)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*v2, i);
      v15 = ValueAtIndex;
      if (ValueAtIndex && (v16 = CFGetTypeID(ValueAtIndex), v16 == CFDictionaryGetTypeID()))
      {
        v40 = v15;
        CFRetain(v15);
      }
      else
      {
        v15 = 0;
        v40 = 0;
      }
      v39[0] = 0xAAAAAAAAAAAAAAAALL;
      v39[1] = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v39, (const __CFDictionary *)v15);
      memset(&v38, 170, sizeof(v38));
      memset(&__p, 0, sizeof(__p));
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v41, "BasebandCrashReasonRegexPattern");
      ctu::cf::map_adapter::getString();
      MEMORY[0x1C3B8936C](&v41);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, "BasebandCrashReasonRegexPatternMask");
      Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v39, (const __CFString *)__p.__r_.__value_.__l.__data_);
      MEMORY[0x1C3B8936C](&__p);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
      else
        __p = v38;
      v37 = Int;
      v19 = (void **)v4[1];
      v18 = (unint64_t)v4[2];
      if ((unint64_t)v19 < v18)
      {
        v20 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v19[2] = (void *)__p.__r_.__value_.__r.__words[2];
        *(_OWORD *)v19 = v20;
        memset(&__p, 0, sizeof(__p));
        *((_DWORD *)v19 + 6) = v37;
        v4[1] = v19 + 4;
        if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_42;
        goto LABEL_50;
      }
      v21 = Count;
      v22 = (void **)*v4;
      v23 = ((char *)v19 - (char *)v22) >> 5;
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 59)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v25 = v2;
      v26 = v18 - (_QWORD)v22;
      if (v26 >> 4 > v24)
        v24 = v26 >> 4;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFE0)
        v27 = 0x7FFFFFFFFFFFFFFLL;
      else
        v27 = v24;
      if (v27 >> 59)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v28 = (char *)operator new(32 * v27);
      v29 = &v28[32 * v23];
      *(std::string *)v29 = __p;
      v30 = &v28[32 * v27];
      memset(&__p, 0, sizeof(__p));
      *((_DWORD *)v29 + 6) = Int;
      v31 = v29 + 32;
      if (v19 == v22)
      {
        v4 = a2;
        *a2 = v29;
        a2[1] = v31;
        a2[2] = v30;
        v2 = v25;
        Count = v21;
        if (v19)
          goto LABEL_39;
      }
      else
      {
        do
        {
          v32 = *((_OWORD *)v19 - 2);
          *((_QWORD *)v29 - 2) = *(v19 - 2);
          *((_OWORD *)v29 - 2) = v32;
          *(v19 - 3) = 0;
          *(v19 - 2) = 0;
          *(v19 - 4) = 0;
          *((_DWORD *)v29 - 2) = *((_DWORD *)v19 - 2);
          v29 -= 32;
          v19 -= 4;
        }
        while (v19 != v22);
        v19 = (void **)*a2;
        v33 = (void **)a2[1];
        *a2 = v29;
        a2[1] = v31;
        a2[2] = v30;
        v2 = v25;
        for (Count = v21; v33 != v19; v33 -= 4)
        {
          if (*((char *)v33 - 9) < 0)
            operator delete(*(v33 - 4));
        }
        v4 = a2;
        if (v19)
LABEL_39:
          operator delete(v19);
      }
      v34 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      v4[1] = v31;
      if (v34 < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_42:
          MEMORY[0x1C3B893A8](v39);
          if (!v15)
            continue;
LABEL_51:
          CFRelease(v15);
          continue;
        }
      }
      else if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_42;
      }
LABEL_50:
      operator delete(v38.__r_.__value_.__l.__data_);
      MEMORY[0x1C3B893A8](v39);
      if (v15)
        goto LABEL_51;
    }
  }
}

void sub_1BF41DAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

void sub_1BF41DAB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,const void *a27)
{
  if (a24 < 0)
    operator delete(__p);
  MEMORY[0x1C3B893A8](&a25);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a27);
  std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

void sub_1BF41DB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

void std::vector<ResetInfo::RegexPatternAndReasonMask>::__assign_with_size[abi:ne180100]<ResetInfo::RegexPatternAndReasonMask*,ResetInfo::RegexPatternAndReasonMask*>(void **a1, void **a2, char *a3, unint64_t a4)
{
  uint64_t v8;
  void **v9;
  void **v10;
  void *v11;
  void **v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  size_t v18;
  char *v19;
  char *v20;
  char v21;
  __int128 v22;
  unint64_t v23;
  char *v24;
  size_t v25;
  char *v26;
  char *v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  std::string *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  std::string *v41;
  char *v42;

  v8 = (uint64_t)a1[2];
  v9 = (void **)*a1;
  if (a4 <= (v8 - (uint64_t)*a1) >> 5)
  {
    v12 = (void **)a1[1];
    v13 = ((char *)v12 - (char *)v9) >> 5;
    if (v13 >= a4)
    {
      if (a2 != (void **)a3)
      {
        v23 = 0;
        do
        {
          v26 = (char *)&v9[v23];
          v27 = (char *)&a2[v23];
          if (a2 != v9)
          {
            v28 = v27[23];
            if (v26[23] < 0)
            {
              if (v28 >= 0)
                v24 = (char *)&a2[v23];
              else
                v24 = (char *)a2[v23];
              if (v28 >= 0)
                v25 = v27[23];
              else
                v25 = (size_t)a2[v23 + 1];
              std::string::__assign_no_alias<false>(&v9[v23], v24, v25);
            }
            else if (v27[23] < 0)
            {
              std::string::__assign_no_alias<true>(&v9[v23], a2[v23], (size_t)a2[v23 + 1]);
            }
            else
            {
              v29 = *(_OWORD *)v27;
              *((_QWORD *)v26 + 2) = *((_QWORD *)v27 + 2);
              *(_OWORD *)v26 = v29;
            }
          }
          *((_DWORD *)v26 + 6) = *((_DWORD *)v27 + 6);
          v23 += 4;
        }
        while (&a2[v23] != (void **)a3);
        v12 = (void **)a1[1];
        v9 = (void **)((char *)v9 + v23 * 8);
      }
      while (v12 != v9)
      {
        if (*((char *)v12 - 9) < 0)
          operator delete(*(v12 - 4));
        v12 -= 4;
      }
      a1[1] = v9;
    }
    else
    {
      v14 = (char *)&a2[4 * v13];
      if (v12 != v9)
      {
        v15 = 0;
        v16 = 32 * v13;
        do
        {
          v19 = (char *)&v9[v15 / 8];
          v20 = (char *)&a2[v15 / 8];
          if (a2 != v9)
          {
            v21 = v20[23];
            if (v19[23] < 0)
            {
              if (v21 >= 0)
                v17 = (char *)&a2[v15 / 8];
              else
                v17 = (char *)a2[v15 / 8];
              if (v21 >= 0)
                v18 = v20[23];
              else
                v18 = (size_t)a2[v15 / 8 + 1];
              std::string::__assign_no_alias<false>(&v9[v15 / 8], v17, v18);
            }
            else if (v20[23] < 0)
            {
              std::string::__assign_no_alias<true>(&v9[v15 / 8], a2[v15 / 8], (size_t)a2[v15 / 8 + 1]);
            }
            else
            {
              v22 = *(_OWORD *)v20;
              *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
              *(_OWORD *)v19 = v22;
            }
          }
          *((_DWORD *)v19 + 6) = *((_DWORD *)v20 + 6);
          v15 += 32;
        }
        while (v16 != v15);
        v9 = (void **)a1[1];
      }
      v38 = (char *)v9;
      if (v14 != a3)
      {
        v39 = 0;
        do
        {
          v41 = (std::string *)&v9[v39];
          v42 = &v14[v39 * 8];
          if (v14[v39 * 8 + 23] < 0)
          {
            std::string::__init_copy_ctor_external(v41, *(const std::string::value_type **)v42, *((_QWORD *)v42 + 1));
          }
          else
          {
            v40 = *(_OWORD *)v42;
            v41->__r_.__value_.__r.__words[2] = *((_QWORD *)v42 + 2);
            *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v40;
          }
          LODWORD(v9[v39 + 3]) = *(_DWORD *)&v14[v39 * 8 + 24];
          v39 += 4;
        }
        while (&v14[v39 * 8] != a3);
        v38 = (char *)&v9[v39];
      }
      a1[1] = v38;
    }
  }
  else
  {
    if (v9)
    {
      v10 = (void **)a1[1];
      v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          if (*((char *)v10 - 9) < 0)
            operator delete(*(v10 - 4));
          v10 -= 4;
        }
        while (v10 != v9);
        v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 59)
      goto LABEL_70;
    v30 = v8 >> 4;
    if (v8 >> 4 <= a4)
      v30 = a4;
    v31 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    v32 = 0x7FFFFFFFFFFFFFFLL;
    if (!v31)
      v32 = v30;
    if (v32 >> 59)
LABEL_70:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v33 = 32 * v32;
    v34 = (char *)operator new(32 * v32);
    *a1 = v34;
    a1[1] = v34;
    a1[2] = &v34[v33];
    if (a2 != (void **)a3)
    {
      v35 = 0;
      do
      {
        v36 = (std::string *)&v34[v35 * 8];
        v37 = (char *)&a2[v35];
        if (SHIBYTE(a2[v35 + 2]) < 0)
        {
          std::string::__init_copy_ctor_external(v36, *(const std::string::value_type **)v37, *((_QWORD *)v37 + 1));
        }
        else
        {
          *(_OWORD *)&v36->__r_.__value_.__l.__data_ = *(_OWORD *)v37;
          v36->__r_.__value_.__r.__words[2] = *((_QWORD *)v37 + 2);
        }
        *(_DWORD *)&v34[v35 * 8 + 24] = a2[v35 + 3];
        v35 += 4;
      }
      while (&a2[v35] != (void **)a3);
      v34 += v35 * 8;
    }
    a1[1] = v34;
  }
}

void sub_1BF41DEDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  for (; v3; v3 -= 32)
  {
    if (*(char *)(v2 + v3 - 9) < 0)
      operator delete(*(void **)(v2 + v3 - 32));
  }
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<BasebandCrashReasonFilter>::shared_ptr[abi:ne180100]<BasebandCrashReasonFilter,std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E7904A48;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 8) = a2;
    *(_QWORD *)(a2 + 16) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 8) = a2;
    *(_QWORD *)(a2 + 16) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF41E018(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter*)#1}::operator() const(BasebandCrashReasonFilter*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF41E038(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<BasebandCrashReasonFilter *,std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter *)#1},std::allocator<BasebandCrashReasonFilter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<BasebandCrashReasonFilter *,std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter *)#1},std::allocator<BasebandCrashReasonFilter>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter*)#1}::operator() const(BasebandCrashReasonFilter*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<BasebandCrashReasonFilter *,std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter *)#1},std::allocator<BasebandCrashReasonFilter>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI25BasebandCrashReasonFilterE15make_shared_ptrIS1_EENSt3__110shared_ptr"
                     "IT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI25BasebandCrashReasonFilterE15make_shared_ptrIS1_EENSt3__11"
                                "0shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI25BasebandCrashReasonFilterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI25BasebandCrashReasonFilterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter*)#1}::operator() const(BasebandCrashReasonFilter*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t abm::ParseWakeDataEureka(xpc_object_t *a1, xpc_object_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  xpc_object_t v7;
  xpc_object_t v8;
  const char *v9;
  xpc_object_t value;
  int v11;
  xpc_object_t v12;
  xpc_object_t v13;
  const char *v14;
  xpc_object_t v15;
  xpc_object_t v16;
  uint64_t v17;
  uint64_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  xpc_object_t v51;
  xpc_object_t v52;
  xpc_object_t v53;
  xpc_object_t v54;
  xpc_object_t v55;
  xpc_object_t v56;
  xpc_object_t v57;
  xpc_object_t v58;
  xpc_object_t v59;
  xpc_object_t v60;
  xpc_object_t v61;
  xpc_object_t v62;
  xpc_object_t v63;
  xpc_object_t v64;
  xpc_object_t v65;
  xpc_object_t v66;
  xpc_object_t v67;
  xpc_object_t v68;
  xpc_object_t v69;
  xpc_object_t v70;
  xpc_object_t v71;
  xpc_object_t v72;
  xpc_object_t v73;
  xpc_object_t v74;
  xpc_object_t v75;
  xpc_object_t v76;
  xpc_object_t v77;
  xpc_object_t v78;
  xpc_object_t object;
  xpc_object_t v80;
  xpc_object_t v81;
  xpc_object_t v82;
  xpc_object_t v83;
  xpc_object_t v84;
  xpc_object_t v85;
  xpc_object_t v86;
  xpc_object_t v87;
  xpc_object_t v88;
  xpc_object_t v89;
  xpc_object_t v90;
  xpc_object_t v91;
  void *v92;
  xpc_object_t v93;
  xpc_object_t v94;
  xpc_object_t v95;
  xpc_object_t v96;
  xpc_object_t v97;
  xpc_object_t v98;
  xpc_object_t v99;
  uint64_t v100;
  xpc_object_t v101;
  xpc_object_t v102;

  v4 = MEMORY[0x1C3B8A86C](*a1);
  v5 = MEMORY[0x1E0C812F8];
  if (v4 != MEMORY[0x1E0C812F8] || MEMORY[0x1C3B8A86C](*a2) != v5)
    return 0;
  v7 = xpc_string_create((const char *)*MEMORY[0x1E0CFB4B8]);
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB2B8], v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  v9 = (const char *)*MEMORY[0x1E0CFB7A8];
  value = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x1E0CFB7A8]);
  v99 = value;
  if (value)
    xpc_retain(value);
  else
    v99 = xpc_null_create();
  v11 = xpc::dyn_cast_or_default((xpc *)&v99, 0);
  xpc_release(v99);
  v12 = xpc_int64_create(v11);
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(*a2, v9, v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  v14 = (const char *)*MEMORY[0x1E0CFB408];
  v15 = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x1E0CFB408]);
  if (v15)
  {
    v16 = v15;
    xpc_retain(v15);
  }
  else
  {
    v16 = xpc_null_create();
  }
  v17 = MEMORY[0x1C3B8A86C](v16);
  v18 = MEMORY[0x1E0C81350];
  if (v17 != MEMORY[0x1E0C81350])
  {
    if (v16)
    {
      xpc_retain(v16);
      v19 = v16;
    }
    else
    {
      v19 = xpc_null_create();
    }
    xpc_dictionary_set_value(*a2, v14, v19);
    v20 = xpc_null_create();
    xpc_release(v19);
    xpc_release(v20);
  }
  switch(v11)
  {
    case 1:
      v101 = xpc_string_create((const char *)*MEMORY[0x1E0CFB5A8]);
      if (!v101)
        v101 = xpc_null_create();
      v29 = *MEMORY[0x1E0CFB410];
      v99 = a2;
      v100 = v29;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v101, &v102);
      xpc_release(v102);
      v102 = 0;
      xpc_release(v101);
      v101 = 0;
      v97 = xpc_string_create((const char *)*MEMORY[0x1E0CFBA68]);
      if (!v97)
        v97 = xpc_null_create();
      v30 = *MEMORY[0x1E0CFB7B0];
      v99 = a2;
      v100 = v30;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v97, &v98);
      xpc_release(v98);
      v98 = 0;
      xpc_release(v97);
      v97 = 0;
      break;
    case 2:
      v95 = xpc_string_create((const char *)*MEMORY[0x1E0CFB5A8]);
      if (!v95)
        v95 = xpc_null_create();
      v31 = *MEMORY[0x1E0CFB410];
      v99 = a2;
      v100 = v31;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v95, &v96);
      xpc_release(v96);
      v96 = 0;
      xpc_release(v95);
      v95 = 0;
      v93 = xpc_string_create((const char *)*MEMORY[0x1E0CFB830]);
      if (!v93)
        v93 = xpc_null_create();
      v32 = *MEMORY[0x1E0CFB7B0];
      v99 = a2;
      v100 = v32;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v93, &v94);
      xpc_release(v94);
      v94 = 0;
      xpc_release(v93);
      v93 = 0;
      break;
    case 3:
    case 11:
      v21 = xpc_string_create((const char *)*MEMORY[0x1E0CFB838]);
      if (!v21)
        v21 = xpc_null_create();
      xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB410], v21);
      v22 = xpc_null_create();
      xpc_release(v21);
      xpc_release(v22);
      v23 = xpc_string_create((const char *)*MEMORY[0x1E0CFB6E8]);
      if (!v23)
        v23 = xpc_null_create();
      xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB7B0], v23);
      v24 = xpc_null_create();
      xpc_release(v23);
      xpc_release(v24);
      if (MEMORY[0x1C3B8A86C](v16) != v18)
      {
        v91 = v16;
        v92 = (void *)0xAAAAAAAAAAAAAAAALL;
        if (v16)
          xpc_retain(v16);
        else
          v91 = xpc_null_create();
        abm::_ParseEurekaQMI(&v92);
        xpc_release(v91);
        v91 = 0;
        xpc::dict::dict((xpc::dict *)&v89, &v92);
        v49 = *MEMORY[0x1E0CFBB10];
        v99 = a2;
        v100 = v49;
        xpc::dict::object_proxy::operator=((uint64_t)&v99, &v89, &v90);
        xpc_release(v90);
        v90 = 0;
        xpc_release(v89);
        v89 = 0;
        xpc_release(v92);
      }
      break;
    case 4:
    case 13:
      v88 = *a1;
      if (v88)
        xpc_retain(v88);
      else
        v88 = xpc_null_create();
      abm::ParseWakeDataIP(&v88, a2);
      xpc_release(v88);
      v88 = 0;
      break;
    case 5:
    case 12:
      v25 = xpc_string_create((const char *)*MEMORY[0x1E0CFB5B0]);
      if (!v25)
        v25 = xpc_null_create();
      xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB410], v25);
      v26 = xpc_null_create();
      xpc_release(v25);
      xpc_release(v26);
      v27 = xpc_string_create((const char *)*MEMORY[0x1E0CFBA70]);
      if (!v27)
        v27 = xpc_null_create();
      xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB7B0], v27);
      v28 = xpc_null_create();
      xpc_release(v27);
      xpc_release(v28);
      break;
    case 6:
      v78 = xpc_string_create((const char *)*MEMORY[0x1E0CFB5A8]);
      if (!v78)
        v78 = xpc_null_create();
      v33 = *MEMORY[0x1E0CFB410];
      v99 = a2;
      v100 = v33;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v78, &object);
      xpc_release(object);
      object = 0;
      xpc_release(v78);
      v78 = 0;
      v76 = xpc_string_create((const char *)*MEMORY[0x1E0CFB810]);
      if (!v76)
        v76 = xpc_null_create();
      v34 = *MEMORY[0x1E0CFB7B0];
      v99 = a2;
      v100 = v34;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v76, &v77);
      xpc_release(v77);
      v77 = 0;
      xpc_release(v76);
      v76 = 0;
      break;
    case 7:
      v74 = xpc_string_create((const char *)*MEMORY[0x1E0CFB5B0]);
      if (!v74)
        v74 = xpc_null_create();
      v35 = *MEMORY[0x1E0CFB410];
      v99 = a2;
      v100 = v35;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v74, &v75);
      xpc_release(v75);
      v75 = 0;
      xpc_release(v74);
      v74 = 0;
      v72 = xpc_string_create((const char *)*MEMORY[0x1E0CFB808]);
      if (!v72)
        v72 = xpc_null_create();
      v36 = *MEMORY[0x1E0CFB7B0];
      v99 = a2;
      v100 = v36;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v72, &v73);
      xpc_release(v73);
      v73 = 0;
      xpc_release(v72);
      v72 = 0;
      break;
    case 9:
      v70 = xpc_string_create((const char *)*MEMORY[0x1E0CFB838]);
      if (!v70)
        v70 = xpc_null_create();
      v39 = *MEMORY[0x1E0CFB410];
      v99 = a2;
      v100 = v39;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v70, &v71);
      xpc_release(v71);
      v71 = 0;
      xpc_release(v70);
      v70 = 0;
      v68 = xpc_string_create((const char *)*MEMORY[0x1E0CFB828]);
      if (!v68)
        v68 = xpc_null_create();
      v40 = *MEMORY[0x1E0CFB7B0];
      v99 = a2;
      v100 = v40;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v68, &v69);
      xpc_release(v69);
      v69 = 0;
      xpc_release(v68);
      v68 = 0;
      if (MEMORY[0x1C3B8A86C](v16) != v18)
      {
        v66 = xpc_string_create((const char *)*MEMORY[0x1E0CFB6E8]);
        if (!v66)
          v66 = xpc_null_create();
        v99 = a2;
        v100 = v40;
        xpc::dict::object_proxy::operator=((uint64_t)&v99, &v66, &v67);
        xpc_release(v67);
        v67 = 0;
        xpc_release(v66);
        v65 = v16;
        v66 = 0;
        v92 = (void *)0xAAAAAAAAAAAAAAAALL;
        if (v16)
          xpc_retain(v16);
        else
          v65 = xpc_null_create();
        abm::_ParseEurekaQMI(&v92);
        xpc_release(v65);
        v65 = 0;
        xpc::dict::dict((xpc::dict *)&v63, &v92);
        v50 = *MEMORY[0x1E0CFBB10];
        v99 = a2;
        v100 = v50;
        xpc::dict::object_proxy::operator=((uint64_t)&v99, &v63, &v64);
        xpc_release(v64);
        v64 = 0;
        xpc_release(v63);
        v63 = 0;
        xpc_release(v92);
      }
      break;
    case 10:
      v61 = xpc_string_create((const char *)*MEMORY[0x1E0CFB4C0]);
      if (!v61)
        v61 = xpc_null_create();
      v41 = *MEMORY[0x1E0CFB410];
      v99 = a2;
      v100 = v41;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v61, &v62);
      xpc_release(v62);
      v62 = 0;
      xpc_release(v61);
      v61 = 0;
      v59 = xpc_string_create((const char *)*MEMORY[0x1E0CFB820]);
      if (!v59)
        v59 = xpc_null_create();
      v42 = *MEMORY[0x1E0CFB7B0];
      v99 = a2;
      v100 = v42;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v59, &v60);
      xpc_release(v60);
      v60 = 0;
      xpc_release(v59);
      v59 = 0;
      break;
    case 14:
      v57 = xpc_string_create((const char *)*MEMORY[0x1E0CFB6F8]);
      if (!v57)
        v57 = xpc_null_create();
      v43 = *MEMORY[0x1E0CFB410];
      v99 = a2;
      v100 = v43;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v57, &v58);
      xpc_release(v58);
      v58 = 0;
      xpc_release(v57);
      v57 = 0;
      v55 = xpc_string_create((const char *)*MEMORY[0x1E0CFBD38]);
      if (!v55)
        v55 = xpc_null_create();
      v44 = *MEMORY[0x1E0CFB7B0];
      v99 = a2;
      v100 = v44;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v55, &v56);
      xpc_release(v56);
      v56 = 0;
      xpc_release(v55);
      v55 = 0;
      break;
    case 15:
      v86 = xpc_string_create((const char *)*MEMORY[0x1E0CFB5B0]);
      if (!v86)
        v86 = xpc_null_create();
      v45 = *MEMORY[0x1E0CFB410];
      v99 = a2;
      v100 = v45;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v86, &v87);
      xpc_release(v87);
      v87 = 0;
      xpc_release(v86);
      v86 = 0;
      v84 = xpc_string_create((const char *)*MEMORY[0x1E0CFB818]);
      if (!v84)
        v84 = xpc_null_create();
      v46 = *MEMORY[0x1E0CFB7B0];
      v99 = a2;
      v100 = v46;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v84, &v85);
      xpc_release(v85);
      v85 = 0;
      xpc_release(v84);
      v84 = 0;
      break;
    case 16:
      v82 = xpc_string_create((const char *)*MEMORY[0x1E0CFB5B0]);
      if (!v82)
        v82 = xpc_null_create();
      v47 = *MEMORY[0x1E0CFB410];
      v99 = a2;
      v100 = v47;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v82, &v83);
      xpc_release(v83);
      v83 = 0;
      xpc_release(v82);
      v82 = 0;
      v80 = xpc_string_create((const char *)*MEMORY[0x1E0CFB800]);
      if (!v80)
        v80 = xpc_null_create();
      v48 = *MEMORY[0x1E0CFB7B0];
      v99 = a2;
      v100 = v48;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v80, &v81);
      xpc_release(v81);
      v81 = 0;
      xpc_release(v80);
      v80 = 0;
      break;
    default:
      v53 = xpc_string_create((const char *)*MEMORY[0x1E0CFB840]);
      if (!v53)
        v53 = xpc_null_create();
      v37 = *MEMORY[0x1E0CFB410];
      v99 = a2;
      v100 = v37;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v53, &v54);
      xpc_release(v54);
      v54 = 0;
      xpc_release(v53);
      v53 = 0;
      v51 = xpc_string_create((const char *)*MEMORY[0x1E0CFBD38]);
      if (!v51)
        v51 = xpc_null_create();
      v38 = *MEMORY[0x1E0CFB7B0];
      v99 = a2;
      v100 = v38;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v51, &v52);
      xpc_release(v52);
      v52 = 0;
      xpc_release(v51);
      v51 = 0;
      break;
  }
  xpc_release(v16);
  return 1;
}

void sub_1BF41ED94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,xpc_object_t object)
{
  void *v23;

  xpc_release(object);
  xpc_release(v23);
  _Unwind_Resume(a1);
}

void abm::_ParseEurekaQMI(xpc_object_t *a1)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t object;
  void *__p;
  void **p_p;
  uint64_t v10;
  char v11;
  void *v12[3];

  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v3) != MEMORY[0x1E0C812F8])
  {
    v4 = xpc_null_create();
LABEL_8:
    *a1 = v4;
    goto LABEL_9;
  }
  xpc_retain(v3);
LABEL_9:
  xpc_release(v3);
  memset(v12, 170, sizeof(v12));
  xpc::dyn_cast_or_default();
  __p = 0;
  p_p = &__p;
  v10 = 0x2000000000;
  v11 = 0;
  if (v12[1] == v12[0])
    goto LABEL_14;
  object = *a1;
  if (*a1)
    xpc_retain(*a1);
  else
    object = xpc_null_create();
  qmi::parse();
  xpc_release(object);
  if (!*((_BYTE *)p_p + 24))
  {
LABEL_14:
    v5 = xpc_BOOL_create(1);
    if (!v5)
      v5 = xpc_null_create();
    xpc_dictionary_set_value(*a1, (const char *)*MEMORY[0x1E0CFBF78], v5);
    v6 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v6);
  }
  _Block_object_dispose(&__p, 8);
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
}

void sub_1BF41F1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object, uint64_t a16, uint64_t a17)
{
  xpc_object_t *v17;
  uint64_t v18;
  void *v20;

  xpc_release(object);
  _Block_object_dispose(&a16, 8);
  v20 = *(void **)(v18 - 56);
  if (v20)
  {
    *(_QWORD *)(v18 - 48) = v20;
    operator delete(v20);
  }
  xpc::dict::~dict(v17);
  _Unwind_Resume(a1);
}

void ___ZN3abmL15_ParseEurekaQMIEN3xpc6objectE_block_invoke(uint64_t a1, uint64_t a2, unsigned __int16 *a3, int a4, int a5)
{
  uint64_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  const char *v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned __int16 v26;
  unsigned __int8 *v27;
  char *v28;
  uint64_t *v29;
  _QWORD *v30;
  unsigned int v31;
  unint64_t v32;
  size_t v33;
  char *v34;
  char *v35;
  uint64_t *v36;
  uint64_t **v37;
  uint64_t **v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t **v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t **v45;
  uint64_t *v46;
  uint64_t **v47;
  BOOL v48;
  unsigned int v49;
  uint64_t **v50;
  uint64_t ***v51;
  uint64_t **v52;
  unsigned int v53;
  _QWORD *v54;
  char v55;
  uint64_t *v56;
  uint64_t *v57;
  size_t v58;
  char *v59;
  char *v60;
  uint64_t *v61;
  uint64_t **v62;
  uint64_t **v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t **v66;
  unsigned int v67;
  uint64_t *v68;
  _BYTE *v69;
  _BYTE *v70;
  size_t v71;
  _BYTE *v72;
  xpc_object_t v73;
  xpc_object_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t **v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t **v80;
  uint64_t *v81;
  uint64_t v82;
  unint64_t v83;

  v9 = a1;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  v10 = xpc_int64_create(*(unsigned __int16 *)(a2 + 2));
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)(v9 + 40), (const char *)*MEMORY[0x1E0CFBA00], v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  v12 = xpc_int64_create(*(unsigned __int8 *)(a2 + 6));
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)(v9 + 40), (const char *)*MEMORY[0x1E0CFBBC8], v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  v14 = xpc_int64_create(*(unsigned __int8 *)(a2 + 5));
  if (!v14)
    v14 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)(v9 + 40), (const char *)*MEMORY[0x1E0CFBDD8], v14);
  v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  v16 = (const char *)qmi::asString();
  v17 = xpc_string_create(v16);
  if (!v17)
    v17 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)(v9 + 40), (const char *)*MEMORY[0x1E0CFBB20], v17);
  v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  if (a3 && a5 >= 2)
  {
    v19 = xpc_int64_create(*a3);
    if (!v19)
      v19 = xpc_null_create();
    xpc_dictionary_set_value(*(xpc_object_t *)(v9 + 40), (const char *)*MEMORY[0x1E0CFB8F0], v19);
    v20 = xpc_null_create();
    xpc_release(v19);
    xpc_release(v20);
  }
  v21 = 0;
  if (*(_BYTE *)a2 != 1 || *(unsigned __int8 *)(a2 + 4) != 128 || *(_BYTE *)(a2 + 5) != 5)
    goto LABEL_106;
  v21 = 0;
  if (a5 >= a4)
    v22 = a4;
  else
    v22 = a5;
  v82 = 0;
  v80 = &v81;
  v81 = 0;
  v83 = 0xAAAAAAAA00000000;
  v23 = (v22 - 4);
  if (v22 < 4)
    goto LABEL_105;
  v24 = *a3;
  LOWORD(v83) = *a3;
  v25 = a3[1];
  WORD1(v83) = a3[1];
  if (v22 >= 8)
  {
    v26 = 0;
    v27 = (unsigned __int8 *)(a3 + 2);
    v75 = v9;
    v76 = v23 - 3;
    while (1)
    {
      v31 = *v27;
      v32 = *(unsigned __int16 *)(v27 + 1);
      if (v76 - (unint64_t)v26 >= v32)
        v33 = *(unsigned __int16 *)(v27 + 1);
      else
        v33 = v76 - v26;
      if (v33)
      {
        v34 = (char *)operator new(v33);
        v35 = &v34[v33];
        bzero(v34, v33);
      }
      else
      {
        v34 = 0;
        v35 = 0;
      }
      memcpy(v34, v27 + 3, v33);
      v36 = v81;
      v37 = &v81;
LABEL_34:
      v38 = v37;
      if (v36)
      {
        while (1)
        {
          v37 = (uint64_t **)v36;
          v39 = *((unsigned __int8 *)v36 + 32);
          if (v31 < v39)
          {
            v36 = *v37;
            goto LABEL_34;
          }
          if (v39 >= v31)
            break;
          v36 = v37[1];
          if (!v36)
          {
            v38 = v37 + 1;
            goto LABEL_39;
          }
        }
        v28 = (char *)v37;
        v30 = v37 + 5;
        v29 = v37[5];
        if (!v29)
          goto LABEL_25;
      }
      else
      {
LABEL_39:
        v28 = (char *)operator new(0x40uLL);
        v28[32] = v31;
        *((_QWORD *)v28 + 6) = 0;
        *((_QWORD *)v28 + 7) = 0;
        *((_QWORD *)v28 + 5) = 0;
        *(_QWORD *)v28 = 0;
        *((_QWORD *)v28 + 1) = 0;
        *((_QWORD *)v28 + 2) = v37;
        *v38 = (uint64_t *)v28;
        v40 = (uint64_t *)v28;
        if (*v80)
        {
          v80 = (uint64_t **)*v80;
          v40 = *v38;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v81, v40);
        ++v82;
        v30 = v28 + 40;
        v29 = (uint64_t *)*((_QWORD *)v28 + 5);
        if (!v29)
          goto LABEL_25;
      }
      *((_QWORD *)v28 + 6) = v29;
      operator delete(v29);
      *v30 = 0;
      v30[1] = 0;
      v30[2] = 0;
LABEL_25:
      v27 += (v32 + 3);
      v26 += v32 + 3;
      *((_QWORD *)v28 + 5) = v34;
      *((_QWORD *)v28 + 6) = v35;
      *((_QWORD *)v28 + 7) = v35;
      if (v26 + 3 >= (int)v23)
      {
        v25 = WORD1(v83);
        v24 = (unsigned __int16)v83;
        v9 = v75;
        break;
      }
    }
  }
  v21 = 0;
  if (!v25 || v24 != 1)
    goto LABEL_105;
  v41 = v9;
  v78 = 0;
  v79 = 0;
  v77 = &v78;
  v42 = v80;
  if (v80 == &v81)
  {
    v43 = 0;
LABEL_103:
    v9 = v41;
    goto LABEL_104;
  }
  do
  {
    v44 = v78;
    v45 = &v78;
    if (v77 == &v78)
      goto LABEL_55;
    v46 = v78;
    v47 = &v78;
    if (v78)
    {
      do
      {
        v45 = (uint64_t **)v46;
        v46 = (uint64_t *)v46[1];
      }
      while (v46);
    }
    else
    {
      do
      {
        v45 = (uint64_t **)v47[2];
        v48 = *v45 == (uint64_t *)v47;
        v47 = v45;
      }
      while (v48);
    }
    v49 = *((unsigned __int8 *)v42 + 32);
    if (*((unsigned __int8 *)v45 + 32) < v49)
    {
LABEL_55:
      if (v78)
        v50 = v45;
      else
        v50 = &v78;
      if (v78)
        v51 = (uint64_t ***)v45;
      else
        v51 = &v77;
      if (v78)
        v52 = v45 + 1;
      else
        v52 = &v78;
      if (v51[1])
        goto LABEL_79;
LABEL_73:
      v54 = operator new(0x40uLL);
      v55 = *((_BYTE *)v42 + 32);
      v54[5] = 0;
      *((_BYTE *)v54 + 32) = v55;
      v54[6] = 0;
      v54[7] = 0;
      v57 = v42[5];
      v56 = v42[6];
      v58 = (char *)v56 - (char *)v57;
      if (v56 != v57)
      {
        if ((v58 & 0x8000000000000000) != 0)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v59 = (char *)operator new((char *)v56 - (char *)v57);
        v54[5] = v59;
        v54[6] = v59;
        v60 = &v59[v58];
        v54[7] = &v59[v58];
        memcpy(v59, v57, v58);
        v54[6] = v60;
      }
      *v54 = 0;
      v54[1] = 0;
      v54[2] = v50;
      *v52 = v54;
      if (*v77)
      {
        v77 = (uint64_t **)*v77;
        v54 = *v52;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v78, v54);
      ++v79;
      goto LABEL_79;
    }
    v52 = &v78;
    v50 = &v78;
    if (!v78)
      goto LABEL_73;
    while (1)
    {
      while (1)
      {
        v50 = (uint64_t **)v44;
        v53 = *((unsigned __int8 *)v44 + 32);
        if (v53 <= v49)
          break;
        v44 = *v50;
        v52 = v50;
        if (!*v50)
          goto LABEL_73;
      }
      if (v53 >= v49)
        break;
      v44 = v50[1];
      if (!v44)
      {
        v52 = v50 + 1;
        goto LABEL_73;
      }
    }
LABEL_79:
    v61 = v42[1];
    if (v61)
    {
      do
      {
        v62 = (uint64_t **)v61;
        v61 = (uint64_t *)*v61;
      }
      while (v61);
    }
    else
    {
      do
      {
        v62 = (uint64_t **)v42[2];
        v48 = *v62 == (uint64_t *)v42;
        v42 = v62;
      }
      while (!v48);
    }
    v42 = v62;
  }
  while (v62 != &v81);
  v43 = v78;
  if (!v78)
    goto LABEL_103;
  v63 = &v78;
  v64 = v78;
  v9 = v41;
  do
  {
    v65 = v64;
    v66 = v63;
    v67 = *((unsigned __int8 *)v64 + 32);
    if (v67 >= 0x11)
      v63 = (uint64_t **)v64;
    else
      ++v64;
    v64 = (uint64_t *)*v64;
  }
  while (v64);
  if (v63 != &v78)
  {
    v68 = v67 >= 0x11 ? v65 : (uint64_t *)v66;
    if (*((unsigned __int8 *)v68 + 32) <= 0x11u)
    {
      if (v67 < 0x11)
        v65 = (uint64_t *)v66;
      v70 = (_BYTE *)v65[5];
      v69 = (_BYTE *)v65[6];
      v71 = v69 - v70;
      if (v69 != v70)
      {
        if ((v71 & 0x8000000000000000) != 0)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v72 = operator new(v69 - v70);
        memcpy(v72, v70, v71);
        if (v71 >= 6 && v72[5] == 7)
        {
          operator delete(v72);
          std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(v78);
          v21 = 1;
          goto LABEL_105;
        }
        operator delete(v72);
        v43 = v78;
      }
    }
  }
LABEL_104:
  std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(v43);
  v21 = 0;
LABEL_105:
  std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(v81);
LABEL_106:
  v73 = xpc_BOOL_create(v21);
  if (!v73)
    v73 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)(v9 + 40), (const char *)*MEMORY[0x1E0CFB8E8], v73);
  v74 = xpc_null_create();
  xpc_release(v73);
  xpc_release(v74);
}

void sub_1BF41F904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17, uint64_t a18, uint64_t a19, _QWORD *a20)
{
  if (__p)
  {
    operator delete(__p);
    std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(a17);
    std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(a20);
    _Unwind_Resume(a1);
  }
  std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(a17);
  std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(a20);
  _Unwind_Resume(a1);
}

void sub_1BF41FA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20)
{
  std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(a20);
  _Unwind_Resume(a1);
}

void sub_1BF41FA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20)
{
  void *v20;

  if (v20)
    operator delete(v20);
  std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(a20);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(a1[1]);
    v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

const char *RouterIPCController::asString(unsigned int a1)
{
  if (a1 > 3)
    return "Unknown";
  else
    return off_1E7904D58[a1];
}

void RouterIPCController::create(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  _QWORD v10[2];

  v4 = operator new(0xB8uLL);
  v5 = (uint64_t)v4;
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  v10[0] = v6;
  v10[1] = v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  RouterIPCController::RouterIPCController((uint64_t)v4, v10);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<RouterIPCController>::shared_ptr[abi:ne180100]<RouterIPCController,std::shared_ptr<RouterIPCController> ctu::SharedSynchronizable<RouterIPCController>::make_shared_ptr<RouterIPCController>(RouterIPCController*)::{lambda(RouterIPCController*)#1},void>(a2, v5);
  ctu::Loggable<RouterIPCController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF41FB6C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

uint64_t RouterIPCController::RouterIPCController(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *initially_inactive;
  NSObject *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  RouterDelegate *v17;
  capabilities::abs *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _BYTE v32[16];
  uint64_t block;
  uint64_t v34;
  void (*v35)(uint64_t);
  void *v36;
  __int128 *v37;
  _BYTE v38[16];

  *(_QWORD *)a1 = off_1E7904AD0;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v32, "com.apple.telephony.abm", "ipc.router.ctrl");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  block = MEMORY[0x1E0C809B0];
  v34 = 0x40000000;
  v35 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v36 = &__block_descriptor_tmp_13_2;
  v37 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v5 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v6 = GetABMLogServer(void)::sLogServer;
    if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_4;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v5 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v6 = GetABMLogServer(void)::sLogServer;
    if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
    {
LABEL_4:
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v10 = dispatch_queue_create_with_target_V2("ipc.router.ctrl", initially_inactive, 0);
  dispatch_set_qos_class_floor(v10, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v10);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v10;
  if (v10)
  {
    dispatch_retain(v10);
    *(_QWORD *)(a1 + 96) = 0;
    dispatch_release(v10);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_QWORD *)a1 = off_1E7904BA8;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&block);
  *(_QWORD *)(a1 + 8) = &unk_1E78FB900;
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v5;
  if (v5)
  {
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v38);
    *(_QWORD *)a1 = off_1E7904C38;
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v38);
    *(_QWORD *)a1 = off_1E7904C38;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v32);
  *(_QWORD *)a1 = off_1E7904AD0;
  *(_QWORD *)(a1 + 104) = *a2;
  v14 = a2[1];
  *(_QWORD *)(a1 + 112) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 16);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = (RouterDelegate *)operator new(0x58uLL);
  RouterDelegate::RouterDelegate(v17);
  *(_QWORD *)(a1 + 120) = v17;
  v18 = (capabilities::abs *)operator new(0x20uLL);
  *(_QWORD *)v18 = off_1E79060C8;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *((_QWORD *)v18 + 3) = v17;
  *(_QWORD *)(a1 + 128) = v18;
  v20 = *((_QWORD *)v17 + 9);
  v19 = (std::__shared_weak_count *)*((_QWORD *)v17 + 10);
  if (v19)
  {
    v21 = (unint64_t *)&v19->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = capabilities::abs::QMIPacketMaxSizeBytes(v18);
  block = v20;
  v34 = (uint64_t)v19;
  if (v19)
  {
    v24 = (unint64_t *)&v19->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v35 = (void (*)(uint64_t))v23;
  ATCSRouterIPCDriver::create();
  v26 = (std::__shared_weak_count *)v34;
  if (v34)
  {
    v27 = (unint64_t *)(v34 + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v19)
  {
    v29 = (unint64_t *)&v19->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_DWORD *)(a1 + 176) = 0;
  return a1;
}

void sub_1BF41FF48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v3);
  v5 = (std::__shared_weak_count *)v2[14];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  ctu::SharedLoggable<RouterIPCController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v2);
  _Unwind_Resume(a1);
}

void sub_1BF41FFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v5 - 80));
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v4);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedLoggable<RouterIPCController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7904BA8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7904BA8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void RouterIPCController::~RouterIPCController(RouterIPCController *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  NSObject *v9;
  NSObject *v10;
  std::__shared_weak_count *v11;

  *(_QWORD *)this = off_1E7904AD0;
  std::__tree<std::__value_type<int,QMux>,std::__map_value_compare<int,std::__value_type<int,QMux>,std::less<int>,true>,std::allocator<std::__value_type<int,QMux>>>::destroy(*((_QWORD **)this + 20));
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  *(_QWORD *)this = off_1E7904BA8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v9 = *((_QWORD *)this + 12);
  if (v9)
    dispatch_release(v9);
  v10 = *((_QWORD *)this + 11);
  if (v10)
    dispatch_release(v10);
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
}

{
  void *v1;

  RouterIPCController::~RouterIPCController(this);
  operator delete(v1);
}

const char *RouterIPCController::getName(RouterIPCController *this)
{
  return "ipc.router.ctrl";
}

uint64_t RouterIPCController::activate(RouterIPCController *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v5;
  int v6;
  const char *v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v6) = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Activating", (uint8_t *)&v6, 2u);
  }
  if (*((_DWORD *)this + 44))
  {
    v5 = GetOsLogContext()[1];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      v6 = 136315906;
      v7 = "ABM ASSERT";
      v8 = 2080;
      v9 = "fState == State::kOffline";
      v10 = 2080;
      v11 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Ser"
            "ver/Transport/QMI/Driver/RouterIPCController.cpp";
      v12 = 1024;
      v13 = 56;
      _os_log_fault_impl(&dword_1BF335000, v5, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", (uint8_t *)&v6, 0x26u);
    }
    __break(1u);
  }
  v3 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 136315394;
    v7 = "kOffline";
    v8 = 2080;
    v9 = "kDisengaged";
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I IPC state changing from %s -> %s", (uint8_t *)&v6, 0x16u);
  }
  *((_DWORD *)this + 44) = 2;
  return 1;
}

void RouterIPCController::changeState_sync(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  int v8;
  const char *v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(int *)(a1 + 176);
    if (v5 > 3)
    {
      v6 = "Unknown";
      if (a2 > 3)
        goto LABEL_4;
    }
    else
    {
      v6 = off_1E7904D58[v5];
      if (a2 > 3)
      {
LABEL_4:
        v7 = "Unknown";
LABEL_7:
        v8 = 136315394;
        v9 = v6;
        v10 = 2080;
        v11 = v7;
        _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I IPC state changing from %s -> %s", (uint8_t *)&v8, 0x16u);
        goto LABEL_8;
      }
    }
    v7 = off_1E7904D58[a2];
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(a1 + 176) = a2;
}

void RouterIPCController::engage(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  NSObject *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = v20;
  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      v21 = v20;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v20);
    }
    else
    {
      v21 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    v21 = 0;
  }
  v5 = (std::__shared_weak_count *)a1[10];
  if (!v5 || (v6 = a1[9], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v9 = operator new(0x28uLL);
  v10 = v9;
  v11 = v21;
  *v9 = a1;
  if (v11)
  {
    if (v11 == v20)
    {
      v9[4] = v9 + 1;
      (*(void (**)(_QWORD *))(v20[0] + 24))(v20);
    }
    else
    {
      v9[4] = v11;
      v21 = 0;
    }
  }
  else
  {
    v9[4] = 0;
  }
  v12 = a1[11];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  v15 = operator new(0x18uLL);
  *v15 = v10;
  v15[1] = v6;
  v15[2] = v8;
  dispatch_async_f(v12, v15, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<RouterIPCController>::execute_wrapped<RouterIPCController::engage(std::function<void ()(BOOL,std::string)>)::$_0>(RouterIPCController::engage(std::function<void ()(BOOL,std::string)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RouterIPCController::engage(std::function<void ()(BOOL,std::string)>)::$_0,std::default_delete<RouterIPCController::engage(std::function<void ()(BOOL,std::string)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v17 = v21;
    if (v21 != v20)
      goto LABEL_19;
LABEL_22:
    v18 = 4;
    goto LABEL_23;
  }
  v17 = v21;
  if (v21 == v20)
    goto LABEL_22;
LABEL_19:
  if (!v17)
    return;
  v18 = 5;
  v3 = v17;
LABEL_23:
  (*(void (**)(_QWORD *))(*v3 + 8 * v18))(v3);
}

void sub_1BF4205A8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void RouterIPCController::recover(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  NSObject *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = v20;
  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      v21 = v20;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v20);
    }
    else
    {
      v21 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    v21 = 0;
  }
  v5 = (std::__shared_weak_count *)a1[10];
  if (!v5 || (v6 = a1[9], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v9 = operator new(0x28uLL);
  v10 = v9;
  v11 = v21;
  *v9 = a1;
  if (v11)
  {
    if (v11 == v20)
    {
      v9[4] = v9 + 1;
      (*(void (**)(_QWORD *))(v20[0] + 24))(v20);
    }
    else
    {
      v9[4] = v11;
      v21 = 0;
    }
  }
  else
  {
    v9[4] = 0;
  }
  v12 = a1[11];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  v15 = operator new(0x18uLL);
  *v15 = v10;
  v15[1] = v6;
  v15[2] = v8;
  dispatch_async_f(v12, v15, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<RouterIPCController>::execute_wrapped<RouterIPCController::recover(std::function<void ()(BOOL)>)::$_0>(RouterIPCController::recover(std::function<void ()(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RouterIPCController::recover(std::function<void ()(BOOL)>)::$_0,std::default_delete<RouterIPCController::recover(std::function<void ()(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v17 = v21;
    if (v21 != v20)
      goto LABEL_19;
LABEL_22:
    v18 = 4;
    goto LABEL_23;
  }
  v17 = v21;
  if (v21 == v20)
    goto LABEL_22;
LABEL_19:
  if (!v17)
    return;
  v18 = 5;
  v3 = v17;
LABEL_23:
  (*(void (**)(_QWORD *))(*v3 + 8 * v18))(v3);
}

void sub_1BF420790(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void RouterIPCController::teardown(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  NSObject *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = v20;
  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      v21 = v20;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v20);
    }
    else
    {
      v21 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    v21 = 0;
  }
  v5 = (std::__shared_weak_count *)a1[10];
  if (!v5 || (v6 = a1[9], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v9 = operator new(0x28uLL);
  v10 = v9;
  v11 = v21;
  *v9 = a1;
  if (v11)
  {
    if (v11 == v20)
    {
      v9[4] = v9 + 1;
      (*(void (**)(_QWORD *))(v20[0] + 24))(v20);
    }
    else
    {
      v9[4] = v11;
      v21 = 0;
    }
  }
  else
  {
    v9[4] = 0;
  }
  v12 = a1[11];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  v15 = operator new(0x18uLL);
  *v15 = v10;
  v15[1] = v6;
  v15[2] = v8;
  dispatch_async_f(v12, v15, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<RouterIPCController>::execute_wrapped<RouterIPCController::teardown(std::function<void ()(BOOL)>)::$_0>(RouterIPCController::teardown(std::function<void ()(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RouterIPCController::teardown(std::function<void ()(BOOL)>)::$_0,std::default_delete<RouterIPCController::teardown(std::function<void ()(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v17 = v21;
    if (v21 != v20)
      goto LABEL_19;
LABEL_22:
    v18 = 4;
    goto LABEL_23;
  }
  v17 = v21;
  if (v21 == v20)
    goto LABEL_22;
LABEL_19:
  if (!v17)
    return;
  v18 = 5;
  v3 = v17;
LABEL_23:
  (*(void (**)(_QWORD *))(*v3 + 8 * v18))(v3);
}

void sub_1BF420978(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void RouterIPCController::sleep(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  NSObject *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = v20;
  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      v21 = v20;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v20);
    }
    else
    {
      v21 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    v21 = 0;
  }
  v5 = (std::__shared_weak_count *)a1[10];
  if (!v5 || (v6 = a1[9], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v9 = operator new(0x28uLL);
  v10 = v9;
  v11 = v21;
  *v9 = a1;
  if (v11)
  {
    if (v11 == v20)
    {
      v9[4] = v9 + 1;
      (*(void (**)(_QWORD *))(v20[0] + 24))(v20);
    }
    else
    {
      v9[4] = v11;
      v21 = 0;
    }
  }
  else
  {
    v9[4] = 0;
  }
  v12 = a1[11];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  v15 = operator new(0x18uLL);
  *v15 = v10;
  v15[1] = v6;
  v15[2] = v8;
  dispatch_async_f(v12, v15, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<RouterIPCController>::execute_wrapped<RouterIPCController::sleep(std::function<void ()(BOOL)>)::$_0>(RouterIPCController::sleep(std::function<void ()(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RouterIPCController::sleep(std::function<void ()(BOOL)>)::$_0,std::default_delete<RouterIPCController::sleep(std::function<void ()(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v17 = v21;
    if (v21 != v20)
      goto LABEL_19;
LABEL_22:
    v18 = 4;
    goto LABEL_23;
  }
  v17 = v21;
  if (v21 == v20)
    goto LABEL_22;
LABEL_19:
  if (!v17)
    return;
  v18 = 5;
  v3 = v17;
LABEL_23:
  (*(void (**)(_QWORD *))(*v3 + 8 * v18))(v3);
}

void sub_1BF420B60(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void RouterIPCController::wake(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  NSObject *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = v20;
  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      v21 = v20;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v20);
    }
    else
    {
      v21 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    v21 = 0;
  }
  v5 = (std::__shared_weak_count *)a1[10];
  if (!v5 || (v6 = a1[9], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v9 = operator new(0x28uLL);
  v10 = v9;
  v11 = v21;
  *v9 = a1;
  if (v11)
  {
    if (v11 == v20)
    {
      v9[4] = v9 + 1;
      (*(void (**)(_QWORD *))(v20[0] + 24))(v20);
    }
    else
    {
      v9[4] = v11;
      v21 = 0;
    }
  }
  else
  {
    v9[4] = 0;
  }
  v12 = a1[11];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  v15 = operator new(0x18uLL);
  *v15 = v10;
  v15[1] = v6;
  v15[2] = v8;
  dispatch_async_f(v12, v15, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<RouterIPCController>::execute_wrapped<RouterIPCController::wake(std::function<void ()(BOOL)>)::$_0>(RouterIPCController::wake(std::function<void ()(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RouterIPCController::wake(std::function<void ()(BOOL)>)::$_0,std::default_delete<RouterIPCController::wake(std::function<void ()(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v17 = v21;
    if (v21 != v20)
      goto LABEL_19;
LABEL_22:
    v18 = 4;
    goto LABEL_23;
  }
  v17 = v21;
  if (v21 == v20)
    goto LABEL_22;
LABEL_19:
  if (!v17)
    return;
  v18 = 5;
  v3 = v17;
LABEL_23:
  (*(void (**)(_QWORD *))(*v3 + 8 * v18))(v3);
}

void sub_1BF420D48(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

BOOL RouterIPCController::setup_sync(RouterIPCController *this)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  RouterIPCController *v18;
  RouterIPCController *v20;
  RouterIPCController *v21;
  BOOL v22;
  _BOOL8 result;
  NSObject *v24;
  NSObject *v25;
  int v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  int v33;
  _BYTE v34[24];
  _BYTE *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((int *)this + 44);
    if (v3 > 3)
      v4 = "Unknown";
    else
      v4 = off_1E7904D58[v3];
    v26 = 136315138;
    v27 = v4;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I IPC state is  %s", (uint8_t *)&v26, 0xCu);
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v5 || (v6 = *((_QWORD *)this + 9), (v7 = std::__shared_weak_count::lock(v5)) == 0))
LABEL_38:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  v13 = *((_QWORD *)this + 17);
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v35 = 0;
  v15 = operator new(0x20uLL);
  *v15 = &off_1E7904C78;
  v15[1] = this;
  v15[2] = v6;
  v15[3] = v8;
  v35 = v15;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v13 + 72))(v13, v34);
  v16 = v35;
  if (v35 == v34)
  {
    v17 = 4;
    v16 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_21;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_21:
  ATCSRouterIPCDriver::resetErrorState(*((ATCSRouterIPCDriver **)this + 17));
  if (*((_DWORD *)this + 44))
  {
    v18 = (RouterIPCController *)*((_QWORD *)this + 19);
    if (v18 == (RouterIPCController *)((char *)this + 160))
    {
LABEL_35:
      std::__shared_weak_count::__release_weak(v8);
      return 1;
    }
    while (*((_QWORD *)v18 + 5) ? QMux::BOOL_true_type : 0)
    {
      QMux::setDriverAndCookie();
      v20 = (RouterIPCController *)*((_QWORD *)v18 + 1);
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = *(RouterIPCController **)v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (RouterIPCController *)*((_QWORD *)v18 + 2);
          v22 = *(_QWORD *)v21 == (_QWORD)v18;
          v18 = v21;
        }
        while (!v22);
      }
      v18 = v21;
      if (v21 == (RouterIPCController *)((char *)this + 160))
        goto LABEL_35;
    }
    v24 = GetOsLogContext()[1];
    result = os_log_type_enabled(v24, OS_LOG_TYPE_FAULT);
    if (result)
    {
      v26 = 136315906;
      v27 = "ABM ASSERT";
      v28 = 2080;
      v29 = "dispatcher";
      v30 = 2080;
      v31 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Ser"
            "ver/Transport/QMI/Driver/RouterIPCController.cpp";
      v32 = 1024;
      v33 = 148;
      _os_log_fault_impl(&dword_1BF335000, v24, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", (uint8_t *)&v26, 0x26u);
      __break(1u);
      goto LABEL_38;
    }
  }
  else
  {
    v25 = GetOsLogContext()[1];
    result = os_log_type_enabled(v25, OS_LOG_TYPE_FAULT);
    if (result)
    {
      v26 = 136315906;
      v27 = "ABM ASSERT";
      v28 = 2080;
      v29 = "fState != State::kOffline";
      v30 = 2080;
      v31 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Ser"
            "ver/Transport/QMI/Driver/RouterIPCController.cpp";
      v32 = 1024;
      v33 = 144;
      _os_log_fault_impl(&dword_1BF335000, v25, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", (uint8_t *)&v26, 0x26u);
      __break(1u);
    }
  }
  __break(1u);
  return result;
}

void sub_1BF4210BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void sub_1BF4210D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void sub_1BF4210E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  std::__shared_weak_count *v17;
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a17;
  if (a17 == v18)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
    {
      std::__shared_weak_count::__release_weak(v17);
      _Unwind_Resume(a1);
    }
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
  std::__shared_weak_count::__release_weak(v17);
  _Unwind_Resume(a1);
}

BOOL RouterIPCController::engage_sync(RouterIPCController *this)
{
  NSObject *v2;
  _BOOL8 v3;
  NSObject *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  char *v11;
  char *v12;
  BOOL v13;
  NSObject *v14;
  int v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v15) = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Engaging", (uint8_t *)&v15, 2u);
  }
  if (*((_DWORD *)this + 44) != 2)
  {
    v14 = GetOsLogContext()[1];
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    {
      v15 = 136315906;
      v16 = "ABM ASSERT";
      v17 = 2080;
      v18 = "fState == State::kDisengaged";
      v19 = 2080;
      v20 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Ser"
            "ver/Transport/QMI/Driver/RouterIPCController.cpp";
      v21 = 1024;
      v22 = 158;
      _os_log_fault_impl(&dword_1BF335000, v14, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", (uint8_t *)&v15, 0x26u);
    }
    __break(1u);
  }
  RouterIPCController::setup_sync(this);
  v3 = RouterDelegate::engage(*((RouterDelegate **)this + 15));
  v4 = *((_QWORD *)this + 5);
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *((int *)this + 44);
      if (v7 > 3)
        v8 = "Unknown";
      else
        v8 = off_1E7904D58[v7];
      v15 = 136315394;
      v16 = v8;
      v17 = 2080;
      v18 = "kEngaged";
      _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I IPC state changing from %s -> %s", (uint8_t *)&v15, 0x16u);
      *((_DWORD *)this + 44) = 1;
      v5 = (char *)*((_QWORD *)this + 19);
      v6 = (char *)this + 160;
      if (v5 == (char *)this + 160)
        goto LABEL_14;
    }
    else
    {
      *((_DWORD *)this + 44) = 1;
      v5 = (char *)*((_QWORD *)this + 19);
      v6 = (char *)this + 160;
      if (v5 == (char *)this + 160)
      {
LABEL_14:
        v9 = *((_QWORD *)this + 5);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v15) = 0;
          _os_log_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEFAULT, "#I Finished engaging", (uint8_t *)&v15, 2u);
        }
        return v3;
      }
    }
    do
    {
      QMux::start((QMux *)(v5 + 40));
      v11 = (char *)*((_QWORD *)v5 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (char *)*((_QWORD *)v5 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v5;
          v5 = v12;
        }
        while (!v13);
      }
      v5 = v12;
    }
    while (v12 != v6);
    goto LABEL_14;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v15) = 0;
    _os_log_error_impl(&dword_1BF335000, v4, OS_LOG_TYPE_ERROR, "Failed to engage router", (uint8_t *)&v15, 2u);
  }
  return v3;
}

uint64_t RouterIPCController::startWorkers_sync(RouterIPCController *this)
{
  _QWORD *v1;
  char *v2;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  v1 = (_QWORD *)*((_QWORD *)this + 19);
  v2 = (char *)this + 160;
  if (v1 != (_QWORD *)((char *)this + 160))
  {
    do
    {
      QMux::start((QMux *)(v1 + 5));
      v4 = (_QWORD *)v1[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)v1[2];
          v6 = *v5 == (_QWORD)v1;
          v1 = v5;
        }
        while (!v6);
      }
      v1 = v5;
    }
    while (v5 != (_QWORD *)v2);
  }
  return 1;
}

uint64_t RouterIPCController::recover_sync(RouterIPCController *this)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  NSObject *v7;
  int v8;
  const char *v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v8) = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Recovering", (uint8_t *)&v8, 2u);
  }
  if (*((_DWORD *)this + 44))
  {
    v7 = GetOsLogContext()[1];
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      goto LABEL_16;
    v8 = 136315906;
    v9 = "ABM ASSERT";
    v10 = 2080;
    v11 = "fState == State::kOffline";
    v12 = 2080;
    v13 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Serve"
          "r/Transport/QMI/Driver/RouterIPCController.cpp";
    v14 = 1024;
    v15 = 185;
    goto LABEL_15;
  }
  if (!RouterDelegate::recover(*((RouterDelegate **)this + 15)))
  {
    v7 = GetOsLogContext()[1];
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      goto LABEL_16;
    v8 = 136315906;
    v9 = "ABM ASSERT";
    v10 = 2080;
    v11 = "success";
    v12 = 2080;
    v13 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Serve"
          "r/Transport/QMI/Driver/RouterIPCController.cpp";
    v14 = 1024;
    v15 = 187;
LABEL_15:
    _os_log_fault_impl(&dword_1BF335000, v7, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", (uint8_t *)&v8, 0x26u);
LABEL_16:
    __break(1u);
  }
  v3 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *((int *)this + 44);
    if (v4 > 3)
      v5 = "Unknown";
    else
      v5 = off_1E7904D58[v4];
    v8 = 136315394;
    v9 = v5;
    v10 = 2080;
    v11 = "kDisengaged";
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I IPC state changing from %s -> %s", (uint8_t *)&v8, 0x16u);
  }
  *((_DWORD *)this + 44) = 2;
  return 1;
}

uint64_t RouterIPCController::teardown_sync(RouterIPCController *this)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  int v7;
  const char *v8;
  __int16 v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v7) = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Tearing down", (uint8_t *)&v7, 2u);
  }
  RouterIPCController::stopWorkers_sync(this);
  v3 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *((int *)this + 44);
    if (v4 > 3)
      v5 = "Unknown";
    else
      v5 = off_1E7904D58[v4];
    v7 = 136315394;
    v8 = v5;
    v9 = 2080;
    v10 = "kOffline";
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I IPC state changing from %s -> %s", (uint8_t *)&v7, 0x16u);
  }
  *((_DWORD *)this + 44) = 0;
  RouterDelegate::teardown(*((RouterDelegate **)this + 15));
  return 1;
}

void RouterIPCController::stopWorkers_sync(RouterIPCController *this)
{
  uint64_t v2;
  RouterIPCController *v3;
  RouterIPCController *v4;
  RouterIPCController *v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  NSObject *v9;
  uint8_t v10[8];
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 17);
  if (v2)
  {
    v3 = (RouterIPCController *)*((_QWORD *)this + 19);
    if (v3 != (RouterIPCController *)((char *)this + 160))
    {
      do
      {
        QMux::setDriverAndCookie();
        QMux::stop((RouterIPCController *)((char *)v3 + 40));
        v4 = (RouterIPCController *)*((_QWORD *)v3 + 1);
        if (v4)
        {
          do
          {
            v5 = v4;
            v4 = *(RouterIPCController **)v4;
          }
          while (v4);
        }
        else
        {
          do
          {
            v5 = (RouterIPCController *)*((_QWORD *)v3 + 2);
            v6 = *(_QWORD *)v5 == (_QWORD)v3;
            v3 = v5;
          }
          while (!v6);
        }
        v3 = v5;
      }
      while (v5 != (RouterIPCController *)((char *)this + 160));
      v2 = *((_QWORD *)this + 17);
    }
    v12 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 72))(v2, v11);
    v7 = v12;
    if (v12 == v11)
    {
      v8 = 4;
      v7 = v11;
    }
    else
    {
      if (!v12)
        return;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  else
  {
    v9 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEFAULT, "#I No ipc driver", v10, 2u);
    }
  }
}

void sub_1BF42193C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL RouterIPCController::sleep_sync(RouterIPCController *this)
{
  NSObject *v2;
  _BOOL8 v3;
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  NSObject *v8;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v9) = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Sleeping", (uint8_t *)&v9, 2u);
  }
  if (*((_DWORD *)this + 44) != 1)
  {
    v8 = GetOsLogContext()[1];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
    {
      v9 = 136315906;
      v10 = "ABM ASSERT";
      v11 = 2080;
      v12 = "fState == State::kEngaged";
      v13 = 2080;
      v14 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Ser"
            "ver/Transport/QMI/Driver/RouterIPCController.cpp";
      v15 = 1024;
      v16 = 204;
      _os_log_fault_impl(&dword_1BF335000, v8, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", (uint8_t *)&v9, 0x26u);
    }
    __break(1u);
  }
  (*(void (**)(_QWORD))(**((_QWORD **)this + 17) + 24))(*((_QWORD *)this + 17));
  v3 = RouterDelegate::sleep(*((RouterDelegate **)this + 15));
  v4 = *((_QWORD *)this + 5);
  if (v3)
  {
    if (os_log_type_enabled(*((os_log_t *)this + 5), OS_LOG_TYPE_DEFAULT))
    {
      v5 = *((int *)this + 44);
      if (v5 > 3)
        v6 = "Unknown";
      else
        v6 = off_1E7904D58[v5];
      v9 = 136315394;
      v10 = v6;
      v11 = 2080;
      v12 = "kSleep";
      _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I IPC state changing from %s -> %s", (uint8_t *)&v9, 0x16u);
    }
    *((_DWORD *)this + 44) = 3;
  }
  else if (os_log_type_enabled(*((os_log_t *)this + 5), OS_LOG_TYPE_ERROR))
  {
    LOWORD(v9) = 0;
    _os_log_error_impl(&dword_1BF335000, v4, OS_LOG_TYPE_ERROR, "Failed to sleep", (uint8_t *)&v9, 2u);
  }
  return v3;
}

BOOL RouterIPCController::wake_sync(RouterIPCController *this)
{
  NSObject *v2;
  _BOOL8 v3;
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  NSObject *v7;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v9) = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Waking", (uint8_t *)&v9, 2u);
  }
  if (*((_DWORD *)this + 44) != 3)
  {
    v7 = GetOsLogContext()[1];
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      goto LABEL_18;
    v9 = 136315906;
    v10 = "ABM ASSERT";
    v11 = 2080;
    v12 = "fState == State::kSleep";
    v13 = 2080;
    v14 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Serve"
          "r/Transport/QMI/Driver/RouterIPCController.cpp";
    v15 = 1024;
    v16 = 219;
    goto LABEL_17;
  }
  v3 = RouterDelegate::wake(*((RouterDelegate **)this + 15));
  if (!v3)
  {
    if (RouterDelegate::hasFatalErrorOccurred(*((RouterDelegate **)this + 15)))
      goto LABEL_14;
    v7 = GetOsLogContext()[1];
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
LABEL_18:
      __break(1u);
    v9 = 136315906;
    v10 = "ABM ASSERT";
    v11 = 2080;
    v12 = "fRouterDelegate->hasFatalErrorOccurred()";
    v13 = 2080;
    v14 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Serve"
          "r/Transport/QMI/Driver/RouterIPCController.cpp";
    v15 = 1024;
    v16 = 224;
LABEL_17:
    _os_log_fault_impl(&dword_1BF335000, v7, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", (uint8_t *)&v9, 0x26u);
    goto LABEL_18;
  }
  v4 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *((int *)this + 44);
    if (v5 > 3)
      v6 = "Unknown";
    else
      v6 = off_1E7904D58[v5];
    v9 = 136315394;
    v10 = v6;
    v11 = 2080;
    v12 = "kEngaged";
    _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I IPC state changing from %s -> %s", (uint8_t *)&v9, 0x16u);
  }
  *((_DWORD *)this + 44) = 1;
LABEL_14:
  (*(void (**)(_QWORD))(**((_QWORD **)this + 17) + 32))(*((_QWORD *)this + 17));
  return v3;
}

void RouterIPCController::createQMuxChannels(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W3>, QMux *a4@<X8>)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  char v9;
  _QWORD v10[6];
  _QWORD *v11;
  uint64_t block;
  uint64_t v13;
  void (*v14)(uint64_t);
  void *v15;
  uint64_t v16;
  _QWORD *v17;

  v9 = a3;
  v8[0] = a1;
  v8[1] = a2;
  v4 = MEMORY[0x1E0C809B0];
  v8[2] = &v9;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = ___ZNK3ctu20SharedSynchronizableI19RouterIPCControllerE20execute_wrapped_syncIZNS1_18createQMuxChannelsERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbbE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSE__block_invoke;
  v10[3] = &__block_descriptor_tmp_21;
  v10[4] = a1 + 72;
  v10[5] = v8;
  v11 = v10;
  v5 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(a1 + 96))
  {
    *(_QWORD *)a4 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)a4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    QMux::QMux(a4);
    block = v4;
    v13 = 0x40000000;
    v14 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerF4QMuxvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEE_block_invoke;
    v15 = &__block_descriptor_tmp_21_3;
    v16 = v6;
    v17 = &v11;
    dispatch_async_and_wait(v5, &block);
  }
  else
  {
    *(_QWORD *)a4 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)a4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    QMux::QMux(a4);
    block = v4;
    v13 = 0x40000000;
    v14 = ___ZN8dispatch9sync_implIRU13block_pointerF4QMuxvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEE_block_invoke;
    v15 = &__block_descriptor_tmp_20_2;
    v16 = v7;
    v17 = &v11;
    dispatch_sync(v5, &block);
  }
}

uint64_t ctu::Loggable<RouterIPCController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<RouterIPCController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<RouterIPCController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<RouterIPCController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7904BA8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<RouterIPCController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7904BA8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::Loggable<RouterIPCController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF42212C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF422148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<RouterIPCController>::shared_ptr[abi:ne180100]<RouterIPCController,std::shared_ptr<RouterIPCController> ctu::SharedSynchronizable<RouterIPCController>::make_shared_ptr<RouterIPCController>(RouterIPCController*)::{lambda(RouterIPCController*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E7904BE8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF422264(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<RouterIPCController> ctu::SharedSynchronizable<RouterIPCController>::make_shared_ptr<RouterIPCController>(RouterIPCController*)::{lambda(RouterIPCController*)#1}::operator() const(RouterIPCController*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF422284(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<RouterIPCController *,std::shared_ptr<RouterIPCController> ctu::SharedSynchronizable<RouterIPCController>::make_shared_ptr<RouterIPCController>(RouterIPCController*)::{lambda(RouterIPCController *)#1},std::allocator<RouterIPCController>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<RouterIPCController *,std::shared_ptr<RouterIPCController> ctu::SharedSynchronizable<RouterIPCController>::make_shared_ptr<RouterIPCController>(RouterIPCController*)::{lambda(RouterIPCController *)#1},std::allocator<RouterIPCController>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<RouterIPCController> ctu::SharedSynchronizable<RouterIPCController>::make_shared_ptr<RouterIPCController>(RouterIPCController*)::{lambda(RouterIPCController*)#1}::operator() const(RouterIPCController*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<RouterIPCController *,std::shared_ptr<RouterIPCController> ctu::SharedSynchronizable<RouterIPCController>::make_shared_ptr<RouterIPCController>(RouterIPCController*)::{lambda(RouterIPCController *)#1},std::allocator<RouterIPCController>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI19RouterIPCControllerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI19RouterIPCControllerE15make_shared_ptrIS1_EENSt3__110share"
                                "d_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI19RouterIPCControllerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI19RouterIPCControllerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<RouterIPCController> ctu::SharedSynchronizable<RouterIPCController>::make_shared_ptr<RouterIPCController>(RouterIPCController*)::{lambda(RouterIPCController*)#1}::operator() const(RouterIPCController*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedLoggable<RouterIPCController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7904BA8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void std::__tree<std::__value_type<int,QMux>,std::__map_value_compare<int,std::__value_type<int,QMux>,std::less<int>,true>,std::allocator<std::__value_type<int,QMux>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,QMux>,std::__map_value_compare<int,std::__value_type<int,QMux>,std::less<int>,true>,std::allocator<std::__value_type<int,QMux>>>::destroy(*a1);
    std::__tree<std::__value_type<int,QMux>,std::__map_value_compare<int,std::__value_type<int,QMux>,std::less<int>,true>,std::allocator<std::__value_type<int,QMux>>>::destroy(a1[1]);
    QMux::~QMux((QMux *)(a1 + 5));
    operator delete(a1);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<RouterIPCController>::execute_wrapped<RouterIPCController::engage(std::function<void ()(BOOL,std::string)>)::$_0>(RouterIPCController::engage(std::function<void ()(BOOL,std::string)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RouterIPCController::engage(std::function<void ()(BOOL,std::string)>)::$_0,std::default_delete<RouterIPCController::engage(std::function<void ()(BOOL,std::string)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p[2];
  uint64_t v13;
  BOOL v14;

  v2 = *a1;
  v3 = **a1;
  if (RouterDelegate::hasFatalErrorOccurred(*(RouterDelegate **)(v3 + 120)))
  {
    RouterDelegate::getFatalErrorReason(*(RouterDelegate **)(v3 + 120), (uint64_t *)__p);
    v14 = 0;
    v4 = v2[4];
    if (!v4)
      std::__throw_bad_function_call[abi:ne180100]();
  }
  else
  {
    v5 = *(_DWORD *)(v3 + 176) == 2 && RouterIPCController::engage_sync((RouterIPCController *)v3);
    __p[0] = 0;
    __p[1] = 0;
    v13 = 0;
    v14 = v5;
    v4 = v2[4];
    if (!v4)
      std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, BOOL *, void **))(*(_QWORD *)v4 + 48))(v4, &v14, __p);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    v6 = v2 + 1;
    v7 = (uint64_t *)v2[4];
    if (v7 != v2 + 1)
      goto LABEL_10;
LABEL_13:
    v8 = 4;
    v7 = v6;
    goto LABEL_14;
  }
  operator delete(__p[0]);
  v6 = v2 + 1;
  v7 = (uint64_t *)v2[4];
  if (v7 == v2 + 1)
    goto LABEL_13;
LABEL_10:
  if (v7)
  {
    v8 = 5;
LABEL_14:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  operator delete(v2);
  v9 = (std::__shared_weak_count *)a1[2];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(a1);
}

void sub_1BF422590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  if (a14 < 0)
    operator delete(__p);
  v17 = (_QWORD *)v15[4];
  if (v17 == v15 + 1)
  {
    v18 = 4;
    v17 = v15 + 1;
  }
  else
  {
    if (!v17)
      goto LABEL_8;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_8:
  operator delete(v15);
  v19 = (std::__shared_weak_count *)v14[2];
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  operator delete(v14);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<RouterIPCController>::execute_wrapped<RouterIPCController::recover(std::function<void ()(BOOL)>)::$_0>(RouterIPCController::recover(std::function<void ()(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RouterIPCController::recover(std::function<void ()(BOOL)>)::$_0,std::default_delete<RouterIPCController::recover(std::function<void ()(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(RouterIPCController ***a1)
{
  RouterIPCController **v2;
  RouterIPCController *v3;
  RouterIPCController *v4;
  RouterIPCController **v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v10;

  v2 = *a1;
  v3 = **a1;
  if (!*((_DWORD *)v3 + 44))
    RouterIPCController::recover_sync(v3);
  v10 = 1;
  v4 = v2[4];
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(RouterIPCController *, char *))(*(_QWORD *)v4 + 48))(v4, &v10);
  v5 = (RouterIPCController **)v2[4];
  if (v5 == v2 + 1)
  {
    v6 = 4;
    v5 = v2 + 1;
    goto LABEL_8;
  }
  if (v5)
  {
    v6 = 5;
LABEL_8:
    (*((void (**)(void))*v5 + v6))();
  }
  operator delete(v2);
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  operator delete(a1);
}

void sub_1BF422714(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = (_QWORD *)v2[4];
  if (v4 == v2 + 1)
  {
    v5 = 4;
    v4 = v2 + 1;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  operator delete(v2);
  v6 = (std::__shared_weak_count *)v1[2];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<RouterIPCController>::execute_wrapped<RouterIPCController::teardown(std::function<void ()(BOOL)>)::$_0>(RouterIPCController::teardown(std::function<void ()(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RouterIPCController::teardown(std::function<void ()(BOOL)>)::$_0,std::default_delete<RouterIPCController::teardown(std::function<void ()(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(RouterIPCController ***a1)
{
  RouterIPCController **v2;
  RouterIPCController *v3;
  int v4;
  RouterIPCController *v5;
  RouterIPCController **v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char v11;

  v2 = *a1;
  v3 = **a1;
  v4 = *((_DWORD *)v3 + 44);
  if (v4)
  {
    if (v4 == 3)
      RouterIPCController::wake_sync(**a1);
    RouterIPCController::teardown_sync(v3);
  }
  v11 = 1;
  v5 = v2[4];
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(RouterIPCController *, char *))(*(_QWORD *)v5 + 48))(v5, &v11);
  v6 = (RouterIPCController **)v2[4];
  if (v6 == v2 + 1)
  {
    v7 = 4;
    v6 = v2 + 1;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*((void (**)(void))*v6 + v7))();
  }
  operator delete(v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

void sub_1BF42288C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = (_QWORD *)v2[4];
  if (v4 == v2 + 1)
  {
    v5 = 4;
    v4 = v2 + 1;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  operator delete(v2);
  v6 = (std::__shared_weak_count *)v1[2];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<RouterIPCController>::execute_wrapped<RouterIPCController::sleep(std::function<void ()(BOOL)>)::$_0>(RouterIPCController::sleep(std::function<void ()(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RouterIPCController::sleep(std::function<void ()(BOOL)>)::$_0,std::default_delete<RouterIPCController::sleep(std::function<void ()(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(RouterIPCController ***a1)
{
  RouterIPCController **v2;
  RouterIPCController *v3;
  BOOL v4;
  RouterIPCController *v5;
  RouterIPCController **v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  BOOL v11;

  v2 = *a1;
  v3 = **a1;
  v4 = *((_DWORD *)v3 + 44) == 1 && RouterIPCController::sleep_sync(v3);
  v11 = v4;
  v5 = v2[4];
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(RouterIPCController *, BOOL *))(*(_QWORD *)v5 + 48))(v5, &v11);
  v6 = (RouterIPCController **)v2[4];
  if (v6 == v2 + 1)
  {
    v7 = 4;
    v6 = v2 + 1;
    goto LABEL_9;
  }
  if (v6)
  {
    v7 = 5;
LABEL_9:
    (*((void (**)(void))*v6 + v7))();
  }
  operator delete(v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

void sub_1BF4229F8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = (_QWORD *)v2[4];
  if (v4 == v2 + 1)
  {
    v5 = 4;
    v4 = v2 + 1;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  operator delete(v2);
  v6 = (std::__shared_weak_count *)v1[2];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<RouterIPCController>::execute_wrapped<RouterIPCController::wake(std::function<void ()(BOOL)>)::$_0>(RouterIPCController::wake(std::function<void ()(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RouterIPCController::wake(std::function<void ()(BOOL)>)::$_0,std::default_delete<RouterIPCController::wake(std::function<void ()(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(RouterIPCController ***a1)
{
  RouterIPCController **v2;
  RouterIPCController *v3;
  BOOL v4;
  RouterIPCController *v5;
  RouterIPCController **v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  BOOL v11;

  v2 = *a1;
  v3 = **a1;
  v4 = *((_DWORD *)v3 + 44) == 3 && RouterIPCController::wake_sync(v3);
  v11 = v4;
  v5 = v2[4];
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(RouterIPCController *, BOOL *))(*(_QWORD *)v5 + 48))(v5, &v11);
  v6 = (RouterIPCController **)v2[4];
  if (v6 == v2 + 1)
  {
    v7 = 4;
    v6 = v2 + 1;
    goto LABEL_9;
  }
  if (v6)
  {
    v7 = 5;
LABEL_9:
    (*((void (**)(void))*v6 + v7))();
  }
  operator delete(v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

void sub_1BF422B64(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = (_QWORD *)v2[4];
  if (v4 == v2 + 1)
  {
    v5 = 4;
    v4 = v2 + 1;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  operator delete(v2);
  v6 = (std::__shared_weak_count *)v1[2];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<RouterIPCController::setup_sync(void)::$_0,std::allocator<RouterIPCController::setup_sync(void)::$_0>,void ()(std::string)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E7904C78;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<RouterIPCController::setup_sync(void)::$_0,std::allocator<RouterIPCController::setup_sync(void)::$_0>,void ()(std::string)>::~__func(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_1E7904C78;
  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

char *std::__function::__func<RouterIPCController::setup_sync(void)::$_0,std::allocator<RouterIPCController::setup_sync(void)::$_0>,void ()(std::string)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E7904C78;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<RouterIPCController::setup_sync(void)::$_0,std::allocator<RouterIPCController::setup_sync(void)::$_0>,void ()(std::string)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E7904C78;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<RouterIPCController::setup_sync(void)::$_0,std::allocator<RouterIPCController::setup_sync(void)::$_0>,void ()(std::string)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<RouterIPCController::setup_sync(void)::$_0,std::allocator<RouterIPCController::setup_sync(void)::$_0>,void ()(std::string)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<RouterIPCController::setup_sync(void)::$_0,std::allocator<RouterIPCController::setup_sync(void)::$_0>,void ()(std::string)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  void **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  void **v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  void *__p[2];
  uint64_t v19;
  uint8_t buf[4];
  void **v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v19 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v3 = (std::__shared_weak_count *)a1[3];
  if (!v3)
    goto LABEL_22;
  v4 = (_QWORD *)a1[1];
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    goto LABEL_22;
  v6 = v5;
  if (a1[2])
  {
    v7 = v4[5];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = __p;
      if (v19 < 0)
        v8 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v21 = v8;
      _os_log_impl(&dword_1BF335000, v7, OS_LOG_TYPE_DEFAULT, "#I Triggering fatal error for '%s'", buf, 0xCu);
    }
    v9 = (std::__shared_weak_count *)v4[14];
    if (v9)
    {
      v10 = std::__shared_weak_count::lock(v9);
      if (v10)
      {
        v11 = v10;
        v12 = v4[13];
        if (v12)
        {
          if (v19 >= 0)
            v13 = __p;
          else
            v13 = (void **)__p[0];
          (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v12 + 16))(v12, v13, 1);
        }
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
  }
  v16 = (unint64_t *)&v6->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
  {
LABEL_22:
    if ((SHIBYTE(v19) & 0x80000000) == 0)
      return;
    goto LABEL_23;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (SHIBYTE(v19) < 0)
LABEL_23:
    operator delete(__p[0]);
}

void sub_1BF422ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  v19 = (unint64_t *)&v14->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
    if ((a14 & 0x80000000) == 0)
      goto LABEL_9;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if ((a14 & 0x80000000) == 0)
LABEL_9:
      _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<RouterIPCController::setup_sync(void)::$_0,std::allocator<RouterIPCController::setup_sync(void)::$_0>,void ()(std::string)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19RouterIPCController10setup_syncEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19RouterIPCController10setup_syncEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19RouterIPCController10setup_syncEvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19RouterIPCController10setup_syncEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<RouterIPCController::setup_sync(void)::$_0,std::allocator<RouterIPCController::setup_sync(void)::$_0>,void ()(std::string)>::target_type()
{
}

void ___ZNK3ctu20SharedSynchronizableI19RouterIPCControllerE20execute_wrapped_syncIZNS1_18createQMuxChannelsERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbbE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSE__block_invoke(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  int ChannelForService;
  int v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  const char *v13;
  size_t v14;
  size_t v15;
  _BYTE *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t **v25;
  uint64_t name_as_cstr;
  unint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t **v30;
  int v31;
  uint64_t *v32;
  uint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t **v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  _BYTE __dst[24];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v3 = *(uint64_t **)(a1 + 40);
  v4 = *v3;
  ChannelForService = RouterDelegate::getChannelForService(*(_QWORD *)(*v3 + 120), (uint64_t *)v3[1]);
  v6 = ChannelForService;
  v8 = (uint64_t **)(v4 + 160);
  v7 = *(_QWORD *)(v4 + 160);
  if (v7)
  {
    v9 = v4 + 160;
    do
    {
      v10 = *(_DWORD *)(v7 + 32);
      v11 = v10 < ChannelForService;
      if (v10 >= ChannelForService)
        v12 = (uint64_t *)v7;
      else
        v12 = (uint64_t *)(v7 + 8);
      if (!v11)
        v9 = v7;
      v7 = *v12;
    }
    while (*v12);
    if ((uint64_t **)v9 != v8 && ChannelForService >= *(_DWORD *)(v9 + 32))
    {
      v37 = *(NSObject **)(v4 + 40);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        v38 = (uint64_t **)v3[1];
        if (*((char *)v38 + 23) < 0)
          v38 = (uint64_t **)*v38;
        *(_DWORD *)__dst = 136315394;
        *(_QWORD *)&__dst[4] = v38;
        *(_WORD *)&__dst[12] = 2080;
        *(_QWORD *)&__dst[14] = mav_router_channel_get_name_as_cstr();
        _os_log_impl(&dword_1BF335000, v37, OS_LOG_TYPE_DEFAULT, "#I Reusing QMux for service %s, channel %s", __dst, 0x16u);
      }
      *a2 = *(_QWORD *)(v9 + 40);
      v39 = *(_QWORD *)(v9 + 48);
      a2[1] = v39;
      if (v39)
      {
        v40 = (unint64_t *)(v39 + 8);
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      return;
    }
  }
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v13 = (const char *)v3[1];
  if (v13[23] < 0)
    v13 = *(const char **)v13;
  v14 = strlen(v13);
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v18 = v14 | 7;
    v19 = v18 + 1;
    v16 = operator new(v18 + 1);
    *(_QWORD *)&__dst[8] = v15;
    *(_QWORD *)&__dst[16] = v19 | 0x8000000000000000;
    *(_QWORD *)__dst = v16;
  }
  else
  {
    __dst[23] = v14;
    v16 = __dst;
    if (!v14)
    {
      __dst[0] = 0;
      v17 = *(std::__shared_weak_count **)(v4 + 112);
      v42 = *(_QWORD *)(v4 + 104);
      v43 = v17;
      if (!v17)
        goto LABEL_24;
      goto LABEL_22;
    }
  }
  memmove(v16, v13, v15);
  v16[v15] = 0;
  v17 = *(std::__shared_weak_count **)(v4 + 112);
  v42 = *(_QWORD *)(v4 + 104);
  v43 = v17;
  if (!v17)
    goto LABEL_24;
LABEL_22:
  p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
  do
    v21 = __ldxr(p_shared_weak_owners);
  while (__stxr(v21 + 1, p_shared_weak_owners));
LABEL_24:
  MEMORY[0x1C3B89948](a2, 0, 0, __dst, &v42, *(unsigned __int8 *)v3[2], 0);
  if (v43)
    std::__shared_weak_count::__release_weak(v43);
  if ((__dst[23] & 0x80000000) == 0)
  {
    v22 = *(NSObject **)(v4 + 40);
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      goto LABEL_28;
LABEL_31:
    v25 = (uint64_t **)v3[1];
    if (*((char *)v25 + 23) < 0)
      v25 = (uint64_t **)*v25;
    name_as_cstr = mav_router_channel_get_name_as_cstr();
    *(_DWORD *)__dst = 136315394;
    *(_QWORD *)&__dst[4] = v25;
    *(_WORD *)&__dst[12] = 2080;
    *(_QWORD *)&__dst[14] = name_as_cstr;
    _os_log_impl(&dword_1BF335000, v22, OS_LOG_TYPE_DEFAULT, "#I Creating new QMux for service %s, channel %s", __dst, 0x16u);
    *(_DWORD *)__dst = v6;
    v24 = *a2;
    v23 = a2[1];
    *(_QWORD *)&__dst[8] = *a2;
    *(_QWORD *)&__dst[16] = v23;
    if (!v23)
      goto LABEL_36;
    goto LABEL_34;
  }
  operator delete(*(void **)__dst);
  v22 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    goto LABEL_31;
LABEL_28:
  *(_DWORD *)__dst = v6;
  v24 = *a2;
  v23 = a2[1];
  *(_QWORD *)&__dst[8] = *a2;
  *(_QWORD *)&__dst[16] = v23;
  if (v23)
  {
LABEL_34:
    v27 = (unint64_t *)(v23 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
LABEL_36:
  v29 = *v8;
  v30 = (uint64_t **)(v4 + 160);
  if (*v8)
  {
    while (1)
    {
      while (1)
      {
        v30 = (uint64_t **)v29;
        v31 = *((_DWORD *)v29 + 8);
        if (v6 >= v31)
          break;
        v29 = *v30;
        v8 = v30;
        if (!*v30)
          goto LABEL_43;
      }
      if (v31 >= v6)
        break;
      v29 = v30[1];
      if (!v29)
      {
        v8 = v30 + 1;
        goto LABEL_43;
      }
    }
  }
  else
  {
LABEL_43:
    v32 = (uint64_t *)operator new(0x38uLL);
    v33 = v32;
    *((_DWORD *)v32 + 8) = v6;
    v32[5] = v24;
    v32[6] = v23;
    if (v23)
    {
      v34 = (unint64_t *)(v23 + 8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    *v32 = 0;
    v32[1] = 0;
    v32[2] = (uint64_t)v30;
    *v8 = v32;
    v36 = **(_QWORD **)(v4 + 152);
    if (v36)
    {
      *(_QWORD *)(v4 + 152) = v36;
      v33 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v4 + 160), v33);
    ++*(_QWORD *)(v4 + 168);
  }
  QMux::~QMux((QMux *)&__dst[8]);
}

void sub_1BF4233A4(_Unwind_Exception *a1)
{
  QMux *v1;

  QMux::~QMux(v1);
  _Unwind_Resume(a1);
}

void sub_1BF4233B8(_Unwind_Exception *a1)
{
  QMux *v1;
  QMux *v2;

  QMux::~QMux(v2);
  QMux::~QMux(v1);
  _Unwind_Resume(a1);
}

void sub_1BF4233D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN8dispatch9sync_implIRU13block_pointerF4QMuxvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 40) + 16))(&v10);
  v2 = *(_QWORD **)(a1 + 32);
  v4 = v10;
  v3 = v11;
  if (v11)
  {
    v5 = (unint64_t *)(v11 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)v2[1];
  *v2 = v4;
  v2[1] = v3;
  if (!v7)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    QMux::~QMux((QMux *)&v10);
  }
  else
  {
LABEL_8:
    QMux::~QMux((QMux *)&v10);
  }
}

void ___ZN8dispatch19async_and_wait_implIRU13block_pointerF4QMuxvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 40) + 16))(&v10);
  v2 = *(_QWORD **)(a1 + 32);
  v4 = v10;
  v3 = v11;
  if (v11)
  {
    v5 = (unint64_t *)(v11 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)v2[1];
  *v2 = v4;
  v2[1] = v3;
  if (!v7)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    QMux::~QMux((QMux *)&v10);
  }
  else
  {
LABEL_8:
    QMux::~QMux((QMux *)&v10);
  }
}

_QWORD *ABMServerRegistryBuilder::create@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = operator new(0x28uLL);
  result[1] = 0;
  result[2] = 0;
  *result = off_1E7904D88;
  v6 = *a1;
  v5 = a1[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  result[3] = v6;
  result[4] = v5;
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

__n128 ABMServerRegistryBuilder::ABMServerRegistryBuilder(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

void ABMServerRegistryBuilder::~ABMServerRegistryBuilder(ABMServerRegistryBuilder *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ABMServerRegistryBuilder::setupQMIServer(uint64_t a1, Registry **a2, uint64_t *a3)
{
  _QWORD **RegistryModel;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;

  RegistryModel = (_QWORD **)Registry::getRegistryModel(*a2);
  v6 = *RegistryModel;
  if (!**RegistryModel)
  {
    v7 = *a3;
    if (*a3)
    {
      v8 = a3[1];
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v11 = (std::__shared_weak_count *)v6[1];
      *v6 = v7;
      v6[1] = v8;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    else
    {
      (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)a1 + 8))(&v21);
      v14 = v21;
      v21 = 0uLL;
      v15 = (std::__shared_weak_count *)v6[1];
      *(_OWORD *)v6 = v14;
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
      if (*((_QWORD *)&v21 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
  }
}

void ABMServerRegistryBuilder::setupRouterServer(uint64_t a1, Registry **a2, uint64_t *a3)
{
  uint64_t RegistryModel;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;

  RegistryModel = Registry::getRegistryModel(*a2);
  v6 = *(_QWORD *)RegistryModel;
  if (!*(_QWORD *)(*(_QWORD *)RegistryModel + 16))
  {
    v7 = *a3;
    if (*a3)
    {
      v8 = a3[1];
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v11 = *(std::__shared_weak_count **)(v6 + 24);
      *(_QWORD *)(v6 + 16) = v7;
      *(_QWORD *)(v6 + 24) = v8;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    else
    {
      (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)a1 + 16))(&v21);
      v14 = v21;
      v21 = 0uLL;
      v15 = *(std::__shared_weak_count **)(v6 + 24);
      *(_OWORD *)(v6 + 16) = v14;
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
      if (*((_QWORD *)&v21 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
  }
}

void std::__shared_ptr_emplace<ABMServerRegistryBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E7904D88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ABMServerRegistryBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E7904D88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<ABMServerRegistryBuilder>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ResetInfo::ResetInfo(ResetInfo *this)
{
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0;
}

{
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0;
}

uint64_t ResetInfo::ResetInfo(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, int a6, __int128 *a7)
{
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string __p;
  __int128 v17;
  uint64_t v18;

  v18 = 0;
  ctu::cf::assign();
  *(_OWORD *)a1 = 0uLL;
  *(_QWORD *)(a1 + 16) = v18;
  v17 = 0uLL;
  v18 = 0;
  ctu::cf::assign();
  *(_OWORD *)(a1 + 24) = 0uLL;
  *(_QWORD *)(a1 + 40) = v18;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v12 = *a4;
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 48) = v12;
  }
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    __p = *(std::string *)a5;
  *(_QWORD *)(a1 + 72) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    *(_DWORD *)(a1 + 80) = a6;
    v13 = (std::string *)(a1 + 88);
    if ((*((char *)a7 + 23) & 0x80000000) == 0)
      goto LABEL_9;
LABEL_11:
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a7, *((_QWORD *)a7 + 1));
    return a1;
  }
  *(_DWORD *)(a1 + 80) = a6;
  v13 = (std::string *)(a1 + 88);
  if (*((char *)a7 + 23) < 0)
    goto LABEL_11;
LABEL_9:
  v14 = *a7;
  v13->__r_.__value_.__r.__words[2] = *((_QWORD *)a7 + 2);
  *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  return a1;
}

void sub_1BF423B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  void **v21;

  if (*(char *)(v20 + 47) < 0)
    operator delete(*v21);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

void ResetInfo::ResetInfo(std::string *this, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t a5, int a6, __int128 *a7)
{
  __int128 v13;
  std::string *v14;
  __int128 v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string __p;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v14 = this + 1;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v13 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v13;
    v14 = this + 1;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      v15 = *a3;
      v14->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
LABEL_6:
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v16 = *a4;
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v16;
  }
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    __p = *(std::string *)a5;
  this[3].__r_.__value_.__r.__words[0] = (std::string::size_type)Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    LODWORD(this[3].__r_.__value_.__r.__words[1]) = a6;
    v17 = (std::string *)((char *)this + 88);
    if ((*((char *)a7 + 23) & 0x80000000) == 0)
      goto LABEL_14;
  }
  else
  {
    LODWORD(this[3].__r_.__value_.__r.__words[1]) = a6;
    v17 = (std::string *)((char *)this + 88);
    if ((*((char *)a7 + 23) & 0x80000000) == 0)
    {
LABEL_14:
      v18 = *a7;
      v17->__r_.__value_.__r.__words[2] = *((_QWORD *)a7 + 2);
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
      return;
    }
  }
  std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a7, *((_QWORD *)a7 + 1));
}

void sub_1BF423D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void **v15;

  if (*(char *)(v14 + 47) < 0)
  {
    operator delete(*v15);
    if ((*(char *)(v14 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v14 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v14);
  _Unwind_Resume(exception_object);
}

void ResetInfo::~ResetInfo(void **this)
{
  if (*((char *)this + 111) < 0)
  {
    operator delete(this[11]);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 47) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[6]);
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 23) & 0x80000000) == 0)
      return;
LABEL_9:
    operator delete(*this);
    return;
  }
LABEL_8:
  operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    goto LABEL_9;
}

{
  if (*((char *)this + 111) < 0)
  {
    operator delete(this[11]);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 47) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[6]);
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 23) & 0x80000000) == 0)
      return;
LABEL_9:
    operator delete(*this);
    return;
  }
LABEL_8:
  operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    goto LABEL_9;
}

void ResetInfo::getType(ResetInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

void ResetInfo::getSubType(ResetInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
  }
}

void ResetInfo::getReason(ResetInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 6), *((_QWORD *)this + 7));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 3);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 8);
  }
}

void ResetInfo::getTime(ResetInfo *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  _QWORD *v6[2];

  v3 = *((_QWORD *)this + 9);
  v4 = operator new(0x38uLL);
  v4[8] = 0;
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = v6;
  v5 = v4;
  v6[0] = v4;
  *((_BYTE *)v4 + 24) = 1;
  v6[1] = (_QWORD *)1;
  *((_QWORD *)v4 + 5) = v3;
  *((_QWORD *)v4 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v5, 0, 9, a2);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v5, v6[0]);
}

void sub_1BF424048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t ResetInfo::getChronoTime(ResetInfo *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t ResetInfo::getRadar(ResetInfo *this)
{
  return *((unsigned int *)this + 20);
}

void ResetInfo::getCrashReason(ResetInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 111) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 11), *((_QWORD *)this + 12));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 88);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 13);
  }
}

void ResetInfo::setType(ResetInfo *this, const __CFString *a2)
{
  ctu::cf::assign();
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)((char *)this + 15) = 0;
  *((_BYTE *)this + 23) = 0;
}

void sub_1BF42413C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ResetInfo::setSubType(ResetInfo *this, const __CFString *a2)
{
  ctu::cf::assign();
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)((char *)this + 39) = 0;
  *((_BYTE *)this + 47) = 0;
}

void sub_1BF4241F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void **ResetInfo::setReason(uint64_t a1, void **a2)
{
  void **result;
  __int128 v4;
  size_t v5;
  size_t v6;

  result = (void **)(a1 + 48);
  if (result != a2)
  {
    if (*(char *)(a1 + 71) < 0)
    {
      v5 = (size_t)a2[1];
      if (*((char *)a2 + 23) >= 0)
      {
        v6 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (void **)*a2;
        v6 = v5;
      }
      return std::string::__assign_no_alias<false>(result, a2, v6);
    }
    else if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
    {
      return (void **)std::string::__assign_no_alias<true>(result, *a2, (size_t)a2[1]);
    }
    else
    {
      v4 = *(_OWORD *)a2;
      result[2] = a2[2];
      *(_OWORD *)result = v4;
    }
  }
  return result;
}

void ResetInfo::setTime(uint64_t a1, uint64_t a2)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  *(_QWORD *)(a1 + 72) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF4242E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ResetInfo::setRadar(uint64_t result, int a2)
{
  *(_DWORD *)(result + 80) = a2;
  return result;
}

void **ResetInfo::setCrashReason(uint64_t a1, void **a2)
{
  void **result;
  __int128 v4;
  size_t v5;
  size_t v6;

  result = (void **)(a1 + 88);
  if (result != a2)
  {
    if (*(char *)(a1 + 111) < 0)
    {
      v5 = (size_t)a2[1];
      if (*((char *)a2 + 23) >= 0)
      {
        v6 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (void **)*a2;
        v6 = v5;
      }
      return std::string::__assign_no_alias<false>(result, a2, v6);
    }
    else if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
    {
      return (void **)std::string::__assign_no_alias<true>(result, *a2, (size_t)a2[1]);
    }
    else
    {
      v4 = *(_OWORD *)a2;
      result[2] = a2[2];
      *(_OWORD *)result = v4;
    }
  }
  return result;
}

uint64_t ResetInfo::asString@<X0>(ResetInfo *this@<X0>, _BYTE *a2@<X8>)
{
  __int128 v4;
  _QWORD *v5;
  int v6;
  ResetInfo *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  void **v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  char *v23;
  int v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  char v34;
  size_t v35;
  uint64_t v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  void *__p[2];
  unsigned __int8 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  void *v50[2];
  __int128 v51;
  __int128 v52;
  _OWORD v53[9];
  unint64_t v54;
  _QWORD **v55;
  _QWORD *v56;
  uint64_t v57;

  if (ResetInfo::readResetReasonPatterns(void)::sOnce != -1)
    dispatch_once(&ResetInfo::readResetReasonPatterns(void)::sOnce, &__block_literal_global_5);
  v54 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v53[7] = v4;
  v53[8] = v4;
  v53[5] = v4;
  v53[6] = v4;
  v53[3] = v4;
  v53[4] = v4;
  v53[1] = v4;
  v53[2] = v4;
  v52 = v4;
  v53[0] = v4;
  *(_OWORD *)v50 = v4;
  v51 = v4;
  v48 = v4;
  v49 = v4;
  v46 = v4;
  v47 = v4;
  v45 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v45);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"ResetInfo { Type='", 18);
  v6 = *((char *)this + 23);
  if (v6 >= 0)
    v7 = this;
  else
    v7 = *(ResetInfo **)this;
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)this + 23);
  else
    v8 = *((_QWORD *)this + 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, v8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"' SubType='", 11);
  v11 = *((char *)this + 47);
  if (v11 >= 0)
    v12 = (char *)this + 24;
  else
    v12 = (char *)*((_QWORD *)this + 3);
  if (v11 >= 0)
    v13 = *((unsigned __int8 *)this + 47);
  else
    v13 = *((_QWORD *)this + 4);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, v13);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"' Time='", 8);
  v16 = *((_QWORD *)this + 9);
  v56 = 0;
  v57 = 0;
  v55 = &v56;
  v17 = operator new(0x38uLL);
  v17[8] = 0;
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = &v56;
  v55 = (_QWORD **)v17;
  v56 = v17;
  *((_BYTE *)v17 + 24) = 1;
  v57 = 1;
  *((_QWORD *)v17 + 5) = v16;
  *((_QWORD *)v17 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v55, 0, 9, __p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v55, v56);
  if ((v44 & 0x80u) == 0)
    v18 = __p;
  else
    v18 = (void **)__p[0];
  if ((v44 & 0x80u) == 0)
    v19 = v44;
  else
    v19 = (uint64_t)__p[1];
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v18, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"' Radar='", 9);
  v21 = (_QWORD *)std::ostream::operator<<();
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"' Reason='", 10);
  v23 = (char *)this + 48;
  v24 = *((char *)this + 71);
  if (v24 >= 0)
    v25 = (char *)this + 48;
  else
    v25 = (char *)*((_QWORD *)this + 6);
  if (v24 >= 0)
    v26 = *((unsigned __int8 *)this + 71);
  else
    v26 = *((_QWORD *)this + 7);
  v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v25, v26);
  v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"' MTBF='", 8);
  *(_DWORD *)((char *)v28 + *(_QWORD *)(*v28 - 24) + 8) |= 1u;
  ResetInfo::isMTBF((ResetInfo **)this);
  v29 = (_QWORD *)std::ostream::operator<<();
  v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"' SCD='", 7);
  *(_DWORD *)((char *)v30 + *(_QWORD *)(*v30 - 24) + 8) |= 1u;
  ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)v23, (__int128 **)&ResetInfo::sPatternMasks);
  v31 = (_QWORD *)std::ostream::operator<<();
  v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"' COF='", 7);
  *(_DWORD *)((char *)v32 + *(_QWORD *)(*v32 - 24) + 8) |= 1u;
  ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)v23, (__int128 **)&ResetInfo::sPatternMasks);
  v33 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"' }", 3);
  if (((char)v44 & 0x80000000) == 0)
  {
    v34 = BYTE8(v52);
    if ((BYTE8(v52) & 0x10) == 0)
      goto LABEL_29;
LABEL_32:
    v36 = v52;
    if ((unint64_t)v52 < *((_QWORD *)&v49 + 1))
    {
      *(_QWORD *)&v52 = *((_QWORD *)&v49 + 1);
      v36 = *((_QWORD *)&v49 + 1);
    }
    v37 = (const void *)v49;
    v35 = v36 - v49;
    if ((unint64_t)(v36 - v49) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_46;
    goto LABEL_35;
  }
  operator delete(__p[0]);
  v34 = BYTE8(v52);
  if ((BYTE8(v52) & 0x10) != 0)
    goto LABEL_32;
LABEL_29:
  if ((v34 & 8) == 0)
  {
    v35 = 0;
    a2[23] = 0;
    goto LABEL_42;
  }
  v37 = (const void *)*((_QWORD *)&v47 + 1);
  v35 = *((_QWORD *)&v48 + 1) - *((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v48 + 1) - *((_QWORD *)&v47 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_46:
    std::string::__throw_length_error[abi:ne180100]();
LABEL_35:
  if (v35 >= 0x17)
  {
    v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v38 = v35 | 7;
    v39 = v38 + 1;
    v40 = operator new(v38 + 1);
    *((_QWORD *)a2 + 1) = v35;
    *((_QWORD *)a2 + 2) = v39 | 0x8000000000000000;
    *(_QWORD *)a2 = v40;
    a2 = v40;
    goto LABEL_41;
  }
  a2[23] = v35;
  if (v35)
LABEL_41:
    memmove(a2, v37, v35);
LABEL_42:
  a2[v35] = 0;
  *(_QWORD *)&v45 = *MEMORY[0x1E0DE4F50];
  v41 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&v45 + *(_QWORD *)(v45 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v46 = v41;
  *((_QWORD *)&v46 + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v51) < 0)
    operator delete(v50[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3B89E4C](v53);
}

void sub_1BF424780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v5 - 72, *(_QWORD **)(v5 - 64));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF4247A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF4247B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF4247C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void ResetInfo::readResetReasonPatterns(ResetInfo *this)
{
  if (ResetInfo::readResetReasonPatterns(void)::sOnce != -1)
    dispatch_once(&ResetInfo::readResetReasonPatterns(void)::sOnce, &__block_literal_global_5);
}

uint64_t ResetInfo::isMTBF(ResetInfo **this)
{
  char *v2;
  int64_t v3;
  ResetInfo *v4;
  int64_t v5;
  int64_t v6;
  uint64_t result;
  char *v8;
  int v9;
  ResetInfo *v10;
  uint64_t v11;

  v2 = (char *)*MEMORY[0x1E0CFB590];
  if (*((char *)this + 23) < 0)
  {
    v4 = *this;
    v3 = (int64_t)this[1];
    v5 = strlen((const char *)*MEMORY[0x1E0CFB590]);
    if (!v5)
      return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(1, (uint64_t)(this + 6), (__int128 **)&ResetInfo::sPatternMasks) ^ 1;
  }
  else
  {
    v3 = *((unsigned __int8 *)this + 23);
    v4 = (ResetInfo *)this;
    v5 = strlen((const char *)*MEMORY[0x1E0CFB590]);
    if (!v5)
      return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(1, (uint64_t)(this + 6), (__int128 **)&ResetInfo::sPatternMasks) ^ 1;
  }
  v6 = v5;
  if (v3 < v5)
    return 0;
  v8 = (char *)v4 + v3;
  v9 = *v2;
  v10 = v4;
  while (1)
  {
    if (v3 - v6 == -1)
      return 0;
    result = (uint64_t)memchr(v10, v9, v3 - v6 + 1);
    if (!result)
      return result;
    v11 = result;
    result = memcmp((const void *)result, v2, v6);
    if (!(_DWORD)result)
      break;
    v10 = (ResetInfo *)(v11 + 1);
    v3 = (int64_t)&v8[-v11 - 1];
    if (v3 < v6)
      return 0;
  }
  if ((char *)v11 != v8 && v11 - (_QWORD)v4 != -1)
    return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(1, (uint64_t)(this + 6), (__int128 **)&ResetInfo::sPatternMasks) ^ 1;
  return result;
}

uint64_t ResetInfo::shouldSetSCD(ResetInfo *this)
{
  return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)this + 48, (__int128 **)&ResetInfo::sPatternMasks);
}

uint64_t ResetInfo::shouldSetCOF(ResetInfo *this)
{
  return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)this + 48, (__int128 **)&ResetInfo::sPatternMasks);
}

uint64_t ResetInfo::addToDict(uint64_t result, __CFDictionary **a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5)
{
  uint64_t (*v5)(uint64_t);
  uint64_t v7;
  const __CFAllocator *v8;
  __CFDictionary *v9;
  const __CFString **v10;
  const __CFAllocator *v11;
  __CFDictionary *v12;
  const __CFString **v13;
  const __CFAllocator *v14;
  _OWORD *v15;
  __CFDictionary *v16;
  const __CFString **v17;
  uint64_t v18;
  _DWORD *v19;
  const __CFAllocator *v20;
  __CFDictionary *v21;
  const __CFAllocator *v22;
  int isMTBF;
  const __CFAllocator *v24;
  int v25;
  const __CFAllocator *v26;
  int v27;
  const __CFAllocator *v28;
  std::string __p;
  std::string v30;

  if (*a2)
    v5 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  else
    v5 = 0;
  if (v5)
  {
    v7 = result;
    if (ResetInfo::readResetReasonPatterns(void)::sOnce != -1)
      dispatch_once(&ResetInfo::readResetReasonPatterns(void)::sOnce, &__block_literal_global_5);
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v9 = *a2;
    v10 = (const __CFString **)*MEMORY[0x1E0CFB538];
    if (*(char *)(v7 + 23) < 0)
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
    else
      v30 = *(std::string *)v7;
    ctu::cf::update<char const*,std::string>(v9, v10, (uint64_t)&v30, (uint64_t)v8, a5);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v30.__r_.__value_.__l.__data_);
      v12 = *a2;
      v13 = (const __CFString **)*MEMORY[0x1E0CFB8D0];
      if ((*(char *)(v7 + 47) & 0x80000000) == 0)
        goto LABEL_12;
    }
    else
    {
      v12 = *a2;
      v13 = (const __CFString **)*MEMORY[0x1E0CFB8D0];
      if ((*(char *)(v7 + 47) & 0x80000000) == 0)
      {
LABEL_12:
        v30 = *(std::string *)(v7 + 24);
        goto LABEL_15;
      }
    }
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v7 + 24), *(_QWORD *)(v7 + 32));
LABEL_15:
    ctu::cf::update<char const*,std::string>(v12, v13, (uint64_t)&v30, (uint64_t)v8, v11);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    v15 = (_OWORD *)(v7 + 48);
    v16 = *a2;
    v17 = (const __CFString **)*MEMORY[0x1E0CFB788];
    if (*(char *)(v7 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v7 + 48), *(_QWORD *)(v7 + 56));
    }
    else
    {
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *v15;
      v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 64);
    }
    ctu::cf::update<char const*,std::string>(v16, v17, (uint64_t)&v30, (uint64_t)v8, v14);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    v18 = *(_QWORD *)(v7 + 72);
    v19 = operator new(0x38uLL);
    v19[8] = 0;
    *(_QWORD *)v19 = 0;
    *((_QWORD *)v19 + 1) = 0;
    *((_QWORD *)v19 + 2) = &v30.__r_.__value_.__l.__size_;
    v30.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
    v30.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
    *((_BYTE *)v19 + 24) = 1;
    v30.__r_.__value_.__r.__words[2] = 1;
    *((_QWORD *)v19 + 5) = v18;
    *((_QWORD *)v19 + 6) = 0xAAAAAAAA00000000;
    Timestamp::asString((uint64_t)&v30, 0, 9, &__p);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v30, (_QWORD *)v30.__r_.__value_.__l.__size_);
    v21 = *a2;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v30, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v30 = __p;
    ctu::cf::update<char const*,std::string>(v21, (const __CFString **)*MEMORY[0x1E0CFB370], (uint64_t)&v30, (uint64_t)v8, v20);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v30.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_27;
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_27:
      ctu::cf::update<char const*,unsigned int>(*a2, (const __CFString **)*MEMORY[0x1E0CFB010], *(_DWORD *)(v7 + 80), v8, v22);
      isMTBF = ResetInfo::isMTBF((ResetInfo **)v7);
      ctu::cf::update<char const*,BOOL>(*a2, (const __CFString **)*MEMORY[0x1E0CFB780], isMTBF, (uint64_t)v8, v24);
      v25 = ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)v15, (__int128 **)&ResetInfo::sPatternMasks);
      ctu::cf::update<char const*,BOOL>(*a2, (const __CFString **)*MEMORY[0x1E0CFB798], v25, (uint64_t)v8, v26);
      v27 = ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)v15, (__int128 **)&ResetInfo::sPatternMasks);
      return ctu::cf::update<char const*,BOOL>(*a2, (const __CFString **)*MEMORY[0x1E0CFB790], v27, (uint64_t)v8, v28);
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_27;
  }
  return result;
}

void sub_1BF424C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ResetInfo::addToDict(ResetInfo *this, xpc_object_t *a2)
{
  const char *v4;
  xpc_object_t v5;
  xpc_object_t v6;
  const char *v7;
  xpc_object_t v8;
  xpc_object_t v9;
  const char **v10;
  const char *v11;
  xpc_object_t v12;
  xpc_object_t v13;
  uint64_t v14;
  _DWORD *v15;
  void **v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  char isMTBF;
  xpc_object_t v22;
  xpc_object_t v23;
  char v24;
  xpc_object_t v25;
  xpc_object_t v26;
  char v27;
  xpc_object_t v28;
  xpc_object_t v29;
  void *__p[2];
  char v31;
  _DWORD *v32;
  _QWORD *v33[2];

  if (MEMORY[0x1C3B8A86C](*a2) != MEMORY[0x1E0C812F8])
    return;
  if (ResetInfo::readResetReasonPatterns(void)::sOnce != -1)
  {
    dispatch_once(&ResetInfo::readResetReasonPatterns(void)::sOnce, &__block_literal_global_5);
    v4 = (const char *)this;
    if ((*((char *)this + 23) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  v4 = (const char *)this;
  if (*((char *)this + 23) < 0)
LABEL_4:
    v4 = *(const char **)this;
LABEL_5:
  v5 = xpc_string_create(v4);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB538], v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v7 = (char *)this + 24;
  if (*((char *)this + 47) < 0)
    v7 = *(const char **)v7;
  v8 = xpc_string_create(v7);
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB8D0], v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  v10 = (const char **)((char *)this + 48);
  v11 = (char *)this + 48;
  if (*((char *)this + 71) < 0)
    v11 = *v10;
  v12 = xpc_string_create(v11);
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB788], v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  v14 = *((_QWORD *)this + 9);
  v15 = operator new(0x38uLL);
  v15[8] = 0;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = v33;
  v32 = v15;
  v33[0] = v15;
  *((_BYTE *)v15 + 24) = 1;
  v33[1] = (_QWORD *)1;
  *((_QWORD *)v15 + 5) = v14;
  *((_QWORD *)v15 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v32, 0, 9, __p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v32, v33[0]);
  if (v31 >= 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  v17 = xpc_string_create((const char *)v16);
  if (!v17)
    v17 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB370], v17);
  v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  if (v31 < 0)
    operator delete(__p[0]);
  v19 = xpc_int64_create(*((unsigned int *)this + 20));
  if (!v19)
    v19 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB010], v19);
  v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  isMTBF = ResetInfo::isMTBF((ResetInfo **)this);
  v22 = xpc_BOOL_create(isMTBF);
  if (!v22)
    v22 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB780], v22);
  v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  v24 = ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)v10, (__int128 **)&ResetInfo::sPatternMasks);
  v25 = xpc_BOOL_create(v24);
  if (!v25)
    v25 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB798], v25);
  v26 = xpc_null_create();
  xpc_release(v25);
  xpc_release(v26);
  v27 = ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)v10, (__int128 **)&ResetInfo::sPatternMasks);
  v28 = xpc_BOOL_create(v27);
  if (!v28)
    v28 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB790], v28);
  v29 = xpc_null_create();
  xpc_release(v28);
  xpc_release(v29);
}

void sub_1BF425104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void ResetInfo::fetchFromDict(void **this, xpc_object_t *a2)
{
  xpc_object_t value;
  xpc_object_t v5;
  void **v6;
  xpc_object_t v7;
  void **v8;
  xpc_object_t v9;
  xpc_object_t v10;
  void *v11;
  char v12;
  xpc_object_t object;
  __int128 v14;
  void *v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;

  if (MEMORY[0x1C3B8A86C](*a2) != MEMORY[0x1E0C812F8])
    return;
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB538]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  __p = 0;
  v17 = 0;
  v18 = 0;
  xpc::dyn_cast_or_default();
  if (*((char *)this + 23) < 0)
    operator delete(*this);
  *(_OWORD *)this = v14;
  this[2] = v15;
  HIBYTE(v15) = 0;
  LOBYTE(v14) = 0;
  xpc_release(object);
  v5 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB8D0]);
  object = v5;
  if (v5)
    xpc_retain(v5);
  else
    object = xpc_null_create();
  __p = 0;
  v17 = 0;
  v18 = 0;
  xpc::dyn_cast_or_default();
  v6 = this + 3;
  if (*((char *)this + 47) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v14;
  this[5] = v15;
  HIBYTE(v15) = 0;
  LOBYTE(v14) = 0;
  xpc_release(object);
  v7 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB788]);
  object = v7;
  if (v7)
    xpc_retain(v7);
  else
    object = xpc_null_create();
  __p = 0;
  v17 = 0;
  v18 = 0;
  xpc::dyn_cast_or_default();
  v8 = this + 6;
  if (*((char *)this + 71) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = v14;
  this[8] = v15;
  HIBYTE(v15) = 0;
  LOBYTE(v14) = 0;
  xpc_release(object);
  v9 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB370]);
  object = v9;
  if (v9)
    xpc_retain(v9);
  else
    object = xpc_null_create();
  Timestamp::Timestamp((Timestamp *)&v14);
  Timestamp::asString((uint64_t)&v14, 0, 9, &__p);
  xpc::dyn_cast_or_default();
  this[9] = Timestamp::convert((uint64_t)&v11);
  if (v12 < 0)
  {
    operator delete(v11);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
      goto LABEL_22;
LABEL_25:
    operator delete(__p);
    goto LABEL_22;
  }
  if (SHIBYTE(v18) < 0)
    goto LABEL_25;
LABEL_22:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v14, *((_QWORD **)&v14 + 1));
  xpc_release(object);
  v10 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB010]);
  __p = v10;
  if (v10)
    xpc_retain(v10);
  else
    __p = xpc_null_create();
  *((_DWORD *)this + 20) = xpc::dyn_cast_or_default((xpc *)&__p, (const object *)7);
  xpc_release(__p);
}

void sub_1BF425454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, xpc_object_t a15, char a16, uint64_t a17, uint64_t a18, xpc_object_t object, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t ResetInfo::reasonMatchesAtLeastOneApplicablePattern(int a1, uint64_t a2, __int128 **a3)
{
  __int128 *v3;
  int v4;
  __int128 v5;
  __int128 v6;
  int v7;
  __int128 v8;
  std::string::size_type size;
  std::string *v10;
  uint64_t v11;
  std::sub_match<const char *> *v12;
  char *v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  std::sub_match<const char *> *begin;
  std::vector<std::csub_match>::pointer end;
  unint64_t v25;
  std::vector<std::csub_match> *v26;
  _QWORD *p_end;
  _BYTE *p_end_cap;
  int v29;
  int v30;
  int v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 *v37;
  std::locale v39[2];
  _BYTE v40[48];
  std::string v41;
  _BYTE v42[32];
  _BYTE v43[48];
  char *v44;
  char *v45;
  unint64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  char *v50;
  std::vector<std::csub_match> v51[2];
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v3 = *a3;
  v37 = a3[1];
  if (*a3 != v37)
  {
    v4 = 0;
    while (1)
    {
      *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)v42 = v5;
      *(_OWORD *)&v42[16] = v5;
      if (*((char *)v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v42, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
      }
      else
      {
        v6 = *v3;
        *(_QWORD *)&v42[16] = *((_QWORD *)v3 + 2);
        *(_OWORD *)v42 = v6;
      }
      *(_DWORD *)&v42[24] = *((_DWORD *)v3 + 6);
      if ((*(_DWORD *)&v42[24] & a1) != 0)
      {
        memset(&v41, 170, sizeof(v41));
        if ((v42[23] & 0x80000000) != 0)
          std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)v42, *(std::string::size_type *)&v42[8]);
        else
          v41 = *(std::string *)v42;
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v40[16] = v8;
        *(_OWORD *)&v40[32] = v8;
        *(_OWORD *)&v39[0].__locale_ = v8;
        *(_OWORD *)v40 = v8;
        MEMORY[0x1C3B89E10](v39);
        v39[1].__locale_ = (std::locale::__imp *)std::locale::use_facet(v39, MEMORY[0x1E0DE4A90]);
        *(_QWORD *)v40 = std::locale::use_facet(v39, MEMORY[0x1E0DE4C08]);
        memset(&v40[8], 0, 40);
        size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
        if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &v41;
        else
          v10 = (std::string *)v41.__r_.__value_.__r.__words[0];
        if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v41.__r_.__value_.__l.__size_;
        if ((char *)v10 + size != std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>((uint64_t)v39, (char *)v10, (char *)v10 + size))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
        v11 = *(unsigned __int8 *)(a2 + 23);
        if ((v11 & 0x80u) == 0)
          v12 = (std::sub_match<const char *> *)a2;
        else
          v12 = *(std::sub_match<const char *> **)a2;
        if ((v11 & 0x80u) != 0)
          v11 = *(_QWORD *)(a2 + 8);
        v13 = (char *)v12 + v11;
        *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v49 = v14;
        v46 = 0xAAAAAAAAAAAAAA00;
        *(_QWORD *)&v43[40] = 0xAAAAAAAAAAAAAAAALL;
        v44 = 0;
        v45 = 0;
        v47 = 0;
        v48 = 0;
        LOBYTE(v49) = 0;
        BYTE8(v49) = 0;
        v50 = 0;
        memset(v43, 0, 41);
        v57 = v14;
        v54 = 0xAAAAAAAAAAAAAA00;
        v51[1].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAAAALL;
        v52 = 0;
        v53 = 0;
        v55 = 0;
        v56 = 0;
        LOBYTE(v57) = 0;
        BYTE8(v57) = 0;
        v58 = 0;
        memset(v51, 0, 41);
        v15 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v39, v12, (std::sub_match<const char *> *)((char *)v12 + v11), v51, 4160);
        v16 = v52;
        v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)v51[0].__end_ - (char *)v51[0].__begin_) >> 3);
        v19 = *(_QWORD *)&v43[8];
        v18 = *(char **)v43;
        v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v43[8] - *(_QWORD *)v43) >> 3);
        if (v17 <= v20)
        {
          if (v17 < v20)
          {
            v19 = *(_QWORD *)v43 + 8 * (((char *)v51[0].__end_ - (char *)v51[0].__begin_) >> 3);
            *(_QWORD *)&v43[8] = v19;
          }
        }
        else
        {
          std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append((std::vector<std::ssub_match> *)v43, v17 - v20);
          v19 = *(_QWORD *)&v43[8];
          v18 = *(char **)v43;
        }
        if ((char *)v19 == v18)
        {
          begin = v51[0].__begin_;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          end = v51[0].__end_;
          begin = v51[0].__begin_;
          do
          {
            v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3);
            v26 = (std::vector<std::csub_match> *)&begin[v21];
            if (v25 <= v22)
              v26 = &v51[1];
            *(_QWORD *)&v18[v21 * 24] = (char *)v12 + (unint64_t)v26->__begin_ - v16;
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v51[0].__end_ - (char *)v51[0].__begin_) >> 3) <= v22)
              p_end = &v51[1].__end_;
            else
              p_end = &v51[0].__begin_[v21].second;
            *(_QWORD *)(*(_QWORD *)v43 + v21 * 24 + 8) = (char *)v12 + *p_end - v16;
            end = v51[0].__end_;
            begin = v51[0].__begin_;
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v51[0].__end_ - (char *)v51[0].__begin_) >> 3) <= v22)
              p_end_cap = &v51[1].__end_cap_;
            else
              p_end_cap = &v51[0].__begin_[v21].matched;
            v18 = *(char **)v43;
            *(_BYTE *)(*(_QWORD *)v43 + v21 * 24 + 16) = *p_end_cap;
            ++v22;
            ++v21;
          }
          while (v22 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v43[8] - (_QWORD)v18) >> 3));
        }
        *(_QWORD *)&v43[24] = v13;
        *(_QWORD *)&v43[32] = v13;
        v44 = (char *)v12 + v52 - v16;
        v45 = (char *)v12 + v53 - v16;
        LOBYTE(v46) = v54;
        v43[40] = 0;
        v47 = (char *)v12 + v55 - v16;
        v48 = (char *)v12 + v56 - v16;
        v29 = v57;
        LOBYTE(v49) = v57;
        v50 = v44;
        BYTE8(v49) = BYTE8(v57);
        if (begin)
        {
          v51[0].__end_ = begin;
          operator delete(begin);
          v29 = v49;
          v18 = *(char **)v43;
        }
        if (v29)
          v30 = v15 ^ 1;
        else
          v30 = 1;
        if (v18)
        {
          *(_QWORD *)&v43[8] = v18;
          operator delete(v18);
        }
        v31 = v15 & v30;
        if (v31)
          v7 = 2;
        else
          v7 = 0;
        v32 = *(std::__shared_weak_count **)&v40[32];
        if (!*(_QWORD *)&v40[32])
          goto LABEL_55;
        v33 = (unint64_t *)(*(_QWORD *)&v40[32] + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
          std::locale::~locale(v39);
          if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_62:
            operator delete(v41.__r_.__value_.__l.__data_);
            v4 |= v31;
            if ((v42[23] & 0x80000000) == 0)
              goto LABEL_58;
LABEL_57:
            operator delete(*(void **)v42);
            goto LABEL_58;
          }
        }
        else
        {
LABEL_55:
          std::locale::~locale(v39);
          if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_62;
        }
        v4 |= v31;
        if ((v42[23] & 0x80000000) != 0)
          goto LABEL_57;
      }
      else
      {
        v7 = 3;
        if ((v42[23] & 0x80000000) != 0)
          goto LABEL_57;
      }
LABEL_58:
      if (v7 == 3 || !v7)
      {
        v3 += 2;
        if (v3 != v37)
          continue;
      }
      return v4 & 1;
    }
  }
  LOBYTE(v4) = 0;
  return v4 & 1;
}

void sub_1BF425A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BF425A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::locale a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,__int128 a52)
{
  uint64_t v52;
  NSObject *v55;
  void **p_p;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::locale::~locale(&a19);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    v55 = GetOsLogContext()[1];
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
    {
      p_p = (void **)&__p;
      if (a32 < 0)
        p_p = __p;
      *(_DWORD *)(v52 - 224) = 136315138;
      *(_QWORD *)((char *)&a52 + 4) = p_p;
      _os_log_error_impl(&dword_1BF335000, v55, OS_LOG_TYPE_ERROR, "Exception with %s", (uint8_t *)(v52 - 224), 0xCu);
    }
    __cxa_rethrow();
  }
  if (a32 < 0)
    operator delete(__p);
  if (SHIBYTE(a36) < 0)
  {
    operator delete(a34);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1BF425B60);
}

void sub_1BF425B24()
{
  __cxa_end_catch();
  JUMPOUT(0x1BF425B30);
}

void sub_1BF425B58(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF425B60);
  __clang_call_terminate(a1);
}

void ___ZN9ResetInfo23readResetReasonPatternsEv_block_invoke()
{
  unsigned __int8 v0;
  NSObject *v1;
  uint8_t v2[16];

  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED7100E0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
  }
  if (GetOsLogContext(void)::onceToken != -1)
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
    v1 = qword_1ED7100E0;
    if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_DEBUG))
      goto LABEL_4;
LABEL_6:
    *(_WORD *)v2 = 0;
    _os_log_debug_impl(&dword_1BF335000, v1, OS_LOG_TYPE_DEBUG, "Default pattern masks will be used", v2, 2u);
    goto LABEL_4;
  }
  v1 = qword_1ED7100E0;
  if (os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_DEBUG))
    goto LABEL_6;
LABEL_4:
  std::vector<ResetInfo::RegexPatternAndReasonMask>::__assign_with_size[abi:ne180100]<ResetInfo::RegexPatternAndReasonMask*,ResetInfo::RegexPatternAndReasonMask*>((void **)&ResetInfo::sPatternMasks, (void **)kDefaultPatternMasks, (char *)qword_1ED710120, (qword_1ED710120 - kDefaultPatternMasks) >> 5);
}

void ***std::__exception_guard_exceptions<std::vector<ResetInfo::RegexPatternAndReasonMask>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 9) < 0)
            operator delete(*(v4 - 4));
          v4 -= 4;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void ctu::cf::update<char const*,std::string>(__CFDictionary *a1, const __CFString **a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5)
{
  void *v6;
  void *v7;
  BOOL v8;
  void *value;

  value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, a2, (const char *)0x8000100, a4, a5);
  v6 = value;
  value = 0;
  ctu::cf::convert_copy();
  v7 = value;
  if (v6)
    v8 = value == 0;
  else
    v8 = 1;
  if (v8)
  {
    if (!value)
      goto LABEL_8;
  }
  else
  {
    CFDictionarySetValue(a1, v6, value);
  }
  CFRelease(v7);
LABEL_8:
  if (v6)
    CFRelease(v6);
}

void sub_1BF425DBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1BF425DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ctu::cf::update<char const*,BOOL>(__CFDictionary *a1, const __CFString **a2, int a3, uint64_t a4, const __CFAllocator *a5)
{
  void *v7;
  void **v8;
  void *v9;
  BOOL v10;
  uint64_t v11;
  void *key;

  key = 0;
  ctu::cf::convert_copy((ctu::cf *)&key, a2, (const char *)0x8000100, a4, a5);
  v7 = key;
  v8 = (void **)MEMORY[0x1E0C9AE50];
  if (!a3)
    v8 = (void **)MEMORY[0x1E0C9AE40];
  v9 = *v8;
  key = *v8;
  if (v7)
    v10 = v9 == 0;
  else
    v10 = 1;
  v11 = !v10;
  if (v10)
  {
    if (!v9)
      goto LABEL_13;
  }
  else
  {
    CFDictionarySetValue(a1, v7, v9);
  }
  CFRelease(v9);
LABEL_13:
  if (v7)
    CFRelease(v7);
  return v11;
}

void sub_1BF425EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_ResetInfo_cpp()
{
  char *v0;
  unint64_t v1;
  std::string *v2;
  void **v3;
  void *v5[2];
  char v6;
  _DWORD v7[2];
  void *v8[2];
  char v9;
  int v10;
  void *v11;
  __int128 v12;
  int v13;
  void *v14;
  __int128 v15;
  int v16;
  void *v17;
  __int128 v18;
  int v19;
  void *v20;
  __int128 v21;
  int v22;
  void *v23;
  __int128 v24;
  int v25;
  void *v26;
  __int128 v27;
  int v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  void *v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  void *v61[3];
  int v62;
  void *v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  void *v67[2];
  char v68;
  int v69;
  void *__p;
  uint64_t v71;
  unint64_t v72;
  int v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  __cxa_atexit((void (*)(void *))std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100], &ResetInfo::sPatternMasks, &dword_1BF335000);
  v6 = 15;
  strcpy((char *)v5, ".*\\[abmtool\\].*");
  v7[0] = 1;
  v9 = 14;
  strcpy((char *)v8, ".*\\[bbutil\\].*");
  v10 = 1;
  v11 = operator new(0x50uLL);
  v12 = xmmword_1BF542880;
  strcpy((char *)v11, ".*AP forced coredump via SPMI - Please analyze reason from AP perspective.*");
  v13 = 1;
  v14 = operator new(0x19uLL);
  v15 = xmmword_1BF53F3F0;
  strcpy((char *)v14, ".*(after OTASP/OTAPA).*");
  v16 = 1;
  v17 = operator new(0x38uLL);
  v18 = xmmword_1BF542890;
  strcpy((char *)v17, ".*Carrier bundle updated settings that require reset");
  v19 = 1;
  v20 = operator new(0x28uLL);
  v21 = xmmword_1BF53F3D0;
  strcpy((char *)v20, ".*Manually Triggering BB Core Dump");
  v22 = 1;
  v23 = operator new(0x28uLL);
  v24 = xmmword_1BF5428A0;
  strcpy((char *)v23, ".*modem manager triggered reset.*");
  v25 = 1;
  v26 = operator new(0x38uLL);
  v27 = xmmword_1BF5428B0;
  strcpy((char *)v26, ".*User requested to change Baseband field test config");
  v28 = 1;
  v29 = operator new(0x28uLL);
  v30 = 33;
  v31 = 0x8000000000000028;
  strcpy((char *)v29, ".*applebbproxy setup AT interface");
  v32 = 1;
  v33 = operator new(0x28uLL);
  v34 = 36;
  v35 = 0x8000000000000028;
  strcpy((char *)v33, ".*Resetting Baseband after restore.*");
  v36 = 1;
  v37 = operator new(0x30uLL);
  v38 = 42;
  v39 = 0x8000000000000030;
  strcpy((char *)v37, ".*Resetting baseband after pushing files.*");
  v40 = 1;
  v41 = operator new(0x40uLL);
  v42 = 59;
  v43 = 0x8000000000000040;
  strcpy((char *)v41, ".*Resetting Baseband after successful restore of carrier NV");
  v44 = 1;
  v45 = operator new(0x30uLL);
  v46 = 41;
  v47 = 0x8000000000000030;
  strcpy((char *)v45, ".*Resetting modem from WirelessAutomation");
  v48 = 1;
  v49 = operator new(0x20uLL);
  v50 = 25;
  v51 = 0x8000000000000020;
  strcpy((char *)v49, ".*Requesting Soft Reset.*");
  v52 = 1;
  v53 = operator new(0x30uLL);
  v54 = 42;
  v55 = 0x8000000000000030;
  strcpy((char *)v53, ".*AP-triggered((?!: locationd PDS).*|(.*))");
  v56 = 1;
  v59 = 0x8000000000000038;
  v57 = operator new(0x38uLL);
  v58 = 50;
  strcpy((char *)v57, ".*User ((requested state)|(Triggered Core))dump.*");
  v60 = 1;
  HIBYTE(v61[2]) = 19;
  strcpy((char *)v61, ".*SIM APNs change.*");
  v62 = 1;
  v63 = operator new(0x28uLL);
  v65 = 0x8000000000000028;
  v64 = 34;
  strcpy((char *)v63, ".*AttachAPN Push to force detach.*");
  v66 = 1;
  v68 = 14;
  strcpy((char *)v67, ".*CSIM reset.*");
  v69 = 1;
  __p = operator new(0x20uLL);
  v72 = 0x8000000000000020;
  v71 = 25;
  strcpy((char *)__p, ".*com\\.apple\\.symptomsd.*");
  v73 = 1;
  qword_1ED710120 = 0;
  qword_1ED710128 = 0;
  kDefaultPatternMasks = 0;
  v0 = (char *)operator new(0x280uLL);
  v1 = 0;
  kDefaultPatternMasks = (uint64_t)v0;
  qword_1ED710120 = (uint64_t)v0;
  qword_1ED710128 = (uint64_t)(v0 + 640);
  do
  {
    v2 = (std::string *)&v0[v1 * 4];
    v3 = &v5[v1 / 2];
    if (*(&v6 + v1 * 4) < 0)
    {
      std::string::__init_copy_ctor_external(v2, (const std::string::value_type *)*v3, (std::string::size_type)v3[1]);
    }
    else
    {
      *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)v3;
      v2->__r_.__value_.__r.__words[2] = (std::string::size_type)v3[2];
    }
    *(_DWORD *)&v0[v1 * 4 + 24] = v7[v1];
    v1 += 8;
  }
  while (v1 != 160);
  qword_1ED710120 = (uint64_t)(v0 + 640);
  if (SHIBYTE(v72) < 0)
  {
    operator delete(__p);
    if ((v68 & 0x80000000) == 0)
    {
LABEL_8:
      if ((SHIBYTE(v65) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_29;
    }
  }
  else if ((v68 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(v67[0]);
  if ((SHIBYTE(v65) & 0x80000000) == 0)
  {
LABEL_9:
    if ((SHIBYTE(v61[2]) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  operator delete(v63);
  if ((SHIBYTE(v61[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v59) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  operator delete(v61[0]);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_11:
    if ((SHIBYTE(v55) & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  operator delete(v57);
  if ((SHIBYTE(v55) & 0x80000000) == 0)
  {
LABEL_12:
    if ((SHIBYTE(v51) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  operator delete(v53);
  if ((SHIBYTE(v51) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v47) & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  operator delete(v49);
  if ((SHIBYTE(v47) & 0x80000000) == 0)
  {
LABEL_14:
    if ((SHIBYTE(v43) & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v45);
  if ((SHIBYTE(v43) & 0x80000000) == 0)
  {
LABEL_15:
    if ((SHIBYTE(v39) & 0x80000000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  operator delete(v41);
  if ((SHIBYTE(v39) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SHIBYTE(v35) & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  operator delete(v37);
  if ((SHIBYTE(v35) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v31) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  operator delete(v33);
  if ((SHIBYTE(v31) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v27) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v29);
  if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v24) & 0x80000000) == 0)
      goto LABEL_20;
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v26);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
LABEL_20:
    if ((SHIBYTE(v21) & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v23);
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
LABEL_21:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v20);
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_22:
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v17);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_23:
    if ((SHIBYTE(v12) & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v14);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
LABEL_24:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_25;
LABEL_45:
    operator delete(v8[0]);
    if ((v6 & 0x80000000) == 0)
      return __cxa_atexit((void (*)(void *))std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100], &kDefaultPatternMasks, &dword_1BF335000);
LABEL_46:
    operator delete(v5[0]);
    return __cxa_atexit((void (*)(void *))std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100], &kDefaultPatternMasks, &dword_1BF335000);
  }
LABEL_44:
  operator delete(v11);
  if (v9 < 0)
    goto LABEL_45;
LABEL_25:
  if (v6 < 0)
    goto LABEL_46;
  return __cxa_atexit((void (*)(void *))std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100], &kDefaultPatternMasks, &dword_1BF335000);
}

void sub_1BF4266A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *a68;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  void *a79;
  char a80;
  void *a81;
  char a82;
  void *a83;
  char a84;
  void *a85;

  std::__exception_guard_exceptions<std::vector<ResetInfo::RegexPatternAndReasonMask>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a10);
  if (SLOBYTE(STACK[0x28F]) < 0)
  {
    operator delete((void *)STACK[0x278]);
    if ((SLOBYTE(STACK[0x26F]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x24F]) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((SLOBYTE(STACK[0x26F]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete((void *)STACK[0x258]);
  if ((SLOBYTE(STACK[0x24F]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((SLOBYTE(STACK[0x22F]) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  operator delete((void *)STACK[0x238]);
  if ((SLOBYTE(STACK[0x22F]) & 0x80000000) == 0)
  {
LABEL_5:
    if ((SLOBYTE(STACK[0x20F]) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x218]);
  if ((SLOBYTE(STACK[0x20F]) & 0x80000000) == 0)
  {
LABEL_6:
    if ((a84 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  operator delete(a85);
  if ((a84 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a82 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  operator delete(a83);
  if ((a82 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a80 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  operator delete(a81);
  if ((a80 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a78 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  operator delete(a79);
  if ((a78 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a76 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  operator delete(a77);
  if ((a76 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a74 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  operator delete(a75);
  if ((a74 & 0x80000000) == 0)
  {
LABEL_12:
    if ((a72 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  operator delete(a73);
  if ((a72 & 0x80000000) == 0)
  {
LABEL_13:
    if ((a66 & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  operator delete(a68);
  if ((a66 & 0x80000000) == 0)
  {
LABEL_14:
    if ((a59 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(a61);
  if ((a59 & 0x80000000) == 0)
  {
LABEL_15:
    if ((a52 & 0x80000000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  operator delete(a54);
  if ((a52 & 0x80000000) == 0)
  {
LABEL_16:
    if ((a45 & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  operator delete(a47);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_17:
    if ((a38 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  operator delete(a40);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_18:
    if ((a31 & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_39;
  }
LABEL_38:
  operator delete(a33);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_19:
    if ((a24 & 0x80000000) == 0)
      goto LABEL_20;
    goto LABEL_40;
  }
LABEL_39:
  operator delete(a26);
  if ((a24 & 0x80000000) == 0)
  {
LABEL_20:
    if ((a17 & 0x80000000) == 0)
LABEL_42:
      _Unwind_Resume(a1);
LABEL_41:
    operator delete(a12);
    _Unwind_Resume(a1);
  }
LABEL_40:
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
    goto LABEL_42;
  goto LABEL_41;
}

uint64_t abm::stats::typeAsString@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if ((_DWORD)result)
  {
    strcpy(a2, "UNKNOWN");
    a2[23] = 7;
  }
  else
  {
    strcpy(a2, "Boot Statistics");
    a2[23] = 15;
  }
  return result;
}

void ResetDetection::create(NSObject **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  void *v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  dispatch_object_t object;

  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  v8 = operator new(0xB8uLL);
  v9 = *a1;
  object = v9;
  if (v9)
    dispatch_retain(v9);
  v10 = (std::__shared_weak_count *)a2[1];
  v16 = *a2;
  v17 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  ResetDetection::ResetDetection((uint64_t)v8, &object, &v16, a3);
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<ResetDetection>::shared_ptr[abi:ne180100]<ResetDetection,std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection*)#1},void>(a4, (uint64_t)v8);
  ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a4);
  v13 = v17;
  if (v17)
  {
    v14 = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (object)
    dispatch_release(object);
}

void sub_1BF426A58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  NSObject *v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v2)
    dispatch_release(v2);
  _Unwind_Resume(a1);
}

uint64_t ResetDetection::ResetDetection(uint64_t a1, NSObject **a2, _QWORD *a3, uint64_t a4)
{
  NSObject *v8;
  _BYTE v10[16];

  *(_QWORD *)a1 = off_1E7904E18;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v10, "com.apple.telephony.abm", "reset.detect");
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v8 = *a2;
  *(_QWORD *)(a1 + 88) = *a2;
  if (v8)
    dispatch_retain(v8);
  *(_QWORD *)(a1 + 96) = 0;
  ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>((_QWORD *)a1, (uint64_t)v10, a3);
  *(_QWORD *)a1 = off_1E7905038;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  *(_QWORD *)a1 = off_1E7904E18;
  *(_QWORD *)(a1 + 104) = a4;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = TelephonyBasebandCreateController();
  *(_DWORD *)(a1 + 128) = 2;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 144;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = a1 + 168;
  return a1;
}

void sub_1BF426B90(_Unwind_Exception *a1)
{
  _QWORD *v1;

  ctu::SharedLoggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

void sub_1BF426BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

const char *ResetDetection::getName(ResetDetection *this)
{
  return "reset.detect";
}

_QWORD *ctu::SharedLoggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7904FA8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7904FA8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ResetDetection::~ResetDetection(ResetDetection *this)
{
  const void *v2;
  __CFRunLoop *v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  NSObject *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  _QWORD block[5];

  *(_QWORD *)this = off_1E7904E18;
  v2 = (const void *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v2)
    CFRelease(v2);
  v3 = (__CFRunLoop *)*((_QWORD *)this + 13);
  v4 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  v5 = (const void *)*MEMORY[0x1E0C9B280];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN14ResetDetectionD2Ev_block_invoke;
  block[3] = &__block_descriptor_tmp_23;
  block[4] = v4;
  CFRunLoopPerformBlock(v3, v5, block);
  CFRunLoopWakeUp(*((CFRunLoopRef *)this + 13));
  std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(*((char **)this + 21));
  std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(*((char **)this + 18));
  v6 = (const void *)*((_QWORD *)this + 15);
  if (v6)
    CFRelease(v6);
  *(_QWORD *)this = off_1E7904FA8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v7 = *((_QWORD *)this + 12);
  if (v7)
    dispatch_release(v7);
  v8 = *((_QWORD *)this + 11);
  if (v8)
    dispatch_release(v8);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
}

{
  void *v1;

  ResetDetection::~ResetDetection(this);
  operator delete(v1);
}

void ___ZN14ResetDetectionD2Ev_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;

  v1 = *(_QWORD **)(a1 + 32);
  if (v1)
  {
    v2 = (std::__shared_weak_count *)v1[1];
    if (v2)
      std::__shared_weak_count::__release_weak(v2);
    operator delete(v1);
  }
}

void ResetDetection::start(ResetDetection *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN14ResetDetection5startEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_3_1;
  v1[4] = this;
  ctu::SharedSynchronizable<ResetDetection>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void ___ZN14ResetDetection5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  uint64_t (*v13)(uint64_t);
  NSObject *v14;
  uint64_t (*v15)(uint64_t);
  uint8_t v16[16];
  uint8_t buf[16];
  uint8_t v18[15];
  unsigned __int8 v19;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Started", buf, 2u);
  }
  v3 = operator new(0x10uLL);
  v4 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v4 || (v5 = *(_QWORD *)(v1 + 72), (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  *v3 = v5;
  v3[1] = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  *(_QWORD *)(v1 + 112) = v3;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
    if ((TelephonyBasebandRegisterForReset() & 1) != 0)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    if ((TelephonyBasebandRegisterForReset() & 1) != 0)
      goto LABEL_14;
  }
  v12 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v16 = 0;
    _os_log_error_impl(&dword_1BF335000, v12, OS_LOG_TYPE_ERROR, "failed registering for reset detect", v16, 2u);
    v15 = ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::get;
    if (!*(_QWORD *)(v1 + 120))
      v15 = 0;
    if (v15)
      goto LABEL_17;
    return;
  }
LABEL_14:
  v13 = ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::get;
  if (!*(_QWORD *)(v1 + 120))
    v13 = 0;
  if (v13)
  {
LABEL_17:
    v19 = 1;
    if ((TelephonyBasebandGetReset() & 1) != 0)
    {
      *(_DWORD *)(v1 + 128) = v19;
    }
    else
    {
      v14 = *(NSObject **)(v1 + 40);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v18 = 0;
        _os_log_error_impl(&dword_1BF335000, v14, OS_LOG_TYPE_ERROR, "failed to poll for reset detect", v18, 2u);
      }
    }
  }
}

void sub_1BF426FB4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void ResetDetection::sResetDetectCallback(ResetDetection *this, void *a2, int a3, unsigned int a4, void *a5)
{
  std::__shared_weak_count *v5;
  uint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  int v15;

  if (this)
  {
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (v5)
    {
      v7 = *(_QWORD *)this;
      p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
      v10 = std::__shared_weak_count::lock(v5);
      if (v10)
      {
        v11 = v10;
        if (v7)
        {
          v14[0] = MEMORY[0x1E0C809B0];
          v14[1] = 0x40000000;
          v14[2] = ___ZN14ResetDetection19resetDetectCallbackEPvjjS0__block_invoke;
          v14[3] = &__block_descriptor_tmp_6_3;
          v14[4] = v7;
          v15 = a3;
          ctu::SharedSynchronizable<ResetDetection>::execute_wrapped((uint64_t *)(v7 + 72), (uint64_t)v14);
        }
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

uint64_t ResetDetection::poll(ResetDetection *this, BOOL *a2)
{
  uint64_t (*v3)(uint64_t);
  uint64_t Reset;
  NSObject *v7;
  uint8_t v8[15];
  BOOL v9;

  v3 = ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::get;
  if (!*((_QWORD *)this + 15))
    v3 = 0;
  if (!v3)
    return 0;
  v9 = 1;
  Reset = TelephonyBasebandGetReset();
  if ((_DWORD)Reset)
  {
    *a2 = v9;
    return Reset;
  }
  v7 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    return Reset;
  *(_WORD *)v8 = 0;
  _os_log_error_impl(&dword_1BF335000, v7, OS_LOG_TYPE_ERROR, "failed to poll for reset detect", v8, 2u);
  return Reset;
}

void ResetDetection::add(uint64_t a1, uint64_t a2, char a3, void **a4, uint64_t a5)
{
  void *v9;
  _QWORD v10[5];
  std::string __p;
  void *aBlock;
  uint64_t v13;
  char v14;

  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1174405120;
  v10[2] = ___ZN14ResetDetection3addENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEbN8dispatch5blockIU13block_pointerFviEEEy_block_invoke;
  v10[3] = &__block_descriptor_tmp_4_1;
  v10[4] = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v14 = a3;
    v9 = *a4;
    if (!*a4)
      goto LABEL_6;
    goto LABEL_5;
  }
  __p = *(std::string *)a2;
  v14 = a3;
  v9 = *a4;
  if (*a4)
LABEL_5:
    v9 = _Block_copy(v9);
LABEL_6:
  aBlock = v9;
  v13 = a5;
  ctu::SharedSynchronizable<ResetDetection>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v10);
  if (aBlock)
    _Block_release(aBlock);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void ___ZN14ResetDetection3addENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEbN8dispatch5blockIU13block_pointerFviEEEy_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD *v4;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  _BOOL4 v9;
  BOOL v10;
  BOOL v11;
  _OWORD *v13;
  int v14;
  const void *v15;
  void *v16;
  void *v17;
  const void *v18;
  void *v19;
  void *v20;
  std::string v21;
  void *v22;
  std::string v23;
  uint8_t buf[4];
  _QWORD *v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (_QWORD *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
      v4 = (_QWORD *)*v4;
    v5 = *(unsigned __int8 *)(a1 + 80);
    *(_DWORD *)buf = 136315394;
    v25 = v4;
    v26 = 1024;
    v27 = v5;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Added detection with key '%s', reset=%d", buf, 0x12u);
  }
  v6 = *(_DWORD *)(v2 + 128);
  v7 = *(unsigned __int8 *)(a1 + 80);
  if (v6)
  {
    if (v6 != 2)
    {
      v8 = v6 != 1 || v7 == 0;
      v9 = !v8;
      v10 = v6 | v7 || v6 == 1;
      v11 = !v10 && v7 == 0;
      if (v11 || v9)
        goto LABEL_28;
    }
  }
  else if (!*(_BYTE *)(a1 + 80))
  {
LABEL_28:
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
    return;
  }
  v13 = (_OWORD *)(a1 + 40);
  v14 = *(char *)(a1 + 63);
  if (*(_BYTE *)(a1 + 80))
  {
    if (v14 < 0)
    {
      std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
    }
    else
    {
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *v13;
      v23.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 56);
    }
    v15 = *(const void **)(a1 + 64);
    if (v15)
      v16 = _Block_copy(v15);
    else
      v16 = 0;
    v22 = v16;
    ResetDetection::addToBlocks_sync(v2, (uint64_t)&v23, &v22, (uint64_t **)(v2 + 136), *(_QWORD *)(a1 + 72));
    if (v16)
      _Block_release(v16);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    {
      v17 = (void *)v23.__r_.__value_.__r.__words[0];
LABEL_47:
      operator delete(v17);
    }
  }
  else
  {
    if (v14 < 0)
    {
      std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
    }
    else
    {
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *v13;
      v21.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 56);
    }
    v18 = *(const void **)(a1 + 64);
    if (v18)
      v19 = _Block_copy(v18);
    else
      v19 = 0;
    v20 = v19;
    ResetDetection::addToBlocks_sync(v2, (uint64_t)&v21, &v20, (uint64_t **)(v2 + 160), *(_QWORD *)(a1 + 72));
    if (v19)
      _Block_release(v19);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    {
      v17 = (void *)v21.__r_.__value_.__r.__words[0];
      goto LABEL_47;
    }
  }
}

void sub_1BF4274A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ResetDetection::addToBlocks_sync(uint64_t a1, uint64_t a2, void **a3, uint64_t **a4, dispatch_time_t a5)
{
  NSObject *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t *v21;
  uint64_t **v22;
  int v23;
  const std::string::value_type *v24;
  size_t v25;
  uint64_t **v26;
  _QWORD *v27;
  const void *v28;
  const void *v29;
  int v30;
  const void *v31;
  size_t v32;
  size_t v33;
  int v34;
  int v35;
  _QWORD *v36;
  std::string *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  _QWORD handler[6];
  std::__shared_weak_count *v43;
  uint64_t **v44;
  std::string __p;

  v10 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, *(dispatch_queue_t *)(a1 + 88));
  dispatch_source_set_timer(v10, a5, 0xFFFFFFFFFFFFFFFFLL, 0x5F5E100uLL);
  v11 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v11 || (v12 = *(_QWORD *)(a1 + 72), (v13 = std::__shared_weak_count::lock(v11)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v14 = v13;
  p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v14);
  }
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 1174405120;
  handler[2] = ___ZN14ResetDetection16addToBlocks_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN8dispatch5blockIU13block_pointerFviEEERNS0_3mapIS6_NS0_4pairIP17dispatch_source_sSB_EENS0_4lessIS6_EENS4_INSD_IKS6_SG_EEEEEEy_block_invoke;
  handler[3] = &__block_descriptor_tmp_5_11;
  handler[4] = a1;
  handler[5] = v12;
  v43 = v14;
  do
    v19 = __ldxr(p_shared_weak_owners);
  while (__stxr(v19 + 1, p_shared_weak_owners));
  v44 = a4;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  dispatch_source_set_event_handler(v10, handler);
  dispatch_activate(v10);
  v20 = *a3;
  if (*a3)
    v20 = _Block_copy(v20);
  v41 = (uint64_t *)v20;
  v22 = a4 + 1;
  v21 = a4[1];
  if (v21)
  {
    v23 = *(char *)(a2 + 23);
    if (v23 >= 0)
      v24 = (const std::string::value_type *)a2;
    else
      v24 = *(const std::string::value_type **)a2;
    if (v23 >= 0)
      v25 = *(unsigned __int8 *)(a2 + 23);
    else
      v25 = *(_QWORD *)(a2 + 8);
    while (1)
    {
      v26 = (uint64_t **)v21;
      v29 = (const void *)v21[4];
      v27 = v21 + 4;
      v28 = v29;
      v30 = *((char *)v27 + 23);
      if (v30 >= 0)
        v31 = v27;
      else
        v31 = v28;
      if (v30 >= 0)
        v32 = *((unsigned __int8 *)v27 + 23);
      else
        v32 = v27[1];
      if (v32 >= v25)
        v33 = v25;
      else
        v33 = v32;
      v34 = memcmp(v24, v31, v33);
      if (v34)
      {
        if (v34 < 0)
          goto LABEL_23;
LABEL_37:
        v35 = memcmp(v31, v24, v33);
        if (v35)
        {
          if ((v35 & 0x80000000) == 0)
            goto LABEL_51;
        }
        else if (v32 >= v25)
        {
LABEL_51:
          v40 = v26[8];
          v26[7] = (uint64_t *)v10;
          v26[8] = v41;
          if (v40)
            goto LABEL_52;
          goto LABEL_53;
        }
        v21 = v26[1];
        if (!v21)
        {
          v22 = v26 + 1;
          goto LABEL_44;
        }
      }
      else
      {
        if (v25 >= v32)
          goto LABEL_37;
LABEL_23:
        v21 = *v26;
        v22 = v26;
        if (!*v26)
          goto LABEL_44;
      }
    }
  }
  v26 = a4 + 1;
LABEL_44:
  v36 = operator new(0x48uLL);
  v37 = (std::string *)(v36 + 4);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v37, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v37->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v36[6] = *(_QWORD *)(a2 + 16);
  }
  v36[7] = 0;
  v36[8] = 0;
  *v36 = 0;
  v36[1] = 0;
  v36[2] = v26;
  *v22 = v36;
  v38 = (uint64_t *)**a4;
  v39 = v36;
  if (v38)
  {
    *a4 = v38;
    v39 = *v22;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a4[1], v39);
  a4[2] = (uint64_t *)((char *)a4[2] + 1);
  v40 = (uint64_t *)v36[8];
  v36[7] = v10;
  v36[8] = v41;
  if (v40)
LABEL_52:
    _Block_release(v40);
LABEL_53:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v43)
    std::__shared_weak_count::__release_weak(v43);
  std::__shared_weak_count::__release_weak(v14);
}

void sub_1BF427834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::__shared_weak_count *v25;
  void *v26;
  std::__shared_weak_count *v28;

  operator delete(v26);
  std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>::~pair((uint64_t)&a10);
  if (a25 < 0)
  {
    operator delete(__p);
    v28 = a18;
    if (a18)
      goto LABEL_3;
  }
  else
  {
    v28 = a18;
    if (a18)
    {
LABEL_3:
      std::__shared_weak_count::__release_weak(v28);
      std::__shared_weak_count::__release_weak(v25);
      _Unwind_Resume(a1);
    }
  }
  std::__shared_weak_count::__release_weak(v25);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c43_ZTSN8dispatch5blockIU13block_pointerFviEEE(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  void *result;

  v4 = (std::string *)(a1 + 40);
  if ((*(char *)(a2 + 63) & 0x80000000) == 0)
  {
    v5 = *(_OWORD *)(a2 + 40);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
    result = *(void **)(a2 + 64);
    if (!result)
      goto LABEL_6;
    goto LABEL_5;
  }
  std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  result = *(void **)(a2 + 64);
  if (result)
LABEL_5:
    result = _Block_copy(result);
LABEL_6:
  *(_QWORD *)(a1 + 64) = result;
  return result;
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c43_ZTSN8dispatch5blockIU13block_pointerFviEEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 64);
  if (v2)
    _Block_release(v2);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void ___ZN14ResetDetection16addToBlocks_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN8dispatch5blockIU13block_pointerFviEEERNS0_3mapIS6_NS0_4pairIP17dispatch_source_sSB_EENS0_4lessIS6_EENS4_INSD_IKS6_SG_EEEEEEy_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  int v10;
  const void *v11;
  size_t v12;
  uint64_t *v13;
  int v14;
  uint64_t *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  const void *v20;
  size_t v21;
  size_t v22;
  int v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  BOOL v28;
  uint64_t *v29;
  const void *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    return;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = std::__shared_weak_count::lock(v2);
  if (!v4)
    return;
  v5 = v4;
  if (!*(_QWORD *)(a1 + 40))
    goto LABEL_54;
  v6 = *(_QWORD *)(a1 + 56);
  v9 = *(uint64_t ***)(v6 + 8);
  v7 = (uint64_t *)(v6 + 8);
  v8 = v9;
  if (!v9)
    goto LABEL_54;
  v10 = *(char *)(a1 + 87);
  if (v10 >= 0)
    v11 = (const void *)(a1 + 64);
  else
    v11 = *(const void **)(a1 + 64);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 87);
  else
    v12 = *(_QWORD *)(a1 + 72);
  v13 = v7;
  do
  {
    while (1)
    {
      v14 = *((char *)v8 + 55);
      v15 = v14 >= 0 ? (uint64_t *)(v8 + 4) : v8[4];
      v16 = v14 >= 0 ? *((unsigned __int8 *)v8 + 55) : (size_t)v8[5];
      v17 = v12 >= v16 ? v16 : v12;
      v18 = memcmp(v15, v11, v17);
      if (v18)
        break;
      if (v16 >= v12)
        goto LABEL_26;
LABEL_12:
      v8 = (uint64_t **)v8[1];
      if (!v8)
        goto LABEL_27;
    }
    if (v18 < 0)
      goto LABEL_12;
LABEL_26:
    v13 = (uint64_t *)v8;
    v8 = (uint64_t **)*v8;
  }
  while (v8);
LABEL_27:
  if (v13 != v7)
  {
    v19 = *((char *)v13 + 55);
    if (v19 >= 0)
      v20 = v13 + 4;
    else
      v20 = (const void *)v13[4];
    if (v19 >= 0)
      v21 = *((unsigned __int8 *)v13 + 55);
    else
      v21 = v13[5];
    if (v21 >= v12)
      v22 = v12;
    else
      v22 = v21;
    v23 = memcmp(v11, v20, v22);
    if (v23)
    {
      if (v23 < 0)
        goto LABEL_54;
LABEL_41:
      ResetDetection::invokeBlock_sync(v3, (uint64_t)(v13 + 4), 3760250883);
      v24 = *(uint64_t ***)(a1 + 56);
      v25 = (uint64_t *)v13[1];
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = (uint64_t *)*v25;
        }
        while (v25);
      }
      else
      {
        v27 = v13;
        do
        {
          v26 = (uint64_t *)v27[2];
          v28 = *v26 == (_QWORD)v27;
          v27 = v26;
        }
        while (!v28);
      }
      if (*v24 == v13)
        *v24 = v26;
      v29 = v24[1];
      v24[2] = (uint64_t *)((char *)v24[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v29, v13);
      v30 = (const void *)v13[8];
      if (v30)
        _Block_release(v30);
      if (*((char *)v13 + 55) < 0)
        operator delete((void *)v13[4]);
      operator delete(v13);
    }
    else if (v12 >= v21)
    {
      goto LABEL_41;
    }
  }
LABEL_54:
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v32 = __ldaxr(p_shared_owners);
  while (__stlxr(v32 - 1, p_shared_owners));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1BF427B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ResetDetection::invokeBlock_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v6;
  NSObject *v7;
  void (**v8)(void *, _QWORD);
  NSObject *v9;
  std::string *p_p;
  std::string __p;
  uint8_t buf[4];
  std::string *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  memset(&__p, 170, sizeof(__p));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v7 = *(NSObject **)(a2 + 24);
  v6 = *(const void **)(a2 + 32);
  if (v6)
  {
    v8 = (void (**)(void *, _QWORD))_Block_copy(v6);
    *(_QWORD *)(a2 + 24) = 0;
    if (!v7)
      goto LABEL_7;
    goto LABEL_6;
  }
  v8 = 0;
  *(_QWORD *)(a2 + 24) = 0;
  if (v7)
  {
LABEL_6:
    dispatch_source_cancel(v7);
    dispatch_release(v7);
  }
LABEL_7:
  v9 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v13 = p_p;
    _os_log_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEFAULT, "#I Signalling %s", buf, 0xCu);
  }
  v8[2](v8, a3);
  _Block_release(v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF427CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void __copy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrI14ResetDetectionEE64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::string *v6;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 64);
    a1[10] = *(_QWORD *)(a2 + 80);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1BF427DA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrI14ResetDetectionEE64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2)
      return;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 64));
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
LABEL_3:
    std::__shared_weak_count::__release_weak(v2);
}

uint64_t std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>::~pair(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    _Block_release(v2);
  return a1;
}

void ResetDetection::notifyResetDetectBlocks_sync(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  void *__p[2];
  __int128 v13;
  void *aBlock;
  _QWORD *v15;
  _QWORD v16[2];

  v3 = &v15;
  v4 = *(char **)(a2 + 8);
  v15 = *(_QWORD **)a2;
  v16[0] = v4;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v16[1] = v5;
  if (v5)
    v3 = v4 + 16;
  *v3 = v16;
  *(_QWORD *)a2 = a2 + 8;
  v6 = v15;
  if (v15 != v16)
  {
    while (1)
    {
      aBlock = (void *)0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)__p = v7;
      v13 = v7;
      if (*((char *)v6 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v6[4], v6[5]);
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)v6 + 2);
        *(_QWORD *)&v13 = v6[6];
      }
      v8 = (void *)v6[8];
      *((_QWORD *)&v13 + 1) = v6[7];
      if (v8)
        v8 = _Block_copy(v8);
      aBlock = v8;
      ResetDetection::invokeBlock_sync(a1, (uint64_t)__p, 0);
      if (aBlock)
        _Block_release(aBlock);
      if (SBYTE7(v13) < 0)
      {
        operator delete(__p[0]);
        v9 = (_QWORD *)v6[1];
        if (v9)
        {
          do
          {
LABEL_17:
            v10 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
          goto LABEL_5;
        }
      }
      else
      {
        v9 = (_QWORD *)v6[1];
        if (v9)
          goto LABEL_17;
      }
      do
      {
        v10 = (_QWORD *)v6[2];
        v11 = *v10 == (_QWORD)v6;
        v6 = v10;
      }
      while (!v11);
LABEL_5:
      v6 = v10;
      if (v10 == v16)
      {
        v4 = (char *)v16[0];
        break;
      }
    }
  }
  std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(v4);
}

void sub_1BF427F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15)
{
  std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(a15);
  _Unwind_Resume(a1);
}

void sub_1BF427F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15)
{
  std::pair<std::string const,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>::~pair((uint64_t)&a9);
  std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(a15);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>::~pair(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 32);
  if (v2)
    _Block_release(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void ResetDetection::resetDetectCallback(ResetDetection *this, void *a2, unsigned int a3, int a4, void *a5)
{
  _QWORD v5[5];
  int v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN14ResetDetection19resetDetectCallbackEPvjjS0__block_invoke;
  v5[3] = &__block_descriptor_tmp_6_3;
  v5[4] = this;
  v6 = a4;
  ctu::SharedSynchronizable<ResetDetection>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v5);
}

void ___ZN14ResetDetection19resetDetectCallbackEPvjjS0__block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_DWORD *)(a1 + 40);
  if (v2 == -469794815)
  {
    v5 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(state.opaque[0]) = 0;
      _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "#I baseband alive detected", (uint8_t *)&state, 2u);
    }
    *(_DWORD *)(v1 + 128) = 0;
    ResetDetection::notifyResetDetectBlocks_sync(v1, v1 + 160);
  }
  else if (v2 == -469794816)
  {
    v3 = _os_activity_create(&dword_1BF335000, "Baseband state: reset detected", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
    state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
    state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
    os_activity_scope_enter(v3, &state);
    os_activity_scope_leave(&state);
    v4 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(state.opaque[0]) = 0;
      _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I baseband reset detected", (uint8_t *)&state, 2u);
    }
    *(_DWORD *)(v1 + 128) = 1;
    ResetDetection::notifyResetDetectBlocks_sync(v1, v1 + 136);
    if (v3)
      os_release(v3);
  }
}

void sub_1BF4281B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::os::scoped_activity::~scoped_activity((void **)va);
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "reset.detect");
}

uint64_t ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7904FA8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7904FA8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF428360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF42837C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<ResetDetection>::shared_ptr[abi:ne180100]<ResetDetection,std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E7904FE8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF428498(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection*)#1}::operator() const(ResetDetection*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF4284B8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ResetDetection *,std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection *)#1},std::allocator<ResetDetection>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ResetDetection *,std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection *)#1},std::allocator<ResetDetection>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection*)#1}::operator() const(ResetDetection*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<ResetDetection *,std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection *)#1},std::allocator<ResetDetection>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI14ResetDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI14ResetDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptr"
                                "IT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI14ResetDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI14ResetDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection*)#1}::operator() const(ResetDetection*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  _BYTE v10[16];

  *a1 = off_1E7904FA8;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  a1[1] = &unk_1E78FB900;
  a1[7] = *a3;
  v5 = a3[1];
  a1[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v9);
  return a1;
}

void sub_1BF428628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

void ctu::SharedLoggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7904FA8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(char *a1)
{
  const void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = (const void *)*((_QWORD *)a1 + 8);
    if (v2)
      _Block_release(v2);
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void ctu::SharedSynchronizable<ResetDetection>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI14ResetDetectionE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E7905070;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI14ResetDetectionE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIK14ResetDetectionEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIK14ResetDetectionEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t TraceFilter::determineFilterAction(std::string *a1)
{
  const void *v2;
  size_t v3;
  std::string::size_type v4;
  std::string *p_dst;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __darwin_ino64_t v10;
  const void *v11;
  size_t v12;
  std::string::size_type v13;
  std::string *v14;
  int v15;
  int v16;
  __darwin_ino64_t st_ino;
  uint64_t st_rdev;
  __darwin_ino64_t v19;
  unsigned __int8 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  NSObject *v24;
  unint64_t *v25;
  unint64_t v26;
  void *v27;
  std::string::size_type size;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  size_t v33;
  std::string::size_type v34;
  std::string *v35;
  uint64_t v36;
  uint64_t v37;
  signed int v38;
  std::string::size_type v39;
  _QWORD *v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  const void *v50;
  size_t v51;
  __darwin_ino64_t v52;
  stat *p_p;
  void *v54;
  std::string::size_type v55;
  unsigned __int8 v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  os_unfair_lock_s *v61;
  const char *v62;
  const void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  timespec v67;
  std::string *v68;
  int v69;
  const void *v70;
  size_t v71;
  size_t v72;
  __int128 *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t NumberOfLogDumps;
  unsigned __int8 v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  NSObject *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  void *v87;
  signed int v88;
  std::string v89;
  int v90;
  unsigned int v91;
  __int128 v92;
  __int128 v93;
  unint64_t v94;
  std::string v95;
  std::string __dst;
  stat __p;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  std::string::__assign_external(a1, (const std::string::value_type *)*MEMORY[0x1E0CFB6C8]);
  if (TelephonyUtilIsInternalBuild())
  {
    v91 = -1431655766;
    v2 = (const void *)*MEMORY[0x1E0CFB570];
    v3 = strlen((const char *)*MEMORY[0x1E0CFB570]);
    if (v3 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v4 = v3;
    if (v3 >= 0x17)
    {
      v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v7 = v3 | 7;
      v8 = v7 + 1;
      p_dst = (std::string *)operator new(v7 + 1);
      __dst.__r_.__value_.__l.__size_ = v4;
      __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v3;
      p_dst = &__dst;
      if (!v3)
      {
LABEL_11:
        p_dst->__r_.__value_.__s.__data_[v4] = 0;
        memset(&__p, 0, 24);
        if (prop::logfilter::get((char *)&__dst, (uint64_t)&__p))
        {
          v9 = util::convert<int>((const std::string *)&__p, &v91, 0);
          if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0)
            goto LABEL_16;
        }
        else
        {
          v9 = 0;
          if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0)
            goto LABEL_16;
        }
        operator delete(*(void **)&__p.st_dev);
LABEL_16:
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          if (v9)
          {
LABEL_18:
            v10 = v91;
            v95.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
            v95.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAALL;
            v95.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAA00;
            v11 = (const void *)*MEMORY[0x1E0D01A30];
            v12 = strlen((const char *)*MEMORY[0x1E0D01A30]);
            if (v12 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v13 = v12;
            if (v12 >= 0x17)
            {
              v30 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v12 | 7) != 0x17)
                v30 = v12 | 7;
              v31 = v30 + 1;
              v14 = (std::string *)operator new(v30 + 1);
              __dst.__r_.__value_.__l.__size_ = v13;
              __dst.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
            }
            else
            {
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v12;
              v14 = &__dst;
              if (!v12)
              {
                __dst.__r_.__value_.__s.__data_[0] = 0;
                v15 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
                if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_22;
                goto LABEL_47;
              }
            }
            memmove(v14, v11, v13);
            v14->__r_.__value_.__s.__data_[v13] = 0;
            v15 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_22:
              if (!v15)
                goto LABEL_51;
              memset(&__p, 0, 64);
              v16 = statvfs((const char *)&__dst, (statvfs *)&__p);
              st_ino = __p.st_ino;
              st_rdev = __p.st_rdev;
              if ((v15 & 0x80000000) == 0)
              {
LABEL_25:
                if (!v16)
                {
                  v19 = (st_ino * st_rdev) >> 20;
                  if ((v10 & 0x80000000) == 0 && v19 <= v10)
                    std::string::__assign_external(&v95, (const std::string::value_type *)*MEMORY[0x1E0CFB6C0]);
                  {
                    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
                  }
                  *(_QWORD *)&__p.st_dev = MEMORY[0x1E0C809B0];
                  __p.st_ino = 0x40000000;
                  *(_QWORD *)&__p.st_uid = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
                  *(_QWORD *)&__p.st_rdev = &__block_descriptor_tmp_13_2;
                  __p.st_atimespec.tv_sec = (__darwin_time_t)&GetABMLogServer(void)::sLogServer;
                  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
                  {
                    v21 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
                    v93 = GetABMLogServer(void)::sLogServer;
                    if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
                      goto LABEL_32;
                  }
                  else
                  {
                    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &__p);
                    v21 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
                    v93 = GetABMLogServer(void)::sLogServer;
                    if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
                    {
LABEL_32:
                      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
                      do
                        v23 = __ldxr(p_shared_owners);
                      while (__stxr(v23 + 1, p_shared_owners));
                    }
                  }
                  v24 = *((_QWORD *)GetGlobalLogger((uint64_t *)&v93) + 4);
                  if (v21)
                  {
                    v25 = (unint64_t *)&v21->__shared_owners_;
                    do
                      v26 = __ldaxr(v25);
                    while (__stlxr(v26 - 1, v25));
                    if (!v26)
                    {
                      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                      std::__shared_weak_count::__release_weak(v21);
                    }
                  }
                  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
                  {
                    __p.st_dev = 136315394;
                    *(_QWORD *)&__p.st_mode = "trace.filter";
                    WORD2(__p.st_ino) = 2048;
                    *(__darwin_ino64_t *)((char *)&__p.st_ino + 6) = v19;
                    _os_log_impl(&dword_1BF335000, v24, OS_LOG_TYPE_DEFAULT, "#I %s: Free disk space = %lu MB", (uint8_t *)&__p, 0x16u);
                  }
                }
LABEL_51:
                size = v95.__r_.__value_.__l.__size_;
                v27 = (void *)v95.__r_.__value_.__r.__words[0];
                v29 = v95.__r_.__value_.__r.__words[2];
LABEL_52:
                v90 = -1431655766;
                v32 = (const void *)*MEMORY[0x1E0CFB7E8];
                v33 = strlen((const char *)*MEMORY[0x1E0CFB7E8]);
                if (v33 > 0x7FFFFFFFFFFFFFF7)
                  std::string::__throw_length_error[abi:ne180100]();
                v34 = v33;
                if (v33 >= 0x17)
                {
                  v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v33 | 7) != 0x17)
                    v36 = v33 | 7;
                  v37 = v36 + 1;
                  v35 = (std::string *)operator new(v36 + 1);
                  __dst.__r_.__value_.__l.__size_ = v34;
                  __dst.__r_.__value_.__r.__words[2] = v37 | 0x8000000000000000;
                  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
                }
                else
                {
                  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v33;
                  v35 = &__dst;
                  if (!v33)
                  {
LABEL_60:
                    v35->__r_.__value_.__s.__data_[v34] = 0;
                    memset(&__p, 0, 24);
                    if (prop::logfilter::get((char *)&__dst, (uint64_t)&__p))
                    {
                      v6 = util::convert<int>((const std::string *)&__p, &v90, 0);
                      if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0)
                        goto LABEL_65;
                    }
                    else
                    {
                      v6 = 0;
                      if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0)
                        goto LABEL_65;
                    }
                    operator delete(*(void **)&__p.st_dev);
LABEL_65:
                    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(__dst.__r_.__value_.__l.__data_);
                      if ((_DWORD)v6)
                      {
LABEL_67:
                        v38 = v90;
                        memset(&v89, 0, sizeof(v89));
                        if (v90 < 0)
                        {
                          v56 = 0;
                          v55 = 0;
                          v54 = 0;
                          v58 = HIBYTE(v29);
                          if (v29 < 0)
                            v58 = size;
                          if (v58)
                            goto LABEL_165;
                          goto LABEL_162;
                        }
                        memset(&__dst, 0, sizeof(__dst));
                        pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
                        v39 = off_1ED70FDE8;
                        if (!off_1ED70FDE8)
                        {
                          v40 = operator new(0x30uLL);
                          MEMORY[0x1C3B893B4](v40, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x1E0C9B260]);
                          v40[3] = 0;
                          v40[4] = 0;
                          *((_DWORD *)v40 + 10) = 0;
                          std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(&__p, (uint64_t)v40);
                          v41 = *(_OWORD *)&__p.st_dev;
                          *(_QWORD *)&__p.st_dev = 0;
                          __p.st_ino = 0;
                          v42 = (std::__shared_weak_count *)*(&off_1ED70FDE8 + 1);
                          off_1ED70FDE8 = v41;
                          if (v42)
                          {
                            v43 = (unint64_t *)&v42->__shared_owners_;
                            do
                              v44 = __ldaxr(v43);
                            while (__stlxr(v44 - 1, v43));
                            if (!v44)
                            {
                              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                              std::__shared_weak_count::__release_weak(v42);
                            }
                          }
                          v45 = (std::__shared_weak_count *)__p.st_ino;
                          if (__p.st_ino)
                          {
                            v46 = (unint64_t *)(__p.st_ino + 8);
                            do
                              v47 = __ldaxr(v46);
                            while (__stlxr(v47 - 1, v46));
                            if (!v47)
                            {
                              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                              std::__shared_weak_count::__release_weak(v45);
                            }
                          }
                          v39 = off_1ED70FDE8;
                        }
                        v95.__r_.__value_.__r.__words[0] = v39;
                        v95.__r_.__value_.__l.__size_ = *(&off_1ED70FDE8 + 1);
                        if (*(&off_1ED70FDE8 + 1))
                        {
                          v48 = (unint64_t *)(*(&off_1ED70FDE8 + 1) + 8);
                          do
                            v49 = __ldxr(v48);
                          while (__stxr(v49 + 1, v48));
                        }
                        v88 = v38;
                        pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
                        v50 = (const void *)*MEMORY[0x1E0D01A58];
                        v51 = strlen((const char *)*MEMORY[0x1E0D01A58]);
                        if (v51 > 0x7FFFFFFFFFFFFFF7)
                          std::string::__throw_length_error[abi:ne180100]();
                        v52 = v51;
                        if (v51 >= 0x17)
                        {
                          v87 = v27;
                          v59 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v51 | 7) != 0x17)
                            v59 = v51 | 7;
                          v60 = v59 + 1;
                          p_p = (stat *)operator new(v59 + 1);
                          __p.st_ino = v52;
                          *(_QWORD *)&__p.st_uid = v60 | 0x8000000000000000;
                          *(_QWORD *)&__p.st_dev = p_p;
                          v27 = v87;
                        }
                        else
                        {
                          HIBYTE(__p.st_gid) = v51;
                          p_p = &__p;
                          if (!v51)
                          {
LABEL_100:
                            *((_BYTE *)&p_p->st_dev + v52) = 0;
                            v61 = (os_unfair_lock_s *)(v39 + 40);
                            os_unfair_lock_lock((os_unfair_lock_t)(v39 + 40));
                            if ((__p.st_gid & 0x80000000) == 0)
                              v62 = (const char *)&__p;
                            else
                              v62 = *(const char **)&__p.st_dev;
                            ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v93, v62);
                            v63 = (const void *)(**(uint64_t (***)(std::string::size_type, _QWORD))v39)(v39, v93);
                            if (v63)
                            {
                              ctu::cf::assign();
                              CFRelease(v63);
                            }
                            MEMORY[0x1C3B8936C](&v93);
                            os_unfair_lock_unlock(v61);
                            if (SHIBYTE(__p.st_gid) < 0)
                              operator delete(*(void **)&__p.st_dev);
                            v64 = (std::__shared_weak_count *)v95.__r_.__value_.__l.__size_;
                            if (v95.__r_.__value_.__l.__size_)
                            {
                              v65 = (unint64_t *)(v95.__r_.__value_.__l.__size_ + 8);
                              do
                                v66 = __ldaxr(v65);
                              while (__stlxr(v66 - 1, v65));
                              if (!v66)
                              {
                                ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                                std::__shared_weak_count::__release_weak(v64);
                              }
                            }
                            v67.tv_sec = 0xAAAAAAAAAAAAAAAALL;
                            v67.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
                            *(timespec *)&__p.st_blksize = v67;
                            *(timespec *)__p.st_qspare = v67;
                            __p.st_birthtimespec = v67;
                            *(timespec *)&__p.st_size = v67;
                            __p.st_mtimespec = v67;
                            __p.st_ctimespec = v67;
                            *(timespec *)&__p.st_uid = v67;
                            __p.st_atimespec = v67;
                            *(timespec *)&__p.st_dev = v67;
                            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v68 = &__dst;
                            else
                              v68 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                            if (stat((const char *)v68, &__p))
                            {
                              v69 = -1;
                              goto LABEL_142;
                            }
                            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                              std::string::__init_copy_ctor_external(&v95, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                            else
                              v95 = __dst;
                            v70 = (const void *)*MEMORY[0x1E0D01A20];
                            v71 = strlen((const char *)*MEMORY[0x1E0D01A20]);
                            if (v71 > 0x7FFFFFFFFFFFFFF7)
                              std::string::__throw_length_error[abi:ne180100]();
                            v72 = v71;
                            if (v71 >= 0x17)
                            {
                              v74 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v71 | 7) != 0x17)
                                v74 = v71 | 7;
                              v75 = v74 + 1;
                              v73 = (__int128 *)operator new(v74 + 1);
                              *((_QWORD *)&v93 + 1) = v72;
                              v94 = v75 | 0x8000000000000000;
                              *(_QWORD *)&v93 = v73;
                            }
                            else
                            {
                              HIBYTE(v94) = v71;
                              v73 = &v93;
                              if (!v71)
                              {
LABEL_128:
                                *((_BYTE *)v73 + v72) = 0;
                                NumberOfLogDumps = util::getNumberOfLogDumps((uint64_t)&v95, (const void **)&v93);
                                if (SHIBYTE(v94) < 0)
                                {
                                  operator delete((void *)v93);
                                  if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                  {
LABEL_130:
                                    if (NumberOfLogDumps >> 31)
                                      v69 = -1;
                                    else
                                      v69 = NumberOfLogDumps;
                                    if (v69 == -1)
                                      goto LABEL_142;
LABEL_140:
                                    if (v69 >= v88)
                                    {
                                      std::string::__assign_external(&v89, (const std::string::value_type *)*MEMORY[0x1E0CFB6C0]);
                                      v69 = NumberOfLogDumps;
                                    }
LABEL_142:
                                    if ((v77 & 1) == 0
                                    {
                                      __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
                                    }
                                    *(_QWORD *)&__p.st_dev = MEMORY[0x1E0C809B0];
                                    __p.st_ino = 0x40000000;
                                    *(_QWORD *)&__p.st_uid = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
                                    *(_QWORD *)&__p.st_rdev = &__block_descriptor_tmp_13_2;
                                    __p.st_atimespec.tv_sec = (__darwin_time_t)&GetABMLogServer(void)::sLogServer;
                                    if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
                                    {
                                      v78 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer
                                                                        + 1);
                                      v92 = GetABMLogServer(void)::sLogServer;
                                      if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
                                        goto LABEL_147;
                                    }
                                    else
                                    {
                                      dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &__p);
                                      v78 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer
                                                                        + 1);
                                      v92 = GetABMLogServer(void)::sLogServer;
                                      if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
                                        goto LABEL_147;
                                    }
                                    v79 = (unint64_t *)&v78->__shared_owners_;
                                    do
                                      v80 = __ldxr(v79);
                                    while (__stxr(v80 + 1, v79));
LABEL_147:
                                    v81 = *((_QWORD *)GetGlobalLogger((uint64_t *)&v92) + 4);
                                    if (v78)
                                    {
                                      v82 = (unint64_t *)&v78->__shared_owners_;
                                      do
                                        v83 = __ldaxr(v82);
                                      while (__stlxr(v83 - 1, v82));
                                      if (!v83)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                                        std::__shared_weak_count::__release_weak(v78);
                                      }
                                    }
                                    if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
                                    {
                                      __p.st_dev = 136315650;
                                      *(_QWORD *)&__p.st_mode = "trace.filter";
                                      WORD2(__p.st_ino) = 1024;
                                      *(_DWORD *)((char *)&__p.st_ino + 6) = v69;
                                      HIWORD(__p.st_uid) = 1024;
                                      __p.st_gid = v88;
                                      _os_log_impl(&dword_1BF335000, v81, OS_LOG_TYPE_DEFAULT, "#I %s: log dump count = %d, max log limit = %d", (uint8_t *)&__p, 0x18u);
                                    }
                                    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                                    {
                                      operator delete(__dst.__r_.__value_.__l.__data_);
                                      v55 = v89.__r_.__value_.__l.__size_;
                                      v54 = (void *)v89.__r_.__value_.__r.__words[0];
                                      v56 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
                                      v85 = HIBYTE(v29);
                                      if (v29 < 0)
                                        v85 = size;
                                      if (v85)
                                        goto LABEL_165;
                                    }
                                    else
                                    {
                                      v55 = v89.__r_.__value_.__l.__size_;
                                      v54 = (void *)v89.__r_.__value_.__r.__words[0];
                                      v56 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
                                      v84 = HIBYTE(v29);
                                      if (v29 < 0)
                                        v84 = size;
                                      if (v84)
                                        goto LABEL_165;
                                    }
LABEL_162:
                                    if ((v56 & 0x80u) == 0)
                                      v55 = v56;
                                    if (!v55)
                                    {
LABEL_166:
                                      if ((v56 & 0x80) != 0)
                                      {
                                        operator delete(v54);
                                        if ((v29 & 0x8000000000000000) == 0)
                                          return v6;
                                      }
                                      else if ((v29 & 0x8000000000000000) == 0)
                                      {
                                        return v6;
                                      }
                                      operator delete(v27);
                                      return v6;
                                    }
LABEL_165:
                                    std::string::__assign_external(a1, (const std::string::value_type *)*MEMORY[0x1E0CFB6C0]);
                                    goto LABEL_166;
                                  }
                                }
                                else if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                {
                                  goto LABEL_130;
                                }
                                operator delete(v95.__r_.__value_.__l.__data_);
                                if (NumberOfLogDumps >> 31)
                                  v69 = -1;
                                else
                                  v69 = NumberOfLogDumps;
                                if (v69 == -1)
                                  goto LABEL_142;
                                goto LABEL_140;
                              }
                            }
                            memmove(v73, v70, v72);
                            goto LABEL_128;
                          }
                        }
                        memmove(p_p, v50, v52);
                        goto LABEL_100;
                      }
                    }
                    else if ((_DWORD)v6)
                    {
                      goto LABEL_67;
                    }
                    v54 = 0;
                    v55 = 0;
                    v56 = 0;
                    v57 = HIBYTE(v29);
                    if (v29 < 0)
                      v57 = size;
                    if (v57)
                      goto LABEL_165;
                    goto LABEL_162;
                  }
                }
                memmove(v35, v32, v34);
                goto LABEL_60;
              }
LABEL_24:
              operator delete(__dst.__r_.__value_.__l.__data_);
              goto LABEL_25;
            }
LABEL_47:
            if (!__dst.__r_.__value_.__l.__size_)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              goto LABEL_51;
            }
            memset(&__p, 0, 64);
            v16 = statvfs(__dst.__r_.__value_.__l.__data_, (statvfs *)&__p);
            st_ino = __p.st_ino;
            st_rdev = __p.st_rdev;
            if ((v15 & 0x80000000) == 0)
              goto LABEL_25;
            goto LABEL_24;
          }
        }
        else if (v9)
        {
          goto LABEL_18;
        }
        v27 = 0;
        size = 0;
        v29 = 0;
        goto LABEL_52;
      }
    }
    memmove(p_dst, v2, v4);
    goto LABEL_11;
  }
  return 1;
}

void sub_1BF4294C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  void *v44;
  uint64_t v45;

  if (a38 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  if (v45 < 0)
    operator delete(v44);
  _Unwind_Resume(exception_object);
}

uint64_t __cxx_global_var_init_9()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1BF335000);
  }
  return result;
}

uint64_t data::TransportService::ThrottlingConfig::asString@<X0>(data::TransportService::ThrottlingConfig *this@<X0>, _BYTE *a2@<X8>)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  _QWORD *v11;
  const char *v12;
  const char *v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  void *__p[2];
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v29 = 0xAAAAAAAAAAAAAAAALL;
  v31 = v4;
  v39 = v4;
  v38 = v4;
  v37 = v4;
  v36 = v4;
  v35 = v4;
  v34 = v4;
  v33 = v4;
  v32 = v4;
  *(_OWORD *)__p = v4;
  v28 = v4;
  v25 = v4;
  v26 = v4;
  v23 = v4;
  v24 = v4;
  v5 = MEMORY[0x1E0DE4FE0];
  v6 = MEMORY[0x1E0DE4FE0] + 64;
  v30 = MEMORY[0x1E0DE4FE0] + 64;
  v7 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v22 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v22 + *(_QWORD *)(v22 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v22 + *(_QWORD *)(v22 - 24));
  std::ios_base::init(v9, &v23);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v22 = v5 + 24;
  v30 = v6;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v23 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v28 = 0u;
  LODWORD(v29) = 16;
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"enabled ", 8);
  v12 = "???";
  if (!*(_DWORD *)this)
    v12 = "Disabled";
  if (*(_DWORD *)this == 1)
    v13 = "Enabled";
  else
    v13 = v12;
  v14 = strlen(v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v14);
  if (*(_DWORD *)this == 1)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)", timeout ", 10);
    std::ostream::operator<<();
  }
  if ((v29 & 0x10) != 0)
  {
    v16 = *((_QWORD *)&v28 + 1);
    if (*((_QWORD *)&v28 + 1) < (unint64_t)v26)
    {
      *((_QWORD *)&v28 + 1) = v26;
      v16 = v26;
    }
    v17 = (const void *)*((_QWORD *)&v25 + 1);
    v15 = v16 - *((_QWORD *)&v25 + 1);
    if ((unint64_t)(v16 - *((_QWORD *)&v25 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_25;
  }
  else
  {
    if ((v29 & 8) == 0)
    {
      v15 = 0;
      a2[23] = 0;
      goto LABEL_21;
    }
    v17 = (const void *)v24;
    v15 = v25 - v24;
    if ((_QWORD)v25 - (_QWORD)v24 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_25:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v15 >= 0x17)
  {
    v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v18 = v15 | 7;
    v19 = v18 + 1;
    v20 = operator new(v18 + 1);
    *((_QWORD *)a2 + 1) = v15;
    *((_QWORD *)a2 + 2) = v19 | 0x8000000000000000;
    *(_QWORD *)a2 = v20;
    a2 = v20;
    goto LABEL_20;
  }
  a2[23] = v15;
  if (v15)
LABEL_20:
    memmove(a2, v17, v15);
LABEL_21:
  a2[v15] = 0;
  v22 = *v7;
  *(uint64_t *)((char *)&v22 + *(_QWORD *)(v22 - 24)) = v7[3];
  *(_QWORD *)&v23 = v10 + 16;
  if (SBYTE7(v28) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B89E4C](&v30);
}

void sub_1BF429930(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3B89E4C](v1);
  _Unwind_Resume(a1);
}

_QWORD *data::TransportService::TransportService(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  return this;
}

uint64_t data::TransportService::TransportService(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v3 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  data::TransportService::State::create((capabilities::abs *)&v10, a1);
  v6 = v11;
  if (!v11)
    return a1;
  v7 = (unint64_t *)&v11->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v3 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  data::TransportService::State::create((capabilities::abs *)&v10, a1);
  v6 = v11;
  if (!v11)
    return a1;
  v7 = (unint64_t *)&v11->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_1BF429A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void data::TransportService::State::create(capabilities::abs *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  __int128 v15;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (capabilities::abs::supportsDataTransportService(a1))
  {
    v4 = operator new(0xA8uLL);
    v5 = (uint64_t)v4;
    v6 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
    v13 = *(_QWORD *)a1;
    v14 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    data::TransportService::State::State((uint64_t)v4, &v13);
    *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
    std::shared_ptr<data::TransportService::State>::shared_ptr[abi:ne180100]<data::TransportService::State,std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State*)#1},void>(&v15, v5);
    ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(v15);
    v9 = v15;
    v15 = 0uLL;
    *(_OWORD *)a2 = v9;
    v10 = v14;
    if (v14)
    {
      v11 = (unint64_t *)&v14->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    data::TransportService::State::init(*(data::TransportService::State **)a2);
  }
}

void sub_1BF429B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

void sub_1BF429B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v10;
  void *v11;

  v11 = v10;
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v11);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void sub_1BF429B6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1BF429B80(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1BF429C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void data::TransportService::enterLowPower(data::TransportService *this)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 0x40000000;
    v3[2] = ___ZN4data16TransportService5State13enterLowPowerEv_block_invoke;
    v3[3] = &__block_descriptor_tmp_20_3;
    v3[4] = v1;
    v4 = v3;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    block[3] = &__block_descriptor_tmp_21_4;
    block[4] = v1 + 72;
    block[5] = &v4;
    v2 = *(NSObject **)(v1 + 88);
    if (*(_QWORD *)(v1 + 96))
      dispatch_async_and_wait(v2, block);
    else
      dispatch_sync(v2, block);
  }
}

void data::TransportService::exitLowPower(data::TransportService *this)
{
  uint64_t v1;
  _QWORD v2[5];

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 0x40000000;
    v2[2] = ___ZN4data16TransportService5State12exitLowPowerEv_block_invoke;
    v2[3] = &__block_descriptor_tmp_22_2;
    v2[4] = v1;
    ctu::SharedSynchronizable<data::TransportService::State>::execute_wrapped((uint64_t *)(v1 + 72), (uint64_t)v2);
  }
}

void data::TransportService::setConfig(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[6];

  v2 = *a1;
  if (*a1)
  {
    v3 = *a2;
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 0x40000000;
    v4[2] = ___ZN4data16TransportService5State9setConfigENS0_16ThrottlingConfigE_block_invoke;
    v4[3] = &__block_descriptor_tmp_25_4;
    v4[4] = v2;
    v4[5] = v3;
    ctu::SharedSynchronizable<data::TransportService::State>::execute_wrapped((uint64_t *)(v2 + 72), (uint64_t)v4);
  }
}

void data::TransportService::dumpState(data::TransportService *this)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 0x40000000;
    v3[2] = ___ZNK4data16TransportService5State9dumpStateEv_block_invoke;
    v3[3] = &__block_descriptor_tmp_26_1;
    v3[4] = v1;
    v4 = v3;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    block[3] = &__block_descriptor_tmp_21_4;
    block[4] = v1 + 72;
    block[5] = &v4;
    v2 = *(NSObject **)(v1 + 88);
    if (*(_QWORD *)(v1 + 96))
      dispatch_async_and_wait(v2, block);
    else
      dispatch_sync(v2, block);
  }
}

void data::TransportService::unblockThrottling(data::TransportService *this)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 0x40000000;
    v3[2] = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
    v3[3] = &__block_descriptor_tmp_27_3;
    v3[4] = v1;
    v4 = v3;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    block[3] = &__block_descriptor_tmp_21_4;
    block[4] = v1 + 72;
    block[5] = &v4;
    v2 = *(NSObject **)(v1 + 88);
    if (*(_QWORD *)(v1 + 96))
      dispatch_async_and_wait(v2, block);
    else
      dispatch_sync(v2, block);
  }
}

uint64_t ctu::PthreadMutexGuardPolicy<sys::UIObserver>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void data::TransportService::State::init(data::TransportService::State *this)
{
  NSObject *v2;
  unint64_t v3;
  sys::UIObserver *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  NSObject *v19;
  void *v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  void (*v31)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  int *v46;
  int v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t *v52;
  unint64_t v53;
  _OWORD *v54;
  uint64_t v55;
  ApplePDPHelperInterface *v56;
  ApplePDPHelperInterface *Instance;
  int v58;
  NSObject *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  unint64_t v66[3];
  unint64_t v67;
  unint64_t v68;
  _QWORD aBlock[7];
  dispatch_object_t object;
  void *v71;
  uint8_t buf[16];
  __int128 v73;
  _BYTE v74[24];
  int v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Inited", buf, 2u);
  }
  v67 = 0xAAAAAAAAAAAAAAAALL;
  v68 = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance);
  v3 = off_1ED70FE88;
  if (!off_1ED70FE88)
  {
    memset(buf, 170, sizeof(buf));
    v4 = (sys::UIObserver *)operator new(0x40uLL);
    sys::UIObserver::UIObserver(v4);
    std::shared_ptr<sys::UIObserver>::shared_ptr[abi:ne180100]<sys::UIObserver,void>((std::__shared_weak_count_vtbl **)buf, (std::__shared_weak_count_vtbl *)v4);
    v5 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v6 = (std::__shared_weak_count *)*(&off_1ED70FE88 + 1);
    off_1ED70FE88 = v5;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v10 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v3 = off_1ED70FE88;
  }
  v67 = v3;
  v68 = *(&off_1ED70FE88 + 1);
  if (*(&off_1ED70FE88 + 1))
  {
    v12 = (unint64_t *)(*(&off_1ED70FE88 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  pthread_mutex_unlock(&ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE13connect_eventIN5boost8signals26signalIFvbENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionIS9_EENSF_IFvRKNS7_10connectionEbEEENS7_5mutexEEES3_vJbEEEDTcl7connectfp_cvNSC_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSS_SU_E_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_24;
  aBlock[4] = (char *)this + 72;
  aBlock[5] = data::TransportService::State::handleUILockStateChange_sync;
  aBlock[6] = 0;
  v14 = _Block_copy(aBlock);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v15 || (v16 = *((_QWORD *)this + 9), (v17 = std::__shared_weak_count::lock(v15)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v18 = v17;
  v19 = *((_QWORD *)this + 11);
  object = v19;
  if (v14)
    v20 = _Block_copy(v14);
  else
    v20 = 0;
  v71 = v20;
  dispatch_retain(v19);
  *(_OWORD *)buf = 0u;
  v73 = 0u;
  boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>::init_slot_function<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>((uint64_t)buf, (uint64_t)&object);
  p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
  do
    v22 = __ldxr(p_shared_weak_owners);
  while (__stxr(v22 + 1, p_shared_weak_owners));
  v23 = operator new(0x18uLL);
  *v23 = &off_1E79053E8;
  v23[1] = v16;
  v23[2] = v18;
  do
    v24 = __ldxr(p_shared_weak_owners);
  while (__stxr(v24 + 1, p_shared_weak_owners));
  v25 = operator new(0x18uLL);
  v26 = v25;
  *v25 = &off_1E79053E8;
  v25[1] = v16;
  v25[2] = v18;
  do
    v27 = __ldxr(p_shared_weak_owners);
  while (__stxr(v27 + 1, p_shared_weak_owners));
  v76 = v25;
  v75 = 2;
  v28 = *(_QWORD *)&buf[8];
  if (*(_QWORD *)&buf[8] < (unint64_t)v73)
  {
    v29 = operator new(0x18uLL);
    *v29 = &off_1E79053E8;
    v29[1] = v16;
    v29[2] = v18;
    do
      v30 = __ldxr(p_shared_weak_owners);
    while (__stxr(v30 + 1, p_shared_weak_owners));
    *(_QWORD *)(v28 + 8) = v29;
    *(_DWORD *)v28 = 2;
    *(_QWORD *)&buf[8] = v28 + 24;
LABEL_33:
    (*(void (**)(_QWORD *))(*v26 + 8))(v26);
    goto LABEL_34;
  }
  v46 = std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((uint64_t *)buf, (uint64_t)&v75);
  v47 = v75 ^ (v75 >> 31);
  *(_QWORD *)&buf[8] = v46;
  if (v47 == 2)
  {
    v26 = v76;
    if (!v76)
      goto LABEL_34;
    goto LABEL_33;
  }
  if (v47 == 1)
  {
    v48 = v77;
    if (!v77)
      goto LABEL_34;
    v49 = (unsigned int *)(v77 + 12);
    do
    {
      v50 = __ldaxr(v49);
      v51 = v50 - 1;
    }
    while (__stlxr(v51, v49));
    if (v51)
      goto LABEL_34;
  }
  else
  {
    v48 = v77;
    if (!v77)
      goto LABEL_34;
    v63 = (unsigned int *)(v77 + 12);
    do
    {
      v64 = __ldaxr(v63);
      v65 = v64 - 1;
    }
    while (__stlxr(v65, v63));
    if (v65)
      goto LABEL_34;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v48 + 24))(v48);
LABEL_34:
  (*(void (**)(_QWORD *))(*v23 + 8))(v23);
  std::__shared_weak_count::__release_weak(v18);
  boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::connect(*(_QWORD *)(v3 + 40), (uint64_t)buf, 0, v66);
  if (*((_QWORD *)&v73 + 1))
  {
    if ((BYTE8(v73) & 1) == 0)
    {
      v31 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*((_QWORD *)&v73 + 1) & 0xFFFFFFFFFFFFFFFELL);
      if (v31)
        v31(v74, v74, 2);
    }
    *((_QWORD *)&v73 + 1) = 0;
  }
  v32 = *(_QWORD *)buf;
  if (!*(_QWORD *)buf)
    goto LABEL_66;
  v33 = *(_QWORD *)&buf[8];
  v34 = *(void **)buf;
  if (*(_QWORD *)&buf[8] == *(_QWORD *)buf)
    goto LABEL_65;
  v35 = *(_QWORD *)&buf[8];
  do
  {
    v36 = *(_DWORD *)(v35 - 24);
    v35 -= 24;
    v37 = v36 ^ (v36 >> 31);
    if (v37 == 2)
    {
      v42 = *(_QWORD *)(v33 - 16);
      if (v42)
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
    }
    else if (v37 == 1)
    {
      v38 = *(unsigned int **)(v33 - 8);
      if (v38)
      {
        v39 = v38 + 3;
        do
        {
          v40 = __ldaxr(v39);
          v41 = v40 - 1;
        }
        while (__stlxr(v41, v39));
        if (!v41)
          goto LABEL_49;
      }
    }
    else
    {
      v38 = *(unsigned int **)(v33 - 8);
      if (v38)
      {
        v43 = v38 + 3;
        do
        {
          v44 = __ldaxr(v43);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, v43));
        if (!v45)
LABEL_49:
          (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 24))(v38);
      }
    }
    v33 = v35;
  }
  while (v35 != v32);
  v34 = *(void **)buf;
LABEL_65:
  *(_QWORD *)&buf[8] = v32;
  operator delete(v34);
LABEL_66:
  dispatch_release(object);
  if (v71)
    _Block_release(v71);
  v52 = (unint64_t *)&v18->__shared_owners_;
  do
    v53 = __ldaxr(v52);
  while (__stlxr(v53 - 1, v52));
  if (!v53)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!v14)
      goto LABEL_75;
    goto LABEL_74;
  }
  if (v14)
LABEL_74:
    _Block_release(v14);
LABEL_75:
  v54 = operator new(0x20uLL);
  v54[1] = *(_OWORD *)v66;
  v55 = *((_QWORD *)this + 15);
  *(_QWORD *)v54 = v55;
  *((_QWORD *)v54 + 1) = (char *)this + 120;
  *(_QWORD *)(v55 + 8) = v54;
  *((_QWORD *)this + 15) = v54;
  ++*((_QWORD *)this + 17);
  v56 = (ApplePDPHelperInterface *)capabilities::ipc::supportsIPMetadataTrailer((capabilities::ipc *)v54);
  if (!(_DWORD)v56)
    goto LABEL_81;
  Instance = (ApplePDPHelperInterface *)ApplePDPHelperInterface::getInstance(v56);
  v58 = ApplePDPHelperInterface::enableMetadataTrailer(Instance, 1, 0);
  v59 = *((_QWORD *)this + 5);
  if (!v58)
  {
    if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF335000, v59, OS_LOG_TYPE_ERROR, "Failed to enable IP metadata trailer appending", buf, 2u);
      v60 = (std::__shared_weak_count *)v68;
      if (v68)
        goto LABEL_82;
      return;
    }
    goto LABEL_81;
  }
  if (!os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
  {
LABEL_81:
    v60 = (std::__shared_weak_count *)v68;
    if (v68)
      goto LABEL_82;
    return;
  }
  *(_WORD *)buf = 0;
  _os_log_impl(&dword_1BF335000, v59, OS_LOG_TYPE_DEFAULT, "#I Enabled IP metadata trailer appending", buf, 2u);
  v60 = (std::__shared_weak_count *)v68;
  if (!v68)
    return;
LABEL_82:
  v61 = (unint64_t *)&v60->__shared_owners_;
  do
    v62 = __ldaxr(v61);
  while (__stlxr(v62 - 1, v61));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
}

void sub_1BF42A5E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF42A854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF42A870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<data::TransportService::State>::shared_ptr[abi:ne180100]<data::TransportService::State,std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E79050B0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF42A98C(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State*)#1}::operator() const(data::TransportService::State*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF42A9AC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<data::TransportService::State *,std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State *)#1},std::allocator<data::TransportService::State>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<data::TransportService::State *,std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State *)#1},std::allocator<data::TransportService::State>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State*)#1}::operator() const(data::TransportService::State*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<data::TransportService::State *,std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State *)#1},std::allocator<data::TransportService::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE15make_shared_ptrIS3_EENSt3__110shared"
                     "_ptrIT_EEPS8_EUlPS3_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE15make_shared_ptrIS3_EENSt3"
                                "__110shared_ptrIT_EEPS8_EUlPS3_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State*)#1}::operator() const(data::TransportService::State*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t data::TransportService::State::State(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  void *__p[2];
  char v11;
  _BYTE v12[16];
  char label[23];
  char v14;
  _BYTE v15[16];
  _BYTE v16[16];

  v14 = 12;
  strcpy(label, "ipc.svc.data");
  v11 = 12;
  strcpy((char *)__p, "ipc.svc.data");
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v12, "com.apple.telephony.abm", (const char *)__p);
  v4 = dispatch_queue_create(label, 0);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v4;
  if (v4)
  {
    v5 = v4;
    dispatch_retain(v4);
    *(_QWORD *)(a1 + 96) = 0;
    dispatch_release(v5);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_QWORD *)a1 = off_1E7905210;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v16);
  *(_QWORD *)(a1 + 8) = &unk_1E78FB900;
  *(_QWORD *)(a1 + 56) = *a2;
  v6 = a2[1];
  *(_QWORD *)(a1 + 64) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v15);
  *(_QWORD *)a1 = off_1E79051D0;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v12);
  if (v11 < 0)
  {
    operator delete(__p[0]);
    if ((v14 & 0x80000000) == 0)
      goto LABEL_9;
LABEL_11:
    operator delete(*(void **)label);
    goto LABEL_9;
  }
  if (v14 < 0)
    goto LABEL_11;
LABEL_9:
  *(_QWORD *)a1 = off_1E7905100;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 120;
  *(_QWORD *)(a1 + 128) = a1 + 120;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 104) = 0x2D00000000;
  return a1;
}

void sub_1BF42AC14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  _QWORD *v23;
  uint64_t v24;

  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v24 - 48));
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a23);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v23);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a15);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a22 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a17);
  _Unwind_Resume(a1);
}

void data::TransportService::State::~State(data::TransportService::State *this)
{
  void *v1;

  data::TransportService::State::~State(this);
  operator delete(v1);
}

{
  char *v2;
  char *i;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int j;
  unsigned int v7;
  boost::signals2::detail::connection_body_base *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  char *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  NSObject *v34;
  NSObject *v35;
  std::__shared_weak_count *v36;

  *(_QWORD *)this = off_1E7905100;
  v2 = (char *)this + 120;
  for (i = (char *)*((_QWORD *)this + 16); i != v2; i = (char *)*((_QWORD *)i + 1))
  {
    v4 = (unsigned int *)*((_QWORD *)i + 3);
    if (v4)
    {
      v5 = v4 + 2;
      for (j = v4[2]; j; j = v7)
      {
        v7 = __ldxr(v5);
        if (v7 == j)
        {
          if (!__stxr(j + 1, v5))
          {
            v8 = (boost::signals2::detail::connection_body_base *)*((_QWORD *)i + 2);
            if (v8)
              boost::signals2::detail::connection_body_base::disconnect(v8);
            do
            {
              v9 = __ldaxr(v5);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v5));
            if (!v10)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
              v11 = v4 + 3;
              do
              {
                v12 = __ldaxr(v11);
                v13 = v12 - 1;
              }
              while (__stlxr(v13, v11));
              if (!v13)
                (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
            }
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
  }
  if (*((_QWORD *)this + 17))
  {
    v14 = *((_QWORD *)this + 15);
    v15 = (char *)*((_QWORD *)this + 16);
    v16 = *(_QWORD *)v15;
    *(_QWORD *)(v16 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v16;
    *((_QWORD *)this + 17) = 0;
    if (v15 != v2)
    {
      do
      {
        v24 = (char *)*((_QWORD *)v15 + 1);
        v25 = (unsigned int *)*((_QWORD *)v15 + 3);
        if (v25)
        {
          v26 = v25 + 3;
          do
          {
            v27 = __ldaxr(v26);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, v26));
          if (!v28)
            (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 24))(v25);
        }
        operator delete(v15);
        v15 = v24;
      }
      while (v24 != v2);
    }
  }
  v17 = *((_QWORD *)this + 20);
  if (v17)
    dispatch_release(v17);
  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (!v18)
    goto LABEL_27;
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!*((_QWORD *)this + 17))
      goto LABEL_43;
  }
  else
  {
LABEL_27:
    if (!*((_QWORD *)this + 17))
      goto LABEL_43;
  }
  v21 = *((_QWORD *)this + 15);
  v22 = (char *)*((_QWORD *)this + 16);
  v23 = *(_QWORD *)v22;
  *(_QWORD *)(v23 + 8) = *(_QWORD *)(v21 + 8);
  **(_QWORD **)(v21 + 8) = v23;
  *((_QWORD *)this + 17) = 0;
  if (v22 != v2)
  {
    do
    {
      v29 = (char *)*((_QWORD *)v22 + 1);
      v30 = (unsigned int *)*((_QWORD *)v22 + 3);
      if (v30)
      {
        v31 = v30 + 3;
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
          (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 24))(v30);
      }
      operator delete(v22);
      v22 = v29;
    }
    while (v29 != v2);
  }
LABEL_43:
  *(_QWORD *)this = off_1E7905210;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v34 = *((_QWORD *)this + 12);
  if (v34)
    dispatch_release(v34);
  v35 = *((_QWORD *)this + 11);
  if (v35)
    dispatch_release(v35);
  v36 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v36)
    std::__shared_weak_count::__release_weak(v36);
}

uint64_t ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "ipc.svc.data");
}

uint64_t ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::SharedLoggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7905210;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7905210;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

_QWORD *ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7905210;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7905210;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void sub_1BF42B054(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::shared_ptr<boost::signals2::detail::connection_body_base>::~shared_ptr((uint64_t)&a9);
  __clang_call_terminate(a1);
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body_base>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void data::TransportService::State::handleUILockStateChange_sync(data::TransportService::State *this, int a2)
{
  NSObject *v4;
  const char *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if ((a2 & 1) != 0)
      return;
LABEL_7:
    data::TransportService::State::unblockThrottling_sync(this);
    return;
  }
  v5 = "unlocked";
  if (a2)
    v5 = "locked";
  v6 = 136315138;
  v7 = v5;
  _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I UI has %s", (uint8_t *)&v6, 0xCu);
  if ((a2 & 1) == 0)
    goto LABEL_7;
}

uint64_t ___ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE13connect_eventIN5boost8signals26signalIFvbENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionIS9_EENSF_IFvRKNS7_10connectionEbEEENS7_5mutexEEES3_vJbEEEDTcl7connectfp_cvNSC_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSS_SU_E_block_invoke(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[5];
  v2 = a1[6];
  v3 = (_QWORD *)(a1[4] + (v2 >> 1) - 72);
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>::~slot(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 32, a1 + 32, 2);
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*(_QWORD *)a1)
  {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)a1, *(_QWORD *)a1);
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>::~DispatchSlot(uint64_t a1)
{
  const void *v2;

  dispatch_release(*(dispatch_object_t *)a1);
  v2 = *(const void **)(a1 + 8);
  if (v2)
    _Block_release(v2);
  return a1;
}

void boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::connect(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  __int128 v8;
  pthread_mutex_t *v9;
  char *v10;
  char *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  _OWORD v19[10];
  unint64_t v20;
  void *__p;
  uint64_t v22;
  pthread_mutex_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v19[8] = v8;
  v19[9] = v8;
  v19[6] = v8;
  v19[7] = v8;
  v19[4] = v8;
  v19[5] = v8;
  v19[2] = v8;
  v19[3] = v8;
  v19[0] = v8;
  v19[1] = v8;
  v9 = *(pthread_mutex_t **)(a1 + 24);
  v20 = 10;
  __p = v19;
  v22 = 0;
  v23 = v9;
  pthread_mutex_lock(v9);
  boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::nolock_connect((uint64_t ***)a1, v19, a2, a3, a4);
  pthread_mutex_unlock(v23);
  v10 = (char *)__p;
  if (__p)
  {
    if (v22 - 1 >= 0)
    {
      v11 = (char *)__p + 16 * v22;
      do
      {
        v12 = (unsigned int *)*((_QWORD *)v11 - 1);
        if (v12)
        {
          v13 = v12 + 2;
          do
          {
            v14 = __ldaxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (!v15)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 16))(v12);
            v16 = v12 + 3;
            do
            {
              v17 = __ldaxr(v16);
              v18 = v17 - 1;
            }
            while (__stlxr(v18, v16));
            if (!v18)
              (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 24))(v12);
          }
        }
        v11 -= 16;
      }
      while (v11 > v10);
    }
    if (v20 >= 0xB)
      operator delete(__p);
  }
}

void sub_1BF42B3E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::nolock_connect@<X0>(uint64_t ***a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, unint64_t *a5@<X8>)
{
  void *v9;
  uint64_t *v10;
  uint64_t result;
  unint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  _BYTE v25[12];
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;

  v26 = 0xAAAAAAAAAAAAAAAALL;
  v27 = 0xAAAAAAAAAAAAAAAALL;
  boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::nolock_force_unique_connection_list(a1, a2);
  v9 = operator new(0x50uLL);
  boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::connection_body((uint64_t)v9, a3, a1 + 3);
  boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>(&v26, (uint64_t)v9);
  *(_QWORD *)v25 = 0xAAAAAA00AAAAAAAALL;
  *(_DWORD *)&v25[8] = -1431655766;
  if (a4)
  {
    *(_DWORD *)v25 = 0;
    v10 = **a1;
    v28 = (uint64_t *)v10[3];
  }
  else
  {
    *(_DWORD *)v25 = 2;
    v10 = **a1;
    v28 = v10 + 4;
  }
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::m_insert(v10, (uint64_t *)&v28, (int *)v25, &v26);
  v12 = v26;
  result = v27;
  *(_DWORD *)(v26 + 64) = *(_DWORD *)v25;
  *(_QWORD *)(v12 + 68) = *(_QWORD *)&v25[4];
  if (!result)
  {
    *a5 = v12;
    a5[1] = 0;
    v18 = (unsigned int *)v27;
    if (!v27)
      return result;
    goto LABEL_15;
  }
  v13 = (unsigned int *)(result + 12);
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  *a5 = v12;
  a5[1] = result;
  do
    v15 = __ldxr(v13);
  while (__stxr(v15 + 1, v13));
  do
  {
    v16 = __ldaxr(v13);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v13));
  if (!v17)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  v18 = (unsigned int *)v27;
  if (v27)
  {
LABEL_15:
    v19 = v18 + 2;
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v18 + 16))(v18);
      v22 = v18 + 3;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
        return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v18 + 24))(v18);
    }
  }
  return result;
}

void sub_1BF42B660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::~shared_ptr((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF42B674(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

uint64_t *boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::nolock_force_unique_connection_list(uint64_t ***a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t ***v3;
  uint64_t **v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  __int128 v25;

  v2 = a2;
  v3 = a1;
  v4 = a1[1];
  if (v4 && (v5 = atomic_load((unsigned int *)v4 + 2), v5 == 1))
  {
    v6 = **a1;
    v7 = a1[2];
    if (v7 == (uint64_t **)v6)
      v7 = (uint64_t **)v6[1];
    *(_QWORD *)&v25 = v7;
    v8 = 2;
  }
  else
  {
    v9 = (uint64_t *)operator new(0x20uLL);
    v10 = (uint64_t *)*v3;
    v11 = (uint64_t)**v3;
    v12 = operator new(0x40uLL);
    boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::grouped_list((uint64_t)v12, v11);
    boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(v9, (uint64_t)v12);
    v9[2] = v10[2];
    v13 = v10[3];
    v9[3] = v13;
    if (v13)
    {
      v14 = (unsigned int *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>((uint64_t *)&v25, (uint64_t)v9);
    v16 = (uint64_t *)*v3;
    v17 = (unsigned int *)v3[1];
    *(_OWORD *)v3 = v25;
    *(_QWORD *)&v25 = v16;
    *((_QWORD *)&v25 + 1) = v17;
    if (v17)
    {
      v18 = v17 + 2;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 16))(v17);
        v21 = v17 + 3;
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
          (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 24))(v17);
      }
    }
    *(_QWORD *)&v25 = (**v3)[1];
    a1 = v3;
    a2 = v2;
    v8 = 0;
  }
  return boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::nolock_cleanup_connections_from(a1, a2, 1, (uint64_t **)&v25, v8);
}

void sub_1BF42B880(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BF42B89C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  a1[1] = 0;
  v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *v4 = &unk_1E7905328;
  v4[2] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1BF42B900(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  __cxa_rethrow();
}

void sub_1BF42B920(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  __cxa_end_catch();
  v3 = *(unsigned int **)(v1 + 8);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t *boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::nolock_cleanup_connections_from(uint64_t ***a1, _QWORD *a2, char a3, uint64_t **a4, int a5)
{
  uint64_t *result;
  uint64_t **v7;
  uint64_t *v8;
  unsigned int v9;
  unsigned int v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t i;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v21;
  uint64_t *v23;

  result = *a4;
  v23 = result;
  v7 = *a1;
  v8 = **a1;
  if (v8 != result)
  {
    v9 = a5 - 1;
    if ((a3 & 1) != 0)
    {
      v11 = 0;
      do
      {
        v13 = result[2];
        v14 = *(uint64_t **)(v13 + 32);
        if (v14)
        {
          for (i = *v14; i != v14[1]; i += 24)
          {
            if ((*(_DWORD *)i ^ (*(int *)i >> 31)) > 1)
            {
              if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(i + 8) + 24))(*(_QWORD *)(i + 8)) & 1) != 0)
                goto LABEL_18;
            }
            else
            {
              v16 = *(_QWORD *)(i + 16);
              if (!v16 || (v17 = atomic_load((unsigned int *)(v16 + 8))) == 0)
              {
LABEL_18:
                if (*(_BYTE *)(v13 + 24))
                {
                  *(_BYTE *)(v13 + 24) = 0;
                  boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v13, a2);
                }
                break;
              }
            }
          }
        }
        v18 = v23[2];
        if (*(_BYTE *)(v18 + 24))
          result = (uint64_t *)v23[1];
        else
          result = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::erase(**a1, (int *)(v18 + 64), &v23);
        v23 = result;
        ++v11;
      }
      while (result != **a1 && v9 >= v11);
    }
    else
    {
      v19 = 1;
      do
      {
        while (1)
        {
          v21 = result[2];
          if (*(_BYTE *)(v21 + 24))
            break;
          result = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::erase(v8, (int *)(v21 + 64), &v23);
          v7 = *a1;
          v23 = result;
          v8 = *v7;
          if (result == *v7 || v9 < v19++)
            goto LABEL_33;
        }
        result = (uint64_t *)result[1];
        v23 = result;
        v8 = *v7;
      }
      while (result != *v7 && v9 >= v19++);
    }
  }
LABEL_33:
  a1[2] = (uint64_t **)result;
  return result;
}

uint64_t *boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v11;

  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>(&v11, a2);
  v3 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v11;
  v11 = v3;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  return a1;
}

void sub_1BF42BBB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *(unsigned int **)(v1 + 8);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *v4 = &unk_1E7905600;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1BF42BC6C(void *a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  __cxa_begin_catch(a1);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1BF42BD3C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v11;

  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(&v11, a2);
  v3 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v11;
  v11 = v3;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  return a1;
}

void sub_1BF42BEF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *(unsigned int **)(v1 + 8);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::grouped_list(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  v4 = std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::list((_QWORD *)a1, (_QWORD *)a2);
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  *((_BYTE *)v4 + 48) = *(_BYTE *)(a2 + 48);
  v4[3] = v4 + 4;
  v5 = (_QWORD *)(a2 + 32);
  std::map<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::group_key_less<int,std::less<int>>,std::allocator<std::pair<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__tree_node<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,void *> *,long>>>(v4 + 3, *(int **)(a2 + 24), (int *)(a2 + 32));
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(_QWORD **)(a2 + 24);
  if (v6 != (_QWORD *)(a2 + 32))
  {
    v7 = *(_QWORD **)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      v7[6] = v8;
      v9 = a2;
      if (v6 != v5)
        v9 = v6[6];
      v10 = (_QWORD *)v6[1];
      v11 = v10;
      v12 = v6;
      if (v10)
      {
        do
        {
          v13 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v12[2];
          v14 = *v13 == (_QWORD)v12;
          v12 = v13;
        }
        while (!v14);
      }
      v15 = a2;
      if (v13 != v5)
        v15 = v13[6];
      while (v9 != v15)
      {
        v9 = *(_QWORD *)(v9 + 8);
        v8 = *(_QWORD *)(v8 + 8);
      }
      if (v10)
      {
        do
        {
          v16 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v6[2];
          v14 = *v16 == (_QWORD)v6;
          v6 = v16;
        }
        while (!v14);
      }
      v17 = (_QWORD *)v7[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v7[2];
          v14 = *v18 == (_QWORD)v7;
          v7 = v18;
        }
        while (!v14);
      }
      v6 = v16;
      v7 = v18;
    }
    while (v16 != v5);
  }
  return a1;
}

void sub_1BF42C0B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v2, *(_QWORD **)(v1 + 32));
  std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~list((uint64_t *)v1);
  _Unwind_Resume(a1);
}

_QWORD *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::list(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = (_QWORD *)a2[1];
  if (v3 != a2)
  {
    v5 = 0;
    v6 = a1;
    do
    {
      v7 = operator new(0x20uLL);
      v8 = v3[3];
      v7[2] = v3[2];
      v7[3] = v8;
      if (v8)
      {
        v9 = (unsigned int *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
        v6 = (_QWORD *)*a1;
        v5 = a1[2];
      }
      *v7 = v6;
      v7[1] = a1;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = ++v5;
      v3 = (_QWORD *)v3[1];
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1BF42C180(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  if (v2)
  {
    v5 = (uint64_t *)v1[1];
    v6 = *v5;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v6;
    v1[2] = 0;
    if (v5 != v1)
    {
      do
      {
        v7 = (uint64_t *)v5[1];
        v8 = (unsigned int *)v5[3];
        if (v8)
        {
          v9 = v8 + 2;
          do
          {
            v10 = __ldaxr(v9);
            v11 = v10 - 1;
          }
          while (__stlxr(v11, v9));
          if (!v11)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
            v12 = v8 + 3;
            do
            {
              v13 = __ldaxr(v12);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, v12));
            if (!v14)
              (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 24))(v8);
          }
        }
        operator delete(v5);
        v5 = v7;
      }
      while (v7 != v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

uint64_t *std::map<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::group_key_less<int,std::less<int>>,std::allocator<std::pair<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__tree_node<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int *v6;
  uint64_t *v7;
  uint64_t *v8;
  int *v9;
  uint64_t *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t *v15;
  int *v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t *v19[11];

  if (a2 != a3)
  {
    v19[9] = v3;
    v19[10] = v4;
    v6 = a2;
    v7 = result;
    v8 = result + 1;
    do
    {
      v18 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      v19[0] = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      result = std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__find_equal<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>>(v7, v8, v19, &v18, v6 + 8);
      if (*result)
      {
        v9 = (int *)*((_QWORD *)v6 + 1);
        if (v9)
          goto LABEL_11;
      }
      else
      {
        v10 = result;
        v11 = operator new(0x38uLL);
        v12 = *((_QWORD *)v6 + 6);
        v11[2] = *((_OWORD *)v6 + 2);
        *((_QWORD *)v11 + 6) = v12;
        v13 = v19[0];
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = v13;
        *v10 = (uint64_t)v11;
        v14 = *(_QWORD **)*v7;
        if (v14)
        {
          *v7 = (uint64_t)v14;
          v15 = (uint64_t *)*v10;
        }
        else
        {
          v15 = (uint64_t *)v11;
        }
        result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[1], v15);
        ++v7[2];
        v9 = (int *)*((_QWORD *)v6 + 1);
        if (v9)
        {
          do
          {
LABEL_11:
            v16 = v9;
            v9 = *(int **)v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v16 = (int *)*((_QWORD *)v6 + 2);
        v17 = *(_QWORD *)v16 == (_QWORD)v6;
        v6 = v16;
      }
      while (!v17);
LABEL_3:
      v6 = v16;
    }
    while (v16 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__find_equal<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  int v19;
  int v20;
  _QWORD *v21;
  int v22;
  uint64_t *v23;
  int v24;
  int v25;
  int v26;
  uint64_t *v27;
  int v28;
  int v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;

  v5 = a1 + 1;
  if (a1 + 1 == a2)
    goto LABEL_8;
  v6 = *a5;
  v7 = *((_DWORD *)a2 + 8);
  if (*a5 == v7)
  {
    if (v6 != 1)
    {
LABEL_6:
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
    v8 = a5[2];
    v9 = *((_DWORD *)a2 + 10);
    if (v8 >= v9)
    {
      if (v9 >= v8)
        goto LABEL_6;
      goto LABEL_15;
    }
LABEL_8:
    v11 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v13 = a2;
    }
    else
    {
      if (v11)
      {
        v12 = (uint64_t *)*a2;
        do
        {
          v13 = v12;
          v12 = (uint64_t *)v12[1];
        }
        while (v12);
      }
      else
      {
        v17 = a2;
        do
        {
          v13 = (uint64_t *)v17[2];
          v18 = *v13 == (_QWORD)v17;
          v17 = v13;
        }
        while (v18);
      }
      v19 = *((_DWORD *)v13 + 8);
      v20 = *a5;
      if (v19 == *a5)
      {
        if (v19 != 1 || *((_DWORD *)v13 + 10) >= a5[2])
          goto LABEL_24;
      }
      else if (v19 >= v20)
      {
LABEL_24:
        v21 = (_QWORD *)*v5;
        if (!*v5)
        {
          *a3 = v5;
          return a1 + 1;
        }
        if (v20 != 1)
        {
          while (1)
          {
            v26 = *((_DWORD *)v21 + 8);
            v23 = v21;
            if (v20 == v26)
              break;
            if (v20 < v26)
            {
              v21 = (_QWORD *)*v21;
              v5 = v23;
              if (!*v23)
                break;
            }
            else
            {
              if (v26 >= v20)
                break;
              v5 = v21 + 1;
              v21 = (_QWORD *)v21[1];
              if (!v21)
                break;
            }
          }
LABEL_40:
          *a3 = v23;
          return v5;
        }
        v22 = a5[2];
        while (1)
        {
          v23 = v21;
          v24 = *((_DWORD *)v21 + 8);
          if (v24 == 1)
          {
            v25 = *((_DWORD *)v23 + 10);
            if (v22 >= v25)
            {
              if (v25 >= v22)
                goto LABEL_40;
              goto LABEL_33;
            }
LABEL_27:
            v21 = (_QWORD *)*v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_40;
          }
          else
          {
            if (v24 > 1)
              goto LABEL_27;
LABEL_33:
            v5 = v23 + 1;
            v21 = (_QWORD *)v23[1];
            if (!v21)
              goto LABEL_40;
          }
        }
      }
    }
    if (v11)
    {
      *a3 = v13;
      return v13 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  if (v6 < v7)
    goto LABEL_8;
  if (v7 >= v6)
    goto LABEL_6;
LABEL_15:
  v14 = a2[1];
  if (v14)
  {
    v15 = (uint64_t *)a2[1];
    do
    {
      v16 = v15;
      v15 = (uint64_t *)*v15;
    }
    while (v15);
  }
  else
  {
    v27 = a2;
    do
    {
      v16 = (uint64_t *)v27[2];
      v18 = *v16 == (_QWORD)v27;
      v27 = v16;
    }
    while (!v18);
  }
  if (v16 == v5)
    goto LABEL_56;
  v28 = *((_DWORD *)v16 + 8);
  if (v6 == v28)
  {
    if (v6 == 1)
    {
      v29 = a5[2];
      if (v29 >= *((_DWORD *)v16 + 10))
      {
        v30 = (_QWORD *)*v5;
        if (!*v5)
        {
          *a3 = v5;
          return a1 + 1;
        }
        goto LABEL_61;
      }
      goto LABEL_56;
    }
    goto LABEL_58;
  }
  if (v6 < v28)
  {
LABEL_56:
    if (v14)
    {
      *a3 = v16;
      return v16;
    }
    else
    {
      *a3 = a2;
      return a2 + 1;
    }
  }
LABEL_58:
  v30 = (_QWORD *)*v5;
  if (*v5)
  {
    if (v6 == 1)
    {
      v29 = a5[2];
LABEL_61:
      v31 = v30;
      while (1)
      {
        v30 = v31;
        v32 = *((_DWORD *)v31 + 8);
        if (v32 == 1)
        {
          v33 = *((_DWORD *)v30 + 10);
          if (v29 >= v33)
          {
            if (v33 >= v29)
              goto LABEL_72;
            goto LABEL_68;
          }
LABEL_62:
          v31 = (_QWORD *)*v30;
          v5 = v30;
          if (!*v30)
            goto LABEL_72;
        }
        else
        {
          if (v32 > 1)
            goto LABEL_62;
LABEL_68:
          v5 = v30 + 1;
          v31 = (_QWORD *)v30[1];
          if (!v31)
            goto LABEL_72;
        }
      }
    }
    v34 = *((_DWORD *)v30 + 8);
    while (v6 != v34)
    {
      if (v6 < v34)
      {
        v35 = *v30;
        v5 = v30;
        if (!*v30)
          break;
      }
      else
      {
        if (v34 >= v6)
          break;
        v5 = v30 + 1;
        v35 = v30[1];
        if (!v35)
          break;
      }
      v34 = *(_DWORD *)(v35 + 32);
      v30 = (_QWORD *)v35;
    }
  }
  else
  {
    v30 = a1 + 1;
  }
LABEL_72:
  *a3 = v30;
  return v5;
}

_QWORD *boost::detail::shared_count::shared_count<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *v4 = &unk_1E79055A0;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1BF42C75C(void *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  __cxa_begin_catch(a1);
  if (v1)
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)(v1 + 3), (_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1BF42C824(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)(v1 + 3), (_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  BOOL v12;
  BOOL v13;
  uint64_t **v14;
  uint64_t *v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  int v28;
  uint64_t **v29;
  BOOL v30;
  BOOL v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  _QWORD *v45;

  v6 = a1 + 4;
  v5 = (uint64_t *)a1[4];
  if (!v5)
  {
    v23 = a1[10];
    if ((uint64_t *)v23 != *a3)
      goto LABEL_55;
    v19 = *(uint64_t **)(v23 + 8);
    v9 = v6;
    v24 = (uint64_t **)(v6 - 1);
    if (v19 != a1)
    {
LABEL_46:
      v45 = a2;
      std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__emplace_unique_key_args<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::piecewise_construct_t const&,std::tuple<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const&>,std::tuple<>>(v24, a2, (uint64_t)&std::piecewise_construct, &v45)[6] = v19;
      goto LABEL_55;
    }
    goto LABEL_31;
  }
  v7 = *a2;
  v8 = a2[2];
  v9 = v6;
  v10 = v5;
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        v16 = *((_DWORD *)v10 + 8);
        v17 = v16 < 1;
        if (v16 == 1)
          v17 = *((_DWORD *)v10 + 10) < v8;
        if (!v17)
          break;
        v10 = (uint64_t *)v10[1];
        if (!v10)
          goto LABEL_19;
      }
      v9 = v10;
      v10 = (uint64_t *)*v10;
    }
    while (v10);
  }
  else
  {
    do
    {
      v11 = *((_DWORD *)v10 + 8);
      v12 = v11 == v7;
      v13 = v11 < v7;
      if (v11 >= v7)
        v14 = (uint64_t **)v10;
      else
        v14 = (uint64_t **)(v10 + 1);
      if (v13)
        v15 = v9;
      else
        v15 = v10;
      if (v12)
      {
        v14 = (uint64_t **)v10;
        v9 = v10;
      }
      else
      {
        v9 = v15;
      }
      v10 = *v14;
    }
    while (*v14);
  }
LABEL_19:
  v18 = v9[6];
  if ((uint64_t *)v18 == *a3)
  {
    v19 = *(uint64_t **)(v18 + 8);
    v20 = v6;
    if (v7 == 1)
    {
      v21 = v5;
      while (1)
      {
        v22 = *((_DWORD *)v21 + 8);
        if (v22 == 1)
        {
          if (v8 < *((_DWORD *)v21 + 10))
            goto LABEL_27;
LABEL_22:
          v21 = (uint64_t *)v21[1];
          if (!v21)
            goto LABEL_44;
        }
        else
        {
          if (v22 <= 1)
            goto LABEL_22;
LABEL_27:
          v20 = v21;
          v21 = (uint64_t *)*v21;
          if (!v21)
            goto LABEL_44;
        }
      }
    }
    v27 = v5;
    do
    {
      v28 = *((_DWORD *)v27 + 8);
      v29 = (uint64_t **)(v27 + 1);
      v30 = v7 == v28;
      v31 = v7 < v28;
      if (v7 >= v28)
        v32 = (uint64_t **)(v27 + 1);
      else
        v32 = (uint64_t **)v27;
      if (!v31)
        v27 = v20;
      if (v30)
        v32 = v29;
      else
        v20 = v27;
      v27 = *v32;
    }
    while (*v32);
LABEL_44:
    if (v20 == v6)
    {
      v24 = (uint64_t **)(v6 - 1);
      if (v19 != a1)
        goto LABEL_46;
    }
    else
    {
      v24 = (uint64_t **)(v6 - 1);
      if (v19 != (uint64_t *)v20[6])
        goto LABEL_46;
    }
LABEL_31:
    v25 = (uint64_t *)v9[1];
    if (v25)
    {
      do
      {
        v26 = v25;
        v25 = (uint64_t *)*v25;
      }
      while (v25);
    }
    else
    {
      v33 = v9;
      do
      {
        v26 = (uint64_t *)v33[2];
        v12 = *v26 == (_QWORD)v33;
        v33 = v26;
      }
      while (!v12);
    }
    if (*v24 == v9)
      *v24 = v26;
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v5, v9);
    operator delete(v9);
  }
LABEL_55:
  v34 = *a3;
  v35 = **a3;
  v36 = (*a3)[1];
  *(_QWORD *)(v35 + 8) = v36;
  *(_QWORD *)v34[1] = v35;
  --a1[2];
  v37 = (unsigned int *)v34[3];
  if (v37)
  {
    v38 = v37 + 2;
    do
    {
      v39 = __ldaxr(v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v38));
    if (!v40)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 16))(v37);
      v41 = v37 + 3;
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (!v43)
        (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 24))(v37);
    }
  }
  operator delete(v34);
  return v36;
}

uint64_t **std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__emplace_unique_key_args<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::piecewise_construct_t const&,std::tuple<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  int v9;
  uint64_t **v10;
  int v11;
  int v12;
  _QWORD *v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  int v18;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    if (*a2 != 1)
    {
      v18 = *((_DWORD *)v6 + 8);
      if (v8 == v18)
        return (uint64_t **)v6;
      v10 = (uint64_t **)a1[1];
      while (1)
      {
        if (v8 < v18)
        {
          v6 = *v10;
          v7 = v10;
          if (!*v10)
            goto LABEL_13;
        }
        else
        {
          if (v18 >= v8)
            return v10;
          v6 = v10[1];
          if (!v6)
          {
LABEL_11:
            v7 = v10 + 1;
            goto LABEL_13;
          }
        }
        v18 = *((_DWORD *)v6 + 8);
        v10 = (uint64_t **)v6;
        if (v8 == v18)
          return (uint64_t **)v6;
      }
    }
    v9 = a2[2];
    while (1)
    {
      v10 = (uint64_t **)v6;
      v11 = *((_DWORD *)v6 + 8);
      if (v11 == 1)
      {
        v12 = *((_DWORD *)v6 + 10);
        if (v9 >= v12)
        {
          if (v12 >= v9)
            return v10;
          goto LABEL_10;
        }
LABEL_4:
        v6 = (uint64_t *)*v6;
        v7 = v10;
        if (!*v10)
          goto LABEL_13;
      }
      else
      {
        if (v11 > 1)
          goto LABEL_4;
LABEL_10:
        v6 = (uint64_t *)v6[1];
        if (!v6)
          goto LABEL_11;
      }
    }
  }
  v10 = a1 + 1;
LABEL_13:
  v13 = operator new(0x38uLL);
  v14 = *((_DWORD *)*a4 + 2);
  v13[4] = **a4;
  *((_DWORD *)v13 + 10) = v14;
  v13[6] = 0;
  *v13 = 0;
  v13[1] = 0;
  v13[2] = v10;
  *v7 = v13;
  v15 = (uint64_t *)**a1;
  v16 = v13;
  if (v15)
  {
    *a1 = v15;
    v16 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v16);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v13;
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::connection_body(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)a1 = &unk_1E7905270;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = operator new(0x38uLL);
  std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v6, (uint64_t *)a2);
  v6[3] = 0;
  v7 = *(_QWORD *)(a2 + 24);
  if (v7)
  {
    v6[3] = v7;
    if ((v7 & 1) != 0)
    {
      *((_OWORD *)v6 + 2) = *(_OWORD *)(a2 + 32);
      v6[6] = *(_QWORD *)(a2 + 48);
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD *, _QWORD))(v7 & 0xFFFFFFFFFFFFFFFELL))(a2 + 32, v6 + 4, 0);
    }
  }
  boost::shared_ptr<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::shared_ptr<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>((uint64_t *)(a1 + 32), (uint64_t)v6);
  v8 = a3[1];
  *(_QWORD *)(a1 + 48) = *a3;
  *(_QWORD *)(a1 + 56) = v8;
  if (v8)
  {
    v9 = (unsigned int *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_DWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 68) = 0;
  return a1;
}

void sub_1BF42CE38(_Unwind_Exception *a1)
{
  boost::signals2::detail::connection_body_base *v1;
  unsigned int *v2;

  if (*(_QWORD *)v2)
  {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100](v2, *(_QWORD *)v2);
    operator delete(*(void **)v2);
  }
  operator delete(v2);
  boost::signals2::detail::connection_body_base::~connection_body_base(v1);
  _Unwind_Resume(a1);
}

void sub_1BF42CE74(_Unwind_Exception *a1)
{
  boost::signals2::detail::connection_body_base *v1;

  boost::signals2::detail::connection_body_base::~connection_body_base(v1);
  _Unwind_Resume(a1);
}

uint64_t *boost::shared_ptr<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::shared_ptr<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v11;

  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>(&v11, a2);
  v3 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v11;
  v11 = v3;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  return a1;
}

void sub_1BF42CF24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *(unsigned int **)(v1 + 8);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  _QWORD *v1;

  v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::~connection_body(a1);
  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  __int128 v2;
  pthread_mutex_t *v3;
  int v4;
  char *v5;
  char *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  _OWORD v15[10];
  unint64_t v16;
  void *__p;
  uint64_t v18;
  pthread_mutex_t *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[8] = v2;
  v15[9] = v2;
  v15[6] = v2;
  v15[7] = v2;
  v15[4] = v2;
  v15[5] = v2;
  v15[2] = v2;
  v15[3] = v2;
  v15[0] = v2;
  v15[1] = v2;
  v3 = *(pthread_mutex_t **)(a1 + 48);
  v16 = 10;
  __p = v15;
  v18 = 0;
  v19 = v3;
  pthread_mutex_lock(v3);
  boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::nolock_grab_tracked_objects<boost::signals2::mutex,boost::iterators::function_output_iterator<boost::signals2::detail::does_nothing>>(a1, v15);
  v4 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v19);
  v5 = (char *)__p;
  if (__p)
  {
    if (v18 - 1 >= 0)
    {
      v6 = (char *)__p + 16 * v18;
      do
      {
        v7 = (unsigned int *)*((_QWORD *)v6 - 1);
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        v6 -= 16;
      }
      while (v6 > v5);
    }
    if (v16 >= 0xB)
      operator delete(__p);
  }
  return v4 != 0;
}

void sub_1BF42D0F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *(_QWORD *)(result + 40);
  v2 = (_QWORD *)(result + 32);
  *a2 = *(_QWORD *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = *(unsigned int **)(result + 40);
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
    if (v6)
    {
      v7 = v6 + 2;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
        v10 = v6 + 3;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
      }
    }
  }
  else
  {
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
  }
  return result;
}

_QWORD *boost::detail::shared_count::shared_count<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *v4 = &unk_1E79052C8;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1BF42D2D4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  __cxa_begin_catch(a1);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3)
          v3(v1 + 32, v1 + 32, 2);
      }
      *(_QWORD *)(v1 + 24) = 0;
    }
    if (*(_QWORD *)v1)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v1, *(_QWORD *)v1);
      operator delete(*(void **)v1);
    }
    operator delete((void *)v1);
  }
  __cxa_rethrow();
}

void sub_1BF42D334(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::dispose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3)
          v3(v1 + 32, v1 + 32, 2);
      }
      *(_QWORD *)(v1 + 24) = 0;
    }
    if (*(_QWORD *)v1)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v1, *(_QWORD *)v1);
      operator delete(*(void **)v1);
    }
    operator delete((void *)v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::get_untyped_deleter()
{
  return 0;
}

_QWORD *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  *a1 = &unk_1E7905270;
  v2 = (unsigned int *)a1[7];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  v9 = (unsigned int *)a1[5];
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
      v13 = v9 + 3;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
    }
  }
  *a1 = &unk_1E78FDD98;
  v16 = (unsigned int *)a1[2];
  if (v16)
  {
    v17 = v16 + 3;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16);
  }
  return a1;
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::nolock_grab_tracked_objects<boost::signals2::mutex,boost::iterators::function_output_iterator<boost::signals2::detail::does_nothing>>(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int i;
  unsigned int v10;
  uint64_t v11;
  char v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD v21[5];

  v21[4] = *MEMORY[0x1E0C80C00];
  v2 = *(uint64_t **)(a1 + 32);
  if (!v2)
    return;
  v3 = *v2;
  if (*v2 == v2[1])
    return;
  do
  {
    memset(&v21[1], 170, 24);
    v6 = *(_DWORD *)v3 ^ (*(int *)v3 >> 31);
    if (v6 == 2)
    {
      (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v3 + 8) + 16))(v21);
      v21[2] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v21[0] + 16))(v21[0]);
      LODWORD(v21[1]) = 1;
      if (v21[0])
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v21[0] + 8))(v21[0]);
        if ((*(_DWORD *)v3 ^ (*(int *)v3 >> 31)) == 2)
          goto LABEL_26;
LABEL_19:
        v11 = *(_QWORD *)(v3 + 16);
        if (!v11)
          goto LABEL_27;
        if (!atomic_load((unsigned int *)(v11 + 8)))
          goto LABEL_27;
LABEL_21:
        v13 = 0;
        if (LODWORD(v21[1]) == SLODWORD(v21[1]) >> 31)
          goto LABEL_30;
        goto LABEL_22;
      }
LABEL_18:
      if ((*(_DWORD *)v3 ^ (*(int *)v3 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v6 != 1)
    {
      LODWORD(v21[1]) = 0;
      v21[2] = 0;
      v21[3] = 0;
      goto LABEL_18;
    }
    v7 = *(_QWORD *)(v3 + 16);
    if (!v7)
    {
LABEL_25:
      v21[2] = 0;
      v21[3] = v7;
      LODWORD(v21[1]) = 0;
      if ((*(_DWORD *)v3 ^ (*(int *)v3 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    v8 = (unsigned int *)(v7 + 8);
    for (i = *(_DWORD *)(v7 + 8); ; i = v10)
    {
      if (!i)
      {
        v7 = 0;
        goto LABEL_25;
      }
      v10 = __ldxr(v8);
      if (v10 != i)
      {
        __clrex();
        continue;
      }
      if (!__stxr(i + 1, v8))
        break;
    }
    v21[2] = *(_QWORD *)(v3 + 8);
    v21[3] = v7;
    LODWORD(v21[1]) = 0;
    if ((*(_DWORD *)v3 ^ (*(int *)v3 >> 31)) != 2)
      goto LABEL_19;
LABEL_26:
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v3 + 8) + 24))(*(_QWORD *)(v3 + 8)))
      goto LABEL_21;
LABEL_27:
    if (*(_BYTE *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = 0;
      boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, a2);
    }
    v13 = 1;
    if (LODWORD(v21[1]) == SLODWORD(v21[1]) >> 31)
    {
LABEL_30:
      v14 = (unsigned int *)v21[3];
      if (v21[3])
      {
        v15 = (unsigned int *)(v21[3] + 8);
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
          v18 = v14 + 3;
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
            (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 24))(v14);
        }
      }
      goto LABEL_38;
    }
LABEL_22:
    if (v21[2])
      (*(void (**)(_QWORD))(*(_QWORD *)v21[2] + 8))(v21[2]);
LABEL_38:
    if ((v13 & 1) != 0)
      break;
    v3 += 24;
  }
  while (v3 != *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
}

void sub_1BF42D79C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1BF42D7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::~variant((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

void boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::m_insert(uint64_t *a1, uint64_t *a2, int *a3, _QWORD *a4)
{
  _QWORD *v8;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  int v19;
  BOOL v20;
  uint64_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  int v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  BOOL v32;
  uint64_t **v33;
  int v34;
  BOOL v35;
  int v36;
  uint64_t v38;
  int v39;
  _QWORD *v40;

  v8 = a1 + 4;
  v9 = a1;
  if ((uint64_t *)*a2 != a1 + 4)
    v9 = *(uint64_t **)(*a2 + 48);
  v10 = operator new(0x20uLL);
  v11 = v10;
  v12 = a4[1];
  v10[2] = *a4;
  v10[3] = v12;
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *v9;
  *(_QWORD *)(v15 + 8) = v10;
  *v10 = v15;
  *v9 = (uint64_t)v10;
  v10[1] = v9;
  ++a1[2];
  v16 = a1 + 3;
  v17 = *a2;
  if ((_QWORD *)v17 == v8)
    goto LABEL_15;
  v18 = *a3;
  v19 = *(_DWORD *)(v17 + 32);
  v20 = *a3 < v19;
  if (*a3 == v19)
  {
    if (v18 != 1)
      goto LABEL_17;
    v18 = a3[2];
    v19 = *(_DWORD *)(v17 + 40);
    v20 = v18 < v19;
  }
  if (v20 || v19 < v18)
  {
LABEL_15:
    v22 = (uint64_t *)*v8;
    if (*v8)
      goto LABEL_26;
LABEL_49:
    v38 = *(_QWORD *)a3;
    v39 = a3[2];
    v40 = v11;
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__emplace_unique_key_args<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::pair<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>((uint64_t **)a1 + 3, (int *)&v38, (uint64_t)&v38);
    return;
  }
LABEL_17:
  v23 = *(_QWORD **)(v17 + 8);
  if (v23)
  {
    do
    {
      v24 = v23;
      v23 = (_QWORD *)*v23;
    }
    while (v23);
  }
  else
  {
    v25 = (_QWORD *)v17;
    do
    {
      v24 = (_QWORD *)v25[2];
      v31 = *v24 == (_QWORD)v25;
      v25 = v24;
    }
    while (!v31);
  }
  if (*v16 == v17)
    *v16 = v24;
  v26 = (uint64_t *)a1[4];
  --a1[5];
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v26, (uint64_t *)v17);
  operator delete((void *)v17);
  v22 = (uint64_t *)*v8;
  if (!*v8)
    goto LABEL_49;
LABEL_26:
  v27 = *a3;
  v28 = a3[2];
  v29 = v8;
  if (*a3 == 1)
  {
    do
    {
      while (1)
      {
        v34 = *((_DWORD *)v22 + 8);
        v35 = v34 < 1;
        if (v34 == 1)
          v35 = *((_DWORD *)v22 + 10) < v28;
        if (!v35)
          break;
        v22 = (uint64_t *)v22[1];
        if (!v22)
          goto LABEL_41;
      }
      v29 = v22;
      v22 = (uint64_t *)*v22;
    }
    while (v22);
  }
  else
  {
    do
    {
      v30 = *((_DWORD *)v22 + 8);
      v31 = v30 == v27;
      v32 = v30 < v27;
      if (v30 >= v27)
        v33 = (uint64_t **)v22;
      else
        v33 = (uint64_t **)(v22 + 1);
      if (!v32)
        v29 = v22;
      if (v31)
      {
        v33 = (uint64_t **)v22;
        v29 = v22;
      }
      v22 = *v33;
    }
    while (*v33);
  }
LABEL_41:
  if (v29 == v8 || *((_DWORD *)v29 + 8) != v27)
    goto LABEL_49;
  if (v27 == 1)
  {
    v36 = *((_DWORD *)v29 + 10);
    if (v36 < v28 || v28 < v36)
      goto LABEL_49;
  }
}

uint64_t **std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__emplace_unique_key_args<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::pair<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>(uint64_t **a1, int *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  int v8;
  uint64_t **v9;
  int v10;
  int v11;
  _OWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  int v16;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    if (*a2 != 1)
    {
      v16 = *((_DWORD *)v5 + 8);
      if (v7 == v16)
        return (uint64_t **)v5;
      v9 = (uint64_t **)a1[1];
      while (1)
      {
        if (v7 < v16)
        {
          v5 = *v9;
          v6 = v9;
          if (!*v9)
            goto LABEL_13;
        }
        else
        {
          if (v16 >= v7)
            return v9;
          v5 = v9[1];
          if (!v5)
          {
LABEL_11:
            v6 = v9 + 1;
            goto LABEL_13;
          }
        }
        v16 = *((_DWORD *)v5 + 8);
        v9 = (uint64_t **)v5;
        if (v7 == v16)
          return (uint64_t **)v5;
      }
    }
    v8 = a2[2];
    while (1)
    {
      v9 = (uint64_t **)v5;
      v10 = *((_DWORD *)v5 + 8);
      if (v10 == 1)
      {
        v11 = *((_DWORD *)v5 + 10);
        if (v8 >= v11)
        {
          if (v11 >= v8)
            return v9;
          goto LABEL_10;
        }
LABEL_4:
        v5 = (uint64_t *)*v5;
        v6 = v9;
        if (!*v9)
          goto LABEL_13;
      }
      else
      {
        if (v10 > 1)
          goto LABEL_4;
LABEL_10:
        v5 = (uint64_t *)v5[1];
        if (!v5)
          goto LABEL_11;
      }
    }
  }
  v9 = a1 + 1;
LABEL_13:
  v12 = operator new(0x38uLL);
  v12[2] = *(_OWORD *)a3;
  *((_QWORD *)v12 + 6) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = v9;
  *v6 = (uint64_t *)v12;
  v13 = (uint64_t *)**a1;
  v14 = (uint64_t *)v12;
  if (v13)
  {
    *a1 = v13;
    v14 = *v6;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v12;
}

void boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>::init_slot_function<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>(uint64_t a1, uint64_t a2)
{
  void *v3;
  NSObject *v4;
  dispatch_object_t object;
  void *aBlock;

  v4 = *(NSObject **)a2;
  v3 = *(void **)(a2 + 8);
  object = *(dispatch_object_t *)a2;
  if (v3)
    v3 = _Block_copy(v3);
  aBlock = v3;
  dispatch_retain(v4);
  boost::function<void ()(BOOL)>::operator=<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>((uint64_t *)(a1 + 24), (uint64_t)&object);
  dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void sub_1BF42DC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>::~DispatchSlot((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *boost::function<void ()(BOOL)>::~function(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t *boost::function<void ()(BOOL)>::operator=<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>(uint64_t *a1, uint64_t a2)
{
  void *v3;
  NSObject *v4;
  void (*v5)(_BYTE *, _BYTE *, uint64_t);
  dispatch_object_t object;
  void *aBlock;
  uint64_t v9;
  _BYTE v10[24];

  v4 = *(NSObject **)a2;
  v3 = *(void **)(a2 + 8);
  object = *(dispatch_object_t *)a2;
  if (v3)
    v3 = _Block_copy(v3);
  aBlock = v3;
  dispatch_retain(v4);
  boost::function<void ()(BOOL)>::function<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>(&v9, (uint64_t)&object);
  boost::function1<void,BOOL>::swap(&v9, a1);
  if (v9)
  {
    if ((v9 & 1) == 0)
    {
      v5 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 & 0xFFFFFFFFFFFFFFFELL);
      if (v5)
        v5(v10, v10, 2);
    }
    v9 = 0;
  }
  dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  return a1;
}

void sub_1BF42DD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  boost::function<void ()(BOOL)>::~function(&a11);
  ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>::~DispatchSlot((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF42DD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>::~DispatchSlot((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *boost::function1<void,BOOL>::swap(uint64_t *result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = (uint64_t)result;
    v5 = 0;
    memset(v6, 170, sizeof(v6));
    boost::function1<void,BOOL>::move_assign((uint64_t)&v5, result);
    boost::function1<void,BOOL>::move_assign(v3, a2);
    result = (uint64_t *)boost::function1<void,BOOL>::move_assign((uint64_t)a2, &v5);
    if (v5)
    {
      if ((v5 & 1) == 0)
      {
        v4 = *(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v4)
          return (uint64_t *)v4(v6, v6, 2);
      }
    }
  }
  return result;
}

void sub_1BF42DE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function1<void,BOOL>::~function1(&a9);
  _Unwind_Resume(a1);
}

_QWORD *boost::function<void ()(BOOL)>::function<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>(_QWORD *a1, uint64_t a2)
{
  void *v3;
  NSObject *v4;
  dispatch_object_t object;
  void *aBlock;

  v4 = *(NSObject **)a2;
  v3 = *(void **)(a2 + 8);
  object = *(dispatch_object_t *)a2;
  if (v3)
    v3 = _Block_copy(v3);
  aBlock = v3;
  dispatch_retain(v4);
  boost::function1<void,BOOL>::function1<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>(a1, (uint64_t)&object);
  dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  return a1;
}

void sub_1BF42DE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>::~DispatchSlot((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *boost::function1<void,BOOL>::function1<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>(_QWORD *a1, uint64_t a2)
{
  void *v3;
  NSObject *v4;
  dispatch_object_t object;
  void *aBlock;

  *a1 = 0;
  v4 = *(NSObject **)a2;
  v3 = *(void **)(a2 + 8);
  object = *(dispatch_object_t *)a2;
  if (v3)
    v3 = _Block_copy(v3);
  aBlock = v3;
  dispatch_retain(v4);
  boost::function1<void,BOOL>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>((uint64_t)a1, (uint64_t)&object);
  dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  return a1;
}

void sub_1BF42DF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>::~DispatchSlot((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void boost::function1<void,BOOL>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>(uint64_t a1, uint64_t a2)
{
  void *v3;
  NSObject *v4;
  int v5;
  uint64_t (**v6)();
  dispatch_object_t object;
  void *aBlock;

  v4 = *(NSObject **)a2;
  v3 = *(void **)(a2 + 8);
  object = *(dispatch_object_t *)a2;
  if (v3)
    v3 = _Block_copy(v3);
  aBlock = v3;
  dispatch_retain(v4);
  v5 = boost::detail::function::basic_vtable1<void,BOOL>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>((uint64_t)boost::function1<void,BOOL>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>)::stored_vtable, (uint64_t)&object, (NSObject **)(a1 + 8));
  dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    v6 = boost::function1<void,BOOL>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>)::stored_vtable;
  else
    v6 = 0;
  *(_QWORD *)a1 = v6;
}

void sub_1BF42DFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>::~DispatchSlot((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4)
  {
    a2[4] = 0;
  }
  else
  {
    boost::detail::function::functor_manager_common<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>::manage_small(a1, a2, a3);
  }
}

uint64_t boost::detail::function::basic_vtable1<void,BOOL>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>(uint64_t a1, uint64_t a2, NSObject **a3)
{
  void *v5;
  NSObject *v6;
  uint64_t v7;
  dispatch_object_t object;
  void *aBlock;

  v6 = *(NSObject **)a2;
  v5 = *(void **)(a2 + 8);
  object = *(dispatch_object_t *)a2;
  if (v5)
    v5 = _Block_copy(v5);
  aBlock = v5;
  dispatch_retain(v6);
  v7 = boost::detail::function::basic_vtable1<void,BOOL>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>(a1, (uint64_t)&object, a3);
  dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  return v7;
}

{
  const void *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;

  v5 = *(NSObject **)a2;
  v4 = *(const void **)(a2 + 8);
  if (!v4)
  {
    dispatch_retain(*(dispatch_object_t *)a2);
    *a3 = v5;
    goto LABEL_5;
  }
  v6 = _Block_copy(v4);
  dispatch_retain(v5);
  *a3 = v5;
  if (!v6)
  {
LABEL_5:
    a3[1] = 0;
    dispatch_retain(v5);
    dispatch_release(v5);
    return 1;
  }
  v7 = _Block_copy(v6);
  v8 = *a3;
  a3[1] = v7;
  dispatch_retain(v8);
  dispatch_release(v5);
  _Block_release(v6);
  return 1;
}

void sub_1BF42E070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>::~DispatchSlot((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void boost::detail::function::functor_manager_common<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>::manage_small(uint64_t a1, _WORD *a2, unsigned int a3)
{
  NSObject *v6;
  void *v7;
  const void *v8;
  const char *v9;

  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v9 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001BF542F27 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001BF542F27 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      v8 = (const void *)*((_QWORD *)a2 + 1);
      if (v8)
        goto LABEL_6;
    }
  }
  else
  {
    v6 = *(NSObject **)a1;
    v7 = *(void **)(a1 + 8);
    *(_QWORD *)a2 = *(_QWORD *)a1;
    if (v7)
    {
      v7 = _Block_copy(v7);
      v6 = *(NSObject **)a2;
    }
    *((_QWORD *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      v8 = *(const void **)(a1 + 8);
      if (v8)
LABEL_6:
        _Block_release(v8);
    }
  }
}

void ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>::operator()<BOOL>(uint64_t a1, char a2)
{
  void *v3;
  NSObject *v4;
  _BYTE *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(__int128 *, __int128 *, uint64_t);
  void *aBlock;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _QWORD block[6];

  v4 = *(NSObject **)a1;
  v3 = *(void **)(a1 + 8);
  if (v3)
    v3 = _Block_copy(v3);
  aBlock = v3;
  boost::function<void ()(BOOL)>::function<dispatch::block<void({block_pointer})(BOOL)>>(&v11, &aBlock);
  v5 = operator new(1uLL);
  *v5 = a2;
  v6 = (char *)operator new(0x20uLL);
  v7 = v6;
  *(_QWORD *)v6 = 0;
  v8 = v11;
  if (v11)
  {
    *(_QWORD *)v6 = v11;
    if ((v8 & 1) != 0)
    {
      *(_OWORD *)(v6 + 8) = v12;
      *((_QWORD *)v6 + 3) = v13;
    }
    else
    {
      (*(void (**)(__int128 *, char *, _QWORD))(v8 & 0xFFFFFFFFFFFFFFFELL))(&v12, v6 + 8, 0);
    }
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvbEEEb_block_invoke;
  block[3] = &__block_descriptor_tmp_13_8;
  block[4] = v7;
  block[5] = v5;
  dispatch_async(v4, block);
  if (v11)
  {
    if ((v11 & 1) == 0)
    {
      v9 = *(void (**)(__int128 *, __int128 *, uint64_t))(v11 & 0xFFFFFFFFFFFFFFFELL);
      if (v9)
        v9(&v12, &v12, 2);
    }
    v11 = 0;
  }
  if (aBlock)
    _Block_release(aBlock);
}

void sub_1BF42E2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, uint64_t a11)
{
  void *v11;

  operator delete(v11);
  boost::function<void ()(BOOL)>::~function(&a11);
  if (aBlock)
    _Block_release(aBlock);
  _Unwind_Resume(a1);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvbEEEb_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v3;
  uint64_t v4;
  void (*v5)(uint64_t *, uint64_t *, uint64_t);
  void *v6;
  std::runtime_error v7;

  v1 = *(_QWORD **)(a1 + 32);
  if (!*v1)
  {
    std::runtime_error::runtime_error(&v7, "call to empty boost::function");
    v7.__vftable = (std::runtime_error_vtbl *)&unk_1E78FE000;
    boost::throw_exception<boost::bad_function_call>(&v7);
  }
  (*(void (**)(_QWORD *, _QWORD))((*v1 & 0xFFFFFFFFFFFFFFFELL) + 8))(v1 + 1, **(unsigned __int8 **)(a1 + 40));
  v3 = *(uint64_t **)(a1 + 32);
  if (v3)
  {
    v4 = *v3;
    if (*v3)
    {
      if ((v4 & 1) == 0)
      {
        v5 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
        if (v5)
          v5(v3 + 1, v3 + 1, 2);
      }
      *v3 = 0;
    }
    operator delete(v3);
  }
  v6 = *(void **)(a1 + 40);
  if (v6)
    operator delete(v6);
}

void sub_1BF42E3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

_QWORD *boost::function<void ()(BOOL)>::function<dispatch::block<void({block_pointer})(BOOL)>>(_QWORD *a1, void **a2)
{
  void *v3;
  void *aBlock;

  v3 = *a2;
  if (*a2)
    v3 = _Block_copy(v3);
  aBlock = v3;
  boost::function1<void,BOOL>::function1<dispatch::block<void({block_pointer})(BOOL)>>(a1, &aBlock);
  if (aBlock)
    _Block_release(aBlock);
  return a1;
}

void sub_1BF42E44C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (aBlock)
    _Block_release(aBlock);
  _Unwind_Resume(exception_object);
}

_QWORD *boost::function1<void,BOOL>::function1<dispatch::block<void({block_pointer})(BOOL)>>(_QWORD *a1, void **a2)
{
  void *v3;
  void *aBlock;

  *a1 = 0;
  v3 = *a2;
  if (*a2)
    v3 = _Block_copy(v3);
  aBlock = v3;
  boost::function1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>((uint64_t)a1, &aBlock);
  if (aBlock)
    _Block_release(aBlock);
  return a1;
}

void sub_1BF42E4C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (aBlock)
    _Block_release(aBlock);
  _Unwind_Resume(exception_object);
}

void boost::function1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>(uint64_t a1, void **a2)
{
  void *v3;
  int v4;
  uint64_t (**v5)();
  void *aBlock;

  v3 = *a2;
  if (*a2)
    v3 = _Block_copy(v3);
  aBlock = v3;
  v4 = boost::detail::function::basic_vtable1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>((uint64_t)boost::function1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>(dispatch::block<void({block_pointer})(BOOL)>)::stored_vtable, (const void **)&aBlock, (void **)(a1 + 8));
  if (aBlock)
    _Block_release(aBlock);
  if (v4)
    v5 = boost::function1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>(dispatch::block<void({block_pointer})(BOOL)>)::stored_vtable;
  else
    v5 = 0;
  *(_QWORD *)a1 = v5;
}

void sub_1BF42E558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (aBlock)
    _Block_release(aBlock);
  _Unwind_Resume(exception_object);
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(BOOL)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4)
  {
    a2[4] = 0;
  }
  else
  {
    boost::detail::function::functor_manager_common<dispatch::block<void({block_pointer})(BOOL)>>::manage_small(a1, a2, a3);
  }
}

uint64_t boost::detail::function::void_function_obj_invoker1<dispatch::block<void({block_pointer})(BOOL)>,void,BOOL>::invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 16))();
}

uint64_t boost::detail::function::basic_vtable1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>(uint64_t a1, const void **a2, void **a3)
{
  void *v4;
  const void *v5;
  void *v6;
  const void *v7;

  if (*a2 && (v4 = _Block_copy(*a2), (v5 = v4) != 0))
  {
    v6 = _Block_copy(v4);
    v7 = v6;
    if (v6)
    {
      *a3 = _Block_copy(v6);
      _Block_release(v7);
    }
    else
    {
      *a3 = 0;
    }
    _Block_release(v5);
    return 1;
  }
  else
  {
    *a3 = 0;
    return 1;
  }
}

void boost::detail::function::functor_manager_common<dispatch::block<void({block_pointer})(BOOL)>>::manage_small(void **a1, _WORD *a2, unsigned int a3)
{
  void *v6;
  void *v7;
  const char *v8;

  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v8 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001BF542F65 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001BF542F65 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
        a2[4] = 0;
        return;
      }
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
        goto LABEL_6;
    }
  }
  else
  {
    v6 = *a1;
    if (*a1)
      v6 = _Block_copy(v6);
    *(_QWORD *)a2 = v6;
    if (a3 == 1)
    {
      v7 = *a1;
      if (*a1)
LABEL_6:
        _Block_release(v7);
    }
  }
}

uint64_t boost::function1<void,BOOL>::move_assign(uint64_t result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  __int128 v7;

  if (a2 != (uint64_t *)result)
  {
    v2 = a2;
    v3 = (uint64_t *)result;
    v4 = *a2;
    if (*a2)
    {
      *(_QWORD *)result = v4;
      if ((v4 & 1) != 0)
      {
        v7 = *(_OWORD *)(a2 + 1);
        *(_QWORD *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      v5 = *(_QWORD *)result;
      if (!*(_QWORD *)result)
        return result;
      if ((v5 & 1) == 0)
      {
        v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6)
          result = v6(result + 8, result + 8, 2);
      }
      v2 = v3;
    }
    *v2 = 0;
  }
  return result;
}

void sub_1BF42E894(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_1BF42E8A4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *boost::function1<void,BOOL>::~function1(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

_QWORD *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<data::TransportService::State>>::~foreign_weak_ptr_impl(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E79053E8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<data::TransportService::State>>::~foreign_weak_ptr_impl(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_1E79053E8;
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<data::TransportService::State>>::lock(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 8);
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = 0;
LABEL_6:
  v7 = operator new(0x18uLL);
  *v7 = &off_1E7905438;
  v7[1] = v6;
  v7[2] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *a2 = v7;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *a2 = v7;
  }
}

void sub_1BF42EA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<data::TransportService::State>>::expired(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  return !v1 || *(_QWORD *)(v1 + 8) == -1;
}

_QWORD *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<data::TransportService::State>>::clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E79053E8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

_QWORD *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<data::TransportService::State>>::~foreign_shared_ptr_impl(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_1E7905438;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<data::TransportService::State>>::~foreign_shared_ptr_impl(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_1E7905438;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

_QWORD *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<data::TransportService::State>>::clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E7905438;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

void data::TransportService::State::unblockThrottling_sync(data::TransportService::State *this)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  ApplePDPHelperInterface *Instance;
  NSObject *v12;
  int v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v13) = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Disabling throttling", (uint8_t *)&v13, 2u);
  }
  if (*((_QWORD *)this + 18))
  {
    v3 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13) = 0;
      _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Stop Listening for UI events", (uint8_t *)&v13, 2u);
    }
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
    *((_QWORD *)this + 18) = 0;
    *((_QWORD *)this + 19) = 0;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  v7 = *((_QWORD *)this + 20);
  if (v7)
  {
    dispatch_source_cancel(v7);
    v8 = *((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = 0;
    if (v8)
      dispatch_release(v8);
    v9 = *((_QWORD *)this + 5);
    v7 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v7)
    {
      LOWORD(v13) = 0;
      _os_log_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEFAULT, "#I Limit timer stopped", (uint8_t *)&v13, 2u);
    }
  }
  if (*((_DWORD *)this + 26) == 1)
  {
    if (*((_DWORD *)this + 28) == 1)
    {
      v10 = *((_QWORD *)this + 5);
      v7 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v7)
      {
        v13 = 136315394;
        v14 = "Throttled";
        v15 = 2080;
        v16 = "Idle";
        _os_log_impl(&dword_1BF335000, v10, OS_LOG_TYPE_DEFAULT, "#I State changing from %s to %s", (uint8_t *)&v13, 0x16u);
      }
      *((_DWORD *)this + 28) = 0;
    }
    Instance = (ApplePDPHelperInterface *)ApplePDPHelperInterface::getInstance((ApplePDPHelperInterface *)v7);
    if ((ApplePDPHelperInterface::activateLowPowerPDPThrottle(Instance) & 1) == 0)
    {
      v12 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v13) = 0;
        _os_log_error_impl(&dword_1BF335000, v12, OS_LOG_TYPE_ERROR, "Failed to disable flow for throttling", (uint8_t *)&v13, 2u);
      }
    }
  }
}

void ___ZN4data16TransportService5State13enterLowPowerEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  unsigned int v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 160);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *(NSObject **)(v1 + 160);
    *(_QWORD *)(v1 + 160) = 0;
    if (v3)
      dispatch_release(v3);
    v4 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v9) = 0;
      _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I Limit timer stopped", (uint8_t *)&v9, 2u);
    }
  }
  v5 = *(_DWORD *)(v1 + 112);
  if (v5 >= 2)
  {
    if (v5 == 2)
      return;
  }
  else
  {
    v6 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = "???";
      if (!v5)
        v7 = "Idle";
      if (v5 == 1)
        v7 = "Throttled";
      v9 = 136315394;
      v10 = v7;
      v11 = 2080;
      v12 = "LowPower";
      _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, "#I State changing from %s to %s", (uint8_t *)&v9, 0x16u);
    }
    *(_DWORD *)(v1 + 112) = 2;
  }
  v8 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v9) = 0;
    _os_log_impl(&dword_1BF335000, v8, OS_LOG_TYPE_DEFAULT, "#I Entered low power", (uint8_t *)&v9, 2u);
  }
}

void ___ZN4data16TransportService5State12exitLowPowerEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  NSObject *v6;
  sys::UIObserver *v7;
  sys::UIObserver *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  _BYTE buf[22];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_DWORD *)(v1 + 112);
  if ((v2 - 1) <= 1)
  {
    v3 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = "???";
      if (v2 == 1)
        v4 = "Throttled";
      if (v2 == 2)
        v4 = "LowPower";
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v4;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "Throttled";
      _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I State changing from %s to %s", buf, 0x16u);
    }
    *(_DWORD *)(v1 + 112) = 1;
    data::TransportService::State::startLimitTimer_sync((data::TransportService::State *)v1);
  }
  v5 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "#I Exited Low Power", buf, 2u);
  }
  if (!*(_QWORD *)(v1 + 144))
  {
    v6 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, "#I Listening for UI events", buf, 2u);
    }
    pthread_mutex_lock(&ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance);
    v7 = (sys::UIObserver *)off_1ED70FE88;
    if (!off_1ED70FE88)
    {
      memset(buf, 170, 16);
      v8 = (sys::UIObserver *)operator new(0x40uLL);
      sys::UIObserver::UIObserver(v8);
      std::shared_ptr<sys::UIObserver>::shared_ptr[abi:ne180100]<sys::UIObserver,void>((std::__shared_weak_count_vtbl **)buf, (std::__shared_weak_count_vtbl *)v8);
      v9 = *(_OWORD *)buf;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v10 = (std::__shared_weak_count *)*(&off_1ED70FE88 + 1);
      off_1ED70FE88 = v9;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v14 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v7 = (sys::UIObserver *)off_1ED70FE88;
    }
    v16 = (std::__shared_weak_count *)*(&off_1ED70FE88 + 1);
    if (*(&off_1ED70FE88 + 1))
    {
      v17 = (unint64_t *)(*(&off_1ED70FE88 + 1) + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    pthread_mutex_unlock(&ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance);
    sys::UIObserver::observe(v7, 1, (std::__shared_weak_count_vtbl **)&v28);
    v19 = v28;
    v28 = 0uLL;
    v20 = *(std::__shared_weak_count **)(v1 + 152);
    *(_OWORD *)(v1 + 144) = v19;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
    if (*((_QWORD *)&v28 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v16)
    {
      v26 = (unint64_t *)&v16->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
}

void sub_1BF42F31C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance);
  _Unwind_Resume(a1);
}

void data::TransportService::State::startLimitTimer_sync(data::TransportService::State *this)
{
  dispatch_time_t v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  NSObject *v16;
  unint64_t v17;
  NSObject *v18;
  _QWORD handler[6];
  std::__shared_weak_count *v20;
  uint8_t buf[16];

  if (*((_DWORD *)this + 26) == 1)
  {
    v2 = dispatch_time(0, 1000000000 * *((unsigned int *)this + 27) + 500000000);
    v3 = *((_QWORD *)this + 20);
    if (v3)
    {
      dispatch_source_cancel(v3);
      v4 = *((_QWORD *)this + 20);
      *((_QWORD *)this + 20) = 0;
      if (v4)
        dispatch_release(v4);
      v5 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "#I Limit timer stopped", buf, 2u);
      }
    }
    v6 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, *((dispatch_queue_t *)this + 11));
    v7 = *((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = v6;
    if (v7)
    {
      dispatch_release(v7);
      v6 = *((_QWORD *)this + 20);
    }
    dispatch_source_set_timer(v6, v2, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v8 || (v9 = *((_QWORD *)this + 9), (v10 = std::__shared_weak_count::lock(v8)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v11 = v10;
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    v16 = *((_QWORD *)this + 20);
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 1174405120;
    handler[2] = ___ZN4data16TransportService5State20startLimitTimer_syncEv_block_invoke;
    handler[3] = &__block_descriptor_tmp_24_0;
    handler[4] = this;
    handler[5] = v9;
    v20 = v11;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    dispatch_source_set_event_handler(v16, handler);
    dispatch_activate(*((dispatch_object_t *)this + 20));
    v18 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF335000, v18, OS_LOG_TYPE_DEFAULT, "#I Limit timer started", buf, 2u);
    }
    if (v20)
      std::__shared_weak_count::__release_weak(v20);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void ctu::SharedSynchronizable<data::TransportService::State>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E79054D0;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c58_ZTSNSt3__110shared_ptrIKN4data16TransportService5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c58_ZTSNSt3__110shared_ptrIKN4data16TransportService5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ___ZN4data16TransportService5State20startLimitTimer_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  data::TransportService::State *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t v9[16];
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (data::TransportService::State *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v11 = v4;
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *((_QWORD *)v3 + 5);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v9 = 0;
          _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, "#I Limit timer expired", v9, 2u);
        }
        data::TransportService::State::unblockThrottling_sync(v3);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF42F824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c54_ZTSNSt3__18weak_ptrIN4data16TransportService5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c54_ZTSNSt3__18weak_ptrIN4data16TransportService5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN4data16TransportService5State9setConfigENS0_16ThrottlingConfigE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void **v4;
  int v5;
  int v6;
  NSObject *v7;
  _BOOL8 v8;
  ApplePDPHelperInterface *Instance;
  NSObject *v10;
  int v11;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  void **v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)
    && ((data::TransportService::ThrottlingConfig::asString((data::TransportService::ThrottlingConfig *)(a1 + 40), __p),
         v13 >= 0)
      ? (v4 = __p)
      : (v4 = (void **)__p[0]),
        *(_DWORD *)buf = 136315138,
        v15 = v4,
        _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Config set to %s", buf, 0xCu),
        v13 < 0))
  {
    operator delete(__p[0]);
    v5 = *(_DWORD *)(v2 + 104);
    v6 = *(_DWORD *)(a1 + 40);
    if (v5 == v6)
      goto LABEL_13;
  }
  else
  {
    v5 = *(_DWORD *)(v2 + 104);
    v6 = *(_DWORD *)(a1 + 40);
    if (v5 == v6)
      goto LABEL_13;
  }
  *(_DWORD *)(v2 + 104) = v6;
  v7 = *(NSObject **)(v2 + 40);
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = v6;
    _os_log_impl(&dword_1BF335000, v7, OS_LOG_TYPE_DEFAULT, "#I Throttling %d", (uint8_t *)__p, 8u);
  }
  Instance = (ApplePDPHelperInterface *)ApplePDPHelperInterface::getInstance((ApplePDPHelperInterface *)v8);
  if ((ApplePDPHelperInterface::enableLowPowerPDPThrottle(Instance) & 1) == 0)
  {
    v10 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v6;
      _os_log_error_impl(&dword_1BF335000, v10, OS_LOG_TYPE_ERROR, "Failed setting throttling to %d", (uint8_t *)__p, 8u);
    }
  }
  v5 = *(_DWORD *)(a1 + 40);
LABEL_13:
  if (v5 == 1)
  {
    v11 = *(_DWORD *)(a1 + 44);
    if (*(_DWORD *)(v2 + 108) != v11)
    {
      *(_DWORD *)(v2 + 108) = v11;
      if (*(_QWORD *)(v2 + 160))
        data::TransportService::State::startLimitTimer_sync((data::TransportService::State *)v2);
    }
  }
}

void ___ZNK4data16TransportService5State9dumpStateEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _BYTE *v3;
  _BOOL8 v4;
  uint64_t v5;
  const char *v6;
  int NumLowPowerPDPThrottleStats;
  NSObject *v8;
  _BYTE __p[14];
  __int16 v10;
  int v11;
  char v12;
  uint8_t buf[24];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    data::TransportService::ThrottlingConfig::asString((data::TransportService::ThrottlingConfig *)(v1 + 104), __p);
    if (v12 >= 0)
      v3 = __p;
    else
      v3 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Config: %s", buf, 0xCu);
    if (v12 < 0)
      operator delete(*(void **)__p);
    v2 = *(NSObject **)(v1 + 40);
  }
  v4 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    v5 = *(int *)(v1 + 112);
    if (v5 > 2)
      v6 = "???";
    else
      v6 = off_1E7905650[v5];
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = v6;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Low Power State %s", __p, 0xCu);
  }
  memset(buf, 0, 12);
  ApplePDPHelperInterface::getInstance((ApplePDPHelperInterface *)v4);
  NumLowPowerPDPThrottleStats = ApplePDPHelperInterface::getNumLowPowerPDPThrottleStats();
  v8 = *(NSObject **)(v1 + 40);
  if (NumLowPowerPDPThrottleStats)
  {
    if (os_log_type_enabled(*(os_log_t *)(v1 + 40), OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__p = 67109632;
      *(_DWORD *)&__p[4] = *(_DWORD *)buf;
      *(_WORD *)&__p[8] = 1024;
      *(_DWORD *)&__p[10] = *(_DWORD *)&buf[4];
      v10 = 1024;
      v11 = *(_DWORD *)&buf[8];
      _os_log_impl(&dword_1BF335000, v8, OS_LOG_TYPE_DEFAULT, "#I Blocked outgoing packets: %u, non-baseband wakes: %u, incoming traffic deactivations: %u", __p, 0x14u);
    }
  }
  else if (os_log_type_enabled(*(os_log_t *)(v1 + 40), OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__p = 0;
    _os_log_error_impl(&dword_1BF335000, v8, OS_LOG_TYPE_ERROR, "Failed to query throttle stats", __p, 2u);
  }
}

void ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke(uint64_t a1)
{
  data::TransportService::State *v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *(data::TransportService::State **)(a1 + 32);
  v2 = *((_QWORD *)v1 + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Unblocking throttling", v3, 2u);
  }
  data::TransportService::State::unblockThrottling_sync(v1);
}

void LegacyAccessoryManager::create(LegacyAccessoryManager *this@<X0>, const char *a2@<X1>, queue a3@<0:X2>, LegacyAccessoryManager **a4@<X8>)
{
  LegacyAccessoryManager *v7;
  NSObject *v8;
  queue v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  LegacyAccessoryManager *v20;
  LegacyAccessoryManager *v21;
  unsigned __int8 v22;
  NSObject *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *v27;
  LegacyAccessoryManager *v28;
  std::__shared_weak_count *v29;
  uint8_t buf[8];

  v7 = (LegacyAccessoryManager *)operator new(0x78uLL);
  v8 = *(NSObject **)a2;
  v27 = v8;
  if (v8)
    dispatch_retain(v8);
  v9.fObj.fObj = (dispatch_object_s *)&v27;
  LegacyAccessoryManager::LegacyAccessoryManager(v7, (const char *)this, v9);
  v28 = v7;
  *(_QWORD *)buf = v7;
  v10 = (std::__shared_weak_count *)operator new(0x20uLL);
  v10->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)off_1E79056D8;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v29 = v10;
  *(_QWORD *)buf = 0;
  v12 = (std::__shared_weak_count *)*((_QWORD *)v7 + 2);
  if (v12)
  {
    if (v12->__shared_owners_ != -1)
      goto LABEL_16;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    *((_QWORD *)v7 + 1) = v7;
    *((_QWORD *)v7 + 2) = v10;
    std::__shared_weak_count::__release_weak(v12);
  }
  else
  {
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    *((_QWORD *)v7 + 1) = v7;
    *((_QWORD *)v7 + 2) = v10;
  }
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_16:
  if (*(_QWORD *)buf)
    LegacyAccessoryManager::~LegacyAccessoryManager(*(LegacyAccessoryManager **)buf);
  if (v8)
    dispatch_release(v8);
  v20 = v28;
  if (v28 && (LegacyAccessoryManager::init(v28) & 1) != 0)
  {
    v21 = (LegacyAccessoryManager *)v29;
    *a4 = v20;
    a4[1] = v21;
    return;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED7100E0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v23 = qword_1ED7100E0;
    if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
      goto LABEL_26;
LABEL_33:
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF335000, v23, OS_LOG_TYPE_ERROR, "Failed to create OBD Manager!", buf, 2u);
    *a4 = 0;
    a4[1] = 0;
    v24 = v29;
    if (!v29)
      return;
    goto LABEL_27;
  }
  dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
  v23 = qword_1ED7100E0;
  if (os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
    goto LABEL_33;
LABEL_26:
  *a4 = 0;
  a4[1] = 0;
  v24 = v29;
  if (!v29)
    return;
LABEL_27:
  v25 = (unint64_t *)&v24->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
}

void sub_1BF42FFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF42FFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  NSObject *v5;
  va_list va;

  va_start(va, a5);
  std::unique_ptr<LegacyAccessoryManager>::~unique_ptr[abi:ne180100]((LegacyAccessoryManager **)va);
  if (v5)
    dispatch_release(v5);
  _Unwind_Resume(a1);
}

uint64_t LegacyAccessoryManager::init(LegacyAccessoryManager *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  NSObject *v13;
  void *v14;
  const void *v15;
  NSObject *v16;
  uint64_t result;
  NSObject *v18;
  _BOOL4 v19;
  _QWORD v20[6];
  std::__shared_weak_count *v21;
  _QWORD aBlock[6];
  std::__shared_weak_count *v23;
  void *v24;
  uint8_t buf[4];
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 9) || *((_QWORD *)this + 7))
  {
    v3 = *((_QWORD *)this + 1);
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (v2)
    {
      p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
    }
    LegacyAccessoryManager::generateAccessoryMapping((uint64_t *)this);
    v6 = MEMORY[0x1E0C809B0];
    if (*((_QWORD *)this + 9))
    {
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN22LegacyAccessoryManager4initEv_block_invoke;
      aBlock[3] = &__block_descriptor_tmp_25;
      aBlock[4] = this;
      aBlock[5] = v3;
      v23 = v2;
      if (v2)
      {
        v7 = (unint64_t *)&v2->__shared_weak_owners_;
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v24 = _Block_copy(aBlock);
      ctu::iokit::IOHIDController::registerKeyboardCallback();
      if (v24)
        _Block_release(v24);
      ctu::iokit::IOHIDController::start(*((ctu::iokit::IOHIDController **)this + 9));
      if (v23)
        std::__shared_weak_count::__release_weak(v23);
    }
    v9 = *((_QWORD *)this + 7);
    if (!v9)
      goto LABEL_35;
    v20[0] = v6;
    v20[1] = 1174405120;
    v20[2] = ___ZN22LegacyAccessoryManager4initEv_block_invoke_5;
    v20[3] = &__block_descriptor_tmp_7_5;
    v20[4] = this;
    v20[5] = v3;
    v21 = v2;
    if (v2)
    {
      v10 = (unint64_t *)&v2->__shared_weak_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = _Block_copy(v20);
    v13 = *((_QWORD *)this + 3);
    if (v13)
      dispatch_retain(*((dispatch_object_t *)this + 3));
    if (v12)
    {
      v14 = _Block_copy(v12);
      v15 = *(const void **)(v9 + 88);
      *(_QWORD *)(v9 + 88) = v14;
      if (!v15)
        goto LABEL_25;
    }
    else
    {
      v15 = *(const void **)(v9 + 88);
      *(_QWORD *)(v9 + 88) = 0;
      if (!v15)
      {
LABEL_25:
        if (v13)
          dispatch_retain(v13);
        v16 = *(NSObject **)(v9 + 96);
        *(_QWORD *)(v9 + 96) = v13;
        if (v16)
          dispatch_release(v16);
        if (v13)
          dispatch_release(v13);
        if (v12)
          _Block_release(v12);
        IOKitEventNotifier::start(*((IOKitEventNotifier **)this + 7));
        if (v21)
          std::__shared_weak_count::__release_weak(v21);
LABEL_35:
        if (v2)
          std::__shared_weak_count::__release_weak(v2);
        return 1;
      }
    }
    _Block_release(v15);
    goto LABEL_25;
  }
  v18 = *(NSObject **)this;
  v19 = os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v19)
  {
    *(_DWORD *)buf = 136315138;
    v26 = "LegacyAccessoryManager";
    _os_log_impl(&dword_1BF335000, v18, OS_LOG_TYPE_DEFAULT, "#I No IOKit controllers created for the %s", buf, 0xCu);
    return 0;
  }
  return result;
}

void sub_1BF43028C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void LegacyAccessoryManager::LegacyAccessoryManager(LegacyAccessoryManager *this, const char *__s, queue a3)
{
  size_t v6;
  std::string::size_type v7;
  std::string *p_dst;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  NSObject *v16;
  unsigned __int8 v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::string::size_type v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  NSObject *v38;
  __int128 v39;
  std::string __dst;
  std::string v41;
  void *__p[2];
  void (*v43)(uint64_t);
  void *v44;
  __int128 *v45;

  v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v6;
  p_dst = &__dst;
  if (v6)
LABEL_8:
    memcpy(p_dst, __s, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  v11 = std::string::append(&__dst, ".", 1uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v41, "LegacyAccessoryManager", 0x16uLL);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v43 = (void (*)(uint64_t))v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v43) >= 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  ctu::OsLogLogger::OsLogLogger(this, "com.apple.telephony.abm", (const char *)v15);
  if (SHIBYTE(v43) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_14:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_15;
LABEL_54:
      operator delete(__dst.__r_.__value_.__l.__data_);
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
      v16 = *(NSObject **)a3.fObj.fObj;
      *((_QWORD *)this + 3) = *(_QWORD *)a3.fObj.fObj;
      if (!v16)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_54;
LABEL_15:
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v16 = *(NSObject **)a3.fObj.fObj;
  *((_QWORD *)this + 3) = *(_QWORD *)a3.fObj.fObj;
  if (v16)
LABEL_16:
    dispatch_retain(v16);
LABEL_17:
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  __p[0] = (void *)MEMORY[0x1E0C809B0];
  __p[1] = (void *)0x40000000;
  v43 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v44 = &__block_descriptor_tmp_13_2;
  v45 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v18 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v39 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_22;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, __p);
    v18 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v39 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_22;
  }
  v19 = (unint64_t *)(v18 + 8);
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
LABEL_22:
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v21 = off_1ED70FA00;
  if (!off_1ED70FA00)
  {
    ABMServer::create_default_global(__p);
    v22 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v23 = (std::__shared_weak_count *)*(&off_1ED70FA00 + 1);
    off_1ED70FA00 = v22;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v27 = (unint64_t *)((char *)__p[1] + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v21 = off_1ED70FA00;
  }
  v29 = (std::__shared_weak_count *)*(&off_1ED70FA00 + 1);
  v41.__r_.__value_.__r.__words[0] = v21;
  v41.__r_.__value_.__l.__size_ = *(&off_1ED70FA00 + 1);
  if (*(&off_1ED70FA00 + 1))
  {
    v30 = (unint64_t *)(*(&off_1ED70FA00 + 1) + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  __p[0] = *(void **)(*(_QWORD *)v21 + 208);
  *((_QWORD *)this + 7) = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)this + 8) = 0xAAAAAAAAAAAAAAAALL;
  v32 = operator new(0xD8uLL);
  std::__shared_ptr_emplace<IOKitEventNotifier>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<ctu::LogServer> &,__CFRunLoop *&,std::allocator<IOKitEventNotifier>,0>(v32, (uint64_t *)&v39, (uint64_t *)__p);
  *((_QWORD *)this + 7) = v32 + 3;
  *((_QWORD *)this + 8) = v32;
  if (v29)
  {
    v33 = (unint64_t *)&v29->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = *(NSObject **)a3.fObj.fObj;
  if (*(_QWORD *)a3.fObj.fObj)
    dispatch_retain(*(dispatch_object_t *)a3.fObj.fObj);
  ctu::iokit::IOHIDController::create();
  if (v38)
    dispatch_release(v38);
  *((_BYTE *)this + 92) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 12) = (char *)this + 104;
}

void sub_1BF430750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, dispatch_object_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  void **v18;
  NSObject *v20;
  std::__shared_weak_count *v21;

  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::vector<dispatch::callback<void({block_pointer})>>::~vector[abi:ne180100](v18);
  v20 = *(NSObject **)(v17 + 24);
  if (v20)
    dispatch_release(v20);
  v21 = *(std::__shared_weak_count **)(v17 + 16);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  MEMORY[0x1C3B89240](v17);
  _Unwind_Resume(a1);
}

void sub_1BF4307F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
  {
    operator delete(a27);
    if ((a25 & 0x80000000) == 0)
    {
LABEL_3:
      if (a19 < 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a25 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a20);
  if (a19 < 0)
  {
LABEL_4:
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
LABEL_7:
  _Unwind_Resume(exception_object);
}

void **std::vector<dispatch::callback<void({block_pointer})(unsigned int)>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  NSObject *v5;
  const void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *((_QWORD *)v3 - 1);
        if (v5)
          dispatch_release(v5);
        v6 = (const void *)*((_QWORD *)v3 - 2);
        if (v6)
          _Block_release(v6);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void LegacyAccessoryManager::~LegacyAccessoryManager(LegacyAccessoryManager *this)
{
  uint64_t v2;
  uint64_t i;
  NSObject *v4;
  const void *v5;
  ctu::iokit::IOHIDController *v6;
  IOKitEventNotifier *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  NSObject *v17;
  const void *v18;
  NSObject *v19;
  std::__shared_weak_count *v20;

  v2 = *((_QWORD *)this + 4);
  for (i = *((_QWORD *)this + 5); i != v2; i -= 16)
  {
    v4 = *(NSObject **)(i - 8);
    if (v4)
      dispatch_release(v4);
    v5 = *(const void **)(i - 16);
    if (v5)
      _Block_release(v5);
  }
  *((_QWORD *)this + 5) = v2;
  v6 = (ctu::iokit::IOHIDController *)*((_QWORD *)this + 9);
  if (v6)
    ctu::iokit::IOHIDController::stop(v6);
  v7 = (IOKitEventNotifier *)*((_QWORD *)this + 7);
  if (v7)
    IOKitEventNotifier::shutdown(v7);
  std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(*((_QWORD **)this + 13));
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (!v11)
    goto LABEL_21;
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = (char *)*((_QWORD *)this + 4);
    if (!v14)
      goto LABEL_31;
  }
  else
  {
LABEL_21:
    v14 = (char *)*((_QWORD *)this + 4);
    if (!v14)
      goto LABEL_31;
  }
  v15 = (char *)*((_QWORD *)this + 5);
  v16 = v14;
  if (v15 != v14)
  {
    do
    {
      v17 = *((_QWORD *)v15 - 1);
      if (v17)
        dispatch_release(v17);
      v18 = (const void *)*((_QWORD *)v15 - 2);
      if (v18)
        _Block_release(v18);
      v15 -= 16;
    }
    while (v15 != v14);
    v16 = (char *)*((_QWORD *)this + 4);
  }
  *((_QWORD *)this + 5) = v14;
  operator delete(v16);
LABEL_31:
  v19 = *((_QWORD *)this + 3);
  if (v19)
    dispatch_release(v19);
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  JUMPOUT(0x1C3B89240);
}

uint64_t *LegacyAccessoryManager::generateAccessoryMapping(uint64_t *this)
{
  uint64_t v1;
  unsigned int *v2;
  uint64_t **v3;
  uint64_t **v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t **v11;
  _QWORD *v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned int *v17;
  uint64_t **v18;
  _QWORD *v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t **v25;
  _QWORD *v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  unsigned int *v31;
  uint64_t **v32;
  _QWORD *v33;
  unsigned int *v34;
  unsigned int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t **v39;
  _QWORD *v40;
  unsigned int v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t *v44;
  unsigned int *v45;
  uint64_t **v46;
  _QWORD *v47;
  unsigned int *v48;
  unsigned int v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t **v53;
  _QWORD *v54;
  unsigned int v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t *v58;
  unsigned int *v59;
  uint64_t **v60;
  _QWORD *v61;
  unsigned int *v62;
  unsigned int v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t **v67;
  _QWORD *v68;
  unsigned int v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t *v72;
  unsigned int *v73;
  uint64_t **v74;
  _QWORD *v75;
  unsigned int *v76;
  unsigned int v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t *v80;
  _QWORD *v81;
  unsigned int v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t *v85;

  v1 = (uint64_t)this;
  v3 = (uint64_t **)(this + 13);
  v2 = (unsigned int *)this[13];
  v4 = (uint64_t **)(this + 13);
  v5 = this + 13;
  if (v2)
  {
    v6 = (unsigned int *)this[13];
    while (1)
    {
      while (1)
      {
        v5 = v6;
        v7 = v6[7];
        if (v7 < 3)
          break;
        v6 = (unsigned int *)*v5;
        v4 = (uint64_t **)v5;
        if (!*v5)
          goto LABEL_8;
      }
      if (v7 == 2)
        break;
      v6 = (unsigned int *)v5[1];
      if (!v6)
      {
        v4 = (uint64_t **)(v5 + 1);
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v8 = v5;
    v5 = operator new(0x28uLL);
    *(_QWORD *)((char *)v5 + 28) = 2;
    *v5 = 0;
    v5[1] = 0;
    v5[2] = v8;
    *v4 = v5;
    v9 = **(_QWORD **)(v1 + 96);
    v10 = v5;
    if (v9)
    {
      *(_QWORD *)(v1 + 96) = v9;
      v10 = *v4;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v10);
    v2 = *(unsigned int **)(v1 + 104);
    ++*(_QWORD *)(v1 + 112);
  }
  *((_DWORD *)v5 + 8) = 16;
  v11 = v3;
  v12 = v3;
  if (v2)
  {
    while (1)
    {
      while (1)
      {
        v12 = v2;
        v13 = v2[7];
        if (v13 < 5)
          break;
        v2 = (unsigned int *)*v12;
        v11 = (uint64_t **)v12;
        if (!*v12)
          goto LABEL_18;
      }
      if (v13 == 4)
        break;
      v2 = (unsigned int *)v12[1];
      if (!v2)
      {
        v11 = (uint64_t **)(v12 + 1);
        goto LABEL_18;
      }
    }
  }
  else
  {
LABEL_18:
    v14 = v12;
    v12 = operator new(0x28uLL);
    *(_QWORD *)((char *)v12 + 28) = 4;
    *v12 = 0;
    v12[1] = 0;
    v12[2] = v14;
    *v11 = v12;
    v15 = **(_QWORD **)(v1 + 96);
    v16 = v12;
    if (v15)
    {
      *(_QWORD *)(v1 + 96) = v15;
      v16 = *v11;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v16);
    ++*(_QWORD *)(v1 + 112);
  }
  *((_DWORD *)v12 + 8) = 32;
  v17 = (unsigned int *)*v3;
  v18 = v3;
  v19 = v3;
  if (*v3)
  {
    v20 = (unsigned int *)*v3;
    while (1)
    {
      while (1)
      {
        v19 = v20;
        v21 = v20[7];
        if (v21 < 9)
          break;
        v20 = (unsigned int *)*v19;
        v18 = (uint64_t **)v19;
        if (!*v19)
          goto LABEL_28;
      }
      if (v21 == 8)
        break;
      v20 = (unsigned int *)v19[1];
      if (!v20)
      {
        v18 = (uint64_t **)(v19 + 1);
        goto LABEL_28;
      }
    }
  }
  else
  {
LABEL_28:
    v22 = v19;
    v19 = operator new(0x28uLL);
    *(_QWORD *)((char *)v19 + 28) = 8;
    *v19 = 0;
    v19[1] = 0;
    v19[2] = v22;
    *v18 = v19;
    v23 = **(_QWORD **)(v1 + 96);
    v24 = v19;
    if (v23)
    {
      *(_QWORD *)(v1 + 96) = v23;
      v24 = *v18;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v24);
    v17 = *(unsigned int **)(v1 + 104);
    ++*(_QWORD *)(v1 + 112);
  }
  *((_DWORD *)v19 + 8) = 64;
  v25 = v3;
  v26 = v3;
  if (v17)
  {
    while (1)
    {
      while (1)
      {
        v26 = v17;
        v27 = v17[7];
        if (v27 < 0x11)
          break;
        v17 = (unsigned int *)*v26;
        v25 = (uint64_t **)v26;
        if (!*v26)
          goto LABEL_38;
      }
      if (v27 == 16)
        break;
      v17 = (unsigned int *)v26[1];
      if (!v17)
      {
        v25 = (uint64_t **)(v26 + 1);
        goto LABEL_38;
      }
    }
  }
  else
  {
LABEL_38:
    v28 = v26;
    v26 = operator new(0x28uLL);
    *(_QWORD *)((char *)v26 + 28) = 16;
    *v26 = 0;
    v26[1] = 0;
    v26[2] = v28;
    *v25 = v26;
    v29 = **(_QWORD **)(v1 + 96);
    v30 = v26;
    if (v29)
    {
      *(_QWORD *)(v1 + 96) = v29;
      v30 = *v25;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v30);
    ++*(_QWORD *)(v1 + 112);
  }
  *((_DWORD *)v26 + 8) = 1024;
  v31 = (unsigned int *)*v3;
  v32 = v3;
  v33 = v3;
  if (*v3)
  {
    v34 = (unsigned int *)*v3;
    while (1)
    {
      while (1)
      {
        v33 = v34;
        v35 = v34[7];
        if (v35 < 0x21)
          break;
        v34 = (unsigned int *)*v33;
        v32 = (uint64_t **)v33;
        if (!*v33)
          goto LABEL_48;
      }
      if (v35 == 32)
        break;
      v34 = (unsigned int *)v33[1];
      if (!v34)
      {
        v32 = (uint64_t **)(v33 + 1);
        goto LABEL_48;
      }
    }
  }
  else
  {
LABEL_48:
    v36 = v33;
    v33 = operator new(0x28uLL);
    *(_QWORD *)((char *)v33 + 28) = 32;
    *v33 = 0;
    v33[1] = 0;
    v33[2] = v36;
    *v32 = v33;
    v37 = **(_QWORD **)(v1 + 96);
    v38 = v33;
    if (v37)
    {
      *(_QWORD *)(v1 + 96) = v37;
      v38 = *v32;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v38);
    v31 = *(unsigned int **)(v1 + 104);
    ++*(_QWORD *)(v1 + 112);
  }
  *((_DWORD *)v33 + 8) = 256;
  v39 = v3;
  v40 = v3;
  if (v31)
  {
    while (1)
    {
      while (1)
      {
        v40 = v31;
        v41 = v31[7];
        if (v41 < 0x41)
          break;
        v31 = (unsigned int *)*v40;
        v39 = (uint64_t **)v40;
        if (!*v40)
          goto LABEL_58;
      }
      if (v41 == 64)
        break;
      v31 = (unsigned int *)v40[1];
      if (!v31)
      {
        v39 = (uint64_t **)(v40 + 1);
        goto LABEL_58;
      }
    }
  }
  else
  {
LABEL_58:
    v42 = v40;
    v40 = operator new(0x28uLL);
    *(_QWORD *)((char *)v40 + 28) = 64;
    *v40 = 0;
    v40[1] = 0;
    v40[2] = v42;
    *v39 = v40;
    v43 = **(_QWORD **)(v1 + 96);
    v44 = v40;
    if (v43)
    {
      *(_QWORD *)(v1 + 96) = v43;
      v44 = *v39;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v44);
    ++*(_QWORD *)(v1 + 112);
  }
  *((_DWORD *)v40 + 8) = 2048;
  v45 = (unsigned int *)*v3;
  v46 = v3;
  v47 = v3;
  if (*v3)
  {
    v48 = (unsigned int *)*v3;
    while (1)
    {
      while (1)
      {
        v47 = v48;
        v49 = v48[7];
        if (v49 < 0x81)
          break;
        v48 = (unsigned int *)*v47;
        v46 = (uint64_t **)v47;
        if (!*v47)
          goto LABEL_68;
      }
      if (v49 == 128)
        break;
      v48 = (unsigned int *)v47[1];
      if (!v48)
      {
        v46 = (uint64_t **)(v47 + 1);
        goto LABEL_68;
      }
    }
  }
  else
  {
LABEL_68:
    v50 = v47;
    v47 = operator new(0x28uLL);
    *(_QWORD *)((char *)v47 + 28) = 128;
    *v47 = 0;
    v47[1] = 0;
    v47[2] = v50;
    *v46 = v47;
    v51 = **(_QWORD **)(v1 + 96);
    v52 = v47;
    if (v51)
    {
      *(_QWORD *)(v1 + 96) = v51;
      v52 = *v46;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v52);
    v45 = *(unsigned int **)(v1 + 104);
    ++*(_QWORD *)(v1 + 112);
  }
  *((_DWORD *)v47 + 8) = 4096;
  v53 = v3;
  v54 = v3;
  if (v45)
  {
    while (1)
    {
      while (1)
      {
        v54 = v45;
        v55 = v45[7];
        if (v55 < 0x101)
          break;
        v45 = (unsigned int *)*v54;
        v53 = (uint64_t **)v54;
        if (!*v54)
          goto LABEL_78;
      }
      if (v55 == 256)
        break;
      v45 = (unsigned int *)v54[1];
      if (!v45)
      {
        v53 = (uint64_t **)(v54 + 1);
        goto LABEL_78;
      }
    }
  }
  else
  {
LABEL_78:
    v56 = v54;
    v54 = operator new(0x28uLL);
    *(_QWORD *)((char *)v54 + 28) = 256;
    *v54 = 0;
    v54[1] = 0;
    v54[2] = v56;
    *v53 = v54;
    v57 = **(_QWORD **)(v1 + 96);
    v58 = v54;
    if (v57)
    {
      *(_QWORD *)(v1 + 96) = v57;
      v58 = *v53;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v58);
    ++*(_QWORD *)(v1 + 112);
  }
  *((_DWORD *)v54 + 8) = 0x2000;
  v59 = (unsigned int *)*v3;
  v60 = v3;
  v61 = v3;
  if (*v3)
  {
    v62 = (unsigned int *)*v3;
    while (1)
    {
      while (1)
      {
        v61 = v62;
        v63 = v62[7];
        if (v63 < 0x201)
          break;
        v62 = (unsigned int *)*v61;
        v60 = (uint64_t **)v61;
        if (!*v61)
          goto LABEL_88;
      }
      if (v63 == 512)
        break;
      v62 = (unsigned int *)v61[1];
      if (!v62)
      {
        v60 = (uint64_t **)(v61 + 1);
        goto LABEL_88;
      }
    }
  }
  else
  {
LABEL_88:
    v64 = v61;
    v61 = operator new(0x28uLL);
    *(_QWORD *)((char *)v61 + 28) = 512;
    *v61 = 0;
    v61[1] = 0;
    v61[2] = v64;
    *v60 = v61;
    v65 = **(_QWORD **)(v1 + 96);
    v66 = v61;
    if (v65)
    {
      *(_QWORD *)(v1 + 96) = v65;
      v66 = *v60;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v66);
    v59 = *(unsigned int **)(v1 + 104);
    ++*(_QWORD *)(v1 + 112);
  }
  *((_DWORD *)v61 + 8) = 0x4000;
  v67 = v3;
  v68 = v3;
  if (v59)
  {
    while (1)
    {
      while (1)
      {
        v68 = v59;
        v69 = v59[7];
        if (v69 < 0x401)
          break;
        v59 = (unsigned int *)*v68;
        v67 = (uint64_t **)v68;
        if (!*v68)
          goto LABEL_98;
      }
      if (v69 == 1024)
        break;
      v59 = (unsigned int *)v68[1];
      if (!v59)
      {
        v67 = (uint64_t **)(v68 + 1);
        goto LABEL_98;
      }
    }
  }
  else
  {
LABEL_98:
    v70 = v68;
    v68 = operator new(0x28uLL);
    *(_QWORD *)((char *)v68 + 28) = 1024;
    *v68 = 0;
    v68[1] = 0;
    v68[2] = v70;
    *v67 = v68;
    v71 = **(_QWORD **)(v1 + 96);
    v72 = v68;
    if (v71)
    {
      *(_QWORD *)(v1 + 96) = v71;
      v72 = *v67;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v72);
    ++*(_QWORD *)(v1 + 112);
  }
  *((_DWORD *)v68 + 8) = 0x8000;
  v73 = (unsigned int *)*v3;
  v74 = v3;
  v75 = v3;
  if (*v3)
  {
    v76 = (unsigned int *)*v3;
    while (1)
    {
      while (1)
      {
        v75 = v76;
        v77 = v76[7];
        if (v77 < 0x801)
          break;
        v76 = (unsigned int *)*v75;
        v74 = (uint64_t **)v75;
        if (!*v75)
          goto LABEL_108;
      }
      if (v77 == 2048)
        break;
      v76 = (unsigned int *)v75[1];
      if (!v76)
      {
        v74 = (uint64_t **)(v75 + 1);
        goto LABEL_108;
      }
    }
  }
  else
  {
LABEL_108:
    v78 = v75;
    v75 = operator new(0x28uLL);
    *(_QWORD *)((char *)v75 + 28) = 2048;
    *v75 = 0;
    v75[1] = 0;
    v75[2] = v78;
    *v74 = v75;
    v79 = **(_QWORD **)(v1 + 96);
    v80 = v75;
    if (v79)
    {
      *(_QWORD *)(v1 + 96) = v79;
      v80 = *v74;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v80);
    v73 = *(unsigned int **)(v1 + 104);
    ++*(_QWORD *)(v1 + 112);
  }
  *((_DWORD *)v75 + 8) = 0x10000;
  v81 = v3;
  if (v73)
  {
    while (1)
    {
      while (1)
      {
        v81 = v73;
        v82 = v73[7];
        if (v82 <= 0x1000)
          break;
        v73 = (unsigned int *)*v81;
        v3 = (uint64_t **)v81;
        if (!*v81)
          goto LABEL_118;
      }
      if (v82 == 4096)
        break;
      v73 = (unsigned int *)v81[1];
      if (!v73)
      {
        v3 = (uint64_t **)(v81 + 1);
        goto LABEL_118;
      }
    }
  }
  else
  {
LABEL_118:
    v83 = v81;
    v81 = operator new(0x28uLL);
    *(_QWORD *)((char *)v81 + 28) = 4096;
    *v81 = 0;
    v81[1] = 0;
    v81[2] = v83;
    *v3 = v81;
    v84 = **(_QWORD **)(v1 + 96);
    v85 = v81;
    if (v84)
    {
      *(_QWORD *)(v1 + 96) = v84;
      v85 = *v3;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v85);
    ++*(_QWORD *)(v1 + 112);
  }
  *((_DWORD *)v81 + 8) = 0x20000;
  return this;
}

void ___ZN22LegacyAccessoryManager4initEv_block_invoke(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  const char *v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t **v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  NSObject *v27;
  int v28;
  void *v29;
  const void *v30;
  void *v31;
  char v32;
  __int128 v33;
  uint64_t (*v34)(uint64_t);
  void *v35;
  void *aBlock;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  if (!v6)
    return;
  v7 = v6;
  v8 = a1[5];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
  {
    if (!v8)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    if (!v8)
      return;
  }
  if (*(unsigned __int8 *)(v5 + 92) == a2)
    return;
  v11 = *(NSObject **)v5;
  if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEFAULT))
  {
    v12 = "OPENED";
    if (a2)
      v12 = "CLOSED";
    LODWORD(v33) = 136315138;
    *(_QWORD *)((char *)&v33 + 4) = v12;
    _os_log_impl(&dword_1BF335000, v11, OS_LOG_TYPE_DEFAULT, "#I Smart Keyboard Cover: %s", (uint8_t *)&v33, 0xCu);
  }
  v14 = (uint64_t **)(v5 + 104);
  v13 = *(uint64_t **)(v5 + 104);
  *(_BYTE *)(v5 + 92) = a2;
  v15 = (uint64_t **)(v5 + 104);
  if (a2)
  {
    if (v13)
    {
      while (1)
      {
        while (1)
        {
          v15 = (uint64_t **)v13;
          v16 = *((_DWORD *)v13 + 7);
          if (v16 <= 0x1000)
            break;
          v13 = *v15;
          v14 = v15;
          if (!*v15)
            goto LABEL_22;
        }
        if (v16 == 4096)
          break;
        v13 = v15[1];
        if (!v13)
        {
          v14 = v15 + 1;
          goto LABEL_22;
        }
      }
      v17 = (uint64_t *)v15;
    }
    else
    {
LABEL_22:
      v17 = (uint64_t *)operator new(0x28uLL);
      *(uint64_t *)((char *)v17 + 28) = 4096;
      *v17 = 0;
      v17[1] = 0;
      v17[2] = (uint64_t)v15;
      *v14 = v17;
      v18 = **(_QWORD **)(v5 + 96);
      v19 = v17;
      if (v18)
      {
        *(_QWORD *)(v5 + 96) = v18;
        v19 = *v14;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 104), v19);
      ++*(_QWORD *)(v5 + 112);
    }
    *(_DWORD *)(v5 + 88) |= *((_DWORD *)v17 + 8);
    v24 = *(_QWORD *)(v5 + 32);
    v25 = *(_QWORD *)(v5 + 40);
    if (v24 != v25)
      goto LABEL_42;
    return;
  }
  if (v13)
  {
    while (1)
    {
      while (1)
      {
        v15 = (uint64_t **)v13;
        v20 = *((_DWORD *)v13 + 7);
        if (v20 <= 0x1000)
          break;
        v13 = *v15;
        v14 = v15;
        if (!*v15)
          goto LABEL_32;
      }
      if (v20 == 4096)
        break;
      v13 = v15[1];
      if (!v13)
      {
        v14 = v15 + 1;
        goto LABEL_32;
      }
    }
    v21 = (uint64_t *)v15;
  }
  else
  {
LABEL_32:
    v21 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v21 + 28) = 4096;
    *v21 = 0;
    v21[1] = 0;
    v21[2] = (uint64_t)v15;
    *v14 = v21;
    v22 = **(_QWORD **)(v5 + 96);
    v23 = v21;
    if (v22)
    {
      *(_QWORD *)(v5 + 96) = v22;
      v23 = *v14;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 104), v23);
    ++*(_QWORD *)(v5 + 112);
  }
  *(_DWORD *)(v5 + 88) &= ~*((_DWORD *)v21 + 8);
  v24 = *(_QWORD *)(v5 + 32);
  v25 = *(_QWORD *)(v5 + 40);
  if (v24 != v25)
  {
LABEL_42:
    while (*(_QWORD *)v24)
    {
      v26 = _Block_copy(*(const void **)v24);
      v27 = *(NSObject **)(v24 + 8);
      if (v27)
        goto LABEL_44;
LABEL_45:
      v28 = *(_DWORD *)(v5 + 88);
      if (v26)
      {
        v29 = _Block_copy(v26);
        v30 = v29;
        *(_QWORD *)&v33 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v33 + 1) = 1174405120;
        v34 = ___ZNK8dispatch8callbackIU13block_pointerFvjEEclIJjEEEvDpT__block_invoke;
        v35 = &__block_descriptor_tmp_12_5;
        if (v29)
        {
          v31 = _Block_copy(v29);
          v32 = 0;
        }
        else
        {
          v31 = 0;
          v32 = 1;
        }
      }
      else
      {
        v30 = 0;
        v31 = 0;
        *(_QWORD *)&v33 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v33 + 1) = 1174405120;
        v32 = 1;
        v34 = ___ZNK8dispatch8callbackIU13block_pointerFvjEEclIJjEEEvDpT__block_invoke;
        v35 = &__block_descriptor_tmp_12_5;
      }
      aBlock = v31;
      v37 = v28;
      dispatch_async(v27, &v33);
      if (aBlock)
        _Block_release(aBlock);
      if ((v32 & 1) == 0)
        _Block_release(v30);
      if (v27)
        dispatch_release(v27);
      if (v26)
        _Block_release(v26);
      v24 += 16;
      if (v24 == v25)
        return;
    }
    v26 = 0;
    v27 = *(NSObject **)(v24 + 8);
    if (!v27)
      goto LABEL_45;
LABEL_44:
    dispatch_retain(v27);
    goto LABEL_45;
  }
}

void sub_1BF4315AC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c47_ZTSNSt3__18weak_ptrI22LegacyAccessoryManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c47_ZTSNSt3__18weak_ptrI22LegacyAccessoryManagerEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN22LegacyAccessoryManager4initEv_block_invoke_5(_QWORD *a1, unint64_t a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (v12)
      {
        if (!v10)
          return;
        goto LABEL_7;
      }
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v9);
      if (v10)
LABEL_7:
        LegacyAccessoryManager::accessoryNotification_sync(v7, a2, a3);
    }
  }
}

void LegacyAccessoryManager::accessoryNotification_sync(uint64_t a1, unint64_t a2, int a3)
{
  NSObject *v6;
  void **v7;
  unint64_t v8;
  void **v9;
  NSObject *v10;
  NSObject *v11;
  _BOOL4 v12;
  NSObject *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unsigned int v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  NSObject *v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t **v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  void *__p[2];
  char v31;
  uint8_t buf[4];
  void **v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = a3;
    _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, "#I Accessory Port Number: %u", (uint8_t *)__p, 8u);
    v6 = *(NSObject **)a1;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    ctu::iokit::asString();
    if (v31 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v33 = v7;
    _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, "#I Accessory Status: %s", buf, 0xCu);
    if (v31 < 0)
      operator delete(__p[0]);
    v6 = *(NSObject **)a1;
  }
  v8 = HIDWORD(a2);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)
    && ((ctu::iokit::asString(), v31 >= 0) ? (v9 = __p) : (v9 = (void **)__p[0]),
        *(_DWORD *)buf = 136315138,
        v33 = v9,
        _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, "#I Accessory Type: %s", buf, 0xCu),
        v31 < 0))
  {
    operator delete(__p[0]);
    if ((a3 - 3) <= 0xFFFFFFFD)
    {
LABEL_16:
      v10 = *(NSObject **)a1;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p[0]) = 67109120;
        HIDWORD(__p[0]) = a3;
        _os_log_impl(&dword_1BF335000, v10, OS_LOG_TYPE_DEFAULT, "#I This port (%d) is not supported.", (uint8_t *)__p, 8u);
      }
      return;
    }
  }
  else if ((a3 - 3) <= 0xFFFFFFFD)
  {
    goto LABEL_16;
  }
  v11 = *(NSObject **)a1;
  v12 = os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)a2 == 1)
  {
    if (!v12)
    {
      if (HIDWORD(a2) == 4096)
        goto LABEL_42;
LABEL_22:
      v13 = *(NSObject **)a1;
      if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_debug_impl(&dword_1BF335000, v13, OS_LOG_TYPE_DEBUG, "#D Detected not keyboard type. Setting the accessory bitmask", (uint8_t *)__p, 2u);
        v15 = (_QWORD *)(a1 + 104);
        v14 = *(_QWORD *)(a1 + 104);
        if (v14)
        {
          while (1)
          {
LABEL_33:
            while (1)
            {
              v16 = (_QWORD *)v14;
              v17 = *(_DWORD *)(v14 + 28);
              if (v17 <= v8)
                break;
              v14 = *v16;
              v15 = v16;
              if (!*v16)
                goto LABEL_37;
            }
            if (v17 >= v8)
              break;
            v14 = v16[1];
            if (!v14)
            {
              v15 = v16 + 1;
              goto LABEL_37;
            }
          }
          v18 = v16;
          goto LABEL_41;
        }
      }
      else
      {
        v15 = (_QWORD *)(a1 + 104);
        v14 = *(_QWORD *)(a1 + 104);
        if (v14)
          goto LABEL_33;
      }
      v16 = v15;
LABEL_37:
      v18 = operator new(0x28uLL);
      v18[7] = v8;
      v18[8] = 0;
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      *((_QWORD *)v18 + 2) = v16;
      *v15 = v18;
      v19 = **(_QWORD **)(a1 + 96);
      v20 = (uint64_t *)v18;
      if (v19)
      {
        *(_QWORD *)(a1 + 96) = v19;
        v20 = (uint64_t *)*v15;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 104), v20);
      ++*(_QWORD *)(a1 + 112);
LABEL_41:
      *(_DWORD *)(a1 + 88) |= v18[8];
      goto LABEL_42;
    }
    LOWORD(__p[0]) = 0;
    _os_log_debug_impl(&dword_1BF335000, v11, OS_LOG_TYPE_DEBUG, "#D An accessory is attached", (uint8_t *)__p, 2u);
    if (HIDWORD(a2) != 4096)
      goto LABEL_22;
  }
  else
  {
    if (v12)
    {
      LOWORD(__p[0]) = 0;
      _os_log_debug_impl(&dword_1BF335000, v11, OS_LOG_TYPE_DEBUG, "#D An accessory is detached. Clear all the bits in the accessory state", (uint8_t *)__p, 2u);
    }
    *(_DWORD *)(a1 + 88) = 0;
  }
LABEL_42:
  v21 = *(NSObject **)a1;
  if (*(_BYTE *)(a1 + 92))
  {
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p[0]) = 0;
      _os_log_debug_impl(&dword_1BF335000, v21, OS_LOG_TYPE_DEBUG, "#D If a keyboard is covered, we should set the keyboard accessory state regardless of the accessory event", (uint8_t *)__p, 2u);
      v23 = (uint64_t **)(a1 + 104);
      v22 = *(uint64_t **)(a1 + 104);
      if (v22)
      {
        while (1)
        {
LABEL_49:
          while (1)
          {
            v24 = (uint64_t **)v22;
            v25 = *((_DWORD *)v22 + 7);
            if (v25 <= 0x1000)
              break;
            v22 = *v24;
            v23 = v24;
            if (!*v24)
              goto LABEL_53;
          }
          if (v25 == 4096)
            break;
          v22 = v24[1];
          if (!v22)
          {
            v23 = v24 + 1;
            goto LABEL_53;
          }
        }
        v26 = (uint64_t *)v24;
        goto LABEL_57;
      }
    }
    else
    {
      v23 = (uint64_t **)(a1 + 104);
      v22 = *(uint64_t **)(a1 + 104);
      if (v22)
        goto LABEL_49;
    }
    v24 = v23;
LABEL_53:
    v26 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v26 + 28) = 4096;
    *v26 = 0;
    v26[1] = 0;
    v26[2] = (uint64_t)v24;
    *v23 = v26;
    v27 = **(_QWORD **)(a1 + 96);
    v28 = v26;
    if (v27)
    {
      *(_QWORD *)(a1 + 96) = v27;
      v28 = *v23;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 104), v28);
    ++*(_QWORD *)(a1 + 112);
LABEL_57:
    *(_DWORD *)(a1 + 88) |= *((_DWORD *)v26 + 8);
    v21 = *(NSObject **)a1;
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    v29 = *(_DWORD *)(a1 + 88);
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = v29;
    _os_log_impl(&dword_1BF335000, v21, OS_LOG_TYPE_DEFAULT, "#I Accessory State: 0x%x\n", (uint8_t *)__p, 8u);
  }
  LegacyAccessoryManager::notifyClients((NSObject **)a1);
}

void LegacyAccessoryManager::notifyClients(NSObject **this)
{
  NSObject *v2;
  int v3;
  NSObject *v4;
  NSObject *v5;
  void *v6;
  NSObject *isa;
  int v8;
  void *v9;
  const void *v10;
  void *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  void *v16;
  void *aBlock;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_DWORD *)this + 22);
    LODWORD(v13) = 67109120;
    HIDWORD(v13) = v3;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Notifying Accessory State: 0x%x\n", (uint8_t *)&v13, 8u);
  }
  v4 = this[4];
  v5 = this[5];
  if (v4 != v5)
  {
    while (v4->isa)
    {
      v6 = _Block_copy(v4->isa);
      isa = v4[1].isa;
      if (isa)
        goto LABEL_8;
LABEL_9:
      v8 = *((_DWORD *)this + 22);
      if (v6)
      {
        v9 = _Block_copy(v6);
        v10 = v9;
        v13 = MEMORY[0x1E0C809B0];
        v14 = 1174405120;
        v15 = ___ZNK8dispatch8callbackIU13block_pointerFvjEEclIJjEEEvDpT__block_invoke;
        v16 = &__block_descriptor_tmp_12_5;
        if (v9)
        {
          v11 = _Block_copy(v9);
          v12 = 0;
        }
        else
        {
          v11 = 0;
          v12 = 1;
        }
      }
      else
      {
        v10 = 0;
        v11 = 0;
        v13 = MEMORY[0x1E0C809B0];
        v14 = 1174405120;
        v12 = 1;
        v15 = ___ZNK8dispatch8callbackIU13block_pointerFvjEEclIJjEEEvDpT__block_invoke;
        v16 = &__block_descriptor_tmp_12_5;
      }
      aBlock = v11;
      v18 = v8;
      dispatch_async(isa, &v13);
      if (aBlock)
        _Block_release(aBlock);
      if ((v12 & 1) == 0)
        _Block_release(v10);
      if (isa)
        dispatch_release(isa);
      if (v6)
        _Block_release(v6);
      v4 += 2;
      if (v4 == v5)
        return;
    }
    v6 = 0;
    isa = v4[1].isa;
    if (!isa)
      goto LABEL_9;
LABEL_8:
    dispatch_retain(isa);
    goto LABEL_9;
  }
}

void sub_1BF431D68(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *LegacyAccessoryManager::registerCallback(_QWORD *a1, void **a2)
{
  _QWORD *v4;
  void *v5;
  NSObject *v6;
  _QWORD *result;

  v4 = (_QWORD *)a1[5];
  if ((unint64_t)v4 >= a1[6])
  {
    result = std::vector<dispatch::callback<void({block_pointer})>>::__push_back_slow_path<dispatch::callback<void({block_pointer})> const&>(a1 + 4, (uint64_t)a2);
    a1[5] = result;
  }
  else
  {
    v5 = *a2;
    if (*a2)
      v5 = _Block_copy(v5);
    v6 = a2[1];
    *v4 = v5;
    v4[1] = v6;
    if (v6)
      dispatch_retain(v6);
    result = v4 + 2;
    a1[5] = v4 + 2;
  }
  return result;
}

_QWORD *std::vector<dispatch::callback<void({block_pointer})(unsigned int)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(unsigned int)> const&>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  void *v9;
  NSObject *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  NSObject *v20;
  const void *v21;
  char *v23;
  BOOL v24;
  BOOL v25;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  double *v30;
  const double *v31;
  uint64_t v32;
  float64x2x2_t v33;

  v2 = a1[1] - *a1;
  v3 = (v2 >> 4) + 1;
  if (v3 >> 60)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v6 = a1[2] - *a1;
  if (v6 >> 3 > v3)
    v3 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (!v7)
  {
    v8 = 0;
    v9 = *(void **)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (v7 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v8 = (char *)operator new(16 * v7);
  v9 = *(void **)a2;
  if (*(_QWORD *)a2)
LABEL_12:
    v9 = _Block_copy(v9);
LABEL_13:
  v10 = *(NSObject **)(a2 + 8);
  v11 = &v8[16 * (v2 >> 4)];
  *(_QWORD *)v11 = v9;
  *((_QWORD *)v11 + 1) = v10;
  if (v10)
    dispatch_retain(v10);
  v12 = &v8[16 * v7];
  v13 = v11 + 16;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    v16 = (unint64_t)&v15[-*a1 - 16];
    if (v16 < 0xD0)
      goto LABEL_17;
    v23 = &v15[-(v16 & 0xFFFFFFFFFFFFFFF0)];
    v24 = &v8[v2 - 8 - (v16 & 0xFFFFFFFFFFFFFFF0)] >= v15 || v23 - 8 >= v11;
    v25 = !v24;
    if (v23 - 16 < &v8[v2 - 8] && &v8[v2 - (v16 & 0xFFFFFFFFFFFFFFF0) - 16] < v15 - 8)
      goto LABEL_17;
    if (v25)
      goto LABEL_17;
    v27 = (v16 >> 4) + 1;
    v28 = 16 * (v27 & 0x1FFFFFFFFFFFFFFELL);
    v17 = &v11[-v28];
    v29 = &v15[-v28];
    v30 = (double *)(v11 - 32);
    v31 = (const double *)(v15 - 32);
    v32 = v27 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v33 = vld2q_f64(v31);
      vst2q_f64(v30, v33);
      *(_OWORD *)v31 = 0uLL;
      *((_OWORD *)v31 + 1) = 0uLL;
      v31 -= 4;
      v30 -= 4;
      v32 -= 2;
    }
    while (v32);
    v11 = v17;
    v15 = v29;
    if (v27 != (v27 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_17:
      v17 = v11;
      do
      {
        v18 = *((_OWORD *)v15 - 1);
        v15 -= 16;
        *((_OWORD *)v17 - 1) = v18;
        v17 -= 16;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = v17;
    a1[1] = v13;
    a1[2] = v12;
    while (v19 != v15)
    {
      v20 = *((_QWORD *)v19 - 1);
      if (v20)
        dispatch_release(v20);
      v21 = (const void *)*((_QWORD *)v19 - 2);
      if (v21)
        _Block_release(v21);
      v19 -= 16;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

LegacyAccessoryManager **std::unique_ptr<LegacyAccessoryManager>::~unique_ptr[abi:ne180100](LegacyAccessoryManager **a1)
{
  LegacyAccessoryManager *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    LegacyAccessoryManager::~LegacyAccessoryManager(v2);
  return a1;
}

void std::__shared_ptr_pointer<LegacyAccessoryManager *,std::shared_ptr<LegacyAccessoryManager>::__shared_ptr_default_delete<LegacyAccessoryManager,LegacyAccessoryManager>,std::allocator<LegacyAccessoryManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

LegacyAccessoryManager *std::__shared_ptr_pointer<LegacyAccessoryManager *,std::shared_ptr<LegacyAccessoryManager>::__shared_ptr_default_delete<LegacyAccessoryManager,LegacyAccessoryManager>,std::allocator<LegacyAccessoryManager>>::__on_zero_shared(uint64_t a1)
{
  LegacyAccessoryManager *result;

  result = *(LegacyAccessoryManager **)(a1 + 24);
  if (result)
    LegacyAccessoryManager::~LegacyAccessoryManager(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<LegacyAccessoryManager *,std::shared_ptr<LegacyAccessoryManager>::__shared_ptr_default_delete<LegacyAccessoryManager,LegacyAccessoryManager>,std::allocator<LegacyAccessoryManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF5432EFLL)
    return a1 + 24;
  if (((v3 & 0x80000001BF5432EFLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF5432EFLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF5432EFLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvjEEclIJjEEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void *__copy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvjEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvjEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

const char *IOPortUSBCAccessoriesDelegate::getName(IOPortUSBCAccessoriesDelegate *this)
{
  return "IOPortUSBCAccessories.delegate";
}

uint64_t IOPortUSBCAccessoriesDelegate::create@<X0>(_QWORD *a1@<X0>, NSObject **a2@<X1>, std::__shared_weak_count_vtbl **a3@<X8>)
{
  std::__shared_weak_count_vtbl *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *on_zero_shared;
  unint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;
  NSObject *v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  _QWORD v27[3];
  _QWORD *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v25 = 0;
  v26 = 0;
  v6 = (std::__shared_weak_count_vtbl *)operator new(0x70uLL);
  v7 = a1[3];
  if (!v7)
    goto LABEL_4;
  if ((_QWORD *)v7 != a1)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
LABEL_4:
    v28 = (_QWORD *)v7;
    goto LABEL_6;
  }
  v28 = v27;
  (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v27);
LABEL_6:
  v8 = *a2;
  v24 = v8;
  if (v8)
    dispatch_retain(v8);
  IOPortUSBCAccessoriesDelegate::IOPortUSBCAccessoriesDelegate((uint64_t)v6, v27, &v24);
  v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  v11->__vftable = (std::__shared_weak_count_vtbl *)off_1E7905830;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = v6;
  on_zero_shared = (std::__shared_weak_count *)v6->__on_zero_shared;
  if (on_zero_shared)
  {
    if (on_zero_shared->__shared_owners_ != -1)
      goto LABEL_21;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
    v6->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
    std::__shared_weak_count::__release_weak(on_zero_shared);
  }
  else
  {
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    v18 = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    v6->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
  }
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v25 = v6;
  v26 = v11;
  if (v8)
    dispatch_release(v8);
  v21 = v28;
  if (v28 == v27)
  {
    v22 = 4;
    v21 = v27;
    goto LABEL_27;
  }
  if (v28)
  {
    v22 = 5;
LABEL_27:
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v21 + 8 * v22))(v21, v9, v10);
  }
  result = (*((uint64_t (**)(std::__shared_weak_count_vtbl *))v6->~__shared_weak_count + 7))(v6);
  *a3 = v6;
  a3[1] = (std::__shared_weak_count_vtbl *)v11;
  return result;
}

void sub_1BF432394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;

  operator delete(v15);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t IOPortUSBCAccessoriesDelegate::IOPortUSBCAccessoriesDelegate(uint64_t a1, _QWORD *a2, NSObject **a3)
{
  _QWORD *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E7905758;
  v5 = (_QWORD *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      v13 = v12;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v12);
    }
    else
    {
      v13 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    }
  }
  else
  {
    v13 = 0;
  }
  v6 = *a3;
  if (v6)
    dispatch_retain(v6);
  v7 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
    dispatch_retain(v6);
  *(_QWORD *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 40), "com.apple.telephony.abm", v7);
  *(_QWORD *)a1 = off_1E79048A8;
  v8 = (uint64_t)v13;
  if (!v13)
    goto LABEL_13;
  if (v13 != v12)
  {
    v8 = (*(uint64_t (**)(void))(*v13 + 16))();
LABEL_13:
    *(_QWORD *)(a1 + 72) = v8;
    goto LABEL_15;
  }
  *(_QWORD *)(a1 + 72) = a1 + 48;
  (*(void (**)(_QWORD *))(v12[0] + 24))(v12);
LABEL_15:
  *(_BYTE *)(a1 + 80) = 0;
  if (v6)
    dispatch_release(v6);
  v9 = v13;
  if (v13 == v12)
  {
    v10 = 4;
    v9 = v12;
    goto LABEL_21;
  }
  if (v13)
  {
    v10 = 5;
LABEL_21:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  *(_QWORD *)a1 = off_1E7905758;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  return a1;
}

void sub_1BF432610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  NSObject *v13;
  _QWORD *v14;

  ctu::SharedLoggable<AccessoriesDelegateBase,ctu::OsLogLogger>::~SharedLoggable(v14);
  if (v13)
    dispatch_release(v13);
  if (a13 == &a10)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(a1);
  }
  if (!a13)
    _Unwind_Resume(a1);
  (*(void (**)(void))(*a13 + 40))();
  _Unwind_Resume(a1);
}

void IOPortUSBCAccessoriesDelegate::~IOPortUSBCAccessoriesDelegate(IOPortUSBCAccessoriesDelegate *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  IOPortUSBCAccessoriesDelegate *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;

  *(_QWORD *)this = off_1E7905758;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E79048A8;
  v5 = (IOPortUSBCAccessoriesDelegate *)*((_QWORD *)this + 9);
  if (v5 == (IOPortUSBCAccessoriesDelegate *)((char *)this + 48))
  {
    v6 = 4;
    v5 = (IOPortUSBCAccessoriesDelegate *)((char *)this + 48);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  MEMORY[0x1C3B89240]((char *)this + 40);
  v7 = *((_QWORD *)this + 4);
  if (v7)
    dispatch_release(v7);
  v8 = *((_QWORD *)this + 3);
  if (v8)
    dispatch_release(v8);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  IOPortUSBCAccessoriesDelegate *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;

  *(_QWORD *)this = off_1E7905758;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E79048A8;
  v5 = (IOPortUSBCAccessoriesDelegate *)*((_QWORD *)this + 9);
  if (v5 == (IOPortUSBCAccessoriesDelegate *)((char *)this + 48))
  {
    v6 = 4;
    v5 = (IOPortUSBCAccessoriesDelegate *)((char *)this + 48);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  MEMORY[0x1C3B89240]((char *)this + 40);
  v7 = *((_QWORD *)this + 4);
  if (v7)
    dispatch_release(v7);
  v8 = *((_QWORD *)this + 3);
  if (v8)
    dispatch_release(v8);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  IOPortUSBCAccessoriesDelegate *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;

  *(_QWORD *)this = off_1E7905758;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E79048A8;
  v5 = (IOPortUSBCAccessoriesDelegate *)*((_QWORD *)this + 9);
  if (v5 == (IOPortUSBCAccessoriesDelegate *)((char *)this + 48))
  {
    v6 = 4;
    v5 = (IOPortUSBCAccessoriesDelegate *)((char *)this + 48);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  MEMORY[0x1C3B89240]((char *)this + 40);
  v7 = *((_QWORD *)this + 4);
  if (v7)
    dispatch_release(v7);
  v8 = *((_QWORD *)this + 3);
  if (v8)
    dispatch_release(v8);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  operator delete(this);
}

void IOPortUSBCAccessoriesDelegate::start(IOPortUSBCAccessoriesDelegate *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN29IOPortUSBCAccessoriesDelegate5startEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_5_12;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN29IOPortUSBCAccessoriesDelegate5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  const char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  queue v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  NSObject *v23;
  NSObject *v24;
  _QWORD v25[6];
  std::__shared_weak_count *v26;
  void *aBlock;
  dispatch_object_t v28;
  dispatch_object_t object;
  uint8_t buf[16];

  v1 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 80))
  {
    v2 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Starting", buf, 2u);
    }
    *(_BYTE *)(v1 + 80) = 1;
    v3 = *(std::__shared_weak_count **)(v1 + 16);
    if (!v3 || (v4 = *(_QWORD *)(v1 + 8), (v5 = std::__shared_weak_count::lock(v3)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v7 = v5;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v7);
    }
    v12 = *(NSObject **)(v1 + 24);
    object = v12;
    if (v12)
      dispatch_retain(v12);
    v13.fObj.fObj = (dispatch_object_s *)"com.apple.telephony.abm";
    ctu::iokit::IOPortUSBCController::create((ctu::iokit::IOPortUSBCController *)&object, v13, "IOPortUSBCAccessories.delegate", v6);
    v14 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v15 = *(std::__shared_weak_count **)(v1 + 96);
    *(_OWORD *)(v1 + 88) = v14;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v19 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (object)
      dispatch_release(object);
    if (*(_QWORD *)(v1 + 88))
    {
      v25[0] = MEMORY[0x1E0C809B0];
      v25[1] = 1174405120;
      v25[2] = ___ZN29IOPortUSBCAccessoriesDelegate5startEv_block_invoke_2;
      v25[3] = &__block_descriptor_tmp_26;
      v25[4] = v1;
      v25[5] = v4;
      v26 = v7;
      do
        v21 = __ldxr(p_shared_weak_owners);
      while (__stxr(v21 + 1, p_shared_weak_owners));
      v22 = _Block_copy(v25);
      v23 = *(NSObject **)(v1 + 24);
      if (v23)
        dispatch_retain(v23);
      aBlock = v22;
      v28 = v23;
      ctu::iokit::IOPortUSBCController::registerCallback();
      if (v28)
        dispatch_release(v28);
      if (aBlock)
        _Block_release(aBlock);
      if (v26)
        std::__shared_weak_count::__release_weak(v26);
    }
    else
    {
      v24 = *(NSObject **)(v1 + 40);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1BF335000, v24, OS_LOG_TYPE_ERROR, "Failed to create IOPort Controller!", buf, 2u);
      }
    }
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1BF432BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, dispatch_object_t object)
{
  std::__shared_weak_count *v18;

  dispatch::callback<void({block_pointer})(ctu::iokit::USBCAccessory)>::~callback((uint64_t)&a16);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    std::__shared_weak_count::__release_weak(v18);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(a1);
}

void ___ZN29IOPortUSBCAccessoriesDelegate5startEv_block_invoke_2(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  void **v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  int v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  _DWORD *v71;
  uint64_t v72;
  char *v73;
  _DWORD *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  void *v79;
  int64_t v80;
  _DWORD *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  int v89;
  NSObject *v90;
  int v91;
  uint64_t v92;
  int v93;
  char *v94;
  char *v95;
  uint64_t v96;
  void *v97;
  void *v98;
  char *v99;
  CFTypeRef cf;
  void *__p;
  char *v102;
  unint64_t v103;
  uint8_t buf[4];
  _DWORD v105[7];

  *(_QWORD *)&v105[5] = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v11 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        ctu::iokit::IOPortUSBCController::asString();
        v12 = (v103 & 0x8000000000000000) == 0 ? &__p : (void **)__p;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)v105 = v12;
        _os_log_impl(&dword_1BF335000, v11, OS_LOG_TYPE_DEFAULT, "#I Detected Accessory: %s\n", buf, 0xCu);
        if (SHIBYTE(v103) < 0)
          operator delete(__p);
      }
      if (*(_QWORD *)(v5 + 72))
      {
        __p = 0;
        v102 = 0;
        v103 = 0;
        if (ctu::iokit::operator&())
        {
          v13 = v102;
          if ((unint64_t)v102 < v103)
          {
            v14 = 131089;
LABEL_22:
            *(_QWORD *)v13 = v14;
            *((_DWORD *)v13 + 2) = 0x20000;
            v15 = v13 + 12;
LABEL_52:
            v102 = v15;
            v21 = 1;
LABEL_53:
            if (ctu::iokit::operator&())
            {
              v33 = v102;
              if ((unint64_t)v102 < v103)
              {
                v34 = 131090;
LABEL_59:
                *(_QWORD *)v33 = v34;
                *((_DWORD *)v33 + 2) = 0x20000;
                v35 = v33 + 12;
LABEL_88:
                v102 = v35;
                v21 = 1;
LABEL_89:
                if (ctu::iokit::operator&())
                {
                  v52 = v102;
                  if ((unint64_t)v102 < v103)
                  {
                    v53 = 131091;
LABEL_95:
                    *(_QWORD *)v52 = v53;
                    *((_DWORD *)v52 + 2) = 0x20000;
                    v54 = v52 + 12;
LABEL_124:
                    v102 = v54;
                    v21 = 1;
LABEL_125:
                    if (ctu::iokit::operator&())
                    {
                      v71 = v102;
                      if ((unint64_t)v102 < v103)
                      {
                        v72 = 131092;
LABEL_131:
                        *(_QWORD *)v71 = v72;
                        v71[2] = 0x20000;
                        v73 = (char *)(v71 + 3);
                        goto LABEL_165;
                      }
                      v74 = __p;
                      v75 = 0xAAAAAAAAAAAAAAABLL * ((v102 - (_BYTE *)__p) >> 2);
                      v76 = v75 + 1;
                      if (v75 + 1 > 0x1555555555555555)
                        std::vector<std::string>::__throw_length_error[abi:ne180100]();
                      if (0x5555555555555556 * ((uint64_t)(v103 - (_QWORD)__p) >> 2) > v76)
                        v76 = 0x5555555555555556 * ((uint64_t)(v103 - (_QWORD)__p) >> 2);
                      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v103 - (_QWORD)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                        v77 = 0x1555555555555555;
                      else
                        v77 = v76;
                      if (v77)
                      {
                        if (v77 > 0x1555555555555555)
                          std::__throw_bad_array_new_length[abi:ne180100]();
                        v78 = (char *)operator new(12 * v77);
                      }
                      else
                      {
                        v78 = 0;
                      }
                      v86 = &v78[12 * v75];
                      v87 = &v78[12 * v77];
                      *(_QWORD *)v86 = 131092;
                      *((_DWORD *)v86 + 2) = 0x20000;
                      v73 = v86 + 12;
                      if (v71 != v74)
                      {
                        do
                        {
                          v88 = *(_QWORD *)(v71 - 3);
                          v71 -= 3;
                          v89 = v71[2];
                          *(_QWORD *)(v86 - 12) = v88;
                          v86 -= 12;
                          *((_DWORD *)v86 + 2) = v89;
                        }
                        while (v71 != v74);
LABEL_162:
                        v71 = __p;
                      }
                    }
                    else
                    {
                      if (!ctu::iokit::operator&())
                      {
                        if (!v21)
                        {
                          v90 = *(NSObject **)(v5 + 40);
                          if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
                          {
                            v91 = *(_DWORD *)(v5 + 104);
                            *(_DWORD *)buf = 67109376;
                            v105[0] = v91;
                            LOWORD(v105[1]) = 1024;
                            *(_DWORD *)((char *)&v105[1] + 2) = a2;
                            _os_log_error_impl(&dword_1BF335000, v90, OS_LOG_TYPE_ERROR, "Failed to parse bitmask (current: 0x%x, received: 0x%x)", buf, 0xEu);
                          }
                          goto LABEL_173;
                        }
                        *(_DWORD *)(v5 + 104) = a2;
                        v99 = 0;
                        cf = 0;
                        v97 = 0;
                        v98 = 0;
                        v79 = __p;
                        v80 = v102 - (_BYTE *)__p;
                        if (v102 != __p)
                          goto LABEL_166;
                        goto LABEL_168;
                      }
                      v71 = v102;
                      if ((unint64_t)v102 < v103)
                      {
                        v72 = 65556;
                        goto LABEL_131;
                      }
                      v81 = __p;
                      v82 = 0xAAAAAAAAAAAAAAABLL * ((v102 - (_BYTE *)__p) >> 2);
                      v83 = v82 + 1;
                      if (v82 + 1 > 0x1555555555555555)
                        std::vector<std::string>::__throw_length_error[abi:ne180100]();
                      if (0x5555555555555556 * ((uint64_t)(v103 - (_QWORD)__p) >> 2) > v83)
                        v83 = 0x5555555555555556 * ((uint64_t)(v103 - (_QWORD)__p) >> 2);
                      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v103 - (_QWORD)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                        v84 = 0x1555555555555555;
                      else
                        v84 = v83;
                      if (v84)
                      {
                        if (v84 > 0x1555555555555555)
                          std::__throw_bad_array_new_length[abi:ne180100]();
                        v85 = (char *)operator new(12 * v84);
                      }
                      else
                      {
                        v85 = 0;
                      }
                      v86 = &v85[12 * v82];
                      v87 = &v85[12 * v84];
                      *(_QWORD *)v86 = 65556;
                      *((_DWORD *)v86 + 2) = 0x20000;
                      v73 = v86 + 12;
                      if (v71 != v81)
                      {
                        do
                        {
                          v92 = *(_QWORD *)(v71 - 3);
                          v71 -= 3;
                          v93 = v71[2];
                          *(_QWORD *)(v86 - 12) = v92;
                          v86 -= 12;
                          *((_DWORD *)v86 + 2) = v93;
                        }
                        while (v71 != v81);
                        goto LABEL_162;
                      }
                    }
                    __p = v86;
                    v102 = v73;
                    v103 = (unint64_t)v87;
                    if (v71)
                      operator delete(v71);
LABEL_165:
                    v102 = v73;
                    *(_DWORD *)(v5 + 104) = a2;
                    v99 = 0;
                    cf = 0;
                    v97 = 0;
                    v98 = 0;
                    v79 = __p;
                    v80 = v73 - (_BYTE *)__p;
                    if (v73 != __p)
                    {
LABEL_166:
                      if (0xAAAAAAAAAAAAAAABLL * (v80 >> 2) > 0x1555555555555555)
                        std::vector<std::string>::__throw_length_error[abi:ne180100]();
                      v94 = (char *)operator new(v80);
                      v95 = &v94[4 * (v80 >> 2)];
                      v97 = v94;
                      v99 = v95;
                      memcpy(v94, v79, v80);
                      v98 = v95;
                    }
LABEL_168:
                    v96 = *(_QWORD *)(v5 + 72);
                    if (!v96)
                      std::__throw_bad_function_call[abi:ne180100]();
                    (*(void (**)(uint64_t, CFTypeRef *, void **))(*(_QWORD *)v96 + 48))(v96, &cf, &v97);
                    if (v97)
                    {
                      v98 = v97;
                      operator delete(v97);
                    }
                    if (cf)
                      CFRelease(cf);
LABEL_173:
                    if (__p)
                    {
                      v102 = (char *)__p;
                      operator delete(__p);
                    }
                    return;
                  }
                  v55 = (char *)__p;
                  v56 = 0xAAAAAAAAAAAAAAABLL * ((v102 - (_BYTE *)__p) >> 2);
                  v57 = v56 + 1;
                  if (v56 + 1 > 0x1555555555555555)
                    std::vector<std::string>::__throw_length_error[abi:ne180100]();
                  if (0x5555555555555556 * ((uint64_t)(v103 - (_QWORD)__p) >> 2) > v57)
                    v57 = 0x5555555555555556 * ((uint64_t)(v103 - (_QWORD)__p) >> 2);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v103 - (_QWORD)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                    v58 = 0x1555555555555555;
                  else
                    v58 = v57;
                  if (v58)
                  {
                    if (v58 > 0x1555555555555555)
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    v59 = (char *)operator new(12 * v58);
                  }
                  else
                  {
                    v59 = 0;
                  }
                  v65 = &v59[12 * v56];
                  v66 = &v59[12 * v58];
                  *(_QWORD *)v65 = 131091;
                  *((_DWORD *)v65 + 2) = 0x20000;
                  v54 = v65 + 12;
                  if (v52 != v55)
                  {
                    do
                    {
                      v67 = *(_QWORD *)(v52 - 12);
                      v52 -= 12;
                      v68 = *((_DWORD *)v52 + 2);
                      *(_QWORD *)(v65 - 12) = v67;
                      v65 -= 12;
                      *((_DWORD *)v65 + 2) = v68;
                    }
                    while (v52 != v55);
LABEL_121:
                    v52 = (char *)__p;
                  }
                }
                else
                {
                  if (!ctu::iokit::operator&())
                    goto LABEL_125;
                  v52 = v102;
                  if ((unint64_t)v102 < v103)
                  {
                    v53 = 65555;
                    goto LABEL_95;
                  }
                  v60 = (char *)__p;
                  v61 = 0xAAAAAAAAAAAAAAABLL * ((v102 - (_BYTE *)__p) >> 2);
                  v62 = v61 + 1;
                  if (v61 + 1 > 0x1555555555555555)
                    std::vector<std::string>::__throw_length_error[abi:ne180100]();
                  if (0x5555555555555556 * ((uint64_t)(v103 - (_QWORD)__p) >> 2) > v62)
                    v62 = 0x5555555555555556 * ((uint64_t)(v103 - (_QWORD)__p) >> 2);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v103 - (_QWORD)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                    v63 = 0x1555555555555555;
                  else
                    v63 = v62;
                  if (v63)
                  {
                    if (v63 > 0x1555555555555555)
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    v64 = (char *)operator new(12 * v63);
                  }
                  else
                  {
                    v64 = 0;
                  }
                  v65 = &v64[12 * v61];
                  v66 = &v64[12 * v63];
                  *(_QWORD *)v65 = 65555;
                  *((_DWORD *)v65 + 2) = 0x20000;
                  v54 = v65 + 12;
                  if (v52 != v60)
                  {
                    do
                    {
                      v69 = *(_QWORD *)(v52 - 12);
                      v52 -= 12;
                      v70 = *((_DWORD *)v52 + 2);
                      *(_QWORD *)(v65 - 12) = v69;
                      v65 -= 12;
                      *((_DWORD *)v65 + 2) = v70;
                    }
                    while (v52 != v60);
                    goto LABEL_121;
                  }
                }
                __p = v65;
                v102 = v54;
                v103 = (unint64_t)v66;
                if (v52)
                  operator delete(v52);
                goto LABEL_124;
              }
              v36 = (char *)__p;
              v37 = 0xAAAAAAAAAAAAAAABLL * ((v102 - (_BYTE *)__p) >> 2);
              v38 = v37 + 1;
              if (v37 + 1 > 0x1555555555555555)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((uint64_t)(v103 - (_QWORD)__p) >> 2) > v38)
                v38 = 0x5555555555555556 * ((uint64_t)(v103 - (_QWORD)__p) >> 2);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v103 - (_QWORD)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                v39 = 0x1555555555555555;
              else
                v39 = v38;
              if (v39)
              {
                if (v39 > 0x1555555555555555)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v40 = (char *)operator new(12 * v39);
              }
              else
              {
                v40 = 0;
              }
              v46 = &v40[12 * v37];
              v47 = &v40[12 * v39];
              *(_QWORD *)v46 = 131090;
              *((_DWORD *)v46 + 2) = 0x20000;
              v35 = v46 + 12;
              if (v33 != v36)
              {
                do
                {
                  v48 = *(_QWORD *)(v33 - 12);
                  v33 -= 12;
                  v49 = *((_DWORD *)v33 + 2);
                  *(_QWORD *)(v46 - 12) = v48;
                  v46 -= 12;
                  *((_DWORD *)v46 + 2) = v49;
                }
                while (v33 != v36);
LABEL_85:
                v33 = (char *)__p;
              }
            }
            else
            {
              if (!ctu::iokit::operator&())
                goto LABEL_89;
              v33 = v102;
              if ((unint64_t)v102 < v103)
              {
                v34 = 65554;
                goto LABEL_59;
              }
              v41 = (char *)__p;
              v42 = 0xAAAAAAAAAAAAAAABLL * ((v102 - (_BYTE *)__p) >> 2);
              v43 = v42 + 1;
              if (v42 + 1 > 0x1555555555555555)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((uint64_t)(v103 - (_QWORD)__p) >> 2) > v43)
                v43 = 0x5555555555555556 * ((uint64_t)(v103 - (_QWORD)__p) >> 2);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v103 - (_QWORD)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                v44 = 0x1555555555555555;
              else
                v44 = v43;
              if (v44)
              {
                if (v44 > 0x1555555555555555)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v45 = (char *)operator new(12 * v44);
              }
              else
              {
                v45 = 0;
              }
              v46 = &v45[12 * v42];
              v47 = &v45[12 * v44];
              *(_QWORD *)v46 = 65554;
              *((_DWORD *)v46 + 2) = 0x20000;
              v35 = v46 + 12;
              if (v33 != v41)
              {
                do
                {
                  v50 = *(_QWORD *)(v33 - 12);
                  v33 -= 12;
                  v51 = *((_DWORD *)v33 + 2);
                  *(_QWORD *)(v46 - 12) = v50;
                  v46 -= 12;
                  *((_DWORD *)v46 + 2) = v51;
                }
                while (v33 != v41);
                goto LABEL_85;
              }
            }
            __p = v46;
            v102 = v35;
            v103 = (unint64_t)v47;
            if (v33)
              operator delete(v33);
            goto LABEL_88;
          }
          v16 = (char *)__p;
          v17 = 0xAAAAAAAAAAAAAAABLL * ((v102 - (_BYTE *)__p) >> 2);
          v18 = v17 + 1;
          if (v17 + 1 > 0x1555555555555555)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v103 - (_QWORD)__p) >> 2) > v18)
            v18 = 0x5555555555555556 * ((uint64_t)(v103 - (_QWORD)__p) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v103 - (_QWORD)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v19 = 0x1555555555555555;
          else
            v19 = v18;
          if (v19)
          {
            if (v19 > 0x1555555555555555)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v20 = (char *)operator new(12 * v19);
          }
          else
          {
            v20 = 0;
          }
          v27 = &v20[12 * v17];
          v28 = &v20[12 * v19];
          *(_QWORD *)v27 = 131089;
          *((_DWORD *)v27 + 2) = 0x20000;
          v15 = v27 + 12;
          if (v13 != v16)
          {
            do
            {
              v29 = *(_QWORD *)(v13 - 12);
              v13 -= 12;
              v30 = *((_DWORD *)v13 + 2);
              *(_QWORD *)(v27 - 12) = v29;
              v27 -= 12;
              *((_DWORD *)v27 + 2) = v30;
            }
            while (v13 != v16);
LABEL_49:
            v13 = (char *)__p;
          }
        }
        else
        {
          if (!ctu::iokit::operator&())
          {
            v21 = 0;
            goto LABEL_53;
          }
          v13 = v102;
          if ((unint64_t)v102 < v103)
          {
            v14 = 65553;
            goto LABEL_22;
          }
          v22 = (char *)__p;
          v23 = 0xAAAAAAAAAAAAAAABLL * ((v102 - (_BYTE *)__p) >> 2);
          v24 = v23 + 1;
          if (v23 + 1 > 0x1555555555555555)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v103 - (_QWORD)__p) >> 2) > v24)
            v24 = 0x5555555555555556 * ((uint64_t)(v103 - (_QWORD)__p) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v103 - (_QWORD)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v25 = 0x1555555555555555;
          else
            v25 = v24;
          if (v25)
          {
            if (v25 > 0x1555555555555555)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v26 = (char *)operator new(12 * v25);
          }
          else
          {
            v26 = 0;
          }
          v27 = &v26[12 * v23];
          v28 = &v26[12 * v25];
          *(_QWORD *)v27 = 65553;
          *((_DWORD *)v27 + 2) = 0x20000;
          v15 = v27 + 12;
          if (v13 != v22)
          {
            do
            {
              v31 = *(_QWORD *)(v13 - 12);
              v13 -= 12;
              v32 = *((_DWORD *)v13 + 2);
              *(_QWORD *)(v27 - 12) = v31;
              v27 -= 12;
              *((_DWORD *)v27 + 2) = v32;
            }
            while (v13 != v22);
            goto LABEL_49;
          }
        }
        __p = v27;
        v102 = v15;
        v103 = (unint64_t)v28;
        if (v13)
          operator delete(v13);
        goto LABEL_52;
      }
    }
  }
}

void sub_1BF4336C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::USBCAccessory)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void IOPortUSBCAccessoriesDelegate::stop(IOPortUSBCAccessoriesDelegate *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN29IOPortUSBCAccessoriesDelegate4stopEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_6_4;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN29IOPortUSBCAccessoriesDelegate4stopEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint8_t v13[16];
  uint8_t buf[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = *(NSObject **)(v1 + 40);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Stopping", buf, 2u);
    }
    v6 = (_QWORD *)(v1 + 88);
    v5 = *(_QWORD *)(v1 + 88);
    *(_BYTE *)(v1 + 80) = 0;
    if (v5)
    {
      v7 = *(std::__shared_weak_count **)(v1 + 96);
      *(_QWORD *)(v1 + 88) = 0;
      *(_QWORD *)(v1 + 96) = 0;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        v10 = *(std::__shared_weak_count **)(v1 + 96);
        *v6 = 0;
        *(_QWORD *)(v1 + 96) = 0;
        if (v10)
        {
          v11 = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
      }
      else
      {
        *v6 = 0;
        *(_QWORD *)(v1 + 96) = 0;
      }
    }
  }
  else if (v4)
  {
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Already stopped", v13, 2u);
  }
}

void std::__shared_ptr_pointer<IOPortUSBCAccessoriesDelegate *,std::shared_ptr<IOPortUSBCAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOPortUSBCAccessoriesDelegate>(IOPortUSBCAccessoriesDelegate*)::{lambda(IOPortUSBCAccessoriesDelegate *)#1},std::allocator<IOPortUSBCAccessoriesDelegate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<IOPortUSBCAccessoriesDelegate *,std::shared_ptr<IOPortUSBCAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOPortUSBCAccessoriesDelegate>(IOPortUSBCAccessoriesDelegate*)::{lambda(IOPortUSBCAccessoriesDelegate *)#1},std::allocator<IOPortUSBCAccessoriesDelegate>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<IOPortUSBCAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOPortUSBCAccessoriesDelegate>(IOPortUSBCAccessoriesDelegate*)::{lambda(IOPortUSBCAccessoriesDelegate*)#1}::operator() const(IOPortUSBCAccessoriesDelegate*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<IOPortUSBCAccessoriesDelegate *,std::shared_ptr<IOPortUSBCAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOPortUSBCAccessoriesDelegate>(IOPortUSBCAccessoriesDelegate*)::{lambda(IOPortUSBCAccessoriesDelegate *)#1},std::allocator<IOPortUSBCAccessoriesDelegate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI29IOPortUSBCAccessoriesDel"
                     "egateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI29IOPortUSBCAcc"
                                "essoriesDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI29IOPortUSBCAccessoriesDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI29IOPortUSBCAccessoriesDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<IOPortUSBCAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOPortUSBCAccessoriesDelegate>(IOPortUSBCAccessoriesDelegate*)::{lambda(IOPortUSBCAccessoriesDelegate*)#1}::operator() const(IOPortUSBCAccessoriesDelegate*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void BootStats::BootStats(BootStats *this)
{
  char __p[17];
  char v3;

  v3 = 16;
  strcpy(__p, "Stats::BootStats");
  Stats::Stats(this, (uint64_t)__p);
  if (v3 < 0)
    operator delete(*(void **)__p);
  *(_QWORD *)this = off_1E7905880;
}

{
  char __p[17];
  char v3;

  v3 = 16;
  strcpy(__p, "Stats::BootStats");
  Stats::Stats(this, (uint64_t)__p);
  if (v3 < 0)
    operator delete(*(void **)__p);
  *(_QWORD *)this = off_1E7905880;
}

void sub_1BF433A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BF433AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void BootStats::~BootStats(BootStats *this)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *(_QWORD *)this = off_1E7906280;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = *((_QWORD *)this + 12);
  if (v2)
    dispatch_release(v2);
  v3 = *((_QWORD *)this + 11);
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *(_QWORD *)this = off_1E7906280;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = *((_QWORD *)this + 12);
  if (v2)
    dispatch_release(v2);
  v3 = *((_QWORD *)this + 11);
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *(_QWORD *)this = off_1E7906280;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = *((_QWORD *)this + 12);
  if (v2)
    dispatch_release(v2);
  v3 = *((_QWORD *)this + 11);
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(this);
}

double BootStats::createInternal@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  double result;
  __int128 v5;
  char __p[17];
  char v7;

  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  v3 = operator new(0x78uLL);
  v7 = 16;
  strcpy(__p, "Stats::BootStats");
  Stats::Stats(v3, (uint64_t)__p);
  if (v7 < 0)
    operator delete(*(void **)__p);
  *v3 = off_1E7905880;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<BootStats>::shared_ptr[abi:ne180100]<BootStats,std::shared_ptr<BootStats> ctu::SharedSynchronizable<Stats>::make_shared_ptr<BootStats>(BootStats*)::{lambda(BootStats*)#1},void>(&v5, (uint64_t)v3);
  ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(v5);
  result = *(double *)&v5;
  *(_OWORD *)a1 = v5;
  return result;
}

void sub_1BF433C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF433CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  if (a16 < 0)
    operator delete(__p);
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t BootStats::init(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 104) = a2;
  *(_QWORD *)(a1 + 112) = 0;
  return 1;
}

void BootStats::updateData(uint64_t a1@<X0>, CFDictionaryRef *a2@<X1>, xpc_object_t *a3@<X2>, __CFDictionary **a4@<X8>)
{
  uint64_t (*v8)(uint64_t);
  const __CFAllocator *v9;
  __CFDictionary *MutableCopy;
  char *v11;
  xpc_object_t value;
  time_t v13;
  char *v14;
  xpc_object_t v15;
  time_t v16;
  const char **v17;
  const __CFAllocator *v18;
  uint64_t v19;
  const void *v20;
  const __CFAllocator *v21;
  const __CFAllocator *v22;
  const __CFAllocator *v23;
  CFTypeID v24;
  xpc_object_t object[2];
  __CFDictionary *v26;
  __CFString *v27;

  v26 = 0;
  v8 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!*a2)
    v8 = 0;
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (v8)
  {
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *a2);
  }
  else
  {
    MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!MutableCopy)
      goto LABEL_7;
  }
  v26 = MutableCopy;
LABEL_7:
  v11 = (char *)*MEMORY[0x1E0CFBD90];
  if (xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFBD90]))
  {
    value = xpc_dictionary_get_value(*a3, v11);
    object[0] = value;
    if (value)
      xpc_retain(value);
    else
      object[0] = xpc_null_create();
    v13 = xpc::dyn_cast_or_default((xpc *)object, 0);
    xpc_release(object[0]);
  }
  else
  {
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)object, *a2);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v27, v11);
    LODWORD(v13) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)object, v27);
    MEMORY[0x1C3B8936C](&v27);
    v13 = (int)v13;
    MEMORY[0x1C3B893A8](object);
  }
  v14 = (char *)*MEMORY[0x1E0CFBDE8];
  if (xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFBDE8]))
  {
    v15 = xpc_dictionary_get_value(*a3, v14);
    object[0] = v15;
    if (v15)
      xpc_retain(v15);
    else
      object[0] = xpc_null_create();
    v16 = xpc::dyn_cast_or_default((xpc *)object, 0);
    xpc_release(object[0]);
  }
  else
  {
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)object, *a2);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v27, v14);
    LODWORD(v16) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)object, v27);
    MEMORY[0x1C3B8936C](&v27);
    v16 = (int)v16;
    MEMORY[0x1C3B893A8](object);
  }
  v17 = (const char **)MEMORY[0x1E0CFB360];
  if (v13 && v16 && v16 >= v13)
  {
    v19 = (uint64_t)difftime(v16, v13);
    v20 = *(const void **)(a1 + 112);
    if (v20)
      goto LABEL_24;
    goto LABEL_23;
  }
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)object, *a2);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v27, *v17);
  LODWORD(v19) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)object, v27);
  MEMORY[0x1C3B8936C](&v27);
  v19 = (int)v19;
  MEMORY[0x1C3B893A8](object);
  v20 = *(const void **)(a1 + 112);
  if (!v20)
  {
LABEL_23:
    v19 = 0;
    v16 = 0;
    *(_QWORD *)(a1 + 112) = v13;
    v20 = (const void *)v13;
  }
LABEL_24:
  ctu::cf::update<char const*,long>(MutableCopy, (const __CFString **)*MEMORY[0x1E0CFBD10], v20, v9, v18);
  ctu::cf::update<char const*,long>(MutableCopy, (const __CFString **)v11, (const void *)v13, v9, v21);
  ctu::cf::update<char const*,long>(MutableCopy, (const __CFString **)v14, (const void *)v16, v9, v22);
  ctu::cf::update<char const*,long>(MutableCopy, (const __CFString **)*v17, (const void *)v19, v9, v23);
  if (MutableCopy)
  {
    v24 = CFGetTypeID(MutableCopy);
    if (v24 == CFDictionaryGetTypeID())
    {
      *a4 = MutableCopy;
      CFRetain(MutableCopy);
    }
    else
    {
      *a4 = 0;
    }
    CFRelease(MutableCopy);
  }
  else
  {
    *a4 = 0;
  }
}

void sub_1BF433FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void *a11, char a12)
{
  MEMORY[0x1C3B8936C](&a12);
  MEMORY[0x1C3B893A8](&a9);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a11);
  _Unwind_Resume(a1);
}

void sub_1BF434048(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  xpc_release(object);
  JUMPOUT(0x1BF434094);
}

void sub_1BF434068(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  xpc_release(object);
  JUMPOUT(0x1BF434094);
}

void sub_1BF434090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

uint64_t ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (*(_DWORD *)(result + 104))
  {
    strcpy(a2, "UNKNOWN");
    a2[23] = 7;
  }
  else
  {
    strcpy(a2, "Boot Statistics");
    a2[23] = 15;
  }
  return result;
}

uint64_t ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

void ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF434214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF434230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<BootStats>::shared_ptr[abi:ne180100]<BootStats,std::shared_ptr<BootStats> ctu::SharedSynchronizable<Stats>::make_shared_ptr<BootStats>(BootStats*)::{lambda(BootStats*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E79058E8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF43434C(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<BootStats> ctu::SharedSynchronizable<Stats>::make_shared_ptr<BootStats>(BootStats*)::{lambda(BootStats*)#1}::operator() const(BootStats*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF43436C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<BootStats *,std::shared_ptr<BootStats> ctu::SharedSynchronizable<Stats>::make_shared_ptr<BootStats>(BootStats*)::{lambda(BootStats *)#1},std::allocator<BootStats>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<BootStats *,std::shared_ptr<BootStats> ctu::SharedSynchronizable<Stats>::make_shared_ptr<BootStats>(BootStats*)::{lambda(BootStats *)#1},std::allocator<BootStats>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<BootStats> ctu::SharedSynchronizable<Stats>::make_shared_ptr<BootStats>(BootStats*)::{lambda(BootStats*)#1}::operator() const(BootStats*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<BootStats *,std::shared_ptr<BootStats> ctu::SharedSynchronizable<Stats>::make_shared_ptr<BootStats>(BootStats*)::{lambda(BootStats *)#1},std::allocator<BootStats>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI5StatsE15make_shared_ptrI9BootStatsEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI5StatsE15make_shared_ptrI9BootStatsEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI5StatsE15make_shared_ptrI9BootStatsEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI5StatsE15make_shared_ptrI9BootStatsEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<BootStats> ctu::SharedSynchronizable<Stats>::make_shared_ptr<BootStats>(BootStats*)::{lambda(BootStats*)#1}::operator() const(BootStats*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::cf::update<char const*,long>(__CFDictionary *a1, const __CFString **a2, const void *a3, const __CFAllocator *a4, const __CFAllocator *a5)
{
  const void *v8;
  CFNumberRef v9;
  CFNumberRef v10;
  BOOL v11;
  const void *valuePtr;

  valuePtr = 0;
  ctu::cf::convert_copy((ctu::cf *)&valuePtr, a2, (const char *)0x8000100, (uint64_t)a4, a5);
  v8 = valuePtr;
  valuePtr = a3;
  v9 = CFNumberCreate(a4, kCFNumberLongType, &valuePtr);
  v10 = v9;
  if (v8)
    v11 = v9 == 0;
  else
    v11 = 1;
  if (v11)
  {
    if (!v9)
      goto LABEL_8;
  }
  else
  {
    CFDictionarySetValue(a1, v8, v9);
  }
  CFRelease(v10);
LABEL_8:
  if (v8)
    CFRelease(v8);
}

void sub_1BF4344D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1BF4344F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

BOOL prop::get(char *a1, char *a2, uint64_t a3)
{
  const char *v6;
  NSObject *v7;
  char *v9;
  char *v10;
  int v11;
  const char *v12;
  __int16 v13;
  char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB088])
      && strcasecmp(a1, (const char *)*MEMORY[0x1E0CFC200])
      && strcasecmp(a1, (const char *)*MEMORY[0x1E0D01AA8])
      && strcasecmp(a1, (const char *)*MEMORY[0x1E0D01A80]))
    {
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB090]))
      {
        if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFC248]) && strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB118]))
        {
          if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB240]))
          {
            if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB248]))
            {
              if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB198]))
              {
                if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFAFC0]))
                {
                  if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB190]))
                  {
                    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB048]))
                    {
                      v6 = a1;
                      if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB0A0]))
                        goto LABEL_16;
                      return prop::tailspin::get(a2, a3);
                    }
                    return prop::profile::get(a2, a3);
                  }
                  return prop::systemlogs::get(a2, a3);
                }
                return prop::logfilter::get(a2, a3);
              }
              return prop::ttr::get(a2, a3);
            }
            return prop::compression::get(a2, a3);
          }
          return prop::bbipc::get(a2, a3);
        }
        return prop::ipc::get(a2, a3);
      }
      return prop::coredump::get(a2, a3);
    }
    return prop::bbtrace::get(a2, a3);
  }
  v6 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB088])
    || !strcasecmp(v6, (const char *)*MEMORY[0x1E0CFC200])
    || !strcasecmp(v6, (const char *)*MEMORY[0x1E0D01AA8])
    || !strcasecmp(v6, (const char *)*MEMORY[0x1E0D01A80]))
  {
    return prop::bbtrace::get(a2, a3);
  }
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB090]))
    return prop::coredump::get(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFC248]) || !strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB118]))
    return prop::ipc::get(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB240]))
    return prop::bbipc::get(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB248]))
    return prop::compression::get(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB198]))
    return prop::ttr::get(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFAFC0]))
    return prop::logfilter::get(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB190]))
    return prop::systemlogs::get(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB048]))
    return prop::profile::get(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB0A0]))
    return prop::tailspin::get(a2, a3);
LABEL_16:
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB098]))
    return prop::tracesettings::get(a2, a3);
  v7 = GetOsLogContext()[1];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    if (a1[23] >= 0)
      v9 = a1;
    else
      v9 = *(char **)a1;
    if (a2[23] >= 0)
      v10 = a2;
    else
      v10 = *(char **)a2;
    v11 = 136315650;
    v12 = "prop";
    v13 = 2080;
    v14 = v9;
    v15 = 2080;
    v16 = v10;
    _os_log_error_impl(&dword_1BF335000, v7, OS_LOG_TYPE_ERROR, "%s: get: Invalid domain; domain='%s' key='%s'",
      (uint8_t *)&v11,
      0x20u);
  }
  return 0;
}

BOOL prop::bbtrace::get(char *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *__dst[2];
  unint64_t v13;

  v4 = (const void *)*MEMORY[0x1E0CFC200];
  v5 = strlen((const char *)*MEMORY[0x1E0CFC200]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v10;
}

void sub_1BF434BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::coredump::get(char *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *__dst[2];
  unint64_t v13;

  v4 = (const void *)*MEMORY[0x1E0CFB090];
  v5 = strlen((const char *)*MEMORY[0x1E0CFB090]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v10;
}

void sub_1BF434CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::ipc::get(char *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *__dst[2];
  unint64_t v13;

  v4 = (const void *)*MEMORY[0x1E0CFC248];
  v5 = strlen((const char *)*MEMORY[0x1E0CFC248]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v10;
}

void sub_1BF434E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::bbipc::get(char *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *__dst[2];
  unint64_t v13;

  v4 = (const void *)*MEMORY[0x1E0CFB240];
  v5 = strlen((const char *)*MEMORY[0x1E0CFB240]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v10;
}

void sub_1BF434F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::compression::get(char *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *__dst[2];
  unint64_t v13;

  v4 = (const void *)*MEMORY[0x1E0CFB248];
  v5 = strlen((const char *)*MEMORY[0x1E0CFB248]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v10;
}

void sub_1BF435008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::ttr::get(char *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *__dst[2];
  unint64_t v13;

  v4 = (const void *)*MEMORY[0x1E0CFB198];
  v5 = strlen((const char *)*MEMORY[0x1E0CFB198]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v10;
}

void sub_1BF43510C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::logfilter::get(char *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *__dst[2];
  unint64_t v13;

  v4 = (const void *)*MEMORY[0x1E0CFAFC0];
  v5 = strlen((const char *)*MEMORY[0x1E0CFAFC0]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v10;
}

void sub_1BF435210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::systemlogs::get(char *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *__dst[2];
  unint64_t v13;

  v4 = (const void *)*MEMORY[0x1E0CFB190];
  v5 = strlen((const char *)*MEMORY[0x1E0CFB190]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v10;
}

void sub_1BF435314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::profile::get(char *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *__dst[2];
  unint64_t v13;

  v4 = (const void *)*MEMORY[0x1E0CFB048];
  v5 = strlen((const char *)*MEMORY[0x1E0CFB048]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v10;
}

void sub_1BF435418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::tailspin::get(char *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *__dst[2];
  unint64_t v13;

  v4 = (const void *)*MEMORY[0x1E0CFB0A0];
  v5 = strlen((const char *)*MEMORY[0x1E0CFB0A0]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v10;
}

void sub_1BF43551C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::tracesettings::get(char *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *__dst[2];
  unint64_t v13;

  v4 = (const void *)*MEMORY[0x1E0CFB098];
  v5 = strlen((const char *)*MEMORY[0x1E0CFB098]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v10;
}

void sub_1BF435620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t prop::set(char *a1, char *a2, char *a3)
{
  const char *v6;
  NSObject *v7;
  char *v9;
  char *v10;
  char *v11;
  int v12;
  const char *v13;
  __int16 v14;
  char *v15;
  __int16 v16;
  char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB088])
      && strcasecmp(a1, (const char *)*MEMORY[0x1E0CFC200])
      && strcasecmp(a1, (const char *)*MEMORY[0x1E0D01AA8])
      && strcasecmp(a1, (const char *)*MEMORY[0x1E0D01A80]))
    {
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB090]))
      {
        if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFC248]) && strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB118]))
        {
          if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB240]))
          {
            if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB248]))
            {
              if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB198]))
              {
                if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFAFC0]))
                {
                  if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB190]))
                  {
                    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB048]))
                    {
                      v6 = a1;
                      if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB0A0]))
                        goto LABEL_16;
                      return prop::tailspin::set((uint64_t)a2, a3);
                    }
                    return prop::profile::set(a2, a3);
                  }
                  return prop::systemlogs::set(a2, a3);
                }
                return prop::logfilter::set(a2, a3);
              }
              return prop::ttr::set(a2, a3);
            }
            return prop::compression::set(a2, a3);
          }
          return prop::bbipc::set(a2, a3);
        }
        return prop::ipc::set(a2, a3);
      }
      return prop::coredump::set((uint64_t)a2, a3);
    }
    return prop::bbtrace::set(a2, a3);
  }
  v6 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB088])
    || !strcasecmp(v6, (const char *)*MEMORY[0x1E0CFC200])
    || !strcasecmp(v6, (const char *)*MEMORY[0x1E0D01AA8])
    || !strcasecmp(v6, (const char *)*MEMORY[0x1E0D01A80]))
  {
    return prop::bbtrace::set(a2, a3);
  }
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB090]))
    return prop::coredump::set((uint64_t)a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFC248]) || !strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB118]))
    return prop::ipc::set(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB240]))
    return prop::bbipc::set(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB248]))
    return prop::compression::set(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB198]))
    return prop::ttr::set(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFAFC0]))
    return prop::logfilter::set(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB190]))
    return prop::systemlogs::set(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB048]))
    return prop::profile::set(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB0A0]))
    return prop::tailspin::set((uint64_t)a2, a3);
LABEL_16:
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB098]))
    return prop::tracesettings::set(a2, (uint64_t)a3);
  v7 = GetOsLogContext()[1];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    if (a1[23] >= 0)
      v9 = a1;
    else
      v9 = *(char **)a1;
    if (a2[23] >= 0)
      v10 = a2;
    else
      v10 = *(char **)a2;
    if (a3[23] >= 0)
      v11 = a3;
    else
      v11 = *(char **)a3;
    v12 = 136315906;
    v13 = "prop";
    v14 = 2080;
    v15 = v9;
    v16 = 2080;
    v17 = v10;
    v18 = 2080;
    v19 = v11;
    _os_log_error_impl(&dword_1BF335000, v7, OS_LOG_TYPE_ERROR, "%s: set: Invalid domain; domain='%s' key='%s' value='%s'",
      (uint8_t *)&v12,
      0x2Au);
  }
  return 0;
}

uint64_t prop::bbtrace::set(char *a1, const char *a2)
{
  const char *v2;
  int v4;
  char *v5;
  const char *v6;
  capabilities::radio *v7;
  const char *v8;
  const char *v9;
  capabilities::radio *v10;
  capabilities::trace *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  const void *v15;
  size_t v16;
  size_t v17;
  _BYTE *v18;
  size_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  capabilities::radio *v23;
  int v24;
  capabilities::radio *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  size_t v30;
  size_t v31;
  _BYTE *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  const void *v39;
  size_t v40;
  size_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  const char *v47;
  capabilities::radio *v48;
  const char *v49;
  capabilities::radio *v50;
  const char *v51;
  capabilities::radio *v52;
  const char *v53;
  capabilities::radio *v54;
  const char *v55;
  capabilities::radio *v56;
  const char *v57;
  capabilities::radio *v58;
  const char *v59;
  NSObject *v60;
  uint64_t v61;
  char *v62;
  std::string *v63;
  const char *v64;
  NSObject *v65;
  uint32_t v66;
  capabilities::radio *v67;
  unsigned int v68;
  capabilities::abs *v69;
  capabilities::radio *shouldUseMinBasebandTransportIOReadSize;
  unsigned int v71;
  capabilities::abs *v72;
  int v73;
  NSObject *v74;
  std::string __p;
  int __val;
  int data;
  std::string v79;
  _BYTE __dst[24];
  char *v81;
  __int16 v82;
  std::string *v83;
  uint64_t v84;

  v2 = a2;
  v84 = *MEMORY[0x1E0C80C00];
  memset(&v79, 170, sizeof(v79));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v79, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(const char **)v2;
    if (strcmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v79 = *(std::string *)a2;
    if (strcmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::bbtrace::get(a1, (std::string::size_type *)&v79))
    goto LABEL_205;
LABEL_8:
  v4 = a1[23];
  if ((v4 & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB170]))
    {
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB230]))
      {
        if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB460]))
        {
          if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB028]))
          {
            if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB338]))
            {
              if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB2D8]))
              {
                v5 = (char *)*MEMORY[0x1E0CFB178];
                v6 = a1;
                if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB178]))
                  goto LABEL_16;
                goto LABEL_31;
              }
LABEL_80:
              *(_DWORD *)__dst = -1431655766;
              if (!util::convert<int>(&v79, __dst, 0))
                goto LABEL_205;
              v36 = *(_DWORD *)__dst;
              std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x1E0CFC200]);
              LODWORD(__p.__r_.__value_.__l.__data_) = v36;
              v14 = prop::file::set<unsigned int>((const void **)__dst, (uint64_t)a1, (unsigned int *)&__p);
LABEL_97:
              v12 = v14;
LABEL_98:
              if ((__dst[23] & 0x80000000) != 0)
                operator delete(*(void **)__dst);
              goto LABEL_206;
            }
LABEL_67:
            v29 = (const void *)*MEMORY[0x1E0CFC200];
            v30 = strlen((const char *)*MEMORY[0x1E0CFC200]);
            if (v30 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v31 = v30;
            if (v30 >= 0x17)
            {
              v37 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v30 | 7) != 0x17)
                v37 = v30 | 7;
              v38 = v37 + 1;
              v32 = operator new(v37 + 1);
              *(_QWORD *)&__dst[8] = v31;
              *(_QWORD *)&__dst[16] = v38 | 0x8000000000000000;
              *(_QWORD *)__dst = v32;
            }
            else
            {
              __dst[23] = v30;
              v32 = __dst;
              if (!v30)
                goto LABEL_86;
            }
            memmove(v32, v29, v31);
LABEL_86:
            v32[v31] = 0;
            v14 = prop::file::set<std::string>((const void **)__dst, (uint64_t)a1, (uint64_t)&v79);
            goto LABEL_97;
          }
LABEL_57:
          LODWORD(__p.__r_.__value_.__l.__data_) = -1431655766;
          v23 = (capabilities::radio *)util::convert<int>(&v79, &__p, 0);
          v24 = (int)v23;
          v25 = (capabilities::radio *)capabilities::radio::maverick(v23);
          if ((_DWORD)v25)
          {
            if (LODWORD(__p.__r_.__value_.__l.__data_) < 5)
              v26 = v24;
            else
              v26 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_205;
          }
          else
          {
            v33 = capabilities::radio::ice(v25);
            if ((v33 & v24) == 1)
            {
              v12 = 0;
              if (LODWORD(__p.__r_.__value_.__l.__data_) > 6 || ((1 << __p.__r_.__value_.__s.__data_[0]) & 0x45) == 0)
                goto LABEL_206;
            }
            else if ((v24 & ~v33) != 1)
            {
              goto LABEL_205;
            }
          }
          v39 = (const void *)*MEMORY[0x1E0CFC200];
          v40 = strlen((const char *)*MEMORY[0x1E0CFC200]);
          if (v40 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v41 = v40;
          if (v40 >= 0x17)
          {
            v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v40 | 7) != 0x17)
              v43 = v40 | 7;
            v44 = v43 + 1;
            v42 = operator new(v43 + 1);
            *(_QWORD *)&__dst[8] = v41;
            *(_QWORD *)&__dst[16] = v44 | 0x8000000000000000;
            *(_QWORD *)__dst = v42;
          }
          else
          {
            __dst[23] = v40;
            v42 = __dst;
            if (!v40)
              goto LABEL_96;
          }
          memmove(v42, v39, v41);
LABEL_96:
          v42[v41] = 0;
          v14 = prop::file::set<int>((const void **)__dst, (uint64_t)a1, (int *)&__p);
          goto LABEL_97;
        }
LABEL_48:
        __p.__r_.__value_.__s.__data_[0] = -86;
        if (!util::convert<BOOL>(&v79, (BOOL *)&__p, 0))
          goto LABEL_205;
        v15 = (const void *)*MEMORY[0x1E0CFC200];
        v20 = strlen((const char *)*MEMORY[0x1E0CFC200]);
        if (v20 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v17 = v20;
        if (v20 >= 0x17)
        {
          v34 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v20 | 7) != 0x17)
            v34 = v20 | 7;
          v35 = v34 + 1;
          v18 = operator new(v34 + 1);
          *(_QWORD *)&__dst[8] = v17;
          *(_QWORD *)&__dst[16] = v35 | 0x8000000000000000;
          *(_QWORD *)__dst = v18;
        }
        else
        {
          __dst[23] = v20;
          v18 = __dst;
          if (!v20)
            goto LABEL_79;
        }
        goto LABEL_78;
      }
LABEL_43:
      __p.__r_.__value_.__s.__data_[0] = -86;
      if (!util::convert<BOOL>(&v79, (BOOL *)&__p, 0))
        goto LABEL_205;
      v15 = (const void *)*MEMORY[0x1E0CFC200];
      v19 = strlen((const char *)*MEMORY[0x1E0CFC200]);
      if (v19 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v17 = v19;
      if (v19 >= 0x17)
      {
        v27 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v19 | 7) != 0x17)
          v27 = v19 | 7;
        v28 = v27 + 1;
        v18 = operator new(v27 + 1);
        *(_QWORD *)&__dst[8] = v17;
        *(_QWORD *)&__dst[16] = v28 | 0x8000000000000000;
        *(_QWORD *)__dst = v18;
      }
      else
      {
        __dst[23] = v19;
        v18 = __dst;
        if (!v19)
          goto LABEL_79;
      }
      goto LABEL_78;
    }
LABEL_38:
    __p.__r_.__value_.__s.__data_[0] = -86;
    if (!util::convert<BOOL>(&v79, (BOOL *)&__p, 0))
      goto LABEL_205;
    v15 = (const void *)*MEMORY[0x1E0CFC200];
    v16 = strlen((const char *)*MEMORY[0x1E0CFC200]);
    if (v16 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v17 = v16;
    if (v16 >= 0x17)
    {
      v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v21 = v16 | 7;
      v22 = v21 + 1;
      v18 = operator new(v21 + 1);
      *(_QWORD *)&__dst[8] = v17;
      *(_QWORD *)&__dst[16] = v22 | 0x8000000000000000;
      *(_QWORD *)__dst = v18;
    }
    else
    {
      __dst[23] = v16;
      v18 = __dst;
      if (!v16)
        goto LABEL_79;
    }
LABEL_78:
    memmove(v18, v15, v17);
LABEL_79:
    v18[v17] = 0;
    v14 = prop::file::set<BOOL>((const void **)__dst, (uint64_t)a1, (unsigned __int8 *)&__p);
    goto LABEL_97;
  }
  v6 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB170]))
    goto LABEL_38;
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB230]))
    goto LABEL_43;
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB460]))
    goto LABEL_48;
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB028]))
    goto LABEL_57;
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB338]))
    goto LABEL_67;
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB2D8]))
    goto LABEL_80;
  v5 = (char *)*MEMORY[0x1E0CFB178];
  if (strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB178]))
  {
LABEL_16:
    v7 = (capabilities::radio *)strcasecmp(v6, diag::config::kEnabledDuringSleepKey[0]);
    if (!(_DWORD)v7)
    {
      v45 = capabilities::radio::maverick(v7);
      if ((v45 & 1) != 0 || (capabilities::radio::ice((capabilities::radio *)v45) & 1) != 0)
      {
        *(_DWORD *)__dst = -1431655766;
        if ((util::convert<int>(&v79, __dst, 0) & 1) == 0)
          goto LABEL_205;
        v46 = *(_DWORD *)__dst;
        if (*(_DWORD *)__dst > 2u)
          goto LABEL_205;
        std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x1E0CFC200]);
        LODWORD(__p.__r_.__value_.__l.__data_) = v46;
        v14 = prop::file::set<unsigned int>((const void **)__dst, (uint64_t)a1, (unsigned int *)&__p);
        goto LABEL_97;
      }
      LOBYTE(v4) = a1[23];
    }
    v8 = *(const char **)a1;
    if ((v4 & 0x80u) == 0)
      v9 = a1;
    else
      v9 = *(const char **)a1;
    v10 = (capabilities::radio *)strcasecmp(v9, diag::config::kBufferingOnAPAwake[0]);
    if (!(_DWORD)v10)
    {
      if ((capabilities::radio::maverick(v10) & 1) != 0)
      {
        __p.__r_.__value_.__s.__data_[0] = -86;
        if (util::convert<BOOL>(&v79, (BOOL *)&__p, 0))
          goto LABEL_203;
        goto LABEL_205;
      }
      LOBYTE(v4) = a1[23];
      v8 = *(const char **)a1;
    }
    if ((v4 & 0x80u) == 0)
      v47 = a1;
    else
      v47 = v8;
    v48 = (capabilities::radio *)strcasecmp(v47, diag::config::kStallDetectionKey[0]);
    if (!(_DWORD)v48)
    {
      if ((capabilities::radio::maverick(v48) & 1) != 0)
      {
        __p.__r_.__value_.__s.__data_[0] = -86;
        if (util::convert<BOOL>(&v79, (BOOL *)&__p, 0))
          goto LABEL_203;
        goto LABEL_205;
      }
      LOBYTE(v4) = a1[23];
      v8 = *(const char **)a1;
    }
    if ((v4 & 0x80u) == 0)
      v49 = a1;
    else
      v49 = v8;
    v50 = (capabilities::radio *)strcasecmp(v49, diag::config::kStallDetectionRetriesKey[0]);
    if (!(_DWORD)v50)
    {
      if ((capabilities::radio::maverick(v50) & 1) != 0)
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = -1431655766;
        if (!util::convert<unsigned int>(&v79, &__p))
          goto LABEL_205;
        std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x1E0CFC200]);
        v14 = prop::file::set<unsigned int>((const void **)__dst, (uint64_t)a1, (unsigned int *)&__p);
        goto LABEL_97;
      }
      LOBYTE(v4) = a1[23];
      v8 = *(const char **)a1;
    }
    if ((v4 & 0x80u) == 0)
      v51 = a1;
    else
      v51 = v8;
    v52 = (capabilities::radio *)strcasecmp(v51, diag::config::kStallDetectionRecoveryKey[0]);
    if (!(_DWORD)v52)
    {
      if ((capabilities::radio::maverick(v52) & 1) != 0)
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = -1431655766;
        if (!diag::config::asEnum((uint64_t)&v79, &__p))
          goto LABEL_205;
        std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x1E0CFC200]);
        data = (int)__p.__r_.__value_.__l.__data_;
        v14 = prop::file::set<unsigned int>((const void **)__dst, (uint64_t)a1, (unsigned int *)&data);
        goto LABEL_97;
      }
      LOBYTE(v4) = a1[23];
    }
    if ((v4 & 0x80) != 0)
    {
      v53 = *(const char **)a1;
      if (strcasecmp(*(const char **)a1, diag::config::kKeepScratchLogsKey[0]))
      {
LABEL_133:
        v54 = (capabilities::radio *)strcasecmp(v53, (const char *)*MEMORY[0x1E0CFBB60]);
        if (!(_DWORD)v54)
        {
          if ((capabilities::radio::maverick(v54) & 1) != 0)
            goto LABEL_178;
          LOBYTE(v4) = a1[23];
        }
        if ((v4 & 0x80) != 0)
        {
          v55 = *(const char **)a1;
          if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFBD20]))
            goto LABEL_178;
        }
        else
        {
          v55 = a1;
          if (!strcasecmp(a1, (const char *)*MEMORY[0x1E0CFBD20]))
            goto LABEL_178;
        }
        v56 = (capabilities::radio *)strcasecmp(v55, diag::config::kExtraDMCFileKey[0]);
        if (!(_DWORD)v56)
        {
          if ((capabilities::radio::maverick(v56) & 1) != 0)
            goto LABEL_178;
          LOBYTE(v4) = a1[23];
        }
        if ((v4 & 0x80u) == 0)
          v57 = a1;
        else
          v57 = *(const char **)a1;
        v58 = (capabilities::radio *)strcasecmp(v57, (const char *)*MEMORY[0x1E0CFB940]);
        if (!(_DWORD)v58)
        {
          if ((capabilities::radio::maverick(v58) & 1) != 0)
          {
LABEL_178:
            std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x1E0CFC200]);
            v14 = prop::file::set<std::string>((const void **)__dst, (uint64_t)a1, (uint64_t)&v79);
            goto LABEL_97;
          }
          LOBYTE(v4) = a1[23];
        }
        if ((v4 & 0x80) != 0)
        {
          v59 = *(const char **)a1;
          if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFBC00]))
            goto LABEL_178;
          if (strcasecmp(v59, (const char *)*MEMORY[0x1E0CFC0A0]))
          {
            if (!strcasecmp(v59, (const char *)*MEMORY[0x1E0CFC058])
              || !strcasecmp(v59, (const char *)*MEMORY[0x1E0CFC060]))
            {
              goto LABEL_178;
            }
            if (strcasecmp(v59, (const char *)*MEMORY[0x1E0CFB228]))
            {
              if (!strcasecmp(v59, (const char *)*MEMORY[0x1E0CFB7D8])
                || !strcasecmp(v59, (const char *)*MEMORY[0x1E0CFB950]))
              {
                goto LABEL_178;
              }
LABEL_162:
              if (!strcasecmp(v59, (const char *)*MEMORY[0x1E0CFBD18]))
              {
                __p.__r_.__value_.__s.__data_[0] = -86;
                if (util::convert<BOOL>(&v79, (BOOL *)&__p, 0))
                {
LABEL_203:
                  std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x1E0CFC200]);
                  v14 = prop::file::set<BOOL>((const void **)__dst, (uint64_t)a1, (unsigned __int8 *)&__p);
                  goto LABEL_97;
                }
LABEL_205:
                v12 = 0;
                goto LABEL_206;
              }
              v60 = GetOsLogContext()[1];
              if (!os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
                goto LABEL_205;
              v61 = *MEMORY[0x1E0CFC200];
              if (a1[23] >= 0)
                v62 = a1;
              else
                v62 = *(char **)a1;
              v63 = &v79;
              if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v63 = (std::string *)v79.__r_.__value_.__r.__words[0];
              *(_DWORD *)__dst = 136315906;
              *(_QWORD *)&__dst[4] = "prop";
              *(_WORD *)&__dst[12] = 2080;
              *(_QWORD *)&__dst[14] = v61;
              *(_WORD *)&__dst[22] = 2080;
              v81 = v62;
              v82 = 2080;
              v83 = v63;
              v64 = "%s: [bbtrace] set: Invalid key; domain='%s' key='%s' value='%s'";
              v65 = v60;
              v66 = 42;
LABEL_170:
              _os_log_error_impl(&dword_1BF335000, v65, OS_LOG_TYPE_ERROR, v64, __dst, v66);
              goto LABEL_205;
            }
LABEL_184:
            data = -1431655766;
            v67 = (capabilities::radio *)util::convert<unsigned int>(&v79, &data);
            if ((_DWORD)v67)
            {
              v68 = data;
              v69 = (capabilities::abs *)capabilities::radio::vendor(v67);
              shouldUseMinBasebandTransportIOReadSize = (capabilities::radio *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v69);
              if ((_DWORD)shouldUseMinBasebandTransportIOReadSize)
                v71 = 0x4000;
              else
                v71 = 0x8000;
              if (v68 >= v71)
              {
                if (!v68)
                {
                  v74 = GetOsLogContext()[1];
                  if (!os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
                    goto LABEL_205;
                  *(_WORD *)__dst = 0;
                  v64 = "file size cannot be 0";
                  v65 = v74;
                  v66 = 2;
                  goto LABEL_170;
                }
              }
              else
              {
                v72 = (capabilities::abs *)capabilities::radio::vendor(shouldUseMinBasebandTransportIOReadSize);
                if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v72))
                  v68 = 0x4000;
                else
                  v68 = 0x8000;
              }
              data = 1 << (__clz(v68) ^ 0x1F);
              std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x1E0CFC200]);
              v67 = (capabilities::radio *)prop::file::set<unsigned int>((const void **)__dst, (uint64_t)a1, (unsigned int *)&data);
              v73 = (int)v67;
              if ((__dst[23] & 0x80000000) != 0)
                operator delete(*(void **)__dst);
            }
            else
            {
              v73 = 0;
            }
            __val = capabilities::trace::defaultHistorySizeMB(v67);
            std::string::basic_string[abi:ne180100]<0>(__dst, v5);
            prop::bbtrace::get<int>(__dst, &__val);
            if ((__dst[23] & 0x80000000) != 0)
              operator delete(*(void **)__dst);
            if (v73)
            {
              std::string::basic_string[abi:ne180100]<0>(__dst, v5);
              std::to_string(&__p, __val);
              v12 = prop::bbtrace::set(__dst, &__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              goto LABEL_98;
            }
            goto LABEL_205;
          }
        }
        else
        {
          if (!strcasecmp(a1, (const char *)*MEMORY[0x1E0CFBC00]))
            goto LABEL_178;
          if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFC0A0]))
          {
            if (!strcasecmp(a1, (const char *)*MEMORY[0x1E0CFC058])
              || !strcasecmp(a1, (const char *)*MEMORY[0x1E0CFC060]))
            {
              goto LABEL_178;
            }
            if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB228]))
            {
              if (!strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB7D8]))
                goto LABEL_178;
              v59 = a1;
              if (!strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB950]))
                goto LABEL_178;
              goto LABEL_162;
            }
            goto LABEL_184;
          }
        }
        __p.__r_.__value_.__s.__data_[0] = 0;
        if (util::convert<BOOL>(&v79, (BOOL *)&__p, 0))
          goto LABEL_203;
        goto LABEL_205;
      }
    }
    else
    {
      v53 = a1;
      if (strcasecmp(a1, diag::config::kKeepScratchLogsKey[0]))
        goto LABEL_133;
    }
    __p.__r_.__value_.__s.__data_[0] = -86;
    if (util::convert<BOOL>(&v79, (BOOL *)&__p, 0))
      goto LABEL_203;
    goto LABEL_205;
  }
LABEL_31:
  LODWORD(__p.__r_.__value_.__l.__data_) = -1431655766;
  v11 = (capabilities::trace *)util::convert<int>(&v79, &__p, 0);
  v12 = (uint64_t)v11;
  if (SLODWORD(__p.__r_.__value_.__l.__data_) < 0)
    v13 = (int)v11;
  else
    v13 = 0;
  if (v13 == 1)
    LODWORD(__p.__r_.__value_.__l.__data_) = capabilities::trace::defaultHistorySizeMB(v11);
  if ((_DWORD)v12)
  {
    std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x1E0CFC200]);
    v14 = prop::file::set<int>((const void **)__dst, (uint64_t)a1, (int *)&__p);
    goto LABEL_97;
  }
LABEL_206:
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  return v12;
}

void sub_1BF436C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::coredump::set(uint64_t a1, char *a2)
{
  char *v2;
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  std::string *v9;
  const void *v10;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  std::string v19;
  _BYTE buf[24];
  const char *v21;
  __int16 v22;
  std::string *v23;
  uint64_t v24;

  v2 = a2;
  v24 = *MEMORY[0x1E0C80C00];
  memset(&v19, 170, sizeof(v19));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v19 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::coredump::get((const char *)a1, (uint64_t)&v19))
    goto LABEL_36;
LABEL_8:
  if (*(char *)(a1 + 23) >= 0)
    v4 = (const char *)a1;
  else
    v4 = *(const char **)a1;
  if (strcasecmp(v4, (const char *)*MEMORY[0x1E0CFB170]))
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED7100E0 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v6 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
        goto LABEL_36;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
      v6 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
        goto LABEL_36;
    }
    v7 = *MEMORY[0x1E0CFB090];
    if (*(char *)(a1 + 23) >= 0)
      v8 = (const char *)a1;
    else
      v8 = *(const char **)a1;
    v9 = &v19;
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v19.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "prop";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v7;
    *(_WORD *)&buf[22] = 2080;
    v21 = v8;
    v22 = 2080;
    v23 = v9;
    _os_log_error_impl(&dword_1BF335000, v6, OS_LOG_TYPE_ERROR, "%s: [coredump] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
LABEL_36:
    v16 = 0;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_37;
    return v16;
  }
  v18 = -86;
  if (!util::convert<BOOL>(&v19, (BOOL *)&v18, 0))
    goto LABEL_36;
  v10 = (const void *)*MEMORY[0x1E0CFB090];
  v11 = strlen((const char *)*MEMORY[0x1E0CFB090]);
  if (v11 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = operator new(v14 + 1);
    *(_QWORD *)&buf[8] = v12;
    *(_QWORD *)&buf[16] = v15 | 0x8000000000000000;
    *(_QWORD *)buf = v13;
    goto LABEL_29;
  }
  buf[23] = v11;
  v13 = buf;
  if (v11)
LABEL_29:
    memmove(v13, v10, v12);
  v13[v12] = 0;
  v16 = prop::file::set<BOOL>((const void **)buf, a1, (unsigned __int8 *)&v18);
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_37;
  }
  else if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_37:
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  return v16;
}

void sub_1BF437110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::ipc::set(char *a1, char *a2)
{
  char *v2;
  const char *v4;
  capabilities::ipc *v5;
  unsigned __int8 v6;
  NSObject *v7;
  uint64_t v8;
  char *v9;
  std::string *v10;
  int v11;
  int v12;
  const void *v13;
  size_t v14;
  size_t v15;
  _BYTE *v16;
  const void *v17;
  size_t v18;
  size_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  std::string v29;
  _BYTE buf[24];
  char *v31;
  __int16 v32;
  std::string *v33;
  uint64_t v34;

  v2 = a2;
  v34 = *MEMORY[0x1E0C80C00];
  memset(&v29, 170, sizeof(v29));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v29 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::ipc::get(a1, (uint64_t)&v29))
    goto LABEL_53;
LABEL_8:
  if (a1[23] < 0)
  {
    v4 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB170]))
    {
      if (strcasecmp(v4, (const char *)*MEMORY[0x1E0CFB178]))
        goto LABEL_11;
      goto LABEL_24;
    }
LABEL_32:
    LOBYTE(v28) = -86;
    if (!util::convert<BOOL>(&v29, (BOOL *)&v28, 0))
      goto LABEL_53;
    v17 = (const void *)*MEMORY[0x1E0CFC248];
    v18 = strlen((const char *)*MEMORY[0x1E0CFC248]);
    if (v18 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v19 = v18;
    if (v18 >= 0x17)
    {
      v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17)
        v21 = v18 | 7;
      v22 = v21 + 1;
      v20 = operator new(v21 + 1);
      *(_QWORD *)&buf[8] = v19;
      *(_QWORD *)&buf[16] = v22 | 0x8000000000000000;
      *(_QWORD *)buf = v20;
    }
    else
    {
      buf[23] = v18;
      v20 = buf;
      if (!v18)
        goto LABEL_41;
    }
    memmove(v20, v17, v19);
LABEL_41:
    v20[v19] = 0;
    v23 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v28);
    goto LABEL_47;
  }
  if (!strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB170]))
    goto LABEL_32;
  v4 = a1;
  if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB178]))
  {
LABEL_11:
    v5 = (capabilities::ipc *)strcasecmp(v4, "BufferCount");
    if ((_DWORD)v5 || (capabilities::ipc::supportsPCI(v5) & 1) == 0)
    {
      {
        GetOsLogContext(void)::sOsLogContext = 0;
        qword_1ED7100E0 = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
      }
      if (GetOsLogContext(void)::onceToken == -1)
      {
        v7 = qword_1ED7100E0;
        if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
          goto LABEL_53;
      }
      else
      {
        dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
        v7 = qword_1ED7100E0;
        if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
          goto LABEL_53;
      }
      v8 = *MEMORY[0x1E0CFC248];
      if (a1[23] >= 0)
        v9 = a1;
      else
        v9 = *(char **)a1;
      v10 = &v29;
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v10 = (std::string *)v29.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "prop";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v8;
      *(_WORD *)&buf[22] = 2080;
      v31 = v9;
      v32 = 2080;
      v33 = v10;
      _os_log_error_impl(&dword_1BF335000, v7, OS_LOG_TYPE_ERROR, "%s: [ipc] set: Invalid key; domain='%s' key='%s' value='%s'",
        buf,
        0x2Au);
    }
LABEL_53:
    v26 = 0;
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_54;
    return v26;
  }
LABEL_24:
  v28 = -1431655766;
  v11 = util::convert<int>(&v29, &v28, 0);
  if (v28 >= 0)
    v12 = v11;
  else
    v12 = 0;
  if (v12 != 1)
    goto LABEL_53;
  v13 = (const void *)*MEMORY[0x1E0CFC248];
  v14 = strlen((const char *)*MEMORY[0x1E0CFC248]);
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v24 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v24 = v14 | 7;
    v25 = v24 + 1;
    v16 = operator new(v24 + 1);
    *(_QWORD *)&buf[8] = v15;
    *(_QWORD *)&buf[16] = v25 | 0x8000000000000000;
    *(_QWORD *)buf = v16;
  }
  else
  {
    buf[23] = v14;
    v16 = buf;
    if (!v14)
      goto LABEL_46;
  }
  memmove(v16, v13, v15);
LABEL_46:
  v16[v15] = 0;
  v23 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v28);
LABEL_47:
  v26 = v23;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_54;
  }
  else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_54:
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  return v26;
}

void sub_1BF4375D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::bbipc::set(char *a1, char *a2)
{
  char *v2;
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  uint64_t v7;
  char *v8;
  std::string *v9;
  const void *v10;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  const void *v14;
  size_t v15;
  size_t v16;
  _BYTE *v17;
  const void *v18;
  size_t v19;
  size_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v31;
  std::string v32;
  _BYTE buf[24];
  char *v34;
  __int16 v35;
  std::string *v36;
  uint64_t v37;

  v2 = a2;
  v37 = *MEMORY[0x1E0C80C00];
  memset(&v32, 170, sizeof(v32));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v32 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::bbipc::get(a1, (uint64_t)&v32))
    goto LABEL_59;
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB170]))
    {
      v4 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB238]))
        goto LABEL_11;
LABEL_23:
      v31 = -1431655766;
      if (!util::convert<int>(&v32, &v31, 0))
        goto LABEL_59;
      v10 = (const void *)*MEMORY[0x1E0CFB240];
      v11 = strlen((const char *)*MEMORY[0x1E0CFB240]);
      if (v11 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v12 = v11;
      if (v11 >= 0x17)
      {
        v25 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17)
          v25 = v11 | 7;
        v26 = v25 + 1;
        v13 = operator new(v25 + 1);
        *(_QWORD *)&buf[8] = v12;
        *(_QWORD *)&buf[16] = v26 | 0x8000000000000000;
        *(_QWORD *)buf = v13;
      }
      else
      {
        buf[23] = v11;
        v13 = buf;
        if (!v11)
          goto LABEL_47;
      }
      memmove(v13, v10, v12);
LABEL_47:
      v13[v12] = 0;
      v24 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v31);
      goto LABEL_53;
    }
LABEL_28:
    LOBYTE(v31) = -86;
    if (!util::convert<BOOL>(&v32, (BOOL *)&v31, 0))
      goto LABEL_59;
    v14 = (const void *)*MEMORY[0x1E0CFB240];
    v15 = strlen((const char *)*MEMORY[0x1E0CFB240]);
    if (v15 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v16 = v15;
    if (v15 >= 0x17)
    {
      v22 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v22 = v15 | 7;
      v23 = v22 + 1;
      v17 = operator new(v22 + 1);
      *(_QWORD *)&buf[8] = v16;
      *(_QWORD *)&buf[16] = v23 | 0x8000000000000000;
      *(_QWORD *)buf = v17;
    }
    else
    {
      buf[23] = v15;
      v17 = buf;
      if (!v15)
        goto LABEL_42;
    }
    memmove(v17, v14, v16);
LABEL_42:
    v17[v16] = 0;
    v24 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v31);
    goto LABEL_53;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB170]))
    goto LABEL_28;
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E0CFB238]))
    goto LABEL_23;
LABEL_11:
  if (strcasecmp(v4, (const char *)*MEMORY[0x1E0CFB468]))
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED7100E0 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v6 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
        goto LABEL_59;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
      v6 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
        goto LABEL_59;
    }
    v7 = *MEMORY[0x1E0CFB240];
    if (a1[23] >= 0)
      v8 = a1;
    else
      v8 = *(char **)a1;
    v9 = &v32;
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v32.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "prop";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v7;
    *(_WORD *)&buf[22] = 2080;
    v34 = v8;
    v35 = 2080;
    v36 = v9;
    _os_log_error_impl(&dword_1BF335000, v6, OS_LOG_TYPE_ERROR, "%s: [bbipc] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
LABEL_59:
    v29 = 0;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_60;
    return v29;
  }
  v31 = -1431655766;
  if (!util::convert<unsigned int>(&v32, &v31))
    goto LABEL_59;
  v18 = (const void *)*MEMORY[0x1E0CFB240];
  v19 = strlen((const char *)*MEMORY[0x1E0CFB240]);
  if (v19 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v20 = v19;
  if (v19 >= 0x17)
  {
    v27 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v27 = v19 | 7;
    v28 = v27 + 1;
    v21 = operator new(v27 + 1);
    *(_QWORD *)&buf[8] = v20;
    *(_QWORD *)&buf[16] = v28 | 0x8000000000000000;
    *(_QWORD *)buf = v21;
  }
  else
  {
    buf[23] = v19;
    v21 = buf;
    if (!v19)
      goto LABEL_52;
  }
  memmove(v21, v18, v20);
LABEL_52:
  v21[v20] = 0;
  v24 = prop::file::set<unsigned int>((const void **)buf, (uint64_t)a1, (unsigned int *)&v31);
LABEL_53:
  v29 = v24;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_60;
  }
  else if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_60:
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  return v29;
}

void sub_1BF437B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::compression::set(char *a1, char *a2)
{
  char *v2;
  int v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  const void *v8;
  size_t v9;
  size_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  unsigned __int8 v15;
  NSObject *v16;
  uint64_t v17;
  char *v18;
  std::string *v19;
  const void *v20;
  size_t v21;
  size_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  int v27;
  std::string v28;
  _BYTE __dst[24];
  char *v30;
  __int16 v31;
  std::string *v32;
  uint64_t v33;

  v2 = a2;
  v33 = *MEMORY[0x1E0C80C00];
  memset(&v28, 170, sizeof(v28));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v28 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::compression::get(a1, (uint64_t)&v28))
    goto LABEL_44;
LABEL_8:
  v4 = a1[23];
  v5 = *(const char **)a1;
  if (v4 >= 0)
    v6 = a1;
  else
    v6 = *(const char **)a1;
  if (strcasecmp(v6, (const char *)*MEMORY[0x1E0CF11E8]))
  {
    v7 = 0;
    goto LABEL_26;
  }
  v27 = 0;
  if (util::convert<int>(&v28, &v27, 0))
  {
    v8 = (const void *)*MEMORY[0x1E0CFB248];
    v9 = strlen((const char *)*MEMORY[0x1E0CFB248]);
    if (v9 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v10 = v9;
    if (v9 >= 0x17)
    {
      v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v12 = v9 | 7;
      v13 = v12 + 1;
      v11 = operator new(v12 + 1);
      *(_QWORD *)&__dst[8] = v10;
      *(_QWORD *)&__dst[16] = v13 | 0x8000000000000000;
      *(_QWORD *)__dst = v11;
    }
    else
    {
      __dst[23] = v9;
      v11 = __dst;
      if (!v9)
      {
LABEL_23:
        v11[v10] = 0;
        v7 = prop::file::set<int>((const void **)__dst, (uint64_t)a1, &v27);
        if ((__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
        goto LABEL_25;
      }
    }
    memmove(v11, v8, v10);
    goto LABEL_23;
  }
  v7 = 0;
LABEL_25:
  LOBYTE(v4) = a1[23];
  v5 = *(const char **)a1;
LABEL_26:
  if ((v4 & 0x80u) == 0)
    v14 = a1;
  else
    v14 = v5;
  if (!strcasecmp(v14, (const char *)*MEMORY[0x1E0CF1070]))
  {
    LOBYTE(v27) = 1;
    if (util::convert<BOOL>(&v28, (BOOL *)&v27, 0))
    {
      v20 = (const void *)*MEMORY[0x1E0CFB248];
      v21 = strlen((const char *)*MEMORY[0x1E0CFB248]);
      if (v21 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v22 = v21;
      if (v21 >= 0x17)
      {
        v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v21 | 7) != 0x17)
          v24 = v21 | 7;
        v25 = v24 + 1;
        v23 = operator new(v24 + 1);
        *(_QWORD *)&__dst[8] = v22;
        *(_QWORD *)&__dst[16] = v25 | 0x8000000000000000;
        *(_QWORD *)__dst = v23;
      }
      else
      {
        __dst[23] = v21;
        v23 = __dst;
        if (!v21)
        {
LABEL_49:
          v23[v22] = 0;
          v7 = prop::file::set<BOOL>((const void **)__dst, (uint64_t)a1, (unsigned __int8 *)&v27);
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          goto LABEL_51;
        }
      }
      memmove(v23, v20, v22);
      goto LABEL_49;
    }
LABEL_44:
    v7 = 0;
    goto LABEL_51;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED7100E0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v16 = qword_1ED7100E0;
    if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
      goto LABEL_51;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
    v16 = qword_1ED7100E0;
    if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
      goto LABEL_51;
  }
  v17 = *MEMORY[0x1E0CFB248];
  if (a1[23] >= 0)
    v18 = a1;
  else
    v18 = *(char **)a1;
  v19 = &v28;
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v19 = (std::string *)v28.__r_.__value_.__r.__words[0];
  *(_DWORD *)__dst = 136315906;
  *(_QWORD *)&__dst[4] = "prop";
  *(_WORD *)&__dst[12] = 2080;
  *(_QWORD *)&__dst[14] = v17;
  *(_WORD *)&__dst[22] = 2080;
  v30 = v18;
  v31 = 2080;
  v32 = v19;
  _os_log_error_impl(&dword_1BF335000, v16, OS_LOG_TYPE_ERROR, "%s: [compression] set: Invalid key; domain='%s' key='%s' value='%s'",
    __dst,
    0x2Au);
LABEL_51:
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  return v7;
}

void sub_1BF437FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::ttr::set(char *a1, char *a2)
{
  char *v2;
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  uint64_t v7;
  char *v8;
  std::string *v9;
  int v10;
  int v11;
  const void *v12;
  size_t v13;
  size_t v14;
  _BYTE *v15;
  int v16;
  int v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v25;
  std::string v26;
  _BYTE buf[24];
  char *v28;
  __int16 v29;
  std::string *v30;
  uint64_t v31;

  v2 = a2;
  v31 = *MEMORY[0x1E0C80C00];
  memset(&v26, 170, sizeof(v26));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v26 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::ttr::get(a1, (uint64_t)&v26))
    goto LABEL_51;
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    v4 = a1;
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB028]))
      goto LABEL_10;
LABEL_21:
    v25 = -1431655766;
    v10 = util::convert<unsigned int>(&v26, &v25);
    if (v25 < 4)
      v11 = v10;
    else
      v11 = 0;
    if (v11 != 1)
      goto LABEL_51;
    v12 = (const void *)*MEMORY[0x1E0CFB198];
    v13 = strlen((const char *)*MEMORY[0x1E0CFB198]);
    if (v13 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v19 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v19 = v13 | 7;
      v20 = v19 + 1;
      v15 = operator new(v19 + 1);
      *(_QWORD *)&buf[8] = v14;
      *(_QWORD *)&buf[16] = v20 | 0x8000000000000000;
      *(_QWORD *)buf = v15;
    }
    else
    {
      buf[23] = v13;
      v15 = buf;
      if (!v13)
        goto LABEL_45;
    }
    goto LABEL_44;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB028]))
    goto LABEL_21;
LABEL_10:
  if (strcasecmp(v4, (const char *)*MEMORY[0x1E0CFBBF8]))
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED7100E0 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v6 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
        goto LABEL_51;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
      v6 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
        goto LABEL_51;
    }
    v7 = *MEMORY[0x1E0CFB198];
    if (a1[23] >= 0)
      v8 = a1;
    else
      v8 = *(char **)a1;
    v9 = &v26;
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v26.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "prop";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v7;
    *(_WORD *)&buf[22] = 2080;
    v28 = v8;
    v29 = 2080;
    v30 = v9;
    _os_log_error_impl(&dword_1BF335000, v6, OS_LOG_TYPE_ERROR, "%s: [ttr] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
LABEL_51:
    v23 = 0;
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_52;
    return v23;
  }
  v25 = -1431655766;
  v16 = util::convert<unsigned int>(&v26, &v25);
  if (v25)
    v17 = v16;
  else
    v17 = 0;
  if (v17 != 1)
    goto LABEL_51;
  v12 = (const void *)*MEMORY[0x1E0CFB198];
  v18 = strlen((const char *)*MEMORY[0x1E0CFB198]);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v14 = v18;
  if (v18 >= 0x17)
  {
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v15 = operator new(v21 + 1);
    *(_QWORD *)&buf[8] = v14;
    *(_QWORD *)&buf[16] = v22 | 0x8000000000000000;
    *(_QWORD *)buf = v15;
    goto LABEL_44;
  }
  buf[23] = v18;
  v15 = buf;
  if (v18)
LABEL_44:
    memmove(v15, v12, v14);
LABEL_45:
  v15[v14] = 0;
  v23 = prop::file::set<unsigned int>((const void **)buf, (uint64_t)a1, &v25);
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_52;
  }
  else if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_52:
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  return v23;
}

void sub_1BF438470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::logfilter::set(char *a1, char *a2)
{
  char *v2;
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  uint64_t v7;
  char *v8;
  std::string *v9;
  int v10;
  int v11;
  const void *v12;
  size_t v13;
  size_t v14;
  _BYTE *v15;
  int v16;
  int v17;
  size_t v18;
  const void *v19;
  size_t v20;
  size_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v32;
  std::string v33;
  _BYTE buf[24];
  char *v35;
  __int16 v36;
  std::string *v37;
  uint64_t v38;

  v2 = a2;
  v38 = *MEMORY[0x1E0C80C00];
  memset(&v33, 170, sizeof(v33));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v33 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::logfilter::get(a1, (uint64_t)&v33))
    goto LABEL_64;
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB570]))
    {
      v4 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB7E8]))
        goto LABEL_11;
LABEL_23:
      v32 = -1431655766;
      v10 = util::convert<int>(&v33, &v32, 0);
      if (v32 > -2)
        v11 = v10;
      else
        v11 = 0;
      if (v11 != 1)
        goto LABEL_64;
      v12 = (const void *)*MEMORY[0x1E0CFAFC0];
      v13 = strlen((const char *)*MEMORY[0x1E0CFAFC0]);
      if (v13 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v14 = v13;
      if (v13 >= 0x17)
      {
        v26 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17)
          v26 = v13 | 7;
        v27 = v26 + 1;
        v15 = operator new(v26 + 1);
        *(_QWORD *)&buf[8] = v14;
        *(_QWORD *)&buf[16] = v27 | 0x8000000000000000;
        *(_QWORD *)buf = v15;
      }
      else
      {
        buf[23] = v13;
        v15 = buf;
        if (!v13)
          goto LABEL_48;
      }
LABEL_47:
      memmove(v15, v12, v14);
LABEL_48:
      v15[v14] = 0;
      v25 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v32);
      goto LABEL_58;
    }
LABEL_31:
    v32 = -1431655766;
    v16 = util::convert<int>(&v33, &v32, 0);
    if (v32 > -2)
      v17 = v16;
    else
      v17 = 0;
    if (v17 != 1)
      goto LABEL_64;
    v12 = (const void *)*MEMORY[0x1E0CFAFC0];
    v18 = strlen((const char *)*MEMORY[0x1E0CFAFC0]);
    if (v18 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v14 = v18;
    if (v18 >= 0x17)
    {
      v23 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17)
        v23 = v18 | 7;
      v24 = v23 + 1;
      v15 = operator new(v23 + 1);
      *(_QWORD *)&buf[8] = v14;
      *(_QWORD *)&buf[16] = v24 | 0x8000000000000000;
      *(_QWORD *)buf = v15;
    }
    else
    {
      buf[23] = v18;
      v15 = buf;
      if (!v18)
        goto LABEL_48;
    }
    goto LABEL_47;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB570]))
    goto LABEL_31;
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E0CFB7E8]))
    goto LABEL_23;
LABEL_11:
  if (strcasecmp(v4, (const char *)*MEMORY[0x1E0CFC0C0]))
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED7100E0 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v6 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
        goto LABEL_64;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
      v6 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
        goto LABEL_64;
    }
    v7 = *MEMORY[0x1E0CFAFC0];
    if (a1[23] >= 0)
      v8 = a1;
    else
      v8 = *(char **)a1;
    v9 = &v33;
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v33.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "prop";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v7;
    *(_WORD *)&buf[22] = 2080;
    v35 = v8;
    v36 = 2080;
    v37 = v9;
    _os_log_error_impl(&dword_1BF335000, v6, OS_LOG_TYPE_ERROR, "%s: [logfilter] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
LABEL_64:
    v30 = 0;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_65;
    return v30;
  }
  LOBYTE(v32) = 1;
  if (!util::convert<BOOL>(&v33, (BOOL *)&v32, 0))
    goto LABEL_64;
  v19 = (const void *)*MEMORY[0x1E0CFAFC0];
  v20 = strlen((const char *)*MEMORY[0x1E0CFAFC0]);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = v20;
  if (v20 >= 0x17)
  {
    v28 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v28 = v20 | 7;
    v29 = v28 + 1;
    v22 = operator new(v28 + 1);
    *(_QWORD *)&buf[8] = v21;
    *(_QWORD *)&buf[16] = v29 | 0x8000000000000000;
    *(_QWORD *)buf = v22;
  }
  else
  {
    buf[23] = v20;
    v22 = buf;
    if (!v20)
      goto LABEL_57;
  }
  memmove(v22, v19, v21);
LABEL_57:
  v22[v21] = 0;
  v25 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v32);
LABEL_58:
  v30 = v25;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_65;
  }
  else if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_65:
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  return v30;
}

void sub_1BF438A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::systemlogs::set(char *a1, char *a2)
{
  char *v2;
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  uint64_t v7;
  char *v8;
  std::string *v9;
  int v10;
  int v11;
  const void *v12;
  size_t v13;
  size_t v14;
  _BYTE *v15;
  int IsCarrierBuild;
  unsigned int v17;
  const void *v18;
  size_t v19;
  size_t v20;
  _BYTE *v21;
  const void *v22;
  size_t v23;
  size_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v35;
  std::string v36;
  _BYTE buf[24];
  char *v38;
  __int16 v39;
  std::string *v40;
  uint64_t v41;

  v2 = a2;
  v41 = *MEMORY[0x1E0C80C00];
  memset(&v36, 170, sizeof(v36));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v36 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::systemlogs::get(a1, (uint64_t)&v36))
    goto LABEL_69;
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB028]))
    {
      v4 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB178]))
        goto LABEL_11;
LABEL_23:
      v35 = -1431655766;
      v10 = util::convert<int>(&v36, &v35, 0);
      if ((int)v35 > 0)
        v11 = v10;
      else
        v11 = 0;
      if (v11 != 1)
        goto LABEL_69;
      v12 = (const void *)*MEMORY[0x1E0CFB190];
      v13 = strlen((const char *)*MEMORY[0x1E0CFB190]);
      if (v13 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v14 = v13;
      if (v13 >= 0x17)
      {
        v26 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17)
          v26 = v13 | 7;
        v27 = v26 + 1;
        v15 = operator new(v26 + 1);
        *(_QWORD *)&buf[8] = v14;
        *(_QWORD *)&buf[16] = v27 | 0x8000000000000000;
        *(_QWORD *)buf = v15;
      }
      else
      {
        buf[23] = v13;
        v15 = buf;
        if (!v13)
          goto LABEL_52;
      }
      memmove(v15, v12, v14);
LABEL_52:
      v15[v14] = 0;
      v28 = prop::file::set<int>((const void **)buf, (uint64_t)a1, (int *)&v35);
      goto LABEL_63;
    }
LABEL_31:
    v35 = -1431655766;
    if ((TelephonyUtilIsInternalBuild() & 1) != 0)
      IsCarrierBuild = 1;
    else
      IsCarrierBuild = TelephonyUtilIsCarrierBuild();
    if (!util::convert<unsigned int>(&v36, &v35))
      goto LABEL_69;
    v17 = IsCarrierBuild ? 3 : 2;
    if (v35 >= v17)
      goto LABEL_69;
    v18 = (const void *)*MEMORY[0x1E0CFB190];
    v19 = strlen((const char *)*MEMORY[0x1E0CFB190]);
    if (v19 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v20 = v19;
    if (v19 >= 0x17)
    {
      v29 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v19 | 7) != 0x17)
        v29 = v19 | 7;
      v30 = v29 + 1;
      v21 = operator new(v29 + 1);
      *(_QWORD *)&buf[8] = v20;
      *(_QWORD *)&buf[16] = v30 | 0x8000000000000000;
      *(_QWORD *)buf = v21;
    }
    else
    {
      buf[23] = v19;
      v21 = buf;
      if (!v19)
        goto LABEL_57;
    }
    memmove(v21, v18, v20);
LABEL_57:
    v21[v20] = 0;
    v28 = prop::file::set<unsigned int>((const void **)buf, (uint64_t)a1, &v35);
    goto LABEL_63;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB028]))
    goto LABEL_31;
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E0CFB178]))
    goto LABEL_23;
LABEL_11:
  if (strcasecmp(v4, (const char *)*MEMORY[0x1E0CFBA40]))
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED7100E0 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v6 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
        goto LABEL_69;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
      v6 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
        goto LABEL_69;
    }
    v7 = *MEMORY[0x1E0CFB190];
    if (a1[23] >= 0)
      v8 = a1;
    else
      v8 = *(char **)a1;
    v9 = &v36;
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v36.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "prop";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v7;
    *(_WORD *)&buf[22] = 2080;
    v38 = v8;
    v39 = 2080;
    v40 = v9;
    _os_log_error_impl(&dword_1BF335000, v6, OS_LOG_TYPE_ERROR, "%s: [systemlogs] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
LABEL_69:
    v33 = 0;
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_70;
    return v33;
  }
  LOBYTE(v35) = -86;
  if (!util::convert<BOOL>(&v36, (BOOL *)&v35, 0))
    goto LABEL_69;
  v22 = (const void *)*MEMORY[0x1E0CFB190];
  v23 = strlen((const char *)*MEMORY[0x1E0CFB190]);
  if (v23 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v24 = v23;
  if (v23 >= 0x17)
  {
    v31 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v31 = v23 | 7;
    v32 = v31 + 1;
    v25 = operator new(v31 + 1);
    *(_QWORD *)&buf[8] = v24;
    *(_QWORD *)&buf[16] = v32 | 0x8000000000000000;
    *(_QWORD *)buf = v25;
  }
  else
  {
    buf[23] = v23;
    v25 = buf;
    if (!v23)
      goto LABEL_62;
  }
  memmove(v25, v22, v24);
LABEL_62:
  v25[v24] = 0;
  v28 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v35);
LABEL_63:
  v33 = v28;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_70;
  }
  else if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_70:
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  return v33;
}

void sub_1BF438FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(exception_object);
}

uint64_t prop::profile::set(char *a1, char *a2)
{
  char *v2;
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  uint64_t v7;
  char *v8;
  std::string *v9;
  const void *v10;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  const void *v14;
  size_t v15;
  size_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v25;
  std::string v26;
  _BYTE buf[24];
  char *v28;
  __int16 v29;
  std::string *v30;
  uint64_t v31;

  v2 = a2;
  v31 = *MEMORY[0x1E0C80C00];
  memset(&v26, 170, sizeof(v26));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v26 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::profile::get(a1, (uint64_t)&v26))
    goto LABEL_47;
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    v4 = a1;
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFAF68]))
      goto LABEL_10;
LABEL_21:
    LOBYTE(v25) = -86;
    if (!util::convert<BOOL>(&v26, (BOOL *)&v25, 0))
      goto LABEL_47;
    v10 = (const void *)*MEMORY[0x1E0CFB048];
    v11 = strlen((const char *)*MEMORY[0x1E0CFB048]);
    if (v11 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v12 = v11;
    if (v11 >= 0x17)
    {
      v18 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17)
        v18 = v11 | 7;
      v19 = v18 + 1;
      v13 = operator new(v18 + 1);
      *(_QWORD *)&buf[8] = v12;
      *(_QWORD *)&buf[16] = v19 | 0x8000000000000000;
      *(_QWORD *)buf = v13;
    }
    else
    {
      buf[23] = v11;
      v13 = buf;
      if (!v11)
        goto LABEL_35;
    }
    memmove(v13, v10, v12);
LABEL_35:
    v13[v12] = 0;
    v20 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v25);
    goto LABEL_41;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFAF68]))
    goto LABEL_21;
LABEL_10:
  if (strcasecmp(v4, (const char *)*MEMORY[0x1E0CFC078]))
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED7100E0 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v6 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
        goto LABEL_47;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
      v6 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
        goto LABEL_47;
    }
    v7 = *MEMORY[0x1E0CFB048];
    if (a1[23] >= 0)
      v8 = a1;
    else
      v8 = *(char **)a1;
    v9 = &v26;
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v26.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "prop";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v7;
    *(_WORD *)&buf[22] = 2080;
    v28 = v8;
    v29 = 2080;
    v30 = v9;
    _os_log_error_impl(&dword_1BF335000, v6, OS_LOG_TYPE_ERROR, "%s: [profile] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
LABEL_47:
    v23 = 0;
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_48;
    return v23;
  }
  v25 = -1431655766;
  if (!util::convert<int>(&v26, &v25, 0))
    goto LABEL_47;
  v14 = (const void *)*MEMORY[0x1E0CFB048];
  v15 = strlen((const char *)*MEMORY[0x1E0CFB048]);
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v16 = v15;
  if (v15 >= 0x17)
  {
    v21 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v21 = v15 | 7;
    v22 = v21 + 1;
    v17 = operator new(v21 + 1);
    *(_QWORD *)&buf[8] = v16;
    *(_QWORD *)&buf[16] = v22 | 0x8000000000000000;
    *(_QWORD *)buf = v17;
  }
  else
  {
    buf[23] = v15;
    v17 = buf;
    if (!v15)
      goto LABEL_40;
  }
  memmove(v17, v14, v16);
LABEL_40:
  v17[v16] = 0;
  v20 = prop::file::set<std::string>((const void **)buf, (uint64_t)a1, (uint64_t)&v26);
LABEL_41:
  v23 = v20;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_48;
  }
  else if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_48:
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  return v23;
}

void sub_1BF439454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::tailspin::set(uint64_t a1, char *a2)
{
  char *v2;
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  std::string *v9;
  const void *v10;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  std::string v19;
  _BYTE buf[24];
  const char *v21;
  __int16 v22;
  std::string *v23;
  uint64_t v24;

  v2 = a2;
  v24 = *MEMORY[0x1E0C80C00];
  memset(&v19, 170, sizeof(v19));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v19 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::tailspin::get((const char *)a1, (uint64_t)&v19))
    goto LABEL_36;
LABEL_8:
  if (*(char *)(a1 + 23) >= 0)
    v4 = (const char *)a1;
  else
    v4 = *(const char **)a1;
  if (strcasecmp(v4, (const char *)*MEMORY[0x1E0CFAF68]))
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED7100E0 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v6 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
        goto LABEL_36;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
      v6 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
        goto LABEL_36;
    }
    v7 = *MEMORY[0x1E0CFB0A0];
    if (*(char *)(a1 + 23) >= 0)
      v8 = (const char *)a1;
    else
      v8 = *(const char **)a1;
    v9 = &v19;
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v19.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "prop";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v7;
    *(_WORD *)&buf[22] = 2080;
    v21 = v8;
    v22 = 2080;
    v23 = v9;
    _os_log_error_impl(&dword_1BF335000, v6, OS_LOG_TYPE_ERROR, "%s: [tailspin] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
LABEL_36:
    v16 = 0;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_37;
    return v16;
  }
  v18 = -86;
  if (!util::convert<BOOL>(&v19, (BOOL *)&v18, 0))
    goto LABEL_36;
  v10 = (const void *)*MEMORY[0x1E0CFB0A0];
  v11 = strlen((const char *)*MEMORY[0x1E0CFB0A0]);
  if (v11 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = operator new(v14 + 1);
    *(_QWORD *)&buf[8] = v12;
    *(_QWORD *)&buf[16] = v15 | 0x8000000000000000;
    *(_QWORD *)buf = v13;
    goto LABEL_29;
  }
  buf[23] = v11;
  v13 = buf;
  if (v11)
LABEL_29:
    memmove(v13, v10, v12);
  v13[v12] = 0;
  v16 = prop::file::set<BOOL>((const void **)buf, a1, (unsigned __int8 *)&v18);
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_37;
  }
  else if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_37:
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  return v16;
}

void sub_1BF4397EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::tracesettings::set(char *a1, uint64_t a2)
{
  const char *v3;
  unsigned __int8 v4;
  NSObject *v5;
  uint64_t v6;
  char *v7;
  std::string *v8;
  const void *v9;
  size_t v10;
  size_t v11;
  _BYTE *v12;
  const void *v13;
  size_t v14;
  size_t v15;
  _BYTE *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  std::string v31;
  _BYTE buf[24];
  char *v33;
  __int16 v34;
  std::string *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  memset(&v31, 170, sizeof(v31));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v31 = *(std::string *)a2;
  if (a1[23] < 0)
  {
    v3 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB938]))
    {
      if (strcasecmp(v3, (const char *)*MEMORY[0x1E0CFBA30]))
      {
        if (strcasecmp(v3, (const char *)*MEMORY[0x1E0CFB470]))
        {
LABEL_8:
          if (strcasecmp(v3, (const char *)*MEMORY[0x1E0CFB7D0]))
          {
            {
              GetOsLogContext(void)::sOsLogContext = 0;
              qword_1ED7100E0 = 0;
              __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
            }
            if (GetOsLogContext(void)::onceToken == -1)
            {
              v5 = qword_1ED7100E0;
              if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
                goto LABEL_63;
            }
            else
            {
              dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
              v5 = qword_1ED7100E0;
              if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
                goto LABEL_63;
            }
            v6 = *MEMORY[0x1E0CFB098];
            if (a1[23] >= 0)
              v7 = a1;
            else
              v7 = *(char **)a1;
            v8 = &v31;
            if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v8 = (std::string *)v31.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "prop";
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v6;
            *(_WORD *)&buf[22] = 2080;
            v33 = v7;
            v34 = 2080;
            v35 = v8;
            _os_log_error_impl(&dword_1BF335000, v5, OS_LOG_TYPE_ERROR, "%s: [tracesettings] set: Invalid key; domain='%s' key='%s' value='%s'",
              buf,
              0x2Au);
LABEL_63:
            v28 = 0;
            if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_64;
            return v28;
          }
          v30 = -1431655766;
          if (!util::convert<int>(&v31, &v30, 0))
            goto LABEL_63;
          v13 = (const void *)*MEMORY[0x1E0CFB098];
          v23 = strlen((const char *)*MEMORY[0x1E0CFB098]);
          if (v23 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v15 = v23;
          if (v23 >= 0x17)
          {
            v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v23 | 7) != 0x17)
              v26 = v23 | 7;
            v27 = v26 + 1;
            v16 = operator new(v26 + 1);
            *(_QWORD *)&buf[8] = v15;
            *(_QWORD *)&buf[16] = v27 | 0x8000000000000000;
            *(_QWORD *)buf = v16;
          }
          else
          {
            buf[23] = v23;
            v16 = buf;
            if (!v23)
              goto LABEL_56;
          }
          goto LABEL_55;
        }
LABEL_21:
        v9 = (const void *)*MEMORY[0x1E0CFB098];
        v10 = strlen((const char *)*MEMORY[0x1E0CFB098]);
        if (v10 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v11 = v10;
        if (v10 >= 0x17)
        {
          v24 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v10 | 7) != 0x17)
            v24 = v10 | 7;
          v25 = v24 + 1;
          v12 = operator new(v24 + 1);
          *(_QWORD *)&buf[8] = v11;
          *(_QWORD *)&buf[16] = v25 | 0x8000000000000000;
          *(_QWORD *)buf = v12;
        }
        else
        {
          buf[23] = v10;
          v12 = buf;
          if (!v10)
            goto LABEL_38;
        }
LABEL_37:
        memmove(v12, v9, v11);
LABEL_38:
        v12[v11] = 0;
        v20 = prop::file::set<std::string>((const void **)buf, (uint64_t)a1, (uint64_t)&v31);
        goto LABEL_57;
      }
LABEL_30:
      v9 = (const void *)*MEMORY[0x1E0CFB098];
      v17 = strlen((const char *)*MEMORY[0x1E0CFB098]);
      if (v17 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v11 = v17;
      if (v17 >= 0x17)
      {
        v18 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v17 | 7) != 0x17)
          v18 = v17 | 7;
        v19 = v18 + 1;
        v12 = operator new(v18 + 1);
        *(_QWORD *)&buf[8] = v11;
        *(_QWORD *)&buf[16] = v19 | 0x8000000000000000;
        *(_QWORD *)buf = v12;
      }
      else
      {
        buf[23] = v17;
        v12 = buf;
        if (!v17)
          goto LABEL_38;
      }
      goto LABEL_37;
    }
  }
  else if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB938]))
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFBA30]))
    {
      v3 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB470]))
        goto LABEL_8;
      goto LABEL_21;
    }
    goto LABEL_30;
  }
  v30 = -1431655766;
  if (!util::convert<int>(&v31, &v30, 0))
    goto LABEL_63;
  v13 = (const void *)*MEMORY[0x1E0CFB098];
  v14 = strlen((const char *)*MEMORY[0x1E0CFB098]);
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v21 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v21 = v14 | 7;
    v22 = v21 + 1;
    v16 = operator new(v21 + 1);
    *(_QWORD *)&buf[8] = v15;
    *(_QWORD *)&buf[16] = v22 | 0x8000000000000000;
    *(_QWORD *)buf = v16;
  }
  else
  {
    buf[23] = v14;
    v16 = buf;
    if (!v14)
      goto LABEL_56;
  }
LABEL_55:
  memmove(v16, v13, v15);
LABEL_56:
  v16[v15] = 0;
  v20 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v30);
LABEL_57:
  v28 = v20;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_64;
  }
  else if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_64:
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  return v28;
}

void sub_1BF439DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::get_from_file(char *a1, char *a2, uint64_t a3)
{
  _BOOL8 v6;
  std::string v8;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v6 = defaults::get(a1, a2, &__p);
  if (v6)
  {
    prop::file::get<std::string>((const void **)a1, (uint64_t)a2, (uint64_t)&__p, &v8);
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(std::string *)a3 = v8;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v6;
}

void sub_1BF439ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t prop::file::set<BOOL>(const void **a1, uint64_t a2, unsigned __int8 *a3)
{
  int v3;
  size_t v4;
  unint64_t v5;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  void **v18;
  void **v19;
  __int128 v20;
  std::string::size_type v21;
  _QWORD *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::string v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *__p[4];
  std::string __dst;

  memset(__p, 170, 24);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = (size_t)a1[1];
  v5 = v4 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4)
      goto LABEL_15;
  }
  if (v3 >= 0)
    v12 = a1;
  else
    v12 = *a1;
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  v13 = *(char *)(a2 + 23);
  if (v13 >= 0)
    v14 = (const std::string::value_type *)a2;
  else
    v14 = *(const std::string::value_type **)a2;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  v16 = std::string::append(&__dst, v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  __p[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p[2]) >= 0)
    v18 = (void **)((char *)__p + HIBYTE(__p[2]));
  else
    v18 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  if (SHIBYTE(__p[2]) >= 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  for (; v19 != v18; v19 = (void **)((char *)v19 + 1))
    *(_BYTE *)v19 = __tolower(*(char *)v19);
  std::to_string(&__dst, *a3);
  v20 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  v21 = __dst.__r_.__value_.__r.__words[2];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (qword_1ED70FAF0)
  {
LABEL_32:
    LODWORD(v23) = qword_1ED70FAF0;
    v22 = off_1ED70FAF8;
    v36 = qword_1ED70FAF0;
    v37 = (std::__shared_weak_count *)off_1ED70FAF8;
    if (!off_1ED70FAF8)
      goto LABEL_42;
    goto LABEL_40;
  }
  v23 = operator new(0x18uLL);
  MEMORY[0x1C3B893B4](v23, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
  v22 = operator new(0x20uLL);
  *v22 = &unk_1E78FFBE0;
  v22[1] = 0;
  v22[2] = 0;
  v22[3] = v23;
  v24 = (std::__shared_weak_count *)off_1ED70FAF8;
  qword_1ED70FAF0 = (uint64_t)v23;
  off_1ED70FAF8 = v22;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    goto LABEL_32;
  }
  v36 = (uint64_t)v23;
  v37 = (std::__shared_weak_count *)v22;
LABEL_40:
  v27 = v22 + 1;
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
LABEL_42:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if ((v21 & 0x8000000000000000) == 0)
  {
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v20;
    v35.__r_.__value_.__r.__words[2] = v21;
LABEL_45:
    __dst = v35;
    goto LABEL_46;
  }
  std::string::__init_copy_ctor_external(&v35, (const std::string::value_type *)v20, *((std::string::size_type *)&v20 + 1));
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_45;
  std::string::__init_copy_ctor_external(&__dst, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
LABEL_46:
  if (SHIBYTE(__p[2]) >= 0)
    v29 = (char *)__p;
  else
    v29 = (char *)__p[0];
  v30 = ctu::cf::plist_adapter::set<std::string>((int)v23, (uint64_t)&__dst, v29);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_51;
LABEL_54:
    operator delete(v35.__r_.__value_.__l.__data_);
    v31 = v37;
    if (!v37)
      goto LABEL_58;
    goto LABEL_55;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_54;
LABEL_51:
  v31 = v37;
  if (!v37)
    goto LABEL_58;
LABEL_55:
  v32 = (unint64_t *)&v31->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (v33)
  {
LABEL_58:
    if ((v21 & 0x8000000000000000) == 0)
      goto LABEL_59;
LABEL_62:
    operator delete((void *)v20);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return v30;
LABEL_63:
    operator delete(__p[0]);
    return v30;
  }
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  if ((v21 & 0x8000000000000000) != 0)
    goto LABEL_62;
LABEL_59:
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_63;
  return v30;
}

void sub_1BF43A30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  uint64_t v31;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (v31 < 0)
    operator delete(v30);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t prop::file::set<int>(const void **a1, uint64_t a2, int *a3)
{
  int v3;
  size_t v4;
  unint64_t v5;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  void **v18;
  void **v19;
  __int128 v20;
  std::string::size_type v21;
  _QWORD *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::string v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *__p[4];
  std::string __dst;

  memset(__p, 170, 24);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = (size_t)a1[1];
  v5 = v4 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4)
      goto LABEL_15;
  }
  if (v3 >= 0)
    v12 = a1;
  else
    v12 = *a1;
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  v13 = *(char *)(a2 + 23);
  if (v13 >= 0)
    v14 = (const std::string::value_type *)a2;
  else
    v14 = *(const std::string::value_type **)a2;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  v16 = std::string::append(&__dst, v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  __p[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p[2]) >= 0)
    v18 = (void **)((char *)__p + HIBYTE(__p[2]));
  else
    v18 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  if (SHIBYTE(__p[2]) >= 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  for (; v19 != v18; v19 = (void **)((char *)v19 + 1))
    *(_BYTE *)v19 = __tolower(*(char *)v19);
  std::to_string(&__dst, *a3);
  v20 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  v21 = __dst.__r_.__value_.__r.__words[2];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (qword_1ED70FAF0)
  {
LABEL_32:
    LODWORD(v23) = qword_1ED70FAF0;
    v22 = off_1ED70FAF8;
    v36 = qword_1ED70FAF0;
    v37 = (std::__shared_weak_count *)off_1ED70FAF8;
    if (!off_1ED70FAF8)
      goto LABEL_42;
    goto LABEL_40;
  }
  v23 = operator new(0x18uLL);
  MEMORY[0x1C3B893B4](v23, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
  v22 = operator new(0x20uLL);
  *v22 = &unk_1E78FFBE0;
  v22[1] = 0;
  v22[2] = 0;
  v22[3] = v23;
  v24 = (std::__shared_weak_count *)off_1ED70FAF8;
  qword_1ED70FAF0 = (uint64_t)v23;
  off_1ED70FAF8 = v22;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    goto LABEL_32;
  }
  v36 = (uint64_t)v23;
  v37 = (std::__shared_weak_count *)v22;
LABEL_40:
  v27 = v22 + 1;
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
LABEL_42:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if ((v21 & 0x8000000000000000) == 0)
  {
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v20;
    v35.__r_.__value_.__r.__words[2] = v21;
LABEL_45:
    __dst = v35;
    goto LABEL_46;
  }
  std::string::__init_copy_ctor_external(&v35, (const std::string::value_type *)v20, *((std::string::size_type *)&v20 + 1));
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_45;
  std::string::__init_copy_ctor_external(&__dst, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
LABEL_46:
  if (SHIBYTE(__p[2]) >= 0)
    v29 = (char *)__p;
  else
    v29 = (char *)__p[0];
  v30 = ctu::cf::plist_adapter::set<std::string>((int)v23, (uint64_t)&__dst, v29);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_51;
LABEL_54:
    operator delete(v35.__r_.__value_.__l.__data_);
    v31 = v37;
    if (!v37)
      goto LABEL_58;
    goto LABEL_55;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_54;
LABEL_51:
  v31 = v37;
  if (!v37)
    goto LABEL_58;
LABEL_55:
  v32 = (unint64_t *)&v31->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (v33)
  {
LABEL_58:
    if ((v21 & 0x8000000000000000) == 0)
      goto LABEL_59;
LABEL_62:
    operator delete((void *)v20);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return v30;
LABEL_63:
    operator delete(__p[0]);
    return v30;
  }
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  if ((v21 & 0x8000000000000000) != 0)
    goto LABEL_62;
LABEL_59:
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_63;
  return v30;
}

void sub_1BF43A750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  uint64_t v31;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (v31 < 0)
    operator delete(v30);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t prop::file::set<std::string>(const void **a1, uint64_t a2, uint64_t a3)
{
  int v3;
  size_t v4;
  unint64_t v5;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  void **v18;
  void **v19;
  _QWORD *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::string __p;
  uint64_t v34;
  std::__shared_weak_count *v35;
  void *v36[4];
  std::string __dst;

  memset(v36, 170, 24);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = (size_t)a1[1];
  v5 = v4 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4)
      goto LABEL_15;
  }
  if (v3 >= 0)
    v12 = a1;
  else
    v12 = *a1;
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  v13 = *(char *)(a2 + 23);
  if (v13 >= 0)
    v14 = (const std::string::value_type *)a2;
  else
    v14 = *(const std::string::value_type **)a2;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  v16 = std::string::append(&__dst, v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v36[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)v36 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36[2]) >= 0)
    v18 = (void **)((char *)v36 + HIBYTE(v36[2]));
  else
    v18 = (void **)((char *)v36[0] + (unint64_t)v36[1]);
  if (SHIBYTE(v36[2]) >= 0)
    v19 = v36;
  else
    v19 = (void **)v36[0];
  for (; v19 != v18; v19 = (void **)((char *)v19 + 1))
    *(_BYTE *)v19 = __tolower(*(char *)v19);
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1ED70FAF0)
  {
    v21 = operator new(0x18uLL);
    MEMORY[0x1C3B893B4](v21, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
    v20 = operator new(0x20uLL);
    *v20 = &unk_1E78FFBE0;
    v20[1] = 0;
    v20[2] = 0;
    v20[3] = v21;
    v22 = (std::__shared_weak_count *)off_1ED70FAF8;
    qword_1ED70FAF0 = (uint64_t)v21;
    off_1ED70FAF8 = v20;
    if (!v22)
    {
      v34 = (uint64_t)v21;
      v35 = (std::__shared_weak_count *)v20;
LABEL_40:
      v25 = v20 + 1;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      goto LABEL_42;
    }
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  LODWORD(v21) = qword_1ED70FAF0;
  v20 = off_1ED70FAF8;
  v34 = qword_1ED70FAF0;
  v35 = (std::__shared_weak_count *)off_1ED70FAF8;
  if (off_1ED70FAF8)
    goto LABEL_40;
LABEL_42:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    __dst = __p;
  if (SHIBYTE(v36[2]) >= 0)
    v27 = (char *)v36;
  else
    v27 = (char *)v36[0];
  v28 = ctu::cf::plist_adapter::set<std::string>((int)v21, (uint64_t)&__dst, v27);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_53:
      v29 = v35;
      if (!v35)
        goto LABEL_60;
      goto LABEL_57;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_53;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  v29 = v35;
  if (!v35)
    goto LABEL_60;
LABEL_57:
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    if ((SHIBYTE(v36[2]) & 0x80000000) == 0)
      return v28;
    goto LABEL_61;
  }
LABEL_60:
  if (SHIBYTE(v36[2]) < 0)
LABEL_61:
    operator delete(v36[0]);
  return v28;
}

void sub_1BF43AB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t prop::file::set<unsigned int>(const void **a1, uint64_t a2, unsigned int *a3)
{
  int v3;
  size_t v4;
  unint64_t v5;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  void **v18;
  void **v19;
  __int128 v20;
  std::string::size_type v21;
  _QWORD *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::string v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *__p[4];
  std::string __dst;

  memset(__p, 170, 24);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = (size_t)a1[1];
  v5 = v4 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4)
      goto LABEL_15;
  }
  if (v3 >= 0)
    v12 = a1;
  else
    v12 = *a1;
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  v13 = *(char *)(a2 + 23);
  if (v13 >= 0)
    v14 = (const std::string::value_type *)a2;
  else
    v14 = *(const std::string::value_type **)a2;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  v16 = std::string::append(&__dst, v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  __p[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p[2]) >= 0)
    v18 = (void **)((char *)__p + HIBYTE(__p[2]));
  else
    v18 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  if (SHIBYTE(__p[2]) >= 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  for (; v19 != v18; v19 = (void **)((char *)v19 + 1))
    *(_BYTE *)v19 = __tolower(*(char *)v19);
  std::to_string(&__dst, *a3);
  v20 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  v21 = __dst.__r_.__value_.__r.__words[2];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (qword_1ED70FAF0)
  {
LABEL_32:
    LODWORD(v23) = qword_1ED70FAF0;
    v22 = off_1ED70FAF8;
    v36 = qword_1ED70FAF0;
    v37 = (std::__shared_weak_count *)off_1ED70FAF8;
    if (!off_1ED70FAF8)
      goto LABEL_42;
    goto LABEL_40;
  }
  v23 = operator new(0x18uLL);
  MEMORY[0x1C3B893B4](v23, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
  v22 = operator new(0x20uLL);
  *v22 = &unk_1E78FFBE0;
  v22[1] = 0;
  v22[2] = 0;
  v22[3] = v23;
  v24 = (std::__shared_weak_count *)off_1ED70FAF8;
  qword_1ED70FAF0 = (uint64_t)v23;
  off_1ED70FAF8 = v22;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    goto LABEL_32;
  }
  v36 = (uint64_t)v23;
  v37 = (std::__shared_weak_count *)v22;
LABEL_40:
  v27 = v22 + 1;
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
LABEL_42:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if ((v21 & 0x8000000000000000) == 0)
  {
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v20;
    v35.__r_.__value_.__r.__words[2] = v21;
LABEL_45:
    __dst = v35;
    goto LABEL_46;
  }
  std::string::__init_copy_ctor_external(&v35, (const std::string::value_type *)v20, *((std::string::size_type *)&v20 + 1));
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_45;
  std::string::__init_copy_ctor_external(&__dst, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
LABEL_46:
  if (SHIBYTE(__p[2]) >= 0)
    v29 = (char *)__p;
  else
    v29 = (char *)__p[0];
  v30 = ctu::cf::plist_adapter::set<std::string>((int)v23, (uint64_t)&__dst, v29);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_51;
LABEL_54:
    operator delete(v35.__r_.__value_.__l.__data_);
    v31 = v37;
    if (!v37)
      goto LABEL_58;
    goto LABEL_55;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_54;
LABEL_51:
  v31 = v37;
  if (!v37)
    goto LABEL_58;
LABEL_55:
  v32 = (unint64_t *)&v31->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (v33)
  {
LABEL_58:
    if ((v21 & 0x8000000000000000) == 0)
      goto LABEL_59;
LABEL_62:
    operator delete((void *)v20);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return v30;
LABEL_63:
    operator delete(__p[0]);
    return v30;
  }
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  if ((v21 & 0x8000000000000000) != 0)
    goto LABEL_62;
LABEL_59:
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_63;
  return v30;
}

void sub_1BF43AF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  uint64_t v31;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (v31 < 0)
    operator delete(v30);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t util::convert<unsigned int>(const std::string *a1, _DWORD *a2)
{
  unint64_t v4;
  const char *v5;
  std::string::size_type size;
  size_t __idx;

  if ((SHIBYTE(a1->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    LODWORD(v4) = strcasecmp((const char *)a1, "false");
    if (!(_DWORD)v4)
      goto LABEL_29;
    LODWORD(v4) = strcasecmp((const char *)a1, "off");
    if (!(_DWORD)v4)
      goto LABEL_29;
    LODWORD(v4) = strcasecmp((const char *)a1, "no");
    if (!(_DWORD)v4)
      goto LABEL_29;
    if (strcasecmp((const char *)a1, "true")
      && strcasecmp((const char *)a1, "on")
      && strcasecmp((const char *)a1, "yes")
      && strcasecmp((const char *)a1, "full")
      && strcasecmp((const char *)a1, "streaming"))
    {
      v5 = (const char *)a1;
      if (!strcasecmp((const char *)a1, "lite"))
        goto LABEL_30;
      goto LABEL_21;
    }
LABEL_28:
    LODWORD(v4) = 1;
    goto LABEL_29;
  }
  v5 = (const char *)a1->__r_.__value_.__r.__words[0];
  LODWORD(v4) = strcasecmp(a1->__r_.__value_.__l.__data_, "false");
  if (!(_DWORD)v4)
    goto LABEL_29;
  LODWORD(v4) = strcasecmp(v5, "off");
  if (!(_DWORD)v4)
    goto LABEL_29;
  LODWORD(v4) = strcasecmp(v5, "no");
  if (!(_DWORD)v4)
    goto LABEL_29;
  if (!strcasecmp(v5, "true")
    || !strcasecmp(v5, "on")
    || !strcasecmp(v5, "yes")
    || !strcasecmp(v5, "full")
    || !strcasecmp(v5, "streaming"))
  {
    goto LABEL_28;
  }
  if (!strcasecmp(v5, "lite"))
  {
LABEL_30:
    LODWORD(v4) = 2;
    goto LABEL_29;
  }
LABEL_21:
  if (!strcasecmp(v5, "background"))
    goto LABEL_30;
  __idx = 0xAAAAAAAAAAAAAAAALL;
  v4 = std::stol(a1, &__idx, 0);
  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  if (__idx != size || (v4 & 0x8000000000000000) != 0 || HIDWORD(v4))
    return 0;
LABEL_29:
  *a2 = v4;
  return 1;
}

uint64_t sub_1BF43B29C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  return 0;
}

void prop::bbtrace::get<int>(char *a1, _DWORD *a2)
{
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get(a1, (uint64_t)&__p))
    util::convert<int>(&__p, a2, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF43B324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::tracesettings::enabled(prop::tracesettings *this, const char *a2)
{
  size_t v3;
  size_t v4;
  void **v5;
  size_t v6;
  size_t v7;
  void **p_dst;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  size_t v12;
  size_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  size_t v20;
  size_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  void *v28;
  size_t v29;
  unint64_t v30;
  void **__dst;
  size_t v32;
  unint64_t v33;
  BOOL v34;
  int v35;
  std::string __p;

  v34 = 0;
  if ((prop::tracesettings *)*MEMORY[0x1E0CFB190] == this)
  {
    v6 = strlen((const char *)this);
    if (v6 > 0x7FFFFFFFFFFFFFF7)
LABEL_59:
      std::string::__throw_length_error[abi:ne180100]();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v17 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v17 = v6 | 7;
      v18 = v17 + 1;
      p_dst = (void **)operator new(v17 + 1);
      v32 = v7;
      v33 = v18 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v33) = v6;
      p_dst = (void **)&__dst;
      if (!v6)
      {
LABEL_35:
        *((_BYTE *)p_dst + v7) = 0;
        v19 = (const void *)*MEMORY[0x1E0CFB028];
        v20 = strlen((const char *)*MEMORY[0x1E0CFB028]);
        if (v20 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v21 = v20;
        if (v20 >= 0x17)
        {
          v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v20 | 7) != 0x17)
            v23 = v20 | 7;
          v24 = v23 + 1;
          v22 = operator new(v23 + 1);
          v29 = v21;
          v30 = v24 | 0x8000000000000000;
          v28 = v22;
        }
        else
        {
          HIBYTE(v30) = v20;
          v22 = &v28;
          if (!v20)
          {
LABEL_43:
            *((_BYTE *)v22 + v21) = 0;
            memset(&__p, 0, sizeof(__p));
            v25 = -1431655766;
            if (prop::get((char *)&__dst, (char *)&v28, (uint64_t)&__p))
            {
              v35 = -1431655766;
              v26 = util::convert<int>(&__p, &v35, 0);
              if (v26)
                v25 = v35;
              else
                v25 = -1431655766;
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_51:
                if (SHIBYTE(v30) < 0)
                {
                  operator delete(v28);
                  if ((SHIBYTE(v33) & 0x80000000) == 0)
                  {
LABEL_53:
                    if (!v26)
                      return v34;
                    return v25 != 0;
                  }
                }
                else if ((SHIBYTE(v33) & 0x80000000) == 0)
                {
                  goto LABEL_53;
                }
                operator delete(__dst);
                if (!v26)
                  return v34;
                return v25 != 0;
              }
            }
            else
            {
              v26 = 0;
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_51;
            }
            operator delete(__p.__r_.__value_.__l.__data_);
            goto LABEL_51;
          }
        }
        memmove(v22, v19, v21);
        goto LABEL_43;
      }
    }
    memcpy(p_dst, this, v7);
    goto LABEL_35;
  }
  v3 = strlen((const char *)this);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_59;
  v4 = v3;
  if (v3 >= 0x17)
  {
    v9 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v9 = v3 | 7;
    v10 = v9 + 1;
    v5 = (void **)operator new(v9 + 1);
    v32 = v4;
    v33 = v10 | 0x8000000000000000;
    __dst = v5;
    goto LABEL_13;
  }
  HIBYTE(v33) = v3;
  v5 = (void **)&__dst;
  if (v3)
LABEL_13:
    memcpy(v5, this, v4);
  *((_BYTE *)v5 + v4) = 0;
  v11 = (const void *)*MEMORY[0x1E0CFB170];
  v12 = strlen((const char *)*MEMORY[0x1E0CFB170]);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = v12;
  if (v12 >= 0x17)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v15 = v12 | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    v29 = v13;
    v30 = v16 | 0x8000000000000000;
    v28 = v14;
    goto LABEL_21;
  }
  HIBYTE(v30) = v12;
  v14 = &v28;
  if (v12)
LABEL_21:
    memmove(v14, v11, v13);
  *((_BYTE *)v14 + v13) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::get((char *)&__dst, (char *)&v28, (uint64_t)&__p))
    util::convert<BOOL>(&__p, &v34, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v30) & 0x80000000) == 0)
    {
LABEL_26:
      if (SHIBYTE(v33) < 0)
        goto LABEL_30;
      return v34;
    }
  }
  else if ((SHIBYTE(v30) & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(v28);
  if (SHIBYTE(v33) < 0)
LABEL_30:
    operator delete(__dst);
  return v34;
}

void sub_1BF43B6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a20 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

BOOL prop::tracesettings::anyEnabled(prop::tracesettings *this, const char *a2)
{
  const char *v2;
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;

  return prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB088], a2)
      || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB190], v2)
      || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB090], v3)
      || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFC248], v4)
      || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB118], v5)
      || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB240], v6)
      || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB0A0], v7);
}

BOOL prop::tracesettings::isContinuous(prop::tracesettings *this, const char *a2)
{
  const char *v2;
  const char *v3;

  return prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB088], a2)
      || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFC248], v2)
      || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB118], v3);
}

BOOL prop::tracesettings::mobileBasebandServicesEnabled(prop::tracesettings *this, const char *a2)
{
  const char *v2;
  const char *v3;

  return prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB088], a2)
      || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFC248], v2)
      || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB118], v3);
}

void prop::file::get<std::string>(const void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  int v5;
  size_t v6;
  unint64_t v7;
  void **p_dst;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  char *v20;
  char *v21;
  _QWORD *v22;
  void **v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  const char *v29;
  const void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  void **__dst;
  std::__shared_weak_count *v35;
  _QWORD v36[4];
  uint64_t v37;

  memset(v36, 170, sizeof(v36));
  v5 = *((char *)a1 + 23);
  if (v5 >= 0)
    v6 = *((unsigned __int8 *)a1 + 23);
  else
    v6 = (size_t)a1[1];
  v7 = v6 + 1;
  __dst = (void **)0xAAAAAAAAAAAAAAAALL;
  v35 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  if (v6 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    p_dst = (void **)operator new(v12 + 1);
    v35 = (std::__shared_weak_count *)(v6 + 1);
    v36[0] = v13 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    v35 = 0;
    v36[0] = 0;
    __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v36[0]) = v6 + 1;
    if (!v6)
      goto LABEL_15;
  }
  if (v5 >= 0)
    v14 = a1;
  else
    v14 = *a1;
  memmove(p_dst, v14, v6);
LABEL_15:
  *(_WORD *)((char *)p_dst + v6) = 46;
  v15 = *(char *)(a2 + 23);
  if (v15 >= 0)
    v16 = (const std::string::value_type *)a2;
  else
    v16 = *(const std::string::value_type **)a2;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a2 + 23);
  else
    v17 = *(_QWORD *)(a2 + 8);
  v18 = std::string::append((std::string *)&__dst, v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v36[3] = *((_QWORD *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)&v36[1] = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v36[0]) < 0)
    operator delete(__dst);
  if (v36[3] >= 0)
    v20 = (char *)&v36[1] + HIBYTE(v36[3]);
  else
    v20 = (char *)(v36[1] + v36[2]);
  if (v36[3] >= 0)
    v21 = (char *)&v36[1];
  else
    v21 = (char *)v36[1];
  for (; v21 != v20; ++v21)
    *v21 = __tolower(*v21);
  memset(a4, 170, sizeof(std::string));
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1ED70FAF0)
  {
    v23 = (void **)operator new(0x18uLL);
    MEMORY[0x1C3B893B4](v23, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
    v22 = operator new(0x20uLL);
    *v22 = &unk_1E78FFBE0;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
    v24 = (std::__shared_weak_count *)off_1ED70FAF8;
    qword_1ED70FAF0 = (uint64_t)v23;
    off_1ED70FAF8 = v22;
    if (!v24)
    {
      __dst = v23;
      v35 = (std::__shared_weak_count *)v22;
LABEL_43:
      v27 = v22 + 1;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      goto LABEL_45;
    }
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v23 = (void **)qword_1ED70FAF0;
  v22 = off_1ED70FAF8;
  __dst = (void **)qword_1ED70FAF0;
  v35 = (std::__shared_weak_count *)off_1ED70FAF8;
  if (off_1ED70FAF8)
    goto LABEL_43;
LABEL_45:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (v36[3] >= 0)
    v29 = (const char *)&v36[1];
  else
    v29 = (const char *)v36[1];
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v37, v29);
  v30 = (const void *)(*(uint64_t (**)(void **, uint64_t))*v23)(v23, v37);
  if (v30)
  {
    ctu::cf::assign();
    CFRelease(v30);
  }
  MEMORY[0x1C3B8936C](&v37);
  v31 = v35;
  if (!v35)
    goto LABEL_54;
  v32 = (unint64_t *)&v35->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (v33)
  {
LABEL_54:
    if ((SHIBYTE(v36[3]) & 0x80000000) == 0)
      return;
    goto LABEL_55;
  }
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  if (SHIBYTE(v36[3]) < 0)
LABEL_55:
    operator delete((void *)v36[1]);
}

uint64_t __cxx_global_var_init_11()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_1BF335000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1BF335000);
  }
  return result;
}

void HealthModule::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  dispatch_object_t object;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  __int128 v48;

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0xC0uLL);
  v5 = (std::__shared_weak_count *)a1[1];
  v44 = *a1;
  v45 = v5;
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = v48;
    v48 = 0uLL;
    v11 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (*((_QWORD *)&v48 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v48 + 1) + 16))(*((_QWORD *)&v48 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v48 + 1));
      }
    }
    v9 = off_1ED70FD08;
  }
  v16 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v17 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(dispatch_object_t *__return_ptr, uint64_t))(*(_QWORD *)v9 + 24))(&object, v9);
  HealthModule::HealthModule((uint64_t)v4, &v44, &object);
  *a2 = v4;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v19 = (std::__shared_weak_count *)operator new(0x20uLL);
  v19->__shared_owners_ = 0;
  v20 = (unint64_t *)&v19->__shared_owners_;
  v19->__vftable = (std::__shared_weak_count_vtbl *)off_1E7905B38;
  v19->__shared_weak_owners_ = 0;
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  a2[1] = v19;
  v21 = (std::__shared_weak_count *)*((_QWORD *)v4 + 16);
  if (v21)
  {
    if (v21->__shared_owners_ != -1)
      goto LABEL_31;
    do
      v22 = __ldxr(v20);
    while (__stxr(v22 + 1, v20));
    v23 = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    *((_QWORD *)v4 + 15) = v4;
    *((_QWORD *)v4 + 16) = v19;
    std::__shared_weak_count::__release_weak(v21);
  }
  else
  {
    do
      v25 = __ldxr(v20);
    while (__stxr(v25 + 1, v20));
    v26 = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    *((_QWORD *)v4 + 15) = v4;
    *((_QWORD *)v4 + 16) = v19;
  }
  do
    v28 = __ldaxr(v20);
  while (__stlxr(v28 - 1, v20));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    v29 = (_QWORD *)*a2;
    if (!*(_QWORD *)(*a2 + 104))
      goto LABEL_47;
    goto LABEL_32;
  }
LABEL_31:
  v29 = (_QWORD *)*a2;
  if (!*(_QWORD *)(*a2 + 104))
    goto LABEL_47;
LABEL_32:
  v30 = (std::__shared_weak_count *)v29[16];
  if (!v30 || (v31 = v29[15], (v32 = std::__shared_weak_count::lock(v30)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v33 = v32;
  *(_QWORD *)&v48 = v31;
  *((_QWORD *)&v48 + 1) = v32;
  ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v29 + 7));
  v34 = v31 + 48;
  if (!v31)
    v34 = 0;
  v46 = v34;
  v47 = v33;
  v48 = 0uLL;
  ctu::TrackedLogger::registerLoggerToServer();
  v35 = v47;
  if (v47)
  {
    v36 = (unint64_t *)&v47->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
LABEL_47:
  if (object)
    dispatch_release(object);
  if (v16)
  {
    v41 = (unint64_t *)&v16->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
}

void sub_1BF43BFC4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  __break(1u);
}

void sub_1BF43C024()
{
  __cxa_end_catch();
  JUMPOUT(0x1BF43C068);
}

void sub_1BF43C034()
{
  JUMPOUT(0x1BF43C06CLL);
}

void sub_1BF43C040()
{
  JUMPOUT(0x1BF43C078);
}

void sub_1BF43C050()
{
  JUMPOUT(0x1BF43C084);
}

_BYTE *HealthModule::getShutdownStages@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *v3;
  _BYTE *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(1uLL);
  *a1 = v3;
  *v3 = 3;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void HealthModule::initialize(_QWORD *a1, dispatch_object_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *v19;
  NSObject *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v12);
  }
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v14 = (std::__shared_weak_count *)a1[16];
  if (!v14 || (v15 = a1[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v17 = v16;
  v18 = operator new(0x20uLL);
  *v18 = a1;
  v18[1] = v12;
  v18[2] = v5;
  v18[3] = v7;
  v19 = (unint64_t *)&v17->__shared_owners_;
  v20 = a1[17];
  do
    v21 = __ldxr(v19);
  while (__stxr(v21 + 1, v19));
  v22 = operator new(0x18uLL);
  *v22 = v18;
  v22[1] = v15;
  v22[2] = v17;
  dispatch_async_f(v20, v22, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<HealthModule>::execute_wrapped<HealthModule::initialize(dispatch::group_session)::$_0>(HealthModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<HealthModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<HealthModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v23 = __ldaxr(v19);
  while (__stlxr(v23 - 1, v19));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void HealthModule::shutdown(_QWORD *a1, char a2, NSObject **a3)
{
  uint64_t v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  NSObject *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD v18[5];
  dispatch_group_t group;
  char v20;
  _QWORD block[6];
  std::__shared_weak_count *v22;

  v5 = MEMORY[0x1E0C809B0];
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 1174405120;
  v18[2] = ___ZN12HealthModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v18[3] = &__block_descriptor_tmp_27;
  v6 = *a3;
  v18[4] = a1;
  group = v6;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(v6);
  }
  v20 = a2;
  v7 = (std::__shared_weak_count *)a1[16];
  if (!v7 || (v8 = a1[15], (v9 = std::__shared_weak_count::lock(v7)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v10 = v9;
  v11 = a1[17];
  block[0] = v5;
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI12HealthModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E7905C50;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  block[5] = v8;
  v22 = v10;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  block[4] = v18;
  dispatch_async(v11, block);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN12HealthModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 160);
  *(_QWORD *)(v1 + 152) = 0;
  *(_QWORD *)(v1 + 160) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

const char *HealthModule::getName(HealthModule *this)
{
  return "health.mod";
}

void HealthModule::~HealthModule(HealthModule *this)
{
  NSObject *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  NSObject *v10;
  NSObject *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  std::__shared_weak_count *v16;
  uint8_t v17[16];

  *(_QWORD *)this = off_1E7905968;
  *((_QWORD *)this + 6) = &unk_1E79059D8;
  v2 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v17, 2u);
  }
  v3 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (!v4)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    if (!v7)
      goto LABEL_15;
  }
  else
  {
LABEL_9:
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    if (!v7)
      goto LABEL_15;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_15:
  *((_QWORD *)this + 6) = off_1E7905AF8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v10 = *((_QWORD *)this + 18);
  if (v10)
    dispatch_release(v10);
  v11 = *((_QWORD *)this + 17);
  if (v11)
    dispatch_release(v11);
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  *(_QWORD *)this = off_1E7908A38;
  v13 = *((_QWORD *)this + 3);
  if (v13)
  {
    v14 = *((_QWORD *)this + 4);
    v15 = (void *)*((_QWORD *)this + 3);
    if (v14 != v13)
    {
      do
      {
        if (*(char *)(v14 - 1) < 0)
          operator delete(*(void **)(v14 - 24));
        v14 -= 24;
      }
      while (v14 != v13);
      v15 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v13;
    operator delete(v15);
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
}

{
  void *v1;

  HealthModule::~HealthModule(this);
  operator delete(v1);
}

_QWORD *ctu::SharedLoggable<HealthModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7905AF8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7905AF8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void `non-virtual thunk to'HealthModule::~HealthModule(HealthModule *this)
{
  HealthModule::~HealthModule((HealthModule *)((char *)this - 48));
}

{
  void *v1;

  HealthModule::~HealthModule((HealthModule *)((char *)this - 48));
  operator delete(v1);
}

uint64_t HealthModule::HealthModule(uint64_t a1, uint64_t *a2, NSObject **a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  NSObject *v11;
  void (**v12)(HealthModule *__hidden);
  const char *v13;
  unsigned __int8 v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  NSObject *initially_inactive;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  _BYTE v41[16];
  __int128 v42;
  uint64_t block;
  uint64_t v44;
  void (*v45)(uint64_t);
  void *v46;
  uint64_t *v47;

  v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_1E7908A38;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v6);
    *(_QWORD *)a1 = &unk_1E78FC4E8;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_1E78FC4E8;
    *(_QWORD *)(a1 + 8) = v5;
  }
  *(_QWORD *)a1 = off_1E7905968;
  *(_QWORD *)(a1 + 48) = &unk_1E79059D8;
  v11 = *a3;
  if (v11)
  {
    dispatch_retain(v11);
    v12 = *(void (***)(HealthModule *__hidden))a1;
  }
  else
  {
    v12 = off_1E7905968;
  }
  v13 = (const char *)((uint64_t (*)(uint64_t))v12[2])(a1);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v41, "com.apple.telephony.abm", v13);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  v15 = MEMORY[0x1E0C809B0];
  block = MEMORY[0x1E0C809B0];
  v44 = 0x40000000;
  v45 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v46 = &__block_descriptor_tmp_13_2;
  v47 = &GetABMLogServer(void)::sLogServer;
  v39 = (_QWORD *)(a1 + 48);
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v17 = GetABMLogServer(void)::sLogServer;
    v16 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_17;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v17 = GetABMLogServer(void)::sLogServer;
    v16 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_17;
  }
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v19 = __ldxr(p_shared_owners);
  while (__stxr(v19 + 1, p_shared_owners));
LABEL_17:
  if (v11)
    dispatch_retain(v11);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v21 = dispatch_queue_create_with_target_V2("health.mod", initially_inactive, v11);
  dispatch_set_qos_class_floor(v21, QOS_CLASS_BACKGROUND, 0);
  dispatch_activate(v21);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v21;
  if (v21)
    dispatch_retain(v21);
  *(_QWORD *)(a1 + 144) = v11;
  if (v11)
    dispatch_retain(v11);
  if (v21)
    dispatch_release(v21);
  if (v11)
    dispatch_release(v11);
  *(_QWORD *)(a1 + 48) = off_1E7905AF8;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&block);
  *(_QWORD *)(a1 + 56) = &unk_1E78FB900;
  *(_QWORD *)(a1 + 104) = v17;
  *(_QWORD *)(a1 + 112) = v16;
  if (v16)
  {
    v22 = (unint64_t *)&v16->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v42);
    *v39 = off_1E7905C90;
    do
      v24 = __ldaxr(v22);
    while (__stlxr(v24 - 1, v22));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v42);
    *v39 = off_1E7905C90;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v41);
  if (v11)
    dispatch_release(v11);
  *(_QWORD *)a1 = off_1E7905968;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 48) = &unk_1E79059D8;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  block = v15;
  v44 = 0x40000000;
  v45 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v46 = &__block_descriptor_tmp_13_2;
  v47 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v26 = *(_QWORD *)algn_1ED710088;
    v40 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_42;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v26 = *(_QWORD *)algn_1ED710088;
    v40 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_42;
  }
  v27 = (unint64_t *)(v26 + 8);
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
LABEL_42:
  ctu::DispatchTimerService::create();
  v29 = v42;
  v42 = 0uLL;
  v30 = *(std::__shared_weak_count **)(a1 + 176);
  *(_OWORD *)(a1 + 168) = v29;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v40)
  {
    v36 = (unint64_t *)&v40->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  return a1;
}

void sub_1BF43CB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  Service *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;
  va_list va;

  va_start(va, a3);
  v7 = v6;
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  v9 = *((_QWORD *)v3 + 23);
  *((_QWORD *)v3 + 23) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v5);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v4);
  ctu::SharedLoggable<HealthModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v7);
  Service::~Service(v3);
  _Unwind_Resume(a1);
}

void sub_1BF43CBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  Service *v5;
  NSObject *v6;
  _QWORD *v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  va_list va2;
  uint64_t v17;
  uint64_t v18;
  va_list va3;

  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v15 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  v18 = va_arg(va3, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v7);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  if (v6)
    dispatch_release(v6);
  Service::~Service(v5);
  _Unwind_Resume(a1);
}

void HealthModule::getBasebandFWVersion_sync(_QWORD *a1, void **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  NSObject *v15;
  CommandDriverFactory *v16;
  uint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  void *v35;
  dispatch_object_t object;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  _QWORD aBlock[6];
  std::__shared_weak_count *v44;
  void *v45;
  void *v46;
  dispatch_object_t v47;
  __int128 v48;

  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v46 = (void *)0xAAAAAAAAAAAAAAAALL;
  v47 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN12HealthModule25getBasebandFWVersion_syncEN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_6_5;
  aBlock[4] = a1;
  aBlock[5] = v5;
  v44 = v7;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = *a2;
  if (*a2)
    v13 = _Block_copy(v13);
  v45 = v13;
  v14 = _Block_copy(aBlock);
  v15 = a1[17];
  if (v15)
    dispatch_retain(v15);
  v46 = v14;
  v47 = v15;
  v41 = 0xAAAAAAAAAAAAAAAALL;
  v42 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v16 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v17 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v16);
    v18 = v48;
    v48 = 0uLL;
    v19 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v18;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
    if (*((_QWORD *)&v48 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v17 = off_1ED70FD08;
  }
  v25 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  v37 = v17;
  v38 = *(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v26 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v17 + 16))(&v39, v17);
  v41 = 0;
  v42 = 0;
  if (v40)
  {
    v42 = std::__shared_weak_count::lock(v40);
    if (v42)
      v41 = v39;
    if (v40)
      std::__shared_weak_count::__release_weak(v40);
  }
  if (!v25)
    goto LABEL_39;
  v28 = (unint64_t *)&v25->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    v30 = v41;
    if (!v41)
      goto LABEL_48;
  }
  else
  {
LABEL_39:
    v30 = v41;
    if (!v41)
      goto LABEL_48;
  }
  v31 = v46;
  if (v46)
    v31 = _Block_copy(v46);
  v35 = v31;
  object = v47;
  if (v47)
    dispatch_retain(v47);
  (*(void (**)(unint64_t, void **))(*(_QWORD *)v30 + 112))(v30, &v35);
  if (object)
    dispatch_release(object);
  if (v35)
    _Block_release(v35);
LABEL_48:
  v32 = v42;
  if (v42)
  {
    v33 = (unint64_t *)&v42->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v47)
    dispatch_release(v47);
  if (v46)
    _Block_release(v46);
  if (v45)
    _Block_release(v45);
  if (v44)
    std::__shared_weak_count::__release_weak(v44);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF43CF58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock)
{
  std::__shared_weak_count *v24;
  uint64_t v25;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 80);
  if (aBlock)
    _Block_release(aBlock);
  if (a23)
    std::__shared_weak_count::__release_weak(a23);
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void ___ZN12HealthModule25getBasebandFWVersion_syncEN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke(_QWORD *a1, std::string::size_type *a2, const __CFDictionary **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::string::value_type *v9;
  std::string::size_type v10;
  std::string::size_type v11;
  uint64_t (*v12)(uint64_t);
  NSObject *v13;
  uint64_t v14;
  std::string::size_type size;
  std::__shared_weak_count *v16;
  const __CFDictionary *v17;
  uint64_t (*v18)(uint64_t);
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD v21[2];
  std::__shared_weak_count *v23;
  std::string v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  v23 = v8;
  if (!v8)
    return;
  v9 = (std::string::value_type *)0xAAAAAAAAAAAAAA00;
  v10 = 0xAAAAAAAAAAAAAALL;
  if (a1[5])
  {
    v11 = *a2;
    v12 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!v11)
      v12 = 0;
    if (v12)
    {
      v13 = *(NSObject **)(v7 + 88);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v24.__r_.__value_.__l.__data_) = 138412290;
        *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 4) = v11;
        _os_log_error_impl(&dword_1BF335000, v13, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v24, 0xCu);
      }
    }
    else
    {
      v17 = *a3;
      v18 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      if (!*a3)
        v18 = 0;
      if (v18)
      {
        v21[0] = 0xAAAAAAAAAAAAAAAALL;
        v21[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v21, v17);
        ctu::cf::map_adapter::getString();
        size = v24.__r_.__value_.__l.__size_;
        v9 = (std::string::value_type *)v24.__r_.__value_.__r.__words[0];
        v10 = v24.__r_.__value_.__r.__words[2];
        *((_BYTE *)&v24.__r_.__value_.__s + 23) = 0;
        v24.__r_.__value_.__s.__data_[0] = 0;
        MEMORY[0x1C3B893A8](v21);
        v14 = a1[7];
        if ((v10 & 0x8000000000000000) != 0)
        {
          std::string::__init_copy_ctor_external(&v24, v9, size);
LABEL_11:
          (*(void (**)(uint64_t, std::string *))(v14 + 16))(v14, &v24);
          if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v24.__r_.__value_.__l.__data_);
            v16 = v23;
            if (!v23)
              goto LABEL_24;
          }
          else
          {
            v16 = v23;
            if (!v23)
              goto LABEL_24;
          }
          goto LABEL_21;
        }
LABEL_10:
        v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
        v24.__r_.__value_.__l.__size_ = size;
        v24.__r_.__value_.__r.__words[2] = v10;
        goto LABEL_11;
      }
    }
    v14 = a1[7];
    size = 0xAAAAAAAAAAAAAAAALL;
    goto LABEL_10;
  }
  v16 = v8;
LABEL_21:
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (v20)
  {
LABEL_24:
    if ((v10 & 0x8000000000000000) == 0)
      return;
    goto LABEL_25;
  }
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  if ((v10 & 0x8000000000000000) != 0)
LABEL_25:
    operator delete(v9);
}

void sub_1BF43D218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  operator delete(v7);
  _Unwind_Resume(a1);
}

void sub_1BF43D234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1C3B893A8](&a16);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_1BF43D268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  uint64_t v23;

  if (a22 < 0)
    operator delete(__p);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (v23 < 0)
    operator delete(v22);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12HealthModuleEE56c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[7];
  if (result)
    result = _Block_copy(result);
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12HealthModuleEE56c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 56);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

uint64_t HealthModule::getFailureCountInHealthEventDB_sync(NSObject **this)
{
  HealthEventDB *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v20;
  NSObject *v23;
  _QWORD v25[3];
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if ((_QWORD)xmmword_1ED70FD78)
    goto LABEL_2;
  v2 = (HealthEventDB *)operator new(0x78uLL);
  HealthEventDB::HealthEventDB(v2);
  v3 = (std::__shared_weak_count *)operator new(0x20uLL);
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1E7905B88;
  v3->__shared_owners_ = 0;
  v3->__shared_weak_owners_ = 0;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)v2;
  v4 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED70FD78 + 1);
  *(_QWORD *)&xmmword_1ED70FD78 = v2;
  *((_QWORD *)&xmmword_1ED70FD78 + 1) = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
LABEL_2:
    v3 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED70FD78 + 1);
    v2 = (HealthEventDB *)xmmword_1ED70FD78;
    if (!*((_QWORD *)&xmmword_1ED70FD78 + 1))
      goto LABEL_11;
  }
  v7 = (unint64_t *)&v3->__shared_owners_;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
LABEL_11:
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if (v3)
  {
    v9 = (unint64_t *)&v3->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  memset(v25, 170, sizeof(v25));
  HealthModule::findMostRecentBarrierHealthEvent_sync((HealthModule *)this, v25);
  if (((LOBYTE(v25[1]) - 3) & 0xFD) != 0)
    v11 = 0;
  else
    v11 = v25[2];
  if (!*((_QWORD *)v2 + 14) || (v12 = *((_QWORD *)v2 + 12)) == 0)
  {
    v13 = 0;
    v20 = 0;
    v23 = this[11];
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      return v20 + v13;
    goto LABEL_48;
  }
  v13 = 0;
  v15 = *((_QWORD *)v2 + 10);
  v14 = *((_QWORD *)v2 + 11);
  v16 = *((_QWORD *)v2 + 12);
  v17 = *((_QWORD *)v2 + 13);
  do
  {
    if (*(_QWORD *)(v16 + 16) >= v11 && *(_BYTE *)(v16 + 8) == 1)
      ++v13;
    v16 += 24;
    if (v16 == v14)
      v16 = *((_QWORD *)v2 + 10);
  }
  while (v16 != v17 && v16 != 0);
  v20 = 0;
  do
  {
    if (*(_QWORD *)(v12 + 16) >= v11 && *(_BYTE *)(v12 + 8) == 4)
      ++v20;
    v12 += 24;
    if (v12 == v14)
      v12 = v15;
  }
  while (v12 != v17 && v12 != 0);
  v23 = this[11];
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
LABEL_48:
    *(_DWORD *)buf = 134218240;
    v27 = v13;
    v28 = 2048;
    v29 = v20;
    _os_log_impl(&dword_1BF335000, v23, OS_LOG_TYPE_DEFAULT, "#I boot failure count: %ld, ping failure count: %ld", buf, 0x16u);
  }
  return v20 + v13;
}

void sub_1BF43D598(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  _Unwind_Resume(a1);
}

void HealthModule::findMostRecentBarrierHealthEvent_sync(HealthModule *this@<X0>, _QWORD *a2@<X8>)
{
  __int128 v4;
  _QWORD *v5;
  HealthEventDB *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  BOOL v31;
  char *v32;
  BOOL v33;
  char *v34;
  NSObject *v35;
  std::logic_error *v36;
  unint64_t v37;
  BOOL v38;
  void *__p[2];
  __int128 v40;
  unint64_t v41;
  std::logic_error v42;
  char v43;
  void *v44[2];
  uint64_t v45;
  uint8_t buf[24];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  memset(a2, 170, 24);
  Timestamp::Timestamp((Timestamp *)&v42);
  Timestamp::asString((uint64_t)&v42, 0, 9, v44);
  *a2 = &unk_1E7905D90;
  *((_BYTE *)a2 + 8) = 0;
  if (SHIBYTE(v45) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v44[0], (std::string::size_type)v44[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v44;
    *(_QWORD *)&v40 = v45;
  }
  a2[2] = Timestamp::convert((uint64_t)__p);
  if (SBYTE7(v40) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v45) & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((SHIBYTE(v45) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(v44[0]);
LABEL_6:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v42, (_QWORD *)v42.__imp_.__imp_);
  v41 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v4;
  v40 = v4;
  pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if ((_QWORD)xmmword_1ED70FD78)
    goto LABEL_7;
  v6 = (HealthEventDB *)operator new(0x78uLL);
  HealthEventDB::HealthEventDB(v6);
  v5 = operator new(0x20uLL);
  *v5 = off_1E7905B88;
  v5[1] = 0;
  v5[2] = 0;
  v5[3] = v6;
  v7 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED70FD78 + 1);
  *(_QWORD *)&xmmword_1ED70FD78 = v6;
  *((_QWORD *)&xmmword_1ED70FD78 + 1) = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
LABEL_7:
    v5 = (_QWORD *)*((_QWORD *)&xmmword_1ED70FD78 + 1);
    v6 = (HealthEventDB *)xmmword_1ED70FD78;
    *(_OWORD *)buf = xmmword_1ED70FD78;
    if (!*((_QWORD *)&xmmword_1ED70FD78 + 1))
      goto LABEL_19;
    goto LABEL_17;
  }
  *(_QWORD *)buf = v6;
  *(_QWORD *)&buf[8] = v5;
LABEL_17:
  v10 = v5 + 1;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
LABEL_19:
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  v12 = *((_QWORD *)v6 + 14);
  v41 = v12;
  v14 = *((_QWORD *)v6 + 10);
  v13 = *((_QWORD *)v6 + 11);
  v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v14) >> 3);
  if (v15 >= 0xAAAAAAAAAAAAAABLL)
  {
    std::logic_error::logic_error(&v42, "circular_buffer");
    v42.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
    boost::throw_exception<std::length_error>(&v42);
  }
  if (v13 == v14)
  {
    v16 = 0;
    v18 = (char *)(8 * ((v13 - v14) >> 3));
    __p[0] = 0;
    __p[1] = (void *)(24 * v15);
    *(_QWORD *)&v40 = 0;
    v19 = 0;
    if (!v12)
      goto LABEL_33;
  }
  else
  {
    v16 = (char *)operator new(v13 - v14);
    v17 = *((_QWORD *)v6 + 14);
    v18 = &v16[24 * v15];
    __p[0] = v16;
    __p[1] = v18;
    *(_QWORD *)&v40 = v16;
    v19 = v16;
    if (!v17)
      goto LABEL_33;
  }
  v20 = *((_QWORD *)v6 + 12);
  v19 = v16;
  if (v20)
  {
    v22 = *((_QWORD *)v6 + 10);
    v21 = *((_QWORD *)v6 + 11);
    v19 = v16;
    v23 = *((_QWORD *)v6 + 13);
    do
    {
      *(_QWORD *)v19 = &unk_1E7905D90;
      *(_OWORD *)(v19 + 8) = *(_OWORD *)(v20 + 8);
      v20 += 24;
      if (v20 == v21)
        v20 = v22;
      v19 += 24;
    }
    while (v20 != v23 && v20 != 0);
  }
LABEL_33:
  if (v19 == v18)
    v25 = v16;
  else
    v25 = v19;
  *((_QWORD *)&v40 + 1) = v25;
  v26 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_40;
  v27 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    v29 = v41;
    v30 = (char *)v40;
    if (v41)
      v38 = (_QWORD)v40 == 0;
    else
      v38 = 1;
    if (v38)
      goto LABEL_63;
  }
  else
  {
LABEL_40:
    v29 = v41;
    v30 = (char *)v40;
    if (v41)
      v31 = (_QWORD)v40 == 0;
    else
      v31 = 1;
    if (v31)
      goto LABEL_63;
  }
  if (v30 + 24 == __p[1])
    v32 = (char *)__p[0];
  else
    v32 = v30 + 24;
  v33 = v32 == *((char **)&v40 + 1) || v32 == 0;
  v34 = v30;
  if (!v33)
  {
    v34 = v30;
    do
    {
      if (((v34[8] - 3) & 0xFD) != 0)
      {
        if (((v32[8] - 3) & 0xFD) == 0)
          goto LABEL_57;
      }
      else if (((v32[8] - 3) & 0xFD) != 0)
      {
        goto LABEL_58;
      }
      if (*((_QWORD *)v34 + 2) < *((_QWORD *)v32 + 2))
LABEL_57:
        v34 = v32;
LABEL_58:
      v32 += 24;
      if (v32 == __p[1])
        v32 = (char *)__p[0];
    }
    while (v32 != *((char **)&v40 + 1) && v32);
  }
  *(_OWORD *)(a2 + 1) = *(_OWORD *)(v34 + 8);
LABEL_63:
  v35 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    HealthEvent::asString((HealthEvent *)a2, &v42);
    v36 = v43 >= 0 ? &v42 : (std::logic_error *)v42.__vftable;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v36;
    _os_log_impl(&dword_1BF335000, v35, OS_LOG_TYPE_DEFAULT, "#I Found preliminary barrier event: %s", buf, 0xCu);
    if (v43 < 0)
      operator delete(v42.__vftable);
  }
  if (v29)
  {
    v37 = 0;
    do
    {
      (**(void (***)(char *))v30)(v30);
      v30 = (char *)(v40 + 24);
      *(_QWORD *)&v40 = v30;
      if (v30 == __p[1])
      {
        v30 = (char *)__p[0];
        *(void **)&v40 = __p[0];
      }
      ++v37;
    }
    while (v37 < v41);
  }
  if (__p[0])
    operator delete(__p[0]);
}

void sub_1BF43DA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;

  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  _Unwind_Resume(a1);
}

BOOL HealthModule::hasBarrierEventType(uint64_t a1)
{
  return ((*(unsigned __int8 *)(a1 + 8) - 3) & 0xFD) == 0;
}

uint64_t boost::circular_buffer<HealthEvent,std::allocator<HealthEvent>>::~circular_buffer(uint64_t a1)
{
  unint64_t v2;
  void (***v3)(_QWORD);
  void (***v4)(_QWORD);

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = 0;
    v3 = *(void (****)(_QWORD))(a1 + 16);
    do
    {
      (**v3)(v3);
      v4 = *(void (****)(_QWORD))(a1 + 8);
      v3 = (void (***)(_QWORD))(*(_QWORD *)(a1 + 16) + 24);
      *(_QWORD *)(a1 + 16) = v3;
      if (v3 == v4)
      {
        v3 = *(void (****)(_QWORD))a1;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)a1;
      }
      ++v2;
    }
    while (v2 < *(_QWORD *)(a1 + 32));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void HealthModule::checkFailuresAgainstThresholdAndEraseEFSAccordingly_sync(NSObject **this)
{
  uint64_t FailureCountInHealthEventDB_sync;
  int v3;
  NSObject *v4;
  const char *v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  const void *v10;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  HealthEventDB *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  xpc_object_t v29;
  _BYTE buf[24];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  FailureCountInHealthEventDB_sync = HealthModule::getFailureCountInHealthEventDB_sync(this);
  if (FailureCountInHealthEventDB_sync >= 10)
  {
    v3 = capabilities::abs::supportsEFSEraseOnBootLoop((capabilities::abs *)FailureCountInHealthEventDB_sync);
    v4 = this[11];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = ", but EFS erase is not supported";
      if (v3)
        v5 = "; requesting EFS erase";
      *(_QWORD *)buf = 0xA04000202;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = v5;
      _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I Total health failure count reached EFS erase threshold (%d)%s", buf, 0x12u);
    }
    if (v3)
    {
      v6 = xpc_dictionary_create(0, 0, 0);
      if (v6 || (v6 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8A86C](v6) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v6);
          v7 = v6;
        }
        else
        {
          v7 = xpc_null_create();
        }
      }
      else
      {
        v7 = xpc_null_create();
        v6 = 0;
      }
      xpc_release(v6);
      v8 = xpc_string_create((const char *)*MEMORY[0x1E0CFB390]);
      if (!v8)
        v8 = xpc_null_create();
      xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E0CFB8C8], v8);
      v9 = xpc_null_create();
      xpc_release(v8);
      xpc_release(v9);
      v10 = (const void *)*MEMORY[0x1E0CFB5C8];
      v11 = strlen((const char *)*MEMORY[0x1E0CFB5C8]);
      if (v11 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v12 = v11;
      if (v11 >= 0x17)
      {
        v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17)
          v14 = v11 | 7;
        v15 = v14 + 1;
        v13 = operator new(v14 + 1);
        *(_QWORD *)&buf[8] = v12;
        *(_QWORD *)&buf[16] = v15 | 0x8000000000000000;
        *(_QWORD *)buf = v13;
      }
      else
      {
        buf[23] = v11;
        v13 = buf;
        if (!v11)
        {
          buf[0] = 0;
          v29 = v7;
          if (v7)
          {
LABEL_19:
            xpc_retain(v7);
            goto LABEL_25;
          }
LABEL_24:
          v29 = xpc_null_create();
LABEL_25:
          abm::client::Command::create();
          xpc_release(v29);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          do
            v16 = __ldxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
          while (__stxr(v16 + 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
          AppleBasebandManager::perform();
          do
            v17 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
          while (__stlxr(v17 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
          if (!v17)
          {
            (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
          }
          pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
          if (!(_QWORD)xmmword_1ED70FD78)
          {
            v19 = (HealthEventDB *)operator new(0x78uLL);
            HealthEventDB::HealthEventDB(v19);
            v18 = operator new(0x20uLL);
            *v18 = off_1E7905B88;
            v18[1] = 0;
            v18[2] = 0;
            v18[3] = v19;
            v20 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED70FD78 + 1);
            *(_QWORD *)&xmmword_1ED70FD78 = v19;
            *((_QWORD *)&xmmword_1ED70FD78 + 1) = v18;
            if (!v20)
            {
              *(_QWORD *)buf = v19;
              *(_QWORD *)&buf[8] = v18;
              goto LABEL_41;
            }
            p_shared_owners = (unint64_t *)&v20->__shared_owners_;
            do
              v22 = __ldaxr(p_shared_owners);
            while (__stlxr(v22 - 1, p_shared_owners));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          v18 = (_QWORD *)*((_QWORD *)&xmmword_1ED70FD78 + 1);
          v19 = (HealthEventDB *)xmmword_1ED70FD78;
          *(_OWORD *)buf = xmmword_1ED70FD78;
          if (!*((_QWORD *)&xmmword_1ED70FD78 + 1))
          {
LABEL_43:
            pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
            HealthEventDB::addHealthEvent(v19, 5);
            v25 = *(std::__shared_weak_count **)&buf[8];
            if (*(_QWORD *)&buf[8])
            {
              v26 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
              do
                v27 = __ldaxr(v26);
              while (__stlxr(v27 - 1, v26));
              if (!v27)
              {
                ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                std::__shared_weak_count::__release_weak(v25);
              }
            }
            do
              v28 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
            while (__stlxr(v28 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
            if (!v28)
            {
              (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
            }
            xpc_release(v7);
            return;
          }
LABEL_41:
          v23 = v18 + 1;
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
          goto LABEL_43;
        }
      }
      memmove(v13, v10, v12);
      v13[v12] = 0;
      v29 = v7;
      if (v7)
        goto LABEL_19;
      goto LABEL_24;
    }
  }
}

void sub_1BF43E07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, xpc_object_t object, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  uint64_t v23;

  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  xpc_release(v22);
  _Unwind_Resume(a1);
}

uint64_t dispatch::callback<void({block_pointer})(int,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void HealthModule::sendUserNotificationForCellularDiagnostics(HealthModule *this)
{
  std::string v1;
  std::string v2;
  std::string __p;
  void *v4[2];
  _BYTE v5[64];

  if ((config::hw::watch(this) & 1) != 0)
    return;
  *(_OWORD *)v4 = 0u;
  memset(v5, 0, 56);
  std::string::__assign_external((std::string *)&v5[8], "Cellular_Issue_Detected", 0x17uLL);
  v5[7] = 13;
  strcpy((char *)v4, "CellularIssue");
  if ((v5[7] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v1, (const std::string::value_type *)v4[0], (std::string::size_type)v4[1]);
  }
  else
  {
    *(_OWORD *)&v1.__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    v1.__r_.__value_.__r.__words[2] = *(_QWORD *)v5;
  }
  if ((v5[31] & 0x80000000) != 0)
    std::string::__init_copy_ctor_external(&v2, *(const std::string::value_type **)&v5[8], *(std::string::size_type *)&v5[16]);
  else
    v2 = *(std::string *)&v5[8];
  if ((v5[55] & 0x80000000) != 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)&v5[32], *(std::string::size_type *)&v5[40]);
  else
    __p = *(std::string *)&v5[32];
  support::ui::showNotification(2u, (uint64_t)&v1, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v2.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_20;
    }
  }
  else if ((SHIBYTE(v2.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(v2.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_14:
    if ((v5[55] & 0x80000000) == 0)
      goto LABEL_15;
LABEL_21:
    operator delete(*(void **)&v5[32]);
    if ((v5[31] & 0x80000000) == 0)
    {
LABEL_16:
      if ((v5[7] & 0x80000000) == 0)
        return;
LABEL_23:
      operator delete(v4[0]);
      return;
    }
    goto LABEL_22;
  }
LABEL_20:
  operator delete(v1.__r_.__value_.__l.__data_);
  if ((v5[55] & 0x80000000) != 0)
    goto LABEL_21;
LABEL_15:
  if ((v5[31] & 0x80000000) == 0)
    goto LABEL_16;
LABEL_22:
  operator delete(*(void **)&v5[8]);
  if ((v5[7] & 0x80000000) != 0)
    goto LABEL_23;
}

void sub_1BF43E37C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      support::ui::NotificationInfo::~NotificationInfo(&a25);
      _Unwind_Resume(a1);
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  support::ui::NotificationInfo::~NotificationInfo(&a25);
  _Unwind_Resume(a1);
}

void sub_1BF43E3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  support::ui::NotificationInfo::~NotificationInfo((void **)&a9);
  support::ui::NotificationInfo::~NotificationInfo(&a19);
  _Unwind_Resume(a1);
}

void sub_1BF43E3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  support::ui::NotificationInfo::~NotificationInfo((void **)va);
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<HealthModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<HealthModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<HealthModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

uint64_t ctu::PthreadMutexGuardPolicy<HealthEventDB>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

_QWORD *ctu::Loggable<HealthModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7905AF8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<HealthModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7905AF8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__shared_ptr_pointer<HealthModule *,std::shared_ptr<HealthModule> ctu::SharedSynchronizable<HealthModule>::make_shared_ptr<HealthModule>(HealthModule*)::{lambda(HealthModule *)#1},std::allocator<HealthModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<HealthModule *,std::shared_ptr<HealthModule> ctu::SharedSynchronizable<HealthModule>::make_shared_ptr<HealthModule>(HealthModule*)::{lambda(HealthModule *)#1},std::allocator<HealthModule>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<HealthModule> ctu::SharedSynchronizable<HealthModule>::make_shared_ptr<HealthModule>(HealthModule*)::{lambda(HealthModule*)#1}::operator() const(HealthModule*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<HealthModule *,std::shared_ptr<HealthModule> ctu::SharedSynchronizable<HealthModule>::make_shared_ptr<HealthModule>(HealthModule*)::{lambda(HealthModule *)#1},std::allocator<HealthModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI12HealthModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI12HealthModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT"
                                "_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI12HealthModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI12HealthModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<HealthModule> ctu::SharedSynchronizable<HealthModule>::make_shared_ptr<HealthModule>(HealthModule*)::{lambda(HealthModule*)#1}::operator() const(HealthModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *HealthEventDB::create_default_global(HealthEventDB *this)
{
  HealthEventDB *v2;
  _QWORD *result;

  v2 = (HealthEventDB *)operator new(0x78uLL);
  HealthEventDB::HealthEventDB(v2);
  *(_QWORD *)this = v2;
  result = operator new(0x20uLL);
  *result = off_1E7905B88;
  result[1] = 0;
  result[2] = 0;
  result[3] = v2;
  *((_QWORD *)this + 1) = result;
  return result;
}

void sub_1BF43E6F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1BF43E70C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<HealthEventDB>::operator=[abi:ne180100](uint64_t a1)
{
  __int128 v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED70FD78 + 1);
  xmmword_1ED70FD78 = v1;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void std::__shared_ptr_pointer<HealthEventDB *,std::shared_ptr<HealthEventDB>::__shared_ptr_default_delete<HealthEventDB,HealthEventDB>,std::allocator<HealthEventDB>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<HealthEventDB *,std::shared_ptr<HealthEventDB>::__shared_ptr_default_delete<HealthEventDB,HealthEventDB>,std::allocator<HealthEventDB>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<HealthEventDB *,std::shared_ptr<HealthEventDB>::__shared_ptr_default_delete<HealthEventDB,HealthEventDB>,std::allocator<HealthEventDB>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF5438AALL)
    return a1 + 24;
  if (((v3 & 0x80000001BF5438AALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF5438AALL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF5438AALL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void dispatch::async<void ctu::SharedSynchronizable<HealthModule>::execute_wrapped<HealthModule::initialize(dispatch::group_session)::$_0>(HealthModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<HealthModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<HealthModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  CFTypeRef v18;
  const void *v19;
  size_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_weak_owners;
  unint64_t v27;
  void *v28;
  NSObject *v29;
  std::__shared_weak_count *v30;
  NSObject *v31;
  NSObject *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;
  void (*v37)(_QWORD *, abm::client::Event **);
  void *v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  void *aBlock;
  dispatch_object_t object;
  void *__p[2];
  unint64_t v45;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v48;

  v2 = *a1;
  v3 = **a1;
  v4 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v36) = 0;
    _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I Initializing", (uint8_t *)&v36, 2u);
  }
  v5 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  v6 = strlen(v5);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
LABEL_58:
    std::string::__throw_length_error[abi:ne180100]();
  v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    v48 = v10 | 0x8000000000000000;
    __dst[0] = v8;
  }
  else
  {
    HIBYTE(v48) = v6;
    v8 = __dst;
    if (!v6)
      goto LABEL_11;
  }
  memmove(v8, v5, (size_t)v7);
LABEL_11:
  *((_BYTE *)v7 + (_QWORD)v8) = 0;
  cf = 0;
  AppleBasebandManager::create();
  v11 = v36;
  v36 = 0uLL;
  v12 = *(std::__shared_weak_count **)(v3 + 160);
  *(_OWORD *)(v3 + 152) = v11;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (!*((_QWORD *)&v36 + 1))
    goto LABEL_20;
  v16 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
  {
LABEL_20:
    v18 = cf;
    if (!cf)
      goto LABEL_22;
    goto LABEL_21;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  v18 = cf;
  if (cf)
LABEL_21:
    CFRelease(v18);
LABEL_22:
  if (SHIBYTE(v48) < 0)
    operator delete(__dst[0]);
  v19 = (const void *)*MEMORY[0x1E0CFBD68];
  v20 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_58;
  v21 = (void *)v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = operator new(v23 + 1);
    __p[1] = v21;
    v45 = v24 | 0x8000000000000000;
    __p[0] = v22;
    goto LABEL_31;
  }
  HIBYTE(v45) = v20;
  v22 = __p;
  if (v20)
LABEL_31:
    memmove(v22, v19, (size_t)v21);
  *((_BYTE *)v21 + (_QWORD)v22) = 0;
  *(_QWORD *)&v36 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v36 + 1) = 1174405120;
  v37 = ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
  v38 = &__block_descriptor_tmp_22_3;
  v39 = v3;
  v40 = v2[2];
  v25 = (std::__shared_weak_count *)v2[3];
  v41 = v25;
  if (v25)
  {
    p_shared_weak_owners = (unint64_t *)&v25->__shared_weak_owners_;
    do
      v27 = __ldxr(p_shared_weak_owners);
    while (__stxr(v27 + 1, p_shared_weak_owners));
  }
  v28 = _Block_copy(&v36);
  v29 = *(NSObject **)(v3 + 136);
  if (v29)
    dispatch_retain(*(dispatch_object_t *)(v3 + 136));
  aBlock = v28;
  object = v29;
  AppleBasebandManager::setEventHandler();
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (SHIBYTE(v45) < 0)
    operator delete(__p[0]);
  AppleBasebandManager::eventsOn(*(AppleBasebandManager **)(v3 + 152));
  if (v41)
    std::__shared_weak_count::__release_weak(v41);
  v30 = (std::__shared_weak_count *)v2[3];
  if (v30)
    std::__shared_weak_count::__release_weak(v30);
  v31 = v2[1];
  if (v31)
  {
    dispatch_group_leave(v31);
    v32 = v2[1];
    if (v32)
      dispatch_release(v32);
  }
  operator delete(v2);
  v33 = (std::__shared_weak_count *)a1[2];
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  operator delete(a1);
}

void sub_1BF43EBC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, dispatch_object_t object, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,CFTypeRef cf)
{
  _QWORD *v24;
  _QWORD *v25;
  std::__shared_weak_count *v27;
  NSObject *v28;
  NSObject *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  v27 = (std::__shared_weak_count *)v25[3];
  if (v27)
    std::__shared_weak_count::__release_weak(v27);
  v28 = v25[1];
  if (v28)
  {
    dispatch_group_leave(v28);
    v29 = v25[1];
    if (v29)
      dispatch_release(v29);
  }
  operator delete(v25);
  v30 = (std::__shared_weak_count *)v24[2];
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  operator delete(v24);
  _Unwind_Resume(a1);
}

void ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  const void *v7;
  const char *v8;
  int v9;
  size_t v10;
  void **v11;
  void **v12;
  void **v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  const char *v30;
  char v31;
  size_t v32;
  _BYTE *v33;
  _QWORD *v34;
  HealthEventDB *v35;
  _QWORD *v36;
  HealthEventDB *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  HealthModule *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  _QWORD v57[6];
  std::__shared_weak_count *v58;
  void *aBlock;
  dispatch_object_t object;
  void *__p;
  __int128 v62;
  __int128 v63;
  char v64;
  void *v65[3];
  _QWORD v66[2];
  unint64_t v67;
  std::__shared_weak_count *v69;
  uint64_t v70;
  _BYTE buf[24];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  v69 = v6;
  if (!v6)
    return;
  if (!a1[5])
  {
    v29 = v6;
LABEL_109:
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v56 = __ldaxr(p_shared_owners);
    while (__stlxr(v56 - 1, p_shared_owners));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
    return;
  }
  v67 = 0xAAAAAAAAAAAAAAAALL;
  abm::client::Event::getData(*a2);
  v7 = (const void *)0xAAAAAAAAAAAAAAAALL;
  if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
  {
    v66[0] = 0xAAAAAAAAAAAAAAAALL;
    v66[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v66, (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL);
    memset(v65, 170, sizeof(v65));
    v8 = (const char *)*MEMORY[0x1E0CFB530];
    buf[23] = 0;
    buf[0] = 0;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v63, v8);
    ctu::cf::map_adapter::getString();
    MEMORY[0x1C3B8936C](&v63);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v9 = SHIBYTE(v65[2]);
    if (SHIBYTE(v65[2]) >= 0)
      v10 = HIBYTE(v65[2]);
    else
      v10 = (size_t)v65[1];
    if (v10 != strlen((const char *)*MEMORY[0x1E0CFBB68])
      || (SHIBYTE(v65[2]) >= 0 ? (v11 = v65) : (v11 = (void **)v65[0]),
          memcmp(v11, (const void *)*MEMORY[0x1E0CFBB68], v10)))
    {
      if (v10 != strlen((const char *)*MEMORY[0x1E0CFB588])
        || (v9 >= 0 ? (v12 = v65) : (v12 = (void **)v65[0]), memcmp(v12, (const void *)*MEMORY[0x1E0CFB588], v10)))
      {
        if (v10 == strlen((const char *)*MEMORY[0x1E0CFB980]))
        {
          v13 = v9 >= 0 ? v65 : (void **)v65[0];
          if (!memcmp(v13, (const void *)*MEMORY[0x1E0CFB980], v10))
          {
            if (*(_QWORD *)(v5 + 184))
            {
              v14 = *(NSObject **)(v5 + 88);
              if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_1BF335000, v14, OS_LOG_TYPE_DEFAULT, "#I Baseband ping timer already running", buf, 2u);
                v14 = *(NSObject **)(v5 + 88);
              }
              if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_1BF335000, v14, OS_LOG_TYPE_DEFAULT, "#I Canceling baseband ping timer", buf, 2u);
              }
              (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 184) + 16))(*(_QWORD *)(v5 + 184));
              v15 = *(_QWORD *)(v5 + 184);
              *(_QWORD *)(v5 + 184) = 0;
              if (v15)
                (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
              pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
              v16 = xmmword_1ED70FD78;
              if (!(_QWORD)xmmword_1ED70FD78)
              {
                HealthEventDB::create_default_global((HealthEventDB *)buf);
                std::shared_ptr<HealthEventDB>::operator=[abi:ne180100]((uint64_t)buf);
                std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)buf);
                v16 = xmmword_1ED70FD78;
              }
              *(_QWORD *)&v63 = v16;
              *((_QWORD *)&v63 + 1) = *((_QWORD *)&xmmword_1ED70FD78 + 1);
              if (*((_QWORD *)&xmmword_1ED70FD78 + 1))
              {
                v17 = (unint64_t *)(*((_QWORD *)&xmmword_1ED70FD78 + 1) + 8);
                do
                  v18 = __ldxr(v17);
                while (__stxr(v18 + 1, v17));
              }
              pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
              HealthEventDB::addHealthEvent((HealthEventDB *)v63, 4);
              std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&v63);
            }
            v19 = *(NSObject **)(v5 + 88);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
            {
              *(_QWORD *)buf = 0xA04000100;
              _os_log_impl(&dword_1BF335000, v19, OS_LOG_TYPE_DEFAULT, "#I Starting %u sec timer before pinging baseband", buf, 8u);
            }
            v20 = *(_QWORD *)(v5 + 168);
            __p = operator new(0x28uLL);
            v62 = xmmword_1BF542260;
            strcpy((char *)__p, "Baseband HealthModule Ping Timer");
            v21 = *(NSObject **)(v5 + 136);
            object = v21;
            if (v21)
              dispatch_retain(v21);
            v57[0] = MEMORY[0x1E0C809B0];
            v57[1] = 1174405120;
            v57[2] = ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_16;
            v57[3] = &__block_descriptor_tmp_20_4;
            v23 = a1[5];
            v22 = (std::__shared_weak_count *)a1[6];
            v57[4] = v5;
            v57[5] = v23;
            v58 = v22;
            if (v22)
            {
              p_shared_weak_owners = (unint64_t *)&v22->__shared_weak_owners_;
              do
                v25 = __ldxr(p_shared_weak_owners);
              while (__stxr(v25 + 1, p_shared_weak_owners));
            }
            aBlock = _Block_copy(v57);
            ctu::TimerService::createOneShotTimer(v20, (uint64_t)&__p, 0, 10000000, &object, &aBlock);
            v26 = *(_QWORD *)buf;
            *(_QWORD *)buf = 0;
            v27 = *(_QWORD *)(v5 + 184);
            *(_QWORD *)(v5 + 184) = v26;
            if (v27)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
              v28 = *(_QWORD *)buf;
              *(_QWORD *)buf = 0;
              if (v28)
                (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
            }
            if (aBlock)
              _Block_release(aBlock);
            if (object)
              dispatch_release(object);
            if (SHIBYTE(v62) < 0)
              operator delete(__p);
            if (v58)
              std::__shared_weak_count::__release_weak(v58);
          }
        }
LABEL_103:
        HealthModule::checkFailuresAgainstThresholdAndEraseEFSAccordingly_sync((NSObject **)v5);
        if (SHIBYTE(v65[2]) < 0)
          operator delete(v65[0]);
        MEMORY[0x1C3B893A8](v66);
        v7 = (const void *)v67;
        goto LABEL_106;
      }
      pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
      if (!(_QWORD)xmmword_1ED70FD78)
      {
        v37 = (HealthEventDB *)operator new(0x78uLL);
        HealthEventDB::HealthEventDB(v37);
        v36 = operator new(0x20uLL);
        *v36 = off_1E7905B88;
        v36[1] = 0;
        v36[2] = 0;
        v36[3] = v37;
        v38 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED70FD78 + 1);
        *(_QWORD *)&xmmword_1ED70FD78 = v37;
        *((_QWORD *)&xmmword_1ED70FD78 + 1) = v36;
        if (!v38)
        {
          *(_QWORD *)buf = v37;
          *(_QWORD *)&buf[8] = v36;
          goto LABEL_79;
        }
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v36 = (_QWORD *)*((_QWORD *)&xmmword_1ED70FD78 + 1);
      v37 = (HealthEventDB *)xmmword_1ED70FD78;
      *(_OWORD *)buf = xmmword_1ED70FD78;
      if (!*((_QWORD *)&xmmword_1ED70FD78 + 1))
      {
LABEL_81:
        pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
        v43 = (HealthModule *)HealthEventDB::addHealthEvent(v37, 2);
        v44 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v45 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        HealthModule::sendUserNotificationForCellularDiagnostics(v43);
        goto LABEL_103;
      }
LABEL_79:
      v41 = v36 + 1;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
      goto LABEL_81;
    }
    memset(buf, 170, sizeof(buf));
    v30 = (const char *)*MEMORY[0x1E0CFB8D0];
    v64 = 0;
    LOBYTE(v63) = 0;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v70, v30);
    ctu::cf::map_adapter::getString();
    MEMORY[0x1C3B8936C](&v70);
    if (v64 < 0)
      operator delete((void *)v63);
    v31 = buf[23];
    if (buf[23] >= 0)
      v32 = buf[23];
    else
      v32 = *(_QWORD *)&buf[8];
    if (v32 != strlen((const char *)*MEMORY[0x1E0CFBEA0])
      || (buf[23] >= 0 ? (v33 = buf) : (v33 = *(_BYTE **)buf), memcmp(v33, (const void *)*MEMORY[0x1E0CFBEA0], v32)))
    {
LABEL_101:
      if (v31 < 0)
        operator delete(*(void **)buf);
      goto LABEL_103;
    }
    pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
    if (!(_QWORD)xmmword_1ED70FD78)
    {
      v35 = (HealthEventDB *)operator new(0x78uLL);
      HealthEventDB::HealthEventDB(v35);
      v34 = operator new(0x20uLL);
      *v34 = off_1E7905B88;
      v34[1] = 0;
      v34[2] = 0;
      v34[3] = v35;
      v47 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED70FD78 + 1);
      *(_QWORD *)&xmmword_1ED70FD78 = v35;
      *((_QWORD *)&xmmword_1ED70FD78 + 1) = v34;
      if (!v47)
      {
        *(_QWORD *)&v63 = v35;
        *((_QWORD *)&v63 + 1) = v34;
        goto LABEL_93;
      }
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v34 = (_QWORD *)*((_QWORD *)&xmmword_1ED70FD78 + 1);
    v35 = (HealthEventDB *)xmmword_1ED70FD78;
    v63 = xmmword_1ED70FD78;
    if (!*((_QWORD *)&xmmword_1ED70FD78 + 1))
    {
LABEL_95:
      pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
      HealthEventDB::addHealthEvent(v35, 1);
      v52 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
      if (*((_QWORD *)&v63 + 1))
      {
        v53 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      v31 = buf[23];
      goto LABEL_101;
    }
LABEL_93:
    v50 = v34 + 1;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
    goto LABEL_95;
  }
LABEL_106:
  if (v7)
    CFRelease(v7);
  v29 = v69;
  if (v69)
    goto LABEL_109;
}

void sub_1BF43F454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, dispatch_object_t object, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if (*(char *)(v36 - 57) < 0)
    operator delete(*(void **)(v36 - 80));
  if (a35 < 0)
    operator delete(__p);
  MEMORY[0x1C3B893A8](v36 - 128);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v36 - 112));
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v36 - 104);
  _Unwind_Resume(a1);
}

void ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_16(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  void *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[5];
  void *v11;
  uint8_t buf[16];
  std::__shared_weak_count *v14;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v14 = v4;
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = v3[11];
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, "#I Pinging baseband to verify it is healthy", buf, 2u);
        }
        v10[0] = MEMORY[0x1E0C809B0];
        v10[1] = 0x40000000;
        v10[2] = ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_17;
        v10[3] = &__block_descriptor_tmp_19_3;
        v10[4] = v3;
        v7 = _Block_copy(v10);
        v11 = v7;
        HealthModule::getBasebandFWVersion_sync(v3, &v11);
        if (v7)
          _Block_release(v7);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF43F778(_Unwind_Exception *a1)
{
  const void *v1;
  uint64_t v2;

  if (v1)
    _Block_release(v1);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2 - 48);
  _Unwind_Resume(a1);
}

void ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_17(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  NSObject **v3;
  char v4;
  NSObject *v5;
  _QWORD *v6;
  HealthEventDB *v7;
  _QWORD *v8;
  HealthEventDB *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;

  v2 = (_QWORD *)a2;
  v26 = *MEMORY[0x1E0C80C00];
  v3 = *(NSObject ***)(a1 + 32);
  v4 = *(_BYTE *)(a2 + 23);
  if (v4 < 0)
  {
    if (*(_QWORD *)(a2 + 8))
    {
LABEL_3:
      v5 = v3[11];
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        if (v4 < 0)
          v2 = (_QWORD *)*v2;
        LODWORD(v25) = 136315138;
        *(_QWORD *)((char *)&v25 + 4) = v2;
        _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "#I Successfully received ping response from baseband (firmware version is %s)", (uint8_t *)&v25, 0xCu);
      }
      pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
      if (!(_QWORD)xmmword_1ED70FD78)
      {
        v7 = (HealthEventDB *)operator new(0x78uLL);
        HealthEventDB::HealthEventDB(v7);
        v6 = operator new(0x20uLL);
        *v6 = off_1E7905B88;
        v6[1] = 0;
        v6[2] = 0;
        v6[3] = v7;
        v10 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED70FD78 + 1);
        *(_QWORD *)&xmmword_1ED70FD78 = v7;
        *((_QWORD *)&xmmword_1ED70FD78 + 1) = v6;
        if (!v10)
        {
          *(_QWORD *)&v25 = v7;
          *((_QWORD *)&v25 + 1) = v6;
LABEL_25:
          v16 = v6 + 1;
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
LABEL_27:
          pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
          HealthEventDB::addHealthEvent(v7, 3);
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
          if (*((_QWORD *)&v25 + 1))
          {
            v19 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
          return;
        }
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v6 = (_QWORD *)*((_QWORD *)&xmmword_1ED70FD78 + 1);
      v7 = (HealthEventDB *)xmmword_1ED70FD78;
      v25 = xmmword_1ED70FD78;
      if (!*((_QWORD *)&xmmword_1ED70FD78 + 1))
        goto LABEL_27;
      goto LABEL_25;
    }
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    goto LABEL_3;
  }
  pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if (!(_QWORD)xmmword_1ED70FD78)
  {
    v9 = (HealthEventDB *)operator new(0x78uLL);
    HealthEventDB::HealthEventDB(v9);
    v8 = operator new(0x20uLL);
    *v8 = off_1E7905B88;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = v9;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED70FD78 + 1);
    *(_QWORD *)&xmmword_1ED70FD78 = v9;
    *((_QWORD *)&xmmword_1ED70FD78 + 1) = v8;
    if (!v13)
    {
      *(_QWORD *)&v25 = v9;
      *((_QWORD *)&v25 + 1) = v8;
LABEL_34:
      v21 = v8 + 1;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      goto LABEL_36;
    }
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v8 = (_QWORD *)*((_QWORD *)&xmmword_1ED70FD78 + 1);
  v9 = (HealthEventDB *)xmmword_1ED70FD78;
  v25 = xmmword_1ED70FD78;
  if (*((_QWORD *)&xmmword_1ED70FD78 + 1))
    goto LABEL_34;
LABEL_36:
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  HealthEventDB::addHealthEvent(v9, 4);
  if (*((_QWORD *)&v25 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v25 + 1) + 16))(*((_QWORD *)&v25 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v25 + 1));
    }
  }
  HealthModule::checkFailuresAgainstThresholdAndEraseEFSAccordingly_sync(v3);
}

void sub_1BF43FA88(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12HealthModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12HealthModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t ___ZNK3ctu20SharedSynchronizableI12HealthModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c41_ZTSNSt3__110shared_ptrIK12HealthModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c41_ZTSNSt3__110shared_ptrIK12HealthModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ctu::SharedLoggable<HealthModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7905AF8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void boost::throw_exception<std::length_error>(const std::logic_error *a1)
{
  void *exception;
  void *v3;

  exception = __cxa_allocate_exception(0x40uLL);
  v3 = (void *)boost::wrapexcept<std::length_error>::wrapexcept((uint64_t)exception, a1);
}

uint64_t boost::wrapexcept<std::length_error>::wrapexcept(uint64_t a1, const std::logic_error *a2)
{
  *(_QWORD *)a1 = &unk_1E78FDFD0;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &off_1E7905D18;
  *(_QWORD *)(a1 + 8) = &unk_1E7905D48;
  *(_QWORD *)(a1 + 24) = &unk_1E7905D70;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t boost::wrapexcept<std::length_error>::~wrapexcept(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_1E78FE028;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  MEMORY[0x1C3B89BAC](a1 + 8);
  return a1;
}

char *boost::wrapexcept<std::length_error>::clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_1E78FDFD0;
  std::logic_error::logic_error((std::logic_error *)(v2 + 8), (const std::logic_error *)(a1 + 8));
  *((_QWORD *)v2 + 1) = MEMORY[0x1E0DE5020] + 16;
  *((_QWORD *)v2 + 3) = &unk_1E78FE028;
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)v2 + 4) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &off_1E7905D18;
  *((_QWORD *)v2 + 1) = &unk_1E7905D48;
  *((_QWORD *)v2 + 3) = &unk_1E7905D70;
  boost::exception_detail::copy_boost_exception((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void boost::wrapexcept<std::length_error>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::length_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_1BF43FED0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::length_error>::~wrapexcept(_QWORD *a1)
{
  uint64_t v2;

  a1[3] = &unk_1E78FE028;
  v2 = a1[4];
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    a1[4] = 0;
  MEMORY[0x1C3B89BAC](a1 + 1);
  operator delete(a1);
}

void `non-virtual thunk to'boost::wrapexcept<std::length_error>::~wrapexcept(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 16) = &unk_1E78FE028;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
      *(_QWORD *)(a1 + 24) = 0;
  }
  JUMPOUT(0x1C3B89BACLL);
}

{
  uint64_t v2;

  *(_QWORD *)(a1 + 16) = &unk_1E78FE028;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 24) = 0;
  MEMORY[0x1C3B89BAC](a1);
  operator delete((void *)(a1 - 8));
}

void `non-virtual thunk to'boost::wrapexcept<std::length_error>::~wrapexcept(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E78FE028;
  v2 = a1[1];
  if (v2)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
      a1[1] = 0;
  }
  JUMPOUT(0x1C3B89BACLL);
}

{
  uint64_t v2;

  *a1 = &unk_1E78FE028;
  v2 = a1[1];
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    a1[1] = 0;
  MEMORY[0x1C3B89BAC](a1 - 2);
  operator delete(a1 - 3);
}

uint64_t boost::wrapexcept<std::length_error>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E78FDFD0;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE5020] + 16;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_1E78FE028;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &off_1E7905D18;
  *(_QWORD *)(a1 + 8) = &unk_1E7905D48;
  *(_QWORD *)(a1 + 24) = &unk_1E7905D70;
  return a1;
}

uint64_t __cxx_global_var_init_12()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<HealthEventDB>::~PthreadMutexGuardPolicy, &ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance, &dword_1BF335000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<abm::AWDHelper>::~PthreadMutexGuardPolicy, &ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance, &dword_1BF335000);
  }
  return result;
}

void HKWorkoutManager::create(NSObject **a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::allocate_shared[abi:ne180100]<HKWorkoutManager,std::allocator<HKWorkoutManager>,dispatch::workloop &,void>(a1, a2);
}

uint64_t HKWorkoutManager::HKWorkoutManager(uint64_t a1, dispatch_object_t *a2)
{
  NSObject *v3;
  void (**v4)(HKWorkoutManager *__hidden);
  const char *v5;
  unsigned __int8 v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *initially_inactive;
  NSObject *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  id v18;
  id v19;
  uint64_t v20;
  void *shared_weak_owners;
  std::__shared_weak_count *shared_owners;
  unint64_t v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  _BYTE v31[16];
  _QWORD block[5];
  _BYTE v33[16];

  *(_QWORD *)a1 = off_1E7905DC0;
  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    v4 = *(void (***)(HKWorkoutManager *__hidden))a1;
  }
  else
  {
    v4 = off_1E7905DC0;
  }
  v5 = (const char *)((uint64_t (*)(uint64_t))v4[6])(a1);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v31, "com.apple.telephony.abm", v5);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_2;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v8 = GetABMLogServer(void)::sLogServer;
    v7 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_9;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v8 = GetABMLogServer(void)::sLogServer;
    v7 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_9;
  }
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_9:
  if (v3)
    dispatch_retain(v3);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v12 = dispatch_queue_create_with_target_V2("workout.hk", initially_inactive, v3);
  dispatch_set_qos_class_floor(v12, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v12);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v12;
  if (v12)
    dispatch_retain(v12);
  *(_QWORD *)(a1 + 96) = v3;
  if (v3)
    dispatch_retain(v3);
  if (v12)
    dispatch_release(v12);
  if (v3)
    dispatch_release(v3);
  *(_QWORD *)a1 = off_1E7905EE8;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)block);
  *(_QWORD *)(a1 + 8) = &unk_1E78FB900;
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v7;
  if (v7)
  {
    v13 = (unint64_t *)&v7->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v33);
    *(_QWORD *)a1 = off_1E7905F78;
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v33);
    *(_QWORD *)a1 = off_1E7905F78;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v31);
  if (v3)
    dispatch_release(v3);
  *(_QWORD *)a1 = off_1E7905DC0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 140) = 0;
  v16 = (std::__shared_weak_count *)operator new(0x30uLL);
  v16->__shared_owners_ = 0;
  v17 = (unint64_t *)&v16->__shared_owners_;
  v16->__shared_weak_owners_ = 0;
  v16->__vftable = (std::__shared_weak_count_vtbl *)off_1E7905E98;
  v16[1].__vftable = 0;
  v16[1].__shared_owners_ = 0;
  v16[1].__shared_weak_owners_ = 0;
  v18 = objc_alloc(MEMORY[0x1E0CB7050]);
  v19 = objc_alloc_init(MEMORY[0x1E0CB6788]);
  v20 = objc_msgSend(v18, "initWithHealthStore:", v19);
  shared_weak_owners = (void *)v16[1].__shared_weak_owners_;
  v16[1].__shared_weak_owners_ = v20;

  *(_QWORD *)(a1 + 144) = v16 + 1;
  *(_QWORD *)(a1 + 152) = v16;
  shared_owners = (std::__shared_weak_count *)v16[1].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      return a1;
    do
      v23 = __ldxr(v17);
    while (__stxr(v23 + 1, v17));
    p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
    do
      v25 = __ldxr(p_shared_weak_owners);
    while (__stxr(v25 + 1, p_shared_weak_owners));
    v16[1].__vftable = (std::__shared_weak_count_vtbl *)&v16[1];
    v16[1].__shared_owners_ = (uint64_t)v16;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    do
      v26 = __ldxr(v17);
    while (__stxr(v26 + 1, v17));
    v27 = (unint64_t *)&v16->__shared_weak_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    v16[1].__vftable = (std::__shared_weak_count_vtbl *)&v16[1];
    v16[1].__shared_owners_ = (uint64_t)v16;
  }
  do
    v29 = __ldaxr(v17);
  while (__stlxr(v29 - 1, v17));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  return a1;
}

void sub_1BF4405BC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  std::__shared_weak_count *v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;

  v5 = *(std::__shared_weak_count **)(v2 + 32);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v2);
  operator delete(v6);
  v7 = (_QWORD *)v1[16];
  if (v7 == v1 + 13)
  {
    v8 = 4;
  }
  else
  {
    if (!v7)
      goto LABEL_8;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_8:
  ctu::SharedLoggable<HKWorkoutManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedLoggable<HKWorkoutManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7905EE8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7905EE8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void HKWorkoutManager::~HKWorkoutManager(HKWorkoutManager *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  HKWorkoutManager *v5;
  HKWorkoutManager *v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  std::__shared_weak_count *v10;

  *(_QWORD *)this = off_1E7905DC0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (HKWorkoutManager *)((char *)this + 104);
      v6 = (HKWorkoutManager *)*((_QWORD *)this + 16);
      if (v6 != (HKWorkoutManager *)((char *)this + 104))
        goto LABEL_6;
LABEL_9:
      v7 = 4;
      v6 = v5;
      goto LABEL_10;
    }
  }
  v5 = (HKWorkoutManager *)((char *)this + 104);
  v6 = (HKWorkoutManager *)*((_QWORD *)this + 16);
  if (v6 == (HKWorkoutManager *)((char *)this + 104))
    goto LABEL_9;
LABEL_6:
  if (!v6)
    goto LABEL_11;
  v7 = 5;
LABEL_10:
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_11:
  *(_QWORD *)this = off_1E7905EE8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v8 = *((_QWORD *)this + 12);
  if (v8)
    dispatch_release(v8);
  v9 = *((_QWORD *)this + 11);
  if (v9)
    dispatch_release(v9);
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
}

{
  void *v1;

  HKWorkoutManager::~HKWorkoutManager(this);
  operator delete(v1);
}

const char *HKWorkoutManager::getName(HKWorkoutManager *this)
{
  return "workout.hk";
}

void HKWorkoutManager::start(HKWorkoutManager *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = operator new(8uLL);
  *v6 = this;
  v7 = *((_QWORD *)this + 11);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = operator new(0x18uLL);
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<HKWorkoutManager>::execute_wrapped<HKWorkoutManager::start(void)::$_0>(HKWorkoutManager::start(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<HKWorkoutManager::start(void)::$_0,dispatch_queue_s *::default_delete<HKWorkoutManager::start(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void HKWorkoutManager::stop(HKWorkoutManager *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = operator new(8uLL);
  *v6 = this;
  v7 = *((_QWORD *)this + 11);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = operator new(0x18uLL);
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<HKWorkoutManager>::execute_wrapped<HKWorkoutManager::stop(void)::$_0>(HKWorkoutManager::stop(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<HKWorkoutManager::stop(void)::$_0,dispatch_queue_s *::default_delete<HKWorkoutManager::stop(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void HKWorkoutManager::registerCallback(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  NSObject *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = v20;
  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      v21 = v20;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v20);
    }
    else
    {
      v21 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    v21 = 0;
  }
  v5 = (std::__shared_weak_count *)a1[10];
  if (!v5 || (v6 = a1[9], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v9 = operator new(0x28uLL);
  v10 = v9;
  v11 = v21;
  *v9 = a1;
  if (v11)
  {
    if (v11 == v20)
    {
      v9[4] = v9 + 1;
      (*(void (**)(_QWORD *))(v20[0] + 24))(v20);
    }
    else
    {
      v9[4] = v11;
      v21 = 0;
    }
  }
  else
  {
    v9[4] = 0;
  }
  v12 = a1[11];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  v15 = operator new(0x18uLL);
  *v15 = v10;
  v15[1] = v6;
  v15[2] = v8;
  dispatch_async_f(v12, v15, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<HKWorkoutManager>::execute_wrapped<HKWorkoutManager::registerCallback(std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>)::$_0>(HKWorkoutManager::registerCallback(std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<HKWorkoutManager::registerCallback(std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>)::$_0,std::default_delete<HKWorkoutManager::registerCallback(std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v17 = v21;
    if (v21 != v20)
      goto LABEL_19;
LABEL_22:
    v18 = 4;
    goto LABEL_23;
  }
  v17 = v21;
  if (v21 == v20)
    goto LABEL_22;
LABEL_19:
  if (!v17)
    return;
  v18 = 5;
  v3 = v17;
LABEL_23:
  (*(void (**)(_QWORD *))(*v3 + 8 * v18))(v3);
}

void sub_1BF440B5C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<HKWorkoutManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<HKWorkoutManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<HKWorkoutManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

void std::__shared_ptr_emplace<HealthStoreManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E7905E98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HealthStoreManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E7905E98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<HealthStoreManager>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

_QWORD *ctu::Loggable<HKWorkoutManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7905EE8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<HKWorkoutManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7905EE8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::allocate_shared[abi:ne180100]<HKWorkoutManager,std::allocator<HKWorkoutManager>,dispatch::workloop &,void>(NSObject **a1@<X1>, uint64_t *a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  uint64_t v6;
  NSObject *v7;
  std::__shared_weak_count *shared_owners;
  unint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  dispatch_object_t v16;

  v4 = (std::__shared_weak_count *)operator new(0xB8uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E7905F28;
  v6 = (uint64_t)&v4[1];
  v7 = *a1;
  v16 = v7;
  if (v7)
    dispatch_retain(v7);
  HKWorkoutManager::HKWorkoutManager(v6, &v16);
  if (v7)
    dispatch_release(v7);
  *a2 = v6;
  a2[1] = (uint64_t)v4;
  shared_owners = (std::__shared_weak_count *)v4[4].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      return;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    v4[4].__vftable = (std::__shared_weak_count_vtbl *)v6;
    v4[4].__shared_owners_ = (uint64_t)v4;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v13 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v4[4].__vftable = (std::__shared_weak_count_vtbl *)v6;
    v4[4].__shared_owners_ = (uint64_t)v4;
  }
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_1BF440E4C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  NSObject *v2;
  void *v4;

  if (v2)
    dispatch_release(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<HKWorkoutManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E7905F28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HKWorkoutManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E7905F28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<HKWorkoutManager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ctu::SharedLoggable<HKWorkoutManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7905EE8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<HKWorkoutManager>::execute_wrapped<HKWorkoutManager::start(void)::$_0>(HKWorkoutManager::start(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<HKWorkoutManager::start(void)::$_0,dispatch_queue_s *::default_delete<HKWorkoutManager::start(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const char *v12;
  NSObject *v13;
  unint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint8_t v23[16];
  _QWORD handler[6];
  std::__shared_weak_count *v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  if (*(_BYTE *)(v3 + 136))
    goto LABEL_26;
  *(_BYTE *)(v3 + 136) = 1;
  v4 = *(std::__shared_weak_count **)(v3 + 80);
  if (!v4 || (v5 = *(_QWORD *)(v3 + 72), (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = (const char *)*MEMORY[0x1E0CB7658];
  v13 = *(NSObject **)(v3 + 88);
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3321888768;
  handler[2] = ___ZZN16HKWorkoutManager5startEvENK3__0clEv_block_invoke;
  handler[3] = &__block_descriptor_56_ea8_40c41_ZTSNSt3__18weak_ptrI16HKWorkoutManagerEE_e8_v12__0i8l;
  handler[4] = v3;
  handler[5] = v5;
  v25 = v7;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  notify_register_dispatch(v12, (int *)(v3 + 140), v13, handler);
  v15 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v23 = 0;
    _os_log_impl(&dword_1BF335000, v15, OS_LOG_TYPE_DEFAULT, "#I Workout manager started", v23, 2u);
  }
  v16 = *(_QWORD *)(v3 + 128);
  if (v16)
  {
    v17 = *(uint64_t **)(v3 + 144);
    if (v16 == v3 + 104)
    {
      v27 = v26;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v16 + 24))(v16, v26);
    }
    else
    {
      v27 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    }
    HealthStoreManager::queryWorkoutInfo(v17, v26);
    v18 = v27;
    if (v27 == v26)
    {
      v19 = 4;
      v18 = v26;
      goto LABEL_22;
    }
    if (v27)
    {
      v19 = 5;
LABEL_22:
      (*(void (**)(void))(*v18 + 8 * v19))();
    }
  }
  if (v25)
    std::__shared_weak_count::__release_weak(v25);
  std::__shared_weak_count::__release_weak(v7);
LABEL_26:
  operator delete(v2);
  v20 = (std::__shared_weak_count *)a1[2];
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  operator delete(a1);
}

void sub_1BF4411AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  _QWORD *v21;
  void *v22;
  std::__shared_weak_count *v23;
  char *v24;
  char *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;

  v26 = a21;
  if (a21 == v24)
  {
    v27 = 4;
    v26 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_6:
  if (a17)
    std::__shared_weak_count::__release_weak(a17);
  std::__shared_weak_count::__release_weak(v23);
  operator delete(v22);
  v28 = (std::__shared_weak_count *)v21[2];
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  operator delete(v21);
  _Unwind_Resume(a1);
}

void ___ZZN16HKWorkoutManager5startEvENK3__0clEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint8_t v13[8];
  std::__shared_weak_count *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v15 = v4;
    if (v4)
    {
      v5 = v4;
      if (!a1[5])
        goto LABEL_15;
      v6 = v3[5];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v13 = 0;
        _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, "#I Workout notification received", v13, 2u);
      }
      v7 = (_QWORD *)v3[16];
      if (!v7)
        goto LABEL_15;
      v8 = (uint64_t *)v3[18];
      if (v7 == v3 + 13)
      {
        v17 = v16;
        (*(void (**)(_QWORD *, _QWORD *))(*v7 + 24))(v7, v16);
      }
      else
      {
        v17 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 16))(v7);
      }
      HealthStoreManager::queryWorkoutInfo(v8, v16);
      v9 = v17;
      if (v17 == v16)
      {
        v10 = 4;
        v9 = v16;
      }
      else
      {
        if (!v17)
          goto LABEL_15;
        v10 = 5;
      }
      (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_15:
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF4413C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
    {
      std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
      _Unwind_Resume(a1);
    }
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void HealthStoreManager::queryWorkoutInfo(uint64_t *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[5];
  std::__shared_weak_count *v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = (void *)a1[2];
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3321888768;
  v17[2] = ___ZN18HealthStoreManager16queryWorkoutInfoENSt3__18functionIFvN3abm11WorkoutTypeENS2_12WorkoutStateENS2_15WorkoutLocationENS2_12SwimLocationEEEE_block_invoke;
  v17[3] = &__block_descriptor_80_ea8_32c43_ZTSNSt3__18weak_ptrI18HealthStoreManagerEE48c105_ZTSNSt3__18functionIFvN3abm11WorkoutTypeENS1_12WorkoutStateENS1_15WorkoutLocationENS1_12SwimLocationEEEE_e47_v24__0___HKCurrentWorkoutSnapshot_8__NSError_16l;
  v17[4] = v5;
  v18 = v7;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v14 = v19;
  v15 = a2[3];
  if (!v15)
    goto LABEL_14;
  if ((_QWORD *)v15 != a2)
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
LABEL_14:
    v20 = (_BYTE *)v15;
    goto LABEL_16;
  }
  v20 = v19;
  (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v19);
LABEL_16:
  objc_msgSend(v12, "currentWorkoutSnapshotWithCompletion:", v17);
  if (v20 == v19)
  {
    v16 = 4;
  }
  else
  {
    if (!v20)
      goto LABEL_21;
    v16 = 5;
    v14 = v20;
  }
  (*(void (**)(_QWORD *))(*v14 + 8 * v16))(v14);
LABEL_21:
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF4415B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  std::__shared_weak_count *v19;

  if (!a15)
  {
    std::__shared_weak_count::__release_weak(v19);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(a15);
  std::__shared_weak_count::__release_weak(v19);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c41_ZTSNSt3__18weak_ptrI16HKWorkoutManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_40c41_ZTSNSt3__18weak_ptrI16HKWorkoutManagerEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN18HealthStoreManager16queryWorkoutInfoENSt3__18functionIFvN3abm11WorkoutTypeENS2_12WorkoutStateENS2_15WorkoutLocationENS2_12SwimLocationEEEE_block_invoke(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  _BOOL4 v11;
  void *v12;
  void *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  void *v18;
  uint64_t v19;
  int v20;
  void *v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  int v29;
  unint64_t v30;
  uint8_t buf[4];
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (std::__shared_weak_count *)a1[5];
  if (v7)
  {
    v8 = std::__shared_weak_count::lock(v7);
    v28 = v8;
    if (v8)
    {
      v9 = v8;
      v27 = a1[4];
      if (v27)
      {
        v10 = a1[9];
        if (v10)
        {
          v11 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
          if (v5)
          {
            if (v11)
            {
              objc_msgSend(v5, "configuration");
              v12 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 134218240;
              v32 = objc_msgSend(v12, "activityType");
              v33 = 2048;
              v34 = objc_msgSend(v5, "state");
              _os_log_impl(&dword_1BF335000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "#I Workout callback; activity=%lu  session=%lu",
                buf,
                0x16u);

            }
            objc_msgSend(v5, "configuration", v27, v28);
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            v14 = objc_msgSend(v13, "activityType");

            v15 = 1;
            switch(v14)
            {
              case 13:
                v15 = 4;
                break;
              case 16:
                v15 = 3;
                break;
              case 35:
                v15 = 7;
                break;
              case 37:
                v15 = 6;
                break;
              case 46:
                break;
              case 52:
                v15 = 2;
                break;
              case 63:
                v15 = 8;
                break;
              case 68:
                v15 = 5;
                break;
              default:
                v15 = 9;
                break;
            }
            v16 = objc_msgSend(v5, "state");
            if (v16 == 2)
              v17 = 1;
            else
              v17 = 2 * (v16 == 4);
            objc_msgSend(v5, "configuration");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            v19 = objc_msgSend(v18, "locationType");

            if ((unint64_t)(v19 - 1) >= 3)
              v20 = 3;
            else
              v20 = v19 - 1;
            objc_msgSend(v5, "configuration");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            v22 = objc_msgSend(v21, "swimmingLocationType");

            v23 = 3;
            if (v22 < 3)
              v23 = v22;
            *(_DWORD *)buf = v15;
            v29 = v23;
            v30 = __PAIR64__(v17, v20);
            v24 = a1[9];
            if (!v24)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(uint64_t, uint8_t *, char *, unint64_t *, int *))(*(_QWORD *)v24 + 48))(v24, buf, (char *)&v30 + 4, &v30, &v29);
          }
          else
          {
            if (v11)
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1BF335000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "#I Workout callback with no data", buf, 2u);
              v10 = a1[9];
              *(_DWORD *)buf = 0;
              v30 = 0;
              v29 = 0;
              if (!v10)
                std::__throw_bad_function_call[abi:ne180100]();
            }
            else
            {
              *(_DWORD *)buf = 0;
              v30 = 0;
              v29 = 0;
            }
            (*(void (**)(uint64_t, uint8_t *, char *, unint64_t *, int *))(*(_QWORD *)v10 + 48))(v10, buf, (char *)&v30 + 4, &v30, &v29);
          }
        }
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }

}

void sub_1BF441964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c43_ZTSNSt3__18weak_ptrI18HealthStoreManagerEE48c105_ZTSNSt3__18functionIFvN3abm11WorkoutTypeENS1_12WorkoutStateENS1_15WorkoutLocationENS1_12SwimLocationEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t result;

  v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = a2[9];
  if (!result)
    goto LABEL_7;
  if ((_QWORD *)result != a2 + 6)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
LABEL_7:
    a1[9] = result;
    return result;
  }
  a1[9] = a1 + 6;
  return (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[9] + 24))(a2[9], a1 + 6);
}

void sub_1BF441A54(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_32c43_ZTSNSt3__18weak_ptrI18HealthStoreManagerEE48c105_ZTSNSt3__18functionIFvN3abm11WorkoutTypeENS1_12WorkoutStateENS1_15WorkoutLocationENS1_12SwimLocationEEEE(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (_QWORD *)(a1 + 48);
  v3 = *(_QWORD **)(a1 + 72);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

void dispatch::async<void ctu::SharedSynchronizable<HKWorkoutManager>::execute_wrapped<HKWorkoutManager::stop(void)::$_0>(HKWorkoutManager::stop(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<HKWorkoutManager::stop(void)::$_0,dispatch_queue_s *::default_delete<HKWorkoutManager::stop(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t v9[16];

  v2 = *a1;
  v3 = **a1;
  if (*(_BYTE *)(v3 + 136))
  {
    *(_BYTE *)(v3 + 136) = 0;
    v4 = *(_DWORD *)(v3 + 140);
    if (v4)
    {
      notify_cancel(v4);
      *(_DWORD *)(v3 + 140) = 0;
    }
    v5 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "#I Workout manager stopped", v9, 2u);
    }
  }
  operator delete(v2);
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(a1);
}

void sub_1BF441BA0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<HKWorkoutManager>::execute_wrapped<HKWorkoutManager::registerCallback(std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>)::$_0>(HKWorkoutManager::registerCallback(std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<HKWorkoutManager::registerCallback(std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>)::$_0,std::default_delete<HKWorkoutManager::registerCallback(std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  _QWORD v19[4];

  v19[3] = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  v4 = (uint64_t)(*a1 + 1);
  v5 = (*a1)[4];
  if (!v5)
    goto LABEL_4;
  if (v5 != v4)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
LABEL_4:
    v18 = (_QWORD *)v5;
    goto LABEL_6;
  }
  v18 = v17;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 24))(v4, v17);
LABEL_6:
  v6 = (_QWORD *)(v3 + 104);
  if ((_QWORD *)(v3 + 104) == v17)
    goto LABEL_15;
  v7 = v18;
  v8 = *(_QWORD **)(v3 + 128);
  if (v18 == v17)
  {
    if (v8 != v6)
    {
      (*(void (**)(_QWORD *, uint64_t))(v17[0] + 24))(v17, v3 + 104);
      (*(void (**)(_QWORD *))(*v18 + 32))(v18);
      v18 = *(_QWORD **)(v3 + 128);
      v10 = v18;
      *(_QWORD *)(v3 + 128) = v6;
      v9 = v10;
      if (v10 == v17)
        goto LABEL_19;
      goto LABEL_16;
    }
    memset(v19, 170, 24);
    (*(void (**)(_QWORD *, _QWORD *))(v17[0] + 24))(v17, v19);
    (*(void (**)(_QWORD *))(*v18 + 32))(v18);
    v18 = 0;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v3 + 128) + 24))(*(_QWORD *)(v3 + 128), v17);
    (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 128) + 32))(*(_QWORD *)(v3 + 128));
    *(_QWORD *)(v3 + 128) = 0;
    v18 = v17;
    (*(void (**)(_QWORD *, uint64_t))(v19[0] + 24))(v19, v3 + 104);
    (*(void (**)(_QWORD *))(v19[0] + 32))(v19);
    *(_QWORD *)(v3 + 128) = v6;
    v9 = v18;
    if (v18 != v17)
      goto LABEL_16;
LABEL_19:
    v11 = 4;
    v9 = v17;
    goto LABEL_20;
  }
  if (v8 == v6)
  {
    (*(void (**)(uint64_t, _QWORD *))(*v6 + 24))(v3 + 104, v17);
    (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 128) + 32))(*(_QWORD *)(v3 + 128));
    *(_QWORD *)(v3 + 128) = v18;
    v18 = v17;
LABEL_15:
    v9 = v18;
    if (v18 != v17)
      goto LABEL_16;
    goto LABEL_19;
  }
  v18 = *(_QWORD **)(v3 + 128);
  *(_QWORD *)(v3 + 128) = v7;
  v9 = v8;
  if (v8 == v17)
    goto LABEL_19;
LABEL_16:
  if (!v9)
    goto LABEL_21;
  v11 = 5;
LABEL_20:
  (*(void (**)(void))(*v9 + 8 * v11))();
LABEL_21:
  v12 = v2[4];
  if (v12 == v4)
  {
    v13 = 4;
    goto LABEL_25;
  }
  if (v12)
  {
    v13 = 5;
    v4 = v2[4];
LABEL_25:
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8 * v13))(v4);
  }
  operator delete(v2);
  v14 = (std::__shared_weak_count *)a1[2];
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  operator delete(a1);
}

void sub_1BF441EA0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t hasBasebandEntitlement(xpc_object_t *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  xpc_connection_t remote_connection;
  xpc_object_t v8;
  __int128 v9;
  void *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  uint64_t v15;
  uint64_t v16;
  xpc_object_t v17;
  void *v18;
  xpc_object_t v19;
  size_t count;
  size_t v21;
  size_t v22;
  xpc_object_t v23;
  int v24;
  xpc_object_t v25;
  xpc_object_t *v26;
  int v27;
  size_t v28;
  BOOL v29;
  xpc_object_t value;
  xpc_object_t v31;
  size_t v32;
  size_t v33;
  xpc_object_t v34;
  int v35;
  xpc_object_t v36;
  xpc_object_t *v37;
  int v38;
  size_t v39;
  xpc_object_t v41;
  char v42;
  xpc_object_t v43;
  xpc_object_t object[3];
  xpc_object_t v45;
  xpc_object_t xdict;
  __int128 v47;
  __int128 v48;
  void *__p;
  uint64_t v50;
  uint64_t v51;

  v4 = MEMORY[0x1C3B8A86C](*a1);
  v5 = MEMORY[0x1E0C812F8];
  if (v4 == MEMORY[0x1E0C812F8])
  {
    remote_connection = xpc_dictionary_get_remote_connection(*a1);
    if (remote_connection)
    {
      v8 = remote_connection;
      xpc_retain(remote_connection);
    }
    else
    {
      v8 = xpc_null_create();
    }
    if (MEMORY[0x1C3B8A86C](v8) != MEMORY[0x1E0C812E0])
    {
      v6 = 0;
LABEL_94:
      xpc_release(v8);
      return v6;
    }
    *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v47 = v9;
    v48 = v9;
    xpc_connection_get_audit_token();
    xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    v10 = (void *)xpc_copy_entitlement_for_token();
    v11 = v10;
    if (v10)
    {
      xdict = v10;
    }
    else
    {
      v11 = xpc_null_create();
      xdict = v11;
      if (!v11)
      {
        v12 = xpc_null_create();
        v11 = 0;
        goto LABEL_15;
      }
    }
    if (MEMORY[0x1C3B8A86C](v11) == v5)
    {
      xpc_retain(v11);
      goto LABEL_16;
    }
    v12 = xpc_null_create();
LABEL_15:
    xdict = v12;
LABEL_16:
    xpc_release(v11);
    v13 = xpc_null_create();
    if (MEMORY[0x1C3B8A86C](xdict) == v5)
    {
      __p = &xdict;
      v50 = kKeyEntitlementFineGrained;
      xpc::dict::object_proxy::operator xpc::array((uint64_t)&__p, object);
      v14 = object[0];
      object[0] = xpc_null_create();
      xpc_release(v13);
      xpc_release(object[0]);
      v13 = v14;
    }
    v15 = MEMORY[0x1C3B8A86C](v13);
    v16 = MEMORY[0x1E0C812C8];
    if (v15 != MEMORY[0x1E0C812C8])
    {
      v6 = 0;
LABEL_36:
      if ((a2 & 1) == 0)
      {
        if (MEMORY[0x1C3B8A86C](xdict) == v5)
        {
          value = xpc_dictionary_get_value(xdict, (const char *)kKeyEntitlementBasebanddAllow);
          v31 = value;
          __p = value;
          if (value)
          {
            xpc_retain(value);
          }
          else
          {
            v31 = xpc_null_create();
            __p = v31;
          }
          if (MEMORY[0x1C3B8A86C](v31) == MEMORY[0x1E0C81350])
          {
            v6 = 0;
          }
          else
          {
            v6 = xpc::dyn_cast_or_default((xpc *)&__p, 0);
            v31 = __p;
          }
          xpc_release(v31);
        }
        else
        {
          v6 = 0;
        }
      }
LABEL_93:
      xpc_release(v13);
      xpc_release(xdict);
      goto LABEL_94;
    }
    if (v13)
    {
      xpc_retain(v13);
      v17 = v13;
    }
    else
    {
      v17 = xpc_null_create();
      if (!v17)
      {
        v17 = xpc_null_create();
        v18 = 0;
LABEL_24:
        xpc_release(v18);
        if (v13)
        {
          xpc_retain(v13);
          v19 = v13;
        }
        else
        {
          v19 = xpc_null_create();
        }
        v41 = v13;
        if (MEMORY[0x1C3B8A86C](v13) == v16)
        {
          count = xpc_array_get_count(v13);
          if (v19)
            goto LABEL_29;
        }
        else
        {
          count = 0;
          if (v19)
          {
LABEL_29:
            xpc_retain(v19);
            v43 = v19;
            goto LABEL_32;
          }
        }
        v43 = xpc_null_create();
LABEL_32:
        xpc_release(v19);
        if (!count && v17 == v43)
        {
          v42 = 0;
LABEL_35:
          xpc_release(v43);
          xpc_release(v17);
          v13 = v41;
          v6 = v42 & 1;
          if ((v42 & 1) != 0)
            goto LABEL_93;
          goto LABEL_36;
        }
        if ((a2 & 1) != 0)
        {
          v42 = 0;
          v21 = 0;
          v22 = count - 1;
          while (1)
          {
            v45 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
            v23 = xpc_array_get_value(v17, v21);
            v45 = v23;
            if (v23)
              xpc_retain(v23);
            else
              v45 = xpc_null_create();
            memset(object, 170, sizeof(object));
            __p = 0;
            v50 = 0;
            v51 = 0;
            xpc::dyn_cast_or_default();
            if (SHIBYTE(v51) < 0)
              operator delete(__p);
            v24 = SHIBYTE(object[2]);
            v25 = SHIBYTE(object[2]) >= 0 ? (xpc_object_t)HIBYTE(object[2]) : object[1];
            if (v25 != (xpc_object_t)strlen((const char *)kBasebandXpcRestricted))
              break;
            v26 = SHIBYTE(object[2]) >= 0 ? object : (xpc_object_t *)object[0];
            if (memcmp(v26, (const void *)kBasebandXpcRestricted, (size_t)v25))
              break;
            v27 = 0;
            v42 = 1;
            if (v24 < 0)
              goto LABEL_55;
LABEL_56:
            xpc_release(v45);
            if (v27)
            {
              v28 = v21 + 1;
              v29 = v22 == v21++;
              if (!v29)
                continue;
              v21 = v28;
              if (v17 != v43)
                continue;
            }
            goto LABEL_35;
          }
          v27 = 1;
          if ((v24 & 0x80000000) == 0)
            goto LABEL_56;
LABEL_55:
          operator delete(object[0]);
          goto LABEL_56;
        }
        v42 = 0;
        v32 = 0;
        v33 = count - 1;
        while (1)
        {
          v45 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
          v34 = xpc_array_get_value(v17, v32);
          v45 = v34;
          if (v34)
            xpc_retain(v34);
          else
            v45 = xpc_null_create();
          memset(object, 170, sizeof(object));
          __p = 0;
          v50 = 0;
          v51 = 0;
          xpc::dyn_cast_or_default();
          if (SHIBYTE(v51) < 0)
            operator delete(__p);
          v35 = SHIBYTE(object[2]);
          v36 = SHIBYTE(object[2]) >= 0 ? (xpc_object_t)HIBYTE(object[2]) : object[1];
          if (v36 != (xpc_object_t)strlen((const char *)kBasebandXpc))
            break;
          v37 = SHIBYTE(object[2]) >= 0 ? object : (xpc_object_t *)object[0];
          if (memcmp(v37, (const void *)kBasebandXpc, (size_t)v36))
            break;
          v38 = 0;
          v42 = 1;
          if (v35 < 0)
            goto LABEL_80;
LABEL_81:
          xpc_release(v45);
          if (v38)
          {
            v39 = v32 + 1;
            v29 = v33 == v32++;
            if (!v29)
              continue;
            v32 = v39;
            if (v17 != v43)
              continue;
          }
          goto LABEL_35;
        }
        v38 = 1;
        if ((v35 & 0x80000000) == 0)
          goto LABEL_81;
LABEL_80:
        operator delete(object[0]);
        goto LABEL_81;
      }
    }
    xpc_retain(v17);
    v18 = v17;
    goto LABEL_24;
  }
  return 0;
}

void sub_1BF44246C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, uint64_t a10, xpc_object_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t a15, xpc_object_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,xpc_object_t object,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  void *v28;

  xpc_release(object);
  xpc_release(v28);
  xpc_release(a16);
  xpc_release(v27);
  _Unwind_Resume(a1);
}

RouterDelegate *RouterDelegate::create@<X0>(RouterDelegate **a1@<X8>)
{
  RouterDelegate *v3;
  RouterDelegate *result;

  v3 = (RouterDelegate *)operator new(0x58uLL);
  RouterDelegate::RouterDelegate(v3);
  *a1 = v3;
  result = (RouterDelegate *)operator new(0x20uLL);
  *(_QWORD *)result = off_1E79060C8;
  *((_QWORD *)result + 1) = 0;
  *((_QWORD *)result + 2) = 0;
  *((_QWORD *)result + 3) = v3;
  a1[1] = result;
  return result;
}

void sub_1BF4425F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1BF44260C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void RouterDelegate::RouterDelegate(RouterDelegate *this)
{
  NSObject *v1;
  NSObject *v2;
  unsigned __int8 v3;
  __int128 *v4;
  std::__shared_weak_count *v5;
  objc_class *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  char *v13;
  __int128 v14;
  std::__shared_weak_count *isa;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _BOOL4 v21;
  Class v22;
  uint64_t v23;
  uint64_t v24;
  std::string __p;
  dispatch_object_t v26;
  uint64_t v27;
  int v28;
  __int128 block;
  _BYTE v30[32];
  __int128 v31;
  __int128 v32;
  _BYTE v33[16];
  _BYTE buf[22];
  __int16 v35;
  const char *v36;
  __int16 v37;
  int v38;
  uint64_t v39;

  v1 = this;
  v39 = *MEMORY[0x1E0C80C00];
  v2 = off_1E7906018;
  *(_QWORD *)this = off_1E7906018;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v33, "com.apple.telephony.abm", "ipc.router.delegate");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 0x40000000;
  *(_QWORD *)v30 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  *(_QWORD *)&v30[8] = &__block_descriptor_tmp_13_2;
  v4 = &GetABMLogServer(void)::sLogServer;
  *(_QWORD *)&v30[16] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce != -1)
    goto LABEL_46;
  v5 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
  v6 = (objc_class *)GetABMLogServer(void)::sLogServer;
  v32 = GetABMLogServer(void)::sLogServer;
  if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
  {
LABEL_4:
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    goto LABEL_6;
  }
  while (1)
  {
LABEL_6:
    v1->isa = (Class)off_1E7906088;
    v4 = (__int128 *)&v1[1];
    ctu::OsLogContext::OsLogContext();
    ctu::OsLogContext::OsLogContext();
    ctu::LoggerCommonBase::LoggerCommonBase();
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&block);
    v1[1].isa = (Class)&unk_1E78FB900;
    v1[7].isa = v6;
    v1[8].isa = (Class)v5;
    if (v5)
    {
      v9 = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
      do
        v11 = __ldaxr(v9);
      while (__stlxr(v11 - 1, v9));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    }
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v33);
    v1->isa = (Class)v2;
    v1[9].isa = 0;
    v1[10].isa = 0;
    *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v30[16] = v12;
    v31 = v12;
    block = v12;
    *(_OWORD *)v30 = v12;
    v13 = (char *)operator new(0x38uLL);
    *(_OWORD *)&v30[8] = xmmword_1BF542890;
    strcpy(v13, "/var/wireless/Library/Logs/CoreTelephonyTraceScratch");
    *(_QWORD *)&v30[24] = 0;
    DWORD2(v31) = 17;
    LODWORD(block) = 1;
    *(_QWORD *)&v31 = 0xB00000015;
    *((_QWORD *)&block + 1) = RouterDelegate::getTime;
    *(_QWORD *)v30 = v13;
    std::string::__assign_external((std::string *)v30, (const std::string::value_type *)*MEMORY[0x1E0D01A28]);
    if ((v30[23] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v30, *(std::string::size_type *)&v30[8]);
    else
      __p = *(std::string *)v30;
    v26 = *(dispatch_object_t *)&v30[24];
    if (*(_QWORD *)&v30[24])
      dispatch_retain(*(dispatch_object_t *)&v30[24]);
    v27 = v31;
    v28 = DWORD2(v31);
    mav_router_t::create();
    v14 = *(_OWORD *)buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    isa = (std::__shared_weak_count *)v1[10].isa;
    *(_OWORD *)&v1[9].isa = v14;
    if (isa)
    {
      v16 = (unint64_t *)&isa->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))isa->__on_zero_shared)(isa);
        std::__shared_weak_count::__release_weak(isa);
      }
    }
    v18 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v19 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (v26)
      dispatch_release(v26);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v2 = v1[5].isa;
    v21 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
    v22 = v1[9].isa;
    if (v21)
    {
      v23 = *((_QWORD *)v22 + 2);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v23;
      _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I MavRouter is %p", buf, 0xCu);
      v2 = v1[5].isa;
      v22 = v1[9].isa;
      if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
LABEL_35:
        if (*((_QWORD *)v22 + 3))
          break;
        goto LABEL_43;
      }
    }
    else if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      goto LABEL_35;
    }
    v24 = *((_QWORD *)v22 + 3);
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v24;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I MavInterface is %p", buf, 0xCu);
    if (*((_QWORD *)v1[9].isa + 3))
      break;
LABEL_43:
    v1 = GetOsLogContext()[1];
    if (os_log_type_enabled(v1, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "ABM ASSERT";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "fRouter->interface";
      v35 = 2080;
      v36 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Ser"
            "ver/Transport/QMI/Driver/RouterDelegate.cpp";
      v37 = 1024;
      v38 = 28;
      _os_log_fault_impl(&dword_1BF335000, v1, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", buf, 0x26u);
    }
    __break(1u);
LABEL_46:
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v6 = *(objc_class **)v4;
    v5 = (std::__shared_weak_count *)*((_QWORD *)v4 + 1);
    *(_QWORD *)&v32 = *(_QWORD *)v4;
    *((_QWORD *)&v32 + 1) = v5;
    if (v5)
      goto LABEL_4;
  }
  if (*(_QWORD *)&v30[24])
    dispatch_release(*(dispatch_object_t *)&v30[24]);
  if ((v30[23] & 0x80000000) != 0)
    operator delete(*(void **)v30);
}

void sub_1BF442B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;

  va_start(va, a9);
  mav_router_parameters_t::~mav_router_parameters_t((mav_router_parameters_t *)va);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v10);
  *v9 = v11;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  _Unwind_Resume(a1);
}

void sub_1BF442B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  uint64_t v27;

  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a17);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v27 - 128));
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a27);
  _Unwind_Resume(a1);
}

const char *RouterDelegate::getName(RouterDelegate *this)
{
  return "ipc.router.delegate";
}

uint64_t RouterDelegate::getTime(RouterDelegate *this, unsigned int *a2, unsigned int *a3)
{
  uint64_t result;
  timeval v6;

  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  result = gettimeofday(&v6, 0);
  *(_DWORD *)this = v6.tv_sec;
  *a2 = 1000 * v6.tv_usec;
  return result;
}

void mav_router_parameters_t::~mav_router_parameters_t(mav_router_parameters_t *this)
{
  NSObject *v2;

  v2 = *((_QWORD *)this + 5);
  if (v2)
    dispatch_release(v2);
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

void RouterDelegate::~RouterDelegate(RouterDelegate *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  int v6;
  const char *v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E7906018;
  if (!*(_QWORD *)(*((_QWORD *)this + 9) + 24))
  {
    v5 = GetOsLogContext()[1];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      v6 = 136315906;
      v7 = "ABM ASSERT";
      v8 = 2080;
      v9 = "fRouter->interface";
      v10 = 2080;
      v11 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Ser"
            "ver/Transport/QMI/Driver/RouterDelegate.cpp";
      v12 = 1024;
      v13 = 33;
      _os_log_fault_impl(&dword_1BF335000, v5, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", (uint8_t *)&v6, 0x26u);
    }
    __break(1u);
  }
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E7906088;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
}

{
  void *v1;

  RouterDelegate::~RouterDelegate(this);
  operator delete(v1);
}

void sub_1BF442DB8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t RouterDelegate::getRouterInstance@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 80);
  *a2 = *(_QWORD *)(this + 72);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t RouterDelegate::getChannelForService(uint64_t a1, uint64_t *a2)
{
  NSObject *v3;
  uint64_t *v4;
  int v6;
  uint64_t *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0)
      v4 = a2;
    else
      v4 = (uint64_t *)*a2;
    v6 = 136315138;
    v7 = v4;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Get channel for service %s", (uint8_t *)&v6, 0xCu);
  }
  return mav_router_t::get_channel_for_service();
}

BOOL RouterDelegate::engage(RouterDelegate *this)
{
  NSObject *v2;
  uint8_t v4[16];

  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v4 = 0;
    _os_log_debug_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEBUG, "#D Engaging", v4, 2u);
  }
  return mav_router::device::controller::engage(*(mav_router::device::controller **)(*((_QWORD *)this + 9)
                                                                                                 + 24)) == 0;
}

uint64_t RouterDelegate::disengage(RouterDelegate *this)
{
  NSObject *v1;
  uint8_t v3[16];

  v1 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v3 = 0;
    _os_log_debug_impl(&dword_1BF335000, v1, OS_LOG_TYPE_DEBUG, "#D Disengaging", v3, 2u);
  }
  return 1;
}

BOOL RouterDelegate::sleep(RouterDelegate *this)
{
  NSObject *v2;
  uint8_t v4[16];

  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v4 = 0;
    _os_log_debug_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEBUG, "#D Sleeping", v4, 2u);
  }
  return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 9) + 24) + 56))(*(_QWORD *)(*((_QWORD *)this + 9) + 24)) == 0;
}

BOOL RouterDelegate::wake(RouterDelegate *this)
{
  NSObject *v2;
  uint8_t v4[16];

  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v4 = 0;
    _os_log_debug_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEBUG, "#D Waking", v4, 2u);
  }
  return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 9) + 24) + 64))(*(_QWORD *)(*((_QWORD *)this + 9) + 24)) == 0;
}

BOOL RouterDelegate::teardown(RouterDelegate *this)
{
  NSObject *v2;
  uint8_t v4[16];

  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v4 = 0;
    _os_log_debug_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEBUG, "#D Tearingdown", v4, 2u);
  }
  return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 9) + 24) + 40))(*(_QWORD *)(*((_QWORD *)this + 9) + 24)) == 0;
}

BOOL RouterDelegate::recover(RouterDelegate *this)
{
  NSObject *v2;
  uint8_t v4[16];

  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v4 = 0;
    _os_log_debug_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEBUG, "#D Recovering", v4, 2u);
  }
  return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 9) + 24) + 48))(*(_QWORD *)(*((_QWORD *)this + 9) + 24)) == 0;
}

BOOL RouterDelegate::hasFatalErrorOccurred(RouterDelegate *this)
{
  NSObject *v2;
  uint8_t v4[15];
  char v5;

  v5 = 0;
  (*(void (**)(_QWORD, char *))(**(_QWORD **)(*((_QWORD *)this + 9) + 24) + 72))(*(_QWORD *)(*((_QWORD *)this + 9) + 24), &v5);
  if (!v5)
    return 0;
  v2 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    return 1;
  *(_WORD *)v4 = 0;
  _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Fatal error has occurred", v4, 2u);
  return v5 != 0;
}

void RouterDelegate::getFatalErrorReason(RouterDelegate *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  int v5;
  NSObject *v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(*((_QWORD *)this + 9) + 24) + 80))(*(_QWORD *)(*((_QWORD *)this + 9) + 24), a2);
  v4 = *((unsigned __int8 *)a2 + 23);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = a2[1];
  if (v4)
  {
    v6 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = (uint64_t *)*a2;
      if (v5 >= 0)
        v7 = a2;
      v8 = 136315138;
      v9 = v7;
      _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, "#I Fatal error reason is '%s'", (uint8_t *)&v8, 0xCu);
    }
  }
}

void sub_1BF44334C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::Loggable<RouterDelegate,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<RouterDelegate,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 19;
  strcpy(a1, "ipc.router.delegate");
}

uint64_t ctu::Loggable<RouterDelegate,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<RouterDelegate,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7906088;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<RouterDelegate,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7906088;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__shared_ptr_pointer<RouterDelegate *,std::shared_ptr<RouterDelegate>::__shared_ptr_default_delete<RouterDelegate,RouterDelegate>,std::allocator<RouterDelegate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<RouterDelegate *,std::shared_ptr<RouterDelegate>::__shared_ptr_default_delete<RouterDelegate,RouterDelegate>,std::allocator<RouterDelegate>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<RouterDelegate *,std::shared_ptr<RouterDelegate>::__shared_ptr_default_delete<RouterDelegate,RouterDelegate>,std::allocator<RouterDelegate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF543C18)
    return a1 + 24;
  if (((v3 & 0x80000001BF543C18 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF543C18))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF543C18 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void abm::AWDHelperSetConnection(uint64_t *a1)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  __int128 v15;

  v1 = a1[1];
  v13 = *a1;
  v14 = (std::__shared_weak_count *)v1;
  if (v1)
  {
    v2 = (unint64_t *)(v1 + 8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
  }
  abm::AWDHelper::create(&v13, &v15);
  pthread_mutex_lock(&ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance);
  v4 = (std::__shared_weak_count *)off_1ED70FA58;
  *(_OWORD *)&qword_1ED70FA50 = v15;
  v15 = 0uLL;
  pthread_mutex_unlock(&ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1BF4435E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF443600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t abm::isWISServerAvailable(abm *this)
{
  return 1;
}

void abm::AWDHelper::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;

  v4 = operator new(0x10uLL);
  v5 = v4;
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *v4 = v6;
    v4[1] = v7;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    *v4 = v6;
    v4[1] = 0;
  }
  *a2 = v4;
  v11 = operator new(0x20uLL);
  *v11 = off_1E7906118;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = v5;
  a2[1] = v11;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1BF4436F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(v10);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void abm::AWDHelperGetConnection(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;

  pthread_mutex_lock(&ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance);
  v3 = (_QWORD *)qword_1ED70FA50;
  if (!qword_1ED70FA50)
  {
    abm::AWDHelper::create_default_global(&v19);
    v4 = v19;
    v19 = 0uLL;
    v5 = (std::__shared_weak_count *)off_1ED70FA58;
    *(_OWORD *)&qword_1ED70FA50 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v3 = (_QWORD *)qword_1ED70FA50;
  }
  v11 = (std::__shared_weak_count *)off_1ED70FA58;
  if (off_1ED70FA58)
  {
    v12 = (unint64_t *)((char *)off_1ED70FA58 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  pthread_mutex_unlock(&ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance);
  v14 = v3[1];
  *a1 = *v3;
  a1[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  if (v11)
  {
    v17 = (unint64_t *)&v11->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BF4438A4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance);
  _Unwind_Resume(a1);
}

uint64_t ctu::PthreadMutexGuardPolicy<abm::AWDHelper>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void std::__shared_ptr_pointer<abm::AWDHelper *,std::shared_ptr<abm::AWDHelper>::__shared_ptr_default_delete<abm::AWDHelper,abm::AWDHelper>,std::allocator<abm::AWDHelper>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<abm::AWDHelper *,std::shared_ptr<abm::AWDHelper>::__shared_ptr_default_delete<abm::AWDHelper,abm::AWDHelper>,std::allocator<abm::AWDHelper>>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (std::__shared_weak_count *)v1[1];
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      operator delete(v1);
    }
    else
    {
LABEL_6:
      operator delete(v1);
    }
  }
}

uint64_t std::__shared_ptr_pointer<abm::AWDHelper *,std::shared_ptr<abm::AWDHelper>::__shared_ptr_default_delete<abm::AWDHelper,abm::AWDHelper>,std::allocator<abm::AWDHelper>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF543CE3)
    return a1 + 24;
  if (((v3 & 0x80000001BF543CE3 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF543CE3))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF543CE3 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void abm::AWDHelper::create_default_global(_QWORD *a1@<X8>)
{
  wis::WISServerConnection *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  wis::WISServerConnection *v13;
  std::__shared_weak_count *v14;
  wis::WISServerConnection *v15;
  std::__shared_weak_count *v16;

  v3 = (wis::WISServerConnection *)operator new(0x10uLL);
  wis::WISServerConnection::WISServerConnection(v3);
  v15 = v3;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E7906168;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  v16 = v4;
  v13 = v3;
  v14 = v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  abm::AWDHelper::create((uint64_t *)&v13, a1);
  v7 = v14;
  if (v14)
  {
    v8 = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1BF443B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<wis::WISServerConnection *,std::shared_ptr<wis::WISServerConnection>::__shared_ptr_default_delete<wis::WISServerConnection,wis::WISServerConnection>,std::allocator<wis::WISServerConnection>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<wis::WISServerConnection *,std::shared_ptr<wis::WISServerConnection>::__shared_ptr_default_delete<wis::WISServerConnection,wis::WISServerConnection>,std::allocator<wis::WISServerConnection>>::__on_zero_shared(uint64_t a1)
{
  void *v1;

  if (*(_QWORD *)(a1 + 24))
  {
    v1 = (void *)MEMORY[0x1C3B89864]();
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<wis::WISServerConnection *,std::shared_ptr<wis::WISServerConnection>::__shared_ptr_default_delete<wis::WISServerConnection,wis::WISServerConnection>,std::allocator<wis::WISServerConnection>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF543DB9)
    return a1 + 24;
  if (((v3 & 0x80000001BF543DB9 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF543DB9))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF543DB9 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

_QWORD *Stats::Stats(_QWORD *a1, uint64_t a2)
{
  const char *v4;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  _BYTE v15[16];
  dispatch_object_t object[5];

  v4 = (const char *)a2;
  if (*(char *)(a2 + 23) < 0)
    v4 = *(const char **)a2;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v15, "com.apple.telephony.abm", v4);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  object[0] = (dispatch_object_t)MEMORY[0x1E0C809B0];
  object[1] = (dispatch_object_t)0x40000000;
  object[2] = (dispatch_object_t)___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  object[3] = (dispatch_object_t)&__block_descriptor_tmp_13_2;
  object[4] = (dispatch_object_t)&GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v6 = *(_QWORD *)algn_1ED710088;
    v13 = GetABMLogServer(void)::sLogServer;
    v14 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_8;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, object);
    v6 = *(_QWORD *)algn_1ED710088;
    v13 = GetABMLogServer(void)::sLogServer;
    v14 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_8;
  }
  v7 = (unint64_t *)(v6 + 8);
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
LABEL_8:
  object[0] = 0;
  ctu::SharedSynchronizable<Stats>::SharedSynchronizable(a1 + 9, a2, 0, object);
  if (object[0])
    dispatch_release(object[0]);
  ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(a1, (uint64_t)v15, &v13);
  *a1 = off_1E79062C0;
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v15);
  *a1 = off_1E79061B8;
  return a1;
}

void sub_1BF443E80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v2);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  _Unwind_Resume(a1);
}

void sub_1BF443EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a12);
  _Unwind_Resume(a1);
}

void Stats::~Stats(Stats *this)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *(_QWORD *)this = off_1E7906280;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = *((_QWORD *)this + 12);
  if (v2)
    dispatch_release(v2);
  v3 = *((_QWORD *)this + 11);
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

uint64_t Stats::create@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  __n128 v3;
  uint64_t result;
  NSObject *v5;
  _BYTE v6[22];
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  a2[1] = 0;
  if (a1)
  {
    v5 = GetOsLogContext()[1];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v6 = 136315906;
      *(_QWORD *)&v6[4] = "ABM ASSERT";
      *(_WORD *)&v6[12] = 2080;
      *(_QWORD *)&v6[14] = "statsType != statsType";
      v7 = 2080;
      v8 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Serv"
           "er/Stats/Stats.cpp";
      v9 = 1024;
      v10 = 33;
      _os_log_fault_impl(&dword_1BF335000, v5, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", v6, 0x26u);
    }
    __break(1u);
  }
  BootStats::createInternal(v6);
  v3 = *(__n128 *)v6;
  *(_OWORD *)a2 = *(_OWORD *)v6;
  result = v3.n128_u64[0];
  if (v3.n128_u64[0])
    return (*(uint64_t (**)(unint64_t, _QWORD, __n128))(*(_QWORD *)v3.n128_u64[0] + 48))(v3.n128_u64[0], 0, v3);
  return result;
}

void sub_1BF444034(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1BF444048(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1BF44405C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t Stats::init(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 104) = a2;
  return 1;
}

_QWORD *ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7906280;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7906280;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

_QWORD *ctu::SharedSynchronizable<Stats>::SharedSynchronizable(_QWORD *a1, uint64_t a2, dispatch_queue_attr_t attr, dispatch_object_t *a4)
{
  const char *v6;
  NSObject *v7;
  NSObject *v8;

  if (*(char *)(a2 + 23) >= 0)
    v6 = (const char *)a2;
  else
    v6 = *(const char **)a2;
  v7 = *a4;
  if (*a4)
  {
    dispatch_retain(*a4);
    dispatch_retain(v7);
    v8 = dispatch_queue_create_with_target_V2(v6, attr, v7);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = v8;
    if (!v8)
      goto LABEL_7;
    goto LABEL_6;
  }
  v8 = dispatch_queue_create(v6, attr);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = v8;
  if (v8)
LABEL_6:
    dispatch_retain(v8);
LABEL_7:
  a1[3] = v7;
  if (v7)
    dispatch_retain(v7);
  if (v8)
    dispatch_release(v8);
  if (v7)
  {
    dispatch_release(v7);
    dispatch_release(v7);
  }
  return a1;
}

_QWORD *ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  _BYTE v10[16];

  *a1 = off_1E7906280;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  a1[1] = &unk_1E78FB900;
  a1[7] = *a3;
  v5 = a3[1];
  a1[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v9);
  return a1;
}

void sub_1BF444254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedLoggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7906280;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7906280;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void AntennaModule::create(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL4 v33;
  NSObject *v34;
  NSObject *v35;
  uint64_t v36[2];
  uint64_t block;
  uint64_t v38;
  void (*v39)(uint64_t);
  void *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;

  v4 = dispatch_workloop_create("antenna.wl");
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v5 = operator new(0xC0uLL);
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  v36[0] = v6;
  v36[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  v35 = v4;
  if (v4)
    dispatch_retain(v4);
  AntennaModule::AntennaModule((uint64_t)v5, v36, &v35);
  *a2 = (uint64_t)v5;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v10 = (std::__shared_weak_count *)operator new(0x20uLL);
  v10->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)off_1E79066C8;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  a2[1] = (uint64_t)v10;
  v12 = (std::__shared_weak_count *)*((_QWORD *)v5 + 16);
  if (v12)
  {
    if (v12->__shared_owners_ != -1)
      goto LABEL_18;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v14 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    *((_QWORD *)v5 + 15) = v5;
    *((_QWORD *)v5 + 16) = v10;
    std::__shared_weak_count::__release_weak(v12);
  }
  else
  {
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    *((_QWORD *)v5 + 15) = v5;
    *((_QWORD *)v5 + 16) = v10;
  }
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v20 = (_QWORD *)*a2;
    if (!*(_QWORD *)(*a2 + 104))
      goto LABEL_34;
    goto LABEL_19;
  }
LABEL_18:
  v20 = (_QWORD *)*a2;
  if (!*(_QWORD *)(*a2 + 104))
    goto LABEL_34;
LABEL_19:
  v21 = (std::__shared_weak_count *)v20[16];
  if (!v21 || (v22 = v20[15], (v23 = std::__shared_weak_count::lock(v21)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v24 = v23;
  block = v22;
  v38 = (uint64_t)v23;
  ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v20 + 7));
  v25 = v22 + 48;
  if (!v22)
    v25 = 0;
  v43 = v25;
  v44 = v24;
  block = 0;
  v38 = 0;
  ctu::TrackedLogger::registerLoggerToServer();
  v26 = v44;
  if (v44)
  {
    v27 = (unint64_t *)&v44->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)v38;
  if (v38)
  {
    v30 = (unint64_t *)(v38 + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
LABEL_34:
  if (v4)
    dispatch_release(v4);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  v32 = *a2;
  v43 = v32;
  if (*(_QWORD *)(v32 + 144))
  {
    if ((dispatch_workloop_is_current() & 1) != 0)
    {
      AntennaModule::init(void)::$_0::operator()(v32);
      if (!v4)
        return;
      goto LABEL_41;
    }
    v33 = *(_QWORD *)(v32 + 144) == 0;
  }
  else
  {
    v33 = 1;
  }
  block = MEMORY[0x1E0C809B0];
  v38 = 0x40000000;
  v39 = ___ZNK3ctu20SharedSynchronizableI13AntennaModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  v40 = &__block_descriptor_tmp_32_2;
  v41 = v32 + 120;
  v42 = &v43;
  v34 = *(NSObject **)(v32 + 136);
  if (v33)
  {
    dispatch_sync(v34, &block);
    if (!v4)
      return;
LABEL_41:
    dispatch_release(v4);
    return;
  }
  dispatch_async_and_wait(v34, &block);
  if (v4)
    goto LABEL_41;
}

void sub_1BF444618()
{
  __break(1u);
}

void sub_1BF444660()
{
  __cxa_end_catch();
  JUMPOUT(0x1BF444694);
}

void sub_1BF444670()
{
  JUMPOUT(0x1BF444698);
}

void sub_1BF44467C()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x1BF4446B0);
  JUMPOUT(0x1BF4446DCLL);
}

void AntennaModule::init(NSObject **this)
{
  _BOOL4 v2;
  NSObject *v3;
  AntennaModule *v4;
  _QWORD block[6];

  v4 = (AntennaModule *)this;
  if (this[18])
  {
    if ((dispatch_workloop_is_current() & 1) != 0)
    {
      AntennaModule::init(void)::$_0::operator()((uint64_t)this);
      return;
    }
    v2 = this[18] == 0;
  }
  else
  {
    v2 = 1;
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI13AntennaModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  block[3] = &__block_descriptor_tmp_32_2;
  block[4] = this + 15;
  block[5] = &v4;
  v3 = this[17];
  if (v2)
    dispatch_sync(v3, block);
  else
    dispatch_async_and_wait(v3, block);
}

const char *AntennaModule::getName(AntennaModule *this)
{
  return "antenna.mod";
}

uint64_t AntennaModule::AntennaModule(uint64_t a1, uint64_t *a2, NSObject **a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  NSObject *v11;
  void (**v12)(AntennaModule *__hidden);
  const char *v13;
  unsigned __int8 v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  NSObject *initially_inactive;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE v25[16];
  _QWORD block[5];
  _BYTE v27[16];

  v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_1E7908A38;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v6);
    *(_QWORD *)a1 = &unk_1E78FC4E8;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_1E78FC4E8;
    *(_QWORD *)(a1 + 8) = v5;
  }
  *(_QWORD *)a1 = off_1E7906318;
  *(_QWORD *)(a1 + 48) = &unk_1E7906388;
  v11 = *a3;
  if (v11)
  {
    dispatch_retain(v11);
    v12 = *(void (***)(AntennaModule *__hidden))a1;
  }
  else
  {
    v12 = off_1E7906318;
  }
  v13 = (const char *)((uint64_t (*)(uint64_t))v12[2])(a1);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v25, "com.apple.telephony.abm", v13);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_2;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v16 = GetABMLogServer(void)::sLogServer;
    v15 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_17;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v16 = GetABMLogServer(void)::sLogServer;
    v15 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_17;
  }
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  do
    v18 = __ldxr(p_shared_owners);
  while (__stxr(v18 + 1, p_shared_owners));
LABEL_17:
  if (v11)
    dispatch_retain(v11);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v20 = dispatch_queue_create_with_target_V2("antenna.mod", initially_inactive, v11);
  dispatch_set_qos_class_floor(v20, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v20);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v20;
  if (v20)
    dispatch_retain(v20);
  *(_QWORD *)(a1 + 144) = v11;
  if (v11)
    dispatch_retain(v11);
  if (v20)
    dispatch_release(v20);
  if (v11)
    dispatch_release(v11);
  *(_QWORD *)(a1 + 48) = off_1E7906688;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)block);
  *(_QWORD *)(a1 + 56) = &unk_1E78FB900;
  *(_QWORD *)(a1 + 104) = v16;
  *(_QWORD *)(a1 + 112) = v15;
  if (v15)
  {
    v21 = (unint64_t *)&v15->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v27);
    *(_QWORD *)(a1 + 48) = off_1E7906718;
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 - 1, v21));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v27);
    *(_QWORD *)(a1 + 48) = off_1E7906718;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v25);
  if (v11)
    dispatch_release(v11);
  *(_QWORD *)a1 = off_1E7906318;
  *(_QWORD *)(a1 + 48) = &unk_1E7906388;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  return a1;
}

void sub_1BF444B1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  Service *v2;
  NSObject *v3;
  _QWORD *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  va_list va2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va3);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v4);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  if (v3)
    dispatch_release(v3);
  Service::~Service(v2);
  _Unwind_Resume(a1);
}

void AntennaModule::~AntennaModule(AntennaModule *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  void **v9;
  NSObject *v10;
  NSObject *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void **v16;
  std::__shared_weak_count *v17;
  __int16 v18[8];

  *(_QWORD *)this = off_1E7906318;
  *((_QWORD *)this + 6) = &unk_1E7906388;
  v2 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v18[0] = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", (uint8_t *)v18, 2u);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  v9 = (void **)*((_QWORD *)this + 19);
  if (v9)
  {
    do
    {
      v16 = (void **)*v9;
      if (*((char *)v9 + 31) < 0)
        operator delete(v9[1]);
      operator delete(v9);
      v9 = v16;
    }
    while (v16);
  }
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 6) = off_1E7906688;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v10 = *((_QWORD *)this + 18);
  if (v10)
    dispatch_release(v10);
  v11 = *((_QWORD *)this + 17);
  if (v11)
    dispatch_release(v11);
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  *(_QWORD *)this = off_1E7908A38;
  v13 = *((_QWORD *)this + 3);
  if (v13)
  {
    v14 = *((_QWORD *)this + 4);
    v15 = (void *)*((_QWORD *)this + 3);
    if (v14 != v13)
    {
      do
      {
        if (*(char *)(v14 - 1) < 0)
          operator delete(*(void **)(v14 - 24));
        v14 -= 24;
      }
      while (v14 != v13);
      v15 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v13;
    operator delete(v15);
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
}

{
  void *v1;

  AntennaModule::~AntennaModule(this);
  operator delete(v1);
}

void `non-virtual thunk to'AntennaModule::~AntennaModule(AntennaModule *this)
{
  AntennaModule::~AntennaModule((AntennaModule *)((char *)this - 48));
}

{
  void *v1;

  AntennaModule::~AntennaModule((AntennaModule *)((char *)this - 48));
  operator delete(v1);
}

_WORD *AntennaModule::getShutdownStages@<X0>(_QWORD *a1@<X8>)
{
  _WORD *v3;
  _WORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(2uLL);
  *a1 = v3;
  *v3 = 770;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void AntennaModule::shutdown(uint64_t a1, int a2, NSObject **a3)
{
  uint64_t *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t *v6;
  NSObject *v7;
  _QWORD v8[5];
  dispatch_group_t object;
  _QWORD v10[5];
  dispatch_group_t group;

  if (a2 != 3)
  {
    if (a2 != 2)
      return;
    v3 = (uint64_t *)(a1 + 120);
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 1174405120;
    v10[2] = ___ZN13AntennaModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
    v10[3] = &__block_descriptor_tmp_28;
    v4 = *a3;
    v10[4] = a1;
    group = v4;
    if (v4)
    {
      dispatch_retain(v4);
      dispatch_group_enter(v4);
    }
    ctu::SharedSynchronizable<AntennaModule>::execute_wrapped(v3, (uint64_t)v10);
    if (!group)
      return;
    dispatch_group_leave(group);
    v5 = group;
    if (!group)
      return;
LABEL_12:
    dispatch_release(v5);
    return;
  }
  v6 = (uint64_t *)(a1 + 120);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1174405120;
  v8[2] = ___ZN13AntennaModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_5;
  v8[3] = &__block_descriptor_tmp_6_6;
  v7 = *a3;
  v8[4] = a1;
  object = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(v7);
  }
  ctu::SharedSynchronizable<AntennaModule>::execute_wrapped(v6, (uint64_t)v8);
  if (object)
  {
    dispatch_group_leave(object);
    v5 = object;
    if (object)
      goto LABEL_12;
  }
}

void ___ZN13AntennaModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  antenna::Service::Internal *v1;

  v1 = **(antenna::Service::Internal ***)(*(_QWORD *)(a1 + 32) + 176);
  if (v1)
    antenna::Service::Internal::shutdown(v1);
}

void ___ZN13AntennaModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_5(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 168);
  *(_QWORD *)(v1 + 160) = 0;
  *(_QWORD *)(v1 + 168) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void AntennaModule::initialize(_QWORD *a1, NSObject **a2)
{
  uint64_t *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD v15[5];
  dispatch_group_t group;

  v3 = a1 + 15;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1174405120;
  v15[2] = ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v15[3] = &__block_descriptor_tmp_15_4;
  v4 = *a2;
  v15[4] = a1;
  group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  ctu::SharedSynchronizable<AntennaModule>::execute_wrapped(v3, (uint64_t)v15);
  v5 = (std::__shared_weak_count *)a1[16];
  if (!v5 || (v6 = a1[15], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v9 = operator new(8uLL);
  *v9 = a1;
  v10 = a1[17];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = operator new(0x18uLL);
  *v13 = v9;
  v13[1] = v6;
  v13[2] = v8;
  dispatch_async_f(v10, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped<AntennaModule::initialize(dispatch::group_session)::$_0>(AntennaModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AntennaModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<AntennaModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void *v10;
  size_t v11;
  size_t v12;
  void **p_dst;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  const void *v19;
  size_t v20;
  size_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  const void *v27;
  size_t v28;
  size_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  const void *v35;
  size_t v36;
  size_t v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  _QWORD v43[6];
  std::__shared_weak_count *v44;
  const void *v45;
  _QWORD v46[6];
  std::__shared_weak_count *v47;
  const void *v48;
  _QWORD v49[6];
  std::__shared_weak_count *v50;
  const void *v51;
  _QWORD aBlock[6];
  std::__shared_weak_count *v53;
  const void *v54;
  void **__dst;
  size_t v56;
  unint64_t v57;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (v3 = *(_QWORD *)(v1 + 120), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (const void *)*MEMORY[0x1E0CFB4E8];
  v11 = strlen((const char *)*MEMORY[0x1E0CFB4E8]);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (void **)operator new(v14 + 1);
    v56 = v12;
    v57 = v15 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v57) = v11;
    p_dst = (void **)&__dst;
    if (!v11)
      goto LABEL_17;
  }
  memmove(p_dst, v10, v12);
LABEL_17:
  *((_BYTE *)p_dst + v12) = 0;
  v16 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_8_6;
  aBlock[4] = v1;
  aBlock[5] = v3;
  v53 = v5;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  v18 = _Block_copy(aBlock);
  v54 = v18;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v54);
  if (v18)
    _Block_release(v18);
  if (SHIBYTE(v57) < 0)
    operator delete(__dst);
  v19 = (const void *)*MEMORY[0x1E0CFB1C8];
  v20 = strlen((const char *)*MEMORY[0x1E0CFB1C8]);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = (void **)operator new(v23 + 1);
    v56 = v21;
    v57 = v24 | 0x8000000000000000;
    __dst = v22;
  }
  else
  {
    HIBYTE(v57) = v20;
    v22 = (void **)&__dst;
    if (!v20)
      goto LABEL_31;
  }
  memmove(v22, v19, v21);
LABEL_31:
  *((_BYTE *)v22 + v21) = 0;
  v49[0] = v16;
  v49[1] = 1174405120;
  v49[2] = ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke_9;
  v49[3] = &__block_descriptor_tmp_10_2;
  v49[4] = v1;
  v49[5] = v3;
  v50 = v5;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  v26 = _Block_copy(v49);
  v51 = v26;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v51);
  if (v26)
    _Block_release(v26);
  if (SHIBYTE(v57) < 0)
    operator delete(__dst);
  v27 = (const void *)*MEMORY[0x1E0CFBAB8];
  v28 = strlen((const char *)*MEMORY[0x1E0CFBAB8]);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v29 = v28;
  if (v28 >= 0x17)
  {
    v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v31 = v28 | 7;
    v32 = v31 + 1;
    v30 = (void **)operator new(v31 + 1);
    v56 = v29;
    v57 = v32 | 0x8000000000000000;
    __dst = v30;
  }
  else
  {
    HIBYTE(v57) = v28;
    v30 = (void **)&__dst;
    if (!v28)
      goto LABEL_45;
  }
  memmove(v30, v27, v29);
LABEL_45:
  *((_BYTE *)v30 + v29) = 0;
  v46[0] = v16;
  v46[1] = 1174405120;
  v46[2] = ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke_11;
  v46[3] = &__block_descriptor_tmp_12_6;
  v46[4] = v1;
  v46[5] = v3;
  v47 = v5;
  do
    v33 = __ldxr(p_shared_weak_owners);
  while (__stxr(v33 + 1, p_shared_weak_owners));
  v34 = _Block_copy(v46);
  v48 = v34;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v48);
  if (v34)
    _Block_release(v34);
  if (SHIBYTE(v57) < 0)
    operator delete(__dst);
  v35 = (const void *)*MEMORY[0x1E0CFBAA8];
  v36 = strlen((const char *)*MEMORY[0x1E0CFBAA8]);
  if (v36 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v37 = v36;
  if (v36 >= 0x17)
  {
    v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v39 = v36 | 7;
    v40 = v39 + 1;
    v38 = (void **)operator new(v39 + 1);
    v56 = v37;
    v57 = v40 | 0x8000000000000000;
    __dst = v38;
  }
  else
  {
    HIBYTE(v57) = v36;
    v38 = (void **)&__dst;
    if (!v36)
      goto LABEL_59;
  }
  memmove(v38, v35, v37);
LABEL_59:
  *((_BYTE *)v38 + v37) = 0;
  v43[0] = v16;
  v43[1] = 1174405120;
  v43[2] = ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke_13;
  v43[3] = &__block_descriptor_tmp_14_2;
  v43[4] = v1;
  v43[5] = v3;
  v44 = v5;
  do
    v41 = __ldxr(p_shared_weak_owners);
  while (__stxr(v41 + 1, p_shared_weak_owners));
  v42 = _Block_copy(v43);
  v45 = v42;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v45);
  if (v42)
    _Block_release(v42);
  if (SHIBYTE(v57) < 0)
    operator delete(__dst);
  if (v44)
    std::__shared_weak_count::__release_weak(v44);
  if (v47)
    std::__shared_weak_count::__release_weak(v47);
  if (v50)
    std::__shared_weak_count::__release_weak(v50);
  if (v53)
    std::__shared_weak_count::__release_weak(v53);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF445578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39)
{
  std::__shared_weak_count *v39;
  const void *v40;
  uint64_t v41;
  std::__shared_weak_count *v43;

  if (v40)
    _Block_release(v40);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if ((*(char *)(v41 - 105) & 0x80000000) == 0)
    {
LABEL_5:
      v43 = a23;
      if (!a23)
      {
LABEL_10:
        if (a31)
          std::__shared_weak_count::__release_weak(a31);
        if (a39)
        {
          std::__shared_weak_count::__release_weak(a39);
          std::__shared_weak_count::__release_weak(v39);
          _Unwind_Resume(a1);
        }
        std::__shared_weak_count::__release_weak(v39);
        _Unwind_Resume(a1);
      }
LABEL_9:
      std::__shared_weak_count::__release_weak(v43);
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v41 - 105) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v41 - 128));
  v43 = a23;
  if (!a23)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke_2(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  xpc_object_t v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v13 = *a2;
  if (v13)
  {
    xpc_retain(v13);
    v14 = *a3;
    if (*a3)
      goto LABEL_11;
  }
  else
  {
    v13 = xpc_null_create();
    v14 = *a3;
    if (*a3)
    {
LABEL_11:
      v15 = _Block_copy(v14);
      v16 = (std::__shared_weak_count *)v7[16];
      if (!v16)
LABEL_24:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_15;
    }
  }
  v15 = 0;
  v16 = (std::__shared_weak_count *)v7[16];
  if (!v16)
    goto LABEL_24;
LABEL_15:
  v17 = v7[15];
  v18 = std::__shared_weak_count::lock(v16);
  if (!v18)
    goto LABEL_24;
  v19 = v18;
  v20 = operator new(0x18uLL);
  *v20 = v7;
  v20[1] = v13;
  v21 = xpc_null_create();
  v20[2] = v15;
  v22 = v7[17];
  v23 = (unint64_t *)&v19->__shared_owners_;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  v25 = operator new(0x18uLL);
  *v25 = v20;
  v25[1] = v17;
  v25[2] = v19;
  dispatch_async_f(v22, v25, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
  do
    v26 = __ldaxr(v23);
  while (__stlxr(v26 - 1, v23));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  xpc_release(v21);
}

uint64_t __copy_helper_block_e8_40c38_ZTSNSt3__18weak_ptrI13AntennaModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c38_ZTSNSt3__18weak_ptrI13AntennaModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke_9(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  xpc_object_t v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v13 = *a2;
  if (v13)
  {
    xpc_retain(v13);
    v14 = *a3;
    if (*a3)
      goto LABEL_11;
  }
  else
  {
    v13 = xpc_null_create();
    v14 = *a3;
    if (*a3)
    {
LABEL_11:
      v15 = _Block_copy(v14);
      v16 = (std::__shared_weak_count *)v7[16];
      if (!v16)
LABEL_24:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_15;
    }
  }
  v15 = 0;
  v16 = (std::__shared_weak_count *)v7[16];
  if (!v16)
    goto LABEL_24;
LABEL_15:
  v17 = v7[15];
  v18 = std::__shared_weak_count::lock(v16);
  if (!v18)
    goto LABEL_24;
  v19 = v18;
  v20 = operator new(0x18uLL);
  *v20 = v7;
  v20[1] = v13;
  v21 = xpc_null_create();
  v20[2] = v15;
  v22 = v7[17];
  v23 = (unint64_t *)&v19->__shared_owners_;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  v25 = operator new(0x18uLL);
  *v25 = v20;
  v25[1] = v17;
  v25[2] = v19;
  dispatch_async_f(v22, v25, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
  do
    v26 = __ldaxr(v23);
  while (__stlxr(v26 - 1, v23));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  xpc_release(v21);
}

void ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke_11(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  xpc_object_t v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v13 = *a2;
  if (v13)
  {
    xpc_retain(v13);
    v14 = *a3;
    if (*a3)
      goto LABEL_11;
  }
  else
  {
    v13 = xpc_null_create();
    v14 = *a3;
    if (*a3)
    {
LABEL_11:
      v15 = _Block_copy(v14);
      v16 = (std::__shared_weak_count *)v7[16];
      if (!v16)
LABEL_24:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_15;
    }
  }
  v15 = 0;
  v16 = (std::__shared_weak_count *)v7[16];
  if (!v16)
    goto LABEL_24;
LABEL_15:
  v17 = v7[15];
  v18 = std::__shared_weak_count::lock(v16);
  if (!v18)
    goto LABEL_24;
  v19 = v18;
  v20 = operator new(0x18uLL);
  *v20 = v7;
  v20[1] = v13;
  v21 = xpc_null_create();
  v20[2] = v15;
  v22 = v7[17];
  v23 = (unint64_t *)&v19->__shared_owners_;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  v25 = operator new(0x18uLL);
  *v25 = v20;
  v25[1] = v17;
  v25[2] = v19;
  dispatch_async_f(v22, v25, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
  do
    v26 = __ldaxr(v23);
  while (__stlxr(v26 - 1, v23));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  xpc_release(v21);
}

void ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke_13(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  xpc_object_t v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v13 = *a2;
  if (v13)
  {
    xpc_retain(v13);
    v14 = *a3;
    if (*a3)
      goto LABEL_11;
  }
  else
  {
    v13 = xpc_null_create();
    v14 = *a3;
    if (*a3)
    {
LABEL_11:
      v15 = _Block_copy(v14);
      v16 = (std::__shared_weak_count *)v7[16];
      if (!v16)
LABEL_24:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_15;
    }
  }
  v15 = 0;
  v16 = (std::__shared_weak_count *)v7[16];
  if (!v16)
    goto LABEL_24;
LABEL_15:
  v17 = v7[15];
  v18 = std::__shared_weak_count::lock(v16);
  if (!v18)
    goto LABEL_24;
  v19 = v18;
  v20 = operator new(0x18uLL);
  *v20 = v7;
  v20[1] = v13;
  v21 = xpc_null_create();
  v20[2] = v15;
  v22 = v7[17];
  v23 = (unint64_t *)&v19->__shared_owners_;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  v25 = operator new(0x18uLL);
  *v25 = v20;
  v25[1] = v17;
  v25[2] = v19;
  dispatch_async_f(v22, v25, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
  do
    v26 = __ldaxr(v23);
  while (__stlxr(v26 - 1, v23));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  xpc_release(v21);
}

void AntennaModule::finishInitialization_sync(std::__shared_weak_count **this)
{
  const char *v2;
  size_t v3;
  void *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  const void *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  const void *v24;
  size_t v25;
  void *v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  NSObject *v33;
  const void *v34;
  size_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  NSObject *v42;
  const void *v43;
  size_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  NSObject *v51;
  const void *v52;
  size_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  NSObject *v60;
  _QWORD v61[6];
  std::__shared_weak_count *v62;
  void *v63;
  dispatch_object_t v64;
  void *v65[2];
  unint64_t v66;
  _QWORD v67[6];
  std::__shared_weak_count *v68;
  void *v69;
  dispatch_object_t v70;
  void *v71[2];
  unint64_t v72;
  _QWORD v73[6];
  std::__shared_weak_count *v74;
  void *v75;
  dispatch_object_t object;
  void *__p[2];
  unint64_t v78;
  _QWORD aBlock[6];
  std::__shared_weak_count *v80;
  const void *v81;
  dispatch_object_t v82;
  void *v83[2];
  unint64_t v84;
  const void *v85;
  void *__dst[2];
  unint64_t v87;
  __int128 v88;

  v2 = (const char *)((uint64_t (*)(std::__shared_weak_count **))(*this)->__shared_weak_owners_)(this);
  v3 = strlen(v2);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    v5 = (void **)operator new(v6 + 1);
    __dst[1] = v4;
    v87 = v7 | 0x8000000000000000;
    __dst[0] = v5;
  }
  else
  {
    HIBYTE(v87) = v3;
    v5 = __dst;
    if (!v3)
      goto LABEL_9;
  }
  memmove(v5, v2, (size_t)v4);
LABEL_9:
  *((_BYTE *)v4 + (_QWORD)v5) = 0;
  v85 = 0;
  AppleBasebandManager::create();
  v8 = v88;
  v88 = 0uLL;
  v9 = this[21];
  *((_OWORD *)this + 10) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
  if (!*((_QWORD *)&v88 + 1))
    goto LABEL_18;
  v13 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
  {
LABEL_18:
    v15 = v85;
    if (!v85)
      goto LABEL_20;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  v15 = v85;
  if (v85)
LABEL_19:
    CFRelease(v15);
LABEL_20:
  if (SHIBYTE(v87) < 0)
    operator delete(__dst[0]);
  v16 = this[16];
  if (!v16 || (v17 = this[15], (v18 = std::__shared_weak_count::lock(v16)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = v18;
  p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
  do
    v21 = __ldxr(p_shared_weak_owners);
  while (__stxr(v21 + 1, p_shared_weak_owners));
  v22 = (unint64_t *)&v18->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v19);
  }
  v24 = (const void *)*MEMORY[0x1E0CFB9A8];
  v25 = strlen((const char *)*MEMORY[0x1E0CFB9A8]);
  if (v25 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v26 = (void *)v25;
  if (v25 >= 0x17)
  {
    v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v28 = v25 | 7;
    v29 = v28 + 1;
    v27 = (void **)operator new(v28 + 1);
    v83[1] = v26;
    v84 = v29 | 0x8000000000000000;
    v83[0] = v27;
  }
  else
  {
    HIBYTE(v84) = v25;
    v27 = v83;
    if (!v25)
      goto LABEL_38;
  }
  memmove(v27, v24, (size_t)v26);
LABEL_38:
  *((_BYTE *)v26 + (_QWORD)v27) = 0;
  v30 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN13AntennaModule25finishInitialization_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_17_2;
  aBlock[4] = this;
  aBlock[5] = v17;
  v80 = v19;
  do
    v31 = __ldxr(p_shared_weak_owners);
  while (__stxr(v31 + 1, p_shared_weak_owners));
  v32 = _Block_copy(aBlock);
  v33 = this[17];
  if (v33)
    dispatch_retain((dispatch_object_t)this[17]);
  v81 = v32;
  v82 = v33;
  AppleBasebandManager::setEventHandler();
  if (v82)
    dispatch_release(v82);
  if (v81)
    _Block_release(v81);
  if (SHIBYTE(v84) < 0)
    operator delete(v83[0]);
  v34 = (const void *)*MEMORY[0x1E0CFB9B0];
  v35 = strlen((const char *)*MEMORY[0x1E0CFB9B0]);
  if (v35 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v36 = (void *)v35;
  if (v35 >= 0x17)
  {
    v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v38 = v35 | 7;
    v39 = v38 + 1;
    v37 = operator new(v38 + 1);
    __p[1] = v36;
    v78 = v39 | 0x8000000000000000;
    __p[0] = v37;
  }
  else
  {
    HIBYTE(v78) = v35;
    v37 = __p;
    if (!v35)
      goto LABEL_56;
  }
  memmove(v37, v34, (size_t)v36);
LABEL_56:
  *((_BYTE *)v36 + (_QWORD)v37) = 0;
  v73[0] = v30;
  v73[1] = 1174405120;
  v73[2] = ___ZN13AntennaModule25finishInitialization_syncEv_block_invoke_18;
  v73[3] = &__block_descriptor_tmp_19_4;
  v73[4] = this;
  v73[5] = v17;
  v74 = v19;
  do
    v40 = __ldxr(p_shared_weak_owners);
  while (__stxr(v40 + 1, p_shared_weak_owners));
  v41 = _Block_copy(v73);
  v42 = this[17];
  if (v42)
    dispatch_retain((dispatch_object_t)this[17]);
  v75 = v41;
  object = v42;
  AppleBasebandManager::setEventHandler();
  if (object)
    dispatch_release(object);
  if (v75)
    _Block_release(v75);
  if (SHIBYTE(v78) < 0)
    operator delete(__p[0]);
  v43 = (const void *)*MEMORY[0x1E0CFBD68];
  v44 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  if (v44 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v45 = (void *)v44;
  if (v44 >= 0x17)
  {
    v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v47 = v44 | 7;
    v48 = v47 + 1;
    v46 = operator new(v47 + 1);
    v71[1] = v45;
    v72 = v48 | 0x8000000000000000;
    v71[0] = v46;
  }
  else
  {
    HIBYTE(v72) = v44;
    v46 = v71;
    if (!v44)
      goto LABEL_74;
  }
  memmove(v46, v43, (size_t)v45);
LABEL_74:
  *((_BYTE *)v45 + (_QWORD)v46) = 0;
  v67[0] = v30;
  v67[1] = 1174405120;
  v67[2] = ___ZN13AntennaModule25finishInitialization_syncEv_block_invoke_20;
  v67[3] = &__block_descriptor_tmp_21_5;
  v67[4] = this;
  v67[5] = v17;
  v68 = v19;
  do
    v49 = __ldxr(p_shared_weak_owners);
  while (__stxr(v49 + 1, p_shared_weak_owners));
  v50 = _Block_copy(v67);
  v51 = this[17];
  if (v51)
    dispatch_retain((dispatch_object_t)this[17]);
  v69 = v50;
  v70 = v51;
  AppleBasebandManager::setEventHandler();
  if (v70)
    dispatch_release(v70);
  if (v69)
    _Block_release(v69);
  if (SHIBYTE(v72) < 0)
    operator delete(v71[0]);
  v52 = (const void *)*MEMORY[0x1E0CFB0B0];
  v53 = strlen((const char *)*MEMORY[0x1E0CFB0B0]);
  if (v53 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v54 = (void *)v53;
  if (v53 >= 0x17)
  {
    v56 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v53 | 7) != 0x17)
      v56 = v53 | 7;
    v57 = v56 + 1;
    v55 = operator new(v56 + 1);
    v65[1] = v54;
    v66 = v57 | 0x8000000000000000;
    v65[0] = v55;
  }
  else
  {
    HIBYTE(v66) = v53;
    v55 = v65;
    if (!v53)
      goto LABEL_92;
  }
  memmove(v55, v52, (size_t)v54);
LABEL_92:
  *((_BYTE *)v54 + (_QWORD)v55) = 0;
  v61[0] = v30;
  v61[1] = 1174405120;
  v61[2] = ___ZN13AntennaModule25finishInitialization_syncEv_block_invoke_22;
  v61[3] = &__block_descriptor_tmp_23_4;
  v61[4] = this;
  v61[5] = v17;
  v62 = v19;
  do
    v58 = __ldxr(p_shared_weak_owners);
  while (__stxr(v58 + 1, p_shared_weak_owners));
  v59 = _Block_copy(v61);
  v60 = this[17];
  if (v60)
    dispatch_retain((dispatch_object_t)this[17]);
  v63 = v59;
  v64 = v60;
  AppleBasebandManager::setEventHandler();
  if (v64)
    dispatch_release(v64);
  if (v63)
    _Block_release(v63);
  if (SHIBYTE(v66) < 0)
    operator delete(v65[0]);
  AppleBasebandManager::eventsOn((AppleBasebandManager *)this[20]);
  if (v62)
    std::__shared_weak_count::__release_weak(v62);
  if (v68)
    std::__shared_weak_count::__release_weak(v68);
  if (v74)
    std::__shared_weak_count::__release_weak(v74);
  if (v80)
    std::__shared_weak_count::__release_weak(v80);
  std::__shared_weak_count::__release_weak(v19);
}

void sub_1BF446420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  std::__shared_weak_count *v53;
  uint64_t v54;
  std::__shared_weak_count *v56;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (a30)
    std::__shared_weak_count::__release_weak(a30);
  if (a45)
    std::__shared_weak_count::__release_weak(a45);
  v56 = *(std::__shared_weak_count **)(v54 - 208);
  if (v56)
    std::__shared_weak_count::__release_weak(v56);
  std::__shared_weak_count::__release_weak(v53);
  _Unwind_Resume(a1);
}

void ___ZN13AntennaModule25finishInitialization_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  antenna::Service::Internal **v9;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (v8)
      {
        if (!v6)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6)
          return;
      }
      v9 = *(antenna::Service::Internal ***)(v3 + 176);
      if (v9)
      {
        if (*v9)
          antenna::Service::Internal::dumpState(*v9);
      }
    }
  }
}

void ___ZN13AntennaModule25finishInitialization_syncEv_block_invoke_18(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  antenna::Service::Internal **v9;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (v8)
      {
        if (!v6)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6)
          return;
      }
      v9 = *(antenna::Service::Internal ***)(v3 + 176);
      if (v9)
      {
        if (*v9)
          antenna::Service::Internal::dumpState(*v9);
      }
    }
  }
}

void ___ZN13AntennaModule25finishInitialization_syncEv_block_invoke_20(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  const void *v11;
  size_t v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  void **v17;
  antenna::Service::Internal *v18;
  antenna::Service::Internal *v19;
  __int128 v20;
  uint64_t v21;
  void *__p[2];
  uint64_t v23;
  _QWORD v24[2];
  unint64_t v25;
  uint64_t v26;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      if (*(_QWORD *)(v5 + 176))
      {
        v25 = 0xAAAAAAAAAAAAAAAALL;
        abm::client::Event::getData(*a2);
        v11 = (const void *)0xAAAAAAAAAAAAAAAALL;
        if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
        {
          v24[0] = 0xAAAAAAAAAAAAAAAALL;
          v24[1] = 0xAAAAAAAAAAAAAAAALL;
          ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v24, (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL);
          __p[0] = 0;
          __p[1] = 0;
          v23 = 0;
          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v26, (const char *)*MEMORY[0x1E0CFB530]);
          ctu::cf::map_adapter::getString();
          MEMORY[0x1C3B8936C](&v26);
          v23 = v21;
          *(_OWORD *)__p = v20;
          if (v21 >= 0)
            v12 = HIBYTE(v21);
          else
            v12 = *((_QWORD *)&v20 + 1);
          if (v12 == strlen((const char *)*MEMORY[0x1E0CFB980])
            && (v21 >= 0 ? (v13 = __p) : (v13 = (void **)__p[0]), !memcmp(v13, (const void *)*MEMORY[0x1E0CFB980], v12)))
          {
            v19 = **(antenna::Service::Internal ***)(v5 + 176);
            if (v19)
              antenna::Service::Internal::startService(v19);
          }
          else if (v12 == strlen((const char *)*MEMORY[0x1E0CFBB68])
                 && (v21 >= 0 ? (v14 = __p) : (v14 = (void **)__p[0]),
                     !memcmp(v14, (const void *)*MEMORY[0x1E0CFBB68], v12))
                 || v12 == strlen((const char *)*MEMORY[0x1E0CFBD30])
                 && (v21 >= 0 ? (v15 = __p) : (v15 = (void **)__p[0]),
                     !memcmp(v15, (const void *)*MEMORY[0x1E0CFBD30], v12))
                 || v12 == strlen((const char *)*MEMORY[0x1E0CFB588])
                 && (v21 >= 0 ? (v16 = __p) : (v16 = (void **)__p[0]),
                     !memcmp(v16, (const void *)*MEMORY[0x1E0CFB588], v12))
                 || v12 == strlen((const char *)*MEMORY[0x1E0CFB988])
                 && (v21 >= 0 ? (v17 = __p) : (v17 = (void **)__p[0]),
                     !memcmp(v17, (const void *)*MEMORY[0x1E0CFB988], v12)))
          {
            v18 = **(antenna::Service::Internal ***)(v5 + 176);
            if (v18)
              antenna::Service::Internal::stopService(v18);
          }
          if (SHIBYTE(v23) < 0)
            operator delete(__p[0]);
          MEMORY[0x1C3B893A8](v24);
          v11 = (const void *)v25;
        }
        if (v11)
          CFRelease(v11);
      }
    }
  }
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, char *__s)
{
  int v4;
  size_t v5;
  const void *v6;

  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (v5 != strlen(__s))
    return 0;
  if (v4 >= 0)
    v6 = a1;
  else
    v6 = *a1;
  return memcmp(v6, __s, v5) == 0;
}

void ___ZN13AntennaModule25finishInitialization_syncEv_block_invoke_22(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  const void *v11;
  xpc_object_t v12;
  NSObject *v13;
  NSObject *v14;
  xpc_object_t value;
  int v16;
  antenna::Service *v17;
  xpc_object_t object[2];
  uint8_t buf[8];

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      if (*(_QWORD *)(v5 + 176))
      {
        *(_QWORD *)buf = 0xAAAAAAAAAAAAAAAALL;
        abm::client::Event::getData(*a2);
        if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
        {
          ctu::cf_to_xpc((ctu *)0xAAAAAAAAAAAAAAAALL, v11);
          v12 = object[0];
          if (object[0] && MEMORY[0x1C3B8A86C](object[0]) == MEMORY[0x1E0C812F8])
            xpc_retain(object[0]);
          else
            v12 = xpc_null_create();
          xpc_release(object[0]);
          value = xpc_dictionary_get_value(v12, (const char *)*MEMORY[0x1E0CFB040]);
          object[0] = value;
          if (value)
            xpc_retain(value);
          else
            object[0] = xpc_null_create();
          v16 = xpc::dyn_cast_or_default((xpc *)object, 0);
          xpc_release(object[0]);
          v17 = *(antenna::Service **)(v5 + 176);
          if (v16)
            antenna::Service::callActive(v17);
          else
            antenna::Service::callInactive(v17);
          xpc_release(v12);
        }
        else
        {
          v14 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            LOWORD(object[0]) = 0;
            _os_log_error_impl(&dword_1BF335000, v14, OS_LOG_TYPE_ERROR, "No input is given for voice call active state", (uint8_t *)object, 2u);
          }
        }
        if (*(_QWORD *)buf)
          CFRelease(*(CFTypeRef *)buf);
      }
      else
      {
        v13 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1BF335000, v13, OS_LOG_TYPE_ERROR, "Antenna Service has not created yet.", buf, 2u);
        }
      }
    }
  }
}

void sub_1BF446C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, const void *a11)
{
  void *v11;

  xpc_release(v11);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a11);
  _Unwind_Resume(a1);
}

void AntennaModule::sleep(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[17];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped<AntennaModule::sleep(dispatch::group_session)::$_0>(AntennaModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AntennaModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<AntennaModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void AntennaModule::wake(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[17];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped<AntennaModule::wake(dispatch::group_session)::$_0>(AntennaModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AntennaModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<AntennaModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void AntennaModule::setProperty_sync(AntennaModule *this, xpc_object_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  xpc_object_t value;
  const char *v8;
  std::string::size_type size;
  const void *v10;
  size_t v11;
  size_t v12;
  std::string::size_type v13;
  std::string::size_type v14;
  size_t v15;
  size_t v16;
  std::string::size_type v17;
  xpc_object_t v18;
  const char *v19;
  size_t v20;
  std::string::size_type v21;
  std::string *p_buf;
  std::string::size_type v23;
  size_t v24;
  xpc_object_t v25;
  const char *v26;
  size_t v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  size_t v31;
  std::string::size_type v32;
  std::string::size_type v33;
  const char *v34;
  size_t v35;
  std::string::size_type v36;
  std::string *v37;
  void *v38;
  size_t v39;
  std::string::size_type v40;
  std::string::size_type v41;
  const char *v42;
  std::string::size_type v43;
  std::string::size_type v44;
  const char *v45;
  char *v46;
  const char *v47;
  char *v48;
  const char *v49;
  std::string::size_type v50;
  const char *v51;
  std::string::size_type v52;
  const char *v53;
  std::string::size_type v54;
  const char *v55;
  std::string::size_type v56;
  const char *v57;
  std::string::size_type v58;
  const char *v59;
  std::string::size_type v60;
  const char *v61;
  char v62;
  std::string *v63;
  size_t v64;
  const char *v65;
  int v66;
  const char *v67;
  int v68;
  const char *v69;
  int v70;
  const char *v71;
  int v72;
  std::string *v73;
  size_t v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  std::string::size_type v79;
  xpc_object_t v80;
  void *v81;
  std::string::size_type v82;
  const char *v83;
  std::string::size_type v84;
  unsigned int v85;
  std::string::size_type v86;
  unsigned int v87;
  std::string::size_type v88;
  unsigned int v89;
  void *__p;
  char v91;
  std::string v92;
  std::string v93;
  std::string v94;
  std::string v95;
  std::string v96;
  std::string v97;
  std::string v98;
  std::string v99;
  std::string v100;
  xpc_object_t object;
  const char *v102;
  char v103;
  std::string xdict;
  std::string v105;
  std::string v106;
  std::string v107;
  xpc_object_t v108;
  std::string v109;
  std::string v110;
  std::string v111;
  std::string buf;

  v4 = MEMORY[0x1C3B8A86C](*a2);
  v5 = MEMORY[0x1E0C812F8];
  if (v4 != MEMORY[0x1E0C812F8])
  {
    v6 = *((_QWORD *)this + 11);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_1BF335000, v6, OS_LOG_TYPE_ERROR, "Failed to get input!", (uint8_t *)&buf, 2u);
    }
    return;
  }
  memset(&buf, 170, sizeof(buf));
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB718]);
  v111.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value)
    xpc_retain(value);
  else
    v111.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&v111, (const object *)"", v8);
  xpc_release(v111.__r_.__value_.__l.__data_);
  size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = buf.__r_.__value_.__l.__size_;
  if (!size || MEMORY[0x1C3B8A86C](*a2) != v5)
    goto LABEL_73;
  v10 = (const void *)*MEMORY[0x1E0CFB990];
  v11 = strlen((const char *)*MEMORY[0x1E0CFB990]);
  v12 = v11;
  v13 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v11 != -1)
    {
      v14 = buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_ >= v11)
        v16 = v11;
      else
        v16 = buf.__r_.__value_.__l.__size_;
      if (memcmp(buf.__r_.__value_.__l.__data_, v10, v16))
        goto LABEL_27;
      goto LABEL_23;
    }
LABEL_212:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v11 == -1)
    goto LABEL_212;
  v14 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if (HIBYTE(buf.__r_.__value_.__r.__words[2]) >= v11)
    v15 = v11;
  else
    v15 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if (memcmp(&buf, v10, v15))
    goto LABEL_27;
LABEL_23:
  if (v14 == v12)
  {
    xdict.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    v17 = *MEMORY[0x1E0CFB4D0];
    v111.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v111.__r_.__value_.__l.__size_ = v17;
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)&v111, &xdict);
    if (MEMORY[0x1C3B8A86C](xdict.__r_.__value_.__r.__words[0]) == v5)
    {
      memset(&v111, 170, sizeof(v111));
      v18 = xpc_dictionary_get_value(xdict.__r_.__value_.__l.__data_, (const char *)*MEMORY[0x1E0CFC0E8]);
      object = v18;
      if (v18)
        xpc_retain(v18);
      else
        object = xpc_null_create();
      xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v19);
      xpc_release(object);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v110, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
      else
        v110 = v111;
      AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v110);
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v110.__r_.__value_.__l.__data_);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v111.__r_.__value_.__l.__data_);
    }
    xpc_release(xdict.__r_.__value_.__l.__data_);
    goto LABEL_73;
  }
LABEL_27:
  v20 = strlen((const char *)*MEMORY[0x1E0CFB3B0]);
  v21 = v20;
  if ((v13 & 0x80) == 0)
  {
    if (v20 != -1)
    {
      p_buf = &buf;
      v23 = v13;
      goto LABEL_32;
    }
LABEL_213:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v20 == -1)
    goto LABEL_213;
  v23 = buf.__r_.__value_.__l.__size_;
  p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_32:
  if (v23 >= v21)
    v24 = v21;
  else
    v24 = v23;
  if (!memcmp(p_buf, (const void *)*MEMORY[0x1E0CFB3B0], v24) && v23 == v21)
  {
    memset(&v111, 170, sizeof(v111));
    v25 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB4D0]);
    xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    if (v25)
      xpc_retain(v25);
    else
      xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&xdict, (const object *)"", v26);
    xpc_release(xdict.__r_.__value_.__l.__data_);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v109, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    else
      v109 = v111;
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v109);
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    {
      v38 = (void *)v109.__r_.__value_.__r.__words[0];
LABEL_61:
      operator delete(v38);
    }
LABEL_62:
    if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_73;
    goto LABEL_63;
  }
  v27 = strlen((const char *)*MEMORY[0x1E0CFB5B8]);
  v28 = v27;
  if ((v13 & 0x80) == 0)
  {
    if (v27 != -1)
    {
      v29 = &buf;
      v30 = v13;
      goto LABEL_44;
    }
LABEL_214:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 == -1)
    goto LABEL_214;
  v30 = buf.__r_.__value_.__l.__size_;
  v29 = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_44:
  if (v30 >= v28)
    v31 = v28;
  else
    v31 = v30;
  if (!memcmp(v29, (const void *)*MEMORY[0x1E0CFB5B8], v31) && v30 == v28)
  {
    object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    v32 = *MEMORY[0x1E0CFB4D0];
    v111.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v111.__r_.__value_.__l.__size_ = v32;
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)&v111, &object);
    if (MEMORY[0x1C3B8A86C](object) == v5)
    {
      memset(&v111, 170, sizeof(v111));
      v33 = *MEMORY[0x1E0CFBF30];
      xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      xdict.__r_.__value_.__l.__size_ = v33;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &v108);
      xpc::dyn_cast_or_default((xpc *)&v108, (const object *)"", v34);
      xpc_release(v108);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v107, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
      else
        v107 = v111;
      AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v107);
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v107.__r_.__value_.__l.__data_);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v111.__r_.__value_.__l.__data_);
    }
LABEL_143:
    xpc_release(object);
    goto LABEL_73;
  }
  v35 = strlen((const char *)*MEMORY[0x1E0CFB708]);
  v36 = v35;
  if ((v13 & 0x80) == 0)
  {
    if (v35 != -1)
    {
      v37 = &buf;
      goto LABEL_78;
    }
LABEL_215:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v35 == -1)
    goto LABEL_215;
  v13 = buf.__r_.__value_.__l.__size_;
  v37 = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_78:
  if (v13 >= v36)
    v39 = v36;
  else
    v39 = v13;
  if (!memcmp(v37, (const void *)*MEMORY[0x1E0CFB708], v39) && v13 == v36)
  {
    object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    v40 = *MEMORY[0x1E0CFB4D0];
    v111.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v111.__r_.__value_.__l.__size_ = v40;
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)&v111, &object);
    if (MEMORY[0x1C3B8A86C](object) == v5)
    {
      memset(&v111, 170, sizeof(v111));
      v41 = *MEMORY[0x1E0CFBFA8];
      xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      xdict.__r_.__value_.__l.__size_ = v41;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &v108);
      xpc::dyn_cast_or_default((xpc *)&v108, (const object *)"", v42);
      xpc_release(v108);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v106, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
      else
        v106 = v111;
      AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v106);
      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v106.__r_.__value_.__l.__data_);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v111.__r_.__value_.__l.__data_);
    }
    goto LABEL_143;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E0CFBE18]))
  {
    object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    v43 = *MEMORY[0x1E0CFB4D0];
    v111.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v111.__r_.__value_.__l.__size_ = v43;
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)&v111, &object);
    if (MEMORY[0x1C3B8A86C](object) == v5)
    {
      memset(&v111, 170, sizeof(v111));
      v44 = *MEMORY[0x1E0CFC0C8];
      xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      xdict.__r_.__value_.__l.__size_ = v44;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &v108);
      xpc::dyn_cast_or_default((xpc *)&v108, (const object *)"", v45);
      xpc_release(v108);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v105, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
      else
        v105 = v111;
      AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v105);
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v105.__r_.__value_.__l.__data_);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v111.__r_.__value_.__l.__data_);
    }
    goto LABEL_143;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E0CFBE40]))
  {
    memset(&v111, 170, sizeof(v111));
    v46 = (char *)*MEMORY[0x1E0CFB1B8];
    xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    xdict.__r_.__value_.__l.__size_ = (std::string::size_type)v46;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &object);
    xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v47);
    xpc_release(object);
    memset(&xdict, 170, sizeof(xdict));
    v48 = (char *)*MEMORY[0x1E0CFB398];
    object = a2;
    v102 = v48;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
    xpc::dyn_cast_or_default((xpc *)&v108, (const object *)"", v49);
    xpc_release(v108);
    std::string::basic_string[abi:ne180100]<0>(&object, v46);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v100, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    else
      v100 = v111;
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&object, (uint64_t)&v100);
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v100.__r_.__value_.__l.__data_);
    if (v103 < 0)
      operator delete(object);
    std::string::basic_string[abi:ne180100]<0>(&object, v48);
    if (SHIBYTE(xdict.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v99, xdict.__r_.__value_.__l.__data_, xdict.__r_.__value_.__l.__size_);
    else
      v99 = xdict;
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&object, (uint64_t)&v99);
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v99.__r_.__value_.__l.__data_);
      if ((v103 & 0x80000000) == 0)
      {
LABEL_128:
        if ((SHIBYTE(xdict.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_62;
        goto LABEL_132;
      }
    }
    else if ((v103 & 0x80000000) == 0)
    {
      goto LABEL_128;
    }
    operator delete(object);
    if ((SHIBYTE(xdict.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_62;
LABEL_132:
    v38 = (void *)xdict.__r_.__value_.__r.__words[0];
    goto LABEL_61;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E0CFB6B0]))
  {
    memset(&v111, 170, sizeof(v111));
    v50 = *MEMORY[0x1E0CFB4D0];
    xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    xdict.__r_.__value_.__l.__size_ = v50;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &object);
    xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v51);
    xpc_release(object);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v98, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    else
      v98 = v111;
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v98);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    {
      v38 = (void *)v98.__r_.__value_.__r.__words[0];
      goto LABEL_61;
    }
    goto LABEL_62;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E0CFBE10]))
  {
    memset(&v111, 170, sizeof(v111));
    v52 = *MEMORY[0x1E0CFB4D0];
    xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    xdict.__r_.__value_.__l.__size_ = v52;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &object);
    xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v53);
    xpc_release(object);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v97, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    else
      v97 = v111;
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v97);
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    {
      v38 = (void *)v97.__r_.__value_.__r.__words[0];
      goto LABEL_61;
    }
    goto LABEL_62;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E0CFBE00]))
  {
    memset(&v111, 170, sizeof(v111));
    v54 = *MEMORY[0x1E0CFB4D0];
    xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    xdict.__r_.__value_.__l.__size_ = v54;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &object);
    xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v55);
    xpc_release(object);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v96, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    else
      v96 = v111;
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v96);
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    {
      v38 = (void *)v96.__r_.__value_.__r.__words[0];
      goto LABEL_61;
    }
    goto LABEL_62;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E0CFB6B8]))
  {
    memset(&v111, 170, sizeof(v111));
    v56 = *MEMORY[0x1E0CFB4D0];
    xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    xdict.__r_.__value_.__l.__size_ = v56;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &object);
    xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v57);
    xpc_release(object);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v95, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    else
      v95 = v111;
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v95);
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    {
      v38 = (void *)v95.__r_.__value_.__r.__words[0];
      goto LABEL_61;
    }
    goto LABEL_62;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E0CFBE88]))
  {
    memset(&v111, 170, sizeof(v111));
    v58 = *MEMORY[0x1E0CFB4D0];
    xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    xdict.__r_.__value_.__l.__size_ = v58;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &object);
    xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v59);
    xpc_release(object);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v94, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    else
      v94 = v111;
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v94);
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v94.__r_.__value_.__l.__data_);
    v62 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
    if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v63 = &v111;
    else
      v63 = (std::string *)v111.__r_.__value_.__r.__words[0];
    v64 = strlen((const char *)*MEMORY[0x1E0CFC120]);
    if (strncasecmp((const char *)v63, (const char *)*MEMORY[0x1E0CFC120], v64))
    {
      v65 = (const char *)*MEMORY[0x1E0CFC0D0];
      std::string::basic_string[abi:ne180100]<0>(&xdict, (char *)*MEMORY[0x1E0CFC0D0]);
      object = a2;
      v102 = v65;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
      v66 = xpc::dyn_cast_or_default((xpc *)&v108, 0);
      AntennaModule::setPreference_sync<int>((uint64_t)this, (const void **)&xdict.__r_.__value_.__l.__data_, v66);
      xpc_release(v108);
      if (SHIBYTE(xdict.__r_.__value_.__r.__words[2]) < 0)
        operator delete(xdict.__r_.__value_.__l.__data_);
      v67 = (const char *)*MEMORY[0x1E0CFC088];
      std::string::basic_string[abi:ne180100]<0>(&xdict, (char *)*MEMORY[0x1E0CFC088]);
      object = a2;
      v102 = v67;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
      v68 = xpc::dyn_cast_or_default((xpc *)&v108, 0);
      AntennaModule::setPreference_sync<int>((uint64_t)this, (const void **)&xdict.__r_.__value_.__l.__data_, v68);
      xpc_release(v108);
      if (SHIBYTE(xdict.__r_.__value_.__r.__words[2]) < 0)
        operator delete(xdict.__r_.__value_.__l.__data_);
      v69 = (const char *)*MEMORY[0x1E0CFBEF0];
      std::string::basic_string[abi:ne180100]<0>(&xdict, (char *)*MEMORY[0x1E0CFBEF0]);
      object = a2;
      v102 = v69;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
      v70 = xpc::dyn_cast_or_default((xpc *)&v108, 0);
      AntennaModule::setPreference_sync<int>((uint64_t)this, (const void **)&xdict.__r_.__value_.__l.__data_, v70);
      xpc_release(v108);
      if (SHIBYTE(xdict.__r_.__value_.__r.__words[2]) < 0)
        operator delete(xdict.__r_.__value_.__l.__data_);
      v71 = (const char *)*MEMORY[0x1E0CFBEE8];
      std::string::basic_string[abi:ne180100]<0>(&xdict, (char *)*MEMORY[0x1E0CFBEE8]);
      object = a2;
      v102 = v71;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
      v72 = xpc::dyn_cast_or_default((xpc *)&v108, 0);
      AntennaModule::setPreference_sync<int>((uint64_t)this, (const void **)&xdict.__r_.__value_.__l.__data_, v72);
      xpc_release(v108);
      goto LABEL_187;
    }
  }
  else
  {
    if (std::string::compare(&buf, "kSetWorkoutInfo"))
    {
      if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E0CFAF90]))
      {
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v92, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
        else
          v92 = buf;
        AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v92);
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v92.__r_.__value_.__l.__data_);
        object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        v79 = *MEMORY[0x1E0CFB4D0];
        v111.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
        v111.__r_.__value_.__l.__size_ = v79;
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&v111, &xdict);
        v80 = xpc_null_create();
        v81 = (void *)xdict.__r_.__value_.__r.__words[0];
        object = (xpc_object_t)xdict.__r_.__value_.__r.__words[0];
        if (xdict.__r_.__value_.__r.__words[0] && MEMORY[0x1C3B8A86C](xdict.__r_.__value_.__r.__words[0]) == v5)
          xpc_retain(v81);
        else
          object = xpc_null_create();
        if (MEMORY[0x1C3B8A86C]() != v5)
          xpc::dict::operator=(&object, v80);
        xpc_release(v80);
        xpc_release(xdict.__r_.__value_.__l.__data_);
        v82 = *MEMORY[0x1E0CFBB48];
        std::string::basic_string[abi:ne180100]<0>(&v111, (char *)*MEMORY[0x1E0CFBB48]);
        xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
        xdict.__r_.__value_.__l.__size_ = v82;
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &v108);
        xpc::dyn_cast_or_default((xpc *)&v108, (const object *)"", v83);
        AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&v111.__r_.__value_.__l.__data_, (uint64_t)&__p);
        if (v91 < 0)
          operator delete(__p);
        xpc_release(v108);
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v111.__r_.__value_.__l.__data_);
        v84 = *MEMORY[0x1E0CFB308];
        std::string::basic_string[abi:ne180100]<0>(&v111, (char *)*MEMORY[0x1E0CFB308]);
        xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
        xdict.__r_.__value_.__l.__size_ = v84;
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &v108);
        v85 = xpc::dyn_cast_or_default((xpc *)&v108, (const object *)0x7FFF);
        AntennaModule::setPreference_sync<unsigned int>((uint64_t)this, (const void **)&v111.__r_.__value_.__l.__data_, v85);
        xpc_release(v108);
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v111.__r_.__value_.__l.__data_);
        v86 = *MEMORY[0x1E0CFB4C8];
        std::string::basic_string[abi:ne180100]<0>(&v111, (char *)*MEMORY[0x1E0CFB4C8]);
        xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
        xdict.__r_.__value_.__l.__size_ = v86;
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &v108);
        v87 = xpc::dyn_cast_or_default((xpc *)&v108, (const object *)0x7FFF);
        AntennaModule::setPreference_sync<unsigned int>((uint64_t)this, (const void **)&v111.__r_.__value_.__l.__data_, v87);
        xpc_release(v108);
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v111.__r_.__value_.__l.__data_);
        v88 = *MEMORY[0x1E0CFB120];
        std::string::basic_string[abi:ne180100]<0>(&v111, (char *)*MEMORY[0x1E0CFB120]);
        xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
        xdict.__r_.__value_.__l.__size_ = v88;
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &v108);
        v89 = xpc::dyn_cast_or_default((xpc *)&v108, (const object *)0x7FFF);
        AntennaModule::setPreference_sync<unsigned int>((uint64_t)this, (const void **)&v111.__r_.__value_.__l.__data_, v89);
        xpc_release(v108);
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v111.__r_.__value_.__l.__data_);
        xpc_release(object);
      }
      goto LABEL_73;
    }
    memset(&v111, 170, sizeof(v111));
    v60 = *MEMORY[0x1E0CFB4D0];
    xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    xdict.__r_.__value_.__l.__size_ = v60;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &object);
    xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v61);
    xpc_release(object);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v93, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    else
      v93 = v111;
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v93);
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v93.__r_.__value_.__l.__data_);
    v62 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
    if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v73 = &v111;
    else
      v73 = (std::string *)v111.__r_.__value_.__r.__words[0];
    v74 = strlen((const char *)*MEMORY[0x1E0CFC120]);
    if (strncasecmp((const char *)v73, (const char *)*MEMORY[0x1E0CFC120], v74))
    {
      std::string::basic_string[abi:ne180100]<0>(&xdict, "kKeyWorkoutType");
      object = a2;
      v102 = "kKeyWorkoutType";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
      v75 = xpc::dyn_cast_or_default((xpc *)&v108, 0);
      AntennaModule::setPreference_sync<unsigned int>((uint64_t)this, (const void **)&xdict.__r_.__value_.__l.__data_, v75);
      xpc_release(v108);
      if (SHIBYTE(xdict.__r_.__value_.__r.__words[2]) < 0)
        operator delete(xdict.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&xdict, "kKeyWorkoutState");
      object = a2;
      v102 = "kKeyWorkoutState";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
      v76 = xpc::dyn_cast_or_default((xpc *)&v108, 0);
      AntennaModule::setPreference_sync<unsigned int>((uint64_t)this, (const void **)&xdict.__r_.__value_.__l.__data_, v76);
      xpc_release(v108);
      if (SHIBYTE(xdict.__r_.__value_.__r.__words[2]) < 0)
        operator delete(xdict.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&xdict, "kKeyWorkoutLocation");
      object = a2;
      v102 = "kKeyWorkoutLocation";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
      v77 = xpc::dyn_cast_or_default((xpc *)&v108, 0);
      AntennaModule::setPreference_sync<unsigned int>((uint64_t)this, (const void **)&xdict.__r_.__value_.__l.__data_, v77);
      xpc_release(v108);
      if (SHIBYTE(xdict.__r_.__value_.__r.__words[2]) < 0)
        operator delete(xdict.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&xdict, "kKeySwimLocation");
      object = a2;
      v102 = "kKeySwimLocation";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
      v78 = xpc::dyn_cast_or_default((xpc *)&v108, 0);
      AntennaModule::setPreference_sync<unsigned int>((uint64_t)this, (const void **)&xdict.__r_.__value_.__l.__data_, v78);
      xpc_release(v108);
LABEL_187:
      if (SHIBYTE(xdict.__r_.__value_.__r.__words[2]) < 0)
        operator delete(xdict.__r_.__value_.__l.__data_);
      v62 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
    }
  }
  if (v62 < 0)
LABEL_63:
    operator delete(v111.__r_.__value_.__l.__data_);
LABEL_73:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
}

void sub_1BF4480BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 113) < 0)
    operator delete(*(void **)(v1 - 136));
  if (*(char *)(v1 - 89) < 0)
  {
    operator delete(*(void **)(v1 - 112));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void AntennaModule::setPreference_sync<std::string>(uint64_t a1, const void **a2, uint64_t a3)
{
  _QWORD *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  size_t v14;
  unint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  const void *v20;
  char *v21;
  char v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  NSObject *v26;
  void *v27;
  std::string __p;
  uint64_t v29;
  std::__shared_weak_count *v30;
  std::string v31;
  uint8_t buf[24];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1ED70FAF0)
  {
    v7 = operator new(0x18uLL);
    MEMORY[0x1C3B893B4](v7, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
    v6 = operator new(0x20uLL);
    *v6 = &unk_1E78FFBE0;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = v7;
    v8 = (std::__shared_weak_count *)off_1ED70FAF8;
    qword_1ED70FAF0 = (uint64_t)v7;
    off_1ED70FAF8 = v6;
    if (!v8)
    {
      v29 = (uint64_t)v7;
      v30 = (std::__shared_weak_count *)v6;
LABEL_10:
      v11 = v6 + 1;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      goto LABEL_12;
    }
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  LODWORD(v7) = qword_1ED70FAF0;
  v6 = off_1ED70FAF8;
  v29 = qword_1ED70FAF0;
  v30 = (std::__shared_weak_count *)off_1ED70FAF8;
  if (off_1ED70FAF8)
    goto LABEL_10;
LABEL_12:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  v13 = *((char *)a2 + 23);
  if (v13 >= 0)
    v14 = *((unsigned __int8 *)a2 + 23);
  else
    v14 = (size_t)a2[1];
  v15 = v14 + 16;
  memset(buf, 170, sizeof(buf));
  if (v14 + 16 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v15 >= 0x17)
  {
    v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v17 = v15 | 7;
    v18 = v17 + 1;
    v19 = operator new(v17 + 1);
    *(_QWORD *)&buf[8] = v14 + 16;
    *(_QWORD *)&buf[16] = v18 | 0x8000000000000000;
    *(_QWORD *)buf = v19;
    *v19 = *(_OWORD *)"AntennaSetting::";
    v16 = (uint8_t *)(v19 + 1);
LABEL_23:
    if (v13 >= 0)
      v20 = a2;
    else
      v20 = *a2;
    memmove(v16, v20, v14);
    v16[v14] = 0;
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_27;
  }
  v16 = &buf[16];
  *(_QWORD *)&buf[16] = 0;
  buf[23] = v14 + 16;
  *(_OWORD *)buf = *(_OWORD *)"AntennaSetting::";
  if (v14)
    goto LABEL_23;
  buf[16] = 0;
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
LABEL_19:
    __p = *(std::string *)a3;
    goto LABEL_28;
  }
LABEL_27:
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
LABEL_28:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v31, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v31 = __p;
  if ((buf[23] & 0x80u) == 0)
    v21 = (char *)buf;
  else
    v21 = *(char **)buf;
  v22 = ctu::cf::plist_adapter::set<std::string>((int)v7, (uint64_t)&v31, v21);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v31.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_36:
      if (((char)buf[23] & 0x80000000) == 0)
        goto LABEL_37;
      goto LABEL_41;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_36;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (((char)buf[23] & 0x80000000) == 0)
  {
LABEL_37:
    v23 = v30;
    if (!v30)
      goto LABEL_45;
    goto LABEL_42;
  }
LABEL_41:
  operator delete(*(void **)buf);
  v23 = v30;
  if (!v30)
    goto LABEL_45;
LABEL_42:
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    if ((v22 & 1) != 0)
      return;
    goto LABEL_46;
  }
LABEL_45:
  if ((v22 & 1) != 0)
    return;
LABEL_46:
  v26 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)"AntennaSetting::";
    v31.__r_.__value_.__r.__words[2] = 0x1000000000000000;
    if (*((char *)a2 + 23) >= 0)
      v27 = a2;
    else
      v27 = (void *)*a2;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = &v31;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v27;
    _os_log_error_impl(&dword_1BF335000, v26, OS_LOG_TYPE_ERROR, "Failed to set property with %s%s", buf, 0x16u);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
  }
}

void sub_1BF448ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a30 & 0x80000000) == 0)
    {
LABEL_3:
      std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if ((a30 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a25);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1BF448BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AntennaModule::setPreference_sync<int>(uint64_t a1, const void **a2, int a3)
{
  _QWORD *v6;
  CFStringRef *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  size_t v14;
  unint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  const void *v20;
  void **v21;
  const __CFString *v22;
  const __CFAllocator *v23;
  CFNumberRef v24;
  const __CFString *v25;
  BOOL v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  NSObject *v30;
  void *v31;
  void *__p[3];
  _QWORD v33[2];
  int valuePtr;
  _BYTE buf[22];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1ED70FAF0)
  {
    v7 = (CFStringRef *)operator new(0x18uLL);
    MEMORY[0x1C3B893B4](v7, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
    v6 = operator new(0x20uLL);
    *v6 = &unk_1E78FFBE0;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = v7;
    v8 = (std::__shared_weak_count *)off_1ED70FAF8;
    qword_1ED70FAF0 = (uint64_t)v7;
    off_1ED70FAF8 = v6;
    if (!v8)
    {
      *(_QWORD *)buf = v7;
      *(_QWORD *)&buf[8] = v6;
LABEL_10:
      v11 = v6 + 1;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      goto LABEL_12;
    }
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v7 = (CFStringRef *)qword_1ED70FAF0;
  v6 = off_1ED70FAF8;
  *(_QWORD *)buf = qword_1ED70FAF0;
  *(_QWORD *)&buf[8] = off_1ED70FAF8;
  if (off_1ED70FAF8)
    goto LABEL_10;
LABEL_12:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  v13 = *((char *)a2 + 23);
  if (v13 >= 0)
    v14 = *((unsigned __int8 *)a2 + 23);
  else
    v14 = (size_t)a2[1];
  v15 = v14 + 16;
  memset(__p, 170, sizeof(__p));
  if (v14 + 16 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v15 >= 0x17)
  {
    v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v17 = v15 | 7;
    v18 = v17 + 1;
    v19 = (void **)operator new(v17 + 1);
    __p[1] = (void *)(v14 + 16);
    __p[2] = (void *)(v18 | 0x8000000000000000);
    __p[0] = v19;
    *(_OWORD *)v19 = *(_OWORD *)"AntennaSetting::";
    v16 = v19 + 2;
  }
  else
  {
    v16 = &__p[2];
    __p[2] = 0;
    HIBYTE(__p[2]) = v14 + 16;
    *(_OWORD *)__p = *(_OWORD *)"AntennaSetting::";
    if (!v14)
      goto LABEL_26;
  }
  if (v13 >= 0)
    v20 = a2;
  else
    v20 = *a2;
  memmove(v16, v20, v14);
LABEL_26:
  *((_BYTE *)v16 + v14) = 0;
  if (SHIBYTE(__p[2]) >= 0)
    v21 = __p;
  else
    v21 = (void **)__p[0];
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v33, (const char *)v21);
  v22 = (const __CFString *)v33[0];
  v23 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  valuePtr = a3;
  v24 = CFNumberCreate(v23, kCFNumberIntType, &valuePtr);
  v33[1] = v24;
  if (v24)
  {
    v25 = (const __CFString *)*MEMORY[0x1E0C9B250];
    CFPreferencesSetValue(v22, v24, v7[1], v7[2], (CFStringRef)*MEMORY[0x1E0C9B250]);
    v26 = CFPreferencesSynchronize(v7[1], v7[2], v25) != 0;
    CFRelease(v24);
    MEMORY[0x1C3B8936C](v33);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_31;
  }
  else
  {
    v26 = 0;
    MEMORY[0x1C3B8936C](v33);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    {
LABEL_31:
      v27 = *(std::__shared_weak_count **)&buf[8];
      if (!*(_QWORD *)&buf[8])
        goto LABEL_38;
      goto LABEL_35;
    }
  }
  operator delete(__p[0]);
  v27 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_38;
LABEL_35:
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (v26)
      return;
    goto LABEL_39;
  }
LABEL_38:
  if (v26)
    return;
LABEL_39:
  v30 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)__p = *(_OWORD *)"AntennaSetting::";
    __p[2] = (void *)0x1000000000000000;
    if (*((char *)a2 + 23) >= 0)
      v31 = a2;
    else
      v31 = (void *)*a2;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = __p;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v31;
    _os_log_error_impl(&dword_1BF335000, v30, OS_LOG_TYPE_ERROR, "Failed to set property with %s%s", buf, 0x16u);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
}

void AntennaModule::setPreference_sync<unsigned int>(uint64_t a1, const void **a2, unsigned int a3)
{
  _QWORD *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  size_t v14;
  unint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  const void *v20;
  void **v21;
  BOOL v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  NSObject *v26;
  void *v27;
  void *__p[3];
  const __CFString *v29;
  _BYTE buf[22];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1ED70FAF0)
  {
    v7 = operator new(0x18uLL);
    MEMORY[0x1C3B893B4](v7, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
    v6 = operator new(0x20uLL);
    *v6 = &unk_1E78FFBE0;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = v7;
    v8 = (std::__shared_weak_count *)off_1ED70FAF8;
    qword_1ED70FAF0 = (uint64_t)v7;
    off_1ED70FAF8 = v6;
    if (!v8)
    {
      *(_QWORD *)buf = v7;
      *(_QWORD *)&buf[8] = v6;
LABEL_10:
      v11 = v6 + 1;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      goto LABEL_12;
    }
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v7 = (void *)qword_1ED70FAF0;
  v6 = off_1ED70FAF8;
  *(_QWORD *)buf = qword_1ED70FAF0;
  *(_QWORD *)&buf[8] = off_1ED70FAF8;
  if (off_1ED70FAF8)
    goto LABEL_10;
LABEL_12:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  v13 = *((char *)a2 + 23);
  if (v13 >= 0)
    v14 = *((unsigned __int8 *)a2 + 23);
  else
    v14 = (size_t)a2[1];
  v15 = v14 + 16;
  memset(__p, 170, sizeof(__p));
  if (v14 + 16 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v15 >= 0x17)
  {
    v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v17 = v15 | 7;
    v18 = v17 + 1;
    v19 = (void **)operator new(v17 + 1);
    __p[1] = (void *)(v14 + 16);
    __p[2] = (void *)(v18 | 0x8000000000000000);
    __p[0] = v19;
    *(_OWORD *)v19 = *(_OWORD *)"AntennaSetting::";
    v16 = v19 + 2;
  }
  else
  {
    v16 = &__p[2];
    __p[2] = 0;
    HIBYTE(__p[2]) = v14 + 16;
    *(_OWORD *)__p = *(_OWORD *)"AntennaSetting::";
    if (!v14)
      goto LABEL_26;
  }
  if (v13 >= 0)
    v20 = a2;
  else
    v20 = *a2;
  memmove(v16, v20, v14);
LABEL_26:
  *((_BYTE *)v16 + v14) = 0;
  if (SHIBYTE(__p[2]) >= 0)
    v21 = __p;
  else
    v21 = (void **)__p[0];
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v29, (const char *)v21);
  v22 = ctu::cf::plist_adapter::set<unsigned int>((uint64_t)v7, a3, v29, 1);
  MEMORY[0x1C3B8936C](&v29);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v23 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_35;
  v24 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    if (v22)
      return;
  }
  else
  {
LABEL_35:
    if (v22)
      return;
  }
  v26 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)__p = *(_OWORD *)"AntennaSetting::";
    __p[2] = (void *)0x1000000000000000;
    if (*((char *)a2 + 23) >= 0)
      v27 = a2;
    else
      v27 = (void *)*a2;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = __p;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v27;
    _os_log_error_impl(&dword_1BF335000, v26, OS_LOG_TYPE_ERROR, "Failed to set property with %s%s", buf, 0x16u);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
}

void AntennaModule::initializeProperty(AntennaModule *this)
{
  uint64_t *i;
  __int128 v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  char *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  AntennaModule *v14;
  std::string __p;
  std::string v16;

  for (i = (uint64_t *)*((_QWORD *)this + 19); i; i = (uint64_t *)*i)
  {
    memset(&v16, 170, sizeof(v16));
    if (*((char *)i + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v16, (const std::string::value_type *)i[1], i[2]);
      v14 = this;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_8:
        std::string::__init_copy_ctor_external(&__p, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
        goto LABEL_9;
      }
    }
    else
    {
      v3 = *(_OWORD *)(i + 1);
      v16.__r_.__value_.__r.__words[2] = i[3];
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v3;
      v14 = this;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_8;
    }
    __p = v16;
LABEL_9:
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v4 || (v5 = *((_QWORD *)this + 15), (v6 = std::__shared_weak_count::lock(v4)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v7 = v6;
    v8 = (char *)operator new(0x20uLL);
    *(_QWORD *)v8 = v14;
    *(std::string *)(v8 + 8) = __p;
    memset(&__p, 0, sizeof(__p));
    v9 = *((_QWORD *)this + 17);
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v12 = operator new(0x18uLL);
    *v12 = v8;
    v12[1] = v5;
    v12[2] = v7;
    dispatch_async_f(v9, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped<AntennaModule::initializeProperty(void)::$_0>(AntennaModule::initializeProperty(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AntennaModule::initializeProperty(void)::$_0,dispatch_queue_s *::default_delete<AntennaModule::initializeProperty(void)::$_0>>)::{lambda(void *)#1}::__invoke);
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (v13)
    {
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_17;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_17:
        if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_21;
        continue;
      }
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
LABEL_21:
      operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_1BF449584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AntennaModule::initializeProperty_sync(uint64_t a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  size_t v6;
  size_t v7;
  size_t v8;
  const void *v9;
  size_t v10;
  BOOL v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  size_t v15;
  size_t v16;
  const void *v17;
  _QWORD *v18;
  uint64_t (***v19)(void *, int64_t);
  size_t v20;
  const void *v22;
  size_t v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *v27;
  uint64_t (***v28)(void *, int64_t);
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  size_t v32;
  _QWORD *v33;
  uint64_t (***v34)(void *, int64_t);
  const void *v35;
  size_t v36;
  size_t v37;
  size_t v38;
  size_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  int v45;
  size_t v46;
  unint64_t v47;
  __int128 *v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  const void *v52;
  const char *v53;
  const void *v54;
  int v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  xpc_object_t v59;
  xpc_object_t v60;
  size_t v61;
  _QWORD *v62;
  uint64_t (***v63)(void *, int64_t);
  const void *v64;
  size_t v65;
  size_t v66;
  size_t v67;
  size_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  int v74;
  size_t v75;
  unint64_t v76;
  __int128 *v77;
  uint64_t v78;
  uint64_t v79;
  _OWORD *v80;
  const void *v81;
  const char *v82;
  const void *v83;
  int v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  xpc_object_t v88;
  xpc_object_t v89;
  xpc_object_t v90;
  void *v91;
  xpc_object_t v92;
  xpc_object_t v93;
  xpc_object_t v94;
  xpc_object_t v95;
  const char *v96;
  xpc_object_t v97;
  xpc_object_t v98;
  size_t v99;
  _QWORD *v100;
  uint64_t (***v101)(void *, int64_t);
  const char *v102;
  size_t v103;
  size_t v104;
  size_t v105;
  const void *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  int v112;
  size_t v113;
  unint64_t v114;
  __int128 *v115;
  uint64_t v116;
  uint64_t v117;
  _OWORD *v118;
  const void *v119;
  const char *v120;
  const void *v121;
  int v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  xpc_object_t v126;
  xpc_object_t v127;
  xpc_object_t v128;
  void *v129;
  xpc_object_t v130;
  xpc_object_t v131;
  const char *v132;
  xpc_object_t v133;
  xpc_object_t v134;
  size_t v135;
  xpc_object_t v136;
  xpc_object_t v137;
  size_t v138;
  size_t v139;
  size_t v140;
  const void *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  int v147;
  size_t v148;
  unint64_t v149;
  __int128 *v150;
  uint64_t v151;
  uint64_t v152;
  _OWORD *v153;
  const void *v154;
  const char *v155;
  const void *v156;
  int v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  xpc_object_t v161;
  xpc_object_t v162;
  xpc_object_t v163;
  void *v164;
  xpc_object_t v165;
  xpc_object_t v166;
  xpc_object_t v167;
  const char *v168;
  xpc_object_t v169;
  xpc_object_t v170;
  size_t v171;
  uint64_t (***v172)(void *, int64_t);
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  int v176;
  size_t v177;
  unint64_t v178;
  __int128 *v179;
  size_t v180;
  size_t v181;
  size_t v182;
  const void *v183;
  unint64_t *v184;
  unint64_t v185;
  int v186;
  size_t v187;
  unint64_t v188;
  __int128 *v189;
  uint64_t v190;
  uint64_t v191;
  _OWORD *v192;
  const void *v193;
  const char *v194;
  const void *v195;
  int v196;
  unint64_t *v197;
  unint64_t v198;
  xpc_object_t v199;
  xpc_object_t v200;
  xpc_object_t v201;
  void *v202;
  xpc_object_t v203;
  xpc_object_t v204;
  xpc_object_t v205;
  const char *v206;
  xpc_object_t v207;
  xpc_object_t v208;
  uint64_t v209;
  uint64_t v210;
  _OWORD *v211;
  const void *v212;
  const char *v213;
  const void *v214;
  int v215;
  size_t v216;
  void *v217;
  unint64_t *v218;
  unint64_t v219;
  int v220;
  xpc_object_t v221;
  xpc_object_t v222;
  size_t v223;
  size_t v224;
  const void *v225;
  unint64_t *v226;
  unint64_t v227;
  xpc_object_t v228;
  xpc_object_t v229;
  xpc_object_t v230;
  void *v231;
  xpc_object_t v232;
  xpc_object_t v233;
  uint64_t (***v234)(void *, int64_t);
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  const void *v238;
  size_t v239;
  unint64_t v240;
  size_t v241;
  __int128 *v242;
  uint64_t v243;
  uint64_t v244;
  _OWORD *v245;
  const char *v246;
  const void *v247;
  int v248;
  unint64_t *v249;
  unint64_t v250;
  const char *v251;
  uint64_t (***v252)(void *, int64_t);
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  const void *v256;
  size_t v257;
  unint64_t v258;
  size_t v259;
  __int128 *v260;
  uint64_t v261;
  uint64_t v262;
  _OWORD *v263;
  const char *v264;
  const void *v265;
  int v266;
  unint64_t *v267;
  unint64_t v268;
  const char *v269;
  xpc_object_t v270;
  void *v271;
  xpc_object_t v272;
  xpc_object_t v273;
  xpc_object_t v274;
  const char *v275;
  xpc_object_t v276;
  xpc_object_t v277;
  xpc_object_t v278;
  xpc_object_t v279;
  size_t v280;
  void *v281;
  unint64_t *v282;
  unint64_t v283;
  int v284;
  xpc_object_t v285;
  xpc_object_t v286;
  void *v287;
  unint64_t *v288;
  unint64_t v289;
  int v290;
  xpc_object_t v291;
  xpc_object_t v292;
  xpc_object_t v293;
  void *v294;
  unint64_t *v295;
  unint64_t v296;
  int v297;
  xpc_object_t v298;
  xpc_object_t v299;
  xpc_object_t v300;
  const char *v301;
  uint64_t v302;
  const char *v303;
  uint64_t v304;
  void *v305;
  unint64_t *v306;
  unint64_t v307;
  int v308;
  xpc_object_t v309;
  xpc_object_t v310;
  xpc_object_t v311;
  void *v312;
  unint64_t *v313;
  unint64_t v314;
  int v315;
  xpc_object_t v316;
  xpc_object_t v317;
  const char *v318;
  uint64_t v319;
  const char *v320;
  uint64_t v321;
  xpc_object_t v322;
  const char *v323;
  uint64_t v324;
  const char *v325;
  uint64_t v326;
  xpc_object_t v327;
  xpc_object_t v328;
  const char *v329;
  uint64_t v330;
  const char *v331;
  uint64_t v332;
  xpc_object_t v333;
  const char *v334;
  uint64_t v335;
  const char *v336;
  uint64_t v337;
  const char *v338;
  size_t v339;
  void *v340;
  unint64_t *v341;
  unint64_t v342;
  uint64_t (***v343)(_QWORD, uint64_t);
  uint64_t v344;
  void *v345;
  unint64_t *v346;
  unint64_t v347;
  uint64_t (***v348)(_QWORD, uint64_t);
  uint64_t v349;
  void *v350;
  unint64_t *v351;
  unint64_t v352;
  uint64_t (***v353)(_QWORD, uint64_t);
  uint64_t v354;
  void *v355;
  unint64_t *v356;
  unint64_t v357;
  uint64_t (***v358)(_QWORD, uint64_t);
  uint64_t v359;
  const char *v360;
  uint64_t v361;
  const char *v362;
  uint64_t v363;
  const char *v364;
  void *v365;
  unint64_t *v366;
  unint64_t v367;
  uint64_t (***v368)(_QWORD, uint64_t);
  void *v369;
  unint64_t *v370;
  unint64_t v371;
  uint64_t (***v372)(_QWORD, uint64_t);
  void *v373;
  unint64_t *v374;
  unint64_t v375;
  uint64_t (***v376)(_QWORD, uint64_t);
  void *v377;
  unint64_t *v378;
  unint64_t v379;
  uint64_t (***v380)(_QWORD, uint64_t);
  xpc_object_t v381;
  xpc_object_t v382;
  xpc_object_t v383;
  const char *v384;
  uint64_t v385;
  int64_t v386;
  unint64_t *v387;
  unint64_t v388;
  uint64_t (***v389)(_QWORD, uint64_t);
  void *v390;
  const char *v391;
  int64_t v392;
  unint64_t *v393;
  unint64_t v394;
  uint64_t (***v395)(_QWORD, uint64_t);
  void *v396;
  int64_t v397;
  unint64_t *v398;
  unint64_t v399;
  uint64_t (***v400)(_QWORD, uint64_t);
  void *v401;
  int64_t v402;
  unint64_t *v403;
  unint64_t v404;
  uint64_t (***v405)(_QWORD, uint64_t);
  void *v406;
  void *v407;
  antenna::Service::Internal *v408;
  xpc_object_t v409;
  xpc_object_t v410;
  xpc_object_t v411;
  xpc_object_t v412;
  xpc_object_t v413;
  xpc_object_t v414;
  xpc_object_t v415;
  xpc_object_t v416;
  xpc_object_t v417;
  xpc_object_t v418;
  void *__p[2];
  char v420;
  int64_t value;
  void *v422;
  xpc_object_t v423;
  xpc_object_t v424;
  int64_t v425;
  xpc_object_t v426;
  xpc_object_t v427;
  _DWORD v428[3];
  xpc_object_t v429;
  _DWORD v430[3];
  xpc_object_t v431;
  xpc_object_t v432;
  xpc_object_t v433;
  xpc_object_t v434;
  xpc_object_t v435;
  xpc_object_t v436;
  xpc_object_t v437;
  xpc_object_t v438;
  xpc_object_t v439;
  xpc_object_t v440;
  xpc_object_t v441;
  xpc_object_t v442;
  xpc_object_t v443;
  xpc_object_t v444;
  xpc_object_t v445;
  xpc_object_t v446;
  xpc_object_t v447;
  xpc_object_t v448;
  xpc_object_t v449;
  xpc_object_t v450;
  xpc_object_t v451;
  xpc_object_t v452;
  xpc_object_t v453;
  xpc_object_t v454;
  xpc_object_t object;
  xpc_object_t v456;
  xpc_object_t v457;
  xpc_object_t v458;
  xpc_object_t v459;
  xpc_object_t v460;
  xpc_object_t v461;
  xpc_object_t v462;
  xpc_object_t v463;
  xpc_object_t v464;
  xpc_object_t v465;
  xpc_object_t v466;
  xpc_object_t v467;
  xpc_object_t v468;
  xpc_object_t v469;
  __int128 __dst[2];
  char *v471;
  uint64_t v472;
  uint64_t v473;
  xpc_object_t v474;

  v474 = xpc_null_create();
  v4 = (const void *)*MEMORY[0x1E0CFB990];
  v5 = strlen((const char *)*MEMORY[0x1E0CFB990]);
  v6 = v5;
  v7 = *(unsigned __int8 *)(a2 + 23);
  if (*(char *)(a2 + 23) < 0)
  {
    if (v5 == -1)
      goto LABEL_827;
    v9 = *(const void **)a2;
    v8 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
    v9 = (const void *)a2;
    if (v6 == -1)
LABEL_827:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v8 >= v6)
    v10 = v6;
  else
    v10 = v8;
  v11 = !memcmp(v9, v4, v10) && v8 == v6;
  v12 = MEMORY[0x1E0C812F8];
  if (v11)
  {
    v471 = 0;
    v472 = 0;
    v473 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    if (!qword_1ED70FAF0)
    {
      v19 = (uint64_t (***)(void *, int64_t))operator new(0x18uLL);
      MEMORY[0x1C3B893B4](v19, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
      v18 = operator new(0x20uLL);
      *v18 = &unk_1E78FFBE0;
      v18[1] = 0;
      v18[2] = 0;
      v18[3] = v19;
      v29 = (std::__shared_weak_count *)off_1ED70FAF8;
      qword_1ED70FAF0 = (uint64_t)v19;
      off_1ED70FAF8 = v18;
      if (!v29)
      {
        __p[0] = v19;
        __p[1] = v18;
        goto LABEL_65;
      }
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v19 = (uint64_t (***)(void *, int64_t))qword_1ED70FAF0;
    v18 = off_1ED70FAF8;
    __p[0] = (void *)qword_1ED70FAF0;
    __p[1] = off_1ED70FAF8;
    if (!off_1ED70FAF8)
    {
LABEL_67:
      pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
      v45 = *(char *)(a2 + 23);
      if (v45 >= 0)
        v46 = *(unsigned __int8 *)(a2 + 23);
      else
        v46 = *(_QWORD *)(a2 + 8);
      v47 = v46 + 16;
      memset(__dst, 170, 24);
      if (v46 + 16 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v47 >= 0x17)
      {
        v49 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v47 | 7) != 0x17)
          v49 = v47 | 7;
        v50 = v49 + 1;
        v51 = operator new(v49 + 1);
        *((_QWORD *)&__dst[0] + 1) = v46 + 16;
        *(_QWORD *)&__dst[1] = v50 | 0x8000000000000000;
        *(_QWORD *)&__dst[0] = v51;
        *v51 = *(_OWORD *)"AntennaSetting::";
        v48 = v51 + 1;
      }
      else
      {
        v48 = &__dst[1];
        *(_QWORD *)&__dst[1] = 0;
        BYTE7(__dst[1]) = v46 + 16;
        __dst[0] = *(_OWORD *)"AntennaSetting::";
        if (!v46)
          goto LABEL_81;
      }
      if (v45 >= 0)
        v52 = (const void *)a2;
      else
        v52 = *(const void **)a2;
      memmove(v48, v52, v46);
LABEL_81:
      *((_BYTE *)v48 + v46) = 0;
      if ((SBYTE7(__dst[1]) & 0x80u) == 0)
        v53 = (const char *)__dst;
      else
        v53 = *(const char **)&__dst[0];
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&value, v53);
      v54 = (const void *)(**v19)(v19, value);
      if (v54)
      {
        v55 = ctu::cf::assign();
        CFRelease(v54);
        MEMORY[0x1C3B8936C](&value);
        if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
          goto LABEL_86;
      }
      else
      {
        v55 = 0;
        MEMORY[0x1C3B8936C](&value);
        if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
        {
LABEL_86:
          v56 = (std::__shared_weak_count *)__p[1];
          if (!__p[1])
            goto LABEL_93;
          goto LABEL_90;
        }
      }
      operator delete(*(void **)&__dst[0]);
      v56 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_93;
LABEL_90:
      v57 = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
        if (!v55)
          goto LABEL_821;
LABEL_94:
        v59 = xpc_dictionary_create(0, 0, 0);
        if (v59 || (v59 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8A86C](v59) == v12)
          {
            xpc_retain(v59);
            v60 = v59;
          }
          else
          {
            v60 = xpc_null_create();
          }
        }
        else
        {
          v60 = xpc_null_create();
          v59 = 0;
        }
        xpc_release(v59);
        v90 = xpc_null_create();
        v91 = v474;
        v474 = v60;
        xpc_release(v91);
        xpc_release(v90);
        v92 = xpc_string_create((const char *)v4);
        if (!v92)
          v92 = xpc_null_create();
        xpc_dictionary_set_value(v474, (const char *)*MEMORY[0x1E0CFB718], v92);
        v93 = xpc_null_create();
        xpc_release(v92);
        xpc_release(v93);
        v94 = xpc_dictionary_create(0, 0, 0);
        if (v94 || (v94 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8A86C](v94) == v12)
          {
            xpc_retain(v94);
            v95 = v94;
          }
          else
          {
            v95 = xpc_null_create();
          }
        }
        else
        {
          v95 = xpc_null_create();
          v94 = 0;
        }
        xpc_release(v94);
        if (v473 >= 0)
          v96 = (const char *)&v471;
        else
          v96 = v471;
        v97 = xpc_string_create(v96);
        if (!v97)
          v97 = xpc_null_create();
        xpc_dictionary_set_value(v95, (const char *)*MEMORY[0x1E0CFC0E8], v97);
        v98 = xpc_null_create();
        xpc_release(v97);
        xpc_release(v98);
        if (v95)
        {
LABEL_511:
          xpc_retain(v95);
          v278 = v95;
LABEL_513:
          xpc_dictionary_set_value(v474, (const char *)*MEMORY[0x1E0CFB4D0], v278);
          v279 = xpc_null_create();
          xpc_release(v278);
          xpc_release(v279);
          xpc_release(v95);
          goto LABEL_821;
        }
LABEL_512:
        v278 = xpc_null_create();
        goto LABEL_513;
      }
LABEL_93:
      if (!v55)
        goto LABEL_821;
      goto LABEL_94;
    }
LABEL_65:
    v43 = v18 + 1;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
    goto LABEL_67;
  }
  v13 = (const char *)*MEMORY[0x1E0CFB3B0];
  v14 = strlen((const char *)*MEMORY[0x1E0CFB3B0]);
  v15 = v14;
  if ((v7 & 0x80) != 0)
  {
    if (v14 == -1)
      goto LABEL_828;
    v17 = *(const void **)a2;
    v16 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    v16 = v7;
    v17 = (const void *)a2;
    if (v15 == -1)
LABEL_828:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v16 >= v15)
    v20 = v15;
  else
    v20 = v16;
  if (!memcmp(v17, v13, v20) && v16 == v15)
  {
    v471 = 0;
    v472 = 0;
    v473 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    if (!qword_1ED70FAF0)
    {
      v28 = (uint64_t (***)(void *, int64_t))operator new(0x18uLL);
      MEMORY[0x1C3B893B4](v28, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
      v27 = operator new(0x20uLL);
      *v27 = &unk_1E78FFBE0;
      v27[1] = 0;
      v27[2] = 0;
      v27[3] = v28;
      v40 = (std::__shared_weak_count *)off_1ED70FAF8;
      qword_1ED70FAF0 = (uint64_t)v28;
      off_1ED70FAF8 = v27;
      if (!v40)
      {
        __p[0] = v28;
        __p[1] = v27;
        goto LABEL_123;
      }
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v28 = (uint64_t (***)(void *, int64_t))qword_1ED70FAF0;
    v27 = off_1ED70FAF8;
    __p[0] = (void *)qword_1ED70FAF0;
    __p[1] = off_1ED70FAF8;
    if (!off_1ED70FAF8)
    {
LABEL_125:
      pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
      v74 = *(char *)(a2 + 23);
      if (v74 >= 0)
        v75 = *(unsigned __int8 *)(a2 + 23);
      else
        v75 = *(_QWORD *)(a2 + 8);
      v76 = v75 + 16;
      memset(__dst, 170, 24);
      if (v75 + 16 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v76 >= 0x17)
      {
        v78 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v76 | 7) != 0x17)
          v78 = v76 | 7;
        v79 = v78 + 1;
        v80 = operator new(v78 + 1);
        *((_QWORD *)&__dst[0] + 1) = v75 + 16;
        *(_QWORD *)&__dst[1] = v79 | 0x8000000000000000;
        *(_QWORD *)&__dst[0] = v80;
        *v80 = *(_OWORD *)"AntennaSetting::";
        v77 = v80 + 1;
      }
      else
      {
        v77 = &__dst[1];
        *(_QWORD *)&__dst[1] = 0;
        BYTE7(__dst[1]) = v75 + 16;
        __dst[0] = *(_OWORD *)"AntennaSetting::";
        if (!v75)
          goto LABEL_139;
      }
      if (v74 >= 0)
        v81 = (const void *)a2;
      else
        v81 = *(const void **)a2;
      memmove(v77, v81, v75);
LABEL_139:
      *((_BYTE *)v77 + v75) = 0;
      if ((SBYTE7(__dst[1]) & 0x80u) == 0)
        v82 = (const char *)__dst;
      else
        v82 = *(const char **)&__dst[0];
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&value, v82);
      v83 = (const void *)(**v28)(v28, value);
      if (v83)
      {
        v84 = ctu::cf::assign();
        CFRelease(v83);
        MEMORY[0x1C3B8936C](&value);
        if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
          goto LABEL_144;
      }
      else
      {
        v84 = 0;
        MEMORY[0x1C3B8936C](&value);
        if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
        {
LABEL_144:
          v85 = (std::__shared_weak_count *)__p[1];
          if (!__p[1])
            goto LABEL_151;
          goto LABEL_148;
        }
      }
      operator delete(*(void **)&__dst[0]);
      v85 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_151;
LABEL_148:
      v86 = (unint64_t *)&v85->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
        if (!v84)
          goto LABEL_821;
LABEL_152:
        v88 = xpc_dictionary_create(0, 0, 0);
        if (v88 || (v88 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8A86C](v88) == v12)
          {
            xpc_retain(v88);
            v89 = v88;
          }
          else
          {
            v89 = xpc_null_create();
          }
        }
        else
        {
          v89 = xpc_null_create();
          v88 = 0;
        }
        xpc_release(v88);
        v128 = xpc_null_create();
        v129 = v474;
        v474 = v89;
        xpc_release(v129);
        xpc_release(v128);
        v130 = xpc_string_create(v13);
        if (!v130)
          v130 = xpc_null_create();
        xpc_dictionary_set_value(v474, (const char *)*MEMORY[0x1E0CFB718], v130);
        v131 = xpc_null_create();
        xpc_release(v130);
        xpc_release(v131);
        if (v473 >= 0)
          v132 = (const char *)&v471;
        else
          v132 = v471;
        v133 = xpc_string_create(v132);
        if (!v133)
          v133 = xpc_null_create();
        xpc_dictionary_set_value(v474, (const char *)*MEMORY[0x1E0CFB4D0], v133);
        v134 = xpc_null_create();
        xpc_release(v133);
        xpc_release(v134);
        goto LABEL_821;
      }
LABEL_151:
      if (!v84)
        goto LABEL_821;
      goto LABEL_152;
    }
LABEL_123:
    v72 = v27 + 1;
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
    goto LABEL_125;
  }
  v22 = (const void *)*MEMORY[0x1E0CFB5B8];
  v23 = strlen((const char *)*MEMORY[0x1E0CFB5B8]);
  v24 = v23;
  if ((v7 & 0x80) == 0)
  {
    v25 = v7;
    if (v23 != -1)
    {
      if (v7 >= v23)
        v26 = v23;
      else
        v26 = v7;
      if (memcmp((const void *)a2, v22, v26))
        goto LABEL_52;
LABEL_48:
      if (v25 != v24)
        goto LABEL_52;
      v471 = 0;
      v472 = 0;
      v473 = 0;
      pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
      if (!qword_1ED70FAF0)
      {
        v34 = (uint64_t (***)(void *, int64_t))operator new(0x18uLL);
        MEMORY[0x1C3B893B4](v34, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
        v33 = operator new(0x20uLL);
        *v33 = &unk_1E78FFBE0;
        v33[1] = 0;
        v33[2] = 0;
        v33[3] = v34;
        v69 = (std::__shared_weak_count *)off_1ED70FAF8;
        qword_1ED70FAF0 = (uint64_t)v34;
        off_1ED70FAF8 = v33;
        if (!v69)
        {
          __p[0] = v34;
          __p[1] = v33;
          goto LABEL_193;
        }
        v70 = (unint64_t *)&v69->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      v34 = (uint64_t (***)(void *, int64_t))qword_1ED70FAF0;
      v33 = off_1ED70FAF8;
      __p[0] = (void *)qword_1ED70FAF0;
      __p[1] = off_1ED70FAF8;
      if (!off_1ED70FAF8)
      {
LABEL_195:
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v112 = *(char *)(a2 + 23);
        if (v112 >= 0)
          v113 = *(unsigned __int8 *)(a2 + 23);
        else
          v113 = *(_QWORD *)(a2 + 8);
        v114 = v113 + 16;
        memset(__dst, 170, 24);
        if (v113 + 16 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v114 >= 0x17)
        {
          v116 = (v114 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v114 | 7) != 0x17)
            v116 = v114 | 7;
          v117 = v116 + 1;
          v118 = operator new(v116 + 1);
          *((_QWORD *)&__dst[0] + 1) = v113 + 16;
          *(_QWORD *)&__dst[1] = v117 | 0x8000000000000000;
          *(_QWORD *)&__dst[0] = v118;
          *v118 = *(_OWORD *)"AntennaSetting::";
          v115 = v118 + 1;
        }
        else
        {
          v115 = &__dst[1];
          *(_QWORD *)&__dst[1] = 0;
          BYTE7(__dst[1]) = v113 + 16;
          __dst[0] = *(_OWORD *)"AntennaSetting::";
          if (!v113)
            goto LABEL_209;
        }
        if (v112 >= 0)
          v119 = (const void *)a2;
        else
          v119 = *(const void **)a2;
        memmove(v115, v119, v113);
LABEL_209:
        *((_BYTE *)v115 + v113) = 0;
        if ((SBYTE7(__dst[1]) & 0x80u) == 0)
          v120 = (const char *)__dst;
        else
          v120 = *(const char **)&__dst[0];
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&value, v120);
        v121 = (const void *)(**v34)(v34, value);
        if (v121)
        {
          v122 = ctu::cf::assign();
          CFRelease(v121);
          MEMORY[0x1C3B8936C](&value);
          if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
            goto LABEL_214;
        }
        else
        {
          v122 = 0;
          MEMORY[0x1C3B8936C](&value);
          if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
          {
LABEL_214:
            v123 = (std::__shared_weak_count *)__p[1];
            if (!__p[1])
              goto LABEL_222;
            goto LABEL_218;
          }
        }
        operator delete(*(void **)&__dst[0]);
        v123 = (std::__shared_weak_count *)__p[1];
        if (!__p[1])
          goto LABEL_222;
LABEL_218:
        v124 = (unint64_t *)&v123->__shared_owners_;
        do
          v125 = __ldaxr(v124);
        while (__stlxr(v125 - 1, v124));
        if (!v125)
        {
          ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
          std::__shared_weak_count::__release_weak(v123);
        }
LABEL_222:
        if (!v122)
          goto LABEL_821;
        v126 = xpc_dictionary_create(0, 0, 0);
        if (v126 || (v126 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8A86C](v126) == v12)
          {
            xpc_retain(v126);
            v127 = v126;
          }
          else
          {
            v127 = xpc_null_create();
          }
        }
        else
        {
          v127 = xpc_null_create();
          v126 = 0;
        }
        xpc_release(v126);
        v163 = xpc_null_create();
        v164 = v474;
        v474 = v127;
        xpc_release(v164);
        xpc_release(v163);
        v165 = xpc_string_create((const char *)v22);
        if (!v165)
          v165 = xpc_null_create();
        xpc_dictionary_set_value(v474, (const char *)*MEMORY[0x1E0CFB718], v165);
        v166 = xpc_null_create();
        xpc_release(v165);
        xpc_release(v166);
        v167 = xpc_dictionary_create(0, 0, 0);
        if (v167 || (v167 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8A86C](v167) == v12)
          {
            xpc_retain(v167);
            v95 = v167;
          }
          else
          {
            v95 = xpc_null_create();
          }
        }
        else
        {
          v95 = xpc_null_create();
          v167 = 0;
        }
        xpc_release(v167);
        if (v473 >= 0)
          v168 = (const char *)&v471;
        else
          v168 = v471;
        v169 = xpc_string_create(v168);
        if (!v169)
          v169 = xpc_null_create();
        xpc_dictionary_set_value(v95, (const char *)*MEMORY[0x1E0CFBF30], v169);
        v170 = xpc_null_create();
        xpc_release(v169);
        xpc_release(v170);
        if (v95)
          goto LABEL_511;
        goto LABEL_512;
      }
LABEL_193:
      v110 = v33 + 1;
      do
        v111 = __ldxr(v110);
      while (__stxr(v111 + 1, v110));
      goto LABEL_195;
    }
LABEL_830:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v23 == -1)
    goto LABEL_830;
  v25 = *(_QWORD *)(a2 + 8);
  if (v25 >= v23)
    v32 = v23;
  else
    v32 = *(_QWORD *)(a2 + 8);
  if (!memcmp(*(const void **)a2, v22, v32))
    goto LABEL_48;
LABEL_52:
  v35 = (const void *)*MEMORY[0x1E0CFB708];
  v36 = strlen((const char *)*MEMORY[0x1E0CFB708]);
  v37 = v36;
  if ((v7 & 0x80) == 0)
  {
    v38 = v7;
    if (v36 != -1)
    {
      if (v7 >= v36)
        v39 = v36;
      else
        v39 = v7;
      if (memcmp((const void *)a2, v35, v39))
        goto LABEL_110;
LABEL_106:
      if (v38 != v37)
        goto LABEL_110;
      v471 = 0;
      v472 = 0;
      v473 = 0;
      pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
      if (!qword_1ED70FAF0)
      {
        v63 = (uint64_t (***)(void *, int64_t))operator new(0x18uLL);
        MEMORY[0x1C3B893B4](v63, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
        v62 = operator new(0x20uLL);
        *v62 = &unk_1E78FFBE0;
        v62[1] = 0;
        v62[2] = 0;
        v62[3] = v63;
        v107 = (std::__shared_weak_count *)off_1ED70FAF8;
        qword_1ED70FAF0 = (uint64_t)v63;
        off_1ED70FAF8 = v62;
        if (!v107)
        {
          __p[0] = v63;
          __p[1] = v62;
          goto LABEL_257;
        }
        v108 = (unint64_t *)&v107->__shared_owners_;
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 - 1, v108));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
          std::__shared_weak_count::__release_weak(v107);
        }
      }
      v63 = (uint64_t (***)(void *, int64_t))qword_1ED70FAF0;
      v62 = off_1ED70FAF8;
      __p[0] = (void *)qword_1ED70FAF0;
      __p[1] = off_1ED70FAF8;
      if (!off_1ED70FAF8)
      {
LABEL_259:
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v147 = *(char *)(a2 + 23);
        if (v147 >= 0)
          v148 = *(unsigned __int8 *)(a2 + 23);
        else
          v148 = *(_QWORD *)(a2 + 8);
        v149 = v148 + 16;
        memset(__dst, 170, 24);
        if (v148 + 16 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v149 >= 0x17)
        {
          v151 = (v149 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v149 | 7) != 0x17)
            v151 = v149 | 7;
          v152 = v151 + 1;
          v153 = operator new(v151 + 1);
          *((_QWORD *)&__dst[0] + 1) = v148 + 16;
          *(_QWORD *)&__dst[1] = v152 | 0x8000000000000000;
          *(_QWORD *)&__dst[0] = v153;
          *v153 = *(_OWORD *)"AntennaSetting::";
          v150 = v153 + 1;
        }
        else
        {
          v150 = &__dst[1];
          *(_QWORD *)&__dst[1] = 0;
          BYTE7(__dst[1]) = v148 + 16;
          __dst[0] = *(_OWORD *)"AntennaSetting::";
          if (!v148)
            goto LABEL_273;
        }
        if (v147 >= 0)
          v154 = (const void *)a2;
        else
          v154 = *(const void **)a2;
        memmove(v150, v154, v148);
LABEL_273:
        *((_BYTE *)v150 + v148) = 0;
        if ((SBYTE7(__dst[1]) & 0x80u) == 0)
          v155 = (const char *)__dst;
        else
          v155 = *(const char **)&__dst[0];
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&value, v155);
        v156 = (const void *)(**v63)(v63, value);
        if (v156)
        {
          v157 = ctu::cf::assign();
          CFRelease(v156);
          MEMORY[0x1C3B8936C](&value);
          if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
            goto LABEL_278;
        }
        else
        {
          v157 = 0;
          MEMORY[0x1C3B8936C](&value);
          if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
          {
LABEL_278:
            v158 = (std::__shared_weak_count *)__p[1];
            if (!__p[1])
              goto LABEL_286;
            goto LABEL_282;
          }
        }
        operator delete(*(void **)&__dst[0]);
        v158 = (std::__shared_weak_count *)__p[1];
        if (!__p[1])
          goto LABEL_286;
LABEL_282:
        v159 = (unint64_t *)&v158->__shared_owners_;
        do
          v160 = __ldaxr(v159);
        while (__stlxr(v160 - 1, v159));
        if (!v160)
        {
          ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
          std::__shared_weak_count::__release_weak(v158);
        }
LABEL_286:
        if (!v157)
          goto LABEL_821;
        v161 = xpc_dictionary_create(0, 0, 0);
        if (v161 || (v161 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8A86C](v161) == v12)
          {
            xpc_retain(v161);
            v162 = v161;
          }
          else
          {
            v162 = xpc_null_create();
          }
        }
        else
        {
          v162 = xpc_null_create();
          v161 = 0;
        }
        xpc_release(v161);
        v201 = xpc_null_create();
        v202 = v474;
        v474 = v162;
        xpc_release(v202);
        xpc_release(v201);
        v203 = xpc_string_create((const char *)v35);
        if (!v203)
          v203 = xpc_null_create();
        xpc_dictionary_set_value(v474, (const char *)*MEMORY[0x1E0CFB718], v203);
        v204 = xpc_null_create();
        xpc_release(v203);
        xpc_release(v204);
        v205 = xpc_dictionary_create(0, 0, 0);
        if (v205 || (v205 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8A86C](v205) == v12)
          {
            xpc_retain(v205);
            v95 = v205;
          }
          else
          {
            v95 = xpc_null_create();
          }
        }
        else
        {
          v95 = xpc_null_create();
          v205 = 0;
        }
        xpc_release(v205);
        if (v473 >= 0)
          v206 = (const char *)&v471;
        else
          v206 = v471;
        v207 = xpc_string_create(v206);
        if (!v207)
          v207 = xpc_null_create();
        xpc_dictionary_set_value(v95, (const char *)*MEMORY[0x1E0CFBFA8], v207);
        v208 = xpc_null_create();
        xpc_release(v207);
        xpc_release(v208);
        if (v95)
          goto LABEL_511;
        goto LABEL_512;
      }
LABEL_257:
      v145 = v62 + 1;
      do
        v146 = __ldxr(v145);
      while (__stxr(v146 + 1, v145));
      goto LABEL_259;
    }
LABEL_832:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v36 == -1)
    goto LABEL_832;
  v38 = *(_QWORD *)(a2 + 8);
  if (v38 >= v36)
    v61 = v36;
  else
    v61 = *(_QWORD *)(a2 + 8);
  if (!memcmp(*(const void **)a2, v35, v61))
    goto LABEL_106;
LABEL_110:
  v64 = (const void *)*MEMORY[0x1E0CFBE18];
  v65 = strlen((const char *)*MEMORY[0x1E0CFBE18]);
  v66 = v65;
  if ((v7 & 0x80) == 0)
  {
    v67 = v7;
    if (v65 != -1)
    {
      if (v7 >= v65)
        v68 = v65;
      else
        v68 = v7;
      if (memcmp((const void *)a2, v64, v68))
        goto LABEL_184;
LABEL_180:
      if (v67 != v66)
        goto LABEL_184;
      v471 = 0;
      v472 = 0;
      v473 = 0;
      pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
      if (!qword_1ED70FAF0)
      {
        v101 = (uint64_t (***)(void *, int64_t))operator new(0x18uLL);
        MEMORY[0x1C3B893B4](v101, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
        v100 = operator new(0x20uLL);
        *v100 = &unk_1E78FFBE0;
        v100[1] = 0;
        v100[2] = 0;
        v100[3] = v101;
        v142 = (std::__shared_weak_count *)off_1ED70FAF8;
        qword_1ED70FAF0 = (uint64_t)v101;
        off_1ED70FAF8 = v100;
        if (!v142)
        {
          __p[0] = v101;
          __p[1] = v100;
          goto LABEL_332;
        }
        v143 = (unint64_t *)&v142->__shared_owners_;
        do
          v144 = __ldaxr(v143);
        while (__stlxr(v144 - 1, v143));
        if (!v144)
        {
          ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
          std::__shared_weak_count::__release_weak(v142);
        }
      }
      v101 = (uint64_t (***)(void *, int64_t))qword_1ED70FAF0;
      v100 = off_1ED70FAF8;
      __p[0] = (void *)qword_1ED70FAF0;
      __p[1] = off_1ED70FAF8;
      if (!off_1ED70FAF8)
      {
LABEL_334:
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v186 = *(char *)(a2 + 23);
        if (v186 >= 0)
          v187 = *(unsigned __int8 *)(a2 + 23);
        else
          v187 = *(_QWORD *)(a2 + 8);
        v188 = v187 + 16;
        memset(__dst, 170, 24);
        if (v187 + 16 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v188 >= 0x17)
        {
          v190 = (v188 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v188 | 7) != 0x17)
            v190 = v188 | 7;
          v191 = v190 + 1;
          v192 = operator new(v190 + 1);
          *((_QWORD *)&__dst[0] + 1) = v187 + 16;
          *(_QWORD *)&__dst[1] = v191 | 0x8000000000000000;
          *(_QWORD *)&__dst[0] = v192;
          *v192 = *(_OWORD *)"AntennaSetting::";
          v189 = v192 + 1;
        }
        else
        {
          v189 = &__dst[1];
          *(_QWORD *)&__dst[1] = 0;
          BYTE7(__dst[1]) = v187 + 16;
          __dst[0] = *(_OWORD *)"AntennaSetting::";
          if (!v187)
            goto LABEL_348;
        }
        if (v186 >= 0)
          v193 = (const void *)a2;
        else
          v193 = *(const void **)a2;
        memmove(v189, v193, v187);
LABEL_348:
        *((_BYTE *)v189 + v187) = 0;
        if ((SBYTE7(__dst[1]) & 0x80u) == 0)
          v194 = (const char *)__dst;
        else
          v194 = *(const char **)&__dst[0];
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&value, v194);
        v195 = (const void *)(**v101)(v101, value);
        if (v195)
        {
          v196 = ctu::cf::assign();
          CFRelease(v195);
        }
        else
        {
          v196 = 0;
        }
        MEMORY[0x1C3B8936C](&value);
        if (SBYTE7(__dst[1]) < 0)
          operator delete(*(void **)&__dst[0]);
        if (__p[1])
        {
          v197 = (unint64_t *)((char *)__p[1] + 8);
          do
            v198 = __ldaxr(v197);
          while (__stlxr(v198 - 1, v197));
          if (!v198)
          {
            (*(void (**)(void *))(*(_QWORD *)__p[1] + 16))(__p[1]);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[1]);
          }
        }
        if (!v196)
          goto LABEL_821;
        v199 = xpc_dictionary_create(0, 0, 0);
        if (v199 || (v199 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8A86C](v199) == v12)
          {
            xpc_retain(v199);
            v200 = v199;
          }
          else
          {
            v200 = xpc_null_create();
          }
        }
        else
        {
          v200 = xpc_null_create();
          v199 = 0;
        }
        xpc_release(v199);
        v270 = xpc_null_create();
        v271 = v474;
        v474 = v200;
        xpc_release(v271);
        xpc_release(v270);
        v272 = xpc_string_create((const char *)v64);
        if (!v272)
          v272 = xpc_null_create();
        xpc_dictionary_set_value(v474, (const char *)*MEMORY[0x1E0CFB718], v272);
        v273 = xpc_null_create();
        xpc_release(v272);
        xpc_release(v273);
        v274 = xpc_dictionary_create(0, 0, 0);
        if (v274 || (v274 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8A86C](v274) == v12)
          {
            xpc_retain(v274);
            v95 = v274;
          }
          else
          {
            v95 = xpc_null_create();
          }
        }
        else
        {
          v95 = xpc_null_create();
          v274 = 0;
        }
        xpc_release(v274);
        if (v473 >= 0)
          v275 = (const char *)&v471;
        else
          v275 = v471;
        v276 = xpc_string_create(v275);
        if (!v276)
          v276 = xpc_null_create();
        xpc_dictionary_set_value(v95, (const char *)*MEMORY[0x1E0CFC0C8], v276);
        v277 = xpc_null_create();
        xpc_release(v276);
        xpc_release(v277);
        if (v95)
          goto LABEL_511;
        goto LABEL_512;
      }
LABEL_332:
      v184 = v100 + 1;
      do
        v185 = __ldxr(v184);
      while (__stxr(v185 + 1, v184));
      goto LABEL_334;
    }
LABEL_834:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v65 == -1)
    goto LABEL_834;
  v67 = *(_QWORD *)(a2 + 8);
  if (v67 >= v65)
    v99 = v65;
  else
    v99 = *(_QWORD *)(a2 + 8);
  if (!memcmp(*(const void **)a2, v64, v99))
    goto LABEL_180;
LABEL_184:
  v102 = (const char *)*MEMORY[0x1E0CFBE40];
  v103 = strlen((const char *)*MEMORY[0x1E0CFBE40]);
  v104 = v103;
  if ((v7 & 0x80) != 0)
  {
    if (v103 == -1)
      goto LABEL_836;
    v106 = *(const void **)a2;
    v105 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    v105 = v7;
    v106 = (const void *)a2;
    if (v104 == -1)
LABEL_836:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v105 >= v104)
    v135 = v104;
  else
    v135 = v105;
  if (!memcmp(v106, v102, v135) && v105 == v104)
  {
    v136 = xpc_dictionary_create(0, 0, 0);
    if (v136 || (v136 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8A86C](v136) == v12)
      {
        xpc_retain(v136);
        v137 = v136;
      }
      else
      {
        v137 = xpc_null_create();
      }
    }
    else
    {
      v137 = xpc_null_create();
      v136 = 0;
    }
    xpc_release(v136);
    v230 = xpc_null_create();
    v231 = v474;
    v474 = v137;
    xpc_release(v231);
    xpc_release(v230);
    v471 = 0;
    v472 = 0;
    v473 = 0;
    v232 = xpc_string_create(v102);
    if (!v232)
      v232 = xpc_null_create();
    xpc_dictionary_set_value(v474, (const char *)*MEMORY[0x1E0CFB718], v232);
    v233 = xpc_null_create();
    xpc_release(v232);
    xpc_release(v233);
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v234 = (uint64_t (***)(void *, int64_t))qword_1ED70FAF0;
    if (!qword_1ED70FAF0)
    {
      ABMProperties::create_default_global((ABMProperties *)__dst);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
      std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
      v234 = (uint64_t (***)(void *, int64_t))qword_1ED70FAF0;
    }
    v235 = (std::__shared_weak_count *)off_1ED70FAF8;
    __p[0] = v234;
    __p[1] = off_1ED70FAF8;
    if (off_1ED70FAF8)
    {
      v236 = (unint64_t *)((char *)off_1ED70FAF8 + 8);
      do
        v237 = __ldxr(v236);
      while (__stxr(v237 + 1, v236));
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v238 = (const void *)*MEMORY[0x1E0CFB1B8];
    v239 = strlen((const char *)*MEMORY[0x1E0CFB1B8]);
    v240 = v239 + 16;
    memset(__dst, 170, 24);
    if (v239 + 16 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v241 = v239;
    if (v240 >= 0x17)
    {
      v243 = (v240 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v240 | 7) != 0x17)
        v243 = v240 | 7;
      v244 = v243 + 1;
      v245 = operator new(v243 + 1);
      *((_QWORD *)&__dst[0] + 1) = v240;
      *(_QWORD *)&__dst[1] = v244 | 0x8000000000000000;
      *(_QWORD *)&__dst[0] = v245;
      *v245 = *(_OWORD *)"AntennaSetting::";
      v242 = v245 + 1;
    }
    else
    {
      v242 = &__dst[1];
      *(_QWORD *)&__dst[1] = 0;
      BYTE7(__dst[1]) = v239 + 16;
      __dst[0] = *(_OWORD *)"AntennaSetting::";
      if (!v239)
      {
LABEL_443:
        *((_BYTE *)v242 + v241) = 0;
        if ((SBYTE7(__dst[1]) & 0x80u) == 0)
          v246 = (const char *)__dst;
        else
          v246 = *(const char **)&__dst[0];
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&value, v246);
        v247 = (const void *)(**v234)(v234, value);
        if (v247)
        {
          v248 = ctu::cf::assign();
          CFRelease(v247);
        }
        else
        {
          v248 = 0;
        }
        MEMORY[0x1C3B8936C](&value);
        if (SBYTE7(__dst[1]) < 0)
          operator delete(*(void **)&__dst[0]);
        if (v235)
        {
          v249 = (unint64_t *)&v235->__shared_owners_;
          do
            v250 = __ldaxr(v249);
          while (__stlxr(v250 - 1, v249));
          if (!v250)
          {
            ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
            std::__shared_weak_count::__release_weak(v235);
          }
        }
        if (v248)
        {
          if (v473 >= 0)
            v251 = (const char *)&v471;
          else
            v251 = v471;
          v468 = xpc_string_create(v251);
          if (!v468)
            v468 = xpc_null_create();
          *(_QWORD *)&__dst[0] = &v474;
          *((_QWORD *)&__dst[0] + 1) = v238;
          xpc::dict::object_proxy::operator=((uint64_t)__dst, &v468, &v469);
          xpc_release(v469);
          v469 = 0;
          xpc_release(v468);
          v468 = 0;
        }
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v252 = (uint64_t (***)(void *, int64_t))qword_1ED70FAF0;
        if (!qword_1ED70FAF0)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v252 = (uint64_t (***)(void *, int64_t))qword_1ED70FAF0;
        }
        v253 = (std::__shared_weak_count *)off_1ED70FAF8;
        __p[0] = v252;
        __p[1] = off_1ED70FAF8;
        if (off_1ED70FAF8)
        {
          v254 = (unint64_t *)((char *)off_1ED70FAF8 + 8);
          do
            v255 = __ldxr(v254);
          while (__stxr(v255 + 1, v254));
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v256 = (const void *)*MEMORY[0x1E0CFB398];
        v257 = strlen((const char *)*MEMORY[0x1E0CFB398]);
        v258 = v257 + 16;
        memset(__dst, 170, 24);
        if (v257 + 16 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v259 = v257;
        if (v258 >= 0x17)
        {
          v261 = (v258 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v258 | 7) != 0x17)
            v261 = v258 | 7;
          v262 = v261 + 1;
          v263 = operator new(v261 + 1);
          *((_QWORD *)&__dst[0] + 1) = v258;
          *(_QWORD *)&__dst[1] = v262 | 0x8000000000000000;
          *(_QWORD *)&__dst[0] = v263;
          *v263 = *(_OWORD *)"AntennaSetting::";
          v260 = v263 + 1;
        }
        else
        {
          v260 = &__dst[1];
          *(_QWORD *)&__dst[1] = 0;
          BYTE7(__dst[1]) = v257 + 16;
          __dst[0] = *(_OWORD *)"AntennaSetting::";
          if (!v257)
            goto LABEL_476;
        }
        memmove(v260, v256, v259);
LABEL_476:
        *((_BYTE *)v260 + v259) = 0;
        if ((SBYTE7(__dst[1]) & 0x80u) == 0)
          v264 = (const char *)__dst;
        else
          v264 = *(const char **)&__dst[0];
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&value, v264);
        v265 = (const void *)(**v252)(v252, value);
        if (v265)
        {
          v266 = ctu::cf::assign();
          CFRelease(v265);
        }
        else
        {
          v266 = 0;
        }
        MEMORY[0x1C3B8936C](&value);
        if (SBYTE7(__dst[1]) < 0)
          operator delete(*(void **)&__dst[0]);
        if (v253)
        {
          v267 = (unint64_t *)&v253->__shared_owners_;
          do
            v268 = __ldaxr(v267);
          while (__stlxr(v268 - 1, v267));
          if (!v268)
          {
            ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
            std::__shared_weak_count::__release_weak(v253);
          }
        }
        if (v266)
        {
          if (v473 >= 0)
            v269 = (const char *)&v471;
          else
            v269 = v471;
          v466 = xpc_string_create(v269);
          if (!v466)
            v466 = xpc_null_create();
          *(_QWORD *)&__dst[0] = &v474;
          *((_QWORD *)&__dst[0] + 1) = v256;
          xpc::dict::object_proxy::operator=((uint64_t)__dst, &v466, &v467);
          xpc_release(v467);
          v467 = 0;
          xpc_release(v466);
          v466 = 0;
        }
        goto LABEL_821;
      }
    }
    memmove(v242, v238, v241);
    goto LABEL_443;
  }
  v138 = strlen((const char *)*MEMORY[0x1E0CFB6B0]);
  v139 = v138;
  if ((v7 & 0x80) != 0)
  {
    if (v138 == -1)
      goto LABEL_838;
    v141 = *(const void **)a2;
    v140 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    v140 = v7;
    v141 = (const void *)a2;
    if (v139 == -1)
LABEL_838:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v140 >= v139)
    v171 = v139;
  else
    v171 = v140;
  if (!memcmp(v141, (const void *)*MEMORY[0x1E0CFB6B0], v171) && v140 == v139)
  {
    v471 = 0;
    v472 = 0;
    v473 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v172 = (uint64_t (***)(void *, int64_t))qword_1ED70FAF0;
    if (!qword_1ED70FAF0)
    {
      ABMProperties::create_default_global((ABMProperties *)__dst);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
      std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
      v172 = (uint64_t (***)(void *, int64_t))qword_1ED70FAF0;
    }
    v173 = (std::__shared_weak_count *)off_1ED70FAF8;
    __p[0] = v172;
    __p[1] = off_1ED70FAF8;
    if (off_1ED70FAF8)
    {
      v174 = (unint64_t *)((char *)off_1ED70FAF8 + 8);
      do
        v175 = __ldxr(v174);
      while (__stxr(v175 + 1, v174));
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v176 = *(char *)(a2 + 23);
    if (v176 >= 0)
      v177 = *(unsigned __int8 *)(a2 + 23);
    else
      v177 = *(_QWORD *)(a2 + 8);
    v178 = v177 + 16;
    memset(__dst, 170, 24);
    if (v177 + 16 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v178 >= 0x17)
    {
      v209 = (v178 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v178 | 7) != 0x17)
        v209 = v178 | 7;
      v210 = v209 + 1;
      v211 = operator new(v209 + 1);
      *((_QWORD *)&__dst[0] + 1) = v177 + 16;
      *(_QWORD *)&__dst[1] = v210 | 0x8000000000000000;
      *(_QWORD *)&__dst[0] = v211;
      *v211 = *(_OWORD *)"AntennaSetting::";
      v179 = v211 + 1;
    }
    else
    {
      v179 = &__dst[1];
      *(_QWORD *)&__dst[1] = 0;
      BYTE7(__dst[1]) = v177 + 16;
      __dst[0] = *(_OWORD *)"AntennaSetting::";
      if (!v177)
        goto LABEL_391;
    }
    if (v176 >= 0)
      v212 = (const void *)a2;
    else
      v212 = *(const void **)a2;
    memmove(v179, v212, v177);
LABEL_391:
    *((_BYTE *)v179 + v177) = 0;
    if ((SBYTE7(__dst[1]) & 0x80u) == 0)
      v213 = (const char *)__dst;
    else
      v213 = *(const char **)&__dst[0];
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&value, v213);
    v214 = (const void *)(**v172)(v172, value);
    if (v214)
    {
      v215 = ctu::cf::assign();
      CFRelease(v214);
    }
    else
    {
      v215 = 0;
    }
    MEMORY[0x1C3B8936C](&value);
    if (SBYTE7(__dst[1]) < 0)
      operator delete(*(void **)&__dst[0]);
    if (v173)
    {
      v226 = (unint64_t *)&v173->__shared_owners_;
      do
        v227 = __ldaxr(v226);
      while (__stlxr(v227 - 1, v226));
      if (!v227)
      {
        ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
        std::__shared_weak_count::__release_weak(v173);
      }
    }
    if (!v215)
      goto LABEL_821;
    v228 = xpc_dictionary_create(0, 0, 0);
    v229 = v228;
    if (v228)
    {
      *(_QWORD *)&__dst[0] = v228;
    }
    else
    {
      v229 = xpc_null_create();
      *(_QWORD *)&__dst[0] = v229;
      if (!v229)
      {
        v293 = xpc_null_create();
        v229 = 0;
        goto LABEL_564;
      }
    }
    if (MEMORY[0x1C3B8A86C](v229) == v12)
    {
      xpc_retain(v229);
LABEL_565:
      xpc_release(v229);
      xpc::dict::operator=(&v474, (xpc_object_t *)__dst);
      xpc_release(*(xpc_object_t *)&__dst[0]);
      if (*(char *)(a2 + 23) >= 0)
        v301 = (const char *)a2;
      else
        v301 = *(const char **)a2;
      v464 = xpc_string_create(v301);
      if (!v464)
        v464 = xpc_null_create();
      v302 = *MEMORY[0x1E0CFB718];
      *(_QWORD *)&__dst[0] = &v474;
      *((_QWORD *)&__dst[0] + 1) = v302;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v464, &v465);
      xpc_release(v465);
      v465 = 0;
      xpc_release(v464);
      v464 = 0;
      if (v473 >= 0)
        v303 = (const char *)&v471;
      else
        v303 = v471;
      v462 = xpc_string_create(v303);
      if (!v462)
        v462 = xpc_null_create();
      v304 = *MEMORY[0x1E0CFB4D0];
      *(_QWORD *)&__dst[0] = &v474;
      *((_QWORD *)&__dst[0] + 1) = v304;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v462, &v463);
      xpc_release(v463);
      v463 = 0;
      xpc_release(v462);
      v462 = 0;
      goto LABEL_821;
    }
    v293 = xpc_null_create();
LABEL_564:
    *(_QWORD *)&__dst[0] = v293;
    goto LABEL_565;
  }
  v180 = strlen((const char *)*MEMORY[0x1E0CFBE10]);
  v181 = v180;
  if ((v7 & 0x80) != 0)
  {
    if (v180 == -1)
      goto LABEL_841;
    v183 = *(const void **)a2;
    v182 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    v182 = v7;
    v183 = (const void *)a2;
    if (v181 == -1)
LABEL_841:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v182 >= v181)
    v216 = v181;
  else
    v216 = v182;
  if (!memcmp(v183, (const void *)*MEMORY[0x1E0CFBE10], v216) && v182 == v181)
  {
    v471 = 0;
    v472 = 0;
    v473 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v217 = (void *)qword_1ED70FAF0;
    if (!qword_1ED70FAF0)
    {
      ABMProperties::create_default_global((ABMProperties *)__dst);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
      std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
      v217 = (void *)qword_1ED70FAF0;
    }
    __p[0] = v217;
    __p[1] = off_1ED70FAF8;
    if (off_1ED70FAF8)
    {
      v218 = (unint64_t *)((char *)off_1ED70FAF8 + 8);
      do
        v219 = __ldxr(v218);
      while (__stxr(v219 + 1, v218));
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (const void **)a2);
    v220 = Preferences::getPreference<std::string>((uint64_t (***)(_QWORD, uint64_t))__p[0], (const char *)__dst);
    if (SBYTE7(__dst[1]) < 0)
      operator delete(*(void **)&__dst[0]);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (!v220)
      goto LABEL_821;
    v221 = xpc_dictionary_create(0, 0, 0);
    v222 = v221;
    if (v221)
    {
      *(_QWORD *)&__dst[0] = v221;
    }
    else
    {
      v222 = xpc_null_create();
      *(_QWORD *)&__dst[0] = v222;
      if (!v222)
      {
        v300 = xpc_null_create();
        v222 = 0;
        goto LABEL_601;
      }
    }
    if (MEMORY[0x1C3B8A86C](v222) == v12)
    {
      xpc_retain(v222);
LABEL_602:
      xpc_release(v222);
      xpc::dict::operator=(&v474, (xpc_object_t *)__dst);
      xpc_release(*(xpc_object_t *)&__dst[0]);
      if (*(char *)(a2 + 23) >= 0)
        v318 = (const char *)a2;
      else
        v318 = *(const char **)a2;
      v460 = xpc_string_create(v318);
      if (!v460)
        v460 = xpc_null_create();
      v319 = *MEMORY[0x1E0CFB718];
      *(_QWORD *)&__dst[0] = &v474;
      *((_QWORD *)&__dst[0] + 1) = v319;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v460, &v461);
      xpc_release(v461);
      v461 = 0;
      xpc_release(v460);
      v460 = 0;
      if (v473 >= 0)
        v320 = (const char *)&v471;
      else
        v320 = v471;
      v458 = xpc_string_create(v320);
      if (!v458)
        v458 = xpc_null_create();
      v321 = *MEMORY[0x1E0CFB4D0];
      *(_QWORD *)&__dst[0] = &v474;
      *((_QWORD *)&__dst[0] + 1) = v321;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v458, &v459);
      xpc_release(v459);
      v459 = 0;
      xpc_release(v458);
      v458 = 0;
      goto LABEL_821;
    }
    v300 = xpc_null_create();
LABEL_601:
    *(_QWORD *)&__dst[0] = v300;
    goto LABEL_602;
  }
  v223 = strlen((const char *)*MEMORY[0x1E0CFBE00]);
  v224 = v223;
  if ((v7 & 0x80) != 0)
  {
    if (v223 == -1)
      goto LABEL_843;
    v225 = *(const void **)a2;
    v7 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    v225 = (const void *)a2;
    if (v224 == -1)
LABEL_843:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v7 >= v224)
    v280 = v224;
  else
    v280 = v7;
  if (!memcmp(v225, (const void *)*MEMORY[0x1E0CFBE00], v280) && v7 == v224)
  {
    v471 = 0;
    v472 = 0;
    v473 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v281 = (void *)qword_1ED70FAF0;
    if (!qword_1ED70FAF0)
    {
      ABMProperties::create_default_global((ABMProperties *)__dst);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
      std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
      v281 = (void *)qword_1ED70FAF0;
    }
    __p[0] = v281;
    __p[1] = off_1ED70FAF8;
    if (off_1ED70FAF8)
    {
      v282 = (unint64_t *)((char *)off_1ED70FAF8 + 8);
      do
        v283 = __ldxr(v282);
      while (__stxr(v283 + 1, v282));
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (const void **)a2);
    v284 = Preferences::getPreference<std::string>((uint64_t (***)(_QWORD, uint64_t))__p[0], (const char *)__dst);
    if (SBYTE7(__dst[1]) < 0)
      operator delete(*(void **)&__dst[0]);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (!v284)
      goto LABEL_821;
    v285 = xpc_dictionary_create(0, 0, 0);
    v286 = v285;
    if (v285)
    {
      *(_QWORD *)&__dst[0] = v285;
    }
    else
    {
      v286 = xpc_null_create();
      *(_QWORD *)&__dst[0] = v286;
      if (!v286)
      {
        v311 = xpc_null_create();
        v286 = 0;
        goto LABEL_617;
      }
    }
    if (MEMORY[0x1C3B8A86C](v286) == v12)
    {
      xpc_retain(v286);
LABEL_618:
      xpc_release(v286);
      xpc::dict::operator=(&v474, (xpc_object_t *)__dst);
      xpc_release(*(xpc_object_t *)&__dst[0]);
      if (*(char *)(a2 + 23) >= 0)
        v323 = (const char *)a2;
      else
        v323 = *(const char **)a2;
      v456 = xpc_string_create(v323);
      if (!v456)
        v456 = xpc_null_create();
      v324 = *MEMORY[0x1E0CFB718];
      *(_QWORD *)&__dst[0] = &v474;
      *((_QWORD *)&__dst[0] + 1) = v324;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v456, &v457);
      xpc_release(v457);
      v457 = 0;
      xpc_release(v456);
      v456 = 0;
      if (v473 >= 0)
        v325 = (const char *)&v471;
      else
        v325 = v471;
      v454 = xpc_string_create(v325);
      if (!v454)
        v454 = xpc_null_create();
      v326 = *MEMORY[0x1E0CFB4D0];
      *(_QWORD *)&__dst[0] = &v474;
      *((_QWORD *)&__dst[0] + 1) = v326;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v454, &object);
      xpc_release(object);
      object = 0;
      xpc_release(v454);
      v454 = 0;
      goto LABEL_821;
    }
    v311 = xpc_null_create();
LABEL_617:
    *(_QWORD *)&__dst[0] = v311;
    goto LABEL_618;
  }
  if (!std::string::compare((const std::string *)a2, (const std::string::value_type *)*MEMORY[0x1E0CFB6B8]))
  {
    v471 = 0;
    v472 = 0;
    v473 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v294 = (void *)qword_1ED70FAF0;
    if (!qword_1ED70FAF0)
    {
      ABMProperties::create_default_global((ABMProperties *)__dst);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
      std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
      v294 = (void *)qword_1ED70FAF0;
    }
    __p[0] = v294;
    __p[1] = off_1ED70FAF8;
    if (off_1ED70FAF8)
    {
      v295 = (unint64_t *)((char *)off_1ED70FAF8 + 8);
      do
        v296 = __ldxr(v295);
      while (__stxr(v296 + 1, v295));
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (const void **)a2);
    v297 = Preferences::getPreference<std::string>((uint64_t (***)(_QWORD, uint64_t))__p[0], (const char *)__dst);
    if (SBYTE7(__dst[1]) < 0)
      operator delete(*(void **)&__dst[0]);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (!v297)
      goto LABEL_821;
    v298 = xpc_dictionary_create(0, 0, 0);
    v299 = v298;
    if (v298)
    {
      *(_QWORD *)&__dst[0] = v298;
    }
    else
    {
      v299 = xpc_null_create();
      *(_QWORD *)&__dst[0] = v299;
      if (!v299)
      {
        v322 = xpc_null_create();
        v299 = 0;
        goto LABEL_638;
      }
    }
    if (MEMORY[0x1C3B8A86C](v299) == v12)
    {
      xpc_retain(v299);
LABEL_639:
      xpc_release(v299);
      xpc::dict::operator=(&v474, (xpc_object_t *)__dst);
      xpc_release(*(xpc_object_t *)&__dst[0]);
      if (*(char *)(a2 + 23) >= 0)
        v329 = (const char *)a2;
      else
        v329 = *(const char **)a2;
      v452 = xpc_string_create(v329);
      if (!v452)
        v452 = xpc_null_create();
      v330 = *MEMORY[0x1E0CFB718];
      *(_QWORD *)&__dst[0] = &v474;
      *((_QWORD *)&__dst[0] + 1) = v330;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v452, &v453);
      xpc_release(v453);
      v453 = 0;
      xpc_release(v452);
      v452 = 0;
      if (v473 >= 0)
        v331 = (const char *)&v471;
      else
        v331 = v471;
      v450 = xpc_string_create(v331);
      if (!v450)
        v450 = xpc_null_create();
      v332 = *MEMORY[0x1E0CFB4D0];
      *(_QWORD *)&__dst[0] = &v474;
      *((_QWORD *)&__dst[0] + 1) = v332;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v450, &v451);
      xpc_release(v451);
      v451 = 0;
      xpc_release(v450);
      v450 = 0;
      goto LABEL_821;
    }
    v322 = xpc_null_create();
LABEL_638:
    *(_QWORD *)&__dst[0] = v322;
    goto LABEL_639;
  }
  if (!std::string::compare((const std::string *)a2, (const std::string::value_type *)*MEMORY[0x1E0CFBE88]))
  {
    v471 = 0;
    v472 = 0;
    v473 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v305 = (void *)qword_1ED70FAF0;
    if (!qword_1ED70FAF0)
    {
      ABMProperties::create_default_global((ABMProperties *)__dst);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
      std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
      v305 = (void *)qword_1ED70FAF0;
    }
    __p[0] = v305;
    __p[1] = off_1ED70FAF8;
    if (off_1ED70FAF8)
    {
      v306 = (unint64_t *)((char *)off_1ED70FAF8 + 8);
      do
        v307 = __ldxr(v306);
      while (__stxr(v307 + 1, v306));
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (const void **)a2);
    v308 = Preferences::getPreference<std::string>((uint64_t (***)(_QWORD, uint64_t))__p[0], (const char *)__dst);
    if (SBYTE7(__dst[1]) < 0)
      operator delete(*(void **)&__dst[0]);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (!v308)
      goto LABEL_821;
    v309 = xpc_dictionary_create(0, 0, 0);
    v310 = v309;
    if (v309)
    {
      *(_QWORD *)&__dst[0] = v309;
    }
    else
    {
      v310 = xpc_null_create();
      *(_QWORD *)&__dst[0] = v310;
      if (!v310)
      {
        v327 = xpc_null_create();
        v310 = 0;
        goto LABEL_655;
      }
    }
    if (MEMORY[0x1C3B8A86C](v310) == v12)
    {
      xpc_retain(v310);
LABEL_656:
      xpc_release(v310);
      xpc::dict::operator=(&v474, (xpc_object_t *)__dst);
      xpc_release(*(xpc_object_t *)&__dst[0]);
      if (*(char *)(a2 + 23) >= 0)
        v334 = (const char *)a2;
      else
        v334 = *(const char **)a2;
      v448 = xpc_string_create(v334);
      if (!v448)
        v448 = xpc_null_create();
      v335 = *MEMORY[0x1E0CFB718];
      *(_QWORD *)&__dst[0] = &v474;
      *((_QWORD *)&__dst[0] + 1) = v335;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v448, &v449);
      xpc_release(v449);
      v449 = 0;
      xpc_release(v448);
      v448 = 0;
      if (v473 >= 0)
        v336 = (const char *)&v471;
      else
        v336 = v471;
      v446 = xpc_string_create(v336);
      if (!v446)
        v446 = xpc_null_create();
      v337 = *MEMORY[0x1E0CFB4D0];
      *(_QWORD *)&__dst[0] = &v474;
      *((_QWORD *)&__dst[0] + 1) = v337;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v446, &v447);
      xpc_release(v447);
      v447 = 0;
      xpc_release(v446);
      v446 = 0;
      if (v473 >= 0)
        v338 = (const char *)&v471;
      else
        v338 = v471;
      v339 = strlen((const char *)*MEMORY[0x1E0CFB9A0]);
      if (!strncasecmp(v338, (const char *)*MEMORY[0x1E0CFB9A0], v339))
      {
        LODWORD(value) = 0;
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v340 = (void *)qword_1ED70FAF0;
        if (!qword_1ED70FAF0)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v340 = (void *)qword_1ED70FAF0;
        }
        __p[0] = v340;
        __p[1] = off_1ED70FAF8;
        if (off_1ED70FAF8)
        {
          v341 = (unint64_t *)((char *)off_1ED70FAF8 + 8);
          do
            v342 = __ldxr(v341);
          while (__stxr(v342 + 1, v341));
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v343 = (uint64_t (***)(_QWORD, uint64_t))__p[0];
        v344 = *MEMORY[0x1E0CFC0D0];
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (char *)*MEMORY[0x1E0CFC0D0]);
        Preferences::getPreference<unsigned int>(v343, (const char *)__dst, (ctu::cf *)&value);
        if (SBYTE7(__dst[1]) < 0)
          operator delete(*(void **)&__dst[0]);
        std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        v444 = xpc_int64_create(value);
        if (!v444)
          v444 = xpc_null_create();
        *(_QWORD *)&__dst[0] = &v474;
        *((_QWORD *)&__dst[0] + 1) = v344;
        xpc::dict::object_proxy::operator=((uint64_t)__dst, &v444, &v445);
        xpc_release(v445);
        v445 = 0;
        xpc_release(v444);
        v444 = 0;
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v345 = (void *)qword_1ED70FAF0;
        if (!qword_1ED70FAF0)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v345 = (void *)qword_1ED70FAF0;
        }
        __p[0] = v345;
        __p[1] = off_1ED70FAF8;
        if (off_1ED70FAF8)
        {
          v346 = (unint64_t *)((char *)off_1ED70FAF8 + 8);
          do
            v347 = __ldxr(v346);
          while (__stxr(v347 + 1, v346));
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v348 = (uint64_t (***)(_QWORD, uint64_t))__p[0];
        v349 = *MEMORY[0x1E0CFC088];
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (char *)*MEMORY[0x1E0CFC088]);
        Preferences::getPreference<unsigned int>(v348, (const char *)__dst, (ctu::cf *)&value);
        if (SBYTE7(__dst[1]) < 0)
          operator delete(*(void **)&__dst[0]);
        std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        v442 = xpc_int64_create(value);
        if (!v442)
          v442 = xpc_null_create();
        *(_QWORD *)&__dst[0] = &v474;
        *((_QWORD *)&__dst[0] + 1) = v349;
        xpc::dict::object_proxy::operator=((uint64_t)__dst, &v442, &v443);
        xpc_release(v443);
        v443 = 0;
        xpc_release(v442);
        v442 = 0;
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v350 = (void *)qword_1ED70FAF0;
        if (!qword_1ED70FAF0)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v350 = (void *)qword_1ED70FAF0;
        }
        __p[0] = v350;
        __p[1] = off_1ED70FAF8;
        if (off_1ED70FAF8)
        {
          v351 = (unint64_t *)((char *)off_1ED70FAF8 + 8);
          do
            v352 = __ldxr(v351);
          while (__stxr(v352 + 1, v351));
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v353 = (uint64_t (***)(_QWORD, uint64_t))__p[0];
        v354 = *MEMORY[0x1E0CFBEF0];
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (char *)*MEMORY[0x1E0CFBEF0]);
        Preferences::getPreference<unsigned int>(v353, (const char *)__dst, (ctu::cf *)&value);
        if (SBYTE7(__dst[1]) < 0)
          operator delete(*(void **)&__dst[0]);
        std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        v440 = xpc_int64_create(value);
        if (!v440)
          v440 = xpc_null_create();
        *(_QWORD *)&__dst[0] = &v474;
        *((_QWORD *)&__dst[0] + 1) = v354;
        xpc::dict::object_proxy::operator=((uint64_t)__dst, &v440, &v441);
        xpc_release(v441);
        v441 = 0;
        xpc_release(v440);
        v440 = 0;
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v355 = (void *)qword_1ED70FAF0;
        if (!qword_1ED70FAF0)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v355 = (void *)qword_1ED70FAF0;
        }
        __p[0] = v355;
        __p[1] = off_1ED70FAF8;
        if (off_1ED70FAF8)
        {
          v356 = (unint64_t *)((char *)off_1ED70FAF8 + 8);
          do
            v357 = __ldxr(v356);
          while (__stxr(v357 + 1, v356));
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v358 = (uint64_t (***)(_QWORD, uint64_t))__p[0];
        v359 = *MEMORY[0x1E0CFBEE8];
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (char *)*MEMORY[0x1E0CFBEE8]);
        Preferences::getPreference<unsigned int>(v358, (const char *)__dst, (ctu::cf *)&value);
        if (SBYTE7(__dst[1]) < 0)
          operator delete(*(void **)&__dst[0]);
        std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        v438 = xpc_int64_create(value);
        if (!v438)
          v438 = xpc_null_create();
        *(_QWORD *)&__dst[0] = &v474;
        *((_QWORD *)&__dst[0] + 1) = v359;
        xpc::dict::object_proxy::operator=((uint64_t)__dst, &v438, &v439);
        xpc_release(v439);
        v439 = 0;
        xpc_release(v438);
        v438 = 0;
      }
      goto LABEL_821;
    }
    v327 = xpc_null_create();
LABEL_655:
    *(_QWORD *)&__dst[0] = v327;
    goto LABEL_656;
  }
  if (!std::string::compare((const std::string *)a2, "kSetWorkoutInfo"))
  {
    v471 = 0;
    v472 = 0;
    v473 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v312 = (void *)qword_1ED70FAF0;
    if (!qword_1ED70FAF0)
    {
      ABMProperties::create_default_global((ABMProperties *)__dst);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
      std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
      v312 = (void *)qword_1ED70FAF0;
    }
    __p[0] = v312;
    __p[1] = off_1ED70FAF8;
    if (off_1ED70FAF8)
    {
      v313 = (unint64_t *)((char *)off_1ED70FAF8 + 8);
      do
        v314 = __ldxr(v313);
      while (__stxr(v314 + 1, v313));
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (const void **)a2);
    v315 = Preferences::getPreference<std::string>((uint64_t (***)(_QWORD, uint64_t))__p[0], (const char *)__dst);
    if (SBYTE7(__dst[1]) < 0)
      operator delete(*(void **)&__dst[0]);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (!v315)
      goto LABEL_821;
    v316 = xpc_dictionary_create(0, 0, 0);
    v317 = v316;
    if (v316)
    {
      *(_QWORD *)&__dst[0] = v316;
    }
    else
    {
      v317 = xpc_null_create();
      *(_QWORD *)&__dst[0] = v317;
      if (!v317)
      {
        v328 = xpc_null_create();
        v317 = 0;
        goto LABEL_709;
      }
    }
    if (MEMORY[0x1C3B8A86C](v317) == v12)
    {
      xpc_retain(v317);
LABEL_710:
      xpc_release(v317);
      xpc::dict::operator=(&v474, (xpc_object_t *)__dst);
      xpc_release(*(xpc_object_t *)&__dst[0]);
      if (*(char *)(a2 + 23) >= 0)
        v360 = (const char *)a2;
      else
        v360 = *(const char **)a2;
      v436 = xpc_string_create(v360);
      if (!v436)
        v436 = xpc_null_create();
      v361 = *MEMORY[0x1E0CFB718];
      *(_QWORD *)&__dst[0] = &v474;
      *((_QWORD *)&__dst[0] + 1) = v361;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v436, &v437);
      xpc_release(v437);
      v437 = 0;
      xpc_release(v436);
      v436 = 0;
      if (v473 >= 0)
        v362 = (const char *)&v471;
      else
        v362 = v471;
      v434 = xpc_string_create(v362);
      if (!v434)
        v434 = xpc_null_create();
      v363 = *MEMORY[0x1E0CFB4D0];
      *(_QWORD *)&__dst[0] = &v474;
      *((_QWORD *)&__dst[0] + 1) = v363;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v434, &v435);
      xpc_release(v435);
      v435 = 0;
      xpc_release(v434);
      v434 = 0;
      if (v473 >= 0)
        v364 = (const char *)&v471;
      else
        v364 = v471;
      if (!strncasecmp(v364, "OVERRIDE", 8uLL))
      {
        LODWORD(value) = 0;
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v365 = (void *)qword_1ED70FAF0;
        if (!qword_1ED70FAF0)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v365 = (void *)qword_1ED70FAF0;
        }
        __p[0] = v365;
        __p[1] = off_1ED70FAF8;
        if (off_1ED70FAF8)
        {
          v366 = (unint64_t *)((char *)off_1ED70FAF8 + 8);
          do
            v367 = __ldxr(v366);
          while (__stxr(v367 + 1, v366));
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v368 = (uint64_t (***)(_QWORD, uint64_t))__p[0];
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", "kKeyWorkoutType");
        Preferences::getPreference<unsigned int>(v368, (const char *)__dst, (ctu::cf *)&value);
        if (SBYTE7(__dst[1]) < 0)
          operator delete(*(void **)&__dst[0]);
        std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        v432 = xpc_int64_create(value);
        if (!v432)
          v432 = xpc_null_create();
        *(_QWORD *)&__dst[0] = &v474;
        *((_QWORD *)&__dst[0] + 1) = "kKeyWorkoutType";
        xpc::dict::object_proxy::operator=((uint64_t)__dst, &v432, &v433);
        xpc_release(v433);
        v433 = 0;
        xpc_release(v432);
        v432 = 0;
        LODWORD(v425) = 0;
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v369 = (void *)qword_1ED70FAF0;
        if (!qword_1ED70FAF0)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v369 = (void *)qword_1ED70FAF0;
        }
        __p[0] = v369;
        __p[1] = off_1ED70FAF8;
        if (off_1ED70FAF8)
        {
          v370 = (unint64_t *)((char *)off_1ED70FAF8 + 8);
          do
            v371 = __ldxr(v370);
          while (__stxr(v371 + 1, v370));
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v372 = (uint64_t (***)(_QWORD, uint64_t))__p[0];
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", "kKeyWorkoutState");
        Preferences::getPreference<unsigned int>(v372, (const char *)__dst, (ctu::cf *)&v425);
        if (SBYTE7(__dst[1]) < 0)
          operator delete(*(void **)&__dst[0]);
        std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        *(_QWORD *)&v430[1] = xpc_int64_create(v425);
        if (!*(_QWORD *)&v430[1])
          *(_QWORD *)&v430[1] = xpc_null_create();
        *(_QWORD *)&__dst[0] = &v474;
        *((_QWORD *)&__dst[0] + 1) = "kKeyWorkoutState";
        xpc::dict::object_proxy::operator=((uint64_t)__dst, (xpc_object_t *)&v430[1], &v431);
        xpc_release(v431);
        v431 = 0;
        xpc_release(*(xpc_object_t *)&v430[1]);
        memset(v430, 0, sizeof(v430));
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v373 = (void *)qword_1ED70FAF0;
        if (!qword_1ED70FAF0)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v373 = (void *)qword_1ED70FAF0;
        }
        __p[0] = v373;
        __p[1] = off_1ED70FAF8;
        if (off_1ED70FAF8)
        {
          v374 = (unint64_t *)((char *)off_1ED70FAF8 + 8);
          do
            v375 = __ldxr(v374);
          while (__stxr(v375 + 1, v374));
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v376 = (uint64_t (***)(_QWORD, uint64_t))__p[0];
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", "kKeyWorkoutLocation");
        Preferences::getPreference<unsigned int>(v376, (const char *)__dst, (ctu::cf *)v430);
        if (SBYTE7(__dst[1]) < 0)
          operator delete(*(void **)&__dst[0]);
        std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        *(_QWORD *)&v428[1] = xpc_int64_create(v430[0]);
        if (!*(_QWORD *)&v428[1])
          *(_QWORD *)&v428[1] = xpc_null_create();
        *(_QWORD *)&__dst[0] = &v474;
        *((_QWORD *)&__dst[0] + 1) = "kKeyWorkoutLocation";
        xpc::dict::object_proxy::operator=((uint64_t)__dst, (xpc_object_t *)&v428[1], &v429);
        xpc_release(v429);
        v429 = 0;
        xpc_release(*(xpc_object_t *)&v428[1]);
        memset(v428, 0, sizeof(v428));
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v377 = (void *)qword_1ED70FAF0;
        if (!qword_1ED70FAF0)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v377 = (void *)qword_1ED70FAF0;
        }
        __p[0] = v377;
        __p[1] = off_1ED70FAF8;
        if (off_1ED70FAF8)
        {
          v378 = (unint64_t *)((char *)off_1ED70FAF8 + 8);
          do
            v379 = __ldxr(v378);
          while (__stxr(v379 + 1, v378));
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v380 = (uint64_t (***)(_QWORD, uint64_t))__p[0];
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", "kKeySwimLocation");
        Preferences::getPreference<unsigned int>(v380, (const char *)__dst, (ctu::cf *)v428);
        if (SBYTE7(__dst[1]) < 0)
          operator delete(*(void **)&__dst[0]);
        std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        v426 = xpc_int64_create(v428[0]);
        if (!v426)
          v426 = xpc_null_create();
        *(_QWORD *)&__dst[0] = &v474;
        *((_QWORD *)&__dst[0] + 1) = "kKeySwimLocation";
        xpc::dict::object_proxy::operator=((uint64_t)__dst, &v426, &v427);
        xpc_release(v427);
        v427 = 0;
        xpc_release(v426);
        v426 = 0;
      }
      goto LABEL_821;
    }
    v328 = xpc_null_create();
LABEL_709:
    *(_QWORD *)&__dst[0] = v328;
    goto LABEL_710;
  }
  if (std::string::compare((const std::string *)a2, (const std::string::value_type *)*MEMORY[0x1E0CFAF90]))
    goto LABEL_823;
  v471 = 0;
  v472 = 0;
  v473 = 0;
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  v287 = (void *)qword_1ED70FAF0;
  if (!qword_1ED70FAF0)
  {
    ABMProperties::create_default_global((ABMProperties *)__dst);
    std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
    v287 = (void *)qword_1ED70FAF0;
  }
  __p[0] = v287;
  __p[1] = off_1ED70FAF8;
  if (off_1ED70FAF8)
  {
    v288 = (unint64_t *)((char *)off_1ED70FAF8 + 8);
    do
      v289 = __ldxr(v288);
    while (__stxr(v289 + 1, v288));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (const void **)a2);
  v290 = Preferences::getPreference<std::string>((uint64_t (***)(_QWORD, uint64_t))__p[0], (const char *)__dst);
  if (SBYTE7(__dst[1]) < 0)
    operator delete(*(void **)&__dst[0]);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
  if (v290)
  {
    v291 = xpc_dictionary_create(0, 0, 0);
    v292 = v291;
    if (v291)
    {
      *(_QWORD *)&__dst[0] = v291;
    }
    else
    {
      v292 = xpc_null_create();
      *(_QWORD *)&__dst[0] = v292;
      if (!v292)
      {
        v333 = xpc_null_create();
        v292 = 0;
        goto LABEL_762;
      }
    }
    if (MEMORY[0x1C3B8A86C](v292) == v12)
    {
      xpc_retain(v292);
      goto LABEL_763;
    }
    v333 = xpc_null_create();
LABEL_762:
    *(_QWORD *)&__dst[0] = v333;
LABEL_763:
    xpc_release(v292);
    xpc::dict::operator=(&v474, (xpc_object_t *)__dst);
    xpc_release(*(xpc_object_t *)&__dst[0]);
    v425 = 0xAAAAAAAAAAAAAAAALL;
    v381 = xpc_dictionary_create(0, 0, 0);
    v382 = v381;
    if (v381)
    {
      v425 = (int64_t)v381;
    }
    else
    {
      v382 = xpc_null_create();
      v425 = (int64_t)v382;
      if (!v382)
      {
        v383 = xpc_null_create();
        v382 = 0;
        goto LABEL_770;
      }
    }
    if (MEMORY[0x1C3B8A86C](v382) == v12)
    {
      xpc_retain(v382);
      goto LABEL_771;
    }
    v383 = xpc_null_create();
LABEL_770:
    v425 = (int64_t)v383;
LABEL_771:
    xpc_release(v382);
    if (*(char *)(a2 + 23) >= 0)
      v384 = (const char *)a2;
    else
      v384 = *(const char **)a2;
    v423 = xpc_string_create(v384);
    if (!v423)
      v423 = xpc_null_create();
    v385 = *MEMORY[0x1E0CFB718];
    *(_QWORD *)&__dst[0] = &v474;
    *((_QWORD *)&__dst[0] + 1) = v385;
    xpc::dict::object_proxy::operator=((uint64_t)__dst, &v423, &v424);
    xpc_release(v424);
    v424 = 0;
    xpc_release(v423);
    v423 = 0;
    memset(__dst, 170, 24);
    std::string::basic_string[abi:ne180100]<0>(__dst, "");
    v430[0] = 0x7FFF;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v386 = qword_1ED70FAF0;
    if (!qword_1ED70FAF0)
    {
      ABMProperties::create_default_global((ABMProperties *)__p);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100]((__int128 *)__p);
      std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      v386 = qword_1ED70FAF0;
    }
    value = v386;
    v422 = off_1ED70FAF8;
    if (off_1ED70FAF8)
    {
      v387 = (unint64_t *)((char *)off_1ED70FAF8 + 8);
      do
        v388 = __ldxr(v387);
      while (__stxr(v388 + 1, v387));
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v389 = (uint64_t (***)(_QWORD, uint64_t))value;
    v390 = (void *)*MEMORY[0x1E0CFBB48];
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (const void **)"AntennaSetting::", (char *)*MEMORY[0x1E0CFBB48]);
    Preferences::getPreference<std::string>(v389, (const char *)__p);
    if (v420 < 0)
      operator delete(__p[0]);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&value);
    if (SBYTE7(__dst[1]) < 0)
    {
      if (*((_QWORD *)&__dst[0] + 1))
      {
        v391 = *(const char **)&__dst[0];
        goto LABEL_788;
      }
    }
    else if (BYTE7(__dst[1]))
    {
      v391 = (const char *)__dst;
LABEL_788:
      v417 = xpc_string_create(v391);
      if (!v417)
        v417 = xpc_null_create();
      __p[0] = &v425;
      __p[1] = v390;
      xpc::dict::object_proxy::operator=((uint64_t)__p, &v417, &v418);
      xpc_release(v418);
      v418 = 0;
      xpc_release(v417);
      v417 = 0;
    }
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v392 = qword_1ED70FAF0;
    if (!qword_1ED70FAF0)
    {
      ABMProperties::create_default_global((ABMProperties *)__p);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100]((__int128 *)__p);
      std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      v392 = qword_1ED70FAF0;
    }
    value = v392;
    v422 = off_1ED70FAF8;
    if (off_1ED70FAF8)
    {
      v393 = (unint64_t *)((char *)off_1ED70FAF8 + 8);
      do
        v394 = __ldxr(v393);
      while (__stxr(v394 + 1, v393));
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v395 = (uint64_t (***)(_QWORD, uint64_t))value;
    v396 = (void *)*MEMORY[0x1E0CFB308];
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (const void **)"AntennaSetting::", (char *)*MEMORY[0x1E0CFB308]);
    Preferences::getPreference<unsigned int>(v395, (const char *)__p, (ctu::cf *)v430);
    if (v420 < 0)
      operator delete(__p[0]);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&value);
    v415 = xpc_int64_create(v430[0]);
    if (!v415)
      v415 = xpc_null_create();
    __p[0] = &v425;
    __p[1] = v396;
    xpc::dict::object_proxy::operator=((uint64_t)__p, &v415, &v416);
    xpc_release(v416);
    v416 = 0;
    xpc_release(v415);
    v415 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v397 = qword_1ED70FAF0;
    if (!qword_1ED70FAF0)
    {
      ABMProperties::create_default_global((ABMProperties *)__p);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100]((__int128 *)__p);
      std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      v397 = qword_1ED70FAF0;
    }
    value = v397;
    v422 = off_1ED70FAF8;
    if (off_1ED70FAF8)
    {
      v398 = (unint64_t *)((char *)off_1ED70FAF8 + 8);
      do
        v399 = __ldxr(v398);
      while (__stxr(v399 + 1, v398));
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v400 = (uint64_t (***)(_QWORD, uint64_t))value;
    v401 = (void *)*MEMORY[0x1E0CFB4C8];
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (const void **)"AntennaSetting::", (char *)*MEMORY[0x1E0CFB4C8]);
    Preferences::getPreference<unsigned int>(v400, (const char *)__p, (ctu::cf *)v430);
    if (v420 < 0)
      operator delete(__p[0]);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&value);
    v413 = xpc_int64_create(v430[0]);
    if (!v413)
      v413 = xpc_null_create();
    __p[0] = &v425;
    __p[1] = v401;
    xpc::dict::object_proxy::operator=((uint64_t)__p, &v413, &v414);
    xpc_release(v414);
    v414 = 0;
    xpc_release(v413);
    v413 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v402 = qword_1ED70FAF0;
    if (!qword_1ED70FAF0)
    {
      ABMProperties::create_default_global((ABMProperties *)__p);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100]((__int128 *)__p);
      std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      v402 = qword_1ED70FAF0;
    }
    value = v402;
    v422 = off_1ED70FAF8;
    if (off_1ED70FAF8)
    {
      v403 = (unint64_t *)((char *)off_1ED70FAF8 + 8);
      do
        v404 = __ldxr(v403);
      while (__stxr(v404 + 1, v403));
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v405 = (uint64_t (***)(_QWORD, uint64_t))value;
    v406 = (void *)*MEMORY[0x1E0CFB120];
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (const void **)"AntennaSetting::", (char *)*MEMORY[0x1E0CFB120]);
    Preferences::getPreference<unsigned int>(v405, (const char *)__p, (ctu::cf *)v430);
    if (v420 < 0)
      operator delete(__p[0]);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&value);
    v411 = xpc_int64_create(v430[0]);
    if (!v411)
      v411 = xpc_null_create();
    __p[0] = &v425;
    __p[1] = v406;
    xpc::dict::object_proxy::operator=((uint64_t)__p, &v411, &v412);
    xpc_release(v412);
    v412 = 0;
    xpc_release(v411);
    v411 = 0;
    xpc::dict::dict((xpc::dict *)&v409, (void **)&v425);
    v407 = (void *)*MEMORY[0x1E0CFB4D0];
    __p[0] = &v474;
    __p[1] = v407;
    xpc::dict::object_proxy::operator=((uint64_t)__p, &v409, &v410);
    xpc_release(v410);
    v410 = 0;
    xpc_release(v409);
    v409 = 0;
    if (SBYTE7(__dst[1]) < 0)
      operator delete(*(void **)&__dst[0]);
    xpc_release((xpc_object_t)v425);
  }
LABEL_821:
  if (SHIBYTE(v473) < 0)
    operator delete(v471);
LABEL_823:
  if (MEMORY[0x1C3B8A86C](v474) == v12)
  {
    v408 = **(antenna::Service::Internal ***)(a1 + 176);
    if (v408)
      antenna::Service::Internal::antennaSetProperty(v408, &v474);
  }
  xpc_release(v474);
}

void sub_1BF44CF58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,xpc_object_t object)
{
  uint64_t v29;

  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (*(char *)(v29 - 89) < 0)
    operator delete(*(void **)(v29 - 112));
  xpc_release(*(xpc_object_t *)(v29 - 88));
  _Unwind_Resume(a1);
}

uint64_t Preferences::getPreference<std::string>(uint64_t (***a1)(_QWORD, uint64_t), const char *a2)
{
  const void *v3;
  uint64_t v4;
  uint64_t v6;

  if (a2[23] < 0)
    a2 = *(const char **)a2;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v6, a2);
  v3 = (const void *)(**a1)(a1, v6);
  if (v3)
  {
    v4 = ctu::cf::assign();
    CFRelease(v3);
  }
  else
  {
    v4 = 0;
  }
  MEMORY[0x1C3B8936C](&v6);
  return v4;
}

_QWORD *std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *__dst, const void **a2, const void **a3)
{
  _QWORD *v3;
  int v4;
  size_t v5;
  int v6;
  size_t v7;
  unint64_t v8;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  char *v14;
  const void *v15;

  v3 = __dst;
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  v6 = *((char *)a3 + 23);
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  v8 = v7 + v5;
  memset(__dst, 170, 24);
  if (v7 + v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v8 <= 0x16)
  {
    __dst[1] = 0;
    __dst[2] = 0;
    *__dst = 0;
    *((_BYTE *)__dst + 23) = v8;
    if (!v5)
      goto LABEL_18;
    goto LABEL_14;
  }
  v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v8 | 7) != 0x17)
    v11 = v8 | 7;
  v12 = v11 + 1;
  __dst = operator new(v11 + 1);
  v3[1] = v8;
  v3[2] = v12 | 0x8000000000000000;
  *v3 = __dst;
  v3 = __dst;
  if (v5)
  {
LABEL_14:
    if (v4 >= 0)
      v13 = a2;
    else
      v13 = *a2;
    __dst = memmove(v3, v13, v5);
  }
LABEL_18:
  v14 = (char *)v3 + v5;
  if (v7)
  {
    if (v6 >= 0)
      v15 = a3;
    else
      v15 = *a3;
    __dst = memmove(v14, v15, v7);
  }
  v14[v7] = 0;
  return __dst;
}

_QWORD *std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, const void **a2, char *__s)
{
  int v6;
  size_t v7;
  _QWORD *result;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  char *v14;

  v6 = *((char *)a2 + 23);
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)a2 + 23);
  else
    v7 = (size_t)a2[1];
  result = (_QWORD *)strlen(__s);
  v9 = (unint64_t)result + v7;
  memset(a1, 170, 24);
  if ((unint64_t)result + v7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = (size_t)result;
  if (v9 <= 0x16)
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    *((_BYTE *)a1 + 23) = v9;
    if (!v7)
      goto LABEL_15;
LABEL_11:
    if (v6 >= 0)
      v13 = a2;
    else
      v13 = *a2;
    result = memmove(a1, v13, v7);
    goto LABEL_15;
  }
  v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v9 | 7) != 0x17)
    v11 = v9 | 7;
  v12 = v11 + 1;
  result = operator new(v11 + 1);
  a1[1] = v9;
  a1[2] = v12 | 0x8000000000000000;
  *a1 = result;
  a1 = result;
  if (v7)
    goto LABEL_11;
LABEL_15:
  v14 = (char *)a1 + v7;
  if (v10)
    result = memmove(v14, __s, v10);
  v14[v10] = 0;
  return result;
}

void AntennaModule::reportTransmitState(AntennaModule *this, void **a2)
{
  void *v3;
  const object *v4;
  CFTypeRef v5;
  CFTypeID v6;
  CFTypeRef v7;
  uint64_t (*v8)(uint64_t);
  const void *v9;
  size_t v10;
  void *v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  void *aBlock;
  CFTypeRef v16;
  void *__dst[2];
  unint64_t v18;
  xpc_object_t object;
  CFTypeRef cf;
  CFTypeRef v21;

  v21 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v3 = *a2;
  object = v3;
  if (v3)
    xpc_retain(v3);
  else
    object = xpc_null_create();
  xpc::bridge((xpc *)&object, v4);
  v5 = cf;
  if (!cf || (v6 = CFGetTypeID(cf), v6 != CFDictionaryGetTypeID()))
  {
    v5 = 0;
    v21 = 0;
    v7 = cf;
    if (!cf)
      goto LABEL_10;
    goto LABEL_9;
  }
  v21 = v5;
  CFRetain(v5);
  v7 = cf;
  if (cf)
LABEL_9:
    CFRelease(v7);
LABEL_10:
  xpc_release(object);
  v8 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!v5)
    v8 = 0;
  if (!v8)
  {
LABEL_28:
    if (!v5)
      return;
    goto LABEL_29;
  }
  v9 = (const void *)*MEMORY[0x1E0CFBC68];
  v10 = strlen((const char *)*MEMORY[0x1E0CFBC68]);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    v12 = (void **)operator new(v13 + 1);
    __dst[1] = v11;
    v18 = v14 | 0x8000000000000000;
    __dst[0] = v12;
LABEL_21:
    memmove(v12, v9, (size_t)v11);
    *((_BYTE *)v11 + (_QWORD)v12) = 0;
    v5 = v21;
    v16 = v21;
    if (!v21)
      goto LABEL_23;
    goto LABEL_22;
  }
  HIBYTE(v18) = v10;
  v12 = __dst;
  if (v10)
    goto LABEL_21;
  LOBYTE(__dst[0]) = 0;
  v5 = v21;
  v16 = v21;
  if (v21)
LABEL_22:
    CFRetain(v5);
LABEL_23:
  aBlock = 0;
  Service::broadcastEvent((uint64_t)this, (uint64_t)__dst, &v16, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (v16)
    CFRelease(v16);
  if ((SHIBYTE(v18) & 0x80000000) == 0)
    goto LABEL_28;
  operator delete(__dst[0]);
  if (v5)
LABEL_29:
    CFRelease(v5);
}

void sub_1BF44DF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, const void *a19)
{
  if (aBlock)
    _Block_release(aBlock);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0)
    operator delete(__p);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a19);
  _Unwind_Resume(a1);
}

void sub_1BF44DF58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, char a15)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void AntennaModule::releasePowerAssertion(AntennaModule *this)
{
  unint64_t v1;
  char *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  std::string v9;

  v7 = 0xAAAAAAAAAAAAAAAALL;
  v8 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr))(*(_QWORD *)this + 80))(&v7);
  v1 = v7;
  if (v7)
  {
    v2 = (char *)operator new(0x28uLL);
    strcpy(v2, "com.apple.AppleBasebandManager.Antenna");
    v3 = *(_QWORD *)(v1 + 104);
    std::string::__init_copy_ctor_external(&v9, v2, 0x26uLL);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v3 + 32))(v3, &v9);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
    operator delete(v2);
  }
  v4 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    v5 = (unint64_t *)(v8 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BF44E074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);
  operator delete(v17);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1BF44E0A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AntennaModule::createPowerAssertion(AntennaModule *this)
{
  unint64_t v1;
  char *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  dispatch_object_t object;
  unint64_t v8;
  unint64_t v9;
  std::string v10;

  v8 = 0xAAAAAAAAAAAAAAAALL;
  v9 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr))(*(_QWORD *)this + 80))(&v8);
  v1 = v8;
  if (v8)
  {
    v2 = (char *)operator new(0x28uLL);
    strcpy(v2, "com.apple.AppleBasebandManager.Antenna");
    v3 = *(_QWORD *)(v1 + 104);
    std::string::__init_copy_ctor_external(&v10, v2, 0x26uLL);
    (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, std::string *, _QWORD))(*(_QWORD *)v3 + 24))(&object, v3, &v10, 0);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
    if (object)
      dispatch_release(object);
    operator delete(v2);
  }
  v4 = (std::__shared_weak_count *)v9;
  if (v9)
  {
    v5 = (unint64_t *)(v9 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BF44E1C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);
  operator delete(v17);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1BF44E1F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AntennaModule::processCallback(AntennaModule *this, xpc_object_t *a2)
{
  const char *v4;
  xpc_object_t value;
  const char *v6;
  size_t v7;
  const void *v8;
  unsigned __int8 v9;
  const void *v10;
  const void **v11;
  size_t v12;
  const void *v14;
  const void *v15;
  const void *v16;
  unint64_t v17;
  size_t v18;
  const void *v19;
  const void *v20;
  size_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  _QWORD v28[2];
  xpc_object_t v29;
  xpc_object_t object[2];
  unint64_t v31;
  const void *__s1[3];

  v4 = (const char *)*MEMORY[0x1E0CFB680];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB680]))
  {
    memset(__s1, 170, sizeof(__s1));
    value = xpc_dictionary_get_value(*a2, v4);
    object[0] = value;
    if (value)
      xpc_retain(value);
    else
      object[0] = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)object, (const object *)"", v6);
    xpc_release(object[0]);
    v7 = strlen((const char *)*MEMORY[0x1E0CFB5F8]);
    v8 = (const void *)v7;
    v9 = HIBYTE(__s1[2]);
    if (SHIBYTE(__s1[2]) < 0)
    {
      if (v7 != -1)
      {
        v11 = (const void **)__s1[0];
        v10 = __s1[1];
LABEL_10:
        if (v10 >= v8)
          v12 = (size_t)v8;
        else
          v12 = (size_t)v10;
        if (!memcmp(v11, (const void *)*MEMORY[0x1E0CFB5F8], v12) && v10 == v8)
        {
          AntennaModule::reportTransmitState(this, a2);
          v9 = HIBYTE(__s1[2]);
        }
        v14 = (const void *)*MEMORY[0x1E0CFB1C0];
        v15 = (const void *)strlen((const char *)*MEMORY[0x1E0CFB1C0]);
        v16 = v15;
        if ((v9 & 0x80) != 0)
        {
          if (v15 != (const void *)-1)
          {
            v17 = (unint64_t)__s1[1];
            if (__s1[1] >= v15)
              v19 = v15;
            else
              v19 = __s1[1];
            if (memcmp(__s1[0], v14, (size_t)v19))
              goto LABEL_43;
            goto LABEL_31;
          }
        }
        else if (v15 != (const void *)-1)
        {
          v17 = v9;
          if (v9 >= (unint64_t)v15)
            v18 = (size_t)v15;
          else
            v18 = v9;
          if (memcmp(__s1, v14, v18))
            goto LABEL_43;
LABEL_31:
          if ((const void *)v17 != v16)
          {
LABEL_43:
            if ((v9 & 0x80) != 0)
              operator delete((void *)__s1[0]);
            return;
          }
          v20 = (const void *)*MEMORY[0x1E0CFB5E0];
          v21 = strlen((const char *)*MEMORY[0x1E0CFB5E0]);
          if (v21 >= 0x7FFFFFFFFFFFFFF8)
            std::string::__throw_length_error[abi:ne180100]();
          v22 = (void *)v21;
          if (v21 >= 0x17)
          {
            v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v21 | 7) != 0x17)
              v24 = v21 | 7;
            v25 = v24 + 1;
            v23 = operator new(v24 + 1);
            object[1] = v22;
            v31 = v25 | 0x8000000000000000;
            object[0] = v23;
          }
          else
          {
            HIBYTE(v31) = v21;
            v23 = object;
            if (!v21)
              goto LABEL_40;
          }
          memmove(v23, v20, (size_t)v22);
LABEL_40:
          *((_BYTE *)v22 + (_QWORD)v23) = 0;
          v26 = *MEMORY[0x1E0CFB1E8];
          v28[0] = a2;
          v28[1] = v26;
          xpc::dict::object_proxy::operator xpc::dict((uint64_t)v28, &v29);
          v27 = 0;
          Service::runCommand((uint64_t)this, (uint64_t)object, &v29, &v27);
          xpc_release(v29);
          v29 = 0;
          if (SHIBYTE(v31) < 0)
            operator delete(object[0]);
          v9 = HIBYTE(__s1[2]);
          goto LABEL_43;
        }
        std::string::__throw_out_of_range[abi:ne180100]();
      }
    }
    else if (v7 != -1)
    {
      v10 = (const void *)HIBYTE(__s1[2]);
      v11 = __s1;
      goto LABEL_10;
    }
    std::string::__throw_out_of_range[abi:ne180100]();
  }
}

void sub_1BF44E49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  xpc_release(object);
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
  {
    operator delete(a19);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<AntennaModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<AntennaModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<AntennaModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<AntennaModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7906688;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<AntennaModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7906688;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void **xpc::dict::operator=(void **a1, xpc_object_t object)
{
  xpc_object_t v3;
  void *v4;

  if (object)
  {
    v3 = object;
    xpc_retain(object);
  }
  else
  {
    v3 = xpc_null_create();
  }
  v4 = *a1;
  *a1 = v3;
  xpc_release(v4);
  return a1;
}

void std::__shared_ptr_pointer<AntennaModule *,std::shared_ptr<AntennaModule> ctu::SharedSynchronizable<AntennaModule>::make_shared_ptr<AntennaModule>(AntennaModule*)::{lambda(AntennaModule *)#1},std::allocator<AntennaModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<AntennaModule *,std::shared_ptr<AntennaModule> ctu::SharedSynchronizable<AntennaModule>::make_shared_ptr<AntennaModule>(AntennaModule*)::{lambda(AntennaModule *)#1},std::allocator<AntennaModule>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<AntennaModule> ctu::SharedSynchronizable<AntennaModule>::make_shared_ptr<AntennaModule>(AntennaModule*)::{lambda(AntennaModule*)#1}::operator() const(AntennaModule*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<AntennaModule *,std::shared_ptr<AntennaModule> ctu::SharedSynchronizable<AntennaModule>::make_shared_ptr<AntennaModule>(AntennaModule*)::{lambda(AntennaModule *)#1},std::allocator<AntennaModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI13AntennaModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI13AntennaModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrI"
                                "T_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI13AntennaModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI13AntennaModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<AntennaModule> ctu::SharedSynchronizable<AntennaModule>::make_shared_ptr<AntennaModule>(AntennaModule*)::{lambda(AntennaModule*)#1}::operator() const(AntennaModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *ctu::SharedLoggable<AntennaModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7906688;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<AntennaModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7906688;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void AntennaModule::init(void)::$_0::operator()(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  NSObject *v14;
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  const void *v28;
  size_t v29;
  size_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  const void *v35;
  size_t v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void **v41;
  const void *v42;
  size_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void **v48;
  const void *v49;
  size_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void **v55;
  const void *v56;
  size_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void **v62;
  const void *v63;
  size_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void **v69;
  const void *v70;
  size_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  void **v76;
  const void *v77;
  size_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void **v83;
  const void *v84;
  size_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  void **v90;
  const void *v91;
  size_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  void **v97;
  const void *v98;
  size_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  void **v104;
  const void *v105;
  size_t v106;
  void *v107;
  uint64_t *v108;
  void **v109;
  uint64_t v110;
  uint64_t v111;
  uint8_t *v112;
  void **v113;
  signed __int8 v114;
  __int128 v115;
  uint8_t *v116;
  size_t v117;
  uint64_t v118;
  BOOL v119;
  void **v120;
  void **v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  _QWORD *v125;
  uint8_t *v126;
  std::string *v127;
  _QWORD *v128;
  uint64_t v129;
  void **v130;
  _QWORD *v131;
  std::string *v133;
  dispatch_object_t object;
  void *v135;
  dispatch_object_t v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  _QWORD aBlock[6];
  std::__shared_weak_count *v140;
  void *v141;
  dispatch_object_t v142;
  uint8_t buf[8];
  uint64_t v144;
  unint64_t v145;
  void *v146;
  uint64_t *v147;
  unint64_t v148;
  void *v149[2];
  unint64_t v150;
  void *v151[2];
  unint64_t v152;
  void *v153[2];
  unint64_t v154;
  void *v155[2];
  unint64_t v156;
  void *v157[2];
  unint64_t v158;
  void *v159[2];
  unint64_t v160;
  void *v161[2];
  unint64_t v162;
  void *v163[2];
  unint64_t v164;
  void *v165[2];
  unint64_t v166;
  void *v167[2];
  char v168;
  void *__p[2];
  unint64_t v170;
  uint64_t v171;

  v171 = *MEMORY[0x1E0C80C00];
  v2 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v3 || (v4 = *(_QWORD *)(a1 + 120), (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  v141 = (void *)0xAAAAAAAAAAAAAAAALL;
  v142 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v11 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZZN13AntennaModule4initEvENK3__0clEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_31_3;
  aBlock[4] = a1;
  aBlock[5] = v4;
  v140 = v6;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = _Block_copy(aBlock);
  v14 = *(NSObject **)(a1 + 136);
  if (v14)
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  v141 = v13;
  v142 = v14;
  v15 = operator new(0x10uLL);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  *(_QWORD *)buf = v11;
  v144 = 0x40000000;
  v145 = (unint64_t)___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v146 = &__block_descriptor_tmp_13_2;
  v147 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v17 = *(_QWORD *)algn_1ED710088;
    v137 = GetABMLogServer(void)::sLogServer;
    v138 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_20;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, buf);
    v17 = *(_QWORD *)algn_1ED710088;
    v137 = GetABMLogServer(void)::sLogServer;
    v138 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_20;
  }
  v18 = (unint64_t *)(v17 + 8);
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
LABEL_20:
  if (v13)
  {
    v135 = _Block_copy(v13);
    v136 = v14;
    if (!v14)
      goto LABEL_23;
    goto LABEL_22;
  }
  v135 = 0;
  v136 = v14;
  if (v14)
LABEL_22:
    dispatch_retain(v14);
LABEL_23:
  v20 = *(NSObject **)(a1 + 144);
  object = v20;
  if (v20)
    dispatch_retain(v20);
  antenna::Service::Service(v15, &v137, (uint64_t)&v135, &object);
  v21 = operator new(0x20uLL);
  *v21 = off_1E7906788;
  v21[1] = 0;
  v21[2] = 0;
  v21[3] = v15;
  v22 = *(std::__shared_weak_count **)(a1 + 184);
  *(_QWORD *)(a1 + 176) = v15;
  *(_QWORD *)(a1 + 184) = v21;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (object)
    dispatch_release(object);
  if (v136)
    dispatch_release(v136);
  if (v135)
    _Block_release(v135);
  v25 = v138;
  if (v138)
  {
    v26 = (unint64_t *)&v138->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (const void *)*MEMORY[0x1E0CFB990];
  v29 = strlen((const char *)*MEMORY[0x1E0CFB990]);
  if (v29 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v30 = v29;
  if (v29 >= 0x17)
  {
    v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v32 = v29 | 7;
    v33 = v32 + 1;
    v31 = operator new(v32 + 1);
    v144 = v30;
    v145 = v33 | 0x8000000000000000;
    *(_QWORD *)buf = v31;
    goto LABEL_48;
  }
  HIBYTE(v145) = v29;
  v31 = buf;
  if (v29)
LABEL_48:
    memmove(v31, v28, v30);
  *((_BYTE *)v31 + v30) = 0;
  v34 = &v146;
  v35 = (const void *)*MEMORY[0x1E0CFB3B0];
  v36 = strlen((const char *)*MEMORY[0x1E0CFB3B0]);
  if (v36 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v37 = v36;
  if (v36 >= 0x17)
  {
    v38 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v38 = v36 | 7;
    v39 = v38 + 1;
    v40 = operator new(v38 + 1);
    v147 = (uint64_t *)v37;
    v148 = v39 | 0x8000000000000000;
    v146 = v40;
    v34 = (void **)v40;
    goto LABEL_56;
  }
  HIBYTE(v148) = v36;
  if (v36)
LABEL_56:
    memmove(v34, v35, v37);
  *((_BYTE *)v34 + v37) = 0;
  v41 = v149;
  v42 = (const void *)*MEMORY[0x1E0CFB5B8];
  v43 = strlen((const char *)*MEMORY[0x1E0CFB5B8]);
  if (v43 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v44 = (void *)v43;
  if (v43 >= 0x17)
  {
    v45 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v45 = v43 | 7;
    v46 = v45 + 1;
    v47 = operator new(v45 + 1);
    v149[1] = v44;
    v150 = v46 | 0x8000000000000000;
    v149[0] = v47;
    v41 = (void **)v47;
    goto LABEL_64;
  }
  HIBYTE(v150) = v43;
  if (v43)
LABEL_64:
    memmove(v41, v42, (size_t)v44);
  *((_BYTE *)v44 + (_QWORD)v41) = 0;
  v48 = v151;
  v49 = (const void *)*MEMORY[0x1E0CFB708];
  v50 = strlen((const char *)*MEMORY[0x1E0CFB708]);
  if (v50 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v51 = (void *)v50;
  if (v50 >= 0x17)
  {
    v52 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v50 | 7) != 0x17)
      v52 = v50 | 7;
    v53 = v52 + 1;
    v54 = operator new(v52 + 1);
    v151[1] = v51;
    v152 = v53 | 0x8000000000000000;
    v151[0] = v54;
    v48 = (void **)v54;
    goto LABEL_72;
  }
  HIBYTE(v152) = v50;
  if (v50)
LABEL_72:
    memmove(v48, v49, (size_t)v51);
  *((_BYTE *)v51 + (_QWORD)v48) = 0;
  v55 = v153;
  v56 = (const void *)*MEMORY[0x1E0CFBE18];
  v57 = strlen((const char *)*MEMORY[0x1E0CFBE18]);
  if (v57 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v58 = (void *)v57;
  if (v57 >= 0x17)
  {
    v59 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v57 | 7) != 0x17)
      v59 = v57 | 7;
    v60 = v59 + 1;
    v61 = operator new(v59 + 1);
    v153[1] = v58;
    v154 = v60 | 0x8000000000000000;
    v153[0] = v61;
    v55 = (void **)v61;
    goto LABEL_80;
  }
  HIBYTE(v154) = v57;
  if (v57)
LABEL_80:
    memmove(v55, v56, (size_t)v58);
  *((_BYTE *)v58 + (_QWORD)v55) = 0;
  v62 = v155;
  v63 = (const void *)*MEMORY[0x1E0CFBE40];
  v64 = strlen((const char *)*MEMORY[0x1E0CFBE40]);
  if (v64 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v65 = (void *)v64;
  if (v64 >= 0x17)
  {
    v66 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v64 | 7) != 0x17)
      v66 = v64 | 7;
    v67 = v66 + 1;
    v68 = operator new(v66 + 1);
    v155[1] = v65;
    v156 = v67 | 0x8000000000000000;
    v155[0] = v68;
    v62 = (void **)v68;
    goto LABEL_88;
  }
  HIBYTE(v156) = v64;
  if (v64)
LABEL_88:
    memmove(v62, v63, (size_t)v65);
  *((_BYTE *)v65 + (_QWORD)v62) = 0;
  v69 = v157;
  v70 = (const void *)*MEMORY[0x1E0CFB6B0];
  v71 = strlen((const char *)*MEMORY[0x1E0CFB6B0]);
  if (v71 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v72 = (void *)v71;
  if (v71 >= 0x17)
  {
    v73 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v71 | 7) != 0x17)
      v73 = v71 | 7;
    v74 = v73 + 1;
    v75 = operator new(v73 + 1);
    v157[1] = v72;
    v158 = v74 | 0x8000000000000000;
    v157[0] = v75;
    v69 = (void **)v75;
    goto LABEL_96;
  }
  HIBYTE(v158) = v71;
  if (v71)
LABEL_96:
    memmove(v69, v70, (size_t)v72);
  *((_BYTE *)v72 + (_QWORD)v69) = 0;
  v76 = v159;
  v77 = (const void *)*MEMORY[0x1E0CFBE10];
  v78 = strlen((const char *)*MEMORY[0x1E0CFBE10]);
  if (v78 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v79 = (void *)v78;
  if (v78 >= 0x17)
  {
    v80 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v78 | 7) != 0x17)
      v80 = v78 | 7;
    v81 = v80 + 1;
    v82 = operator new(v80 + 1);
    v159[1] = v79;
    v160 = v81 | 0x8000000000000000;
    v159[0] = v82;
    v76 = (void **)v82;
    goto LABEL_104;
  }
  HIBYTE(v160) = v78;
  if (v78)
LABEL_104:
    memmove(v76, v77, (size_t)v79);
  *((_BYTE *)v79 + (_QWORD)v76) = 0;
  v83 = v161;
  v84 = (const void *)*MEMORY[0x1E0CFBE00];
  v85 = strlen((const char *)*MEMORY[0x1E0CFBE00]);
  if (v85 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v86 = (void *)v85;
  if (v85 >= 0x17)
  {
    v87 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v85 | 7) != 0x17)
      v87 = v85 | 7;
    v88 = v87 + 1;
    v89 = operator new(v87 + 1);
    v161[1] = v86;
    v162 = v88 | 0x8000000000000000;
    v161[0] = v89;
    v83 = (void **)v89;
    goto LABEL_112;
  }
  HIBYTE(v162) = v85;
  if (v85)
LABEL_112:
    memmove(v83, v84, (size_t)v86);
  *((_BYTE *)v86 + (_QWORD)v83) = 0;
  v90 = v163;
  v91 = (const void *)*MEMORY[0x1E0CFB6B8];
  v92 = strlen((const char *)*MEMORY[0x1E0CFB6B8]);
  if (v92 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v93 = (void *)v92;
  if (v92 >= 0x17)
  {
    v94 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v92 | 7) != 0x17)
      v94 = v92 | 7;
    v95 = v94 + 1;
    v96 = operator new(v94 + 1);
    v163[1] = v93;
    v164 = v95 | 0x8000000000000000;
    v163[0] = v96;
    v90 = (void **)v96;
    goto LABEL_120;
  }
  HIBYTE(v164) = v92;
  if (v92)
LABEL_120:
    memmove(v90, v91, (size_t)v93);
  *((_BYTE *)v93 + (_QWORD)v90) = 0;
  v97 = v165;
  v98 = (const void *)*MEMORY[0x1E0CFBE88];
  v99 = strlen((const char *)*MEMORY[0x1E0CFBE88]);
  if (v99 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v100 = (void *)v99;
  if (v99 >= 0x17)
  {
    v101 = (v99 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v99 | 7) != 0x17)
      v101 = v99 | 7;
    v102 = v101 + 1;
    v103 = operator new(v101 + 1);
    v165[1] = v100;
    v166 = v102 | 0x8000000000000000;
    v165[0] = v103;
    v97 = (void **)v103;
    goto LABEL_128;
  }
  HIBYTE(v166) = v99;
  if (v99)
LABEL_128:
    memmove(v97, v98, (size_t)v100);
  *((_BYTE *)v100 + (_QWORD)v97) = 0;
  v168 = 15;
  strcpy((char *)v167, "kSetWorkoutInfo");
  v104 = __p;
  v105 = (const void *)*MEMORY[0x1E0CFAF90];
  v106 = strlen((const char *)*MEMORY[0x1E0CFAF90]);
  if (v106 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v107 = (void *)v106;
  if (v106 >= 0x17)
  {
    v122 = (v106 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v106 | 7) != 0x17)
      v122 = v106 | 7;
    v123 = v122 + 1;
    v124 = operator new(v122 + 1);
    __p[1] = v107;
    v170 = v123 | 0x8000000000000000;
    __p[0] = v124;
    v104 = (void **)v124;
  }
  else
  {
    HIBYTE(v170) = v106;
    if (!v106)
    {
      LOBYTE(__p[0]) = 0;
      v109 = (void **)(a1 + 152);
      v108 = *(uint64_t **)(a1 + 152);
      if (v108)
        goto LABEL_133;
LABEL_160:
      v111 = 0;
      goto LABEL_164;
    }
  }
  memmove(v104, v105, (size_t)v107);
  *((_BYTE *)v107 + (_QWORD)v104) = 0;
  v109 = (void **)(a1 + 152);
  v108 = *(uint64_t **)(a1 + 152);
  if (!v108)
    goto LABEL_160;
LABEL_133:
  v110 = 0;
  v111 = 0;
  do
  {
    v112 = &buf[v110];
    v113 = (void **)(v108 + 1);
    if (&buf[v110] != (uint8_t *)(v108 + 1))
    {
      v114 = v112[23];
      if (*((char *)v108 + 31) < 0)
      {
        if (v114 >= 0)
          v116 = &buf[v110];
        else
          v116 = *(uint8_t **)&buf[v110];
        if (v114 >= 0)
          v117 = v112[23];
        else
          v117 = *(_QWORD *)&buf[v110 + 8];
        std::string::__assign_no_alias<false>(v113, v116, v117);
      }
      else if ((v112[23] & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v113, *(void **)&buf[v110], *(_QWORD *)&buf[v110 + 8]);
      }
      else
      {
        v115 = *(_OWORD *)v112;
        v108[3] = *((_QWORD *)v112 + 2);
        *(_OWORD *)v113 = v115;
      }
    }
    v109 = (void **)*v109;
    v108 = (uint64_t *)*v108;
    ++v111;
    v118 = v110 + 24;
    if (!v108)
      break;
    v119 = v110 == 288;
    v110 += 24;
  }
  while (!v119);
  if (v108)
  {
    if (v109)
    {
      v120 = (void **)*v109;
      if (*v109)
      {
        *v109 = 0;
        do
        {
          v121 = (void **)*v120;
          if (*((char *)v120 + 31) < 0)
            operator delete(v120[1]);
          operator delete(v120);
          v120 = v121;
        }
        while (v121);
      }
    }
    goto LABEL_169;
  }
  if (v118 == 312)
    goto LABEL_169;
LABEL_164:
  v125 = operator new(0x20uLL);
  v126 = &buf[24 * v111];
  *v125 = 0;
  v127 = (std::string *)(v125 + 1);
  if ((char)v126[23] < 0)
  {
    std::string::__init_copy_ctor_external(v127, *(const std::string::value_type **)v126, *((_QWORD *)v126 + 1));
  }
  else
  {
    *(_OWORD *)&v127->__r_.__value_.__l.__data_ = *(_OWORD *)v126;
    v125[3] = *((_QWORD *)v126 + 2);
  }
  v128 = v125;
  v129 = v111 - 12;
  if (v111 != 12)
  {
    v130 = &v146 + 3 * v111;
    v131 = v125;
    do
    {
      v128 = operator new(0x20uLL);
      *v128 = 0;
      v133 = (std::string *)(v128 + 1);
      if (*((char *)v130 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v133, (const std::string::value_type *)*v130, (std::string::size_type)v130[1]);
      }
      else
      {
        *(_OWORD *)&v133->__r_.__value_.__l.__data_ = *(_OWORD *)v130;
        v128[3] = v130[2];
      }
      *v131 = v128;
      v130 += 3;
      v131 = v128;
    }
    while (!__CFADD__(v129++, 1));
  }
  *v128 = *v109;
  *v109 = v125;
LABEL_169:
  if (SHIBYTE(v170) < 0)
  {
    operator delete(__p[0]);
    if ((v168 & 0x80000000) == 0)
    {
LABEL_171:
      if ((SHIBYTE(v166) & 0x80000000) == 0)
        goto LABEL_172;
      goto LABEL_191;
    }
  }
  else if ((v168 & 0x80000000) == 0)
  {
    goto LABEL_171;
  }
  operator delete(v167[0]);
  if ((SHIBYTE(v166) & 0x80000000) == 0)
  {
LABEL_172:
    if ((SHIBYTE(v164) & 0x80000000) == 0)
      goto LABEL_173;
    goto LABEL_192;
  }
LABEL_191:
  operator delete(v165[0]);
  if ((SHIBYTE(v164) & 0x80000000) == 0)
  {
LABEL_173:
    if ((SHIBYTE(v162) & 0x80000000) == 0)
      goto LABEL_174;
    goto LABEL_193;
  }
LABEL_192:
  operator delete(v163[0]);
  if ((SHIBYTE(v162) & 0x80000000) == 0)
  {
LABEL_174:
    if ((SHIBYTE(v160) & 0x80000000) == 0)
      goto LABEL_175;
    goto LABEL_194;
  }
LABEL_193:
  operator delete(v161[0]);
  if ((SHIBYTE(v160) & 0x80000000) == 0)
  {
LABEL_175:
    if ((SHIBYTE(v158) & 0x80000000) == 0)
      goto LABEL_176;
    goto LABEL_195;
  }
LABEL_194:
  operator delete(v159[0]);
  if ((SHIBYTE(v158) & 0x80000000) == 0)
  {
LABEL_176:
    if ((SHIBYTE(v156) & 0x80000000) == 0)
      goto LABEL_177;
    goto LABEL_196;
  }
LABEL_195:
  operator delete(v157[0]);
  if ((SHIBYTE(v156) & 0x80000000) == 0)
  {
LABEL_177:
    if ((SHIBYTE(v154) & 0x80000000) == 0)
      goto LABEL_178;
    goto LABEL_197;
  }
LABEL_196:
  operator delete(v155[0]);
  if ((SHIBYTE(v154) & 0x80000000) == 0)
  {
LABEL_178:
    if ((SHIBYTE(v152) & 0x80000000) == 0)
      goto LABEL_179;
    goto LABEL_198;
  }
LABEL_197:
  operator delete(v153[0]);
  if ((SHIBYTE(v152) & 0x80000000) == 0)
  {
LABEL_179:
    if ((SHIBYTE(v150) & 0x80000000) == 0)
      goto LABEL_180;
    goto LABEL_199;
  }
LABEL_198:
  operator delete(v151[0]);
  if ((SHIBYTE(v150) & 0x80000000) == 0)
  {
LABEL_180:
    if ((SHIBYTE(v148) & 0x80000000) == 0)
      goto LABEL_181;
LABEL_200:
    operator delete(v146);
    if ((SHIBYTE(v145) & 0x80000000) == 0)
      goto LABEL_182;
    goto LABEL_201;
  }
LABEL_199:
  operator delete(v149[0]);
  if (SHIBYTE(v148) < 0)
    goto LABEL_200;
LABEL_181:
  if ((SHIBYTE(v145) & 0x80000000) == 0)
    goto LABEL_182;
LABEL_201:
  operator delete(*(void **)buf);
LABEL_182:
  AntennaModule::initializeProperty((AntennaModule *)a1);
  if (v142)
    dispatch_release(v142);
  if (v141)
    _Block_release(v141);
  if (v140)
    std::__shared_weak_count::__release_weak(v140);
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1BF44F510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a65;
  char a70;
  void *a71;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  void *__p;
  char a80;
  std::__shared_weak_count *v80;
  void *v81;

  operator delete(v81);
  if (a80 < 0)
  {
    operator delete(__p);
    if ((a78 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a78 & 0x80000000) == 0)
  {
LABEL_3:
    if (a76 < 0)
      goto LABEL_4;
    goto LABEL_17;
  }
  operator delete(a77);
  if (a76 < 0)
  {
LABEL_4:
    operator delete(a75);
    if ((a74 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  if ((a74 & 0x80000000) == 0)
  {
LABEL_5:
    if (a72 < 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a73);
  if (a72 < 0)
  {
LABEL_6:
    operator delete(a71);
    if ((a70 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  if ((a70 & 0x80000000) == 0)
  {
LABEL_7:
    if (a64 < 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a65);
  if (a64 < 0)
  {
LABEL_8:
    operator delete(a59);
    if ((a58 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  if ((a58 & 0x80000000) == 0)
  {
LABEL_9:
    if (a52 < 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a53);
  if (a52 < 0)
  {
LABEL_10:
    operator delete(a47);
    if ((a46 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  if ((a46 & 0x80000000) == 0)
  {
LABEL_11:
    if (a40 < 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  operator delete(a41);
  if (a40 < 0)
  {
LABEL_12:
    operator delete(a35);
    if ((a34 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  if ((a34 & 0x80000000) == 0)
  {
LABEL_13:
    if ((a28 & 0x80000000) == 0)
    {
LABEL_28:
      dispatch::callback<void({block_pointer})(xpc::dict)>::~callback((uint64_t)&a21);
      if (a20)
        std::__shared_weak_count::__release_weak(a20);
      std::__shared_weak_count::__release_weak(v80);
      _Unwind_Resume(a1);
    }
LABEL_27:
    operator delete(a23);
    goto LABEL_28;
  }
LABEL_26:
  operator delete(a29);
  if ((a28 & 0x80000000) == 0)
    goto LABEL_28;
  goto LABEL_27;
}

void sub_1BF44F520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a65;
  char a70;
  void *a71;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  void *a79;
  char a80;
  std::__shared_weak_count *v80;

  if (a80 < 0)
  {
    operator delete(a79);
    if ((a78 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a78 & 0x80000000) == 0)
  {
LABEL_3:
    if (a76 < 0)
      goto LABEL_4;
    goto LABEL_17;
  }
  operator delete(a77);
  if (a76 < 0)
  {
LABEL_4:
    operator delete(a75);
    if ((a74 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  if ((a74 & 0x80000000) == 0)
  {
LABEL_5:
    if (a72 < 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a73);
  if (a72 < 0)
  {
LABEL_6:
    operator delete(a71);
    if ((a70 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  if ((a70 & 0x80000000) == 0)
  {
LABEL_7:
    if (a64 < 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a65);
  if (a64 < 0)
  {
LABEL_8:
    operator delete(a59);
    if ((a58 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  if ((a58 & 0x80000000) == 0)
  {
LABEL_9:
    if (a52 < 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a53);
  if (a52 < 0)
  {
LABEL_10:
    operator delete(a47);
    if ((a46 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  if ((a46 & 0x80000000) == 0)
  {
LABEL_11:
    if (a40 < 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  operator delete(a41);
  if (a40 < 0)
  {
LABEL_12:
    operator delete(a35);
    if ((a34 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  if ((a34 & 0x80000000) == 0)
  {
LABEL_13:
    if ((a28 & 0x80000000) == 0)
    {
LABEL_28:
      dispatch::callback<void({block_pointer})(xpc::dict)>::~callback((uint64_t)&a21);
      if (a20)
        std::__shared_weak_count::__release_weak(a20);
      std::__shared_weak_count::__release_weak(v80);
      _Unwind_Resume(a1);
    }
LABEL_27:
    operator delete(a23);
    goto LABEL_28;
  }
LABEL_26:
  operator delete(a29);
  if ((a28 & 0x80000000) == 0)
    goto LABEL_28;
  goto LABEL_27;
}

void sub_1BF44F5AC(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF44F5B4);
  JUMPOUT(0x1BF44F758);
}

void sub_1BF44F5F0()
{
  __cxa_end_catch();
  JUMPOUT(0x1BF44F5F8);
}

void sub_1BF44F768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void **v23;

  while (1)
  {
    if (*((char *)v23 - 1) < 0)
      operator delete(*(v23 - 3));
    v23 -= 3;
    if (v23 == (void **)&a23)
      JUMPOUT(0x1BF44F72CLL);
  }
}

void ___ZZN13AntennaModule4initEvENK3__0clEv_block_invoke(_QWORD *a1, xpc_object_t *a2)
{
  std::__shared_weak_count *v3;
  AntennaModule *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (AntennaModule *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
        goto LABEL_7;
      }
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
      if (v8)
LABEL_7:
        AntennaModule::processCallback(v5, a2);
    }
  }
}

uint64_t dispatch::callback<void({block_pointer})(xpc::dict)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void std::__shared_ptr_pointer<antenna::Service *,std::shared_ptr<antenna::Service>::__shared_ptr_default_delete<antenna::Service,antenna::Service>,std::allocator<antenna::Service>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<antenna::Service *,std::shared_ptr<antenna::Service>::__shared_ptr_default_delete<antenna::Service,antenna::Service>,std::allocator<antenna::Service>>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (std::__shared_weak_count *)v1[1];
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      operator delete(v1);
    }
    else
    {
LABEL_6:
      operator delete(v1);
    }
  }
}

uint64_t std::__shared_ptr_pointer<antenna::Service *,std::shared_ptr<antenna::Service>::__shared_ptr_default_delete<antenna::Service,antenna::Service>,std::allocator<antenna::Service>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF5441D7)
    return a1 + 24;
  if (((v3 & 0x80000001BF5441D7 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF5441D7))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF5441D7 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void ___ZNK3ctu20SharedSynchronizableI13AntennaModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke(uint64_t a1)
{
  AntennaModule::init(void)::$_0::operator()(**(_QWORD **)(a1 + 40));
}

void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E79067F0;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c42_ZTSNSt3__110shared_ptrIK13AntennaModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__110shared_ptrIK13AntennaModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  xpc::object *v4;
  uint64_t v5;
  _QWORD **v6;
  NSObject *v7;
  xpc_object_t v8;
  _QWORD *v9;
  void **v10;
  xpc_object_t v11;
  uint64_t v12;
  const void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p[2];
  char v18;
  uint8_t buf[4];
  void **v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  v4 = (xpc::object *)(*a1 + 1);
  v5 = 3760250880;
  if (MEMORY[0x1C3B8A86C](*(_QWORD *)v4) == MEMORY[0x1E0C812F8])
  {
    v6 = *(_QWORD ***)(v3 + 176);
    if (v6)
    {
      v7 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        xpc::object::to_string(v4);
        if (v18 >= 0)
          v10 = __p;
        else
          v10 = (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        v20 = v10;
        _os_log_debug_impl(&dword_1BF335000, v7, OS_LOG_TYPE_DEBUG, "#D Received Audio State: %s", buf, 0xCu);
        if (v18 < 0)
          operator delete(__p[0]);
        v6 = *(_QWORD ***)(v3 + 176);
        v8 = *(xpc_object_t *)v4;
        if (*(_QWORD *)v4)
        {
LABEL_5:
          xpc_retain(v8);
          v9 = *v6;
          if (!*v6)
            goto LABEL_18;
          goto LABEL_14;
        }
      }
      else
      {
        v8 = *(xpc_object_t *)v4;
        if (*(_QWORD *)v4)
          goto LABEL_5;
      }
      v8 = xpc_null_create();
      v9 = *v6;
      if (!*v6)
      {
LABEL_18:
        xpc_release(v8);
        v5 = 0;
        goto LABEL_19;
      }
LABEL_14:
      __p[0] = v8;
      if (v8)
      {
        xpc_retain(v8);
        v11 = v8;
      }
      else
      {
        v11 = xpc_null_create();
        __p[0] = v11;
      }
      antenna::Service::Internal::setAudioState(v9, __p);
      xpc_release(v11);
      goto LABEL_18;
    }
  }
LABEL_19:
  v12 = v2[2];
  __p[0] = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, void **))(v12 + 16))(v12, v5, __p);
  xpc_release(__p[0]);
  v13 = (const void *)v2[2];
  if (v13)
    _Block_release(v13);
  xpc_release(*(xpc_object_t *)v4);
  operator delete(v2);
  v14 = (std::__shared_weak_count *)a1[2];
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  operator delete(a1);
}

void sub_1BF44FD34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  CMOnBodyDelegate ***v5;
  ctu *v6;
  uint64_t v7;
  const void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  ctu *v12;
  xpc_object_t object;

  v2 = *a1;
  v3 = **a1;
  v4 = 3760250880;
  if (MEMORY[0x1C3B8A86C]((*a1)[1]) == MEMORY[0x1E0C812F8])
  {
    v5 = *(CMOnBodyDelegate ****)(v3 + 176);
    if (v5)
    {
      v6 = (ctu *)v2[1];
      v12 = v6;
      if (v6)
      {
        xpc_retain(v6);
      }
      else
      {
        v6 = (ctu *)xpc_null_create();
        v12 = v6;
      }
      antenna::Service::setMotionThresholds(v5, &v12);
      xpc_release(v6);
      v4 = 0;
      v12 = 0;
    }
  }
  v7 = v2[2];
  object = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v7 + 16))(v7, v4, &object);
  xpc_release(object);
  v8 = (const void *)v2[2];
  if (v8)
    _Block_release(v8);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v9 = (std::__shared_weak_count *)a1[2];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(a1);
}

void sub_1BF44FF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  const void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  v13 = v12;
  xpc_release(v13);
  v15 = *(const void **)(v11 + 16);
  if (v15)
    _Block_release(v15);
  xpc_release(*(xpc_object_t *)(v11 + 8));
  operator delete((void *)v11);
  v16 = (std::__shared_weak_count *)v10[2];
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(AntennaModule ***a1)
{
  AntennaModule **v2;
  AntennaModule *v3;
  xpc_object_t *v4;
  uint64_t v5;
  antenna::Service::Internal **v6;
  AntennaModule *v7;
  AntennaModule *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  xpc_object_t object;

  v2 = *a1;
  v3 = **a1;
  v4 = (xpc_object_t *)(*a1 + 1);
  v5 = 3760250880;
  if (MEMORY[0x1C3B8A86C](*v4) == MEMORY[0x1E0C812F8])
  {
    v6 = (antenna::Service::Internal **)*((_QWORD *)v3 + 22);
    if (v6)
    {
      if (*v6)
        antenna::Service::Internal::antennaSetProperty(*v6, v4);
      AntennaModule::setProperty_sync(v3, v4);
      v5 = 0;
    }
  }
  v7 = v2[2];
  object = xpc_null_create();
  (*((void (**)(AntennaModule *, uint64_t, xpc_object_t *))v7 + 2))(v7, v5, &object);
  xpc_release(object);
  v8 = v2[2];
  if (v8)
    _Block_release(v8);
  xpc_release(*v4);
  operator delete(v2);
  v9 = (std::__shared_weak_count *)a1[2];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(a1);
}

void sub_1BF4500D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  _QWORD *v11;
  xpc_object_t *v12;
  const void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  xpc_release(object);
  v14 = (const void *)v11[2];
  if (v14)
    _Block_release(v14);
  xpc_release(*v12);
  operator delete(v11);
  v15 = (std::__shared_weak_count *)v10[2];
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  xpc_object_t v4;
  NSObject ***v5;
  xpc_object_t v6;
  const void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  xpc_object_t object;
  xpc_object_t v12;
  unsigned int v13;

  v2 = *a1;
  v3 = **a1;
  v13 = -534716416;
  v4 = xpc_null_create();
  v12 = v4;
  if (MEMORY[0x1C3B8A86C](v2[1]) == MEMORY[0x1E0C812F8])
  {
    v5 = *(NSObject ****)(v3 + 176);
    if (v5)
    {
      antenna::Service::antennaGetProperty(v5, (void **)v2 + 1, &object);
      v6 = object;
      object = xpc_null_create();
      v12 = v6;
      xpc_release(v4);
      xpc_release(object);
      v13 = 0;
    }
  }
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(v2 + 2, &v13, &v12);
  xpc_release(v12);
  v7 = (const void *)v2[2];
  if (v7)
    _Block_release(v7);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

void sub_1BF450284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD *v11;
  _QWORD *v12;
  xpc_object_t *v13;
  void *v14;
  const void *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  xpc_release(v14);
  v16 = (const void *)v12[2];
  if (v16)
    _Block_release(v16);
  xpc_release(*v13);
  operator delete(v12);
  v17 = (std::__shared_weak_count *)v11[2];
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  operator delete(v11);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped<AntennaModule::initialize(dispatch::group_session)::$_0>(AntennaModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AntennaModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<AntennaModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  std::__shared_weak_count ***v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(std::__shared_weak_count ****)a1;
  AntennaModule::finishInitialization_sync(**(std::__shared_weak_count ****)a1);
  operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete((void *)a1);
  }
  else
  {
LABEL_5:
    operator delete((void *)a1);
  }
}

void sub_1BF4503A4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped<AntennaModule::sleep(dispatch::group_session)::$_0>(AntennaModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AntennaModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<AntennaModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  _QWORD *v2;
  antenna::Service::Internal **v3;
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (_QWORD *)*a1;
  v3 = *(antenna::Service::Internal ***)(*(_QWORD *)*a1 + 176);
  if (v3 && *v3)
    antenna::Service::Internal::enterLowPower(*v3);
  v4 = v2[1];
  if (v4)
  {
    dispatch_group_leave(v4);
    v5 = v2[1];
    if (v5)
      dispatch_release(v5);
  }
  operator delete(v2);
  v6 = (std::__shared_weak_count *)a1[2];
  if (!v6)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    operator delete(a1);
  }
  else
  {
LABEL_11:
    operator delete(a1);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped<AntennaModule::wake(dispatch::group_session)::$_0>(AntennaModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AntennaModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<AntennaModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  _QWORD *v2;
  antenna::Service::Internal **v3;
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (_QWORD *)*a1;
  v3 = *(antenna::Service::Internal ***)(*(_QWORD *)*a1 + 176);
  if (v3 && *v3)
    antenna::Service::Internal::exitLowPower(*v3);
  v4 = v2[1];
  if (v4)
  {
    dispatch_group_leave(v4);
    v5 = v2[1];
    if (v5)
      dispatch_release(v5);
  }
  operator delete(v2);
  v6 = (std::__shared_weak_count *)a1[2];
  if (!v6)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    operator delete(a1);
  }
  else
  {
LABEL_11:
    operator delete(a1);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped<AntennaModule::initializeProperty(void)::$_0>(AntennaModule::initializeProperty(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AntennaModule::initializeProperty(void)::$_0,dispatch_queue_s *::default_delete<AntennaModule::initializeProperty(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t *v2;
  void **v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(uint64_t **)a1;
  v3 = (void **)(*(_QWORD *)a1 + 8);
  AntennaModule::initializeProperty_sync(**(_QWORD **)a1, (uint64_t)v3);
  if (*((char *)v2 + 31) < 0)
    operator delete(*v3);
  operator delete(v2);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    operator delete((void *)a1);
  }
  else
  {
LABEL_7:
    operator delete((void *)a1);
  }
}

void sub_1BF4505E0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  char *v2;
  void **v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (v2[31] < 0)
    operator delete(*v3);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *ABMProperties::create_default_global(ABMProperties *this)
{
  void *v2;
  _QWORD *result;

  v2 = operator new(0x18uLL);
  MEMORY[0x1C3B893B4](v2, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
  *(_QWORD *)this = v2;
  result = operator new(0x20uLL);
  *result = &unk_1E78FFBE0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v2;
  *((_QWORD *)this + 1) = result;
  return result;
}

void std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__int128 *a1)
{
  __int128 v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  v2 = (std::__shared_weak_count *)off_1ED70FAF8;
  *(_OWORD *)&qword_1ED70FAF0 = v1;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t __cxx_global_var_init_26_0()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1BF335000);
  }
  return result;
}

uint64_t __cxx_global_var_init_27_1()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_1BF335000);
  }
  return result;
}

_QWORD *PowerManager::PowerManager(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  *a1 = off_1E7906830;
  v3 = a1 + 1;
  v4 = (std::__shared_weak_count *)a2[1];
  v8 = *a2;
  v9 = v4;
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
  }
  PowerManager::State::create(&v8, v3);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  PowerManager::State::init((PowerManager::State *)*v3);
  return a1;
}

{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  *a1 = off_1E7906830;
  v3 = a1 + 1;
  v4 = (std::__shared_weak_count *)a2[1];
  v8 = *a2;
  v9 = v4;
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
  }
  PowerManager::State::create(&v8, v3);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  PowerManager::State::init((PowerManager::State *)*v3);
  return a1;
}

void sub_1BF45082C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1BF450840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (!a10)
    _Unwind_Resume(exception_object);
  std::__shared_weak_count::__release_weak(a10);
  _Unwind_Resume(exception_object);
}

void PowerManager::State::create(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v4 = operator new(0x120uLL);
  v5 = (uint64_t)v4;
  v6 = (std::__shared_weak_count *)a1[1];
  v9 = *a1;
  v10 = v6;
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  PowerManager::State::State((uint64_t)v4, &v9);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<PowerManager::State>::shared_ptr[abi:ne180100]<PowerManager::State,std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State*)#1},void>(a2, v5);
  ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
}

void sub_1BF4508F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v10);
  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  _Unwind_Resume(a1);
}

void PowerManager::State::init(PowerManager::State *this)
{
  std::__shared_weak_count *v3;
  char *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  _QWORD v16[6];
  std::__shared_weak_count *v17;
  _QWORD *v18;
  _QWORD block[6];

  v5 = *((_QWORD *)this + 9);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  v4 = (char *)this + 72;
  if (!v3 || (v6 = std::__shared_weak_count::lock(v3)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 1174405120;
  v16[2] = ___ZN12PowerManager5State4initEv_block_invoke;
  v16[3] = &__block_descriptor_tmp_11_7;
  v16[4] = this;
  v16[5] = v5;
  v17 = v7;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v18 = v16;
  block[0] = v12;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN12PowerManager5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_12_7;
  block[4] = v4;
  block[5] = &v18;
  v14 = *((_QWORD *)this + 11);
  if (!*((_QWORD *)this + 12))
  {
    dispatch_sync(v14, block);
    v15 = v17;
    if (!v17)
      goto LABEL_14;
    goto LABEL_13;
  }
  dispatch_async_and_wait(v14, block);
  v15 = v17;
  if (v17)
LABEL_13:
    std::__shared_weak_count::__release_weak(v15);
LABEL_14:
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF450AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v12 = *(std::__shared_weak_count **)(v10 + 16);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  _Unwind_Resume(exception_object);
}

void PowerManager::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v4 = operator new(0x18uLL);
  v5 = v4;
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    *v4 = off_1E7906830;
    v12 = v6;
    v13 = v7;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
  }
  else
  {
    *v4 = off_1E7906830;
    v12 = v6;
    v13 = 0;
  }
  PowerManager::State::create(&v12, v4 + 1);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  PowerManager::State::init((PowerManager::State *)v5[1]);
  *a2 = v5;
  v11 = operator new(0x20uLL);
  *v11 = off_1E7906DA8;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = v5;
  a2[1] = v11;
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF450C20(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  _Unwind_Resume(a1);
}

void PowerManager::registerForPowerEvents(uint64_t a1, const void **a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD v5[5];
  void *aBlock;

  v2 = *(_QWORD *)(a1 + 8);
  if (*a2)
    v3 = _Block_copy(*a2);
  else
    v3 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 1174405120;
  v5[2] = ___ZN12PowerManager5State22registerForPowerEventsEN8dispatch5blockIU13block_pointerFv10PowerStateNS1_13group_sessionEEEE_block_invoke;
  v5[3] = &__block_descriptor_tmp_17_3;
  v5[4] = v2;
  if (v3)
    v4 = _Block_copy(v3);
  else
    v4 = 0;
  aBlock = v4;
  ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped((uint64_t *)(v2 + 72), (uint64_t)v5);
  if (aBlock)
    _Block_release(aBlock);
  if (v3)
    _Block_release(v3);
}

void PowerManager::createPowerAssertion(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, NSObject **a4@<X8>)
{
  _QWORD *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  std::string *v13;
  dispatch_group_t v14;
  NSObject *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  std::string v20;
  _QWORD *v21;
  std::string __p;
  uint64_t v23;
  dispatch_group_t group;

  v6 = *(_QWORD **)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v20 = *(std::string *)a2;
  v7 = dispatch_group_create();
  *a4 = v7;
  v21 = v6;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
  else
    __p = v20;
  v23 = a3;
  group = v7;
  if (v7)
  {
    dispatch_retain(v7);
    if (group)
      dispatch_group_enter(group);
  }
  v8 = (std::__shared_weak_count *)v6[10];
  if (!v8 || (v9 = v6[9], (v10 = std::__shared_weak_count::lock(v8)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  v12 = operator new(0x30uLL);
  *v12 = v21;
  v13 = (std::string *)(v12 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v12[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v14 = group;
  v12[4] = v23;
  v12[5] = v14;
  group = 0;
  v15 = v6[11];
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  v18 = operator new(0x18uLL);
  *v18 = v12;
  v18[1] = v9;
  v18[2] = v11;
  dispatch_async_f(v15, v18, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1}>(PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1},std::default_delete<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_28:
    operator delete(v20.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_28;
}

void sub_1BF450F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  NSObject *v14;

  if (v14)
  {
    dispatch_release(v14);
    if ((a14 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void PowerManager::releasePowerAssertion(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  std::string *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  std::string v14;
  _QWORD *v15;
  std::string __p;

  v2 = *(_QWORD **)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v15 = v2;
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_5:
    std::string::__init_copy_ctor_external(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    goto LABEL_6;
  }
  v14 = *(std::string *)a2;
  v15 = v2;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_5;
LABEL_3:
  __p = v14;
LABEL_6:
  v3 = (std::__shared_weak_count *)v2[10];
  if (!v3 || (v4 = v2[9], (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  v7 = operator new(0x20uLL);
  *v7 = v15;
  v8 = (std::string *)(v7 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v7[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v9 = v2[11];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v7;
  v12[1] = v4;
  v12[2] = v6;
  dispatch_async_f(v9, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>(PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1},std::default_delete<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (v13)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_17;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_21:
      operator delete(v14.__r_.__value_.__l.__data_);
      return;
    }
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_21;
}

void sub_1BF451148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void PowerManager::initialize(PowerManager *this)
{
  uint64_t v1;
  _QWORD v2[5];

  v1 = *((_QWORD *)this + 1);
  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 0x40000000;
  v2[2] = ___ZN12PowerManager5State10initializeEv_block_invoke;
  v2[3] = &__block_descriptor_tmp_33_3;
  v2[4] = v1;
  ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped((uint64_t *)(v1 + 72), (uint64_t)v2);
}

void PowerManager::shutdown(PowerManager *this)
{
  uint64_t v1;
  _QWORD v2[5];

  v1 = *((_QWORD *)this + 1);
  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 0x40000000;
  v2[2] = ___ZN12PowerManager5State8shutdownEv_block_invoke;
  v2[3] = &__block_descriptor_tmp_34_1;
  v2[4] = v1;
  ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped((uint64_t *)(v1 + 72), (uint64_t)v2);
}

void PowerManager::~PowerManager(PowerManager *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = off_1E7906830;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = off_1E7906830;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(this);
  }
  else
  {
LABEL_5:
    operator delete(this);
  }
}

void ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF451400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF45141C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<PowerManager::State>::shared_ptr[abi:ne180100]<PowerManager::State,std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E79068A0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF451538(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State*)#1}::operator() const(PowerManager::State*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF451558(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<PowerManager::State *,std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State *)#1},std::allocator<PowerManager::State>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<PowerManager::State *,std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State *)#1},std::allocator<PowerManager::State>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State*)#1}::operator() const(PowerManager::State*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<PowerManager::State *,std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State *)#1},std::allocator<PowerManager::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN12PowerManager5StateEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN12PowerManager5StateEE15make_shared_ptrIS2_EENSt3__110shar"
                                "ed_ptrIT_EEPS7_EUlPS2_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN12PowerManager5StateEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN12PowerManager5StateEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State*)#1}::operator() const(PowerManager::State*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t PowerManager::State::State(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *initially_inactive;
  NSObject *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  PowerStats *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _BYTE v20[16];
  _QWORD block[5];
  _BYTE v22[16];

  *(_QWORD *)a1 = off_1E79068F0;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v20, "com.apple.telephony.abm", "power.mgr");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_2;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v5 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v6 = GetABMLogServer(void)::sLogServer;
    if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_4;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v5 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v6 = GetABMLogServer(void)::sLogServer;
    if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
    {
LABEL_4:
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v10 = dispatch_queue_create_with_target_V2("power.mgr", initially_inactive, 0);
  dispatch_set_qos_class_floor(v10, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v10);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v10;
  if (v10)
  {
    dispatch_retain(v10);
    *(_QWORD *)(a1 + 96) = 0;
    dispatch_release(v10);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_QWORD *)a1 = off_1E7906A00;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)block);
  *(_QWORD *)(a1 + 8) = &unk_1E78FB900;
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v5;
  if (v5)
  {
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
    *(_QWORD *)a1 = off_1E79069C0;
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
    *(_QWORD *)a1 = off_1E79069C0;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v20);
  *(_QWORD *)a1 = off_1E79068F0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0x200000001;
  *(_DWORD *)(a1 + 128) = -536870144;
  v14 = (PowerStats *)operator new(0x88uLL);
  PowerStats::PowerStats(v14);
  *(_QWORD *)(a1 + 136) = v14;
  v15 = operator new(0x20uLL);
  *v15 = off_1E79089B8;
  v15[1] = 0;
  v15[2] = 0;
  v15[3] = v14;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 144) = v15;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = a1 + 256;
  *(_QWORD *)(a1 + 272) = *a2;
  v16 = a2[1];
  *(_QWORD *)(a1 + 280) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 16);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  ctu::LoggerCommonBase::setLogLevel();
  return a1;
}

void sub_1BF451958(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const void **v6;
  std::__shared_weak_count *v8;
  const void *v9;

  v8 = *(std::__shared_weak_count **)(v1 + 280);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*(char **)(v1 + 256));
  std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(*(_QWORD *)(v1 + 232));
  std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(*(_QWORD *)(v1 + 208));
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v5);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v4);
  v9 = *(const void **)(v1 + 160);
  if (v9)
    _Block_release(v9);
  if (*v6)
    _Block_release(*v6);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2);
  ctu::SharedLoggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable((_QWORD *)v1);
  _Unwind_Resume(a1);
}

void sub_1BF4519D0()
{
  PowerStats *v0;

  PowerStats::~PowerStats(v0);
}

void sub_1BF4519DC()
{
  _QWORD *v0;
  _Unwind_Exception *v1;
  uint64_t v2;
  void *v3;

  operator delete(v3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2);
  ctu::SharedLoggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v0);
  _Unwind_Resume(v1);
}

void sub_1BF451A04(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2);
  ctu::SharedLoggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

void sub_1BF451A20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v10 = va_arg(va3, _QWORD);
  v12 = va_arg(va3, _QWORD);
  v13 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va3);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v2);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedLoggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7906A00;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7906A00;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void PowerManager::State::~State(PowerManager::State *this)
{
  void *v1;

  PowerManager::State::~State(this);
  operator delete(v1);
}

{
  uint64_t v2;
  const void *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  const void *v12;
  const void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  NSObject *v21;
  std::__shared_weak_count *v22;
  uint8_t v23[16];

  *(_QWORD *)this = off_1E79068F0;
  v2 = *((_QWORD *)this + 20);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v2, 1);
    v3 = (const void *)*((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = 0;
    if (v3)
      _Block_release(v3);
  }
  v4 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v23 = 0;
    _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I Gone!", v23, 2u);
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*((char **)this + 32));
  std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(*((_QWORD *)this + 29));
  std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(*((_QWORD *)this + 26));
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (!v9)
    goto LABEL_17;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_17:
    v12 = (const void *)*((_QWORD *)this + 20);
    if (!v12)
      goto LABEL_19;
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  v12 = (const void *)*((_QWORD *)this + 20);
  if (v12)
LABEL_18:
    _Block_release(v12);
LABEL_19:
  v13 = (const void *)*((_QWORD *)this + 19);
  if (v13)
    _Block_release(v13);
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  *(_QWORD *)this = off_1E7906A00;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v20 = *((_QWORD *)this + 12);
  if (v20)
    dispatch_release(v20);
  v21 = *((_QWORD *)this + 11);
  if (v21)
    dispatch_release(v21);
  v22 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
}

uint64_t ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "power.mgr");
}

uint64_t ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

void ctu::SharedLoggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7906A00;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

_QWORD *ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7906A00;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7906A00;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(char *a1)
{
  NSObject *v2;
  NSObject *v3;

  if (a1)
  {
    std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = *((_QWORD *)a1 + 7);
    if (v2)
    {
      dispatch_group_leave(v2);
      v3 = *((_QWORD *)a1 + 7);
      if (v3)
        dispatch_release(v3);
    }
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(*(_QWORD *)(a1 + 8));
    v2 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_7;
    }
    else
    {
LABEL_6:
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      {
LABEL_7:
        operator delete((void *)a1);
        return;
      }
    }
    operator delete(*(void **)(a1 + 32));
    operator delete((void *)a1);
  }
}

void ___ZN12PowerManager5State4initEv_block_invoke(uint64_t a1)
{
  __int128 v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  void *v7;
  NSObject *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  void *v15;
  void *v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  NSObject *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  NSObject *v31;
  unint64_t *v32;
  unint64_t v33;
  const void *v34;
  __int128 v35;
  uint8_t v36[16];
  uint64_t v37;
  uint64_t v38;
  void (*v39)(_QWORD *, int);
  void *v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  __int128 v44;
  void *v45;
  void *v46;
  std::string __p;
  uint8_t buf[16];
  _QWORD aBlock[4];
  __int128 v50;
  std::__shared_weak_count *v51;
  __int128 v52;
  __int128 v53;
  std::string v54;

  v54.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v53 = v2;
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v2;
  v52 = v2;
  v3 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN12PowerManager5State4initEv_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_29;
  v35 = *(_OWORD *)(a1 + 32);
  v50 = v35;
  v4 = *(std::__shared_weak_count **)(a1 + 48);
  v51 = v4;
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
  }
  v7 = _Block_copy(aBlock);
  v8 = *(NSObject **)(v35 + 88);
  *(_QWORD *)&v52 = 1;
  *((_QWORD *)&v52 + 1) = v8;
  if (v8)
    dispatch_retain(v8);
  if (v7)
  {
    v53 = (unint64_t)_Block_copy(v7);
    v54.__r_.__value_.__r.__words[0] = 5063233;
    *((_BYTE *)&v54.__r_.__value_.__s + 23) = 3;
    _Block_release(v7);
  }
  else
  {
    v53 = 0uLL;
    v54.__r_.__value_.__r.__words[0] = 5063233;
    *((_BYTE *)&v54.__r_.__value_.__s + 23) = 3;
  }
  ctu::power::manager::get((ctu::power::manager *)v8);
  v9 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v10 = *(std::__shared_weak_count **)(v35 + 176);
  *(_OWORD *)(v35 + 168) = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (*(_QWORD *)&buf[8])
  {
    v13 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&buf[8] + 16))(*(_QWORD *)&buf[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  v44 = v52;
  if (*((_QWORD *)&v52 + 1))
    dispatch_retain(*((dispatch_object_t *)&v52 + 1));
  v15 = (void *)v53;
  if ((_QWORD)v53)
    v15 = _Block_copy((const void *)v53);
  v45 = v15;
  v16 = (void *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
    v16 = _Block_copy(*((const void **)&v53 + 1));
  v46 = v16;
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
  else
    __p = v54;
  ctu::power::manager::registerListener();
  v17 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v18 = *(std::__shared_weak_count **)(v35 + 192);
  *(_OWORD *)(v35 + 184) = v17;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_37;
  v22 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
  {
LABEL_37:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_38;
LABEL_41:
    operator delete(__p.__r_.__value_.__l.__data_);
    v24 = v46;
    if (!v46)
      goto LABEL_43;
    goto LABEL_42;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_41;
LABEL_38:
  v24 = v46;
  if (v46)
LABEL_42:
    _Block_release(v24);
LABEL_43:
  if (v45)
    _Block_release(v45);
  if (*((_QWORD *)&v44 + 1))
    dispatch_release(*((dispatch_object_t *)&v44 + 1));
  v25 = *(NSObject **)(v35 + 40);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v25, OS_LOG_TYPE_DEFAULT, "#I Registered power listener", buf, 2u);
  }
  memset(buf, 170, sizeof(buf));
  abm::AWDHelperGetConnection(buf);
  if (*(_QWORD *)buf)
  {
    v37 = v3;
    v38 = 1174405120;
    v39 = ___ZN12PowerManager5State4initEv_block_invoke_5;
    v40 = &__block_descriptor_tmp_10_3;
    v27 = *(_QWORD *)(a1 + 40);
    v26 = *(std::__shared_weak_count **)(a1 + 48);
    v41 = v35;
    v42 = v27;
    v43 = v26;
    if (v26)
    {
      v28 = (unint64_t *)&v26->__shared_weak_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    wis::WISServerConnection::RegisterQueriableMetricCallbackForIdentifier();
    if (v43)
    {
      std::__shared_weak_count::__release_weak(v43);
      v30 = *(std::__shared_weak_count **)&buf[8];
      if (!*(_QWORD *)&buf[8])
        goto LABEL_62;
      goto LABEL_58;
    }
  }
  else
  {
    v31 = *(NSObject **)(v35 + 40);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v36 = 0;
      _os_log_error_impl(&dword_1BF335000, v31, OS_LOG_TYPE_ERROR, "AWD connection setup failed", v36, 2u);
      v30 = *(std::__shared_weak_count **)&buf[8];
      if (!*(_QWORD *)&buf[8])
        goto LABEL_62;
      goto LABEL_58;
    }
  }
  v30 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_62;
LABEL_58:
  v32 = (unint64_t *)&v30->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
LABEL_62:
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v54.__r_.__value_.__l.__data_);
    v34 = (const void *)*((_QWORD *)&v53 + 1);
    if (!*((_QWORD *)&v53 + 1))
      goto LABEL_67;
    goto LABEL_66;
  }
  v34 = (const void *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
LABEL_66:
    _Block_release(v34);
LABEL_67:
  if ((_QWORD)v53)
    _Block_release((const void *)v53);
  if (*((_QWORD *)&v52 + 1))
    dispatch_release(*((dispatch_object_t *)&v52 + 1));
  if (v51)
    std::__shared_weak_count::__release_weak(v51);
}

void sub_1BF452384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, char a20,dispatch_object_t object,void *a22,void *aBlock,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  uint64_t v36;
  std::__shared_weak_count *v38;

  if (aBlock)
    _Block_release(aBlock);
  if (a22)
    _Block_release(a22);
  if (object)
  {
    dispatch_release(object);
    ctu::power::manager::parameters::~parameters((void **)(v36 - 128));
    v38 = a36;
    if (!a36)
LABEL_7:
      _Unwind_Resume(a1);
  }
  else
  {
    ctu::power::manager::parameters::~parameters((void **)(v36 - 128));
    v38 = a36;
    if (!a36)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v38);
  _Unwind_Resume(a1);
}

void ___ZN12PowerManager5State4initEv_block_invoke_2(_QWORD *a1, ctu::power::manager *a2, const void **a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v8;
  void (**v9)(void *, uint64_t);
  int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  BOOL v15;
  BOOL v16;
  int v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  const char *v29;
  const char *v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_weak_owners;
  unint64_t v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  NSObject *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  void *v51;
  const void *v52;
  int v53;
  _QWORD block[5];
  dispatch_object_t object;
  void *aBlock;
  uint64_t v57;
  std::__shared_weak_count *v58;
  int v59;
  unint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  _BYTE buf[12];
  __int16 v65;
  _BYTE v66[24];
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  const char *v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v5 = a1[4];
  v6 = (std::__shared_weak_count *)a1[6];
  if (!v6)
  {
    v8 = 0;
    goto LABEL_7;
  }
  v8 = std::__shared_weak_count::lock(v6);
  if (!v8 || !a1[5])
  {
LABEL_7:
    (*((void (**)(void))*a3 + 2))();
    if (!v8)
      return;
    goto LABEL_96;
  }
  if (*a3)
    v9 = (void (**)(void *, uint64_t))_Block_copy(*a3);
  else
    v9 = 0;
  v10 = *(_DWORD *)(v5 + 120);
  v11 = *(_QWORD *)(v5 + 124);
  v53 = v11;
  HIDWORD(v12) = (_DWORD)a2;
  LODWORD(v12) = (_DWORD)a2 + 536870288;
  switch((v12 >> 4))
  {
    case 0u:
      if (v10 != 1)
        goto LABEL_34;
      v13 = 0;
      v14 = 1;
      if (*(_QWORD *)(v5 + 216))
        goto LABEL_31;
      goto LABEL_49;
    case 1u:
      if (v10 != 1)
        goto LABEL_34;
      v14 = 0;
      v13 = v11 != 0;
      if (!*(_QWORD *)(v5 + 216))
        goto LABEL_49;
      goto LABEL_31;
    case 2u:
      if (!(_DWORD)v11)
        goto LABEL_24;
      goto LABEL_34;
    case 9u:
      if (v10)
        v15 = 0;
      else
        v15 = (_DWORD)v11 == 2;
      if (!v15)
        goto LABEL_34;
LABEL_24:
      v13 = 2;
      v14 = 1;
      if (!*(_QWORD *)(v5 + 216))
        goto LABEL_49;
      goto LABEL_31;
    case 0xBu:
      if (v10)
        v16 = 1;
      else
        v16 = (_DWORD)v11 == 2;
      if (v16)
        goto LABEL_34;
      v14 = 0;
      v13 = 2;
      if (!*(_QWORD *)(v5 + 216))
        goto LABEL_49;
LABEL_31:
      if ((_DWORD)a2 == -536870288)
        goto LABEL_34;
      if ((_DWORD)a2 != -536870272)
      {
LABEL_49:
        *(_DWORD *)(v5 + 120) = v14;
        *(_DWORD *)(v5 + 124) = v13;
        *(_DWORD *)(v5 + 128) = (_DWORD)a2;
        v26 = *(_QWORD *)(v5 + 136);
        v61 = (int)a2;
        v62 = v10;
        v63 = v11;
        v60 = __PAIR64__(v13, v14);
        PowerStats::reportSystemStateChange(v26, (uint64_t)&v62, (uint64_t *)&v60);
        v27 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          v28 = ctu::power::manager::asCString(a2);
          v29 = "Unknown";
          v30 = "PoweredOn";
          v31 = *(_DWORD *)(v5 + 120);
          v32 = *(int *)(v5 + 124);
          if (v31 != 1)
            v30 = "Unknown";
          if (!v31)
            v30 = "LowPower";
          if (v32 <= 2)
            v29 = off_1E7906DE8[v32];
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v28;
          v65 = 2080;
          *(_QWORD *)v66 = v30;
          *(_WORD *)&v66[8] = 2080;
          *(_QWORD *)&v66[10] = v29;
          _os_log_impl(&dword_1BF335000, v27, OS_LOG_TYPE_DEFAULT, "#I Power notification: %s, Power state: %s, Sleep state: %s", buf, 0x20u);
        }
        v33 = *(_DWORD *)(v5 + 128);
        switch(v33)
        {
          case -536870144:
            goto LABEL_60;
          case -536870256:
            v9[2](v9, 1);
            v46 = *(_QWORD *)(v5 + 264);
            if (v46)
            {
              v47 = *(NSObject **)(v5 + 40);
              if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 134217984;
                *(_QWORD *)&buf[4] = v46;
                _os_log_impl(&dword_1BF335000, v47, OS_LOG_TYPE_DEFAULT, "#I Allowing deferred work to run (after WillNotSleep); count=%zd",
                  buf,
                  0xCu);
              }
              std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*(char **)(v5 + 256));
              *(_QWORD *)(v5 + 256) = 0;
              *(_QWORD *)(v5 + 264) = 0;
              *(_QWORD *)(v5 + 248) = v5 + 256;
            }
            break;
          case -536870272:
LABEL_60:
            v34 = *(unsigned int *)(v5 + 120);
            v35 = dispatch_group_create();
            v36 = *(_QWORD *)(v5 + 152);
            if (v36)
            {
              if (v35)
              {
                dispatch_retain(v35);
                dispatch_group_enter(v35);
                v36 = *(_QWORD *)(v5 + 152);
              }
              *(_QWORD *)buf = v35;
              (*(void (**)(uint64_t, uint64_t, _BYTE *))(v36 + 16))(v36, v34, buf);
              if (*(_QWORD *)buf)
              {
                dispatch_group_leave(*(dispatch_group_t *)buf);
                if (*(_QWORD *)buf)
                  dispatch_release(*(dispatch_object_t *)buf);
              }
            }
            v37 = *(std::__shared_weak_count **)(v5 + 80);
            if (!v37 || (v38 = *(_QWORD *)(v5 + 72), (v39 = std::__shared_weak_count::lock(v37)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v40 = v39;
            p_shared_weak_owners = (unint64_t *)&v39->__shared_weak_owners_;
            do
              v42 = __ldxr(p_shared_weak_owners);
            while (__stxr(v42 + 1, p_shared_weak_owners));
            p_shared_owners = (unint64_t *)&v39->__shared_owners_;
            do
              v44 = __ldaxr(p_shared_owners);
            while (__stlxr(v44 - 1, p_shared_owners));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v40);
            }
            block[0] = MEMORY[0x1E0C809B0];
            block[1] = 1174405120;
            block[2] = ___ZN12PowerManager5State28handlePowerNotification_syncEN8dispatch5blockIU13block_pointerFvbEEEj_block_invoke;
            block[3] = &__block_descriptor_tmp_15_5;
            block[4] = v5;
            object = v35;
            if (v35)
              dispatch_retain(v35);
            if (v9)
              v45 = _Block_copy(v9);
            else
              v45 = 0;
            aBlock = v45;
            v57 = v38;
            v58 = v40;
            do
              v48 = __ldxr(p_shared_weak_owners);
            while (__stxr(v48 + 1, p_shared_weak_owners));
            v59 = v34;
            dispatch_group_notify(v35, *(dispatch_queue_t *)(v5 + 88), block);
            if (v58)
              std::__shared_weak_count::__release_weak(v58);
            if (aBlock)
              _Block_release(aBlock);
            if (object)
              dispatch_release(object);
            std::__shared_weak_count::__release_weak(v40);
            if (v35)
              dispatch_release(v35);
LABEL_94:
            if (!v9)
              goto LABEL_96;
            break;
          default:
            v9[2](v9, 1);
            break;
        }
LABEL_95:
        _Block_release(v9);
        goto LABEL_96;
      }
      if (*(_QWORD *)(v5 + 264))
      {
LABEL_34:
        v9[2](v9, 0);
        v17 = 0;
        v18 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          goto LABEL_42;
        goto LABEL_35;
      }
      if (v9)
        v51 = _Block_copy(v9);
      else
        v51 = 0;
      v52 = *(const void **)(v5 + 160);
      *(_QWORD *)(v5 + 160) = v51;
      if (v52)
        _Block_release(v52);
      v17 = 1;
      v18 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
LABEL_35:
        v19 = ctu::power::manager::asCString(a2);
        v20 = *(_QWORD *)(v5 + 216);
        v21 = "Unknown";
        v22 = *(_QWORD *)(v5 + 264);
        if (v10 == 1)
          v21 = "PoweredOn";
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = v19;
        v65 = 1024;
        if (!v10)
          v21 = "LowPower";
        *(_DWORD *)v66 = v53;
        v23 = "false";
        *(_WORD *)&v66[4] = 2080;
        *(_QWORD *)&v66[6] = v21;
        *(_WORD *)&v66[14] = 2048;
        if (v17)
          v23 = "true";
        *(_QWORD *)&v66[16] = v20;
        v67 = 2048;
        v68 = v22;
        v69 = 2080;
        v70 = v23;
        _os_log_impl(&dword_1BF335000, v18, OS_LOG_TYPE_DEFAULT, "#I Cannot accept notification: %s, SleepState: %u, PowerState: %s, Assertions: %lu, Assertions-deferred: %lu, Deferred-ack: %s", buf, 0x3Au);
      }
LABEL_42:
      if ((_DWORD)a2 != -536870144 && (_DWORD)a2 != -536870256)
        goto LABEL_94;
      v24 = *(_QWORD *)(v5 + 264);
      if (!v24)
        goto LABEL_94;
      v25 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v24;
        _os_log_impl(&dword_1BF335000, v25, OS_LOG_TYPE_DEFAULT, "#I Allowing deferred work to run (skipping power event); count=%zd",
          buf,
          0xCu);
      }
      std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*(char **)(v5 + 256));
      *(_QWORD *)(v5 + 256) = 0;
      *(_QWORD *)(v5 + 264) = 0;
      *(_QWORD *)(v5 + 248) = v5 + 256;
      if (v9)
        goto LABEL_95;
LABEL_96:
      v49 = (unint64_t *)&v8->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      return;
    default:
      goto LABEL_34;
  }
}

void sub_1BF452B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,dispatch_group_t group)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN12PowerManager5State4initEv_block_invoke_5(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[5];
  int v11;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v10[0] = MEMORY[0x1E0C809B0];
        v10[1] = 0x40000000;
        v10[2] = ___ZN12PowerManager5State4initEv_block_invoke_2_6;
        v10[3] = &__block_descriptor_tmp_8_7;
        v10[4] = v5;
        v11 = a2;
        ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped((uint64_t *)(v5 + 72), (uint64_t)v10);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void ___ZN12PowerManager5State4initEv_block_invoke_2_6(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 40) == 524466)
    PowerStats::submitLowPowerStatsMetric_sync(*(os_log_t **)(*(_QWORD *)(a1 + 32) + 136));
}

void ___ZN12PowerManager5State28handlePowerNotification_syncEN8dispatch5blockIU13block_pointerFvbEEEj_block_invoke(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      v5 = v4;
      if (*(_QWORD *)(a1 + 56))
      {
        if (*(_DWORD *)(a1 + 72) == 1)
        {
          v6 = *(_QWORD *)(v2 + 264);
          if (v6)
          {
            v7 = *(NSObject **)(v2 + 40);
            if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
            {
              v10 = 134217984;
              v11 = v6;
              _os_log_impl(&dword_1BF335000, v7, OS_LOG_TYPE_DEFAULT, "#I Allowing deferred work to run; count=%zd",
                (uint8_t *)&v10,
                0xCu);
            }
            std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*(char **)(v2 + 256));
            *(_QWORD *)(v2 + 256) = 0;
            *(_QWORD *)(v2 + 264) = 0;
            *(_QWORD *)(v2 + 248) = v2 + 256;
          }
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void *__copy_helper_block_e8_40c21_ZTSN8dispatch5groupE48c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE56c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE(_QWORD *a1, _QWORD *a2)
{
  NSObject *v4;
  void *result;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v4 = a2[5];
  a1[5] = v4;
  if (v4)
    dispatch_retain(v4);
  result = (void *)a2[6];
  if (result)
    result = _Block_copy(result);
  v7 = a2[7];
  v6 = a2[8];
  a1[6] = result;
  a1[7] = v7;
  a1[8] = v6;
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

void __destroy_helper_block_e8_40c21_ZTSN8dispatch5groupE48c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE56c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  const void *v3;
  NSObject *v4;

  v2 = (std::__shared_weak_count *)a1[8];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (const void *)a1[6];
  if (v3)
    _Block_release(v3);
  v4 = a1[5];
  if (v4)
    dispatch_release(v4);
}

void ctu::power::manager::parameters::~parameters(void **this)
{
  const void *v2;
  const void *v3;
  NSObject *v4;

  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    v2 = this[3];
    if (!v2)
      goto LABEL_6;
    goto LABEL_5;
  }
  v2 = this[3];
  if (v2)
LABEL_5:
    _Block_release(v2);
LABEL_6:
  v3 = this[2];
  if (v3)
    _Block_release(v3);
  v4 = this[1];
  if (v4)
    dispatch_release(v4);
}

void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN12PowerManager5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E7906B38;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN12PowerManager5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN12PowerManager5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN12PowerManager5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ___ZN12PowerManager5State22registerForPowerEventsEN8dispatch5blockIU13block_pointerFv10PowerStateNS1_13group_sessionEEEE_block_invoke(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  const void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(void **)(a1 + 40);
  if (v1)
    v1 = _Block_copy(v1);
  v3 = *(const void **)(v2 + 152);
  *(_QWORD *)(v2 + 152) = v1;
  if (v3)
    _Block_release(v3);
}

void *__copy_helper_block_e8_40c73_ZTSN8dispatch5blockIU13block_pointerFv10PowerStateNS_13group_sessionEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 40);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c73_ZTSN8dispatch5blockIU13block_pointerFv10PowerStateNS_13group_sessionEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    _Block_release(v1);
}

void dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1}>(PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1},std::default_delete<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t **v24;
  size_t v25;
  size_t v26;
  const void *v27;
  const void *v28;
  size_t v29;
  uint64_t **v30;
  uint64_t **v31;
  int v32;
  uint64_t *v33;
  size_t v34;
  size_t v35;
  int v36;
  uint64_t **v37;
  int v38;
  uint64_t *v39;
  size_t v40;
  size_t v41;
  int v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t **v51;
  uint64_t *v52;
  uint64_t **v53;
  uint64_t *v54;
  char v55;
  uint64_t *v56;
  int v57;
  uint64_t *v58;
  size_t v59;
  const void *v60;
  size_t v61;
  size_t v62;
  int v63;
  _QWORD *v64;
  uint64_t **v65;
  int v66;
  const void *v67;
  size_t v68;
  size_t v69;
  int v70;
  int v71;
  char v72;
  uint64_t *v73;
  std::string *v74;
  __int128 v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  NSObject *v82;
  _BOOL4 v83;
  std::string::size_type v84;
  std::string::size_type v85;
  uint64_t v86;
  std::string::size_type v87;
  std::string::size_type v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  const void *v92;
  NSObject *v93;
  __int128 v94;
  __int128 v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  __int128 v105;
  NSObject *v106;
  uint64_t *v107;
  std::string *p_buf;
  std::string::size_type size;
  uint64_t **v110;
  uint64_t **v111;
  _QWORD *v112;
  const void *v113;
  const void *v114;
  int v115;
  const void *v116;
  size_t v117;
  size_t v118;
  int v119;
  int v120;
  uint64_t *v121;
  std::string *v122;
  uint64_t v123;
  uint64_t *v124;
  void *v125;
  uint64_t **v126;
  uint64_t *v127;
  size_t v128;
  const void *v129;
  size_t v130;
  const void *v131;
  size_t v132;
  uint64_t **v133;
  uint64_t **v134;
  int v135;
  uint64_t *v136;
  size_t v137;
  size_t v138;
  int v139;
  uint64_t **v140;
  int v141;
  uint64_t *v142;
  size_t v143;
  size_t v144;
  int v145;
  uint64_t *v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t **v152;
  uint64_t *v153;
  char v154;
  uint64_t *v155;
  int v156;
  uint64_t *v157;
  size_t v158;
  const void *v159;
  size_t v160;
  int v161;
  uint64_t **v162;
  size_t v163;
  size_t v164;
  const void *v165;
  size_t v166;
  size_t v167;
  int v168;
  int v169;
  std::__shared_weak_count *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  NSObject *v174;
  NSObject *v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  char v179;
  char *v180;
  uint64_t *v181;
  __int128 v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  char v186;
  uint64_t *__p;
  uint64_t *__pa;
  char v189;
  std::__shared_weak_count *v190;
  _QWORD *v191;
  _QWORD *v193;
  uint64_t v194;
  std::string v195;
  unint64_t v196;
  unint64_t v197;
  std::string buf;
  _BYTE group[24];
  std::__shared_weak_count *v200;
  std::string v201;
  uint64_t v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  v1 = (_QWORD *)*a1;
  v2 = *(_QWORD **)*a1;
  v194 = *a1 + 8;
  v196 = 0xAAAAAAAAAAAAAAAALL;
  v197 = 0xAAAAAAAAAAAAAAAALL;
  v193 = v1;
  pthread_mutex_lock(&ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance);
  if (qword_1ED70FB40)
    goto LABEL_20;
  v3 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
  MEMORY[0x1C3B8966C]();
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E7906BD8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = v3;
  v6 = (std::__shared_weak_count *)v3->~__shared_weak_count_0;
  if (!v6)
  {
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
    v3->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v3;
    v3->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    do
LABEL_12:
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    goto LABEL_15;
  }
  if (v6->__shared_owners_ == -1)
  {
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v3->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v3;
    v3->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    std::__shared_weak_count::__release_weak(v6);
    goto LABEL_12;
  }
LABEL_15:
  v14 = (std::__shared_weak_count *)off_1ED70FB48;
  qword_1ED70FB40 = (uint64_t)v3;
  off_1ED70FB48 = v4;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
LABEL_20:
  v17 = (std::__shared_weak_count *)off_1ED70FB48;
  if (off_1ED70FB48)
  {
    v18 = (unint64_t *)((char *)off_1ED70FB48 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance);
  ctu::power::assertion::createInternal();
  if (v17)
  {
    v20 = (unint64_t *)&v17->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      v22 = (uint64_t *)v196;
      if (v196)
        goto LABEL_28;
LABEL_72:
      v49 = v2[5];
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        v50 = v194;
        if (*((char *)v1 + 31) < 0)
          v50 = *(_QWORD *)v194;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v50;
        _os_log_error_impl(&dword_1BF335000, v49, OS_LOG_TYPE_ERROR, "Failed to create power assertion '%s'", (uint8_t *)&buf, 0xCu);
      }
      goto LABEL_344;
    }
  }
  v22 = (uint64_t *)v196;
  if (!v196)
    goto LABEL_72;
LABEL_28:
  v24 = (uint64_t **)(v2 + 26);
  v23 = (uint64_t *)v2[26];
  v191 = v2;
  __p = v22;
  if (!v23)
  {
    v51 = (uint64_t **)v2[25];
    v37 = (uint64_t **)(v2 + 26);
    if (v51 == v24)
    {
      v52 = 0;
      v37 = v24;
      v53 = v24;
      if (*v24)
        goto LABEL_153;
      goto LABEL_138;
    }
    goto LABEL_86;
  }
  v25 = *((unsigned __int8 *)v1 + 31);
  v27 = (const void *)v1[1];
  v26 = v1[2];
  if ((v25 & 0x80u) == 0)
    v28 = (const void *)v194;
  else
    v28 = (const void *)v1[1];
  if ((v25 & 0x80u) == 0)
    v29 = *((unsigned __int8 *)v1 + 31);
  else
    v29 = v1[2];
  v30 = (uint64_t **)(v2 + 26);
  v31 = (uint64_t **)v2[26];
  do
  {
    while (1)
    {
      v32 = *((char *)v31 + 55);
      v33 = v32 >= 0 ? (uint64_t *)(v31 + 4) : v31[4];
      v34 = v32 >= 0 ? *((unsigned __int8 *)v31 + 55) : (size_t)v31[5];
      v35 = v29 >= v34 ? v34 : v29;
      v36 = memcmp(v33, v28, v35);
      if (v36)
        break;
      if (v34 >= v29)
        goto LABEL_50;
LABEL_36:
      v31 = (uint64_t **)v31[1];
      if (!v31)
        goto LABEL_51;
    }
    if (v36 < 0)
      goto LABEL_36;
LABEL_50:
    v30 = v31;
    v31 = (uint64_t **)*v31;
  }
  while (v31);
LABEL_51:
  v37 = v24;
  if (v30 != v24)
  {
    v38 = *((char *)v30 + 55);
    if (v38 >= 0)
      v39 = (uint64_t *)(v30 + 4);
    else
      v39 = v30[4];
    if (v38 >= 0)
      v40 = *((unsigned __int8 *)v30 + 55);
    else
      v40 = (size_t)v30[5];
    if (v40 >= v29)
      v41 = v29;
    else
      v41 = v40;
    v42 = memcmp(v28, v39, v41);
    if (v42)
    {
      if ((v42 & 0x80000000) == 0)
      {
LABEL_63:
        v43 = v197;
        if (v197)
        {
          v44 = (unint64_t *)(v197 + 8);
          do
            v45 = __ldxr(v44);
          while (__stxr(v45 + 1, v44));
        }
        v46 = (std::__shared_weak_count *)v30[8];
        v30[7] = __p;
        v30[8] = (uint64_t *)v43;
        if (v46)
        {
          v47 = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        goto LABEL_153;
      }
    }
    else if (v29 >= v40)
    {
      goto LABEL_63;
    }
    v37 = v30;
  }
  v52 = *v37;
  if ((uint64_t **)v191[25] == v37)
  {
    v53 = v37;
    if (v52)
      v24 = v37 + 1;
    else
      v24 = v37;
    if (*v24)
      goto LABEL_153;
LABEL_138:
    if (v52)
      v65 = v53;
    else
      v65 = v37;
    v64 = v193;
    v72 = *((_BYTE *)v193 + 31);
    goto LABEL_144;
  }
  if (!v52)
  {
LABEL_86:
    v53 = v37;
    do
    {
      v56 = (uint64_t *)v53;
      v53 = (uint64_t **)v53[2];
    }
    while (*v53 == v56);
    v52 = 0;
    v25 = *((unsigned __int8 *)v193 + 31);
    v27 = (const void *)v193[1];
    v26 = v193[2];
    v55 = *((_BYTE *)v193 + 31);
    goto LABEL_89;
  }
  v54 = *v37;
  do
  {
    v53 = (uint64_t **)v54;
    v54 = (uint64_t *)v54[1];
  }
  while (v54);
  v55 = v25;
LABEL_89:
  v57 = *((char *)v53 + 55);
  if (v57 >= 0)
    v58 = (uint64_t *)(v53 + 4);
  else
    v58 = v53[4];
  if (v57 >= 0)
    v59 = *((unsigned __int8 *)v53 + 55);
  else
    v59 = (size_t)v53[5];
  v189 = v55;
  if (v55 >= 0)
    v60 = (const void *)v194;
  else
    v60 = v27;
  if (v55 >= 0)
    v61 = v25;
  else
    v61 = v26;
  if (v61 >= v59)
    v62 = v59;
  else
    v62 = v61;
  v63 = memcmp(v58, v60, v62);
  if (!v63)
  {
    if (v59 >= v61)
      goto LABEL_106;
    goto LABEL_129;
  }
  if (v63 < 0)
  {
LABEL_129:
    if (v52)
      v24 = v53 + 1;
    else
      v24 = v37;
    if (*v24)
      goto LABEL_153;
    goto LABEL_138;
  }
LABEL_106:
  v64 = v193;
  if (!v23)
  {
    v65 = v24;
    goto LABEL_143;
  }
  while (2)
  {
    while (2)
    {
      v65 = (uint64_t **)v23;
      v66 = *((char *)v23 + 55);
      if (v66 >= 0)
        v67 = v23 + 4;
      else
        v67 = (const void *)v23[4];
      if (v66 >= 0)
        v68 = *((unsigned __int8 *)v23 + 55);
      else
        v68 = v23[5];
      if (v68 >= v61)
        v69 = v61;
      else
        v69 = v68;
      v70 = memcmp(v60, v67, v69);
      if (v70)
      {
        if (v70 < 0)
          break;
        goto LABEL_122;
      }
      if (v61 >= v68)
      {
LABEL_122:
        v71 = memcmp(v67, v60, v69);
        if (v71)
        {
          if ((v71 & 0x80000000) == 0)
            goto LABEL_153;
        }
        else if (v68 >= v61)
        {
          goto LABEL_153;
        }
        v23 = v65[1];
        v64 = v193;
        if (!v23)
        {
          v24 = v65 + 1;
          goto LABEL_143;
        }
        continue;
      }
      break;
    }
    v23 = *v65;
    if (*v65)
      continue;
    break;
  }
  v24 = v65;
LABEL_143:
  v72 = v189;
LABEL_144:
  v73 = (uint64_t *)operator new(0x48uLL);
  v74 = (std::string *)(v73 + 4);
  if (v72 < 0)
  {
    std::string::__init_copy_ctor_external(v74, (const std::string::value_type *)v64[1], v64[2]);
    v76 = v197;
    v73[7] = v196;
    v73[8] = v76;
    if (!v76)
      goto LABEL_150;
  }
  else
  {
    v75 = *(_OWORD *)v194;
    v73[6] = *(_QWORD *)(v194 + 16);
    *(_OWORD *)&v74->__r_.__value_.__l.__data_ = v75;
    v76 = v197;
    v73[7] = (uint64_t)__p;
    v73[8] = v76;
    if (!v76)
      goto LABEL_150;
  }
  v77 = (unint64_t *)(v76 + 8);
  do
    v78 = __ldxr(v77);
  while (__stxr(v78 + 1, v77));
LABEL_150:
  *v73 = 0;
  v73[1] = 0;
  v73[2] = (uint64_t)v65;
  *v24 = v73;
  v79 = *(_QWORD *)v191[25];
  if (v79)
  {
    v191[25] = v79;
    v73 = *v24;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v191[26], v73);
  ++v191[27];
LABEL_153:
  v80 = *(_DWORD *)(v196 + 32);
  v81 = *((_DWORD *)v191 + 30);
  v82 = v191[5];
  v83 = os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT);
  if (!v81)
  {
    v1 = v193;
    if (!v83)
    {
LABEL_166:
      v91 = v191[20];
      if (v91)
      {
        (*(void (**)(uint64_t, uint64_t))(v91 + 16))(v91, 1);
        v92 = (const void *)v191[20];
        v191[20] = 0;
        if (v92)
          _Block_release(v92);
        v93 = v191[5];
        if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          v80 = 2;
          _os_log_impl(&dword_1BF335000, v93, OS_LOG_TYPE_DEFAULT, "#I Assertion held, but action will be deferred; acknowledging previous notification",
            (uint8_t *)&buf,
            2u);
          v86 = v191[17];
          if (*((char *)v193 + 31) < 0)
            goto LABEL_158;
        }
        else
        {
          v80 = 2;
          v86 = v191[17];
          if (*((char *)v193 + 31) < 0)
            goto LABEL_158;
        }
        goto LABEL_174;
      }
      v80 = 2;
      goto LABEL_173;
    }
    v87 = v194;
    if (*((char *)v193 + 31) < 0)
    {
      v87 = *(_QWORD *)v194;
      v88 = v193[4];
      v89 = *((int *)v191 + 31);
      if (v89 <= 2)
        goto LABEL_162;
    }
    else
    {
      v88 = v193[4];
      v89 = *((int *)v191 + 31);
      if (v89 <= 2)
      {
LABEL_162:
        v90 = off_1E7906DE8[v89];
LABEL_165:
        LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v87;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v88;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
        *(_DWORD *)group = v80;
        *(_WORD *)&group[4] = 1024;
        *(_DWORD *)&group[6] = 2;
        *(_WORD *)&group[10] = 2080;
        *(_QWORD *)&group[12] = v90;
        _os_log_impl(&dword_1BF335000, v82, OS_LOG_TYPE_DEFAULT, "#I Power assertion created for '%s' during sleep; Timeout (millisec): %llu, Status = %d, Override = %d; Sleep state: %s",
          (uint8_t *)&buf,
          0x2Cu);
        goto LABEL_166;
      }
    }
    v90 = "Unknown";
    goto LABEL_165;
  }
  v1 = v193;
  if (!v83)
  {
LABEL_173:
    v86 = v191[17];
    if (*((char *)v1 + 31) < 0)
      goto LABEL_158;
    goto LABEL_174;
  }
  v84 = v194;
  if (*((char *)v193 + 31) < 0)
    v84 = *(_QWORD *)v194;
  v85 = v193[4];
  LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v84;
  WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
  *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v85;
  HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
  *(_DWORD *)group = v80;
  _os_log_impl(&dword_1BF335000, v82, OS_LOG_TYPE_DEFAULT, "#I Power assertion created for '%s'; Timeout (millisec): %llu, Status = %d",
    (uint8_t *)&buf,
    0x1Cu);
  v86 = v191[17];
  if (*((char *)v193 + 31) < 0)
  {
LABEL_158:
    std::string::__init_copy_ctor_external(&v195, (const std::string::value_type *)v1[1], v1[2]);
    goto LABEL_175;
  }
LABEL_174:
  v94 = *(_OWORD *)v194;
  v195.__r_.__value_.__r.__words[2] = *(_QWORD *)(v194 + 16);
  *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v94;
LABEL_175:
  PowerStats::gotAssertion(v86, (uint64_t)&v195, v80);
  if ((SHIBYTE(v195.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v80 == 2)
      goto LABEL_177;
LABEL_180:
    if ((uint64_t)v1[4] < 1)
      goto LABEL_344;
    v96 = (std::__shared_weak_count *)v191[10];
    if (!v96 || (v97 = v191[9], (v98 = std::__shared_weak_count::lock(v96)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v99 = v98;
    v100 = (unint64_t *)&v98->__shared_weak_owners_;
    do
      v101 = __ldxr(v100);
    while (__stxr(v101 + 1, v100));
    v102 = (unint64_t *)&v98->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v99);
    }
    buf.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
    buf.__r_.__value_.__l.__size_ = 1174405120;
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZZN12PowerManager5State20createPowerAssertionENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_6chrono8durationIxNS1_5ratioILl1ELl1000EEEEEENKUlvE_clEv_block_invoke;
    *(_QWORD *)group = &__block_descriptor_tmp_18_6;
    *(_QWORD *)&group[8] = v191;
    *(_QWORD *)&group[16] = v97;
    v200 = v99;
    do
      v104 = __ldxr(v100);
    while (__stxr(v104 + 1, v100));
    v190 = v99;
    if (*((char *)v1 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v201, (const std::string::value_type *)v1[1], v1[2]);
    }
    else
    {
      v105 = *(_OWORD *)v194;
      v201.__r_.__value_.__r.__words[2] = *(_QWORD *)(v194 + 16);
      *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v105;
    }
    v202 = v1[4];
    v124 = (uint64_t *)operator new(0x10uLL);
    v125 = _Block_copy(&buf);
    *v124 = (uint64_t)"Watchdog timed out";
    __pa = v124;
    TelephonyBasebandWatchdogStart();
    if (v125)
      _Block_release(v125);
    v126 = (uint64_t **)(v191 + 29);
    v127 = (uint64_t *)v191[29];
    if (!v127)
    {
      v140 = (uint64_t **)(v191 + 29);
      if ((uint64_t **)v191[28] == v126)
      {
        v151 = 0;
        v140 = (uint64_t **)(v191 + 29);
        v152 = (uint64_t **)(v191 + 29);
        goto LABEL_335;
      }
      goto LABEL_291;
    }
    v128 = *((unsigned __int8 *)v1 + 31);
    v129 = (const void *)v1[1];
    v130 = v1[2];
    if ((v128 & 0x80u) == 0)
      v131 = (const void *)v194;
    else
      v131 = (const void *)v1[1];
    if ((v128 & 0x80u) == 0)
      v132 = *((unsigned __int8 *)v1 + 31);
    else
      v132 = v1[2];
    v133 = (uint64_t **)(v191 + 29);
    v134 = (uint64_t **)v191[29];
    while (1)
    {
      v135 = *((char *)v134 + 55);
      if (v135 >= 0)
        v136 = (uint64_t *)(v134 + 4);
      else
        v136 = v134[4];
      if (v135 >= 0)
        v137 = *((unsigned __int8 *)v134 + 55);
      else
        v137 = (size_t)v134[5];
      if (v132 >= v137)
        v138 = v137;
      else
        v138 = v132;
      v139 = memcmp(v136, v131, v138);
      if (v139)
      {
        if (v139 < 0)
          goto LABEL_249;
      }
      else if (v137 < v132)
      {
LABEL_249:
        v134 = (uint64_t **)v134[1];
        if (!v134)
          goto LABEL_264;
        continue;
      }
      v133 = v134;
      v134 = (uint64_t **)*v134;
      if (!v134)
      {
LABEL_264:
        v140 = (uint64_t **)(v191 + 29);
        if (v133 == v126)
          goto LABEL_286;
        v141 = *((char *)v133 + 55);
        if (v141 >= 0)
          v142 = (uint64_t *)(v133 + 4);
        else
          v142 = v133[4];
        if (v141 >= 0)
          v143 = *((unsigned __int8 *)v133 + 55);
        else
          v143 = (size_t)v133[5];
        if (v143 >= v132)
          v144 = v132;
        else
          v144 = v143;
        v145 = memcmp(v131, v142, v144);
        if (!v145)
        {
          v1 = v193;
          if (v132 < v143)
            goto LABEL_285;
LABEL_276:
          v146 = (uint64_t *)operator new(0x20uLL);
          *v146 = (uint64_t)off_1E7906C28;
          v146[1] = 0;
          v147 = v190;
          v146[2] = 0;
          v146[3] = (uint64_t)__pa;
          v148 = (std::__shared_weak_count *)v133[8];
          v133[7] = __pa;
          v133[8] = v146;
          if (v148)
          {
            v149 = (unint64_t *)&v148->__shared_owners_;
            do
              v150 = __ldaxr(v149);
            while (__stlxr(v150 - 1, v149));
            if (!v150)
            {
              ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
              std::__shared_weak_count::__release_weak(v148);
              if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_373;
              goto LABEL_341;
            }
          }
LABEL_340:
          if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_373;
          goto LABEL_341;
        }
        v1 = v193;
        if ((v145 & 0x80000000) == 0)
          goto LABEL_276;
LABEL_285:
        v140 = v133;
LABEL_286:
        v151 = *v140;
        if ((uint64_t **)v191[28] == v140)
        {
          v152 = v140;
          goto LABEL_335;
        }
        if (v151)
        {
          v153 = *v140;
          do
          {
            v152 = (uint64_t **)v153;
            v153 = (uint64_t *)v153[1];
          }
          while (v153);
          v154 = v128;
LABEL_294:
          v156 = *((char *)v152 + 55);
          if (v156 >= 0)
            v157 = (uint64_t *)(v152 + 4);
          else
            v157 = v152[4];
          if (v156 >= 0)
            v158 = *((unsigned __int8 *)v152 + 55);
          else
            v158 = (size_t)v152[5];
          v186 = v154;
          if (v154 >= 0)
            v159 = (const void *)v194;
          else
            v159 = v129;
          if (v154 >= 0)
            v130 = v128;
          if (v130 >= v158)
            v160 = v158;
          else
            v160 = v130;
          v161 = memcmp(v157, v159, v160);
          if (v161)
          {
            if (v161 < 0)
            {
LABEL_335:
              if (v151)
                v126 = v152 + 1;
              else
                v126 = v140;
              if (!*v126)
              {
                if (v151)
                  v162 = v152;
                else
                  v162 = v140;
                v1 = v193;
                v179 = *((_BYTE *)v193 + 31);
                goto LABEL_367;
              }
LABEL_339:
              TelephonyBasebandWatchdogStop();
              operator delete(__pa);
              v1 = v193;
              v147 = v190;
              goto LABEL_340;
            }
          }
          else if (v158 < v130)
          {
            goto LABEL_335;
          }
          if (!v127)
          {
            v162 = (uint64_t **)(v191 + 29);
            v1 = v193;
            goto LABEL_366;
          }
          v1 = v193;
          while (1)
          {
            v162 = (uint64_t **)v127;
            v163 = *((unsigned __int8 *)v127 + 55);
            v164 = v127[5];
            if ((v163 & 0x80u) == 0)
              v165 = v127 + 4;
            else
              v165 = (const void *)v127[4];
            if ((v163 & 0x80u) == 0)
              v166 = v163;
            else
              v166 = v164;
            if (v166 >= v130)
              v167 = v130;
            else
              v167 = v166;
            v168 = memcmp(v159, v165, v167);
            if (v168)
            {
              if ((v168 & 0x80000000) == 0)
                goto LABEL_328;
            }
            else if (v130 >= v166)
            {
LABEL_328:
              v169 = memcmp(v165, v159, v167);
              if (v169)
              {
                if ((v169 & 0x80000000) == 0)
                  goto LABEL_339;
              }
              else if (v166 >= v130)
              {
                goto LABEL_339;
              }
              v127 = v162[1];
              v1 = v193;
              if (!v127)
              {
                v126 = v162 + 1;
                goto LABEL_366;
              }
              continue;
            }
            v127 = *v162;
            if (!*v162)
            {
              v126 = v162;
LABEL_366:
              v179 = v186;
LABEL_367:
              v180 = (char *)operator new(0x48uLL);
              v181 = (uint64_t *)v180;
              if (v179 < 0)
              {
                v183 = (uint64_t)__pa;
                v147 = v190;
                std::string::__init_copy_ctor_external((std::string *)(v180 + 32), (const std::string::value_type *)v1[1], v1[2]);
              }
              else
              {
                v182 = *(_OWORD *)v194;
                *((_QWORD *)v180 + 6) = *(_QWORD *)(v194 + 16);
                *((_OWORD *)v180 + 2) = v182;
                v183 = (uint64_t)__pa;
                v147 = v190;
              }
              v181[7] = v183;
              v184 = operator new(0x20uLL);
              *v184 = off_1E7906C28;
              v184[1] = 0;
              v184[2] = 0;
              v184[3] = v183;
              v181[8] = (uint64_t)v184;
              *v181 = 0;
              v181[1] = 0;
              v181[2] = (uint64_t)v162;
              *v126 = v181;
              v185 = *(_QWORD *)v191[28];
              if (v185)
              {
                v191[28] = v185;
                v181 = *v126;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v191[29], v181);
              ++v191[30];
              if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
              {
LABEL_373:
                operator delete(v201.__r_.__value_.__l.__data_);
                v170 = v200;
                if (!v200)
                  goto LABEL_343;
LABEL_342:
                std::__shared_weak_count::__release_weak(v170);
LABEL_343:
                std::__shared_weak_count::__release_weak(v147);
                goto LABEL_344;
              }
LABEL_341:
              v170 = v200;
              if (v200)
                goto LABEL_342;
              goto LABEL_343;
            }
          }
        }
LABEL_291:
        v152 = v140;
        do
        {
          v155 = (uint64_t *)v152;
          v152 = (uint64_t **)v152[2];
        }
        while (*v152 == v155);
        v151 = 0;
        v128 = *((unsigned __int8 *)v193 + 31);
        v129 = (const void *)v193[1];
        v130 = v193[2];
        v154 = *((_BYTE *)v193 + 31);
        goto LABEL_294;
      }
    }
  }
  operator delete(v195.__r_.__value_.__l.__data_);
  if (v80 != 2)
    goto LABEL_180;
LABEL_177:
  if (*((char *)v1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&buf, (const std::string::value_type *)v1[1], v1[2]);
  }
  else
  {
    v95 = *(_OWORD *)v194;
    buf.__r_.__value_.__r.__words[2] = *(_QWORD *)(v194 + 16);
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v95;
  }
  v106 = v1[5];
  *(_QWORD *)group = v106;
  if (v106)
  {
    dispatch_retain(v106);
    if (*(_QWORD *)group)
      dispatch_group_enter(*(dispatch_group_t *)group);
  }
  v107 = (uint64_t *)v191[32];
  if (!v107)
  {
    v110 = (uint64_t **)(v191 + 32);
    v111 = (uint64_t **)(v191 + 32);
    goto LABEL_225;
  }
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_buf = &buf;
  else
    p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  else
    size = buf.__r_.__value_.__l.__size_;
  do
  {
    while (2)
    {
      v111 = (uint64_t **)v107;
      v114 = (const void *)v107[4];
      v112 = v107 + 4;
      v113 = v114;
      v115 = *((char *)v112 + 23);
      if (v115 >= 0)
        v116 = v112;
      else
        v116 = v113;
      if (v115 >= 0)
        v117 = *((unsigned __int8 *)v112 + 23);
      else
        v117 = v112[1];
      if (v117 >= size)
        v118 = size;
      else
        v118 = v117;
      v119 = memcmp(p_buf, v116, v118);
      if (v119)
      {
        if (v119 < 0)
          goto LABEL_204;
      }
      else if (size < v117)
      {
LABEL_204:
        v107 = *v111;
        v110 = v111;
        if (!*v111)
          goto LABEL_225;
        continue;
      }
      break;
    }
    v120 = memcmp(v116, p_buf, v118);
    if (v120)
    {
      if ((v120 & 0x80000000) == 0)
        goto LABEL_231;
    }
    else if (v117 >= size)
    {
      goto LABEL_231;
    }
    v107 = v111[1];
  }
  while (v107);
  v110 = v111 + 1;
LABEL_225:
  v121 = (uint64_t *)operator new(0x40uLL);
  v122 = (std::string *)(v121 + 4);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v122, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v122->__r_.__value_.__l.__data_ = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    v121[6] = buf.__r_.__value_.__r.__words[2];
  }
  v121[7] = *(_QWORD *)group;
  *(_QWORD *)group = 0;
  *v121 = 0;
  v121[1] = 0;
  v121[2] = (uint64_t)v111;
  *v110 = v121;
  v123 = *(_QWORD *)v191[31];
  if (v123)
  {
    v191[31] = v123;
    v121 = *v110;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v191[32], v121);
  ++v191[33];
LABEL_231:
  if (*(_QWORD *)group)
  {
    dispatch_group_leave(*(dispatch_group_t *)group);
    if (*(_QWORD *)group)
      dispatch_release(*(dispatch_object_t *)group);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
LABEL_344:
  v171 = (std::__shared_weak_count *)v197;
  if (v197)
  {
    v172 = (unint64_t *)(v197 + 8);
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  v174 = v1[5];
  if (v174)
  {
    dispatch_group_leave(v174);
    v175 = v1[5];
    if (v175)
      dispatch_release(v175);
  }
  if (*((char *)v1 + 31) < 0)
    operator delete(*(void **)v194);
  operator delete(v1);
  v176 = (std::__shared_weak_count *)a1[2];
  if (v176)
  {
    v177 = (unint64_t *)&v176->__shared_owners_;
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  operator delete(a1);
}

void sub_1BF4541BC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, std::__shared_weak_count *a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,dispatch_group_t group,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  __break(1u);
}

void sub_1BF4542E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, void **a16)
{
  NSObject *v16;
  NSObject *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  __cxa_end_catch();
  pthread_mutex_unlock(&ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance);
  v16 = *(NSObject **)(a15 + 40);
  if (v16)
  {
    dispatch_group_leave(v16);
    v17 = *(NSObject **)(a15 + 40);
    if (v17)
      dispatch_release(v17);
  }
  if (*(char *)(a15 + 31) < 0)
    operator delete(*a16);
  operator delete((void *)a15);
  v18 = (std::__shared_weak_count *)a14[2];
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  operator delete(a14);
  JUMPOUT(0x1BF454458);
}

void sub_1BF454318()
{
  JUMPOUT(0x1BF454340);
}

void sub_1BF454324()
{
  JUMPOUT(0x1BF454340);
}

void sub_1BF45432C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    JUMPOUT(0x1BF45433CLL);
  JUMPOUT(0x1BF454340);
}

void sub_1BF454384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, void **a16)
{
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  NSObject *v19;
  NSObject *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;

  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = *(NSObject **)(a15 + 40);
  if (v19)
  {
    dispatch_group_leave(v19);
    v20 = *(NSObject **)(a15 + 40);
    if (v20)
      dispatch_release(v20);
  }
  if (*(char *)(a15 + 31) < 0)
    operator delete(*a16);
  operator delete((void *)a15);
  v21 = (std::__shared_weak_count *)a14[2];
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  operator delete(a14);
  JUMPOUT(0x1BF454458);
}

void sub_1BF4543C0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZZN12PowerManager5State20createPowerAssertionENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_6chrono8durationIxNS1_5ratioILl1ELl1000EEEEEENKUlvE_clEv_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  _QWORD *v11;
  std::string *v12;
  NSObject *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  std::string __p;
  uint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = std::__shared_weak_count::lock(v2);
    v24 = v4;
    if (v4)
    {
      v5 = *(_QWORD **)(a1 + 40);
      v23 = v5;
      if (!v5)
      {
        v6 = v4;
LABEL_23:
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        return;
      }
      v20 = v3;
      if (*(char *)(a1 + 79) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 56), *(_QWORD *)(a1 + 64));
      else
        __p = *(std::string *)(a1 + 56);
      v22 = *(_QWORD *)(a1 + 80);
      v7 = (std::__shared_weak_count *)v5[10];
      if (!v7 || (v8 = v5[9], (v9 = std::__shared_weak_count::lock(v7)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v10 = v9;
      v11 = operator new(0x28uLL);
      *v11 = v20;
      v12 = (std::string *)(v11 + 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v12, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v11[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      }
      v11[4] = v22;
      v13 = v5[11];
      v14 = (unint64_t *)&v10->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      v16 = operator new(0x18uLL);
      *v16 = v11;
      v16[1] = v8;
      v16[2] = v10;
      dispatch_async_f(v13, v16, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN12PowerManager5StateEE15execute_wrappedIZZZNS4_20createPowerAssertionENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS7_6chrono8durationIxNS7_5ratioILl1ELl1000EEEEEENKUlvE_clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNS7_10unique_ptrISL_NS7_14default_deleteISL_EEEEENUlPvE_8__invokeESU_);
      do
        v17 = __ldaxr(v14);
      while (__stlxr(v17 - 1, v14));
      if (v17)
      {
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_19;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_19:
          v6 = v24;
          if (!v24)
            return;
          goto LABEL_23;
        }
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      v6 = v24;
      if (!v24)
        return;
      goto LABEL_23;
    }
  }
}

void sub_1BF454638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::string *v6;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::string *)(a1 + 7);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 56);
    a1[9] = *(_QWORD *)(a2 + 72);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1BF4546C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2)
      return;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
LABEL_3:
    std::__shared_weak_count::__release_weak(v2);
}

void **std::unique_ptr<support::misc::Watchdog>::~unique_ptr[abi:ne180100](void **a1)
{
  void *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    TelephonyBasebandWatchdogStop();
    operator delete(v2);
  }
  return a1;
}

void std::__shared_ptr_pointer<ctu::power::assertion *,std::shared_ptr<ctu::power::assertion> ctu::SharedSynchronizable<ctu::power::assertion>::make_shared_ptr<ctu::power::assertion>(ctu::power::assertion*)::{lambda(ctu::power::assertion *)#1},std::allocator<ctu::power::assertion>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ctu::power::assertion *,std::shared_ptr<ctu::power::assertion> ctu::SharedSynchronizable<ctu::power::assertion>::make_shared_ptr<ctu::power::assertion>(ctu::power::assertion*)::{lambda(ctu::power::assertion *)#1},std::allocator<ctu::power::assertion>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 16), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<ctu::power::assertion> ctu::SharedSynchronizable<ctu::power::assertion>::make_shared_ptr<ctu::power::assertion>(ctu::power::assertion*)::{lambda(ctu::power::assertion*)#1}::operator() const(ctu::power::assertion*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<ctu::power::assertion *,std::shared_ptr<ctu::power::assertion> ctu::SharedSynchronizable<ctu::power::assertion>::make_shared_ptr<ctu::power::assertion>(ctu::power::assertion*)::{lambda(ctu::power::assertion *)#1},std::allocator<ctu::power::assertion>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableINS_5power9assertionEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableINS_5power9assertionEE15make_shared_ptrIS2_EENSt3__110shared"
                                "_ptrIT_EEPS7_EUlPS2_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableINS_5power9assertionEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableINS_5power9assertionEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void std::shared_ptr<ctu::power::assertion> ctu::SharedSynchronizable<ctu::power::assertion>::make_shared_ptr<ctu::power::assertion>(ctu::power::assertion*)::{lambda(ctu::power::assertion*)#1}::operator() const(ctu::power::assertion*)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>>>::destroy(*(char **)(a1 + 40));
    v2 = *(NSObject **)(a1 + 24);
    if (v2)
      dispatch_release(v2);
    v3 = *(NSObject **)(a1 + 16);
    if (v3)
      dispatch_release(v3);
    v4 = *(std::__shared_weak_count **)(a1 + 8);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    operator delete((void *)a1);
  }
}

void std::__tree<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>>>::destroy(char *a1)
{
  std::__shared_weak_count *v2;

  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = (std::__shared_weak_count *)*((_QWORD *)a1 + 8);
    if (v2)
      std::__shared_weak_count::__release_weak(v2);
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN12PowerManager5StateEE15execute_wrappedIZZZNS4_20createPowerAssertionENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS7_6chrono8durationIxNS7_5ratioILl1ELl1000EEEEEENKUlvE_clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNS7_10unique_ptrISL_NS7_14default_deleteISL_EEEEENUlPvE_8__invokeESU_(void ***a1)
{
  void **v2;
  _QWORD *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  _QWORD *v9;
  void **v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  xpc_object_t v19;
  xpc_object_t v20;
  NSObject *v21;
  size_t v22;
  void **v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  size_t v26;
  void **p_dst;
  uint64_t v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  uint64_t v37;
  const char *v38;
  xpc_object_t v39;
  xpc_object_t v40;
  const void *v41;
  size_t v42;
  size_t v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  const void **v49;
  const void *v50;
  uint64_t v51;
  uint64_t v52;
  void **v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  void **__dst;
  size_t v60;
  int64_t v61;
  std::string v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 __p;
  __int128 v69;
  unint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 buf;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v70 = 0xAAAAAAAAAAAAAAAALL;
  v80 = v4;
  v79 = v4;
  v78 = v4;
  v77 = v4;
  v76 = v4;
  v75 = v4;
  v74 = v4;
  v73 = v4;
  v72 = v4;
  v69 = v4;
  __p = v4;
  v66 = v4;
  v67 = v4;
  v64 = v4;
  v65 = v4;
  v5 = MEMORY[0x1E0DE4FE0];
  v6 = MEMORY[0x1E0DE4FE0] + 64;
  v71 = MEMORY[0x1E0DE4FE0] + 64;
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v63 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v63 + *(_QWORD *)(v63 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v63 + *(_QWORD *)(v63 - 24));
  std::ios_base::init(v8, &v64);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v63 = v5 + 24;
  v71 = v6;
  std::streambuf::basic_streambuf();
  *(_QWORD *)&v64 = MEMORY[0x1E0DE4FB8] + 16;
  __p = 0u;
  v69 = 0u;
  LODWORD(v70) = 16;
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"Power assertion watchdog fired for '", 36);
  v10 = v2 + 1;
  v11 = *((char *)v2 + 31);
  if (v11 >= 0)
    v12 = (uint64_t)(v2 + 1);
  else
    v12 = (uint64_t)v2[1];
  if (v11 >= 0)
    v13 = *((unsigned __int8 *)v2 + 31);
  else
    v13 = (uint64_t)v2[2];
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"'; Timeout (millisec): ",
    23);
  std::ostream::operator<<();
  if (*((char *)v2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v62, (const std::string::value_type *)v2[1], (std::string::size_type)v2[2]);
  }
  else
  {
    v15 = *(_OWORD *)v10;
    v62.__r_.__value_.__r.__words[2] = (std::string::size_type)v2[3];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v15;
  }
  PowerManager::State::releasePowerAssertion_sync(v3, (const void **)&v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (TelephonyUtilIsInternalBuild())
  {
    v16 = (std::__shared_weak_count *)v3[35];
    if (!v16)
      goto LABEL_93;
    v17 = std::__shared_weak_count::lock(v16);
    if (!v17)
      goto LABEL_93;
    v18 = v17;
    v57 = v3[34];
    if (!v57)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
LABEL_73:
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      goto LABEL_93;
    }
    v19 = xpc_dictionary_create(0, 0, 0);
    if (v19 || (v19 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8A86C](v19) == MEMORY[0x1E0C812F8])
      {
        xpc_retain(v19);
        v20 = v19;
      }
      else
      {
        v20 = xpc_null_create();
      }
    }
    else
    {
      v20 = xpc_null_create();
      v19 = 0;
    }
    xpc_release(v19);
    if ((v70 & 0x10) != 0)
    {
      v28 = *((_QWORD *)&v69 + 1);
      if (*((_QWORD *)&v69 + 1) < (unint64_t)v67)
      {
        *((_QWORD *)&v69 + 1) = v67;
        v28 = v67;
      }
      v29 = (const void *)*((_QWORD *)&v66 + 1);
      v26 = v28 - *((_QWORD *)&v66 + 1);
      if ((unint64_t)(v28 - *((_QWORD *)&v66 + 1)) > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_76;
    }
    else
    {
      if ((v70 & 8) == 0)
      {
        v26 = 0;
        HIBYTE(v61) = 0;
        p_dst = (void **)&__dst;
        goto LABEL_42;
      }
      v29 = (const void *)v65;
      v26 = v66 - v65;
      if ((_QWORD)v66 - (_QWORD)v65 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_76:
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v26 >= 0x17)
    {
      v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17)
        v30 = v26 | 7;
      v31 = v30 + 1;
      p_dst = (void **)operator new(v30 + 1);
      v60 = v26;
      v61 = v31 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v61) = v26;
      p_dst = (void **)&__dst;
      if (!v26)
      {
LABEL_42:
        *((_BYTE *)p_dst + v26) = 0;
        if (v61 >= 0)
          v32 = (const char *)&__dst;
        else
          v32 = (const char *)__dst;
        v33 = xpc_string_create(v32);
        if (!v33)
          v33 = xpc_null_create();
        xpc_dictionary_set_value(v20, (const char *)*MEMORY[0x1E0CFB930], v33);
        v34 = xpc_null_create();
        xpc_release(v33);
        xpc_release(v34);
        if (SHIBYTE(v61) < 0)
          operator delete(__dst);
        v35 = xpc_int64_create(0);
        if (!v35)
          v35 = xpc_null_create();
        xpc_dictionary_set_value(v20, (const char *)*MEMORY[0x1E0CFB010], v35);
        v36 = xpc_null_create();
        xpc_release(v35);
        xpc_release(v36);
        Timestamp::Timestamp((Timestamp *)&buf);
        Timestamp::asString(v37, 0, 9, &__dst);
        if (v61 >= 0)
          v38 = (const char *)&__dst;
        else
          v38 = (const char *)__dst;
        v39 = xpc_string_create(v38);
        if (!v39)
          v39 = xpc_null_create();
        xpc_dictionary_set_value(v20, (const char *)*MEMORY[0x1E0CFB370], v39);
        v40 = xpc_null_create();
        xpc_release(v39);
        xpc_release(v40);
        if (SHIBYTE(v61) < 0)
          operator delete(__dst);
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&buf, *((_QWORD **)&buf + 1));
        v41 = (const void *)*MEMORY[0x1E0CFB5F0];
        v42 = strlen((const char *)*MEMORY[0x1E0CFB5F0]);
        if (v42 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v43 = v42;
        if (v42 >= 0x17)
        {
          v45 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v42 | 7) != 0x17)
            v45 = v42 | 7;
          v46 = v45 + 1;
          v44 = (void **)operator new(v45 + 1);
          v60 = v43;
          v61 = v46 | 0x8000000000000000;
          __dst = v44;
        }
        else
        {
          HIBYTE(v61) = v42;
          v44 = (void **)&__dst;
          if (!v42)
            goto LABEL_66;
        }
        memmove(v44, v41, v43);
LABEL_66:
        *((_BYTE *)v44 + v43) = 0;
        *(_QWORD *)&buf = v20;
        if (v20)
          xpc_retain(v20);
        else
          *(_QWORD *)&buf = xpc_null_create();
        v58 = 0;
        ServiceManager::runCommand(v57, (uint64_t)&__dst, (void **)&buf, &v58);
        xpc_release((xpc_object_t)buf);
        *(_QWORD *)&buf = 0;
        if (SHIBYTE(v61) < 0)
          operator delete(__dst);
        xpc_release(v20);
        v47 = (unint64_t *)&v18->__shared_owners_;
        do
          v25 = __ldaxr(v47);
        while (__stlxr(v25 - 1, v47));
        goto LABEL_73;
      }
    }
    memmove(p_dst, v29, v26);
    goto LABEL_42;
  }
  v21 = v3[5];
  if (!os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
    goto LABEL_93;
  if ((v70 & 0x10) != 0)
  {
    v48 = *((_QWORD *)&v69 + 1);
    if (*((_QWORD *)&v69 + 1) < (unint64_t)v67)
    {
      *((_QWORD *)&v69 + 1) = v67;
      v48 = v67;
    }
    v49 = (const void **)&v66 + 1;
  }
  else
  {
    if ((v70 & 8) == 0)
    {
      v22 = 0;
      HIBYTE(v61) = 0;
      v23 = (void **)&__dst;
      goto LABEL_89;
    }
    v49 = (const void **)&v65;
    v48 = v66;
  }
  v50 = *v49;
  v22 = v48 - (_QWORD)*v49;
  if (v22 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v22 >= 0x17)
  {
    v51 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v51 = v22 | 7;
    v52 = v51 + 1;
    v23 = (void **)operator new(v51 + 1);
    v60 = v22;
    v61 = v52 | 0x8000000000000000;
    __dst = v23;
  }
  else
  {
    HIBYTE(v61) = v48 - *(_BYTE *)v49;
    v23 = (void **)&__dst;
    if (!v22)
      goto LABEL_89;
  }
  memmove(v23, v50, v22);
LABEL_89:
  *((_BYTE *)v23 + v22) = 0;
  v53 = (void **)&__dst;
  if (v61 < 0)
    v53 = __dst;
  LODWORD(buf) = 136315138;
  *(_QWORD *)((char *)&buf + 4) = v53;
  _os_log_fault_impl(&dword_1BF335000, v21, OS_LOG_TYPE_FAULT, "%s", (uint8_t *)&buf, 0xCu);
  if (SHIBYTE(v61) < 0)
    operator delete(__dst);
LABEL_93:
  v63 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&v63 + *(_QWORD *)(v63 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *(_QWORD *)&v64 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v69) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3B89E4C](&v71);
  if (*((char *)v2 + 31) < 0)
    operator delete(*v10);
  operator delete(v2);
  v54 = (std::__shared_weak_count *)a1[2];
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  operator delete(a1);
}

void sub_1BF455064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void PowerManager::State::releasePowerAssertion_sync(_QWORD *a1, const void **a2)
{
  const void **v2;
  uint64_t *v4;
  _QWORD *v5;
  char v6;
  const void *v7;
  size_t v8;
  _QWORD *v9;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  size_t v13;
  size_t v14;
  int v15;
  int v16;
  const void *v17;
  size_t v18;
  size_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  NSObject *v23;
  const void **v24;
  const char *v25;
  _QWORD *v26;
  BOOL v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  const void **v31;
  uint64_t *v32;
  char v33;
  const void *v34;
  size_t v35;
  _QWORD *v36;
  uint64_t *v37;
  int v38;
  const void *v39;
  size_t v40;
  size_t v41;
  int v42;
  int v43;
  const void *v44;
  size_t v45;
  size_t v46;
  int v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  NSObject *v54;
  uint64_t v55;
  NSObject *v56;
  const void *v57;
  int v58;
  const void **v59;
  uint64_t v60;

  v2 = a2;
  v60 = *MEMORY[0x1E0C80C00];
  v5 = a1 + 26;
  v4 = (uint64_t *)a1[26];
  if (!v4)
    goto LABEL_40;
  v6 = *((_BYTE *)a2 + 23);
  if (v6 >= 0)
    v7 = a2;
  else
    v7 = *a2;
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  v9 = a1 + 26;
  v10 = (uint64_t *)a1[26];
  do
  {
    while (1)
    {
      v11 = *((char *)v10 + 55);
      v12 = v11 >= 0 ? v10 + 4 : (uint64_t *)v10[4];
      v13 = v11 >= 0 ? *((unsigned __int8 *)v10 + 55) : v10[5];
      v14 = v8 >= v13 ? v13 : v8;
      v15 = memcmp(v12, v7, v14);
      if (v15)
        break;
      if (v13 >= v8)
        goto LABEL_23;
LABEL_9:
      v10 = (uint64_t *)v10[1];
      if (!v10)
        goto LABEL_24;
    }
    if (v15 < 0)
      goto LABEL_9;
LABEL_23:
    v9 = v10;
    v10 = (uint64_t *)*v10;
  }
  while (v10);
LABEL_24:
  if (v9 == v5)
    goto LABEL_40;
  v16 = *((char *)v9 + 55);
  if (v16 >= 0)
    v17 = v9 + 4;
  else
    v17 = (const void *)v9[4];
  if (v16 >= 0)
    v18 = *((unsigned __int8 *)v9 + 55);
  else
    v18 = v9[5];
  if (v18 >= v8)
    v19 = v8;
  else
    v19 = v18;
  v20 = memcmp(v7, v17, v19);
  if (v20)
  {
    if ((v20 & 0x80000000) == 0)
      goto LABEL_36;
LABEL_40:
    v23 = a1[5];
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      v24 = v2;
      if (*((char *)v2 + 23) < 0)
        v24 = (const void **)*v2;
      v58 = 136315138;
      v59 = v24;
      v25 = "#I Attempt to release non-existent power assertion '%s'";
LABEL_60:
      _os_log_impl(&dword_1BF335000, v23, OS_LOG_TYPE_DEFAULT, v25, (uint8_t *)&v58, 0xCu);
    }
  }
  else
  {
    if (v8 < v18)
      goto LABEL_40;
LABEL_36:
    v21 = (_QWORD *)v9[1];
    if (v21)
    {
      do
      {
        v22 = v21;
        v21 = (_QWORD *)*v21;
      }
      while (v21);
    }
    else
    {
      v26 = v9;
      do
      {
        v22 = (_QWORD *)v26[2];
        v27 = *v22 == (_QWORD)v26;
        v26 = v22;
      }
      while (!v27);
    }
    if ((_QWORD *)a1[25] == v9)
      a1[25] = v22;
    --a1[27];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v4, v9);
    v28 = (std::__shared_weak_count *)v9[8];
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (*((char *)v9 + 55) < 0)
      operator delete((void *)v9[4]);
    operator delete(v9);
    v23 = a1[5];
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      v31 = v2;
      if (*((char *)v2 + 23) < 0)
        v31 = (const void **)*v2;
      v58 = 136315138;
      v59 = v31;
      v25 = "#I Released power assertion '%s'";
      goto LABEL_60;
    }
  }
  v32 = (uint64_t *)a1[29];
  if (!v32)
    goto LABEL_117;
  v33 = *((_BYTE *)v2 + 23);
  if (v33 >= 0)
    v34 = v2;
  else
    v34 = *v2;
  if (v33 >= 0)
    v35 = *((unsigned __int8 *)v2 + 23);
  else
    v35 = (size_t)v2[1];
  v36 = a1 + 29;
  v37 = (uint64_t *)a1[29];
  while (2)
  {
    while (2)
    {
      v38 = *((char *)v37 + 55);
      if (v38 >= 0)
        v39 = v37 + 4;
      else
        v39 = (const void *)v37[4];
      if (v38 >= 0)
        v40 = *((unsigned __int8 *)v37 + 55);
      else
        v40 = v37[5];
      if (v35 >= v40)
        v41 = v40;
      else
        v41 = v35;
      v42 = memcmp(v39, v34, v41);
      if (v42)
      {
        if ((v42 & 0x80000000) == 0)
          break;
        goto LABEL_69;
      }
      if (v40 < v35)
      {
LABEL_69:
        v37 = (uint64_t *)v37[1];
        if (!v37)
          goto LABEL_84;
        continue;
      }
      break;
    }
    v36 = v37;
    v37 = (uint64_t *)*v37;
    if (v37)
      continue;
    break;
  }
LABEL_84:
  if (v36 != a1 + 29)
  {
    v43 = *((char *)v36 + 55);
    if (v43 >= 0)
      v44 = v36 + 4;
    else
      v44 = (const void *)v36[4];
    if (v43 >= 0)
      v45 = *((unsigned __int8 *)v36 + 55);
    else
      v45 = v36[5];
    if (v45 >= v35)
      v46 = v35;
    else
      v46 = v45;
    v47 = memcmp(v34, v44, v46);
    if (v47)
    {
      if (v47 < 0)
        goto LABEL_117;
LABEL_98:
      v48 = (_QWORD *)v36[1];
      if (v48)
      {
        do
        {
          v49 = v48;
          v48 = (_QWORD *)*v48;
        }
        while (v48);
      }
      else
      {
        v50 = v36;
        do
        {
          v49 = (_QWORD *)v50[2];
          v27 = *v49 == (_QWORD)v50;
          v50 = v49;
        }
        while (!v27);
      }
      if ((_QWORD *)a1[28] == v36)
        a1[28] = v49;
      --a1[30];
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v32, v36);
      v51 = (std::__shared_weak_count *)v36[8];
      if (v51)
      {
        v52 = (unint64_t *)&v51->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      if (*((char *)v36 + 55) < 0)
        operator delete((void *)v36[4]);
      operator delete(v36);
      v54 = a1[5];
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)v2 + 23) < 0)
          v2 = (const void **)*v2;
        v58 = 136315138;
        v59 = v2;
        _os_log_impl(&dword_1BF335000, v54, OS_LOG_TYPE_DEFAULT, "#I Clear watchdog timer for power assertion '%s'", (uint8_t *)&v58, 0xCu);
      }
    }
    else if (v35 >= v45)
    {
      goto LABEL_98;
    }
  }
LABEL_117:
  if (!a1[27])
  {
    *(_BYTE *)(a1[17] + 88) = 0;
    v55 = a1[20];
    if (v55)
    {
      v56 = a1[5];
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v58) = 0;
        _os_log_impl(&dword_1BF335000, v56, OS_LOG_TYPE_DEFAULT, "#I No more assertions held, acknowledging previous notification", (uint8_t *)&v58, 2u);
        v55 = a1[20];
      }
      (*(void (**)(uint64_t, uint64_t))(v55 + 16))(v55, 1);
      v57 = (const void *)a1[20];
      a1[20] = 0;
      if (v57)
        _Block_release(v57);
    }
  }
}

void sub_1BF455750(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<support::misc::Watchdog  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<support::misc::Watchdog  *>::__on_zero_shared(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 24);
  if (v1)
  {
    TelephonyBasebandWatchdogStop();
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<support::misc::Watchdog  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF544630)
    return a1 + 24;
  if (((v3 & 0x80000001BF544630 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF544630))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF544630 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>(PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1},std::default_delete<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::string v9;

  v2 = *(_QWORD **)a1;
  v3 = **(_QWORD ***)a1;
  v4 = (void **)(*(_QWORD *)a1 + 8);
  if (*(char *)(*(_QWORD *)a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v9, (const std::string::value_type *)v2[1], v2[2]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v9.__r_.__value_.__r.__words[2] = v2[3];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v5;
  }
  PowerManager::State::releasePowerAssertion_sync(v3, (const void **)&v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((*((char *)v2 + 31) & 0x80000000) == 0)
    {
LABEL_6:
      operator delete(v2);
      v6 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
      if (!v6)
        goto LABEL_7;
      goto LABEL_11;
    }
  }
  else if ((*((char *)v2 + 31) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*v4);
  operator delete(v2);
  v6 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (!v6)
    goto LABEL_7;
LABEL_11:
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    operator delete(a1);
    return;
  }
LABEL_7:
  operator delete(a1);
}

void sub_1BF455934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _QWORD *v16;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  std::unique_ptr<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1},std::default_delete<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](&a10);
  v18 = (std::__shared_weak_count *)v16[2];
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1},std::default_delete<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 31) < 0)
      operator delete(*(void **)(v2 + 8));
    operator delete((void *)v2);
  }
  return a1;
}

void ___ZN12PowerManager5State10initializeEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  __int128 *p_dst;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  const void *v28;
  const void *v29;
  size_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  NSObject *v37;
  const void *v38;
  size_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  NSObject *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  void *v51;
  NSObject *v52;
  void *v53;
  const void *v54;
  NSObject *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD v62[5];
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  _QWORD v66[6];
  std::__shared_weak_count *v67;
  void *v68;
  dispatch_object_t v69;
  void *v70[2];
  unint64_t v71;
  _QWORD v72[6];
  std::__shared_weak_count *v73;
  void *v74;
  dispatch_object_t object;
  void *__p[2];
  unint64_t v77;
  const void *v78;
  void *v79[2];
  char v80;
  _QWORD aBlock[6];
  std::__shared_weak_count *v82;
  void *v83;
  __int128 __dst;
  unint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v2 || (v3 = *(_QWORD *)(v1 + 72), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
    v86 = 0;
    v87 = 0;
    v10 = *(std::__shared_weak_count **)(v1 + 280);
    if (!v10)
      goto LABEL_109;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
    v86 = 0;
    v87 = 0;
    v10 = *(std::__shared_weak_count **)(v1 + 280);
    if (!v10)
      goto LABEL_109;
  }
  v87 = std::__shared_weak_count::lock(v10);
  if (!v87)
    goto LABEL_114;
  v11 = *(_QWORD *)(v1 + 272);
  v86 = v11;
  if (v11)
  {
    v12 = abm::kCommandSetPowerDownMessageList[0];
    v13 = strlen(abm::kCommandSetPowerDownMessageList[0]);
    if (v13 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v16 = v13 | 7;
      v17 = v16 + 1;
      p_dst = (__int128 *)operator new(v16 + 1);
      *((_QWORD *)&__dst + 1) = v14;
      v85 = v17 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v85) = v13;
      p_dst = &__dst;
      if (!v13)
        goto LABEL_21;
    }
    memmove(p_dst, v12, v14);
LABEL_21:
    *((_BYTE *)p_dst + v14) = 0;
    v18 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN12PowerManager5State10initializeEv_block_invoke_2;
    aBlock[3] = &__block_descriptor_tmp_24_1;
    aBlock[4] = v1;
    aBlock[5] = v3;
    v82 = v5;
    do
      v19 = __ldxr(p_shared_weak_owners);
    while (__stxr(v19 + 1, p_shared_weak_owners));
    v20 = _Block_copy(aBlock);
    v83 = v20;
    ServiceManager::registerCommandHandler(v11, (uint64_t)&__dst, &v83);
    if (v20)
      _Block_release(v20);
    if (SHIBYTE(v85) < 0)
      operator delete((void *)__dst);
    v80 = 9;
    v78 = 0;
    strcpy((char *)v79, "power.mgr");
    AppleBasebandManager::create();
    v21 = __dst;
    __dst = 0uLL;
    v22 = *(std::__shared_weak_count **)(v1 + 112);
    *(_OWORD *)(v1 + 104) = v21;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
    if (!*((_QWORD *)&__dst + 1))
      goto LABEL_36;
    v26 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      v28 = v78;
      if (!v78)
      {
LABEL_38:
        if (v80 < 0)
          operator delete(v79[0]);
        v29 = (const void *)*MEMORY[0x1E0CFB9A8];
        v30 = strlen((const char *)*MEMORY[0x1E0CFB9A8]);
        if (v30 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v31 = (void *)v30;
        if (v30 >= 0x17)
        {
          v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v30 | 7) != 0x17)
            v33 = v30 | 7;
          v34 = v33 + 1;
          v32 = operator new(v33 + 1);
          __p[1] = v31;
          v77 = v34 | 0x8000000000000000;
          __p[0] = v32;
        }
        else
        {
          HIBYTE(v77) = v30;
          v32 = __p;
          if (!v30)
            goto LABEL_48;
        }
        memmove(v32, v29, (size_t)v31);
LABEL_48:
        *((_BYTE *)v31 + (_QWORD)v32) = 0;
        v72[0] = v18;
        v72[1] = 1174405120;
        v72[2] = ___ZN12PowerManager5State10initializeEv_block_invoke_25;
        v72[3] = &__block_descriptor_tmp_27_4;
        v72[4] = v1;
        v72[5] = v3;
        v73 = v5;
        do
          v35 = __ldxr(p_shared_weak_owners);
        while (__stxr(v35 + 1, p_shared_weak_owners));
        v36 = _Block_copy(v72);
        v37 = *(NSObject **)(v1 + 88);
        if (v37)
          dispatch_retain(*(dispatch_object_t *)(v1 + 88));
        v74 = v36;
        object = v37;
        AppleBasebandManager::setEventHandler();
        if (object)
          dispatch_release(object);
        if (v74)
          _Block_release(v74);
        if (SHIBYTE(v77) < 0)
          operator delete(__p[0]);
        v38 = (const void *)*MEMORY[0x1E0CFB9B0];
        v39 = strlen((const char *)*MEMORY[0x1E0CFB9B0]);
        if (v39 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v40 = (void *)v39;
        if (v39 >= 0x17)
        {
          v42 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v39 | 7) != 0x17)
            v42 = v39 | 7;
          v43 = v42 + 1;
          v41 = operator new(v42 + 1);
          v70[1] = v40;
          v71 = v43 | 0x8000000000000000;
          v70[0] = v41;
        }
        else
        {
          HIBYTE(v71) = v39;
          v41 = v70;
          if (!v39)
            goto LABEL_66;
        }
        memmove(v41, v38, (size_t)v40);
LABEL_66:
        *((_BYTE *)v40 + (_QWORD)v41) = 0;
        v66[0] = v18;
        v66[1] = 1174405120;
        v66[2] = ___ZN12PowerManager5State10initializeEv_block_invoke_28;
        v66[3] = &__block_descriptor_tmp_29_0;
        v66[4] = v1;
        v66[5] = v3;
        v67 = v5;
        do
          v44 = __ldxr(p_shared_weak_owners);
        while (__stxr(v44 + 1, p_shared_weak_owners));
        v45 = _Block_copy(v66);
        v46 = *(NSObject **)(v1 + 88);
        if (v46)
          dispatch_retain(*(dispatch_object_t *)(v1 + 88));
        v68 = v45;
        v69 = v46;
        AppleBasebandManager::setEventHandler();
        if (v69)
          dispatch_release(v69);
        if (v68)
          _Block_release(v68);
        if (SHIBYTE(v71) < 0)
          operator delete(v70[0]);
        AppleBasebandManager::eventsOn(*(AppleBasebandManager **)(v1 + 104));
        v47 = *(_QWORD *)(v1 + 136);
        v62[0] = v18;
        v62[1] = 1174405120;
        v62[2] = ___ZN12PowerManager5State10initializeEv_block_invoke_30;
        v62[3] = &__block_descriptor_tmp_32_3;
        v62[4] = v3;
        v63 = v5;
        do
          v48 = __ldxr(p_shared_weak_owners);
        while (__stxr(v48 + 1, p_shared_weak_owners));
        v64 = v86;
        v65 = v87;
        if (v87)
        {
          v49 = (unint64_t *)&v87->__shared_owners_;
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
        }
        v51 = _Block_copy(v62);
        v52 = *(NSObject **)(v1 + 88);
        if (v52)
          dispatch_retain(*(dispatch_object_t *)(v1 + 88));
        if (v51)
        {
          v53 = _Block_copy(v51);
          v54 = *(const void **)(v47 + 104);
          *(_QWORD *)(v47 + 104) = v53;
          if (!v54)
            goto LABEL_88;
        }
        else
        {
          v54 = *(const void **)(v47 + 104);
          *(_QWORD *)(v47 + 104) = 0;
          if (!v54)
          {
LABEL_88:
            if (v52)
              dispatch_retain(v52);
            v55 = *(NSObject **)(v47 + 112);
            *(_QWORD *)(v47 + 112) = v52;
            if (v55)
              dispatch_release(v55);
            if (v52)
              dispatch_release(v52);
            if (v51)
              _Block_release(v51);
            v56 = v65;
            if (v65)
            {
              v57 = (unint64_t *)&v65->__shared_owners_;
              do
                v58 = __ldaxr(v57);
              while (__stlxr(v58 - 1, v57));
              if (!v58)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
            if (v63)
              std::__shared_weak_count::__release_weak(v63);
            if (v67)
              std::__shared_weak_count::__release_weak(v67);
            if (v73)
              std::__shared_weak_count::__release_weak(v73);
            if (v82)
              std::__shared_weak_count::__release_weak(v82);
            goto LABEL_109;
          }
        }
        _Block_release(v54);
        goto LABEL_88;
      }
    }
    else
    {
LABEL_36:
      v28 = v78;
      if (!v78)
        goto LABEL_38;
    }
    CFRelease(v28);
    goto LABEL_38;
  }
LABEL_109:
  v59 = v87;
  if (v87)
  {
    v60 = (unint64_t *)&v87->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
LABEL_114:
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF456090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v49;

  if (a23)
    std::__shared_weak_count::__release_weak(a23);
  if (a38)
    std::__shared_weak_count::__release_weak(a38);
  v49 = *(std::__shared_weak_count **)(v47 - 160);
  if (v49)
  {
    std::__shared_weak_count::__release_weak(v49);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v47 - 120);
    std::__shared_weak_count::__release_weak(v46);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v47 - 120);
  std::__shared_weak_count::__release_weak(v46);
  _Unwind_Resume(a1);
}

void ___ZN12PowerManager5State10initializeEv_block_invoke_2(_QWORD *a1, void **a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  void *v10;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  xpc_object_t object;
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 1174405120;
      v14[2] = ___ZN12PowerManager5State10initializeEv_block_invoke_3;
      v14[3] = &__block_descriptor_tmp_22_4;
      v10 = *a2;
      v14[4] = v7;
      object = v10;
      if (v10)
      {
        xpc_retain(v10);
        v11 = *a3;
        if (!*a3)
          goto LABEL_9;
      }
      else
      {
        object = xpc_null_create();
        v11 = *a3;
        if (!*a3)
        {
LABEL_9:
          aBlock = v11;
          ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped((uint64_t *)(v7 + 72), (uint64_t)v14);
          if (aBlock)
            _Block_release(aBlock);
          xpc_release(object);
          object = 0;
          goto LABEL_12;
        }
      }
      v11 = _Block_copy(v11);
      goto LABEL_9;
    }
  }
}

void ___ZN12PowerManager5State10initializeEv_block_invoke_3(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  xpc_object_t v5;
  uint64_t v6;
  xpc_object_t v7;
  xpc_object_t object;
  xpc_object_t v9;

  v3 = a1[4];
  v2 = (void *)a1[5];
  v4 = *(_QWORD *)(v3 + 136);
  object = v2;
  if (v2)
    xpc_retain(v2);
  else
    object = xpc_null_create();
  PowerStats::setPowerdownMessage(v4, &object);
  xpc_release(object);
  object = 0;
  v5 = xpc_null_create();
  v6 = a1[6];
  v9 = v5;
  v7 = xpc_null_create();
  (*(void (**)(uint64_t, _QWORD, xpc_object_t *))(v6 + 16))(v6, 0, &v9);
  xpc_release(v9);
  xpc_release(v7);
}

void sub_1BF4563A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t object)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void ___ZN12PowerManager5State10initializeEv_block_invoke_25(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
        PowerStats::dumpState(*(os_log_t **)(v3 + 136));
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF456484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN12PowerManager5State10initializeEv_block_invoke_28(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  os_log_t *v9;
  _QWORD *v10;
  NSObject *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  NSObject *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint8_t buf[4];
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (v6)
      {
        v9 = (os_log_t *)v3[17];
        if (v9)
          PowerStats::dumpState(v9);
        v10 = (_QWORD *)v3[25];
        if (v10 != v3 + 26)
        {
          do
          {
            v11 = v3[5];
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              v12 = v10 + 4;
              if (*((char *)v10 + 55) < 0)
                v12 = (_QWORD *)*v12;
              *(_DWORD *)buf = 136315138;
              v22 = v12;
              _os_log_impl(&dword_1BF335000, v11, OS_LOG_TYPE_DEFAULT, "#I Pending power assertion '%s'", buf, 0xCu);
            }
            v13 = (_QWORD *)v10[1];
            if (v13)
            {
              do
              {
                v14 = v13;
                v13 = (_QWORD *)*v13;
              }
              while (v13);
            }
            else
            {
              do
              {
                v14 = (_QWORD *)v10[2];
                v15 = *v14 == (_QWORD)v10;
                v10 = v14;
              }
              while (!v15);
            }
            v10 = v14;
          }
          while (v14 != v3 + 26);
        }
        v16 = (_QWORD *)v3[31];
        if (v16 != v3 + 32)
        {
          do
          {
            v17 = v3[5];
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            {
              v18 = v16 + 4;
              if (*((char *)v16 + 55) < 0)
                v18 = (_QWORD *)*v18;
              *(_DWORD *)buf = 136315138;
              v22 = v18;
              _os_log_impl(&dword_1BF335000, v17, OS_LOG_TYPE_DEFAULT, "#I Deferred work due to sleep '%s'", buf, 0xCu);
            }
            v19 = (_QWORD *)v16[1];
            if (v19)
            {
              do
              {
                v20 = v19;
                v19 = (_QWORD *)*v19;
              }
              while (v19);
            }
            else
            {
              do
              {
                v20 = (_QWORD *)v16[2];
                v15 = *v20 == (_QWORD)v16;
                v16 = v20;
              }
              while (!v15);
            }
            v16 = v20;
          }
          while (v20 != v3 + 32);
        }
      }
    }
  }
}

void ___ZN12PowerManager5State10initializeEv_block_invoke_30(_QWORD *a1, xpc_object_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  const void *v8;
  size_t v9;
  void *v10;
  void **v11;
  xpc_object_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v17;
  void *v18;
  void *__dst[2];
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v3 = (std::__shared_weak_count *)a1[5];
  if (!v3)
    return;
  v5 = std::__shared_weak_count::lock(v3);
  v22 = v5;
  if (!v5)
    return;
  v6 = v5;
  v21 = a1[4];
  if (!v21 || (v7 = a1[6]) == 0)
  {
LABEL_18:
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    return;
  }
  v8 = (const void *)*MEMORY[0x1E0CFB5E0];
  v9 = strlen((const char *)*MEMORY[0x1E0CFB5E0]);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v13 = v9 | 7;
    v14 = v13 + 1;
    v11 = (void **)operator new(v13 + 1);
    __dst[1] = v10;
    v20 = v14 | 0x8000000000000000;
    __dst[0] = v11;
LABEL_13:
    memmove(v11, v8, (size_t)v10);
    *((_BYTE *)v10 + (_QWORD)v11) = 0;
    v12 = *a2;
    v18 = v12;
    if (v12)
      goto LABEL_9;
    goto LABEL_14;
  }
  HIBYTE(v20) = v9;
  v11 = __dst;
  if (v9)
    goto LABEL_13;
  LOBYTE(__dst[0]) = 0;
  v12 = *a2;
  v18 = v12;
  if (v12)
  {
LABEL_9:
    xpc_retain(v12);
    goto LABEL_15;
  }
LABEL_14:
  v12 = xpc_null_create();
  v18 = v12;
LABEL_15:
  v17 = 0;
  ServiceManager::runCommand(v7, (uint64_t)__dst, &v18, &v17);
  xpc_release(v12);
  v18 = 0;
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
  v6 = v22;
  if (v22)
    goto LABEL_18;
}

void sub_1BF45686C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  xpc_release(v18);
  if (a17 < 0)
  {
    operator delete(__p);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_32c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE48c42_ZTSNSt3__110shared_ptrI14ServiceManagerEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[7];
  result[6] = a2[6];
  result[7] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void __destroy_helper_block_e8_32c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE48c42_ZTSNSt3__110shared_ptrI14ServiceManagerEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void ___ZN12PowerManager5State8shutdownEv_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = (std::__shared_weak_count *)v1[10];
  if (!v2 || (v3 = v1[9], (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = operator new(8uLL);
  *v6 = v1;
  v7 = v1[11];
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = operator new(0x18uLL);
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1}>(PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
    v12 = (std::__shared_weak_count *)v1[14];
    v1[13] = 0;
    v1[14] = 0;
    if (!v12)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v12 = (std::__shared_weak_count *)v1[14];
    v1[13] = 0;
    v1[14] = 0;
    if (!v12)
      return;
  }
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1}>(PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  NSObject *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  const void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint8_t buf[4];
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  v4 = (_QWORD *)v3[25];
  v5 = v3 + 26;
  if (v4 != v3 + 26)
  {
    do
    {
      v6 = v3[5];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v7 = v4 + 4;
        if (*((char *)v4 + 55) < 0)
          v7 = (_QWORD *)*v7;
        *(_DWORD *)buf = 136315138;
        v19 = v7;
        _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, "#I Forcefully releasing power assertion '%s'", buf, 0xCu);
      }
      v8 = (_QWORD *)v4[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v4[2];
          v10 = *v9 == (_QWORD)v4;
          v4 = v9;
        }
        while (!v10);
      }
      v4 = v9;
    }
    while (v9 != v5);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(v3[26]);
  v11 = v3[29];
  v3[25] = v5;
  v3[26] = 0;
  v3[27] = 0;
  std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(v11);
  v3[28] = v3 + 29;
  v3[29] = 0;
  v3[30] = 0;
  *(_BYTE *)(v3[17] + 88) = 0;
  v12 = v3[20];
  if (v12)
  {
    v13 = v3[5];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF335000, v13, OS_LOG_TYPE_DEFAULT, "#I No more assertions held, acknowledging previous notification", buf, 2u);
      v12 = v3[20];
    }
    (*(void (**)(uint64_t, uint64_t))(v12 + 16))(v12, 1);
    v14 = (const void *)v3[20];
    v3[20] = 0;
    if (v14)
      _Block_release(v14);
  }
  operator delete(v2);
  v15 = (std::__shared_weak_count *)a1[2];
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator delete(a1);
}

void sub_1BF456C94(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<PowerManager *,std::shared_ptr<PowerManager>::__shared_ptr_default_delete<PowerManager,PowerManager>,std::allocator<PowerManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<PowerManager *,std::shared_ptr<PowerManager>::__shared_ptr_default_delete<PowerManager,PowerManager>,std::allocator<PowerManager>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<PowerManager *,std::shared_ptr<PowerManager>::__shared_ptr_default_delete<PowerManager,PowerManager>,std::allocator<PowerManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF5446E0)
    return a1 + 24;
  if (((v3 & 0x80000001BF5446E0 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF5446E0))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF5446E0 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t __cxx_global_var_init_13()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1BF335000);
  }
  return result;
}

void LogDumpDB::LogDumpDB(LogDumpDB *this)
{
  ctu::OsLogLogger::OsLogLogger((LogDumpDB *)((char *)this + 8), "com.apple.telephony.abm", "Log Dump History");
  *(_QWORD *)this = &off_1E7906E20;
  *((_DWORD *)this + 4) = 10;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  LogDumpDB::init(this);
}

{
  ctu::OsLogLogger::OsLogLogger((LogDumpDB *)((char *)this + 8), "com.apple.telephony.abm", "Log Dump History");
  *(_QWORD *)this = &off_1E7906E20;
  *((_DWORD *)this + 4) = 10;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  LogDumpDB::init(this);
}

void sub_1BF456E4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  std::vector<ResetInfo>::~vector[abi:ne180100](v2);
  MEMORY[0x1C3B89240](v1);
  _Unwind_Resume(a1);
}

void LogDumpDB::init(LogDumpDB *this)
{
  uint64_t v2;
  _QWORD *v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  const void *v16;
  CFIndex v17;
  const char *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  const void *ValueAtIndex;
  const void *v23;
  CFTypeID v24;
  __int128 v25;
  std::string *v26;
  std::string::value_type *v27;
  char *v28;
  uint64_t Count;
  std::string v30;
  std::string v31;
  _BYTE __p[32];
  __int128 v33;
  void *v34[2];
  __int128 v35;
  void *v36[2];
  __int128 v37;
  std::string v38;
  void *v39[3];
  _BYTE v40[24];
  __int128 v41[3];
  _QWORD v42[2];
  const void *v43;
  const void *v44;
  const void *v45;
  _QWORD v46[3];

  v45 = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v2 = off_1ED70FDE8;
  if (!off_1ED70FDE8)
  {
    v3 = operator new(0x30uLL);
    MEMORY[0x1C3B893B4](v3, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x1E0C9B260]);
    v3[3] = 0;
    v3[4] = 0;
    *((_DWORD *)v3 + 10) = 0;
    std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(__p, (uint64_t)v3);
    v4 = *(_OWORD *)__p;
    *(_QWORD *)__p = 0;
    *(_QWORD *)&__p[8] = 0;
    v5 = (std::__shared_weak_count *)*(&off_1ED70FDE8 + 1);
    off_1ED70FDE8 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = *(std::__shared_weak_count **)&__p[8];
    if (*(_QWORD *)&__p[8])
    {
      v9 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v2 = off_1ED70FDE8;
  }
  v11 = (std::__shared_weak_count *)*(&off_1ED70FDE8 + 1);
  if (*(&off_1ED70FDE8 + 1))
  {
    v12 = (unint64_t *)(*(&off_1ED70FDE8 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  __p[23] = 16;
  strcpy(__p, "Log Dump History");
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 40));
  Preferences::getPreference<__CFArray const*>((uint64_t (***)(_QWORD, uint64_t))v2, __p, &v45);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 40));
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (!v11)
    goto LABEL_22;
  v14 = (unint64_t *)&v11->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v16 = v45;
    v44 = v45;
    if (!v45)
      goto LABEL_78;
  }
  else
  {
LABEL_22:
    v16 = v45;
    v44 = v45;
    if (!v45)
      goto LABEL_78;
  }
  CFRetain(v16);
  if (ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get)
  {
    Count = CFArrayGetCount((CFArrayRef)v16);
    if (Count)
    {
      v17 = 0;
      v28 = (char *)*MEMORY[0x1E0CFB370];
      v18 = (const char *)*MEMORY[0x1E0CFB930];
      v19 = (const char *)*MEMORY[0x1E0CFB538];
      v20 = (const char *)*MEMORY[0x1E0CFB8D0];
      v21 = (const char *)*MEMORY[0x1E0CFB770];
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v16, v17);
        v23 = ValueAtIndex;
        if (ValueAtIndex && (v24 = CFGetTypeID(ValueAtIndex), v24 == CFDictionaryGetTypeID()))
        {
          v43 = v23;
          CFRetain(v23);
        }
        else
        {
          v23 = 0;
          v43 = 0;
        }
        v42[0] = 0xAAAAAAAAAAAAAAAALL;
        v42[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v42, (const __CFDictionary *)v23);
        memset((char *)&v41[1] + 8, 170, 24);
        memset(__p, 0, 24);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v41, v28);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C3B8936C](v41);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        memset(v41, 170, 24);
        memset(__p, 0, 24);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v40, v18);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C3B8936C](v40);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        memset(v40, 170, sizeof(v40));
        memset(__p, 0, 24);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v39, v19);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C3B8936C](v39);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        memset(v39, 170, sizeof(v39));
        memset(__p, 0, 24);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v38, v20);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C3B8936C](&v38);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        memset(&v38, 170, sizeof(v38));
        memset(__p, 0, 24);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v46, v21);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C3B8936C](v46);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        *(_QWORD *)&v25 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)v36 = v25;
        v37 = v25;
        *(_OWORD *)v34 = v25;
        v35 = v25;
        *(_OWORD *)&__p[16] = v25;
        v33 = v25;
        *(_OWORD *)__p = v25;
        if (SHIBYTE(v41[2]) < 0)
          std::string::__init_copy_ctor_external(&v31, *((const std::string::value_type **)&v41[1] + 1), *(std::string::size_type *)&v41[2]);
        else
          v31 = *(std::string *)((char *)&v41[1] + 8);
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v30, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
        else
          v30 = v38;
        ResetInfo::ResetInfo((std::string *)__p, (__int128 *)v40, (__int128 *)v39, v41, (uint64_t)&v31, 7, (__int128 *)&v30);
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v30.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_52:
            v26 = (std::string *)*((_QWORD *)this + 4);
            if ((unint64_t)v26 < *((_QWORD *)this + 5))
              goto LABEL_53;
            goto LABEL_56;
          }
        }
        else if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_52;
        }
        operator delete(v31.__r_.__value_.__l.__data_);
        v26 = (std::string *)*((_QWORD *)this + 4);
        if ((unint64_t)v26 < *((_QWORD *)this + 5))
        {
LABEL_53:
          ResetInfo::ResetInfo(v26, (__int128 *)__p);
          v27 = &v26[4].__r_.__value_.__s.__data_[16];
          *((_QWORD *)this + 4) = (char *)v26 + 112;
          goto LABEL_57;
        }
LABEL_56:
        v27 = std::vector<ResetInfo>::__push_back_slow_path<ResetInfo const&>((_QWORD *)this + 3, (__int128 *)__p);
LABEL_57:
        *((_QWORD *)this + 4) = v27;
        if (SHIBYTE(v37) < 0)
        {
          operator delete(v36[1]);
          if ((SBYTE7(v35) & 0x80000000) == 0)
          {
LABEL_59:
            if ((SHIBYTE(v33) & 0x80000000) == 0)
              goto LABEL_60;
            goto LABEL_70;
          }
        }
        else if ((SBYTE7(v35) & 0x80000000) == 0)
        {
          goto LABEL_59;
        }
        operator delete(v34[0]);
        if ((SHIBYTE(v33) & 0x80000000) == 0)
        {
LABEL_60:
          if ((__p[23] & 0x80000000) == 0)
            goto LABEL_61;
          goto LABEL_71;
        }
LABEL_70:
        operator delete(*(void **)&__p[24]);
        if ((__p[23] & 0x80000000) == 0)
        {
LABEL_61:
          if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_62;
          goto LABEL_72;
        }
LABEL_71:
        operator delete(*(void **)__p);
        if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_62:
          if ((SHIBYTE(v39[2]) & 0x80000000) == 0)
            goto LABEL_63;
          goto LABEL_73;
        }
LABEL_72:
        operator delete(v38.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v39[2]) & 0x80000000) == 0)
        {
LABEL_63:
          if ((v40[23] & 0x80000000) == 0)
            goto LABEL_64;
          goto LABEL_74;
        }
LABEL_73:
        operator delete(v39[0]);
        if ((v40[23] & 0x80000000) == 0)
        {
LABEL_64:
          if ((SBYTE7(v41[1]) & 0x80000000) == 0)
            goto LABEL_65;
          goto LABEL_75;
        }
LABEL_74:
        operator delete(*(void **)v40);
        if ((SBYTE7(v41[1]) & 0x80000000) == 0)
        {
LABEL_65:
          if ((SHIBYTE(v41[2]) & 0x80000000) == 0)
            goto LABEL_66;
          goto LABEL_76;
        }
LABEL_75:
        operator delete(*(void **)&v41[0]);
        if ((SHIBYTE(v41[2]) & 0x80000000) == 0)
        {
LABEL_66:
          MEMORY[0x1C3B893A8](v42);
          if (!v23)
            goto LABEL_29;
LABEL_77:
          CFRelease(v23);
          goto LABEL_29;
        }
LABEL_76:
        operator delete(*((void **)&v41[1] + 1));
        MEMORY[0x1C3B893A8](v42);
        if (v23)
          goto LABEL_77;
LABEL_29:
        ++v17;
      }
      while (Count != v17);
    }
  }
LABEL_78:
  if (v16)
    CFRelease(v16);
}

void sub_1BF4574AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF457500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t v56;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((a50 & 0x80000000) == 0)
    {
LABEL_5:
      if (a56 < 0)
        operator delete(a51);
      if (*(char *)(v56 - 193) < 0)
        operator delete(*(void **)(v56 - 216));
      if (*(char *)(v56 - 169) < 0)
        operator delete(*(void **)(v56 - 192));
      if (*(char *)(v56 - 145) < 0)
        operator delete(*(void **)(v56 - 168));
      MEMORY[0x1C3B893A8](v56 - 144);
      ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v56 - 128));
      ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v56 - 120));
      _Unwind_Resume(a1);
    }
  }
  else if ((a50 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a45);
  goto LABEL_5;
}

void **std::vector<ResetInfo>::~vector[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_15:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if ((*((char *)v3 - 41) & 0x80000000) == 0)
        {
LABEL_7:
          if ((*((char *)v3 - 65) & 0x80000000) == 0)
            goto LABEL_8;
          goto LABEL_12;
        }
      }
      else if ((*((char *)v3 - 41) & 0x80000000) == 0)
      {
        goto LABEL_7;
      }
      operator delete(*(v3 - 8));
      if ((*((char *)v3 - 65) & 0x80000000) == 0)
      {
LABEL_8:
        if (*((char *)v3 - 89) < 0)
          goto LABEL_13;
        goto LABEL_4;
      }
LABEL_12:
      operator delete(*(v3 - 11));
      if (*((char *)v3 - 89) < 0)
LABEL_13:
        operator delete(*(v3 - 14));
LABEL_4:
      v3 -= 14;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_15;
      }
    }
  }
  return a1;
}

void sub_1BF457804(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void **v6;
  void **v7;
  void *v8;
  void **v9;

  v4 = v3;
  v9 = v4;
  v6 = (void **)*v4;
  if (*v4)
  {
    v7 = *(void ***)(v2 + 32);
    v8 = *v4;
    if (v7 != v6)
    {
      do
        ResetInfo::~ResetInfo(v7 - 14);
      while (v7 != v6);
      v8 = *v9;
    }
    *(_QWORD *)(v2 + 32) = v6;
    operator delete(v8);
  }
  MEMORY[0x1C3B89240](v1);
  _Unwind_Resume(a1);
}

BOOL LogDumpDB::isDuplicated(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  size_t size;
  std::string *v8;
  BOOL v9;
  NSObject *v11;
  const ResetInfo *v12;
  const ResetInfo *v13;
  char *i;
  const ResetInfo *v15;
  NSObject *v16;
  std::string::value_type *v17;
  char *v18;
  std::string::value_type *v19;
  char *v20;
  char *v21;
  _QWORD v22[2];
  std::string v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  uint64_t v30;
  std::string v31;
  char v32;

  v32 = 0;
  if (*(char *)(a2 + 47) < 0)
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  else
    v31 = *(std::string *)(a2 + 24);
  v6 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  else
    size = v31.__r_.__value_.__l.__size_;
  if (size != strlen((const char *)*MEMORY[0x1E0CFBFA0]))
  {
    v9 = 0;
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_16;
LABEL_14:
    if (!v9)
      goto LABEL_17;
    return 0;
  }
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v31;
  else
    v8 = (std::string *)v31.__r_.__value_.__r.__words[0];
  v9 = memcmp(v8, (const void *)*MEMORY[0x1E0CFBFA0], size) == 0;
  if ((v6 & 0x80000000) == 0)
    goto LABEL_14;
LABEL_16:
  operator delete(v31.__r_.__value_.__l.__data_);
  if (v9)
    return 0;
LABEL_17:
  v11 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v31.__r_.__value_.__l.__data_) = 0;
    _os_log_debug_impl(&dword_1BF335000, v11, OS_LOG_TYPE_DEBUG, "#D Checking if log dump is duplicated", (uint8_t *)&v31, 2u);
  }
  v12 = *(const ResetInfo **)(a1 + 24);
  v13 = *(const ResetInfo **)(a1 + 32);
  v22[0] = &v32;
  v22[1] = a1;
  ResetInfo::ResetInfo(&v23, (__int128 *)a2);
  v30 = a3;
  if (v12 != v13)
  {
    while (!LogDumpDB::isDuplicated(ResetInfo const&,std::chrono::duration<long long,std::ratio<1l,1l>>)::$_0::operator()((uint64_t)v22, v12))
    {
      v12 = (const ResetInfo *)((char *)v12 + 112);
      if (v12 == v13)
      {
        v12 = v13;
        goto LABEL_29;
      }
    }
    if (v12 != v13)
    {
      for (i = (char *)v12 + 112; i != (char *)v13; i += 112)
      {
        if (!LogDumpDB::isDuplicated(ResetInfo const&,std::chrono::duration<long long,std::ratio<1l,1l>>)::$_0::operator()((uint64_t)v22, (const ResetInfo *)i))
        {
          ResetInfo::operator=((char *)v12, i);
          v12 = (const ResetInfo *)((char *)v12 + 112);
        }
      }
    }
  }
LABEL_29:
  if (v29 < 0)
  {
    operator delete(__p);
    if ((v27 & 0x80000000) == 0)
    {
LABEL_31:
      if ((v25 & 0x80000000) == 0)
        goto LABEL_32;
      goto LABEL_38;
    }
  }
  else if ((v27 & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v26);
  if ((v25 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v24);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_39:
    operator delete(v23.__r_.__value_.__l.__data_);
    v15 = *(const ResetInfo **)(a1 + 32);
    if (v12 == v15)
      goto LABEL_34;
    while (1)
    {
LABEL_42:
      if (v15 == v12)
      {
        *(_QWORD *)(a1 + 32) = v12;
        if (!v32)
          goto LABEL_53;
        goto LABEL_54;
      }
      if (*((char *)v15 - 1) < 0)
      {
        operator delete(*((void **)v15 - 3));
        if ((*((char *)v15 - 41) & 0x80000000) == 0)
        {
LABEL_45:
          if (*((char *)v15 - 65) < 0)
            goto LABEL_50;
          goto LABEL_46;
        }
      }
      else if ((*((char *)v15 - 41) & 0x80000000) == 0)
      {
        goto LABEL_45;
      }
      operator delete(*((void **)v15 - 8));
      if (*((char *)v15 - 65) < 0)
      {
LABEL_50:
        operator delete(*((void **)v15 - 11));
        if ((*((char *)v15 - 89) & 0x80000000) == 0)
          goto LABEL_41;
        goto LABEL_51;
      }
LABEL_46:
      if ((*((char *)v15 - 89) & 0x80000000) == 0)
        goto LABEL_41;
LABEL_51:
      operator delete(*((void **)v15 - 14));
LABEL_41:
      v15 = (const ResetInfo *)((char *)v15 - 112);
    }
  }
LABEL_33:
  v15 = *(const ResetInfo **)(a1 + 32);
  if (v12 != v15)
    goto LABEL_42;
LABEL_34:
  if (v32)
    goto LABEL_54;
LABEL_53:
  v16 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v31.__r_.__value_.__l.__data_) = 0;
    _os_log_debug_impl(&dword_1BF335000, v16, OS_LOG_TYPE_DEBUG, "#D Not found duplicated log", (uint8_t *)&v31, 2u);
    v12 = *(const ResetInfo **)(a1 + 32);
    if ((unint64_t)v12 < *(_QWORD *)(a1 + 40))
      goto LABEL_55;
LABEL_57:
    v17 = std::vector<ResetInfo>::__push_back_slow_path<ResetInfo const&>((_QWORD *)(a1 + 24), (__int128 *)a2);
    goto LABEL_58;
  }
LABEL_54:
  if ((unint64_t)v12 >= *(_QWORD *)(a1 + 40))
    goto LABEL_57;
LABEL_55:
  ResetInfo::ResetInfo((std::string *)v12, (__int128 *)a2);
  v17 = (char *)v12 + 112;
  *(_QWORD *)(a1 + 32) = (char *)v12 + 112;
LABEL_58:
  *(_QWORD *)(a1 + 32) = v17;
  v18 = *(char **)(a1 + 24);
  if (0x6DB6DB6DB6DB6DB7 * ((v17 - v18) >> 4) <= (unint64_t)*(unsigned int *)(a1 + 16))
    goto LABEL_76;
  if (v18 + 112 == v17)
  {
    v19 = *(std::string::value_type **)(a1 + 24);
  }
  else
  {
    v19 = *(std::string::value_type **)(a1 + 24);
    do
    {
      v20 = v18 + 112;
      v19 += 112;
      v21 = ResetInfo::operator=(v18, v18 + 112) + 224;
      v18 = v20;
    }
    while (v21 != v17);
    v17 = *(std::string::value_type **)(a1 + 32);
  }
  while (v17 != v19)
  {
    if (*(v17 - 1) < 0)
    {
      operator delete(*((void **)v17 - 3));
      if ((*(v17 - 41) & 0x80000000) == 0)
      {
LABEL_68:
        if (*(v17 - 65) < 0)
          goto LABEL_73;
        goto LABEL_69;
      }
    }
    else if ((*(v17 - 41) & 0x80000000) == 0)
    {
      goto LABEL_68;
    }
    operator delete(*((void **)v17 - 8));
    if (*(v17 - 65) < 0)
    {
LABEL_73:
      operator delete(*((void **)v17 - 11));
      if ((*(v17 - 89) & 0x80000000) == 0)
        goto LABEL_64;
      goto LABEL_74;
    }
LABEL_69:
    if ((*(v17 - 89) & 0x80000000) == 0)
      goto LABEL_64;
LABEL_74:
    operator delete(*((void **)v17 - 14));
LABEL_64:
    v17 -= 112;
  }
  *(_QWORD *)(a1 + 32) = v19;
LABEL_76:
  LogDumpDB::commitToDisk((LogDumpDB *)a1);
  return v32 != 0;
}

void sub_1BF457CDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

void sub_1BF457CE4(_Unwind_Exception *a1)
{
  void **v1;

  ResetInfo::~ResetInfo(v1);
  _Unwind_Resume(a1);
}

void sub_1BF457CF8(_Unwind_Exception *a1)
{
  void **v1;

  ResetInfo::~ResetInfo(v1);
  _Unwind_Resume(a1);
}

void LogDumpDB::commitToDisk(LogDumpDB *this)
{
  const __CFAllocator *v2;
  CFMutableArrayRef Mutable;
  __CFArray *v4;
  __int128 *v5;
  __int128 *v6;
  const __CFString **v7;
  const __CFString **v8;
  __CFDictionary *v9;
  uint64_t v10;
  _DWORD *v11;
  const __CFAllocator *v12;
  const __CFAllocator *v13;
  __int128 v14;
  const __CFAllocator *v15;
  __int128 v16;
  const __CFAllocator *v17;
  __int128 v18;
  const __CFAllocator *v19;
  __int128 v20;
  NSObject *v21;
  os_unfair_lock_s *v22;
  _QWORD *v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *size;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::string *v34;
  unint64_t *v35;
  unint64_t v36;
  CFMutableArrayRef v37;
  LogDumpDB *v38;
  const __CFString **v39;
  const __CFString **v40;
  const __CFString **v41;
  CFMutableArrayRef cf;
  std::string __p;
  std::string v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v4 = Mutable;
  if (Mutable)
    cf = Mutable;
  v6 = (__int128 *)*((_QWORD *)this + 3);
  v5 = (__int128 *)*((_QWORD *)this + 4);
  v38 = this;
  if (v6 != v5)
  {
    v41 = (const __CFString **)*MEMORY[0x1E0CFB370];
    v40 = (const __CFString **)*MEMORY[0x1E0CFB538];
    v39 = (const __CFString **)*MEMORY[0x1E0CFB8D0];
    v7 = (const __CFString **)*MEMORY[0x1E0CFB930];
    v8 = (const __CFString **)*MEMORY[0x1E0CFB770];
    do
    {
      v9 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v10 = *((_QWORD *)v6 + 9);
      v11 = operator new(0x38uLL);
      v11[8] = 0;
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = &v44.__r_.__value_.__l.__size_;
      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
      v44.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
      *((_BYTE *)v11 + 24) = 1;
      v44.__r_.__value_.__r.__words[2] = 1;
      *((_QWORD *)v11 + 5) = v10;
      *((_QWORD *)v11 + 6) = 0xAAAAAAAA00000000;
      Timestamp::asString((uint64_t)&v44, 0, 9, &__p);
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v44, (_QWORD *)v44.__r_.__value_.__l.__size_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v44, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v44 = __p;
      ctu::cf::insert<char const*,std::string>(v9, v41, (uint64_t)&v44, (uint64_t)v2, v12);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v44.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_11:
          if ((*((char *)v6 + 23) & 0x80000000) == 0)
            goto LABEL_12;
          goto LABEL_15;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_11;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((*((char *)v6 + 23) & 0x80000000) == 0)
      {
LABEL_12:
        v14 = *v6;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
        goto LABEL_16;
      }
LABEL_15:
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
LABEL_16:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v44, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v44 = __p;
      ctu::cf::insert<char const*,std::string>(v9, v40, (uint64_t)&v44, (uint64_t)v2, v13);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v44.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_21:
          if ((*((char *)v6 + 47) & 0x80000000) == 0)
            goto LABEL_22;
          goto LABEL_25;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_21;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((*((char *)v6 + 47) & 0x80000000) == 0)
      {
LABEL_22:
        v16 = *(__int128 *)((char *)v6 + 24);
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 5);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v16;
        goto LABEL_26;
      }
LABEL_25:
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v6 + 3), *((_QWORD *)v6 + 4));
LABEL_26:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v44, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v44 = __p;
      ctu::cf::insert<char const*,std::string>(v9, v39, (uint64_t)&v44, (uint64_t)v2, v15);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v44.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_31:
          if ((*((char *)v6 + 71) & 0x80000000) == 0)
            goto LABEL_32;
          goto LABEL_35;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_31;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((*((char *)v6 + 71) & 0x80000000) == 0)
      {
LABEL_32:
        v18 = v6[3];
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 8);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
        goto LABEL_36;
      }
LABEL_35:
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v6 + 6), *((_QWORD *)v6 + 7));
LABEL_36:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v44, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v44 = __p;
      ctu::cf::insert<char const*,std::string>(v9, v7, (uint64_t)&v44, (uint64_t)v2, v17);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v44.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_41:
          if ((*((char *)v6 + 111) & 0x80000000) == 0)
            goto LABEL_42;
          goto LABEL_45;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_41;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((*((char *)v6 + 111) & 0x80000000) == 0)
      {
LABEL_42:
        v20 = *(__int128 *)((char *)v6 + 88);
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 13);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
        goto LABEL_46;
      }
LABEL_45:
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v6 + 11), *((_QWORD *)v6 + 12));
LABEL_46:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v44, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v44 = __p;
      ctu::cf::insert<char const*,std::string>(v9, v8, (uint64_t)&v44, (uint64_t)v2, v19);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v44.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_54:
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_54;
      }
      CFArrayAppendValue(v4, v9);
      if (v9)
        CFRelease(v9);
      v6 += 7;
    }
    while (v6 != v5);
  }
  v21 = *((_QWORD *)v38 + 1);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(v44.__r_.__value_.__l.__data_) = 138412290;
    *(std::string::size_type *)((char *)v44.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
    _os_log_debug_impl(&dword_1BF335000, v21, OS_LOG_TYPE_DEBUG, "#D Current tracking list: %@", (uint8_t *)&v44, 0xCu);
  }
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v22 = (os_unfair_lock_s *)off_1ED70FDE8;
  if (!off_1ED70FDE8)
  {
    v23 = operator new(0x30uLL);
    MEMORY[0x1C3B893B4](v23, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x1E0C9B260]);
    v23[3] = 0;
    v23[4] = 0;
    *((_DWORD *)v23 + 10) = 0;
    std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(&v44, (uint64_t)v23);
    v24 = *(_OWORD *)&v44.__r_.__value_.__l.__data_;
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = 0uLL;
    v25 = (std::__shared_weak_count *)*(&off_1ED70FDE8 + 1);
    off_1ED70FDE8 = v24;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    size = (std::__shared_weak_count *)v44.__r_.__value_.__l.__size_;
    if (v44.__r_.__value_.__l.__size_)
    {
      v29 = (unint64_t *)(v44.__r_.__value_.__l.__size_ + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v22 = (os_unfair_lock_s *)off_1ED70FDE8;
  }
  v31 = (std::__shared_weak_count *)*(&off_1ED70FDE8 + 1);
  if (*(&off_1ED70FDE8 + 1))
  {
    v32 = (unint64_t *)(*(&off_1ED70FDE8 + 1) + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  *((_BYTE *)&v44.__r_.__value_.__s + 23) = 16;
  strcpy((char *)&v44, "Log Dump History");
  os_unfair_lock_lock(v22 + 10);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = &v44;
  else
    v34 = (std::string *)v44.__r_.__value_.__r.__words[0];
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, (const char *)v34);
  ctu::cf::plist_adapter::set<__CFArray *>((uint64_t)v22, cf, (const __CFString *)__p.__r_.__value_.__l.__data_, 1);
  MEMORY[0x1C3B8936C](&__p);
  os_unfair_lock_unlock(v22 + 10);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (!v31)
    goto LABEL_81;
  v35 = (unint64_t *)&v31->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    v37 = cf;
    if (!cf)
      return;
  }
  else
  {
LABEL_81:
    v37 = cf;
    if (!cf)
      return;
  }
  CFRelease(v37);
}

void sub_1BF458384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  operator delete(v27);
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef(&a14);
  _Unwind_Resume(a1);
}

const char *LogDumpDB::getName(LogDumpDB *this)
{
  return "Log Dump History";
}

BOOL LogDumpDB::checkIfDuplicatedSignature(LogDumpDB *this, const ResetInfo *a2, const ResetInfo *a3)
{
  int v6;
  void *v7;
  char v8;
  std::string::size_type size;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  size_t v13;
  BOOL v14;
  BOOL v15;
  NSObject *v16;
  _BOOL8 result;
  const char *v18;
  size_t v19;
  std::string::size_type v20;
  char v21;
  std::string *v22;
  std::string::size_type v23;
  size_t v24;
  BOOL v25;
  BOOL v26;
  NSObject *v27;
  _OWORD *v28;
  int v29;
  int v30;
  void *v31;
  char v32;
  std::string::size_type v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  size_t v37;
  _BOOL4 v38;
  _BOOL4 v39;
  uint64_t v40;
  _OWORD *v41;
  const char *v42;
  size_t v43;
  size_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  std::string *v49;
  NSObject *v50;
  int v51;
  void *v52;
  std::string *v53;
  int64_t v54;
  char *v55;
  char *v56;
  LogDumpDB *v57;
  std::string *v58;
  BOOL v62;
  const char *v63;
  int v64;
  void *v65;
  std::string *v66;
  int64_t v67;
  char *v68;
  char *v69;
  std::string *v70;
  _BOOL4 v74;
  int v75;
  std::string::size_type v76;
  std::string *v77;
  std::string *v78;
  int v79;
  void *v80;
  std::string *v81;
  int64_t v82;
  char *v83;
  char *v84;
  std::string *v85;
  _BOOL4 v88;
  NSObject *v89;
  NSObject *v90;
  std::string *v91;
  std::string *v92;
  std::string *v93;
  std::string v94;
  _BYTE __dst[24];
  std::string v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  if (*((char *)a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  else
    v94 = *(std::string *)a3;
  if (*((char *)a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v96, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  else
    v96 = *(std::string *)a2;
  v6 = SHIBYTE(v96.__r_.__value_.__r.__words[2]);
  v7 = (void *)v96.__r_.__value_.__r.__words[0];
  v8 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  else
    size = v94.__r_.__value_.__l.__size_;
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v94;
  else
    v10 = (std::string *)v94.__r_.__value_.__r.__words[0];
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  else
    v11 = v96.__r_.__value_.__l.__size_;
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v96;
  else
    v12 = (std::string *)v96.__r_.__value_.__r.__words[0];
  if (v11 >= size)
    v13 = size;
  else
    v13 = v11;
  v14 = memcmp(v10, v12, v13) == 0;
  v15 = v11 == size && v14;
  if (v6 < 0)
  {
    operator delete(v7);
    if ((*((_BYTE *)&v94.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_27:
      if (v15)
        goto LABEL_28;
LABEL_32:
      v16 = *((_QWORD *)this + 1);
      result = os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
      if (!result)
        return result;
      LOWORD(v94.__r_.__value_.__l.__data_) = 0;
      v18 = "#D Two reset types are not same. No need to check duplicated signature";
      goto LABEL_34;
    }
  }
  else if ((v8 & 0x80) == 0)
  {
    goto LABEL_27;
  }
  operator delete(v94.__r_.__value_.__l.__data_);
  if (!v15)
    goto LABEL_32;
LABEL_28:
  if (*((char *)a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  else
    v94 = *(std::string *)a3;
  v19 = strlen((const char *)*MEMORY[0x1E0CFB590]);
  v20 = v19;
  v21 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v19 != -1)
    {
      v22 = &v94;
      v23 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
      goto LABEL_41;
    }
LABEL_254:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v19 == -1)
    goto LABEL_254;
  v23 = v94.__r_.__value_.__l.__size_;
  v22 = (std::string *)v94.__r_.__value_.__r.__words[0];
LABEL_41:
  if (v23 >= v20)
    v24 = v20;
  else
    v24 = v23;
  v25 = memcmp(v22, (const void *)*MEMORY[0x1E0CFB590], v24) == 0;
  v26 = v23 == v20 && v25;
  if ((v21 & 0x80) == 0)
  {
    if (v26)
      goto LABEL_49;
LABEL_53:
    if (*((char *)a2 + 71) < 0)
      std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
    else
      v94 = *(std::string *)((_BYTE *)a2 + 2);
    v28 = (_OWORD *)((char *)a3 + 48);
    if (*((char *)a3 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&v96, *((const std::string::value_type **)a3 + 6), *((_QWORD *)a3 + 7));
    }
    else
    {
      *(_OWORD *)&v96.__r_.__value_.__l.__data_ = *v28;
      v96.__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 8);
    }
    *(_QWORD *)__dst = operator new(0x68uLL);
    *(_OWORD *)&__dst[8] = xmmword_1BF544730;
    strcpy(*(char **)__dst, "(Power assertion watchdog fired for 'com.apple.AppleBasebandManager.RadioNotReady.Bootup'; Timeout =).*");
    v29 = util::compareTwoStringsWithPattern((uint64_t)&v94, (uint64_t)&v96, (uint64_t)__dst);
    if ((__dst[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__dst);
      if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_61:
        if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_62;
        goto LABEL_121;
      }
    }
    else if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_61;
    }
    operator delete(v96.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_62:
      if (!v29)
        return 0;
      goto LABEL_122;
    }
LABEL_121:
    operator delete(v94.__r_.__value_.__l.__data_);
    if (!v29)
      return 0;
LABEL_122:
    v50 = *((_QWORD *)this + 1);
    if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
      return 1;
    if (*((char *)a3 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 6), *((_QWORD *)a3 + 7));
    }
    else
    {
      *(_OWORD *)&v94.__r_.__value_.__l.__data_ = *v28;
      v94.__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 8);
    }
    v91 = &v94;
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v91 = (std::string *)v94.__r_.__value_.__r.__words[0];
    LODWORD(v96.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v96.__r_.__value_.__r.__words + 4) = (std::string::size_type)v91;
LABEL_244:
    _os_log_debug_impl(&dword_1BF335000, v50, OS_LOG_TYPE_DEBUG, "#D This is duplicated signature based on the dump reason: \"%s\"", (uint8_t *)&v96, 0xCu);
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 1;
    operator delete(v94.__r_.__value_.__l.__data_);
    return 1;
  }
  operator delete(v94.__r_.__value_.__l.__data_);
  if (!v26)
    goto LABEL_53;
LABEL_49:
  v27 = *((_QWORD *)this + 1);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a3 + 111) < 0)
      std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((_QWORD *)a3 + 12));
    else
      v94 = *(std::string *)((char *)a3 + 88);
    v75 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
    v76 = v94.__r_.__value_.__r.__words[0];
    if (*((char *)a2 + 111) < 0)
      std::string::__init_copy_ctor_external(&v96, *((const std::string::value_type **)a2 + 11), *((_QWORD *)a2 + 12));
    else
      v96 = *(std::string *)((char *)a2 + 88);
    v77 = &v94;
    if (v75 < 0)
      v77 = (std::string *)v76;
    v78 = &v96;
    if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v78 = (std::string *)v96.__r_.__value_.__r.__words[0];
    *(_DWORD *)__dst = 136315394;
    *(_QWORD *)&__dst[4] = v77;
    *(_WORD *)&__dst[12] = 2080;
    *(_QWORD *)&__dst[14] = v78;
    _os_log_debug_impl(&dword_1BF335000, v27, OS_LOG_TYPE_DEBUG, "#D Comparing current reason, \"%s\", and the recorded reason, \"%s\"", __dst, 0x16u);
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v96.__r_.__value_.__l.__data_);
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v94.__r_.__value_.__l.__data_);
  }
  if (*((char *)a3 + 111) < 0)
    std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((_QWORD *)a3 + 12));
  else
    v94 = *(std::string *)((char *)a3 + 88);
  if (*((char *)a2 + 111) < 0)
    std::string::__init_copy_ctor_external(&v96, *((const std::string::value_type **)a2 + 11), *((_QWORD *)a2 + 12));
  else
    v96 = *(std::string *)((char *)a2 + 88);
  v30 = SHIBYTE(v96.__r_.__value_.__r.__words[2]);
  v31 = (void *)v96.__r_.__value_.__r.__words[0];
  v32 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  else
    v33 = v94.__r_.__value_.__l.__size_;
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = &v94;
  else
    v34 = (std::string *)v94.__r_.__value_.__r.__words[0];
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  else
    v35 = v96.__r_.__value_.__l.__size_;
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = &v96;
  else
    v36 = (std::string *)v96.__r_.__value_.__r.__words[0];
  if (v35 >= v33)
    v37 = v33;
  else
    v37 = v35;
  v38 = memcmp(v34, v36, v37) == 0;
  v39 = v35 == v33 && v38;
  if ((v30 & 0x80000000) == 0)
  {
    if ((v32 & 0x80) == 0)
      goto LABEL_88;
LABEL_116:
    operator delete(v94.__r_.__value_.__l.__data_);
    if (v39)
      goto LABEL_89;
    goto LABEL_117;
  }
  operator delete(v31);
  if ((*((_BYTE *)&v94.__r_.__value_.__s + 23) & 0x80) != 0)
    goto LABEL_116;
LABEL_88:
  if (!v39)
  {
LABEL_117:
    v16 = *((_QWORD *)this + 1);
    result = os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
    if (!result)
      return result;
    LOWORD(v94.__r_.__value_.__l.__data_) = 0;
    v18 = "#D Two crash reasons are not identical. No need to check duplicated signature";
LABEL_34:
    _os_log_debug_impl(&dword_1BF335000, v16, OS_LOG_TYPE_DEBUG, v18, (uint8_t *)&v94, 2u);
    return 0;
  }
LABEL_89:
  v40 = 0;
  v41 = (_OWORD *)((char *)a3 + 48);
  do
  {
    if (*((char *)a2 + 71) < 0)
      std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
    else
      v94 = *(std::string *)((_BYTE *)a2 + 2);
    if (*((char *)a3 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&v96, *((const std::string::value_type **)a3 + 6), *((_QWORD *)a3 + 7));
    }
    else
    {
      *(_OWORD *)&v96.__r_.__value_.__l.__data_ = *v41;
      v96.__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 8);
    }
    v42 = abm::kInterestingHardResetReasonSignatures[v40];
    v43 = strlen(v42);
    if (v43 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v44 = v43;
    if (v43 >= 0x17)
    {
      v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17)
        v46 = v43 | 7;
      v47 = v46 + 1;
      v45 = operator new(v46 + 1);
      *(_QWORD *)&__dst[8] = v44;
      *(_QWORD *)&__dst[16] = v47 | 0x8000000000000000;
      *(_QWORD *)__dst = v45;
LABEL_103:
      memmove(v45, v42, v44);
      goto LABEL_104;
    }
    __dst[23] = v43;
    v45 = __dst;
    if (v43)
      goto LABEL_103;
LABEL_104:
    v45[v44] = 0;
    v48 = util::compareTwoStringsWithPattern((uint64_t)&v94, (uint64_t)&v96, (uint64_t)__dst);
    if ((__dst[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__dst);
      if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_106:
        if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_107;
        goto LABEL_111;
      }
    }
    else if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_106;
    }
    operator delete(v96.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_107:
      if (v48)
        goto LABEL_125;
      goto LABEL_112;
    }
LABEL_111:
    operator delete(v94.__r_.__value_.__l.__data_);
    if (v48)
    {
LABEL_125:
      v50 = *((_QWORD *)this + 1);
      if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
        return 1;
      if (*((char *)a3 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 6), *((_QWORD *)a3 + 7));
      }
      else
      {
        *(_OWORD *)&v94.__r_.__value_.__l.__data_ = *v41;
        v94.__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 8);
      }
      v92 = &v94;
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v92 = (std::string *)v94.__r_.__value_.__r.__words[0];
      LODWORD(v96.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v96.__r_.__value_.__r.__words + 4) = (std::string::size_type)v92;
      goto LABEL_244;
    }
LABEL_112:
    ++v40;
  }
  while (v40 != 8);
  if (*((char *)a3 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((_QWORD *)a3 + 12));
    v49 = (std::string *)((char *)a3 + 88);
  }
  else
  {
    v49 = (std::string *)((char *)a3 + 88);
    v94 = *(std::string *)((char *)a3 + 88);
  }
  v51 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
  v52 = (void *)v94.__r_.__value_.__r.__words[0];
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = &v94;
  else
    v53 = (std::string *)v94.__r_.__value_.__r.__words[0];
  v54 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v54 = v94.__r_.__value_.__l.__size_;
  v55 = (char *)v53 + v54;
  if (v54 >= 17)
  {
    v58 = v53;
    v57 = this;
    do
    {
      v56 = (char *)memchr(v58, 67, v54 - 16);
      if (!v56)
        break;
      if (*(_QWORD *)v56 == 0x63206D6F74737543 && *((_QWORD *)v56 + 1) == 0x7079742068736172 && v56[16] == 101)
        goto LABEL_146;
      v58 = (std::string *)(v56 + 1);
      v54 = v55 - (char *)v58;
    }
    while (v55 - (char *)v58 > 16);
    v56 = v55;
  }
  else
  {
    v56 = (char *)v53 + v54;
    v57 = this;
  }
LABEL_146:
  v62 = v56 == v55 || v56 - (char *)v53 == -1;
  if (v51 < 0)
    operator delete(v52);
  if (v62)
  {
    if (*((char *)a3 + 111) < 0)
    {
      std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((_QWORD *)a3 + 12));
      v49 = (std::string *)((char *)a3 + 88);
    }
    else
    {
      v94 = *v49;
    }
    v64 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
    v65 = (void *)v94.__r_.__value_.__r.__words[0];
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v66 = &v94;
    else
      v66 = (std::string *)v94.__r_.__value_.__r.__words[0];
    v67 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v67 = v94.__r_.__value_.__l.__size_;
    v68 = (char *)v66 + v67;
    if (v67 >= 18)
    {
      v70 = v66;
      v57 = this;
      do
      {
        v69 = (char *)memchr(v70, 67, v67 - 17);
        if (!v69)
          break;
        if (*(_QWORD *)v69 == 0x7274206873617243
          && *((_QWORD *)v69 + 1) == 0x2064657265676769
          && *((_WORD *)v69 + 8) == 31074)
        {
          goto LABEL_179;
        }
        v70 = (std::string *)(v69 + 1);
        v67 = v68 - (char *)v70;
      }
      while (v68 - (char *)v70 >= 18);
      v69 = v68;
    }
    else
    {
      v69 = (char *)v66 + v67;
      v57 = this;
    }
LABEL_179:
    v74 = v69 == v68 || v69 - (char *)v66 == -1;
    if (v64 < 0)
      operator delete(v65);
    if (v74)
    {
      if (*((char *)a3 + 111) < 0)
      {
        std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((_QWORD *)a3 + 12));
        v49 = (std::string *)((char *)a3 + 88);
      }
      else
      {
        v94 = *v49;
      }
      v79 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
      v80 = (void *)v94.__r_.__value_.__r.__words[0];
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v81 = &v94;
      else
        v81 = (std::string *)v94.__r_.__value_.__r.__words[0];
      v82 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v82 = v94.__r_.__value_.__l.__size_;
      v83 = (char *)v81 + v82;
      if (v82 >= 14)
      {
        v85 = v81;
        v57 = this;
        do
        {
          v84 = (char *)memchr(v85, 67, v82 - 13);
          if (!v84)
            break;
          if (*(_QWORD *)v84 == 0x6E69206873617243 && *(_QWORD *)(v84 + 6) == 0x64657463656A6E69)
            goto LABEL_219;
          v85 = (std::string *)(v84 + 1);
          v82 = v83 - (char *)v85;
        }
        while (v83 - (char *)v85 >= 14);
        v84 = v83;
      }
      else
      {
        v84 = (char *)v81 + v82;
        v57 = this;
      }
LABEL_219:
      v88 = v84 == v83 || v84 - (char *)v81 == -1;
      if (v79 < 0)
        operator delete(v80);
      if (v88)
      {
        v89 = *((_QWORD *)v57 + 1);
        if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v94.__r_.__value_.__l.__data_) = 0;
          _os_log_debug_impl(&dword_1BF335000, v89, OS_LOG_TYPE_DEBUG, "#D The crash reason has duplicated signature", (uint8_t *)&v94, 2u);
        }
        return 1;
      }
      v63 = "Crash injected";
    }
    else
    {
      v63 = "Crash triggered by";
    }
  }
  else
  {
    v63 = "Custom crash type";
  }
  v90 = *((_QWORD *)v57 + 1);
  result = os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG);
  if (!result)
    return result;
  if (*((char *)a3 + 111) < 0)
    std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((_QWORD *)a3 + 12));
  else
    v94 = *v49;
  v93 = &v94;
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v93 = (std::string *)v94.__r_.__value_.__r.__words[0];
  LODWORD(v96.__r_.__value_.__l.__data_) = 136315394;
  *(std::string::size_type *)((char *)v96.__r_.__value_.__r.__words + 4) = (std::string::size_type)v93;
  WORD2(v96.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v96.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v63;
  _os_log_debug_impl(&dword_1BF335000, v90, OS_LOG_TYPE_DEBUG, "#D This is NOT duplicated signature based on the crash reason: \"%s\" has \"%s\"", (uint8_t *)&v96, 0x16u);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
  return 0;
}

void sub_1BF45902C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string::value_type *std::vector<ResetInfo>::__push_back_slow_path<ResetInfo const&>(_QWORD *a1, __int128 *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t i;
  void **v10;
  char *v11;
  void **v12;
  void **v13;
  std::string *v15;
  __int128 v16;

  v2 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 4);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x249249249249249)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(a1[2] - *a1) >> 4) > v3)
    v3 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(a1[2] - *a1) >> 4);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[2] - *a1) >> 4)) >= 0x124924924924924)
    v6 = 0x249249249249249;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x249249249249249)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(112 * v6);
  }
  else
  {
    v7 = 0;
  }
  v15 = (std::string *)&v7[112 * v2];
  *((_QWORD *)&v16 + 1) = &v7[112 * v6];
  ResetInfo::ResetInfo(v15, a2);
  v8 = 0;
  v10 = (void **)*a1;
  for (i = a1[1]; (void **)(i + v8) != v10; ResetInfo::ResetInfo((std::string *)((char *)v15 + v8), (__int128 *)(v8 + i)))v8 -= 112;
  v11 = (char *)v15 + v8;
  v12 = (void **)*a1;
  v13 = (void **)a1[1];
  *a1 = v11;
  *(_QWORD *)&v16 = (char *)v15 + 112;
  *(_OWORD *)(a1 + 1) = v16;
  while (v13 != v12)
  {
    if (*((char *)v13 - 1) < 0)
    {
      operator delete(*(v13 - 3));
      if ((*((char *)v13 - 41) & 0x80000000) == 0)
      {
LABEL_19:
        if (*((char *)v13 - 65) < 0)
          goto LABEL_24;
        goto LABEL_20;
      }
    }
    else if ((*((char *)v13 - 41) & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    operator delete(*(v13 - 8));
    if (*((char *)v13 - 65) < 0)
    {
LABEL_24:
      operator delete(*(v13 - 11));
      if ((*((char *)v13 - 89) & 0x80000000) == 0)
        goto LABEL_15;
      goto LABEL_25;
    }
LABEL_20:
    if ((*((char *)v13 - 89) & 0x80000000) == 0)
      goto LABEL_15;
LABEL_25:
    operator delete(*(v13 - 14));
LABEL_15:
    v13 -= 14;
  }
  if (v12)
    operator delete(v12);
  return &v15[4].__r_.__value_.__s.__data_[16];
}

void sub_1BF4592B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__split_buffer<ResetInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<ResetInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 112;
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      if ((*(char *)(i - 41) & 0x80000000) == 0)
      {
LABEL_6:
        if (*(char *)(i - 65) < 0)
          goto LABEL_11;
        goto LABEL_7;
      }
    }
    else if ((*(char *)(i - 41) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(*(void **)(i - 64));
    if (*(char *)(i - 65) < 0)
    {
LABEL_11:
      operator delete(*(void **)(i - 88));
      if ((*(char *)(i - 89) & 0x80000000) == 0)
        continue;
      goto LABEL_12;
    }
LABEL_7:
    if ((*(char *)(i - 89) & 0x80000000) == 0)
      continue;
LABEL_12:
    operator delete(*(void **)(i - 112));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

BOOL LogDumpDB::isDuplicated(ResetInfo const&,std::chrono::duration<long long,std::ratio<1l,1l>>)::$_0::operator()(uint64_t a1, const ResetInfo *a2)
{
  LogDumpDB *v4;
  _BOOL8 v5;
  uint64_t v6;
  NSObject *v7;
  _DWORD *v8;
  void **v9;
  uint64_t v10;
  _DWORD *v11;
  void **v12;
  uint64_t v13;
  int v14;
  std::string::size_type v15;
  std::string *v16;
  std::string *p_p;
  std::string __p;
  void *v20[2];
  char v21;
  void *v22[2];
  char v23;
  std::string v24;
  uint8_t buf[4];
  void **v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  void **v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  std::string *v34;
  __int16 v35;
  std::string *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = *(LogDumpDB **)(a1 + 8);
  v5 = LogDumpDB::checkIfDuplicatedSignature(v4, a2, (const ResetInfo *)(a1 + 16));
  if (v5)
  {
    v6 = *((_QWORD *)a2 + 9);
    if (*(_QWORD *)(a1 + 88) - v6 < *(_QWORD *)(a1 + 128))
    {
      v7 = *((_QWORD *)v4 + 1);
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
LABEL_23:
        **(_BYTE **)a1 = 1;
        return v5;
      }
      v8 = operator new(0x38uLL);
      v8[8] = 0;
      *(_QWORD *)v8 = 0;
      *((_QWORD *)v8 + 1) = 0;
      *((_QWORD *)v8 + 2) = &v24.__r_.__value_.__l.__size_;
      v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
      v24.__r_.__value_.__l.__size_ = (std::string::size_type)v8;
      *((_BYTE *)v8 + 24) = 1;
      v24.__r_.__value_.__r.__words[2] = 1;
      *((_QWORD *)v8 + 5) = v6;
      *((_QWORD *)v8 + 6) = 0xAAAAAAAA00000000;
      v9 = v22;
      Timestamp::asString((uint64_t)&v24, 0, 9, v22);
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v24, (_QWORD *)v24.__r_.__value_.__l.__size_);
      if (v23 < 0)
        v9 = (void **)v22[0];
      v10 = *(_QWORD *)(a1 + 88);
      v11 = operator new(0x38uLL);
      v11[8] = 0;
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = &v24.__r_.__value_.__l.__size_;
      v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
      v24.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
      *((_BYTE *)v11 + 24) = 1;
      v24.__r_.__value_.__r.__words[2] = 1;
      *((_QWORD *)v11 + 5) = v10;
      *((_QWORD *)v11 + 6) = 0xAAAAAAAA00000000;
      Timestamp::asString((uint64_t)&v24, 0, 9, v20);
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v24, (_QWORD *)v24.__r_.__value_.__l.__size_);
      if (v21 >= 0)
        v12 = v20;
      else
        v12 = (void **)v20[0];
      v13 = *(_QWORD *)(a1 + 88);
      if (*(char *)(a1 + 87) < 0)
        std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)(a1 + 64), *(_QWORD *)(a1 + 72));
      else
        v24 = *(std::string *)(a1 + 64);
      v14 = SHIBYTE(v24.__r_.__value_.__r.__words[2]);
      v15 = v24.__r_.__value_.__r.__words[0];
      if (*(char *)(a1 + 127) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 104), *(_QWORD *)(a1 + 112));
      else
        __p = *(std::string *)(a1 + 104);
      v16 = &v24;
      if (v14 < 0)
        v16 = (std::string *)v15;
      p_p = &__p;
      *(_DWORD *)buf = 136316418;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v26 = v9;
      v27 = 2050;
      v28 = v6;
      v29 = 2080;
      v30 = v12;
      v31 = 2050;
      v32 = v13;
      v33 = 2082;
      v34 = v16;
      v35 = 2082;
      v36 = p_p;
      _os_log_impl(&dword_1BF335000, v7, OS_LOG_TYPE_DEFAULT, "#I Found duplicated log at timestamp: %s[%{public}llu], new log timestamp: %s[%{public}llu], dump reason: %{public}s, crash reason: %{public}s", buf, 0x3Eu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_21:
          if ((v21 & 0x80000000) == 0)
            goto LABEL_22;
          goto LABEL_27;
        }
      }
      else if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_21;
      }
      operator delete(v24.__r_.__value_.__l.__data_);
      if ((v21 & 0x80000000) == 0)
      {
LABEL_22:
        if ((v23 & 0x80000000) == 0)
          goto LABEL_23;
LABEL_28:
        operator delete(v22[0]);
        goto LABEL_23;
      }
LABEL_27:
      operator delete(v20[0]);
      if ((v23 & 0x80000000) == 0)
        goto LABEL_23;
      goto LABEL_28;
    }
  }
  return v5;
}

void sub_1BF45968C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a18 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a24 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a19);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a13);
  if ((a24 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

char *ResetInfo::operator=(char *a1, char *a2)
{
  char *v3;
  __int128 v4;
  void **v5;
  char *v6;
  size_t v7;
  size_t v8;
  __int128 v9;
  void **v10;
  _QWORD *v11;
  size_t v12;
  void *v13;
  size_t v14;
  __int128 v15;
  void *v16;
  size_t v17;
  uint64_t v18;
  void **v19;
  char v20;
  __int128 v21;
  void *v23;
  size_t v24;

  if (a1 == a2)
    return a1;
  v3 = a2;
  if ((a1[23] & 0x80000000) == 0)
  {
    if (a2[23] < 0)
    {
      std::string::__assign_no_alias<true>(a1, *(void **)a2, *((_QWORD *)a2 + 1));
      v5 = (void **)(a1 + 24);
      v6 = v3 + 24;
      v7 = v3[47];
      if (a1[47] < 0)
        goto LABEL_14;
    }
    else
    {
      v4 = *(_OWORD *)a2;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v4;
      v5 = (void **)(a1 + 24);
      v6 = a2 + 24;
      v7 = a2[47];
      if (a1[47] < 0)
        goto LABEL_14;
    }
LABEL_10:
    if ((v7 & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v5, *((void **)v3 + 3), *((_QWORD *)v3 + 4));
      v10 = (void **)(a1 + 48);
      v11 = v3 + 48;
      v12 = v3[71];
      if (a1[71] < 0)
        goto LABEL_24;
    }
    else
    {
      v9 = *(_OWORD *)v6;
      v5[2] = (void *)*((_QWORD *)v6 + 2);
      *(_OWORD *)v5 = v9;
      v10 = (void **)(a1 + 48);
      v11 = v3 + 48;
      v12 = v3[71];
      if (a1[71] < 0)
        goto LABEL_24;
    }
LABEL_21:
    if ((v12 & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v10, *((void **)v3 + 6), *((_QWORD *)v3 + 7));
    }
    else
    {
      v15 = *(_OWORD *)v11;
      v10[2] = (void *)v11[2];
      *(_OWORD *)v10 = v15;
    }
    goto LABEL_32;
  }
  if (a2[23] >= 0)
  {
    v8 = a2[23];
  }
  else
  {
    a2 = *(char **)a2;
    v8 = *((_QWORD *)v3 + 1);
  }
  std::string::__assign_no_alias<false>((void **)a1, a2, v8);
  v5 = (void **)(a1 + 24);
  v6 = v3 + 24;
  v7 = v3[47];
  if ((a1[47] & 0x80000000) == 0)
    goto LABEL_10;
LABEL_14:
  if ((v7 & 0x80u) == 0)
    v13 = v6;
  else
    v13 = (void *)*((_QWORD *)v3 + 3);
  if ((v7 & 0x80u) == 0)
    v14 = v7;
  else
    v14 = *((_QWORD *)v3 + 4);
  std::string::__assign_no_alias<false>(v5, v13, v14);
  v10 = (void **)(a1 + 48);
  v11 = v3 + 48;
  v12 = v3[71];
  if ((a1[71] & 0x80000000) == 0)
    goto LABEL_21;
LABEL_24:
  if ((v12 & 0x80u) == 0)
    v16 = v11;
  else
    v16 = (void *)*((_QWORD *)v3 + 6);
  if ((v12 & 0x80u) == 0)
    v17 = v12;
  else
    v17 = *((_QWORD *)v3 + 7);
  std::string::__assign_no_alias<false>(v10, v16, v17);
LABEL_32:
  v18 = *((_QWORD *)v3 + 9);
  *((_DWORD *)a1 + 20) = *((_DWORD *)v3 + 20);
  *((_QWORD *)a1 + 9) = v18;
  v19 = (void **)(a1 + 88);
  v20 = v3[111];
  if (a1[111] < 0)
  {
    if (v20 >= 0)
      v23 = v3 + 88;
    else
      v23 = (void *)*((_QWORD *)v3 + 11);
    if (v20 >= 0)
      v24 = v3[111];
    else
      v24 = *((_QWORD *)v3 + 12);
    std::string::__assign_no_alias<false>(v19, v23, v24);
    return a1;
  }
  else
  {
    if ((v3[111] & 0x80) == 0)
    {
      v21 = *(_OWORD *)(v3 + 88);
      *((_QWORD *)a1 + 13) = *((_QWORD *)v3 + 13);
      *(_OWORD *)v19 = v21;
      return a1;
    }
    std::string::__assign_no_alias<true>(v19, *((void **)v3 + 11), *((_QWORD *)v3 + 12));
    return a1;
  }
}

uint64_t __cxx_global_var_init_14()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1BF335000);
  }
  return result;
}

const char *SARModule::getName(SARModule *this)
{
  return "sar.mod";
}

void SARModule::create(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 v20;
  NSObject *v21;
  uint8_t v22[16];
  uint64_t v23[2];

  *(_QWORD *)a2 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0x138uLL);
  v5 = v4;
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  v23[0] = v6;
  v23[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  SARModule::SARModule((uint64_t)v4, v23);
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAAAALL;
  v10 = (std::__shared_weak_count *)operator new(0x20uLL);
  v10->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)off_1E7907158;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  *(_QWORD *)(a2 + 8) = v10;
  v12 = (std::__shared_weak_count *)*((_QWORD *)v5 + 7);
  if (v12)
  {
    if (v12->__shared_owners_ != -1)
      goto LABEL_17;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v14 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    *((_QWORD *)v5 + 6) = v5;
    *((_QWORD *)v5 + 7) = v10;
    std::__shared_weak_count::__release_weak(v12);
  }
  else
  {
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    *((_QWORD *)v5 + 6) = v5;
    *((_QWORD *)v5 + 7) = v10;
  }
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_17:
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  if (!*(_QWORD *)a2)
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED7100E0 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v21 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
        goto LABEL_23;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
      v21 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
        goto LABEL_23;
    }
    *(_WORD *)v22 = 0;
    _os_log_error_impl(&dword_1BF335000, v21, OS_LOG_TYPE_ERROR, "Failed to create SAR Module!", v22, 2u);
  }
LABEL_23:
  SARModule::init(*(SARModule **)a2);
}

void sub_1BF459B7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1BF459B90(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[8], v1, (dispatch_function_t)std::shared_ptr<SARModule> ctu::SharedSynchronizable<SARModule>::make_shared_ptr<SARModule>(SARModule*)::{lambda(SARModule*)#1}::operator() const(SARModule*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF459BB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  __cxa_end_catch();
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void SARModule::init(SARModule *this)
{
  CommandDriverFactory *v2;
  NSObject *v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  NSObject *v10;
  _QWORD *v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  capabilities::radio *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  _QWORD *v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  NSObject *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  dispatch_object_t object[2];
  std::__shared_weak_count *v43;
  __int128 v44;
  uint8_t buf[16];

  v2 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v3 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v2);
    v4 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v5 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v3 = off_1ED70FD08;
  }
  object[1] = v3;
  v43 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v8 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v10 = *((_QWORD *)this + 9);
  object[0] = v10;
  if (v10)
    dispatch_retain(v10);
  (*((void (**)(__int128 *__return_ptr, NSObject *, dispatch_object_t *))v3->isa + 7))(&v44, v3, object);
  v11 = (_QWORD *)((char *)this + 280);
  v12 = v44;
  v44 = 0uLL;
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
  *(_OWORD *)((char *)this + 280) = v12;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (capabilities::radio *)object[0];
  if (object[0])
    dispatch_release(object[0]);
  v20 = v43;
  if (!v43)
    goto LABEL_59;
  v21 = (unint64_t *)&v43->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    if (*v11)
    {
LABEL_30:
      if (capabilities::radio::maverick(v19))
      {
        memset(buf, 170, sizeof(buf));
        v24 = *((_QWORD *)this + 6);
        v23 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
        if (!v23 || (v25 = std::__shared_weak_count::lock(v23)) == 0)
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v26 = v25;
        v27 = (std::__shared_weak_count *)operator new(0x30uLL);
        v28 = v27;
        v27->__shared_owners_ = 0;
        v27->__shared_weak_owners_ = 0;
        v27[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E7907250;
        v29 = &v27[1].__vftable;
        v27->__vftable = (std::__shared_weak_count_vtbl *)off_1E79071A8;
        p_shared_weak_owners = (unint64_t *)&v26->__shared_weak_owners_;
        v27[1].__shared_owners_ = v24;
        v27[1].__shared_weak_owners_ = (uint64_t)v26;
        do
          v31 = __ldxr(p_shared_weak_owners);
        while (__stxr(v31 + 1, p_shared_weak_owners));
        v32 = (unint64_t *)&v26->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (v33)
        {
          v27[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E79071F8;
          *(_QWORD *)buf = v27 + 1;
          *(_QWORD *)&buf[8] = v27;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
          v28[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E79071F8;
          *(_QWORD *)buf = v29;
          *(_QWORD *)&buf[8] = v28;
        }
        v35 = (unint64_t *)&v28->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
        antenna::CommandDriver::registerHandler();
        if (v28)
        {
          v37 = (unint64_t *)&v28->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v39 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v40 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      return;
    }
  }
  else
  {
LABEL_59:
    if (*v11)
      goto LABEL_30;
  }
  v34 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF335000, v34, OS_LOG_TYPE_ERROR, "Failed to create antenna command driver", buf, 2u);
  }
}

void sub_1BF45A008(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2 - 64);
  _Unwind_Resume(a1);
}

void sub_1BF45A024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF45A038(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF45A054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object, char a15)
{
  if (object)
    dispatch_release(object);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t SARModule::SARModule(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  NSObject *initially_inactive;
  NSObject *v10;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_1E7908A38;
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(_QWORD *)a1 = &unk_1E78FC4E8;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_1E78FC4E8;
    *(_QWORD *)(a1 + 8) = v3;
  }
  *(_QWORD *)a1 = off_1E7906ED0;
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v10 = dispatch_queue_create_with_target_V2("sar.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v10, QOS_CLASS_UTILITY, 0);
  dispatch_activate(v10);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = v10;
  if (v10)
  {
    dispatch_retain(v10);
    *(_QWORD *)(a1 + 72) = 0;
    dispatch_release(v10);
  }
  else
  {
    *(_QWORD *)(a1 + 72) = 0;
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 80), "com.apple.telephony.abm", "sar.mod");
  *(_QWORD *)a1 = off_1E7906ED0;
  *(_QWORD *)(a1 + 268) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_BYTE *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  return a1;
}

void sub_1BF45A200(_Unwind_Exception *a1)
{
  Service *v1;
  _QWORD *v2;

  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v2);
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void SARModule::~SARModule(SARModule *this)
{
  char *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  NSObject *v40;
  NSObject *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  std::__shared_weak_count *v46;
  uint8_t v47[16];

  *(_QWORD *)this = off_1E7906ED0;
  v2 = (char *)this + 80;
  v3 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v47 = 0;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Gone!", v47, 2u);
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  if (!v4)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 15) = 0;
    *((_QWORD *)this + 16) = 0;
    if (!v7)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 15) = 0;
    *((_QWORD *)this + 16) = 0;
    if (!v7)
      goto LABEL_13;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_13:
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
  if (!v10)
    goto LABEL_17;
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
    if (!v13)
      goto LABEL_23;
  }
  else
  {
LABEL_17:
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
    if (!v13)
      goto LABEL_23;
  }
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_23:
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
  if (!v16)
    goto LABEL_27;
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
    if (!v19)
      goto LABEL_33;
  }
  else
  {
LABEL_27:
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
    if (!v19)
      goto LABEL_33;
  }
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_33:
  v22 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (!v22)
    goto LABEL_37;
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    v25 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
    if (!v25)
      goto LABEL_43;
  }
  else
  {
LABEL_37:
    v25 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
    if (!v25)
      goto LABEL_43;
  }
  v26 = (unint64_t *)&v25->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
LABEL_43:
  v28 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (!v28)
    goto LABEL_47;
  v29 = (unint64_t *)&v28->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    v31 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v31)
      goto LABEL_53;
  }
  else
  {
LABEL_47:
    v31 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v31)
      goto LABEL_53;
  }
  v32 = (unint64_t *)&v31->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
LABEL_53:
  v34 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (!v34)
    goto LABEL_57;
  v35 = (unint64_t *)&v34->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    v37 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
    if (!v37)
      goto LABEL_63;
  }
  else
  {
LABEL_57:
    v37 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
    if (!v37)
      goto LABEL_63;
  }
  v38 = (unint64_t *)&v37->__shared_owners_;
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
LABEL_63:
  MEMORY[0x1C3B89240](v2);
  v40 = *((_QWORD *)this + 9);
  if (v40)
    dispatch_release(v40);
  v41 = *((_QWORD *)this + 8);
  if (v41)
    dispatch_release(v41);
  v42 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v42)
    std::__shared_weak_count::__release_weak(v42);
  *(_QWORD *)this = off_1E7908A38;
  v43 = *((_QWORD *)this + 3);
  if (v43)
  {
    v44 = *((_QWORD *)this + 4);
    v45 = (void *)*((_QWORD *)this + 3);
    if (v44 != v43)
    {
      do
      {
        if (*(char *)(v44 - 1) < 0)
          operator delete(*(void **)(v44 - 24));
        v44 -= 24;
      }
      while (v44 != v43);
      v45 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v43;
    operator delete(v45);
  }
  v46 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v46)
    std::__shared_weak_count::__release_weak(v46);
}

{
  void *v1;

  SARModule::~SARModule(this);
  operator delete(v1);
}

void SARModule::shutdown(_QWORD *a1, uint64_t a2, dispatch_object_t *a3)
{
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  unint64_t *p_shared_owners;
  NSObject *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;

  v4 = *a3;
  if (*a3)
  {
    dispatch_retain(*a3);
    dispatch_group_enter(v4);
  }
  v5 = (std::__shared_weak_count *)a1[7];
  if (!v5 || (v6 = a1[6], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v9 = operator new(0x10uLL);
  *v9 = a1;
  v9[1] = v4;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v11 = a1[8];
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = operator new(0x18uLL);
  *v13 = v9;
  v13[1] = v6;
  v13[2] = v8;
  dispatch_async_f(v11, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::shutdown(ShutdownStage,dispatch::group_session)::$_0>(SARModule::shutdown(ShutdownStage,dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::shutdown(ShutdownStage,dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<SARModule::shutdown(ShutdownStage,dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

_BYTE *SARModule::getShutdownStages@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *v3;
  _BYTE *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(1uLL);
  *a1 = v3;
  *v3 = 3;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void SARModule::initialize(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  NSObject *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint8_t v16[16];

  v4 = a1[10];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I initialize", v16, 2u);
  }
  v5 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v5);
  }
  v6 = (std::__shared_weak_count *)a1[7];
  if (!v6 || (v7 = a1[6], (v8 = std::__shared_weak_count::lock(v6)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  v10 = operator new(0x10uLL);
  *v10 = a1;
  v10[1] = v5;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v12 = a1[8];
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v14 = operator new(0x18uLL);
  *v14 = v10;
  v14[1] = v7;
  v14[2] = v9;
  dispatch_async_f(v12, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::initialize(dispatch::group_session)::$_0>(SARModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<SARModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void SARModule::finishInitialization_sync(SARModule *this)
{
  NSObject *v2;
  const char *v3;
  size_t v4;
  void *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  const void *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  const void *v25;
  size_t v26;
  void *v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  NSObject *v33;
  const void *v34;
  size_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  NSObject *v42;
  const void *v43;
  size_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  NSObject *v51;
  capabilities::abs *v52;
  uint64_t v53;
  NSObject *v54;
  AppleSARHelper *v55;
  AppleSARHelper *v56;
  __int128 v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  char v67;
  unint64_t *v68;
  unint64_t v69;
  NSObject *v70;
  NSObject *v71;
  const char *v72;
  NSObject *v73;
  AppleSARHelper *v74;
  AppleSARHelper *v75;
  __int128 v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  char v86;
  unint64_t *v87;
  unint64_t v88;
  NSObject *v89;
  NSObject *v90;
  const char *v91;
  NSObject *v92;
  AppleSARHelper *v93;
  AppleSARHelper *v94;
  __int128 v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  char v105;
  unint64_t *v106;
  unint64_t v107;
  NSObject *v108;
  AppleSARHelper *v109;
  AppleSARHelper *v110;
  __int128 v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  char v121;
  unint64_t *v122;
  unint64_t v123;
  NSObject *v124;
  AppleSARHelper *v125;
  AppleSARHelper *v126;
  __int128 v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  char v137;
  unint64_t *v138;
  unint64_t v139;
  NSObject *v140;
  AppleSARHelper *v141;
  AppleSARHelper *v142;
  __int128 v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  char v153;
  unint64_t *v154;
  unint64_t v155;
  NSObject *v156;
  AppleSARHelper *v157;
  AppleSARHelper *v158;
  __int128 v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  char v169;
  unint64_t *v170;
  unint64_t v171;
  NSObject *v172;
  AppleSARHelper *v173;
  AppleSARHelper *v174;
  __int128 v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  char v185;
  unint64_t *v186;
  unint64_t v187;
  NSObject *v188;
  std::__shared_weak_count *v189;
  _QWORD v190[6];
  std::__shared_weak_count *v191;
  void *v192;
  dispatch_object_t v193;
  void *v194[2];
  unint64_t v195;
  _QWORD v196[6];
  std::__shared_weak_count *v197;
  void *v198;
  dispatch_object_t object;
  void *__p[2];
  unint64_t v201;
  _QWORD aBlock[6];
  std::__shared_weak_count *v203;
  const void *v204;
  dispatch_object_t v205;
  void *v206[2];
  unint64_t v207;
  const void *v208;
  void *__dst[2];
  unint64_t v210;
  unsigned int v211;
  __int128 buf;
  unint64_t v213[4];

  v213[1] = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Finish Initialization", (uint8_t *)&buf, 2u);
  }
  v3 = (const char *)(*(uint64_t (**)(SARModule *))(*(_QWORD *)this + 16))(this);
  v4 = strlen(v3);
  if (v4 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = v5;
    v210 = v8 | 0x8000000000000000;
    __dst[0] = v6;
  }
  else
  {
    HIBYTE(v210) = v4;
    v6 = __dst;
    if (!v4)
      goto LABEL_11;
  }
  memmove(v6, v3, (size_t)v5);
LABEL_11:
  *((_BYTE *)v5 + (_QWORD)v6) = 0;
  v208 = 0;
  AppleBasebandManager::create();
  v9 = buf;
  buf = 0uLL;
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  *(_OWORD *)((char *)this + 88) = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (!*((_QWORD *)&buf + 1))
    goto LABEL_20;
  v14 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
  {
LABEL_20:
    v16 = v208;
    if (!v208)
      goto LABEL_22;
    goto LABEL_21;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  v16 = v208;
  if (v208)
LABEL_21:
    CFRelease(v16);
LABEL_22:
  if (SHIBYTE(v210) < 0)
    operator delete(__dst[0]);
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v17 || (v18 = *((_QWORD *)this + 6), (v19 = std::__shared_weak_count::lock(v17)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v20 = v19;
  p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
  do
    v22 = __ldxr(p_shared_weak_owners);
  while (__stxr(v22 + 1, p_shared_weak_owners));
  v23 = (unint64_t *)&v19->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v20);
  }
  v25 = (const void *)*MEMORY[0x1E0CFBD68];
  v26 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  v189 = v20;
  if (v26 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v27 = (void *)v26;
  if (v26 >= 0x17)
  {
    v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v29 = v26 | 7;
    v30 = v29 + 1;
    v28 = (void **)operator new(v29 + 1);
    v206[1] = v27;
    v207 = v30 | 0x8000000000000000;
    v206[0] = v28;
    v20 = v189;
  }
  else
  {
    HIBYTE(v207) = v26;
    v28 = v206;
    if (!v26)
      goto LABEL_40;
  }
  memmove(v28, v25, (size_t)v27);
LABEL_40:
  *((_BYTE *)v27 + (_QWORD)v28) = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN9SARModule25finishInitialization_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e70_v24__0_shared_ptr_abm::client::Event____Event_____shared_weak_count__8l;
  aBlock[4] = this;
  aBlock[5] = v18;
  v203 = v20;
  do
    v31 = __ldxr(p_shared_weak_owners);
  while (__stxr(v31 + 1, p_shared_weak_owners));
  v32 = _Block_copy(aBlock);
  v33 = *((_QWORD *)this + 8);
  if (v33)
    dispatch_retain(*((dispatch_object_t *)this + 8));
  v204 = v32;
  v205 = v33;
  AppleBasebandManager::setEventHandler();
  if (v205)
    dispatch_release(v205);
  if (v204)
    _Block_release(v204);
  if (SHIBYTE(v207) < 0)
    operator delete(v206[0]);
  v34 = (const void *)*MEMORY[0x1E0CFB9A8];
  v35 = strlen((const char *)*MEMORY[0x1E0CFB9A8]);
  if (v35 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v36 = (void *)v35;
  if (v35 >= 0x17)
  {
    v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v38 = v35 | 7;
    v39 = v38 + 1;
    v37 = operator new(v38 + 1);
    __p[1] = v36;
    v201 = v39 | 0x8000000000000000;
    __p[0] = v37;
    v20 = v189;
  }
  else
  {
    HIBYTE(v201) = v35;
    v37 = __p;
    if (!v35)
      goto LABEL_58;
  }
  memmove(v37, v34, (size_t)v36);
LABEL_58:
  *((_BYTE *)v36 + (_QWORD)v37) = 0;
  v196[0] = MEMORY[0x1E0C809B0];
  v196[1] = 3321888768;
  v196[2] = ___ZN9SARModule25finishInitialization_syncEv_block_invoke_4;
  v196[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e70_v24__0_shared_ptr_abm::client::Event____Event_____shared_weak_count__8l;
  v196[4] = this;
  v196[5] = v18;
  v197 = v20;
  do
    v40 = __ldxr(p_shared_weak_owners);
  while (__stxr(v40 + 1, p_shared_weak_owners));
  v41 = _Block_copy(v196);
  v42 = *((_QWORD *)this + 8);
  if (v42)
    dispatch_retain(*((dispatch_object_t *)this + 8));
  v198 = v41;
  object = v42;
  AppleBasebandManager::setEventHandler();
  if (object)
    dispatch_release(object);
  if (v198)
    _Block_release(v198);
  if (SHIBYTE(v201) < 0)
    operator delete(__p[0]);
  v43 = (const void *)*MEMORY[0x1E0CFB0B0];
  v44 = strlen((const char *)*MEMORY[0x1E0CFB0B0]);
  if (v44 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v45 = (void *)v44;
  if (v44 >= 0x17)
  {
    v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v47 = v44 | 7;
    v48 = v47 + 1;
    v46 = operator new(v47 + 1);
    v194[1] = v45;
    v195 = v48 | 0x8000000000000000;
    v194[0] = v46;
    v20 = v189;
  }
  else
  {
    HIBYTE(v195) = v44;
    v46 = v194;
    if (!v44)
      goto LABEL_76;
  }
  memmove(v46, v43, (size_t)v45);
LABEL_76:
  *((_BYTE *)v45 + (_QWORD)v46) = 0;
  v190[0] = MEMORY[0x1E0C809B0];
  v190[1] = 3321888768;
  v190[2] = ___ZN9SARModule25finishInitialization_syncEv_block_invoke_2;
  v190[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e70_v24__0_shared_ptr_abm::client::Event____Event_____shared_weak_count__8l;
  v190[4] = this;
  v190[5] = v18;
  v191 = v20;
  do
    v49 = __ldxr(p_shared_weak_owners);
  while (__stxr(v49 + 1, p_shared_weak_owners));
  v50 = _Block_copy(v190);
  v51 = *((_QWORD *)this + 8);
  if (v51)
    dispatch_retain(*((dispatch_object_t *)this + 8));
  v192 = v50;
  v193 = v51;
  AppleBasebandManager::setEventHandler();
  if (v193)
    dispatch_release(v193);
  if (v192)
    _Block_release(v192);
  if (SHIBYTE(v195) < 0)
    operator delete(v194[0]);
  v52 = (capabilities::abs *)AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 11));
  capabilities::abs::supportedSARFeatures(v52);
  v53 = capabilities::abs::operator&();
  if ((_DWORD)v53)
  {
    v54 = *((_QWORD *)this + 10);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1BF335000, v54, OS_LOG_TYPE_DEFAULT, "#I Getting WiFi Status from kernel", (uint8_t *)&buf, 2u);
    }
    v55 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
    v56 = (AppleSARHelper *)off_1ED70FCB8;
    if (!off_1ED70FCB8)
    {
      AppleSARHelper::create_default_global(v55);
      v57 = buf;
      buf = 0uLL;
      v58 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
      off_1ED70FCB8 = v57;
      if (v58)
      {
        v59 = (unint64_t *)&v58->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v61 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
      if (*((_QWORD *)&buf + 1))
      {
        v62 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      v56 = (AppleSARHelper *)off_1ED70FCB8;
    }
    v64 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
    if (*(&off_1ED70FCB8 + 1))
    {
      v65 = (unint64_t *)(*(&off_1ED70FCB8 + 1) + 8);
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 1, v65));
    }
    pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
    if (*((_DWORD *)v56 + 1))
    {
      *(_QWORD *)&buf = 3;
      v213[0] = 0;
      v211 = 1;
      v67 = AppleSARHelper::callUserClientMethod(v56, 0, (const unint64_t *)&buf, 1, (char *)this + 136, 1, v213, &v211, (char *)this + 136, 1uLL);
      if (!v64)
        goto LABEL_113;
    }
    else
    {
      v67 = 0;
      if (!v64)
        goto LABEL_113;
    }
    v68 = (unint64_t *)&v64->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
      v70 = *((_QWORD *)this + 10);
      v71 = v70;
      if ((v67 & 1) != 0)
      {
LABEL_114:
        if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
        {
          if (*((_BYTE *)this + 136))
            v72 = "On";
          else
            v72 = "Off";
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v72;
          _os_log_impl(&dword_1BF335000, v70, OS_LOG_TYPE_DEFAULT, "#I Succeeded getting WiFi State: %s", (uint8_t *)&buf, 0xCu);
          v73 = *((_QWORD *)this + 10);
          if (!os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
          {
LABEL_124:
            v74 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
            v75 = (AppleSARHelper *)off_1ED70FCB8;
            if (!off_1ED70FCB8)
            {
              AppleSARHelper::create_default_global(v74);
              v76 = buf;
              buf = 0uLL;
              v77 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
              off_1ED70FCB8 = v76;
              if (v77)
              {
                v78 = (unint64_t *)&v77->__shared_owners_;
                do
                  v79 = __ldaxr(v78);
                while (__stlxr(v79 - 1, v78));
                if (!v79)
                {
                  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                  std::__shared_weak_count::__release_weak(v77);
                }
              }
              v80 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
              {
                v81 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
                do
                  v82 = __ldaxr(v81);
                while (__stlxr(v82 - 1, v81));
                if (!v82)
                {
                  ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                  std::__shared_weak_count::__release_weak(v80);
                }
              }
              v75 = (AppleSARHelper *)off_1ED70FCB8;
            }
            v83 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
            if (*(&off_1ED70FCB8 + 1))
            {
              v84 = (unint64_t *)(*(&off_1ED70FCB8 + 1) + 8);
              do
                v85 = __ldxr(v84);
              while (__stxr(v85 + 1, v84));
            }
            pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
            if (*((_DWORD *)v75 + 1))
            {
              *(_QWORD *)&buf = 3;
              v213[0] = 0;
              v211 = 1;
              v86 = AppleSARHelper::callUserClientMethod(v75, 1, (const unint64_t *)&buf, 1, (char *)this + 160, 1, v213, &v211, (char *)this + 160, 1uLL);
              if (!v83)
                goto LABEL_146;
            }
            else
            {
              v86 = 0;
              if (!v83)
                goto LABEL_146;
            }
            v87 = (unint64_t *)&v83->__shared_owners_;
            do
              v88 = __ldaxr(v87);
            while (__stlxr(v88 - 1, v87));
            if (!v88)
            {
              ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
              std::__shared_weak_count::__release_weak(v83);
              v89 = *((_QWORD *)this + 10);
              v90 = v89;
              if ((v86 & 1) != 0)
              {
LABEL_147:
                v53 = os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT);
                if ((_DWORD)v53)
                {
                  if (*((_BYTE *)this + 160))
                    v91 = "On";
                  else
                    v91 = "Off";
                  LODWORD(buf) = 136315138;
                  *(_QWORD *)((char *)&buf + 4) = v91;
                  _os_log_impl(&dword_1BF335000, v89, OS_LOG_TYPE_DEFAULT, "#I Succeeded getting Bluetooth State: %s", (uint8_t *)&buf, 0xCu);
                }
                goto LABEL_155;
              }
              goto LABEL_153;
            }
LABEL_146:
            v89 = *((_QWORD *)this + 10);
            v90 = v89;
            if ((v86 & 1) != 0)
              goto LABEL_147;
LABEL_153:
            v53 = os_log_type_enabled(v90, OS_LOG_TYPE_ERROR);
            if ((_DWORD)v53)
            {
              LOWORD(buf) = 0;
              _os_log_error_impl(&dword_1BF335000, v89, OS_LOG_TYPE_ERROR, "Failed to get Bluetooth state!", (uint8_t *)&buf, 2u);
            }
            goto LABEL_155;
          }
LABEL_123:
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1BF335000, v73, OS_LOG_TYPE_DEFAULT, "#I Getting Bluetooth Status from kernel", (uint8_t *)&buf, 2u);
          goto LABEL_124;
        }
        goto LABEL_122;
      }
LABEL_121:
      if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_error_impl(&dword_1BF335000, v70, OS_LOG_TYPE_ERROR, "Failed to get WiFi state!", (uint8_t *)&buf, 2u);
        v73 = *((_QWORD *)this + 10);
        if (!os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
          goto LABEL_124;
        goto LABEL_123;
      }
LABEL_122:
      v73 = *((_QWORD *)this + 10);
      if (!os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
        goto LABEL_124;
      goto LABEL_123;
    }
LABEL_113:
    v70 = *((_QWORD *)this + 10);
    v71 = v70;
    if ((v67 & 1) != 0)
      goto LABEL_114;
    goto LABEL_121;
  }
LABEL_155:
  capabilities::abs::supportedSARFeatures((capabilities::abs *)v53);
  if (!capabilities::abs::operator&())
    goto LABEL_308;
  v92 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1BF335000, v92, OS_LOG_TYPE_DEFAULT, "#I Getting SAR Fusion Status from kernel", (uint8_t *)&buf, 2u);
  }
  v93 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v94 = (AppleSARHelper *)off_1ED70FCB8;
  if (!off_1ED70FCB8)
  {
    AppleSARHelper::create_default_global(v93);
    v95 = buf;
    buf = 0uLL;
    v96 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
    off_1ED70FCB8 = v95;
    if (v96)
    {
      v97 = (unint64_t *)&v96->__shared_owners_;
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    v99 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
    if (*((_QWORD *)&buf + 1))
    {
      v100 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
    v94 = (AppleSARHelper *)off_1ED70FCB8;
  }
  v102 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
  if (*(&off_1ED70FCB8 + 1))
  {
    v103 = (unint64_t *)(*(&off_1ED70FCB8 + 1) + 8);
    do
      v104 = __ldxr(v103);
    while (__stxr(v104 + 1, v103));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  if (*((_DWORD *)v94 + 1))
  {
    *(_QWORD *)&buf = 3;
    v213[0] = 0;
    v211 = 1;
    v105 = AppleSARHelper::callUserClientMethod(v94, 2, (const unint64_t *)&buf, 1, (char *)this + 161, 4, v213, &v211, (char *)this + 161, 4uLL);
    if (!v102)
      goto LABEL_180;
  }
  else
  {
    v105 = 0;
    if (!v102)
      goto LABEL_180;
  }
  v106 = (unint64_t *)&v102->__shared_owners_;
  do
    v107 = __ldaxr(v106);
  while (__stlxr(v107 - 1, v106));
  if (!v107)
  {
    ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
    std::__shared_weak_count::__release_weak(v102);
    if ((v105 & 1) != 0)
      goto LABEL_183;
    goto LABEL_181;
  }
LABEL_180:
  if ((v105 & 1) != 0)
    goto LABEL_183;
LABEL_181:
  v108 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_error_impl(&dword_1BF335000, v108, OS_LOG_TYPE_ERROR, "Failed to get Accessory State!", (uint8_t *)&buf, 2u);
  }
LABEL_183:
  v109 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v110 = (AppleSARHelper *)off_1ED70FCB8;
  if (!off_1ED70FCB8)
  {
    AppleSARHelper::create_default_global(v109);
    v111 = buf;
    buf = 0uLL;
    v112 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
    off_1ED70FCB8 = v111;
    if (v112)
    {
      v113 = (unint64_t *)&v112->__shared_owners_;
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
    }
    v115 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
    if (*((_QWORD *)&buf + 1))
    {
      v116 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
      do
        v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }
    v110 = (AppleSARHelper *)off_1ED70FCB8;
  }
  v118 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
  if (*(&off_1ED70FCB8 + 1))
  {
    v119 = (unint64_t *)(*(&off_1ED70FCB8 + 1) + 8);
    do
      v120 = __ldxr(v119);
    while (__stxr(v120 + 1, v119));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  if (*((_DWORD *)v110 + 1))
  {
    *(_QWORD *)&buf = 3;
    v213[0] = 0;
    v211 = 1;
    v121 = AppleSARHelper::callUserClientMethod(v110, 3, (const unint64_t *)&buf, 1, (char *)this + 165, 1, v213, &v211, (char *)this + 165, 1uLL);
    if (!v118)
      goto LABEL_205;
  }
  else
  {
    v121 = 0;
    if (!v118)
      goto LABEL_205;
  }
  v122 = (unint64_t *)&v118->__shared_owners_;
  do
    v123 = __ldaxr(v122);
  while (__stlxr(v123 - 1, v122));
  if (!v123)
  {
    ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
    std::__shared_weak_count::__release_weak(v118);
    if ((v121 & 1) != 0)
      goto LABEL_208;
    goto LABEL_206;
  }
LABEL_205:
  if ((v121 & 1) != 0)
    goto LABEL_208;
LABEL_206:
  v124 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_error_impl(&dword_1BF335000, v124, OS_LOG_TYPE_ERROR, "Failed to get OBD and Tuner State!", (uint8_t *)&buf, 2u);
  }
LABEL_208:
  *((_BYTE *)this + 166) = *((_BYTE *)this + 165);
  v125 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v126 = (AppleSARHelper *)off_1ED70FCB8;
  if (!off_1ED70FCB8)
  {
    AppleSARHelper::create_default_global(v125);
    v127 = buf;
    buf = 0uLL;
    v128 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
    off_1ED70FCB8 = v127;
    if (v128)
    {
      v129 = (unint64_t *)&v128->__shared_owners_;
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
    }
    v131 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
    if (*((_QWORD *)&buf + 1))
    {
      v132 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
      do
        v133 = __ldaxr(v132);
      while (__stlxr(v133 - 1, v132));
      if (!v133)
      {
        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
        std::__shared_weak_count::__release_weak(v131);
      }
    }
    v126 = (AppleSARHelper *)off_1ED70FCB8;
  }
  v134 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
  if (*(&off_1ED70FCB8 + 1))
  {
    v135 = (unint64_t *)(*(&off_1ED70FCB8 + 1) + 8);
    do
      v136 = __ldxr(v135);
    while (__stxr(v136 + 1, v135));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  if (*((_DWORD *)v126 + 1))
  {
    *(_QWORD *)&buf = 3;
    v213[0] = 0;
    v211 = 1;
    v137 = AppleSARHelper::callUserClientMethod(v126, 6, (const unint64_t *)&buf, 1, (char *)this + 167, 1, v213, &v211, (char *)this + 167, 1uLL);
    if (!v134)
      goto LABEL_230;
  }
  else
  {
    v137 = 0;
    if (!v134)
      goto LABEL_230;
  }
  v138 = (unint64_t *)&v134->__shared_owners_;
  do
    v139 = __ldaxr(v138);
  while (__stlxr(v139 - 1, v138));
  if (!v139)
  {
    ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
    std::__shared_weak_count::__release_weak(v134);
    if ((v137 & 1) != 0)
      goto LABEL_233;
    goto LABEL_231;
  }
LABEL_230:
  if ((v137 & 1) != 0)
    goto LABEL_233;
LABEL_231:
  v140 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v140, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_error_impl(&dword_1BF335000, v140, OS_LOG_TYPE_ERROR, "Failed to get Speaker State!", (uint8_t *)&buf, 2u);
  }
LABEL_233:
  v141 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v142 = (AppleSARHelper *)off_1ED70FCB8;
  if (!off_1ED70FCB8)
  {
    AppleSARHelper::create_default_global(v141);
    v143 = buf;
    buf = 0uLL;
    v144 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
    off_1ED70FCB8 = v143;
    if (v144)
    {
      v145 = (unint64_t *)&v144->__shared_owners_;
      do
        v146 = __ldaxr(v145);
      while (__stlxr(v146 - 1, v145));
      if (!v146)
      {
        ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
        std::__shared_weak_count::__release_weak(v144);
      }
    }
    v147 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
    if (*((_QWORD *)&buf + 1))
    {
      v148 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
      do
        v149 = __ldaxr(v148);
      while (__stlxr(v149 - 1, v148));
      if (!v149)
      {
        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
        std::__shared_weak_count::__release_weak(v147);
      }
    }
    v142 = (AppleSARHelper *)off_1ED70FCB8;
  }
  v150 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
  if (*(&off_1ED70FCB8 + 1))
  {
    v151 = (unint64_t *)(*(&off_1ED70FCB8 + 1) + 8);
    do
      v152 = __ldxr(v151);
    while (__stxr(v152 + 1, v151));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  if (*((_DWORD *)v142 + 1))
  {
    *(_QWORD *)&buf = 3;
    v213[0] = 0;
    v211 = 1;
    v153 = AppleSARHelper::callUserClientMethod(v142, 7, (const unint64_t *)&buf, 1, (char *)this + 168, 1, v213, &v211, (char *)this + 168, 1uLL);
    if (!v150)
      goto LABEL_255;
  }
  else
  {
    v153 = 0;
    if (!v150)
      goto LABEL_255;
  }
  v154 = (unint64_t *)&v150->__shared_owners_;
  do
    v155 = __ldaxr(v154);
  while (__stlxr(v155 - 1, v154));
  if (!v155)
  {
    ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
    std::__shared_weak_count::__release_weak(v150);
    if ((v153 & 1) != 0)
      goto LABEL_258;
    goto LABEL_256;
  }
LABEL_255:
  if ((v153 & 1) != 0)
    goto LABEL_258;
LABEL_256:
  v156 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v156, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_error_impl(&dword_1BF335000, v156, OS_LOG_TYPE_ERROR, "Failed to get Grip State!", (uint8_t *)&buf, 2u);
  }
LABEL_258:
  *((_BYTE *)this + 169) = *((_BYTE *)this + 168);
  v157 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v158 = (AppleSARHelper *)off_1ED70FCB8;
  if (!off_1ED70FCB8)
  {
    AppleSARHelper::create_default_global(v157);
    v159 = buf;
    buf = 0uLL;
    v160 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
    off_1ED70FCB8 = v159;
    if (v160)
    {
      v161 = (unint64_t *)&v160->__shared_owners_;
      do
        v162 = __ldaxr(v161);
      while (__stlxr(v162 - 1, v161));
      if (!v162)
      {
        ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
        std::__shared_weak_count::__release_weak(v160);
      }
    }
    v163 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
    if (*((_QWORD *)&buf + 1))
    {
      v164 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
      do
        v165 = __ldaxr(v164);
      while (__stlxr(v165 - 1, v164));
      if (!v165)
      {
        ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
        std::__shared_weak_count::__release_weak(v163);
      }
    }
    v158 = (AppleSARHelper *)off_1ED70FCB8;
  }
  v166 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
  if (*(&off_1ED70FCB8 + 1))
  {
    v167 = (unint64_t *)(*(&off_1ED70FCB8 + 1) + 8);
    do
      v168 = __ldxr(v167);
    while (__stxr(v168 + 1, v167));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  if (*((_DWORD *)v158 + 1))
  {
    *(_QWORD *)&buf = 3;
    v213[0] = 0;
    v211 = 1;
    v169 = AppleSARHelper::callUserClientMethod(v158, 8, (const unint64_t *)&buf, 1, (char *)this + 170, 1, v213, &v211, (char *)this + 170, 1uLL);
    if (!v166)
      goto LABEL_280;
  }
  else
  {
    v169 = 0;
    if (!v166)
      goto LABEL_280;
  }
  v170 = (unint64_t *)&v166->__shared_owners_;
  do
    v171 = __ldaxr(v170);
  while (__stlxr(v171 - 1, v170));
  if (!v171)
  {
    ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
    std::__shared_weak_count::__release_weak(v166);
    if ((v169 & 1) != 0)
      goto LABEL_283;
    goto LABEL_281;
  }
LABEL_280:
  if ((v169 & 1) != 0)
    goto LABEL_283;
LABEL_281:
  v172 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v172, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_error_impl(&dword_1BF335000, v172, OS_LOG_TYPE_ERROR, "Failed to get Power State!", (uint8_t *)&buf, 2u);
  }
LABEL_283:
  v173 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v174 = (AppleSARHelper *)off_1ED70FCB8;
  if (!off_1ED70FCB8)
  {
    AppleSARHelper::create_default_global(v173);
    v175 = buf;
    buf = 0uLL;
    v176 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
    off_1ED70FCB8 = v175;
    if (v176)
    {
      v177 = (unint64_t *)&v176->__shared_owners_;
      do
        v178 = __ldaxr(v177);
      while (__stlxr(v178 - 1, v177));
      if (!v178)
      {
        ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
        std::__shared_weak_count::__release_weak(v176);
      }
    }
    v179 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
    if (*((_QWORD *)&buf + 1))
    {
      v180 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
      do
        v181 = __ldaxr(v180);
      while (__stlxr(v181 - 1, v180));
      if (!v181)
      {
        ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
        std::__shared_weak_count::__release_weak(v179);
      }
    }
    v174 = (AppleSARHelper *)off_1ED70FCB8;
  }
  v182 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
  if (*(&off_1ED70FCB8 + 1))
  {
    v183 = (unint64_t *)(*(&off_1ED70FCB8 + 1) + 8);
    do
      v184 = __ldxr(v183);
    while (__stxr(v184 + 1, v183));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  if (*((_DWORD *)v174 + 1))
  {
    *(_QWORD *)&buf = 3;
    v213[0] = 0;
    v211 = 1;
    v185 = AppleSARHelper::callUserClientMethod(v174, 9, (const unint64_t *)&buf, 1, (char *)this + 171, 1, v213, &v211, (char *)this + 171, 1uLL);
    if (!v182)
      goto LABEL_305;
  }
  else
  {
    v185 = 0;
    if (!v182)
      goto LABEL_305;
  }
  v186 = (unint64_t *)&v182->__shared_owners_;
  do
    v187 = __ldaxr(v186);
  while (__stlxr(v187 - 1, v186));
  if (!v187)
  {
    ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
    std::__shared_weak_count::__release_weak(v182);
    if ((v185 & 1) != 0)
      goto LABEL_308;
    goto LABEL_306;
  }
LABEL_305:
  if ((v185 & 1) != 0)
    goto LABEL_308;
LABEL_306:
  v188 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v188, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_error_impl(&dword_1BF335000, v188, OS_LOG_TYPE_ERROR, "Failed to get Wrist State!", (uint8_t *)&buf, 2u);
  }
LABEL_308:
  if (v191)
    std::__shared_weak_count::__release_weak(v191);
  if (v197)
    std::__shared_weak_count::__release_weak(v197);
  if (v203)
    std::__shared_weak_count::__release_weak(v203);
  std::__shared_weak_count::__release_weak(v20);
}

void sub_1BF45BDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,std::__shared_weak_count *a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50)
{
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  if (a20)
    std::__shared_weak_count::__release_weak(a20);
  if (a35)
    std::__shared_weak_count::__release_weak(a35);
  if (a50)
    std::__shared_weak_count::__release_weak(a50);
  std::__shared_weak_count::__release_weak(a11);
  _Unwind_Resume(a1);
}

void ___ZN9SARModule25finishInitialization_syncEv_block_invoke(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  const void *v11;
  size_t v12;
  void **v13;
  void **v14;
  abm::client::Event *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  _QWORD *v23;
  NSObject *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  abm::client::Event *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  _QWORD *v36;
  NSObject *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  __int128 v41;
  uint64_t v42;
  void *__p[2];
  uint64_t v44;
  _QWORD v45[2];
  unint64_t v46;
  uint64_t v47;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (_QWORD *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v46 = 0xAAAAAAAAAAAAAAAALL;
      abm::client::Event::getData(*(abm::client::Event **)a2);
      v11 = (const void *)0xAAAAAAAAAAAAAAAALL;
      if (!ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
        goto LABEL_47;
      v45[0] = 0xAAAAAAAAAAAAAAAALL;
      v45[1] = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v45, (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL);
      __p[0] = 0;
      __p[1] = 0;
      v44 = 0;
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v47, (const char *)*MEMORY[0x1E0CFB530]);
      ctu::cf::map_adapter::getString();
      MEMORY[0x1C3B8936C](&v47);
      v44 = v42;
      *(_OWORD *)__p = v41;
      if (v42 >= 0)
        v12 = HIBYTE(v42);
      else
        v12 = *((_QWORD *)&v41 + 1);
      if (v12 == strlen((const char *)*MEMORY[0x1E0CFB980])
        && (v42 >= 0 ? (v13 = __p) : (v13 = (void **)__p[0]), !memcmp(v13, (const void *)*MEMORY[0x1E0CFB980], v12)))
      {
        v29 = *(abm::client::Event **)a2;
        v30 = *(_QWORD *)(a2 + 8);
        if (v30)
        {
          v31 = (unint64_t *)(v30 + 8);
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
        }
        v33 = (std::__shared_weak_count *)v5[7];
        if (!v33 || (v34 = v5[6], (v35 = std::__shared_weak_count::lock(v33)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v22 = v35;
        v36 = operator new(0x18uLL);
        *v36 = v5;
        v36[1] = v29;
        v36[2] = v30;
        v37 = v5[8];
        v38 = (unint64_t *)&v22->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
        v40 = operator new(0x18uLL);
        *v40 = v36;
        v40[1] = v34;
        v40[2] = v22;
        dispatch_async_f(v37, v40, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_25finishInitialization_syncEvEUb_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
        do
          v28 = __ldaxr(v38);
        while (__stlxr(v28 - 1, v38));
      }
      else
      {
        if (v12 != strlen((const char *)*MEMORY[0x1E0CFBB68])
          || (v42 >= 0 ? (v14 = __p) : (v14 = (void **)__p[0]), memcmp(v14, (const void *)*MEMORY[0x1E0CFBB68], v12)))
        {
LABEL_44:
          if (SHIBYTE(v44) < 0)
            operator delete(__p[0]);
          MEMORY[0x1C3B893A8](v45);
          v11 = (const void *)v46;
LABEL_47:
          if (v11)
            CFRelease(v11);
          return;
        }
        v15 = *(abm::client::Event **)a2;
        v16 = *(_QWORD *)(a2 + 8);
        if (v16)
        {
          v17 = (unint64_t *)(v16 + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        v19 = (std::__shared_weak_count *)v5[7];
        if (!v19 || (v20 = v5[6], (v21 = std::__shared_weak_count::lock(v19)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v22 = v21;
        v23 = operator new(0x18uLL);
        *v23 = v5;
        v23[1] = v15;
        v23[2] = v16;
        v24 = v5[8];
        v25 = (unint64_t *)&v22->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
        v27 = operator new(0x18uLL);
        *v27 = v23;
        v27[1] = v20;
        v27[2] = v22;
        dispatch_async_f(v24, v27, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_25finishInitialization_syncEvEUb_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
        do
          v28 = __ldaxr(v25);
        while (__stlxr(v28 - 1, v25));
      }
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
      goto LABEL_44;
    }
  }
}

uint64_t __copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN9SARModule25finishInitialization_syncEv_block_invoke_4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  SARModule *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (SARModule *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (v8)
      {
        if (!v6)
          return;
        goto LABEL_7;
      }
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
LABEL_7:
        SARModule::dumpSARFusionState(v3);
    }
  }
}

void SARModule::dumpSARFusionState(SARModule *this)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  const char *v5;
  const char *v6;
  const char *v7;
  int v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v3 = sar::toStringAccessory((sar *)*(unsigned int *)((char *)this + 161));
    v4 = *(_DWORD *)((char *)this + 161);
    v13 = 136315394;
    v14 = v3;
    v15 = 1024;
    v16 = v4;
    _os_log_debug_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEBUG, "#D SAR Fusion: Accessory: %s (0x%x)", (uint8_t *)&v13, 0x12u);
    v2 = *((_QWORD *)this + 10);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
LABEL_3:
      if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    goto LABEL_3;
  }
  if ((*((_BYTE *)this + 165) & 0xF) != 0)
    v5 = "BODY";
  else
    v5 = "HEAD";
  v13 = 136315138;
  v14 = (uint64_t)v5;
  _os_log_debug_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEBUG, "#D SAR Fusion: Sar Selection: %s", (uint8_t *)&v13, 0xCu);
  v2 = *((_QWORD *)this + 10);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
LABEL_4:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_14:
  if (*((unsigned __int8 *)this + 165) >= 0x10u)
    v6 = "NONFREE";
  else
    v6 = "FREE";
  v13 = 136315138;
  v14 = (uint64_t)v6;
  _os_log_debug_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEBUG, "#D SAR Fusion: Tuner State: %s SPACE", (uint8_t *)&v13, 0xCu);
  v2 = *((_QWORD *)this + 10);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
LABEL_5:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_18:
  if (*((_BYTE *)this + 167))
    v7 = "ON";
  else
    v7 = "OFF";
  v13 = 136315138;
  v14 = (uint64_t)v7;
  _os_log_debug_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEBUG, "#D SAR Fusion: Speaker: %s", (uint8_t *)&v13, 0xCu);
  v2 = *((_QWORD *)this + 10);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
LABEL_6:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      goto LABEL_7;
    goto LABEL_28;
  }
LABEL_22:
  v8 = *((unsigned __int8 *)this + 168);
  v9 = "Default Hand Position";
  if (v8 == 1)
    v9 = "Left Hand";
  if (v8 == 2)
    v10 = "Right Hand";
  else
    v10 = v9;
  v13 = 136315138;
  v14 = (uint64_t)v10;
  _os_log_debug_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEBUG, "#D SAR Fusion: Hand Grip: %s", (uint8_t *)&v13, 0xCu);
  v2 = *((_QWORD *)this + 10);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
LABEL_7:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      return;
    goto LABEL_36;
  }
LABEL_28:
  if ((*((_BYTE *)this + 170) & 8) != 0)
  {
    v11 = "Arcas";
  }
  else if ((*((_BYTE *)this + 170) & 4) != 0)
  {
    v11 = "Callisto";
  }
  else if ((*((_BYTE *)this + 170) & 2) != 0)
  {
    v11 = "USB";
  }
  else
  {
    v11 = "Power Off";
  }
  v13 = 136315138;
  v14 = (uint64_t)v11;
  _os_log_debug_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEBUG, "#D SAR Fusion: Power: %s", (uint8_t *)&v13, 0xCu);
  v2 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
LABEL_36:
    if (*((_BYTE *)this + 171))
      v12 = "ON";
    else
      v12 = "OFF";
    v13 = 136315138;
    v14 = (uint64_t)v12;
    _os_log_debug_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEBUG, "#D SAR Fusion: Wrist: %s", (uint8_t *)&v13, 0xCu);
  }
}

void ___ZN9SARModule25finishInitialization_syncEv_block_invoke_2(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  const void *v11;
  xpc_object_t v12;
  NSObject *v13;
  xpc_object_t value;
  int v15;
  xpc_object_t object;
  CFTypeRef cf;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      abm::client::Event::getData(*a2);
      if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
      {
        ctu::cf_to_xpc((ctu *)0xAAAAAAAAAAAAAAAALL, v11);
        v12 = object;
        if (object && MEMORY[0x1C3B8A86C](object) == MEMORY[0x1E0C812F8])
          xpc_retain(object);
        else
          v12 = xpc_null_create();
        xpc_release(object);
        value = xpc_dictionary_get_value(v12, (const char *)*MEMORY[0x1E0CFB040]);
        object = value;
        if (value)
          xpc_retain(value);
        else
          object = xpc_null_create();
        v15 = xpc::dyn_cast_or_default((xpc *)&object, 0);
        xpc_release(object);
        if (v15)
          SARModule::submitCASARFusion(v5, 0);
        xpc_release(v12);
      }
      else
      {
        v13 = *(NSObject **)(v5 + 80);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          LOWORD(object) = 0;
          _os_log_error_impl(&dword_1BF335000, v13, OS_LOG_TYPE_ERROR, "No input is given for voice call active state", (uint8_t *)&object, 2u);
        }
      }
      if (cf)
        CFRelease(cf);
    }
  }
}

void sub_1BF45C9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, const void *a10)
{
  void *v10;

  xpc_release(v10);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  _Unwind_Resume(a1);
}

void SARModule::submitCASARFusion(uint64_t a1, int a2)
{
  xpc_object_t v4;
  uint64_t v5;
  xpc_object_t v6;
  uint64_t v7;
  const char *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  const char *v11;
  xpc_object_t v12;
  xpc_object_t v13;
  const char *v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  const char *v21;
  xpc_object_t v22;
  xpc_object_t v23;
  const char *v24;
  xpc_object_t v25;
  xpc_object_t v26;
  int v27;
  const char *v28;
  const char *v29;
  xpc_object_t v30;
  uint64_t v31;
  xpc_object_t v32;
  const char *v33;
  xpc_object_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  xpc_object_t v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  xpc_object_t v41;
  xpc_object_t v42;
  xpc_object_t v43;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  xpc_object_t v47;
  xpc_object_t v48;
  xpc_object_t v49;
  xpc_object_t v50;
  xpc_object_t v51;
  xpc_object_t v52;
  xpc_object_t v53;
  const void *v54;
  size_t v55;
  size_t v56;
  __int128 *p_string;
  uint64_t v58;
  uint64_t v59;
  const void *v60;
  xpc_object_t object;
  __int128 string;
  unint64_t v63;
  timeval v64;

  v64.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v64.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v64, 0);
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = MEMORY[0x1E0C812F8];
  if (v4 || (v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v4) == v5)
    {
      xpc_retain(v4);
      v6 = v4;
    }
    else
    {
      v6 = xpc_null_create();
    }
  }
  else
  {
    v6 = xpc_null_create();
    v4 = 0;
  }
  xpc_release(v4);
  v7 = *(_QWORD *)(a1 + 304);
  if (v7)
  {
    *(_QWORD *)(a1 + 304) = v64.tv_sec - v7;
    if ((*(_BYTE *)(a1 + 166) & 0xF) != 0)
      v8 = "Head";
    else
      v8 = "Body";
    v9 = xpc_string_create(v8);
    if (!v9)
      v9 = xpc_null_create();
    xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBB40], v9);
    v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    if (*(unsigned __int8 *)(a1 + 166) >= 0x10u)
      v11 = "Freespace";
    else
      v11 = "Non-Freespace";
    v12 = xpc_string_create(v11);
    if (!v12)
      v12 = xpc_null_create();
    xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBCC8], v12);
    v13 = xpc_null_create();
    xpc_release(v12);
    xpc_release(v13);
    if (*(_BYTE *)(a1 + 169) == 2)
    {
      v14 = "Right";
    }
    else if (*(_BYTE *)(a1 + 168) == 1)
    {
      v14 = "Left";
    }
    else
    {
      v14 = "Default";
    }
    v19 = xpc_string_create(v14);
    if (!v19)
      v19 = xpc_null_create();
  }
  else
  {
    v15 = xpc_string_create("NONE");
    if (!v15)
      v15 = xpc_null_create();
    xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBB40], v15);
    v16 = xpc_null_create();
    xpc_release(v15);
    xpc_release(v16);
    v17 = xpc_string_create("NONE");
    if (!v17)
      v17 = xpc_null_create();
    xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBCC8], v17);
    v18 = xpc_null_create();
    xpc_release(v17);
    xpc_release(v18);
    v19 = xpc_string_create("NONE");
    if (!v19)
      v19 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBB38], v19);
  v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  if ((*(_BYTE *)(a1 + 165) & 0xF) != 0)
    v21 = "Head";
  else
    v21 = "Body";
  v22 = xpc_string_create(v21);
  if (!v22)
    v22 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBB30], v22);
  v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  if (*(unsigned __int8 *)(a1 + 165) >= 0x10u)
    v24 = "Freespace";
  else
    v24 = "Non-Freespace";
  v25 = xpc_string_create(v24);
  if (!v25)
    v25 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBCC0], v25);
  v26 = xpc_null_create();
  xpc_release(v25);
  xpc_release(v26);
  v27 = *(unsigned __int8 *)(a1 + 168);
  v28 = "Default";
  if (v27 == 1)
    v28 = "Left";
  if (v27 == 2)
    v29 = "Right";
  else
    v29 = v28;
  v30 = xpc_string_create(v29);
  v31 = MEMORY[0x1E0C812F8];
  if (!v30)
    v30 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBB28], v30);
  v32 = xpc_null_create();
  xpc_release(v30);
  xpc_release(v32);
  if (a2 == 1)
  {
    HIBYTE(v63) = 12;
    strcpy((char *)&string, "EventUpdated");
  }
  else
  {
    if (a2)
      v33 = "UnknownReason";
    else
      v33 = "CallConnected";
    HIBYTE(v63) = 13;
    *(_QWORD *)&string = *(_QWORD *)v33;
    *(_QWORD *)((char *)&string + 5) = *(_QWORD *)(v33 + 5);
    BYTE13(string) = 0;
  }
  v34 = xpc_string_create((const char *)&string);
  if (!v34)
    v34 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBFD0], v34);
  v35 = xpc_null_create();
  xpc_release(v34);
  xpc_release(v35);
  if (SHIBYTE(v63) < 0)
    operator delete((void *)string);
  v36 = xpc_int64_create(*(_QWORD *)(a1 + 304));
  if (!v36)
    v36 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFB8F8], v36);
  v37 = xpc_null_create();
  xpc_release(v36);
  xpc_release(v37);
  v38 = xpc_dictionary_create(0, 0, 0);
  if (v38 || (v38 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v38) == v31)
    {
      xpc_retain(v38);
      v39 = v38;
    }
    else
    {
      v39 = xpc_null_create();
    }
  }
  else
  {
    v39 = xpc_null_create();
    v38 = 0;
  }
  xpc_release(v38);
  v40 = xpc_string_create((const char *)*MEMORY[0x1E0CFB368]);
  if (!v40)
    v40 = xpc_null_create();
  xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x1E0CFB3E8], v40);
  v41 = xpc_null_create();
  xpc_release(v40);
  xpc_release(v41);
  v42 = xpc_string_create((const char *)*MEMORY[0x1E0CFB660]);
  if (!v42)
    v42 = xpc_null_create();
  xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x1E0CFB3F0], v42);
  v43 = xpc_null_create();
  xpc_release(v42);
  xpc_release(v43);
  v44 = xpc_string_create((const char *)*MEMORY[0x1E0CFB218]);
  if (!v44)
    v44 = xpc_null_create();
  xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x1E0CFB278], v44);
  v45 = xpc_null_create();
  xpc_release(v44);
  xpc_release(v45);
  if (v6)
  {
    xpc_retain(v6);
    v46 = v6;
  }
  else
  {
    v46 = xpc_null_create();
  }
  xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x1E0CFB9D8], v46);
  v47 = xpc_null_create();
  xpc_release(v46);
  xpc_release(v47);
  v48 = xpc_dictionary_create(0, 0, 0);
  if (v48 || (v48 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v48) == v31)
    {
      xpc_retain(v48);
      v49 = v48;
    }
    else
    {
      v49 = xpc_null_create();
    }
  }
  else
  {
    v49 = xpc_null_create();
    v48 = 0;
  }
  xpc_release(v48);
  v50 = xpc_string_create((const char *)*MEMORY[0x1E0CFAFE8]);
  if (!v50)
    v50 = xpc_null_create();
  xpc_dictionary_set_value(v49, (const char *)*MEMORY[0x1E0CFB020], v50);
  v51 = xpc_null_create();
  xpc_release(v50);
  xpc_release(v51);
  if (v39)
  {
    xpc_retain(v39);
    v52 = v39;
  }
  else
  {
    v52 = xpc_null_create();
  }
  xpc_dictionary_set_value(v49, (const char *)*MEMORY[0x1E0CFB018], v52);
  v53 = xpc_null_create();
  xpc_release(v52);
  xpc_release(v53);
  v54 = (const void *)*MEMORY[0x1E0CFB5E0];
  v55 = strlen((const char *)*MEMORY[0x1E0CFB5E0]);
  if (v55 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v56 = v55;
  if (v55 >= 0x17)
  {
    v58 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v55 | 7) != 0x17)
      v58 = v55 | 7;
    v59 = v58 + 1;
    p_string = (__int128 *)operator new(v58 + 1);
    *((_QWORD *)&string + 1) = v56;
    v63 = v59 | 0x8000000000000000;
    *(_QWORD *)&string = p_string;
LABEL_95:
    memmove(p_string, v54, v56);
    *((_BYTE *)p_string + v56) = 0;
    object = v49;
    if (v49)
      goto LABEL_91;
    goto LABEL_96;
  }
  HIBYTE(v63) = v55;
  p_string = &string;
  if (v55)
    goto LABEL_95;
  LOBYTE(string) = 0;
  object = v49;
  if (v49)
  {
LABEL_91:
    xpc_retain(v49);
    goto LABEL_97;
  }
LABEL_96:
  object = xpc_null_create();
LABEL_97:
  v60 = 0;
  Service::runCommand(a1, (uint64_t)&string, &object, &v60);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(v63) < 0)
    operator delete((void *)string);
  *(_QWORD *)(a1 + 304) = v64.tv_sec;
  xpc_release(v49);
  xpc_release(v39);
  xpc_release(v6);
}

void sub_1BF45D398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;
  void *v19;

  xpc_release(object);
  if (a17 < 0)
    operator delete(__p);
  xpc_release(v19);
  xpc_release(v18);
  xpc_release(v17);
  _Unwind_Resume(a1);
}

void SARModule::initializeHelpers_sync(SARModule *this)
{
  NSObject *v2;
  queue v3;
  NSObject *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  capabilities::abs *v12;
  NSObject *v13;
  CMHandDetectionDelegate *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  AppleSARHelper *v23;
  uint64_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  NSObject *v37;
  unint64_t *v38;
  unint64_t v39;
  NSObject *v40;
  capabilities::abs *v41;
  _QWORD v42[6];
  std::__shared_weak_count *v43;
  void *aBlock;
  dispatch_object_t object;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  uint8_t buf[16];

  v2 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Set up SAR Helpers", buf, 2u);
  }
  v4 = *((_QWORD *)this + 8);
  v48 = v4;
  if (v4)
    dispatch_retain(v4);
  CMOnBodyDelegate::create(&v48, v3, buf);
  v5 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  *(_OWORD *)((char *)this + 104) = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v10 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (capabilities::abs *)v48;
  if (v48)
    dispatch_release(v48);
  if (*((_QWORD *)this + 13)
    || (v13 = *((_QWORD *)this + 10),
        v12 = (capabilities::abs *)os_log_type_enabled(v13, OS_LOG_TYPE_ERROR),
        !(_DWORD)v12))
  {
    capabilities::abs::supportedSARFeatures(v12);
    if (!capabilities::abs::operator&())
      goto LABEL_21;
    goto LABEL_20;
  }
  *(_WORD *)buf = 0;
  _os_log_error_impl(&dword_1BF335000, v13, OS_LOG_TYPE_ERROR, "Failed to create core motion on-body manager", buf, 2u);
  capabilities::abs::supportedSARFeatures(v41);
  if (capabilities::abs::operator&())
  {
LABEL_20:
    SARModule::initializeWiFi_sync(this);
    SARModule::initializeBluetooth_sync(this);
  }
LABEL_21:
  SARModule::initializeAudio_sync(this);
  if (CMHandDetectionDelegate::isSupported(v14))
    SARModule::initializeHandDetection_sync(this);
  SARModule::initializeOBD_sync(this);
  SARModule::initializeAccessory_sync(this);
  SARModule::initializePowerSource_sync(this);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v15 || (v16 = *((_QWORD *)this + 6), (v17 = std::__shared_weak_count::lock(v15)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v18 = v17;
  p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
  do
    v20 = __ldxr(p_shared_weak_owners);
  while (__stxr(v20 + 1, p_shared_weak_owners));
  v21 = (unint64_t *)&v17->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v18);
  }
  v23 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v24 = off_1ED70FCB8;
  if (!off_1ED70FCB8)
  {
    AppleSARHelper::create_default_global(v23);
    v25 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v26 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
    off_1ED70FCB8 = v25;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v30 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v24 = off_1ED70FCB8;
  }
  v32 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
  v46 = v24;
  v47 = *(&off_1ED70FCB8 + 1);
  if (*(&off_1ED70FCB8 + 1))
  {
    v33 = (unint64_t *)(*(&off_1ED70FCB8 + 1) + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v42[0] = MEMORY[0x1E0C809B0];
  v42[1] = 3321888768;
  v42[2] = ___ZN9SARModule22initializeHelpers_syncEv_block_invoke;
  v42[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e12_v20__0i8_v12l;
  v42[4] = this;
  v42[5] = v16;
  v43 = v18;
  do
    v35 = __ldxr(p_shared_weak_owners);
  while (__stxr(v35 + 1, p_shared_weak_owners));
  v36 = _Block_copy(v42);
  v37 = *((_QWORD *)this + 8);
  if (v37)
    dispatch_retain(*((dispatch_object_t *)this + 8));
  aBlock = v36;
  object = v37;
  AppleSARHelper::registerSARServiceCallback();
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (!v32)
    goto LABEL_58;
  v38 = (unint64_t *)&v32->__shared_owners_;
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (v39)
  {
LABEL_58:
    v40 = *((_QWORD *)this + 10);
    if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      goto LABEL_60;
    goto LABEL_59;
  }
  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
  std::__shared_weak_count::__release_weak(v32);
  v40 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
  {
LABEL_59:
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v40, OS_LOG_TYPE_DEFAULT, "#I Finish Initialization Done", buf, 2u);
  }
LABEL_60:
  if (v43)
    std::__shared_weak_count::__release_weak(v43);
  std::__shared_weak_count::__release_weak(v18);
}

void sub_1BF45D900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, char a18)
{
  std::__shared_weak_count *v18;

  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(a1);
}

void sub_1BF45D95C(_Unwind_Exception *a1)
{
  uint64_t v1;
  NSObject *v3;

  v3 = *(NSObject **)(v1 - 72);
  if (v3)
  {
    dispatch_release(v3);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1BF45D954);
}

void SARModule::initializeWiFi_sync(SARModule *this)
{
  NSObject *v2;
  WiFiManager *v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  NSObject *v13;
  void **v14;
  _QWORD *v15;
  NSObject *v16;
  _QWORD aBlock[5];
  void *v18;
  NSObject *v19;
  uint8_t buf[16];

  v2 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing WiFi", buf, 2u);
  }
  v3 = (WiFiManager *)(*(uint64_t (**)(SARModule *))(*(_QWORD *)this + 16))(this);
  WiFiManager::create(v3, (WiFiManager **)buf);
  v4 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  *(_OWORD *)((char *)this + 120) = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_12;
  v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (_QWORD *)*((_QWORD *)this + 15);
    if (v11)
    {
LABEL_13:
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = ___ZN9SARModule19initializeWiFi_syncEv_block_invoke;
      aBlock[3] = &__block_descriptor_40_e8_v12__0B8l;
      aBlock[4] = this;
      v12 = _Block_copy(aBlock);
      v13 = *((_QWORD *)this + 8);
      if (v13)
        dispatch_retain(v13);
      v18 = v12;
      v19 = v13;
      v14 = (void **)v11[6];
      if ((unint64_t)v14 >= v11[7])
      {
        v15 = std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>(v11 + 5, (uint64_t)&v18);
        v13 = v19;
        v11[6] = v15;
        if (!v13)
        {
LABEL_21:
          if (v18)
            _Block_release(v18);
          return;
        }
LABEL_20:
        dispatch_release(v13);
        goto LABEL_21;
      }
      if (v12)
      {
        *v14 = _Block_copy(v12);
        v14[1] = v13;
        if (!v13)
          goto LABEL_19;
      }
      else
      {
        *v14 = 0;
        v14[1] = v13;
        if (!v13)
        {
LABEL_19:
          v11[6] = v14 + 2;
          if (!v13)
            goto LABEL_21;
          goto LABEL_20;
        }
      }
      dispatch_retain(v13);
      goto LABEL_19;
    }
  }
  else
  {
LABEL_12:
    v11 = (_QWORD *)*((_QWORD *)this + 15);
    if (v11)
      goto LABEL_13;
  }
  v16 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF335000, v16, OS_LOG_TYPE_ERROR, "Failed to create WiFi Manager", buf, 2u);
  }
}

void sub_1BF45DB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  dispatch::callback<void({block_pointer})(BOOL)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void SARModule::initializeBluetooth_sync(SARModule *this)
{
  NSObject *v2;
  BluetoothManager *v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  NSObject *v13;
  void **v14;
  _QWORD *v15;
  NSObject *v16;
  _QWORD aBlock[5];
  void *v18;
  NSObject *v19;
  uint8_t buf[16];

  v2 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing Bluetooth", buf, 2u);
  }
  v3 = (BluetoothManager *)(*(uint64_t (**)(SARModule *))(*(_QWORD *)this + 16))(this);
  BluetoothManager::create(v3, (BluetoothManager **)buf);
  v4 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  *((_OWORD *)this + 9) = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_12;
  v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (_QWORD *)*((_QWORD *)this + 18);
    if (v11)
    {
LABEL_13:
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = ___ZN9SARModule24initializeBluetooth_syncEv_block_invoke;
      aBlock[3] = &__block_descriptor_40_e8_v12__0B8l;
      aBlock[4] = this;
      v12 = _Block_copy(aBlock);
      v13 = *((_QWORD *)this + 8);
      if (v13)
        dispatch_retain(v13);
      v18 = v12;
      v19 = v13;
      v14 = (void **)v11[6];
      if ((unint64_t)v14 >= v11[7])
      {
        v15 = std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>(v11 + 5, (uint64_t)&v18);
        v13 = v19;
        v11[6] = v15;
        if (!v13)
        {
LABEL_21:
          if (v18)
            _Block_release(v18);
          return;
        }
LABEL_20:
        dispatch_release(v13);
        goto LABEL_21;
      }
      if (v12)
      {
        *v14 = _Block_copy(v12);
        v14[1] = v13;
        if (!v13)
          goto LABEL_19;
      }
      else
      {
        *v14 = 0;
        v14[1] = v13;
        if (!v13)
        {
LABEL_19:
          v11[6] = v14 + 2;
          if (!v13)
            goto LABEL_21;
          goto LABEL_20;
        }
      }
      dispatch_retain(v13);
      goto LABEL_19;
    }
  }
  else
  {
LABEL_12:
    v11 = (_QWORD *)*((_QWORD *)this + 18);
    if (v11)
      goto LABEL_13;
  }
  v16 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF335000, v16, OS_LOG_TYPE_ERROR, "Failed to create Bluetooth Manager", buf, 2u);
  }
}

void sub_1BF45DDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  dispatch::callback<void({block_pointer})(BOOL)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void SARModule::initializeAudio_sync(SARModule *this)
{
  NSObject *v2;
  AudioManager *v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  NSObject *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  NSObject *v19;
  unsigned __int8 v20;
  _QWORD *v21;
  void *v22;
  NSObject *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  capabilities::txpower *v27;
  capabilities::txpower *v28;
  _QWORD v29[5];
  void *v30;
  dispatch_object_t v31;
  _QWORD aBlock[5];
  void *v33;
  dispatch_object_t object;
  uint8_t buf[16];

  v2 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing Audio", buf, 2u);
  }
  v3 = (AudioManager *)(*(uint64_t (**)(SARModule *))(*(_QWORD *)this + 16))(this);
  AudioManager::create(v3, (AudioManager **)buf);
  v4 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  *((_OWORD *)this + 11) = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if (*((_QWORD *)this + 22))
        goto LABEL_13;
LABEL_23:
      v19 = *((_QWORD *)this + 10);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1BF335000, v19, OS_LOG_TYPE_ERROR, "Failed to create Audio Manager", buf, 2u);
      }
      return;
    }
  }
  if (!*((_QWORD *)this + 22))
    goto LABEL_23;
LABEL_13:
  if ((v11 & 1) == 0)
  {
    if ((_DWORD)v27)
    {
      AudioManager::isAudioWiredPortSupported(void)::audioJackSupported = capabilities::txpower::supportsAudioJackReport(v27);
    }
  }
  v12 = MEMORY[0x1E0C809B0];
  if (AudioManager::isAudioWiredPortSupported(void)::audioJackSupported)
  {
    v13 = (_QWORD *)*((_QWORD *)this + 22);
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZN9SARModule20initializeAudio_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_40_e8_v12__0B8l;
    aBlock[4] = this;
    v14 = _Block_copy(aBlock);
    v15 = *((_QWORD *)this + 8);
    if (v15)
      dispatch_retain(*((dispatch_object_t *)this + 8));
    v33 = v14;
    object = v15;
    v16 = (_QWORD *)v13[17];
    if ((unint64_t)v16 >= v13[18])
    {
      v18 = std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>(v13 + 16, (uint64_t)&v33);
      goto LABEL_26;
    }
    if (v14)
    {
      v17 = _Block_copy(v14);
      v15 = object;
      *v16 = v17;
      v16[1] = v15;
      if (!v15)
      {
LABEL_21:
        v18 = v16 + 2;
LABEL_26:
        v13[17] = v18;
        if (object)
          dispatch_release(object);
        if (v33)
          _Block_release(v33);
        goto LABEL_30;
      }
    }
    else
    {
      *v16 = 0;
      v16[1] = v15;
      if (!v15)
        goto LABEL_21;
    }
    dispatch_retain(v15);
    goto LABEL_21;
  }
LABEL_30:
  if ((v20 & 1) == 0)
  {
    if ((_DWORD)v28)
    {
      AudioManager::isAudioSpeakerSupported(void)::audioSpeakerSupported = capabilities::txpower::supportsAudioSpeaker(v28);
    }
  }
  if (AudioManager::isAudioSpeakerSupported(void)::audioSpeakerSupported)
  {
    v21 = (_QWORD *)*((_QWORD *)this + 22);
    v29[0] = v12;
    v29[1] = 3221225472;
    v29[2] = ___ZN9SARModule20initializeAudio_syncEv_block_invoke_2;
    v29[3] = &__block_descriptor_40_e8_v12__0B8l;
    v29[4] = this;
    v22 = _Block_copy(v29);
    v23 = *((_QWORD *)this + 8);
    if (v23)
      dispatch_retain(v23);
    v30 = v22;
    v31 = v23;
    v24 = (_QWORD *)v21[13];
    if ((unint64_t)v24 >= v21[14])
    {
      v26 = std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>(v21 + 12, (uint64_t)&v30);
      goto LABEL_40;
    }
    if (v22)
    {
      v25 = _Block_copy(v22);
      v23 = v31;
      *v24 = v25;
      v24[1] = v23;
      if (!v23)
      {
LABEL_38:
        v26 = v24 + 2;
LABEL_40:
        v21[13] = v26;
        if (v31)
          dispatch_release(v31);
        if (v30)
          _Block_release(v30);
        return;
      }
    }
    else
    {
      *v24 = 0;
      v24[1] = v23;
      if (!v23)
        goto LABEL_38;
    }
    dispatch_retain(v23);
    goto LABEL_38;
  }
}

void sub_1BF45E144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BF45E15C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BF45E17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  dispatch::callback<void({block_pointer})(BOOL)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF45E190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  dispatch::callback<void({block_pointer})(BOOL)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void SARModule::initializeHandDetection_sync(SARModule *this)
{
  NSObject *v2;
  char *v3;
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_weak_owners;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  void *v38;
  NSObject *v39;
  void **v40;
  NSObject *v41;
  _QWORD *v42;
  _QWORD aBlock[6];
  std::__shared_weak_count *v44;
  void *v45;
  NSObject *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  NSObject *v53;
  NSObject *v54;
  uint8_t buf[16];

  v2 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing Hand Detection", buf, 2u);
  }
  v3 = (char *)(*(uint64_t (**)(SARModule *))(*(_QWORD *)this + 16))(this);
  v4 = *((_QWORD *)this + 8);
  v54 = v4;
  if (v4)
    dispatch_retain(v4);
  v5 = *((_QWORD *)this + 9);
  v53 = v5;
  if (v5)
    dispatch_retain(v5);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  v51 = *((_QWORD *)this + 22);
  v52 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v49 = 0;
  v50 = 0;
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  v47 = *((_QWORD *)this + 13);
  v48 = v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  HandDetectionManager::create(v3, &v54, &v53, &v51, &v49, &v47, (HandDetectionManager **)buf);
  v12 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  *(_OWORD *)((char *)this + 248) = v12;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v17 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v48;
  if (v48)
  {
    v20 = (unint64_t *)&v48->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v50;
  if (v50)
  {
    v23 = (unint64_t *)&v50->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v52;
  if (v52)
  {
    v26 = (unint64_t *)&v52->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (v53)
    dispatch_release(v53);
  if (v54)
    dispatch_release(v54);
  if (*((_QWORD *)this + 31))
  {
    v28 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
    if (!v28 || (v29 = *((_QWORD *)this + 6), (v30 = std::__shared_weak_count::lock(v28)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v31 = v30;
    p_shared_weak_owners = (unint64_t *)&v30->__shared_weak_owners_;
    do
      v33 = __ldxr(p_shared_weak_owners);
    while (__stxr(v33 + 1, p_shared_weak_owners));
    v34 = (unint64_t *)&v30->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v31);
    }
    v36 = (_QWORD *)*((_QWORD *)this + 31);
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3321888768;
    aBlock[2] = ___ZN9SARModule28initializeHandDetection_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e8_v12__0i8l;
    aBlock[4] = this;
    aBlock[5] = v29;
    v44 = v31;
    do
      v37 = __ldxr(p_shared_weak_owners);
    while (__stxr(v37 + 1, p_shared_weak_owners));
    v38 = _Block_copy(aBlock);
    v39 = *((_QWORD *)this + 8);
    if (v39)
      dispatch_retain(v39);
    v45 = v38;
    v46 = v39;
    v40 = (void **)v36[4];
    if ((unint64_t)v40 >= v36[5])
    {
      v42 = std::vector<dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)> const&>(v36 + 3, (uint64_t)&v45);
      v39 = v46;
      v36[4] = v42;
      if (!v39)
        goto LABEL_61;
      goto LABEL_60;
    }
    if (v38)
    {
      *v40 = _Block_copy(v38);
      v40[1] = v39;
      if (!v39)
        goto LABEL_59;
    }
    else
    {
      *v40 = 0;
      v40[1] = v39;
      if (!v39)
      {
LABEL_59:
        v36[4] = v40 + 2;
        if (!v39)
        {
LABEL_61:
          if (v45)
            _Block_release(v45);
          if (v44)
            std::__shared_weak_count::__release_weak(v44);
          std::__shared_weak_count::__release_weak(v31);
          return;
        }
LABEL_60:
        dispatch_release(v39);
        goto LABEL_61;
      }
    }
    dispatch_retain(v39);
    goto LABEL_59;
  }
  v41 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF335000, v41, OS_LOG_TYPE_ERROR, "Failed to create hand detection manager!", buf, 2u);
  }
}

void sub_1BF45E5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17)
{
  std::__shared_weak_count *v17;

  dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>::~callback((uint64_t)&a17);
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  std::__shared_weak_count::__release_weak(v17);
  _Unwind_Resume(a1);
}

void sub_1BF45E5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v11 - 96);
  v13 = *(NSObject **)(v11 - 80);
  if (v13)
    dispatch_release(v13);
  v14 = *(NSObject **)(v11 - 72);
  if (!v14)
    _Unwind_Resume(a1);
  dispatch_release(v14);
  _Unwind_Resume(a1);
}

void SARModule::initializeOBD_sync(SARModule *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  void *v34;
  NSObject *v35;
  void **v36;
  NSObject *v37;
  _QWORD *v38;
  _QWORD v39[6];
  std::__shared_weak_count *v40;
  void *aBlock;
  NSObject *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  NSObject *v47;
  uint8_t buf[16];

  v2 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing OBD", buf, 2u);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v3 || (v4 = *((_QWORD *)this + 6), (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  v11 = (char *)(*(uint64_t (**)(SARModule *))(*(_QWORD *)this + 16))(this);
  v12 = *((_QWORD *)this + 8);
  v47 = v12;
  if (v12)
    dispatch_retain(v12);
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  v45 = *((_QWORD *)this + 22);
  v46 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  v43 = *((_QWORD *)this + 13);
  v44 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  OBDManager::create(v11, &v47, &v45, &v43, (OBDManager **)buf);
  v19 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  *((_OWORD *)this + 12) = v19;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v24 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v44;
  if (v44)
  {
    v27 = (unint64_t *)&v44->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v46;
  if (v46)
  {
    v30 = (unint64_t *)&v46->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v47)
    dispatch_release(v47);
  v32 = (_QWORD *)*((_QWORD *)this + 24);
  if (v32)
  {
    v39[0] = MEMORY[0x1E0C809B0];
    v39[1] = 3321888768;
    v39[2] = ___ZN9SARModule18initializeOBD_syncEv_block_invoke;
    v39[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e11_v16__0C8C12l;
    v39[4] = this;
    v39[5] = v4;
    v40 = v6;
    do
      v33 = __ldxr(p_shared_weak_owners);
    while (__stxr(v33 + 1, p_shared_weak_owners));
    v34 = _Block_copy(v39);
    v35 = *((_QWORD *)this + 8);
    if (v35)
      dispatch_retain(v35);
    aBlock = v34;
    v42 = v35;
    v36 = (void **)v32[6];
    if ((unint64_t)v36 >= v32[7])
    {
      v38 = std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)> const&>(v32 + 5, (uint64_t)&aBlock);
      v35 = v42;
      v32[6] = v38;
      if (!v35)
        goto LABEL_52;
      goto LABEL_51;
    }
    if (v34)
    {
      *v36 = _Block_copy(v34);
      v36[1] = v35;
      if (!v35)
        goto LABEL_50;
    }
    else
    {
      *v36 = 0;
      v36[1] = v35;
      if (!v35)
      {
LABEL_50:
        v32[6] = v36 + 2;
        if (!v35)
        {
LABEL_52:
          if (aBlock)
            _Block_release(aBlock);
          if (v40)
            std::__shared_weak_count::__release_weak(v40);
          goto LABEL_58;
        }
LABEL_51:
        dispatch_release(v35);
        goto LABEL_52;
      }
    }
    dispatch_retain(v35);
    goto LABEL_50;
  }
  v37 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF335000, v37, OS_LOG_TYPE_ERROR, "Failed to create OBD Manager", buf, 2u);
  }
LABEL_58:
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1BF45E99C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  std::__shared_weak_count *v20;

  dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>::~callback((uint64_t)&a16);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    std::__shared_weak_count::__release_weak(v20);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v20);
  _Unwind_Resume(a1);
}

void SARModule::initializeAccessory_sync(SARModule *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  queue v11;
  LegacyAccessoryManager *v12;
  NSObject *v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  void *v23;
  NSObject *v24;
  void **v25;
  NSObject *v26;
  _QWORD *v27;
  _QWORD v28[6];
  std::__shared_weak_count *v29;
  void *aBlock;
  NSObject *v31;
  dispatch_object_t object;
  uint8_t buf[16];

  v2 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing Accessory", buf, 2u);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v3 || (v4 = *((_QWORD *)this + 6), (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  v12 = (LegacyAccessoryManager *)(*(uint64_t (**)(SARModule *))(*(_QWORD *)this + 16))(this);
  v13 = *((_QWORD *)this + 8);
  object = v13;
  if (v13)
    dispatch_retain(v13);
  LegacyAccessoryManager::create(v12, (const char *)&object, v11, (LegacyAccessoryManager **)buf);
  v14 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  *((_OWORD *)this + 13) = v14;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v19 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (object)
    dispatch_release(object);
  v21 = (_QWORD *)*((_QWORD *)this + 26);
  if (v21)
  {
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 3321888768;
    v28[2] = ___ZN9SARModule24initializeAccessory_syncEv_block_invoke;
    v28[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e8_v12__0I8l;
    v28[4] = this;
    v28[5] = v4;
    v29 = v6;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    v23 = _Block_copy(v28);
    v24 = *((_QWORD *)this + 8);
    if (v24)
      dispatch_retain(v24);
    aBlock = v23;
    v31 = v24;
    v25 = (void **)v21[5];
    if ((unint64_t)v25 >= v21[6])
    {
      v27 = std::vector<dispatch::callback<void({block_pointer})>>::__push_back_slow_path<dispatch::callback<void({block_pointer})> const&>(v21 + 4, (uint64_t)&aBlock);
      v24 = v31;
      v21[5] = v27;
      if (!v24)
        goto LABEL_36;
      goto LABEL_35;
    }
    if (v23)
    {
      *v25 = _Block_copy(v23);
      v25[1] = v24;
      if (!v24)
        goto LABEL_34;
    }
    else
    {
      *v25 = 0;
      v25[1] = v24;
      if (!v24)
      {
LABEL_34:
        v21[5] = v25 + 2;
        if (!v24)
        {
LABEL_36:
          if (aBlock)
            _Block_release(aBlock);
          if (v29)
            std::__shared_weak_count::__release_weak(v29);
          goto LABEL_42;
        }
LABEL_35:
        dispatch_release(v24);
        goto LABEL_36;
      }
    }
    dispatch_retain(v24);
    goto LABEL_34;
  }
  v26 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF335000, v26, OS_LOG_TYPE_ERROR, "Failed to create Legacy Accessory Manager", buf, 2u);
  }
LABEL_42:
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1BF45ECD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, dispatch_object_t object)
{
  std::__shared_weak_count *v18;

  dispatch::callback<void({block_pointer})>::~callback((uint64_t)&a16);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    std::__shared_weak_count::__release_weak(v18);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(a1);
}

void SARModule::initializePowerSource_sync(SARModule *this)
{
  NSObject *v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_weak_owners;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  NSObject *v38;
  void *v39;
  const void *v40;
  NSObject *v41;
  NSObject *v42;
  _QWORD aBlock[6];
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  __int128 v47;
  uint8_t buf[16];
  void (*v49)(uint64_t);
  void *v50;
  __int128 *v51;

  v2 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing Power Source", buf, 2u);
  }
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  v4 = MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 0x40000000;
  v49 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v50 = &__block_descriptor_tmp_13_2;
  v51 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v5 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v47 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_8;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, buf);
    v5 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v47 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_8;
  }
  v6 = (unint64_t *)(v5 + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
LABEL_8:
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v8 = off_1ED70FA00;
  if (!off_1ED70FA00)
  {
    ABMServer::create_default_global(buf);
    v9 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v10 = (std::__shared_weak_count *)*(&off_1ED70FA00 + 1);
    off_1ED70FA00 = v9;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v14 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v8 = off_1ED70FA00;
  }
  v45 = v8;
  v46 = (std::__shared_weak_count *)*(&off_1ED70FA00 + 1);
  if (*(&off_1ED70FA00 + 1))
  {
    v16 = (unint64_t *)(*(&off_1ED70FA00 + 1) + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)v8 + 208);
  v18 = operator new(0xD8uLL);
  std::__shared_ptr_emplace<IOKitEventNotifier>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<ctu::LogServer> &,__CFRunLoop *&,std::allocator<IOKitEventNotifier>,0>(v18, (uint64_t *)&v47, (uint64_t *)buf);
  v19 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 28) = v18 + 3;
  *((_QWORD *)this + 29) = v18;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (v46)
  {
    v22 = &v46->__shared_owners_;
    do
      v23 = __ldaxr((unint64_t *)v22);
    while (__stlxr(v23 - 1, (unint64_t *)v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (!*((_QWORD *)&v47 + 1))
    goto LABEL_77;
  v25 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    if (*((_QWORD *)this + 28))
      goto LABEL_38;
  }
  else
  {
LABEL_77:
    if (*((_QWORD *)this + 28))
    {
LABEL_38:
      v27 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
      if (!v27 || (v28 = *((_QWORD *)this + 6), (v29 = std::__shared_weak_count::lock(v27)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v30 = v29;
      p_shared_weak_owners = (unint64_t *)&v29->__shared_weak_owners_;
      do
        v32 = __ldxr(p_shared_weak_owners);
      while (__stxr(v32 + 1, p_shared_weak_owners));
      v33 = (unint64_t *)&v29->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v30);
      }
      v35 = *((_QWORD *)this + 28);
      aBlock[0] = v4;
      aBlock[1] = 3321888768;
      aBlock[2] = ___ZN9SARModule26initializePowerSource_syncEv_block_invoke;
      aBlock[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e8_v12__0I8l;
      aBlock[4] = this;
      aBlock[5] = v28;
      v44 = v30;
      do
        v36 = __ldxr(p_shared_weak_owners);
      while (__stxr(v36 + 1, p_shared_weak_owners));
      v37 = _Block_copy(aBlock);
      v38 = *((_QWORD *)this + 8);
      if (v38)
        dispatch_retain(v38);
      if (v37)
      {
        v39 = _Block_copy(v37);
        v40 = *(const void **)(v35 + 136);
        *(_QWORD *)(v35 + 136) = v39;
        if (!v40)
          goto LABEL_58;
      }
      else
      {
        v40 = *(const void **)(v35 + 136);
        *(_QWORD *)(v35 + 136) = 0;
        if (!v40)
        {
LABEL_58:
          if (v38)
            dispatch_retain(v38);
          v42 = *(NSObject **)(v35 + 144);
          *(_QWORD *)(v35 + 144) = v38;
          if (v42)
            dispatch_release(v42);
          if (v38)
            dispatch_release(v38);
          if (v37)
            _Block_release(v37);
          if (v44)
            std::__shared_weak_count::__release_weak(v44);
          std::__shared_weak_count::__release_weak(v30);
          return;
        }
      }
      _Block_release(v40);
      goto LABEL_58;
    }
  }
  v41 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF335000, v41, OS_LOG_TYPE_ERROR, "Failed to create Power Source Notifier", buf, 2u);
  }
}

void sub_1BF45F1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN9SARModule22initializeHelpers_syncEv_block_invoke(_QWORD *a1, int a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  SARModule *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  NSObject *v13;
  _BOOL8 v14;
  ctu::Gestalt *v15;
  uint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *v27;
  const char *v28;
  char v29;
  std::string *p_p;
  int64_t size;
  char *v32;
  std::string *v33;
  char *v34;
  BOOL v35;
  xpc_object_t v37;
  xpc_object_t v38;
  NSObject *v39;
  __int128 *v40;
  xpc_object_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  void *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  const void *v48;
  xpc_object_t v49;
  void *v50[2];
  char v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  xpc_object_t v54;
  xpc_object_t v55;
  xpc_object_t v56;
  xpc_object_t v57;
  xpc_object_t v58;
  xpc_object_t object;
  xpc_object_t v60;
  std::string __p;
  __int128 v62;
  uint64_t v63;
  uint8_t buf[32];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _BYTE v77[31];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (SARModule *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  if (a2 == -469794809)
  {
    v13 = *((_QWORD *)v7 + 10);
    v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    if (a3)
    {
      if (v14)
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BF335000, v13, OS_LOG_TYPE_DEFAULT, "#I Tx is on from SPMI", buf, 2u);
      }
      if ((capabilities::radio::maverick((capabilities::radio *)v14) & 1) == 0)
        SARModule::processTxOn_sync(v7);
    }
    else
    {
      if (v14)
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BF335000, v13, OS_LOG_TYPE_DEFAULT, "#I Tx is off from SPMI", buf, 2u);
      }
      if ((capabilities::radio::maverick((capabilities::radio *)v14) & 1) == 0)
        SARModule::processTxOff_sync(v7);
    }
    return;
  }
  if ((a2 + 469794805) > 1)
    return;
  v15 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v16 = off_1ED70FC60;
  if (!off_1ED70FC60)
  {
    ctu::Gestalt::create_default_global(v15);
    v17 = *(_OWORD *)buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v18 = (std::__shared_weak_count *)*(&off_1ED70FC60 + 1);
    off_1ED70FC60 = v17;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v16 = off_1ED70FC60;
  }
  v21 = (std::__shared_weak_count *)*(&off_1ED70FC60 + 1);
  *(_QWORD *)&v62 = v16;
  *((_QWORD *)&v62 + 1) = *(&off_1ED70FC60 + 1);
  if (*(&off_1ED70FC60 + 1))
  {
    v22 = (unint64_t *)(*(&off_1ED70FC60 + 1) + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 96))(v16);
  if (v21)
  {
    v25 = (unint64_t *)&v21->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (v24)
  {
    v27 = *((_QWORD *)v7 + 10);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      return;
    *(_WORD *)buf = 0;
    v28 = "#I We don't trigger the coredump request from the kernel driver in Restore Mode";
    goto LABEL_34;
  }
  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && (TelephonyUtilIsCarrierBuild() & 1) == 0)
  {
    v27 = *((_QWORD *)v7 + 10);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      return;
    *(_WORD *)buf = 0;
    v28 = "#I We don't trigger the coredump request from the kernel driver if it is not Carrier/Internal build";
LABEL_34:
    _os_log_impl(&dword_1BF335000, v27, OS_LOG_TYPE_DEFAULT, v28, buf, 2u);
    return;
  }
  v62 = 0uLL;
  v63 = 0;
  if (a2 == -469794805)
  {
    qmemcpy(&v62, "SPMI Bus error", 14);
    v29 = 14;
  }
  else
  {
    v62 = *(_OWORD *)"OCP packet error";
    v29 = 16;
  }
  HIBYTE(v63) = v29;
  memset(&__p, 170, sizeof(__p));
  p_p = &__p;
  config::hw::getBootArgs(&__p);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    size = __p.__r_.__value_.__l.__size_;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (size >= 17)
  {
    v32 = (char *)p_p + size;
    v33 = p_p;
    while (1)
    {
      v34 = (char *)memchr(v33, 115, size - 16);
      if (!v34)
        goto LABEL_64;
      v35 = *(_QWORD *)v34 == 0x696D70732D726173 && *((_QWORD *)v34 + 1) == 0x6D756465726F632DLL;
      if (v35 && v34[16] == 112)
        break;
      v33 = (std::string *)(v34 + 1);
      size = v32 - (char *)v33;
      if (v32 - (char *)v33 < 17)
        goto LABEL_64;
    }
    if (v34 == v32 || v34 - (char *)p_p == -1)
      goto LABEL_64;
    v60 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    v37 = xpc_dictionary_create(0, 0, 0);
    v38 = v37;
    if (v37)
    {
      v60 = v37;
    }
    else
    {
      v38 = xpc_null_create();
      v60 = v38;
      if (!v38)
      {
        v41 = xpc_null_create();
        v38 = 0;
        goto LABEL_78;
      }
    }
    if (MEMORY[0x1C3B8A86C](v38) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v38);
LABEL_79:
      xpc_release(v38);
      v58 = xpc_string_create((const char *)*MEMORY[0x1E0CFB590]);
      if (!v58)
        v58 = xpc_null_create();
      v42 = *MEMORY[0x1E0CFB538];
      *(_QWORD *)buf = &v60;
      *(_QWORD *)&buf[8] = v42;
      xpc::dict::object_proxy::operator=((uint64_t)buf, &v58, &object);
      xpc_release(object);
      object = 0;
      xpc_release(v58);
      v58 = 0;
      v56 = xpc_string_create((const char *)*MEMORY[0x1E0CFC000]);
      if (!v56)
        v56 = xpc_null_create();
      v43 = *MEMORY[0x1E0CFB8D0];
      *(_QWORD *)buf = &v60;
      *(_QWORD *)&buf[8] = v43;
      xpc::dict::object_proxy::operator=((uint64_t)buf, &v56, &v57);
      xpc_release(v57);
      v57 = 0;
      xpc_release(v56);
      v44 = (const char *)&v62;
      if (v63 < 0)
        v44 = (const char *)v62;
      v56 = 0;
      v76 = 0u;
      memset(v77, 0, sizeof(v77));
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v65 = 0u;
      memset(buf, 0, sizeof(buf));
      snprintf((char *)buf, 0xFFuLL, "%s (0x%x)", v44, a3);
      v54 = xpc_string_create((const char *)buf);
      if (!v54)
        v54 = xpc_null_create();
      v45 = (void *)*MEMORY[0x1E0CFB788];
      v50[0] = &v60;
      v50[1] = v45;
      xpc::dict::object_proxy::operator=((uint64_t)v50, &v54, &v55);
      xpc_release(v55);
      v55 = 0;
      xpc_release(v54);
      v53 = 0;
      v54 = 0;
      v52 = 0;
      v46 = (std::__shared_weak_count *)a1[6];
      if (v46 && (v53 = std::__shared_weak_count::lock(v46)) != 0)
      {
        v47 = a1[5];
        v52 = v47;
      }
      else
      {
        v47 = 0;
      }
      std::string::basic_string[abi:ne180100]<0>(v50, (char *)*MEMORY[0x1E0CFB4E0]);
      xpc::dict::dict((xpc::dict *)&v49, &v60);
      v48 = 0;
      Service::runCommand(v47, (uint64_t)v50, &v49, &v48);
      xpc_release(v49);
      v49 = 0;
      if (v51 < 0)
        operator delete(v50[0]);
      std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&v52);
      xpc_release(v60);
      goto LABEL_65;
    }
    v41 = xpc_null_create();
LABEL_78:
    v60 = v41;
    goto LABEL_79;
  }
LABEL_64:
  v39 = *((_QWORD *)v7 + 10);
  if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
  {
    v40 = &v62;
    if (v63 < 0)
      v40 = (__int128 *)v62;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v40;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "sar-spmi-coredump";
    _os_log_error_impl(&dword_1BF335000, v39, OS_LOG_TYPE_ERROR, "Detected %s, but AP won't trigger the coredump since %s is not found in the boot-args", buf, 0x16u);
  }
LABEL_65:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63) < 0)
    operator delete((void *)v62);
}

void sub_1BF45F960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,xpc_object_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void SARModule::processTxOn_sync(SARModule *this)
{
  NSObject *v2;
  OBDManager *v3;
  HandDetectionManager *v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  const object *v9;
  CFTypeRef v10;
  CFTypeID v11;
  CFTypeRef v12;
  uint64_t (*v13)(uint64_t);
  const void *v14;
  size_t v15;
  void *v16;
  void **v17;
  NSObject *v18;
  char *v19;
  size_t v20;
  const void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CFTypeRef *v27;
  CFTypeRef cf[4];
  void *aBlock;
  CFTypeRef v30;
  void *__dst[2];
  unint64_t v32;
  CFTypeRef v33;
  _BYTE object[24];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(cf[0]) = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Tx is on", (uint8_t *)cf, 2u);
  }
  *((_BYTE *)this + 264) = 1;
  v3 = (OBDManager *)*((_QWORD *)this + 24);
  if (v3)
    OBDManager::start(v3, 2000);
  v4 = (HandDetectionManager *)*((_QWORD *)this + 31);
  if (v4)
    HandDetectionManager::setTxState(v4, *((unsigned __int8 *)this + 264));
  v5 = xpc_dictionary_create(0, 0, 0);
  if (v5 || (v5 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v5) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v5);
      v6 = v5;
    }
    else
    {
      v6 = xpc_null_create();
    }
  }
  else
  {
    v6 = xpc_null_create();
    v5 = 0;
  }
  xpc_release(v5);
  v7 = xpc_string_create((const char *)*MEMORY[0x1E0CFBF28]);
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBBD8], v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  v33 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)object = v6;
  if (v6)
    xpc_retain(v6);
  else
    *(_QWORD *)object = xpc_null_create();
  xpc::bridge((xpc *)object, v9);
  v10 = cf[0];
  if (!cf[0] || (v11 = CFGetTypeID(cf[0]), v11 != CFDictionaryGetTypeID()))
  {
    v10 = 0;
    v33 = 0;
    v12 = cf[0];
    if (!cf[0])
      goto LABEL_24;
    goto LABEL_23;
  }
  v33 = v10;
  CFRetain(v10);
  v12 = cf[0];
  if (cf[0])
LABEL_23:
    CFRelease(v12);
LABEL_24:
  xpc_release(*(xpc_object_t *)object);
  v13 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!v10)
    v13 = 0;
  if (!v13)
  {
    v18 = *((_QWORD *)this + 10);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      goto LABEL_48;
    v19 = (char *)MEMORY[0x1C3B8A7D0](v6);
    memset(cf, 170, 24);
    v20 = strlen(v19);
    if (v20 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v21 = (const void *)v20;
    if (v20 >= 0x17)
    {
      v25 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v25 = v20 | 7;
      v26 = v25 + 1;
      v22 = operator new(v25 + 1);
      cf[1] = v21;
      cf[2] = (CFTypeRef)(v26 | 0x8000000000000000);
      cf[0] = v22;
    }
    else
    {
      HIBYTE(cf[2]) = v20;
      v22 = cf;
      if (!v20)
      {
LABEL_55:
        *((_BYTE *)v21 + (_QWORD)v22) = 0;
        free(v19);
        v27 = cf;
        if (SHIBYTE(cf[2]) < 0)
          v27 = (CFTypeRef *)cf[0];
        *(_DWORD *)object = 136315138;
        *(_QWORD *)&object[4] = v27;
        _os_log_error_impl(&dword_1BF335000, v18, OS_LOG_TYPE_ERROR, "Failed to convert the transmit State data and no sending the message: %s", object, 0xCu);
        if (SHIBYTE(cf[2]) < 0)
          operator delete((void *)cf[0]);
        v10 = v33;
        if (v33)
          goto LABEL_49;
        goto LABEL_50;
      }
    }
    memcpy(v22, v19, (size_t)v21);
    goto LABEL_55;
  }
  v14 = (const void *)*MEMORY[0x1E0CFBC68];
  v15 = strlen((const char *)*MEMORY[0x1E0CFBC68]);
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v16 = (void *)v15;
  if (v15 >= 0x17)
  {
    v23 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v23 = v15 | 7;
    v24 = v23 + 1;
    v17 = (void **)operator new(v23 + 1);
    __dst[1] = v16;
    v32 = v24 | 0x8000000000000000;
    __dst[0] = v17;
  }
  else
  {
    HIBYTE(v32) = v15;
    v17 = __dst;
    if (!v15)
    {
      LOBYTE(__dst[0]) = 0;
      v10 = v33;
      v30 = v33;
      if (!v33)
        goto LABEL_42;
      goto LABEL_41;
    }
  }
  memmove(v17, v14, (size_t)v16);
  *((_BYTE *)v16 + (_QWORD)v17) = 0;
  v10 = v33;
  v30 = v33;
  if (v33)
LABEL_41:
    CFRetain(v10);
LABEL_42:
  aBlock = 0;
  Service::broadcastEvent((uint64_t)this, (uint64_t)__dst, &v30, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (v30)
    CFRelease(v30);
  if (SHIBYTE(v32) < 0)
    operator delete(__dst[0]);
LABEL_48:
  if (v10)
LABEL_49:
    CFRelease(v10);
LABEL_50:
  xpc_release(v6);
}

void sub_1BF45FE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *aBlock, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void SARModule::processTxOff_sync(SARModule *this)
{
  NSObject *v2;
  OBDManager *v3;
  HandDetectionManager *v4;
  NSObject *v5;
  AppleSARHelper *v6;
  AppleSARHelper *v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  _QWORD *v25;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  NSObject *v34;
  xpc_object_t v35;
  void *v36;
  xpc_object_t v37;
  const object *v38;
  CFTypeRef v39;
  CFTypeID v40;
  const void *v41;
  uint64_t (*v42)(uint64_t);
  const void *v43;
  size_t v44;
  size_t v45;
  _QWORD *v46;
  NSObject *v47;
  uint8_t *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  void *aBlock;
  CFTypeRef v53;
  _QWORD __dst[2];
  unint64_t v55;
  CFTypeRef cf;
  char v57;
  uint8_t buf[16];
  char v59;
  __int128 v60;
  unint64_t v61[2];

  v61[1] = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Tx is off", buf, 2u);
  }
  *((_BYTE *)this + 264) = 0;
  v3 = (OBDManager *)*((_QWORD *)this + 24);
  if (v3)
    OBDManager::stop(v3);
  v4 = (HandDetectionManager *)*((_QWORD *)this + 31);
  if (!v4)
  {
LABEL_41:
    v61[0] = 0xAAAAAAAAAAAAAAAALL;
    v31 = xpc_dictionary_create(0, 0, 0);
    v32 = v31;
    if (v31)
    {
      v61[0] = (unint64_t)v31;
    }
    else
    {
      v32 = xpc_null_create();
      v61[0] = (unint64_t)v32;
      if (!v32)
      {
        v33 = xpc_null_create();
        v32 = 0;
        goto LABEL_51;
      }
    }
    if (MEMORY[0x1C3B8A86C](v32) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v32);
      goto LABEL_52;
    }
    v33 = xpc_null_create();
LABEL_51:
    v61[0] = (unint64_t)v33;
LABEL_52:
    xpc_release(v32);
    v35 = xpc_string_create((const char *)*MEMORY[0x1E0CFBC28]);
    if (!v35)
      v35 = xpc_null_create();
    v36 = (void *)v61[0];
    xpc_dictionary_set_value((xpc_object_t)v61[0], (const char *)*MEMORY[0x1E0CFBBD8], v35);
    v37 = xpc_null_create();
    xpc_release(v35);
    xpc_release(v37);
    cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v60 = v36;
    if (v36)
      xpc_retain(v36);
    else
      *(_QWORD *)&v60 = xpc_null_create();
    xpc::bridge((xpc *)&v60, v38);
    v39 = *(CFTypeRef *)buf;
    if (*(_QWORD *)buf && (v40 = CFGetTypeID(*(CFTypeRef *)buf), v40 == CFDictionaryGetTypeID()))
    {
      cf = v39;
      CFRetain(v39);
      v41 = *(const void **)buf;
      if (!*(_QWORD *)buf)
      {
LABEL_63:
        xpc_release((xpc_object_t)v60);
        v42 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        if (!v39)
          v42 = 0;
        if (!v42)
        {
          v47 = *((_QWORD *)this + 10);
          if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
            goto LABEL_87;
          xpc::dict::to_debug_string((xpc::dict *)v61, buf);
          v48 = v59 >= 0 ? buf : *(uint8_t **)buf;
          LODWORD(v60) = 136315138;
          *(_QWORD *)((char *)&v60 + 4) = v48;
          _os_log_error_impl(&dword_1BF335000, v47, OS_LOG_TYPE_ERROR, "Failed to convert the transmit State data and no sending the message: %s", (uint8_t *)&v60, 0xCu);
          if ((v59 & 0x80000000) == 0)
            goto LABEL_87;
          v49 = *(void **)buf;
          goto LABEL_92;
        }
        v43 = (const void *)*MEMORY[0x1E0CFBC68];
        v44 = strlen((const char *)*MEMORY[0x1E0CFBC68]);
        if (v44 >= 0x7FFFFFFFFFFFFFF8)
          std::string::__throw_length_error[abi:ne180100]();
        v45 = v44;
        if (v44 >= 0x17)
        {
          v50 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v44 | 7) != 0x17)
            v50 = v44 | 7;
          v51 = v50 + 1;
          v46 = operator new(v50 + 1);
          __dst[1] = v45;
          v55 = v51 | 0x8000000000000000;
          __dst[0] = v46;
        }
        else
        {
          HIBYTE(v55) = v44;
          v46 = __dst;
          if (!v44)
          {
            LOBYTE(__dst[0]) = 0;
            v39 = cf;
            v53 = cf;
            if (!cf)
              goto LABEL_82;
            goto LABEL_81;
          }
        }
        memmove(v46, v43, v45);
        *((_BYTE *)v46 + v45) = 0;
        v39 = cf;
        v53 = cf;
        if (!cf)
        {
LABEL_82:
          aBlock = 0;
          Service::broadcastEvent((uint64_t)this, (uint64_t)__dst, &v53, (const void **)&aBlock);
          if (aBlock)
            _Block_release(aBlock);
          if (v53)
            CFRelease(v53);
          if ((SHIBYTE(v55) & 0x80000000) == 0)
          {
LABEL_87:
            if (!v39)
            {
LABEL_89:
              xpc_release((xpc_object_t)v61[0]);
              return;
            }
LABEL_88:
            CFRelease(v39);
            goto LABEL_89;
          }
          v49 = (void *)__dst[0];
LABEL_92:
          operator delete(v49);
          if (!v39)
            goto LABEL_89;
          goto LABEL_88;
        }
LABEL_81:
        CFRetain(v39);
        goto LABEL_82;
      }
    }
    else
    {
      v39 = 0;
      cf = 0;
      v41 = *(const void **)buf;
      if (!*(_QWORD *)buf)
        goto LABEL_63;
    }
    CFRelease(v41);
    goto LABEL_63;
  }
  HandDetectionManager::setTxState(v4, *((unsigned __int8 *)this + 264));
  *((_BYTE *)this + 168) = 0;
  v5 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = 0;
    _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "#I Sending Grip State due to Tx is off: 0x%x\n", buf, 8u);
  }
  v6 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v7 = (AppleSARHelper *)off_1ED70FCB8;
  if (!off_1ED70FCB8)
  {
    AppleSARHelper::create_default_global(v6);
    v8 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v9 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
    off_1ED70FCB8 = v8;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v13 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v7 = (AppleSARHelper *)off_1ED70FCB8;
  }
  v15 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
  *(_QWORD *)&v60 = v7;
  *((_QWORD *)&v60 + 1) = *(&off_1ED70FCB8 + 1);
  if (*(&off_1ED70FCB8 + 1))
  {
    v16 = (unint64_t *)(*(&off_1ED70FCB8 + 1) + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v57 = *((_BYTE *)this + 168);
  if (*((_DWORD *)v7 + 1))
  {
    *(_QWORD *)buf = 0;
    v61[0] = 0;
    LODWORD(cf) = 1;
    v18 = AppleSARHelper::callUserClientMethod(v7, 7, (const unint64_t *)buf, 1, &v57, 1, v61, (unsigned int *)&cf, &v57, 1uLL);
    if (!v15)
      goto LABEL_30;
  }
  else
  {
    v18 = 0;
    if (!v15)
      goto LABEL_30;
  }
  v19 = (unint64_t *)&v15->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if ((v18 & 1) != 0)
      goto LABEL_31;
    goto LABEL_48;
  }
LABEL_30:
  if ((v18 & 1) != 0)
  {
LABEL_31:
    if (*((unsigned __int8 *)this + 169) != *((unsigned __int8 *)this + 168) || !*((_QWORD *)this + 38))
    {
      v21 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
      if (!v21 || (v22 = *((_QWORD *)this + 6), (v23 = std::__shared_weak_count::lock(v21)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v24 = v23;
      v25 = operator new(8uLL);
      *v25 = this;
      v26 = *((_QWORD *)this + 8);
      v27 = (unint64_t *)&v24->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      v29 = operator new(0x18uLL);
      *v29 = v25;
      v29[1] = v22;
      v29[2] = v24;
      dispatch_async_f(v26, v29, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::processTxOff_sync(void)::$_0>(SARModule::processTxOff_sync(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::processTxOff_sync(void)::$_0,dispatch_queue_s *::default_delete<SARModule::processTxOff_sync(void)::$_0>>)::{lambda(void *)#1}::__invoke);
      do
        v30 = __ldaxr(v27);
      while (__stlxr(v30 - 1, v27));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    goto LABEL_41;
  }
LABEL_48:
  v34 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF335000, v34, OS_LOG_TYPE_ERROR, "Failed to get SAR Fusion State!", buf, 2u);
  }
}

void sub_1BF4605B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t dispatch::callback<void({block_pointer})(sar::AppleSARMessageType,void *)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void ___ZN9SARModule19initializeWiFi_syncEv_block_invoke(uint64_t a1, char a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _BYTE *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = (std::__shared_weak_count *)v2[7];
  if (!v3 || (v5 = v2[6], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *(_QWORD *)v8 = v2;
  v8[8] = a2;
  v9 = v2[8];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v9, v12, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_19initializeWiFi_syncEvEUb0_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t dispatch::callback<void({block_pointer})(BOOL)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void ___ZN9SARModule24initializeBluetooth_syncEv_block_invoke(uint64_t a1, char a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _BYTE *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = (std::__shared_weak_count *)v2[7];
  if (!v3 || (v5 = v2[6], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *(_QWORD *)v8 = v2;
  v8[8] = a2;
  v9 = v2[8];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v9, v12, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_24initializeBluetooth_syncEvEUb1_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN9SARModule20initializeAudio_syncEv_block_invoke(uint64_t a1, char a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _BYTE *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = (std::__shared_weak_count *)v2[7];
  if (!v3 || (v5 = v2[6], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *(_QWORD *)v8 = v2;
  v8[8] = a2;
  v9 = v2[8];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v9, v12, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_20initializeAudio_syncEvEUb2_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN9SARModule20initializeAudio_syncEv_block_invoke_2(uint64_t a1, char a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _BYTE *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = (std::__shared_weak_count *)v2[7];
  if (!v3 || (v5 = v2[6], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *(_QWORD *)v8 = v2;
  v8[8] = a2;
  v9 = v2[8];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v9, v12, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_20initializeAudio_syncEvEUb3_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN9SARModule18initializeOBD_syncEv_block_invoke(_QWORD *a1, char a2, char a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  NSObject *v13;
  AppleSARHelper *v14;
  AppleSARHelper *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char v26;
  unint64_t *v27;
  unint64_t v28;
  NSObject *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  _QWORD *v34;
  NSObject *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  char v40;
  unsigned int v41;
  uint8_t buf[16];
  unint64_t v43[2];

  v43[1] = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  *(_BYTE *)(v7 + 165) = a2 & 0xF | (16 * a3);
  v13 = *(NSObject **)(v7 + 80);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = a2 & 0xF;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = a3 & 0xF;
    _os_log_impl(&dword_1BF335000, v13, OS_LOG_TYPE_DEFAULT, "#I Sending SAR Selection: 0x%x, Tuner State: 0x%x\n", buf, 0xEu);
  }
  v14 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v15 = (AppleSARHelper *)off_1ED70FCB8;
  if (!off_1ED70FCB8)
  {
    AppleSARHelper::create_default_global(v14);
    v16 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v17 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
    off_1ED70FCB8 = v16;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v21 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v15 = (AppleSARHelper *)off_1ED70FCB8;
  }
  v23 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
  if (*(&off_1ED70FCB8 + 1))
  {
    v24 = (unint64_t *)(*(&off_1ED70FCB8 + 1) + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v40 = *(_BYTE *)(v7 + 165);
  if (*((_DWORD *)v15 + 1))
  {
    *(_QWORD *)buf = 0;
    v43[0] = 0;
    v41 = 1;
    v26 = AppleSARHelper::callUserClientMethod(v15, 3, (const unint64_t *)buf, 1, &v40, 1, v43, &v41, &v40, 1uLL);
    if (!v23)
      goto LABEL_34;
  }
  else
  {
    v26 = 0;
    if (!v23)
      goto LABEL_34;
  }
  v27 = (unint64_t *)&v23->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
LABEL_34:
  if ((v26 & 1) == 0 && (v29 = *(NSObject **)(v7 + 80), os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF335000, v29, OS_LOG_TYPE_ERROR, "Failed to set SAR Fusion!", buf, 2u);
    if (*(unsigned __int8 *)(v7 + 166) == *(unsigned __int8 *)(v7 + 165))
    {
LABEL_37:
      if (*(_QWORD *)(v7 + 304))
        return;
    }
  }
  else if (*(unsigned __int8 *)(v7 + 166) == *(unsigned __int8 *)(v7 + 165))
  {
    goto LABEL_37;
  }
  v30 = *(std::__shared_weak_count **)(v7 + 56);
  if (!v30 || (v31 = *(_QWORD *)(v7 + 48), (v32 = std::__shared_weak_count::lock(v30)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v33 = v32;
  v34 = operator new(8uLL);
  *v34 = v7;
  v35 = *(NSObject **)(v7 + 64);
  v36 = (unint64_t *)&v33->__shared_owners_;
  do
    v37 = __ldxr(v36);
  while (__stxr(v37 + 1, v36));
  v38 = operator new(0x18uLL);
  *v38 = v34;
  v38[1] = v31;
  v38[2] = v33;
  dispatch_async_f(v35, v38, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_18initializeOBD_syncEvEUb4_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
  do
    v39 = __ldaxr(v36);
  while (__stlxr(v39 - 1, v36));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
}

void sub_1BF460E54(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  _Unwind_Resume(a1);
}

uint64_t dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void ___ZN9SARModule24initializeAccessory_syncEv_block_invoke(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  AppleSARHelper *v15;
  AppleSARHelper *v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  char v27;
  unint64_t *v28;
  unint64_t v29;
  NSObject *v30;
  int v31;
  unsigned int v32;
  uint8_t buf[16];
  unint64_t v34[2];

  v34[1] = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  if (!v6)
    return;
  v7 = v6;
  v8 = a1[5];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
  {
    if (!v8)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    if (!v8)
      return;
  }
  if (a2)
  {
    v11 = *(_DWORD *)(v5 + 272) | a2;
    v12 = *(_DWORD *)(v5 + 268);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  *(_DWORD *)(v5 + 272) = v11;
  *(_DWORD *)(v5 + 268) = v12;
  v13 = v12 | v11;
  *(_DWORD *)(v5 + 161) = v12 | v11;
  v14 = *(NSObject **)(v5 + 80);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v13;
    _os_log_impl(&dword_1BF335000, v14, OS_LOG_TYPE_DEFAULT, "#I Sending Accessory State: 0x%x", buf, 8u);
  }
  v15 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v16 = (AppleSARHelper *)off_1ED70FCB8;
  if (!off_1ED70FCB8)
  {
    AppleSARHelper::create_default_global(v15);
    v17 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v18 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
    off_1ED70FCB8 = v17;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v22 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v16 = (AppleSARHelper *)off_1ED70FCB8;
  }
  v24 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
  if (*(&off_1ED70FCB8 + 1))
  {
    v25 = (unint64_t *)(*(&off_1ED70FCB8 + 1) + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v31 = *(_DWORD *)(v5 + 161);
  if (!*((_DWORD *)v16 + 1))
  {
    v27 = 0;
    if (!v24)
      goto LABEL_37;
LABEL_33:
    v28 = (unint64_t *)&v24->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    goto LABEL_37;
  }
  *(_QWORD *)buf = 0;
  v34[0] = 0;
  v32 = 1;
  v27 = AppleSARHelper::callUserClientMethod(v16, 2, (const unint64_t *)buf, 1, &v31, 4, v34, &v32, &v31, 4uLL);
  if (v24)
    goto LABEL_33;
LABEL_37:
  if ((v27 & 1) == 0)
  {
    v30 = *(NSObject **)(v5 + 80);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF335000, v30, OS_LOG_TYPE_ERROR, "Failed to set SAR Fusion State!", buf, 2u);
    }
  }
}

void sub_1BF4611C0(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  _Unwind_Resume(a1);
}

uint64_t dispatch::callback<void({block_pointer})(unsigned int)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void ___ZN9SARModule26initializePowerSource_syncEv_block_invoke(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  SARModule *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (SARModule *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
        goto LABEL_7;
      }
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
      if (v8)
      {
LABEL_7:
        *((_DWORD *)v5 + 60) = a2;
        SARModule::sendPowerSource_sync(v5);
      }
    }
  }
}

void SARModule::sendPowerSource_sync(SARModule *this)
{
  int v2;
  NSObject *v3;
  AppleSARHelper *v4;
  AppleSARHelper *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char v16;
  unint64_t *v17;
  unint64_t v18;
  NSObject *v19;
  char v20;
  unsigned int v21;
  uint8_t buf[16];
  unint64_t v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  v2 = *((_DWORD *)this + 60);
  *((_BYTE *)this + 170) = v2;
  v3 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v2;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Sending Power Source: 0x%x\n", buf, 8u);
  }
  v4 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v5 = (AppleSARHelper *)off_1ED70FCB8;
  if (!off_1ED70FCB8)
  {
    AppleSARHelper::create_default_global(v4);
    v6 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v7 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
    off_1ED70FCB8 = v6;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v11 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v5 = (AppleSARHelper *)off_1ED70FCB8;
  }
  v13 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
  if (*(&off_1ED70FCB8 + 1))
  {
    v14 = (unint64_t *)(*(&off_1ED70FCB8 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v20 = *((_BYTE *)this + 170);
  if (*((_DWORD *)v5 + 1))
  {
    *(_QWORD *)buf = 0;
    v23[0] = 0;
    v21 = 1;
    v16 = AppleSARHelper::callUserClientMethod(v5, 8, (const unint64_t *)buf, 1, &v20, 1, v23, &v21, &v20, 1uLL);
    if (!v13)
      goto LABEL_25;
  }
  else
  {
    v16 = 0;
    if (!v13)
      goto LABEL_25;
  }
  v17 = (unint64_t *)&v13->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
  {
LABEL_25:
    if ((v16 & 1) != 0)
      return;
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if ((v16 & 1) != 0)
    return;
LABEL_26:
  v19 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF335000, v19, OS_LOG_TYPE_ERROR, "Failed to send power state", buf, 2u);
  }
}

void sub_1BF46152C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  _Unwind_Resume(a1);
}

uint64_t dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void SARModule::sendCurrentState_sync(SARModule *this)
{
  NSObject *v2;
  _BOOL8 v3;
  AppleSARHelper *v4;
  AppleSARHelper *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  NSObject *v31;
  NSObject *v32;
  AppleSARHelper *v33;
  AppleSARHelper *v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  char v45;
  unint64_t *v46;
  unint64_t v47;
  AppleSARHelper *v48;
  AppleSARHelper *v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  char v60;
  NSObject *v61;
  const char *v62;
  unint64_t *v63;
  unint64_t v64;
  AppleSARHelper *v65;
  AppleSARHelper *v66;
  __int128 v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  char v77;
  unint64_t *v78;
  unint64_t v79;
  AppleSARHelper *v80;
  AppleSARHelper *v81;
  __int128 v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  char v92;
  unint64_t *v93;
  unint64_t v94;
  AppleSARHelper *v95;
  AppleSARHelper *v96;
  __int128 v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  char v107;
  unint64_t *v108;
  unint64_t v109;
  AppleSARHelper *v110;
  AppleSARHelper *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  char v115;
  unint64_t *v116;
  unint64_t v117;
  _QWORD aBlock[6];
  std::__shared_weak_count *v119;
  __int16 v120;
  char v121;
  void *v122;
  dispatch_object_t object;
  AppleSARHelper *v124;
  uint64_t v125;
  int v126;
  unsigned int v127;
  uint8_t buf[16];
  unint64_t v129[2];

  v129[1] = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 10);
  v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Processing Cached Values", buf, 2u);
  }
  capabilities::abs::supportedSARFeatures((capabilities::abs *)v3);
  if (capabilities::abs::operator&())
  {
    BYTE2(v126) = 0;
    LOWORD(v126) = 0;
    v4 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
    v5 = (AppleSARHelper *)off_1ED70FCB8;
    if (!off_1ED70FCB8)
    {
      AppleSARHelper::create_default_global(v4);
      v6 = *(_OWORD *)buf;
      memset(buf, 0, sizeof(buf));
      v7 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
      off_1ED70FCB8 = v6;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v10 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v11 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v5 = (AppleSARHelper *)off_1ED70FCB8;
    }
    v13 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
    v124 = v5;
    v125 = *(&off_1ED70FCB8 + 1);
    if (*(&off_1ED70FCB8 + 1))
    {
      v14 = (unint64_t *)(*(&off_1ED70FCB8 + 1) + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
    if (*((_DWORD *)v5 + 1))
    {
      *(_QWORD *)buf = 3;
      v129[0] = 0;
      v127 = 1;
      v16 = AppleSARHelper::callUserClientMethod(v5, 31, (const unint64_t *)buf, 1, &v126, 3, v129, &v127, &v126, 3uLL);
      if (!v13)
        goto LABEL_26;
    }
    else
    {
      v16 = 0;
      if (!v13)
        goto LABEL_26;
    }
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if ((v16 & 1) != 0)
      {
LABEL_27:
        v19 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
        if (!v19 || (v20 = *((_QWORD *)this + 6), (v21 = std::__shared_weak_count::lock(v19)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v22 = v21;
        p_shared_weak_owners = (unint64_t *)&v21->__shared_weak_owners_;
        do
          v24 = __ldxr(p_shared_weak_owners);
        while (__stxr(v24 + 1, p_shared_weak_owners));
        v25 = (unint64_t *)&v21->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v22);
        }
        v27 = *((_QWORD *)this + 35);
        v28 = *(unsigned __int16 *)((char *)&v126 + 1);
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 3321888768;
        aBlock[2] = ___ZN9SARModule21sendCurrentState_syncEv_block_invoke;
        aBlock[3] = &__block_descriptor_59_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e21_v20__0B8_object__v_12l;
        aBlock[4] = this;
        aBlock[5] = v20;
        v119 = v22;
        do
          v29 = __ldxr(p_shared_weak_owners);
        while (__stxr(v29 + 1, p_shared_weak_owners));
        v120 = v126;
        v121 = BYTE2(v126);
        v30 = _Block_copy(aBlock);
        v31 = *((_QWORD *)this + 8);
        if (v31)
          dispatch_retain(*((dispatch_object_t *)this + 8));
        v122 = v30;
        object = v31;
        (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v27 + 64))(v27, v28, &v122);
        if (object)
          dispatch_release(object);
        if (v122)
          _Block_release(v122);
        if (v119)
          std::__shared_weak_count::__release_weak(v119);
        std::__shared_weak_count::__release_weak(v22);
        goto LABEL_49;
      }
      goto LABEL_47;
    }
LABEL_26:
    if ((v16 & 1) != 0)
      goto LABEL_27;
LABEL_47:
    v32 = *((_QWORD *)this + 10);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF335000, v32, OS_LOG_TYPE_ERROR, "Failed to get SAR transition time!", buf, 2u);
    }
  }
LABEL_49:
  v33 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v34 = (AppleSARHelper *)off_1ED70FCB8;
  if (!off_1ED70FCB8)
  {
    AppleSARHelper::create_default_global(v33);
    v35 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v36 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
    off_1ED70FCB8 = v35;
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v40 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v34 = (AppleSARHelper *)off_1ED70FCB8;
  }
  v42 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
  v124 = v34;
  v125 = *(&off_1ED70FCB8 + 1);
  if (*(&off_1ED70FCB8 + 1))
  {
    v43 = (unint64_t *)(*(&off_1ED70FCB8 + 1) + 8);
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v126 = *(_DWORD *)((char *)this + 161);
  if (*((_DWORD *)v34 + 1))
  {
    *(_QWORD *)buf = 0;
    v129[0] = 0;
    v127 = 1;
    v45 = AppleSARHelper::callUserClientMethod(v34, 2, (const unint64_t *)buf, 1, &v126, 4, v129, &v127, &v126, 4uLL);
    if (!v42)
      goto LABEL_71;
  }
  else
  {
    v45 = 0;
    if (!v42)
      goto LABEL_71;
  }
  v46 = (unint64_t *)&v42->__shared_owners_;
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (v47)
  {
LABEL_71:
    if ((v45 & 1) != 0)
      goto LABEL_72;
LABEL_91:
    v61 = *((_QWORD *)this + 10);
    if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    v62 = "Failed to send accessory state";
    goto LABEL_195;
  }
  ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
  std::__shared_weak_count::__release_weak(v42);
  if ((v45 & 1) == 0)
    goto LABEL_91;
LABEL_72:
  v48 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v49 = (AppleSARHelper *)off_1ED70FCB8;
  if (!off_1ED70FCB8)
  {
    AppleSARHelper::create_default_global(v48);
    v50 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v51 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
    off_1ED70FCB8 = v50;
    if (v51)
    {
      v52 = (unint64_t *)&v51->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v54 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v55 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v49 = (AppleSARHelper *)off_1ED70FCB8;
  }
  v57 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
  v124 = v49;
  v125 = *(&off_1ED70FCB8 + 1);
  if (*(&off_1ED70FCB8 + 1))
  {
    v58 = (unint64_t *)(*(&off_1ED70FCB8 + 1) + 8);
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  LOBYTE(v126) = *((_BYTE *)this + 165);
  if (*((_DWORD *)v49 + 1))
  {
    *(_QWORD *)buf = 0;
    v129[0] = 0;
    v127 = 1;
    v60 = AppleSARHelper::callUserClientMethod(v49, 3, (const unint64_t *)buf, 1, &v126, 1, v129, &v127, &v126, 1uLL);
    if (!v57)
      goto LABEL_97;
  }
  else
  {
    v60 = 0;
    if (!v57)
      goto LABEL_97;
  }
  v63 = (unint64_t *)&v57->__shared_owners_;
  do
    v64 = __ldaxr(v63);
  while (__stlxr(v64 - 1, v63));
  if (v64)
  {
LABEL_97:
    if ((v60 & 1) != 0)
      goto LABEL_98;
LABEL_117:
    v61 = *((_QWORD *)this + 10);
    if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    v62 = "Failed to send sar_selection and tuner state";
    goto LABEL_195;
  }
  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
  std::__shared_weak_count::__release_weak(v57);
  if ((v60 & 1) == 0)
    goto LABEL_117;
LABEL_98:
  v65 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v66 = (AppleSARHelper *)off_1ED70FCB8;
  if (!off_1ED70FCB8)
  {
    AppleSARHelper::create_default_global(v65);
    v67 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v68 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
    off_1ED70FCB8 = v67;
    if (v68)
    {
      v69 = (unint64_t *)&v68->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    v71 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v72 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    v66 = (AppleSARHelper *)off_1ED70FCB8;
  }
  v74 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
  v124 = v66;
  v125 = *(&off_1ED70FCB8 + 1);
  if (*(&off_1ED70FCB8 + 1))
  {
    v75 = (unint64_t *)(*(&off_1ED70FCB8 + 1) + 8);
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 1, v75));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  LOBYTE(v126) = *((_BYTE *)this + 167);
  if (*((_DWORD *)v66 + 1))
  {
    *(_QWORD *)buf = 0;
    v129[0] = 0;
    v127 = 1;
    v77 = AppleSARHelper::callUserClientMethod(v66, 6, (const unint64_t *)buf, 1, &v126, 1, v129, &v127, &v126, 1uLL);
    if (!v74)
      goto LABEL_123;
  }
  else
  {
    v77 = 0;
    if (!v74)
      goto LABEL_123;
  }
  v78 = (unint64_t *)&v74->__shared_owners_;
  do
    v79 = __ldaxr(v78);
  while (__stlxr(v79 - 1, v78));
  if (v79)
  {
LABEL_123:
    if ((v77 & 1) != 0)
      goto LABEL_124;
LABEL_143:
    v61 = *((_QWORD *)this + 10);
    if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    v62 = "Failed to send speaker state";
    goto LABEL_195;
  }
  ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
  std::__shared_weak_count::__release_weak(v74);
  if ((v77 & 1) == 0)
    goto LABEL_143;
LABEL_124:
  v80 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v81 = (AppleSARHelper *)off_1ED70FCB8;
  if (!off_1ED70FCB8)
  {
    AppleSARHelper::create_default_global(v80);
    v82 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v83 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
    off_1ED70FCB8 = v82;
    if (v83)
    {
      v84 = (unint64_t *)&v83->__shared_owners_;
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    v86 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v87 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
    v81 = (AppleSARHelper *)off_1ED70FCB8;
  }
  v89 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
  v124 = v81;
  v125 = *(&off_1ED70FCB8 + 1);
  if (*(&off_1ED70FCB8 + 1))
  {
    v90 = (unint64_t *)(*(&off_1ED70FCB8 + 1) + 8);
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  LOBYTE(v126) = *((_BYTE *)this + 168);
  if (*((_DWORD *)v81 + 1))
  {
    *(_QWORD *)buf = 0;
    v129[0] = 0;
    v127 = 1;
    v92 = AppleSARHelper::callUserClientMethod(v81, 7, (const unint64_t *)buf, 1, &v126, 1, v129, &v127, &v126, 1uLL);
    if (!v89)
      goto LABEL_150;
  }
  else
  {
    v92 = 0;
    if (!v89)
      goto LABEL_150;
  }
  v93 = (unint64_t *)&v89->__shared_owners_;
  do
    v94 = __ldaxr(v93);
  while (__stlxr(v94 - 1, v93));
  if (!v94)
  {
    ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
    std::__shared_weak_count::__release_weak(v89);
  }
LABEL_150:
  if ((v92 & 1) == 0)
  {
    v61 = *((_QWORD *)this + 10);
    if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    v62 = "Failed to send grip state";
    goto LABEL_195;
  }
  v95 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v96 = (AppleSARHelper *)off_1ED70FCB8;
  if (!off_1ED70FCB8)
  {
    AppleSARHelper::create_default_global(v95);
    v97 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v98 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
    off_1ED70FCB8 = v97;
    if (v98)
    {
      v99 = (unint64_t *)&v98->__shared_owners_;
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    v101 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v102 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    v96 = (AppleSARHelper *)off_1ED70FCB8;
  }
  v104 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
  v124 = v96;
  v125 = *(&off_1ED70FCB8 + 1);
  if (*(&off_1ED70FCB8 + 1))
  {
    v105 = (unint64_t *)(*(&off_1ED70FCB8 + 1) + 8);
    do
      v106 = __ldxr(v105);
    while (__stxr(v106 + 1, v105));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  LOBYTE(v126) = *((_BYTE *)this + 170);
  if (*((_DWORD *)v96 + 1))
  {
    *(_QWORD *)buf = 0;
    v129[0] = 0;
    v127 = 1;
    v107 = AppleSARHelper::callUserClientMethod(v96, 8, (const unint64_t *)buf, 1, &v126, 1, v129, &v127, &v126, 1uLL);
    if (!v104)
      goto LABEL_176;
  }
  else
  {
    v107 = 0;
    if (!v104)
      goto LABEL_176;
  }
  v108 = (unint64_t *)&v104->__shared_owners_;
  do
    v109 = __ldaxr(v108);
  while (__stlxr(v109 - 1, v108));
  if (!v109)
  {
    ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
    std::__shared_weak_count::__release_weak(v104);
  }
LABEL_176:
  if ((v107 & 1) == 0)
  {
    v61 = *((_QWORD *)this + 10);
    if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    v62 = "Failed to send power state";
    goto LABEL_195;
  }
  v110 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v111 = (AppleSARHelper *)off_1ED70FCB8;
  if (!off_1ED70FCB8)
  {
    AppleSARHelper::create_default_global(v110);
    std::shared_ptr<AppleSARHelper>::operator=[abi:ne180100]((__int128 *)buf);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    v111 = (AppleSARHelper *)off_1ED70FCB8;
  }
  v112 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
  v124 = v111;
  v125 = *(&off_1ED70FCB8 + 1);
  if (*(&off_1ED70FCB8 + 1))
  {
    v113 = (unint64_t *)(*(&off_1ED70FCB8 + 1) + 8);
    do
      v114 = __ldxr(v113);
    while (__stxr(v114 + 1, v113));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  LOBYTE(v126) = *((_BYTE *)this + 171);
  if (*((_DWORD *)v111 + 1))
  {
    *(_QWORD *)buf = 0;
    v129[0] = 0;
    v127 = 1;
    v115 = AppleSARHelper::callUserClientMethod(v111, 9, (const unint64_t *)buf, 1, &v126, 1, v129, &v127, &v126, 1uLL);
  }
  else
  {
    v115 = 0;
  }
  if (v112)
  {
    v116 = (unint64_t *)&v112->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  if ((v115 & 1) == 0)
  {
    v61 = *((_QWORD *)this + 10);
    if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v62 = "Failed to send wrist state";
LABEL_195:
      _os_log_error_impl(&dword_1BF335000, v61, OS_LOG_TYPE_ERROR, v62, buf, 2u);
    }
  }
}

void sub_1BF462224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  _Unwind_Resume(a1);
}

void ___ZN9SARModule21sendCurrentState_syncEv_block_invoke(uint64_t a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  const char *v12;
  int v13;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)(a1 + 40);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8)
      {
        v11 = *(NSObject **)(v5 + 80);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          v12 = "Failed to send";
          v13 = *(unsigned __int16 *)(a1 + 57);
          if (a2)
            v12 = "Succeeded in sending";
          v14 = 136315394;
          v15 = v12;
          v16 = 1024;
          v17 = v13;
          _os_log_impl(&dword_1BF335000, v11, OS_LOG_TYPE_DEFAULT, "#I %s stewie SAR wait time (%u sec)", (uint8_t *)&v14, 0x12u);
        }
      }
    }
  }
}

uint64_t dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t SARModule::convertUSBCAccessoryBitMask(uint64_t a1, unsigned __int16 **a2)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    LODWORD(v4) = 0;
    while (1)
    {
      v6 = *v2;
      v7 = v2[1];
      if (v6 == 17 && v7 == 2)
        LODWORD(v4) = v4 | 0x40000;
      if (v6 == 18 && v7 == 2)
        LODWORD(v4) = v4 | 0x80000;
      if (v6 == 19 && v7 == 2)
        LODWORD(v4) = v4 | 0x100000;
      if (v6 == 20 && v7 == 2)
        v4 = v4 | 0x200000;
      else
        v4 = v4;
      v8 = v2[3];
      if (v8 == 3 && v6 == 2055)
      {
        if (v7 == 2)
        {
          v4 = v4 | 0x400000;
LABEL_25:
          v5 = *(_DWORD *)(a1 + 272) | 1;
          goto LABEL_5;
        }
        v4 = v4 & 0xFFBFFFFF;
      }
      else
      {
        if (v6 == 4)
          *(_DWORD *)(a1 + 272) = *(_DWORD *)(a1 + 272) & 0xFFFFFBFF | ((v7 == 2) << 10);
        if (!v8 || v8 == 0xFFFF)
          goto LABEL_6;
        if (v7 == 2)
          goto LABEL_25;
      }
      v5 = *(_DWORD *)(a1 + 272) & 0xFFFFFFFE;
LABEL_5:
      *(_DWORD *)(a1 + 272) = v5;
LABEL_6:
      v2 += 6;
      if (v2 == v3)
        return v4;
    }
  }
  return 0;
}

void SARModule::setupTxIndicationWorkaround(SARModule *this)
{
  xpc_object_t v2;
  uint64_t v3;
  xpc_object_t v4;
  NSObject *v5;
  xpc_object_t v6;
  const char *v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  NSObject *v23;
  uint64_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  uint64_t v27;
  NSObject *v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  NSObject *v49;
  xpc_object_t v50;
  xpc_object_t v51;
  xpc_object_t v52;
  xpc_object_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  NSObject *v65;
  _QWORD v66[6];
  std::__shared_weak_count *v67;
  xpc_object_t v68;
  xpc_object_t v69;
  _QWORD v70[6];
  std::__shared_weak_count *v71;
  xpc_object_t v72;
  xpc_object_t v73;
  _QWORD aBlock[6];
  std::__shared_weak_count *v75;
  xpc_object_t object;
  uint8_t buf[8];
  dispatch_object_t v78;
  xpc_object_t v79[2];

  if (*((_QWORD *)this + 35))
  {
    v2 = xpc_dictionary_create(0, 0, 0);
    v3 = MEMORY[0x1E0C812F8];
    if (v2 || (v2 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8A86C](v2) == v3)
      {
        xpc_retain(v2);
        v4 = v2;
      }
      else
      {
        v4 = xpc_null_create();
      }
    }
    else
    {
      v4 = xpc_null_create();
      v2 = 0;
    }
    xpc_release(v2);
    v6 = xpc_string_create((const char *)*MEMORY[0x1E0DDFB88]);
    if (!v6)
      v6 = xpc_null_create();
    v7 = (const char *)*MEMORY[0x1E0DDFA68];
    xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E0DDFA68], v6);
    v8 = xpc_null_create();
    xpc_release(v6);
    xpc_release(v8);
    v9 = xpc_BOOL_create(1);
    if (!v9)
      v9 = xpc_null_create();
    xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E0DDFB60], v9);
    v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
    if (!v11 || (v12 = *((_QWORD *)this + 6), (v13 = std::__shared_weak_count::lock(v11)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v14 = v13;
    p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (v18)
    {
      v19 = *((_QWORD *)this + 35);
      v79[0] = v4;
      if (v4)
      {
LABEL_22:
        xpc_retain(v4);
LABEL_25:
        v20 = MEMORY[0x1E0C809B0];
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 3321888768;
        aBlock[2] = ___ZN9SARModule27setupTxIndicationWorkaroundEv_block_invoke;
        aBlock[3] = &__block_descriptor_64_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE56c15_ZTSN3xpc4dictE_e21_v20__0B8_object__v_12l;
        aBlock[4] = this;
        aBlock[5] = v12;
        v75 = v14;
        do
          v21 = __ldxr(p_shared_weak_owners);
        while (__stxr(v21 + 1, p_shared_weak_owners));
        object = v4;
        if (v4)
          xpc_retain(v4);
        else
          object = xpc_null_create();
        v22 = _Block_copy(aBlock);
        v23 = *((_QWORD *)this + 8);
        if (v23)
          dispatch_retain(*((dispatch_object_t *)this + 8));
        *(_QWORD *)buf = v22;
        v78 = v23;
        (*(void (**)(uint64_t, xpc_object_t *, uint8_t *))(*(_QWORD *)v19 + 48))(v19, v79, buf);
        v24 = MEMORY[0x1E0C812F8];
        if (v78)
          dispatch_release(v78);
        if (*(_QWORD *)buf)
          _Block_release(*(const void **)buf);
        xpc_release(v79[0]);
        v79[0] = 0;
        xpc_release(object);
        object = 0;
        if (v75)
          std::__shared_weak_count::__release_weak(v75);
        std::__shared_weak_count::__release_weak(v14);
        xpc_release(v4);
        v25 = xpc_dictionary_create(0, 0, 0);
        if (v25 || (v25 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8A86C](v25) == v24)
          {
            xpc_retain(v25);
            v26 = v25;
          }
          else
          {
            v26 = xpc_null_create();
          }
        }
        else
        {
          v26 = xpc_null_create();
          v25 = 0;
        }
        xpc_release(v25);
        v27 = MEMORY[0x1C3B8A86C](v26);
        if (v27 != v24)
        {
          v28 = *((_QWORD *)this + 10);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1BF335000, v28, OS_LOG_TYPE_ERROR, "Failed to create dictionary for antenna command driver!", buf, 2u);
          }
          goto LABEL_80;
        }
        v29 = xpc_string_create((const char *)*MEMORY[0x1E0DDFBD0]);
        if (!v29)
          v29 = xpc_null_create();
        xpc_dictionary_set_value(v26, v7, v29);
        v30 = xpc_null_create();
        xpc_release(v29);
        xpc_release(v30);
        v31 = xpc_BOOL_create(1);
        if (!v31)
          v31 = xpc_null_create();
        xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x1E0DDFB98], v31);
        v32 = xpc_null_create();
        xpc_release(v31);
        xpc_release(v32);
        v33 = xpc_string_create((const char *)*MEMORY[0x1E0DDFBB8]);
        if (!v33)
          v33 = xpc_null_create();
        xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x1E0DDFBB0], v33);
        v34 = xpc_null_create();
        xpc_release(v33);
        xpc_release(v34);
        v35 = xpc_int64_create(1);
        if (!v35)
          v35 = xpc_null_create();
        xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x1E0DDFB70], v35);
        v36 = xpc_null_create();
        xpc_release(v35);
        xpc_release(v36);
        v37 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
        if (!v37 || (v38 = v20, v39 = *((_QWORD *)this + 6), (v40 = std::__shared_weak_count::lock(v37)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v41 = v40;
        v42 = (unint64_t *)&v40->__shared_weak_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
        v44 = (unint64_t *)&v40->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (v45)
        {
          v46 = *((_QWORD *)this + 35);
          v73 = v26;
          if (v26)
          {
LABEL_63:
            xpc_retain(v26);
            goto LABEL_66;
          }
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v41);
          v46 = *((_QWORD *)this + 35);
          v73 = v26;
          if (v26)
            goto LABEL_63;
        }
        v73 = xpc_null_create();
LABEL_66:
        v70[0] = v38;
        v70[1] = 3321888768;
        v70[2] = ___ZN9SARModule27setupTxIndicationWorkaroundEv_block_invoke_39;
        v70[3] = &__block_descriptor_64_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE56c15_ZTSN3xpc4dictE_e21_v20__0B8_object__v_12l;
        v70[4] = this;
        v70[5] = v39;
        v71 = v41;
        do
          v47 = __ldxr(v42);
        while (__stxr(v47 + 1, v42));
        v72 = v26;
        if (v26)
          xpc_retain(v26);
        else
          v72 = xpc_null_create();
        v48 = _Block_copy(v70);
        v49 = *((_QWORD *)this + 8);
        if (v49)
          dispatch_retain(*((dispatch_object_t *)this + 8));
        *(_QWORD *)buf = v48;
        v78 = v49;
        (*(void (**)(uint64_t, xpc_object_t *, uint8_t *))(*(_QWORD *)v46 + 48))(v46, &v73, buf);
        v20 = v38;
        v24 = MEMORY[0x1E0C812F8];
        if (v78)
          dispatch_release(v78);
        if (*(_QWORD *)buf)
          _Block_release(*(const void **)buf);
        xpc_release(v73);
        v73 = 0;
        xpc_release(v72);
        v72 = 0;
        if (v71)
          std::__shared_weak_count::__release_weak(v71);
        std::__shared_weak_count::__release_weak(v41);
LABEL_80:
        xpc_release(v26);
        if (v27 != v24)
          return;
        v50 = xpc_dictionary_create(0, 0, 0);
        if (v50 || (v50 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8A86C](v50) == v24)
          {
            xpc_retain(v50);
            v51 = v50;
          }
          else
          {
            v51 = xpc_null_create();
          }
        }
        else
        {
          v51 = xpc_null_create();
          v50 = 0;
        }
        xpc_release(v50);
        v52 = xpc_string_create((const char *)*MEMORY[0x1E0DDFC08]);
        if (!v52)
          v52 = xpc_null_create();
        xpc_dictionary_set_value(v51, v7, v52);
        v53 = xpc_null_create();
        xpc_release(v52);
        xpc_release(v53);
        v54 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
        if (!v54 || (v55 = *((_QWORD *)this + 6), (v56 = std::__shared_weak_count::lock(v54)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v57 = v56;
        v58 = (unint64_t *)&v56->__shared_weak_owners_;
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
        v60 = (unint64_t *)&v56->__shared_owners_;
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (v61)
        {
          v62 = *((_QWORD *)this + 35);
          v69 = v51;
          if (v51)
          {
LABEL_97:
            xpc_retain(v51);
            goto LABEL_100;
          }
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v57);
          v62 = *((_QWORD *)this + 35);
          v69 = v51;
          if (v51)
            goto LABEL_97;
        }
        v69 = xpc_null_create();
LABEL_100:
        v66[0] = v20;
        v66[1] = 3321888768;
        v66[2] = ___ZN9SARModule27setupTxIndicationWorkaroundEv_block_invoke_40;
        v66[3] = &__block_descriptor_64_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE56c15_ZTSN3xpc4dictE_e21_v20__0B8_object__v_12l;
        v66[4] = this;
        v66[5] = v55;
        v67 = v57;
        do
          v63 = __ldxr(v58);
        while (__stxr(v63 + 1, v58));
        v68 = v51;
        if (v51)
          xpc_retain(v51);
        else
          v68 = xpc_null_create();
        v64 = _Block_copy(v66);
        v65 = *((_QWORD *)this + 8);
        if (v65)
          dispatch_retain(v65);
        *(_QWORD *)buf = v64;
        v78 = v65;
        (*(void (**)(uint64_t, xpc_object_t *, uint8_t *))(*(_QWORD *)v62 + 48))(v62, &v69, buf);
        if (v78)
          dispatch_release(v78);
        if (*(_QWORD *)buf)
          _Block_release(*(const void **)buf);
        xpc_release(v69);
        v69 = 0;
        xpc_release(v68);
        v68 = 0;
        if (v67)
          std::__shared_weak_count::__release_weak(v67);
        std::__shared_weak_count::__release_weak(v57);
        xpc_release(v51);
        return;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v14);
      v19 = *((_QWORD *)this + 35);
      v79[0] = v4;
      if (v4)
        goto LABEL_22;
    }
    v79[0] = xpc_null_create();
    goto LABEL_25;
  }
  v5 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF335000, v5, OS_LOG_TYPE_ERROR, "Check if it is mav device or antenna command driver is ready yet!", buf, 2u);
  }
}

void sub_1BF462EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, xpc_object_t object, xpc_object_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,xpc_object_t a25,xpc_object_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,xpc_object_t a34)
{
  std::__shared_weak_count *v34;
  void *v35;
  uint64_t v36;

  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback(v36 - 128);
  xpc_release(object);
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  xpc_release(a17);
  std::__shared_weak_count::__release_weak(v34);
  xpc_release(v35);
  _Unwind_Resume(a1);
}

void ___ZN9SARModule27setupTxIndicationWorkaroundEv_block_invoke(_QWORD *a1, char a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  _QWORD v18[2];
  xpc_object_t object;
  uint8_t buf[8];
  char v21;
  uint8_t v22[4];
  uint8_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      if ((a2 & 1) != 0)
      {
        v11 = *(NSObject **)(v5 + 80);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BF335000, v11, OS_LOG_TYPE_DEFAULT, "#I Succeeded in enabling Tx Capping Enable", buf, 2u);
        }
      }
      else
      {
        v13 = (void *)a1[7];
        v12 = a1 + 7;
        v14 = *MEMORY[0x1E0DDFA68];
        if (xpc_dictionary_get_value(v13, (const char *)*MEMORY[0x1E0DDFA68]))
        {
          v15 = *(NSObject **)(v5 + 80);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            v18[0] = v12;
            v18[1] = v14;
            xpc::dict::object_proxy::operator xpc::object((uint64_t)v18, &object);
            xpc::dyn_cast_or_default((xpc *)&object, (const object *)"None", v16);
            if (v21 >= 0)
              v17 = buf;
            else
              v17 = *(uint8_t **)buf;
            *(_DWORD *)v22 = 136315138;
            v23 = v17;
            _os_log_error_impl(&dword_1BF335000, v15, OS_LOG_TYPE_ERROR, "Failed to run command driver: %s", v22, 0xCu);
            if (v21 < 0)
              operator delete(*(void **)buf);
            xpc_release(object);
          }
        }
      }
    }
  }
}

void sub_1BF463284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

xpc_object_t __copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE56c15_ZTSN3xpc4dictE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *v6;
  xpc_object_t result;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (void *)a2[7];
  a1[7] = v6;
  if (v6)
    return xpc_retain(v6);
  result = xpc_null_create();
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE56c15_ZTSN3xpc4dictE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(_QWORD *)(a1 + 56) = 0;
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void ___ZN9SARModule27setupTxIndicationWorkaroundEv_block_invoke_39(_QWORD *a1, char a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  _QWORD v18[2];
  xpc_object_t object;
  uint8_t buf[8];
  char v21;
  uint8_t v22[4];
  uint8_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      if ((a2 & 1) != 0)
      {
        v11 = *(NSObject **)(v5 + 80);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BF335000, v11, OS_LOG_TYPE_DEFAULT, "#I Succeeded in enabling Tx indication", buf, 2u);
        }
      }
      else
      {
        v13 = (void *)a1[7];
        v12 = a1 + 7;
        v14 = *MEMORY[0x1E0DDFA68];
        if (xpc_dictionary_get_value(v13, (const char *)*MEMORY[0x1E0DDFA68]))
        {
          v15 = *(NSObject **)(v5 + 80);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            v18[0] = v12;
            v18[1] = v14;
            xpc::dict::object_proxy::operator xpc::object((uint64_t)v18, &object);
            xpc::dyn_cast_or_default((xpc *)&object, (const object *)"None", v16);
            if (v21 >= 0)
              v17 = buf;
            else
              v17 = *(uint8_t **)buf;
            *(_DWORD *)v22 = 136315138;
            v23 = v17;
            _os_log_error_impl(&dword_1BF335000, v15, OS_LOG_TYPE_ERROR, "Failed to run command driver: %s", v22, 0xCu);
            if (v21 < 0)
              operator delete(*(void **)buf);
            xpc_release(object);
          }
        }
      }
    }
  }
}

void sub_1BF463510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN9SARModule27setupTxIndicationWorkaroundEv_block_invoke_40(_QWORD *a1, char a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  _QWORD v18[2];
  xpc_object_t object;
  uint8_t buf[8];
  char v21;
  uint8_t v22[4];
  uint8_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      if ((a2 & 1) != 0)
      {
        v11 = *(NSObject **)(v5 + 80);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BF335000, v11, OS_LOG_TYPE_DEFAULT, "#I Succeeded in registering Tx indication", buf, 2u);
        }
      }
      else
      {
        v13 = (void *)a1[7];
        v12 = a1 + 7;
        v14 = *MEMORY[0x1E0DDFA68];
        if (xpc_dictionary_get_value(v13, (const char *)*MEMORY[0x1E0DDFA68]))
        {
          v15 = *(NSObject **)(v5 + 80);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            v18[0] = v12;
            v18[1] = v14;
            xpc::dict::object_proxy::operator xpc::object((uint64_t)v18, &object);
            xpc::dyn_cast_or_default((xpc *)&object, (const object *)"None", v16);
            if (v21 >= 0)
              v17 = buf;
            else
              v17 = *(uint8_t **)buf;
            *(_DWORD *)v22 = 136315138;
            v23 = v17;
            _os_log_error_impl(&dword_1BF335000, v15, OS_LOG_TYPE_ERROR, "Failed to run command driver: %s", v22, 0xCu);
            if (v21 < 0)
              operator delete(*(void **)buf);
            xpc_release(object);
          }
        }
      }
    }
  }
}

void sub_1BF4636F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void SARModule::transmitStateHandler(_QWORD *a1, int a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _DWORD *v10;
  unint64_t *p_shared_owners;
  NSObject *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;

  v4 = (std::__shared_weak_count *)a1[7];
  if (!v4 || (v7 = a1[6], (v8 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  v10 = operator new(0x10uLL);
  *(_QWORD *)v10 = a1;
  v10[2] = a2;
  v10[3] = a3;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v12 = a1[8];
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v14 = operator new(0x18uLL);
  *v14 = v10;
  v14[1] = v7;
  v14[2] = v9;
  dispatch_async_f(v12, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0>(SARModule::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0,dispatch_queue_s *::default_delete<SARModule::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void SARModule::createTransmitStateDict_sync(capabilities::radio *a1@<X0>, int a2@<W1>, int a3@<W2>, xpc_object_t *a4@<X8>)
{
  xpc_object_t v8;
  xpc_object_t v9;
  NSObject *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  uint8_t v17[16];

  if ((capabilities::radio::maverick(a1) & 1) != 0)
  {
    v8 = xpc_dictionary_create(0, 0, 0);
    if (v8 || (v8 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8A86C](v8) == MEMORY[0x1E0C812F8])
      {
        xpc_retain(v8);
        v9 = v8;
      }
      else
      {
        v9 = xpc_null_create();
      }
    }
    else
    {
      v9 = xpc_null_create();
      v8 = 0;
    }
    xpc_release(v8);
    if (a2 == 1)
    {
      v11 = xpc_string_create((const char *)*MEMORY[0x1E0CFBF28]);
      if (!v11)
        v11 = xpc_null_create();
    }
    else
    {
      if (a2)
      {
        *a4 = xpc_null_create();
LABEL_35:
        xpc_release(v9);
        return;
      }
      v11 = xpc_string_create((const char *)*MEMORY[0x1E0CFBC28]);
      if (!v11)
        v11 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E0CFBBD8], v11);
    v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    switch(a3)
    {
      case 0:
        v13 = xpc_string_create((const char *)*MEMORY[0x1E0CFBD40]);
        if (!v13)
          v13 = xpc_null_create();
        goto LABEL_31;
      case 1:
        v13 = xpc_string_create((const char *)*MEMORY[0x1E0CFBB90]);
        if (!v13)
          v13 = xpc_null_create();
        goto LABEL_31;
      case 2:
        v13 = xpc_string_create((const char *)*MEMORY[0x1E0CFBC20]);
        if (!v13)
          v13 = xpc_null_create();
        goto LABEL_31;
      case 3:
        v13 = xpc_string_create((const char *)*MEMORY[0x1E0CFBA78]);
        if (!v13)
          v13 = xpc_null_create();
LABEL_31:
        xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E0CFBD88], v13);
        v14 = xpc_null_create();
        xpc_release(v13);
        xpc_release(v14);
        break;
      default:
        break;
    }
    v15 = xpc_string_create((const char *)*MEMORY[0x1E0CFB5F8]);
    if (!v15)
      v15 = xpc_null_create();
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E0CFB680], v15);
    v16 = xpc_null_create();
    xpc_release(v15);
    xpc_release(v16);
    *a4 = v9;
    v9 = xpc_null_create();
    goto LABEL_35;
  }
  v10 = *((_QWORD *)a1 + 10);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v17 = 0;
    _os_log_error_impl(&dword_1BF335000, v10, OS_LOG_TYPE_ERROR, "This is not supported device", v17, 2u);
  }
  *a4 = xpc_null_create();
}

uint64_t SARModule::asString@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  const char *v2;

  if ((_DWORD)result == 1)
  {
    *(_BYTE *)(a2 + 23) = 12;
    strcpy((char *)a2, "EventUpdated");
  }
  else
  {
    if ((_DWORD)result)
      v2 = "UnknownReason";
    else
      v2 = "CallConnected";
    *(_BYTE *)(a2 + 23) = 13;
    *(_QWORD *)a2 = *(_QWORD *)v2;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(v2 + 5);
    *(_BYTE *)(a2 + 13) = 0;
  }
  return result;
}

uint64_t ctu::PthreadMutexGuardPolicy<AppleSARHelper>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void std::__shared_ptr_pointer<SARModule *,std::shared_ptr<SARModule> ctu::SharedSynchronizable<SARModule>::make_shared_ptr<SARModule>(SARModule*)::{lambda(SARModule *)#1},std::allocator<SARModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<SARModule *,std::shared_ptr<SARModule> ctu::SharedSynchronizable<SARModule>::make_shared_ptr<SARModule>(SARModule*)::{lambda(SARModule *)#1},std::allocator<SARModule>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 64), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<SARModule> ctu::SharedSynchronizable<SARModule>::make_shared_ptr<SARModule>(SARModule*)::{lambda(SARModule*)#1}::operator() const(SARModule*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<SARModule *,std::shared_ptr<SARModule> ctu::SharedSynchronizable<SARModule>::make_shared_ptr<SARModule>(SARModule*)::{lambda(SARModule *)#1},std::allocator<SARModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI9SARModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI9SARModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI9SARModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI9SARModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<SARModule> ctu::SharedSynchronizable<SARModule>::make_shared_ptr<SARModule>(SARModule*)::{lambda(SARModule*)#1}::operator() const(SARModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::shutdown(ShutdownStage,dispatch::group_session)::$_0>(SARModule::shutdown(ShutdownStage,dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::shutdown(ShutdownStage,dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<SARModule::shutdown(ShutdownStage,dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  NSObject *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  v4 = (std::__shared_weak_count *)v3[12];
  v3[11] = 0;
  v3[12] = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (!v3[35])
        goto LABEL_8;
      goto LABEL_6;
    }
  }
  if (v3[35])
LABEL_6:
    antenna::CommandDriver::registerHandler();
LABEL_8:
  v7 = v2[1];
  if (v7)
  {
    dispatch_group_leave(v7);
    v8 = v2[1];
    if (v8)
      dispatch_release(v8);
  }
  operator delete(v2);
  v9 = (std::__shared_weak_count *)a1[2];
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(a1);
}

void sub_1BF463F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  _QWORD *v10;
  _QWORD *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  NSObject *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  v15 = v11[1];
  if (v15)
  {
    dispatch_group_leave(v15);
    v16 = v11[1];
    if (v16)
      dispatch_release(v16);
  }
  operator delete(v11);
  v17 = (std::__shared_weak_count *)v10[2];
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<antenna::AntennaCommandDriverDelegate<SARModule>::create(std::shared_ptr<SARModule>)::MakeSharedEnabler,std::allocator<antenna::AntennaCommandDriverDelegate<SARModule>::create(std::shared_ptr<SARModule>)::MakeSharedEnabler>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E79071A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<antenna::AntennaCommandDriverDelegate<SARModule>::create(std::shared_ptr<SARModule>)::MakeSharedEnabler,std::allocator<antenna::AntennaCommandDriverDelegate<SARModule>::create(std::shared_ptr<SARModule>)::MakeSharedEnabler>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E79071A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<antenna::AntennaCommandDriverDelegate<SARModule>::create(std::shared_ptr<SARModule>)::MakeSharedEnabler,std::allocator<antenna::AntennaCommandDriverDelegate<SARModule>::create(std::shared_ptr<SARModule>)::MakeSharedEnabler>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void antenna::AntennaCommandDriverDelegate<SARModule>::create(std::shared_ptr<SARModule>)::MakeSharedEnabler::~MakeSharedEnabler(antenna::AntennaCommandDriverDelegateInterface *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = off_1E7907250;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(this);
}

{
  std::__shared_weak_count *v2;
  void *v3;

  *(_QWORD *)this = off_1E7907250;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(this);
  operator delete(v3);
}

void antenna::AntennaCommandDriverDelegate<SARModule>::signalTransmitState(uint64_t a1, int a2, int a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD **)(a1 + 8);
      if (v9)
        SARModule::transmitStateHandler(v9, a2, a3);
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void antenna::AntennaCommandDriverDelegate<SARModule>::~AntennaCommandDriverDelegate(antenna::AntennaCommandDriverDelegateInterface *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = off_1E7907250;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(this);
}

{
  std::__shared_weak_count *v2;
  void *v3;

  *(_QWORD *)this = off_1E7907250;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(this);
  operator delete(v3);
}

void std::shared_ptr<AppleSARHelper>::operator=[abi:ne180100](__int128 *a1)
{
  __int128 v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  v2 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
  off_1ED70FCB8 = v1;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::initialize(dispatch::group_session)::$_0>(SARModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<SARModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  SARModule **v2;
  SARModule *v3;
  const void *v4;
  size_t v5;
  size_t v6;
  void **p_dst;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void *v11;
  const void *v12;
  size_t v13;
  size_t v14;
  void *p_p;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  size_t v20;
  size_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  size_t v27;
  size_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  size_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  NSObject *v40;
  NSObject *v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  SARModule *v49;
  const void *v50;
  void *v51[2];
  unint64_t v52;
  void *v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  SARModule *v57;
  const void *v58;
  void *__p;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  SARModule *v63;
  const void *v64;
  void **__dst;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  SARModule *v69;
  const void *v70;
  _QWORD aBlock[5];
  const void *v72;

  v2 = *(SARModule ***)a1;
  v3 = **(SARModule ***)a1;
  SARModule::initializeHelpers_sync(v3);
  v4 = (const void *)*MEMORY[0x1E0CFB4E8];
  v5 = strlen((const char *)*MEMORY[0x1E0CFB4E8]);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_70;
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v66 = v6;
    v67 = v9 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v67) = v5;
  p_dst = (void **)&__dst;
  if (v5)
LABEL_8:
    memmove(p_dst, v4, v6);
  *((_BYTE *)p_dst + v6) = 0;
  v10 = (void **)MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
  aBlock[3] = &__block_descriptor_40_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  aBlock[4] = v3;
  v11 = _Block_copy(aBlock);
  v72 = v11;
  Service::registerCommandHandler((uint64_t)v3, (uint64_t)&__dst, &v72);
  if (v11)
    _Block_release(v11);
  if (SHIBYTE(v67) < 0)
    operator delete(__dst);
  v12 = (const void *)*MEMORY[0x1E0CFB1C8];
  v13 = strlen((const char *)*MEMORY[0x1E0CFB1C8]);
  if (v13 > 0x7FFFFFFFFFFFFFF7)
LABEL_70:
    std::string::__throw_length_error[abi:ne180100]();
  v14 = v13;
  if (v13 >= 0x17)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    p_p = operator new(v16 + 1);
    v60 = v14;
    v61 = v17 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_20;
  }
  HIBYTE(v61) = v13;
  p_p = &__p;
  if (v13)
LABEL_20:
    memmove(p_p, v12, v14);
  *((_BYTE *)p_p + v14) = 0;
  __dst = v10;
  v66 = 3221225472;
  v67 = (unint64_t)___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2;
  v68 = &__block_descriptor_40_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v69 = v3;
  v18 = _Block_copy(&__dst);
  v70 = v18;
  Service::registerCommandHandler((uint64_t)v3, (uint64_t)&__p, &v70);
  if (v18)
    _Block_release(v18);
  if (SHIBYTE(v61) < 0)
    operator delete(__p);
  v19 = (const void *)*MEMORY[0x1E0CFB998];
  v20 = strlen((const char *)*MEMORY[0x1E0CFB998]);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_70;
  v21 = v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = operator new(v23 + 1);
    v54 = v21;
    v55 = v24 | 0x8000000000000000;
    v53 = v22;
    goto LABEL_32;
  }
  HIBYTE(v55) = v20;
  v22 = &v53;
  if (v20)
LABEL_32:
    memmove(v22, v19, v21);
  *((_BYTE *)v22 + v21) = 0;
  __p = v10;
  v60 = 3221225472;
  v61 = (unint64_t)___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_3;
  v62 = &__block_descriptor_40_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v63 = v3;
  v25 = _Block_copy(&__p);
  v64 = v25;
  Service::registerCommandHandler((uint64_t)v3, (uint64_t)&v53, &v64);
  if (v25)
    _Block_release(v25);
  if (SHIBYTE(v55) < 0)
    operator delete(v53);
  v26 = (const void *)*MEMORY[0x1E0CFB868];
  v27 = strlen((const char *)*MEMORY[0x1E0CFB868]);
  if (v27 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_70;
  v28 = v27;
  if (v27 >= 0x17)
  {
    v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v30 = v27 | 7;
    v31 = v30 + 1;
    v29 = operator new(v30 + 1);
    v46 = v28;
    v47 = v31 | 0x8000000000000000;
    v45 = v29;
    goto LABEL_44;
  }
  HIBYTE(v47) = v27;
  v29 = &v45;
  if (v27)
LABEL_44:
    memmove(v29, v26, v28);
  *((_BYTE *)v29 + v28) = 0;
  v53 = v10;
  v54 = 3221225472;
  v55 = (unint64_t)___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_4;
  v56 = &__block_descriptor_40_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v57 = v3;
  v32 = _Block_copy(&v53);
  v58 = v32;
  Service::registerCommandHandler((uint64_t)v3, (uint64_t)&v45, &v58);
  if (v32)
    _Block_release(v32);
  if (SHIBYTE(v47) < 0)
    operator delete(v45);
  v33 = (const void *)*MEMORY[0x1E0CFBAC0];
  v34 = strlen((const char *)*MEMORY[0x1E0CFBAC0]);
  if (v34 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_70;
  v35 = (void *)v34;
  if (v34 >= 0x17)
  {
    v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v34 | 7) != 0x17)
      v37 = v34 | 7;
    v38 = v37 + 1;
    v36 = operator new(v37 + 1);
    v51[1] = v35;
    v52 = v38 | 0x8000000000000000;
    v51[0] = v36;
    goto LABEL_56;
  }
  HIBYTE(v52) = v34;
  v36 = v51;
  if (v34)
LABEL_56:
    memmove(v36, v33, (size_t)v35);
  *((_BYTE *)v35 + (_QWORD)v36) = 0;
  v45 = v10;
  v46 = 3221225472;
  v47 = (unint64_t)___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_5;
  v48 = &__block_descriptor_40_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v49 = v3;
  v39 = _Block_copy(&v45);
  v50 = v39;
  Service::registerCommandHandler((uint64_t)v3, (uint64_t)v51, &v50);
  if (v39)
    _Block_release(v39);
  if (SHIBYTE(v52) < 0)
    operator delete(v51[0]);
  SARModule::finishInitialization_sync(v3);
  v40 = v2[1];
  if (v40)
  {
    dispatch_group_leave(v40);
    v41 = v2[1];
    if (v41)
      dispatch_release(v41);
  }
  operator delete(v2);
  v42 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  operator delete(a1);
}

void sub_1BF464774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _QWORD *v47;
  _QWORD *v48;
  const void *v49;
  NSObject *v51;
  NSObject *v52;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;

  if (v49)
    _Block_release(v49);
  if (a23 < 0)
    operator delete(__p);
  v51 = v48[1];
  if (v51)
  {
    dispatch_group_leave(v51);
    v52 = v48[1];
    if (v52)
      dispatch_release(v52);
  }
  operator delete(v48);
  v53 = (std::__shared_weak_count *)v47[2];
  if (v53)
  {
    p_shared_owners = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(p_shared_owners);
    while (__stlxr(v55 - 1, p_shared_owners));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  operator delete(v47);
  _Unwind_Resume(a1);
}

void ___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke(uint64_t a1, xpc_object_t *a2, const void **a3)
{
  _QWORD *v4;
  xpc_object_t v5;
  const void *v6;
  void *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  xpc_object_t v13;
  NSObject *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;

  v4 = *(_QWORD **)(a1 + 32);
  v5 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v6 = *a3;
    if (*a3)
      goto LABEL_3;
LABEL_6:
    v7 = 0;
    v8 = (std::__shared_weak_count *)v4[7];
    if (!v8)
      goto LABEL_15;
    goto LABEL_7;
  }
  v5 = xpc_null_create();
  v6 = *a3;
  if (!*a3)
    goto LABEL_6;
LABEL_3:
  v7 = _Block_copy(v6);
  v8 = (std::__shared_weak_count *)v4[7];
  if (!v8)
LABEL_15:
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_7:
  v9 = v4[6];
  v10 = std::__shared_weak_count::lock(v8);
  if (!v10)
    goto LABEL_15;
  v11 = v10;
  v12 = operator new(0x18uLL);
  *v12 = v4;
  v12[1] = v5;
  v13 = xpc_null_create();
  v12[2] = v7;
  v14 = v4[8];
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v16 = __ldxr(p_shared_owners);
  while (__stxr(v16 + 1, p_shared_owners));
  v17 = operator new(0x18uLL);
  *v17 = v12;
  v17[1] = v9;
  v17[2] = v11;
  dispatch_async_f(v14, v17, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  xpc_release(v13);
}

void ___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2(uint64_t a1, xpc_object_t *a2, const void **a3)
{
  _QWORD *v4;
  xpc_object_t v5;
  const void *v6;
  void *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  xpc_object_t v13;
  NSObject *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;

  v4 = *(_QWORD **)(a1 + 32);
  v5 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v6 = *a3;
    if (*a3)
      goto LABEL_3;
LABEL_6:
    v7 = 0;
    v8 = (std::__shared_weak_count *)v4[7];
    if (!v8)
      goto LABEL_15;
    goto LABEL_7;
  }
  v5 = xpc_null_create();
  v6 = *a3;
  if (!*a3)
    goto LABEL_6;
LABEL_3:
  v7 = _Block_copy(v6);
  v8 = (std::__shared_weak_count *)v4[7];
  if (!v8)
LABEL_15:
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_7:
  v9 = v4[6];
  v10 = std::__shared_weak_count::lock(v8);
  if (!v10)
    goto LABEL_15;
  v11 = v10;
  v12 = operator new(0x18uLL);
  *v12 = v4;
  v12[1] = v5;
  v13 = xpc_null_create();
  v12[2] = v7;
  v14 = v4[8];
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v16 = __ldxr(p_shared_owners);
  while (__stxr(v16 + 1, p_shared_owners));
  v17 = operator new(0x18uLL);
  *v17 = v12;
  v17[1] = v9;
  v17[2] = v11;
  dispatch_async_f(v14, v17, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb0_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  xpc_release(v13);
}

void ___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_3(uint64_t a1, xpc_object_t *a2, const void **a3)
{
  _QWORD *v4;
  xpc_object_t v5;
  const void *v6;
  void *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  xpc_object_t v13;
  NSObject *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;

  v4 = *(_QWORD **)(a1 + 32);
  v5 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v6 = *a3;
    if (*a3)
      goto LABEL_3;
LABEL_6:
    v7 = 0;
    v8 = (std::__shared_weak_count *)v4[7];
    if (!v8)
      goto LABEL_15;
    goto LABEL_7;
  }
  v5 = xpc_null_create();
  v6 = *a3;
  if (!*a3)
    goto LABEL_6;
LABEL_3:
  v7 = _Block_copy(v6);
  v8 = (std::__shared_weak_count *)v4[7];
  if (!v8)
LABEL_15:
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_7:
  v9 = v4[6];
  v10 = std::__shared_weak_count::lock(v8);
  if (!v10)
    goto LABEL_15;
  v11 = v10;
  v12 = operator new(0x18uLL);
  *v12 = v4;
  v12[1] = v5;
  v13 = xpc_null_create();
  v12[2] = v7;
  v14 = v4[8];
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v16 = __ldxr(p_shared_owners);
  while (__stxr(v16 + 1, p_shared_owners));
  v17 = operator new(0x18uLL);
  *v17 = v12;
  v17[1] = v9;
  v17[2] = v11;
  dispatch_async_f(v14, v17, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb1_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  xpc_release(v13);
}

void ___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_4(uint64_t a1, uint64_t a2, const void **a3)
{
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  unint64_t *p_shared_owners;
  NSObject *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;

  v3 = *(_QWORD **)(a1 + 32);
  if (*a3)
  {
    v4 = _Block_copy(*a3);
    v5 = (std::__shared_weak_count *)v3[7];
    if (!v5)
LABEL_12:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    v4 = 0;
    v5 = (std::__shared_weak_count *)v3[7];
    if (!v5)
      goto LABEL_12;
  }
  v6 = v3[6];
  v7 = std::__shared_weak_count::lock(v5);
  if (!v7)
    goto LABEL_12;
  v8 = v7;
  v9 = operator new(0x10uLL);
  *v9 = v3;
  v9[1] = v4;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v11 = v3[8];
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = operator new(0x18uLL);
  *v13 = v9;
  v13[1] = v6;
  v13[2] = v8;
  dispatch_async_f(v11, v13, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void ___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_5(uint64_t a1, uint64_t a2, const void **a3)
{
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  unint64_t *p_shared_owners;
  NSObject *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;

  v3 = *(_QWORD **)(a1 + 32);
  if (*a3)
  {
    v4 = _Block_copy(*a3);
    v5 = (std::__shared_weak_count *)v3[7];
    if (!v5)
LABEL_12:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    v4 = 0;
    v5 = (std::__shared_weak_count *)v3[7];
    if (!v5)
      goto LABEL_12;
  }
  v6 = v3[6];
  v7 = std::__shared_weak_count::lock(v5);
  if (!v7)
    goto LABEL_12;
  v8 = v7;
  v9 = operator new(0x10uLL);
  *v9 = v3;
  v9[1] = v4;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v11 = v3[8];
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = operator new(0x18uLL);
  *v13 = v9;
  v13[1] = v6;
  v13[2] = v8;
  dispatch_async_f(v11, v13, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb3_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  const void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t object;
  uint8_t buf[8];

  v2 = *a1;
  v3 = **a1;
  v4 = 3760250884;
  if (MEMORY[0x1C3B8A86C]((*a1)[1]) == MEMORY[0x1E0C812F8])
  {
    v5 = *(_QWORD *)(v3 + 176);
    if (v5)
    {
      v6 = (void *)v2[1];
      object = v6;
      if (v6)
        xpc_retain(v6);
      else
        object = xpc_null_create();
      AudioManager::setAudioState(v5, (xpc::object *)&object);
      xpc_release(object);
      v4 = 0;
      object = 0;
    }
    else
    {
      v7 = *(NSObject **)(v3 + 80);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BF335000, v7, OS_LOG_TYPE_DEFAULT, "#I Audio Manager is not created yet", buf, 2u);
      }
    }
  }
  else
  {
    v4 = 3760250880;
  }
  v8 = v2[2];
  *(_QWORD *)buf = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(v8 + 16))(v8, v4, buf);
  xpc_release(*(xpc_object_t *)buf);
  v9 = (const void *)v2[2];
  if (v9)
    _Block_release(v9);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v10 = (std::__shared_weak_count *)a1[2];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  operator delete(a1);
}

void sub_1BF464FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, xpc_object_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  const void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  xpc_release(object);
  v14 = *(const void **)(v12 + 16);
  if (v14)
    _Block_release(v14);
  xpc_release(*(xpc_object_t *)(v12 + 8));
  operator delete((void *)v12);
  v15 = (std::__shared_weak_count *)v11[2];
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator delete(v11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb0_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  char *v7;
  size_t v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  void *v14;
  const void *v15;
  CFTypeID v16;
  const void *v17;
  uint64_t v18;
  NSObject *v19;
  xpc_object_t v20;
  uint64_t v21;
  NSObject *v22;
  ctu *v23;
  uint64_t v24;
  const void *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  ctu *v29;
  uint8_t buf[32];
  _BYTE v31[24];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  v4 = MEMORY[0x1C3B8A86C]((*a1)[1]);
  v5 = *(NSObject **)(v3 + 80);
  if (v4 != MEMORY[0x1E0C812F8])
  {
    v6 = 3760250880;
    if (os_log_type_enabled(*(os_log_t *)(v3 + 80), OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF335000, v5, OS_LOG_TYPE_ERROR, "Motion parameter dictionary is empty!", buf, 2u);
    }
    goto LABEL_50;
  }
  if (os_log_type_enabled(*(os_log_t *)(v3 + 80), OS_LOG_TYPE_DEFAULT))
  {
    v7 = (char *)MEMORY[0x1C3B8A7D0](v2[1]);
    memset(buf, 170, 24);
    v8 = strlen(v7);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v9 = v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = operator new(v11 + 1);
      *(_QWORD *)&buf[8] = v9;
      *(_QWORD *)&buf[16] = v12 | 0x8000000000000000;
      *(_QWORD *)buf = v10;
    }
    else
    {
      buf[23] = v8;
      v10 = buf;
      if (!v8)
        goto LABEL_13;
    }
    memcpy(v10, v7, v9);
LABEL_13:
    *((_BYTE *)v10 + v9) = 0;
    free(v7);
    v13 = buf;
    if ((buf[23] & 0x80u) != 0)
      v13 = *(uint8_t **)buf;
    *(_DWORD *)v31 = 136315138;
    *(_QWORD *)&v31[4] = v13;
    _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "#I Motion parameter is given: %s", v31, 0xCu);
    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);
    v5 = *(NSObject **)(v3 + 80);
  }
  if (!*(_QWORD *)(v3 + 104))
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEBUG, "#D CoreMotion On Body Handler is empty", buf, 2u);
    }
    goto LABEL_31;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "#I Set CoreMotion On Body Handler's motion parameter!", buf, 2u);
  }
  ctu::xpc_to_cf((ctu *)v2[1], v14);
  v15 = *(const void **)buf;
  if (*(_QWORD *)buf)
  {
    v16 = CFGetTypeID(*(CFTypeRef *)buf);
    if (v16 == CFDictionaryGetTypeID())
    {
      CFRetain(v15);
      v17 = *(const void **)buf;
      if (!*(_QWORD *)buf)
        goto LABEL_29;
    }
    else
    {
      v15 = 0;
      v17 = *(const void **)buf;
      if (!*(_QWORD *)buf)
        goto LABEL_29;
    }
    CFRelease(v17);
  }
LABEL_29:
  CMOnBodyDelegate::setThresholds(*(CMOnBodyDelegate **)(v3 + 104), v15);
  if (v15)
    CFRelease(v15);
LABEL_31:
  v18 = *(_QWORD *)(v3 + 192);
  v19 = *(NSObject **)(v3 + 80);
  if (v18)
  {
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF335000, v19, OS_LOG_TYPE_DEFAULT, "#I Setting OBD manager's motion parameter!", buf, 2u);
      v18 = *(_QWORD *)(v3 + 192);
    }
    v20 = (xpc_object_t)v2[1];
    *(_QWORD *)v31 = v20;
    if (v20)
    {
      xpc_retain(v20);
    }
    else
    {
      v20 = xpc_null_create();
      *(_QWORD *)v31 = v20;
    }
    OBDManager::setMotionParameter(v18, (ctu **)v31);
    xpc_release(v20);
    *(_QWORD *)v31 = 0;
  }
  else if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_1BF335000, v19, OS_LOG_TYPE_DEBUG, "#D OBD manager is empty", buf, 2u);
  }
  v21 = *(_QWORD *)(v3 + 248);
  v22 = *(NSObject **)(v3 + 80);
  if (v21)
  {
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF335000, v22, OS_LOG_TYPE_DEFAULT, "#I Setting hand detection manager's motion parameter!", buf, 2u);
      v21 = *(_QWORD *)(v3 + 248);
    }
    v23 = (ctu *)v2[1];
    v29 = v23;
    if (v23)
    {
      xpc_retain(v23);
    }
    else
    {
      v23 = (ctu *)xpc_null_create();
      v29 = v23;
    }
    HandDetectionManager::setMotionParameter(v21, &v29);
    xpc_release(v23);
    v6 = 0;
    v29 = 0;
  }
  else
  {
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BF335000, v22, OS_LOG_TYPE_DEBUG, "#D hand detection manager is empty", buf, 2u);
    }
    v6 = 0;
  }
LABEL_50:
  v24 = v2[2];
  *(_QWORD *)buf = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(v24 + 16))(v24, v6, buf);
  xpc_release(*(xpc_object_t *)buf);
  v25 = (const void *)v2[2];
  if (v25)
    _Block_release(v25);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v26 = (std::__shared_weak_count *)a1[2];
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  operator delete(a1);
}

void sub_1BF465530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb1_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  xpc_object_t value;
  xpc_object_t v5;
  NSObject *v6;
  xpc_object_t v7;
  uint64_t v8;
  xpc_object_t v9;
  char *bytes_ptr;
  size_t length;
  void *v12;
  int v13;
  int v14;
  NSObject *v15;
  AppleSARHelper *v16;
  AppleSARHelper *v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  char v28;
  size_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  unint64_t *v39;
  unint64_t v40;
  xpc_object_t v41;
  uint64_t v42;
  xpc_object_t v43;
  NSObject *v44;
  xpc_object_t v45;
  uint64_t v46;
  xpc_object_t v47;
  const void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  unsigned int v53;
  xpc_object_t object[2];
  unint64_t v55[2];

  v55[1] = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  value = xpc_dictionary_get_value((xpc_object_t)(*a1)[1], (const char *)*MEMORY[0x1E0CFB208]);
  v5 = value;
  if (value)
    xpc_retain(value);
  else
    v5 = xpc_null_create();
  if (MEMORY[0x1C3B8A86C](v5) == MEMORY[0x1E0C81350])
  {
    v6 = *(NSObject **)(v3 + 80);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      if (!v2[2])
        goto LABEL_8;
      goto LABEL_7;
    }
    LOWORD(object[0]) = 0;
    _os_log_error_impl(&dword_1BF335000, v6, OS_LOG_TYPE_ERROR, "Failed to get accessory information!", (uint8_t *)object, 2u);
    if (v2[2])
    {
LABEL_7:
      v7 = xpc_null_create();
      v8 = v2[2];
      object[0] = v7;
      v9 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v8 + 16))(v8, 3760250880, object);
      xpc_release(object[0]);
      xpc_release(v9);
    }
  }
LABEL_8:
  bytes_ptr = (char *)xpc_data_get_bytes_ptr(v5);
  length = xpc_data_get_length(v5);
  if (length >= 0xC)
  {
    v29 = 12 * (length / 0xC);
    v30 = (char *)operator new(v29);
    v12 = v30;
    v31 = 0;
    do
    {
      v32 = &v30[v31];
      v33 = *(_QWORD *)&bytes_ptr[v31];
      *((_DWORD *)v32 + 2) = *(_DWORD *)&bytes_ptr[v31 + 8];
      *(_QWORD *)v32 = v33;
      v31 += 12;
    }
    while (v29 != v31);
    v13 = 0;
    v34 = v30;
    while (1)
    {
      v36 = *(unsigned __int16 *)v34;
      v37 = *((unsigned __int16 *)v34 + 1);
      if (v36 == 17 && v37 == 2)
        v13 |= 0x40000u;
      if (v36 == 18 && v37 == 2)
        v13 |= 0x80000u;
      if (v36 == 19 && v37 == 2)
        v13 |= 0x100000u;
      if (v36 == 20 && v37 == 2)
        v13 |= 0x200000u;
      v38 = *((unsigned __int16 *)v34 + 3);
      if (v38 == 3 && v36 == 2055)
      {
        if (v37 == 2)
        {
          v13 |= 0x400000u;
LABEL_54:
          v35 = *(_DWORD *)(v3 + 272) | 1;
          goto LABEL_35;
        }
        v13 &= ~0x400000u;
      }
      else
      {
        if (v36 == 4)
          *(_DWORD *)(v3 + 272) = *(_DWORD *)(v3 + 272) & 0xFFFFFBFF | ((v37 == 2) << 10);
        if (!v38 || v38 == 0xFFFF)
          goto LABEL_36;
        if (v37 == 2)
          goto LABEL_54;
      }
      v35 = *(_DWORD *)(v3 + 272) & 0xFFFFFFFE;
LABEL_35:
      *(_DWORD *)(v3 + 272) = v35;
LABEL_36:
      v34 += 12;
      if (v34 == &v30[v29])
        goto LABEL_10;
    }
  }
  v12 = 0;
  v13 = 0;
LABEL_10:
  *(_DWORD *)(v3 + 268) = v13;
  v14 = *(_DWORD *)(v3 + 272) | v13;
  *(_DWORD *)(v3 + 161) = v14;
  v15 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(object[0]) = 67109120;
    HIDWORD(object[0]) = v14;
    _os_log_impl(&dword_1BF335000, v15, OS_LOG_TYPE_DEFAULT, "#I Sending Accessory State with USB-C: 0x%x", (uint8_t *)object, 8u);
  }
  v16 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v17 = (AppleSARHelper *)off_1ED70FCB8;
  if (!off_1ED70FCB8)
  {
    AppleSARHelper::create_default_global(v16);
    v18 = *(_OWORD *)object;
    object[0] = 0;
    object[1] = 0;
    v19 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
    off_1ED70FCB8 = v18;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = (std::__shared_weak_count *)object[1];
    if (object[1])
    {
      v23 = (unint64_t *)((char *)object[1] + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v17 = (AppleSARHelper *)off_1ED70FCB8;
  }
  v25 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
  if (*(&off_1ED70FCB8 + 1))
  {
    v26 = (unint64_t *)(*(&off_1ED70FCB8 + 1) + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v52 = *(_DWORD *)(v3 + 161);
  if (*((_DWORD *)v17 + 1))
  {
    object[0] = 0;
    v55[0] = 0;
    v53 = 1;
    v28 = AppleSARHelper::callUserClientMethod(v17, 2, (const unint64_t *)object, 1, &v52, 4, v55, &v53, &v52, 4uLL);
    if (!v25)
      goto LABEL_59;
  }
  else
  {
    v28 = 0;
    if (!v25)
      goto LABEL_59;
  }
  v39 = (unint64_t *)&v25->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (v40)
  {
LABEL_59:
    if ((v28 & 1) != 0)
      goto LABEL_60;
LABEL_63:
    v44 = *(NSObject **)(v3 + 80);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object[0]) = 0;
      _os_log_error_impl(&dword_1BF335000, v44, OS_LOG_TYPE_ERROR, "Failed to set SAR Fusion State!", (uint8_t *)object, 2u);
      if (!v2[2])
        goto LABEL_66;
    }
    else if (!v2[2])
    {
      goto LABEL_66;
    }
    v45 = xpc_null_create();
    v46 = v2[2];
    object[0] = v45;
    v47 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v46 + 16))(v46, 3760250880, object);
    xpc_release(object[0]);
    xpc_release(v47);
    goto LABEL_66;
  }
  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
  std::__shared_weak_count::__release_weak(v25);
  if ((v28 & 1) == 0)
    goto LABEL_63;
LABEL_60:
  if (v2[2])
  {
    v41 = xpc_null_create();
    v42 = v2[2];
    object[0] = v41;
    v43 = xpc_null_create();
    (*(void (**)(uint64_t, _QWORD, xpc_object_t *))(v42 + 16))(v42, 0, object);
    xpc_release(object[0]);
    xpc_release(v43);
  }
LABEL_66:
  if (v12)
    operator delete(v12);
  xpc_release(v5);
  v48 = (const void *)v2[2];
  if (v48)
    _Block_release(v48);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v49 = (std::__shared_weak_count *)a1[2];
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  operator delete(a1);
}

void sub_1BF465BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  AppleSARHelper *v5;
  AppleSARHelper *v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  const void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  char v27;
  unsigned int v28;
  uint8_t buf[16];
  unint64_t v30[2];

  v30[1] = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  *(_BYTE *)(v3 + 296) = 1;
  v4 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I Blocking accessories", buf, 2u);
  }
  v5 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v6 = (AppleSARHelper *)off_1ED70FCB8;
  if (!off_1ED70FCB8)
  {
    AppleSARHelper::create_default_global(v5);
    v7 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v8 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
    off_1ED70FCB8 = v7;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v12 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v6 = (AppleSARHelper *)off_1ED70FCB8;
  }
  v14 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
  if (*(&off_1ED70FCB8 + 1))
  {
    v15 = (unint64_t *)(*(&off_1ED70FCB8 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v27 = *(_BYTE *)(v3 + 296);
  if (*((_DWORD *)v6 + 1))
  {
    *(_QWORD *)buf = 0;
    v30[0] = 0;
    v28 = 1;
    v17 = AppleSARHelper::callUserClientMethod(v6, 29, (const unint64_t *)buf, 1, &v27, 1, v30, &v28, &v27, 1uLL);
    if (!v14)
      goto LABEL_25;
  }
  else
  {
    v17 = 0;
    if (!v14)
      goto LABEL_25;
  }
  v18 = (unint64_t *)&v14->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_25:
    if ((v17 & 1) != 0)
      goto LABEL_26;
LABEL_29:
    v21 = *(NSObject **)(v3 + 80);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF335000, v21, OS_LOG_TYPE_ERROR, "Failed to set blocking accessories", buf, 2u);
      v22 = v2[1];
      if (!v22)
        goto LABEL_32;
    }
    else
    {
      v22 = v2[1];
      if (!v22)
        goto LABEL_32;
    }
    *(_QWORD *)buf = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, uint8_t *))(v22 + 16))(v22, 3760250880, buf);
    xpc_release(*(xpc_object_t *)buf);
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if ((v17 & 1) == 0)
    goto LABEL_29;
LABEL_26:
  v20 = v2[1];
  if (v20)
  {
    *(_QWORD *)buf = xpc_null_create();
    (*(void (**)(uint64_t, _QWORD, uint8_t *))(v20 + 16))(v20, 0, buf);
    xpc_release(*(xpc_object_t *)buf);
  }
LABEL_32:
  v23 = (const void *)v2[1];
  if (v23)
    _Block_release(v23);
  operator delete(v2);
  v24 = (std::__shared_weak_count *)a1[2];
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  operator delete(a1);
}

void sub_1BF4660B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb3_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  AppleSARHelper *v5;
  AppleSARHelper *v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  const void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  char v27;
  unsigned int v28;
  uint8_t buf[16];
  unint64_t v30[2];

  v30[1] = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  *(_BYTE *)(v3 + 296) = 0;
  v4 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I Unblocking accessories", buf, 2u);
  }
  v5 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v6 = (AppleSARHelper *)off_1ED70FCB8;
  if (!off_1ED70FCB8)
  {
    AppleSARHelper::create_default_global(v5);
    v7 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v8 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
    off_1ED70FCB8 = v7;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v12 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v6 = (AppleSARHelper *)off_1ED70FCB8;
  }
  v14 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
  if (*(&off_1ED70FCB8 + 1))
  {
    v15 = (unint64_t *)(*(&off_1ED70FCB8 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v27 = *(_BYTE *)(v3 + 296);
  if (*((_DWORD *)v6 + 1))
  {
    *(_QWORD *)buf = 0;
    v30[0] = 0;
    v28 = 1;
    v17 = AppleSARHelper::callUserClientMethod(v6, 29, (const unint64_t *)buf, 1, &v27, 1, v30, &v28, &v27, 1uLL);
    if (!v14)
      goto LABEL_25;
  }
  else
  {
    v17 = 0;
    if (!v14)
      goto LABEL_25;
  }
  v18 = (unint64_t *)&v14->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_25:
    if ((v17 & 1) != 0)
      goto LABEL_26;
LABEL_29:
    v21 = *(NSObject **)(v3 + 80);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF335000, v21, OS_LOG_TYPE_ERROR, "Failed to set unblocking accessories", buf, 2u);
      v22 = v2[1];
      if (!v22)
        goto LABEL_32;
    }
    else
    {
      v22 = v2[1];
      if (!v22)
        goto LABEL_32;
    }
    *(_QWORD *)buf = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, uint8_t *))(v22 + 16))(v22, 3760250880, buf);
    xpc_release(*(xpc_object_t *)buf);
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if ((v17 & 1) == 0)
    goto LABEL_29;
LABEL_26:
  v20 = v2[1];
  if (v20)
  {
    *(_QWORD *)buf = xpc_null_create();
    (*(void (**)(uint64_t, _QWORD, uint8_t *))(v20 + 16))(v20, 0, buf);
    xpc_release(*(xpc_object_t *)buf);
  }
LABEL_32:
  v23 = (const void *)v2[1];
  if (v23)
    _Block_release(v23);
  operator delete(v2);
  v24 = (std::__shared_weak_count *)a1[2];
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  operator delete(a1);
}

void sub_1BF4664CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_25finishInitialization_syncEvEUb_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(SARModule ***a1)
{
  SARModule **v2;
  SARModule *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = *a1;
  v3 = **a1;
  if (capabilities::radio::maverick((capabilities::radio *)a1))
    SARModule::setupTxIndicationWorkaround(v3);
  SARModule::sendCurrentState_sync(v3);
  v4 = (std::__shared_weak_count *)v2[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v2);
  v7 = (std::__shared_weak_count *)a1[2];
  if (!v7)
    goto LABEL_12;
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    operator delete(a1);
  }
  else
  {
LABEL_12:
    operator delete(a1);
  }
}

void sub_1BF4666B4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v4 = (std::__shared_weak_count *)v2[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v2);
  v7 = (std::__shared_weak_count *)v1[2];
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_25finishInitialization_syncEvEUb_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(uint64_t a1)
{
  SARModule **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = *(SARModule ***)a1;
  SARModule::processTxOff_sync(**(SARModule ***)a1);
  v3 = (std::__shared_weak_count *)v2[2];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  operator delete(v2);
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v6)
    goto LABEL_10;
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    operator delete((void *)a1);
  }
  else
  {
LABEL_10:
    operator delete((void *)a1);
  }
}

void sub_1BF466800(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v4 = (std::__shared_weak_count *)v2[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v2);
  v7 = (std::__shared_weak_count *)v1[2];
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_19initializeWiFi_syncEvEUb0_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  AppleSARHelper *v4;
  AppleSARHelper *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  char v20;
  unsigned int v21;
  uint8_t buf[16];
  unint64_t v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  *(_BYTE *)(v3 + 136) = *((_BYTE *)*a1 + 8);
  v4 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v5 = (AppleSARHelper *)off_1ED70FCB8;
  if (!off_1ED70FCB8)
  {
    AppleSARHelper::create_default_global(v4);
    v6 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v7 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
    off_1ED70FCB8 = v6;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = (AppleSARHelper *)off_1ED70FCB8;
  }
  v10 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
  if (*(&off_1ED70FCB8 + 1))
  {
    v11 = (unint64_t *)(*(&off_1ED70FCB8 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v20 = *(_BYTE *)(v3 + 136);
  if (*((_DWORD *)v5 + 1))
  {
    *(_QWORD *)buf = 0;
    v23[0] = 0;
    v21 = 1;
    v13 = AppleSARHelper::callUserClientMethod(v5, 0, (const unint64_t *)buf, 1, &v20, 1, v23, &v21, &v20, 1uLL);
    if (!v10)
      goto LABEL_18;
  }
  else
  {
    v13 = 0;
    if (!v10)
      goto LABEL_18;
  }
  v14 = (unint64_t *)&v10->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
  {
LABEL_18:
    if ((v13 & 1) != 0)
      goto LABEL_21;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if ((v13 & 1) != 0)
    goto LABEL_21;
LABEL_19:
  v16 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF335000, v16, OS_LOG_TYPE_ERROR, "Failed to set WiFi state!", buf, 2u);
  }
LABEL_21:
  operator delete(v2);
  v17 = (std::__shared_weak_count *)a1[2];
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  operator delete(a1);
}

void sub_1BF466AE8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_24initializeBluetooth_syncEvEUb1_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  AppleSARHelper *v4;
  AppleSARHelper *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  char v20;
  unsigned int v21;
  uint8_t buf[16];
  unint64_t v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  *(_BYTE *)(v3 + 160) = *((_BYTE *)*a1 + 8);
  v4 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v5 = (AppleSARHelper *)off_1ED70FCB8;
  if (!off_1ED70FCB8)
  {
    AppleSARHelper::create_default_global(v4);
    v6 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v7 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
    off_1ED70FCB8 = v6;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = (AppleSARHelper *)off_1ED70FCB8;
  }
  v10 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
  if (*(&off_1ED70FCB8 + 1))
  {
    v11 = (unint64_t *)(*(&off_1ED70FCB8 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v20 = *(_BYTE *)(v3 + 160);
  if (*((_DWORD *)v5 + 1))
  {
    *(_QWORD *)buf = 0;
    v23[0] = 0;
    v21 = 1;
    v13 = AppleSARHelper::callUserClientMethod(v5, 1, (const unint64_t *)buf, 1, &v20, 1, v23, &v21, &v20, 1uLL);
    if (!v10)
      goto LABEL_18;
  }
  else
  {
    v13 = 0;
    if (!v10)
      goto LABEL_18;
  }
  v14 = (unint64_t *)&v10->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
  {
LABEL_18:
    if ((v13 & 1) != 0)
      goto LABEL_21;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if ((v13 & 1) != 0)
    goto LABEL_21;
LABEL_19:
  v16 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF335000, v16, OS_LOG_TYPE_ERROR, "Failed to set Bluetooth state!", buf, 2u);
  }
LABEL_21:
  operator delete(v2);
  v17 = (std::__shared_weak_count *)a1[2];
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  operator delete(a1);
}

void sub_1BF466DFC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_20initializeAudio_syncEvEUb2_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int v4;
  NSObject *v5;
  AppleSARHelper *v6;
  AppleSARHelper *v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  unsigned int v26;
  uint8_t buf[16];
  unint64_t v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  v4 = *(_DWORD *)(v3 + 161) & 0xFFFFFFF7 | (8 * *((unsigned __int8 *)*a1 + 8));
  *(_DWORD *)(v3 + 161) = v4;
  v5 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v4;
    _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "#I Sending Accessory State due to Audio Wired Port: 0x%x", buf, 8u);
  }
  v6 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v7 = (AppleSARHelper *)off_1ED70FCB8;
  if (!off_1ED70FCB8)
  {
    AppleSARHelper::create_default_global(v6);
    v8 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v9 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
    off_1ED70FCB8 = v8;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v13 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v7 = (AppleSARHelper *)off_1ED70FCB8;
  }
  v15 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
  if (*(&off_1ED70FCB8 + 1))
  {
    v16 = (unint64_t *)(*(&off_1ED70FCB8 + 1) + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v25 = *(_DWORD *)(v3 + 161);
  if (*((_DWORD *)v7 + 1))
  {
    *(_QWORD *)buf = 0;
    v28[0] = 0;
    v26 = 1;
    v18 = AppleSARHelper::callUserClientMethod(v7, 2, (const unint64_t *)buf, 1, &v25, 4, v28, &v26, &v25, 4uLL);
    if (!v15)
      goto LABEL_25;
  }
  else
  {
    v18 = 0;
    if (!v15)
      goto LABEL_25;
  }
  v19 = (unint64_t *)&v15->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_25:
    if ((v18 & 1) != 0)
      goto LABEL_28;
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  if ((v18 & 1) != 0)
    goto LABEL_28;
LABEL_26:
  v21 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF335000, v21, OS_LOG_TYPE_ERROR, "Failed to set SAR Fusion State!", buf, 2u);
  }
LABEL_28:
  operator delete(v2);
  v22 = (std::__shared_weak_count *)a1[2];
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  operator delete(a1);
}

void sub_1BF467168(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_20initializeAudio_syncEvEUb3_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  NSObject *v5;
  AppleSARHelper *v6;
  AppleSARHelper *v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char v25;
  unsigned int v26;
  uint8_t buf[16];
  unint64_t v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  v4 = *((unsigned __int8 *)*a1 + 8);
  *(_BYTE *)(v3 + 167) = v4;
  v5 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v4;
    _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "#I Sending Speaker State: 0x%x\n", buf, 8u);
  }
  v6 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v7 = (AppleSARHelper *)off_1ED70FCB8;
  if (!off_1ED70FCB8)
  {
    AppleSARHelper::create_default_global(v6);
    v8 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v9 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
    off_1ED70FCB8 = v8;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v13 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v7 = (AppleSARHelper *)off_1ED70FCB8;
  }
  v15 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
  if (*(&off_1ED70FCB8 + 1))
  {
    v16 = (unint64_t *)(*(&off_1ED70FCB8 + 1) + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v25 = *(_BYTE *)(v3 + 167);
  if (*((_DWORD *)v7 + 1))
  {
    *(_QWORD *)buf = 0;
    v28[0] = 0;
    v26 = 1;
    v18 = AppleSARHelper::callUserClientMethod(v7, 6, (const unint64_t *)buf, 1, &v25, 1, v28, &v26, &v25, 1uLL);
    if (!v15)
      goto LABEL_25;
  }
  else
  {
    v18 = 0;
    if (!v15)
      goto LABEL_25;
  }
  v19 = (unint64_t *)&v15->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_25:
    if ((v18 & 1) != 0)
      goto LABEL_28;
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  if ((v18 & 1) != 0)
    goto LABEL_28;
LABEL_26:
  v21 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF335000, v21, OS_LOG_TYPE_ERROR, "Failed to set SAR Fusion State!", buf, 2u);
  }
LABEL_28:
  operator delete(v2);
  v22 = (std::__shared_weak_count *)a1[2];
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  operator delete(a1);
}

void sub_1BF4674C4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_18initializeOBD_syncEvEUb4_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(void *a1)
{
  uint64_t *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)a1;
  SARModule::submitCASARFusion(v3, 1);
  *(_BYTE *)(v3 + 166) = *(_BYTE *)(v3 + 165);
  operator delete(v2);
  v4 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (!v4)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    operator delete(a1);
  }
  else
  {
LABEL_5:
    operator delete(a1);
  }
}

void sub_1BF467614(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_28initializeHandDetection_syncEvEUb5_E3__9EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(void *a1)
{
  uint64_t *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)a1;
  SARModule::submitCASARFusion(v3, 1);
  *(_BYTE *)(v3 + 169) = *(_BYTE *)(v3 + 168);
  operator delete(v2);
  v4 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (!v4)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    operator delete(a1);
  }
  else
  {
LABEL_5:
    operator delete(a1);
  }
}

void sub_1BF467700(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::processTxOff_sync(void)::$_0>(SARModule::processTxOff_sync(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::processTxOff_sync(void)::$_0,dispatch_queue_s *::default_delete<SARModule::processTxOff_sync(void)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)a1;
  SARModule::submitCASARFusion(v3, 1);
  *(_BYTE *)(v3 + 169) = *(_BYTE *)(v3 + 168);
  operator delete(v2);
  v4 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (!v4)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    operator delete(a1);
  }
  else
  {
LABEL_5:
    operator delete(a1);
  }
}

void sub_1BF4677EC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0>(SARModule::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0,dispatch_queue_s *::default_delete<SARModule::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0>>)::{lambda(void *)#1}::__invoke(int **a1)
{
  int *v2;
  capabilities::radio *v3;
  xpc_object_t v4;
  NSObject *v5;
  int v6;
  int v7;
  NSObject *v8;
  xpc_object_t value;
  const char *v10;
  xpc_object_t v11;
  const char *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::ios_base *v17;
  uint64_t v18;
  _QWORD *v19;
  void **v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  void **v24;
  uint64_t v25;
  _QWORD *v26;
  NSObject *v27;
  size_t v28;
  void **v29;
  uint64_t v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  int v35;
  size_t v36;
  void **v37;
  void **v38;
  NSObject *v39;
  NSObject *v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  void *__dst[2];
  int64_t v45;
  void *v46[3];
  void *v47[3];
  unint64_t v48;
  uint8_t v49[4];
  void **v50;
  uint8_t buf[8];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 __p;
  __int128 v57;
  unint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = *(capabilities::radio **)*a1;
  if ((capabilities::radio::maverick((capabilities::radio *)a1) & 1) != 0)
  {
    v48 = 0xAAAAAAAAAAAAAAAALL;
    SARModule::createTransmitStateDict_sync(v3, v2[2], v2[3], (xpc_object_t *)&v48);
    v4 = (xpc_object_t)v48;
    if (MEMORY[0x1C3B8A86C](v48) != MEMORY[0x1E0C812F8])
    {
      v5 = *((_QWORD *)v3 + 10);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v6 = v2[2];
        v7 = v2[3];
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v6;
        LOWORD(v52) = 1024;
        *(_DWORD *)((char *)&v52 + 2) = v7;
        _os_log_error_impl(&dword_1BF335000, v5, OS_LOG_TYPE_ERROR, "Failed to get the Tx state from the state (%d) and trigger (%d)", buf, 0xEu);
      }
      goto LABEL_71;
    }
    memset(v47, 170, sizeof(v47));
    value = xpc_dictionary_get_value(v4, (const char *)*MEMORY[0x1E0CFBBD8]);
    *(_QWORD *)buf = value;
    if (value)
      xpc_retain(value);
    else
      *(_QWORD *)buf = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)buf, (const object *)"", v10);
    xpc_release(*(xpc_object_t *)buf);
    memset(v46, 170, sizeof(v46));
    v11 = xpc_dictionary_get_value(v4, (const char *)*MEMORY[0x1E0CFBD88]);
    *(_QWORD *)buf = v11;
    if (v11)
      xpc_retain(v11);
    else
      *(_QWORD *)buf = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)buf, (const object *)"", v12);
    xpc_release(*(xpc_object_t *)buf);
    *(_QWORD *)&v13 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v58 = 0xAAAAAAAAAAAAAAAALL;
    v68 = v13;
    v67 = v13;
    v66 = v13;
    v65 = v13;
    v64 = v13;
    v63 = v13;
    v62 = v13;
    v61 = v13;
    v60 = v13;
    v57 = v13;
    __p = v13;
    v55 = v13;
    v54 = v13;
    v53 = v13;
    v52 = v13;
    v14 = MEMORY[0x1E0DE4FE0];
    v15 = MEMORY[0x1E0DE4FE0] + 64;
    v59 = MEMORY[0x1E0DE4FE0] + 64;
    v16 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    *(_QWORD *)buf = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = v16;
    v17 = (std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)];
    std::ios_base::init(v17, &v52);
    v17[1].__vftable = 0;
    v17[1].__fmtflags_ = -1;
    *(_QWORD *)buf = v14 + 24;
    v59 = v15;
    std::streambuf::basic_streambuf();
    v18 = MEMORY[0x1E0DE4FB8];
    *(_QWORD *)&v52 = MEMORY[0x1E0DE4FB8] + 16;
    __p = 0u;
    v57 = 0u;
    LODWORD(v58) = 16;
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"Transmit State: ", 16);
    if (SHIBYTE(v47[2]) >= 0)
      v20 = v47;
    else
      v20 = (void **)v47[0];
    if (SHIBYTE(v47[2]) >= 0)
      v21 = HIBYTE(v47[2]);
    else
      v21 = (uint64_t)v47[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
    v22 = (void *)HIBYTE(v46[2]);
    if (SHIBYTE(v46[2]) < 0)
      v22 = v46[1];
    if (v22)
    {
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)" (", 2);
      if (SHIBYTE(v46[2]) >= 0)
        v24 = v46;
      else
        v24 = (void **)v46[0];
      if (SHIBYTE(v46[2]) >= 0)
        v25 = HIBYTE(v46[2]);
      else
        v25 = (uint64_t)v46[1];
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)")", 1);
    }
    v27 = *((_QWORD *)v3 + 10);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
LABEL_47:
      v35 = SHIBYTE(v47[2]);
      if (SHIBYTE(v47[2]) >= 0)
        v36 = HIBYTE(v47[2]);
      else
        v36 = (size_t)v47[1];
      if (v36 == strlen((const char *)*MEMORY[0x1E0CFBF28])
        && (SHIBYTE(v47[2]) >= 0 ? (v37 = v47) : (v37 = (void **)v47[0]),
            !memcmp(v37, (const void *)*MEMORY[0x1E0CFBF28], v36)))
      {
        v40 = *((_QWORD *)v3 + 10);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__dst[0]) = 0;
          _os_log_impl(&dword_1BF335000, v40, OS_LOG_TYPE_DEFAULT, "#I Tx is on from QMI", (uint8_t *)__dst, 2u);
        }
        SARModule::processTxOn_sync(v3);
      }
      else if (v36 == strlen((const char *)*MEMORY[0x1E0CFBC28]))
      {
        v38 = v35 >= 0 ? v47 : (void **)v47[0];
        if (!memcmp(v38, (const void *)*MEMORY[0x1E0CFBC28], v36))
        {
          v39 = *((_QWORD *)v3 + 10);
          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__dst[0]) = 0;
            _os_log_impl(&dword_1BF335000, v39, OS_LOG_TYPE_DEFAULT, "#I Tx is off from QMI", (uint8_t *)__dst, 2u);
          }
          SARModule::processTxOff_sync(v3);
        }
      }
      *(_QWORD *)buf = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      *(_QWORD *)&v52 = v18 + 16;
      if (SBYTE7(v57) < 0)
        operator delete((void *)__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1C3B89E4C](&v59);
      if (SHIBYTE(v46[2]) < 0)
      {
        operator delete(v46[0]);
        if ((SHIBYTE(v47[2]) & 0x80000000) == 0)
          goto LABEL_70;
      }
      else if ((SHIBYTE(v47[2]) & 0x80000000) == 0)
      {
LABEL_70:
        v4 = (xpc_object_t)v48;
LABEL_71:
        xpc_release(v4);
        goto LABEL_72;
      }
      operator delete(v47[0]);
      goto LABEL_70;
    }
    if ((v58 & 0x10) != 0)
    {
      v30 = *((_QWORD *)&v57 + 1);
      if (*((_QWORD *)&v57 + 1) < (unint64_t)v55)
      {
        *((_QWORD *)&v57 + 1) = v55;
        v30 = v55;
      }
      v31 = (const void *)*((_QWORD *)&v54 + 1);
      v28 = v30 - *((_QWORD *)&v54 + 1);
      if ((unint64_t)(v30 - *((_QWORD *)&v54 + 1)) >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_81;
    }
    else
    {
      if ((v58 & 8) == 0)
      {
        v28 = 0;
        HIBYTE(v45) = 0;
        v29 = __dst;
        goto LABEL_43;
      }
      v31 = (const void *)v53;
      v28 = v54 - v53;
      if ((_QWORD)v54 - (_QWORD)v53 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_81:
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v28 >= 0x17)
    {
      v32 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v28 | 7) != 0x17)
        v32 = v28 | 7;
      v33 = v32 + 1;
      v29 = (void **)operator new(v32 + 1);
      __dst[1] = (void *)v28;
      v45 = v33 | 0x8000000000000000;
      __dst[0] = v29;
    }
    else
    {
      HIBYTE(v45) = v28;
      v29 = __dst;
      if (!v28)
        goto LABEL_43;
    }
    memmove(v29, v31, v28);
LABEL_43:
    *((_BYTE *)v29 + v28) = 0;
    v34 = __dst;
    if (v45 < 0)
      v34 = (void **)__dst[0];
    *(_DWORD *)v49 = 136315138;
    v50 = v34;
    _os_log_impl(&dword_1BF335000, v27, OS_LOG_TYPE_DEFAULT, "#I %s", v49, 0xCu);
    if (SHIBYTE(v45) < 0)
      operator delete(__dst[0]);
    goto LABEL_47;
  }
  v8 = *((_QWORD *)v3 + 10);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF335000, v8, OS_LOG_TYPE_ERROR, "This is not supported device", buf, 2u);
  }
LABEL_72:
  operator delete(v2);
  v41 = (std::__shared_weak_count *)a1[2];
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  operator delete(a1);
}

void sub_1BF467ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,xpc_object_t object,uint64_t a27,uint64_t a28,_QWORD *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;

  a29 = (_QWORD *)*MEMORY[0x1E0DE4F60];
  *(_QWORD **)((char *)&a29 + *(a29 - 3)) = *(_QWORD **)(MEMORY[0x1E0DE4F60] + 24);
  a30 = v45 + 16;
  if (a43 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3B89E4C](a10);
  if (a19 < 0)
    operator delete(a14);
  if (a25 < 0)
    operator delete(a20);
  xpc_release(object);
  operator delete(v44);
  v47 = (std::__shared_weak_count *)v43[2];
  if (v47)
  {
    p_shared_owners = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(p_shared_owners);
    while (__stlxr(v49 - 1, p_shared_owners));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  operator delete(v43);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_52()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1BF335000);
  }
  return result;
}

uint64_t __cxx_global_var_init_53()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<AppleSARHelper>::~PthreadMutexGuardPolicy, &ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance, &dword_1BF335000);
  }
  return result;
}

uint64_t __cxx_global_var_init_54()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance, &dword_1BF335000);
  }
  return result;
}

uint64_t __cxx_global_var_init_55()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1BF335000);
  }
  return result;
}

void ServerClientState::ServerClientState(ServerClientState *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
}

{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
}

std::string **ServerClientState::ServerClientState(std::string **a1, uint64_t a2)
{
  std::string *v4;
  std::string *v5;
  std::string *v6;

  v4 = (std::string *)operator new(0x38uLL);
  v5 = v4;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  v5[1].__r_.__value_.__s.__data_[0] = 0;
  v5[2].__r_.__value_.__r.__words[0] = 0;
  v5[1].__r_.__value_.__r.__words[2] = 0;
  v5[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v5[1].__r_.__value_.__r.__words[2];
  *a1 = v5;
  v6 = (std::string *)operator new(0x20uLL);
  v6->__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E7907298;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
  a1[1] = v6;
  return a1;
}

void sub_1BF4681C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BF4681D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void ***ServerClientState::setCheckedIn(void ***result, void **a2)
{
  void **v2;
  __int128 v3;
  size_t v4;
  size_t v5;

  v2 = *result;
  if (*result == a2)
    goto LABEL_5;
  if (*((char *)v2 + 23) < 0)
  {
    v4 = (size_t)a2[1];
    if (*((char *)a2 + 23) >= 0)
    {
      v5 = *((unsigned __int8 *)a2 + 23);
    }
    else
    {
      a2 = (void **)*a2;
      v5 = v4;
    }
    result = (void ***)std::string::__assign_no_alias<false>(*result, a2, v5);
    *((_BYTE *)v2 + 24) = 1;
  }
  else
  {
    if ((*((_BYTE *)a2 + 23) & 0x80) == 0)
    {
      v3 = *(_OWORD *)a2;
      v2[2] = a2[2];
      *(_OWORD *)v2 = v3;
LABEL_5:
      *((_BYTE *)v2 + 24) = 1;
      return result;
    }
    result = (void ***)std::string::__assign_no_alias<true>(*result, *a2, (size_t)a2[1]);
    *((_BYTE *)v2 + 24) = 1;
  }
  return result;
}

BOOL ServerClientState::isNotificationRegistered_sync(uint64_t *a1, const void **a2)
{
  uint64_t v2;

  v2 = *a1;
  return v2 + 40 != (_QWORD)std::__tree<std::string>::find<std::string>(*a1 + 32, a2);
}

void ServerClientState::registerNotification_sync(void **a1, int a2, const void **a3)
{
  void *v4;
  const void *v5;
  CFRange v6;
  void (__cdecl *v7)(const void *, void *);

  v4 = *a1;
  v5 = *a3;
  if (*a3)
    CFRetain(v5);
  v6.length = CFArrayGetCount((CFArrayRef)v5);
  if (a2)
    v7 = (void (__cdecl *)(const void *, void *))ServerClientState::State::registerNotificationApplier;
  else
    v7 = (void (__cdecl *)(const void *, void *))ServerClientState::State::unregisterNotificationApplier;
  v6.location = 0;
  CFArrayApplyFunction((CFArrayRef)v5, v6, v7, v4);
  if (v5)
    CFRelease(v5);
}

void sub_1BF46835C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ServerClientState::getName(ServerClientState *this@<X0>, std::string *a2@<X8>)
{
  __int128 *v2;
  __int128 v3;

  v2 = *(__int128 **)this;
  if (*(char *)(*(_QWORD *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *v2;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v2 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

void ServerClientState::State::registerNotificationApplier(ServerClientState::State *this, uint64_t **a2, void *a3)
{
  void *__p[2];
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v6 = 0uLL;
  v7 = 0;
  ctu::cf::assign();
  *(_OWORD *)__p = 0uLL;
  v5 = 0;
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(a2 + 4, (const void **)__p, (uint64_t)__p);
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

void sub_1BF468414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ServerClientState::State::unregisterNotificationApplier(ServerClientState::State *this, _QWORD *a2, void *a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t *v11;
  void *__p[2];
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v14 = 0uLL;
  v15 = 0;
  ctu::cf::assign();
  *(_OWORD *)__p = 0uLL;
  v13 = 0;
  v4 = (uint64_t **)(a2 + 4);
  v5 = std::__tree<std::string>::find<std::string>((uint64_t)(a2 + 4), (const void **)__p);
  v6 = v5;
  if (a2 + 5 != v5)
  {
    v7 = (uint64_t *)v5[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (uint64_t *)*v7;
      }
      while (v7);
    }
    else
    {
      v9 = v5;
      do
      {
        v8 = (uint64_t *)v9[2];
        v10 = *v8 == (_QWORD)v9;
        v9 = v8;
      }
      while (!v10);
    }
    if (*v4 == v5)
      *v4 = v8;
    v11 = (uint64_t *)a2[5];
    --a2[6];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v11, v6);
    if (*((char *)v6 + 55) < 0)
      operator delete((void *)v6[4]);
    operator delete(v6);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
}

void sub_1BF468544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<ServerClientState::State *,std::shared_ptr<ServerClientState::State>::__shared_ptr_default_delete<ServerClientState::State,ServerClientState::State>,std::allocator<ServerClientState::State>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ServerClientState::State *,std::shared_ptr<ServerClientState::State>::__shared_ptr_default_delete<ServerClientState::State,ServerClientState::State>,std::allocator<ServerClientState::State>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    std::__tree<std::string>::destroy(v1 + 32, *(char **)(v1 + 40));
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete((void *)v1);
  }
}

uint64_t std::__shared_ptr_pointer<ServerClientState::State *,std::shared_ptr<ServerClientState::State>::__shared_ptr_default_delete<ServerClientState::State,ServerClientState::State>,std::allocator<ServerClientState::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF544B3FLL)
    return a1 + 24;
  if (((v3 & 0x80000001BF544B3FLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF544B3FLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF544B3FLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t awd::metrics::protobuf_ShutdownFile_CCMetricsABM_2eproto(awd::metrics *this)
{
  uint64_t result;

  if (awd::metrics::CommCenterBasebandBootTime::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::metrics::CommCenterBasebandBootTime::default_instance_ + 8))(awd::metrics::CommCenterBasebandBootTime::default_instance_);
  if (awd::metrics::CrashReasonType::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::metrics::CrashReasonType::default_instance_ + 8))(awd::metrics::CrashReasonType::default_instance_);
  if (awd::metrics::CommCenterBasebanCrash::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::metrics::CommCenterBasebanCrash::default_instance_ + 8))(awd::metrics::CommCenterBasebanCrash::default_instance_);
  if (awd::metrics::CommCenterBasebandTrace::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::metrics::CommCenterBasebandTrace::default_instance_ + 8))(awd::metrics::CommCenterBasebandTrace::default_instance_);
  if (awd::metrics::CommCenterNVMSync::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::metrics::CommCenterNVMSync::default_instance_ + 8))(awd::metrics::CommCenterNVMSync::default_instance_);
  if (awd::metrics::CommCenterAccessoryInformation::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::metrics::CommCenterAccessoryInformation::default_instance_ + 8))(awd::metrics::CommCenterAccessoryInformation::default_instance_);
  result = awd::metrics::MetricsCCBasebandReset::default_instance_;
  if (awd::metrics::MetricsCCBasebandReset::default_instance_)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)awd::metrics::MetricsCCBasebandReset::default_instance_ + 8))(awd::metrics::MetricsCCBasebandReset::default_instance_);
  return result;
}

void awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(awd::metrics *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void (*v12)(void);

  if ((awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(void)::already_here & 1) == 0)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(void)::already_here = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Server/AWD/Generated/CCMetricsABM.pb.cc", a4);
    v4 = operator new(0x30uLL);
    v4[4] = 0;
    *((_DWORD *)v4 + 10) = 0;
    v4[1] = 0;
    v4[2] = 0;
    *v4 = off_1E79072E8;
    *(_QWORD *)((char *)v4 + 21) = 0;
    awd::metrics::CommCenterBasebandBootTime::default_instance_ = (uint64_t)v4;
    v5 = operator new(0x28uLL);
    v6 = MEMORY[0x1E0DE8338];
    *v5 = off_1E7907360;
    v5[1] = v6;
    v5[3] = 0;
    v5[2] = v6;
    *((_DWORD *)v5 + 8) = 0;
    awd::metrics::CrashReasonType::default_instance_ = (uint64_t)v5;
    v7 = operator new(0x30uLL);
    v7[5] = 0;
    *v7 = off_1E79073D8;
    v7[1] = 0;
    v7[2] = 0;
    v7[3] = 0;
    *((_DWORD *)v7 + 8) = 0;
    awd::metrics::CommCenterBasebanCrash::default_instance_ = (uint64_t)v7;
    v8 = operator new(0x28uLL);
    *v8 = off_1E7907450;
    v8[1] = 0;
    v8[2] = v6;
    v8[3] = v6;
    v8[4] = 0;
    awd::metrics::CommCenterBasebandTrace::default_instance_ = (uint64_t)v8;
    v9 = operator new(0x28uLL);
    v9[4] = 0;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = off_1E79074C8;
    *(_QWORD *)((char *)v9 + 22) = 0;
    awd::metrics::CommCenterNVMSync::default_instance_ = (uint64_t)v9;
    v10 = operator new(0x20uLL);
    *v10 = off_1E7907540;
    v10[1] = 0;
    v10[2] = 0;
    v10[3] = 0;
    awd::metrics::CommCenterAccessoryInformation::default_instance_ = (uint64_t)v10;
    v11 = operator new(0x48uLL);
    *v11 = off_1E79075B8;
    v11[1] = v6;
    *((_WORD *)v11 + 20) = 0;
    v11[2] = 0;
    v11[3] = v6;
    v11[4] = v6;
    *((_DWORD *)v11 + 11) = 0;
    v11[6] = v6;
    v11[7] = 0;
    v11[8] = 0;
    awd::metrics::MetricsCCBasebandReset::default_instance_ = (uint64_t)v11;
    wireless_diagnostics::google::protobuf::internal::OnShutdown((wireless_diagnostics::google::protobuf::internal *)awd::metrics::protobuf_ShutdownFile_CCMetricsABM_2eproto, v12);
  }
}

uint64_t awd::metrics::CommCenterBasebandBootTime::CommCenterBasebandBootTime(uint64_t this)
{
  *(_QWORD *)(this + 32) = 0;
  *(_DWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = off_1E79072E8;
  *(_QWORD *)(this + 21) = 0;
  return this;
}

{
  *(_QWORD *)(this + 32) = 0;
  *(_DWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = off_1E79072E8;
  *(_QWORD *)(this + 21) = 0;
  return this;
}

uint64_t awd::metrics::CrashReasonType::CrashReasonType(uint64_t this)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DE8338];
  *(_QWORD *)this = off_1E7907360;
  *(_QWORD *)(this + 8) = v1;
  *(_QWORD *)(this + 16) = v1;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  uint64_t v1;

  v1 = MEMORY[0x1E0DE8338];
  *(_QWORD *)this = off_1E7907360;
  *(_QWORD *)(this + 8) = v1;
  *(_QWORD *)(this + 16) = v1;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterBasebanCrash::CommCenterBasebanCrash(uint64_t this)
{
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)this = off_1E79073D8;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)this = off_1E79073D8;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

_QWORD *awd::metrics::CommCenterBasebandTrace::CommCenterBasebandTrace(_QWORD *this)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DE8338];
  *this = off_1E7907450;
  this[1] = 0;
  this[2] = v1;
  this[3] = v1;
  this[4] = 0;
  return this;
}

{
  uint64_t v1;

  v1 = MEMORY[0x1E0DE8338];
  *this = off_1E7907450;
  this[1] = 0;
  this[2] = v1;
  this[3] = v1;
  this[4] = 0;
  return this;
}

_QWORD *awd::metrics::CommCenterNVMSync::CommCenterNVMSync(_QWORD *this)
{
  this[4] = 0;
  this[1] = 0;
  this[2] = 0;
  *this = off_1E79074C8;
  *(_QWORD *)((char *)this + 22) = 0;
  return this;
}

{
  this[4] = 0;
  this[1] = 0;
  this[2] = 0;
  *this = off_1E79074C8;
  *(_QWORD *)((char *)this + 22) = 0;
  return this;
}

_QWORD *awd::metrics::CommCenterAccessoryInformation::CommCenterAccessoryInformation(_QWORD *this)
{
  *this = off_1E7907540;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = off_1E7907540;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

double awd::metrics::MetricsCCBasebandReset::MetricsCCBasebandReset(awd::metrics::MetricsCCBasebandReset *this)
{
  uint64_t v1;
  double result;

  v1 = MEMORY[0x1E0DE8338];
  *(_QWORD *)this = off_1E79075B8;
  *((_QWORD *)this + 1) = v1;
  *((_WORD *)this + 20) = 0;
  result = 0.0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = v1;
  *((_QWORD *)this + 4) = v1;
  *((_DWORD *)this + 11) = 0;
  *((_QWORD *)this + 6) = v1;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  return result;
}

{
  uint64_t v1;
  double result;

  v1 = MEMORY[0x1E0DE8338];
  *(_QWORD *)this = off_1E79075B8;
  *((_QWORD *)this + 1) = v1;
  *((_WORD *)this + 20) = 0;
  result = 0.0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = v1;
  *((_QWORD *)this + 4) = v1;
  *((_DWORD *)this + 11) = 0;
  *((_QWORD *)this + 6) = v1;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  return result;
}

BOOL awd::metrics::CommCenterNVMSyncReason_IsValid(awd::metrics *this)
{
  return this < 6;
}

uint64_t awd::metrics::CommCenterBasebandBootTime::SharedCtor(uint64_t this)
{
  *(_QWORD *)(this + 32) = 0;
  *(_DWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 21) = 0;
  return this;
}

awd::metrics::CommCenterBasebandBootTime *awd::metrics::CommCenterBasebandBootTime::CommCenterBasebandBootTime(awd::metrics::CommCenterBasebandBootTime *this, const awd::metrics::CommCenterBasebandBootTime *a2)
{
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E79072E8;
  *(_QWORD *)((char *)this + 21) = 0;
  awd::metrics::CommCenterBasebandBootTime::MergeFrom(this, a2);
  return this;
}

{
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E79072E8;
  *(_QWORD *)((char *)this + 21) = 0;
  awd::metrics::CommCenterBasebandBootTime::MergeFrom(this, a2);
  return this;
}

void sub_1BF468A3C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterBasebandBootTime::MergeFrom(awd::metrics::CommCenterBasebandBootTime *this, const awd::metrics::CommCenterBasebandBootTime *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  _BYTE v10[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 40);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 40) & 1) != 0)
    {
      v6 = *((_QWORD *)a2 + 1);
      *((_DWORD *)this + 10) |= 1u;
      *((_QWORD *)this + 1) = v6;
      v4 = *((_DWORD *)a2 + 10);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0)
          goto LABEL_7;
        goto LABEL_13;
      }
    }
    else if ((*((_BYTE *)a2 + 40) & 2) == 0)
    {
      goto LABEL_6;
    }
    v7 = *((_QWORD *)a2 + 2);
    *((_DWORD *)this + 10) |= 2u;
    *((_QWORD *)this + 2) = v7;
    v4 = *((_DWORD *)a2 + 10);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0)
        goto LABEL_8;
      goto LABEL_14;
    }
LABEL_13:
    v8 = *((_DWORD *)a2 + 6);
    *((_DWORD *)this + 10) |= 4u;
    *((_DWORD *)this + 6) = v8;
    v4 = *((_DWORD *)a2 + 10);
    if ((v4 & 8) == 0)
    {
LABEL_8:
      if ((v4 & 0x10) == 0)
        return;
      goto LABEL_9;
    }
LABEL_14:
    v9 = *((_BYTE *)a2 + 28);
    *((_DWORD *)this + 10) |= 8u;
    *((_BYTE *)this + 28) = v9;
    if ((*((_DWORD *)a2 + 10) & 0x10) == 0)
      return;
LABEL_9:
    v5 = *((_DWORD *)a2 + 8);
    *((_DWORD *)this + 10) |= 0x10u;
    *((_DWORD *)this + 8) = v5;
  }
}

void sub_1BF468B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF468B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF468BC8(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterBasebandBootTime::~CommCenterBasebandBootTime(awd::metrics::CommCenterBasebandBootTime *this)
{
  *(_QWORD *)this = off_1E79072E8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1E79072E8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  void *v1;

  *(_QWORD *)this = off_1E79072E8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete(v1);
}

uint64_t awd::metrics::CommCenterBasebandBootTime::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 36) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterBasebandBootTime::default_instance(awd::metrics::CommCenterBasebandBootTime *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::metrics::CommCenterBasebandBootTime::default_instance_;
  if (!awd::metrics::CommCenterBasebandBootTime::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterBasebandBootTime::default_instance_;
  }
  return result;
}

_QWORD *awd::metrics::CommCenterBasebandBootTime::New(awd::metrics::CommCenterBasebandBootTime *this)
{
  _QWORD *result;

  result = operator new(0x30uLL);
  result[4] = 0;
  *((_DWORD *)result + 10) = 0;
  result[1] = 0;
  result[2] = 0;
  *result = off_1E79072E8;
  *(_QWORD *)((char *)result + 21) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterBasebandBootTime::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 40))
  {
    *(_DWORD *)(this + 32) = 0;
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
    *(_QWORD *)(this + 21) = 0;
  }
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterBasebandBootTime::MergePartialFromCodedStream(awd::metrics::CommCenterBasebandBootTime *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unint64_t *v4;
  unint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  char *v8;
  uint64_t TagFallback;
  int v10;
  unint64_t v11;
  char *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  _BYTE *v18;
  _BYTE *v19;
  unsigned int v20;
  _BYTE *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  unsigned int v26;

  v4 = (unint64_t *)((char *)this + 8);
  v5 = (unint64_t *)((char *)this + 16);
  v6 = (unsigned int *)((char *)this + 24);
  v7 = (unsigned int *)((char *)this + 32);
  while (1)
  {
    v8 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v8 < *((_QWORD *)a2 + 2) && (*v8 & 0x80000000) == 0)
    {
      TagFallback = *v8;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v8 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_7;
    }
    TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
    *((_DWORD *)a2 + 8) = TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v13 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 10) |= 1u;
          if ((unint64_t)v13 >= v11)
            continue;
        }
        else
        {
          *v4 = *v12;
          v13 = v12 + 1;
          *((_QWORD *)a2 + 1) = v13;
          *((_DWORD *)this + 10) |= 1u;
          if ((unint64_t)v13 >= v11)
            continue;
        }
        if (*v13 != 16)
          continue;
        v14 = v13 + 1;
        *((_QWORD *)a2 + 1) = v14;
        if ((unint64_t)v14 >= v11)
          goto LABEL_36;
        goto LABEL_33;
      case 2u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v14 >= v11)
          goto LABEL_36;
LABEL_33:
        if (*v14 < 0)
        {
LABEL_36:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 10) |= 2u;
          if ((unint64_t)v18 >= v11)
            continue;
        }
        else
        {
          *v5 = *v14;
          v18 = v14 + 1;
          *((_QWORD *)a2 + 1) = v18;
          *((_DWORD *)this + 10) |= 2u;
          if ((unint64_t)v18 >= v11)
            continue;
        }
        if (*v18 != 24)
          continue;
        v15 = v18 + 1;
        *((_QWORD *)a2 + 1) = v15;
        if ((unint64_t)v15 >= v11)
          goto LABEL_43;
LABEL_40:
        if (*v15 < 0)
        {
LABEL_43:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v19 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 10) |= 4u;
          if ((unint64_t)v19 >= v11)
            continue;
        }
        else
        {
          *v6 = *v15;
          v19 = v15 + 1;
          *((_QWORD *)a2 + 1) = v19;
          *((_DWORD *)this + 10) |= 4u;
          if ((unint64_t)v19 >= v11)
            continue;
        }
        if (*v19 != 32)
          continue;
        v16 = v19 + 1;
        *((_QWORD *)a2 + 1) = v16;
        v26 = -1431655766;
        if ((unint64_t)v16 >= v11)
          goto LABEL_49;
LABEL_47:
        if (*v16 < 0)
        {
LABEL_49:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v26);
          if (!(_DWORD)result)
            return result;
          v20 = v26;
          v21 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v20 = *v16;
          v21 = v16 + 1;
          *((_QWORD *)a2 + 1) = v21;
        }
        *((_BYTE *)this + 28) = v20 != 0;
        *((_DWORD *)this + 10) |= 8u;
        if ((unint64_t)v21 >= v11 || *v21 != 40)
          continue;
        v17 = v21 + 1;
        *((_QWORD *)a2 + 1) = v17;
        if ((unint64_t)v17 >= v11)
          goto LABEL_57;
LABEL_54:
        if (*v17 < 0)
        {
LABEL_57:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v24 = *((_QWORD *)a2 + 1);
          v23 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 10) |= 0x10u;
          if (v24 != v23)
            continue;
        }
        else
        {
          *v7 = *v17;
          v22 = (unsigned __int8 *)(v17 + 1);
          *((_QWORD *)a2 + 1) = v22;
          *((_DWORD *)this + 10) |= 0x10u;
          if (v22 != (unsigned __int8 *)v11)
            continue;
        }
        if (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
        break;
      case 3u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v15 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v15 >= v11)
          goto LABEL_43;
        goto LABEL_40;
      case 4u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        v26 = -1431655766;
        if ((unint64_t)v16 >= v11)
          goto LABEL_49;
        goto LABEL_47;
      case 5u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v17 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v17 >= v11)
          goto LABEL_57;
        goto LABEL_54;
      default:
        v10 = TagFallback & 7;
LABEL_24:
        if (v10 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
  }
}

uint64_t awd::metrics::CommCenterBasebandBootTime::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 40);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 16), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 32), (uint64_t)a2, a4);
  }
LABEL_10:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 28), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 40) & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 32), (uint64_t)a2, a4);
  return this;
}

uint64_t awd::metrics::CommCenterBasebandBootTime::ByteSize(awd::metrics::CommCenterBasebandBootTime *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  uint64_t v9;

  LOBYTE(v2) = *((_BYTE *)this + 40);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_6;
  }
  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
    LODWORD(v3) = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                              + 1))
                + 1;
    v2 = *((_DWORD *)this + 10);
    if ((v2 & 2) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  LODWORD(v3) = 0;
  if ((*((_BYTE *)this + 40) & 2) != 0)
  {
LABEL_8:
    LODWORD(v3) = v3
                + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                              + 2))
                + 1;
    v2 = *((_DWORD *)this + 10);
  }
LABEL_9:
  if ((v2 & 4) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
    if (v5 >= 0x80)
    {
      v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
      v7 = *((_DWORD *)this + 10);
      LODWORD(v3) = v6 + 1 + v3;
      if ((v7 & 8) != 0)
        v3 = (v3 + 2);
      else
        v3 = v3;
      if ((v7 & 0x10) != 0)
        goto LABEL_25;
    }
    else
    {
      LODWORD(v3) = v3 + 2;
      if ((v2 & 8) != 0)
        v3 = (v3 + 2);
      else
        v3 = v3;
      if ((v2 & 0x10) != 0)
        goto LABEL_25;
    }
LABEL_6:
    *((_DWORD *)this + 9) = v3;
    return v3;
  }
  if ((v2 & 8) != 0)
    v3 = (v3 + 2);
  else
    v3 = v3;
  if ((v2 & 0x10) == 0)
    goto LABEL_6;
LABEL_25:
  v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  if (v8 >= 0x80)
    v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8)
       + 1
       + v3;
  else
    v9 = (v3 + 2);
  *((_DWORD *)this + 9) = v9;
  return v9;
}

void awd::metrics::CommCenterBasebandBootTime::CopyFrom(awd::metrics::CommCenterBasebandBootTime *this, const awd::metrics::CommCenterBasebandBootTime *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterBasebandBootTime *))(*(_QWORD *)this + 32))(this);
    awd::metrics::CommCenterBasebandBootTime::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterBasebandBootTime::IsInitialized(awd::metrics::CommCenterBasebandBootTime *this)
{
  return 1;
}

uint64_t awd::metrics::CommCenterBasebandBootTime::Swap(uint64_t this, awd::metrics::CommCenterBasebandBootTime *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 != (awd::metrics::CommCenterBasebandBootTime *)this)
  {
    v2 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v2;
    v3 = *(_QWORD *)(this + 16);
    *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v3;
    LOBYTE(v3) = *(_BYTE *)(this + 28);
    *(_BYTE *)(this + 28) = *((_BYTE *)a2 + 28);
    *((_BYTE *)a2 + 28) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 40);
    *(_DWORD *)(this + 40) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 36);
    *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v3;
  }
  return this;
}

char *awd::metrics::CommCenterBasebandBootTime::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1BF544D40;
  strcpy(result, "awd.metrics.CommCenterBasebandBootTime");
  return result;
}

uint64_t awd::metrics::CrashReasonType::SharedCtor(uint64_t this)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DE8338];
  *(_QWORD *)(this + 16) = MEMORY[0x1E0DE8338];
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 8) = v1;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

awd::metrics::CrashReasonType *awd::metrics::CrashReasonType::CrashReasonType(awd::metrics::CrashReasonType *this, const awd::metrics::CrashReasonType *a2)
{
  uint64_t v3;

  v3 = MEMORY[0x1E0DE8338];
  *(_QWORD *)this = off_1E7907360;
  *((_QWORD *)this + 1) = v3;
  *((_QWORD *)this + 2) = v3;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CrashReasonType::MergeFrom(this, a2);
  return this;
}

{
  uint64_t v3;

  v3 = MEMORY[0x1E0DE8338];
  *(_QWORD *)this = off_1E7907360;
  *((_QWORD *)this + 1) = v3;
  *((_QWORD *)this + 2) = v3;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CrashReasonType::MergeFrom(this, a2);
  return this;
}

void sub_1BF4693AC(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CrashReasonType::MergeFrom(awd::metrics::CrashReasonType *this, const awd::metrics::CrashReasonType *a2)
{
  void **v4;
  void **v5;
  void **v6;
  char v7;
  __int128 v8;
  int v9;
  void *v10;
  size_t v11;
  int v12;
  void **v13;
  void **v14;
  char v15;
  __int128 v16;
  void *v17;
  size_t v18;
  char v19[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v19);
  }
  if (*((_BYTE *)a2 + 32))
  {
    v4 = (void **)MEMORY[0x1E0DE8338];
    if ((*((_BYTE *)a2 + 32) & 1) != 0)
    {
      v5 = (void **)*((_QWORD *)a2 + 1);
      *((_DWORD *)this + 8) |= 1u;
      v6 = (void **)*((_QWORD *)this + 1);
      if (v6 == v4)
      {
        v6 = (void **)operator new(0x18uLL);
        v6[1] = 0;
        v6[2] = 0;
        *v6 = 0;
        *((_QWORD *)this + 1) = v6;
      }
      if (v6 != v5)
      {
        v7 = *((_BYTE *)v5 + 23);
        if ((*((char *)v6 + 23) & 0x80000000) == 0)
        {
          if ((*((_BYTE *)v5 + 23) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>(v6, *v5, (size_t)v5[1]);
            v9 = *((_DWORD *)a2 + 8);
            if ((v9 & 2) == 0)
            {
LABEL_21:
              if ((v9 & 4) != 0)
              {
                v13 = (void **)*((_QWORD *)a2 + 2);
                *((_DWORD *)this + 8) |= 4u;
                v14 = (void **)*((_QWORD *)this + 2);
                if (v14 == v4)
                {
                  v14 = (void **)operator new(0x18uLL);
                  v14[1] = 0;
                  v14[2] = 0;
                  *v14 = 0;
                  *((_QWORD *)this + 2) = v14;
                }
                if (v14 != v13)
                {
                  v15 = *((_BYTE *)v13 + 23);
                  if (*((char *)v14 + 23) < 0)
                  {
                    if (v15 >= 0)
                      v17 = v13;
                    else
                      v17 = *v13;
                    if (v15 >= 0)
                      v18 = *((unsigned __int8 *)v13 + 23);
                    else
                      v18 = (size_t)v13[1];
                    std::string::__assign_no_alias<false>(v14, v17, v18);
                  }
                  else if ((*((_BYTE *)v13 + 23) & 0x80) != 0)
                  {
                    std::string::__assign_no_alias<true>(v14, *v13, (size_t)v13[1]);
                  }
                  else
                  {
                    v16 = *(_OWORD *)v13;
                    v14[2] = v13[2];
                    *(_OWORD *)v14 = v16;
                  }
                }
              }
              return;
            }
          }
          else
          {
            v8 = *(_OWORD *)v5;
            v6[2] = v5[2];
            *(_OWORD *)v6 = v8;
            v9 = *((_DWORD *)a2 + 8);
            if ((v9 & 2) == 0)
              goto LABEL_21;
          }
LABEL_20:
          v12 = *((_DWORD *)a2 + 6);
          *((_DWORD *)this + 8) |= 2u;
          *((_DWORD *)this + 6) = v12;
          v9 = *((_DWORD *)a2 + 8);
          goto LABEL_21;
        }
        if (v7 >= 0)
          v10 = v5;
        else
          v10 = *v5;
        if (v7 >= 0)
          v11 = *((unsigned __int8 *)v5 + 23);
        else
          v11 = (size_t)v5[1];
        std::string::__assign_no_alias<false>(v6, v10, v11);
      }
    }
    v9 = *((_DWORD *)a2 + 8);
    if ((v9 & 2) == 0)
      goto LABEL_21;
    goto LABEL_20;
  }
}

void sub_1BF46959C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF4695B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF469604(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CrashReasonType::~CrashReasonType(awd::metrics::CrashReasonType *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(_QWORD *)this = off_1E7907360;
  v2 = *((_QWORD *)this + 1);
  v3 = MEMORY[0x1E0DE8338];
  if (v2 != MEMORY[0x1E0DE8338] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete((void *)v2);
    v5 = *((_QWORD *)this + 2);
    if (v5 != v3 && v5 != 0)
      goto LABEL_19;
LABEL_11:
    wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
    return;
  }
  v5 = *((_QWORD *)this + 2);
  if (v5 == MEMORY[0x1E0DE8338] || v5 == 0)
    goto LABEL_11;
LABEL_19:
  if (*(char *)(v5 + 23) < 0)
    operator delete(*(void **)v5);
  operator delete((void *)v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(_QWORD *)this = off_1E7907360;
  v2 = *((_QWORD *)this + 1);
  v3 = MEMORY[0x1E0DE8338];
  if (v2 != MEMORY[0x1E0DE8338] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete((void *)v2);
    v5 = *((_QWORD *)this + 2);
    if (v5 != v3 && v5 != 0)
      goto LABEL_19;
LABEL_11:
    wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
    return;
  }
  v5 = *((_QWORD *)this + 2);
  if (v5 == MEMORY[0x1E0DE8338] || v5 == 0)
    goto LABEL_11;
LABEL_19:
  if (*(char *)(v5 + 23) < 0)
    operator delete(*(void **)v5);
  operator delete((void *)v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void *v7;

  *(_QWORD *)this = off_1E7907360;
  v2 = *((_QWORD *)this + 1);
  v3 = MEMORY[0x1E0DE8338];
  if (v2 != MEMORY[0x1E0DE8338] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete((void *)v2);
    v5 = *((_QWORD *)this + 2);
    if (v5 != v3 && v5 != 0)
      goto LABEL_19;
LABEL_11:
    wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
    goto LABEL_12;
  }
  v5 = *((_QWORD *)this + 2);
  if (v5 == MEMORY[0x1E0DE8338] || v5 == 0)
    goto LABEL_11;
LABEL_19:
  if (*(char *)(v5 + 23) < 0)
    operator delete(*(void **)v5);
  operator delete((void *)v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
LABEL_12:
  operator delete(v7);
}

void awd::metrics::CrashReasonType::SharedDtor(awd::metrics::CrashReasonType *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *((_QWORD *)this + 1);
  v3 = MEMORY[0x1E0DE8338];
  if (v2 == MEMORY[0x1E0DE8338] || v2 == 0)
  {
    v5 = *((_QWORD *)this + 2);
    if (v5 != MEMORY[0x1E0DE8338] && v5 != 0)
    {
LABEL_18:
      if (*(char *)(v5 + 23) < 0)
        operator delete(*(void **)v5);
      operator delete((void *)v5);
    }
  }
  else
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete((void *)v2);
    v5 = *((_QWORD *)this + 2);
    if (v5 != v3 && v5 != 0)
      goto LABEL_18;
  }
}

uint64_t awd::metrics::CrashReasonType::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 28) = a2;
  return this;
}

uint64_t awd::metrics::CrashReasonType::default_instance(awd::metrics::CrashReasonType *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::metrics::CrashReasonType::default_instance_;
  if (!awd::metrics::CrashReasonType::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(0, a2, a3, a4);
    return awd::metrics::CrashReasonType::default_instance_;
  }
  return result;
}

_QWORD *awd::metrics::CrashReasonType::New(awd::metrics::CrashReasonType *this)
{
  _QWORD *result;
  uint64_t v2;

  result = operator new(0x28uLL);
  v2 = MEMORY[0x1E0DE8338];
  *result = off_1E7907360;
  result[1] = v2;
  result[2] = v2;
  result[3] = 0;
  *((_DWORD *)result + 8) = 0;
  return result;
}

uint64_t awd::metrics::CrashReasonType::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (!*(_BYTE *)(this + 32))
    goto LABEL_12;
  v1 = MEMORY[0x1E0DE8338];
  if ((*(_BYTE *)(this + 32) & 1) != 0)
  {
    v2 = *(_QWORD *)(this + 8);
    if (v2 != MEMORY[0x1E0DE8338])
    {
      if (*(char *)(v2 + 23) < 0)
      {
        **(_BYTE **)v2 = 0;
        *(_QWORD *)(v2 + 8) = 0;
        *(_DWORD *)(this + 24) = 0;
        if ((*(_BYTE *)(this + 32) & 4) == 0)
          goto LABEL_12;
        goto LABEL_7;
      }
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  *(_DWORD *)(this + 24) = 0;
  if ((*(_BYTE *)(this + 32) & 4) == 0)
  {
LABEL_12:
    *(_DWORD *)(this + 32) = 0;
    return this;
  }
LABEL_7:
  v3 = *(_QWORD *)(this + 16);
  if (v3 == v1)
    goto LABEL_12;
  if (*(char *)(v3 + 23) < 0)
  {
    **(_BYTE **)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
  }
  else
  {
    *(_BYTE *)v3 = 0;
    *(_BYTE *)(v3 + 23) = 0;
  }
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t awd::metrics::CrashReasonType::MergePartialFromCodedStream(awd::metrics::CrashReasonType *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  uint64_t v5;
  char *v6;
  uint64_t TagFallback;
  unsigned int v8;
  int v9;
  _QWORD *v10;
  uint64_t result;
  _QWORD *v12;
  unint64_t v13;
  _BYTE *v14;
  unsigned __int8 *v15;
  _BYTE *v16;
  int v17;
  unint64_t v18;

  v4 = (unsigned int *)((char *)this + 24);
  v5 = MEMORY[0x1E0DE8338];
  while (1)
  {
    do
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            v6 = (char *)*((_QWORD *)a2 + 1);
            if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
            {
              TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
              *((_DWORD *)a2 + 8) = TagFallback;
              if (!(_DWORD)TagFallback)
                return 1;
            }
            else
            {
              TagFallback = *v6;
              *((_DWORD *)a2 + 8) = TagFallback;
              *((_QWORD *)a2 + 1) = v6 + 1;
              if (!(_DWORD)TagFallback)
                return 1;
            }
            v8 = TagFallback >> 3;
            if (TagFallback >> 3 != 1)
              break;
            v9 = TagFallback & 7;
            if (v9 != 2)
              goto LABEL_32;
            *((_DWORD *)this + 8) |= 1u;
            if (*((_QWORD *)this + 1) == v5)
            {
              v12 = operator new(0x18uLL);
              v12[1] = 0;
              v12[2] = 0;
              *v12 = 0;
              *((_QWORD *)this + 1) = v12;
            }
            result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
            if (!(_DWORD)result)
              return result;
            v14 = (_BYTE *)*((_QWORD *)a2 + 1);
            v13 = *((_QWORD *)a2 + 2);
            if ((unint64_t)v14 < v13 && *v14 == 16)
            {
              v15 = v14 + 1;
              *((_QWORD *)a2 + 1) = v15;
              goto LABEL_27;
            }
          }
          if (v8 == 2)
            break;
          if (v8 == 3)
          {
            v9 = TagFallback & 7;
            if (v9 == 2)
            {
              *((_DWORD *)this + 8) |= 4u;
              if (*((_QWORD *)this + 2) != v5)
                goto LABEL_13;
LABEL_12:
              v10 = operator new(0x18uLL);
              v10[1] = 0;
              v10[2] = 0;
              *v10 = 0;
              *((_QWORD *)this + 2) = v10;
              goto LABEL_13;
            }
          }
          else
          {
            v9 = TagFallback & 7;
          }
LABEL_32:
          if (v9 == 4)
            return 1;
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        }
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v15 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
LABEL_27:
        if ((unint64_t)v15 < v13 && ((char)*v15 & 0x80000000) == 0)
          break;
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
        if (!(_DWORD)result)
          return result;
        v16 = (_BYTE *)*((_QWORD *)a2 + 1);
        v18 = *((_QWORD *)a2 + 2);
        v17 = *((_DWORD *)this + 8) | 2;
        *((_DWORD *)this + 8) = v17;
        if ((unint64_t)v16 < v18)
          goto LABEL_37;
      }
      *v4 = *v15;
      v16 = v15 + 1;
      *((_QWORD *)a2 + 1) = v16;
      v17 = *((_DWORD *)this + 8) | 2;
      *((_DWORD *)this + 8) = v17;
    }
    while ((unint64_t)v16 >= v13);
LABEL_37:
    if (*v16 == 26)
    {
      *((_QWORD *)a2 + 1) = v16 + 1;
      *((_DWORD *)this + 8) = v17 | 4;
      if (*((_QWORD *)this + 2) == v5)
        goto LABEL_12;
LABEL_13:
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
      if (!(_DWORD)result)
        return result;
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        break;
      }
    }
  }
  *((_DWORD *)a2 + 8) = 0;
  result = 1;
  *((_BYTE *)a2 + 36) = 1;
  return result;
}

uint64_t awd::metrics::CrashReasonType::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 32);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return this;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 32) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  return this;
}

uint64_t awd::metrics::CrashReasonType::ByteSize(awd::metrics::CrashReasonType *this)
{
  int v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int v18;

  LOBYTE(v2) = *((_BYTE *)this + 32);
  if (!(_BYTE)v2)
  {
    v3 = 0;
LABEL_6:
    *((_DWORD *)this + 7) = v3;
    return v3;
  }
  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_22;
    goto LABEL_18;
  }
  v5 = *((_QWORD *)this + 1);
  v6 = *(unsigned __int8 *)(v5 + 23);
  if ((v6 & 0x80u) == 0)
    v7 = *(unsigned __int8 *)(v5 + 23);
  else
    v7 = *(_QWORD *)(v5 + 8);
  if (v7 < 0x80)
  {
    if ((v6 & 0x80u) != 0)
      v6 = *(_QWORD *)(v5 + 8);
    v3 = (v6 + 2);
    if ((v2 & 2) == 0)
      goto LABEL_22;
LABEL_18:
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
    if (v10 >= 0x80)
    {
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10) + 1;
      v2 = *((_DWORD *)this + 8);
    }
    else
    {
      v11 = 2;
    }
    v3 = (v11 + v3);
    goto LABEL_22;
  }
  v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v7);
  v9 = *(unsigned __int8 *)(v5 + 23);
  v2 = *((_DWORD *)this + 8);
  if (*(char *)(v5 + 23) < 0)
    v9 = *(_QWORD *)(v5 + 8);
  v3 = (v8 + 1 + v9);
  if ((v2 & 2) != 0)
    goto LABEL_18;
LABEL_22:
  if ((v2 & 4) == 0)
    goto LABEL_6;
  v12 = *((_QWORD *)this + 2);
  v13 = *(unsigned __int8 *)(v12 + 23);
  v14 = v13;
  v15 = *(_QWORD *)(v12 + 8);
  if ((v13 & 0x80u) == 0)
    v16 = *(unsigned __int8 *)(v12 + 23);
  else
    v16 = v15;
  if (v16 >= 0x80)
  {
    v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16);
    v13 = *(unsigned __int8 *)(v12 + 23);
    v15 = *(_QWORD *)(v12 + 8);
    v14 = *(_BYTE *)(v12 + 23);
  }
  else
  {
    v17 = 1;
  }
  if (v14 < 0)
    v13 = v15;
  v18 = v3 + v17 + v13;
  *((_DWORD *)this + 7) = v18 + 1;
  return (v18 + 1);
}

void awd::metrics::CrashReasonType::CopyFrom(awd::metrics::CrashReasonType *this, const awd::metrics::CrashReasonType *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CrashReasonType *))(*(_QWORD *)this + 32))(this);
    awd::metrics::CrashReasonType::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CrashReasonType::IsInitialized(awd::metrics::CrashReasonType *this)
{
  return 1;
}

uint64_t awd::metrics::CrashReasonType::Swap(uint64_t this, awd::metrics::CrashReasonType *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 != (awd::metrics::CrashReasonType *)this)
  {
    v2 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v2;
    v3 = *(_QWORD *)(this + 16);
    *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 28);
    *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v3;
  }
  return this;
}

double awd::metrics::CrashReasonType::GetTypeName@<D0>(uint64_t a1@<X8>)
{
  char *v3;

  v3 = (char *)operator new(0x20uLL);
  *(_QWORD *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_1BF53F3A0;
  strcpy(v3, "awd.metrics.CrashReasonType");
  return *(double *)".CrashReasonType";
}

uint64_t awd::metrics::CommCenterBasebanCrash::SharedCtor(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 40) = 0;
  return this;
}

uint64_t wireless_diagnostics::google::protobuf::RepeatedPtrField<awd::metrics::CrashReasonType>::~RepeatedPtrField(uint64_t a1)
{
  int v2;
  uint64_t i;
  uint64_t v4;

  v2 = *(_DWORD *)(a1 + 12);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*(_QWORD *)a1 + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *(_DWORD *)(a1 + 12);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete[](*(void **)a1);
  return a1;
}

awd::metrics::CommCenterBasebanCrash *awd::metrics::CommCenterBasebanCrash::CommCenterBasebanCrash(awd::metrics::CommCenterBasebanCrash *this, const awd::metrics::CommCenterBasebanCrash *a2)
{
  *((_QWORD *)this + 5) = 0;
  *(_QWORD *)this = off_1E79073D8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CommCenterBasebanCrash::MergeFrom(this, a2);
  return this;
}

{
  *((_QWORD *)this + 5) = 0;
  *(_QWORD *)this = off_1E79073D8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CommCenterBasebanCrash::MergeFrom(this, a2);
  return this;
}

void sub_1BF469FCC(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::RepeatedPtrField<awd::metrics::CrashReasonType>::~RepeatedPtrField((uint64_t)v1 + 16);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterBasebanCrash::MergeFrom(awd::metrics::CommCenterBasebanCrash *this, const awd::metrics::CommCenterBasebanCrash *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  const awd::metrics::CrashReasonType *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::CommCenterBasebanCrash *)((char *)this + 16));
  if (*((int *)a2 + 6) >= 1)
  {
    v4 = 0;
    v5 = MEMORY[0x1E0DE8338];
    do
    {
      while (1)
      {
        v9 = *(const awd::metrics::CrashReasonType **)(*((_QWORD *)a2 + 2) + 8 * v4);
        v10 = *((_DWORD *)this + 7);
        v11 = *((int *)this + 6);
        if ((int)v11 >= v10)
          break;
        v12 = *((_QWORD *)this + 2);
        *((_DWORD *)this + 6) = v11 + 1;
        awd::metrics::CrashReasonType::MergeFrom(*(awd::metrics::CrashReasonType **)(v12 + 8 * v11), v9);
        if (++v4 >= *((int *)a2 + 6))
          goto LABEL_11;
      }
      if (v10 == *((_DWORD *)this + 8))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::CommCenterBasebanCrash *)((char *)this + 16));
        v10 = *((_DWORD *)this + 7);
      }
      *((_DWORD *)this + 7) = v10 + 1;
      v6 = operator new(0x28uLL);
      *v6 = off_1E7907360;
      v6[1] = v5;
      v6[2] = v5;
      v6[3] = 0;
      *((_DWORD *)v6 + 8) = 0;
      v7 = *((_QWORD *)this + 2);
      v8 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v8 + 1;
      *(_QWORD *)(v7 + 8 * v8) = v6;
      awd::metrics::CrashReasonType::MergeFrom((awd::metrics::CrashReasonType *)v6, v9);
      ++v4;
    }
    while (v4 < *((int *)a2 + 6));
  }
LABEL_11:
  if ((*((_BYTE *)a2 + 44) & 1) != 0)
  {
    v13 = *((_QWORD *)a2 + 1);
    *((_DWORD *)this + 11) |= 1u;
    *((_QWORD *)this + 1) = v13;
  }
}

void sub_1BF46A170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF46A184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF46A1DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  int v3;
  uint64_t i;
  uint64_t v5;
  void *v6;

  v3 = *(_DWORD *)(v1 + 28);
  if (v3 >= 1)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8 * i);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v3 = *(_DWORD *)(v1 + 28);
      }
    }
  }
  v6 = *(void **)(v1 + 16);
  if (v6)
    operator delete[](v6);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterBasebanCrash::~CommCenterBasebanCrash(awd::metrics::CommCenterBasebanCrash *this)
{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = off_1E79073D8;
  v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)this + 7);
      }
    }
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
    operator delete[](v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = off_1E79073D8;
  v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)this + 7);
      }
    }
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
    operator delete[](v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = off_1E79073D8;
  v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)this + 7);
      }
    }
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
    operator delete[](v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete(v6);
}

uint64_t awd::metrics::CommCenterBasebanCrash::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterBasebanCrash::default_instance(awd::metrics::CommCenterBasebanCrash *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::metrics::CommCenterBasebanCrash::default_instance_;
  if (!awd::metrics::CommCenterBasebanCrash::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterBasebanCrash::default_instance_;
  }
  return result;
}

_QWORD *awd::metrics::CommCenterBasebanCrash::New(awd::metrics::CommCenterBasebanCrash *this)
{
  _QWORD *result;

  result = operator new(0x30uLL);
  result[5] = 0;
  *result = off_1E79073D8;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  *((_DWORD *)result + 8) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterBasebanCrash::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  if (*(_BYTE *)(this + 44))
    *(_QWORD *)(this + 8) = 0;
  if (*(int *)(this + 24) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 24));
  }
  *(_DWORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 44) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterBasebanCrash::MergePartialFromCodedStream(awd::metrics::CommCenterBasebanCrash *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unint64_t *v4;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  uint64_t v6;
  char *v7;
  uint64_t TagFallback;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t result;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  _BYTE *v27;
  unsigned int v28;

  v4 = (unint64_t *)((char *)this + 8);
  v5 = (awd::metrics::CommCenterBasebanCrash *)((char *)this + 16);
  v6 = MEMORY[0x1E0DE8338];
  while (1)
  {
    while (1)
    {
      v7 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = *v7;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v7 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v9 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_18;
      v14 = (char *)*((_QWORD *)a2 + 1);
      v15 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v14 >= v15 || *v14 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
        if (!(_DWORD)result)
          return result;
        v16 = (_BYTE *)*((_QWORD *)a2 + 1);
        v18 = *((_QWORD *)a2 + 2);
        *((_DWORD *)this + 11) |= 1u;
        if ((unint64_t)v16 < v18)
          goto LABEL_23;
      }
      else
      {
        *v4 = *v14;
        v16 = v14 + 1;
        *((_QWORD *)a2 + 1) = v16;
        *((_DWORD *)this + 11) |= 1u;
        if ((unint64_t)v16 < v15)
        {
LABEL_23:
          if (*v16 == 18)
          {
            do
            {
              *((_QWORD *)a2 + 1) = v16 + 1;
              v10 = *((_DWORD *)this + 7);
              v11 = *((int *)this + 6);
              if ((int)v11 < v10)
                goto LABEL_11;
LABEL_25:
              if (v10 == *((_DWORD *)this + 8))
              {
                wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5);
                v10 = *((_DWORD *)this + 7);
              }
              *((_DWORD *)this + 7) = v10 + 1;
              v13 = operator new(0x28uLL);
              *v13 = off_1E7907360;
              v13[1] = v6;
              v13[2] = v6;
              v13[3] = 0;
              *((_DWORD *)v13 + 8) = 0;
              v19 = *((_QWORD *)this + 2);
              v20 = *((int *)this + 6);
              *((_DWORD *)this + 6) = v20 + 1;
              *(_QWORD *)(v19 + 8 * v20) = v13;
LABEL_28:
              v28 = -1431655766;
              v21 = (char *)*((_QWORD *)a2 + 1);
              if ((unint64_t)v21 >= *((_QWORD *)a2 + 2) || *v21 < 0)
              {
                if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v28))return 0;
              }
              else
              {
                v28 = *v21;
                *((_QWORD *)a2 + 1) = v21 + 1;
              }
              v22 = *((_DWORD *)a2 + 14);
              v23 = *((_DWORD *)a2 + 15);
              *((_DWORD *)a2 + 14) = v22 + 1;
              if (v22 >= v23)
                return 0;
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
              if (!awd::metrics::CrashReasonType::MergePartialFromCodedStream((awd::metrics::CrashReasonType *)v13, a2)|| !*((_BYTE *)a2 + 36))
              {
                return 0;
              }
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
              v24 = *((_DWORD *)a2 + 14);
              v25 = __OFSUB__(v24, 1);
              v26 = v24 - 1;
              if (v26 < 0 == v25)
                *((_DWORD *)a2 + 14) = v26;
              v16 = (_BYTE *)*((_QWORD *)a2 + 1);
              v27 = (_BYTE *)*((_QWORD *)a2 + 2);
            }
            while (v16 < v27 && *v16 == 18);
            if (v16 == v27 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
            {
              *((_DWORD *)a2 + 8) = 0;
              result = 1;
              *((_BYTE *)a2 + 36) = 1;
              return result;
            }
          }
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v9 = TagFallback & 7;
      if (v9 == 2)
      {
        v10 = *((_DWORD *)this + 7);
        v11 = *((int *)this + 6);
        if ((int)v11 >= v10)
          goto LABEL_25;
LABEL_11:
        v12 = *((_QWORD *)this + 2);
        *((_DWORD *)this + 6) = v11 + 1;
        v13 = *(_QWORD **)(v12 + 8 * v11);
        goto LABEL_28;
      }
    }
    else
    {
      v9 = TagFallback & 7;
    }
LABEL_18:
    if (v9 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
}

uint64_t awd::metrics::CommCenterBasebanCrash::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = this;
  if ((*(_BYTE *)(this + 44) & 1) != 0)
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (uint64_t)a2, a4);
  if (*(int *)(v5 + 24) >= 1)
  {
    v6 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 24));
  }
  return this;
}

uint64_t awd::metrics::CommCenterBasebanCrash::ByteSize(wireless_diagnostics::google::protobuf::io::CodedOutputStream **this)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;

  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
    v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(this[1]);
    v5 = *((_DWORD *)this + 6);
    v3 = (v5 + v4 + 1);
    if (v5 < 1)
      goto LABEL_9;
  }
  else
  {
    v2 = *((_DWORD *)this + 6);
    v3 = v2;
    if (v2 < 1)
      goto LABEL_9;
  }
  v6 = 0;
  do
  {
    while (1)
    {
      v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::metrics::CrashReasonType::ByteSize(*((awd::metrics::CrashReasonType **)this[2] + v6));
      if (v7 < 0x80)
        break;
      v3 = (_DWORD)v7
         + (_DWORD)v3
         + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7);
      if (++v6 >= *((int *)this + 6))
        goto LABEL_9;
    }
    v3 = ((_DWORD)v7 + v3 + 1);
    ++v6;
  }
  while (v6 < *((int *)this + 6));
LABEL_9:
  *((_DWORD *)this + 10) = v3;
  return v3;
}

void awd::metrics::CommCenterBasebanCrash::CopyFrom(awd::metrics::CommCenterBasebanCrash *this, const awd::metrics::CommCenterBasebanCrash *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterBasebanCrash *))(*(_QWORD *)this + 32))(this);
    awd::metrics::CommCenterBasebanCrash::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterBasebanCrash::IsInitialized(awd::metrics::CommCenterBasebanCrash *this)
{
  return 1;
}

awd::metrics::CommCenterBasebanCrash *awd::metrics::CommCenterBasebanCrash::Swap(awd::metrics::CommCenterBasebanCrash *this, awd::metrics::CommCenterBasebanCrash *a2)
{
  awd::metrics::CommCenterBasebanCrash *v3;
  uint64_t v4;
  int v5;
  int v6;

  if (a2 != this)
  {
    v3 = this;
    v4 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v4;
    this = (awd::metrics::CommCenterBasebanCrash *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    v5 = *((_DWORD *)v3 + 11);
    *((_DWORD *)v3 + 11) = *((_DWORD *)a2 + 11);
    *((_DWORD *)a2 + 11) = v5;
    v6 = *((_DWORD *)v3 + 10);
    *((_DWORD *)v3 + 10) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v6;
  }
  return this;
}

char *awd::metrics::CommCenterBasebanCrash::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1BF53F3D0;
  strcpy(result, "awd.metrics.CommCenterBasebanCrash");
  return result;
}

_QWORD *awd::metrics::CommCenterBasebandTrace::SharedCtor(_QWORD *this)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DE8338];
  this[1] = 0;
  this[2] = v1;
  this[3] = v1;
  this[4] = 0;
  return this;
}

awd::metrics::CommCenterBasebandTrace *awd::metrics::CommCenterBasebandTrace::CommCenterBasebandTrace(awd::metrics::CommCenterBasebandTrace *this, const awd::metrics::CommCenterBasebandTrace *a2)
{
  uint64_t v3;

  *(_QWORD *)this = off_1E7907450;
  *((_QWORD *)this + 1) = 0;
  v3 = MEMORY[0x1E0DE8338];
  *((_QWORD *)this + 2) = MEMORY[0x1E0DE8338];
  *((_QWORD *)this + 3) = v3;
  *((_QWORD *)this + 4) = 0;
  awd::metrics::CommCenterBasebandTrace::MergeFrom(this, a2);
  return this;
}

{
  uint64_t v3;

  *(_QWORD *)this = off_1E7907450;
  *((_QWORD *)this + 1) = 0;
  v3 = MEMORY[0x1E0DE8338];
  *((_QWORD *)this + 2) = MEMORY[0x1E0DE8338];
  *((_QWORD *)this + 3) = v3;
  *((_QWORD *)this + 4) = 0;
  awd::metrics::CommCenterBasebandTrace::MergeFrom(this, a2);
  return this;
}

void sub_1BF46A9F8(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterBasebandTrace::MergeFrom(awd::metrics::CommCenterBasebandTrace *this, const awd::metrics::CommCenterBasebandTrace *a2)
{
  int v4;
  uint64_t v5;
  void **v6;
  void **v7;
  void **v8;
  char v9;
  __int128 v10;
  void *v11;
  size_t v12;
  void **v13;
  void **v14;
  char v15;
  __int128 v16;
  void *v17;
  size_t v18;
  char v19[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v19);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 36);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 36) & 1) != 0)
    {
      v5 = *((_QWORD *)a2 + 1);
      *((_DWORD *)this + 9) |= 1u;
      *((_QWORD *)this + 1) = v5;
      v4 = *((_DWORD *)a2 + 9);
    }
    v6 = (void **)MEMORY[0x1E0DE8338];
    if ((v4 & 2) != 0)
    {
      v7 = (void **)*((_QWORD *)a2 + 2);
      *((_DWORD *)this + 9) |= 2u;
      v8 = (void **)*((_QWORD *)this + 2);
      if (v8 == v6)
      {
        v8 = (void **)operator new(0x18uLL);
        v8[1] = 0;
        v8[2] = 0;
        *v8 = 0;
        *((_QWORD *)this + 2) = v8;
      }
      if (v8 != v7)
      {
        v9 = *((_BYTE *)v7 + 23);
        if ((*((char *)v8 + 23) & 0x80000000) == 0)
        {
          if ((*((_BYTE *)v7 + 23) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>(v8, *v7, (size_t)v7[1]);
            if ((*((_BYTE *)a2 + 36) & 4) == 0)
              return;
          }
          else
          {
            v10 = *(_OWORD *)v7;
            v8[2] = v7[2];
            *(_OWORD *)v8 = v10;
            if ((*((_BYTE *)a2 + 36) & 4) == 0)
              return;
          }
          goto LABEL_22;
        }
        if (v9 >= 0)
          v11 = v7;
        else
          v11 = *v7;
        if (v9 >= 0)
          v12 = *((unsigned __int8 *)v7 + 23);
        else
          v12 = (size_t)v7[1];
        std::string::__assign_no_alias<false>(v8, v11, v12);
      }
    }
    if ((*((_BYTE *)a2 + 36) & 4) == 0)
      return;
LABEL_22:
    v13 = (void **)*((_QWORD *)a2 + 3);
    *((_DWORD *)this + 9) |= 4u;
    v14 = (void **)*((_QWORD *)this + 3);
    if (v14 == v6)
    {
      v14 = (void **)operator new(0x18uLL);
      v14[1] = 0;
      v14[2] = 0;
      *v14 = 0;
      *((_QWORD *)this + 3) = v14;
    }
    if (v14 != v13)
    {
      v15 = *((_BYTE *)v13 + 23);
      if (*((char *)v14 + 23) < 0)
      {
        if (v15 >= 0)
          v17 = v13;
        else
          v17 = *v13;
        if (v15 >= 0)
          v18 = *((unsigned __int8 *)v13 + 23);
        else
          v18 = (size_t)v13[1];
        std::string::__assign_no_alias<false>(v14, v17, v18);
      }
      else if ((*((_BYTE *)v13 + 23) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v14, *v13, (size_t)v13[1]);
      }
      else
      {
        v16 = *(_OWORD *)v13;
        v14[2] = v13[2];
        *(_OWORD *)v14 = v16;
      }
    }
  }
}

void sub_1BF46ABE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF46ABFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF46AC50(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterBasebandTrace::~CommCenterBasebandTrace(awd::metrics::CommCenterBasebandTrace *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(_QWORD *)this = off_1E7907450;
  v2 = *((_QWORD *)this + 2);
  v3 = MEMORY[0x1E0DE8338];
  if (v2 != MEMORY[0x1E0DE8338] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete((void *)v2);
    v5 = *((_QWORD *)this + 3);
    if (v5 != v3 && v5 != 0)
      goto LABEL_19;
LABEL_11:
    wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
    return;
  }
  v5 = *((_QWORD *)this + 3);
  if (v5 == MEMORY[0x1E0DE8338] || v5 == 0)
    goto LABEL_11;
LABEL_19:
  if (*(char *)(v5 + 23) < 0)
    operator delete(*(void **)v5);
  operator delete((void *)v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(_QWORD *)this = off_1E7907450;
  v2 = *((_QWORD *)this + 2);
  v3 = MEMORY[0x1E0DE8338];
  if (v2 != MEMORY[0x1E0DE8338] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete((void *)v2);
    v5 = *((_QWORD *)this + 3);
    if (v5 != v3 && v5 != 0)
      goto LABEL_19;
LABEL_11:
    wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
    return;
  }
  v5 = *((_QWORD *)this + 3);
  if (v5 == MEMORY[0x1E0DE8338] || v5 == 0)
    goto LABEL_11;
LABEL_19:
  if (*(char *)(v5 + 23) < 0)
    operator delete(*(void **)v5);
  operator delete((void *)v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void *v7;

  *(_QWORD *)this = off_1E7907450;
  v2 = *((_QWORD *)this + 2);
  v3 = MEMORY[0x1E0DE8338];
  if (v2 != MEMORY[0x1E0DE8338] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete((void *)v2);
    v5 = *((_QWORD *)this + 3);
    if (v5 != v3 && v5 != 0)
      goto LABEL_19;
LABEL_11:
    wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
    goto LABEL_12;
  }
  v5 = *((_QWORD *)this + 3);
  if (v5 == MEMORY[0x1E0DE8338] || v5 == 0)
    goto LABEL_11;
LABEL_19:
  if (*(char *)(v5 + 23) < 0)
    operator delete(*(void **)v5);
  operator delete((void *)v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
LABEL_12:
  operator delete(v7);
}

void awd::metrics::CommCenterBasebandTrace::SharedDtor(awd::metrics::CommCenterBasebandTrace *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *((_QWORD *)this + 2);
  v3 = MEMORY[0x1E0DE8338];
  if (v2 == MEMORY[0x1E0DE8338] || v2 == 0)
  {
    v5 = *((_QWORD *)this + 3);
    if (v5 != MEMORY[0x1E0DE8338] && v5 != 0)
    {
LABEL_18:
      if (*(char *)(v5 + 23) < 0)
        operator delete(*(void **)v5);
      operator delete((void *)v5);
    }
  }
  else
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete((void *)v2);
    v5 = *((_QWORD *)this + 3);
    if (v5 != v3 && v5 != 0)
      goto LABEL_18;
  }
}

uint64_t awd::metrics::CommCenterBasebandTrace::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterBasebandTrace::default_instance(awd::metrics::CommCenterBasebandTrace *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::metrics::CommCenterBasebandTrace::default_instance_;
  if (!awd::metrics::CommCenterBasebandTrace::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterBasebandTrace::default_instance_;
  }
  return result;
}

_QWORD *awd::metrics::CommCenterBasebandTrace::New(awd::metrics::CommCenterBasebandTrace *this)
{
  _QWORD *result;
  uint64_t v2;

  result = operator new(0x28uLL);
  v2 = MEMORY[0x1E0DE8338];
  *result = off_1E7907450;
  result[1] = 0;
  result[2] = v2;
  result[3] = v2;
  result[4] = 0;
  return result;
}

uint64_t awd::metrics::CommCenterBasebandTrace::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_BYTE *)(this + 36);
  if (!v1)
    goto LABEL_12;
  *(_QWORD *)(this + 8) = 0;
  v2 = MEMORY[0x1E0DE8338];
  if ((v1 & 2) != 0)
  {
    v3 = *(_QWORD *)(this + 16);
    if (v3 != MEMORY[0x1E0DE8338])
    {
      if (*(char *)(v3 + 23) < 0)
      {
        **(_BYTE **)v3 = 0;
        *(_QWORD *)(v3 + 8) = 0;
        if ((*(_BYTE *)(this + 36) & 4) == 0)
          goto LABEL_12;
        goto LABEL_7;
      }
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  if ((*(_BYTE *)(this + 36) & 4) == 0)
  {
LABEL_12:
    *(_DWORD *)(this + 36) = 0;
    return this;
  }
LABEL_7:
  v4 = *(_QWORD *)(this + 24);
  if (v4 == v2)
    goto LABEL_12;
  if (*(char *)(v4 + 23) < 0)
  {
    **(_BYTE **)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
  }
  else
  {
    *(_BYTE *)v4 = 0;
    *(_BYTE *)(v4 + 23) = 0;
  }
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterBasebandTrace::MergePartialFromCodedStream(awd::metrics::CommCenterBasebandTrace *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unint64_t *v4;
  uint64_t v5;
  char *v6;
  uint64_t TagFallback;
  unsigned int v8;
  int v9;
  uint64_t result;
  unint64_t v11;
  char *v12;
  _BYTE *v13;
  int v14;
  _QWORD *v15;
  _BYTE *v16;
  _QWORD *v17;
  unint64_t v18;

  v4 = (unint64_t *)((char *)this + 8);
  v5 = MEMORY[0x1E0DE8338];
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
        {
          TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = *v6;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((_QWORD *)a2 + 1) = v6 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v8 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v13 = (_BYTE *)*((_QWORD *)a2 + 1);
          v18 = *((_QWORD *)a2 + 2);
          v14 = *((_DWORD *)this + 9) | 1;
          *((_DWORD *)this + 9) = v14;
          if ((unint64_t)v13 < v18)
            goto LABEL_37;
        }
        else
        {
          *v4 = *v12;
          v13 = v12 + 1;
          *((_QWORD *)a2 + 1) = v13;
          v14 = *((_DWORD *)this + 9) | 1;
          *((_DWORD *)this + 9) = v14;
          if ((unint64_t)v13 < v11)
          {
LABEL_37:
            if (*v13 == 18)
            {
              *((_QWORD *)a2 + 1) = v13 + 1;
              *((_DWORD *)this + 9) = v14 | 2;
              if (*((_QWORD *)this + 2) != v5)
                goto LABEL_22;
LABEL_21:
              v15 = operator new(0x18uLL);
              v15[1] = 0;
              v15[2] = 0;
              *v15 = 0;
              *((_QWORD *)this + 2) = v15;
              goto LABEL_22;
            }
          }
        }
      }
      if (v8 == 2)
        break;
      if (v8 == 3)
      {
        v9 = TagFallback & 7;
        if (v9 == 2)
        {
          *((_DWORD *)this + 9) |= 4u;
          if (*((_QWORD *)this + 3) != v5)
            goto LABEL_12;
          goto LABEL_26;
        }
      }
      else
      {
        v9 = TagFallback & 7;
      }
LABEL_32:
      if (v9 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
    }
    v9 = TagFallback & 7;
    if (v9 != 2)
      goto LABEL_32;
    *((_DWORD *)this + 9) |= 2u;
    if (*((_QWORD *)this + 2) == v5)
      goto LABEL_21;
LABEL_22:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
    if (!(_DWORD)result)
      return result;
    v16 = (_BYTE *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v16 < *((_QWORD *)a2 + 2) && *v16 == 26)
    {
      *((_QWORD *)a2 + 1) = v16 + 1;
      *((_DWORD *)this + 9) |= 4u;
      if (*((_QWORD *)this + 3) != v5)
      {
LABEL_12:
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        goto LABEL_27;
      }
LABEL_26:
      v17 = operator new(0x18uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = 0;
      *((_QWORD *)this + 3) = v17;
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
      if (!(_DWORD)result)
        return result;
LABEL_27:
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        break;
      }
    }
  }
  *((_DWORD *)a2 + 8) = 0;
  result = 1;
  *((_BYTE *)a2 + 36) = 1;
  return result;
}

