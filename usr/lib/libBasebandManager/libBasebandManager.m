uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t ___ZNK3ctu20SharedSynchronizableINS_9XpcClientEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIKN3ctu9XpcClientEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

xpc_object_t __copy_helper_block_e8_40c17_ZTSN3xpc6objectE(uint64_t a1, uint64_t a2)
{
  void *v3;
  xpc_object_t result;

  v3 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (v3)
    return xpc_retain(v3);
  result = xpc_null_create();
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c15_ZTSN3xpc4dictE48c22_ZTSN3xpc10connectionE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
}

xpc_object_t __copy_helper_block_e8_40c15_ZTSN3xpc4dictE48c22_ZTSN3xpc10connectionE(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  xpc_object_t result;

  v4 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
  {
    xpc_retain(v4);
    v5 = *(void **)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v5;
    if (v5)
      return xpc_retain(v5);
  }
  else
  {
    *(_QWORD *)(a1 + 40) = xpc_null_create();
    v5 = *(void **)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v5;
    if (v5)
      return xpc_retain(v5);
  }
  result = xpc_null_create();
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

_QWORD *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<coex::Module::State>>::clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E78FE0C8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

void Service::broadcastEvent(uint64_t a1, uint64_t a2, const void **a3, const void **a4)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  const void *v12;
  void *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v17;
  const void *v18;
  std::string v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    v9 = std::__shared_weak_count::lock(v5);
    v21 = v9;
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)(a1 + 8);
      v20 = v11;
      if (!v11)
      {
LABEL_20:
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        return;
      }
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v19 = *(std::string *)a2;
      v12 = *a3;
      v18 = v12;
      if (v12)
        CFRetain(v12);
      if (*a4)
      {
        v13 = _Block_copy(*a4);
        v17 = v13;
        v14 = *(_QWORD *)(v11 + 184);
        if (!v14)
          goto LABEL_14;
      }
      else
      {
        v13 = 0;
        v17 = 0;
        v14 = *(_QWORD *)(v11 + 184);
        if (!v14)
        {
LABEL_14:
          if (v13)
            _Block_release(v13);
          if (v12)
            CFRelease(v12);
          if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v19.__r_.__value_.__l.__data_);
          goto LABEL_20;
        }
      }
      dispatch::block<void({block_pointer})(std::string,ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::block<void({block_pointer})(void)>)>::operator()<std::string const&,ctu::cf::CFSharedRef<__CFDictionary const>&,dispatch::block<void({block_pointer})(void)>&>(v14, (uint64_t)&v19, &v18, &v17);
      goto LABEL_14;
    }
  }
}

void sub_1BF337DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF337DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  const void *v18;

  if (v18)
    _Block_release(v18);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void dispatch::block<void({block_pointer})(std::string,ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::block<void({block_pointer})(void)>)>::operator()<std::string const&,ctu::cf::CFSharedRef<__CFDictionary const>&,dispatch::block<void({block_pointer})(void)>&>(uint64_t a1, uint64_t a2, const void **a3, void **a4)
{
  const void *v7;
  void *v8;
  void *aBlock;
  CFTypeRef cf;
  std::string v11;

  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v7 = *a3;
    cf = v7;
    if (!v7)
      goto LABEL_6;
    goto LABEL_5;
  }
  v11 = *(std::string *)a2;
  v7 = *a3;
  cf = v7;
  if (v7)
LABEL_5:
    CFRetain(v7);
LABEL_6:
  v8 = *a4;
  if (*a4)
    v8 = _Block_copy(v8);
  aBlock = v8;
  (*(void (**)(uint64_t, std::string *, CFTypeRef *, void **))(a1 + 16))(a1, &v11, &cf, &aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1BF337EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (aBlock)
    _Block_release(aBlock);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void boost::detail::function::void_function_obj_invoker2<ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::invoke(uint64_t a1, _QWORD *a2, int a3)
{
  _QWORD *v4;
  _QWORD *v5;
  const void *v6;
  NSObject *v7;
  void *v8;
  const void *v9;
  void *v10;
  const void *v11;
  void *v12;
  const void *v13;
  void *v14;
  const void *v15;
  void *v16;
  const void *v17;
  void *v18;
  const void *v19;
  char v20;
  _QWORD *v21;
  _DWORD *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  void (*v26)(__int128 *, __int128 *, uint64_t);
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v30;
  _QWORD *v31[2];
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  _QWORD block[7];

  v4 = a2 + 1;
  v5 = (_QWORD *)a2[1];
  v27 = (_QWORD *)*a2;
  v28 = v5;
  if (a2[2])
  {
    v5[2] = &v28;
    *a2 = v4;
    *v4 = 0;
    a2[2] = 0;
    v7 = *(NSObject **)a1;
    v6 = *(const void **)(a1 + 8);
    if (v6)
      goto LABEL_3;
LABEL_11:
    v9 = 0;
    goto LABEL_12;
  }
  v27 = &v28;
  v7 = *(NSObject **)a1;
  v6 = *(const void **)(a1 + 8);
  if (!v6)
    goto LABEL_11;
LABEL_3:
  v8 = _Block_copy(v6);
  v9 = v8;
  if (!v8)
  {
LABEL_12:
    v20 = 1;
LABEL_13:
    v32 = (unint64_t)boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>(dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>)::stored_vtable;
    *(_QWORD *)&v33 = 0;
    goto LABEL_23;
  }
  v10 = _Block_copy(v8);
  v11 = v10;
  if (!v10)
  {
    v20 = 0;
    goto LABEL_13;
  }
  v12 = _Block_copy(v10);
  v13 = v12;
  if (v12)
  {
    v14 = _Block_copy(v12);
    v15 = v14;
    if (v14)
    {
      v16 = _Block_copy(v14);
      v17 = v16;
      if (v16)
      {
        v18 = _Block_copy(v16);
        v19 = v18;
        if (v18)
        {
          *(_QWORD *)&v33 = _Block_copy(v18);
          _Block_release(v19);
        }
        else
        {
          *(_QWORD *)&v33 = 0;
        }
        _Block_release(v17);
      }
      else
      {
        *(_QWORD *)&v33 = 0;
      }
      _Block_release(v15);
    }
    else
    {
      *(_QWORD *)&v33 = 0;
    }
    v32 = (unint64_t)boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>(dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>)::stored_vtable;
    _Block_release(v13);
  }
  else
  {
    v32 = (unint64_t)boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>(dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>)::stored_vtable;
    *(_QWORD *)&v33 = 0;
  }
  _Block_release(v11);
  v20 = 0;
LABEL_23:
  v31[0] = 0;
  v31[1] = 0;
  v30 = v31;
  std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(&v30, v27, &v28);
  v21 = operator new(0x18uLL);
  v21[1] = 0;
  v21[2] = 0;
  *v21 = v21 + 1;
  std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(v21, v30, v31);
  v22 = operator new(4uLL);
  *v22 = a3;
  v23 = (char *)operator new(0x20uLL);
  v24 = v23;
  *(_QWORD *)v23 = 0;
  v25 = v32;
  if (v32)
  {
    *(_QWORD *)v23 = v32;
    if ((v25 & 1) != 0)
    {
      *(_OWORD *)(v23 + 8) = v33;
      *((_QWORD *)v23 + 3) = v34;
    }
    else
    {
      (*(void (**)(__int128 *, char *, _QWORD))(v25 & 0xFFFFFFFFFFFFFFFELL))(&v33, v23 + 8, 0);
    }
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvNSt3__13mapIPKcNS3_4listINS3_4pairIyjEENS3_9allocatorIS9_EEEENS3_4lessIS6_EENSA_INS8_IKS6_SC_EEEEEEN4coex5SubIdEEEESI_SK__block_invoke;
  block[3] = &__block_descriptor_tmp_261;
  block[4] = v24;
  block[5] = v21;
  block[6] = v22;
  dispatch_async(v7, block);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v31[0]);
  if (v32)
  {
    if ((v32 & 1) == 0)
    {
      v26 = *(void (**)(__int128 *, __int128 *, uint64_t))(v32 & 0xFFFFFFFFFFFFFFFELL);
      if (v26)
        v26(&v33, &v33, 2);
    }
    v32 = 0;
  }
  if ((v20 & 1) == 0)
    _Block_release(v9);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v28);
}

void sub_1BF3381F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16)
{
  const void *v16;
  void *v17;
  char v18;

  operator delete(v17);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a14);
  boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>::~function(&a16);
  if ((v18 & 1) == 0)
    _Block_release(v16);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a11);
  _Unwind_Resume(a1);
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  void *v6;
  void *v7;
  const char *v8;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v8 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001BF53E3B5 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001BF53E3B5 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
LABEL_9:
        _Block_release(v7);
    }
  }
  else
  {
    v6 = *a1;
    if (*a1)
      v6 = _Block_copy(v6);
    *(_QWORD *)a2 = v6;
    if (a3 == 1)
    {
      v7 = *a1;
      if (*a1)
        goto LABEL_9;
    }
  }
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvNSt3__13mapIPKcNS3_4listINS3_4pairIyjEENS3_9allocatorIS9_EEEENS3_4lessIS6_EENSA_INS8_IKS6_SC_EEEEEEN4coex5SubIdEEEESI_SK__block_invoke(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void (*v5)(_QWORD *, std::runtime_error *, uint64_t);
  uint64_t *v6;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  _QWORD **v9;
  void *v10;
  std::runtime_error v11;
  uint64_t v12;
  std::runtime_error v13;
  uint64_t v14;

  v3 = *(_QWORD **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v11.__imp_.__imp_ = 0;
  v12 = 0;
  v11.__vftable = (std::runtime_error_vtbl *)&v11.__imp_;
  std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(&v11, *(_QWORD **)v2, (_QWORD *)(v2 + 8));
  if (!*v3)
  {
    std::runtime_error::runtime_error(&v13, "call to empty boost::function");
    v13.__vftable = (std::runtime_error_vtbl *)&unk_1E78FE000;
    boost::throw_exception<boost::bad_function_call>(&v13);
  }
  v4 = **(unsigned int **)(a1 + 48);
  v5 = *(void (**)(_QWORD *, std::runtime_error *, uint64_t))((*v3 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v13 = v11;
  v14 = v12;
  if (v12)
  {
    *((_QWORD *)v11.__imp_.__imp_ + 2) = &v13.__imp_;
    v11.__vftable = (std::runtime_error_vtbl *)&v11.__imp_;
    v11.__imp_.__imp_ = 0;
    v12 = 0;
  }
  else
  {
    v13.__vftable = (std::runtime_error_vtbl *)&v13.__imp_;
  }
  v5(v3 + 1, &v13, v4);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy((_QWORD *)v13.__imp_.__imp_);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy((_QWORD *)v11.__imp_.__imp_);
  v6 = *(uint64_t **)(a1 + 32);
  if (v6)
  {
    v7 = *v6;
    if (*v6)
    {
      if ((v7 & 1) == 0)
      {
        v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 & 0xFFFFFFFFFFFFFFFELL);
        if (v8)
          v8(v6 + 1, v6 + 1, 2);
      }
      *v6 = 0;
    }
    operator delete(v6);
  }
  v9 = *(_QWORD ***)(a1 + 40);
  if (v9)
  {
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v9[1]);
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 48);
  if (v10)
    operator delete(v10);
}

void sub_1BF338498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, std::runtime_error a12)
{
  std::runtime_error::~runtime_error(&a12);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a10);
  _Unwind_Resume(a1);
}

void sub_1BF3384B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a10);
  _Unwind_Resume(a1);
}

void sub_1BF3384C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a13);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a10);
  _Unwind_Resume(a1);
}

void sub_1BF3384E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a10);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1)
  {
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(*a1);
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a1[1]);
    if (a1[7])
    {
      v3 = a1[5];
      v2 = (uint64_t *)a1[6];
      v4 = *v2;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(v3 + 8);
      **(_QWORD **)(v3 + 8) = v4;
      a1[7] = 0;
      if (v2 != a1 + 5)
      {
        do
        {
          v5 = (uint64_t *)v2[1];
          operator delete(v2);
          v2 = v5;
        }
        while (v5 != a1 + 5);
      }
    }
    operator delete(a1);
  }
}

void boost::detail::function::void_function_obj_invoker2<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::invoke(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v6;

  v2 = *a1;
  v3 = a2 + 1;
  v4 = (_QWORD *)a2[1];
  v5 = (_QWORD **)*a2;
  v6 = v4;
  if (a2[2])
  {
    v4[2] = &v6;
    *a2 = v3;
    *v3 = 0;
    a2[2] = 0;
  }
  else
  {
    v5 = &v6;
  }
  (*(void (**)(uint64_t, _QWORD ***))(v2 + 16))(v2, &v5);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v6);
}

void sub_1BF3385EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a11);
  _Unwind_Resume(a1);
}

void ___ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE13connect_eventIN5boost8signals26signalIFvNSt3__13mapIPKcNS9_4listINS9_4pairIyjEENS9_9allocatorISF_EEEENS9_4lessISC_EENSG_INSE_IKSC_SI_EEEEEENS1_5SubIdEENS7_19optional_last_valueIvEEiNSJ_IiEENS6_8functionISQ_EENSU_IFvRKNS7_10connectionESO_SP_EEENS7_5mutexEEES3_vJSO_SP_EEEDTcl7connectfp_cvNS9_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FS17_S19_E_block_invoke(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void (*v5)(_QWORD *, _QWORD ***, uint64_t);
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v8[2];

  v5 = (void (*)(_QWORD *, _QWORD ***, uint64_t))a1[5];
  v4 = a1[6];
  v6 = (_QWORD *)(a1[4] + (v4 >> 1) - 72);
  if ((v4 & 1) != 0)
    v5 = *(void (**)(_QWORD *, _QWORD ***, uint64_t))(*v6 + v5);
  v8[0] = 0;
  v8[1] = 0;
  v7 = v8;
  std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(&v7, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  v5(v6, &v7, a3);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v8[0]);
}

void sub_1BF338680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a11);
  _Unwind_Resume(a1);
}

void sub_1BF338694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a11);
  _Unwind_Resume(a1);
}

void ABMServerInternal::broadcast_sync(uint64_t a1, uint64_t a2, ctu **a3, void **a4)
{
  xpc_object_t v7;
  xpc_object_t v8;
  const void *v9;
  uint64_t (*v10)(uint64_t);
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  const char *v14;
  xpc_object_t v15;
  xpc_object_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  _QWORD *v24;
  xpc_object_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t SystemTime;
  NSObject *v33;
  const void *v34;
  __int128 v35;
  std::string *v36;
  NSObject *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  BOOL v53;
  NSObject *v54;
  unint64_t v55;
  void *v56;
  xpc_object_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  NSObject *group;
  _QWORD *v62;
  _QWORD block[6];
  std::__shared_weak_count *v64;
  std::string v65;
  void *aBlock;
  _QWORD handler[6];
  std::__shared_weak_count *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  std::string __p;
  uint64_t v72;
  NSObject *v73;
  std::string v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  xpc_object_t v77;
  unint64_t v78;
  unint64_t v79;
  xpc_object_t v80;
  uint8_t buf[4];
  const void *v82;
  __int16 v83;
  std::string *v84;
  __int16 v85;
  uint64_t v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v7 = xpc_dictionary_create(0, 0, 0);
  if (v7 || (v7 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v7) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v7);
      v8 = v7;
    }
    else
    {
      v8 = xpc_null_create();
    }
  }
  else
  {
    v8 = xpc_null_create();
    v7 = 0;
  }
  xpc_release(v7);
  v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!*a3)
    v10 = 0;
  v57 = v8;
  if (v10)
  {
    ctu::cf_to_xpc(*a3, v9);
    xpc_dictionary_set_value(v8, kKeyEventData[0], v80);
    v11 = v80;
    v80 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v80);
    v80 = 0;
  }
  v12 = xpc_string_create(kCommandSignalNotification[0]);
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(v8, kKeyCommand[0], v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  v14 = (const char *)a2;
  if (*(char *)(a2 + 23) < 0)
    v14 = *(const char **)a2;
  v15 = xpc_string_create(v14);
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(v8, kKeyEvent[0], v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  group = dispatch_group_create();
  v17 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v17 || (v58 = *(_QWORD *)(a1 + 8), (v18 = std::__shared_weak_count::lock(v17)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = v18;
  v62 = (_QWORD *)a1;
  p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
  do
    v21 = __ldxr(p_shared_weak_owners);
  while (__stxr(v21 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v19);
  }
  v59 = v19;
  v24 = (_QWORD *)v62[18];
  if (v24 != v62 + 19)
  {
    do
    {
      v78 = 0xAAAAAAAAAAAAAAAALL;
      v79 = 0xAAAAAAAAAAAAAAAALL;
      v25 = (xpc_object_t)v24[4];
      v77 = v25;
      if (v25)
      {
        xpc_retain(v25);
        v27 = v24[5];
        v26 = v24[6];
        v78 = v27;
        v79 = v26;
        if (!v26)
          goto LABEL_34;
      }
      else
      {
        v25 = xpc_null_create();
        v77 = v25;
        v27 = v24[5];
        v26 = v24[6];
        v78 = v27;
        v79 = v26;
        if (!v26)
          goto LABEL_34;
      }
      v28 = (unint64_t *)(v26 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
LABEL_34:
      if (v25)
      {
        xpc_retain(v25);
        v75 = v27;
        v76 = (std::__shared_weak_count *)v26;
        if (!v26)
          goto LABEL_40;
      }
      else
      {
        v25 = xpc_null_create();
        v75 = v27;
        v76 = (std::__shared_weak_count *)v26;
        if (!v26)
          goto LABEL_40;
      }
      v30 = (unint64_t *)(v26 + 8);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
LABEL_40:
      if ((uint64_t *)(v27 + 40) == std::__tree<std::string>::find<std::string>(v27 + 32, (const void **)a2))
        goto LABEL_71;
      SystemTime = TelephonyUtilGetSystemTime();
      v33 = v62[14];
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        v34 = (const void *)a2;
        if (*(char *)(a2 + 23) < 0)
        {
          v34 = *(const void **)a2;
          if (*(char *)(v27 + 23) < 0)
            goto LABEL_46;
LABEL_44:
          v35 = *(_OWORD *)v27;
          v74.__r_.__value_.__r.__words[2] = *(_QWORD *)(v27 + 16);
          *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v35;
        }
        else
        {
          if ((*(char *)(v27 + 23) & 0x80000000) == 0)
            goto LABEL_44;
LABEL_46:
          std::string::__init_copy_ctor_external(&v74, *(const std::string::value_type **)v27, *(_QWORD *)(v27 + 8));
        }
        v36 = &v74;
        if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v36 = (std::string *)v74.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315650;
        v82 = v34;
        v83 = 2080;
        v84 = v36;
        v85 = 2048;
        v86 = SystemTime;
        _os_log_impl(&dword_1BF335000, v33, OS_LOG_TYPE_DEFAULT, "#I Sending %s to %s at %llu", buf, 0x20u);
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v74.__r_.__value_.__l.__data_);
        v8 = v57;
      }
      if (!*a4)
      {
        xpc_connection_send_message((xpc_connection_t)v25, v8);
        goto LABEL_71;
      }
      dispatch_group_enter(group);
      v37 = v62[3];
      handler[0] = MEMORY[0x1E0C809B0];
      handler[1] = 1174405120;
      handler[2] = ___ZN17ABMServerInternal14broadcast_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke;
      handler[3] = &__block_descriptor_tmp_25;
      handler[4] = v62;
      handler[5] = v58;
      v68 = v59;
      do
        v38 = __ldxr(p_shared_weak_owners);
      while (__stxr(v38 + 1, p_shared_weak_owners));
      v69 = v27;
      v70 = (std::__shared_weak_count *)v26;
      if (v26)
      {
        v39 = (unint64_t *)(v26 + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        __p = *(std::string *)a2;
      v72 = SystemTime;
      v73 = group;
      xpc_connection_send_message_with_reply((xpc_connection_t)v25, v8, v37, handler);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        v41 = v70;
        if (!v70)
          goto LABEL_69;
      }
      else
      {
        v41 = v70;
        if (!v70)
          goto LABEL_69;
      }
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (v43)
      {
LABEL_69:
        v44 = v68;
        if (!v68)
          goto LABEL_71;
LABEL_70:
        std::__shared_weak_count::__release_weak(v44);
        goto LABEL_71;
      }
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
      v44 = v68;
      if (v68)
        goto LABEL_70;
LABEL_71:
      v45 = v76;
      if (v76)
      {
        v46 = (unint64_t *)&v76->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      xpc_release(v25);
      v48 = (std::__shared_weak_count *)v79;
      if (v79)
      {
        v49 = (unint64_t *)(v79 + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      xpc_release(v77);
      v51 = (_QWORD *)v24[1];
      if (v51)
      {
        do
        {
          v52 = v51;
          v51 = (_QWORD *)*v51;
        }
        while (v51);
      }
      else
      {
        do
        {
          v52 = (_QWORD *)v24[2];
          v53 = *v52 == (_QWORD)v24;
          v24 = v52;
        }
        while (!v53);
      }
      v24 = v52;
    }
    while (v52 != v62 + 19);
  }
  if (*a4)
  {
    v54 = v62[3];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZN17ABMServerInternal14broadcast_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke_26;
    block[3] = &__block_descriptor_tmp_27;
    block[4] = v62;
    block[5] = v58;
    v64 = v59;
    do
      v55 = __ldxr(p_shared_weak_owners);
    while (__stxr(v55 + 1, p_shared_weak_owners));
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v65, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v65 = *(std::string *)a2;
    v56 = *a4;
    if (*a4)
      v56 = _Block_copy(v56);
    aBlock = v56;
    dispatch_group_notify(group, v54, block);
    if (aBlock)
      _Block_release(aBlock);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    if (v64)
      std::__shared_weak_count::__release_weak(v64);
  }
  dispatch_release(group);
  std::__shared_weak_count::__release_weak(v59);
  xpc_release(v8);
}

void sub_1BF338DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a28)
    std::__shared_weak_count::__release_weak(a28);
  std::__shared_weak_count::__release_weak(a17);
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  int v4;
  const void *v5;
  size_t v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  size_t v10;
  size_t v11;
  int v12;
  int v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    return v2;
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = (uint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      v8 = *((char *)v3 + 55);
      v9 = v8 >= 0 ? v3 + 4 : (uint64_t *)v3[4];
      v10 = v8 >= 0 ? *((unsigned __int8 *)v3 + 55) : v3[5];
      v11 = v6 >= v10 ? v10 : v6;
      v12 = memcmp(v9, v5, v11);
      if (v12)
        break;
      if (v10 >= v6)
        goto LABEL_23;
LABEL_9:
      v3 = (uint64_t *)v3[1];
      if (!v3)
        goto LABEL_24;
    }
    if (v12 < 0)
      goto LABEL_9;
LABEL_23:
    v7 = v3;
    v3 = (uint64_t *)*v3;
  }
  while (v3);
LABEL_24:
  if (v7 == v2)
    return v2;
  v13 = *((char *)v7 + 55);
  if (v13 >= 0)
    v14 = v7 + 4;
  else
    v14 = (const void *)v7[4];
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)v7 + 55);
  else
    v15 = v7[5];
  if (v15 >= v6)
    v16 = v6;
  else
    v16 = v15;
  v17 = memcmp(v5, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0)
      return v7;
    return v2;
  }
  else
  {
    if (v6 < v15)
      return v2;
    return v7;
  }
}

void coex::Module::State::handleDesenseFrequencyReport_sync(uint64_t a1, _QWORD *a2, int a3)
{
  xpc_object_t v6;
  xpc_object_t v7;
  uint64_t v8;
  NSObject *v9;
  xpc_object_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  xpc_object_t v16;
  xpc_object_t v17;
  _QWORD *i;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  _QWORD *v25;
  _OWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  const char *v29;
  size_t v30;
  size_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  size_t v36;
  __int128 *p_dst;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint8_t *v41;
  uint8_t *v42;
  int v43;
  void *v44;
  const char *v45;
  int v46;
  const char *v47;
  size_t v48;
  size_t v49;
  void *v50;
  void *v51;
  xpc_object_t v52;
  uint64_t v53;
  uint64_t v54;
  size_t v55;
  size_t v56;
  __int128 *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint8_t *v61;
  uint8_t *v62;
  int v63;
  void *v64;
  const char *v65;
  int v66;
  const char *v67;
  size_t v68;
  size_t v69;
  void *v70;
  xpc_object_t v71;
  uint64_t v72;
  uint64_t v73;
  size_t v74;
  size_t v75;
  __int128 *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint8_t *v80;
  uint8_t *v81;
  int v82;
  void *v83;
  const char *v84;
  int v85;
  const char *v86;
  size_t v87;
  size_t v88;
  void *v89;
  xpc_object_t v90;
  xpc_object_t v91;
  uint64_t v92;
  uint64_t v93;
  size_t v94;
  size_t v95;
  __int128 *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint8_t *v100;
  uint8_t *v101;
  int v102;
  void *v103;
  const char *v104;
  int v105;
  const char *v106;
  size_t v107;
  size_t v108;
  void *v109;
  xpc_object_t v110;
  xpc_object_t v111;
  uint64_t v112;
  uint64_t v113;
  size_t v114;
  size_t v115;
  __int128 *v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint8_t *v120;
  uint8_t *v121;
  int v122;
  void *v123;
  const char *v124;
  int v125;
  const char *v126;
  size_t v127;
  size_t v128;
  void *v129;
  xpc_object_t v130;
  xpc_object_t v131;
  uint64_t v132;
  uint64_t v133;
  size_t v134;
  size_t v135;
  __int128 *v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint8_t *v140;
  uint8_t *v141;
  int v142;
  void *v143;
  const char *v144;
  int v145;
  xpc_object_t v146;
  xpc_object_t v147;
  xpc_object_t v148;
  xpc_object_t v149;
  _QWORD *v150;
  _QWORD *v151;
  BOOL v152;
  NSObject *v153;
  uint8_t *v154;
  uint64_t v155;
  xpc_object_t v156;
  int v157;
  uint64_t v158;
  char *v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  char *__s;
  xpc_object_t object;
  _OWORD *v166;
  _QWORD *v167;
  uint64_t v168;
  xpc_object_t xdict;
  uint8_t buf[8];
  uint64_t v171;
  int64_t v172;
  void *v173;
  uint64_t v174;
  xpc_object_t v175;
  int v176;
  int v177;
  __int128 __dst;
  int64_t v179;
  uint64_t v180;

  v180 = *MEMORY[0x1E0C80C00];
  if (a2[2])
  {
    v6 = xpc_dictionary_create(0, 0, 0);
    v7 = v6;
    v8 = MEMORY[0x1E0C812F8];
    v158 = a1;
    if (v6)
    {
      xdict = v6;
    }
    else
    {
      v7 = xpc_null_create();
      xdict = v7;
      if (!v7)
      {
        v10 = xpc_null_create();
        v7 = 0;
        goto LABEL_11;
      }
    }
    if (MEMORY[0x1C3B8A86C](v7) == v8)
    {
      xpc_retain(v7);
      goto LABEL_12;
    }
    v10 = xpc_null_create();
LABEL_11:
    xdict = v10;
LABEL_12:
    v157 = a3;
    xpc_release(v7);
    v11 = (_QWORD *)*a2;
    if ((_QWORD *)*a2 != a2 + 1)
    {
      __s = (char *)*MEMORY[0x1E0DDFC38];
      v163 = (char *)*MEMORY[0x1E0DDFC30];
      v161 = (char *)*MEMORY[0x1E0DDFC50];
      v162 = (char *)*MEMORY[0x1E0DDFC40];
      v159 = (char *)*MEMORY[0x1E0DDFC48];
      v160 = (char *)*MEMORY[0x1E0DDFC28];
      while (1)
      {
        v166 = &v166;
        v167 = &v166;
        v168 = 0;
        v12 = v11[6];
        if ((_QWORD *)v12 != v11 + 5)
        {
          v13 = &v166;
          v14 = 1;
          do
          {
            v15 = operator new(0x20uLL);
            v15[1] = *(_OWORD *)(v12 + 16);
            *(_QWORD *)v15 = v13;
            *((_QWORD *)v15 + 1) = &v166;
            v13[1] = v15;
            v166 = v15;
            v168 = v14;
            v12 = *(_QWORD *)(v12 + 8);
            ++v14;
            v13 = v15;
          }
          while ((_QWORD *)v12 != v11 + 5);
        }
        v16 = xpc_array_create(0, 0);
        if (v16 || (v16 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8A86C](v16) == MEMORY[0x1E0C812C8])
          {
            xpc_retain(v16);
            v17 = v16;
          }
          else
          {
            v17 = xpc_null_create();
          }
        }
        else
        {
          v17 = xpc_null_create();
          v16 = 0;
        }
        xpc_release(v16);
        for (i = v167; i != &v166; i = (_QWORD *)i[1])
        {
          v19 = xpc_dictionary_create(0, 0, 0);
          if (v19 || (v19 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x1C3B8A86C](v19) == v8)
            {
              xpc_retain(v19);
              v20 = v19;
            }
            else
            {
              v20 = xpc_null_create();
            }
          }
          else
          {
            v20 = xpc_null_create();
            v19 = 0;
          }
          xpc_release(v19);
          v21 = xpc_uint64_create(i[2]);
          if (!v21)
            v21 = xpc_null_create();
          xpc_dictionary_set_value(v20, "kWCMCellular_DesenseNetworkConfiguration_CenterFreq", v21);
          v22 = xpc_null_create();
          xpc_release(v21);
          xpc_release(v22);
          v23 = xpc_int64_create(*((unsigned int *)i + 6));
          if (!v23)
            v23 = xpc_null_create();
          xpc_dictionary_set_value(v20, "kWCMCellular_DesenseNetworkConfiguration_Bandwidth", v23);
          v24 = xpc_null_create();
          xpc_release(v23);
          xpc_release(v24);
          xpc_array_append_value(v17, v20);
          xpc_release(v20);
        }
        if (MEMORY[0x1C3B8A86C](v17) == MEMORY[0x1E0C812C8] && xpc_array_get_count(v17))
        {
          object = v17;
          v17 = xpc_null_create();
        }
        else
        {
          object = xpc_null_create();
        }
        xpc_release(v17);
        if (v168)
        {
          v26 = v166;
          v25 = v167;
          v27 = *v167;
          *(_QWORD *)(v27 + 8) = *((_QWORD *)v166 + 1);
          **((_QWORD **)v26 + 1) = v27;
          v168 = 0;
          if (v25 != &v166)
          {
            do
            {
              v28 = (_QWORD *)v25[1];
              operator delete(v25);
              v25 = v28;
            }
            while (v28 != &v166);
          }
        }
        v29 = (const char *)v11[4];
        v30 = strlen(v29);
        if (v30 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v31 = v30;
        if (v30 >= 0x17)
          break;
        HIBYTE(v172) = v30;
        v32 = buf;
        if (v30)
          goto LABEL_50;
LABEL_51:
        v32[v31] = 0;
        v35 = strlen(__s);
        if (v35 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v36 = v35;
        if (v35 >= 0x17)
        {
          v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v35 | 7) != 0x17)
            v38 = v35 | 7;
          v39 = v38 + 1;
          p_dst = (__int128 *)operator new(v38 + 1);
          *((_QWORD *)&__dst + 1) = v36;
          v179 = v39 | 0x8000000000000000;
          *(_QWORD *)&__dst = p_dst;
LABEL_58:
          memmove(p_dst, __s, v36);
          goto LABEL_59;
        }
        HIBYTE(v179) = v35;
        p_dst = &__dst;
        if (v35)
          goto LABEL_58;
LABEL_59:
        *((_BYTE *)p_dst + v36) = 0;
        v40 = SHIBYTE(v172);
        v41 = *(uint8_t **)buf;
        if (v172 >= 0)
          v42 = buf;
        else
          v42 = *(uint8_t **)buf;
        v43 = SHIBYTE(v179);
        v44 = (void *)__dst;
        if (v179 >= 0)
          v45 = (const char *)&__dst;
        else
          v45 = (const char *)__dst;
        v46 = strcasecmp((const char *)v42, v45);
        if (v43 < 0)
        {
          operator delete(v44);
          if ((v40 & 0x80000000) == 0)
          {
LABEL_67:
            if (!v46)
              goto LABEL_74;
            goto LABEL_68;
          }
        }
        else if ((v40 & 0x80000000) == 0)
        {
          goto LABEL_67;
        }
        operator delete(v41);
        if (!v46)
        {
LABEL_74:
          v51 = object;
          if (object)
          {
            xpc_retain(object);
            v52 = object;
          }
          else
          {
            v52 = xpc_null_create();
          }
          xpc_dictionary_set_value(xdict, "kWCMCellular_DesenseFreqReport_UplinkFrequency", v52);
          v91 = xpc_null_create();
          xpc_release(v52);
          xpc_release(v91);
          goto LABEL_230;
        }
LABEL_68:
        v47 = (const char *)v11[4];
        v48 = strlen(v47);
        if (v48 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v49 = v48;
        if (v48 >= 0x17)
        {
          v53 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v48 | 7) != 0x17)
            v53 = v48 | 7;
          v54 = v53 + 1;
          v50 = operator new(v53 + 1);
          v171 = v49;
          v172 = v54 | 0x8000000000000000;
          *(_QWORD *)buf = v50;
LABEL_79:
          memmove(v50, v47, v49);
          goto LABEL_80;
        }
        HIBYTE(v172) = v48;
        v50 = buf;
        if (v48)
          goto LABEL_79;
LABEL_80:
        *((_BYTE *)v50 + v49) = 0;
        v55 = strlen(v163);
        if (v55 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v56 = v55;
        if (v55 >= 0x17)
        {
          v58 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v55 | 7) != 0x17)
            v58 = v55 | 7;
          v59 = v58 + 1;
          v57 = (__int128 *)operator new(v58 + 1);
          *((_QWORD *)&__dst + 1) = v56;
          v179 = v59 | 0x8000000000000000;
          *(_QWORD *)&__dst = v57;
LABEL_87:
          memmove(v57, v163, v56);
          goto LABEL_88;
        }
        HIBYTE(v179) = v55;
        v57 = &__dst;
        if (v55)
          goto LABEL_87;
LABEL_88:
        *((_BYTE *)v57 + v56) = 0;
        v60 = SHIBYTE(v172);
        v61 = *(uint8_t **)buf;
        if (v172 >= 0)
          v62 = buf;
        else
          v62 = *(uint8_t **)buf;
        v63 = SHIBYTE(v179);
        v64 = (void *)__dst;
        if (v179 >= 0)
          v65 = (const char *)&__dst;
        else
          v65 = (const char *)__dst;
        v66 = strcasecmp((const char *)v62, v65);
        if (v63 < 0)
        {
          operator delete(v64);
          if ((v60 & 0x80000000) == 0)
          {
LABEL_96:
            if (!v66)
              goto LABEL_103;
            goto LABEL_97;
          }
        }
        else if ((v60 & 0x80000000) == 0)
        {
          goto LABEL_96;
        }
        operator delete(v61);
        if (!v66)
        {
LABEL_103:
          v51 = object;
          if (object)
          {
            xpc_retain(object);
            v71 = object;
          }
          else
          {
            v71 = xpc_null_create();
          }
          xpc_dictionary_set_value(xdict, "kWCMCellular_DesenseFreqReport_SearchFrequency", v71);
          v111 = xpc_null_create();
          xpc_release(v71);
          xpc_release(v111);
          goto LABEL_230;
        }
LABEL_97:
        v67 = (const char *)v11[4];
        v68 = strlen(v67);
        if (v68 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v69 = v68;
        if (v68 >= 0x17)
        {
          v72 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v68 | 7) != 0x17)
            v72 = v68 | 7;
          v73 = v72 + 1;
          v70 = operator new(v72 + 1);
          v171 = v69;
          v172 = v73 | 0x8000000000000000;
          *(_QWORD *)buf = v70;
LABEL_108:
          memmove(v70, v67, v69);
          goto LABEL_109;
        }
        HIBYTE(v172) = v68;
        v70 = buf;
        if (v68)
          goto LABEL_108;
LABEL_109:
        *((_BYTE *)v70 + v69) = 0;
        v74 = strlen(v162);
        if (v74 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v75 = v74;
        if (v74 >= 0x17)
        {
          v77 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v74 | 7) != 0x17)
            v77 = v74 | 7;
          v78 = v77 + 1;
          v76 = (__int128 *)operator new(v77 + 1);
          *((_QWORD *)&__dst + 1) = v75;
          v179 = v78 | 0x8000000000000000;
          *(_QWORD *)&__dst = v76;
LABEL_116:
          memmove(v76, v162, v75);
          goto LABEL_117;
        }
        HIBYTE(v179) = v74;
        v76 = &__dst;
        if (v74)
          goto LABEL_116;
LABEL_117:
        *((_BYTE *)v76 + v75) = 0;
        v79 = SHIBYTE(v172);
        v80 = *(uint8_t **)buf;
        if (v172 >= 0)
          v81 = buf;
        else
          v81 = *(uint8_t **)buf;
        v82 = SHIBYTE(v179);
        v83 = (void *)__dst;
        if (v179 >= 0)
          v84 = (const char *)&__dst;
        else
          v84 = (const char *)__dst;
        v85 = strcasecmp((const char *)v81, v84);
        if (v82 < 0)
        {
          operator delete(v83);
          if ((v79 & 0x80000000) == 0)
          {
LABEL_125:
            if (!v85)
              goto LABEL_132;
            goto LABEL_126;
          }
        }
        else if ((v79 & 0x80000000) == 0)
        {
          goto LABEL_125;
        }
        operator delete(v80);
        if (!v85)
        {
LABEL_132:
          v51 = object;
          if (object)
          {
            xpc_retain(object);
            v90 = object;
          }
          else
          {
            v90 = xpc_null_create();
          }
          xpc_dictionary_set_value(xdict, "kWCMCellular_DesenseFreqReport_HoppingFrequency", v90);
          v131 = xpc_null_create();
          xpc_release(v90);
          xpc_release(v131);
          goto LABEL_230;
        }
LABEL_126:
        v86 = (const char *)v11[4];
        v87 = strlen(v86);
        if (v87 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v88 = v87;
        if (v87 >= 0x17)
        {
          v92 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v87 | 7) != 0x17)
            v92 = v87 | 7;
          v93 = v92 + 1;
          v89 = operator new(v92 + 1);
          v171 = v88;
          v172 = v93 | 0x8000000000000000;
          *(_QWORD *)buf = v89;
LABEL_139:
          memmove(v89, v86, v88);
          goto LABEL_140;
        }
        HIBYTE(v172) = v87;
        v89 = buf;
        if (v87)
          goto LABEL_139;
LABEL_140:
        *((_BYTE *)v89 + v88) = 0;
        v94 = strlen(v161);
        if (v94 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v95 = v94;
        if (v94 >= 0x17)
        {
          v97 = (v94 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v94 | 7) != 0x17)
            v97 = v94 | 7;
          v98 = v97 + 1;
          v96 = (__int128 *)operator new(v97 + 1);
          *((_QWORD *)&__dst + 1) = v95;
          v179 = v98 | 0x8000000000000000;
          *(_QWORD *)&__dst = v96;
LABEL_147:
          memmove(v96, v161, v95);
          goto LABEL_148;
        }
        HIBYTE(v179) = v94;
        v96 = &__dst;
        if (v94)
          goto LABEL_147;
LABEL_148:
        *((_BYTE *)v96 + v95) = 0;
        v99 = SHIBYTE(v172);
        v100 = *(uint8_t **)buf;
        if (v172 >= 0)
          v101 = buf;
        else
          v101 = *(uint8_t **)buf;
        v102 = SHIBYTE(v179);
        v103 = (void *)__dst;
        if (v179 >= 0)
          v104 = (const char *)&__dst;
        else
          v104 = (const char *)__dst;
        v105 = strcasecmp((const char *)v101, v104);
        if (v102 < 0)
        {
          operator delete(v103);
          if ((v99 & 0x80000000) == 0)
          {
LABEL_156:
            if (!v105)
              goto LABEL_163;
            goto LABEL_157;
          }
        }
        else if ((v99 & 0x80000000) == 0)
        {
          goto LABEL_156;
        }
        operator delete(v100);
        if (!v105)
        {
LABEL_163:
          v51 = object;
          if (object)
          {
            xpc_retain(object);
            v110 = object;
          }
          else
          {
            v110 = xpc_null_create();
          }
          xpc_dictionary_set_value(xdict, "kWCMCellular_DesenseFreqReport_NeighborFrequency", v110);
          v147 = xpc_null_create();
          xpc_release(v110);
          xpc_release(v147);
          goto LABEL_230;
        }
LABEL_157:
        v106 = (const char *)v11[4];
        v107 = strlen(v106);
        if (v107 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v108 = v107;
        if (v107 >= 0x17)
        {
          v112 = (v107 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v107 | 7) != 0x17)
            v112 = v107 | 7;
          v113 = v112 + 1;
          v109 = operator new(v112 + 1);
          v171 = v108;
          v172 = v113 | 0x8000000000000000;
          *(_QWORD *)buf = v109;
LABEL_170:
          memmove(v109, v106, v108);
          goto LABEL_171;
        }
        HIBYTE(v172) = v107;
        v109 = buf;
        if (v107)
          goto LABEL_170;
LABEL_171:
        *((_BYTE *)v109 + v108) = 0;
        v114 = strlen(v160);
        if (v114 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v115 = v114;
        if (v114 >= 0x17)
        {
          v117 = (v114 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v114 | 7) != 0x17)
            v117 = v114 | 7;
          v118 = v117 + 1;
          v116 = (__int128 *)operator new(v117 + 1);
          *((_QWORD *)&__dst + 1) = v115;
          v179 = v118 | 0x8000000000000000;
          *(_QWORD *)&__dst = v116;
LABEL_178:
          memmove(v116, v160, v115);
          goto LABEL_179;
        }
        HIBYTE(v179) = v114;
        v116 = &__dst;
        if (v114)
          goto LABEL_178;
LABEL_179:
        *((_BYTE *)v116 + v115) = 0;
        v119 = SHIBYTE(v172);
        v120 = *(uint8_t **)buf;
        if (v172 >= 0)
          v121 = buf;
        else
          v121 = *(uint8_t **)buf;
        v122 = SHIBYTE(v179);
        v123 = (void *)__dst;
        if (v179 >= 0)
          v124 = (const char *)&__dst;
        else
          v124 = (const char *)__dst;
        v125 = strcasecmp((const char *)v121, v124);
        if (v122 < 0)
        {
          operator delete(v123);
          if ((v119 & 0x80000000) == 0)
          {
LABEL_187:
            if (!v125)
              goto LABEL_194;
            goto LABEL_188;
          }
        }
        else if ((v119 & 0x80000000) == 0)
        {
          goto LABEL_187;
        }
        operator delete(v120);
        if (!v125)
        {
LABEL_194:
          v51 = object;
          if (object)
          {
            xpc_retain(object);
            v130 = object;
          }
          else
          {
            v130 = xpc_null_create();
          }
          xpc_dictionary_set_value(xdict, "kWCMCellular_DesenseFreqReport_RplmnFrequency", v130);
          v148 = xpc_null_create();
          xpc_release(v130);
          xpc_release(v148);
          goto LABEL_230;
        }
LABEL_188:
        v126 = (const char *)v11[4];
        v127 = strlen(v126);
        if (v127 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v128 = v127;
        if (v127 >= 0x17)
        {
          v132 = (v127 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v127 | 7) != 0x17)
            v132 = v127 | 7;
          v133 = v132 + 1;
          v129 = operator new(v132 + 1);
          v171 = v128;
          v172 = v133 | 0x8000000000000000;
          *(_QWORD *)buf = v129;
LABEL_201:
          memmove(v129, v126, v128);
          goto LABEL_202;
        }
        HIBYTE(v172) = v127;
        v129 = buf;
        if (v127)
          goto LABEL_201;
LABEL_202:
        *((_BYTE *)v129 + v128) = 0;
        v134 = strlen(v159);
        if (v134 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v135 = v134;
        if (v134 >= 0x17)
        {
          v137 = (v134 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v134 | 7) != 0x17)
            v137 = v134 | 7;
          v138 = v137 + 1;
          v136 = (__int128 *)operator new(v137 + 1);
          *((_QWORD *)&__dst + 1) = v135;
          v179 = v138 | 0x8000000000000000;
          *(_QWORD *)&__dst = v136;
LABEL_209:
          memmove(v136, v159, v135);
          goto LABEL_210;
        }
        HIBYTE(v179) = v134;
        v136 = &__dst;
        if (v134)
          goto LABEL_209;
LABEL_210:
        *((_BYTE *)v136 + v135) = 0;
        v139 = SHIBYTE(v172);
        v140 = *(uint8_t **)buf;
        if (v172 >= 0)
          v141 = buf;
        else
          v141 = *(uint8_t **)buf;
        v142 = SHIBYTE(v179);
        v143 = (void *)__dst;
        if (v179 >= 0)
          v144 = (const char *)&__dst;
        else
          v144 = (const char *)__dst;
        v145 = strcasecmp((const char *)v141, v144);
        if (v142 < 0)
        {
          operator delete(v143);
          if ((v139 & 0x80000000) == 0)
          {
LABEL_218:
            v51 = object;
            if (!v145)
              goto LABEL_222;
            goto LABEL_230;
          }
        }
        else if ((v139 & 0x80000000) == 0)
        {
          goto LABEL_218;
        }
        operator delete(v140);
        v51 = object;
        if (!v145)
        {
LABEL_222:
          if (v51)
          {
            xpc_retain(v51);
            v146 = v51;
          }
          else
          {
            v146 = xpc_null_create();
          }
          xpc_dictionary_set_value(xdict, "kWCMCellular_DesenseFreqReport_DownlinkFrequency", v146);
          v149 = xpc_null_create();
          xpc_release(v146);
          xpc_release(v149);
        }
LABEL_230:
        xpc_release(v51);
        v150 = (_QWORD *)v11[1];
        if (v150)
        {
          do
          {
            v151 = v150;
            v150 = (_QWORD *)*v150;
          }
          while (v150);
        }
        else
        {
          do
          {
            v151 = (_QWORD *)v11[2];
            v152 = *v151 == (_QWORD)v11;
            v11 = v151;
          }
          while (!v152);
        }
        v11 = v151;
        if (v151 == a2 + 1)
          goto LABEL_236;
      }
      v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17)
        v33 = v30 | 7;
      v34 = v33 + 1;
      v32 = operator new(v33 + 1);
      v171 = v31;
      v172 = v34 | 0x8000000000000000;
      *(_QWORD *)buf = v32;
LABEL_50:
      memmove(v32, v29, v31);
      goto LABEL_51;
    }
LABEL_236:
    v153 = *(NSObject **)(v158 + 40);
    if (os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT)
      && ((xpc::object::to_string((xpc::object *)&xdict), v172 >= 0) ? (v154 = buf) : (v154 = *(uint8_t **)buf),
          LODWORD(__dst) = 136315138,
          *(_QWORD *)((char *)&__dst + 4) = v154,
          _os_log_impl(&dword_1BF335000, v153, OS_LOG_TYPE_DEFAULT, "#I Desense frequency report -> %s", (uint8_t *)&__dst, 0xCu), SHIBYTE(v172) < 0))
    {
      operator delete(*(void **)buf);
      v155 = *(_QWORD *)(v158 + 120);
      if (v155)
        goto LABEL_242;
    }
    else
    {
      v155 = *(_QWORD *)(v158 + 120);
      if (v155)
      {
LABEL_242:
        v156 = xdict;
        if (xdict)
          xpc_retain(xdict);
        else
          v156 = xpc_null_create();
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        v171 = 1174405120;
        v172 = (int64_t)___ZN4coex9XpcClient11sendMessageE19WCMReceiveMessageIdN3xpc6objectENS_5SubIdE_block_invoke;
        v173 = &__block_descriptor_tmp_7_3;
        v176 = 399;
        v174 = v155;
        v175 = v156;
        if (v156)
          xpc_retain(v156);
        else
          v175 = xpc_null_create();
        v177 = v157;
        ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped((uint64_t *)(v155 + 8), (uint64_t)buf);
        xpc_release(v175);
        xpc_release(v156);
      }
    }
    xpc_release(xdict);
    return;
  }
  v9 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEBUG, "#D Empty report passed; ignoring it", buf, 2u);
  }
}

void sub_1BF339F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, xpc_object_t a18, char a19, void *a20,uint64_t a21,xpc_object_t object,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void __destroy_helper_block_e8_40c17_ZTSN3xpc6objectE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
}

BOOL boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<coex::Module::State>>::expired(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  return !v1 || *(_QWORD *)(v1 + 8) == -1;
}

void __destroy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvN23CMHandDetectionDelegate21CMHandDetectionResultEEEclIJS2_EEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void __destroy_helper_block_e8_32c92_ZTSN8dispatch5blockIU13block_pointerFvN23CMHandDetectionDelegate21CMHandDetectionResultEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvN12AudioManager16AudioOutputStateEEEclIJS2_EEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void *__copy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

__n128 __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

__n128 __Block_byref_object_copy__1(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

__n128 __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

xpc_object_t __Block_byref_object_copy__5(uint64_t a1, uint64_t a2)
{
  xpc_object_t result;

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  result = xpc_null_create();
  *(_QWORD *)(a2 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIKN3ctu9XpcClientEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    CFRelease(v1);
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    _Block_release(v1);
}

{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
}

void __destroy_helper_block_e8_32c76_ZTSN8dispatch5blockIU13block_pointerFvN12AudioManager16AudioOutputStateEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

uint64_t ___ZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c46_ZTSNSt3__110shared_ptrIN4coex6Module5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __copy_helper_block_e8_40c46_ZTSNSt3__110shared_ptrIN4coex6Module5StateEEE56c27_ZTSN3ctu2cf12dict_adapterE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[6];
  a1[5] = a2[5];
  a1[6] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)(a1 + 7), (const ctu::cf::dict_adapter *)(a2 + 7));
}

void sub_1BF33A540(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c92_ZTSN8dispatch5blockIU13block_pointerFvN23CMHandDetectionDelegate21CMHandDetectionResultEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void *__copy_helper_block_e8_32c76_ZTSN8dispatch5blockIU13block_pointerFvN12AudioManager16AudioOutputStateEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<coex::Module::State>>::~foreign_shared_ptr_impl(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_1E78FE0C8;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrIK11RadioModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb5_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  _QWORD *v2;
  xpc_object_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t v8;

  v2 = (_QWORD *)*a1;
  v4 = *(_QWORD **)*a1;
  v3 = *(xpc_object_t *)(*a1 + 8);
  v8 = v3;
  if (v3 && MEMORY[0x1C3B8A86C](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
  }
  else
  {
    v3 = xpc_null_create();
    v8 = v3;
  }
  coex::Module::State::handleSetWCI2Mode_sync(v4, &v8, *((_DWORD *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(a1);
  }
  else
  {
LABEL_9:
    operator delete(a1);
  }
}

void sub_1BF33A744(_Unwind_Exception *a1)
{
  _QWORD *v1;
  xpc_object_t *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void coex::Module::State::setPolicy_sync(_QWORD *a1, uint64_t a2)
{
  const __CFAllocator *v4;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  uint64_t v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  NSObject *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  const void *v37;
  const void *v38;
  const void *v39;
  const void *v40;
  const void *v41;
  const void *v42;
  const void *v43;
  const void *v44;
  const void *v45;
  const void *v46;
  const void *v47;
  const void *v48;
  const void *v49;
  const void *v50;
  const void *v51;
  const void *v52;
  const void *v53;
  const void *v54;
  const void *v55;
  const void *v56;
  const void *v57;
  const void *v58;
  const void *v59;
  const void *v60;
  const void *v61;
  const void *v62;
  const void *v63;
  const void *v64;
  const void *v65;
  const void *v66;
  const void *v67;
  const void *v68;
  const void *v69;
  const void *v70;
  const void *v71;
  const void *v72;
  const void *v73;
  const void *v74;
  const void *v75;
  const void *v76;
  const void *v77;
  const void *v78;
  const void *v79;
  const void *v80;
  const void *v81;
  const void *v82;
  const void *v83;
  const void *v84;
  const void *v85;
  const void *v86;
  const void *v87;
  const void *v88;
  const void *v89;
  const void *v90;
  const void *v91;
  const void *v92;
  const void *v93;
  const void *v94;
  const void *v95;
  const void *v96;
  const void *v97;
  const void *v98;
  const void *v99;
  const void *v100;
  const void *v101;
  const void *v102;
  const void *v103;
  const void *v104;
  const void *v105;
  const void *v106;
  void *v107;
  const void *v108;
  int v109;
  CFMutableDictionaryRef v110;
  CFMutableDictionaryRef v111;
  uint64_t (*v112)(uint64_t);
  NSObject *v113;
  std::__shared_weak_count *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count *v117;
  uint64_t v118;
  CFTypeID v119;
  unint64_t *p_shared_owners;
  unint64_t v121;
  void *v122;
  NSObject *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  CFMutableDictionaryRef v130;
  NSObject *v131;
  _QWORD aBlock[6];
  std::__shared_weak_count *v133;
  _BYTE v134[16];
  void *v135;
  dispatch_object_t object;
  CFTypeRef cf;
  CFMutableDictionaryRef theDict;
  CFTypeRef v139;
  CFMutableDictionaryRef v140;
  CFMutableDictionaryRef v141;
  CFMutableDictionaryRef v142;
  CFMutableDictionaryRef v143;
  CFMutableDictionaryRef v144;
  CFMutableDictionaryRef v145;
  CFMutableDictionaryRef v146;
  CFMutableDictionaryRef v147;
  CFMutableDictionaryRef v148;
  CFMutableDictionaryRef v149;
  CFMutableDictionaryRef v150;
  CFMutableDictionaryRef v151;
  CFMutableDictionaryRef v152;
  CFMutableDictionaryRef v153;
  CFMutableDictionaryRef v154;
  CFMutableDictionaryRef v155;
  CFMutableDictionaryRef v156;
  CFMutableDictionaryRef v157;
  CFMutableDictionaryRef v158;
  CFMutableDictionaryRef v159;
  CFMutableDictionaryRef v160;
  CFMutableDictionaryRef v161;
  CFMutableDictionaryRef v162;
  CFMutableDictionaryRef v163;
  CFMutableDictionaryRef v164;
  CFMutableDictionaryRef v165;
  CFMutableDictionaryRef v166;
  CFMutableDictionaryRef v167;
  CFMutableDictionaryRef v168;
  CFMutableDictionaryRef v169;
  CFMutableDictionaryRef v170;
  CFMutableDictionaryRef v171;
  CFMutableDictionaryRef v172;
  uint8_t buf[24];
  CFMutableDictionaryRef v174;
  __int128 v175;
  uint64_t v176;

  v176 = *MEMORY[0x1E0C80C00];
  if (a1[13])
  {
    v174 = 0;
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v6 = Mutable;
    if (Mutable)
      v174 = Mutable;
    memset(buf, 170, 16);
    v7 = 20;
    if (!(_DWORD)a2)
      v7 = 18;
    v8 = (const void *)a1[v7];
    *(_QWORD *)&v175 = v8;
    if (v8)
      CFRetain(v8);
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, (const __CFDictionary *)v8);
    if (v8)
      CFRelease(v8);
    v172 = v6;
    if (v6)
      CFRetain(v6);
    v9 = (const void *)*MEMORY[0x1E0DDF360];
    v10 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF360]);
    v11 = v10;
    if (v10)
    {
      CFRelease(v10);
      ctu::cf::update<__CFString const*,void const*>(v6, v9, v11);
    }
    if (v6)
    {
      CFRelease(v6);
      v171 = v6;
      CFRetain(v6);
    }
    else
    {
      v171 = 0;
    }
    v13 = (const void *)*MEMORY[0x1E0DDF3C8];
    v14 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF3C8]);
    v15 = v14;
    if (v14)
    {
      CFRelease(v14);
      ctu::cf::update<__CFString const*,void const*>(v6, v13, v15);
    }
    if (v6)
    {
      CFRelease(v6);
      v170 = v6;
      CFRetain(v6);
    }
    else
    {
      v170 = 0;
    }
    v16 = (const void *)*MEMORY[0x1E0DDF508];
    v17 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF508]);
    v18 = v17;
    if (v17)
    {
      CFRelease(v17);
      ctu::cf::update<__CFString const*,void const*>(v6, v16, v18);
    }
    if (v6)
    {
      CFRelease(v6);
      v169 = v6;
      CFRetain(v6);
    }
    else
    {
      v169 = 0;
    }
    v19 = (const void *)*MEMORY[0x1E0DDF210];
    v20 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF210]);
    v21 = v20;
    if (v20)
    {
      CFRelease(v20);
      ctu::cf::update<__CFString const*,void const*>(v6, v19, v21);
    }
    if (v6)
    {
      CFRelease(v6);
      v168 = v6;
      CFRetain(v6);
    }
    else
    {
      v168 = 0;
    }
    v22 = (const void *)*MEMORY[0x1E0DDF2F0];
    v23 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF2F0]);
    v24 = v23;
    if (v23)
    {
      CFRelease(v23);
      ctu::cf::update<__CFString const*,void const*>(v6, v22, v24);
    }
    if (v6)
    {
      CFRelease(v6);
      v167 = v6;
      CFRetain(v6);
    }
    else
    {
      v167 = 0;
    }
    v25 = (const void *)*MEMORY[0x1E0DDF6E0];
    v26 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF6E0]);
    v27 = v26;
    if (v26)
    {
      CFRelease(v26);
      ctu::cf::update<__CFString const*,void const*>(v6, v25, v27);
    }
    if (v6)
    {
      CFRelease(v6);
      v166 = v6;
      CFRetain(v6);
    }
    else
    {
      v166 = 0;
    }
    v28 = (const void *)*MEMORY[0x1E0DDF238];
    v29 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF238]);
    v30 = v29;
    if (v29)
    {
      CFRelease(v29);
      ctu::cf::update<__CFString const*,void const*>(v6, v28, v30);
    }
    if (v6)
    {
      CFRelease(v6);
      v165 = v6;
      CFRetain(v6);
    }
    else
    {
      v165 = 0;
    }
    v31 = (const void *)*MEMORY[0x1E0DDF4E8];
    v32 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF4E8]);
    v33 = v32;
    if (v32)
    {
      CFRelease(v32);
      ctu::cf::update<__CFString const*,void const*>(v6, v31, v33);
    }
    if (v6)
    {
      CFRelease(v6);
      v164 = v6;
      CFRetain(v6);
    }
    else
    {
      v164 = 0;
    }
    v34 = (const void *)*MEMORY[0x1E0DDF340];
    v35 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF340]);
    v36 = v35;
    if (v35)
    {
      CFRelease(v35);
      ctu::cf::update<__CFString const*,void const*>(v6, v34, v36);
    }
    if (v6)
    {
      CFRelease(v6);
      v163 = v6;
      CFRetain(v6);
    }
    else
    {
      v163 = 0;
    }
    v37 = (const void *)*MEMORY[0x1E0DDF440];
    v38 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF440]);
    v39 = v38;
    if (v38)
    {
      CFRelease(v38);
      ctu::cf::update<__CFString const*,void const*>(v6, v37, v39);
    }
    if (v6)
    {
      CFRelease(v6);
      v162 = v6;
      CFRetain(v6);
    }
    else
    {
      v162 = 0;
    }
    v40 = (const void *)*MEMORY[0x1E0DDF680];
    v41 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF680]);
    v42 = v41;
    if (v41)
    {
      CFRelease(v41);
      ctu::cf::update<__CFString const*,void const*>(v6, v40, v42);
    }
    if (v6)
    {
      CFRelease(v6);
      v161 = v6;
      CFRetain(v6);
    }
    else
    {
      v161 = 0;
    }
    v43 = (const void *)*MEMORY[0x1E0DDF588];
    v44 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF588]);
    v45 = v44;
    if (v44)
    {
      CFRelease(v44);
      ctu::cf::update<__CFString const*,void const*>(v6, v43, v45);
    }
    if (v6)
    {
      CFRelease(v6);
      v160 = v6;
      CFRetain(v6);
    }
    else
    {
      v160 = 0;
    }
    v46 = (const void *)*MEMORY[0x1E0DDF5B0];
    v47 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF5B0]);
    v48 = v47;
    if (v47)
    {
      CFRelease(v47);
      ctu::cf::update<__CFString const*,void const*>(v6, v46, v48);
    }
    if (v6)
    {
      CFRelease(v6);
      v159 = v6;
      CFRetain(v6);
    }
    else
    {
      v159 = 0;
    }
    v49 = (const void *)*MEMORY[0x1E0DDF6A8];
    v50 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF6A8]);
    v51 = v50;
    if (v50)
    {
      CFRelease(v50);
      ctu::cf::update<__CFString const*,void const*>(v6, v49, v51);
    }
    if (v6)
    {
      CFRelease(v6);
      v158 = v6;
      CFRetain(v6);
    }
    else
    {
      v158 = 0;
    }
    v52 = (const void *)*MEMORY[0x1E0DDF5D8];
    v53 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF5D8]);
    v54 = v53;
    if (v53)
    {
      CFRelease(v53);
      ctu::cf::update<__CFString const*,void const*>(v6, v52, v54);
    }
    if (v6)
    {
      CFRelease(v6);
      v157 = v6;
      CFRetain(v6);
    }
    else
    {
      v157 = 0;
    }
    v55 = (const void *)*MEMORY[0x1E0DDF4B0];
    v56 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF4B0]);
    v57 = v56;
    if (v56)
    {
      CFRelease(v56);
      ctu::cf::update<__CFString const*,void const*>(v6, v55, v57);
    }
    if (v6)
    {
      CFRelease(v6);
      v156 = v6;
      CFRetain(v6);
    }
    else
    {
      v156 = 0;
    }
    v58 = (const void *)*MEMORY[0x1E0DDF510];
    v59 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF510]);
    v60 = v59;
    if (v59)
    {
      CFRelease(v59);
      ctu::cf::update<__CFString const*,void const*>(v6, v58, v60);
    }
    if (v6)
    {
      CFRelease(v6);
      v155 = v6;
      CFRetain(v6);
    }
    else
    {
      v155 = 0;
    }
    v61 = (const void *)*MEMORY[0x1E0DDF678];
    v62 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF678]);
    v63 = v62;
    if (v62)
    {
      CFRelease(v62);
      ctu::cf::update<__CFString const*,void const*>(v6, v61, v63);
    }
    if (v6)
    {
      CFRelease(v6);
      v154 = v6;
      CFRetain(v6);
    }
    else
    {
      v154 = 0;
    }
    v64 = (const void *)*MEMORY[0x1E0DDF550];
    v65 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF550]);
    v66 = v65;
    if (v65)
    {
      CFRelease(v65);
      ctu::cf::update<__CFString const*,void const*>(v6, v64, v66);
    }
    if (v6)
    {
      CFRelease(v6);
      v153 = v6;
      CFRetain(v6);
    }
    else
    {
      v153 = 0;
    }
    v67 = (const void *)*MEMORY[0x1E0DDF4B8];
    v68 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF4B8]);
    v69 = v68;
    if (v68)
    {
      CFRelease(v68);
      ctu::cf::update<__CFString const*,void const*>(v6, v67, v69);
    }
    if (v6)
    {
      CFRelease(v6);
      v152 = v6;
      CFRetain(v6);
    }
    else
    {
      v152 = 0;
    }
    v70 = (const void *)*MEMORY[0x1E0DDF438];
    v71 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF438]);
    v72 = v71;
    if (v71)
    {
      CFRelease(v71);
      ctu::cf::update<__CFString const*,void const*>(v6, v70, v72);
    }
    if (v6)
    {
      CFRelease(v6);
      v151 = v6;
      CFRetain(v6);
    }
    else
    {
      v151 = 0;
    }
    v73 = (const void *)*MEMORY[0x1E0DDF3B0];
    v74 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF3B0]);
    v75 = v74;
    if (v74)
    {
      CFRelease(v74);
      ctu::cf::update<__CFString const*,void const*>(v6, v73, v75);
    }
    if (v6)
    {
      CFRelease(v6);
      v150 = v6;
      CFRetain(v6);
    }
    else
    {
      v150 = 0;
    }
    v76 = (const void *)*MEMORY[0x1E0DDF688];
    v77 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF688]);
    v78 = v77;
    if (v77)
    {
      CFRelease(v77);
      ctu::cf::update<__CFString const*,void const*>(v6, v76, v78);
    }
    if (v6)
    {
      CFRelease(v6);
      v149 = v6;
      CFRetain(v6);
    }
    else
    {
      v149 = 0;
    }
    v79 = (const void *)*MEMORY[0x1E0DDF698];
    v80 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF698]);
    v81 = v80;
    if (v80)
    {
      CFRelease(v80);
      ctu::cf::update<__CFString const*,void const*>(v6, v79, v81);
    }
    if (v6)
    {
      CFRelease(v6);
      v148 = v6;
      CFRetain(v6);
    }
    else
    {
      v148 = 0;
    }
    v82 = (const void *)*MEMORY[0x1E0DDF6A0];
    v83 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF6A0]);
    v84 = v83;
    if (v83)
    {
      CFRelease(v83);
      ctu::cf::update<__CFString const*,void const*>(v6, v82, v84);
    }
    if (v6)
    {
      CFRelease(v6);
      v147 = v6;
      CFRetain(v6);
    }
    else
    {
      v147 = 0;
    }
    v85 = (const void *)*MEMORY[0x1E0DDF640];
    v86 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF640]);
    v87 = v86;
    if (v86)
    {
      CFRelease(v86);
      ctu::cf::update<__CFString const*,void const*>(v6, v85, v87);
    }
    if (v6)
    {
      CFRelease(v6);
      v146 = v6;
      CFRetain(v6);
    }
    else
    {
      v146 = 0;
    }
    v88 = (const void *)*MEMORY[0x1E0DDF690];
    v89 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF690]);
    v90 = v89;
    if (v89)
    {
      CFRelease(v89);
      ctu::cf::update<__CFString const*,void const*>(v6, v88, v90);
    }
    if (v6)
    {
      CFRelease(v6);
      v145 = v6;
      CFRetain(v6);
    }
    else
    {
      v145 = 0;
    }
    v91 = (const void *)*MEMORY[0x1E0DDF638];
    v92 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF638]);
    v93 = v92;
    if (v92)
    {
      CFRelease(v92);
      ctu::cf::update<__CFString const*,void const*>(v6, v91, v93);
    }
    if (v6)
    {
      CFRelease(v6);
      v144 = v6;
      CFRetain(v6);
    }
    else
    {
      v144 = 0;
    }
    v94 = (const void *)*MEMORY[0x1E0DDF2E8];
    v95 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF2E8]);
    v96 = v95;
    if (v95)
    {
      CFRelease(v95);
      ctu::cf::update<__CFString const*,void const*>(v6, v94, v96);
    }
    if (v6)
    {
      CFRelease(v6);
      v143 = v6;
      CFRetain(v6);
    }
    else
    {
      v143 = 0;
    }
    v97 = (const void *)*MEMORY[0x1E0DDF320];
    v98 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF320]);
    v99 = v98;
    if (v98)
    {
      CFRelease(v98);
      ctu::cf::update<__CFString const*,void const*>(v6, v97, v99);
    }
    if (v6)
    {
      CFRelease(v6);
      v142 = v6;
      CFRetain(v6);
    }
    else
    {
      v142 = 0;
    }
    v100 = (const void *)*MEMORY[0x1E0DDF248];
    v101 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF248]);
    v102 = v101;
    if (v101)
    {
      CFRelease(v101);
      ctu::cf::update<__CFString const*,void const*>(v6, v100, v102);
    }
    if (v6)
    {
      CFRelease(v6);
      v141 = v6;
      CFRetain(v6);
    }
    else
    {
      v141 = 0;
    }
    v103 = (const void *)*MEMORY[0x1E0DDF6E8];
    v104 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF6E8]);
    v105 = v104;
    if (v104)
    {
      CFRelease(v104);
      ctu::cf::update<__CFString const*,void const*>(v6, v103, v105);
    }
    if (v6)
    {
      CFRelease(v6);
      v140 = v6;
      CFRetain(v6);
    }
    else
    {
      v140 = 0;
    }
    v106 = (const void *)*MEMORY[0x1E0DDF648];
    v107 = (void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF648]);
    v108 = v107;
    if (v107)
    {
      CFRelease(v107);
      ctu::cf::update<__CFString const*,void const*>(v6, v106, v108);
    }
    if (v6)
      CFRelease(v6);
    v109 = capabilities::abs::supportsCoexGPSReporting((capabilities::abs *)v107);
    ctu::cf::update<__CFString const*,BOOL>(v6, (CFTypeRef)*MEMORY[0x1E0DDF608], v109);
    if (!CFDictionaryGetCount(v6))
    {
      v131 = a1[5];
      if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v175) = 0;
        _os_log_impl(&dword_1BF335000, v131, OS_LOG_TYPE_DEFAULT, "#I Nothing in policy yet, bail\n", (uint8_t *)&v175, 2u);
      }
      goto LABEL_225;
    }
    v139 = 0;
    v110 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v111 = v110;
    if (v110)
      v139 = v110;
    ctu::cf::insert<__CFString const*,__CFDictionary *>(v110, (CFTypeRef)*MEMORY[0x1E0DDF298], v6);
    theDict = (CFMutableDictionaryRef)0xAAAAAAAAAAAAAAAALL;
    coex::Module::State::getSubProperty((uint64_t)a1, coex::kKeyFailCondition, 0, 0, &theDict);
    v112 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
    if (!theDict)
      v112 = 0;
    if (v112)
      CFDictionaryRemoveValue(theDict, (const void *)*MEMORY[0x1E0DDF6B8]);
    v113 = a1[5];
    if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v175) = 138412290;
      *(_QWORD *)((char *)&v175 + 4) = v111;
      _os_log_impl(&dword_1BF335000, v113, OS_LOG_TYPE_DEFAULT, "#I Setting policy with: %@", (uint8_t *)&v175, 0xCu);
    }
    v115 = a1[9];
    v114 = (std::__shared_weak_count *)a1[10];
    *(_QWORD *)&v175 = v115;
    if (!v114 || (v116 = std::__shared_weak_count::lock(v114), (*((_QWORD *)&v175 + 1) = v116) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v117 = v116;
    v118 = a1[13];
    if (v111 && (v119 = CFGetTypeID(v111), v119 == CFDictionaryGetTypeID()))
    {
      cf = v111;
      CFRetain(v111);
    }
    else
    {
      cf = 0;
    }
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN4coex6Module5State14setPolicy_syncENS_5SubIdE_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_238;
    aBlock[4] = a1;
    aBlock[5] = v115;
    v133 = v117;
    p_shared_owners = (unint64_t *)&v117->__shared_owners_;
    do
      v121 = __ldxr(p_shared_owners);
    while (__stxr(v121 + 1, p_shared_owners));
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v134, (const ctu::cf::dict_adapter *)buf);
    v122 = _Block_copy(aBlock);
    v123 = a1[11];
    if (v123)
      dispatch_retain(v123);
    if (v122)
    {
      v135 = _Block_copy(v122);
      object = v123;
      if (!v123)
        goto LABEL_200;
    }
    else
    {
      v135 = 0;
      object = v123;
      if (!v123)
      {
LABEL_200:
        (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(_QWORD *)v118 + 48))(v118, &cf, a2, &v135);
        if (object)
          dispatch_release(object);
        if (v135)
          _Block_release(v135);
        if (v123)
          dispatch_release(v123);
        if (v122)
          _Block_release(v122);
        if (cf)
          CFRelease(cf);
        MEMORY[0x1C3B893A8](v134);
        v124 = v133;
        if (!v133)
          goto LABEL_214;
        v125 = (unint64_t *)&v133->__shared_owners_;
        do
          v126 = __ldaxr(v125);
        while (__stlxr(v126 - 1, v125));
        if (!v126)
        {
          ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
          std::__shared_weak_count::__release_weak(v124);
          v127 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
          if (!*((_QWORD *)&v175 + 1))
            goto LABEL_218;
        }
        else
        {
LABEL_214:
          v127 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
          if (!*((_QWORD *)&v175 + 1))
            goto LABEL_218;
        }
        v128 = (unint64_t *)&v127->__shared_owners_;
        do
          v129 = __ldaxr(v128);
        while (__stlxr(v129 - 1, v128));
        if (!v129)
        {
          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
          std::__shared_weak_count::__release_weak(v127);
          v130 = theDict;
          if (!theDict)
            goto LABEL_220;
          goto LABEL_219;
        }
LABEL_218:
        v130 = theDict;
        if (!theDict)
        {
LABEL_220:
          if (v139)
            CFRelease(v139);
          v6 = v174;
LABEL_225:
          MEMORY[0x1C3B893A8](buf);
          if (v6)
            CFRelease(v6);
          return;
        }
LABEL_219:
        CFRelease(v130);
        goto LABEL_220;
      }
    }
    dispatch_retain(v123);
    goto LABEL_200;
  }
  v12 = a1[5];
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v12, OS_LOG_TYPE_DEFAULT, "#I Invalid driver", buf, 2u);
  }
}

void sub_1BF33B8A4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void ctu::cf::update<__CFString const*,void const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf)
    CFRetain(cf);
  CFRetain(a3);
  if (cf)
    CFDictionarySetValue(a1, cf, a3);
  CFRelease(a3);
  if (cf)
    CFRelease(cf);
}

void sub_1BF33BCAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void sub_1BF33BCCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,__CFDictionary *>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf)
    CFRetain(cf);
  if (a3)
  {
    CFRetain(a3);
    if (cf)
      CFDictionaryAddValue(a1, cf, a3);
    CFRelease(a3);
  }
  if (cf)
    CFRelease(cf);
}

void sub_1BF33BD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void sub_1BF33BD80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void coex::Module::State::handleSetWCI2Mode_sync(_QWORD *a1, xpc_object_t *a2, unsigned int a3)
{
  __CFDictionary *value;
  uint64_t v7;
  __CFDictionary *v8;
  uint64_t v9;
  __CFDictionary *v10;
  unsigned int v11;
  __CFDictionary *v12;
  unsigned int v13;
  __CFDictionary *v14;
  unsigned int v15;
  __CFDictionary *v16;
  unsigned int v17;
  __CFDictionary *v18;
  unsigned int v19;
  __CFDictionary *v20;
  __CFDictionary *v21;
  const object *v22;
  double v23;
  double v24;
  __CFDictionary *v25;
  __CFDictionary *v26;
  __CFDictionary *v27;
  __CFDictionary *v28;
  __CFDictionary *v29;
  __CFDictionary *v30;
  __CFDictionary *v31;
  __CFDictionary *v32;
  __CFDictionary *v33;
  __CFDictionary *v34;
  __CFDictionary *v35;
  __CFDictionary *v36;
  __CFDictionary *v37;
  xpc_object_t v38;
  const object *v39;
  CFMutableDictionaryRef v40;
  CFTypeID v41;
  CFMutableDictionaryRef v42;
  xpc_object_t v43;
  const object *v44;
  CFTypeID v45;
  CFMutableDictionaryRef v46;
  xpc_object_t v47;
  const object *v48;
  CFTypeID v49;
  CFMutableDictionaryRef v50;
  xpc_object_t v51;
  const object *v52;
  CFTypeID v53;
  CFMutableDictionaryRef v54;
  xpc_object_t v55;
  const object *v56;
  CFTypeID v57;
  CFMutableDictionaryRef v58;
  xpc_object_t v59;
  const object *v60;
  CFTypeID v61;
  CFMutableDictionaryRef v62;
  xpc_object_t v63;
  const object *v64;
  CFTypeID v65;
  CFMutableDictionaryRef v66;
  unsigned int v67;
  const __CFAllocator *v68;
  __CFDictionary *Mutable;
  __CFDictionary *v70;
  uint64_t v71;
  CFDataRef v72;
  CFDataRef v73;
  uint64_t v74;
  void *v75;
  CFMutableDictionaryRef v76;
  __CFDictionary *v77;
  __CFDictionary *v78;
  __CFDictionary *v79;
  __CFDictionary *v80;
  __CFDictionary *v81;
  __CFDictionary *v82;
  __CFDictionary *v83;
  __CFDictionary *v84;
  __CFDictionary *v85;
  __CFDictionary *v86;
  __CFDictionary *v87;
  __CFDictionary *v88;
  __CFDictionary *v89;
  __CFDictionary *v90;
  __CFDictionary *v91;
  __CFDictionary *v92;
  __CFDictionary *v93;
  __CFDictionary *v94;
  __CFDictionary *v95;
  __CFDictionary *v96;
  __CFDictionary *v97;
  __CFDictionary *v98;
  __CFDictionary *v99;
  __CFDictionary *v100;
  __CFDictionary *v101;
  __CFDictionary *v102;
  __CFDictionary *v103;
  capabilities::abs *v104;
  __CFDictionary *v105;
  unsigned int v106;
  __CFDictionary *v107;
  __CFDictionary *v108;
  __CFDictionary *v109;
  __CFDictionary *v110;
  unsigned int v111;
  __CFDictionary *v112;
  uint64_t v113;
  __CFDictionary *v114;
  uint64_t v115;
  __CFDictionary *v116;
  __CFDictionary *v117;
  void *v118;
  void *v119;
  uint64_t (*v120)(uint64_t);
  CFTypeRef v121;
  CFTypeRef v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  uint64_t v139;
  CFMutableDictionaryRef v140;
  CFMutableDictionaryRef v141;
  CFMutableDictionaryRef v142;
  CFMutableDictionaryRef v143;
  CFMutableDictionaryRef v144;
  CFMutableDictionaryRef cf;
  uint64_t v146;
  unsigned int v147;
  CFDataRef v148;
  __CFDictionary *v149;
  CFMutableDictionaryRef v150;
  CFMutableDictionaryRef v151;
  CFMutableDictionaryRef v152;
  CFMutableDictionaryRef v153;
  CFMutableDictionaryRef v154;
  CFMutableDictionaryRef v155;
  CFMutableDictionaryRef v156;
  UInt8 bytes[8];
  xpc_object_t v158;
  CFMutableDictionaryRef v159[2];

  *(_QWORD *)bytes = 0xAAAAAAAAAAAAAAAALL;
  value = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Policy");
  v159[0] = value;
  if (value)
    xpc_retain(value);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v7 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  *(_QWORD *)bytes = v7;
  v8 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_PowerThreshold");
  v159[0] = v8;
  if (v8)
    xpc_retain(v8);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v9 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v10 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_RB_Threshold");
  v159[0] = v10;
  if (v10)
    xpc_retain(v10);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v11 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v12 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_LTE_TxDenialThreshold");
  v159[0] = v12;
  if (v12)
    xpc_retain(v12);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v13 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v14 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_APTTable");
  v159[0] = v14;
  if (v14)
    xpc_retain(v14);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v15 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v16 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_ControllerTxPowerLimit");
  v159[0] = v16;
  if (v16)
    xpc_retain(v16);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v17 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v18 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_WCI2PowerLimit");
  v159[0] = v18;
  if (v18)
    xpc_retain(v18);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v19 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v20 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_LinkPathLossThreshold");
  v159[0] = v20;
  if (v20)
    xpc_retain(v20);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v138 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v21 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_RBFilterAlpha");
  v159[0] = v21;
  if (v21)
    xpc_retain(v21);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)v159, v22, 0.0);
  v24 = v23;
  xpc_release(v159[0]);
  v25 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_FilterRBThreshold");
  v159[0] = v25;
  if (v25)
    xpc_retain(v25);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v137 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v26 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_ControllerTxPowerLimitTO");
  v159[0] = v26;
  if (v26)
    xpc_retain(v26);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v136 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v27 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_WCI2PowerLimitTO");
  v159[0] = v27;
  if (v27)
    xpc_retain(v27);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v135 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v28 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_MaxAllowedFrameDenials");
  v159[0] = v28;
  if (v28)
    xpc_retain(v28);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v146 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v29 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_FrameDenialWindow");
  v159[0] = v29;
  if (v29)
    xpc_retain(v29);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v139 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v30 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_TxPowerThresholdForAdvTxNotice");
  v159[0] = v30;
  if (v30)
    xpc_retain(v30);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v133 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v31 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_RbThresholdForAdvTxNotice");
  v159[0] = v31;
  if (v31)
    xpc_retain(v31);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v132 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v32 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Controller_RB_Threshold");
  v159[0] = v32;
  if (v32)
    xpc_retain(v32);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v131 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v33 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Harq_nack_ratio_Threshold");
  v159[0] = v33;
  if (v33)
    xpc_retain(v33);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v130 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v34 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Controller_PowerLimiting_Enable");
  v159[0] = v34;
  if (v34)
    xpc_retain(v34);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v129 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v35 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_enabled");
  v159[0] = v35;
  if (v35)
    xpc_retain(v35);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v128 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v36 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_critical_ul_ca_bitmap");
  v159[0] = v36;
  if (v36)
    xpc_retain(v36);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v127 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v37 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_tx_denial_ca_bitmap");
  v159[0] = v37;
  if (v37)
    xpc_retain(v37);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v126 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v38 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_ca_grp_bitmap");
  v158 = v38;
  if (v38)
    xpc_retain(v38);
  else
    v158 = xpc_null_create();
  v134 = v19;
  xpc::bridge((xpc *)&v158, v39);
  v40 = v159[0];
  if (!v159[0] || (v41 = CFGetTypeID(v159[0]), v41 != CFArrayGetTypeID()))
  {
    v156 = 0;
    v42 = v159[0];
    if (!v159[0])
      goto LABEL_76;
    goto LABEL_75;
  }
  v156 = v40;
  CFRetain(v40);
  v42 = v159[0];
  if (v159[0])
LABEL_75:
    CFRelease(v42);
LABEL_76:
  xpc_release(v158);
  v43 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_consecutive_denial_threshold");
  v158 = v43;
  if (v43)
    xpc_retain(v43);
  else
    v158 = xpc_null_create();
  xpc::bridge((xpc *)&v158, v44);
  if (!v159[0] || (cf = v159[0], v45 = CFGetTypeID(v159[0]), v45 != CFArrayGetTypeID()))
  {
    cf = 0;
    v155 = 0;
    v46 = v159[0];
    if (!v159[0])
      goto LABEL_85;
    goto LABEL_84;
  }
  v155 = cf;
  CFRetain(cf);
  v46 = v159[0];
  if (v159[0])
LABEL_84:
    CFRelease(v46);
LABEL_85:
  xpc_release(v158);
  v47 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_duty_cycle_numerator_rx_prio_req");
  v158 = v47;
  if (v47)
    xpc_retain(v47);
  else
    v158 = xpc_null_create();
  xpc::bridge((xpc *)&v158, v48);
  if (!v159[0] || (v144 = v159[0], v49 = CFGetTypeID(v159[0]), v49 != CFArrayGetTypeID()))
  {
    v144 = 0;
    v154 = 0;
    v50 = v159[0];
    if (!v159[0])
      goto LABEL_94;
    goto LABEL_93;
  }
  v154 = v144;
  CFRetain(v144);
  v50 = v159[0];
  if (v159[0])
LABEL_93:
    CFRelease(v50);
LABEL_94:
  xpc_release(v158);
  v51 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_power_limiting_power_threshold");
  v158 = v51;
  if (v51)
    xpc_retain(v51);
  else
    v158 = xpc_null_create();
  xpc::bridge((xpc *)&v158, v52);
  if (!v159[0] || (v143 = v159[0], v53 = CFGetTypeID(v159[0]), v53 != CFArrayGetTypeID()))
  {
    v143 = 0;
    v153 = 0;
    v54 = v159[0];
    if (!v159[0])
      goto LABEL_103;
    goto LABEL_102;
  }
  v153 = v143;
  CFRetain(v143);
  v54 = v159[0];
  if (v159[0])
LABEL_102:
    CFRelease(v54);
LABEL_103:
  xpc_release(v158);
  v55 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_power_limiting_RB_threshold");
  v158 = v55;
  if (v55)
    xpc_retain(v55);
  else
    v158 = xpc_null_create();
  xpc::bridge((xpc *)&v158, v56);
  if (!v159[0] || (v142 = v159[0], v57 = CFGetTypeID(v159[0]), v57 != CFArrayGetTypeID()))
  {
    v142 = 0;
    v152 = 0;
    v58 = v159[0];
    if (!v159[0])
      goto LABEL_112;
    goto LABEL_111;
  }
  v152 = v142;
  CFRetain(v142);
  v58 = v159[0];
  if (v159[0])
LABEL_111:
    CFRelease(v58);
LABEL_112:
  xpc_release(v158);
  v59 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_advance_notice_power_threshold");
  v158 = v59;
  if (v59)
    xpc_retain(v59);
  else
    v158 = xpc_null_create();
  xpc::bridge((xpc *)&v158, v60);
  if (!v159[0] || (v141 = v159[0], v61 = CFGetTypeID(v159[0]), v61 != CFArrayGetTypeID()))
  {
    v141 = 0;
    v151 = 0;
    v62 = v159[0];
    if (!v159[0])
      goto LABEL_121;
    goto LABEL_120;
  }
  v151 = v141;
  CFRetain(v141);
  v62 = v159[0];
  if (v159[0])
LABEL_120:
    CFRelease(v62);
LABEL_121:
  xpc_release(v158);
  v63 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_power_limiting_RB_threshold");
  v158 = v63;
  if (v63)
    xpc_retain(v63);
  else
    v158 = xpc_null_create();
  xpc::bridge((xpc *)&v158, v64);
  if (!v159[0] || (v140 = v159[0], v65 = CFGetTypeID(v159[0]), v65 != CFArrayGetTypeID()))
  {
    v140 = 0;
    v150 = 0;
    v66 = v159[0];
    if (!v159[0])
      goto LABEL_130;
    goto LABEL_129;
  }
  v150 = v140;
  CFRetain(v140);
  v66 = v159[0];
  if (v159[0])
LABEL_129:
    CFRelease(v66);
LABEL_130:
  v123 = v17;
  v124 = v15;
  v125 = v13;
  v67 = v11;
  xpc_release(v158);
  v149 = 0;
  v68 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v70 = Mutable;
  if (Mutable)
    v149 = Mutable;
  v122 = (CFTypeRef)*MEMORY[0x1E0DDF2C0];
  ctu::cf::insert<__CFString const*,long long>(Mutable, (CFTypeRef)*MEMORY[0x1E0DDF2C0], v146, v68);
  v121 = (CFTypeRef)*MEMORY[0x1E0DDF220];
  ctu::cf::insert<__CFString const*,long long>(v70, (CFTypeRef)*MEMORY[0x1E0DDF220], v139, v68);
  v71 = v9;
  v72 = CFDataCreate(v68, bytes, 8);
  v73 = v72;
  v147 = a3;
  if (a3)
    v74 = 20;
  else
    v74 = 18;
  v75 = (void *)a1[v74];
  v148 = v72;
  if (v75)
    CFRetain(v75);
  v159[0] = *(CFMutableDictionaryRef *)MEMORY[0x1E0DDF210];
  v76 = v159[0];
  if (v159[0])
    CFRetain(v159[0]);
  v158 = v73;
  if (v73)
  {
    CFRetain(v73);
    if (v76)
      CFDictionarySetValue((CFMutableDictionaryRef)v75, v76, v73);
    CFRelease(v73);
  }
  if (v76)
    CFRelease(v76);
  if (v75)
    CFRelease(v75);
  v77 = (__CFDictionary *)a1[v74];
  v159[0] = v77;
  if (v77)
    CFRetain(v77);
  ctu::cf::update<__CFString const*,long long>(v77, (CFTypeRef)*MEMORY[0x1E0DDF360], v71, v68);
  if (v77)
    CFRelease(v77);
  v78 = (__CFDictionary *)a1[v74];
  v159[0] = v78;
  if (v78)
    CFRetain(v78);
  ctu::cf::update<__CFString const*,unsigned int>(v78, (CFTypeRef)*MEMORY[0x1E0DDF2F0], v67, v68);
  if (v78)
    CFRelease(v78);
  v79 = (__CFDictionary *)a1[v74];
  v159[0] = v79;
  if (v79)
    CFRetain(v79);
  ctu::cf::update<__CFString const*,unsigned int>(v79, (CFTypeRef)*MEMORY[0x1E0DDF6E0], v125, v68);
  if (v79)
    CFRelease(v79);
  v80 = (__CFDictionary *)a1[v74];
  v159[0] = v80;
  if (v80)
    CFRetain(v80);
  ctu::cf::update<__CFString const*,unsigned int>(v80, (CFTypeRef)*MEMORY[0x1E0DDF238], v124, v68);
  if (v80)
    CFRelease(v80);
  v81 = (__CFDictionary *)a1[v74];
  v159[0] = v81;
  if (v81)
    CFRetain(v81);
  ctu::cf::update<__CFString const*,unsigned int>(v81, (CFTypeRef)*MEMORY[0x1E0DDF508], v123, v68);
  if (v81)
    CFRelease(v81);
  v82 = (__CFDictionary *)a1[v74];
  v159[0] = v82;
  if (v82)
    CFRetain(v82);
  ctu::cf::update<__CFString const*,unsigned int>(v82, (CFTypeRef)*MEMORY[0x1E0DDF3C8], v134, v68);
  if (v82)
    CFRelease(v82);
  v83 = (__CFDictionary *)a1[v74];
  v159[0] = v83;
  if (v83)
    CFRetain(v83);
  ctu::cf::update<__CFString const*,unsigned int>(v83, (CFTypeRef)*MEMORY[0x1E0DDF4E8], v138, v68);
  if (v83)
    CFRelease(v83);
  v84 = (__CFDictionary *)a1[v74];
  v159[0] = v84;
  if (v84)
    CFRetain(v84);
  ctu::cf::update<__CFString const*,double>(v84, (CFTypeRef)*MEMORY[0x1E0DDF340], v68, v24);
  if (v84)
    CFRelease(v84);
  v85 = (__CFDictionary *)a1[v74];
  v159[0] = v85;
  if (v85)
    CFRetain(v85);
  ctu::cf::update<__CFString const*,unsigned int>(v85, (CFTypeRef)*MEMORY[0x1E0DDF440], v137, v68);
  if (v85)
    CFRelease(v85);
  v86 = (__CFDictionary *)a1[v74];
  v159[0] = v86;
  if (v86)
    CFRetain(v86);
  ctu::cf::update<__CFString const*,unsigned int>(v86, (CFTypeRef)*MEMORY[0x1E0DDF680], v136, v68);
  if (v86)
    CFRelease(v86);
  v87 = (__CFDictionary *)a1[v74];
  v159[0] = v87;
  if (v87)
    CFRetain(v87);
  ctu::cf::update<__CFString const*,unsigned int>(v87, (CFTypeRef)*MEMORY[0x1E0DDF588], v135, v68);
  if (v87)
    CFRelease(v87);
  v88 = (__CFDictionary *)a1[v74];
  v159[0] = v88;
  if (v88)
    CFRetain(v88);
  ctu::cf::update<__CFString const*,__CFDictionary *>(v88, (CFTypeRef)*MEMORY[0x1E0DDF5B0], v70);
  if (v88)
    CFRelease(v88);
  v89 = (__CFDictionary *)a1[v74];
  v159[0] = v89;
  if (v89)
    CFRetain(v89);
  ctu::cf::update<__CFString const*,long long>(v89, (CFTypeRef)*MEMORY[0x1E0DDF6A8], v133, v68);
  if (v89)
    CFRelease(v89);
  v90 = (__CFDictionary *)a1[v74];
  v159[0] = v90;
  if (v90)
    CFRetain(v90);
  ctu::cf::update<__CFString const*,long long>(v90, (CFTypeRef)*MEMORY[0x1E0DDF5D8], v132, v68);
  if (v90)
    CFRelease(v90);
  v91 = (__CFDictionary *)a1[v74];
  v159[0] = v91;
  if (v91)
    CFRetain(v91);
  ctu::cf::update<__CFString const*,long long>(v91, (CFTypeRef)*MEMORY[0x1E0DDF4B0], v131, v68);
  if (v91)
    CFRelease(v91);
  v92 = (__CFDictionary *)a1[v74];
  v159[0] = v92;
  if (v92)
    CFRetain(v92);
  ctu::cf::update<__CFString const*,long long>(v92, (CFTypeRef)*MEMORY[0x1E0DDF510], v130, v68);
  if (v92)
    CFRelease(v92);
  v93 = (__CFDictionary *)a1[v74];
  v159[0] = v93;
  if (v93)
    CFRetain(v93);
  ctu::cf::update<__CFString const*,BOOL>(v93, (CFTypeRef)*MEMORY[0x1E0DDF678], v129);
  if (v93)
    CFRelease(v93);
  v94 = (__CFDictionary *)a1[v74];
  v159[0] = v94;
  if (v94)
    CFRetain(v94);
  ctu::cf::update<__CFString const*,BOOL>(v94, (CFTypeRef)*MEMORY[0x1E0DDF550], v128);
  if (v94)
    CFRelease(v94);
  v95 = (__CFDictionary *)a1[v74];
  v159[0] = v95;
  if (v95)
    CFRetain(v95);
  ctu::cf::update<__CFString const*,long long>(v95, (CFTypeRef)*MEMORY[0x1E0DDF4B8], v127, v68);
  if (v95)
    CFRelease(v95);
  v96 = (__CFDictionary *)a1[v74];
  v159[0] = v96;
  if (v96)
    CFRetain(v96);
  ctu::cf::update<__CFString const*,long long>(v96, (CFTypeRef)*MEMORY[0x1E0DDF438], v126, v68);
  if (v96)
    CFRelease(v96);
  v97 = (__CFDictionary *)a1[v74];
  v159[0] = v97;
  if (v97)
    CFRetain(v97);
  ctu::cf::update<__CFString const*,__CFArray const*>(v97, (CFTypeRef)*MEMORY[0x1E0DDF3B0], v156);
  if (v97)
    CFRelease(v97);
  v98 = (__CFDictionary *)a1[v74];
  v159[0] = v98;
  if (v98)
    CFRetain(v98);
  ctu::cf::update<__CFString const*,__CFArray const*>(v98, (CFTypeRef)*MEMORY[0x1E0DDF688], cf);
  if (v98)
    CFRelease(v98);
  v99 = (__CFDictionary *)a1[v74];
  v159[0] = v99;
  if (v99)
    CFRetain(v99);
  ctu::cf::update<__CFString const*,__CFArray const*>(v99, (CFTypeRef)*MEMORY[0x1E0DDF698], v144);
  if (v99)
    CFRelease(v99);
  v100 = (__CFDictionary *)a1[v74];
  v159[0] = v100;
  if (v100)
    CFRetain(v100);
  ctu::cf::update<__CFString const*,__CFArray const*>(v100, (CFTypeRef)*MEMORY[0x1E0DDF6A0], v143);
  if (v100)
    CFRelease(v100);
  v101 = (__CFDictionary *)a1[v74];
  v159[0] = v101;
  if (v101)
    CFRetain(v101);
  ctu::cf::update<__CFString const*,__CFArray const*>(v101, (CFTypeRef)*MEMORY[0x1E0DDF640], v142);
  if (v101)
    CFRelease(v101);
  v102 = (__CFDictionary *)a1[v74];
  v159[0] = v102;
  if (v102)
    CFRetain(v102);
  ctu::cf::update<__CFString const*,__CFArray const*>(v102, (CFTypeRef)*MEMORY[0x1E0DDF690], v141);
  if (v102)
    CFRelease(v102);
  v103 = (__CFDictionary *)a1[v74];
  v159[0] = v103;
  if (v103)
    CFRetain(v103);
  ctu::cf::update<__CFString const*,__CFArray const*>(v103, (CFTypeRef)*MEMORY[0x1E0DDF638], v140);
  if (v103)
    CFRelease(v103);
  if (capabilities::abs::supportsCoexEur5G(v104))
  {
    v105 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_CoexTech");
    v159[0] = v105;
    if (v105)
      xpc_retain(v105);
    else
      v159[0] = (CFMutableDictionaryRef)xpc_null_create();
    v106 = xpc::dyn_cast_or_default((xpc *)v159, 0);
    xpc_release(v159[0]);
    v107 = (__CFDictionary *)a1[v74];
    v159[0] = v107;
    if (v107)
      CFRetain(v107);
    ctu::cf::update<__CFString const*,unsigned int>(v107, (CFTypeRef)*MEMORY[0x1E0DDF2E8], v147, v68);
    if (v107)
      CFRelease(v107);
    v108 = (__CFDictionary *)a1[v74];
    v159[0] = v108;
    if (v108)
      CFRetain(v108);
    ctu::cf::update<__CFString const*,unsigned int>(v108, (CFTypeRef)*MEMORY[0x1E0DDF320], v147, v68);
    if (v108)
      CFRelease(v108);
    v109 = (__CFDictionary *)a1[v74];
    v159[0] = v109;
    if (v109)
      CFRetain(v109);
    ctu::cf::update<__CFString const*,unsigned int>(v109, (CFTypeRef)*MEMORY[0x1E0DDF248], v106, v68);
    if (v109)
      CFRelease(v109);
    v110 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_NGC_TxDenialThresholdSlots");
    v159[0] = v110;
    if (v110)
      xpc_retain(v110);
    else
      v159[0] = (CFMutableDictionaryRef)xpc_null_create();
    v111 = xpc::dyn_cast_or_default((xpc *)v159, 0);
    xpc_release(v159[0]);
    v112 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_NGC_MaxAllowedSlotDenials");
    v159[0] = v112;
    if (v112)
      xpc_retain(v112);
    else
      v159[0] = (CFMutableDictionaryRef)xpc_null_create();
    v113 = xpc::dyn_cast_or_default((xpc *)v159, 0);
    xpc_release(v159[0]);
    v114 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_NGC_SlotsDenialWindow");
    v159[0] = v114;
    if (v114)
      xpc_retain(v114);
    else
      v159[0] = (CFMutableDictionaryRef)xpc_null_create();
    v115 = xpc::dyn_cast_or_default((xpc *)v159, 0);
    xpc_release(v159[0]);
    v159[0] = 0;
    v116 = CFDictionaryCreateMutable(v68, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v117 = v116;
    if (v116)
      v159[0] = v116;
    ctu::cf::insert<__CFString const*,long long>(v116, v122, v113, v68);
    ctu::cf::insert<__CFString const*,long long>(v117, v121, v115, v68);
    v118 = (void *)a1[v74];
    v158 = v118;
    if (v118)
      CFRetain(v118);
    ctu::cf::update<__CFString const*,unsigned int>((__CFDictionary *)v118, (CFTypeRef)*MEMORY[0x1E0DDF6E8], v111, v68);
    if (v118)
      CFRelease(v118);
    v119 = (void *)a1[v74];
    v158 = v119;
    if (v119)
      CFRetain(v119);
    ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v119, (CFTypeRef)*MEMORY[0x1E0DDF648], v117);
    if (v119)
      CFRelease(v119);
    if (v117)
      CFRelease(v117);
  }
  v159[0] = (CFMutableDictionaryRef)0xAAAAAAAAAAAAAAAALL;
  coex::Module::State::getSubProperty((uint64_t)a1, coex::kKeyFailCondition, 0, 0, v159);
  v120 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  if (!v159[0])
    v120 = 0;
  if (v120)
  {
    CFDictionaryRemoveValue(v159[0], (const void *)*MEMORY[0x1E0DDF580]);
    CFDictionaryRemoveValue(v159[0], (const void *)*MEMORY[0x1E0DDF458]);
  }
  coex::Module::State::setPolicy_sync(a1, v147);
  if (v159[0])
    CFRelease(v159[0]);
  if (v148)
    CFRelease(v148);
  if (v149)
    CFRelease(v149);
  if (v150)
    CFRelease(v150);
  if (v151)
    CFRelease(v151);
  if (v152)
    CFRelease(v152);
  if (v153)
    CFRelease(v153);
  if (v154)
    CFRelease(v154);
  if (v155)
    CFRelease(v155);
  if (v156)
    CFRelease(v156);
}

void sub_1BF33D27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,const void *a31,const void *a32,const void *a33)
{
  uint64_t v33;

  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)(v33 - 120));
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)(v33 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a31);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a32);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a33);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v33 - 184));
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v33 - 176));
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v33 - 168));
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v33 - 160));
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v33 - 152));
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v33 - 144));
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v33 - 136));
  _Unwind_Resume(a1);
}

void sub_1BF33D920()
{
  JUMPOUT(0x1BF33D8D8);
}

void ctu::cf::update<__CFString const*,unsigned int>(__CFDictionary *a1, CFTypeRef cf, unsigned int a3, CFAllocatorRef allocator)
{
  CFNumberRef v8;
  CFNumberRef v9;
  uint64_t valuePtr;

  if (cf)
    CFRetain(cf);
  valuePtr = a3;
  v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  v9 = v8;
  if (cf && v8)
  {
    CFDictionarySetValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf)
    CFRelease(cf);
}

void sub_1BF33D9C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1BF33D9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::update<__CFString const*,long long>(__CFDictionary *a1, CFTypeRef cf, uint64_t a3, CFAllocatorRef allocator)
{
  CFNumberRef v8;
  CFNumberRef v9;
  uint64_t valuePtr;

  if (cf)
    CFRetain(cf);
  valuePtr = a3;
  v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  v9 = v8;
  if (cf && v8)
  {
    CFDictionarySetValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf)
    CFRelease(cf);
}

void sub_1BF33DA94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1BF33DAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::update<__CFString const*,__CFArray const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf)
    CFRetain(cf);
  if (a3)
  {
    CFRetain(a3);
    if (cf)
      CFDictionarySetValue(a1, cf, a3);
    CFRelease(a3);
  }
  if (cf)
    CFRelease(cf);
}

void sub_1BF33DB48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void sub_1BF33DB6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,long long>(__CFDictionary *a1, CFTypeRef cf, uint64_t a3, CFAllocatorRef allocator)
{
  CFNumberRef v8;
  CFNumberRef v9;
  uint64_t valuePtr;

  if (cf)
    CFRetain(cf);
  valuePtr = a3;
  v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  v9 = v8;
  if (cf && v8)
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf)
    CFRelease(cf);
}

void sub_1BF33DC18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1BF33DC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::update<__CFString const*,BOOL>(CFMutableDictionaryRef theDict, CFTypeRef cf, int a3)
{
  const void **v6;
  const void *v7;

  if (cf)
    CFRetain(cf);
  v6 = (const void **)MEMORY[0x1E0C9AE50];
  if (!a3)
    v6 = (const void **)MEMORY[0x1E0C9AE40];
  v7 = *v6;
  if (cf && v7)
  {
    CFDictionarySetValue(theDict, cf, v7);
  }
  else if (!v7)
  {
    goto LABEL_10;
  }
  CFRelease(v7);
LABEL_10:
  if (cf)
    CFRelease(cf);
}

void sub_1BF33DCE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void ctu::cf::update<__CFString const*,__CFDictionary *>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf)
    CFRetain(cf);
  if (a3)
  {
    CFRetain(a3);
    if (cf)
      CFDictionarySetValue(a1, cf, a3);
    CFRelease(a3);
  }
  if (cf)
    CFRelease(cf);
}

void sub_1BF33DD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void sub_1BF33DDAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t coex::Module::State::getSubProperty@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, CFMutableDictionaryRef *a5@<X8>)
{
  uint64_t v8;
  const void *v9;
  __CFDictionary *v10;
  CFMutableDictionaryRef Mutable;
  CFTypeID v12;
  CFTypeID TypeID;
  _QWORD v15[2];

  v15[0] = 0xAAAAAAAAAAAAAAAALL;
  v15[1] = 0xAAAAAAAAAAAAAAAALL;
  v8 = 152;
  if (!a3)
    v8 = 136;
  v9 = *(const void **)(a1 + v8);
  if (v9)
    CFRetain(v9);
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v15, (const __CFDictionary *)v9);
  if (v9)
    CFRelease(v9);
  v10 = (__CFDictionary *)(*(uint64_t (**)(_QWORD *, uint64_t))v15[0])(v15, a2);
  Mutable = v10;
  if (v10)
  {
    v12 = CFGetTypeID(v10);
    TypeID = CFDictionaryGetTypeID();
    CFRelease(Mutable);
    *a5 = 0;
    if (v12 == TypeID)
    {
      CFRetain(Mutable);
LABEL_13:
      *a5 = Mutable;
      return MEMORY[0x1C3B893A8](v15);
    }
  }
  else
  {
    *a5 = 0;
  }
  if (a4)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
      goto LABEL_13;
  }
  return MEMORY[0x1C3B893A8](v15);
}

void sub_1BF33DED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  const void **v3;
  va_list va;

  va_start(va, a3);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v3);
  MEMORY[0x1C3B893A8](va);
  _Unwind_Resume(a1);
}

void sub_1BF33DEFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::update<__CFString const*,double>(__CFDictionary *a1, CFTypeRef cf, CFAllocatorRef allocator, double a4)
{
  CFNumberRef v8;
  CFNumberRef v9;
  double valuePtr;

  if (cf)
    CFRetain(cf);
  valuePtr = a4;
  v8 = CFNumberCreate(allocator, kCFNumberDoubleType, &valuePtr);
  v9 = v8;
  if (cf && v8)
  {
    CFDictionarySetValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf)
    CFRelease(cf);
}

void sub_1BF33DFC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1BF33DFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__110shared_ptrIN4coex6Module5StateEEE56c27_ZTSN3ctu2cf12dict_adapterE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  MEMORY[0x1C3B893A8](a1 + 56);
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void __destroy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  const void *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__110shared_ptrIN4coex6Module5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ___ZN4coex9XpcClient11sendMessageE19WCMReceiveMessageIdN3xpc6objectENS_5SubIdE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  NSObject *v13;
  void *p_p;
  void *__p;
  char v16;
  xpc_object_t xdict;
  uint8_t buf[4];
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = xpc_dictionary_create(0, 0, 0);
  v4 = v3;
  if (v3)
  {
    xdict = v3;
  }
  else
  {
    v4 = xpc_null_create();
    xdict = v4;
    if (!v4)
    {
      v5 = xpc_null_create();
      v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v4) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v4);
    goto LABEL_9;
  }
  v5 = xpc_null_create();
LABEL_8:
  xdict = v5;
LABEL_9:
  xpc_release(v4);
  v6 = xpc_uint64_create(*(unsigned int *)(a1 + 48));
  if (!v6)
    v6 = xpc_null_create();
  v7 = xdict;
  xpc_dictionary_set_value(xdict, "kMessageId", v6);
  v8 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v8);
  v9 = *(xpc_object_t *)(a1 + 40);
  if (v9)
    xpc_retain(*(xpc_object_t *)(a1 + 40));
  else
    v9 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kMessageArgs", v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v11 = xpc_uint64_create(*(unsigned int *)(a1 + 52));
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kSubId", v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  xpc_connection_send_message(*(xpc_connection_t *)(v2 + 40), xdict);
  v13 = *(NSObject **)(v2 + 72);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    xpc::object::to_string((xpc::object *)&xdict);
    if (v16 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315138;
    v19 = p_p;
    _os_log_debug_impl(&dword_1BF335000, v13, OS_LOG_TYPE_DEBUG, "#D Sending Message: \n\t%s\n", buf, 0xCu);
    if (v16 < 0)
      operator delete(__p);
    v7 = xdict;
  }
  xpc_release(v7);
}

void sub_1BF33E32C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void *__copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[7];
  if (result)
    result = _Block_copy(result);
  a1[7] = result;
  return result;
}

void *__copy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(_QWORD *a1, _QWORD *a2)
{
  void *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (void *)a2[5];
  if (result)
    result = _Block_copy(result);
  v6 = a2[6];
  v5 = a2[7];
  a1[5] = result;
  a1[6] = v6;
  a1[7] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 56);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void ___ZN4coex6Module5State32handleTransparentMessageReq_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to send transparent message req: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<coex::Module::State>>::lock(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 8);
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = 0;
LABEL_6:
  v7 = operator new(0x18uLL);
  *v7 = &off_1E78FE0C8;
  v7[1] = v6;
  v7[2] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *a2 = v7;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *a2 = v7;
  }
}

void sub_1BF33E634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrIK11RadioModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb23_E4__24EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t object;

  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  v4 = *(void **)(*a1 + 8);
  object = v4;
  if (v4 && MEMORY[0x1C3B8A86C](v4) == MEMORY[0x1E0C812F8])
    xpc_retain(v4);
  else
    object = xpc_null_create();
  coex::Module::State::handleTransparentMessageReq_sync(v3, &object, *((unsigned int *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(a1);
}

void sub_1BF33E780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  xpc_object_t *v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_7(_QWORD *a1, uint64_t *a2, const __CFDictionary **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  std::__shared_weak_count *v11;
  xpc_object_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  NSObject *v15;
  xpc_object_t v16;
  xpc_object_t v17;
  const __CFDictionary *v18;
  uint64_t (*v19)(uint64_t);
  const __CFNumber *v20;
  const __CFNumber *v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  void **v27;
  xpc_object_t v28;
  xpc_object_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  _QWORD v32[2];
  int64_t valuePtr;
  int64_t value;
  void *v35[2];
  uint64_t v36;
  xpc_object_t xdict;
  unsigned int v38;
  std::__shared_weak_count *v40;
  uint8_t buf[16];
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  v40 = v8;
  if (!v8)
    return;
  if (!a1[5])
  {
    v11 = v8;
LABEL_39:
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    return;
  }
  v38 = 0;
  v9 = xpc_dictionary_create(0, 0, 0);
  v10 = v9;
  if (v9)
  {
    xdict = v9;
  }
  else
  {
    v10 = xpc_null_create();
    xdict = v10;
    if (!v10)
    {
      v12 = xpc_null_create();
      v10 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x1C3B8A86C](v10) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v10);
    goto LABEL_13;
  }
  v12 = xpc_null_create();
LABEL_12:
  xdict = v12;
LABEL_13:
  xpc_release(v10);
  v35[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v36 = 0xAAAAAAAAAAAAAALL;
  value = 0;
  v35[0] = (void *)0xAAAAAAAAAAAAAA00;
  valuePtr = 0;
  v13 = *a2;
  v14 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!v13)
    v14 = 0;
  if (v14)
  {
    v38 = -534716416;
    v15 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v13;
      _os_log_error_impl(&dword_1BF335000, v15, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
    }
    v16 = xpc_string_create("Unknown error");
    if (!v16)
      v16 = xpc_null_create();
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB0D0], v16);
    v17 = xpc_null_create();
    xpc_release(v16);
    xpc_release(v17);
  }
  else
  {
    v18 = *a3;
    v19 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    if (!*a3)
      v19 = 0;
    if (v19)
    {
      v32[0] = 0xAAAAAAAAAAAAAAAALL;
      v32[1] = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v32, v18);
      v20 = (const __CFNumber *)ctu::cf::map_adapter::copyCFNumberRef((ctu::cf::map_adapter *)v32, (const __CFString *)*MEMORY[0x1E0DDF810]);
      v21 = v20;
      if (v20)
      {
        CFNumberGetValue(v20, kCFNumberLongType, &valuePtr);
        CFRelease(v21);
        LODWORD(value) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v32, (const __CFString *)*MEMORY[0x1E0DDF838]);
      }
      ctu::cf::map_adapter::getString();
      *(_OWORD *)v35 = *(_OWORD *)buf;
      v36 = v42;
      HIBYTE(v42) = 0;
      buf[0] = 0;
      v22 = xpc_int64_create(valuePtr);
      if (!v22)
        v22 = xpc_null_create();
      v23 = xdict;
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB7A0], v22);
      v24 = xpc_null_create();
      xpc_release(v22);
      xpc_release(v24);
      v25 = xpc_int64_create((int)value);
      if (!v25)
        v25 = xpc_null_create();
      xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x1E0CFBCA0], v25);
      v26 = xpc_null_create();
      xpc_release(v25);
      xpc_release(v26);
      if (v36 >= 0)
        v27 = v35;
      else
        v27 = (void **)v35[0];
      v28 = xpc_string_create((const char *)v27);
      if (!v28)
        v28 = xpc_null_create();
      xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x1E0CFB8D8], v28);
      v29 = xpc_null_create();
      xpc_release(v28);
      xpc_release(v29);
      MEMORY[0x1C3B893A8](v32);
    }
  }
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(a1 + 7, &v38, &xdict);
  if (SHIBYTE(v36) < 0)
    operator delete(v35[0]);
  xpc_release(xdict);
  v11 = v40;
  if (v40)
    goto LABEL_39;
}

void sub_1BF33EBEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(uint64_t *a1, unsigned int *a2, void **a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  xpc_object_t object;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  object = v5;
  if (v5)
    xpc_retain(v5);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v3 + 16))(v3, v4, &object);
  xpc_release(object);
}

void sub_1BF33ED38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZN17ABMServerInternal24handlePublicMessage_syncEN3xpc10connectionERNS0_4dictE_block_invoke(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;

  v6 = *(_QWORD *)(a1 + 32);
  v7 = MEMORY[0x1C3B8A86C](*(_QWORD *)(a1 + 40));
  v8 = MEMORY[0x1E0C812F8];
  if (v7 == MEMORY[0x1E0C812F8])
  {
    if (a2 == -534716414)
    {
      if (*(_DWORD *)(v6 + 192) == 3)
      {
        v9 = xpc_dictionary_create(0, 0, 0);
        if (v9 || (v9 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8A86C](v9) == v8)
          {
            xpc_retain(v9);
            v10 = v9;
          }
          else
          {
            v10 = xpc_null_create();
          }
        }
        else
        {
          v10 = xpc_null_create();
          v9 = 0;
        }
        xpc_release(v9);
        v15 = xpc_int64_create(-534716415);
        if (!v15)
          v15 = xpc_null_create();
        xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), kKeyCommandResult[0], v15);
        v16 = xpc_null_create();
        xpc_release(v15);
        xpc_release(v16);
        v17 = xpc_string_create("Server not available");
        if (!v17)
          v17 = xpc_null_create();
        xpc_dictionary_set_value(v10, (const char *)*MEMORY[0x1E0CFB0D0], v17);
        v18 = xpc_null_create();
        xpc_release(v17);
        xpc_release(v18);
        if (v10)
        {
          xpc_retain(v10);
          v19 = v10;
        }
        else
        {
          v19 = xpc_null_create();
        }
        xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), kKeyCommandData[0], v19);
        v20 = xpc_null_create();
        xpc_release(v19);
        xpc_release(v20);
        xpc_release(v10);
LABEL_27:
        xpc_connection_send_message(*(xpc_connection_t *)(a1 + 48), *(xpc_object_t *)(a1 + 40));
        return;
      }
      v11 = xpc_int64_create(-534716414);
      if (v11)
      {
LABEL_12:
        xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), kKeyCommandResult[0], v11);
        v12 = xpc_null_create();
        xpc_release(v11);
        xpc_release(v12);
        if (MEMORY[0x1C3B8A86C](*a3) == v8)
        {
          v13 = (xpc_object_t)*a3;
          if (v13)
            xpc_retain(v13);
          else
            v13 = xpc_null_create();
          xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), kKeyCommandData[0], v13);
          v14 = xpc_null_create();
          xpc_release(v13);
          xpc_release(v14);
        }
        goto LABEL_27;
      }
    }
    else
    {
      v11 = xpc_int64_create(a2);
      if (v11)
        goto LABEL_12;
    }
    v11 = xpc_null_create();
    goto LABEL_12;
  }
}

void AudioManager::setAudioState(uint64_t a1, xpc::object *a2)
{
  NSObject *v4;
  void *v5;
  xpc_object_t value;
  char v7;
  int v8;
  int v9;
  xpc_object_t v10;
  char v11;
  int v12;
  char v13;
  int v14;
  void *v15;
  xpc_object_t v16;
  char v17;
  int v18;
  xpc_object_t v19;
  xpc_object_t v20;
  char v21;
  xpc_object_t v22;
  int v23;
  char v24;
  xpc_object_t v25;
  xpc_object_t *v26;
  char v27;
  xpc_object_t v28;
  char v29;
  xpc_object_t v30;
  int v31;
  void *v32;
  int v33;
  xpc_object_t v34;
  void *v35;
  int v36;
  xpc_object_t v37;
  size_t count;
  size_t v39;
  const char *v40;
  size_t v41;
  xpc_object_t v42;
  const char *v43;
  size_t v44;
  xpc_object_t v45;
  char v46;
  xpc_object_t *v47;
  xpc_object_t v48;
  size_t v49;
  _BOOL4 v50;
  _BOOL4 v51;
  size_t v52;
  BOOL v53;
  AudioManager *v54;
  xpc_object_t v55;
  xpc_object_t v56;
  xpc_object_t xarray;
  xpc_object_t v58;
  xpc_object_t object[3];
  _BYTE xdict[24];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v4 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEBUG))
  {
    xpc::object::to_string(a2);
    v26 = SHIBYTE(object[2]) >= 0 ? object : (xpc_object_t *)object[0];
    *(_DWORD *)xdict = 136315138;
    *(_QWORD *)&xdict[4] = v26;
    _os_log_debug_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEBUG, "#D Setting Audio State: %s", xdict, 0xCu);
    if (SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
  }
  *(_QWORD *)xdict = 0xAAAAAAAAAAAAAAAALL;
  v5 = (void *)*MEMORY[0x1E0CFB140];
  object[0] = a2;
  object[1] = v5;
  xpc::dict::object_proxy::operator xpc::dict((uint64_t)object, xdict);
  value = xpc_dictionary_get_value(*(xpc_object_t *)xdict, (const char *)*MEMORY[0x1E0CFB8C0]);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  v7 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  if ((v7 & 1) != 0)
  {
    v8 = 0;
    LOBYTE(v9) = 1;
    if (*(_BYTE *)(a1 + 56) == 1)
      goto LABEL_14;
    goto LABEL_13;
  }
  v10 = xpc_dictionary_get_value(*(xpc_object_t *)xdict, (const char *)*MEMORY[0x1E0CFB768]);
  object[0] = v10;
  if (v10)
    xpc_retain(v10);
  else
    object[0] = xpc_null_create();
  v11 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  if ((v11 & 1) != 0)
  {
    LOBYTE(v9) = 2;
    v8 = 1;
    if (*(_BYTE *)(a1 + 56) == 2)
      goto LABEL_14;
    goto LABEL_13;
  }
  v20 = xpc_dictionary_get_value(*(xpc_object_t *)xdict, (const char *)*MEMORY[0x1E0CFB528]);
  object[0] = v20;
  if (v20)
    xpc_retain(v20);
  else
    object[0] = xpc_null_create();
  v23 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  v8 = 0;
  if (v23)
    v9 = 3;
  else
    v9 = 0;
  if (*(unsigned __int8 *)(a1 + 56) != v9)
  {
LABEL_13:
    *(_BYTE *)(a1 + 56) = v9;
    AudioManager::notifyAudioOutputClients((os_log_t *)a1);
  }
LABEL_14:
  v12 = *(unsigned __int8 *)(a1 + 88);
  if (*(_BYTE *)(a1 + 88))
    v13 = 0;
  else
    v13 = v8;
  if ((v13 & 1) != 0)
  {
    if (v12 == 1)
      goto LABEL_25;
LABEL_24:
    AudioManager::notifyAudioSpeakerClients((NSObject **)a1);
    goto LABEL_25;
  }
  if (*(_BYTE *)(a1 + 88))
    v14 = v8;
  else
    v14 = 0;
  if (v12 != v14)
    goto LABEL_24;
LABEL_25:
  v58 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v15 = (void *)*MEMORY[0x1E0CFB0C0];
  object[0] = a2;
  object[1] = v15;
  xpc::dict::object_proxy::operator xpc::dict((uint64_t)object, &v58);
  v16 = xpc_dictionary_get_value(v58, (const char *)*MEMORY[0x1E0CFB280]);
  object[0] = v16;
  if (v16)
    xpc_retain(v16);
  else
    object[0] = xpc_null_create();
  v17 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  if ((v17 & 1) != 0)
  {
    v18 = 1;
  }
  else
  {
    v19 = xpc_dictionary_get_value(v58, (const char *)*MEMORY[0x1E0CFB288]);
    object[0] = v19;
    if (v19)
      xpc_retain(v19);
    else
      object[0] = xpc_null_create();
    v21 = xpc::dyn_cast_or_default((xpc *)object, 0);
    xpc_release(object[0]);
    if ((v21 & 1) != 0)
    {
      v18 = 2;
    }
    else
    {
      v22 = xpc_dictionary_get_value(v58, (const char *)*MEMORY[0x1E0CFB290]);
      object[0] = v22;
      if (v22)
        xpc_retain(v22);
      else
        object[0] = xpc_null_create();
      v24 = xpc::dyn_cast_or_default((xpc *)object, 0);
      xpc_release(object[0]);
      if ((v24 & 1) != 0)
      {
        v18 = 3;
      }
      else
      {
        v25 = xpc_dictionary_get_value(v58, (const char *)*MEMORY[0x1E0CFB298]);
        object[0] = v25;
        if (v25)
          xpc_retain(v25);
        else
          object[0] = xpc_null_create();
        v27 = xpc::dyn_cast_or_default((xpc *)object, 0);
        xpc_release(object[0]);
        if ((v27 & 1) != 0)
        {
          v18 = 4;
        }
        else
        {
          v28 = xpc_dictionary_get_value(v58, (const char *)*MEMORY[0x1E0CFB2A0]);
          object[0] = v28;
          if (v28)
            xpc_retain(v28);
          else
            object[0] = xpc_null_create();
          v29 = xpc::dyn_cast_or_default((xpc *)object, 0);
          xpc_release(object[0]);
          if ((v29 & 1) != 0)
          {
            v18 = 5;
          }
          else
          {
            v30 = xpc_dictionary_get_value(v58, (const char *)*MEMORY[0x1E0CFB2A8]);
            object[0] = v30;
            if (v30)
              xpc_retain(v30);
            else
              object[0] = xpc_null_create();
            v31 = xpc::dyn_cast_or_default((xpc *)object, 0);
            xpc_release(object[0]);
            if (v31)
              v18 = 6;
            else
              v18 = 0;
          }
        }
      }
    }
  }
  if (*(unsigned __int8 *)(a1 + 24) != v18)
  {
    *(_BYTE *)(a1 + 24) = v18;
    AudioManager::notifyAudioInputClients((os_log_t *)a1);
  }
  xarray = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v32 = (void *)*MEMORY[0x1E0CFB648];
  object[0] = a2;
  object[1] = v32;
  xpc::dict::object_proxy::operator xpc::array((uint64_t)object, &xarray);
  v33 = *(unsigned __int8 *)(a1 + 120);
  v34 = xarray;
  if (xarray)
  {
    xpc_retain(xarray);
LABEL_74:
    xpc_retain(v34);
    v35 = v34;
    goto LABEL_75;
  }
  v34 = xpc_null_create();
  if (v34)
    goto LABEL_74;
  v34 = xpc_null_create();
  v35 = 0;
LABEL_75:
  xpc_release(v35);
  v36 = v33 != 0;
  v37 = xarray;
  if (xarray)
    xpc_retain(xarray);
  else
    v37 = xpc_null_create();
  if (MEMORY[0x1C3B8A86C](xarray) == MEMORY[0x1E0C812C8])
  {
    count = xpc_array_get_count(xarray);
    if (v37)
      goto LABEL_80;
LABEL_82:
    v55 = xpc_null_create();
    goto LABEL_83;
  }
  count = 0;
  if (!v37)
    goto LABEL_82;
LABEL_80:
  xpc_retain(v37);
  v55 = v37;
LABEL_83:
  xpc_release(v37);
  v54 = (AudioManager *)a1;
  if (count || v34 != v55)
  {
    v39 = 0;
    v40 = (const char *)*MEMORY[0x1E0CFB2B0];
    v41 = count - 1;
    while (1)
    {
      while (1)
      {
        memset(object, 170, sizeof(object));
        v42 = xpc_array_get_value(v34, v39);
        v56 = v42;
        if (v42)
          xpc_retain(v42);
        else
          v56 = xpc_null_create();
        xpc::dyn_cast_or_default((xpc *)&v56, (const object *)"", v43);
        xpc_release(v56);
        v44 = strlen(v40);
        v45 = (xpc_object_t)v44;
        v46 = HIBYTE(object[2]);
        if (SHIBYTE(object[2]) < 0)
        {
          if (v44 == -1)
LABEL_110:
            std::string::__throw_out_of_range[abi:ne180100]();
          v47 = (xpc_object_t *)object[0];
          v48 = object[1];
        }
        else
        {
          if (v44 == -1)
            goto LABEL_110;
          v47 = object;
          v48 = (xpc_object_t)HIBYTE(object[2]);
        }
        v49 = (size_t)(v48 >= v45 ? v45 : v48);
        v50 = memcmp(v47, v40, v49) == 0;
        v51 = v48 == v45 && v50;
        if ((v46 & 0x80) == 0)
          break;
        operator delete(object[0]);
        v36 |= v51;
        v52 = v39 + 1;
        v53 = v41 == v39++;
        if (v53)
          goto LABEL_105;
      }
      v36 |= v51;
      v52 = v39 + 1;
      v53 = v41 == v39++;
      if (v53)
      {
LABEL_105:
        v39 = v52;
        if (v34 == v55)
          break;
      }
    }
  }
  xpc_release(v55);
  xpc_release(v34);
  if (*((_BYTE *)v54 + 120) != (v36 & 1))
  {
    *((_BYTE *)v54 + 120) = v36 & 1;
    AudioManager::notifyAudioWiredPortClients((NSObject **)v54);
  }
  xpc_release(xarray);
  xpc_release(v58);
  xpc_release(*(xpc_object_t *)xdict);
}

void sub_1BF33F748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, xpc_object_t a11, xpc_object_t a12, xpc_object_t a13, xpc_object_t object, uint64_t a15, uint64_t a16, xpc_object_t a17)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void xpc::dict::object_proxy::operator xpc::dict(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t v4;
  xpc_object_t v5;

  value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  if (value)
  {
    v4 = value;
    xpc_retain(value);
    *a2 = v4;
  }
  else
  {
    v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
    {
      v5 = xpc_null_create();
      v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v4) != MEMORY[0x1E0C812F8])
  {
    v5 = xpc_null_create();
LABEL_8:
    *a2 = v5;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
}

void AudioManager::notifyAudioOutputClients(os_log_t *this)
{
  NSObject *v2;
  unint64_t v3;
  const char *v4;
  os_log_t v5;
  os_log_t v6;
  void *v7;
  NSObject *isa;
  char v9;
  void *v10;
  const void *v11;
  void *v12;
  char v13;
  __int128 v14;
  uint64_t (*v15)(uint64_t);
  void *v16;
  void *aBlock;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((char *)this + 56);
    if (v3 > 3)
      v4 = "Unknown Audio Output";
    else
      v4 = off_1E7909050[v3];
    LODWORD(v14) = 136315138;
    *(_QWORD *)((char *)&v14 + 4) = v4;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Notifying Audio Output: %s", (uint8_t *)&v14, 0xCu);
  }
  v5 = this[8];
  v6 = this[9];
  if (v5 != v6)
  {
    while (v5->isa)
    {
      v7 = _Block_copy(v5->isa);
      isa = v5[1].isa;
      if (isa)
        goto LABEL_11;
LABEL_12:
      v9 = *((_BYTE *)this + 56);
      if (v7)
      {
        v10 = _Block_copy(v7);
        v11 = v10;
        *(_QWORD *)&v14 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v14 + 1) = 3321888768;
        v15 = ___ZNK8dispatch8callbackIU13block_pointerFvN12AudioManager16AudioOutputStateEEEclIJS2_EEEvDpT__block_invoke;
        v16 = &__block_descriptor_41_e8_32c76_ZTSN8dispatch5blockIU13block_pointerFvN12AudioManager16AudioOutputStateEEEE_e5_v8__0l;
        if (v10)
        {
          v12 = _Block_copy(v10);
          v13 = 0;
        }
        else
        {
          v12 = 0;
          v13 = 1;
        }
      }
      else
      {
        v11 = 0;
        v12 = 0;
        *(_QWORD *)&v14 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v14 + 1) = 3321888768;
        v13 = 1;
        v15 = ___ZNK8dispatch8callbackIU13block_pointerFvN12AudioManager16AudioOutputStateEEEclIJS2_EEEvDpT__block_invoke;
        v16 = &__block_descriptor_41_e8_32c76_ZTSN8dispatch5blockIU13block_pointerFvN12AudioManager16AudioOutputStateEEEE_e5_v8__0l;
      }
      aBlock = v12;
      v18 = v9;
      dispatch_async(isa, &v14);
      if (aBlock)
        _Block_release(aBlock);
      if ((v13 & 1) == 0)
        _Block_release(v11);
      if (isa)
        dispatch_release(isa);
      if (v7)
        _Block_release(v7);
      v5 += 2;
      if (v5 == v6)
        return;
    }
    v7 = 0;
    isa = v5[1].isa;
    if (!isa)
      goto LABEL_12;
LABEL_11:
    dispatch_retain(isa);
    goto LABEL_12;
  }
}

void sub_1BF33FBC4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void coex::Module::State::handleTransparentMessageReq_sync(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  NSObject *v6;
  const __CFAllocator *v7;
  __CFDictionary *Mutable;
  __CFDictionary *v9;
  uint64_t v10;
  uint64_t v11;
  CFMutableArrayRef v12;
  xpc_object_t v13;
  const void *v14;
  xpc_object_t v15;
  size_t count;
  xpc_object_t v17;
  xpc_object_t v18;
  uint64_t v19;
  CFMutableDictionaryRef v20;
  __CFDictionary *v21;
  xpc_object_t value;
  unsigned int v23;
  CFMutableArrayRef v24;
  xpc_object_t v25;
  void *v26;
  size_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  size_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  int v33;
  __CFArray *v34;
  CFNumberRef v35;
  CFTypeRef v36;
  __CFArray *v37;
  xpc_object_t v38;
  CFMutableArrayRef v39;
  CFMutableDictionaryRef v40;
  CFMutableDictionaryRef v41;
  NSObject *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  CFTypeID v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  void *v51;
  NSObject *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  xpc_object_t v59;
  CFTypeRef v60;
  _QWORD aBlock[6];
  std::__shared_weak_count *v62;
  void *v63;
  dispatch_object_t v64;
  CFTypeRef cf;
  xpc_object_t v66;
  CFTypeRef v67;
  xpc_object_t xarray;
  xpc_object_t object;
  const char *v70;
  xpc_object_t xdict;
  int v72[2];
  CFMutableArrayRef v73;
  xpc_object_t v74;
  __CFDictionary *v75;
  int valuePtr;
  uint8_t buf[16];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  if (MEMORY[0x1C3B8A86C](*a2) != MEMORY[0x1E0C812F8])
  {
    v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", buf, 2u);
    }
    return;
  }
  v75 = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9 = Mutable;
  if (Mutable)
    v75 = Mutable;
  v74 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)buf = a2;
  *(_QWORD *)&buf[8] = "kWCMCellularTransparentMessageInformationSet";
  xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &v74);
  v10 = MEMORY[0x1C3B8A86C](v74);
  v11 = MEMORY[0x1E0C812C8];
  if (v10 == MEMORY[0x1E0C812C8])
  {
    v73 = 0;
    v12 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E0C9B378]);
    if (v12)
      v73 = v12;
    memset(buf, 170, sizeof(buf));
    v13 = v74;
    if (v74)
    {
      xpc_retain(v74);
      *(_QWORD *)buf = v13;
    }
    else
    {
      v13 = xpc_null_create();
      *(_QWORD *)buf = v13;
      if (!v13)
      {
        v13 = 0;
        *(_QWORD *)buf = xpc_null_create();
        goto LABEL_13;
      }
    }
    xpc_retain(v13);
LABEL_13:
    *(_QWORD *)&buf[8] = 0;
    xpc_release(v13);
    v14 = (const void *)*MEMORY[0x1E0DDF540];
    v60 = (CFTypeRef)*MEMORY[0x1E0DDF658];
    while (1)
    {
      v15 = v74;
      if (v74)
        xpc_retain(v74);
      else
        v15 = xpc_null_create();
      if (MEMORY[0x1C3B8A86C](v74) == v11)
      {
        count = xpc_array_get_count(v74);
        if (!v15)
        {
LABEL_23:
          v17 = xpc_null_create();
          goto LABEL_24;
        }
      }
      else
      {
        count = 0;
        if (!v15)
          goto LABEL_23;
      }
      xpc_retain(v15);
      v17 = v15;
LABEL_24:
      xpc_release(v15);
      v18 = *(xpc_object_t *)buf;
      v19 = *(_QWORD *)&buf[8];
      xpc_release(v17);
      if (v19 == count && v18 == v17)
      {
        xpc_release(*(xpc_object_t *)buf);
        v39 = v73;
        v9 = v75;
        ctu::cf::insert<__CFString const*,__CFArray *>(v75, (CFTypeRef)*MEMORY[0x1E0DDF6C8], v73);
        a3 = a3;
        if (v39)
          CFRelease(v39);
        break;
      }
      *(_QWORD *)v72 = 0;
      v20 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v21 = v20;
      if (v20)
        *(_QWORD *)v72 = v20;
      object = buf;
      v70 = *(const char **)&buf[8];
      xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      xpc::array::object_proxy::operator xpc::dict((uint64_t)&object, &xdict);
      value = xpc_dictionary_get_value(xdict, "kWCMCellularTransparentMessage_Type");
      object = value;
      if (value)
        xpc_retain(value);
      else
        object = xpc_null_create();
      v23 = xpc::dyn_cast_or_default((xpc *)&object, 0);
      ctu::cf::insert<__CFString const*,unsigned int>(v21, v14, v23, v7);
      xpc_release(object);
      xarray = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      object = &xdict;
      v70 = "kWCMCellularTransparentMessage_ByteList";
      xpc::dict::object_proxy::operator xpc::array((uint64_t)&object, &xarray);
      if (MEMORY[0x1C3B8A86C](xarray) == v11)
      {
        v67 = 0;
        v24 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E0C9B378]);
        if (v24)
          v67 = v24;
        v25 = xarray;
        if (xarray)
        {
          xpc_retain(xarray);
          goto LABEL_37;
        }
        v25 = xpc_null_create();
        if (v25)
        {
LABEL_37:
          xpc_retain(v25);
          v26 = v25;
        }
        else
        {
          v25 = xpc_null_create();
          v26 = 0;
        }
        xpc_release(v26);
        v27 = 0;
        while (2)
        {
          v29 = xarray;
          if (xarray)
            xpc_retain(xarray);
          else
            v29 = xpc_null_create();
          if (MEMORY[0x1C3B8A86C](xarray) == v11)
          {
            v30 = xpc_array_get_count(xarray);
            if (!v29)
              goto LABEL_48;
LABEL_46:
            xpc_retain(v29);
            v31 = v29;
          }
          else
          {
            v30 = 0;
            if (v29)
              goto LABEL_46;
LABEL_48:
            v31 = xpc_null_create();
          }
          xpc_release(v29);
          xpc_release(v31);
          if (v27 == v30 && v25 == v31)
          {
            xpc_release(v25);
            v36 = v67;
            v21 = *(__CFDictionary **)v72;
            ctu::cf::insert<__CFString const*,__CFArray *>(*(__CFDictionary **)v72, v60, v67);
            if (v36)
              CFRelease(v36);
            break;
          }
          v32 = xpc_array_get_value(v25, v27);
          v66 = v32;
          if (v32)
            xpc_retain(v32);
          else
            v66 = xpc_null_create();
          v33 = xpc::dyn_cast_or_default((xpc *)&v66, 0);
          v34 = (__CFArray *)v67;
          valuePtr = v33;
          v35 = CFNumberCreate(v7, kCFNumberIntType, &valuePtr);
          object = v35;
          if (v35)
          {
            CFArrayAppendValue(v34, v35);
            CFRelease(v35);
          }
          xpc_release(v66);
          if (v25)
          {
            xpc_retain(v25);
            v28 = v25;
          }
          else
          {
            v28 = xpc_null_create();
          }
          ++v27;
          xpc_release(v28);
          continue;
        }
      }
      v37 = v73;
      object = v21;
      if (v21)
      {
        CFRetain(v21);
        CFArrayAppendValue(v37, v21);
        CFRelease(v21);
      }
      xpc_release(xarray);
      xpc_release(xdict);
      if (v21)
        CFRelease(v21);
      v38 = *(xpc_object_t *)buf;
      if (*(_QWORD *)buf)
        xpc_retain(*(xpc_object_t *)buf);
      else
        v38 = xpc_null_create();
      ++*(_QWORD *)&buf[8];
      xpc_release(v38);
    }
  }
  object = 0;
  v40 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v41 = v40;
  if (v40)
    object = v40;
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v40, (CFTypeRef)*MEMORY[0x1E0DDF5E0], v9);
  v42 = a1[5];
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v41;
    _os_log_impl(&dword_1BF335000, v42, OS_LOG_TYPE_DEFAULT, "#I Sending transparent message reqeust: %@", buf, 0xCu);
  }
  v44 = a1[9];
  v43 = (std::__shared_weak_count *)a1[10];
  *(_QWORD *)buf = v44;
  if (!v43 || (v45 = std::__shared_weak_count::lock(v43), (*(_QWORD *)&buf[8] = v45) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v46 = v45;
  v47 = a1[13];
  if (v41 && (v48 = CFGetTypeID(v41), v48 == CFDictionaryGetTypeID()))
  {
    cf = v41;
    CFRetain(v41);
  }
  else
  {
    cf = 0;
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State32handleTransparentMessageReq_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_147;
  aBlock[4] = a1;
  aBlock[5] = v44;
  v62 = v46;
  p_shared_owners = (unint64_t *)&v46->__shared_owners_;
  do
    v50 = __ldxr(p_shared_owners);
  while (__stxr(v50 + 1, p_shared_owners));
  v51 = _Block_copy(aBlock);
  v52 = a1[11];
  if (v52)
    dispatch_retain(v52);
  if (v51)
  {
    v63 = _Block_copy(v51);
    v64 = v52;
    if (!v52)
      goto LABEL_86;
    goto LABEL_85;
  }
  v63 = 0;
  v64 = v52;
  if (v52)
LABEL_85:
    dispatch_retain(v52);
LABEL_86:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(_QWORD *)v47 + 48))(v47, &cf, a3, &v63);
  if (v64)
    dispatch_release(v64);
  if (v63)
    _Block_release(v63);
  if (v52)
    dispatch_release(v52);
  if (v51)
    _Block_release(v51);
  if (cf)
    CFRelease(cf);
  v53 = v62;
  if (v62)
  {
    v54 = (unint64_t *)&v62->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_105;
  v57 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v58 = __ldaxr(v57);
  while (__stlxr(v58 - 1, v57));
  if (v58)
  {
LABEL_105:
    v59 = object;
    if (!object)
      goto LABEL_107;
    goto LABEL_106;
  }
  ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
  std::__shared_weak_count::__release_weak(v56);
  v59 = object;
  if (object)
LABEL_106:
    CFRelease(v59);
LABEL_107:
  xpc_release(v74);
  if (v75)
    CFRelease(v75);
}

void sub_1BF3403D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,xpc_object_t a22,char a23,xpc_object_t object,xpc_object_t a25,uint64_t a26,xpc_object_t a27,char a28)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void xpc::dict::object_proxy::operator xpc::array(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t v4;
  xpc_object_t v5;

  value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  if (value)
  {
    v4 = value;
    xpc_retain(value);
    *a2 = v4;
  }
  else
  {
    v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
    {
      v5 = xpc_null_create();
      v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v4) != MEMORY[0x1E0C812C8])
  {
    v5 = xpc_null_create();
LABEL_8:
    *a2 = v5;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
}

void ctu::cf::insert<__CFString const*,__CFArray *>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf)
    CFRetain(cf);
  if (a3)
  {
    CFRetain(a3);
    if (cf)
      CFDictionaryAddValue(a1, cf, a3);
    CFRelease(a3);
  }
  if (cf)
    CFRelease(cf);
}

void sub_1BF340728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void sub_1BF34074C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,unsigned int>(__CFDictionary *a1, CFTypeRef cf, unsigned int a3, CFAllocatorRef allocator)
{
  CFNumberRef v8;
  CFNumberRef v9;
  uint64_t valuePtr;

  if (cf)
    CFRetain(cf);
  valuePtr = a3;
  v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  v9 = v8;
  if (cf && v8)
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf)
    CFRelease(cf);
}

void sub_1BF3407FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1BF340820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void xpc::array::object_proxy::operator xpc::dict(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t v4;
  xpc_object_t v5;

  value = xpc_array_get_value(**(xpc_object_t **)a1, *(_QWORD *)(a1 + 8));
  if (value)
  {
    v4 = value;
    xpc_retain(value);
    *a2 = v4;
  }
  else
  {
    v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
    {
      v5 = xpc_null_create();
      v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v4) != MEMORY[0x1E0C812F8])
  {
    v5 = xpc_null_create();
LABEL_8:
    *a2 = v5;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
}

void AudioManager::notifyAudioSpeakerClients(NSObject **this)
{
  NSObject *v2;
  const char *v3;
  NSObject *v4;
  NSObject *v5;
  void *v6;
  NSObject *isa;
  char v8;
  void *v9;
  const void *v10;
  void *v11;
  char v12;
  __int128 v13;
  uint64_t (*v14)(uint64_t);
  void *v15;
  void *aBlock;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    if (*((_BYTE *)this + 88))
      v3 = "YES";
    else
      v3 = "NO";
    LODWORD(v13) = 136315138;
    *(_QWORD *)((char *)&v13 + 4) = v3;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Notifying Speaker State: %s", (uint8_t *)&v13, 0xCu);
  }
  v4 = this[12];
  v5 = this[13];
  if (v4 != v5)
  {
    while (v4->isa)
    {
      v6 = _Block_copy(v4->isa);
      isa = v4[1].isa;
      if (isa)
        goto LABEL_11;
LABEL_12:
      v8 = *((_BYTE *)this + 88);
      if (v6)
      {
        v9 = _Block_copy(v6);
        v10 = v9;
        *(_QWORD *)&v13 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v13 + 1) = 3321888768;
        v14 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
        v15 = &__block_descriptor_41_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE_e5_v8__0l;
        if (v9)
        {
          v11 = _Block_copy(v9);
          v12 = 0;
        }
        else
        {
          v11 = 0;
          v12 = 1;
        }
      }
      else
      {
        v10 = 0;
        v11 = 0;
        *(_QWORD *)&v13 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v13 + 1) = 3321888768;
        v12 = 1;
        v14 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
        v15 = &__block_descriptor_41_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE_e5_v8__0l;
      }
      aBlock = v11;
      v17 = v8;
      dispatch_async(isa, &v13);
      if (aBlock)
        _Block_release(aBlock);
      if ((v12 & 1) == 0)
        _Block_release(v10);
      if (isa)
        dispatch_release(isa);
      if (v6)
        _Block_release(v6);
      v4 += 2;
      if (v4 == v5)
        return;
    }
    v6 = 0;
    isa = v4[1].isa;
    if (!isa)
      goto LABEL_12;
LABEL_11:
    dispatch_retain(isa);
    goto LABEL_12;
  }
}

void sub_1BF340ABC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void AudioManager::notifyAudioInputClients(os_log_t *this)
{
  NSObject *v2;
  unint64_t v3;
  const char *v4;
  os_log_t v5;
  os_log_t v6;
  void *v7;
  NSObject *isa;
  char v9;
  void *v10;
  const void *v11;
  void *v12;
  char v13;
  __int128 v14;
  uint64_t (*v15)(uint64_t);
  void *v16;
  void *aBlock;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((char *)this + 24);
    if (v3 > 6)
      v4 = "Unknown Audio Input";
    else
      v4 = off_1E7909070[v3];
    LODWORD(v14) = 136315138;
    *(_QWORD *)((char *)&v14 + 4) = v4;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Notifying Audio Input: %s", (uint8_t *)&v14, 0xCu);
  }
  v5 = this[4];
  v6 = this[5];
  if (v5 != v6)
  {
    while (v5->isa)
    {
      v7 = _Block_copy(v5->isa);
      isa = v5[1].isa;
      if (isa)
        goto LABEL_11;
LABEL_12:
      v9 = *((_BYTE *)this + 24);
      if (v7)
      {
        v10 = _Block_copy(v7);
        v11 = v10;
        *(_QWORD *)&v14 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v14 + 1) = 3321888768;
        v15 = ___ZNK8dispatch8callbackIU13block_pointerFvN12AudioManager15AudioInputStateEEEclIJS2_EEEvDpT__block_invoke;
        v16 = &__block_descriptor_41_e8_32c75_ZTSN8dispatch5blockIU13block_pointerFvN12AudioManager15AudioInputStateEEEE_e5_v8__0l;
        if (v10)
        {
          v12 = _Block_copy(v10);
          v13 = 0;
        }
        else
        {
          v12 = 0;
          v13 = 1;
        }
      }
      else
      {
        v11 = 0;
        v12 = 0;
        *(_QWORD *)&v14 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v14 + 1) = 3321888768;
        v13 = 1;
        v15 = ___ZNK8dispatch8callbackIU13block_pointerFvN12AudioManager15AudioInputStateEEEclIJS2_EEEvDpT__block_invoke;
        v16 = &__block_descriptor_41_e8_32c75_ZTSN8dispatch5blockIU13block_pointerFvN12AudioManager15AudioInputStateEEEE_e5_v8__0l;
      }
      aBlock = v12;
      v18 = v9;
      dispatch_async(isa, &v14);
      if (aBlock)
        _Block_release(aBlock);
      if ((v13 & 1) == 0)
        _Block_release(v11);
      if (isa)
        dispatch_release(isa);
      if (v7)
        _Block_release(v7);
      v5 += 2;
      if (v5 == v6)
        return;
    }
    v7 = 0;
    isa = v5[1].isa;
    if (!isa)
      goto LABEL_12;
LABEL_11:
    dispatch_retain(isa);
    goto LABEL_12;
  }
}

void sub_1BF340CE4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<ServiceCtrl>::execute_wrapped<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1}>(ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1},std::default_delete<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  const void *v5;
  uint64_t v6;
  xpc_object_t v7;
  uint64_t v8;
  xpc_object_t v9;
  const void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  _QWORD *v15;
  _QWORD aBlock[4];
  void *v17;
  xpc_object_t object[5];
  void *v19;

  v2 = *a1;
  v3 = **a1;
  v4 = std::__tree<std::string>::find<std::string>(v3 + 120, (const void **)*a1 + 1);
  v5 = (const void *)v2[5];
  if ((uint64_t *)(v3 + 128) == v4)
  {
    if (!v5)
      goto LABEL_12;
    v7 = xpc_null_create();
    v8 = v2[5];
    object[0] = v7;
    v9 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v8 + 16))(v8, 3760250882, object);
    xpc_release(object[0]);
    xpc_release(v9);
  }
  else if (v5)
  {
    object[0] = 0;
    object[1] = object;
    object[2] = (xpc_object_t)0x3002000000;
    object[3] = __Block_byref_object_copy__4;
    object[4] = __Block_byref_object_dispose__4;
    v19 = (void *)0xAAAAAAAAAAAAAAAALL;
    v6 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZZN11ServiceCtrl13handleCommandERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictEN8dispatch5blockIU13block_pointerFviSA_EEEENKUlvE_clEv_block_invoke_10;
    aBlock[3] = &__block_descriptor_tmp_11_8;
    v17 = _Block_copy(v5);
    v19 = _Block_copy(aBlock);
    v14[0] = v6;
    v14[1] = 0x40000000;
    v14[2] = ___ZZN11ServiceCtrl13handleCommandERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictEN8dispatch5blockIU13block_pointerFviSA_EEEENKUlvE_clEv_block_invoke_12;
    v14[3] = &unk_1E7908E48;
    v14[4] = object;
    v15 = v14;
    dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>::operator()<xpc::dict const&,void({block_pointer})(int,xpc::dict)>(v4[7], (xpc_object_t)v2[4], (void **)&v15);
    _Block_object_dispose(object, 8);
    if (v19)
      _Block_release(v19);
    if (v17)
      _Block_release(v17);
  }
  else
  {
    object[0] = &__block_literal_global_6;
    dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>::operator()<xpc::dict const&,void({block_pointer})(int,xpc::dict)>(v4[7], (xpc_object_t)v2[4], object);
  }
  v10 = (const void *)v2[5];
  if (v10)
    _Block_release(v10);
LABEL_12:
  xpc_release((xpc_object_t)v2[4]);
  v2[4] = 0;
  if (*((char *)v2 + 31) < 0)
    operator delete((void *)v2[1]);
  operator delete(v2);
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(a1);
}

void sub_1BF340F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,xpc_object_t object,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *aBlock)
{
  _QWORD *v26;
  void *v27;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  xpc_release(object);
  xpc_release(v27);
  std::unique_ptr<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1},std::default_delete<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](&a9);
  v29 = (std::__shared_weak_count *)v26[2];
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  operator delete(v26);
  _Unwind_Resume(a1);
}

void dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>::operator()<xpc::dict const&,void({block_pointer})(int,xpc::dict)>(uint64_t a1, xpc_object_t object, void **a3)
{
  void *v5;
  void *aBlock;
  xpc_object_t objecta;

  objecta = object;
  if (!object)
  {
    objecta = xpc_null_create();
    v5 = *a3;
    if (!*a3)
      goto LABEL_6;
    goto LABEL_5;
  }
  xpc_retain(object);
  v5 = *a3;
  if (*a3)
LABEL_5:
    v5 = _Block_copy(v5);
LABEL_6:
  aBlock = v5;
  (*(void (**)(uint64_t, xpc_object_t *, void **))(a1 + 16))(a1, &objecta, &aBlock);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(objecta);
}

void sub_1BF341084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, xpc_object_t object)
{
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD v18[5];
  void *aBlock;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      if (!v9)
      {
LABEL_14:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 1174405120;
      v18[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_3;
      v18[3] = &__block_descriptor_tmp_11_5;
      v18[4] = v6;
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v11 = a1[5];
        v12 = (uint64_t *)(v6 + 120);
        aBlock = v10;
        v20 = v11;
        v13 = (std::__shared_weak_count *)a1[6];
        v21 = v13;
        if (!v13)
          goto LABEL_10;
      }
      else
      {
        v12 = (uint64_t *)(v6 + 120);
        aBlock = 0;
        v20 = v9;
        v13 = (std::__shared_weak_count *)a1[6];
        v21 = v13;
        if (!v13)
        {
LABEL_10:
          ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v12, (uint64_t)v18);
          if (v21)
            std::__shared_weak_count::__release_weak(v21);
          if (aBlock)
            _Block_release(aBlock);
          goto LABEL_14;
        }
      }
      p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
      do
        v15 = __ldxr(p_shared_weak_owners);
      while (__stxr(v15 + 1, p_shared_weak_owners));
      goto LABEL_10;
    }
  }
}

void ctu::SharedSynchronizable<RadioModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E7903920;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void HandDetectionManager::updateHandDetection(os_log_t *this)
{
  uint64_t v2;
  unsigned int v3;
  NSObject *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  os_log_t v11;
  os_log_t v12;
  uint64_t v13;
  void *v14;
  NSObject *isa;
  void *v16;
  const void *v17;
  void *v18;
  char v19;
  _BYTE v20[24];
  const char *v21;
  _BYTE aBlock[12];
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = *((char *)this + 88);
  if (v2 != 1 || *((_DWORD *)this + 34) != 1 || !*((_BYTE *)this + 112) || !*((_BYTE *)this + 152))
  {
    v3 = 0;
    v4 = *this;
    if (!os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
      goto LABEL_24;
LABEL_8:
    if (v2 > 3)
      v5 = "Unknown Audio Output";
    else
      v5 = off_1E79028C0[v2];
    v6 = "On";
    if (*((_BYTE *)this + 112))
      v7 = "On";
    else
      v7 = "Off";
    v8 = *((int *)this + 34);
    if (v8 > 2)
    {
      v9 = "Unknown";
      if (!*((_BYTE *)this + 152))
        v6 = "Off";
      if (v3 > 2)
        goto LABEL_18;
    }
    else
    {
      v9 = off_1E7902890[v8];
      if (!*((_BYTE *)this + 152))
        v6 = "Off";
      if (v3 > 2)
      {
LABEL_18:
        v10 = "Unknown Hand Detection";
LABEL_23:
        *(_DWORD *)v20 = 136316162;
        *(_QWORD *)&v20[4] = v5;
        *(_WORD *)&v20[12] = 2080;
        *(_QWORD *)&v20[14] = v7;
        *(_WORD *)&v20[22] = 2080;
        v21 = v9;
        *(_WORD *)aBlock = 2080;
        *(_QWORD *)&aBlock[2] = v6;
        *(_WORD *)&aBlock[10] = 2080;
        v23 = v10;
        _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I Audio State: %s, Proximity Sensor: %s, Motion State: %s, Tx State: %s -> Notifying Hand Detection: %s", v20, 0x34u);
        goto LABEL_24;
      }
    }
    v10 = off_1E79028A8[v3];
    goto LABEL_23;
  }
  v3 = *((_DWORD *)this + 16);
  v4 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
    goto LABEL_8;
LABEL_24:
  v11 = this[3];
  v12 = this[4];
  if (v11 != v12)
  {
    v13 = MEMORY[0x1E0C809B0];
    while (v11->isa)
    {
      v14 = _Block_copy(v11->isa);
      isa = v11[1].isa;
      if (isa)
        goto LABEL_29;
LABEL_30:
      if (v14)
      {
        v16 = _Block_copy(v14);
        v17 = v16;
        *(_QWORD *)v20 = v13;
        *(_QWORD *)&v20[8] = 1174405120;
        *(_QWORD *)&v20[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN23CMHandDetectionDelegate21CMHandDetectionResultEEEclIJS2_EEEvDpT__block_invoke;
        v21 = (const char *)&__block_descriptor_tmp_18_3;
        if (v16)
        {
          v18 = _Block_copy(v16);
          v19 = 0;
        }
        else
        {
          v18 = 0;
          v19 = 1;
        }
      }
      else
      {
        v17 = 0;
        v18 = 0;
        *(_QWORD *)v20 = v13;
        *(_QWORD *)&v20[8] = 1174405120;
        v19 = 1;
        *(_QWORD *)&v20[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN23CMHandDetectionDelegate21CMHandDetectionResultEEEclIJS2_EEEvDpT__block_invoke;
        v21 = (const char *)&__block_descriptor_tmp_18_3;
      }
      *(_QWORD *)aBlock = v18;
      *(_DWORD *)&aBlock[8] = v3;
      dispatch_async(isa, v20);
      if (*(_QWORD *)aBlock)
        _Block_release(*(const void **)aBlock);
      if ((v19 & 1) == 0)
        _Block_release(v17);
      if (isa)
        dispatch_release(isa);
      if (v14)
        _Block_release(v14);
      v11 += 2;
      if (v11 == v12)
        return;
    }
    v14 = 0;
    isa = v11[1].isa;
    if (!isa)
      goto LABEL_30;
LABEL_29:
    dispatch_retain(isa);
    goto LABEL_30;
  }
}

void sub_1BF3415E4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_3(_QWORD *a1)
{
  _QWORD *v2;
  const void *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  void *v11;
  void *v12;
  NSObject *v13;
  CommandDriverFactory *v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  std::string *v36;
  __int128 v37;
  NSObject *v38;
  uint64_t *v39;
  uint64_t v40;
  void **v41;
  uint64_t v42;
  void *v43;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  void *v47;
  void **v48;
  xpc_object_t v49;
  xpc_object_t v50;
  void *v51;
  dispatch_object_t object;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  _QWORD aBlock[6];
  std::__shared_weak_count *v60;
  void *v61;
  void *__p[4];
  std::string __dst;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)a1[4];
  if ((*(unsigned int (**)(_QWORD *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    v3 = (const void *)*MEMORY[0x1E0CFB720];
    v4 = strlen((const char *)*MEMORY[0x1E0CFB720]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v33 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v33 = v4 | 7;
      v34 = v33 + 1;
      p_dst = (std::string *)operator new(v33 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_63:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        v35 = (char *)operator new(0x28uLL);
        strcpy(v35, " rejected; ABM is shutting down ");
        v36 = std::string::append(&__dst, v35, 0x20uLL);
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        __p[2] = (void *)v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        operator delete(v35);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v38 = v2[11];
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
          {
LABEL_65:
            v40 = a1[5];
            v39 = a1 + 5;
            if (!v40)
            {
LABEL_89:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              return;
            }
LABEL_71:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v43 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v43 = __p[1];
            if (v43)
            {
              v44 = xpc_dictionary_create(0, 0, 0);
              if (v44 || (v44 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8A86C](v44) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v44);
                  v45 = v44;
                }
                else
                {
                  v45 = xpc_null_create();
                }
              }
              else
              {
                v45 = xpc_null_create();
                v44 = 0;
              }
              xpc_release(v44);
              v46 = xpc_null_create();
              v47 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
              xpc_release(v47);
              xpc_release(v46);
              if (SHIBYTE(__p[2]) >= 0)
                v48 = __p;
              else
                v48 = (void **)__p[0];
              v49 = xpc_string_create((const char *)v48);
              if (!v49)
                v49 = xpc_null_create();
              xpc_dictionary_set_value(v45, (const char *)*MEMORY[0x1E0CFB0D0], v49);
              v50 = xpc_null_create();
              xpc_release(v49);
              xpc_release(v50);
            }
            LODWORD(v57) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v39, (unsigned int *)&v57, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_89;
          }
        }
        else
        {
          v38 = v2[11];
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
            goto LABEL_65;
        }
        v41 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v41 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v41;
        _os_log_impl(&dword_1BF335000, v38, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v42 = a1[5];
        v39 = a1 + 5;
        if (!v42)
          goto LABEL_89;
        goto LABEL_71;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_63;
  }
  __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_7;
  aBlock[3] = &__block_descriptor_tmp_10_1;
  v8 = a1[6];
  v7 = (std::__shared_weak_count *)a1[7];
  aBlock[4] = v2;
  aBlock[5] = v8;
  aBlock[1] = 1174405120;
  v60 = v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
  }
  v11 = (void *)a1[5];
  if (v11)
    v11 = _Block_copy(v11);
  v61 = v11;
  v12 = _Block_copy(aBlock);
  v13 = v2[17];
  if (v13)
    dispatch_retain(v13);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
  v57 = 0xAAAAAAAAAAAAAAAALL;
  v58 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v14 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v15 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v14);
    v16 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v17 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v16;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v21 = (unint64_t *)((char *)__p[1] + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v15 = off_1ED70FD08;
  }
  v23 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  v53 = v15;
  v54 = *(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v24 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v15 + 16))(&v55, v15);
  v57 = 0;
  v58 = 0;
  if (v56)
  {
    v58 = std::__shared_weak_count::lock(v56);
    if (v58)
      v57 = v55;
    if (v56)
      std::__shared_weak_count::__release_weak(v56);
  }
  if (!v23)
    goto LABEL_37;
  v26 = (unint64_t *)&v23->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    v28 = v57;
    if (v57)
      goto LABEL_38;
  }
  else
  {
LABEL_37:
    v28 = v57;
    if (v57)
    {
LABEL_38:
      v29 = (void *)__dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__r.__words[0])
        v29 = _Block_copy(__dst.__r_.__value_.__l.__data_);
      v51 = v29;
      object = (dispatch_object_t)__dst.__r_.__value_.__l.__size_;
      if (__dst.__r_.__value_.__l.__size_)
        dispatch_retain((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
      (*(void (**)(unint64_t, void **))(*(_QWORD *)v28 + 96))(v28, &v51);
      if (object)
        dispatch_release(object);
      if (v51)
        _Block_release(v51);
    }
  }
  v30 = v58;
  if (v58)
  {
    v31 = (unint64_t *)&v58->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (__dst.__r_.__value_.__l.__size_)
    dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
  if (__dst.__r_.__value_.__r.__words[0])
    _Block_release(__dst.__r_.__value_.__l.__data_);
  if (v61)
    _Block_release(v61);
  if (v60)
    std::__shared_weak_count::__release_weak(v60);
}

void sub_1BF341BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t Service::isServerDown(Service *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v2)
    return 1;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 1;
  v4 = v3;
  v5 = *((_QWORD *)this + 1);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 80))(v5);
  else
    v6 = 1;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_1BF341DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void coex::XpcClient::handleMessage_sync(uint64_t a1, xpc::object *a2)
{
  NSObject *v4;
  xpc_object_t value;
  xpc_object_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  NSObject *v15;
  uint8_t *v16;
  xpc_object_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  xpc_object_t v21;
  xpc_object_t object;
  _BYTE v23[12];
  __int16 v24;
  uint8_t *v25;
  uint8_t buf[8];
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    xpc::object::to_string(a2);
    v18 = v27 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)v23 = 136315138;
    *(_QWORD *)&v23[4] = v18;
    _os_log_debug_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEBUG, "#D Got Message:\n%s", v23, 0xCu);
    if (v27 < 0)
      operator delete(*(void **)buf);
  }
  value = xpc_dictionary_get_value(*(xpc_object_t *)a2, "kMessageId");
  v6 = value;
  object = value;
  if (value)
  {
    xpc_retain(value);
  }
  else
  {
    v6 = xpc_null_create();
    object = v6;
  }
  if (MEMORY[0x1C3B8A86C](v6) == MEMORY[0x1E0C81350])
  {
    v15 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      xpc::object::to_string(a2);
      v16 = v27 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)v23 = 136315394;
      *(_QWORD *)&v23[4] = "kMessageId";
      v24 = 2080;
      v25 = v16;
      _os_log_error_impl(&dword_1BF335000, v15, OS_LOG_TYPE_ERROR, "Message was missing key %s from: %s", v23, 0x16u);
      if (v27 < 0)
        operator delete(*(void **)buf);
    }
  }
  else
  {
    v7 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    v8 = v7;
    v9 = *(_QWORD *)(a1 + 112);
    if (!v9)
      goto LABEL_16;
    v10 = a1 + 112;
    do
    {
      v11 = *(_DWORD *)(v9 + 32);
      v12 = v11 < v7;
      if (v11 >= v7)
        v13 = (uint64_t *)v9;
      else
        v13 = (uint64_t *)(v9 + 8);
      if (!v12)
        v10 = v9;
      v9 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 112 && *(_DWORD *)(v10 + 32) <= v7)
    {
      v17 = xpc_dictionary_get_value(*(xpc_object_t *)a2, "kSubId");
      *(_QWORD *)v23 = v17;
      if (v17)
        xpc_retain(v17);
      else
        *(_QWORD *)v23 = xpc_null_create();
      v19 = xpc::dyn_cast_or_default((xpc *)v23, 0);
      v20 = *(_QWORD *)(v10 + 40);
      v21 = xpc_dictionary_get_value(*(xpc_object_t *)a2, "kMessageArgs");
      *(_QWORD *)buf = v21;
      if (v21)
        xpc_retain(v21);
      else
        *(_QWORD *)buf = xpc_null_create();
      (*(void (**)(uint64_t, uint8_t *, uint64_t))(v20 + 16))(v20, buf, v19);
      xpc_release(*(xpc_object_t *)buf);
      xpc_release(*(xpc_object_t *)v23);
    }
    else
    {
LABEL_16:
      v14 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v8;
        _os_log_error_impl(&dword_1BF335000, v14, OS_LOG_TYPE_ERROR, "Unrecognized command %d", buf, 8u);
      }
    }
  }
  xpc_release(object);
}

void sub_1BF3420CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, xpc_object_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t ServiceManager::isServerDown(ServiceManager *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)this + 192);
  return v1 & 1;
}

void ___ZN17ABMServerInternal20handleNewClient_syncEN3xpc10connectionE_block_invoke(uint64_t a1, void **a2, void **a3)
{
  uint64_t v4;
  void *v5;
  void *v6;
  xpc_object_t object;
  xpc_object_t v8;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *a2;
  v8 = v5;
  if (!v5)
  {
    v8 = xpc_null_create();
    v6 = *a3;
    object = v6;
    if (v6)
      goto LABEL_3;
LABEL_5:
    object = xpc_null_create();
    goto LABEL_6;
  }
  xpc_retain(v5);
  v6 = *a3;
  object = v6;
  if (!v6)
    goto LABEL_5;
LABEL_3:
  xpc_retain(v6);
LABEL_6:
  (*(void (**)(uint64_t, xpc_object_t *, xpc_object_t *))(*(_QWORD *)v4 + 40))(v4, &v8, &object);
  xpc_release(object);
  object = 0;
  xpc_release(v8);
}

void sub_1BF3421F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
  xpc_release(object);
  xpc_release(a10);
  _Unwind_Resume(a1);
}

void ABMServerInternal::handleMessage_sync(uint64_t a1, xpc_object_t *a2, xpc::object *a3)
{
  xpc_object_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  __int128 *v13;
  NSObject *v14;
  _BOOL4 v15;
  xpc_object_t v16;
  uint64_t v17;
  uint64_t v18;
  xpc_object_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _xpc_connection_s *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::string *v27;
  void **v28;
  __int128 v29;
  int v30;
  std::string::size_type v31;
  xpc_connection_t v32;
  xpc_object_t v33;
  void *__p[2];
  char v35;
  std::string v36;
  __int128 *v37;
  std::__shared_weak_count *v38;
  uint8_t buf[4];
  std::string *v40;
  __int16 v41;
  void **v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v37 = 0;
    v38 = 0;
    v7 = (_QWORD *)(a1 + 152);
    v8 = *(_QWORD **)(a1 + 152);
    if (!v8)
      goto LABEL_15;
  }
  else
  {
    v6 = xpc_null_create();
    v37 = 0;
    v38 = 0;
    v7 = (_QWORD *)(a1 + 152);
    v8 = *(_QWORD **)(a1 + 152);
    if (!v8)
    {
LABEL_15:
      v13 = 0;
      goto LABEL_16;
    }
  }
  v9 = v7;
  do
  {
    v10 = v8[4];
    v11 = v10 >= (unint64_t)v6;
    if (v10 >= (unint64_t)v6)
      v12 = v8;
    else
      v12 = v8 + 1;
    if (v11)
      v9 = v8;
    v8 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v9 == v7 || (unint64_t)v6 < v9[4])
    goto LABEL_15;
  v13 = (__int128 *)v9[5];
  v20 = (std::__shared_weak_count *)v9[6];
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  v37 = v13;
  v38 = v20;
LABEL_16:
  xpc_release(v6);
  v14 = *(NSObject **)(a1 + 112);
  v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
  if (v13)
  {
    if (!v15)
      goto LABEL_21;
    if (*((char *)v13 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
    }
    else
    {
      v29 = *v13;
      v36.__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
      *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v29;
    }
    v30 = SHIBYTE(v36.__r_.__value_.__r.__words[2]);
    v31 = v36.__r_.__value_.__r.__words[0];
    xpc::object::to_string(a3);
    v27 = &v36;
    if (v30 < 0)
      v27 = (std::string *)v31;
    if (v35 >= 0)
      v28 = __p;
    else
      v28 = (void **)__p[0];
  }
  else
  {
    if (!v15)
      goto LABEL_21;
    xpc::object::to_string((xpc::object *)a2);
    xpc::object::to_string(a3);
    v27 = &v36;
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v27 = (std::string *)v36.__r_.__value_.__r.__words[0];
    if (v35 >= 0)
      v28 = __p;
    else
      v28 = (void **)__p[0];
  }
  *(_DWORD *)buf = 136315394;
  v40 = v27;
  v41 = 2080;
  v42 = v28;
  _os_log_debug_impl(&dword_1BF335000, v14, OS_LOG_TYPE_DEBUG, "#D Message from %s:\n%s", buf, 0x16u);
  if (v35 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
LABEL_21:
  v16 = *(xpc_object_t *)a3;
  v36.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  if (v16)
  {
    xpc_retain(v16);
  }
  else
  {
    v16 = xpc_null_create();
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  }
  v17 = MEMORY[0x1C3B8A86C](v16);
  v18 = MEMORY[0x1E0C812F8];
  if (v17 == MEMORY[0x1E0C812F8])
  {
    v19 = *a2;
    v33 = v19;
    if (v19)
    {
      xpc_retain(v19);
    }
    else
    {
      v19 = xpc_null_create();
      v33 = v19;
    }
    ABMServerInternal::handleInternalMessage_sync(a1, &v33, (xpc_object_t *)&v36.__r_.__value_.__l.__data_);
    xpc_release(v19);
    v33 = 0;
    v16 = (xpc_object_t)v36.__r_.__value_.__r.__words[0];
  }
  if (MEMORY[0x1C3B8A86C](v16) == v18)
  {
    v23 = (_xpc_connection_s *)*a2;
    v32 = v23;
    if (v23)
    {
      xpc_retain(v23);
    }
    else
    {
      v23 = (_xpc_connection_s *)xpc_null_create();
      v32 = v23;
    }
    ABMServerInternal::handlePublicMessage_sync(a1, &v32, (xpc_object_t *)&v36.__r_.__value_.__l.__data_);
    xpc_release(v23);
    v32 = 0;
  }
  xpc_release(v36.__r_.__value_.__l.__data_);
  v24 = v38;
  if (v38)
  {
    v25 = (unint64_t *)&v38->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_1BF34258C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_1BF3425AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object)
{
  void *v15;

  xpc_release(v15);
  xpc_release(object);
  JUMPOUT(0x1BF342628);
}

void sub_1BF3425CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  xpc_release(v15);
  xpc_release(a15);
  JUMPOUT(0x1BF342628);
}

void sub_1BF342638(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ABMServerInternal::handleInternalMessage_sync(uint64_t a1, xpc_object_t *a2, xpc_object_t *a3)
{
  xpc_object_t value;
  int v7;
  size_t v8;
  void **v9;
  void **v10;
  void **v11;
  void **v12;
  xpc_object_t v13;
  const object *v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  const object *v18;
  xpc_object_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  BOOL v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  __int128 v28;
  _QWORD *v29;
  xpc_object_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  _QWORD *v34;
  xpc_object_t v35;
  xpc_object_t v36;
  xpc_object_t v37;
  NSObject *v38;
  const void *v39;
  CFTypeID v40;
  const void *v41;
  uint64_t (*v42)(uint64_t);
  xpc_object_t v43;
  int v44;
  const void *v45;
  CFTypeID v46;
  const void *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  uint64_t (*v50)(uint64_t);
  xpc_object_t v51;
  xpc_object_t *v52;
  size_t v53;
  unint64_t *v54;
  unint64_t v55;
  xpc_object_t reply;
  xpc_object_t v57;
  xpc_object_t v58;
  xpc_object_t v59;
  NSObject *v60;
  xpc_object_t v61;
  xpc_object_t v62;
  xpc_object_t v63;
  size_t v64;
  void **v65;
  xpc_object_t v66;
  void **v67;
  xpc_object_t *v68;
  _QWORD v69[5];
  xpc_object_t v70;
  const void *v71;
  xpc_object_t v72;
  const void *v73;
  xpc_object_t v74;
  xpc_object_t v75;
  xpc_object_t object[3];
  void *__p[3];
  uint8_t buf[24];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  memset(__p, 170, sizeof(__p));
  value = xpc_dictionary_get_value(*a3, kKeyCommand[0]);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  memset(buf, 0, sizeof(buf));
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  v7 = SHIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0)
    v8 = HIBYTE(__p[2]);
  else
    v8 = (size_t)__p[1];
  if (v8 == strlen(kCommandCheckIn[0]))
  {
    v9 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
    if (!memcmp(v9, kCommandCheckIn[0], v8))
    {
      memset(object, 170, sizeof(object));
      v15 = xpc_dictionary_get_value(*a3, kKeyClientName[0]);
      v75 = v15;
      if (v15)
        xpc_retain(v15);
      else
        v75 = xpc_null_create();
      memset(buf, 0, sizeof(buf));
      xpc::dyn_cast_or_default();
      if ((char)buf[23] < 0)
        operator delete(*(void **)buf);
      xpc_release(v75);
      memset(buf, 170, 16);
      v19 = *a2;
      if (*a2)
      {
        xpc_retain(*a2);
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        v20 = (_QWORD *)(a1 + 152);
        v21 = *(_QWORD **)(a1 + 152);
        if (!v21)
          goto LABEL_52;
      }
      else
      {
        v19 = xpc_null_create();
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        v20 = (_QWORD *)(a1 + 152);
        v21 = *(_QWORD **)(a1 + 152);
        if (!v21)
          goto LABEL_52;
      }
      v22 = v20;
      do
      {
        v23 = v21[4];
        v24 = v23 >= (unint64_t)v19;
        if (v23 >= (unint64_t)v19)
          v25 = v21;
        else
          v25 = v21 + 1;
        if (v24)
          v22 = v21;
        v21 = (_QWORD *)*v25;
      }
      while (*v25);
      if (v22 != v20 && (unint64_t)v19 >= v22[4])
      {
        v27 = v22[5];
        v26 = (std::__shared_weak_count *)v22[6];
        if (v26)
        {
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          do
            v49 = __ldxr(p_shared_owners);
          while (__stxr(v49 + 1, p_shared_owners));
        }
        *(_QWORD *)buf = v27;
        *(_QWORD *)&buf[8] = v26;
        goto LABEL_53;
      }
LABEL_52:
      v26 = 0;
      v27 = 0;
LABEL_53:
      xpc_release(v19);
      if (v27)
      {
        if ((xpc_object_t *)v27 != object)
        {
          if (*(char *)(v27 + 23) < 0)
          {
            if (SHIBYTE(object[2]) >= 0)
              v52 = object;
            else
              v52 = (xpc_object_t *)object[0];
            if (SHIBYTE(object[2]) >= 0)
              v53 = HIBYTE(object[2]);
            else
              v53 = (size_t)object[1];
            std::string::__assign_no_alias<false>((void **)v27, v52, v53);
          }
          else if ((HIBYTE(object[2]) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>((_QWORD *)v27, object[0], (size_t)object[1]);
          }
          else
          {
            v28 = *(_OWORD *)object;
            *(xpc_object_t *)(v27 + 16) = object[2];
            *(_OWORD *)v27 = v28;
          }
        }
        *(_BYTE *)(v27 + 24) = 1;
      }
      if (v26)
      {
        v54 = (unint64_t *)&v26->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      if (SHIBYTE(object[2]) < 0)
        operator delete(object[0]);
      v44 = 0;
      goto LABEL_135;
    }
  }
  if (v8 != strlen(kCommandCheckOut)
    || (v7 >= 0 ? (v10 = __p) : (v10 = (void **)__p[0]), memcmp(v10, kCommandCheckOut, v8)))
  {
    if (v8 != strlen(kCommandEventsOn[0])
      || (v7 >= 0 ? (v11 = __p) : (v11 = (void **)__p[0]), memcmp(v11, kCommandEventsOn[0], v8)))
    {
      if (v8 != strlen(kCommandEventsOff[0]))
        goto LABEL_161;
      v12 = v7 >= 0 ? __p : (void **)__p[0];
      if (memcmp(v12, kCommandEventsOff[0], v8))
        goto LABEL_161;
      v13 = xpc_dictionary_get_value(*a3, kKeyEventsList[0]);
      object[0] = v13;
      if (v13)
        xpc_retain(v13);
      else
        object[0] = xpc_null_create();
      xpc::bridge((xpc *)object, v14);
      v45 = *(const void **)buf;
      if (!*(_QWORD *)buf)
        goto LABEL_102;
      v46 = CFGetTypeID(*(CFTypeRef *)buf);
      if (v46 == CFArrayGetTypeID())
      {
        CFRetain(v45);
        v47 = *(const void **)buf;
        if (!*(_QWORD *)buf)
          goto LABEL_102;
      }
      else
      {
        v45 = 0;
        v47 = *(const void **)buf;
        if (!*(_QWORD *)buf)
        {
LABEL_102:
          xpc_release(object[0]);
          v50 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
          if (!v45)
            v50 = 0;
          if (v50)
          {
            v51 = *a2;
            v72 = v51;
            if (v51)
            {
              xpc_retain(v51);
              v71 = v45;
              if (v45)
              {
LABEL_107:
                CFRetain(v45);
                ABMServerInternal::registerNotification(a1, &v72, 0, &v71);
                CFRelease(v45);
                v51 = v72;
                goto LABEL_123;
              }
            }
            else
            {
              v51 = xpc_null_create();
              v71 = v45;
              v72 = v51;
              if (v45)
                goto LABEL_107;
            }
            ABMServerInternal::registerNotification(a1, &v72, 0, &v71);
LABEL_123:
            xpc_release(v51);
            v44 = 0;
            v72 = 0;
            if (!v45)
              goto LABEL_135;
            goto LABEL_124;
          }
          v44 = -534716414;
          if (v45)
LABEL_124:
            CFRelease(v45);
LABEL_135:
          reply = xpc_dictionary_create_reply(*a3);
          if (reply || (reply = xpc_null_create()) != 0)
          {
            if (MEMORY[0x1C3B8A86C](reply) == MEMORY[0x1E0C812F8])
            {
              xpc_retain(reply);
              v57 = reply;
            }
            else
            {
              v57 = xpc_null_create();
            }
          }
          else
          {
            v57 = xpc_null_create();
            reply = 0;
          }
          xpc_release(reply);
          v58 = xpc_int64_create(v44);
          if (!v58)
            v58 = xpc_null_create();
          xpc_dictionary_set_value(v57, kKeyCommandResult[0], v58);
          v59 = xpc_null_create();
          xpc_release(v58);
          xpc_release(v59);
          v60 = *(NSObject **)(a1 + 112);
          if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
          {
            v67 = __p;
            if (SHIBYTE(__p[2]) < 0)
              v67 = (void **)__p[0];
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v67;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v44;
            _os_log_debug_impl(&dword_1BF335000, v60, OS_LOG_TYPE_DEBUG, "#D Replying to client's command: %s, with return code: 0x%x", buf, 0x12u);
          }
          xpc_connection_send_message((xpc_connection_t)*a2, v57);
          v61 = xpc_null_create();
          v62 = xpc_null_create();
          v63 = *a3;
          *a3 = v61;
          xpc_release(v63);
          xpc_release(v62);
          if (SHIBYTE(__p[2]) >= 0)
            v64 = HIBYTE(__p[2]);
          else
            v64 = (size_t)__p[1];
          if (v64 == strlen(kCommandEventsOn[0]))
          {
            v65 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
            if (!memcmp(v65, kCommandEventsOn[0], v64) && *(_DWORD *)(a1 + 192) == 1)
            {
              v69[0] = MEMORY[0x1E0C809B0];
              v69[1] = 1174405120;
              v69[2] = ___ZN17ABMServerInternal26handleInternalMessage_syncEN3xpc10connectionERNS0_4dictE_block_invoke;
              v69[3] = &__block_descriptor_tmp_18_0;
              v66 = *a2;
              v69[4] = a1;
              v70 = v66;
              if (v66)
                xpc_retain(v66);
              else
                v70 = xpc_null_create();
              ctu::SharedSynchronizable<ctu::XpcServer>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v69);
              xpc_release(v70);
              v70 = 0;
            }
          }
          xpc_release(v57);
          goto LABEL_161;
        }
      }
      CFRelease(v47);
      goto LABEL_102;
    }
    v17 = xpc_dictionary_get_value(*a3, kKeyEventsList[0]);
    object[0] = v17;
    if (v17)
      xpc_retain(v17);
    else
      object[0] = xpc_null_create();
    xpc::bridge((xpc *)object, v18);
    v39 = *(const void **)buf;
    if (*(_QWORD *)buf)
    {
      v40 = CFGetTypeID(*(CFTypeRef *)buf);
      if (v40 == CFArrayGetTypeID())
      {
        CFRetain(v39);
        v41 = *(const void **)buf;
        if (!*(_QWORD *)buf)
          goto LABEL_83;
      }
      else
      {
        v39 = 0;
        v41 = *(const void **)buf;
        if (!*(_QWORD *)buf)
          goto LABEL_83;
      }
      CFRelease(v41);
    }
LABEL_83:
    xpc_release(object[0]);
    v42 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    if (!v39)
      v42 = 0;
    if (!v42)
    {
      v44 = -534716414;
      if (!v39)
        goto LABEL_135;
LABEL_113:
      CFRelease(v39);
      goto LABEL_135;
    }
    v43 = *a2;
    v74 = v43;
    if (v43)
    {
      xpc_retain(v43);
      v73 = v39;
      if (v39)
      {
LABEL_88:
        CFRetain(v39);
        ABMServerInternal::registerNotification(a1, &v74, 1, &v73);
        CFRelease(v39);
        v43 = v74;
        goto LABEL_112;
      }
    }
    else
    {
      v43 = xpc_null_create();
      v73 = v39;
      v74 = v43;
      if (v39)
        goto LABEL_88;
    }
    ABMServerInternal::registerNotification(a1, &v74, 1, &v73);
LABEL_112:
    xpc_release(v43);
    v44 = 0;
    v74 = 0;
    if (!v39)
      goto LABEL_135;
    goto LABEL_113;
  }
  memset(object, 170, sizeof(object));
  v16 = xpc_dictionary_get_value(*a3, kKeyClientName[0]);
  v75 = v16;
  if (v16)
    xpc_retain(v16);
  else
    v75 = xpc_null_create();
  memset(buf, 0, sizeof(buf));
  xpc::dyn_cast_or_default();
  if ((char)buf[23] < 0)
    operator delete(*(void **)buf);
  xpc_release(v75);
  v29 = *(_QWORD **)(a1 + 152);
  if (v29)
  {
    v30 = *a2;
    v31 = a1 + 152;
    do
    {
      v32 = v29[4];
      v33 = v32 >= (unint64_t)v30;
      if (v32 >= (unint64_t)v30)
        v34 = v29;
      else
        v34 = v29 + 1;
      if (v33)
        v31 = (uint64_t)v29;
      v29 = (_QWORD *)*v34;
    }
    while (*v34);
    if (v31 != a1 + 152 && (unint64_t)v30 >= *(_QWORD *)(v31 + 32))
      std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::erase((_QWORD *)(a1 + 144), v31);
  }
  v35 = xpc_null_create();
  v36 = xpc_null_create();
  v37 = *a3;
  *a3 = v35;
  xpc_release(v37);
  xpc_release(v36);
  v38 = *(NSObject **)(a1 + 112);
  if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
  {
    if ((SHIBYTE(object[2]) & 0x80000000) == 0)
      goto LABEL_161;
    goto LABEL_75;
  }
  v68 = object;
  if (SHIBYTE(object[2]) < 0)
    v68 = (xpc_object_t *)object[0];
  *(_DWORD *)buf = 136315138;
  *(_QWORD *)&buf[4] = v68;
  _os_log_debug_impl(&dword_1BF335000, v38, OS_LOG_TYPE_DEBUG, "#D Client '%s' checked out", buf, 0xCu);
  if (SHIBYTE(object[2]) < 0)
LABEL_75:
    operator delete(object[0]);
LABEL_161:
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
}

void sub_1BF342FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, xpc_object_t object,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ABMServerInternal::handlePublicMessage_sync(uint64_t a1, xpc_connection_t *a2, xpc_object_t *a3)
{
  xpc_object_t reply;
  uint64_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t value;
  uint64_t v14;
  xpc_object_t v15;
  xpc_connection_t v16;
  void *v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  _QWORD v25[5];
  xpc_object_t v26;
  xpc_object_t v27;
  void *v28;
  xpc_object_t v29;
  xpc_object_t object;
  void *__p[6];

  reply = xpc_dictionary_create_reply(*a3);
  v7 = MEMORY[0x1E0C812F8];
  if (reply || (reply = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](reply) == v7)
    {
      xpc_retain(reply);
      v8 = reply;
    }
    else
    {
      v8 = xpc_null_create();
    }
  }
  else
  {
    v8 = xpc_null_create();
    reply = 0;
  }
  xpc_release(reply);
  if (*(_DWORD *)(a1 + 192) == 5)
  {
    if (MEMORY[0x1C3B8A86C](v8) == v7)
    {
      v9 = xpc_int64_create(-534716415);
      if (!v9)
        v9 = xpc_null_create();
      xpc_dictionary_set_value(v8, kKeyCommandResult[0], v9);
      v10 = xpc_null_create();
      xpc_release(v9);
      xpc_release(v10);
      v11 = xpc_dictionary_create(0, 0, 0);
      if (v11 || (v11 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8A86C](v11) == v7)
        {
          xpc_retain(v11);
          v12 = v11;
        }
        else
        {
          v12 = xpc_null_create();
        }
      }
      else
      {
        v12 = xpc_null_create();
        v11 = 0;
      }
      xpc_release(v11);
      v18 = xpc_string_create("Server not available");
      if (!v18)
        v18 = xpc_null_create();
      xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E0CFB0D0], v18);
      v19 = xpc_null_create();
      xpc_release(v18);
      xpc_release(v19);
      if (v12)
      {
        xpc_retain(v12);
        v20 = v12;
      }
      else
      {
        v20 = xpc_null_create();
      }
      xpc_dictionary_set_value(v8, kKeyCommandData[0], v20);
      v21 = xpc_null_create();
      xpc_release(v20);
      xpc_release(v21);
      xpc_connection_send_message(*a2, v8);
      xpc_release(v12);
    }
    goto LABEL_38;
  }
  memset(__p, 170, 24);
  value = xpc_dictionary_get_value(*a3, kKeyCommand[0]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  memset(&__p[3], 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(object);
  v14 = *(_QWORD *)(a1 + 288);
  v15 = *a3;
  v29 = v15;
  if (v15)
    xpc_retain(v15);
  else
    v29 = xpc_null_create();
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 1174405120;
  v25[2] = ___ZN17ABMServerInternal24handlePublicMessage_syncEN3xpc10connectionERNS0_4dictE_block_invoke;
  v25[3] = &__block_descriptor_tmp_21;
  v25[4] = a1;
  v26 = v8;
  if (!v8)
  {
    v26 = xpc_null_create();
    v16 = *a2;
    v27 = v16;
    if (v16)
      goto LABEL_23;
LABEL_25:
    v27 = xpc_null_create();
    goto LABEL_26;
  }
  xpc_retain(v8);
  v16 = *a2;
  v27 = v16;
  if (!v16)
    goto LABEL_25;
LABEL_23:
  xpc_retain(v16);
LABEL_26:
  v17 = _Block_copy(v25);
  v28 = v17;
  ServiceManager::runCommand(v14, (uint64_t)__p, &v29, &v28);
  if (v17)
    _Block_release(v17);
  xpc_release(v29);
  v29 = 0;
  xpc_release(v27);
  v27 = 0;
  xpc_release(v26);
  v26 = 0;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
LABEL_38:
  v22 = xpc_null_create();
  v23 = xpc_null_create();
  v24 = *a3;
  *a3 = v22;
  xpc_release(v24);
  xpc_release(v23);
  xpc_release(v8);
}

void sub_1BF343568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t a14, xpc_object_t object, uint64_t a16, xpc_object_t a17, xpc_object_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  void *v25;

  xpc_release(v25);
  xpc_release(v24);
  _Unwind_Resume(a1);
}

void ServiceManager::runCommand(uint64_t a1, uint64_t a2, void **a3, void **a4)
{
  uint64_t v6;
  void *v7;
  void *v8;
  void *aBlock;
  xpc_object_t object;

  v6 = *(_QWORD *)(a1 + 168);
  v7 = *a3;
  object = v7;
  if (!v7)
  {
    object = xpc_null_create();
    v8 = *a4;
    if (!*a4)
      goto LABEL_6;
    goto LABEL_5;
  }
  xpc_retain(v7);
  v8 = *a4;
  if (*a4)
LABEL_5:
    v8 = _Block_copy(v8);
LABEL_6:
  aBlock = v8;
  ServiceCtrl::handleCommand(v6, a2, &object, &aBlock);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(object);
}

void sub_1BF343740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, xpc_object_t object)
{
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ServiceCtrl::handleCommand(uint64_t a1, uint64_t a2, void **a3, void **a4)
{
  void *v7;
  void *v8;
  uint64_t v9;
  std::string __p;
  xpc_object_t object;
  void *aBlock;

  v9 = a1;
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    __p = *(std::string *)a2;
    v7 = *a3;
    object = v7;
    if (v7)
      goto LABEL_3;
LABEL_6:
    object = xpc_null_create();
    v8 = *a4;
    if (!*a4)
      goto LABEL_8;
    goto LABEL_7;
  }
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  v7 = *a3;
  object = v7;
  if (!v7)
    goto LABEL_6;
LABEL_3:
  xpc_retain(v7);
  v8 = *a4;
  if (*a4)
LABEL_7:
    v8 = _Block_copy(v8);
LABEL_8:
  aBlock = v8;
  ctu::SharedSynchronizable<ServiceCtrl>::execute_wrapped<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1}>((uint64_t *)(a1 + 72), (uint64_t)&v9);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void ___ZN9SARModule28initializeHandDetection_syncEv_block_invoke(_QWORD *a1, unsigned __int8 a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unsigned __int8 v11;
  NSObject *v12;
  AppleSARHelper *v13;
  AppleSARHelper *v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  _QWORD *v32;
  NSObject *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  NSObject *v38;
  char v39;
  unsigned int v40;
  uint8_t buf[16];
  unint64_t v42[2];

  v42[1] = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  if (!v6)
    return;
  v7 = v6;
  v8 = a1[5];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
  {
    if (!v8)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    if (!v8)
      return;
  }
  if (*(_BYTE *)(v5 + 264))
    v11 = a2;
  else
    v11 = 0;
  *(_BYTE *)(v5 + 168) = v11;
  v12 = *(NSObject **)(v5 + 80);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v11;
    _os_log_impl(&dword_1BF335000, v12, OS_LOG_TYPE_DEFAULT, "#I Sending Grip State: 0x%x\n", buf, 8u);
  }
  v13 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v14 = (AppleSARHelper *)off_1ED70FCB8;
  if (!off_1ED70FCB8)
  {
    AppleSARHelper::create_default_global(v13);
    v15 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v16 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
    off_1ED70FCB8 = v15;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v20 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v14 = (AppleSARHelper *)off_1ED70FCB8;
  }
  v22 = (std::__shared_weak_count *)*(&off_1ED70FCB8 + 1);
  if (*(&off_1ED70FCB8 + 1))
  {
    v23 = (unint64_t *)(*(&off_1ED70FCB8 + 1) + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v39 = *(_BYTE *)(v5 + 168);
  if (*((_DWORD *)v14 + 1))
  {
    *(_QWORD *)buf = 0;
    v42[0] = 0;
    v40 = 1;
    v25 = AppleSARHelper::callUserClientMethod(v14, 7, (const unint64_t *)buf, 1, &v39, 1, v42, &v40, &v39, 1uLL);
    if (!v22)
      goto LABEL_36;
  }
  else
  {
    v25 = 0;
    if (!v22)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v22->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    if ((v25 & 1) != 0)
      goto LABEL_37;
    goto LABEL_48;
  }
LABEL_36:
  if ((v25 & 1) != 0)
  {
LABEL_37:
    if (*(unsigned __int8 *)(v5 + 169) != *(unsigned __int8 *)(v5 + 168) || !*(_QWORD *)(v5 + 304))
    {
      v28 = *(std::__shared_weak_count **)(v5 + 56);
      if (!v28 || (v29 = *(_QWORD *)(v5 + 48), (v30 = std::__shared_weak_count::lock(v28)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v31 = v30;
      v32 = operator new(8uLL);
      *v32 = v5;
      v33 = *(NSObject **)(v5 + 64);
      v34 = (unint64_t *)&v31->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      v36 = operator new(0x18uLL);
      *v36 = v32;
      v36[1] = v29;
      v36[2] = v31;
      dispatch_async_f(v33, v36, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_28initializeHandDetection_syncEvEUb5_E3__9EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
      do
        v37 = __ldaxr(v34);
      while (__stlxr(v37 - 1, v34));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    return;
  }
LABEL_48:
  v38 = *(NSObject **)(v5 + 80);
  if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF335000, v38, OS_LOG_TYPE_ERROR, "Failed to set SAR Fusion State!", buf, 2u);
  }
}

void sub_1BF343C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN4coex5SubIdEEEES8_SA__block_invoke(uint64_t a1)
{
  _QWORD *v2;
  std::runtime_error_vtbl *v3;
  uint64_t v4;
  void (*v5)(_QWORD *, std::runtime_error *, uint64_t);
  uint64_t *v6;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  CFTypeRef *v9;
  void *v10;
  std::runtime_error cf;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = **(std::runtime_error_vtbl ***)(a1 + 40);
  if (v3)
    CFRetain(v3);
  if (!*v2)
  {
    std::runtime_error::runtime_error(&cf, "call to empty boost::function");
    cf.__vftable = (std::runtime_error_vtbl *)&unk_1E78FE000;
    boost::throw_exception<boost::bad_function_call>(&cf);
  }
  v4 = **(unsigned int **)(a1 + 48);
  v5 = *(void (**)(_QWORD *, std::runtime_error *, uint64_t))((*v2 & 0xFFFFFFFFFFFFFFFELL) + 8);
  cf.__vftable = v3;
  v5(v2 + 1, &cf, v4);
  if (cf.__vftable)
    CFRelease(cf.__vftable);
  v6 = *(uint64_t **)(a1 + 32);
  if (v6)
  {
    v7 = *v6;
    if (*v6)
    {
      if ((v7 & 1) == 0)
      {
        v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 & 0xFFFFFFFFFFFFFFFELL);
        if (v8)
          v8(v6 + 1, v6 + 1, 2);
      }
      *v6 = 0;
    }
    operator delete(v6);
  }
  v9 = *(CFTypeRef **)(a1 + 40);
  if (v9)
  {
    if (*v9)
      CFRelease(*v9);
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 48);
  if (v10)
    operator delete(v10);
}

void sub_1BF343D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, std::runtime_error a11)
{
  std::runtime_error::~runtime_error(&a11);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  _Unwind_Resume(a1);
}

void sub_1BF343D84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1BF343DA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void boost::detail::function::void_function_obj_invoker2<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::invoke(uint64_t *a1, CFTypeRef *a2)
{
  uint64_t v2;
  CFTypeRef cf;

  v2 = *a1;
  cf = *a2;
  *a2 = 0;
  (*(void (**)(void))(v2 + 16))();
  if (cf)
    CFRelease(cf);
}

void sub_1BF343E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void ___ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE13connect_eventIN5boost8signals26signalIFvNS_2cf11CFSharedRefIK14__CFDictionaryEENS1_5SubIdEENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionISF_EENSL_IFvRKNS7_10connectionESD_SE_EEENS7_5mutexEEES3_vJSD_SE_EEEDTcl7connectfp_cvNSI_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSY_S10_E_block_invoke(_QWORD *a1, const void **a2, uint64_t a3)
{
  uint64_t v4;
  void (*v5)(_QWORD *, CFTypeRef *, uint64_t);
  _QWORD *v6;
  const void *v7;
  CFTypeRef cf;

  v5 = (void (*)(_QWORD *, CFTypeRef *, uint64_t))a1[5];
  v4 = a1[6];
  v6 = (_QWORD *)(a1[4] + (v4 >> 1) - 72);
  if ((v4 & 1) != 0)
    v5 = *(void (**)(_QWORD *, CFTypeRef *, uint64_t))(*v6 + v5);
  v7 = *a2;
  cf = v7;
  if (v7)
    CFRetain(v7);
  v5(v6, &cf, a3);
  if (cf)
    CFRelease(cf);
}

void sub_1BF343EA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void coex::Module::State::handleCommandDriverStateUpdate_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  const __CFDictionary *v4;
  uint64_t (*v5)(uint64_t);
  ctu::cf::map_adapter *v7;
  uint64_t v8;
  const void *v9;
  uint64_t (*v10)(uint64_t);
  const __CFDictionary *v11;
  NSObject *v12;
  uint64_t (*v13)(uint64_t);
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  const void *v37;
  const void *v38;
  const void *v39;
  const void *v40;
  const void *v41;
  const void *v42;
  const void *v43;
  const void *v44;
  const void *v45;
  const void *v46;
  const void *v47;
  const void *v48;
  const void *v49;
  const void *v50;
  const void *v51;
  uint64_t v52;
  void *v53;
  const __CFDictionary *v54;
  uint64_t (*v55)(uint64_t);
  CFMutableDictionaryRef v56;
  __CFDictionary *v57;
  const void *v58;
  const void *v59;
  const void *v60;
  uint64_t v61;
  void *v62;
  const __CFString *v63;
  const __CFDictionary *v64;
  uint64_t (*v65)(uint64_t);
  const void **v66;
  CFMutableDictionaryRef v67;
  __CFDictionary *v68;
  const void *v69;
  const void *v70;
  const void *v71;
  const void *v72;
  const void *v73;
  const void *v74;
  const void *v75;
  const void *v76;
  const void *v77;
  uint64_t v78;
  void *v79;
  const __CFDictionary *v80;
  uint64_t (*v81)(uint64_t);
  CFMutableDictionaryRef v82;
  __CFDictionary *v83;
  const void *v84;
  const void *v85;
  const void *v86;
  const void *v87;
  const void *v88;
  const void *v89;
  const void *v90;
  const void *v91;
  const void *v92;
  const void *v93;
  const void *v94;
  const void *v95;
  const void *v96;
  const void *v97;
  const void *v98;
  uint64_t v99;
  void *v100;
  const __CFDictionary *v101;
  uint64_t (*v102)(uint64_t);
  CFMutableDictionaryRef v103;
  __CFDictionary *v104;
  const void *v105;
  const void *v106;
  const void *v107;
  const void *v108;
  const void *v109;
  const void *v110;
  uint64_t v111;
  void *v112;
  const __CFDictionary *v113;
  uint64_t (*v114)(uint64_t);
  CFMutableDictionaryRef v115;
  __CFDictionary *v116;
  const void *v117;
  const void *v118;
  const void *v119;
  const void *v120;
  const void *v121;
  const void *v122;
  const void *v123;
  const void *v124;
  const void *v125;
  uint64_t v126;
  void *v127;
  const void *v128;
  uint64_t (*v129)(uint64_t);
  uint64_t v130;
  const void *v131;
  const __CFAllocator *v132;
  CFMutableDictionaryRef v133;
  __CFDictionary *v134;
  const void *v135;
  const void *v136;
  const void *v137;
  const void *v138;
  const void *v139;
  const void *v140;
  const void *v141;
  const void *v142;
  const void *v143;
  const void *v144;
  const void *v145;
  const void *v146;
  const void *v147;
  const void *v148;
  const void *v149;
  const void *v150;
  const void *v151;
  const void *v152;
  const void *v153;
  const void *v154;
  const void *v155;
  const void *v156;
  const void *v157;
  const void *v158;
  const void *v159;
  const void *v160;
  const void *v161;
  const void *v162;
  const void *v163;
  const void *v164;
  const void *v165;
  const void *v166;
  const void *v167;
  const void *v168;
  const void *v169;
  const void *v170;
  uint64_t v171;
  void *v172;
  CFMutableDictionaryRef v173;
  __CFDictionary *v174;
  const void *v175;
  const void *v176;
  const void *v177;
  const void *v178;
  void *v179;
  uint64_t (*v180)(uint64_t);
  _BOOL4 v181;
  uint64_t (**v182)(_QWORD, const void *);
  unint64_t v183;
  uint64_t v184;
  uint8_t buf[32];

  v4 = *a2;
  if (v4)
    v5 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  else
    v5 = 0;
  if (v5)
  {
    memset(buf, 170, 16);
    v7 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, v4);
    v184 = 0;
    v8 = ctu::cf::map_adapter::copyCFDictionaryRef(v7, (const __CFString *)*MEMORY[0x1E0DDF338]);
    v9 = (const void *)v8;
    v184 = v8;
    if (v8)
      v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    else
      v10 = 0;
    if (v10)
    {
      v11 = (const __CFDictionary *)v8;
    }
    else
    {
      v11 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E0DDF3A0]);
      v184 = (uint64_t)v11;
      if (v9)
        CFRelease(v9);
    }
    if (v11)
      v13 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    else
      v13 = 0;
    if (v13)
    {
      v182 = (uint64_t (**)(_QWORD, const void *))0xAAAAAAAAAAAAAAAALL;
      v183 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v182, v11);
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v15 = Mutable;
      if (Mutable)
        CFRetain(Mutable);
      v16 = (const void *)*MEMORY[0x1E0DDF3F8];
      v17 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF3F8]);
      v18 = v17;
      if (v17)
      {
        CFRelease(v17);
        ctu::cf::update<__CFString const*,void const*>(v15, v16, v18);
      }
      if (v15)
      {
        CFRelease(v15);
        CFRetain(v15);
      }
      v19 = (const void *)*MEMORY[0x1E0DDF3E0];
      v20 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF3E0]);
      v21 = v20;
      if (v20)
      {
        CFRelease(v20);
        ctu::cf::update<__CFString const*,void const*>(v15, v19, v21);
      }
      if (v15)
      {
        CFRelease(v15);
        CFRetain(v15);
      }
      v22 = (const void *)*MEMORY[0x1E0DDF300];
      v23 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF300]);
      v24 = v23;
      if (v23)
      {
        CFRelease(v23);
        ctu::cf::update<__CFString const*,void const*>(v15, v22, v24);
      }
      if (v15)
      {
        CFRelease(v15);
        CFRetain(v15);
      }
      v25 = (const void *)*MEMORY[0x1E0DDF4E0];
      v26 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF4E0]);
      v27 = v26;
      if (v26)
      {
        CFRelease(v26);
        ctu::cf::update<__CFString const*,void const*>(v15, v25, v27);
      }
      if (v15)
      {
        CFRelease(v15);
        CFRetain(v15);
      }
      v28 = (const void *)*MEMORY[0x1E0DDF5E8];
      v29 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF5E8]);
      v30 = v29;
      if (v29)
      {
        CFRelease(v29);
        ctu::cf::update<__CFString const*,void const*>(v15, v28, v30);
      }
      if (v15)
      {
        CFRelease(v15);
        CFRetain(v15);
      }
      v31 = (const void *)*MEMORY[0x1E0DDF4C0];
      v32 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF4C0]);
      v33 = v32;
      if (v32)
      {
        CFRelease(v32);
        ctu::cf::update<__CFString const*,void const*>(v15, v31, v33);
      }
      if (v15)
      {
        CFRelease(v15);
        CFRetain(v15);
      }
      v34 = (const void *)*MEMORY[0x1E0DDF520];
      v35 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF520]);
      v36 = v35;
      if (v35)
      {
        CFRelease(v35);
        ctu::cf::update<__CFString const*,void const*>(v15, v34, v36);
      }
      if (v15)
      {
        CFRelease(v15);
        CFRetain(v15);
      }
      v37 = (const void *)*MEMORY[0x1E0DDF4D0];
      v38 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF4D0]);
      v39 = v38;
      if (v38)
      {
        CFRelease(v38);
        ctu::cf::update<__CFString const*,void const*>(v15, v37, v39);
      }
      if (v15)
      {
        CFRelease(v15);
        CFRetain(v15);
      }
      v40 = (const void *)*MEMORY[0x1E0DDF578];
      v41 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF578]);
      v42 = v41;
      if (v41)
      {
        CFRelease(v41);
        ctu::cf::update<__CFString const*,void const*>(v15, v40, v42);
      }
      if (v15)
      {
        CFRelease(v15);
        CFRetain(v15);
      }
      v43 = (const void *)*MEMORY[0x1E0DDF598];
      v44 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF598]);
      v45 = v44;
      if (v44)
      {
        CFRelease(v44);
        ctu::cf::update<__CFString const*,void const*>(v15, v43, v45);
      }
      if (v15)
      {
        CFRelease(v15);
        CFRetain(v15);
      }
      v46 = (const void *)*MEMORY[0x1E0DDF4F0];
      v47 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF4F0]);
      v48 = v47;
      if (v47)
      {
        CFRelease(v47);
        ctu::cf::update<__CFString const*,void const*>(v15, v46, v48);
      }
      if (v15)
      {
        CFRelease(v15);
        CFRetain(v15);
      }
      v49 = (const void *)*MEMORY[0x1E0DDF5A0];
      v50 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF5A0]);
      v51 = v50;
      if (v50)
      {
        CFRelease(v50);
        ctu::cf::update<__CFString const*,void const*>(v15, v49, v51);
      }
      if (v15)
        CFRelease(v15);
      v52 = 152;
      if (!(_DWORD)a3)
        v52 = 136;
      v53 = *(void **)(a1 + v52);
      if (v53)
        CFRetain(v53);
      ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v53, (CFTypeRef)coex::kKeyWWANState, v15);
      if (v53)
        CFRelease(v53);
      if (v15)
        CFRelease(v15);
      MEMORY[0x1C3B893A8](&v182);
    }
    v54 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E0DDF390]);
    v184 = (uint64_t)v54;
    if (v11)
      CFRelease(v11);
    if (v54)
      v55 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    else
      v55 = 0;
    v181 = v55 != 0;
    if (v55)
    {
      v182 = (uint64_t (**)(_QWORD, const void *))0xAAAAAAAAAAAAAAAALL;
      v183 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v182, v54);
      v56 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v57 = v56;
      if (v56)
        CFRetain(v56);
      v58 = (const void *)*MEMORY[0x1E0DDF6F8];
      v59 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF6F8]);
      v60 = v59;
      if (v59)
      {
        CFRelease(v59);
        ctu::cf::update<__CFString const*,void const*>(v57, v58, v60);
      }
      if (v57)
        CFRelease(v57);
      v61 = 152;
      if (!(_DWORD)a3)
        v61 = 136;
      v62 = *(void **)(a1 + v61);
      if (v62)
        CFRetain(v62);
      ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v62, (CFTypeRef)coex::kKeyLinkQuality, v57);
      if (v62)
        CFRelease(v62);
      if (v57)
        CFRelease(v57);
      MEMORY[0x1C3B893A8](&v182);
    }
    v63 = (const __CFString *)*MEMORY[0x1E0DDF3E8];
    v64 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E0DDF3E8]);
    v180 = v13;
    v184 = (uint64_t)v64;
    if (v54)
      CFRelease(v54);
    if (v64)
      v65 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    else
      v65 = 0;
    v66 = (const void **)MEMORY[0x1E0DDF328];
    if (v65)
    {
      v182 = (uint64_t (**)(_QWORD, const void *))0xAAAAAAAAAAAAAAAALL;
      v183 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v182, v64);
      v67 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v68 = v67;
      if (v67)
        CFRetain(v67);
      v69 = (const void *)*MEMORY[0x1E0DDF2D0];
      v70 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF2D0]);
      v71 = v70;
      if (v70)
      {
        CFRelease(v70);
        ctu::cf::update<__CFString const*,void const*>(v68, v69, v71);
      }
      if (v68)
      {
        CFRelease(v68);
        CFRetain(v68);
      }
      v72 = *v66;
      v73 = (const void *)(*v182)(&v182, *v66);
      v74 = v73;
      if (v73)
      {
        CFRelease(v73);
        ctu::cf::update<__CFString const*,void const*>(v68, v72, v74);
      }
      if (v68)
      {
        CFRelease(v68);
        CFRetain(v68);
      }
      v75 = (const void *)*MEMORY[0x1E0DDF358];
      v76 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF358]);
      v77 = v76;
      if (v76)
      {
        CFRelease(v76);
        ctu::cf::update<__CFString const*,void const*>(v68, v75, v77);
      }
      if (v68)
        CFRelease(v68);
      v78 = 152;
      if (!(_DWORD)a3)
        v78 = 136;
      v79 = *(void **)(a1 + v78);
      if (v79)
        CFRetain(v79);
      ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v79, (CFTypeRef)coex::kKeyWLANScanState, v68);
      if (v79)
        CFRelease(v79);
      if (v68)
        CFRelease(v68);
      MEMORY[0x1C3B893A8](&v182);
    }
    v80 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)buf, v63);
    v184 = (uint64_t)v80;
    if (v64)
      CFRelease(v64);
    if (v80)
      v81 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    else
      v81 = 0;
    if (v81)
    {
      v182 = (uint64_t (**)(_QWORD, const void *))0xAAAAAAAAAAAAAAAALL;
      v183 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v182, v80);
      v82 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v83 = v82;
      if (v82)
        CFRetain(v82);
      v84 = (const void *)*MEMORY[0x1E0DDF4A0];
      v85 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF4A0]);
      v86 = v85;
      if (v85)
      {
        CFRelease(v85);
        ctu::cf::update<__CFString const*,void const*>(v83, v84, v86);
      }
      if (v83)
      {
        CFRelease(v83);
        CFRetain(v83);
      }
      v87 = *v66;
      v88 = (const void *)(*v182)(&v182, *v66);
      v89 = v88;
      if (v88)
      {
        CFRelease(v88);
        ctu::cf::update<__CFString const*,void const*>(v83, v87, v89);
      }
      if (v83)
      {
        CFRelease(v83);
        CFRetain(v83);
      }
      v90 = (const void *)*MEMORY[0x1E0DDF468];
      v91 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF468]);
      v92 = v91;
      if (v91)
      {
        CFRelease(v91);
        ctu::cf::update<__CFString const*,void const*>(v83, v90, v92);
      }
      if (v83)
      {
        CFRelease(v83);
        CFRetain(v83);
      }
      v93 = (const void *)*MEMORY[0x1E0DDF470];
      v94 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF470]);
      v95 = v94;
      if (v94)
      {
        CFRelease(v94);
        ctu::cf::update<__CFString const*,void const*>(v83, v93, v95);
      }
      if (v83)
      {
        CFRelease(v83);
        CFRetain(v83);
      }
      v96 = (const void *)*MEMORY[0x1E0DDF420];
      v97 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF420]);
      v98 = v97;
      if (v97)
      {
        CFRelease(v97);
        ctu::cf::update<__CFString const*,void const*>(v83, v96, v98);
      }
      if (v83)
        CFRelease(v83);
      v99 = 152;
      if (!(_DWORD)a3)
        v99 = 136;
      v100 = *(void **)(a1 + v99);
      if (v100)
        CFRetain(v100);
      ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v100, (CFTypeRef)coex::kKeyWLANConnState, v83);
      if (v100)
        CFRelease(v100);
      if (v83)
        CFRelease(v83);
      MEMORY[0x1C3B893A8](&v182);
    }
    v101 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E0DDF398]);
    v184 = (uint64_t)v101;
    if (v80)
      CFRelease(v80);
    if (v101)
      v102 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    else
      v102 = 0;
    if (v102)
    {
      v182 = (uint64_t (**)(_QWORD, const void *))0xAAAAAAAAAAAAAAAALL;
      v183 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v182, v101);
      v103 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v104 = v103;
      if (v103)
        CFRetain(v103);
      v105 = (const void *)*MEMORY[0x1E0DDF2A8];
      v106 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF2A8]);
      v107 = v106;
      if (v106)
      {
        CFRelease(v106);
        ctu::cf::update<__CFString const*,void const*>(v104, v105, v107);
      }
      if (v104)
      {
        CFRelease(v104);
        CFRetain(v104);
      }
      v108 = (const void *)*MEMORY[0x1E0DDF590];
      v109 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF590]);
      v110 = v109;
      if (v109)
      {
        CFRelease(v109);
        ctu::cf::update<__CFString const*,void const*>(v104, v108, v110);
      }
      if (v104)
        CFRelease(v104);
      v111 = 152;
      if (!(_DWORD)a3)
        v111 = 136;
      v112 = *(void **)(a1 + v111);
      if (v112)
        CFRetain(v112);
      ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v112, (CFTypeRef)coex::kKeyLinkQuality, v104);
      if (v112)
        CFRelease(v112);
      if (v104)
        CFRelease(v104);
      MEMORY[0x1C3B893A8](&v182);
      v181 = 1;
    }
    v113 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E0DDF450]);
    v184 = (uint64_t)v113;
    if (v101)
      CFRelease(v101);
    if (v113)
      v114 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    else
      v114 = 0;
    if (v114)
    {
      v182 = (uint64_t (**)(_QWORD, const void *))0xAAAAAAAAAAAAAAAALL;
      v183 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v182, v113);
      v115 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v116 = v115;
      if (v115)
        CFRetain(v115);
      v117 = (const void *)*MEMORY[0x1E0DDF6B8];
      v118 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF6B8]);
      v119 = v118;
      if (v118)
      {
        CFRelease(v118);
        ctu::cf::update<__CFString const*,void const*>(v116, v117, v119);
      }
      if (v116)
      {
        CFRelease(v116);
        CFRetain(v116);
      }
      v120 = (const void *)*MEMORY[0x1E0DDF528];
      v121 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF528]);
      v122 = v121;
      if (v121)
      {
        CFRelease(v121);
        ctu::cf::update<__CFString const*,void const*>(v116, v120, v122);
      }
      if (v116)
      {
        CFRelease(v116);
        CFRetain(v116);
      }
      v123 = (const void *)*MEMORY[0x1E0DDF580];
      v124 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF580]);
      v125 = v124;
      if (v124)
      {
        CFRelease(v124);
        ctu::cf::update<__CFString const*,void const*>(v116, v123, v125);
      }
      if (v116)
        CFRelease(v116);
      v126 = 152;
      if (!(_DWORD)a3)
        v126 = 136;
      v127 = *(void **)(a1 + v126);
      if (v127)
        CFRetain(v127);
      ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v127, (CFTypeRef)coex::kKeyFailCondition, v116);
      if (v127)
        CFRelease(v127);
      if (v116)
        CFRelease(v116);
      MEMORY[0x1C3B893A8](&v182);
    }
    v128 = (const void *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E0DDF2C8]);
    v184 = (uint64_t)v128;
    if (v113)
      CFRelease(v113);
    if (v128)
      v129 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    else
      v129 = 0;
    if (v129)
    {
      v182 = (uint64_t (**)(_QWORD, const void *))0xAAAAAAAAAAAAAAAALL;
      v183 = 0xAAAAAAAAAAAAAAAALL;
      v130 = 160;
      if (!(_DWORD)a3)
        v130 = 144;
      v131 = *(const void **)(a1 + v130);
      if (v131)
        CFRetain(v131);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v182, (const __CFDictionary *)v131);
      if (v131)
        CFRelease(v131);
      v132 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v133 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v134 = v133;
      if (v133)
        CFRetain(v133);
      v135 = (const void *)*MEMORY[0x1E0DDF210];
      v136 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF210]);
      v137 = v136;
      if (v136)
      {
        CFRelease(v136);
        ctu::cf::update<__CFString const*,void const*>(v134, v135, v137);
      }
      if (v134)
      {
        CFRelease(v134);
        CFRetain(v134);
      }
      v138 = (const void *)*MEMORY[0x1E0DDF360];
      v139 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF360]);
      v140 = v139;
      if (v139)
      {
        CFRelease(v139);
        ctu::cf::update<__CFString const*,void const*>(v134, v138, v140);
      }
      if (v134)
      {
        CFRelease(v134);
        CFRetain(v134);
      }
      v141 = (const void *)*MEMORY[0x1E0DDF6E0];
      v142 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF6E0]);
      v143 = v142;
      if (v142)
      {
        CFRelease(v142);
        ctu::cf::update<__CFString const*,void const*>(v134, v141, v143);
      }
      if (v134)
      {
        CFRelease(v134);
        CFRetain(v134);
      }
      v144 = (const void *)*MEMORY[0x1E0DDF508];
      v145 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF508]);
      v146 = v145;
      if (v145)
      {
        CFRelease(v145);
        ctu::cf::update<__CFString const*,void const*>(v134, v144, v146);
      }
      if (v134)
      {
        CFRelease(v134);
        CFRetain(v134);
      }
      v147 = (const void *)*MEMORY[0x1E0DDF5B0];
      v148 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF5B0]);
      v149 = v148;
      if (v148)
      {
        CFRelease(v148);
        ctu::cf::update<__CFString const*,void const*>(v134, v147, v149);
      }
      if (v134)
      {
        CFRelease(v134);
        CFRetain(v134);
      }
      v150 = (const void *)*MEMORY[0x1E0DDF6A8];
      v151 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF6A8]);
      v152 = v151;
      if (v151)
      {
        CFRelease(v151);
        ctu::cf::update<__CFString const*,void const*>(v134, v150, v152);
      }
      if (v134)
      {
        CFRelease(v134);
        CFRetain(v134);
      }
      v153 = (const void *)*MEMORY[0x1E0DDF5D8];
      v154 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF5D8]);
      v155 = v154;
      if (v154)
      {
        CFRelease(v154);
        ctu::cf::update<__CFString const*,void const*>(v134, v153, v155);
      }
      if (v134)
      {
        CFRelease(v134);
        CFRetain(v134);
      }
      v156 = (const void *)*MEMORY[0x1E0DDF2E8];
      v157 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF2E8]);
      v158 = v157;
      if (v157)
      {
        CFRelease(v157);
        ctu::cf::update<__CFString const*,void const*>(v134, v156, v158);
      }
      if (v134)
      {
        CFRelease(v134);
        CFRetain(v134);
      }
      v159 = (const void *)*MEMORY[0x1E0DDF320];
      v160 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF320]);
      v161 = v160;
      if (v160)
      {
        CFRelease(v160);
        ctu::cf::update<__CFString const*,void const*>(v134, v159, v161);
      }
      if (v134)
      {
        CFRelease(v134);
        CFRetain(v134);
      }
      v162 = (const void *)*MEMORY[0x1E0DDF248];
      v163 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF248]);
      v164 = v163;
      if (v163)
      {
        CFRelease(v163);
        ctu::cf::update<__CFString const*,void const*>(v134, v162, v164);
      }
      if (v134)
      {
        CFRelease(v134);
        CFRetain(v134);
      }
      v165 = (const void *)*MEMORY[0x1E0DDF6E8];
      v166 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF6E8]);
      v167 = v166;
      if (v166)
      {
        CFRelease(v166);
        ctu::cf::update<__CFString const*,void const*>(v134, v165, v167);
      }
      if (v134)
      {
        CFRelease(v134);
        CFRetain(v134);
      }
      v168 = (const void *)*MEMORY[0x1E0DDF648];
      v169 = (const void *)(*v182)(&v182, (const void *)*MEMORY[0x1E0DDF648]);
      v170 = v169;
      if (v169)
      {
        CFRelease(v169);
        ctu::cf::update<__CFString const*,void const*>(v134, v168, v170);
      }
      if (v134)
        CFRelease(v134);
      if ((_DWORD)a3)
        v171 = 152;
      else
        v171 = 136;
      v172 = *(void **)(a1 + v171);
      if (v172)
        CFRetain(v172);
      ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v172, (CFTypeRef)coex::kKeyPolicy, v134);
      if (v172)
        CFRelease(v172);
      v173 = CFDictionaryCreateMutable(v132, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v174 = v173;
      if (v173)
        CFRetain(v173);
      v175 = (const void *)(*v182)(&v182, v141);
      v176 = v175;
      if (v175)
      {
        CFRelease(v175);
        ctu::cf::update<__CFString const*,void const*>(v174, v141, v176);
      }
      if (v174)
      {
        CFRelease(v174);
        CFRetain(v174);
      }
      v177 = (const void *)(*v182)(&v182, v144);
      v178 = v177;
      if (v177)
      {
        CFRelease(v177);
        ctu::cf::update<__CFString const*,void const*>(v174, v144, v178);
      }
      if (v174)
        CFRelease(v174);
      v179 = *(void **)(a1 + v171);
      if (v179)
        CFRetain(v179);
      ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v179, (CFTypeRef)coex::kKeyFailCondition, v174);
      if (v179)
        CFRelease(v179);
      if (v174)
        CFRelease(v174);
      if (v134)
        CFRelease(v134);
      MEMORY[0x1C3B893A8](&v182);
    }
    if (v180)
      coex::Module::State::sendWWANState_sync(a1, a3);
    if (v181)
      coex::Module::State::sendLinkQuality_sync(a1, a3);
    if (v114)
      coex::Module::State::sendFailCondition_sync(a1, a3);
    if (v128)
      CFRelease(v128);
    MEMORY[0x1C3B893A8](buf);
  }
  else
  {
    v12 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BF335000, v12, OS_LOG_TYPE_DEBUG, "#D Empty update passed; ignoring it", buf, 2u);
    }
  }
}

void sub_1BF34555C(_Unwind_Exception *a1)
{
  uint64_t v1;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v1 - 120));
  MEMORY[0x1C3B893A8](v1 - 112);
  _Unwind_Resume(a1);
}

void coex::Module::State::sendFailCondition_sync(uint64_t a1, int a2)
{
  CFMutableDictionaryRef v4;
  uint64_t (*v5)(uint64_t);
  ctu::cf::map_adapter *v6;
  const __CFData *v7;
  const __CFData *v8;
  uint64_t (*v9)(uint64_t);
  UInt8 v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int *v19;
  CFTypeID v20;
  const __CFNumber *v21;
  int v22;
  uint64_t v23;
  const __CFData *v24;
  const __CFData *v25;
  const __CFData *v26;
  uint64_t (*v27)(uint64_t);
  UInt8 v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  int *v37;
  CFTypeID v38;
  const __CFNumber *v39;
  int v40;
  uint64_t v41;
  const __CFData *v42;
  const __CFData *v43;
  const __CFData *v44;
  uint64_t (*v45)(uint64_t);
  uint64_t v46;
  xpc_object_t v47;
  xpc_object_t v48;
  xpc_object_t v49;
  xpc_object_t v50;
  uint64_t v51;
  xpc_object_t v52;
  _QWORD v53[2];
  void (*v54)(uint64_t, int);
  void *v55;
  const __CFData **v56;
  _QWORD v57[3];
  CFTypeRef cf;
  _QWORD v59[2];
  void (*v60)(uint64_t, int);
  void *v61;
  const __CFData **v62;
  _QWORD v63[2];
  const __CFData *v64;
  const __CFData **v65;
  uint64_t v66;
  xpc_object_t (*v67)(uint64_t, uint64_t);
  void (*v68)(uint64_t);
  xpc_object_t object;
  const __CFData *v70;
  const __CFData *v71;
  _QWORD v72[2];
  CFMutableDictionaryRef v73;
  UInt8 buffer[8];
  uint64_t v75;
  void (*v76)(uint64_t);
  void *v77;
  uint64_t v78;
  xpc_object_t v79;
  int v80;
  int v81;
  CFRange v82;
  CFRange v83;
  CFRange v84;

  v73 = (CFMutableDictionaryRef)0xAAAAAAAAAAAAAAAALL;
  coex::Module::State::getSubProperty(a1, coex::kKeyFailCondition, a2, 0, &v73);
  v4 = v73;
  v5 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  if (!v73)
    v5 = 0;
  if (v5)
  {
    v72[0] = 0xAAAAAAAAAAAAAAAALL;
    v72[1] = 0xAAAAAAAAAAAAAAAALL;
    v6 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v72, v73);
    v7 = (const __CFData *)ctu::cf::map_adapter::copyCFDataRef(v6, (const __CFString *)*MEMORY[0x1E0DDF6B8]);
    v8 = v7;
    v71 = v7;
    if (v7)
      v9 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
    else
      v9 = 0;
    if (!v9)
      goto LABEL_37;
    v70 = v7;
    if (v7)
      CFRetain(v7);
    *(_QWORD *)buffer = 0;
    v82.length = CFDataGetLength(v8);
    v82.location = 0;
    CFDataGetBytes(v8, v82, buffer);
    v10 = buffer[0];
    if (v8)
      CFRelease(v8);
    if ((v10 & 1) == 0)
    {
LABEL_37:
      v25 = (const __CFData *)ctu::cf::map_adapter::copyCFDataRef((ctu::cf::map_adapter *)v72, (const __CFString *)*MEMORY[0x1E0DDF458]);
      v26 = v25;
      cf = v25;
      if (v25)
        v27 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
      else
        v27 = 0;
      if (!v27)
        goto LABEL_70;
      v57[2] = v25;
      if (v25)
        CFRetain(v25);
      *(_QWORD *)buffer = 0;
      v83.length = CFDataGetLength(v26);
      v83.location = 0;
      CFDataGetBytes(v26, v83, buffer);
      v28 = buffer[0];
      if (v26)
        CFRelease(v26);
      if ((v28 & 2) == 0)
        goto LABEL_70;
      v64 = 0;
      v65 = &v64;
      v66 = 0x3002000000;
      v67 = __Block_byref_object_copy__195;
      v68 = __Block_byref_object_dispose__196;
      object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      v29 = xpc_dictionary_create(0, 0, 0);
      v30 = v29;
      if (v29)
      {
        object = v29;
      }
      else
      {
        v30 = xpc_null_create();
        object = v30;
        if (!v30)
        {
          v31 = xpc_null_create();
          v30 = 0;
          goto LABEL_53;
        }
      }
      if (MEMORY[0x1C3B8A86C](v30) == MEMORY[0x1E0C812F8])
      {
        xpc_retain(v30);
LABEL_54:
        xpc_release(v30);
        v32 = xpc_int64_create(0);
        if (!v32)
          v32 = xpc_null_create();
        xpc_dictionary_set_value(v65[5], "kWCMCellularThresholdReached_EventType", v32);
        v33 = xpc_null_create();
        xpc_release(v32);
        xpc_release(v33);
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v57, (const ctu::cf::dict_adapter *)v72);
        v34 = *MEMORY[0x1E0DDF508];
        v35 = MEMORY[0x1E0C809B0];
        v53[0] = MEMORY[0x1E0C809B0];
        v53[1] = 0x40000000;
        v54 = ___ZN4coex6Module5State22sendFailCondition_syncENS_5SubIdE_block_invoke_2;
        v55 = &unk_1E78FD9B8;
        v56 = &v64;
        v36 = (int *)(*(uint64_t (**)(_QWORD *, uint64_t))v57[0])(v57, v34);
        v37 = v36;
        if (v36)
        {
          v38 = CFGetTypeID(v36);
          if (v38 == CFNumberGetTypeID())
          {
            *(_DWORD *)buffer = -1431655766;
            v40 = ctu::cf::assign((ctu::cf *)buffer, v37, v39);
            CFRelease(v37);
            if (v40)
              v54((uint64_t)v53, *(unsigned int *)buffer);
          }
          else
          {
            CFRelease(v37);
          }
        }
        MEMORY[0x1C3B893A8](v57);
        v41 = *(_QWORD *)(a1 + 120);
        if (v41)
        {
          v42 = v65[5];
          if (v42)
            xpc_retain(v65[5]);
          else
            v42 = (const __CFData *)xpc_null_create();
          *(_QWORD *)buffer = v35;
          v75 = 1174405120;
          v76 = ___ZN4coex9XpcClient11sendMessageE19WCMReceiveMessageIdN3xpc6objectENS_5SubIdE_block_invoke;
          v77 = &__block_descriptor_tmp_7_3;
          v80 = 303;
          v78 = v41;
          v79 = v42;
          if (v42)
            xpc_retain(v42);
          else
            v79 = xpc_null_create();
          v81 = a2;
          ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped((uint64_t *)(v41 + 8), (uint64_t)buffer);
          xpc_release(v79);
          xpc_release(v42);
        }
        _Block_object_dispose(&v64, 8);
        xpc_release(object);
LABEL_70:
        v43 = (const __CFData *)ctu::cf::map_adapter::copyCFDataRef((ctu::cf::map_adapter *)v72, (const __CFString *)*MEMORY[0x1E0DDF528]);
        v44 = v43;
        v64 = v43;
        if (v43)
          v45 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
        else
          v45 = 0;
        if (v45)
        {
          if (v43)
            CFRetain(v43);
          *(_QWORD *)buffer = 0;
          v84.length = CFDataGetLength(v44);
          v84.location = 0;
          CFDataGetBytes(v44, v84, buffer);
          v46 = *(_QWORD *)buffer;
          if (v44)
            CFRelease(v44);
          if (v46)
          {
            v47 = xpc_dictionary_create(0, 0, 0);
            if (v47 || (v47 = xpc_null_create()) != 0)
            {
              if (MEMORY[0x1C3B8A86C](v47) == MEMORY[0x1E0C812F8])
              {
                xpc_retain(v47);
                v48 = v47;
              }
              else
              {
                v48 = xpc_null_create();
              }
            }
            else
            {
              v48 = xpc_null_create();
              v47 = 0;
            }
            xpc_release(v47);
            v49 = xpc_uint64_create(v46);
            if (!v49)
              v49 = xpc_null_create();
            xpc_dictionary_set_value(v48, "kWCMCellularTxPower_Response", v49);
            v50 = xpc_null_create();
            xpc_release(v49);
            xpc_release(v50);
            v51 = *(_QWORD *)(a1 + 120);
            if (v51)
            {
              if (v48)
              {
                xpc_retain(v48);
                v52 = v48;
              }
              else
              {
                v52 = xpc_null_create();
              }
              *(_QWORD *)buffer = MEMORY[0x1E0C809B0];
              v75 = 1174405120;
              v76 = ___ZN4coex9XpcClient11sendMessageE19WCMReceiveMessageIdN3xpc6objectENS_5SubIdE_block_invoke;
              v77 = &__block_descriptor_tmp_7_3;
              v80 = 301;
              v78 = v51;
              v79 = v52;
              if (v52)
                xpc_retain(v52);
              else
                v79 = xpc_null_create();
              v81 = a2;
              ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped((uint64_t *)(v51 + 8), (uint64_t)buffer);
              xpc_release(v79);
              xpc_release(v52);
            }
            xpc_release(v48);
            v44 = v64;
          }
        }
        if (v44)
          CFRelease(v44);
        if (cf)
          CFRelease(cf);
        if (v71)
          CFRelease(v71);
        MEMORY[0x1C3B893A8](v72);
        v4 = v73;
        goto LABEL_103;
      }
      v31 = xpc_null_create();
LABEL_53:
      object = v31;
      goto LABEL_54;
    }
    v64 = 0;
    v65 = &v64;
    v66 = 0x3002000000;
    v67 = __Block_byref_object_copy__195;
    v68 = __Block_byref_object_dispose__196;
    object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    v11 = xpc_dictionary_create(0, 0, 0);
    v12 = v11;
    if (v11)
    {
      object = v11;
    }
    else
    {
      v12 = xpc_null_create();
      object = v12;
      if (!v12)
      {
        v13 = xpc_null_create();
        v12 = 0;
        goto LABEL_20;
      }
    }
    if (MEMORY[0x1C3B8A86C](v12) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v12);
LABEL_21:
      xpc_release(v12);
      v14 = xpc_int64_create(1);
      if (!v14)
        v14 = xpc_null_create();
      xpc_dictionary_set_value(v65[5], "kWCMCellularThresholdReached_EventType", v14);
      v15 = xpc_null_create();
      xpc_release(v14);
      xpc_release(v15);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v63, (const ctu::cf::dict_adapter *)v72);
      v16 = *MEMORY[0x1E0DDF6E0];
      v17 = MEMORY[0x1E0C809B0];
      v59[0] = MEMORY[0x1E0C809B0];
      v59[1] = 0x40000000;
      v60 = ___ZN4coex6Module5State22sendFailCondition_syncENS_5SubIdE_block_invoke;
      v61 = &unk_1E78FD990;
      v62 = &v64;
      v18 = (int *)(*(uint64_t (**)(_QWORD *, uint64_t))v63[0])(v63, v16);
      v19 = v18;
      if (v18)
      {
        v20 = CFGetTypeID(v18);
        if (v20 == CFNumberGetTypeID())
        {
          *(_DWORD *)buffer = -1431655766;
          v22 = ctu::cf::assign((ctu::cf *)buffer, v19, v21);
          CFRelease(v19);
          if (v22)
            v60((uint64_t)v59, *(unsigned int *)buffer);
        }
        else
        {
          CFRelease(v19);
        }
      }
      MEMORY[0x1C3B893A8](v63);
      v23 = *(_QWORD *)(a1 + 120);
      if (v23)
      {
        v24 = v65[5];
        if (v24)
          xpc_retain(v65[5]);
        else
          v24 = (const __CFData *)xpc_null_create();
        *(_QWORD *)buffer = v17;
        v75 = 1174405120;
        v76 = ___ZN4coex9XpcClient11sendMessageE19WCMReceiveMessageIdN3xpc6objectENS_5SubIdE_block_invoke;
        v77 = &__block_descriptor_tmp_7_3;
        v80 = 303;
        v78 = v23;
        v79 = v24;
        if (v24)
          xpc_retain(v24);
        else
          v79 = xpc_null_create();
        v81 = a2;
        ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped((uint64_t *)(v23 + 8), (uint64_t)buffer);
        xpc_release(v79);
        xpc_release(v24);
      }
      _Block_object_dispose(&v64, 8);
      xpc_release(object);
      goto LABEL_37;
    }
    v13 = xpc_null_create();
LABEL_20:
    object = v13;
    goto LABEL_21;
  }
LABEL_103:
  if (v4)
    CFRelease(v4);
}

void sub_1BF346258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, int a19, const void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,xpc_object_t object)
{
  uint64_t v33;

  _Block_object_dispose(&a28, 8);
  xpc_release(object);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a20);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)(v33 - 152));
  MEMORY[0x1C3B893A8](v33 - 144);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v33 - 128));
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State14setPolicy_syncENS_5SubIdE_block_invoke(uint64_t a1, const void **a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t (*v6)(uint64_t);
  NSObject *v7;
  const void *v8;
  int *v9;
  int *v10;
  CFTypeID v11;
  const __CFNumber *v12;
  int v13;
  _QWORD v14[2];
  void (*v15)(uint64_t, int);
  void *v16;
  uint64_t v17;
  CFTypeRef cf;
  _QWORD v19[2];
  uint8_t buf[4];
  const void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *a2;
  v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v6 = 0;
  if (v6)
  {
    v7 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v21 = v5;
      _os_log_impl(&dword_1BF335000, v7, OS_LOG_TYPE_DEFAULT, "#I Failed to set policy: %@", buf, 0xCu);
    }
  }
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v19, (const ctu::cf::dict_adapter *)(a1 + 56));
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 1174405120;
  v15 = ___ZN4coex6Module5State14setPolicy_syncENS_5SubIdE_block_invoke_235;
  v16 = &__block_descriptor_tmp_237;
  v8 = *a2;
  v17 = v4;
  cf = v8;
  if (v8)
    CFRetain(v8);
  v9 = (int *)(*(uint64_t (**)(_QWORD *, _QWORD))v19[0])(v19, *MEMORY[0x1E0DDF508]);
  v10 = v9;
  if (v9)
  {
    v11 = CFGetTypeID(v9);
    if (v11 == CFNumberGetTypeID())
    {
      *(_DWORD *)buf = -1431655766;
      v13 = ctu::cf::assign((ctu::cf *)buf, v10, v12);
      CFRelease(v10);
      if (v13)
        v15((uint64_t)v14, *(unsigned int *)buf);
    }
    else
    {
      CFRelease(v10);
    }
  }
  MEMORY[0x1C3B893A8](v19);
  if (cf)
    CFRelease(cf);
}

void sub_1BF346584(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1BF3465A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  const void **v7;
  va_list va;

  va_start(va, a7);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(v7);
  MEMORY[0x1C3B893A8](va);
  _Unwind_Resume(a1);
}

void coex::XpcClient::sendMessage(uint64_t a1, int a2, void **a3, int a4)
{
  void *v6;
  _QWORD v7[5];
  xpc_object_t object;
  int v9;
  int v10;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN4coex9XpcClient11sendMessageE19WCMReceiveMessageIdN3xpc6objectENS_5SubIdE_block_invoke;
  v7[3] = &__block_descriptor_tmp_7_3;
  v9 = a2;
  v6 = *a3;
  v7[4] = a1;
  object = v6;
  if (v6)
    xpc_retain(v6);
  else
    object = xpc_null_create();
  v10 = a4;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v7);
  xpc_release(object);
}

void ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_9XpcClientEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E7901620;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void boost::detail::function::void_function_obj_invoker2<ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::invoke(uint64_t a1, const void **a2, int a3)
{
  const void *v4;
  const void *v5;
  NSObject *v6;
  void *v7;
  const void *v8;
  void *v9;
  const void *v10;
  void *v11;
  const void *v12;
  void *v13;
  const void *v14;
  void *v15;
  const void *v16;
  void *v17;
  const void *v18;
  char v19;
  _QWORD *v20;
  _DWORD *v21;
  char *v22;
  char *v23;
  void (*v24)(__int128 *, __int128 *, uint64_t);
  const void *v25;
  __int128 v26;
  uint64_t v27;
  _QWORD block[7];

  v4 = *a2;
  v25 = *a2;
  *a2 = 0;
  v6 = *(NSObject **)a1;
  v5 = *(const void **)(a1 + 8);
  if (!v5)
  {
    v8 = 0;
LABEL_10:
    v19 = 1;
    *(_QWORD *)&v26 = 0;
    if (!v4)
      goto LABEL_23;
    goto LABEL_22;
  }
  v7 = _Block_copy(v5);
  v8 = v7;
  if (!v7)
    goto LABEL_10;
  v9 = _Block_copy(v7);
  v10 = v9;
  if (!v9)
  {
    v19 = 0;
    *(_QWORD *)&v26 = 0;
    if (!v4)
      goto LABEL_23;
LABEL_22:
    CFRetain(v4);
    goto LABEL_23;
  }
  v11 = _Block_copy(v9);
  v12 = v11;
  if (v11)
  {
    v13 = _Block_copy(v11);
    v14 = v13;
    if (v13)
    {
      v15 = _Block_copy(v13);
      v16 = v15;
      if (v15)
      {
        v17 = _Block_copy(v15);
        v18 = v17;
        if (v17)
        {
          *(_QWORD *)&v26 = _Block_copy(v17);
          _Block_release(v18);
        }
        else
        {
          *(_QWORD *)&v26 = 0;
        }
        _Block_release(v16);
      }
      else
      {
        *(_QWORD *)&v26 = 0;
      }
      _Block_release(v14);
    }
    else
    {
      *(_QWORD *)&v26 = 0;
    }
    _Block_release(v12);
  }
  else
  {
    *(_QWORD *)&v26 = 0;
  }
  _Block_release(v10);
  v19 = 0;
  if (v4)
    goto LABEL_22;
LABEL_23:
  v20 = operator new(8uLL);
  *v20 = v4;
  if (v4)
    CFRetain(v4);
  v21 = operator new(4uLL);
  *v21 = a3;
  v22 = (char *)operator new(0x20uLL);
  v23 = v22;
  *(_QWORD *)v22 = 0;
  if (boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>)::stored_vtable)
  {
    *(_QWORD *)v22 = boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>)::stored_vtable;
    if ((boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>)::stored_vtable & 1) != 0)
    {
      *(_OWORD *)(v22 + 8) = v26;
      *((_QWORD *)v22 + 3) = v27;
    }
    else
    {
      (*(void (**)(__int128 *, char *, _QWORD))((unint64_t)boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL))(&v26, v22 + 8, 0);
    }
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN4coex5SubIdEEEES8_SA__block_invoke;
  block[3] = &__block_descriptor_tmp_256;
  block[4] = v23;
  block[5] = v20;
  block[6] = v21;
  dispatch_async(v6, block);
  if (v4)
    CFRelease(v4);
  if (boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>)::stored_vtable)
  {
    if ((boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>)::stored_vtable & 1) == 0)
    {
      v24 = *(void (**)(__int128 *, __int128 *, uint64_t))((unint64_t)boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL);
      if (v24)
        v24(&v26, &v26, 2);
    }
  }
  if ((v19 & 1) == 0)
  {
    _Block_release(v8);
    v4 = v25;
  }
  if (v4)
    CFRelease(v4);
}

void sub_1BF346A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, const void *a11, uint64_t a12)
{
  const void *v12;
  void *v13;
  char v14;

  operator delete(v13);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a11);
  boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>::~function(&a12);
  if ((v14 & 1) == 0)
    _Block_release(v12);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  _Unwind_Resume(a1);
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  void *v6;
  void *v7;
  const char *v8;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v8 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001BF53D97ALL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001BF53D97ALL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
LABEL_9:
        _Block_release(v7);
    }
  }
  else
  {
    v6 = *a1;
    if (*a1)
      v6 = _Block_copy(v6);
    *(_QWORD *)a2 = v6;
    if (a3 == 1)
    {
      v7 = *a1;
      if (*a1)
        goto LABEL_9;
    }
  }
}

uint64_t ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_2(uint64_t a1, const __CFDictionary *a2)
{
  int Int;
  xpc_object_t v4;
  xpc_object_t v5;
  double v6;
  xpc_object_t v7;
  xpc_object_t v8;
  _QWORD v10[2];

  v10[0] = 0xAAAAAAAAAAAAAAAALL;
  v10[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v10, a2);
  Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v10, (const __CFString *)*MEMORY[0x1E0DDF388]);
  v4 = xpc_int64_create(Int);
  if (!v4)
    v4 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_DLBandInfo_CenterFreq", v4);
  v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  ctu::cf::map_adapter::getDouble((ctu::cf::map_adapter *)v10, (const __CFString *)*MEMORY[0x1E0DDF268], 0.0);
  v7 = xpc_double_create(v6);
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_DLBandInfo_BandWidth", v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  return MEMORY[0x1C3B893A8](v10);
}

uint64_t ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke(uint64_t a1, const __CFDictionary *a2)
{
  int Int;
  xpc_object_t v4;
  xpc_object_t v5;
  double v6;
  xpc_object_t v7;
  xpc_object_t v8;
  _QWORD v10[2];

  v10[0] = 0xAAAAAAAAAAAAAAAALL;
  v10[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v10, a2);
  Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v10, (const __CFString *)*MEMORY[0x1E0DDF388]);
  v4 = xpc_int64_create(Int);
  if (!v4)
    v4 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_ULBandInfo_CenterFreq", v4);
  v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  ctu::cf::map_adapter::getDouble((ctu::cf::map_adapter *)v10, (const __CFString *)*MEMORY[0x1E0DDF268], 0.0);
  v7 = xpc_double_create(v6);
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_ULBandInfo_BandWidth", v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  return MEMORY[0x1C3B893A8](v10);
}

void coex::Module::State::fetchCarrierIdSet_sync(uint64_t a1, CFArrayRef *a2, const char *a3, xpc_object_t *a4)
{
  uint64_t (*v4)(uint64_t);
  CFIndex Count;
  CFIndex v9;
  xpc_object_t v10;
  uint64_t v11;
  xpc_object_t v12;
  CFIndex i;
  unsigned int *ValueAtIndex;
  unsigned int *v15;
  CFTypeID v16;
  const __CFNumber *v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  int64_t value;

  if (*a2)
    v4 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  else
    v4 = 0;
  if (a3)
  {
    if (v4)
    {
      if (MEMORY[0x1C3B8A86C](*a4) == MEMORY[0x1E0C812F8])
      {
        Count = CFArrayGetCount(*a2);
        if (Count >= 1)
        {
          v9 = Count;
          v10 = xpc_array_create(0, 0);
          v11 = MEMORY[0x1E0C812C8];
          if (v10 || (v10 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x1C3B8A86C](v10) == v11)
            {
              xpc_retain(v10);
              v12 = v10;
            }
            else
            {
              v12 = xpc_null_create();
            }
          }
          else
          {
            v12 = xpc_null_create();
            v10 = 0;
          }
          xpc_release(v10);
          for (i = 0; i != v9; ++i)
          {
            LODWORD(value) = 0;
            ValueAtIndex = (unsigned int *)CFArrayGetValueAtIndex(*a2, i);
            v15 = ValueAtIndex;
            if (ValueAtIndex)
            {
              v16 = CFGetTypeID(ValueAtIndex);
              if (v16 == CFNumberGetTypeID())
              {
                if (ctu::cf::assign((ctu::cf *)&value, v15, v17))
                {
                  v18 = xpc_int64_create(value);
                  if (!v18)
                    v18 = xpc_null_create();
                  xpc_array_append_value(v12, v18);
                  xpc_release(v18);
                }
              }
            }
          }
          if (MEMORY[0x1C3B8A86C](v12) == v11 && xpc_array_get_count(v12))
          {
            if (v12)
            {
              xpc_retain(v12);
              v19 = v12;
            }
            else
            {
              v19 = xpc_null_create();
            }
            xpc_dictionary_set_value(*a4, a3, v19);
            v20 = xpc_null_create();
            xpc_release(v19);
            xpc_release(v20);
          }
          xpc_release(v12);
        }
      }
    }
  }
}

void sub_1BF347024(_Unwind_Exception *a1)
{
  void *v1;

  xpc_release(v1);
  _Unwind_Resume(a1);
}

void coex::Module::State::fetchBandInfoSet_sync(uint64_t a1, CFArrayRef *a2, const char *a3, xpc_object_t *a4)
{
  uint64_t (*v4)(uint64_t);
  CFIndex Count;
  CFIndex v9;
  xpc_object_t v10;
  uint64_t v11;
  xpc_object_t v12;
  CFIndex v13;
  const __CFString *v14;
  const __CFString *v15;
  const __CFString *v16;
  const void *ValueAtIndex;
  const void *v18;
  CFTypeID v19;
  uint64_t (*v20)(uint64_t);
  xpc_object_t v21;
  xpc_object_t v22;
  int Int;
  xpc_object_t v24;
  xpc_object_t v25;
  double v26;
  xpc_object_t v27;
  xpc_object_t v28;
  const __CFData *v29;
  const __CFData *v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  xpc_object_t v33;
  int v34;
  xpc_object_t v35;
  xpc_object_t v36;
  xpc_object_t v37;
  xpc_object_t *v38;
  xpc_object_t xarray;
  const __CFData *cf;
  _QWORD v41[2];
  const void *v42;
  UInt8 buffer[8];
  CFRange v44;

  if (*a2)
    v4 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  else
    v4 = 0;
  if (!a3)
    return;
  if (!v4)
    return;
  if (MEMORY[0x1C3B8A86C](*a4) != MEMORY[0x1E0C812F8])
    return;
  Count = CFArrayGetCount(*a2);
  if (Count < 1)
    return;
  v9 = Count;
  v10 = xpc_array_create(0, 0);
  v11 = MEMORY[0x1E0C812C8];
  if (v10 || (v10 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v10) == v11)
    {
      xpc_retain(v10);
      v12 = v10;
    }
    else
    {
      v12 = xpc_null_create();
    }
  }
  else
  {
    v12 = xpc_null_create();
    v10 = 0;
  }
  v38 = a4;
  xarray = v12;
  xpc_release(v10);
  v13 = 0;
  v14 = (const __CFString *)*MEMORY[0x1E0DDF388];
  v15 = (const __CFString *)*MEMORY[0x1E0DDF268];
  v16 = (const __CFString *)*MEMORY[0x1E0DDF330];
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*a2, v13);
    v18 = ValueAtIndex;
    if (!ValueAtIndex || (v19 = CFGetTypeID(ValueAtIndex), v19 != CFDictionaryGetTypeID()))
    {
      v18 = 0;
      v42 = 0;
LABEL_26:
      if (v18)
        goto LABEL_49;
      goto LABEL_15;
    }
    v42 = v18;
    CFRetain(v18);
    v20 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    if (!v18)
      v20 = 0;
    if (!v20)
      goto LABEL_26;
    v41[0] = 0xAAAAAAAAAAAAAAAALL;
    v41[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v41, (const __CFDictionary *)v18);
    v21 = xpc_dictionary_create(0, 0, 0);
    if (v21 || (v21 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8A86C](v21) == MEMORY[0x1E0C812F8])
      {
        xpc_retain(v21);
        v22 = v21;
      }
      else
      {
        v22 = xpc_null_create();
      }
    }
    else
    {
      v22 = xpc_null_create();
      v21 = 0;
    }
    xpc_release(v21);
    Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v41, v14);
    v24 = xpc_int64_create(Int);
    if (!v24)
      v24 = xpc_null_create();
    xpc_dictionary_set_value(v22, "kWCMCellularNetworkConfiguration_BandInfoSet_CenterFreq", v24);
    v25 = xpc_null_create();
    xpc_release(v24);
    xpc_release(v25);
    ctu::cf::map_adapter::getDouble((ctu::cf::map_adapter *)v41, v15, 0.0);
    v27 = xpc_double_create(v26);
    if (!v27)
      v27 = xpc_null_create();
    xpc_dictionary_set_value(v22, "kWCMCellularNetworkConfiguration_BandInfoSet_Bandwidth", v27);
    v28 = xpc_null_create();
    xpc_release(v27);
    xpc_release(v28);
    v29 = (const __CFData *)ctu::cf::map_adapter::copyCFDataRef((ctu::cf::map_adapter *)v41, v16);
    v30 = v29;
    cf = v29;
    v31 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
    if (!v29)
      v31 = 0;
    if (v31)
    {
      if (v29)
        CFRetain(v29);
      *(_QWORD *)buffer = 0;
      v44.length = CFDataGetLength(v30);
      v44.location = 0;
      CFDataGetBytes(v30, v44, buffer);
      v32 = *(_QWORD *)buffer;
      if (v30)
        CFRelease(v30);
      v33 = xpc_uint64_create(v32);
      if (!v33)
        v33 = xpc_null_create();
    }
    else
    {
      v34 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v41, v16);
      v33 = xpc_uint64_create(v34);
      if (!v33)
        v33 = xpc_null_create();
    }
    xpc_dictionary_set_value(v22, "kWCMCellularNetworkConfiguration_BandInfoSet_DirectionMask", v33);
    v35 = xpc_null_create();
    xpc_release(v33);
    xpc_release(v35);
    xpc_array_append_value(xarray, v22);
    if (cf)
      CFRelease(cf);
    xpc_release(v22);
    MEMORY[0x1C3B893A8](v41);
    v18 = v42;
    if (v42)
LABEL_49:
      CFRelease(v18);
LABEL_15:
    ++v13;
  }
  while (v9 != v13);
  if (MEMORY[0x1C3B8A86C](xarray) == MEMORY[0x1E0C812C8])
  {
    if (xarray)
    {
      xpc_retain(xarray);
      v36 = xarray;
    }
    else
    {
      v36 = xpc_null_create();
    }
    xpc_dictionary_set_value(*v38, a3, v36);
    v37 = xpc_null_create();
    xpc_release(v36);
    xpc_release(v37);
  }
  xpc_release(xarray);
}

void sub_1BF3474F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, char a13, int a14, __int16 a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void coex::Module::State::sendWWANState_sync(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t (*v7)(uint64_t);
  ctu::cf::map_adapter *v8;
  const __CFDictionary *v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  const void *v14;
  CFTypeID v15;
  CFTypeID TypeID;
  uint64_t v17;
  const void *v18;
  const void *v19;
  CFTypeID v20;
  CFTypeID v21;
  const __CFDictionary *v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  CFTypeID v27;
  const __CFNumber *v28;
  int v29;
  __CFDictionary *Mutable;
  __CFDictionary *v31;
  const void *v32;
  uint64_t v33;
  CFTypeID v34;
  CFMutableDictionaryRef v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  CFTypeID v39;
  const __CFNumber *v40;
  int v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  CFTypeID v45;
  const __CFNumber *v46;
  int v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  CFTypeID v51;
  const __CFNumber *v52;
  int v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int *v56;
  CFTypeID v57;
  const __CFNumber *v58;
  int v59;
  const __CFArray *v60;
  const __CFArray *v61;
  uint64_t (*v62)(uint64_t);
  void *v63;
  xpc_object_t v64;
  const __CFArray *v65;
  const __CFArray *v66;
  uint64_t (*v67)(uint64_t);
  void *v68;
  xpc_object_t v69;
  const __CFArray *v70;
  const __CFArray *v71;
  uint64_t (*v72)(uint64_t);
  void *v73;
  xpc_object_t v74;
  const __CFArray *v75;
  const __CFArray *v76;
  uint64_t (*v77)(uint64_t);
  void *v78;
  xpc_object_t v79;
  const __CFDictionary *v80;
  const __CFArray *v81;
  const __CFArray *v82;
  uint64_t (*v83)(uint64_t);
  void *v84;
  xpc_object_t v85;
  const __CFArray *v86;
  const __CFArray *v87;
  uint64_t (*v88)(uint64_t);
  void *v89;
  xpc_object_t v90;
  const __CFArray *v91;
  const __CFArray *v92;
  uint64_t (*v93)(uint64_t);
  void *v94;
  xpc_object_t v95;
  const __CFArray *v96;
  const __CFArray *v97;
  uint64_t (*v98)(uint64_t);
  void *v99;
  xpc_object_t v100;
  const __CFArray *v101;
  const __CFArray *v102;
  uint64_t (*v103)(uint64_t);
  void *v104;
  xpc_object_t v105;
  uint64_t v106;
  const __CFDictionary *v107;
  uint64_t (*v108)(uint64_t);
  unsigned int *v109;
  unsigned int *v110;
  CFTypeID v111;
  const __CFNumber *v112;
  int v113;
  uint64_t v114;
  xpc_object_t v115;
  int v116;
  uint64_t v117;
  const __CFArray *v118;
  const __CFArray *v119;
  _QWORD v120[2];
  void (*v121)(uint64_t, int64_t);
  void *v122;
  uint64_t *v123;
  _QWORD v124[2];
  xpc_object_t v125;
  CFArrayRef v126[2];
  xpc_object_t v127;
  CFArrayRef v128[2];
  xpc_object_t v129;
  CFArrayRef v130[2];
  xpc_object_t v131;
  CFArrayRef v132[2];
  xpc_object_t v133;
  CFArrayRef v134[2];
  xpc_object_t v135;
  CFArrayRef v136[2];
  xpc_object_t v137;
  CFArrayRef v138[2];
  xpc_object_t v139;
  CFArrayRef v140[2];
  xpc_object_t v141;
  CFArrayRef v142;
  int64_t value;
  _QWORD v144[2];
  void (*v145)(uint64_t, int64_t);
  void *v146;
  uint64_t *v147;
  _QWORD v148[2];
  _QWORD v149[2];
  void (*v150)(uint64_t, int64_t);
  void *v151;
  uint64_t *v152;
  _QWORD v153[2];
  _QWORD v154[2];
  void (*v155)(uint64_t, int64_t);
  void *v156;
  uint64_t *v157;
  _QWORD v158[2];
  _QWORD v159[2];
  void (*v160)(uint64_t, int64_t);
  void *v161;
  uint64_t *v162;
  _QWORD v163[2];
  _QWORD v164[2];
  void (*v165)(uint64_t, int64_t);
  void *v166;
  uint64_t *v167;
  _QWORD v168[2];
  _QWORD v169[2];
  void (*v170)(uint64_t, const __CFDictionary *);
  void *v171;
  uint64_t *v172;
  _QWORD v173[2];
  _QWORD v174[2];
  void (*v175)(uint64_t, const __CFDictionary *);
  void *v176;
  uint64_t *v177;
  _QWORD v178[2];
  const __CFDictionary *v179;
  _QWORD v180[2];
  __CFDictionary *v181;
  CFMutableDictionaryRef v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  xpc_object_t (*v186)(uint64_t, uint64_t);
  void (*v187)(uint64_t);
  xpc_object_t v188;
  unsigned int v189;
  unint64_t v190;
  unint64_t v191;
  void (*v192)(uint64_t);
  void *v193;
  uint64_t v194;
  xpc_object_t v195;
  int v196;
  int v197;

  v183 = 0;
  v184 = &v183;
  v185 = 0x3002000000;
  v186 = __Block_byref_object_copy__195;
  v187 = __Block_byref_object_dispose__196;
  v188 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    v188 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    v188 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v5) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  v188 = v6;
LABEL_9:
  xpc_release(v5);
  v182 = (CFMutableDictionaryRef)0xAAAAAAAAAAAAAAAALL;
  coex::Module::State::getSubProperty(a1, coex::kKeyWWANState, a2, 0, &v182);
  v7 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  if (!v182)
    v7 = 0;
  if (v7)
  {
    v180[0] = 0xAAAAAAAAAAAAAAAALL;
    v180[1] = 0xAAAAAAAAAAAAAAAALL;
    v8 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v180, v182);
    v179 = 0;
    v9 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef(v8, (const __CFString *)*MEMORY[0x1E0DDF3F8]);
    v179 = v9;
    if (v9)
      v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    else
      v10 = 0;
    v11 = MEMORY[0x1E0C809B0];
    if (v10)
    {
      v190 = 0xAAAAAAAAAAAAAAAALL;
      v191 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v190, v9);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v178, (const ctu::cf::dict_adapter *)&v190);
      v12 = *MEMORY[0x1E0DDF3F0];
      v174[0] = v11;
      v174[1] = 0x40000000;
      v175 = (void (*)(uint64_t, const __CFDictionary *))___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke;
      v176 = &unk_1E78FD850;
      v177 = &v183;
      v13 = (const void *)(*(uint64_t (**)(_QWORD *, uint64_t))v178[0])(v178, v12);
      v14 = v13;
      if (v13)
      {
        v15 = CFGetTypeID(v13);
        TypeID = CFDictionaryGetTypeID();
        CFRelease(v14);
        if (v15 == TypeID)
          v175((uint64_t)v174, (const __CFDictionary *)v14);
      }
      MEMORY[0x1C3B893A8](v178);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v173, (const ctu::cf::dict_adapter *)&v190);
      v17 = *MEMORY[0x1E0DDF3D8];
      v169[0] = v11;
      v169[1] = 0x40000000;
      v170 = (void (*)(uint64_t, const __CFDictionary *))___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_2;
      v171 = &unk_1E78FD878;
      v172 = &v183;
      v18 = (const void *)(*(uint64_t (**)(_QWORD *, uint64_t))v173[0])(v173, v17);
      v19 = v18;
      if (v18)
      {
        v20 = CFGetTypeID(v18);
        v21 = CFDictionaryGetTypeID();
        CFRelease(v19);
        if (v20 == v21)
          v170((uint64_t)v169, (const __CFDictionary *)v19);
      }
      MEMORY[0x1C3B893A8](v173);
      MEMORY[0x1C3B893A8](&v190);
    }
    v22 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)v180, (const __CFString *)*MEMORY[0x1E0DDF3E0]);
    v179 = v22;
    if (v9)
      CFRelease(v9);
    if (v22)
      v23 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    else
      v23 = 0;
    if (v23)
    {
      v190 = 0xAAAAAAAAAAAAAAAALL;
      v191 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v190, v22);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v168, (const ctu::cf::dict_adapter *)&v190);
      v24 = *MEMORY[0x1E0DDF2E0];
      v164[0] = v11;
      v164[1] = 0x40000000;
      v165 = ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_3;
      v166 = &unk_1E78FD8A0;
      v167 = &v183;
      v25 = (unsigned int *)(*(uint64_t (**)(_QWORD *, uint64_t))v168[0])(v168, v24);
      v26 = v25;
      if (v25)
      {
        v27 = CFGetTypeID(v25);
        if (v27 == CFNumberGetTypeID())
        {
          LODWORD(value) = -1431655766;
          v29 = ctu::cf::assign((ctu::cf *)&value, v26, v28);
          CFRelease(v26);
          if (v29)
            v165((uint64_t)v164, value);
        }
        else
        {
          CFRelease(v26);
        }
      }
      MEMORY[0x1C3B893A8](v168);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v163, (const ctu::cf::dict_adapter *)&v190);
      v36 = *MEMORY[0x1E0DDF2A0];
      v159[0] = v11;
      v159[1] = 0x40000000;
      v160 = ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_4;
      v161 = &unk_1E78FD8C8;
      v162 = &v183;
      v37 = (unsigned int *)(*(uint64_t (**)(_QWORD *, uint64_t))v163[0])(v163, v36);
      v38 = v37;
      if (v37)
      {
        v39 = CFGetTypeID(v37);
        if (v39 == CFNumberGetTypeID())
        {
          LODWORD(value) = -1431655766;
          v41 = ctu::cf::assign((ctu::cf *)&value, v38, v40);
          CFRelease(v38);
          if (v41)
            v160((uint64_t)v159, value);
        }
        else
        {
          CFRelease(v38);
        }
      }
      MEMORY[0x1C3B893A8](v163);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v158, (const ctu::cf::dict_adapter *)&v190);
      v42 = *MEMORY[0x1E0DDF380];
      v154[0] = v11;
      v154[1] = 0x40000000;
      v155 = ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_5;
      v156 = &unk_1E78FD8F0;
      v157 = &v183;
      v43 = (unsigned int *)(*(uint64_t (**)(_QWORD *, uint64_t))v158[0])(v158, v42);
      v44 = v43;
      if (v43)
      {
        v45 = CFGetTypeID(v43);
        if (v45 == CFNumberGetTypeID())
        {
          LODWORD(value) = -1431655766;
          v47 = ctu::cf::assign((ctu::cf *)&value, v44, v46);
          CFRelease(v44);
          if (v47)
            v155((uint64_t)v154, value);
        }
        else
        {
          CFRelease(v44);
        }
      }
      MEMORY[0x1C3B893A8](v158);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v153, (const ctu::cf::dict_adapter *)&v190);
      v48 = *MEMORY[0x1E0DDF260];
      v149[0] = v11;
      v149[1] = 0x40000000;
      v150 = ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_6;
      v151 = &unk_1E78FD918;
      v152 = &v183;
      v49 = (unsigned int *)(*(uint64_t (**)(_QWORD *, uint64_t))v153[0])(v153, v48);
      v50 = v49;
      if (v49)
      {
        v51 = CFGetTypeID(v49);
        if (v51 == CFNumberGetTypeID())
        {
          LODWORD(value) = -1431655766;
          v53 = ctu::cf::assign((ctu::cf *)&value, v50, v52);
          CFRelease(v50);
          if (v53)
            v150((uint64_t)v149, value);
        }
        else
        {
          CFRelease(v50);
        }
      }
      MEMORY[0x1C3B893A8](v153);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v148, (const ctu::cf::dict_adapter *)&v190);
      v54 = *MEMORY[0x1E0DDF250];
      v144[0] = v11;
      v144[1] = 0x40000000;
      v145 = ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_7;
      v146 = &unk_1E78FD940;
      v147 = &v183;
      v55 = (unsigned int *)(*(uint64_t (**)(_QWORD *, uint64_t))v148[0])(v148, v54);
      v56 = v55;
      if (v55)
      {
        v57 = CFGetTypeID(v55);
        if (v57 == CFNumberGetTypeID())
        {
          LODWORD(value) = -1431655766;
          v59 = ctu::cf::assign((ctu::cf *)&value, v56, v58);
          CFRelease(v56);
          if (v59)
            v145((uint64_t)v144, value);
        }
        else
        {
          CFRelease(v56);
        }
      }
      MEMORY[0x1C3B893A8](v148);
      MEMORY[0x1C3B893A8](&v190);
    }
    v60 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v180, (const __CFString *)*MEMORY[0x1E0DDF4E0]);
    v61 = v60;
    value = (int64_t)v60;
    if (v60)
      v62 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    else
      v62 = 0;
    if (v62)
    {
      v142 = v60;
      if (v60)
        CFRetain(v60);
      v63 = (void *)v184[5];
      v141 = v63;
      if (v63)
      {
        v64 = xpc_retain(v63);
      }
      else
      {
        v64 = xpc_null_create();
        v63 = v64;
        v141 = v64;
      }
      coex::Module::State::fetchBandInfoSet_sync((uint64_t)v64, &v142, "kWCMCellularNetworkConfiguration_LTEBandInformationSet", &v141);
      xpc_release(v63);
      v141 = 0;
      if (v61)
        CFRelease(v61);
    }
    v65 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v180, (const __CFString *)*MEMORY[0x1E0DDF5E8]);
    v66 = v65;
    v140[1] = v65;
    if (v65)
      v67 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    else
      v67 = 0;
    if (v67)
    {
      v140[0] = v65;
      if (v65)
        CFRetain(v65);
      v68 = (void *)v184[5];
      v139 = v68;
      if (v68)
      {
        v69 = xpc_retain(v68);
      }
      else
      {
        v69 = xpc_null_create();
        v68 = v69;
        v139 = v69;
      }
      coex::Module::State::fetchBandInfoSet_sync((uint64_t)v69, v140, "kWCMCellularNetworkConfiguration_TDSCDMABandInformationSet", &v139);
      xpc_release(v68);
      v139 = 0;
      if (v66)
        CFRelease(v66);
    }
    v70 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v180, (const __CFString *)*MEMORY[0x1E0DDF4C0]);
    v71 = v70;
    v138[1] = v70;
    if (v70)
      v72 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    else
      v72 = 0;
    if (v72)
    {
      v138[0] = v70;
      if (v70)
        CFRetain(v70);
      v73 = (void *)v184[5];
      v137 = v73;
      if (v73)
      {
        v74 = xpc_retain(v73);
      }
      else
      {
        v74 = xpc_null_create();
        v73 = v74;
        v137 = v74;
      }
      coex::Module::State::fetchBandInfoSet_sync((uint64_t)v74, v138, "kWCMCellularNetworkConfiguration_GSMBandInformationSet", &v137);
      xpc_release(v73);
      v137 = 0;
      if (v71)
        CFRelease(v71);
    }
    v75 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v180, (const __CFString *)*MEMORY[0x1E0DDF520]);
    v76 = v75;
    v136[1] = v75;
    if (v75)
      v77 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    else
      v77 = 0;
    if (v77)
    {
      v136[0] = v75;
      if (v75)
        CFRetain(v75);
      v78 = (void *)v184[5];
      v135 = v78;
      if (v78)
      {
        v79 = xpc_retain(v78);
      }
      else
      {
        v79 = xpc_null_create();
        v78 = v79;
        v135 = v79;
      }
      coex::Module::State::fetchBandInfoSet_sync((uint64_t)v79, v136, "kWCMCellularNetworkConfiguration_ONEXBandInformationSet", &v135);
      xpc_release(v78);
      v135 = 0;
      if (v76)
        CFRelease(v76);
    }
    v118 = v66;
    v119 = v61;
    v80 = v22;
    v81 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v180, (const __CFString *)*MEMORY[0x1E0DDF4D0]);
    v82 = v81;
    v134[1] = v81;
    if (v81)
      v83 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    else
      v83 = 0;
    if (v83)
    {
      v134[0] = v81;
      if (v81)
        CFRetain(v81);
      v84 = (void *)v184[5];
      v133 = v84;
      if (v84)
      {
        v85 = xpc_retain(v84);
      }
      else
      {
        v85 = xpc_null_create();
        v84 = v85;
        v133 = v85;
      }
      coex::Module::State::fetchBandInfoSet_sync((uint64_t)v85, v134, "kWCMCellularNetworkConfiguration_HDRBandInformationSet", &v133);
      xpc_release(v84);
      v133 = 0;
      if (v82)
        CFRelease(v82);
    }
    v117 = a1;
    v86 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v180, (const __CFString *)*MEMORY[0x1E0DDF578]);
    v87 = v86;
    v132[1] = v86;
    if (v86)
      v88 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    else
      v88 = 0;
    if (v88)
    {
      v132[0] = v86;
      if (v86)
        CFRetain(v86);
      v89 = (void *)v184[5];
      v131 = v89;
      if (v89)
      {
        v90 = xpc_retain(v89);
      }
      else
      {
        v90 = xpc_null_create();
        v89 = v90;
        v131 = v90;
      }
      coex::Module::State::fetchBandInfoSet_sync((uint64_t)v90, v132, "kWCMCellularNetworkConfiguration_WCDMABandInformationSet", &v131);
      xpc_release(v89);
      v131 = 0;
      if (v87)
        CFRelease(v87);
    }
    v116 = a2;
    v91 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v180, (const __CFString *)*MEMORY[0x1E0DDF4F0]);
    v92 = v91;
    v130[1] = v91;
    if (v91)
      v93 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    else
      v93 = 0;
    if (v93)
    {
      v130[0] = v91;
      if (v91)
        CFRetain(v91);
      v94 = (void *)v184[5];
      v129 = v94;
      if (v94)
      {
        v95 = xpc_retain(v94);
      }
      else
      {
        v95 = xpc_null_create();
        v94 = v95;
        v129 = v95;
      }
      coex::Module::State::fetchBandInfoSet_sync((uint64_t)v95, v130, "kWCMCellularNetworkConfiguration_NGCBandInformationSet", &v129);
      xpc_release(v94);
      v129 = 0;
      if (v92)
        CFRelease(v92);
    }
    v96 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v180, (const __CFString *)*MEMORY[0x1E0DDF598]);
    v97 = v96;
    v128[1] = v96;
    if (v96)
      v98 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    else
      v98 = 0;
    if (v98)
    {
      v128[0] = v96;
      if (v96)
        CFRetain(v96);
      v99 = (void *)v184[5];
      v127 = v99;
      if (v99)
      {
        v100 = xpc_retain(v99);
      }
      else
      {
        v100 = xpc_null_create();
        v99 = v100;
        v127 = v100;
      }
      coex::Module::State::fetchCarrierIdSet_sync((uint64_t)v100, v128, "kWCMCellularNetworkConfiguration_LTECarrierInformationSet", &v127);
      xpc_release(v99);
      v127 = 0;
      if (v97)
        CFRelease(v97);
    }
    v101 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v180, (const __CFString *)*MEMORY[0x1E0DDF5A0]);
    v102 = v101;
    v126[1] = v101;
    if (v101)
      v103 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    else
      v103 = 0;
    if (v103)
    {
      v126[0] = v101;
      if (v101)
        CFRetain(v101);
      v104 = (void *)v184[5];
      v125 = v104;
      if (v104)
      {
        v105 = xpc_retain(v104);
      }
      else
      {
        v105 = xpc_null_create();
        v104 = v105;
        v125 = v105;
      }
      coex::Module::State::fetchCarrierIdSet_sync((uint64_t)v105, v126, "kWCMCellularNetworkConfiguration_NGCCarrierInformationSet", &v125);
      xpc_release(v104);
      v125 = 0;
      if (v102)
        CFRelease(v102);
    }
    v106 = *MEMORY[0x1E0DDF300];
    v107 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)v180, (const __CFString *)*MEMORY[0x1E0DDF300]);
    v179 = v107;
    if (v80)
      CFRelease(v80);
    v108 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    if (!v107)
      v108 = 0;
    if (v108)
    {
      v190 = 0xAAAAAAAAAAAAAAAALL;
      v191 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v190, v107);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v124, (const ctu::cf::dict_adapter *)&v190);
      v120[0] = MEMORY[0x1E0C809B0];
      v120[1] = 0x40000000;
      v121 = ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_8;
      v122 = &unk_1E78FD968;
      v123 = &v183;
      v109 = (unsigned int *)(*(uint64_t (**)(_QWORD *, uint64_t))v124[0])(v124, v106);
      v110 = v109;
      if (v109)
      {
        v111 = CFGetTypeID(v109);
        if (v111 == CFNumberGetTypeID())
        {
          v189 = -1431655766;
          v113 = ctu::cf::assign((ctu::cf *)&v189, v110, v112);
          CFRelease(v110);
          if (v113)
            v121((uint64_t)v120, v189);
        }
        else
        {
          CFRelease(v110);
        }
      }
      MEMORY[0x1C3B893A8](v124);
      MEMORY[0x1C3B893A8](&v190);
    }
    v114 = *(_QWORD *)(v117 + 120);
    if (v114)
    {
      v115 = (xpc_object_t)v184[5];
      if (v115)
        xpc_retain((xpc_object_t)v184[5]);
      else
        v115 = xpc_null_create();
      v190 = MEMORY[0x1E0C809B0];
      v191 = 1174405120;
      v192 = ___ZN4coex9XpcClient11sendMessageE19WCMReceiveMessageIdN3xpc6objectENS_5SubIdE_block_invoke;
      v193 = &__block_descriptor_tmp_7_3;
      v196 = 300;
      v194 = v114;
      v195 = v115;
      if (v115)
        xpc_retain(v115);
      else
        v195 = xpc_null_create();
      v197 = v116;
      ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped((uint64_t *)(v114 + 8), (uint64_t)&v190);
      xpc_release(v195);
      xpc_release(v115);
    }
    if (v102)
      CFRelease(v102);
    if (v97)
      CFRelease(v97);
    if (v92)
      CFRelease(v92);
    if (v87)
      CFRelease(v87);
    if (v82)
      CFRelease(v82);
    if (v76)
      CFRelease(v76);
    if (v71)
      CFRelease(v71);
    if (v118)
      CFRelease(v118);
    if (v119)
      CFRelease(v119);
    if (v107)
      CFRelease(v107);
    MEMORY[0x1C3B893A8](v180);
    v35 = v182;
    if (v182)
LABEL_207:
      CFRelease(v35);
  }
  else
  {
    v190 = 0;
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v31 = Mutable;
    if (Mutable)
      v190 = (unint64_t)Mutable;
    v32 = (const void *)*MEMORY[0x1E0C9AE50];
    ctu::cf::insert<__CFString const*,__CFBoolean const*>(Mutable, (CFTypeRef)*MEMORY[0x1E0DDF338], (CFTypeRef)*MEMORY[0x1E0C9AE50]);
    ctu::cf::insert<__CFString const*,__CFBoolean const*>(v31, (CFTypeRef)*MEMORY[0x1E0DDF390], v32);
    ctu::cf::insert<__CFString const*,__CFBoolean const*>(v31, (CFTypeRef)*MEMORY[0x1E0DDF2C8], v32);
    v33 = *(_QWORD *)(a1 + 104);
    if (v33)
    {
      if (v31 && (v34 = CFGetTypeID(v31), v34 == CFDictionaryGetTypeID()))
      {
        v181 = v31;
        CFRetain(v31);
      }
      else
      {
        v181 = 0;
      }
      (*(void (**)(uint64_t, __CFDictionary **, uint64_t))(*(_QWORD *)v33 + 72))(v33, &v181, a2);
      if (v181)
        CFRelease(v181);
    }
    if (v31)
      CFRelease(v31);
    v35 = v182;
    if (v182)
      goto LABEL_207;
  }
  _Block_object_dispose(&v183, 8);
  xpc_release(v188);
}

void sub_1BF348500(_Unwind_Exception *a1)
{
  uint64_t v1;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v1 - 232));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v1 - 160));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v1 - 224));
  _Block_object_dispose((const void *)(v1 - 216), 8);
  xpc_release(*(xpc_object_t *)(v1 - 176));
  _Unwind_Resume(a1);
}

void sub_1BF34888C()
{
  JUMPOUT(0x1BF34883CLL);
}

void DataStallDetection::create(capabilities::abs *a1@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  if (capabilities::abs::supportsRadioHealth(a1))
  {
    v4 = operator new(0xA0uLL);
    v5 = (uint64_t)v4;
    v6 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
    v12 = *(_QWORD *)a1;
    v13 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    DataStallDetection::DataStallDetection((uint64_t)v4, &v12);
    *a2 = 0xAAAAAAAAAAAAAAAALL;
    a2[1] = 0xAAAAAAAAAAAAAAAALL;
    std::shared_ptr<DataStallDetection>::shared_ptr[abi:ne180100]<DataStallDetection,std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection*)#1},void>(a2, v5);
    ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2);
    v9 = v13;
    if (v13)
    {
      v10 = (unint64_t *)&v13->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_1BF348984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF3489A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF3489B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t DataStallDetection::DataStallDetection(uint64_t a1, _QWORD *a2)
{
  NSObject *initially_inactive;
  NSObject *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v47;
  _BYTE v48[16];
  _QWORD v49[2];
  __int128 v50;

  *(_QWORD *)a1 = off_1E78FB648;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v48, "com.apple.telephony.abm", "net.stall");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v5 = dispatch_queue_create_with_target_V2("net.stall", initially_inactive, 0);
  dispatch_set_qos_class_floor(v5, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v5);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v5;
  if (v5)
  {
    dispatch_retain(v5);
    *(_QWORD *)(a1 + 96) = 0;
    dispatch_release(v5);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_QWORD *)a1 = off_1E78FB7D8;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v50);
  *(_QWORD *)(a1 + 8) = &unk_1E78FB900;
  *(_QWORD *)(a1 + 56) = *a2;
  v6 = a2[1];
  *(_QWORD *)(a1 + 64) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v49);
  *(_QWORD *)a1 = off_1E78FB868;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v48);
  *(_QWORD *)a1 = off_1E78FB648;
  *(_QWORD *)(a1 + 104) = *a2;
  v9 = a2[1];
  *(_QWORD *)(a1 + 112) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v12 = off_1ED70FA00;
  if (!off_1ED70FA00)
  {
    ABMServer::create_default_global(&v50);
    v13 = v50;
    v50 = 0uLL;
    v14 = (std::__shared_weak_count *)*(&off_1ED70FA00 + 1);
    off_1ED70FA00 = v13;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
    if (*((_QWORD *)&v50 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v12 = off_1ED70FA00;
  }
  v20 = (std::__shared_weak_count *)*(&off_1ED70FA00 + 1);
  if (*(&off_1ED70FA00 + 1))
  {
    v21 = (unint64_t *)(*(&off_1ED70FA00 + 1) + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v23 = *(_QWORD *)(*(_QWORD *)v12 + 208);
  if (v20)
  {
    v24 = (unint64_t *)&v20->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  *(_QWORD *)(a1 + 120) = v23;
  v26 = _Block_copy(&__block_literal_global);
  v27 = *(_QWORD *)(a1 + 88);
  if (v27)
    dispatch_retain(*(dispatch_object_t *)(a1 + 88));
  *(_QWORD *)(a1 + 128) = v26;
  *(_QWORD *)(a1 + 136) = v27;
  v28 = (std::__shared_weak_count *)a2[1];
  v47 = v28;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v31 = off_1ED70FA00;
  if (!off_1ED70FA00)
  {
    ABMServer::create_default_global(&v50);
    v32 = v50;
    v50 = 0uLL;
    v33 = (std::__shared_weak_count *)*(&off_1ED70FA00 + 1);
    off_1ED70FA00 = v32;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
    if (*((_QWORD *)&v50 + 1))
    {
      v37 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v31 = off_1ED70FA00;
  }
  v39 = (std::__shared_weak_count *)*(&off_1ED70FA00 + 1);
  v49[0] = v31;
  v49[1] = *(&off_1ED70FA00 + 1);
  if (*(&off_1ED70FA00 + 1))
  {
    v40 = (unint64_t *)(*(&off_1ED70FA00 + 1) + 8);
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  ctu::iokit::Controller::create();
  if (v39)
  {
    v42 = (unint64_t *)&v39->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (v47)
  {
    v44 = (unint64_t *)&v47->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  return a1;
}

void sub_1BF348E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;

  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  dispatch::callback<void({block_pointer})(std::string)>::~callback((uint64_t)(v9 + 16));
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v10);
  ctu::SharedLoggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v9);
  _Unwind_Resume(a1);
}

void sub_1BF348EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  _QWORD *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

const char *DataStallDetection::getName(DataStallDetection *this)
{
  return "net.stall";
}

uint64_t std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t dispatch::callback<void({block_pointer})(std::string)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

_QWORD *ctu::SharedLoggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E78FB7D8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E78FB7D8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void DataStallDetection::~DataStallDetection(DataStallDetection *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  __CFRunLoop *v5;
  NSObject *v6;
  NSObject *v7;
  __CFRunLoop *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  const void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  NSObject *v19;
  std::__shared_weak_count *v20;
  _QWORD block[4];
  dispatch_group_t group;

  *(_QWORD *)this = off_1E78FB648;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (__CFRunLoop *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_19;
  }
  else
  {
LABEL_5:
    v5 = (__CFRunLoop *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_19;
  }
  if (CFRunLoopIsWaiting(v5))
  {
    v6 = dispatch_group_create();
    v7 = v6;
    if (v6)
    {
      dispatch_retain(v6);
      dispatch_group_enter(v7);
    }
    v8 = (__CFRunLoop *)*((_QWORD *)this + 15);
    v9 = (const void *)*MEMORY[0x1E0C9B280];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZN18DataStallDetectionD2Ev_block_invoke;
    block[3] = &__block_descriptor_tmp_3;
    group = v7;
    if (v7)
    {
      dispatch_retain(v7);
      dispatch_group_enter(v7);
    }
    CFRunLoopPerformBlock(v8, v9, block);
    CFRunLoopWakeUp(*((CFRunLoopRef *)this + 15));
    if (group)
    {
      dispatch_group_leave(group);
      if (group)
        dispatch_release(group);
    }
    if (v7)
    {
      dispatch_group_leave(v7);
      dispatch_release(v7);
      dispatch_group_wait(v7, 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(v7);
    }
    else
    {
      dispatch_group_wait(0, 0xFFFFFFFFFFFFFFFFLL);
    }
  }
LABEL_19:
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *((_QWORD *)this + 17);
  if (v13)
    dispatch_release(v13);
  v14 = (const void *)*((_QWORD *)this + 16);
  if (v14)
    _Block_release(v14);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_QWORD *)this = off_1E78FB7D8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v18 = *((_QWORD *)this + 12);
  if (v18)
    dispatch_release(v18);
  v19 = *((_QWORD *)this + 11);
  if (v19)
    dispatch_release(v19);
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
}

{
  void *v1;

  DataStallDetection::~DataStallDetection(this);
  operator delete(v1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void __copy_helper_block_e8_32c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;

  v3 = *(NSObject **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    v4 = *(NSObject **)(a1 + 32);
    if (v4)
      dispatch_group_enter(v4);
  }
}

void __destroy_helper_block_e8_32c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(a1 + 32);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 32);
    if (v3)
      dispatch_release(v3);
  }
}

void DataStallDetection::start(DataStallDetection *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  NSObject *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::string *v30;
  std::string *v31;
  void *v32;
  _QWORD v33[5];
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36[2];
  NetworkStatsInterface *v37;
  unint64_t v38;
  void *v39;
  std::string *v40;
  unint64_t v41;
  _QWORD *v42;
  uint8_t buf[16];
  _BYTE v44[32];

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v4 = v3;
  p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
  do
    v6 = __ldxr(p_shared_weak_owners);
  while (__stxr(v6 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v9 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEFAULT, "#I Start", buf, 2u);
  }
  v37 = (NetworkStatsInterface *)0xAAAAAAAAAAAAAAAALL;
  v38 = 0xAAAAAAAAAAAAAAAALL;
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  v36[0] = *((_QWORD *)this + 13);
  v36[1] = (uint64_t)v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  NetworkStatsInterface::create(v36, (uint64_t *)&v37);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v34 = (_QWORD *)0xAAAAAAAAAAAAAAAALL;
  v35 = 0xAAAAAAAAAAAAAAAALL;
  NetworkStatsInterface::query(v37, &v34);
  v15 = v34 + 1;
  v16 = (_QWORD *)*v34;
  if ((_QWORD *)*v34 != v34 + 1)
  {
    do
    {
      *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)buf = v17;
      *(_OWORD *)v44 = v17;
      *(_OWORD *)&v44[16] = v17;
      *(_DWORD *)buf = *((_DWORD *)v16 + 8);
      v44[0] = *((_BYTE *)v16 + 48);
      *(_QWORD *)&buf[8] = v16[5];
      if (*((char *)v16 + 79) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v44[8], (const std::string::value_type *)v16[7], v16[8]);
      }
      else
      {
        *(_OWORD *)&v44[8] = *(_OWORD *)(v16 + 7);
        *(_QWORD *)&v44[24] = v16[9];
      }
      v18 = v40;
      if ((unint64_t)v40 >= v41)
      {
        v40 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v39, (uint64_t)&v44[8]);
        if ((v44[31] & 0x80000000) == 0)
          goto LABEL_30;
      }
      else if ((v44[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v40, *(const std::string::value_type **)&v44[8], *(std::string::size_type *)&v44[16]);
        v40 = v18 + 1;
        if ((v44[31] & 0x80000000) == 0)
        {
LABEL_30:
          v20 = (_QWORD *)v16[1];
          if (!v20)
            goto LABEL_36;
          goto LABEL_34;
        }
      }
      else
      {
        v19 = *(_OWORD *)&v44[8];
        v40->__r_.__value_.__r.__words[2] = *(_QWORD *)&v44[24];
        *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
        v40 = v18 + 1;
        if ((v44[31] & 0x80000000) == 0)
          goto LABEL_30;
      }
      operator delete(*(void **)&v44[8]);
      v20 = (_QWORD *)v16[1];
      if (!v20)
      {
        do
        {
LABEL_36:
          v21 = (_QWORD *)v16[2];
          v22 = *v21 == (_QWORD)v16;
          v16 = v21;
        }
        while (!v22);
        goto LABEL_21;
      }
      do
      {
LABEL_34:
        v21 = v20;
        v20 = (_QWORD *)*v20;
      }
      while (v20);
LABEL_21:
      v16 = v21;
    }
    while (v21 != v15);
  }
  v33[0] = MEMORY[0x1E0C809B0];
  v33[1] = 0x40000000;
  v33[2] = ___ZN18DataStallDetection5startEv_block_invoke;
  v33[3] = &__block_descriptor_tmp_5;
  v33[4] = this;
  v42 = v33;
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)v44 = ___ZNK3ctu20SharedSynchronizableI18DataStallDetectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  *(_QWORD *)&v44[8] = &__block_descriptor_tmp_9;
  *(_QWORD *)&v44[16] = (char *)this + 72;
  *(_QWORD *)&v44[24] = &v42;
  v23 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12))
  {
    dispatch_async_and_wait(v23, buf);
    v24 = (std::__shared_weak_count *)v35;
    if (!v35)
      goto LABEL_47;
  }
  else
  {
    dispatch_sync(v23, buf);
    v24 = (std::__shared_weak_count *)v35;
    if (!v35)
      goto LABEL_47;
  }
  v25 = (unint64_t *)&v24->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
LABEL_47:
  v27 = (std::__shared_weak_count *)v38;
  if (v38)
  {
    v28 = (unint64_t *)(v38 + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::string *)v39;
  if (v39)
  {
    v31 = v40;
    v32 = v39;
    if (v40 != v39)
    {
      do
      {
        if (SHIBYTE(v31[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v31[-1].__r_.__value_.__l.__data_);
        --v31;
      }
      while (v31 != v30);
      v32 = v39;
    }
    v40 = v30;
    operator delete(v32);
  }
  std::__shared_weak_count::__release_weak(v4);
}

void sub_1BF3496C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::__shared_weak_count *v33;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::vector<std::string>::~vector[abi:ne180100](&a21);
  std::__shared_weak_count::__release_weak(v33);
  _Unwind_Resume(a1);
}

void ___ZN18DataStallDetection5startEv_block_invoke(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1BF335000, v1, OS_LOG_TYPE_DEFAULT, "#I Started", v2, 2u);
  }
}

void **std::vector<std::string>::~vector[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void DataStallDetection::setCallback(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  NSObject *v6;
  _QWORD v7[5];
  void *aBlock;
  dispatch_object_t object;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN18DataStallDetection11setCallbackEN8dispatch8callbackIU13block_pointerFvNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_6;
  v7[4] = a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = (uint64_t *)(a1 + 72);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  ctu::SharedSynchronizable<DataStallDetection>::execute_wrapped(v5, (uint64_t)v7);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN18DataStallDetection11setCallbackEN8dispatch8callbackIU13block_pointerFvNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke(_QWORD *a1)
{
  _QWORD *v2;
  NSObject *v3;
  void *v4;
  const void *v5;
  NSObject *v6;
  NSObject *v7;
  uint8_t v8[16];

  v2 = (_QWORD *)a1[4];
  v3 = v2[5];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I setCallback", v8, 2u);
  }
  v4 = (void *)a1[5];
  if (v4)
    v4 = _Block_copy(v4);
  v5 = (const void *)v2[16];
  v2[16] = v4;
  if (v5)
    _Block_release(v5);
  v6 = a1[6];
  if (v6)
    dispatch_retain(v6);
  v7 = v2[17];
  v2[17] = v6;
  if (v7)
    dispatch_release(v7);
}

void __copy_helper_block_e8_40c109_ZTSN8dispatch8callbackIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 40);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_40c109_ZTSN8dispatch8callbackIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

uint64_t ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "net.stall");
}

uint64_t ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  v2 = a1[3];
  if (v2)
    dispatch_release(v2);
  v3 = a1[2];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

_QWORD *ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E78FB7D8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E78FB7D8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E78FADC0, (void (*)(void *))MEMORY[0x1E0DE42D0]);
}

void sub_1BF349BB0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

std::string *std::vector<std::string>::__push_back_slow_path<std::string const&>(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  std::string *v10;
  std::string *v11;
  __int128 v12;
  char *v13;
  void **v14;
  std::string *v16;
  std::string *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (std::string *)&v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 1;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    v11 = v10 + 1;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    v10[-1].__r_.__value_.__r.__words[2] = *((_QWORD *)v4 - 1);
    *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v12;
    --v10;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = (char *)v10;
  a1[1] = (char *)v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_1BF349DD0(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer end;
  std::__split_buffer<std::string>::pointer begin;
  std::__split_buffer<std::string>::pointer v4;

  begin = this->__begin_;
  end = this->__end_;
  if (end != begin)
  {
    do
    {
      v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        v4 = this->__end_;
      }
      end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_)
    operator delete(this->__first_);
}

void std::vector<std::string>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF349F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF349F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<DataStallDetection>::shared_ptr[abi:ne180100]<DataStallDetection,std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E78FB818;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF34A090(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection*)#1}::operator() const(DataStallDetection*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF34A0B0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<DataStallDetection *,std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection *)#1},std::allocator<DataStallDetection>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<DataStallDetection *,std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection *)#1},std::allocator<DataStallDetection>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection*)#1}::operator() const(DataStallDetection*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<DataStallDetection *,std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection *)#1},std::allocator<DataStallDetection>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI18DataStallDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI18DataStallDetectionE15make_shared_ptrIS1_EENSt3__110shared"
                                "_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI18DataStallDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI18DataStallDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection*)#1}::operator() const(DataStallDetection*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedLoggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E78FB7D8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

uint64_t ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE4F80] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E28], MEMORY[0x1E0DE43F0]);
}

void ctu::SharedSynchronizable<DataStallDetection>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI18DataStallDetectionE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E78FB8C0;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI18DataStallDetectionE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrIK18DataStallDetectionEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrIK18DataStallDetectionEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t __cxx_global_var_init()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1BF335000);
  }
  return result;
}

capabilities::radio *radio::HealthService::HealthService(capabilities::radio *a1, uint64_t *a2, uint64_t *a3, const void **a4)
{
  capabilities::abs *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  __int128 v18;
  std::__shared_weak_count_vtbl *v19;
  std::__shared_weak_count_vtbl *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  std::__shared_weak_count *v27;
  unint64_t v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  std::__shared_weak_count_vtbl *v35;
  std::__shared_weak_count *v36;
  void (__cdecl *on_zero_shared_weak)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  CommandDriverFactory *v49;
  std::__shared_weak_count_vtbl *v50;
  __int128 v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  __int128 v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  const void *v81;
  std::__shared_weak_count *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  __int128 v86;
  void *__p[2];
  void (*v88)(uint64_t);
  void *v89;
  uint64_t v90;
  CFTypeRef cf;
  uint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD v94[2];
  uint64_t v95;
  std::__shared_weak_count *v96;
  std::__shared_weak_count_vtbl *v97;
  unint64_t v98;
  __int128 v99;

  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  v8 = (capabilities::abs *)capabilities::radio::maverick(a1);
  if (!(_DWORD)v8)
    goto LABEL_95;
  v10 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  v84 = *a2;
  v85 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v14 = *a3;
  v13 = (std::__shared_weak_count *)a3[1];
  v83 = v13;
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = capabilities::abs::supportsRadioHealth(v8);
  v18 = 0uLL;
  if (!v17)
    goto LABEL_82;
  v19 = (std::__shared_weak_count_vtbl *)operator new(0xC8uLL);
  v20 = v19;
  v95 = v10;
  v96 = v9;
  if (v9)
  {
    v21 = (unint64_t *)&v9->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v94[0] = v14;
  v94[1] = v13;
  if (v13)
  {
    v23 = (unint64_t *)&v13->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  radio::HealthService::State::State(v19, &v95, v94);
  v97 = v20;
  v98 = 0xAAAAAAAAAAAAAAAALL;
  v25 = (std::__shared_weak_count *)operator new(0x20uLL);
  v25->__shared_owners_ = 0;
  v26 = (unint64_t *)&v25->__shared_owners_;
  v25->__vftable = (std::__shared_weak_count_vtbl *)off_1E78FBC18;
  v25->__shared_weak_owners_ = 0;
  v25[1].__vftable = v20;
  v98 = (unint64_t)v25;
  v27 = (std::__shared_weak_count *)v20[2].~__shared_weak_count;
  if (v27)
  {
    if (v27->__shared_owners_ != -1)
      goto LABEL_27;
    do
      v28 = __ldxr(v26);
    while (__stxr(v28 + 1, v26));
    p_shared_weak_owners = (unint64_t *)&v25->__shared_weak_owners_;
    do
      v30 = __ldxr(p_shared_weak_owners);
    while (__stxr(v30 + 1, p_shared_weak_owners));
    v20[1].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v20;
    v20[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
    std::__shared_weak_count::__release_weak(v27);
  }
  else
  {
    do
      v31 = __ldxr(v26);
    while (__stxr(v31 + 1, v26));
    v32 = (unint64_t *)&v25->__shared_weak_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
    v20[1].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v20;
    v20[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  }
  do
    v34 = __ldaxr(v26);
  while (__stlxr(v34 - 1, v26));
  if (v34)
  {
LABEL_27:
    v35 = v97;
    if (v97[1].__on_zero_shared)
      goto LABEL_28;
    goto LABEL_36;
  }
  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
  std::__shared_weak_count::__release_weak(v25);
  v35 = v97;
  if (v97[1].__on_zero_shared)
  {
LABEL_28:
    v36 = (std::__shared_weak_count *)v35[2].~__shared_weak_count;
    if (!v36
      || (on_zero_shared_weak = v35[1].__on_zero_shared_weak, (v38 = std::__shared_weak_count::lock(v36)) == 0))
    {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    v39 = v38;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)&v35->~__shared_weak_count_0);
    *(_QWORD *)&v99 = on_zero_shared_weak;
    *((_QWORD *)&v99 + 1) = v39;
    __p[0] = 0;
    __p[1] = 0;
    ctu::TrackedLogger::registerLoggerToServer();
    v40 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
    if (*((_QWORD *)&v99 + 1))
    {
      v41 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v35 = v97;
  }
LABEL_36:
  v43 = v98;
  v97 = 0;
  v98 = 0;
  *(_QWORD *)&v86 = v35;
  *((_QWORD *)&v86 + 1) = v43;
  if (v13)
  {
    v44 = (unint64_t *)&v13->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v46 = v96;
  if (v96)
  {
    v47 = (unint64_t *)&v96->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v50 = (std::__shared_weak_count_vtbl *)off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v49);
    v51 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v52 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v51;
    if (v52)
    {
      v53 = (unint64_t *)&v52->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v50 = (std::__shared_weak_count_vtbl *)off_1ED70FD08;
  }
  v97 = v50;
  v98 = *(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v55 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v92 = v84;
  v93 = v85;
  if (v85)
  {
    v57 = (unint64_t *)&v85->__shared_owners_;
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }
  NetworkStatsInterface::getInterfaceList((NetworkStatsInterface *)v35[3].~__shared_weak_count, __p);
  (*((void (**)(__int128 *__return_ptr, std::__shared_weak_count_vtbl *, uint64_t *, void **))v50->~__shared_weak_count
   + 9))(&v99, v50, &v92, __p);
  v59 = v99;
  v99 = 0uLL;
  v60 = (std::__shared_weak_count *)v35[2].__on_zero_shared_weak;
  *(_OWORD *)&v35[2].__get_deleter = v59;
  if (v60)
  {
    v61 = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v66 = v93;
  if (v93)
  {
    v67 = (unint64_t *)&v93->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = (std::__shared_weak_count *)v98;
  if (v98)
  {
    v70 = (unint64_t *)(v98 + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v18 = v86;
LABEL_82:
  v72 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  *(_OWORD *)a1 = v18;
  if (v72)
  {
    v73 = (unint64_t *)&v72->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  if (!v83)
    goto LABEL_91;
  v75 = (unint64_t *)&v83->__shared_owners_;
  do
    v76 = __ldaxr(v75);
  while (__stlxr(v76 - 1, v75));
  if (!v76)
  {
    ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
    std::__shared_weak_count::__release_weak(v83);
    v77 = v85;
    if (!v85)
      goto LABEL_95;
  }
  else
  {
LABEL_91:
    v77 = v85;
    if (!v85)
      goto LABEL_95;
  }
  v78 = (unint64_t *)&v77->__shared_owners_;
  do
    v79 = __ldaxr(v78);
  while (__stlxr(v79 - 1, v78));
  if (v79)
  {
LABEL_95:
    v80 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
      return a1;
    goto LABEL_96;
  }
  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
  std::__shared_weak_count::__release_weak(v77);
  v80 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    return a1;
LABEL_96:
  v81 = *a4;
  if (v81)
    CFRetain(v81);
  __p[0] = (void *)MEMORY[0x1E0C809B0];
  __p[1] = (void *)1174405120;
  v88 = ___ZN5radio13HealthService5State5startEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v89 = &__block_descriptor_tmp_0;
  v90 = v80;
  cf = v81;
  if (v81)
    CFRetain(v81);
  ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)(v80 + 72), (uint64_t)__p);
  if (cf)
    CFRelease(cf);
  if (v81)
    CFRelease(v81);
  return a1;
}

void sub_1BF34ABA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
  __break(1u);
}

void sub_1BF34AC38()
{
  __cxa_end_catch();
  JUMPOUT(0x1BF34AC64);
}

void sub_1BF34AC48()
{
  JUMPOUT(0x1BF34AC68);
}

void sub_1BF34AC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  uint64_t v13;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v13);
  _Unwind_Resume(a1);
}

void sub_1BF34ACC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void radio::HealthService::State::start(uint64_t a1, const void **a2)
{
  const void *v3;
  _QWORD v4[5];
  CFTypeRef cf;

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 1174405120;
  v4[2] = ___ZN5radio13HealthService5State5startEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v4[3] = &__block_descriptor_tmp_0;
  v3 = *a2;
  v4[4] = a1;
  cf = v3;
  if (v3)
    CFRetain(v3);
  ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v4);
  if (cf)
    CFRelease(cf);
}

const void **ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void radio::HealthService::reportDataStats(radio::HealthService *this)
{
  uint64_t v1;
  _QWORD v2[5];

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 0x40000000;
    v2[2] = ___ZN5radio13HealthService5State15reportDataStatsEv_block_invoke;
    v2[3] = &__block_descriptor_tmp_5_0;
    v2[4] = v1;
    ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)(v1 + 72), (uint64_t)v2);
  }
}

void radio::HealthService::State::reportDataStats(radio::HealthService::State *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5radio13HealthService5State15reportDataStatsEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_5_0;
  v1[4] = this;
  ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void radio::HealthService::reset(radio::HealthService *this)
{
  uint64_t v1;
  _QWORD v2[5];

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 0x40000000;
    v2[2] = ___ZN5radio13HealthService5State5resetEv_block_invoke;
    v2[3] = &__block_descriptor_tmp_6_0;
    v2[4] = v1;
    ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)(v1 + 72), (uint64_t)v2);
  }
}

void radio::HealthService::State::reset(radio::HealthService::State *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5radio13HealthService5State5resetEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_6_0;
  v1[4] = this;
  ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void radio::HealthService::enterLowPower(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  _QWORD block[4];
  void *aBlock;

  v3 = *a1;
  if (*a1)
  {
    if (*(_QWORD *)a2)
    {
      v4 = _Block_copy(*(const void **)a2);
      v5 = *(NSObject **)(a2 + 8);
      v9 = v4;
      v10 = v5;
      if (v5)
        goto LABEL_4;
    }
    else
    {
      v4 = 0;
      v5 = *(NSObject **)(a2 + 8);
      v9 = 0;
      v10 = v5;
      if (v5)
      {
LABEL_4:
        dispatch_retain(v5);
        radio::HealthService::State::enterLowPower(v3, (uint64_t)&v9);
        dispatch_release(v5);
        if (!v4)
          return;
LABEL_10:
        _Block_release(v4);
        return;
      }
    }
    radio::HealthService::State::enterLowPower(v3, (uint64_t)&v9);
    if (!v4)
      return;
    goto LABEL_10;
  }
  if (*(_QWORD *)a2)
    v6 = _Block_copy(*(const void **)a2);
  else
    v6 = 0;
  v7 = *(NSObject **)(a2 + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_18;
  if (!v6)
  {
    aBlock = 0;
    dispatch_async(v7, block);
    v8 = aBlock;
    if (!aBlock)
      goto LABEL_17;
    goto LABEL_16;
  }
  aBlock = _Block_copy(v6);
  dispatch_async(v7, block);
  v8 = aBlock;
  if (aBlock)
LABEL_16:
    _Block_release(v8);
LABEL_17:
  if (v6)
    _Block_release(v6);
}

void radio::HealthService::State::enterLowPower(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  NSObject *v6;
  _QWORD v7[5];
  void *aBlock;
  dispatch_object_t object;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN5radio13HealthService5State13enterLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_13;
  v7[4] = a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = (uint64_t *)(a1 + 72);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped(v5, (uint64_t)v7);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

uint64_t dispatch::callback<void({block_pointer})(void)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void radio::HealthService::exitLowPower(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  _QWORD block[4];
  void *aBlock;

  v3 = *a1;
  if (*a1)
  {
    if (*(_QWORD *)a2)
    {
      v4 = _Block_copy(*(const void **)a2);
      v5 = *(NSObject **)(a2 + 8);
      v9 = v4;
      v10 = v5;
      if (v5)
        goto LABEL_4;
    }
    else
    {
      v4 = 0;
      v5 = *(NSObject **)(a2 + 8);
      v9 = 0;
      v10 = v5;
      if (v5)
      {
LABEL_4:
        dispatch_retain(v5);
        radio::HealthService::State::exitLowPower(v3, (uint64_t)&v9);
        dispatch_release(v5);
        if (!v4)
          return;
LABEL_10:
        _Block_release(v4);
        return;
      }
    }
    radio::HealthService::State::exitLowPower(v3, (uint64_t)&v9);
    if (!v4)
      return;
    goto LABEL_10;
  }
  if (*(_QWORD *)a2)
    v6 = _Block_copy(*(const void **)a2);
  else
    v6 = 0;
  v7 = *(NSObject **)(a2 + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_18;
  if (!v6)
  {
    aBlock = 0;
    dispatch_async(v7, block);
    v8 = aBlock;
    if (!aBlock)
      goto LABEL_17;
    goto LABEL_16;
  }
  aBlock = _Block_copy(v6);
  dispatch_async(v7, block);
  v8 = aBlock;
  if (aBlock)
LABEL_16:
    _Block_release(v8);
LABEL_17:
  if (v6)
    _Block_release(v6);
}

void radio::HealthService::State::exitLowPower(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  NSObject *v6;
  _QWORD v7[5];
  void *aBlock;
  dispatch_object_t object;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN5radio13HealthService5State12exitLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_15;
  v7[4] = a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = (uint64_t *)(a1 + 72);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped(v5, (uint64_t)v7);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void radio::HealthService::State::~State(radio::HealthService::State *this)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  NSObject *v17;
  std::__shared_weak_count *v18;
  uint8_t v19[16];

  *(_QWORD *)this = off_1E78FB948;
  v2 = *((_QWORD *)this + 24);
  if (v2)
  {
    v3 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Stopped data reporting", v19, 2u);
      v2 = *((_QWORD *)this + 24);
    }
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 24));
    *((_QWORD *)this + 24) = 0;
  }
  std::__tree<std::string>::destroy((uint64_t)this + 168, *((char **)this + 22));
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (!v4)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
    if (!v7)
      goto LABEL_15;
  }
  else
  {
LABEL_9:
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
    if (!v7)
      goto LABEL_15;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_15:
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v10)
    goto LABEL_19;
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
    if (!v13)
      goto LABEL_25;
  }
  else
  {
LABEL_19:
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
    if (!v13)
      goto LABEL_25;
  }
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_25:
  *(_QWORD *)this = off_1E78FBBD8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v16 = *((_QWORD *)this + 12);
  if (v16)
    dispatch_release(v16);
  v17 = *((_QWORD *)this + 11);
  if (v17)
    dispatch_release(v17);
  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
}

{
  void *v1;

  radio::HealthService::State::~State(this);
  operator delete(v1);
}

void radio::HealthService::State::stopDataReportingTimer_sync(radio::HealthService::State *this)
{
  NSObject *v1;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *((_QWORD *)this + 24);
  if (v1)
  {
    v3 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Stopped data reporting", v4, 2u);
      v1 = *((_QWORD *)this + 24);
    }
    dispatch_source_cancel(v1);
    dispatch_release(*((dispatch_object_t *)this + 24));
    *((_QWORD *)this + 24) = 0;
  }
}

_QWORD *ctu::SharedLoggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E78FBBD8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E78FBBD8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

_QWORD *radio::HealthService::State::State(_QWORD *a1, uint64_t *a2, _QWORD *a3)
{
  NSObject *initially_inactive;
  NSObject *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21[2];
  _BYTE v22[16];
  char v23[16];
  char v24[16];

  *a1 = off_1E78FB948;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v22, "com.apple.telephony.abm", "net.health.svc");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v7 = dispatch_queue_create_with_target_V2("net.health.svc", initially_inactive, 0);
  dispatch_set_qos_class_floor(v7, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v7);
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = v7;
  if (v7)
  {
    dispatch_retain(v7);
    a1[12] = 0;
    dispatch_release(v7);
  }
  else
  {
    a1[12] = 0;
  }
  *a1 = off_1E78FBBD8;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v24);
  a1[1] = &unk_1E78FB900;
  a1[7] = *a2;
  v8 = a2[1];
  a1[8] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v23);
  *a1 = off_1E78FBC98;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
  *a1 = off_1E78FB948;
  a1[13] = 0;
  a1[14] = 0;
  v11 = *a2;
  v12 = (std::__shared_weak_count *)a2[1];
  v21[0] = v11;
  v21[1] = (uint64_t)v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  NetworkStatsInterface::create(v21, a1 + 15);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  a1[17] = *a3;
  v17 = a3[1];
  a1[18] = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  a1[19] = 0;
  a1[20] = 0;
  a1[23] = 0;
  a1[24] = 0;
  a1[22] = 0;
  a1[21] = a1 + 22;
  return a1;
}

void sub_1BF34B7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;

  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v10);
  ctu::SharedLoggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v9);
  _Unwind_Resume(a1);
}

void sub_1BF34B814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  _QWORD *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

const char *radio::HealthService::State::getName(radio::HealthService::State *this)
{
  return "net.health.svc";
}

void ___ZN5radio13HealthService5State5startEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  radio::HealthService::State *v1;
  const __CFDictionary *v2;
  const __CFDictionary *v3;

  v1 = *(radio::HealthService::State **)(a1 + 32);
  v2 = *(const __CFDictionary **)(a1 + 40);
  v3 = v2;
  if (v2)
    CFRetain(v2);
  radio::HealthService::State::startDataReportingTimer_sync((uint64_t)v1, &v3);
  if (v2)
    CFRelease(v2);
  radio::HealthService::State::startDataStallReporting_sync(v1);
}

void sub_1BF34B8A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t radio::HealthService::State::startDataReportingTimer_sync(uint64_t a1, const __CFDictionary **a2)
{
  unsigned int Int;
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD handler[6];
  std::__shared_weak_count *v25;
  _QWORD v26[2];
  uint8_t buf[16];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v26[0] = 0xAAAAAAAAAAAAAAAALL;
  v26[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v26, *a2);
  Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v26, CFSTR("DataReportingInterval"));
  v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = Int;
    _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I Starting data reporting with interval %d millisec", buf, 8u);
  }
  v5 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, *(dispatch_queue_t *)(a1 + 88));
  *(_QWORD *)(a1 + 192) = v5;
  dispatch_source_set_timer(v5, 0, 1000000 * Int, 0x3B9ACA00uLL);
  v6 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v6 || (v7 = *(_QWORD *)(a1 + 72), (v8 = std::__shared_weak_count::lock(v6)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v14 = *(NSObject **)(a1 + 192);
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 1174405120;
  handler[2] = ___ZN5radio13HealthService5State28startDataReportingTimer_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  handler[3] = &__block_descriptor_tmp_7;
  handler[4] = a1;
  handler[5] = v7;
  v25 = v9;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  dispatch_source_set_event_handler(v14, handler);
  NetworkStatsInterface::query(*(NetworkStatsInterface **)(a1 + 120), buf);
  v16 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v17 = *(std::__shared_weak_count **)(a1 + 160);
  *(_OWORD *)(a1 + 152) = v16;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v21 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  radio::HealthService::State::reportDataStats_sync((radio::HealthService::State *)a1);
  dispatch_activate(*(dispatch_object_t *)(a1 + 192));
  if (v25)
    std::__shared_weak_count::__release_weak(v25);
  std::__shared_weak_count::__release_weak(v9);
  return MEMORY[0x1C3B893A8](v26);
}

void radio::HealthService::State::startDataStallReporting_sync(radio::HealthService::State *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  NSObject *v16;
  _QWORD aBlock[6];
  std::__shared_weak_count *v18;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio13HealthService5State28startDataStallReporting_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_9_0;
  aBlock[4] = this;
  aBlock[5] = v3;
  v18 = v5;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  v11 = _Block_copy(aBlock);
  v12 = *((_QWORD *)this + 11);
  if (v12)
    dispatch_retain(*((dispatch_object_t *)this + 11));
  v13 = *((_QWORD *)this + 17);
  if (v11)
  {
    v14 = _Block_copy(v11);
    v15 = v14;
    v16 = v12;
    if (v12)
      goto LABEL_15;
LABEL_18:
    DataStallDetection::setCallback(v13, (uint64_t)&v15);
    if (!v14)
      goto LABEL_20;
    goto LABEL_19;
  }
  v14 = 0;
  v15 = 0;
  v16 = v12;
  if (!v12)
    goto LABEL_18;
LABEL_15:
  dispatch_retain(v12);
  DataStallDetection::setCallback(v13, (uint64_t)&v15);
  dispatch_release(v12);
  if (v14)
LABEL_19:
    _Block_release(v14);
LABEL_20:
  if (v12)
    dispatch_release(v12);
  if (v11)
    _Block_release(v11);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  std::__shared_weak_count::__release_weak(v5);
}

CFTypeRef __copy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    CFRelease(v1);
}

void ___ZN5radio13HealthService5State15reportDataStatsEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  v1 = *(_QWORD *)(a1 + 32);
  NetworkStatsInterface::query(*(NetworkStatsInterface **)(v1 + 120), &v9);
  v2 = v9;
  v9 = 0uLL;
  v3 = *(std::__shared_weak_count **)(v1 + 160);
  *(_OWORD *)(v1 + 152) = v2;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
      if (*((_QWORD *)&v9 + 1))
        goto LABEL_6;
LABEL_9:
      radio::HealthService::State::reportDataStats_sync((radio::HealthService::State *)v1);
      return;
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (!*((_QWORD *)&v9 + 1))
    goto LABEL_9;
LABEL_6:
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    goto LABEL_9;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  radio::HealthService::State::reportDataStats_sync((radio::HealthService::State *)v1);
}

void radio::HealthService::State::queryAndReportDataStats_sync(radio::HealthService::State *this)
{
  __int128 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  NetworkStatsInterface::query(*((NetworkStatsInterface **)this + 15), &v9);
  v2 = v9;
  v9 = 0uLL;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  *(_OWORD *)((char *)this + 152) = v2;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
      if (*((_QWORD *)&v9 + 1))
        goto LABEL_6;
LABEL_9:
      radio::HealthService::State::reportDataStats_sync(this);
      return;
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (!*((_QWORD *)&v9 + 1))
    goto LABEL_9;
LABEL_6:
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    goto LABEL_9;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  radio::HealthService::State::reportDataStats_sync(this);
}

void ___ZN5radio13HealthService5State5resetEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 160);
  *(_QWORD *)(v1 + 152) = 0;
  *(_QWORD *)(v1 + 160) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void ___ZN5radio13HealthService5State28startDataReportingTimer_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    return;
  v3 = a1[4];
  v4 = std::__shared_weak_count::lock(v2);
  v15 = v4;
  if (!v4)
    return;
  if (!a1[5])
  {
    v12 = v4;
LABEL_17:
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    return;
  }
  NetworkStatsInterface::query(*(NetworkStatsInterface **)(v3 + 120), &v16);
  v5 = v16;
  v16 = 0uLL;
  v6 = *(std::__shared_weak_count **)(v3 + 160);
  *(_OWORD *)(v3 + 152) = v5;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  radio::HealthService::State::reportDataStats_sync((radio::HealthService::State *)v3);
  v12 = v15;
  if (v15)
    goto LABEL_17;
}

void sub_1BF34C08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio13HealthService5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio13HealthService5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN5radio13HealthService5State28startDataStallReporting_syncEv_block_invoke(_QWORD *a1, const void **a2)
{
  std::__shared_weak_count *v3;
  uint64_t **v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (uint64_t **)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v5 + 21, a2, (uint64_t)a2);
        radio::HealthService::State::reportDataStats_sync((radio::HealthService::State *)v5);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF34C184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void radio::HealthService::State::reportDataStats_sync(radio::HealthService::State *this)
{
  _QWORD *v1;
  _QWORD **v2;
  uint64_t **v3;
  std::__shared_weak_count *v4;
  _QWORD *v5;
  __int128 v6;
  _BOOL4 v7;
  NSObject *v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t **v12;
  unsigned int v13;
  _DWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  NSObject *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v41;
  _QWORD aBlock[6];
  std::__shared_weak_count *v43;
  void *v44;
  dispatch_object_t object;
  _QWORD **v46;
  std::__shared_weak_count *v47;
  unint64_t v48;
  int v49;
  __int128 v50;
  _BYTE __p[32];
  _QWORD **v52;
  std::__shared_weak_count *v53;
  uint8_t buf[4];
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  _BOOL4 v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 19))
  {
    v1 = (_QWORD *)*((_QWORD *)this + 19);
    v2 = (_QWORD **)operator new(0x18uLL);
    v2[1] = 0;
    v3 = v2 + 1;
    v2[2] = 0;
    *v2 = v2 + 1;
    v52 = v2;
    v4 = (std::__shared_weak_count *)operator new(0x20uLL);
    v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E78FBD10;
    v4->__shared_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)v2;
    v53 = v4;
    v5 = (_QWORD *)*v1;
    v41 = v1 + 1;
    if ((_QWORD *)*v1 != v1 + 1)
    {
      while (1)
      {
        *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&__p[16] = v6;
        v50 = v6;
        *(_OWORD *)__p = v6;
        LODWORD(v50) = *((_DWORD *)v5 + 8);
        __p[0] = *((_BYTE *)v5 + 48);
        *((_QWORD *)&v50 + 1) = v5[5];
        if (*((char *)v5 + 79) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v5[7], v5[8]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)(v5 + 7);
          *(_QWORD *)&__p[24] = v5[9];
        }
        v48 = 0xAAAAAAAAAAAAAAAALL;
        v49 = -1431655766;
        radio::HealthCommandDriver::LinkStats::LinkStats((radio::HealthCommandDriver::LinkStats *)&v48);
        v48 = *((_QWORD *)&v50 + 1);
        if (__p[0])
          break;
LABEL_24:
        if ((__p[31] & 0x80000000) != 0)
        {
          operator delete(*(void **)&__p[8]);
          v17 = (_QWORD *)v5[1];
          if (v17)
          {
            do
            {
LABEL_28:
              v18 = v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
            goto LABEL_4;
          }
        }
        else
        {
          v17 = (_QWORD *)v5[1];
          if (v17)
            goto LABEL_28;
        }
        do
        {
          v18 = (_QWORD *)v5[2];
          v19 = *v18 == (_QWORD)v5;
          v5 = v18;
        }
        while (!v19);
LABEL_4:
        v5 = v18;
        if (v18 == v41)
          goto LABEL_33;
      }
      v7 = (uint64_t *)((char *)this + 176) != std::__tree<std::string>::find<std::string>((uint64_t)this + 168, (const void **)&__p[8]);
      v49 = v7;
      v8 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109888;
        v55 = v50;
        v56 = 1024;
        v57 = v48;
        v58 = 1024;
        v59 = HIDWORD(v48);
        v60 = 1024;
        v61 = v7;
        _os_log_impl(&dword_1BF335000, v8, OS_LOG_TYPE_DEFAULT, "#I Interface %u, count %u/%u, state %d", buf, 0x1Au);
        v9 = v50;
        v10 = *v3;
        v11 = v2 + 1;
        v12 = v2 + 1;
        if (*v3)
        {
          while (1)
          {
LABEL_15:
            while (1)
            {
              v12 = (uint64_t **)v10;
              v13 = *((_DWORD *)v10 + 7);
              if (v13 <= v9)
                break;
              v10 = *v12;
              v11 = v12;
              if (!*v12)
                goto LABEL_19;
            }
            if (v13 >= v9)
              break;
            v10 = v12[1];
            if (!v10)
            {
              v11 = v12 + 1;
              goto LABEL_19;
            }
          }
          v14 = v12;
          goto LABEL_23;
        }
      }
      else
      {
        v9 = v50;
        v10 = *v3;
        v11 = v2 + 1;
        v12 = v2 + 1;
        if (*v3)
          goto LABEL_15;
      }
LABEL_19:
      v14 = operator new(0x30uLL);
      v14[7] = v9;
      radio::HealthCommandDriver::LinkStats::LinkStats((radio::HealthCommandDriver::LinkStats *)(v14 + 8));
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v14 + 2) = v12;
      *v11 = (uint64_t *)v14;
      v15 = (_QWORD *)**v2;
      v16 = (uint64_t *)v14;
      if (v15)
      {
        *v2 = v15;
        v16 = *v11;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v2[1], v16);
      v2[2] = (_QWORD *)((char *)v2[2] + 1);
LABEL_23:
      *((_QWORD *)v14 + 4) = v48;
      v14[10] = v49;
      goto LABEL_24;
    }
LABEL_33:
    v20 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v20 || (v21 = *((_QWORD *)this + 9), (v22 = std::__shared_weak_count::lock(v20)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v23 = v22;
    p_shared_weak_owners = (unint64_t *)&v22->__shared_weak_owners_;
    do
      v25 = __ldxr(p_shared_weak_owners);
    while (__stxr(v25 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v23);
    }
    v28 = *((_QWORD *)this + 13);
    v46 = v52;
    v47 = v53;
    if (v53)
    {
      v29 = (unint64_t *)&v53->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN5radio13HealthService5State20reportDataStats_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_11;
    aBlock[4] = this;
    aBlock[5] = v21;
    v43 = v23;
    do
      v31 = __ldxr(p_shared_weak_owners);
    while (__stxr(v31 + 1, p_shared_weak_owners));
    v32 = _Block_copy(aBlock);
    v33 = *((_QWORD *)this + 11);
    if (v33)
      dispatch_retain(v33);
    v44 = v32;
    object = v33;
    (*(void (**)(uint64_t, _QWORD ***, void **))(*(_QWORD *)v28 + 56))(v28, &v46, &v44);
    if (object)
      dispatch_release(object);
    if (v44)
      _Block_release(v44);
    v34 = v47;
    if (v47)
    {
      v35 = (unint64_t *)&v47->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (v43)
      std::__shared_weak_count::__release_weak(v43);
    std::__shared_weak_count::__release_weak(v23);
    v37 = v53;
    if (v53)
    {
      v38 = (unint64_t *)&v53->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
}

void sub_1BF34C658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,char a21,uint64_t a22,char a23)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1BF34C6B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1 - 176);
  _Unwind_Resume(a1);
}

void sub_1BF34C6CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1 - 176);
  _Unwind_Resume(a1);
}

void sub_1BF34C6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;
  uint64_t v36;

  operator delete(v35);
  if (a35 < 0)
    operator delete(__p);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v36 - 176);
  _Unwind_Resume(a1);
}

void ___ZN5radio13HealthService5State20reportDataStats_syncEv_block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *a2;
        v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        if (!*a2)
          v9 = 0;
        v10 = *(NSObject **)(v5 + 40);
        if (v9)
        {
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            v13 = 138412290;
            v14 = v8;
            _os_log_error_impl(&dword_1BF335000, v10, OS_LOG_TYPE_ERROR, "Failed to update data stats:\n%@", (uint8_t *)&v13, 0xCu);
          }
        }
        else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v13) = 0;
          _os_log_debug_impl(&dword_1BF335000, v10, OS_LOG_TYPE_DEBUG, "#D Updated data stats", (uint8_t *)&v13, 2u);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

uint64_t ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void ___ZN5radio13HealthService5State13enterLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  NSObject *v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  dispatch_object_t object;
  _QWORD aBlock[6];
  std::__shared_weak_count *v20;
  void *v21;
  dispatch_object_t v22;
  unint64_t v23;
  unint64_t v24;

  v2 = a1[4];
  v3 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v3 || (v4 = *(_QWORD *)(v2 + 72), (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  v23 = 0xAAAAAAAAAAAAAAAALL;
  v24 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio13HealthService5State13enterLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_12;
  aBlock[4] = v2;
  aBlock[5] = v4;
  v20 = v6;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  v12 = (void *)a1[5];
  if (v12)
    v12 = _Block_copy(v12);
  v13 = a1[6];
  v21 = v12;
  v22 = v13;
  if (v13)
    dispatch_retain(v13);
  v14 = _Block_copy(aBlock);
  v15 = *(NSObject **)(v2 + 88);
  if (v15)
    dispatch_retain(*(dispatch_object_t *)(v2 + 88));
  v23 = (unint64_t)v14;
  v24 = (unint64_t)v15;
  v16 = *(_QWORD *)(v2 + 104);
  if (v14)
  {
    v17 = _Block_copy(v14);
    object = v15;
    if (!v15)
      goto LABEL_20;
    goto LABEL_19;
  }
  v17 = 0;
  object = v15;
  if (v15)
LABEL_19:
    dispatch_retain(v15);
LABEL_20:
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v16 + 64))(v16, &v17);
  if (object)
    dispatch_release(object);
  if (v17)
    _Block_release(v17);
  if (v15)
    dispatch_release(v15);
  if (v14)
    _Block_release(v14);
  if (v22)
    dispatch_release(v22);
  if (v21)
    _Block_release(v21);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1BF34CA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  std::__shared_weak_count *v18;
  uint64_t v19;
  uint64_t v20;

  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a10);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v20 - 64);
  dispatch::callback<void({block_pointer})(void)>::~callback(v19);
  if (a18)
    std::__shared_weak_count::__release_weak(a18);
  std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(a1);
}

void ___ZN5radio13HealthService5State13enterLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_2(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  const void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  __int128 v17;
  uint64_t (*v18)(uint64_t);
  void *v19;
  void *aBlock;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
      {
LABEL_21:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      v8 = *a2;
      v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      if (!*a2)
        v9 = 0;
      v10 = *(NSObject **)(v5 + 40);
      if (v9)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v17) = 138412290;
          *(_QWORD *)((char *)&v17 + 4) = v8;
          _os_log_error_impl(&dword_1BF335000, v10, OS_LOG_TYPE_ERROR, "Entering Low Power Failed: %@", (uint8_t *)&v17, 0xCu);
        }
      }
      else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v17) = 0;
        _os_log_impl(&dword_1BF335000, v10, OS_LOG_TYPE_DEFAULT, "#I Entering Low Power complete", (uint8_t *)&v17, 2u);
      }
      v11 = (const void *)a1[7];
      if (v11)
        v12 = _Block_copy(v11);
      else
        v12 = 0;
      v13 = a1[8];
      *(_QWORD *)&v17 = MEMORY[0x1E0C809B0];
      *((_QWORD *)&v17 + 1) = 1174405120;
      v18 = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke;
      v19 = &__block_descriptor_tmp_18;
      if (v12)
      {
        aBlock = _Block_copy(v12);
        dispatch_async(v13, &v17);
        v14 = aBlock;
        if (!aBlock)
        {
LABEL_19:
          if (v12)
            _Block_release(v12);
          goto LABEL_21;
        }
      }
      else
      {
        aBlock = 0;
        dispatch_async(v13, &v17);
        v14 = aBlock;
        if (!aBlock)
          goto LABEL_19;
      }
      _Block_release(v14);
      goto LABEL_19;
    }
  }
}

void sub_1BF34CCB0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio13HealthService5StateEEE56c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  NSObject *v8;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (void *)a2[7];
  if (v7)
    v7 = _Block_copy(v7);
  v8 = a2[8];
  a1[7] = v7;
  a1[8] = v8;
  if (v8)
    dispatch_retain(v8);
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio13HealthService5StateEEE56c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[8];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void __copy_helper_block_e8_40c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 40);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_40c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void ___ZN5radio13HealthService5State12exitLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  NSObject *v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  dispatch_object_t object;
  _QWORD aBlock[6];
  std::__shared_weak_count *v20;
  void *v21;
  dispatch_object_t v22;
  unint64_t v23;
  unint64_t v24;

  v2 = a1[4];
  v3 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v3 || (v4 = *(_QWORD *)(v2 + 72), (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  v23 = 0xAAAAAAAAAAAAAAAALL;
  v24 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio13HealthService5State12exitLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_14;
  aBlock[4] = v2;
  aBlock[5] = v4;
  v20 = v6;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  v12 = (void *)a1[5];
  if (v12)
    v12 = _Block_copy(v12);
  v13 = a1[6];
  v21 = v12;
  v22 = v13;
  if (v13)
    dispatch_retain(v13);
  v14 = _Block_copy(aBlock);
  v15 = *(NSObject **)(v2 + 88);
  if (v15)
    dispatch_retain(*(dispatch_object_t *)(v2 + 88));
  v23 = (unint64_t)v14;
  v24 = (unint64_t)v15;
  v16 = *(_QWORD *)(v2 + 104);
  if (v14)
  {
    v17 = _Block_copy(v14);
    object = v15;
    if (!v15)
      goto LABEL_20;
    goto LABEL_19;
  }
  v17 = 0;
  object = v15;
  if (v15)
LABEL_19:
    dispatch_retain(v15);
LABEL_20:
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v16 + 72))(v16, &v17);
  if (object)
    dispatch_release(object);
  if (v17)
    _Block_release(v17);
  if (v15)
    dispatch_release(v15);
  if (v14)
    _Block_release(v14);
  if (v22)
    dispatch_release(v22);
  if (v21)
    _Block_release(v21);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1BF34CFF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  std::__shared_weak_count *v18;
  uint64_t v19;
  uint64_t v20;

  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a10);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v20 - 64);
  dispatch::callback<void({block_pointer})(void)>::~callback(v19);
  if (a18)
    std::__shared_weak_count::__release_weak(a18);
  std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(a1);
}

void ___ZN5radio13HealthService5State12exitLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_2(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  const void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  __int128 v17;
  uint64_t (*v18)(uint64_t);
  void *v19;
  void *aBlock;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
      {
LABEL_21:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      v8 = *a2;
      v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      if (!*a2)
        v9 = 0;
      v10 = *(NSObject **)(v5 + 40);
      if (v9)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v17) = 138412290;
          *(_QWORD *)((char *)&v17 + 4) = v8;
          _os_log_error_impl(&dword_1BF335000, v10, OS_LOG_TYPE_ERROR, "Exiting Low Power Failed: %@", (uint8_t *)&v17, 0xCu);
        }
      }
      else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v17) = 0;
        _os_log_impl(&dword_1BF335000, v10, OS_LOG_TYPE_DEFAULT, "#I Exiting Low Power complete", (uint8_t *)&v17, 2u);
      }
      v11 = (const void *)a1[7];
      if (v11)
        v12 = _Block_copy(v11);
      else
        v12 = 0;
      v13 = a1[8];
      *(_QWORD *)&v17 = MEMORY[0x1E0C809B0];
      *((_QWORD *)&v17 + 1) = 1174405120;
      v18 = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke;
      v19 = &__block_descriptor_tmp_18;
      if (v12)
      {
        aBlock = _Block_copy(v12);
        dispatch_async(v13, &v17);
        v14 = aBlock;
        if (!aBlock)
        {
LABEL_19:
          if (v12)
            _Block_release(v12);
          goto LABEL_21;
        }
      }
      else
      {
        aBlock = 0;
        dispatch_async(v13, &v17);
        v14 = aBlock;
        if (!aBlock)
          goto LABEL_19;
      }
      _Block_release(v14);
      goto LABEL_19;
    }
  }
}

void sub_1BF34D218(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 14;
  strcpy(a1, "net.health.svc");
}

uint64_t ctu::Loggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E78FBBD8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E78FBBD8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__shared_ptr_pointer<radio::HealthService::State *,std::shared_ptr<radio::HealthService::State> ctu::SharedSynchronizable<radio::HealthService::State>::make_shared_ptr<radio::HealthService::State>(radio::HealthService::State*)::{lambda(radio::HealthService::State *)#1},std::allocator<radio::HealthService::State>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<radio::HealthService::State *,std::shared_ptr<radio::HealthService::State> ctu::SharedSynchronizable<radio::HealthService::State>::make_shared_ptr<radio::HealthService::State>(radio::HealthService::State*)::{lambda(radio::HealthService::State *)#1},std::allocator<radio::HealthService::State>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<radio::HealthService::State> ctu::SharedSynchronizable<radio::HealthService::State>::make_shared_ptr<radio::HealthService::State>(radio::HealthService::State*)::{lambda(radio::HealthService::State*)#1}::operator() const(radio::HealthService::State*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<radio::HealthService::State *,std::shared_ptr<radio::HealthService::State> ctu::SharedSynchronizable<radio::HealthService::State>::make_shared_ptr<radio::HealthService::State>(radio::HealthService::State*)::{lambda(radio::HealthService::State *)#1},std::allocator<radio::HealthService::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN5radio13HealthService5StateEE15make_shared_ptrIS3_EENSt3__110shared_p"
                     "trIT_EEPS8_EUlPS3_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN5radio13HealthService5StateEE15make_shared_ptrIS3_EENSt3__"
                                "110shared_ptrIT_EEPS8_EUlPS3_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN5radio13HealthService5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN5radio13HealthService5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<radio::HealthService::State> ctu::SharedSynchronizable<radio::HealthService::State>::make_shared_ptr<radio::HealthService::State>(radio::HealthService::State*)::{lambda(radio::HealthService::State*)#1}::operator() const(radio::HealthService::State*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void *__copy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

void std::__tree<std::string>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::string>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::string>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void ctu::SharedLoggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E78FBBD8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5radio13HealthService5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E78FBCD0;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN5radio13HealthService5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c56_ZTSNSt3__110shared_ptrIKN5radio13HealthService5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c56_ZTSNSt3__110shared_ptrIKN5radio13HealthService5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t **std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  size_t v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  std::string *v21;
  uint64_t *v22;
  uint64_t *v23;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = (const void *)v5[4];
      v11 = v5 + 4;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      if (v16 >= v9)
        v17 = v9;
      else
        v17 = v16;
      v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_8;
LABEL_22:
        v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            return v10;
        }
        else if (v16 >= v9)
        {
          return v10;
        }
        v5 = v10[1];
        if (!v5)
        {
          v6 = v10 + 1;
LABEL_28:
          v20 = operator new(0x38uLL);
          v21 = (std::string *)(v20 + 4);
          if (*(char *)(a3 + 23) < 0)
            goto LABEL_31;
LABEL_29:
          *(_OWORD *)&v21->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
          v21->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
          goto LABEL_32;
        }
      }
      else
      {
        if (v9 >= v16)
          goto LABEL_22;
LABEL_8:
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_28;
      }
    }
  }
  v10 = a1 + 1;
  v20 = operator new(0x38uLL);
  v21 = (std::string *)(v20 + 4);
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    goto LABEL_29;
LABEL_31:
  std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
LABEL_32:
  *v20 = 0;
  v20[1] = 0;
  v20[2] = v10;
  *v6 = v20;
  v22 = (uint64_t *)**a1;
  v23 = v20;
  if (v22)
  {
    *a1 = v22;
    v23 = *v6;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v20;
}

void sub_1BF34D8D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 == result)
    return result;
  while (1)
  {
    v2 = a2[2];
    if (*(_BYTE *)(v2 + 24))
      return result;
    v3 = *(uint64_t **)(v2 + 16);
    v4 = *v3;
    if (*v3 != v2)
      break;
    v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(_BYTE *)(v2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
          goto LABEL_15;
      }
      else
      {
        v9 = *(uint64_t **)(v2 + 8);
        v10 = *v9;
        *(_QWORD *)(v2 + 8) = *v9;
        if (v10)
        {
          *(_QWORD *)(v10 + 16) = v2;
          v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
        *v9 = v2;
        *(_QWORD *)(v2 + 16) = v9;
        v3 = (uint64_t *)v9[2];
        v2 = *v3;
        *((_BYTE *)v9 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
LABEL_15:
          *(_QWORD *)(v11 + 16) = v3;
      }
      *(_QWORD *)(v2 + 16) = v3[2];
      *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
      *(_QWORD *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(_BYTE *)(v2 + 24) = 1;
    a2 = v3;
    *((_BYTE *)v3 + 24) = v3 == result;
    *v5 = 1;
    if (v3 == result)
      return result;
  }
  if (v4)
  {
    v6 = *(unsigned __int8 *)(v4 + 24);
    v5 = (_BYTE *)(v4 + 24);
    if (!v6)
      goto LABEL_3;
  }
  if (*(uint64_t **)v2 == a2)
  {
    v12 = a2[1];
    *(_QWORD *)v2 = v12;
    if (v12)
    {
      *(_QWORD *)(v12 + 16) = v2;
      v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(_QWORD *)(v2 + 16) = a2;
    v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((_BYTE *)a2 + 24) = 1;
  *((_BYTE *)v3 + 24) = 0;
  v13 = (uint64_t *)v3[1];
  v14 = *v13;
  v3[1] = *v13;
  if (v14)
    *(_QWORD *)(v14 + 16) = v3;
  v13[2] = v3[2];
  *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v13;
  *v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

void std::__shared_ptr_pointer<std::map<unsigned int,radio::HealthCommandDriver::LinkStats> *,std::shared_ptr<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>::__shared_ptr_default_delete<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>,std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>,std::allocator<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<std::map<unsigned int,radio::HealthCommandDriver::LinkStats> *,std::shared_ptr<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>::__shared_ptr_default_delete<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>,std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>,std::allocator<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>>::__on_zero_shared(uint64_t a1)
{
  _QWORD **v1;

  v1 = *(_QWORD ***)(a1 + 24);
  if (v1)
  {
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(v1[1]);
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<std::map<unsigned int,radio::HealthCommandDriver::LinkStats> *,std::shared_ptr<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>::__shared_ptr_default_delete<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>,std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>,std::allocator<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF53BE2ALL)
    return a1 + 24;
  if (((v3 & 0x80000001BF53BE2ALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF53BE2ALL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF53BE2ALL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

uint64_t __cxx_global_var_init_16()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1BF335000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<Capabilities>::~PthreadMutexGuardPolicy, &ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance, &dword_1BF335000);
  }
  return result;
}

const char *asString(unsigned int a1)
{
  if (a1 > 3)
    return "???";
  else
    return off_1E78FBE68[(char)a1];
}

const char *ABMServiceManager::getName(ABMServiceManager *this)
{
  return "service.mgr";
}

uint64_t ABMServiceManager::getInitTimeoutSec(ABMServiceManager *this)
{
  return 12 * capabilities::abs::serviceInitTimeoutScalingFactor(this);
}

uint64_t ABMServiceManager::getStartTimeoutSec(ABMServiceManager *this)
{
  return 30 * capabilities::abs::serviceStartTimeoutScalingFactor(this);
}

uint64_t ABMServiceManager::getSleepTimeoutSec(ABMServiceManager *this)
{
  return 29 * capabilities::abs::serviceSleepTimeoutScalingFactor(this);
}

uint64_t ABMServiceManager::getDefaultShutdownTimeoutSec(ABMServiceManager *this)
{
  return 5 * capabilities::abs::serviceShutdownTimeoutScalingFactor(this);
}

uint64_t ABMServiceManager::getShutdownTimeoutSec(capabilities::abs *a1, int a2)
{
  uint64_t IsInternalBuild;

  if (a2 == 1)
    return 15 * capabilities::abs::serviceShutdownTimeoutScalingFactor(a1);
  if (a2)
    return (*(uint64_t (**)(capabilities::abs *))(*(_QWORD *)a1 + 112))(a1);
  IsInternalBuild = config::hw::watch(a1);
  if ((_DWORD)IsInternalBuild
    && ((IsInternalBuild = TelephonyUtilIsInternalBuild(), (IsInternalBuild & 1) != 0)
     || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild)))
  {
    return 120 * capabilities::abs::serviceShutdownTimeoutScalingFactor((capabilities::abs *)IsInternalBuild);
  }
  else
  {
    return 30 * capabilities::abs::serviceShutdownTimeoutScalingFactor((capabilities::abs *)IsInternalBuild);
  }
}

void ABMServiceManager::ABMServiceManager(ServiceManager *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  *(_QWORD *)a1 = off_1E78FBD60;
  ServiceManager::ServiceManager(a1, "service.mgr");
  *v3 = off_1E78FBD60;
  v4 = a2[1];
  v3[25] = *a2;
  v3[26] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

{
  _QWORD *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  *(_QWORD *)a1 = off_1E78FBD60;
  ServiceManager::ServiceManager(a1, "service.mgr");
  *v3 = off_1E78FBD60;
  v4 = a2[1];
  v3[25] = *a2;
  v3[26] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

double ABMServiceManager::create@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  ServiceManager *v4;
  ServiceManager *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  double result;
  uint64_t v14;
  std::__shared_weak_count *v15;
  ABMServiceManager *v16[2];

  v4 = (ServiceManager *)operator new(0xD8uLL);
  v5 = v4;
  v6 = (std::__shared_weak_count *)a1[1];
  v14 = *a1;
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  *(_QWORD *)v4 = off_1E78FBD60;
  ServiceManager::ServiceManager(v4, "service.mgr");
  *(_QWORD *)v5 = off_1E78FBD60;
  *((_QWORD *)v5 + 25) = v14;
  *((_QWORD *)v5 + 26) = v15;
  if (v15)
  {
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v16[0] = (ABMServiceManager *)0xAAAAAAAAAAAAAAAALL;
  v16[1] = (ABMServiceManager *)0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<ABMServiceManager>::shared_ptr[abi:ne180100]<ABMServiceManager,std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager*)#1},void>(v16, (uint64_t)v5);
  ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)v16[0]);
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  ABMServiceManager::init(v16[0]);
  result = *(double *)v16;
  *a2 = *(_OWORD *)v16;
  return result;
}

void sub_1BF34DEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF34DEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF34DEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF34DEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void ABMServiceManager::init(ABMServiceManager *this)
{
  CommandDriverFactory *v2;
  unint64_t v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  NSObject *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t v38;
  unint64_t v39;
  uint8_t buf[16];

  v38 = 0xAAAAAAAAAAAAAAAALL;
  v39 = 0xAAAAAAAAAAAAAAAALL;
  v2 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v3 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v2);
    v4 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v5 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v3 = off_1ED70FD08;
  }
  v38 = v3;
  v39 = *(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v8 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  if (!v3)
  {
    v16 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF335000, v16, OS_LOG_TYPE_ERROR, "Unable to access CommandDriverFactory. BasebandManager registry will not be set in command drivers!", buf, 2u);
      v15 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
      if (!v15)
        goto LABEL_49;
      goto LABEL_23;
    }
LABEL_22:
    v15 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v15)
      goto LABEL_49;
    goto LABEL_23;
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  v36 = *((_QWORD *)this + 25);
  v37 = v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  CommandDriverFactory::setRegistry();
  if (!v37)
    goto LABEL_22;
  v13 = &v37->__shared_owners_;
  do
    v14 = __ldaxr((unint64_t *)v13);
  while (__stlxr(v14 - 1, (unint64_t *)v13));
  if (v14)
    goto LABEL_22;
  ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
  std::__shared_weak_count::__release_weak(v37);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v15)
LABEL_49:
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_23:
  v17 = *((_QWORD *)this + 9);
  v18 = std::__shared_weak_count::lock(v15);
  if (!v18)
    goto LABEL_49;
  v19 = v18;
  v33 = v17;
  v34 = v18;
  p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
  do
    v21 = __ldxr(p_shared_weak_owners);
  while (__stxr(v21 + 1, p_shared_weak_owners));
  v22 = (unint64_t *)&v18->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v19);
  }
  PowerManager::create(&v33, buf);
  v35 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  ServiceManager::init(this, (uint64_t *)&v35);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
  if (*((_QWORD *)&v35 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v28 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v34)
    std::__shared_weak_count::__release_weak(v34);
  v30 = (std::__shared_weak_count *)v39;
  if (v39)
  {
    v31 = (unint64_t *)(v39 + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_1BF34E220(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF34E23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1BF34E258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v15 - 48);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void ABMServiceManager::registerGlobalServices(ABMServiceManager *this)
{
  NSObject *v1;
  char *v2;
  ABMServiceManager *v3;
  _QWORD block[6];

  v3 = this;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZNK3ctu20SharedSynchronizableI14ServiceManagerE20execute_wrapped_syncIZN17ABMServiceManager22registerGlobalServicesEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
  block[3] = &__block_descriptor_48_e5_v8__0l;
  block[4] = (char *)this + 72;
  block[5] = &v3;
  v2 = (char *)this + 88;
  v1 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void ABMServiceManager::registerDynamicServices(ABMServiceManager *this)
{
  NSObject *v1;
  char *v2;
  ABMServiceManager *v3;
  _QWORD block[6];

  v3 = this;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZNK3ctu20SharedSynchronizableI14ServiceManagerE20execute_wrapped_syncIZN17ABMServiceManager23registerDynamicServicesEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
  block[3] = &__block_descriptor_48_e5_v8__0l;
  block[4] = (char *)this + 72;
  block[5] = &v3;
  v2 = (char *)this + 88;
  v1 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void ABMServiceManager::~ABMServiceManager(ABMServiceManager *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = off_1E78FBD60;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    ServiceManager::~ServiceManager(this);
  }
  else
  {
LABEL_5:
    ServiceManager::~ServiceManager(this);
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *(_QWORD *)this = off_1E78FBD60;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    ServiceManager::~ServiceManager(this);
  }
  else
  {
LABEL_5:
    ServiceManager::~ServiceManager(this);
  }
  operator delete(v5);
}

uint64_t ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

uint64_t ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF34E704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF34E720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<ABMServiceManager>::shared_ptr[abi:ne180100]<ABMServiceManager,std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E78FBE08;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF34E83C(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager*)#1}::operator() const(ABMServiceManager*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF34E85C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ABMServiceManager *,std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager *)#1},std::allocator<ABMServiceManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ABMServiceManager *,std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager *)#1},std::allocator<ABMServiceManager>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager*)#1}::operator() const(ABMServiceManager*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<ABMServiceManager *,std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager *)#1},std::allocator<ABMServiceManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI14ServiceManagerE15make_shared_ptrI17ABMServiceManagerEENSt3__110share"
                     "d_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI14ServiceManagerE15make_shared_ptrI17ABMServiceManagerEENSt"
                                "3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI14ServiceManagerE15make_shared_ptrI17ABMServiceManagerEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI14ServiceManagerE15make_shared_ptrI17ABMServiceManagerEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager*)#1}::operator() const(ABMServiceManager*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ___ZNK3ctu20SharedSynchronizableI14ServiceManagerE20execute_wrapped_syncIZN17ABMServiceManager22registerGlobalServicesEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NetworkingModule *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  NetworkingModule **v15;
  char *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  NetworkingModule *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  NetworkingModule **v35;
  char *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  NetworkingModule *v51;
  NetworkingModule *v52;
  unint64_t *v53;
  unint64_t v54;
  NetworkingModule **v55;
  char *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  NetworkingModule *v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  NetworkingModule *v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  NetworkingModule *v73;
  std::__shared_weak_count *v74;
  NetworkingModule *v75;
  std::__shared_weak_count *v76;

  v1 = *(uint64_t **)(a1 + 40);
  v2 = *v1;
  v3 = *(std::__shared_weak_count **)(*v1 + 80);
  if (!v3)
    goto LABEL_80;
  v4 = *(_QWORD *)(v2 + 72);
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    goto LABEL_80;
  v6 = v5;
  v71 = v4;
  v72 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  LogTracker::create(&v71, &v73);
  v11 = v73;
  if (v73)
  {
    v12 = v74;
    v75 = v73;
    v76 = v74;
    if (v74)
    {
      v13 = (unint64_t *)&v74->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v15 = *(NetworkingModule ***)(v2 + 128);
    if ((unint64_t)v15 >= *(_QWORD *)(v2 + 136))
    {
      v16 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 120), (uint64_t)&v75);
      v17 = v76;
      *(_QWORD *)(v2 + 128) = v16;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
    else
    {
      *v15 = v11;
      v15[1] = (NetworkingModule *)v12;
      *(_QWORD *)(v2 + 128) = v15 + 2;
    }
  }
  v20 = v74;
  if (v74)
  {
    v21 = (unint64_t *)&v74->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v72)
    std::__shared_weak_count::__release_weak(v72);
  v23 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v23)
    goto LABEL_80;
  v24 = *(_QWORD *)(v2 + 72);
  v25 = std::__shared_weak_count::lock(v23);
  if (!v25)
    goto LABEL_80;
  v26 = v25;
  v67 = v24;
  v68 = v25;
  v27 = (unint64_t *)&v25->__shared_weak_owners_;
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
  v29 = (unint64_t *)&v25->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v26);
  }
  CPMSModule::create((capabilities::abs *)&v67, &v69);
  v31 = v69;
  if (v69)
  {
    v32 = v70;
    v75 = v69;
    v76 = v70;
    if (v70)
    {
      v33 = (unint64_t *)&v70->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    v35 = *(NetworkingModule ***)(v2 + 128);
    if ((unint64_t)v35 >= *(_QWORD *)(v2 + 136))
    {
      v36 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 120), (uint64_t)&v75);
      v37 = v76;
      *(_QWORD *)(v2 + 128) = v36;
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
    }
    else
    {
      *v35 = v31;
      v35[1] = (NetworkingModule *)v32;
      *(_QWORD *)(v2 + 128) = v35 + 2;
    }
  }
  v40 = v70;
  if (v70)
  {
    v41 = (unint64_t *)&v70->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (v68)
    std::__shared_weak_count::__release_weak(v68);
  v43 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v43 || (v44 = *(_QWORD *)(v2 + 72), (v45 = std::__shared_weak_count::lock(v43)) == 0))
LABEL_80:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v46 = v45;
  v63 = v44;
  v64 = v45;
  v47 = (unint64_t *)&v45->__shared_weak_owners_;
  do
    v48 = __ldxr(v47);
  while (__stxr(v48 + 1, v47));
  v49 = (unint64_t *)&v45->__shared_owners_;
  do
    v50 = __ldaxr(v49);
  while (__stlxr(v50 - 1, v49));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v46);
  }
  NetworkingModule::create(&v63, &v65);
  v51 = v65;
  if (v65)
  {
    v52 = (NetworkingModule *)v66;
    v75 = v65;
    v76 = v66;
    if (v66)
    {
      v53 = (unint64_t *)&v66->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    v55 = *(NetworkingModule ***)(v2 + 128);
    if ((unint64_t)v55 >= *(_QWORD *)(v2 + 136))
    {
      v56 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 120), (uint64_t)&v75);
      v57 = v76;
      *(_QWORD *)(v2 + 128) = v56;
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
    }
    else
    {
      *v55 = v51;
      v55[1] = v52;
      *(_QWORD *)(v2 + 128) = v55 + 2;
    }
  }
  v60 = v66;
  if (v66)
  {
    v61 = (unint64_t *)&v66->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  if (v64)
    std::__shared_weak_count::__release_weak(v64);
}

char *std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>(char **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v2 = (a1[1] - *a1) >> 4;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v5 = a1[2] - *a1;
  if (v5 >> 3 > v3)
    v3 = v5 >> 3;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v3;
  if (v7 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v9 = 16 * v7;
  v10 = (char *)operator new(16 * v7);
  v11 = &v10[16 * v2];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  v12 = v11 + 16;
  v13 = &v10[v9];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v14 = *a1;
  v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v13;
  }
  else
  {
    do
    {
      v16 = *((_OWORD *)v15 - 1);
      v15 -= 16;
      *((_OWORD *)v11 - 1) = v16;
      v11 -= 16;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = 0;
    }
    while (v15 != v14);
    v15 = *a1;
    v17 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v13;
    while (v17 != v15)
    {
      v18 = (std::__shared_weak_count *)*((_QWORD *)v17 - 1);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v17 -= 16;
    }
  }
  if (v15)
    operator delete(v15);
  return v12;
}

void ___ZNK3ctu20SharedSynchronizableI14ServiceManagerE20execute_wrapped_syncIZN17ABMServiceManager23registerDynamicServicesEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t **v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t **v41;
  char *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t **v61;
  char *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t *v81;
  char *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t **v101;
  char *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  config::hw *v109;
  capabilities::abs *v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t **v123;
  char *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t *v143;
  std::__shared_weak_count *v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  uint64_t *v156;
  char *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  char *v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t *v168;
  std::__shared_weak_count *v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  uint64_t *v181;
  char *v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  uint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  uint64_t *v201;
  char *v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  uint64_t v210;
  std::__shared_weak_count *v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  unint64_t *v215;
  unint64_t v216;
  uint64_t *v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  uint64_t **v221;
  char *v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  uint64_t v230;
  std::__shared_weak_count *v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  unint64_t *v235;
  unint64_t v236;
  uint64_t *v237;
  uint64_t *v238;
  unint64_t *v239;
  unint64_t v240;
  uint64_t **v241;
  char *v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  std::__shared_weak_count *v249;
  uint64_t v250;
  std::__shared_weak_count *v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count_vtbl *v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count_vtbl **v261;
  char *v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count *v269;
  uint64_t v270;
  std::__shared_weak_count *v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  unint64_t *v275;
  unint64_t v276;
  uint64_t *v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  uint64_t **v281;
  char *v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  uint64_t v289;
  std::__shared_weak_count *v290;
  uint64_t *v291;
  std::__shared_weak_count *v292;
  uint64_t v293;
  std::__shared_weak_count *v294;
  std::__shared_weak_count_vtbl *v295;
  std::__shared_weak_count *v296;
  uint64_t v297;
  std::__shared_weak_count *v298;
  uint64_t *v299;
  std::__shared_weak_count *v300;
  uint64_t v301;
  std::__shared_weak_count *v302;
  uint64_t *v303;
  std::__shared_weak_count *v304;
  uint64_t v305;
  std::__shared_weak_count *v306;
  uint64_t *v307;
  std::__shared_weak_count *v308;
  uint64_t v309;
  std::__shared_weak_count *v310;
  uint64_t *v311;
  std::__shared_weak_count *v312;
  uint64_t v313;
  std::__shared_weak_count *v314;
  uint64_t *v315;
  std::__shared_weak_count *v316;
  uint64_t v317;
  std::__shared_weak_count *v318;
  uint64_t *v319;
  std::__shared_weak_count *v320;
  uint64_t v321;
  std::__shared_weak_count *v322;
  uint64_t *v323;
  std::__shared_weak_count *v324;
  uint64_t v325;
  std::__shared_weak_count *v326;
  uint64_t *v327;
  std::__shared_weak_count *v328;
  uint64_t v329;
  std::__shared_weak_count *v330;
  uint64_t *v331;
  std::__shared_weak_count *v332;
  uint64_t v333;
  std::__shared_weak_count *v334;
  uint64_t *v335;
  std::__shared_weak_count *v336;
  uint64_t v337;
  std::__shared_weak_count *v338;
  uint64_t v339;
  std::__shared_weak_count *v340;
  uint64_t *v341;
  std::__shared_weak_count *v342;
  uint64_t *v343;
  std::__shared_weak_count *v344;

  v1 = *(uint64_t **)(a1 + 40);
  v2 = *v1;
  v3 = *(std::__shared_weak_count **)(*v1 + 80);
  if (!v3)
    goto LABEL_373;
  v4 = *(_QWORD *)(v2 + 72);
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    goto LABEL_373;
  v6 = v5;
  v339 = v4;
  v340 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  v11 = *(std::__shared_weak_count **)(v2 + 208);
  v337 = *(_QWORD *)(v2 + 200);
  v338 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  TransportModule::create(&v339, &v337, &v341);
  v14 = v341;
  if (v341)
  {
    v15 = v342;
    v343 = v341;
    v344 = v342;
    if (v342)
    {
      v16 = (unint64_t *)&v342->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = *(uint64_t ***)(v2 + 152);
    if ((unint64_t)v18 >= *(_QWORD *)(v2 + 160))
    {
      v19 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v343);
      v20 = v344;
      *(_QWORD *)(v2 + 152) = v19;
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
    else
    {
      *v18 = v14;
      v18[1] = (uint64_t *)v15;
      *(_QWORD *)(v2 + 152) = v18 + 2;
    }
  }
  v23 = v342;
  if (v342)
  {
    v24 = (unint64_t *)&v342->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v338;
  if (v338)
  {
    v27 = (unint64_t *)&v338->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v340)
    std::__shared_weak_count::__release_weak(v340);
  v29 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v29)
    goto LABEL_373;
  v30 = *(_QWORD *)(v2 + 72);
  v31 = std::__shared_weak_count::lock(v29);
  if (!v31)
    goto LABEL_373;
  v32 = v31;
  v333 = v30;
  v334 = v31;
  v33 = (unint64_t *)&v31->__shared_weak_owners_;
  do
    v34 = __ldxr(v33);
  while (__stxr(v34 + 1, v33));
  v35 = (unint64_t *)&v31->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v32);
  }
  RadioModule::create(&v333, &v335);
  v37 = v335;
  if (v335)
  {
    v38 = v336;
    v343 = v335;
    v344 = v336;
    if (v336)
    {
      v39 = (unint64_t *)&v336->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v41 = *(uint64_t ***)(v2 + 152);
    if ((unint64_t)v41 >= *(_QWORD *)(v2 + 160))
    {
      v42 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v343);
      v43 = v344;
      *(_QWORD *)(v2 + 152) = v42;
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
    }
    else
    {
      *v41 = v37;
      v41[1] = (uint64_t *)v38;
      *(_QWORD *)(v2 + 152) = v41 + 2;
    }
  }
  v46 = v336;
  if (v336)
  {
    v47 = (unint64_t *)&v336->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (v334)
    std::__shared_weak_count::__release_weak(v334);
  v49 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v49)
    goto LABEL_373;
  v50 = *(_QWORD *)(v2 + 72);
  v51 = std::__shared_weak_count::lock(v49);
  if (!v51)
    goto LABEL_373;
  v52 = v51;
  v329 = v50;
  v330 = v51;
  v53 = (unint64_t *)&v51->__shared_weak_owners_;
  do
    v54 = __ldxr(v53);
  while (__stxr(v54 + 1, v53));
  v55 = (unint64_t *)&v51->__shared_owners_;
  do
    v56 = __ldaxr(v55);
  while (__stlxr(v56 - 1, v55));
  if (!v56)
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v52);
  }
  Simulator::create(&v329, &v331);
  v57 = v331;
  if (v331)
  {
    v58 = v332;
    v343 = v331;
    v344 = v332;
    if (v332)
    {
      v59 = (unint64_t *)&v332->__shared_owners_;
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
    }
    v61 = *(uint64_t ***)(v2 + 152);
    if ((unint64_t)v61 >= *(_QWORD *)(v2 + 160))
    {
      v62 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v343);
      v63 = v344;
      *(_QWORD *)(v2 + 152) = v62;
      if (v63)
      {
        v64 = (unint64_t *)&v63->__shared_owners_;
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
    }
    else
    {
      *v61 = v57;
      v61[1] = (uint64_t *)v58;
      *(_QWORD *)(v2 + 152) = v61 + 2;
    }
  }
  v66 = v332;
  if (v332)
  {
    v67 = (unint64_t *)&v332->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (v330)
    std::__shared_weak_count::__release_weak(v330);
  v69 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v69)
    goto LABEL_373;
  v70 = *(_QWORD *)(v2 + 72);
  v71 = std::__shared_weak_count::lock(v69);
  if (!v71)
    goto LABEL_373;
  v72 = v71;
  v325 = v70;
  v326 = v71;
  v73 = (unint64_t *)&v71->__shared_weak_owners_;
  do
    v74 = __ldxr(v73);
  while (__stxr(v74 + 1, v73));
  v75 = (unint64_t *)&v71->__shared_owners_;
  do
    v76 = __ldaxr(v75);
  while (__stlxr(v76 - 1, v75));
  if (!v76)
  {
    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
    std::__shared_weak_count::__release_weak(v72);
  }
  TraceManager::create(&v325, (uint64_t *)&v327);
  v77 = (uint64_t)v327;
  if (v327)
  {
    v78 = v328;
    v343 = v327;
    v344 = v328;
    if (v328)
    {
      v79 = (unint64_t *)&v328->__shared_owners_;
      do
        v80 = __ldxr(v79);
      while (__stxr(v80 + 1, v79));
    }
    v81 = *(uint64_t **)(v2 + 152);
    if ((unint64_t)v81 >= *(_QWORD *)(v2 + 160))
    {
      v82 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v343);
      v83 = v344;
      *(_QWORD *)(v2 + 152) = v82;
      if (v83)
      {
        v84 = (unint64_t *)&v83->__shared_owners_;
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
    }
    else
    {
      *v81 = v77;
      v81[1] = (uint64_t)v78;
      *(_QWORD *)(v2 + 152) = v81 + 2;
    }
  }
  v86 = v328;
  if (v328)
  {
    v87 = (unint64_t *)&v328->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  if (v326)
    std::__shared_weak_count::__release_weak(v326);
  v89 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v89 || (v90 = *(_QWORD *)(v2 + 72), (v91 = std::__shared_weak_count::lock(v89)) == 0))
LABEL_373:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v92 = v91;
  v321 = v90;
  v322 = v91;
  v93 = (unint64_t *)&v91->__shared_weak_owners_;
  do
    v94 = __ldxr(v93);
  while (__stxr(v94 + 1, v93));
  v95 = (unint64_t *)&v91->__shared_owners_;
  do
    v96 = __ldaxr(v95);
  while (__stlxr(v96 - 1, v95));
  if (!v96)
  {
    ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
    std::__shared_weak_count::__release_weak(v92);
  }
  AWDModule::create(&v321, &v323);
  v97 = v323;
  if (v323)
  {
    v98 = v324;
    v343 = v323;
    v344 = v324;
    if (v324)
    {
      v99 = (unint64_t *)&v324->__shared_owners_;
      do
        v100 = __ldxr(v99);
      while (__stxr(v100 + 1, v99));
    }
    v101 = *(uint64_t ***)(v2 + 152);
    if ((unint64_t)v101 >= *(_QWORD *)(v2 + 160))
    {
      v102 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v343);
      v103 = v344;
      *(_QWORD *)(v2 + 152) = v102;
      if (v103)
      {
        v104 = (unint64_t *)&v103->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
    }
    else
    {
      *v101 = v97;
      v101[1] = (uint64_t *)v98;
      *(_QWORD *)(v2 + 152) = v101 + 2;
    }
  }
  v106 = v324;
  if (v324)
  {
    v107 = (unint64_t *)&v324->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = (config::hw *)v322;
  if (v322)
    std::__shared_weak_count::__release_weak(v322);
  v110 = (capabilities::abs *)config::hw::watch(v109);
  if ((v110 & 1) == 0)
  {
    v111 = *(std::__shared_weak_count **)(v2 + 80);
    if (!v111)
      goto LABEL_373;
    v112 = *(_QWORD *)(v2 + 72);
    v113 = std::__shared_weak_count::lock(v111);
    if (!v113)
      goto LABEL_373;
    v114 = v113;
    v317 = v112;
    v318 = v113;
    v115 = (unint64_t *)&v113->__shared_weak_owners_;
    do
      v116 = __ldxr(v115);
    while (__stxr(v116 + 1, v115));
    v117 = (unint64_t *)&v113->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v114);
    }
    HealthModule::create(&v317, &v319);
    v119 = v319;
    if (v319)
    {
      v120 = v320;
      v343 = v319;
      v344 = v320;
      if (v320)
      {
        v121 = (unint64_t *)&v320->__shared_owners_;
        do
          v122 = __ldxr(v121);
        while (__stxr(v122 + 1, v121));
      }
      v123 = *(uint64_t ***)(v2 + 152);
      if ((unint64_t)v123 >= *(_QWORD *)(v2 + 160))
      {
        v124 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v343);
        v125 = v344;
        *(_QWORD *)(v2 + 152) = v124;
        if (v125)
        {
          v126 = (unint64_t *)&v125->__shared_owners_;
          do
            v127 = __ldaxr(v126);
          while (__stlxr(v127 - 1, v126));
          if (!v127)
          {
            ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
            std::__shared_weak_count::__release_weak(v125);
          }
        }
      }
      else
      {
        *v123 = v119;
        v123[1] = (uint64_t *)v120;
        *(_QWORD *)(v2 + 152) = v123 + 2;
      }
    }
    v128 = v320;
    if (v320)
    {
      v129 = (unint64_t *)&v320->__shared_owners_;
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
    }
    v110 = (capabilities::abs *)v318;
    if (v318)
      std::__shared_weak_count::__release_weak(v318);
  }
  capabilities::abs::supportedSARFeatures(v110);
  if (capabilities::abs::operator&())
  {
    v131 = *(std::__shared_weak_count **)(v2 + 80);
    if (!v131)
      goto LABEL_373;
    v132 = *(_QWORD *)(v2 + 72);
    v133 = std::__shared_weak_count::lock(v131);
    if (!v133)
      goto LABEL_373;
    v134 = v133;
    v313 = v132;
    v314 = v133;
    v135 = (unint64_t *)&v133->__shared_weak_owners_;
    do
      v136 = __ldxr(v135);
    while (__stxr(v136 + 1, v135));
    v137 = (unint64_t *)&v133->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v134);
    }
    AntennaModule::create(&v313, (uint64_t *)&v315);
    v139 = (uint64_t)v315;
    if (v315)
    {
      v140 = v316;
      v343 = v315;
      v344 = v316;
      if (v316)
      {
        v141 = (unint64_t *)&v316->__shared_owners_;
        do
          v142 = __ldxr(v141);
        while (__stxr(v142 + 1, v141));
      }
      v143 = *(uint64_t **)(v2 + 152);
      if ((unint64_t)v143 >= *(_QWORD *)(v2 + 160))
      {
        v157 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v343);
        v158 = v344;
        *(_QWORD *)(v2 + 152) = v157;
        if (v158)
        {
          v159 = (unint64_t *)&v158->__shared_owners_;
          do
            v160 = __ldaxr(v159);
          while (__stlxr(v160 - 1, v159));
          if (!v160)
          {
            ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
            std::__shared_weak_count::__release_weak(v158);
          }
        }
      }
      else
      {
        *v143 = v139;
        v143[1] = (uint64_t)v140;
        *(_QWORD *)(v2 + 152) = v143 + 2;
      }
    }
    v161 = v316;
    if (v316)
    {
      v162 = (unint64_t *)&v316->__shared_owners_;
      do
        v163 = __ldaxr(v162);
      while (__stlxr(v163 - 1, v162));
      goto LABEL_212;
    }
  }
  else
  {
    v144 = *(std::__shared_weak_count **)(v2 + 80);
    if (!v144)
      goto LABEL_373;
    v145 = *(_QWORD *)(v2 + 72);
    v146 = std::__shared_weak_count::lock(v144);
    if (!v146)
      goto LABEL_373;
    v147 = v146;
    v313 = v145;
    v314 = v146;
    v148 = (unint64_t *)&v146->__shared_weak_owners_;
    do
      v149 = __ldxr(v148);
    while (__stxr(v149 + 1, v148));
    v150 = (unint64_t *)&v146->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v147);
    }
    SARModule::create(&v313, (uint64_t)&v315);
    v152 = (uint64_t)v315;
    if (v315)
    {
      v153 = v316;
      v343 = v315;
      v344 = v316;
      if (v316)
      {
        v154 = (unint64_t *)&v316->__shared_owners_;
        do
          v155 = __ldxr(v154);
        while (__stxr(v155 + 1, v154));
      }
      v156 = *(uint64_t **)(v2 + 152);
      if ((unint64_t)v156 >= *(_QWORD *)(v2 + 160))
      {
        v164 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v343);
        v165 = v344;
        *(_QWORD *)(v2 + 152) = v164;
        if (v165)
        {
          v166 = (unint64_t *)&v165->__shared_owners_;
          do
            v167 = __ldaxr(v166);
          while (__stlxr(v167 - 1, v166));
          if (!v167)
          {
            ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
            std::__shared_weak_count::__release_weak(v165);
          }
        }
      }
      else
      {
        *v156 = v152;
        v156[1] = (uint64_t)v153;
        *(_QWORD *)(v2 + 152) = v156 + 2;
      }
    }
    v161 = v316;
    if (v316)
    {
      v168 = (unint64_t *)&v316->__shared_owners_;
      do
        v163 = __ldaxr(v168);
      while (__stlxr(v163 - 1, v168));
LABEL_212:
      if (!v163)
      {
        ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
        std::__shared_weak_count::__release_weak(v161);
      }
    }
  }
  if (v314)
    std::__shared_weak_count::__release_weak(v314);
  v169 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v169)
    goto LABEL_373;
  v170 = *(_QWORD *)(v2 + 72);
  v171 = std::__shared_weak_count::lock(v169);
  if (!v171)
    goto LABEL_373;
  v172 = v171;
  v309 = v170;
  v310 = v171;
  v173 = (unint64_t *)&v171->__shared_weak_owners_;
  do
    v174 = __ldxr(v173);
  while (__stxr(v174 + 1, v173));
  v175 = (unint64_t *)&v171->__shared_owners_;
  do
    v176 = __ldaxr(v175);
  while (__stlxr(v176 - 1, v175));
  if (!v176)
  {
    ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
    std::__shared_weak_count::__release_weak(v172);
  }
  StatsModule::create(&v309, (uint64_t *)&v311);
  v177 = (uint64_t)v311;
  if (v311)
  {
    v178 = v312;
    v343 = v311;
    v344 = v312;
    if (v312)
    {
      v179 = (unint64_t *)&v312->__shared_owners_;
      do
        v180 = __ldxr(v179);
      while (__stxr(v180 + 1, v179));
    }
    v181 = *(uint64_t **)(v2 + 152);
    if ((unint64_t)v181 >= *(_QWORD *)(v2 + 160))
    {
      v182 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v343);
      v183 = v344;
      *(_QWORD *)(v2 + 152) = v182;
      if (v183)
      {
        v184 = (unint64_t *)&v183->__shared_owners_;
        do
          v185 = __ldaxr(v184);
        while (__stlxr(v185 - 1, v184));
        if (!v185)
        {
          ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
          std::__shared_weak_count::__release_weak(v183);
        }
      }
    }
    else
    {
      *v181 = v177;
      v181[1] = (uint64_t)v178;
      *(_QWORD *)(v2 + 152) = v181 + 2;
    }
  }
  v186 = v312;
  if (v312)
  {
    v187 = (unint64_t *)&v312->__shared_owners_;
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
  if (v310)
    std::__shared_weak_count::__release_weak(v310);
  v189 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v189)
    goto LABEL_373;
  v190 = *(_QWORD *)(v2 + 72);
  v191 = std::__shared_weak_count::lock(v189);
  if (!v191)
    goto LABEL_373;
  v192 = v191;
  v305 = v190;
  v306 = v191;
  v193 = (unint64_t *)&v191->__shared_weak_owners_;
  do
    v194 = __ldxr(v193);
  while (__stxr(v194 + 1, v193));
  v195 = (unint64_t *)&v191->__shared_owners_;
  do
    v196 = __ldaxr(v195);
  while (__stlxr(v196 - 1, v195));
  if (!v196)
  {
    ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
    std::__shared_weak_count::__release_weak(v192);
  }
  FSModule::create(&v305, (uint64_t *)&v307);
  v197 = (uint64_t)v307;
  if (v307)
  {
    v198 = v308;
    v343 = v307;
    v344 = v308;
    if (v308)
    {
      v199 = (unint64_t *)&v308->__shared_owners_;
      do
        v200 = __ldxr(v199);
      while (__stxr(v200 + 1, v199));
    }
    v201 = *(uint64_t **)(v2 + 152);
    if ((unint64_t)v201 >= *(_QWORD *)(v2 + 160))
    {
      v202 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v343);
      v203 = v344;
      *(_QWORD *)(v2 + 152) = v202;
      if (v203)
      {
        v204 = (unint64_t *)&v203->__shared_owners_;
        do
          v205 = __ldaxr(v204);
        while (__stlxr(v205 - 1, v204));
        if (!v205)
        {
          ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
          std::__shared_weak_count::__release_weak(v203);
        }
      }
    }
    else
    {
      *v201 = v197;
      v201[1] = (uint64_t)v198;
      *(_QWORD *)(v2 + 152) = v201 + 2;
    }
  }
  v206 = v308;
  if (v308)
  {
    v207 = (unint64_t *)&v308->__shared_owners_;
    do
      v208 = __ldaxr(v207);
    while (__stlxr(v208 - 1, v207));
    if (!v208)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v206);
    }
  }
  if (v306)
    std::__shared_weak_count::__release_weak(v306);
  v209 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v209)
    goto LABEL_373;
  v210 = *(_QWORD *)(v2 + 72);
  v211 = std::__shared_weak_count::lock(v209);
  if (!v211)
    goto LABEL_373;
  v212 = v211;
  v301 = v210;
  v302 = v211;
  v213 = (unint64_t *)&v211->__shared_weak_owners_;
  do
    v214 = __ldxr(v213);
  while (__stxr(v214 + 1, v213));
  v215 = (unint64_t *)&v211->__shared_owners_;
  do
    v216 = __ldaxr(v215);
  while (__stlxr(v216 - 1, v215));
  if (!v216)
  {
    ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
    std::__shared_weak_count::__release_weak(v212);
  }
  BootModule::create(&v301, &v303);
  v217 = v303;
  if (v303)
  {
    v218 = v304;
    v343 = v303;
    v344 = v304;
    if (v304)
    {
      v219 = (unint64_t *)&v304->__shared_owners_;
      do
        v220 = __ldxr(v219);
      while (__stxr(v220 + 1, v219));
    }
    v221 = *(uint64_t ***)(v2 + 152);
    if ((unint64_t)v221 >= *(_QWORD *)(v2 + 160))
    {
      v222 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v343);
      v223 = v344;
      *(_QWORD *)(v2 + 152) = v222;
      if (v223)
      {
        v224 = (unint64_t *)&v223->__shared_owners_;
        do
          v225 = __ldaxr(v224);
        while (__stlxr(v225 - 1, v224));
        if (!v225)
        {
          ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
          std::__shared_weak_count::__release_weak(v223);
        }
      }
    }
    else
    {
      *v221 = v217;
      v221[1] = (uint64_t *)v218;
      *(_QWORD *)(v2 + 152) = v221 + 2;
    }
  }
  v226 = v304;
  if (v304)
  {
    v227 = (unint64_t *)&v304->__shared_owners_;
    do
      v228 = __ldaxr(v227);
    while (__stlxr(v228 - 1, v227));
    if (!v228)
    {
      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
      std::__shared_weak_count::__release_weak(v226);
    }
  }
  if (v302)
    std::__shared_weak_count::__release_weak(v302);
  v229 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v229)
    goto LABEL_373;
  v230 = *(_QWORD *)(v2 + 72);
  v231 = std::__shared_weak_count::lock(v229);
  if (!v231)
    goto LABEL_373;
  v232 = v231;
  v297 = v230;
  v298 = v231;
  v233 = (unint64_t *)&v231->__shared_weak_owners_;
  do
    v234 = __ldxr(v233);
  while (__stxr(v234 + 1, v233));
  v235 = (unint64_t *)&v231->__shared_owners_;
  do
    v236 = __ldaxr(v235);
  while (__stlxr(v236 - 1, v235));
  if (!v236)
  {
    ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
    std::__shared_weak_count::__release_weak(v232);
  }
  DataModule::create((capabilities::radio *)&v297, &v299);
  v237 = v299;
  if (v299)
  {
    v238 = (uint64_t *)v300;
    v343 = v299;
    v344 = v300;
    if (v300)
    {
      v239 = (unint64_t *)&v300->__shared_owners_;
      do
        v240 = __ldxr(v239);
      while (__stxr(v240 + 1, v239));
    }
    v241 = *(uint64_t ***)(v2 + 152);
    if ((unint64_t)v241 >= *(_QWORD *)(v2 + 160))
    {
      v242 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v343);
      v243 = v344;
      *(_QWORD *)(v2 + 152) = v242;
      if (v243)
      {
        v244 = (unint64_t *)&v243->__shared_owners_;
        do
          v245 = __ldaxr(v244);
        while (__stlxr(v245 - 1, v244));
        if (!v245)
        {
          ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
          std::__shared_weak_count::__release_weak(v243);
        }
      }
    }
    else
    {
      *v241 = v237;
      v241[1] = v238;
      *(_QWORD *)(v2 + 152) = v241 + 2;
    }
  }
  v246 = v300;
  if (v300)
  {
    v247 = (unint64_t *)&v300->__shared_owners_;
    do
      v248 = __ldaxr(v247);
    while (__stlxr(v248 - 1, v247));
    if (!v248)
    {
      ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
      std::__shared_weak_count::__release_weak(v246);
    }
  }
  if (v298)
    std::__shared_weak_count::__release_weak(v298);
  v249 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v249)
    goto LABEL_373;
  v250 = *(_QWORD *)(v2 + 72);
  v251 = std::__shared_weak_count::lock(v249);
  if (!v251)
    goto LABEL_373;
  v252 = v251;
  v293 = v250;
  v294 = v251;
  v253 = (unint64_t *)&v251->__shared_weak_owners_;
  do
    v254 = __ldxr(v253);
  while (__stxr(v254 + 1, v253));
  v255 = (unint64_t *)&v251->__shared_owners_;
  do
    v256 = __ldaxr(v255);
  while (__stlxr(v256 - 1, v255));
  if (!v256)
  {
    ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
    std::__shared_weak_count::__release_weak(v252);
  }
  AccessoryModule::create((capabilities::abs *)&v293, &v295);
  v257 = v295;
  if (v295)
  {
    v258 = v296;
    v343 = (uint64_t *)v295;
    v344 = v296;
    if (v296)
    {
      v259 = (unint64_t *)&v296->__shared_owners_;
      do
        v260 = __ldxr(v259);
      while (__stxr(v260 + 1, v259));
    }
    v261 = *(std::__shared_weak_count_vtbl ***)(v2 + 152);
    if ((unint64_t)v261 >= *(_QWORD *)(v2 + 160))
    {
      v262 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v343);
      v263 = v344;
      *(_QWORD *)(v2 + 152) = v262;
      if (v263)
      {
        v264 = (unint64_t *)&v263->__shared_owners_;
        do
          v265 = __ldaxr(v264);
        while (__stlxr(v265 - 1, v264));
        if (!v265)
        {
          ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
          std::__shared_weak_count::__release_weak(v263);
        }
      }
    }
    else
    {
      *v261 = v257;
      v261[1] = (std::__shared_weak_count_vtbl *)v258;
      *(_QWORD *)(v2 + 152) = v261 + 2;
    }
  }
  v266 = v296;
  if (v296)
  {
    v267 = (unint64_t *)&v296->__shared_owners_;
    do
      v268 = __ldaxr(v267);
    while (__stlxr(v268 - 1, v267));
    if (!v268)
    {
      ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
      std::__shared_weak_count::__release_weak(v266);
    }
  }
  if (v294)
    std::__shared_weak_count::__release_weak(v294);
  v269 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v269)
    goto LABEL_373;
  v270 = *(_QWORD *)(v2 + 72);
  v271 = std::__shared_weak_count::lock(v269);
  if (!v271)
    goto LABEL_373;
  v272 = v271;
  v289 = v270;
  v290 = v271;
  v273 = (unint64_t *)&v271->__shared_weak_owners_;
  do
    v274 = __ldxr(v273);
  while (__stxr(v274 + 1, v273));
  v275 = (unint64_t *)&v271->__shared_owners_;
  do
    v276 = __ldaxr(v275);
  while (__stlxr(v276 - 1, v275));
  if (!v276)
  {
    ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
    std::__shared_weak_count::__release_weak(v272);
  }
  coex::Module::create(&v289, &v291);
  v277 = v291;
  if (v291)
  {
    v278 = v292;
    v343 = v291;
    v344 = v292;
    if (v292)
    {
      v279 = (unint64_t *)&v292->__shared_owners_;
      do
        v280 = __ldxr(v279);
      while (__stxr(v280 + 1, v279));
    }
    v281 = *(uint64_t ***)(v2 + 152);
    if ((unint64_t)v281 >= *(_QWORD *)(v2 + 160))
    {
      v282 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v343);
      v283 = v344;
      *(_QWORD *)(v2 + 152) = v282;
      if (v283)
      {
        v284 = (unint64_t *)&v283->__shared_owners_;
        do
          v285 = __ldaxr(v284);
        while (__stlxr(v285 - 1, v284));
        if (!v285)
        {
          ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
          std::__shared_weak_count::__release_weak(v283);
        }
      }
    }
    else
    {
      *v281 = v277;
      v281[1] = (uint64_t *)v278;
      *(_QWORD *)(v2 + 152) = v281 + 2;
    }
  }
  v286 = v292;
  if (v292)
  {
    v287 = (unint64_t *)&v292->__shared_owners_;
    do
      v288 = __ldaxr(v287);
    while (__stlxr(v288 - 1, v287));
    if (!v288)
    {
      ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
      std::__shared_weak_count::__release_weak(v286);
    }
  }
  if (v290)
    std::__shared_weak_count::__release_weak(v290);
}

uint64_t __cxx_global_var_init_7()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1BF335000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1BF335000);
  }
  return result;
}

uint64_t __cxx_global_var_init_8()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1BF335000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_1BF335000);
  }
  return result;
}

char *abm::data::getDataPropertyNameFromDict(xpc_object_t *a1)
{
  xpc_object_t value;
  unsigned int v3;
  xpc_object_t object;

  if (MEMORY[0x1C3B8A86C](*a1) != MEMORY[0x1E0C812F8])
    return "Unknown";
  value = xpc_dictionary_get_value(*a1, "kDataProperty");
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  v3 = xpc::dyn_cast_or_default((xpc *)&object, (const object *)5);
  xpc_release(object);
  if (v3 < 5)
    return off_1E78FC000[v3];
  else
    return "Unknown";
}

void sub_1BF350A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t abm::data::getDataPropertyTypeFromDict(xpc_object_t *a1)
{
  xpc_object_t value;
  unsigned int v4;
  xpc_object_t object;

  if (MEMORY[0x1C3B8A86C](*a1) != MEMORY[0x1E0C812F8])
    return 5;
  value = xpc_dictionary_get_value(*a1, "kDataProperty");
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  v4 = xpc::dyn_cast_or_default((xpc *)&object, (const object *)5);
  xpc_release(object);
  if (v4 >= 5)
    return 5;
  else
    return v4;
}

void sub_1BF350B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void abm::data::DataAggregationProtocol::toDict(abm::data::DataAggregationProtocol *this@<X0>, void **a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v5) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  v7 = xpc_int64_create(0);
  if (!v7)
    v7 = xpc_null_create();
  v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  v10 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kDataAggregationProtocol", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataAggregationProtocol::addToDict(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_int64_create(*(unsigned int *)(a1 + 12));
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*a2, "kDataAggregationProtocol", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

const char *abm::data::DataAggregationProtocol::asString(abm::data::DataAggregationProtocol *this)
{
  uint64_t v1;

  v1 = *((int *)this + 3);
  if (v1 > 2)
    return "unknown";
  else
    return off_1E78FC028[v1];
}

void abm::data::DataProperty<abm::data::DataAggregationProtocol>::createDictForGet(xpc_object_t *a1@<X8>)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;

  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  v5 = xpc_int64_create(0);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataAggregationProtocol>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  xpc_object_t value;
  int v5;
  xpc_object_t object;

  *(_QWORD *)a2 = &off_1E78FBEA8;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1C3B8A86C](*a1) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(*a1, "kDataAggregationProtocol"))
  {
    value = xpc_dictionary_get_value(*a1, "kDataAggregationProtocol");
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    v5 = xpc::dyn_cast_or_default((xpc *)&object, (const object *)3);
    xpc_release(object);
    if (v5)
    {
      if (v5 == 1)
      {
        *(_DWORD *)(a2 + 12) = 1;
      }
      else if (v5 == 2)
      {
        *(_DWORD *)(a2 + 12) = 2;
      }
      else
      {
        *(_BYTE *)(a2 + 8) = 0;
        *(_DWORD *)(a2 + 12) = 3;
      }
    }
    else
    {
      *(_DWORD *)(a2 + 12) = 0;
    }
  }
  else
  {
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_1BF350F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t abm::data::DataProperty<abm::data::DataAggregationProtocol>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = &off_1E78FBEA8;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (result >= 3)
  {
    *(_BYTE *)(a2 + 8) = 0;
    result = 3;
  }
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

void abm::data::DataAggregationMaxDatagrams::toDict(abm::data::DataAggregationMaxDatagrams *this@<X0>, void **a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v5) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  v7 = xpc_int64_create(1);
  if (!v7)
    v7 = xpc_null_create();
  v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  v10 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kDataAggregationMaxDatagrams", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataAggregationMaxDatagrams::addToDict(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_int64_create(*(unsigned int *)(a1 + 12));
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*a2, "kDataAggregationMaxDatagrams", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxDatagrams>::createDictForGet(xpc_object_t *a1@<X8>)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;

  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  v5 = xpc_int64_create(1);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxDatagrams>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t object;

  *(_QWORD *)a2 = &off_1E78FBEF0;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1C3B8A86C](*a1) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(*a1, "kDataAggregationMaxDatagrams"))
  {
    value = xpc_dictionary_get_value(*a1, "kDataAggregationMaxDatagrams");
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    *(_DWORD *)(a2 + 12) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  else
  {
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_1BF351338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t abm::data::DataProperty<abm::data::DataAggregationMaxDatagrams>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = &off_1E78FBEF0;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

void abm::data::DataAggregationMaxSize::toDict(abm::data::DataAggregationMaxSize *this@<X0>, void **a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v5) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  v7 = xpc_int64_create(2);
  if (!v7)
    v7 = xpc_null_create();
  v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  v10 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kDataAggregationMaxSize", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataAggregationMaxSize::addToDict(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_int64_create(*(unsigned int *)(a1 + 12));
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*a2, "kDataAggregationMaxSize", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxSize>::createDictForGet(xpc_object_t *a1@<X8>)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;

  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  v5 = xpc_int64_create(2);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxSize>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t object;

  *(_QWORD *)a2 = &off_1E78FBF38;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1C3B8A86C](*a1) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(*a1, "kDataAggregationMaxSize"))
  {
    value = xpc_dictionary_get_value(*a1, "kDataAggregationMaxSize");
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    *(_DWORD *)(a2 + 12) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  else
  {
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_1BF351714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t abm::data::DataProperty<abm::data::DataAggregationMaxSize>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = &off_1E78FBF38;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

void abm::data::DataFlowControl::toDict(abm::data::DataFlowControl *this@<X0>, void **a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v5) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  v7 = xpc_int64_create(3);
  if (!v7)
    v7 = xpc_null_create();
  v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  v10 = xpc_BOOL_create(*((_BYTE *)this + 9));
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kDataFlowControl", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataFlowControl::addToDict(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_BOOL_create(*(_BYTE *)(a1 + 9));
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*a2, "kDataFlowControl", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataFlowControl>::createDictForGet(xpc_object_t *a1@<X8>)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;

  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  v5 = xpc_int64_create(3);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataFlowControl>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t object;

  *(_QWORD *)a2 = &off_1E78FBF80;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1C3B8A86C](*a1) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(*a1, "kDataFlowControl"))
  {
    value = xpc_dictionary_get_value(*a1, "kDataFlowControl");
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    *(_BYTE *)(a2 + 9) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  else
  {
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_1BF351AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t abm::data::DataProperty<abm::data::DataFlowControl>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = &off_1E78FBF80;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(_BYTE *)(a2 + 9) = (_DWORD)result != 0;
  return result;
}

void abm::data::DataPowerSave::toDict(abm::data::DataPowerSave *this@<X0>, void **a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v5) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  v7 = xpc_int64_create(4);
  if (!v7)
    v7 = xpc_null_create();
  v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  v10 = xpc_BOOL_create(*((_BYTE *)this + 9));
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kDataPowerSave", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataPowerSave::addToDict(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_BOOL_create(*(_BYTE *)(a1 + 9));
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*a2, "kDataPowerSave", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataPowerSave>::createDictForGet(xpc_object_t *a1@<X8>)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;

  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  v5 = xpc_int64_create(4);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataPowerSave>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t object;

  *(_QWORD *)a2 = &off_1E78FBFC8;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1C3B8A86C](*a1) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(*a1, "kDataPowerSave"))
  {
    value = xpc_dictionary_get_value(*a1, "kDataPowerSave");
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    *(_BYTE *)(a2 + 9) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  else
  {
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_1BF351ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t abm::data::DataProperty<abm::data::DataPowerSave>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = &off_1E78FBFC8;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(_BYTE *)(a2 + 9) = (_DWORD)result != 0;
  return result;
}

void NetworkStatsInterface::create(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0x68uLL);
  v5 = (uint64_t)v4;
  v6 = (std::__shared_weak_count *)a1[1];
  v12 = *a1;
  v13 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  NetworkStatsInterface::NetworkStatsInterface(v4, &v12);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<NetworkStatsInterface>::shared_ptr[abi:ne180100]<NetworkStatsInterface,std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface*)#1},void>(a2, v5);
  ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2);
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1BF351FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF352008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF35201C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

_QWORD *NetworkStatsInterface::NetworkStatsInterface(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _BYTE v6[16];
  dispatch_object_t object;

  *a1 = off_1E78FC050;
  v4 = a1 + 9;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v6, "com.apple.telephony.abm", "net.stats");
  object = 0;
  ctu::SharedSynchronizable<NetworkStatsInterface>::SharedSynchronizable(v4, "net.stats", QOS_CLASS_DEFAULT, &object);
  if (object)
    dispatch_release(object);
  ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>(a1, (uint64_t)v6, a2);
  *a1 = off_1E78FC1C0;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v6);
  *a1 = off_1E78FC050;
  return a1;
}

void sub_1BF3520F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  va_list va;

  va_start(va, a2);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

void sub_1BF35210C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a10);
  _Unwind_Resume(a1);
}

const char *NetworkStatsInterface::getName(NetworkStatsInterface *this)
{
  return "net.stats";
}

void NetworkStatsInterface::query(NetworkStatsInterface *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[5];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  __n128 (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  std::__shared_weak_count_vtbl *v18;
  std::__shared_weak_count *v19;

  v13 = 0;
  v14 = &v13;
  v15 = 0x3802000000;
  v16 = __Block_byref_object_copy_;
  v17 = __Block_byref_object_dispose_;
  v18 = 0;
  v19 = 0;
  v4 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  v4->__on_zero_shared = 0;
  v4->~__shared_weak_count_0 = 0;
  v4->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&v4->~__shared_weak_count_0;
  v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5->__vftable = (std::__shared_weak_count_vtbl *)off_1E78FC240;
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = v4;
  v18 = v4;
  v19 = v5;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = ___ZN21NetworkStatsInterface5queryEv_block_invoke;
  v12[3] = &unk_1E78FC088;
  v12[4] = &v13;
  NetworkStatsInterface::applyInterfaces((uint64_t)this, (uint64_t)v12);
  v6 = v14[6];
  *a2 = v14[5];
  a2[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  _Block_object_dispose(&v13, 8);
  v9 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1BF352288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  void *v14;
  uint64_t v15;

  operator delete(v14);
  _Block_object_dispose(&a14, 8);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v15 + 40);
  _Unwind_Resume(a1);
}

void NetworkStatsInterface::applyInterfaces(uint64_t a1, uint64_t a2)
{
  int v3;
  int *v4;
  NSObject *v5;
  int v6;
  char *v7;
  ifaddrs *v8;
  sockaddr *ifa_addr;
  int sa_family;
  unsigned int ifa_flags;
  const char *ifa_name;
  size_t v13;
  _BYTE *v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  _BYTE *v20;
  void **v21;
  void **v22;
  char *p_p;
  int64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  void **v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int64_t v32;
  _BYTE *v33;
  unint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  _BYTE *v39;
  _BYTE *v40;
  BOOL v41;
  uint64_t v42;
  const char *v43;
  unsigned int v44;
  void **v45;
  unsigned int v46;
  ifaddrs *v48;
  uint64_t v49;
  void *__dst[3];
  void *__p;
  unint64_t v53;
  uint64_t v54;
  ifaddrs *v55;
  char *__endptr;
  _BYTE buf[24];
  __int16 v58;
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v55 = (ifaddrs *)0xAAAAAAAAAAAAAAAALL;
  v3 = getifaddrs(&v55);
  if (v3)
  {
    v4 = __error();
    v5 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = *v4;
      v7 = strerror(v6);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v3;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v6;
      *(_WORD *)&buf[14] = 2080;
      *(_QWORD *)&buf[16] = v7;
      _os_log_error_impl(&dword_1BF335000, v5, OS_LOG_TYPE_ERROR, "Failed to get data stats, error %d errno=%d(%s)", buf, 0x18u);
    }
    return;
  }
  v8 = v55;
  if (v55)
  {
    v49 = a2;
    while (1)
    {
      v53 = 0xAAAAAAAAAAAAAAAALL;
      v54 = 0x6AAAAAAAAAAAAAALL;
      __p = (void *)0xAA0070695F706470;
      ifa_addr = v8->ifa_addr;
      if (!ifa_addr)
      {
        v8 = v8->ifa_next;
        goto LABEL_7;
      }
      sa_family = ifa_addr->sa_family;
      ifa_flags = v8->ifa_flags;
      memset(__dst, 170, sizeof(__dst));
      ifa_name = v8->ifa_name;
      v13 = strlen(ifa_name);
      if (v13 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v14 = (_BYTE *)v13;
      if (v13 >= 0x17)
        break;
      HIBYTE(__dst[2]) = v13;
      v15 = __dst;
      if (v13)
        goto LABEL_16;
LABEL_17:
      v14[(_QWORD)v15] = 0;
      v18 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        v45 = __dst;
        if (SHIBYTE(__dst[2]) < 0)
          v45 = (void **)__dst[0];
        v46 = v8->ifa_flags;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = v45;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = sa_family;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v46;
        v58 = 1024;
        v59 = ifa_flags & 1;
        _os_log_debug_impl(&dword_1BF335000, v18, OS_LOG_TYPE_DEBUG, "#D Found interface %s, family %u, flags %u, up %d", buf, 0x1Eu);
        if (sa_family != 30 && sa_family != 18)
          goto LABEL_79;
      }
      else if (sa_family != 30 && sa_family != 18)
      {
        goto LABEL_79;
      }
      v20 = (_BYTE *)HIBYTE(__dst[2]);
      v21 = (void **)__dst[0];
      if (SHIBYTE(__dst[2]) >= 0)
        v22 = __dst;
      else
        v22 = (void **)__dst[0];
      if (v54 >= 0)
        p_p = (char *)&__p;
      else
        p_p = (char *)__p;
      if (v54 >= 0)
        v24 = HIBYTE(v54);
      else
        v24 = v53;
      if (!v24)
      {
        v32 = 0;
LABEL_44:
        v33 = (_BYTE *)(v32 + v24);
        if ((v20 & 0x80) != 0)
        {
          v20 = __dst[1];
          if (__dst[1] < v33)
LABEL_102:
            std::string::__throw_out_of_range[abi:ne180100]();
        }
        else
        {
          if (v33 > v20)
            goto LABEL_102;
          v21 = __dst;
        }
        v34 = v20 - v33;
        if ((unint64_t)(v20 - v33) > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v34 >= 0x17)
        {
          v36 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v34 | 7) != 0x17)
            v36 = v34 | 7;
          v37 = v36 + 1;
          v35 = operator new(v36 + 1);
          *(_QWORD *)&buf[8] = v20 - v33;
          *(_QWORD *)&buf[16] = v37 | 0x8000000000000000;
          *(_QWORD *)buf = v35;
        }
        else
        {
          buf[23] = (_BYTE)v20 - (_BYTE)v33;
          v35 = buf;
          if (v20 == v33)
          {
LABEL_56:
            v35[v34] = 0;
            __endptr = 0;
            if (buf[23] >= 0)
              v38 = buf[23];
            else
              v38 = *(_QWORD *)&buf[8];
            if (v38
              && (buf[23] >= 0 ? (v39 = buf) : (v39 = *(_BYTE **)buf),
                  (v40 = memchr(v39, 45, v38)) != 0 && v40 - v39 != -1))
            {
              v41 = 0;
              v42 = 2863311530;
              if ((buf[23] & 0x80000000) != 0)
              {
LABEL_66:
                operator delete(*(void **)buf);
                if (!v41)
                  goto LABEL_79;
LABEL_78:
                (*(void (**)(uint64_t, ifaddrs *, uint64_t))(v49 + 16))(v49, v8, v42);
                goto LABEL_79;
              }
            }
            else
            {
              *__error() = 0;
              if (buf[23] >= 0)
                v43 = buf;
              else
                v43 = *(const char **)buf;
              v44 = strtoul(v43, &__endptr, 10);
              v41 = 0;
              if (*__error())
              {
                v42 = 2863311530;
                if ((buf[23] & 0x80000000) != 0)
                  goto LABEL_66;
              }
              else
              {
                v42 = 2863311530;
                if (__endptr)
                {
                  v41 = *__endptr == 0;
                  if (*__endptr)
                    v42 = 2863311530;
                  else
                    v42 = v44;
                }
                if ((buf[23] & 0x80000000) != 0)
                  goto LABEL_66;
              }
            }
            if (!v41)
              goto LABEL_79;
            goto LABEL_78;
          }
        }
        memmove(v35, &v33[(_QWORD)v21], v20 - v33);
        goto LABEL_56;
      }
      if (SHIBYTE(__dst[2]) >= 0)
        v25 = HIBYTE(__dst[2]);
      else
        v25 = (uint64_t)__dst[1];
      if (v25 >= v24)
      {
        v26 = (char *)v22 + v25;
        v27 = *p_p;
        v28 = v22;
        while (1)
        {
          v29 = v25 - v24;
          if (v29 == -1)
            goto LABEL_79;
          v30 = (char *)memchr(v28, v27, v29 + 1);
          if (!v30)
            goto LABEL_79;
          v31 = v30;
          if (!memcmp(v30, p_p, v24))
            break;
          v28 = (void **)(v31 + 1);
          v25 = v26 - (v31 + 1);
          if (v25 < v24)
            goto LABEL_79;
        }
        if (v31 != v26)
        {
          v32 = v31 - (char *)v22;
          if (v31 - (char *)v22 != -1)
            goto LABEL_44;
        }
      }
LABEL_79:
      if (SHIBYTE(__dst[2]) < 0)
      {
        operator delete(__dst[0]);
        v8 = v8->ifa_next;
        if (SHIBYTE(v54) < 0)
LABEL_83:
          operator delete(__p);
      }
      else
      {
        v8 = v8->ifa_next;
        if (SHIBYTE(v54) < 0)
          goto LABEL_83;
      }
LABEL_7:
      if (!v8)
      {
        v48 = v55;
        goto LABEL_98;
      }
    }
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    v15 = (void **)operator new(v16 + 1);
    __dst[1] = v14;
    __dst[2] = (void *)(v17 | 0x8000000000000000);
    __dst[0] = v15;
LABEL_16:
    memmove(v15, ifa_name, (size_t)v14);
    goto LABEL_17;
  }
  v48 = 0;
LABEL_98:
  MEMORY[0x1C3B8A200](v48);
}

void sub_1BF3527F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
LABEL_7:
      _Unwind_Resume(a1);
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(a19);
  goto LABEL_7;
}

void ___ZN21NetworkStatsInterface5queryEv_block_invoke(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  const char *v7;
  size_t v8;
  size_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  unsigned int v17;
  char *v18;
  uint64_t *v19;
  uint64_t *v20;
  void **v21;
  _BYTE *v22;
  size_t v23;
  uint64_t v24;
  int v25;
  _BYTE __dst[24];

  v6 = *(_DWORD *)(a2 + 16);
  memset(__dst, 170, sizeof(__dst));
  v7 = *(const char **)(a2 + 8);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v9 = v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v10 = operator new(v11 + 1);
    *(_QWORD *)&__dst[8] = v9;
    *(_QWORD *)&__dst[16] = v12 | 0x8000000000000000;
    *(_QWORD *)__dst = v10;
    goto LABEL_8;
  }
  __dst[23] = v8;
  v10 = __dst;
  if (v8)
LABEL_8:
    memmove(v10, v7, v9);
  v10[v9] = 0;
  v13 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v15 = v13 + 1;
  v14 = v13[1];
  if (v14)
  {
    while (1)
    {
      while (1)
      {
        v16 = (uint64_t **)v14;
        v17 = *((_DWORD *)v14 + 8);
        if (v17 <= a3)
          break;
        v14 = *v16;
        v15 = v16;
        if (!*v16)
          goto LABEL_16;
      }
      if (v17 >= a3)
        break;
      v14 = v16[1];
      if (!v14)
      {
        v15 = v16 + 1;
        goto LABEL_16;
      }
    }
    v18 = (char *)v16;
  }
  else
  {
    v16 = v13 + 1;
LABEL_16:
    v18 = (char *)operator new(0x50uLL);
    *((_DWORD *)v18 + 8) = a3;
    *(_OWORD *)(v18 + 40) = 0u;
    *(_OWORD *)(v18 + 56) = 0u;
    *((_QWORD *)v18 + 9) = 0;
    *(_QWORD *)v18 = 0;
    *((_QWORD *)v18 + 1) = 0;
    *((_QWORD *)v18 + 2) = v16;
    *v15 = (uint64_t *)v18;
    v19 = (uint64_t *)**v13;
    v20 = (uint64_t *)v18;
    if (v19)
    {
      *v13 = v19;
      v20 = *v15;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v13[1], v20);
    v13[2] = (uint64_t *)((char *)v13[2] + 1);
  }
  v18[48] |= v6 & 1;
  v21 = (void **)(v18 + 56);
  if (v18 + 56 != __dst)
  {
    if (v18[79] < 0)
    {
      if (__dst[23] >= 0)
        v22 = __dst;
      else
        v22 = *(_BYTE **)__dst;
      if (__dst[23] >= 0)
        v23 = __dst[23];
      else
        v23 = *(_QWORD *)&__dst[8];
      std::string::__assign_no_alias<false>(v21, v22, v23);
    }
    else if ((__dst[23] & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v21, *(void **)__dst, *(size_t *)&__dst[8]);
    }
    else
    {
      *(_OWORD *)v21 = *(_OWORD *)__dst;
      *((_QWORD *)v18 + 9) = *(_QWORD *)&__dst[16];
    }
  }
  v24 = *(_QWORD *)(a2 + 48);
  if (v24)
  {
    v25 = *((_DWORD *)v18 + 11);
    *((_DWORD *)v18 + 10) += *(_DWORD *)(v24 + 28);
    *((_DWORD *)v18 + 11) = v25 + *(_DWORD *)(v24 + 20);
  }
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
}

void sub_1BF352AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void NetworkStatsInterface::getInterfaceList(NetworkStatsInterface *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _QWORD v9[5];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  __n128 (*v13)(_QWORD *, uint64_t);
  void (*v14)(uint64_t);
  void *__p;
  void *v16;
  uint64_t v17;

  v10 = 0;
  v11 = &v10;
  v12 = 0x4002000000;
  v13 = __Block_byref_object_copy__3;
  v14 = __Block_byref_object_dispose__4;
  v17 = 0;
  __p = 0;
  v16 = 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK21NetworkStatsInterface16getInterfaceListEv_block_invoke;
  v9[3] = &unk_1E78FC0B0;
  v9[4] = &v10;
  NetworkStatsInterface::applyInterfaces((uint64_t)this, (uint64_t)v9);
  v3 = v11;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v5 = (_BYTE *)v3[5];
  v4 = (_BYTE *)v3[6];
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - v5);
    *a2 = v7;
    v8 = &v7[4 * (v6 >> 2)];
    a2[2] = v8;
    memcpy(v7, v5, v6);
    a2[1] = v8;
  }
  _Block_object_dispose(&v10, 8);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_1BF352BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  _Block_object_dispose(&a15, 8);
  if (!__p)
    _Unwind_Resume(a1);
  a21 = (uint64_t)__p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__3(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void ___ZNK21NetworkStatsInterface16getInterfaceListEv_block_invoke(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _DWORD *v15;
  char *v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v4 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v6 = (char *)v4[6];
  v5 = v4[7];
  v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    *(_DWORD *)v6 = a3;
    v8 = (uint64_t)(v6 + 4);
    goto LABEL_22;
  }
  v9 = (char *)v4[5];
  v10 = (v6 - v9) >> 2;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 62)
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  v12 = v5 - (_QWORD)v9;
  if (v12 >> 1 > v11)
    v11 = v12 >> 1;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
    v13 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v14 = operator new(4 * v13);
    v15 = &v14[4 * v10];
    v16 = &v14[4 * v13];
    *v15 = a3;
    v8 = (uint64_t)(v15 + 1);
    v17 = v6 - v9;
    if (v6 == v9)
      goto LABEL_20;
    goto LABEL_14;
  }
  v14 = 0;
  v15 = (_DWORD *)(4 * v10);
  v16 = 0;
  *(_DWORD *)(4 * v10) = a3;
  v8 = 4 * v10 + 4;
  v17 = v6 - v9;
  if (v6 != v9)
  {
LABEL_14:
    v18 = v17 - 4;
    if (v18 < 0x2C)
      goto LABEL_27;
    if ((unint64_t)(v9 - v14) < 0x20)
      goto LABEL_27;
    v19 = (v18 >> 2) + 1;
    v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
    v7 = &v6[-v20];
    v15 = (_DWORD *)((char *)v15 - v20);
    v21 = &v14[4 * v10 - 16];
    v22 = v6 - 16;
    v23 = v19 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      *v21 = v24;
      v21 -= 2;
      v22 -= 32;
      v23 -= 8;
    }
    while (v23);
    if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_27:
      do
      {
        v25 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *--v15 = v25;
      }
      while (v7 != v9);
    }
  }
LABEL_20:
  v4[5] = v15;
  v4[6] = v8;
  v4[7] = v16;
  if (v9)
    operator delete(v9);
LABEL_22:
  v4[6] = v8;
}

void NetworkStatsInterface::~NetworkStatsInterface(NetworkStatsInterface *this)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *(_QWORD *)this = off_1E78FC200;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = *((_QWORD *)this + 12);
  if (v2)
    dispatch_release(v2);
  v3 = *((_QWORD *)this + 11);
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *(_QWORD *)this = off_1E78FC200;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = *((_QWORD *)this + 12);
  if (v2)
    dispatch_release(v2);
  v3 = *((_QWORD *)this + 11);
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(this);
}

uint64_t ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "net.stats");
}

uint64_t ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *std::string::__assign_no_alias<true>(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL)
      std::string::__throw_length_error[abi:ne180100]();
    v7 = 44;
    if (__len > 0x2C)
      v7 = __len;
    v8 = (v7 | 7) + 1;
    v6 = operator new(v8);
    memcpy(v6, __src, __len);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (__len)
    {
      memmove(__dst, __src, __len);
      v6 = __dst;
    }
  }
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void **std::string::__assign_no_alias<false>(void **a1, void *__src, size_t __len)
{
  unint64_t v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v13;
  uint64_t v14;

  v6 = (unint64_t)a1[2];
  v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) > __len)
  {
    v8 = *a1;
    a1[1] = (void *)__len;
    if (__len)
      memmove(v8, __src, __len);
    goto LABEL_12;
  }
  v9 = 0x7FFFFFFFFFFFFFF7;
  if (0x7FFFFFFFFFFFFFF7 - v7 < __len - v7 + 1)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = v7 - 1;
  v11 = a1;
  if ((v6 & 0x8000000000000000) == 0)
  {
    if (v10 > 0x3FFFFFFFFFFFFFF2)
      goto LABEL_7;
LABEL_14:
    v13 = 2 * v10;
    if (__len > 2 * v10)
      v13 = __len;
    v14 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v14 = v13 | 7;
    if (v13 >= 0x17)
      v9 = v14 + 1;
    else
      v9 = 23;
    v8 = operator new(v9);
    if (!__len)
      goto LABEL_9;
    goto LABEL_8;
  }
  v11 = *a1;
  if (v10 <= 0x3FFFFFFFFFFFFFF2)
    goto LABEL_14;
LABEL_7:
  v8 = operator new(0x7FFFFFFFFFFFFFF7uLL);
  if (__len)
LABEL_8:
    memcpy(v8, __src, __len);
LABEL_9:
  if (v10 != 22)
    operator delete(v11);
  a1[1] = (void *)__len;
  a1[2] = (void *)(v9 | 0x8000000000000000);
  *a1 = v8;
LABEL_12:
  *((_BYTE *)v8 + __len) = 0;
  return a1;
}

void std::vector<unsigned int>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E78FADC8, MEMORY[0x1E0DE42E0]);
}

void sub_1BF353128(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

void ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF35325C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF353278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<NetworkStatsInterface>::shared_ptr[abi:ne180100]<NetworkStatsInterface,std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E78FC170;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF353394(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface*)#1}::operator() const(NetworkStatsInterface*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF3533B4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<NetworkStatsInterface *,std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface *)#1},std::allocator<NetworkStatsInterface>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<NetworkStatsInterface *,std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface *)#1},std::allocator<NetworkStatsInterface>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface*)#1}::operator() const(NetworkStatsInterface*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<NetworkStatsInterface *,std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface *)#1},std::allocator<NetworkStatsInterface>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI21NetworkStatsInterfaceE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI21NetworkStatsInterfaceE15make_shared_ptrIS1_EENSt3__110sha"
                                "red_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI21NetworkStatsInterfaceE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI21NetworkStatsInterfaceE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface*)#1}::operator() const(NetworkStatsInterface*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *ctu::SharedSynchronizable<NetworkStatsInterface>::SharedSynchronizable(_QWORD *a1, const char *a2, dispatch_qos_class_t a3, dispatch_object_t *a4)
{
  NSObject *v8;
  NSObject *initially_inactive;
  NSObject *v10;
  NSObject *v11;

  v8 = *a4;
  if (*a4)
    dispatch_retain(*a4);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v10 = dispatch_queue_create_with_target_V2(a2, initially_inactive, v8);
  dispatch_set_qos_class_floor(v10, a3, 0);
  dispatch_activate(v10);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = v10;
  if (v10)
    dispatch_retain(v10);
  v11 = *a4;
  a1[3] = *a4;
  if (v11)
    dispatch_retain(v11);
  if (v10)
    dispatch_release(v10);
  if (v8)
    dispatch_release(v8);
  return a1;
}

_QWORD *ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  _BYTE v10[16];

  *a1 = off_1E78FC200;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  a1[1] = &unk_1E78FB900;
  a1[7] = *a3;
  v5 = a3[1];
  a1[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v9);
  return a1;
}

void sub_1BF3535DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedLoggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E78FC200;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E78FC200;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

_QWORD *ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E78FC200;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E78FC200;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__shared_ptr_pointer<std::map<unsigned int,NetworkStat> *,std::shared_ptr<std::map<unsigned int,NetworkStat>>::__shared_ptr_default_delete<std::map<unsigned int,NetworkStat>,std::map<unsigned int,NetworkStat>>,std::allocator<std::map<unsigned int,NetworkStat>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<std::map<unsigned int,NetworkStat> *,std::shared_ptr<std::map<unsigned int,NetworkStat>>::__shared_ptr_default_delete<std::map<unsigned int,NetworkStat>,std::map<unsigned int,NetworkStat>>,std::allocator<std::map<unsigned int,NetworkStat>>>::__on_zero_shared(uint64_t a1)
{
  char **v1;

  v1 = *(char ***)(a1 + 24);
  if (v1)
  {
    std::__tree<std::__value_type<unsigned int,NetworkStat>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,NetworkStat>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,NetworkStat>>>::destroy(*(_QWORD *)(a1 + 24), v1[1]);
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<std::map<unsigned int,NetworkStat> *,std::shared_ptr<std::map<unsigned int,NetworkStat>>::__shared_ptr_default_delete<std::map<unsigned int,NetworkStat>,std::map<unsigned int,NetworkStat>>,std::allocator<std::map<unsigned int,NetworkStat>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF53C4FELL)
    return a1 + 24;
  if (((v3 & 0x80000001BF53C4FELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF53C4FELL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF53C4FELL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__tree<std::__value_type<unsigned int,NetworkStat>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,NetworkStat>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,NetworkStat>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,NetworkStat>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,NetworkStat>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,NetworkStat>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<unsigned int,NetworkStat>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,NetworkStat>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,NetworkStat>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[79] < 0)
      operator delete(*((void **)a2 + 7));
    operator delete(a2);
  }
}

void StatsModule::create(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13[2];
  _QWORD v14[5];
  _QWORD *v15;
  _QWORD block[6];

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0xE8uLL);
  v5 = (uint64_t)v4;
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  v13[0] = v6;
  v13[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  StatsModule::StatsModule((uint64_t)v4, v13);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<StatsModule>::shared_ptr[abi:ne180100]<StatsModule,std::shared_ptr<StatsModule> ctu::SharedSynchronizable<StatsModule>::make_shared_ptr<StatsModule>(StatsModule*)::{lambda(StatsModule*)#1},void>(a2, v5);
  ctu::Loggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2 + 48);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  v10 = *a2;
  v11 = *a2 + 120;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 0x40000000;
  v14[2] = ___ZN11StatsModule4initEv_block_invoke;
  v14[3] = &__block_descriptor_tmp_2;
  v14[4] = v10;
  v15 = v14;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI11StatsModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_12_0;
  block[4] = v11;
  block[5] = &v15;
  v12 = *(NSObject **)(v10 + 136);
  if (*(_QWORD *)(v10 + 144))
    dispatch_async_and_wait(v12, block);
  else
    dispatch_sync(v12, block);
}

void sub_1BF35396C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void StatsModule::init(StatsModule *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN11StatsModule4initEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_2;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI11StatsModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_12_0;
  block[4] = (char *)this + 120;
  block[5] = &v4;
  v2 = (char *)this + 136;
  v1 = *((_QWORD *)this + 17);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

uint64_t StatsModule::StatsModule(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *initially_inactive;
  NSObject *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE v20[16];
  _QWORD block[5];
  _BYTE v22[16];

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_1E7908A38;
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(_QWORD *)a1 = &unk_1E78FC4E8;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_1E78FC4E8;
    *(_QWORD *)(a1 + 8) = v3;
  }
  *(_QWORD *)a1 = off_1E78FC290;
  *(_QWORD *)(a1 + 48) = &unk_1E78FC300;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v20, "com.apple.telephony.abm", "stats.mod");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_2;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v11 = GetABMLogServer(void)::sLogServer;
    v10 = *(std::__shared_weak_count **)algn_1ED710088;
    if (*(_QWORD *)algn_1ED710088)
      goto LABEL_12;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v11 = GetABMLogServer(void)::sLogServer;
    v10 = *(std::__shared_weak_count **)algn_1ED710088;
    if (*(_QWORD *)algn_1ED710088)
    {
LABEL_12:
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v15 = dispatch_queue_create_with_target_V2("stats.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v15, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v15);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v15;
  if (v15)
  {
    dispatch_retain(v15);
    *(_QWORD *)(a1 + 144) = 0;
    dispatch_release(v15);
  }
  else
  {
    *(_QWORD *)(a1 + 144) = 0;
  }
  *(_QWORD *)(a1 + 48) = off_1E78FC558;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)block);
  *(_QWORD *)(a1 + 56) = &unk_1E78FB900;
  *(_QWORD *)(a1 + 104) = v11;
  *(_QWORD *)(a1 + 112) = v10;
  if (v10)
  {
    v16 = (unint64_t *)&v10->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
    *(_QWORD *)(a1 + 48) = off_1E78FC5E8;
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
    *(_QWORD *)(a1 + 48) = off_1E78FC5E8;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v20);
  *(_QWORD *)a1 = off_1E78FC290;
  *(_QWORD *)(a1 + 48) = &unk_1E78FC300;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  return a1;
}

void sub_1BF353D68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  Service *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v4 - 64));
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  Service::~Service(v2);
  _Unwind_Resume(a1);
}

void sub_1BF353DA4(_Unwind_Exception *a1)
{
  Service *v1;

  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void StatsModule::~StatsModule(StatsModule *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  std::__shared_weak_count *v18;
  uint8_t v19[16];

  *(_QWORD *)this = off_1E78FC290;
  *((_QWORD *)this + 6) = &unk_1E78FC300;
  v2 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v19, 2u);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  std::__tree<std::__value_type<abm::stats::StatsID,std::shared_ptr<Stats>>,std::__map_value_compare<abm::stats::StatsID,std::__value_type<abm::stats::StatsID,std::shared_ptr<Stats>>,std::less<abm::stats::StatsID>,true>,std::allocator<std::__value_type<abm::stats::StatsID,std::shared_ptr<Stats>>>>::destroy(*((_QWORD **)this + 23));
  v9 = *((_QWORD *)this + 19);
  if (v9)
  {
    v10 = *((_QWORD *)this + 20);
    v11 = (void *)*((_QWORD *)this + 19);
    if (v10 != v9)
    {
      do
      {
        if (*(char *)(v10 - 1) < 0)
          operator delete(*(void **)(v10 - 24));
        v10 -= 24;
      }
      while (v10 != v9);
      v11 = (void *)*((_QWORD *)this + 19);
    }
    *((_QWORD *)this + 20) = v9;
    operator delete(v11);
  }
  *((_QWORD *)this + 6) = off_1E78FC558;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v12 = *((_QWORD *)this + 18);
  if (v12)
    dispatch_release(v12);
  v13 = *((_QWORD *)this + 17);
  if (v13)
    dispatch_release(v13);
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  *(_QWORD *)this = off_1E7908A38;
  v15 = *((_QWORD *)this + 3);
  if (v15)
  {
    v16 = *((_QWORD *)this + 4);
    v17 = (void *)*((_QWORD *)this + 3);
    if (v16 != v15)
    {
      do
      {
        if (*(char *)(v16 - 1) < 0)
          operator delete(*(void **)(v16 - 24));
        v16 -= 24;
      }
      while (v16 != v15);
      v17 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v15;
    operator delete(v17);
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
}

{
  void *v1;

  StatsModule::~StatsModule(this);
  operator delete(v1);
}

void `non-virtual thunk to'StatsModule::~StatsModule(StatsModule *this)
{
  StatsModule::~StatsModule((StatsModule *)((char *)this - 48));
}

{
  void *v1;

  StatsModule::~StatsModule((StatsModule *)((char *)this - 48));
  operator delete(v1);
}

const char *StatsModule::getName(StatsModule *this)
{
  return "stats.mod";
}

void ___ZN11StatsModule4initEv_block_invoke(uint64_t a1)
{
  StatsModule *v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *(StatsModule **)(a1 + 32);
  v2 = *((_QWORD *)v1 + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v3 = 0;
    _os_log_debug_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEBUG, "#D Initializing", v3, 2u);
    StatsModule::initializeStats_sync(v1);
  }
  else
  {
    StatsModule::initializeStats_sync(v1);
  }
}

void StatsModule::initializeStats_sync(StatsModule *this)
{
  __int128 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  AnalyticsHelper *v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;

  StatsModule::addStatsToModule_sync((uint64_t)this, 0);
  StatsAWD::create((uint64_t *)&v17);
  v2 = v17;
  v17 = 0uLL;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  *(_OWORD *)((char *)this + 200) = v2;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (AnalyticsHelper *)operator new(0x80uLL);
  AnalyticsHelper::AnalyticsHelper(v9);
  *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<AnalyticsHelper>::shared_ptr[abi:ne180100]<AnalyticsHelper,std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper*)#1},void>(&v17, (uint64_t)v9);
  ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(v17);
  v10 = v17;
  v17 = 0uLL;
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
  *(_OWORD *)((char *)this + 216) = v10;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1BF3541D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

_BYTE *StatsModule::getShutdownStages@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *v3;
  _BYTE *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(1uLL);
  *a1 = v3;
  *v3 = 3;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void StatsModule::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  uint64_t *v4;
  NSObject *v5;
  _QWORD v6[4];
  dispatch_group_t group;
  char v8;

  v4 = (uint64_t *)(a1 + 120);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 1174405120;
  v6[2] = ___ZN11StatsModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v6[3] = &__block_descriptor_tmp_3_0;
  v5 = *a3;
  group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  v8 = a2;
  ctu::SharedSynchronizable<StatsModule>::execute_wrapped(v4, (uint64_t)v6);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void StatsModule::initialize(uint64_t a1, NSObject **a2)
{
  uint64_t *v2;
  NSObject *v3;
  _QWORD v4[5];
  dispatch_group_t group;

  v2 = (uint64_t *)(a1 + 120);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 1174405120;
  v4[2] = ___ZN11StatsModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v4[3] = &__block_descriptor_tmp_9_1;
  v3 = *a2;
  v4[4] = a1;
  group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(v3);
  }
  ctu::SharedSynchronizable<StatsModule>::execute_wrapped(v2, (uint64_t)v4);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN11StatsModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void *v10;
  size_t v11;
  size_t v12;
  void **p_dst;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  const void *v19;
  size_t v20;
  size_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  _QWORD v27[6];
  std::__shared_weak_count *v28;
  const void *v29;
  _QWORD aBlock[6];
  std::__shared_weak_count *v31;
  const void *v32;
  void **__dst;
  size_t v34;
  unint64_t v35;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (v3 = *(_QWORD *)(v1 + 120), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (const void *)*MEMORY[0x1E0CFB5E0];
  v11 = strlen((const char *)*MEMORY[0x1E0CFB5E0]);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (void **)operator new(v14 + 1);
    v34 = v12;
    v35 = v15 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v35) = v11;
    p_dst = (void **)&__dst;
    if (!v11)
      goto LABEL_17;
  }
  memmove(p_dst, v10, v12);
LABEL_17:
  *((_BYTE *)p_dst + v12) = 0;
  v16 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11StatsModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_5_2;
  aBlock[4] = v1;
  aBlock[5] = v3;
  v31 = v5;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  v18 = _Block_copy(aBlock);
  v32 = v18;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v32);
  if (v18)
    _Block_release(v18);
  if (SHIBYTE(v35) < 0)
    operator delete(__dst);
  v19 = (const void *)*MEMORY[0x1E0CFB128];
  v20 = strlen((const char *)*MEMORY[0x1E0CFB128]);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = (void **)operator new(v23 + 1);
    v34 = v21;
    v35 = v24 | 0x8000000000000000;
    __dst = v22;
  }
  else
  {
    HIBYTE(v35) = v20;
    v22 = (void **)&__dst;
    if (!v20)
      goto LABEL_31;
  }
  memmove(v22, v19, v21);
LABEL_31:
  *((_BYTE *)v22 + v21) = 0;
  v27[0] = v16;
  v27[1] = 1174405120;
  v27[2] = ___ZN11StatsModule10initializeEN8dispatch13group_sessionE_block_invoke_6;
  v27[3] = &__block_descriptor_tmp_8;
  v27[4] = v1;
  v27[5] = v3;
  v28 = v5;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  v26 = _Block_copy(v27);
  v29 = v26;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v29);
  if (v26)
    _Block_release(v26);
  if (SHIBYTE(v35) < 0)
    operator delete(__dst);
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  if (v31)
    std::__shared_weak_count::__release_weak(v31);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF35467C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::__shared_weak_count *v30;
  const void *v31;
  std::__shared_weak_count *v33;

  if (v31)
    _Block_release(v31);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if ((a30 & 0x80000000) == 0)
    {
LABEL_5:
      v33 = a23;
      if (!a23)
      {
LABEL_10:
        std::__shared_weak_count::__release_weak(v30);
        _Unwind_Resume(a1);
      }
LABEL_9:
      std::__shared_weak_count::__release_weak(v33);
      std::__shared_weak_count::__release_weak(v30);
      _Unwind_Resume(a1);
    }
  }
  else if ((a30 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  v33 = a23;
  if (!a23)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN11StatsModule10initializeEN8dispatch13group_sessionE_block_invoke_2(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  NSObject *v11;
  xpc_object_t v12;
  void (**v13)(const void *, uint64_t, _BYTE *);
  xpc_object_t v14;
  unint64_t *v15;
  unint64_t v16;
  xpc_object_t v17;
  void (**v18)(const void *, uint64_t, _BYTE *);
  void *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  _QWORD *v24;
  xpc_object_t v25;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  _BYTE object[24];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  v34 = v8;
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  if (!v10)
    goto LABEL_24;
  if (MEMORY[0x1C3B8A86C](*a2) != MEMORY[0x1E0C812F8])
  {
    v11 = v7[11];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v33 = *MEMORY[0x1E0CFB5E0];
      *(_DWORD *)object = 136315138;
      *(_QWORD *)&object[4] = v33;
      _os_log_error_impl(&dword_1BF335000, v11, OS_LOG_TYPE_ERROR, "No input is given for %s", object, 0xCu);
      if (!*a3)
      {
LABEL_24:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v32 = __ldaxr(p_shared_owners);
        while (__stlxr(v32 - 1, p_shared_owners));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
    }
    else if (!*a3)
    {
      goto LABEL_24;
    }
    v12 = xpc_null_create();
    v13 = (void (**)(const void *, uint64_t, _BYTE *))*a3;
    *(_QWORD *)object = v12;
    v14 = xpc_null_create();
    v13[2](v13, 3760250880, object);
    xpc_release(*(xpc_object_t *)object);
    xpc_release(v14);
    goto LABEL_24;
  }
  v15 = (unint64_t *)&v9->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  v17 = (xpc_object_t)*a2;
  if (v17)
  {
    xpc_retain(v17);
    v18 = (void (**)(const void *, uint64_t, _BYTE *))*a3;
    if (*a3)
      goto LABEL_12;
  }
  else
  {
    v17 = xpc_null_create();
    v18 = (void (**)(const void *, uint64_t, _BYTE *))*a3;
    if (*a3)
    {
LABEL_12:
      v19 = _Block_copy(v18);
      v20 = (std::__shared_weak_count *)v7[16];
      if (!v20)
LABEL_31:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_16;
    }
  }
  v19 = 0;
  v20 = (std::__shared_weak_count *)v7[16];
  if (!v20)
    goto LABEL_31;
LABEL_16:
  v21 = v7[15];
  v22 = std::__shared_weak_count::lock(v20);
  if (!v22)
    goto LABEL_31;
  v23 = v22;
  v24 = operator new(0x28uLL);
  *v24 = v7;
  v24[1] = v10;
  v24[2] = v9;
  v24[3] = v17;
  v25 = xpc_null_create();
  v24[4] = v19;
  v26 = v7[17];
  v27 = (unint64_t *)&v23->__shared_owners_;
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
  v29 = operator new(0x18uLL);
  *v29 = v24;
  v29[1] = v21;
  v29[2] = v23;
  dispatch_async_f(v26, v29, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11StatsModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
  do
    v30 = __ldaxr(v27);
  while (__stlxr(v30 - 1, v27));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  xpc_release(v25);
  v9 = v34;
  if (v34)
    goto LABEL_24;
}

void sub_1BF3549DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11StatsModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11StatsModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN11StatsModule10initializeEN8dispatch13group_sessionE_block_invoke_6(_QWORD *a1, xpc_object_t *a2, void (***a3)(const void *, uint64_t, xpc_object_t *))
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  NSObject *v11;
  xpc_object_t v12;
  void (**v13)(const void *, uint64_t, xpc_object_t *);
  xpc_object_t v14;
  xpc_object_t value;
  const char *v16;
  int v17;
  size_t v18;
  xpc_object_t *v19;
  NSObject *v20;
  xpc_object_t v21;
  void (**v22)(const void *, uint64_t, xpc_object_t *);
  xpc_object_t v23;
  unint64_t *v24;
  unint64_t v25;
  xpc_object_t v26;
  void (**v27)(const void *, uint64_t, xpc_object_t *);
  void *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  _QWORD *v33;
  xpc_object_t v34;
  NSObject *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  void *v42;
  xpc_object_t *v43;
  std::__shared_weak_count *v44;
  _BYTE v45[12];
  xpc_object_t object[4];

  object[3] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  v44 = v8;
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  if (!v10)
    goto LABEL_40;
  if (MEMORY[0x1C3B8A86C](*a2) != MEMORY[0x1E0C812F8])
  {
    v11 = v7[11];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v42 = (void *)*MEMORY[0x1E0CFB128];
      LODWORD(object[0]) = 136315138;
      *(xpc_object_t *)((char *)object + 4) = v42;
      _os_log_error_impl(&dword_1BF335000, v11, OS_LOG_TYPE_ERROR, "No input is given for %s", (uint8_t *)object, 0xCu);
      if (!*a3)
      {
LABEL_40:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v41 = __ldaxr(p_shared_owners);
        while (__stlxr(v41 - 1, p_shared_owners));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
    }
    else if (!*a3)
    {
      goto LABEL_40;
    }
    v12 = xpc_null_create();
    v13 = *a3;
    object[0] = v12;
    v14 = xpc_null_create();
    v13[2](v13, 3760250880, object);
    xpc_release(object[0]);
    xpc_release(v14);
    goto LABEL_40;
  }
  memset(object, 170, 24);
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB020]);
  *(_QWORD *)v45 = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)v45 = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)v45, (const object *)"", v16);
  xpc_release(*(xpc_object_t *)v45);
  v17 = SHIBYTE(object[2]);
  if (SHIBYTE(object[2]) >= 0)
    v18 = HIBYTE(object[2]);
  else
    v18 = (size_t)object[1];
  if (v18 != strlen((const char *)*MEMORY[0x1E0CFC240])
    || (SHIBYTE(object[2]) >= 0 ? (v19 = object) : (v19 = (xpc_object_t *)object[0]),
        memcmp(v19, (const void *)*MEMORY[0x1E0CFC240], v18)))
  {
    v20 = v7[11];
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v43 = (xpc_object_t *)object[0];
      if (v17 >= 0)
        v43 = object;
      *(_DWORD *)v45 = 136315138;
      *(_QWORD *)&v45[4] = v43;
      _os_log_error_impl(&dword_1BF335000, v20, OS_LOG_TYPE_ERROR, "Failed: Stats get command works only abm stats. %s is not recognized.", v45, 0xCu);
      if (*a3)
        goto LABEL_21;
    }
    else if (*a3)
    {
LABEL_21:
      v21 = xpc_null_create();
      v22 = *a3;
      *(_QWORD *)v45 = v21;
      v23 = xpc_null_create();
      v22[2](v22, 3760250880, (xpc_object_t *)v45);
      xpc_release(*(xpc_object_t *)v45);
      xpc_release(v23);
    }
  }
  v24 = (unint64_t *)&v9->__shared_owners_;
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
  v26 = *a2;
  if (v26)
  {
    xpc_retain(v26);
    v27 = *a3;
    if (*a3)
      goto LABEL_26;
  }
  else
  {
    v26 = xpc_null_create();
    v27 = *a3;
    if (*a3)
    {
LABEL_26:
      v28 = _Block_copy(v27);
      v29 = (std::__shared_weak_count *)v7[16];
      if (!v29)
LABEL_51:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_30;
    }
  }
  v28 = 0;
  v29 = (std::__shared_weak_count *)v7[16];
  if (!v29)
    goto LABEL_51;
LABEL_30:
  v30 = v7[15];
  v31 = std::__shared_weak_count::lock(v29);
  if (!v31)
    goto LABEL_51;
  v32 = v31;
  v33 = operator new(0x28uLL);
  *v33 = v7;
  v33[1] = v10;
  v33[2] = v9;
  v33[3] = v26;
  v34 = xpc_null_create();
  v33[4] = v28;
  v35 = v7[17];
  v36 = (unint64_t *)&v32->__shared_owners_;
  do
    v37 = __ldxr(v36);
  while (__stxr(v37 + 1, v36));
  v38 = operator new(0x18uLL);
  *v38 = v33;
  v38[1] = v30;
  v38[2] = v32;
  dispatch_async_f(v35, v38, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11StatsModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
  do
    v39 = __ldaxr(v36);
  while (__stlxr(v39 - 1, v36));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  xpc_release(v34);
  if (SHIBYTE(object[2]) < 0)
    operator delete(object[0]);
  v9 = v44;
  if (v44)
    goto LABEL_40;
}

void sub_1BF354E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;

  v3 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    v4 = *(NSObject **)(a1 + 40);
    if (v4)
      dispatch_group_enter(v4);
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 40);
    if (v3)
      dispatch_release(v3);
  }
}

BOOL StatsModule::reportStats_sync(uint64_t a1, int a2, xpc_object_t *a3)
{
  xpc_object_t v5;
  _BOOL8 updated;
  void *v8;

  v5 = *a3;
  v8 = v5;
  if (v5)
  {
    xpc_retain(v5);
  }
  else
  {
    v5 = xpc_null_create();
    v8 = v5;
  }
  updated = StatsModule::updateData_sync(a1, a2, &v8);
  xpc_release(v5);
  return updated;
}

void sub_1BF355034(_Unwind_Exception *a1)
{
  void *v1;

  xpc_release(v1);
  _Unwind_Resume(a1);
}

BOOL StatsModule::updateData_sync(uint64_t a1, int a2, void **a3)
{
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t *v20;
  unint64_t v21;
  CFTypeRef v22;
  CFTypeRef v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t *v26;
  int v27;
  void *v28;
  uint64_t v29;
  uint64_t *v30;
  std::__shared_weak_count *v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t *v34;
  unint64_t v35;
  CFTypeRef v36;
  void *v37;
  void *v38;
  uint64_t (*v39)(uint64_t);
  uint64_t v40;
  _QWORD *v41;
  __int128 v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  _BOOL8 v54;
  CFTypeRef v55;
  void **v56;
  const __CFString *v57;
  const __CFString *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  CFTypeRef v63;
  xpc_object_t object;
  CFTypeRef v66;
  unint64_t v67;
  unint64_t v68;
  void *__p[2];
  char v70;
  CFTypeRef cf;
  CFTypeRef v72;
  _QWORD v73[2];

  cf = 0;
  v72 = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v6 = off_1ED70FDE8;
  if (!off_1ED70FDE8)
  {
    v7 = operator new(0x30uLL);
    MEMORY[0x1C3B893B4](v7, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x1E0C9B260]);
    v7[3] = 0;
    v7[4] = 0;
    *((_DWORD *)v7 + 10) = 0;
    std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(__p, (uint64_t)v7);
    v8 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v9 = (std::__shared_weak_count *)*(&off_1ED70FDE8 + 1);
    off_1ED70FDE8 = v8;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v13 = (unint64_t *)((char *)__p[1] + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v6 = off_1ED70FDE8;
  }
  v15 = (std::__shared_weak_count *)*(&off_1ED70FDE8 + 1);
  if (*(&off_1ED70FDE8 + 1))
  {
    v16 = (unint64_t *)(*(&off_1ED70FDE8 + 1) + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  if (a2)
  {
    qmemcpy(__p, "UNKNOWN", 7);
    v18 = 7;
    v19 = 7;
  }
  else
  {
    qmemcpy(__p, "Boot Statistics", 15);
    v18 = 15;
    v19 = 15;
  }
  *((_BYTE *)__p + v18) = 0;
  v70 = v19;
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 40));
  Preferences::getPreference<__CFDictionary const*>((uint64_t (***)(_QWORD, uint64_t))v6, (const char *)__p, &cf);
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 40));
  if (v70 < 0)
  {
    operator delete(__p[0]);
    if (!v15)
      goto LABEL_26;
  }
  else if (!v15)
  {
    goto LABEL_26;
  }
  v20 = (unint64_t *)&v15->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (v21)
  {
LABEL_26:
    v22 = cf;
    if (!cf)
      goto LABEL_28;
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  v22 = cf;
  if (cf)
LABEL_27:
    CFRetain(v22);
LABEL_28:
  v23 = v72;
  v72 = v22;
  if (v23)
    CFRelease(v23);
  v25 = (uint64_t **)(a1 + 184);
  v24 = *(uint64_t **)(a1 + 184);
  v67 = 0xAAAAAAAAAAAAAAAALL;
  v68 = 0xAAAAAAAAAAAAAAAALL;
  if (!v24)
  {
    v26 = (uint64_t *)(a1 + 184);
LABEL_37:
    v28 = operator new(0x38uLL);
    *((_DWORD *)v28 + 8) = a2;
    *((_QWORD *)v28 + 5) = 0;
    *((_QWORD *)v28 + 6) = 0;
    *(_QWORD *)v28 = 0;
    *((_QWORD *)v28 + 1) = 0;
    *((_QWORD *)v28 + 2) = v26;
    *v25 = (uint64_t *)v28;
    v29 = **(_QWORD **)(a1 + 176);
    v30 = (uint64_t *)v28;
    if (v29)
    {
      *(_QWORD *)(a1 + 176) = v29;
      v30 = *v25;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 184), v30);
    ++*(_QWORD *)(a1 + 192);
    v32 = *((_QWORD *)v28 + 5);
    v31 = (std::__shared_weak_count *)*((_QWORD *)v28 + 6);
    v67 = v32;
    v68 = (unint64_t)v31;
    if (!v31)
      goto LABEL_46;
LABEL_44:
    v34 = (unint64_t *)&v31->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    goto LABEL_46;
  }
  while (1)
  {
    while (1)
    {
      v26 = v24;
      v27 = *((_DWORD *)v24 + 8);
      if (v27 <= a2)
        break;
      v24 = (uint64_t *)*v26;
      v25 = (uint64_t **)v26;
      if (!*v26)
        goto LABEL_37;
    }
    if (v27 >= a2)
      break;
    v24 = (uint64_t *)v26[1];
    if (!v24)
    {
      v25 = (uint64_t **)(v26 + 1);
      goto LABEL_37;
    }
  }
  v33 = v26 + 5;
  v32 = v26[5];
  v31 = (std::__shared_weak_count *)v33[1];
  v67 = v32;
  v68 = (unint64_t)v31;
  if (v31)
    goto LABEL_44;
LABEL_46:
  if (!v32)
    goto LABEL_77;
  v36 = v72;
  v66 = v72;
  if (v72)
    CFRetain(v72);
  v37 = *a3;
  object = v37;
  if (v37)
    xpc_retain(v37);
  else
    object = xpc_null_create();
  (*(void (**)(void **__return_ptr, unint64_t, CFTypeRef *, xpc_object_t *))(*(_QWORD *)v32 + 56))(__p, v32, &v66, &object);
  v38 = __p[0];
  v72 = __p[0];
  __p[0] = 0;
  if (v36)
  {
    CFRelease(v36);
    if (__p[0])
      CFRelease(__p[0]);
  }
  xpc_release(object);
  object = 0;
  if (v66)
    CFRelease(v66);
  v39 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!v38)
    v39 = 0;
  if (!v39)
  {
LABEL_77:
    v54 = 0;
    if (!v31)
      goto LABEL_96;
    goto LABEL_93;
  }
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v40 = off_1ED70FDE8;
  if (!off_1ED70FDE8)
  {
    v41 = operator new(0x30uLL);
    MEMORY[0x1C3B893B4](v41, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x1E0C9B260]);
    v41[3] = 0;
    v41[4] = 0;
    *((_DWORD *)v41 + 10) = 0;
    std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(__p, (uint64_t)v41);
    v42 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v43 = (std::__shared_weak_count *)*(&off_1ED70FDE8 + 1);
    off_1ED70FDE8 = v42;
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v46 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v47 = (unint64_t *)((char *)__p[1] + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v40 = off_1ED70FDE8;
  }
  v49 = (std::__shared_weak_count *)*(&off_1ED70FDE8 + 1);
  if (*(&off_1ED70FDE8 + 1))
  {
    v50 = (unint64_t *)(*(&off_1ED70FDE8 + 1) + 8);
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  if (a2)
  {
    qmemcpy(__p, "UNKNOWN", 7);
    v52 = 7;
    v53 = 7;
  }
  else
  {
    qmemcpy(__p, "Boot Statistics", 15);
    v52 = 15;
    v53 = 15;
  }
  *((_BYTE *)__p + v52) = 0;
  v70 = v53;
  v55 = v72;
  os_unfair_lock_lock((os_unfair_lock_t)(v40 + 40));
  if (v70 >= 0)
    v56 = __p;
  else
    v56 = (void **)__p[0];
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v73, (const char *)v56);
  v57 = (const __CFString *)v73[0];
  v73[1] = v55;
  if (v55)
  {
    CFRetain(v55);
    v58 = (const __CFString *)*MEMORY[0x1E0C9B250];
    CFPreferencesSetValue(v57, v55, *(CFStringRef *)(v40 + 8), *(CFStringRef *)(v40 + 16), (CFStringRef)*MEMORY[0x1E0C9B250]);
    v54 = CFPreferencesSynchronize(*(CFStringRef *)(v40 + 8), *(CFStringRef *)(v40 + 16), v58) != 0;
    CFRelease(v55);
    MEMORY[0x1C3B8936C](v73);
    os_unfair_lock_unlock((os_unfair_lock_t)(v40 + 40));
    if ((v70 & 0x80000000) == 0)
      goto LABEL_85;
LABEL_88:
    operator delete(__p[0]);
    if (!v49)
      goto LABEL_92;
LABEL_89:
    v59 = (unint64_t *)&v49->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
      v31 = (std::__shared_weak_count *)v68;
      if (!v68)
        goto LABEL_96;
      goto LABEL_93;
    }
    goto LABEL_92;
  }
  v54 = 0;
  MEMORY[0x1C3B8936C](v73);
  os_unfair_lock_unlock((os_unfair_lock_t)(v40 + 40));
  if (v70 < 0)
    goto LABEL_88;
LABEL_85:
  if (v49)
    goto LABEL_89;
LABEL_92:
  v31 = (std::__shared_weak_count *)v68;
  if (!v68)
    goto LABEL_96;
LABEL_93:
  v61 = (unint64_t *)&v31->__shared_owners_;
  do
    v62 = __ldaxr(v61);
  while (__stlxr(v62 - 1, v61));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    v63 = v72;
    if (!v72)
      return v54;
    goto LABEL_97;
  }
LABEL_96:
  v63 = v72;
  if (v72)
LABEL_97:
    CFRelease(v63);
  return v54;
}

void sub_1BF355688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,const void *a21)
{
  void *v21;

  operator delete(v21);
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a21);
  _Unwind_Resume(a1);
}

void sub_1BF355788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void StatsModule::getAllStats_sync(StatsModule *this@<X0>, CFMutableDictionaryRef *a2@<X8>)
{
  uint64_t v4;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  StatsModule *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  const __CFAllocator *v22;
  unint64_t *v23;
  unint64_t v24;
  const void *v25;
  uint64_t v26;
  char v27;
  __CFDictionary *v28;
  const void *v29;
  StatsModule *v30;
  StatsModule *v31;
  BOOL v32;
  CFTypeID v33;
  uint64_t v34;
  void *__p[2];
  char v36;
  const void *v37;
  __CFDictionary *v38;
  const void *v39;
  const void *v40;

  v38 = 0;
  v4 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v6 = Mutable;
  if (Mutable)
    v38 = Mutable;
  v7 = (StatsModule *)*((_QWORD *)this + 22);
  if (v7 != (StatsModule *)((char *)this + 184))
  {
    v34 = *MEMORY[0x1E0C9B260];
    while (1)
    {
      v37 = 0;
      pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
      v8 = off_1ED70FDE8;
      if (off_1ED70FDE8)
      {
        v9 = (std::__shared_weak_count *)*(&off_1ED70FDE8 + 1);
        if (*(&off_1ED70FDE8 + 1))
          goto LABEL_20;
        goto LABEL_22;
      }
      v10 = operator new(0x30uLL);
      MEMORY[0x1C3B893B4](v10, CFSTR("com.apple.AppleBasebandManager.data"), v34);
      v10[3] = 0;
      v10[4] = 0;
      *((_DWORD *)v10 + 10) = 0;
      std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(__p, (uint64_t)v10);
      v11 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v12 = (std::__shared_weak_count *)*(&off_1ED70FDE8 + 1);
      off_1ED70FDE8 = v11;
      if (!v12)
        goto LABEL_13;
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
        v15 = (std::__shared_weak_count *)__p[1];
        if (!__p[1])
          goto LABEL_19;
      }
      else
      {
LABEL_13:
        v15 = (std::__shared_weak_count *)__p[1];
        if (!__p[1])
          goto LABEL_19;
      }
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
LABEL_19:
      v8 = off_1ED70FDE8;
      v9 = (std::__shared_weak_count *)*(&off_1ED70FDE8 + 1);
      if (*(&off_1ED70FDE8 + 1))
      {
LABEL_20:
        v18 = (unint64_t *)&v9->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
LABEL_22:
      pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
      if (*((_DWORD *)v7 + 8))
      {
        qmemcpy(__p, "UNKNOWN", 7);
        v20 = 7;
        v21 = 7;
      }
      else
      {
        qmemcpy(__p, "Boot Statistics", 15);
        v20 = 15;
        v21 = 15;
      }
      *((_BYTE *)__p + v20) = 0;
      v36 = v21;
      os_unfair_lock_lock((os_unfair_lock_t)(v8 + 40));
      Preferences::getPreference<__CFDictionary const*>((uint64_t (***)(_QWORD, uint64_t))v8, (const char *)__p, &v37);
      os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 40));
      if (v36 < 0)
      {
        operator delete(__p[0]);
        if (!v9)
          goto LABEL_32;
      }
      else if (!v9)
      {
        goto LABEL_32;
      }
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
      {
LABEL_32:
        v25 = v37;
        if (!v37)
          goto LABEL_43;
        goto LABEL_33;
      }
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      v25 = v37;
      if (!v37)
        goto LABEL_43;
LABEL_33:
      if (*((_DWORD *)v7 + 8))
      {
        qmemcpy(__p, "UNKNOWN", 7);
        v26 = 7;
        v27 = 7;
      }
      else
      {
        qmemcpy(__p, "Boot Statistics", 15);
        v26 = 15;
        v27 = 15;
      }
      *((_BYTE *)__p + v26) = 0;
      v36 = v27;
      v28 = v38;
      v40 = 0;
      ctu::cf::convert_copy((ctu::cf *)&v40, (const __CFString **)__p, (const char *)0x8000100, v4, v22);
      v29 = v40;
      v39 = v40;
      v40 = v25;
      CFRetain(v25);
      if (v29)
        CFDictionaryAddValue(v28, v29, v25);
      CFRelease(v25);
      if (v29)
        CFRelease(v29);
      if ((v36 & 0x80000000) == 0)
      {
LABEL_43:
        v30 = (StatsModule *)*((_QWORD *)v7 + 1);
        if (!v30)
          goto LABEL_47;
        goto LABEL_44;
      }
      operator delete(__p[0]);
      v30 = (StatsModule *)*((_QWORD *)v7 + 1);
      if (!v30)
      {
        do
        {
LABEL_47:
          v31 = (StatsModule *)*((_QWORD *)v7 + 2);
          v32 = *(_QWORD *)v31 == (_QWORD)v7;
          v7 = v31;
        }
        while (!v32);
        goto LABEL_5;
      }
      do
      {
LABEL_44:
        v31 = v30;
        v30 = *(StatsModule **)v30;
      }
      while (v30);
LABEL_5:
      v7 = v31;
      if (v31 == (StatsModule *)((char *)this + 184))
      {
        v6 = v38;
        break;
      }
    }
  }
  if (v6 && (v33 = CFGetTypeID(v6), v33 == CFDictionaryGetTypeID()))
  {
    *a2 = v6;
    CFRetain(v6);
  }
  else
  {
    *a2 = 0;
    if (!v6)
      return;
  }
  CFRelease(v6);
}

void sub_1BF355B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, const void *a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a19);
  _Unwind_Resume(a1);
}

const void **ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void StatsModule::addStatsToModule_sync(uint64_t a1, int a2)
{
  void *v4;
  std::__shared_weak_count *v5;
  int v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  int v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  NSObject *v14;
  uint64_t v15;
  char v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *__p[2];
  char v26;
  void *v27;
  std::__shared_weak_count *v28;
  uint8_t buf[4];
  void **v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v27 = 0;
  v28 = 0;
  Stats::create(a2, __p);
  v4 = __p[0];
  v5 = (std::__shared_weak_count *)__p[1];
  v27 = __p[0];
  v28 = (std::__shared_weak_count *)__p[1];
  if (__p[0])
  {
    v6 = *((_DWORD *)__p[0] + 26);
    v8 = (uint64_t **)(a1 + 184);
    v7 = *(uint64_t **)(a1 + 184);
    if (v7)
    {
      while (1)
      {
        while (1)
        {
          v9 = (uint64_t **)v7;
          v10 = *((_DWORD *)v7 + 8);
          if (v6 >= v10)
            break;
          v7 = *v9;
          v8 = v9;
          if (!*v9)
            goto LABEL_9;
        }
        if (v10 >= v6)
          break;
        v7 = v9[1];
        if (!v7)
        {
          v8 = v9 + 1;
          goto LABEL_9;
        }
      }
      v11 = v9;
      if (!__p[1])
        goto LABEL_19;
    }
    else
    {
      v9 = (uint64_t **)(a1 + 184);
LABEL_9:
      v11 = operator new(0x38uLL);
      *((_DWORD *)v11 + 8) = v6;
      *((_QWORD *)v11 + 5) = 0;
      *((_QWORD *)v11 + 6) = 0;
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = v9;
      *v8 = (uint64_t *)v11;
      v12 = **(_QWORD **)(a1 + 176);
      v13 = (uint64_t *)v11;
      if (v12)
      {
        *(_QWORD *)(a1 + 176) = v12;
        v13 = *v8;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 184), v13);
      ++*(_QWORD *)(a1 + 192);
      v4 = v27;
      v5 = v28;
      if (!v28)
        goto LABEL_19;
    }
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
LABEL_19:
    v19 = (std::__shared_weak_count *)*((_QWORD *)v11 + 6);
    *((_QWORD *)v11 + 5) = v4;
    *((_QWORD *)v11 + 6) = v5;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    goto LABEL_24;
  }
  v14 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    if (a2)
    {
      qmemcpy(__p, "UNKNOWN", 7);
      v15 = 7;
      v16 = 7;
    }
    else
    {
      qmemcpy(__p, "Boot Statistics", 15);
      v15 = 15;
      v16 = 15;
    }
    *((_BYTE *)__p + v15) = 0;
    v26 = v16;
    *(_DWORD *)buf = 136315138;
    v30 = __p;
    _os_log_error_impl(&dword_1BF335000, v14, OS_LOG_TYPE_ERROR, "Failed to create stats of %s", buf, 0xCu);
    if (v26 < 0)
      operator delete(__p[0]);
  }
LABEL_24:
  v22 = v28;
  if (v28)
  {
    v23 = (unint64_t *)&v28->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1BF355EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF355EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void StatsModule::updateAnalyticsData_sync(uint64_t a1, void **a2)
{
  uint64_t v2;
  void *v3;
  NSObject *v4;
  xpc_object_t object;
  uint8_t buf[16];

  v2 = *(_QWORD *)(a1 + 216);
  if (v2)
  {
    v3 = *a2;
    object = v3;
    if (v3 && MEMORY[0x1C3B8A86C](v3) == MEMORY[0x1E0C812F8])
      xpc_retain(v3);
    else
      object = xpc_null_create();
    AnalyticsHelper::updateData(v2, &object);
    xpc_release(object);
  }
  else
  {
    v4 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF335000, v4, OS_LOG_TYPE_ERROR, "Analytics object has not created yet", buf, 2u);
    }
  }
}

void sub_1BF355FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void StatsModule::reportAWD_sync(uint64_t a1, int a2, xpc_object_t *a3)
{
  StatsAWD *v4;
  xpc_object_t v5;
  NSObject *v6;
  object v7;
  xpc_object_t v8;
  uint8_t buf[4];
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = *(StatsAWD **)(a1 + 200);
  if (v4)
  {
    v5 = *a3;
    v8 = v5;
    if (v5)
    {
      xpc_retain(v5);
    }
    else
    {
      v5 = xpc_null_create();
      v8 = v5;
    }
    v7.fObj = (dispatch_object_s *)&v8;
    StatsAWD::submit(v4, a2, v7);
    xpc_release(v5);
  }
  else
  {
    v6 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v10 = a2;
      _os_log_error_impl(&dword_1BF335000, v6, OS_LOG_TYPE_ERROR, "AWD object has not created yet. 0x%x metric ID cannot be submitted", buf, 8u);
    }
  }
}

void sub_1BF3560A8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E78FC558;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E78FC558;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::Loggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF356304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF356320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<StatsModule>::shared_ptr[abi:ne180100]<StatsModule,std::shared_ptr<StatsModule> ctu::SharedSynchronizable<StatsModule>::make_shared_ptr<StatsModule>(StatsModule*)::{lambda(StatsModule*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E78FC598;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF35643C(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<StatsModule> ctu::SharedSynchronizable<StatsModule>::make_shared_ptr<StatsModule>(StatsModule*)::{lambda(StatsModule*)#1}::operator() const(StatsModule*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF35645C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<StatsModule *,std::shared_ptr<StatsModule> ctu::SharedSynchronizable<StatsModule>::make_shared_ptr<StatsModule>(StatsModule*)::{lambda(StatsModule *)#1},std::allocator<StatsModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<StatsModule *,std::shared_ptr<StatsModule> ctu::SharedSynchronizable<StatsModule>::make_shared_ptr<StatsModule>(StatsModule*)::{lambda(StatsModule *)#1},std::allocator<StatsModule>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<StatsModule> ctu::SharedSynchronizable<StatsModule>::make_shared_ptr<StatsModule>(StatsModule*)::{lambda(StatsModule*)#1}::operator() const(StatsModule*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<StatsModule *,std::shared_ptr<StatsModule> ctu::SharedSynchronizable<StatsModule>::make_shared_ptr<StatsModule>(StatsModule*)::{lambda(StatsModule *)#1},std::allocator<StatsModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI11StatsModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI11StatsModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI11StatsModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI11StatsModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<StatsModule> ctu::SharedSynchronizable<StatsModule>::make_shared_ptr<StatsModule>(StatsModule*)::{lambda(StatsModule*)#1}::operator() const(StatsModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *ctu::SharedLoggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E78FC558;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E78FC558;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void std::__tree<std::__value_type<abm::stats::StatsID,std::shared_ptr<Stats>>,std::__map_value_compare<abm::stats::StatsID,std::__value_type<abm::stats::StatsID,std::shared_ptr<Stats>>,std::less<abm::stats::StatsID>,true>,std::allocator<std::__value_type<abm::stats::StatsID,std::shared_ptr<Stats>>>>::destroy(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    std::__tree<std::__value_type<abm::stats::StatsID,std::shared_ptr<Stats>>,std::__map_value_compare<abm::stats::StatsID,std::__value_type<abm::stats::StatsID,std::shared_ptr<Stats>>,std::less<abm::stats::StatsID>,true>,std::allocator<std::__value_type<abm::stats::StatsID,std::shared_ptr<Stats>>>>::destroy(*a1);
    std::__tree<std::__value_type<abm::stats::StatsID,std::shared_ptr<Stats>>,std::__map_value_compare<abm::stats::StatsID,std::__value_type<abm::stats::StatsID,std::shared_ptr<Stats>>,std::less<abm::stats::StatsID>,true>,std::allocator<std::__value_type<abm::stats::StatsID,std::shared_ptr<Stats>>>>::destroy(a1[1]);
    v2 = (std::__shared_weak_count *)a1[6];
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      operator delete(a1);
    }
    else
    {
LABEL_6:
      operator delete(a1);
    }
  }
}

void ctu::SharedSynchronizable<StatsModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI11StatsModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E78FC640;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI11StatsModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrIK11StatsModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrIK11StatsModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11StatsModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  xpc_object_t value;
  xpc_object_t v6;
  NSObject *v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  xpc_object_t v12;
  const char *v13;
  int v14;
  size_t v15;
  void **v16;
  void **v17;
  void **v18;
  uint64_t v19;
  xpc_object_t v20;
  uint64_t v21;
  xpc_object_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  int v29;
  xpc_object_t v30;
  int v31;
  xpc_object_t v32;
  uint64_t v33;
  xpc_object_t object;
  void *__p[4];

  v2 = *a1;
  v33 = v2;
  v3 = *(_QWORD *)v2;
  v4 = (const char *)*MEMORY[0x1E0CFB020];
  if (xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFB020]))
  {
    value = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFB018]);
    v6 = value;
    if (value)
      xpc_retain(value);
    else
      v6 = xpc_null_create();
    v9 = MEMORY[0x1C3B8A86C](v6);
    v10 = MEMORY[0x1E0C812F8];
    if (v9 != MEMORY[0x1E0C812F8] && MEMORY[0x1C3B8A86C](v6) != MEMORY[0x1E0C812C8])
    {
      v11 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_error_impl(&dword_1BF335000, v11, OS_LOG_TYPE_ERROR, "Data type should be dictionary/array", (uint8_t *)__p, 2u);
      }
      v8 = 0;
      goto LABEL_36;
    }
    memset(__p, 170, 24);
    v12 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), v4);
    object = v12;
    if (v12)
      xpc_retain(v12);
    else
      object = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v13);
    xpc_release(object);
    v14 = SHIBYTE(__p[2]);
    if (SHIBYTE(__p[2]) >= 0)
      v15 = HIBYTE(__p[2]);
    else
      v15 = (size_t)__p[1];
    if (v15 != strlen((const char *)*MEMORY[0x1E0CFC240])
      || (SHIBYTE(__p[2]) >= 0 ? (v16 = __p) : (v16 = (void **)__p[0]),
          memcmp(v16, (const void *)*MEMORY[0x1E0CFC240], v15)))
    {
      if (v15 == strlen((const char *)*MEMORY[0x1E0CFC190])
        && (v14 >= 0 ? (v17 = __p) : (v17 = (void **)__p[0]), !memcmp(v17, (const void *)*MEMORY[0x1E0CFC190], v15)))
      {
        v27 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFB0E8]);
        object = v27;
        if (v27)
          xpc_retain(v27);
        else
          object = xpc_null_create();
        v31 = xpc::dyn_cast_or_default((xpc *)&object, 0);
        xpc_release(object);
        object = v6;
        if (v6)
        {
          xpc_retain(v6);
          v32 = v6;
        }
        else
        {
          v32 = xpc_null_create();
          object = v32;
        }
        StatsModule::reportAWD_sync(v3, v31, &object);
        xpc_release(v32);
      }
      else
      {
        if (v15 != strlen((const char *)*MEMORY[0x1E0CFAFE8])
          || (v14 >= 0 ? (v18 = __p) : (v18 = (void **)__p[0]), memcmp(v18, (const void *)*MEMORY[0x1E0CFAFE8], v15)))
        {
          v8 = 0;
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
          {
LABEL_36:
            xpc_release(v6);
            goto LABEL_37;
          }
LABEL_35:
          operator delete(__p[0]);
          goto LABEL_36;
        }
        object = v6;
        if (v6)
        {
          xpc_retain(v6);
          v28 = v6;
        }
        else
        {
          v28 = xpc_null_create();
          object = v28;
        }
        StatsModule::updateAnalyticsData_sync(v3, &object);
        xpc_release(v28);
      }
      object = 0;
      v8 = 1;
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        goto LABEL_36;
      goto LABEL_35;
    }
    v26 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFB0E8]);
    object = v26;
    if (v26)
      xpc_retain(v26);
    else
      object = xpc_null_create();
    v29 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
    object = v6;
    if (v6 && MEMORY[0x1C3B8A86C](v6) == v10)
    {
      xpc_retain(v6);
      v30 = v6;
    }
    else
    {
      v30 = xpc_null_create();
      object = v30;
    }
    v8 = StatsModule::reportStats_sync(v3, v29, &object);
    xpc_release(v30);
    object = 0;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_35;
  }
  v7 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__p[0]) = 0;
    _os_log_error_impl(&dword_1BF335000, v7, OS_LOG_TYPE_ERROR, "Stats type is missing!", (uint8_t *)__p, 2u);
  }
  v8 = 0;
LABEL_37:
  if (*(_QWORD *)(v2 + 32))
  {
    if (v8)
      v19 = 0;
    else
      v19 = 3760250880;
    v20 = xpc_null_create();
    v21 = *(_QWORD *)(v2 + 32);
    __p[0] = v20;
    v22 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, void **))(v21 + 16))(v21, v19, __p);
    xpc_release(__p[0]);
    xpc_release(v22);
  }
  _ZNSt3__110unique_ptrIZZZN11StatsModule10initializeEN8dispatch13group_sessionEEUb_EUb0_E3__0NS_14default_deleteIS4_EEED1B8ne180100Ev(&v33);
  v23 = (std::__shared_weak_count *)a1[2];
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  operator delete(a1);
}

void sub_1BF356C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _QWORD *v16;
  void *v17;
  void *v18;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  xpc_release(v18);
  object = 0;
  if (a16 < 0)
    operator delete(__p);
  xpc_release(v17);
  _ZNSt3__110unique_ptrIZZZN11StatsModule10initializeEN8dispatch13group_sessionEEUb_EUb0_E3__0NS_14default_deleteIS4_EEED1B8ne180100Ev(&a9);
  v20 = (std::__shared_weak_count *)v16[2];
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t *_ZNSt3__110unique_ptrIZZZN11StatsModule10initializeEN8dispatch13group_sessionEEUb_EUb0_E3__0NS_14default_deleteIS4_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2;
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(const void **)(v2 + 32);
    if (v3)
      _Block_release(v3);
    xpc_release(*(xpc_object_t *)(v2 + 24));
    *(_QWORD *)(v2 + 24) = 0;
    v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

_QWORD *std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E78FC680;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (a2)
  {
    v6 = *(std::__shared_weak_count **)(a2 + 32);
    if (v6)
    {
      if (v6->__shared_owners_ != -1)
        return a1;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
      *(_QWORD *)(a2 + 24) = a2;
      *(_QWORD *)(a2 + 32) = v4;
      std::__shared_weak_count::__release_weak(v6);
    }
    else
    {
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      *(_QWORD *)(a2 + 24) = a2;
      *(_QWORD *)(a2 + 32) = v4;
    }
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_1BF356FAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<SharedData>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<SharedData>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  void *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 32);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    v4 = (void *)MEMORY[0x1C3B893C0](v2);
    operator delete(v4);
  }
  return a1;
}

void std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  void *v3;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v2 = *(std::__shared_weak_count **)(v1 + 32);
    if (v2)
      std::__shared_weak_count::__release_weak(v2);
    v3 = (void *)MEMORY[0x1C3B893C0](v1);
    operator delete(v3);
  }
}

uint64_t std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF53C832)
    return a1 + 24;
  if (((v3 & 0x80000001BF53C832 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF53C832))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF53C832 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

BOOL Preferences::getPreference<__CFDictionary const*>(uint64_t (***a1)(_QWORD, uint64_t), const char *a2, _QWORD *a3)
{
  const void *v5;
  const void *v6;
  CFTypeID v7;
  BOOL v8;
  _BOOL8 v9;
  uint64_t v11;

  if (a2[23] < 0)
    a2 = *(const char **)a2;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v11, a2);
  v5 = (const void *)(**a1)(a1, v11);
  v6 = v5;
  if (v5)
  {
    v7 = CFGetTypeID(v5);
    v8 = v7 == CFDictionaryGetTypeID();
    v9 = v8;
    if (v8)
      *a3 = v6;
    CFRelease(v6);
  }
  else
  {
    v9 = 0;
  }
  MEMORY[0x1C3B8936C](&v11);
  return v9;
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11StatsModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t *a1)
{
  uint64_t v2;
  StatsModule *v3;
  const char *v4;
  xpc_object_t value;
  const void *v6;
  xpc_object_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  NSObject *v28;
  xpc_object_t v29;
  uint64_t v30;
  xpc_object_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  xpc_object_t object[2];
  char v37;
  CFTypeRef cf;

  v2 = *a1;
  v35 = v2;
  v3 = *(StatsModule **)v2;
  v4 = (const char *)*MEMORY[0x1E0CFB0E8];
  if (!xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFB0E8]))
  {
    StatsModule::getAllStats_sync(v3, (CFMutableDictionaryRef *)object);
    v7 = object[0];
    goto LABEL_32;
  }
  value = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), v4);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  v8 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  cf = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v9 = off_1ED70FDE8;
  if (!off_1ED70FDE8)
  {
    v10 = operator new(0x30uLL);
    MEMORY[0x1C3B893B4](v10, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x1E0C9B260]);
    v10[3] = 0;
    v10[4] = 0;
    *((_DWORD *)v10 + 10) = 0;
    std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(object, (uint64_t)v10);
    v11 = *(_OWORD *)object;
    object[0] = 0;
    object[1] = 0;
    v12 = (std::__shared_weak_count *)*(&off_1ED70FDE8 + 1);
    off_1ED70FDE8 = v11;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (std::__shared_weak_count *)object[1];
    if (object[1])
    {
      v16 = (unint64_t *)((char *)object[1] + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v9 = off_1ED70FDE8;
  }
  v18 = (std::__shared_weak_count *)*(&off_1ED70FDE8 + 1);
  if (*(&off_1ED70FDE8 + 1))
  {
    v19 = (unint64_t *)(*(&off_1ED70FDE8 + 1) + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  if (v8)
  {
    qmemcpy(object, "UNKNOWN", 7);
    v21 = 7;
    v22 = 7;
  }
  else
  {
    qmemcpy(object, "Boot Statistics", 15);
    v21 = 15;
    v22 = 15;
  }
  *((_BYTE *)object + v21) = 0;
  v37 = v22;
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 40));
  Preferences::getPreference<__CFDictionary const*>((uint64_t (***)(_QWORD, uint64_t))v9, (const char *)object, &cf);
  os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 40));
  if (v37 < 0)
    operator delete(object[0]);
  if (!v18)
    goto LABEL_30;
  v23 = (unint64_t *)&v18->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (v24)
  {
LABEL_30:
    v7 = (xpc_object_t)cf;
    if (!cf)
      goto LABEL_32;
    goto LABEL_31;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  v7 = (xpc_object_t)cf;
  if (cf)
LABEL_31:
    CFRetain(v7);
LABEL_32:
  v26 = *(_QWORD *)(v2 + 32);
  v25 = (uint64_t *)(v2 + 32);
  if (v26)
  {
    v27 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    if (!v7)
      v27 = 0;
    if (v27)
    {
      LODWORD(cf) = 0;
      ctu::cf_to_xpc((ctu *)v7, v6);
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::object>(v25, (unsigned int *)&cf, object);
      xpc_release(object[0]);
    }
    else
    {
      v28 = *((_QWORD *)v3 + 11);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        LOWORD(object[0]) = 0;
        _os_log_error_impl(&dword_1BF335000, v28, OS_LOG_TYPE_ERROR, "Failed to get data.", (uint8_t *)object, 2u);
      }
      v29 = xpc_null_create();
      v30 = *v25;
      object[0] = v29;
      v31 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v30 + 16))(v30, 3760250880, object);
      xpc_release(object[0]);
      xpc_release(v31);
    }
  }
  if (v7)
    CFRelease(v7);
  _ZNSt3__110unique_ptrIZZZN11StatsModule10initializeEN8dispatch13group_sessionEEUb_EUb1_E3__1NS_14default_deleteIS4_EEED1B8ne180100Ev(&v35);
  v32 = (std::__shared_weak_count *)a1[2];
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  operator delete(a1);
}

void sub_1BF3575E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  _QWORD *v11;
  void *v12;
  const void *v13;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  xpc_release(object);
  xpc_release(v12);
  if (v13)
    CFRelease(v13);
  _ZNSt3__110unique_ptrIZZZN11StatsModule10initializeEN8dispatch13group_sessionEEUb_EUb1_E3__1NS_14default_deleteIS4_EEED1B8ne180100Ev(&a10);
  v15 = (std::__shared_weak_count *)v11[2];
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator delete(v11);
  _Unwind_Resume(a1);
}

uint64_t *_ZNSt3__110unique_ptrIZZZN11StatsModule10initializeEN8dispatch13group_sessionEEUb_EUb1_E3__1NS_14default_deleteIS4_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2;
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(const void **)(v2 + 32);
    if (v3)
      _Block_release(v3);
    xpc_release(*(xpc_object_t *)(v2 + 24));
    *(_QWORD *)(v2 + 24) = 0;
    v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::object>(uint64_t *a1, unsigned int *a2, void **a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  xpc_object_t object;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  object = v5;
  if (v5 && MEMORY[0x1C3B8A86C](v5) == MEMORY[0x1E0C812F8])
    xpc_retain(v5);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v3 + 16))(v3, v4, &object);
  xpc_release(object);
}

void sub_1BF357818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

uint64_t __cxx_global_var_init_0()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1BF335000);
  }
  return result;
}

BOOL defaults::get(char *a1, char *a2, std::string *a3)
{
  const char *v6;
  NSObject *v7;
  char *v9;
  uint64_t *v10;
  int v11;
  const char *v12;
  __int16 v13;
  char *v14;
  __int16 v15;
  uint64_t *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB088])
      && strcasecmp(a1, (const char *)*MEMORY[0x1E0CFC200])
      && strcasecmp(a1, (const char *)*MEMORY[0x1E0D01AA8])
      && strcasecmp(a1, (const char *)*MEMORY[0x1E0D01A80]))
    {
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB090]))
      {
        if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFC248]) && strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB118]))
        {
          if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB240]))
          {
            if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB248]))
            {
              if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB198]))
              {
                if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFAFC0]))
                {
                  if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB190]))
                  {
                    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB048]))
                    {
                      v6 = a1;
                      if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB0A0]))
                        goto LABEL_16;
                      return defaults::tailspin::get(a2, (uint64_t)a3);
                    }
                    return defaults::profile::get(a2, (uint64_t)a3);
                  }
                  return defaults::systemlogs::get(a2, (uint64_t)a3);
                }
                return defaults::logfilter::get(a2, (uint64_t)a3);
              }
              return defaults::ttr::get(a2, (uint64_t)a3);
            }
            return defaults::compression::get(a2, (uint64_t)a3);
          }
          return defaults::bbipc::get(a2, (uint64_t)a3);
        }
        return defaults::ipc::get(a2, (uint64_t)a3);
      }
      return defaults::coredump::get(a2, (uint64_t)a3);
    }
    return defaults::bbtrace::get(a2, (std::string::size_type *)a3);
  }
  v6 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB088])
    || !strcasecmp(v6, (const char *)*MEMORY[0x1E0CFC200])
    || !strcasecmp(v6, (const char *)*MEMORY[0x1E0D01AA8])
    || !strcasecmp(v6, (const char *)*MEMORY[0x1E0D01A80]))
  {
    return defaults::bbtrace::get(a2, (std::string::size_type *)a3);
  }
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB090]))
    return defaults::coredump::get(a2, (uint64_t)a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFC248]) || !strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB118]))
    return defaults::ipc::get(a2, (uint64_t)a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB240]))
    return defaults::bbipc::get(a2, (uint64_t)a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB248]))
    return defaults::compression::get(a2, (uint64_t)a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB198]))
    return defaults::ttr::get(a2, (uint64_t)a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFAFC0]))
    return defaults::logfilter::get(a2, (uint64_t)a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB190]))
    return defaults::systemlogs::get(a2, (uint64_t)a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB048]))
    return defaults::profile::get(a2, (uint64_t)a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB0A0]))
    return defaults::tailspin::get(a2, (uint64_t)a3);
LABEL_16:
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB098]))
    return defaults::tracesettings::get(a2, a3);
  v7 = GetOsLogContext()[1];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    if (a1[23] >= 0)
      v9 = a1;
    else
      v9 = *(char **)a1;
    if (a2[23] >= 0)
      v10 = (uint64_t *)a2;
    else
      v10 = *(uint64_t **)a2;
    v11 = 136315650;
    v12 = "prop.default";
    v13 = 2080;
    v14 = v9;
    v15 = 2080;
    v16 = v10;
    _os_log_error_impl(&dword_1BF335000, v7, OS_LOG_TYPE_ERROR, "%s: Invalid domain; domain='%s' key='%s'",
      (uint8_t *)&v11,
      0x20u);
  }
  return 0;
}

BOOL defaults::bbtrace::get(char *a1, std::string::size_type *a2)
{
  int v4;
  capabilities::trace *v5;
  capabilities::trace *v6;
  capabilities::trace *v7;
  capabilities::trace *v8;
  const char *v9;
  capabilities::radio *v10;
  const char *v11;
  const char *v12;
  capabilities::radio *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  std::string::size_type v18;
  char v19;
  std::string::size_type v20;
  _BOOL8 result;
  uint64_t v22;
  const char *v23;
  capabilities::radio *v24;
  const char *v25;
  capabilities::radio *v26;
  const char *v27;
  capabilities::radio *v28;
  const char *v29;
  capabilities::radio *v30;
  uint64_t v31;
  capabilities::radio *v32;
  const char *v33;
  capabilities::radio *v34;
  const std::string::value_type *v35;
  const char *v36;
  capabilities::radio *v37;
  capabilities::trace *v38;
  capabilities::trace *v39;
  capabilities::radio *v40;
  defaults::bbtrace *v41;
  const char *v42;
  NSObject *v43;
  std::string::size_type v44;
  char *v45;
  unsigned int count;
  unsigned int v47;
  unsigned int v48;
  capabilities::abs *v49;
  unsigned int v50;
  std::string v51;
  char *v52;
  _QWORD v53[3];

  v53[2] = *MEMORY[0x1E0C80C00];
  v4 = a1[23];
  if ((v4 & 0x80000000) == 0)
  {
    v5 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB170]);
    if ((_DWORD)v5)
    {
      v6 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB230]);
      if ((_DWORD)v6)
      {
        v7 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB460]);
        if ((_DWORD)v7)
        {
          if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB028]))
          {
            if (!strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB338]))
              goto LABEL_114;
            if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB2D8]))
            {
              v8 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB178]);
              v9 = a1;
              if ((_DWORD)v8)
                goto LABEL_9;
              goto LABEL_23;
            }
          }
LABEL_27:
          *(_QWORD *)((char *)v53 + 7) = 0;
          v53[0] = 0;
          std::to_string(&v51, 0);
          goto LABEL_28;
        }
LABEL_26:
        v17 = capabilities::trace::supportsDataLoggingByDefault(v7);
        v53[0] = 0;
        *(_QWORD *)((char *)v53 + 7) = 0;
        std::to_string(&v51, v17);
        goto LABEL_28;
      }
LABEL_25:
      v16 = capabilities::trace::supportsHighTPutByDefault(v6);
      v53[0] = 0;
      *(_QWORD *)((char *)v53 + 7) = 0;
      std::to_string(&v51, v16);
      goto LABEL_28;
    }
LABEL_24:
    v15 = capabilities::trace::enabledByDefault(v5);
    v53[0] = 0;
    *(_QWORD *)((char *)v53 + 7) = 0;
    std::to_string(&v51, v15);
    goto LABEL_28;
  }
  v9 = *(const char **)a1;
  v5 = (capabilities::trace *)strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB170]);
  if (!(_DWORD)v5)
    goto LABEL_24;
  v6 = (capabilities::trace *)strcasecmp(v9, (const char *)*MEMORY[0x1E0CFB230]);
  if (!(_DWORD)v6)
    goto LABEL_25;
  v7 = (capabilities::trace *)strcasecmp(v9, (const char *)*MEMORY[0x1E0CFB460]);
  if (!(_DWORD)v7)
    goto LABEL_26;
  if (!strcasecmp(v9, (const char *)*MEMORY[0x1E0CFB028]))
    goto LABEL_27;
  if (!strcasecmp(v9, (const char *)*MEMORY[0x1E0CFB338]))
    goto LABEL_114;
  if (!strcasecmp(v9, (const char *)*MEMORY[0x1E0CFB2D8]))
    goto LABEL_27;
  v8 = (capabilities::trace *)strcasecmp(v9, (const char *)*MEMORY[0x1E0CFB178]);
  if (!(_DWORD)v8)
  {
LABEL_23:
    v14 = capabilities::trace::defaultHistorySizeMB(v8);
    v53[0] = 0;
    *(_QWORD *)((char *)v53 + 7) = 0;
    std::to_string(&v51, v14);
LABEL_28:
    v53[0] = v51.__r_.__value_.__l.__size_;
    v18 = v51.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v53 + 7) = *(std::string::size_type *)((char *)&v51.__r_.__value_.__r.__words[1] + 7);
    v19 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
    if (*((char *)a2 + 23) < 0)
      operator delete((void *)*a2);
    v20 = v53[0];
    *a2 = v18;
    a2[1] = v20;
    *(std::string::size_type *)((char *)a2 + 15) = *(_QWORD *)((char *)v53 + 7);
    *((_BYTE *)a2 + 23) = v19;
    return 1;
  }
LABEL_9:
  v10 = (capabilities::radio *)strcasecmp(v9, diag::config::kEnabledDuringSleepKey[0]);
  if (!(_DWORD)v10)
  {
    v22 = capabilities::radio::maverick(v10);
    if ((v22 & 1) != 0 || (capabilities::radio::ice((capabilities::radio *)v22) & 1) != 0)
    {
      util::to_str<diag::config::DuringAPSleep>(&v51);
LABEL_71:
      if (*((char *)a2 + 23) < 0)
        operator delete((void *)*a2);
      *(std::string *)a2 = v51;
      return 1;
    }
    LOBYTE(v4) = a1[23];
  }
  v11 = *(const char **)a1;
  if ((v4 & 0x80u) == 0)
    v12 = a1;
  else
    v12 = *(const char **)a1;
  v13 = (capabilities::radio *)strcasecmp(v12, diag::config::kBufferingOnAPAwake[0]);
  if (!(_DWORD)v13)
  {
    if ((capabilities::radio::maverick(v13) & 1) != 0)
      goto LABEL_70;
    LOBYTE(v4) = a1[23];
    v11 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0)
    v23 = a1;
  else
    v23 = v11;
  v24 = (capabilities::radio *)strcasecmp(v23, diag::config::kStallDetectionKey[0]);
  if (!(_DWORD)v24)
  {
    if ((capabilities::radio::maverick(v24) & 1) != 0)
      goto LABEL_70;
    LOBYTE(v4) = a1[23];
    v11 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0)
    v25 = a1;
  else
    v25 = v11;
  v26 = (capabilities::radio *)strcasecmp(v25, diag::config::kStallDetectionRetriesKey[0]);
  if (!(_DWORD)v26)
  {
    if ((capabilities::radio::maverick(v26) & 1) != 0)
    {
      util::to_str<unsigned int>(&v51, 3u);
      goto LABEL_71;
    }
    LOBYTE(v4) = a1[23];
    v11 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0)
    v27 = a1;
  else
    v27 = v11;
  v28 = (capabilities::radio *)strcasecmp(v27, diag::config::kStallDetectionRecoveryKey[0]);
  if (!(_DWORD)v28)
  {
    if ((capabilities::radio::maverick(v28) & 1) != 0)
    {
      util::to_str<diag::config::Recovery>(&v51);
      goto LABEL_71;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80) == 0)
  {
    v29 = a1;
    if (strcasecmp(a1, diag::config::kKeepScratchLogsKey[0]))
      goto LABEL_60;
LABEL_70:
    util::to_str<BOOL>(&v51, 0);
    goto LABEL_71;
  }
  v29 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, diag::config::kKeepScratchLogsKey[0]))
    goto LABEL_70;
LABEL_60:
  v30 = (capabilities::radio *)strcasecmp(v29, (const char *)*MEMORY[0x1E0CFBB60]);
  if (!(_DWORD)v30)
  {
    v31 = capabilities::radio::maverick(v30);
    if ((v31 & 1) != 0)
      goto LABEL_76;
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80) == 0)
  {
    v32 = (capabilities::radio *)strcasecmp(a1, (const char *)*MEMORY[0x1E0CFBD20]);
    v33 = a1;
    if ((_DWORD)v32)
      goto LABEL_65;
LABEL_75:
    v31 = capabilities::radio::ice(v32);
    if (!(_DWORD)v31)
    {
      v35 = "None";
LABEL_80:
      std::string::__assign_external((std::string *)a2, v35);
      return 1;
    }
LABEL_76:
    if (config::hw::watch((config::hw *)v31))
      v35 = "Lite";
    else
      v35 = "Default";
    goto LABEL_80;
  }
  v33 = *(const char **)a1;
  v32 = (capabilities::radio *)strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFBD20]);
  if (!(_DWORD)v32)
    goto LABEL_75;
LABEL_65:
  v34 = (capabilities::radio *)strcasecmp(v33, diag::config::kExtraDMCFileKey[0]);
  if (!(_DWORD)v34)
  {
    if ((capabilities::radio::maverick(v34) & 1) != 0)
    {
      if (*((char *)a2 + 23) < 0)
      {
        a2[1] = 4;
        a2 = (std::string::size_type *)*a2;
      }
      else
      {
        *((_BYTE *)a2 + 23) = 4;
      }
      strcpy((char *)a2, "None");
      return 1;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80u) == 0)
    v36 = a1;
  else
    v36 = *(const char **)a1;
  v37 = (capabilities::radio *)strcasecmp(v36, (const char *)*MEMORY[0x1E0CFB940]);
  if (!(_DWORD)v37)
  {
    if ((capabilities::radio::maverick(v37) & 1) != 0)
    {
      if (*((char *)a2 + 23) < 0)
      {
        a2[1] = 5;
        a2 = (std::string::size_type *)*a2;
      }
      else
      {
        *((_BYTE *)a2 + 23) = 5;
      }
      strcpy((char *)a2, "Sleep");
      return 1;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB378]))
    {
      v38 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x1E0CFBC00]);
      if ((_DWORD)v38)
      {
        if (!strcasecmp(a1, (const char *)*MEMORY[0x1E0CFC0A0]))
          goto LABEL_70;
        if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFC058]) && strcasecmp(a1, (const char *)*MEMORY[0x1E0CFC060]))
        {
          v39 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB228]);
          if ((_DWORD)v39)
          {
            v40 = (capabilities::radio *)strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB7D8]);
            if ((_DWORD)v40)
            {
              v41 = (defaults::bbtrace *)strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB950]);
              v42 = a1;
              if ((_DWORD)v41)
                goto LABEL_99;
LABEL_113:
              count = defaults::bbtrace::transport_read_count(v41);
              util::to_str<unsigned int>(&v51, count);
              goto LABEL_71;
            }
LABEL_129:
            v49 = (capabilities::abs *)capabilities::radio::vendor(v40);
            if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v49))
              v50 = 0x4000;
            else
              v50 = 0x8000;
            util::to_str<unsigned int>(&v51, v50);
            goto LABEL_71;
          }
LABEL_128:
          v48 = capabilities::trace::defaultFileSizeBytes(v39);
          util::to_str<unsigned int>(&v51, v48);
          goto LABEL_71;
        }
LABEL_114:
        if (*((char *)a2 + 23) < 0)
        {
          a2[1] = 0;
          a2 = (std::string::size_type *)*a2;
        }
        else
        {
          *((_BYTE *)a2 + 23) = 0;
        }
        *(_BYTE *)a2 = 0;
        return 1;
      }
LABEL_120:
      v47 = capabilities::trace::defaultMemoryFileMaxCount(v38);
      util::to_str<unsigned int>(&v51, v47);
      goto LABEL_71;
    }
LABEL_118:
    if (*((char *)a2 + 23) < 0)
    {
      a2[1] = 17;
      a2 = (std::string::size_type *)*a2;
    }
    else
    {
      *((_BYTE *)a2 + 23) = 17;
    }
    strcpy((char *)a2, "/usr/lib/bbmasks/");
    return 1;
  }
  v42 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB378]))
    goto LABEL_118;
  v38 = (capabilities::trace *)strcasecmp(v42, (const char *)*MEMORY[0x1E0CFBC00]);
  if (!(_DWORD)v38)
    goto LABEL_120;
  if (!strcasecmp(v42, (const char *)*MEMORY[0x1E0CFC0A0]))
    goto LABEL_70;
  if (!strcasecmp(v42, (const char *)*MEMORY[0x1E0CFC058]) || !strcasecmp(v42, (const char *)*MEMORY[0x1E0CFC060]))
    goto LABEL_114;
  v39 = (capabilities::trace *)strcasecmp(v42, (const char *)*MEMORY[0x1E0CFB228]);
  if (!(_DWORD)v39)
    goto LABEL_128;
  v40 = (capabilities::radio *)strcasecmp(v42, (const char *)*MEMORY[0x1E0CFB7D8]);
  if (!(_DWORD)v40)
    goto LABEL_129;
  v41 = (defaults::bbtrace *)strcasecmp(v42, (const char *)*MEMORY[0x1E0CFB950]);
  if (!(_DWORD)v41)
    goto LABEL_113;
LABEL_99:
  if (!strcasecmp(v42, (const char *)*MEMORY[0x1E0CFBD18]))
  {
    util::to_str<BOOL>(&v51, 1);
    goto LABEL_71;
  }
  v43 = GetOsLogContext()[1];
  result = os_log_type_enabled(v43, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v44 = *MEMORY[0x1E0CFC200];
    if (a1[23] >= 0)
      v45 = a1;
    else
      v45 = *(char **)a1;
    LODWORD(v51.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
    WORD2(v51.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v51.__r_.__value_.__r.__words[1] + 6) = v44;
    HIWORD(v51.__r_.__value_.__r.__words[2]) = 2080;
    v52 = v45;
    _os_log_error_impl(&dword_1BF335000, v43, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
      (uint8_t *)&v51,
      0x20u);
    return 0;
  }
  return result;
}

void sub_1BF358724(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x1BF35812CLL);
    JUMPOUT(0x1BF358134);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::coredump::get(const char *a1, uint64_t a2)
{
  uint64_t *v3;
  capabilities::trace *v4;
  int v5;
  unsigned __int8 v6;
  NSObject *v7;
  std::string::size_type v8;
  uint64_t *v9;
  int v10;
  std::string::size_type v11;
  char v12;
  uint64_t v13;
  std::string v15;
  uint64_t *v16;
  _QWORD v17[3];

  v3 = (uint64_t *)a1;
  v17[2] = *MEMORY[0x1E0C80C00];
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v4 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB170]);
  v5 = (int)v4;
  if ((_DWORD)v4)
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED7100E0 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v7 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
        return v5 == 0;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
      v7 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
        return v5 == 0;
    }
    v8 = *MEMORY[0x1E0CFB090];
    if (*((char *)v3 + 23) >= 0)
      v9 = v3;
    else
      v9 = (uint64_t *)*v3;
    LODWORD(v15.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v15.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
    WORD2(v15.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v15.__r_.__value_.__r.__words[1] + 6) = v8;
    HIWORD(v15.__r_.__value_.__r.__words[2]) = 2080;
    v16 = v9;
    _os_log_error_impl(&dword_1BF335000, v7, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
      (uint8_t *)&v15,
      0x20u);
  }
  else
  {
    v10 = capabilities::trace::allowed(v4);
    v17[0] = 0;
    *(_QWORD *)((char *)v17 + 7) = 0;
    std::to_string(&v15, v10);
    v17[0] = v15.__r_.__value_.__l.__size_;
    v11 = v15.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v17 + 7) = *(std::string::size_type *)((char *)&v15.__r_.__value_.__r.__words[1] + 7);
    v12 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v13 = v17[0];
    *(_QWORD *)a2 = v11;
    *(_QWORD *)(a2 + 8) = v13;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v17 + 7);
    *(_BYTE *)(a2 + 23) = v12;
  }
  return v5 == 0;
}

void sub_1BF358988(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x1BF3588C4);
    JUMPOUT(0x1BF3588CCLL);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::ipc::get(char *a1, uint64_t a2)
{
  capabilities::ipc *v4;
  capabilities::ipc *v5;
  const char *v6;
  capabilities::ipc *v7;
  int v8;
  capabilities::trace *v9;
  std::string::size_type v10;
  char v11;
  uint64_t v12;
  _BOOL8 result;
  unsigned __int8 v14;
  NSObject *v15;
  std::string::size_type v16;
  char *v17;
  std::string v18;
  char *v19;
  _QWORD v20[3];

  v20[2] = *MEMORY[0x1E0C80C00];
  if (a1[23] < 0)
  {
    v6 = *(const char **)a1;
    v4 = (capabilities::ipc *)strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB170]);
    if ((_DWORD)v4)
    {
      v5 = (capabilities::ipc *)strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB178]);
      if ((_DWORD)v5)
        goto LABEL_4;
LABEL_9:
      v8 = capabilities::ipc::defaultPCIBinaryTraceHistorySizeMB(v5);
      memset(v20, 0, 15);
      std::to_string(&v18, v8);
      goto LABEL_13;
    }
LABEL_10:
    v9 = (capabilities::trace *)capabilities::ipc::supportsPCI(v4);
    if ((_DWORD)v9)
      LODWORD(v9) = capabilities::trace::enabledByDefault(v9);
    memset(v20, 0, 15);
    std::to_string(&v18, (int)v9);
    goto LABEL_13;
  }
  v4 = (capabilities::ipc *)strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB170]);
  if (!(_DWORD)v4)
    goto LABEL_10;
  v5 = (capabilities::ipc *)strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB178]);
  v6 = a1;
  if (!(_DWORD)v5)
    goto LABEL_9;
LABEL_4:
  v7 = (capabilities::ipc *)strcasecmp(v6, "BufferCount");
  if (!(_DWORD)v7 && capabilities::ipc::supportsPCI(v7))
  {
    memset(v20, 0, 15);
    std::to_string(&v18, 4uLL);
LABEL_13:
    v20[0] = v18.__r_.__value_.__l.__size_;
    v10 = v18.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v20 + 7) = *(std::string::size_type *)((char *)&v18.__r_.__value_.__r.__words[1] + 7);
    v11 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v12 = v20[0];
    *(_QWORD *)a2 = v10;
    *(_QWORD *)(a2 + 8) = v12;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v20 + 7);
    *(_BYTE *)(a2 + 23) = v11;
    return 1;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED7100E0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v15 = qword_1ED7100E0;
    result = os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
    v15 = qword_1ED7100E0;
    result = os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  v16 = *MEMORY[0x1E0CFC248];
  if (a1[23] >= 0)
    v17 = a1;
  else
    v17 = *(char **)a1;
  LODWORD(v18.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)v18.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
  WORD2(v18.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v18.__r_.__value_.__r.__words[1] + 6) = v16;
  HIWORD(v18.__r_.__value_.__r.__words[2]) = 2080;
  v19 = v17;
  _os_log_error_impl(&dword_1BF335000, v15, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
    (uint8_t *)&v18,
    0x20u);
  return 0;
}

void sub_1BF358C5C(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x1BF358AC4);
    JUMPOUT(0x1BF358ACCLL);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::bbipc::get(char *a1, uint64_t a2)
{
  capabilities::trace *v4;
  capabilities::ipc *v5;
  const char *v6;
  capabilities::ipc *v7;
  unsigned __int8 v8;
  NSObject *v9;
  _BOOL8 result;
  std::string::size_type v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  std::string::size_type v16;
  char v17;
  uint64_t v18;
  std::string v19;
  char *v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  if ((a1[23] & 0x80000000) == 0)
  {
    v4 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB170]);
    if ((_DWORD)v4)
    {
      v5 = (capabilities::ipc *)strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB238]);
      v6 = a1;
      if ((_DWORD)v5)
        goto LABEL_4;
      goto LABEL_14;
    }
LABEL_15:
    v14 = capabilities::trace::enabledByDefault(v4);
    v21[0] = 0;
    *(_QWORD *)((char *)v21 + 7) = 0;
    std::to_string(&v19, v14);
    goto LABEL_17;
  }
  v6 = *(const char **)a1;
  v4 = (capabilities::trace *)strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB170]);
  if (!(_DWORD)v4)
    goto LABEL_15;
  v5 = (capabilities::ipc *)strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB238]);
  if (!(_DWORD)v5)
  {
LABEL_14:
    v13 = capabilities::ipc::defaultLogLevel(v5);
    v21[0] = 0;
    *(_QWORD *)((char *)v21 + 7) = 0;
    std::to_string(&v19, v13);
LABEL_17:
    v21[0] = v19.__r_.__value_.__l.__size_;
    v16 = v19.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v21 + 7) = *(std::string::size_type *)((char *)&v19.__r_.__value_.__r.__words[1] + 7);
    v17 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v18 = v21[0];
    *(_QWORD *)a2 = v16;
    *(_QWORD *)(a2 + 8) = v18;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v21 + 7);
    *(_BYTE *)(a2 + 23) = v17;
    return 1;
  }
LABEL_4:
  v7 = (capabilities::ipc *)strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB468]);
  if (!(_DWORD)v7)
  {
    v15 = capabilities::ipc::defaultMHIConfigPayloadSizeBytes(v7);
    v21[0] = 0;
    *(_QWORD *)((char *)v21 + 7) = 0;
    std::to_string(&v19, v15);
    goto LABEL_17;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED7100E0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v9 = qword_1ED7100E0;
    result = os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
    v9 = qword_1ED7100E0;
    result = os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  v11 = *MEMORY[0x1E0CFB240];
  if (a1[23] >= 0)
    v12 = a1;
  else
    v12 = *(char **)a1;
  LODWORD(v19.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)v19.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
  WORD2(v19.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v19.__r_.__value_.__r.__words[1] + 6) = v11;
  HIWORD(v19.__r_.__value_.__r.__words[2]) = 2080;
  v20 = v12;
  _os_log_error_impl(&dword_1BF335000, v9, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
    (uint8_t *)&v19,
    0x20u);
  return 0;
}

void sub_1BF358F18(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x1BF358E58);
    JUMPOUT(0x1BF358E60);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::compression::get(char *a1, uint64_t a2)
{
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  _BOOL8 result;
  std::string::size_type v8;
  char *v9;
  uint64_t IsInternalBuild;
  int CompressionMode;
  std::string v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if ((a1[23] & 0x80000000) == 0)
  {
    v4 = a1;
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CF11E8]))
      goto LABEL_3;
LABEL_12:
    IsInternalBuild = TelephonyUtilIsInternalBuild();
    if ((IsInternalBuild & 1) != 0 || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild))
      CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
    else
      CompressionMode = 2;
    std::to_string(&v12, CompressionMode);
    goto LABEL_18;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CF11E8]))
    goto LABEL_12;
LABEL_3:
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E0CF1070]))
  {
    std::to_string(&v12, 0);
LABEL_18:
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(std::string *)a2 = v12;
    return 1;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED7100E0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v6 = qword_1ED7100E0;
    result = os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
    v6 = qword_1ED7100E0;
    result = os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  v8 = *MEMORY[0x1E0CFB248];
  if (a1[23] >= 0)
    v9 = a1;
  else
    v9 = *(char **)a1;
  LODWORD(v12.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)v12.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
  WORD2(v12.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v12.__r_.__value_.__r.__words[1] + 6) = v8;
  HIWORD(v12.__r_.__value_.__r.__words[2]) = 2080;
  v13 = v9;
  _os_log_error_impl(&dword_1BF335000, v6, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
    (uint8_t *)&v12,
    0x20u);
  return 0;
}

BOOL defaults::ttr::get(char *a1, uint64_t a2)
{
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  _BOOL8 result;
  std::string::size_type v8;
  char *v9;
  int IsCarrierBuild;
  std::string::size_type v11;
  char v12;
  uint64_t v13;
  std::string v14;
  char *v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  if ((a1[23] & 0x80000000) == 0)
  {
    v4 = a1;
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB028]))
      goto LABEL_3;
LABEL_12:
    if ((TelephonyUtilIsInternalBuild() & 1) != 0)
      IsCarrierBuild = 1;
    else
      IsCarrierBuild = TelephonyUtilIsCarrierBuild();
    memset(v16, 0, 15);
    std::to_string(&v14, IsCarrierBuild);
    goto LABEL_17;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB028]))
    goto LABEL_12;
LABEL_3:
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E0CFBBF8]))
  {
    memset(v16, 0, 15);
    std::to_string(&v14, 43200);
LABEL_17:
    v16[0] = v14.__r_.__value_.__l.__size_;
    v11 = v14.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v16 + 7) = *(std::string::size_type *)((char *)&v14.__r_.__value_.__r.__words[1] + 7);
    v12 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v13 = v16[0];
    *(_QWORD *)a2 = v11;
    *(_QWORD *)(a2 + 8) = v13;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v16 + 7);
    *(_BYTE *)(a2 + 23) = v12;
    return 1;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED7100E0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v6 = qword_1ED7100E0;
    result = os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
    v6 = qword_1ED7100E0;
    result = os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  v8 = *MEMORY[0x1E0CFB198];
  if (a1[23] >= 0)
    v9 = a1;
  else
    v9 = *(char **)a1;
  LODWORD(v14.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)v14.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
  WORD2(v14.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v14.__r_.__value_.__r.__words[1] + 6) = v8;
  HIWORD(v14.__r_.__value_.__r.__words[2]) = 2080;
  v15 = v9;
  _os_log_error_impl(&dword_1BF335000, v6, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
    (uint8_t *)&v14,
    0x20u);
  return 0;
}

void sub_1BF3593C4(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x1BF359304);
    JUMPOUT(0x1BF35930CLL);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::logfilter::get(char *a1, uint64_t a2)
{
  const char *v4;
  capabilities::trace *v5;
  unsigned __int8 v6;
  NSObject *v7;
  _BOOL8 result;
  std::string::size_type v9;
  char *v10;
  int v11;
  std::string::size_type v12;
  char v13;
  uint64_t v14;
  std::string v15;
  char *v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB570]))
    {
      v4 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB7E8]))
        goto LABEL_4;
      goto LABEL_14;
    }
LABEL_15:
    memset(v17, 0, 15);
    std::to_string(&v15, 512);
    goto LABEL_17;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB570]))
    goto LABEL_15;
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E0CFB7E8]))
  {
LABEL_14:
    memset(v17, 0, 15);
    std::to_string(&v15, -1);
LABEL_17:
    v17[0] = v15.__r_.__value_.__l.__size_;
    v12 = v15.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v17 + 7) = *(std::string::size_type *)((char *)&v15.__r_.__value_.__r.__words[1] + 7);
    v13 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v14 = v17[0];
    *(_QWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = v14;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v17 + 7);
    *(_BYTE *)(a2 + 23) = v13;
    return 1;
  }
LABEL_4:
  v5 = (capabilities::trace *)strcasecmp(v4, (const char *)*MEMORY[0x1E0CFC0C0]);
  if (!(_DWORD)v5)
  {
    v11 = capabilities::trace::supportsDuplicateSignatureDetection(v5);
    memset(v17, 0, 15);
    std::to_string(&v15, v11);
    goto LABEL_17;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED7100E0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v7 = qword_1ED7100E0;
    result = os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
    v7 = qword_1ED7100E0;
    result = os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  v9 = *MEMORY[0x1E0CFAFC0];
  if (a1[23] >= 0)
    v10 = a1;
  else
    v10 = *(char **)a1;
  LODWORD(v15.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)v15.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
  WORD2(v15.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v15.__r_.__value_.__r.__words[1] + 6) = v9;
  HIWORD(v15.__r_.__value_.__r.__words[2]) = 2080;
  v16 = v10;
  _os_log_error_impl(&dword_1BF335000, v7, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
    (uint8_t *)&v15,
    0x20u);
  return 0;
}

void sub_1BF359670(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x1BF3595B0);
    JUMPOUT(0x1BF3595B8);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::systemlogs::get(char *a1, uint64_t a2)
{
  capabilities::abs *v4;
  const char *v5;
  unsigned __int8 v6;
  NSObject *v7;
  _BOOL8 result;
  std::string::size_type v9;
  char *v10;
  int v11;
  int IsCarrierBuild;
  std::string::size_type v13;
  char v14;
  uint64_t v15;
  std::string v16;
  char *v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB028]))
    {
      v4 = (capabilities::abs *)strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB178]);
      v5 = a1;
      if ((_DWORD)v4)
        goto LABEL_4;
LABEL_14:
      v11 = capabilities::abs::defaultSystemLogsHistory(v4);
      v18[0] = 0;
      *(_QWORD *)((char *)v18 + 7) = 0;
      std::to_string(&v16, v11);
LABEL_20:
      v18[0] = v16.__r_.__value_.__l.__size_;
      v13 = v16.__r_.__value_.__r.__words[0];
      *(_QWORD *)((char *)v18 + 7) = *(std::string::size_type *)((char *)&v16.__r_.__value_.__r.__words[1] + 7);
      v14 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      v15 = v18[0];
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v15;
      *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v18 + 7);
      *(_BYTE *)(a2 + 23) = v14;
      return 1;
    }
LABEL_15:
    if ((TelephonyUtilIsInternalBuild() & 1) != 0)
      IsCarrierBuild = 1;
    else
      IsCarrierBuild = TelephonyUtilIsCarrierBuild();
    *(_QWORD *)((char *)v18 + 7) = 0;
    v18[0] = 0;
    std::to_string(&v16, IsCarrierBuild);
    goto LABEL_20;
  }
  v5 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB028]))
    goto LABEL_15;
  v4 = (capabilities::abs *)strcasecmp(v5, (const char *)*MEMORY[0x1E0CFB178]);
  if (!(_DWORD)v4)
    goto LABEL_14;
LABEL_4:
  if (!strcasecmp(v5, (const char *)*MEMORY[0x1E0CFBA40]))
  {
    *(_QWORD *)((char *)v18 + 7) = 0;
    v18[0] = 0;
    std::to_string(&v16, 1);
    goto LABEL_20;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED7100E0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v7 = qword_1ED7100E0;
    result = os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
    v7 = qword_1ED7100E0;
    result = os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  v9 = *MEMORY[0x1E0CFB190];
  if (a1[23] >= 0)
    v10 = a1;
  else
    v10 = *(char **)a1;
  LODWORD(v16.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)v16.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
  WORD2(v16.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v16.__r_.__value_.__r.__words[1] + 6) = v9;
  HIWORD(v16.__r_.__value_.__r.__words[2]) = 2080;
  v17 = v10;
  _os_log_error_impl(&dword_1BF335000, v7, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
    (uint8_t *)&v16,
    0x20u);
  return 0;
}

void sub_1BF35993C(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x1BF35987CLL);
    JUMPOUT(0x1BF359884);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::profile::get(char *a1, uint64_t a2)
{
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  _BOOL8 result;
  std::string::size_type v8;
  char *v9;
  std::string::size_type v10;
  char v11;
  uint64_t v12;
  std::string v13;
  char *v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  if (a1[23] < 0)
  {
    v4 = *(const char **)a1;
    if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFAF68]))
      goto LABEL_12;
  }
  else
  {
    v4 = a1;
    if (!strcasecmp(a1, (const char *)*MEMORY[0x1E0CFAF68]))
    {
LABEL_12:
      memset(v15, 0, 15);
      std::to_string(&v13, 0);
      v15[0] = v13.__r_.__value_.__l.__size_;
      v10 = v13.__r_.__value_.__r.__words[0];
      *(_QWORD *)((char *)v15 + 7) = *(std::string::size_type *)((char *)&v13.__r_.__value_.__r.__words[1] + 7);
      v11 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      v12 = v15[0];
      *(_QWORD *)a2 = v10;
      *(_QWORD *)(a2 + 8) = v12;
      *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v15 + 7);
      *(_BYTE *)(a2 + 23) = v11;
      return 1;
    }
  }
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E0CFC078]))
    goto LABEL_12;
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED7100E0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v6 = qword_1ED7100E0;
    result = os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
    v6 = qword_1ED7100E0;
    result = os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  v8 = *MEMORY[0x1E0CFB048];
  if (a1[23] >= 0)
    v9 = a1;
  else
    v9 = *(char **)a1;
  LODWORD(v13.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)v13.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
  WORD2(v13.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v13.__r_.__value_.__r.__words[1] + 6) = v8;
  HIWORD(v13.__r_.__value_.__r.__words[2]) = 2080;
  v14 = v9;
  _os_log_error_impl(&dword_1BF335000, v6, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
    (uint8_t *)&v13,
    0x20u);
  return 0;
}

void sub_1BF359BB4(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x1BF359AF4);
    JUMPOUT(0x1BF359AFCLL);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::tailspin::get(const char *a1, uint64_t a2)
{
  uint64_t *v3;
  int v4;
  unsigned __int8 v5;
  NSObject *v6;
  std::string::size_type v7;
  uint64_t *v8;
  std::string::size_type v9;
  char v10;
  uint64_t v11;
  std::string v13;
  uint64_t *v14;
  _QWORD v15[3];

  v3 = (uint64_t *)a1;
  v15[2] = *MEMORY[0x1E0C80C00];
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v4 = strcasecmp(a1, (const char *)*MEMORY[0x1E0CFAF68]);
  if (v4)
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED7100E0 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v6 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
        return v4 == 0;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
      v6 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
        return v4 == 0;
    }
    v7 = *MEMORY[0x1E0CFB0A0];
    if (*((char *)v3 + 23) >= 0)
      v8 = v3;
    else
      v8 = (uint64_t *)*v3;
    LODWORD(v13.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v13.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
    WORD2(v13.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v13.__r_.__value_.__r.__words[1] + 6) = v7;
    HIWORD(v13.__r_.__value_.__r.__words[2]) = 2080;
    v14 = v8;
    _os_log_error_impl(&dword_1BF335000, v6, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
      (uint8_t *)&v13,
      0x20u);
  }
  else
  {
    memset(v15, 0, 15);
    std::to_string(&v13, 0);
    v15[0] = v13.__r_.__value_.__l.__size_;
    v9 = v13.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v15 + 7) = *(std::string::size_type *)((char *)&v13.__r_.__value_.__r.__words[1] + 7);
    v10 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v11 = v15[0];
    *(_QWORD *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v11;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v15 + 7);
    *(_BYTE *)(a2 + 23) = v10;
  }
  return v4 == 0;
}

void sub_1BF359DD4(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x1BF359D10);
    JUMPOUT(0x1BF359D18);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::tracesettings::get(char *a1, std::string *a2)
{
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  _BOOL8 result;
  uint64_t v8;
  char *v9;
  const std::string::value_type *v10;
  const char *v11;
  size_t v12;
  size_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((a1[23] & 0x80000000) == 0)
  {
    if (!strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB938]))
    {
LABEL_19:
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
      {
        a2->__r_.__value_.__l.__size_ = 1;
        a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&a2->__r_.__value_.__s + 23) = 1;
      }
      LOWORD(a2->__r_.__value_.__l.__data_) = 48;
      return 1;
    }
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFBA30]))
    {
      v4 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB470]))
        goto LABEL_5;
LABEL_16:
      if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
        v10 = "1";
      else
        v10 = "3";
      std::string::__assign_external(a2, v10);
      return 1;
    }
LABEL_21:
    v11 = (const char *)abm::helper::asString();
    v12 = strlen(v11);
    if (v12 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v13 = v12;
    if (v12 >= 0x17)
    {
      v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17)
        v15 = v12 | 7;
      v16 = v15 + 1;
      v14 = operator new(v15 + 1);
      *(_QWORD *)&v17[8] = v13;
      *(_QWORD *)&v17[16] = v16 | 0x8000000000000000;
      *(_QWORD *)v17 = v14;
    }
    else
    {
      v17[23] = v12;
      v14 = v17;
      if (!v12)
      {
        v17[0] = 0;
        if ((SHIBYTE(a2->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_25:
          *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v17;
          a2->__r_.__value_.__r.__words[2] = *(_QWORD *)&v17[16];
          return 1;
        }
LABEL_32:
        operator delete(a2->__r_.__value_.__l.__data_);
        goto LABEL_25;
      }
    }
    memmove(v14, v11, v13);
    v14[v13] = 0;
    if ((SHIBYTE(a2->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_32;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB938]))
    goto LABEL_19;
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E0CFBA30]))
    goto LABEL_21;
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E0CFB470]))
    goto LABEL_16;
LABEL_5:
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E0CFB7D0]))
    goto LABEL_19;
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED7100E0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v6 = qword_1ED7100E0;
    result = os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
    v6 = qword_1ED7100E0;
    result = os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  v8 = *MEMORY[0x1E0CFB098];
  if (a1[23] >= 0)
    v9 = a1;
  else
    v9 = *(char **)a1;
  *(_DWORD *)v17 = 136315650;
  *(_QWORD *)&v17[4] = "prop.default";
  *(_WORD *)&v17[12] = 2080;
  *(_QWORD *)&v17[14] = v8;
  *(_WORD *)&v17[22] = 2080;
  v18 = v9;
  _os_log_error_impl(&dword_1BF335000, v6, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'", v17, 0x20u);
  return 0;
}

double util::to_str<BOOL>(std::string *a1, int __val)
{
  double result;
  std::string v4;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v4, __val);
  result = *(double *)&v4.__r_.__value_.__l.__data_;
  *a1 = v4;
  return result;
}

void sub_1BF35A190(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BF35A180);
}

void sub_1BF35A19C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t defaults::bbtrace::mode(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::history(defaults::bbtrace *this)
{
  return capabilities::trace::defaultHistorySizeMB(this);
}

double util::to_str<diag::config::DuringAPSleep>(std::string *a1)
{
  double result;
  std::string v3;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v3, 0);
  result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_1BF35A228(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BF35A218);
}

void sub_1BF35A234(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t defaults::bbtrace::enabled_during_sleep(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::buffering_on_ap_wake(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::stall_detection(defaults::bbtrace *this)
{
  return 0;
}

double util::to_str<unsigned int>(std::string *a1, unsigned int __val)
{
  double result;
  std::string v4;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v4, __val);
  result = *(double *)&v4.__r_.__value_.__l.__data_;
  *a1 = v4;
  return result;
}

void sub_1BF35A2B0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BF35A2A0);
}

void sub_1BF35A2BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t defaults::bbtrace::stall_retries(defaults::bbtrace *this)
{
  return 3;
}

double util::to_str<diag::config::Recovery>(std::string *a1)
{
  double result;
  std::string v3;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v3, 0);
  result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_1BF35A328(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BF35A318);
}

void sub_1BF35A334(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t defaults::bbtrace::stall_recovery(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::keep_scratch_logs(defaults::bbtrace *this)
{
  return 0;
}

const char *defaults::bbtrace::primary_dmc(defaults::bbtrace *this)
{
  if (config::hw::watch(this))
    return "Lite";
  else
    return "Default";
}

const char *defaults::bbtrace::secondary_dmc(defaults::bbtrace *this)
{
  config::hw *v1;

  v1 = (config::hw *)capabilities::radio::ice(this);
  if (!(_DWORD)v1)
    return "None";
  if (config::hw::watch(v1))
    return "Lite";
  return "Default";
}

const char *defaults::bbtrace::extra_dmc(defaults::bbtrace *this)
{
  return "None";
}

const char *defaults::bbtrace::sleep_dmc(defaults::bbtrace *this)
{
  return "Sleep";
}

uint64_t defaults::bbtrace::max_memory_file_count(defaults::bbtrace *this)
{
  return capabilities::trace::defaultMemoryFileMaxCount(this);
}

uint64_t defaults::bbtrace::carrier_logging_allowed(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::file_size(defaults::bbtrace *this)
{
  return capabilities::trace::defaultFileSizeBytes(this);
}

uint64_t defaults::bbtrace::transport_read_size(defaults::bbtrace *this)
{
  capabilities::abs *v1;

  v1 = (capabilities::abs *)capabilities::radio::vendor(this);
  if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v1))
    return 0x4000;
  else
    return 0x8000;
}

uint64_t defaults::bbtrace::transport_read_count(defaults::bbtrace *this)
{
  capabilities::abs *v1;
  int v2;
  char shouldUseMinBasebandTransportIOReadCount;
  int v4;
  int v5;
  unsigned int v6;

  v1 = (capabilities::abs *)capabilities::radio::vendor(this);
  if (((_DWORD)v1 - 1) > 2)
    v2 = 23;
  else
    v2 = dword_1BF53C888[(int)v1 - 1];
  shouldUseMinBasebandTransportIOReadCount = capabilities::abs::shouldUseMinBasebandTransportIOReadCount(v1);
  if (v2 == 15)
    v4 = 36;
  else
    v4 = 4;
  if (v2 == 16)
    v5 = 36;
  else
    v5 = v4;
  if (v2 == 2)
    v6 = 16;
  else
    v6 = v5;
  if ((shouldUseMinBasebandTransportIOReadCount & 1) != 0)
    return 4;
  else
    return v6;
}

uint64_t defaults::bbtrace::privacyLevel(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::error_handling(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::live_filter(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::high_water_mark(defaults::bbtrace *this)
{
  if (capabilities::radio::ice(this))
    return 80;
  else
    return 0xFFFFFFFFLL;
}

uint64_t defaults::bbtrace::low_water_mark(defaults::bbtrace *this)
{
  if (capabilities::radio::ice(this))
    return 1;
  else
    return 0xFFFFFFFFLL;
}

uint64_t defaults::bbtrace::min_file_size(defaults::bbtrace *this)
{
  capabilities::abs *v1;

  v1 = (capabilities::abs *)capabilities::radio::vendor(this);
  if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v1))
    return 0x4000;
  else
    return 0x8000;
}

capabilities::trace *defaults::ipc::enabled(defaults::ipc *this)
{
  capabilities::trace *result;

  result = (capabilities::trace *)capabilities::ipc::supportsPCI(this);
  if ((_DWORD)result)
    return (capabilities::trace *)capabilities::trace::enabledByDefault(result);
  return result;
}

uint64_t defaults::ipc::history(defaults::ipc *this)
{
  return capabilities::ipc::defaultPCIBinaryTraceHistorySizeMB(this);
}

uint64_t defaults::ipc::buffer_count(defaults::ipc *this)
{
  return 4;
}

uint64_t defaults::bbipc::mhiConfigPayloadSize(defaults::bbipc *this)
{
  return capabilities::ipc::defaultMHIConfigPayloadSizeBytes(this);
}

uint64_t defaults::logfilter::free_space_limit(defaults::logfilter *this)
{
  return 512;
}

uint64_t defaults::logfilter::max_log_limit(defaults::logfilter *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t defaults::helper::supported(defaults::helper *this)
{
  return 1;
}

uint64_t defaults::compression::mode(defaults::compression *this)
{
  uint64_t IsInternalBuild;

  IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0)
    return capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  IsInternalBuild = TelephonyUtilIsCarrierBuild();
  if ((_DWORD)IsInternalBuild)
    return capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  else
    return 2;
}

uint64_t defaults::compression::splitArchive(defaults::compression *this)
{
  return 0;
}

uint64_t defaults::compression::supported(defaults::compression *this)
{
  return 1;
}

uint64_t defaults::ttr::mode(defaults::ttr *this)
{
  if ((TelephonyUtilIsInternalBuild() & 1) != 0)
    return 1;
  else
    return TelephonyUtilIsCarrierBuild();
}

uint64_t defaults::ttr::agelimit(defaults::ttr *this)
{
  return 43200;
}

uint64_t defaults::ttr::supported(defaults::ttr *this)
{
  if ((TelephonyUtilIsInternalBuild() & 1) != 0)
    return 1;
  else
    return TelephonyUtilIsCarrierBuild();
}

uint64_t defaults::systemlogs::mode(defaults::systemlogs *this)
{
  if ((TelephonyUtilIsInternalBuild() & 1) != 0)
    return 1;
  else
    return TelephonyUtilIsCarrierBuild();
}

uint64_t defaults::systemlogs::history(defaults::systemlogs *this)
{
  return capabilities::abs::defaultSystemLogsHistory(this);
}

uint64_t defaults::systemlogs::userConfirmationRequired(defaults::systemlogs *this)
{
  return 1;
}

uint64_t defaults::systemlogs::supported(defaults::systemlogs *this)
{
  return 1;
}

uint64_t defaults::profile::enabled(defaults::profile *this)
{
  return 0;
}

uint64_t defaults::profile::version(defaults::profile *this)
{
  return 0;
}

uint64_t defaults::tailspin::enabled(defaults::tailspin *this)
{
  return 0;
}

unint64_t defaults::tracesettings::config@<X0>(_QWORD *a1@<X8>)
{
  const char *v3;
  unint64_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)abm::helper::asString();
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a1[1] = v5;
    a1[2] = v7 | 0x8000000000000000;
    *a1 = v8;
    a1 = v8;
  }
  else
  {
    *((_BYTE *)a1 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a1 = 0;
      return result;
    }
  }
  result = (unint64_t)memmove(a1, v3, v5);
  *((_BYTE *)a1 + v5) = 0;
  return result;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  unint64_t v6;
  void *v7;
  unint64_t v8;
  std::string *v9;
  unint64_t v10;
  size_t v11;
  std::string::size_type v12;
  uint64_t v13;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (__n > v8)
    {
      v11 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - (v10 & 0x7FFFFFFFFFFFFFFFLL) >= __n - v8)
      {
        v9 = (std::string *)this->__r_.__value_.__r.__words[0];
        if (v8 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_15:
          v7 = operator new(v11);
          memcpy(v7, __s, __n);
          if (v8 != 22)
            operator delete(v9);
          this->__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
          this->__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
LABEL_23:
          this->__r_.__value_.__l.__size_ = __n;
          goto LABEL_24;
        }
LABEL_8:
        v12 = 2 * v8;
        if (__n > 2 * v8)
          v12 = __n;
        v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v13 = v12 | 7;
        if (v12 >= 0x17)
          v11 = v13 + 1;
        else
          v11 = 23;
        goto LABEL_15;
      }
LABEL_25:
      std::string::__throw_length_error[abi:ne180100]();
    }
    v6 = HIBYTE(v10);
    v7 = (void *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = this;
    if (__n > 0x16)
    {
      if (__n - 0x7FFFFFFFFFFFFFF7 >= 0x800000000000001FLL)
      {
        v8 = 22;
        v9 = this;
        goto LABEL_8;
      }
      goto LABEL_25;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    goto LABEL_23;
  *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
LABEL_24:
  *((_BYTE *)v7 + __n) = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

void sub_1BF35AA7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_ea8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 32);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 48);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_ea8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_1BF35ABBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BF35ABD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BF35ADFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1BF35BA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  __cxa_guard_abort(&qword_1ED70FEB0);

  _Unwind_Resume(a1);
}

void sub_1BF35BCA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,dispatch_object_t object)
{
  void **v25;

  if (object)
    dispatch_release(object);

  support::ui::NotificationInfo::~NotificationInfo(v25);
  _Unwind_Resume(a1);
}

void sub_1BF35BCD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BF35C408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, dispatch_object_t object, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  _Unwind_Resume(a1);
}

void CallBackData::~CallBackData(void **this)
{
  NSObject *v2;

  if (*((char *)this + 39) < 0)
  {
    operator delete(this[2]);
    v2 = this[1];
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v2 = this[1];
  if (v2)
LABEL_3:
    dispatch_release(v2);
LABEL_4:

}

void support::ui::NotificationInfo::~NotificationInfo(void **this)
{
  if (*((char *)this + 71) < 0)
  {
    operator delete(this[6]);
    if ((*((char *)this + 47) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 23) & 0x80000000) == 0)
        return;
LABEL_7:
      operator delete(*this);
      return;
    }
  }
  else if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    goto LABEL_7;
}

void __copy_helper_block_ea8_40c35_ZTSN7support2ui16NotificationInfoE112c18_ZTS12CallBackData(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  void *v9;
  NSObject *v10;
  std::string *v11;
  __int128 v12;

  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
    v5 = (std::string *)(a1 + 64);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
    v5 = (std::string *)(a1 + 64);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(_OWORD *)(a2 + 64);
      v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 80);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
LABEL_6:
  v7 = (std::string *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 88), *(_QWORD *)(a2 + 96));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  v9 = _Block_copy(*(const void **)(a2 + 112));
  v10 = *(NSObject **)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v9;
  *(_QWORD *)(a1 + 120) = v10;
  if (v10)
    dispatch_retain(v10);
  v11 = (std::string *)(a1 + 128);
  if (*(char *)(a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(a2 + 128), *(_QWORD *)(a2 + 136));
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
}

void sub_1BF35C74C(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  NSObject *v4;

  v4 = *(NSObject **)(v2 + 120);
  if (v4)
    dispatch_release(v4);

  support::ui::NotificationInfo::~NotificationInfo(v1);
  _Unwind_Resume(a1);
}

void sub_1BF35C774(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 87) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v2 + 63) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v2 + 63) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_40c35_ZTSN7support2ui16NotificationInfoE112c18_ZTS12CallBackData(uint64_t a1)
{
  NSObject *v2;

  if ((*(char *)(a1 + 151) & 0x80000000) == 0)
  {
    v2 = *(NSObject **)(a1 + 120);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 128));
  v2 = *(NSObject **)(a1 + 120);
  if (v2)
LABEL_3:
    dispatch_release(v2);
LABEL_4:

  if (*(char *)(a1 + 111) < 0)
  {
    operator delete(*(void **)(a1 + 88));
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    {
LABEL_6:
      if ((*(char *)(a1 + 63) & 0x80000000) == 0)
        return;
LABEL_12:
      operator delete(*(void **)(a1 + 40));
      return;
    }
  }
  else if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_12;
}

void sub_1BF35CCF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,xpc_object_t object)
{
  if (a24 < 0)
    operator delete(__p);
  xpc_release(object);
  _Unwind_Resume(a1);
}

void sub_1BF35D700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, dispatch_object_t object, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,dispatch_object_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (object)
    dispatch_release(object);

  CallBackData::~CallBackData((void **)&a21);
  if (a32 < 0)
    operator delete(__p);
  if (a40 < 0)
  {
    operator delete(a35);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void __copy_helper_block_ea8_32c18_ZTS12CallBackData(std::string *a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;
  std::string *v6;
  __int128 v7;

  v4 = _Block_copy(*(const void **)(a2 + 32));
  v5 = *(NSObject **)(a2 + 40);
  a1[1].__r_.__value_.__l.__size_ = (std::string::size_type)v4;
  a1[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v5;
  if (v5)
    dispatch_retain(v5);
  v6 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1BF35D850(_Unwind_Exception *a1)
{
  uint64_t v1;
  NSObject *v3;

  v3 = *(NSObject **)(v1 + 40);
  if (v3)
    dispatch_release(v3);

  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c18_ZTS12CallBackData(uint64_t a1)
{
  NSObject *v2;

  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    v2 = *(NSObject **)(a1 + 40);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v2 = *(NSObject **)(a1 + 40);
  if (v2)
LABEL_3:
    dispatch_release(v2);
LABEL_4:

}

void support::ui::showNotification(unsigned int a1, uint64_t a2, void *a3)
{
  id v5;
  NSObject *v6;
  std::string v7;
  std::string v8;
  std::string __p;

  v5 = a3;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v7 = *(std::string *)a2;
  if (*(char *)(a2 + 47) < 0)
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  else
    v8 = *(std::string *)(a2 + 24);
  if (*(char *)(a2 + 71) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  else
    __p = *(std::string *)(a2 + 48);
  v6 = 0;
  support::ui::showNotification(a1, (uint64_t)&v7, v5, &v6);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_12;
LABEL_15:
    operator delete(v8.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_16;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_15;
LABEL_12:
  if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_13:

    return;
  }
LABEL_16:
  operator delete(v7.__r_.__value_.__l.__data_);

}

void sub_1BF35DA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((a16 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a11);

  _Unwind_Resume(a1);
}

void sub_1BF35DA8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BF35DA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  support::ui::NotificationInfo::~NotificationInfo((void **)va);

  _Unwind_Resume(a1);
}

void support::ui::showNotification(unsigned int a1, uint64_t a2, void *a3, NSObject **a4)
{
  id v7;
  std::string::size_type size;
  unsigned __int8 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  NSObject *v13;
  unint64_t *v14;
  unint64_t v15;
  std::string *v16;
  unsigned __int8 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  std::string::size_type v24;
  std::string::size_type v25;
  uint64_t **v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::string::size_type v55;
  __int128 v56;
  void *v57;
  NSObject *v58;
  void *v59;
  NSObject *v60;
  std::string::size_type v61;
  id v62;
  dispatch_object_t object;
  std::string __p;
  std::string v65;
  std::string v66;
  std::string v67;
  std::string v68;
  std::string buf;
  std::string v70;
  uint8_t v71[16];
  __int128 block;
  std::string v73;

  v7 = a3;
  memset(&v70, 170, sizeof(v70));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v70 = *(std::string *)a2;
  size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
  if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v70.__r_.__value_.__l.__size_;
  if (size)
  {
    std::string::insert(&v70, 0, "com.apple.telephony.", 0x14uLL);
    goto LABEL_20;
  }
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 0x40000000;
  v73.__r_.__value_.__r.__words[0] = (std::string::size_type)___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v73.__r_.__value_.__l.__size_ = (std::string::size_type)&__block_descriptor_tmp_13_2;
  v73.__r_.__value_.__r.__words[2] = (std::string::size_type)&GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v10 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    block = GetABMLogServer(void)::sLogServer;
    if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_11;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    block = GetABMLogServer(void)::sLogServer;
    if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
    {
LABEL_11:
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
  }
  v13 = *((_QWORD *)GetGlobalLogger((uint64_t *)&block) + 4);
  if (v10)
  {
    v14 = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1BF335000, v13, OS_LOG_TYPE_DEFAULT, "#I Notification requires identifier!", (uint8_t *)&buf, 2u);
  }
LABEL_20:
  memset(&buf, 0, sizeof(buf));
  if (a1 <= 2)
  {
    v16 = std::string::__assign_external(&buf, "BasebandServicesNotification", 0x1CuLL);
    goto LABEL_33;
  }
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 0x40000000;
  v73.__r_.__value_.__r.__words[0] = (std::string::size_type)___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v73.__r_.__value_.__l.__size_ = (std::string::size_type)&__block_descriptor_tmp_13_2;
  v73.__r_.__value_.__r.__words[2] = (std::string::size_type)&GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v18 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    block = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_27;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v18 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    block = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_27;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
LABEL_27:
  v21 = *((_QWORD *)GetGlobalLogger((uint64_t *)&block) + 4);
  if (v18)
  {
    v22 = (unint64_t *)&v18->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v16 = (std::string *)os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
  if ((_DWORD)v16)
  {
    *(_WORD *)v71 = 0;
    _os_log_error_impl(&dword_1BF335000, v21, OS_LOG_TYPE_ERROR, "ABM notification is not supported for the caller", v71, 2u);
    v61 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v61 = v70.__r_.__value_.__l.__size_;
    if (!v61)
      goto LABEL_130;
    goto LABEL_36;
  }
LABEL_33:
  v24 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
  if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v24 = v70.__r_.__value_.__l.__size_;
  if (!v24)
    goto LABEL_130;
LABEL_36:
  v25 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v25 = buf.__r_.__value_.__l.__size_;
  if (v25)
  {
    v26 = (uint64_t **)(a2 + 24);
    v27 = *(unsigned __int8 *)(a2 + 47);
    v28 = (char)v27;
    if ((v27 & 0x80u) != 0)
      v27 = *(_QWORD *)(a2 + 32);
    switch(v27)
    {
      case 20:
        if (v28 >= 0)
          v29 = (uint64_t *)(a2 + 24);
        else
          v29 = *v26;
        v30 = *v29;
        v31 = v29[1];
        v32 = *((_DWORD *)v29 + 4);
        if (v30 == 0x6E6F6870656C6554 && v31 == 0x525F706D75445F79 && v32 == 2036621669)
          goto LABEL_94;
        goto LABEL_96;
      case 22:
        if (v28 >= 0)
          v35 = (uint64_t *)(a2 + 24);
        else
          v35 = *v26;
        v36 = *v35;
        v37 = v35[1];
        v38 = *(uint64_t *)((char *)v35 + 14);
        if (v36 != 0x6E6F6870656C6554 || v37 != 0x535F706D75445F79 || v38 != 0x646574726174535FLL)
          goto LABEL_96;
        goto LABEL_94;
      case 23:
        if (v28 >= 0)
          v41 = (uint64_t *)(a2 + 24);
        else
          v41 = *v26;
        v42 = *v41;
        v43 = v41[1];
        v44 = *(uint64_t *)((char *)v41 + 15);
        v46 = v42 == 0x72616C756C6C6543 && v43 == 0x445F65757373495FLL && v44 == 0x6465746365746544;
        if (v46 && (a1 != 2 || (config::hw::watch((config::hw *)v16) & 1) != 0))
          break;
        goto LABEL_96;
      case 27:
        if (v28 >= 0)
          v47 = (uint64_t *)(a2 + 24);
        else
          v47 = *v26;
        v48 = *v47;
        v49 = v47[1];
        v50 = v47[2];
        v51 = *(uint64_t *)((char *)v47 + 19);
        if (v48 != 0x6E6F6870656C6554
          || v49 != 0x495F706D75445F79
          || v50 != 0x696369666675736ELL
          || v51 != 0x746E656963696666)
        {
          goto LABEL_96;
        }
LABEL_94:
        if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
          goto LABEL_96;
        break;
      default:
LABEL_96:
        v55 = *(_QWORD *)a2;
        v56 = *(_OWORD *)(a2 + 8);
        *(std::string *)a2 = v70;
        v70.__r_.__value_.__r.__words[0] = v55;
        *(_OWORD *)&v70.__r_.__value_.__r.__words[1] = v56;
        v73.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v56 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v56 + 1) = 0xAAAAAAAAAAAAAAAALL;
        block = v56;
        *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v56;
        v57 = _Block_copy(v7);
        v58 = *a4;
        *(_QWORD *)&block = v57;
        *((_QWORD *)&block + 1) = v58;
        if (v58)
          dispatch_retain(v58);
        if (*(char *)(a2 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&v73, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
        }
        else
        {
          *(_OWORD *)&v73.__r_.__value_.__l.__data_ = *(_OWORD *)v26;
          v73.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v68, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
        else
          v68 = buf;
        +[UserNotificationManager sharedInstance:](UserNotificationManager, "sharedInstance:", &v68);
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&v65, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          v65 = *(std::string *)a2;
        if (*(char *)(a2 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
        }
        else
        {
          *(_OWORD *)&v66.__r_.__value_.__l.__data_ = *(_OWORD *)v26;
          v66.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
        }
        if (*(char *)(a2 + 71) < 0)
          std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
        else
          v67 = *(std::string *)(a2 + 48);
        v62 = _Block_copy((const void *)block);
        object = (dispatch_object_t)*((_QWORD *)&block + 1);
        if (*((_QWORD *)&block + 1))
          dispatch_retain(*((dispatch_object_t *)&block + 1));
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&__p, v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_);
        else
          __p = v73;
        objc_msgSend(v59, "showNotification:withCallBackData:", &v65, &v62);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (object)
          dispatch_release(object);

        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v67.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_124:
            if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_125;
            goto LABEL_137;
          }
        }
        else if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_124;
        }
        operator delete(v66.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_125:

          if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_126;
          goto LABEL_138;
        }
LABEL_137:
        operator delete(v65.__r_.__value_.__l.__data_);

        if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_126:
          if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_127;
          goto LABEL_139;
        }
LABEL_138:
        operator delete(v68.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_127:
          v60 = *((_QWORD *)&block + 1);
          if (!*((_QWORD *)&block + 1))
            goto LABEL_129;
          goto LABEL_128;
        }
LABEL_139:
        operator delete(v73.__r_.__value_.__l.__data_);
        v60 = *((_QWORD *)&block + 1);
        if (*((_QWORD *)&block + 1))
LABEL_128:
          dispatch_release(v60);
LABEL_129:

        break;
    }
  }
LABEL_130:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_132;
LABEL_134:
    operator delete(v70.__r_.__value_.__l.__data_);
    goto LABEL_132;
  }
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_134;
LABEL_132:

}

void sub_1BF35E2C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, dispatch_object_t object, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  void *v43;
  void *v44;
  uint64_t v45;

  if (object)
    dispatch_release(object);

  support::ui::NotificationInfo::~NotificationInfo(&a15);
  if (a36 < 0)
    operator delete(__p);
  CallBackData::~CallBackData((void **)(v45 - 112));
  if (a43 < 0)
  {
    operator delete(a38);
    if ((*(char *)(v45 - 137) & 0x80000000) == 0)
    {
LABEL_7:

      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v45 - 137) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)(v45 - 160));

  _Unwind_Resume(a1);
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_10;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (!v2)
  {
    v5 = 1;
    v6 = (uint64_t **)v3[2];
    v7 = *v6;
    if (*v6 == v3)
      goto LABEL_6;
LABEL_11:
    v6[1] = (uint64_t *)v2;
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
    goto LABEL_12;
  }
LABEL_10:
  v5 = 0;
  *(_QWORD *)(v2 + 16) = v3[2];
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 != v3)
    goto LABEL_11;
LABEL_6:
  *v6 = (uint64_t *)v2;
  if (v3 != result)
  {
    v7 = v6[1];
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
LABEL_12:
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
    goto LABEL_16;
  }
  v7 = 0;
  result = (uint64_t *)v2;
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
    goto LABEL_12;
LABEL_16:
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v14 = (uint64_t **)v7[2];
    if (*v14 != v7)
      break;
    if (*((_BYTE *)v7 + 24))
    {
      v16 = (_QWORD *)*v7;
      if (*v7)
        goto LABEL_48;
    }
    else
    {
      *((_BYTE *)v7 + 24) = 1;
      *((_BYTE *)v14 + 24) = 0;
      v20 = (uint64_t *)v7[1];
      *v14 = v20;
      if (v20)
        v20[2] = (uint64_t)v14;
      v7[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v7;
      v7[1] = (uint64_t)v14;
      v14[2] = v7;
      if (result == (uint64_t *)v14)
        result = v7;
      v7 = *v14;
      v16 = (_QWORD *)**v14;
      if (v16)
      {
LABEL_48:
        if (!*((_BYTE *)v16 + 24))
          goto LABEL_71;
      }
    }
    v21 = (uint64_t *)v7[1];
    if (v21 && !*((_BYTE *)v21 + 24))
    {
      if (v16 && !*((_BYTE *)v16 + 24))
      {
LABEL_71:
        v21 = v7;
      }
      else
      {
        *((_BYTE *)v21 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = *v21;
        v7[1] = *v21;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v21[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v21;
        *v21 = (uint64_t)v7;
        v7[2] = (uint64_t)v21;
        v16 = v7;
      }
      v27 = (uint64_t *)v21[2];
      *((_BYTE *)v21 + 24) = *((_BYTE *)v27 + 24);
      *((_BYTE *)v27 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v28 = *v27;
      v29 = *(_QWORD *)(*v27 + 8);
      *v27 = v29;
      if (v29)
        *(_QWORD *)(v29 + 16) = v27;
      *(_QWORD *)(v28 + 16) = v27[2];
      *(_QWORD *)(v27[2] + 8 * (*(_QWORD *)v27[2] != (_QWORD)v27)) = v28;
      *(_QWORD *)(v28 + 8) = v27;
      v27[2] = v28;
      return result;
    }
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (*((_BYTE *)v12 + 24))
      v13 = v12 == result;
    else
      v13 = 1;
    if (v13)
      goto LABEL_61;
LABEL_24:
    v7 = *(uint64_t **)(v12[2] + 8 * (*(_QWORD *)v12[2] == (_QWORD)v12));
  }
  if (*((_BYTE *)v7 + 24))
  {
    v15 = (_QWORD *)*v7;
    if (!*v7)
    {
LABEL_38:
      v19 = (uint64_t *)v7[1];
      if (v19 && !*((_BYTE *)v19 + 24))
        goto LABEL_67;
      *((_BYTE *)v7 + 24) = 0;
      v12 = (uint64_t *)v7[2];
      if (v12 == result)
      {
        v12 = result;
LABEL_61:
        *((_BYTE *)v12 + 24) = 1;
        return result;
      }
      if (!*((_BYTE *)v12 + 24))
        goto LABEL_61;
      goto LABEL_24;
    }
  }
  else
  {
    *((_BYTE *)v7 + 24) = 1;
    *((_BYTE *)v14 + 24) = 0;
    v17 = v14[1];
    v18 = (uint64_t *)*v17;
    v14[1] = (uint64_t *)*v17;
    if (v18)
      v18[2] = (uint64_t)v14;
    v17[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v17;
    *v17 = (uint64_t)v14;
    v14[2] = v17;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
    v15 = (_QWORD *)*v7;
    if (!*v7)
      goto LABEL_38;
  }
  if (*((_BYTE *)v15 + 24))
    goto LABEL_38;
  v19 = (uint64_t *)v7[1];
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_67:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v23 = v15[1];
    *v7 = v23;
    if (v23)
      *(_QWORD *)(v23 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v19 = v7;
  }
  v24 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v24 + 24);
  *(_BYTE *)(v24 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v25 = *(uint64_t **)(v24 + 8);
  v26 = *v25;
  *(_QWORD *)(v24 + 8) = *v25;
  if (v26)
    *(_QWORD *)(v26 + 16) = v24;
  v25[2] = *(_QWORD *)(v24 + 16);
  *(_QWORD *)(*(_QWORD *)(v24 + 16) + 8 * (**(_QWORD **)(v24 + 16) != v24)) = v25;
  *v25 = v24;
  *(_QWORD *)(v24 + 16) = v25;
  return result;
}

void std::__tree<std::__value_type<std::string,CallBackData>,std::__map_value_compare<std::string,std::__value_type<std::string,CallBackData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CallBackData>>>::destroy(char *a1)
{
  NSObject *v2;

  if (!a1)
    return;
  std::__tree<std::__value_type<std::string,CallBackData>,std::__map_value_compare<std::string,std::__value_type<std::string,CallBackData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CallBackData>>>::destroy(*(_QWORD *)a1);
  std::__tree<std::__value_type<std::string,CallBackData>,std::__map_value_compare<std::string,std::__value_type<std::string,CallBackData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CallBackData>>>::destroy(*((_QWORD *)a1 + 1));
  if (a1[95] < 0)
  {
    operator delete(*((void **)a1 + 9));
    v2 = *((_QWORD *)a1 + 8);
    if (!v2)
      goto LABEL_5;
    goto LABEL_4;
  }
  v2 = *((_QWORD *)a1 + 8);
  if (v2)
LABEL_4:
    dispatch_release(v2);
LABEL_5:

  if (a1[55] < 0)
    operator delete(*((void **)a1 + 4));
  operator delete(a1);
}

uint64_t asString@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  __int128 v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  _BYTE *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  void *__src[2];
  void *__p[2];
  __int128 v32;
  __int128 v33;
  _OWORD v34[9];
  unint64_t v35;

  v35 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v34[7] = v4;
  v34[8] = v4;
  v34[5] = v4;
  v34[6] = v4;
  v34[3] = v4;
  v34[4] = v4;
  v34[1] = v4;
  v34[2] = v4;
  v33 = v4;
  v34[0] = v4;
  *(_OWORD *)__p = v4;
  v32 = v4;
  v29 = v4;
  *(_OWORD *)__src = v4;
  v27 = v4;
  v28 = v4;
  v26 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v26);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Time: ", 6);
  v6 = *(char *)(a1 + 23);
  if (v6 >= 0)
    v7 = a1;
  else
    v7 = *(_QWORD *)a1;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"; Mode: ", 8);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"; Action: ", 10);
  v14 = *(_QWORD *)(a1 + 32);
  v13 = a1 + 32;
  v12 = v14;
  v15 = *(char *)(v13 + 23);
  if (v15 >= 0)
    v16 = v13;
  else
    v16 = v12;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(v13 + 23);
  else
    v17 = *(_QWORD *)(v13 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v16, v17);
  if ((BYTE8(v33) & 0x10) != 0)
  {
    v19 = (_BYTE *)v33;
    if ((void *)v33 < __src[1])
    {
      *(void **)&v33 = __src[1];
      v19 = __src[1];
    }
    v20 = __src[0];
    v18 = v19 - (char *)__src[0];
    if ((unint64_t)(v19 - (char *)__src[0]) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_30;
  }
  else
  {
    if ((BYTE8(v33) & 8) == 0)
    {
      v18 = 0;
      a2[23] = 0;
      goto LABEL_26;
    }
    v20 = (const void *)*((_QWORD *)&v28 + 1);
    v18 = *((_QWORD *)&v29 + 1) - *((_QWORD *)&v28 + 1);
    if (*((_QWORD *)&v29 + 1) - *((_QWORD *)&v28 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_30:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v18 >= 0x17)
  {
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v23 = operator new(v21 + 1);
    *((_QWORD *)a2 + 1) = v18;
    *((_QWORD *)a2 + 2) = v22 | 0x8000000000000000;
    *(_QWORD *)a2 = v23;
    a2 = v23;
    goto LABEL_25;
  }
  a2[23] = v18;
  if (v18)
LABEL_25:
    memmove(a2, v20, v18);
LABEL_26:
  a2[v18] = 0;
  *(_QWORD *)&v26 = *MEMORY[0x1E0DE4F50];
  v24 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&v26 + *(_QWORD *)(v26 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v27 = v24;
  *((_QWORD *)&v27 + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v32) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3B89E4C](v34);
}

void sub_1BF35EA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1BF35EBA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1C3B89E4C](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3B89E4C](a1 + 128);
  return a1;
}

void BBLogTracker::addLog(uint64_t **a1, __int128 *a2, int a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *v7;
  std::string *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string *v17;
  unint64_t v18;
  int v19;
  __int128 *v20;

  v19 = a3;
  v17 = (std::string *)0xAAAAAAAAAAAAAAAALL;
  v18 = 0xAAAAAAAAAAAAAAAALL;
  std::allocate_shared[abi:ne180100]<LogInfo,std::allocator<LogInfo>,std::string const&,abm::helper::SystemLogsMode &,std::string const&,void>((uint64_t)a2, &v19, a4, &v17);
  v20 = a2;
  v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)a2, (uint64_t)&std::piecewise_construct, &v20);
  v8 = v17;
  v7 = (uint64_t *)v18;
  if (v18)
  {
    v9 = (unint64_t *)(v18 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (std::__shared_weak_count *)v6[8];
  v6[7] = (uint64_t *)v8;
  v6[8] = v7;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)v18;
  if (v18)
  {
    v15 = (unint64_t *)(v18 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1BF35ED60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *BBLogTracker::getLog@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *a3 = 0;
  a3[1] = 0;
  result = std::__tree<std::string>::find<std::string>(a1, a2);
  if ((uint64_t *)(a1 + 8) != result)
  {
    v7 = result[7];
    v6 = result[8];
    if (v6)
    {
      v8 = (unint64_t *)(v6 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    *a3 = v7;
    a3[1] = v6;
  }
  return result;
}

void sub_1BF35EDC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *BBLogTracker::limitLogs(uint64_t *this, unsigned int a2)
{
  unint64_t v2;
  uint64_t *v3;

  v2 = a2;
  if (this[2] > (unint64_t)a2)
  {
    v3 = this;
    do
      this = std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::erase(v3, *v3);
    while (v3[2] > v2);
  }
  return this;
}

void BBLogTracker::getLastLog(BBLogTracker *this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  __darwin_time_t tv_sec;
  __darwin_suseconds_t tv_usec;
  uint64_t v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t **v11;
  int v12;
  char *v13;
  char *v14;
  char *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _DWORD *v21;
  uint64_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  const void *v28;
  _QWORD *v29;
  const void *v30;
  int v31;
  const void *v32;
  size_t v33;
  int v34;
  void *v35;
  _QWORD *v36;
  size_t v37;
  size_t v38;
  int v39;
  int v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD v47[2];
  unsigned __int8 v48;
  _QWORD v49[3];
  timeval v50;

  *a3 = 0;
  a3[1] = 0;
  if (!*((_QWORD *)this + 2))
    return;
  if (a2)
  {
    v50.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v50.tv_usec = 0xAAAAAAAAAAAAAAAALL;
    gettimeofday(&v50, 0);
    tv_sec = v50.tv_sec;
    tv_usec = v50.tv_usec;
    if (v50.tv_usec >= 0)
      v8 = v50.tv_usec;
    else
      v8 = (v50.tv_usec + 1000000);
    memset(v49, 170, sizeof(v49));
    Timestamp::Timestamp((Timestamp *)v49);
    if (v49[1])
    {
      v9 = (uint64_t *)v49[1];
      while (1)
      {
        while (1)
        {
          v11 = (uint64_t **)v9;
          v12 = *((_DWORD *)v9 + 8);
          if (v12 < 1)
            break;
          v9 = *v11;
          v10 = v11;
          if (!*v11)
            goto LABEL_22;
        }
        if ((v12 & 0x80000000) == 0)
          break;
        v9 = v11[1];
        if (!v9)
        {
          v10 = v11 + 1;
          goto LABEL_22;
        }
      }
      v21 = v11;
    }
    else
    {
      v10 = (uint64_t **)&v49[1];
      v11 = (uint64_t **)&v49[1];
LABEL_22:
      v21 = operator new(0x38uLL);
      v21[8] = 0;
      *((_QWORD *)v21 + 5) = 0;
      *((_QWORD *)v21 + 6) = 0;
      *(_QWORD *)v21 = 0;
      *((_QWORD *)v21 + 1) = 0;
      *((_QWORD *)v21 + 2) = v11;
      *v10 = (uint64_t *)v21;
      v22 = (uint64_t *)v21;
      if (*(_QWORD *)v49[0])
      {
        v49[0] = *(_QWORD *)v49[0];
        v22 = *v10;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v49[1], v22);
      ++v49[2];
    }
    *((_QWORD *)v21 + 5) = tv_sec - a2 + (tv_usec >> 31);
    *((_QWORD *)v21 + 6) = v8 | 0xAAAAAAAA00000000;
    v25 = (_QWORD *)*((_QWORD *)this + 1);
    v24 = (_QWORD *)((char *)this + 8);
    v23 = v25;
    if (v25)
    {
      do
      {
        v26 = v23;
        v23 = (_QWORD *)v23[1];
      }
      while (v23);
    }
    else
    {
      v27 = v24;
      do
      {
        v26 = (_QWORD *)v27[2];
        v16 = *v26 == (_QWORD)v27;
        v27 = v26;
      }
      while (v16);
    }
    Timestamp::asString((uint64_t)v49, 0, 9, v47);
    v30 = (const void *)v26[4];
    v29 = v26 + 4;
    v28 = v30;
    v31 = *((char *)v29 + 23);
    if (v31 >= 0)
      v32 = v29;
    else
      v32 = v28;
    if (v31 >= 0)
      v33 = *((unsigned __int8 *)v29 + 23);
    else
      v33 = v29[1];
    v34 = (char)v48;
    v35 = (void *)v47[0];
    if ((v48 & 0x80u) == 0)
      v36 = v47;
    else
      v36 = (_QWORD *)v47[0];
    if ((v48 & 0x80u) == 0)
      v37 = v48;
    else
      v37 = v47[1];
    if (v37 >= v33)
      v38 = v33;
    else
      v38 = v37;
    v39 = memcmp(v32, v36, v38);
    if (v39)
    {
      if ((v39 & 0x80000000) == 0)
        goto LABEL_47;
    }
    else if (v33 >= v37)
    {
LABEL_47:
      v40 = 1;
      if ((v34 & 0x80000000) == 0)
      {
LABEL_49:
        if (v40)
        {
          v41 = (_QWORD *)*v24;
          if (*v24)
          {
            do
            {
              v42 = v41;
              v41 = (_QWORD *)v41[1];
            }
            while (v41);
          }
          else
          {
            do
            {
              v42 = (_QWORD *)v24[2];
              v16 = *v42 == (_QWORD)v24;
              v24 = v42;
            }
            while (v16);
          }
          v44 = v42[7];
          v43 = v42[8];
          if (v43)
          {
            v45 = (unint64_t *)(v43 + 8);
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
          }
          *a3 = v44;
          a3[1] = v43;
        }
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v49, (_QWORD *)v49[1]);
        return;
      }
LABEL_48:
      operator delete(v35);
      goto LABEL_49;
    }
    v40 = 0;
    if ((v34 & 0x80000000) == 0)
      goto LABEL_49;
    goto LABEL_48;
  }
  v14 = (char *)this + 8;
  v13 = (char *)*((_QWORD *)this + 1);
  if (v13)
  {
    do
    {
      v15 = v13;
      v13 = (char *)*((_QWORD *)v13 + 1);
    }
    while (v13);
  }
  else
  {
    do
    {
      v15 = (char *)*((_QWORD *)v14 + 2);
      v16 = *(_QWORD *)v15 == (_QWORD)v14;
      v14 = v15;
    }
    while (v16);
  }
  v18 = *((_QWORD *)v15 + 7);
  v17 = *((_QWORD *)v15 + 8);
  if (v17)
  {
    v19 = (unint64_t *)(v17 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  *a3 = v18;
  a3[1] = v17;
}

void sub_1BF35F0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  _QWORD *v5;
  va_list va;

  va_start(va, a4);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)va, v5);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

void sub_1BF35F100(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t BBLogTracker::count(BBLogTracker *this)
{
  return *((unsigned int *)this + 4);
}

void std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _QWORD v13[2];
  std::locale v14;

  v13[0] = 0xAAAAAAAAAAAAAAAALL;
  v13[1] = 0xAAAAAAAAAAAAAAAALL;
  MEMORY[0x1C3B89CE4](v13, a1);
  if (LOBYTE(v13[0]))
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1C3B89CF0](v13);
  return a1;
}

void sub_1BF35F26C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x1C3B89CF0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1BF35F24CLL);
}

void sub_1BF35F2B4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__b[3];

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if ((uint64_t)v12 >= 1)
    {
      memset(__b, 170, sizeof(__b));
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v12 >= 0x17)
      {
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        __b[2] = (void *)(v15 | 0x8000000000000000);
        __b[0] = v13;
      }
      else
      {
        HIBYTE(__b[2]) = v12;
        v13 = __b;
      }
      memset(v13, __c, v12);
      *((_BYTE *)v13 + v12) = 0;
      if (SHIBYTE(__b[2]) >= 0)
        v16 = __b;
      else
        v16 = (void **)__b[0];
      v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v6 + 96))(v6, v16, v12);
      v18 = v17;
      if (SHIBYTE(__b[2]) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12)
          return 0;
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(_QWORD *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_1BF35F45C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<LogInfo,std::allocator<LogInfo>,std::string const&,abm::helper::SystemLogsMode &,std::string const&,void>(uint64_t a1@<X1>, int *a2@<X2>, uint64_t a3@<X3>, std::string **a4@<X8>)
{
  std::string *v8;
  std::string *v9;
  std::string *v10;
  int v11;
  std::string *v12;

  v8 = (std::string *)operator new(0x50uLL);
  v9 = v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78FC790;
  v10 = v8 + 1;
  v11 = *a2;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8 + 1, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    v8[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  LODWORD(v9[2].__r_.__value_.__l.__data_) = v11;
  v12 = (std::string *)((char *)v9 + 56);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9[3].__r_.__value_.__r.__words[0] = *(_QWORD *)(a3 + 16);
  }
  *a4 = v10;
  a4[1] = v9;
}

void sub_1BF35F540(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  if (*(char *)(v1 + 47) < 0)
  {
    operator delete(*v2);
    std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
    operator delete(v4);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LogInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E78FC790;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LogInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E78FC790;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<LogInfo>::__on_zero_shared(uint64_t a1)
{
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(*(void **)(a1 + 24));
    return;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_5;
}

uint64_t **std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  const void *v9;
  size_t v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  int v20;
  _QWORD *v21;
  std::string *v22;
  __int128 *v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t *v26;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    if (v8 >= 0)
      v10 = *((unsigned __int8 *)a2 + 23);
    else
      v10 = (size_t)a2[1];
    while (1)
    {
      v11 = (uint64_t **)v6;
      v14 = (const void *)v6[4];
      v12 = v6 + 4;
      v13 = v14;
      v15 = *((char *)v12 + 23);
      if (v15 >= 0)
        v16 = v12;
      else
        v16 = v13;
      if (v15 >= 0)
        v17 = *((unsigned __int8 *)v12 + 23);
      else
        v17 = v12[1];
      if (v17 >= v10)
        v18 = v10;
      else
        v18 = v17;
      v19 = memcmp(v9, v16, v18);
      if (v19)
      {
        if (v19 < 0)
          goto LABEL_8;
LABEL_22:
        v20 = memcmp(v16, v9, v18);
        if (v20)
        {
          if ((v20 & 0x80000000) == 0)
            return v11;
        }
        else if (v17 >= v10)
        {
          return v11;
        }
        v6 = v11[1];
        if (!v6)
        {
          v7 = v11 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v10 >= v17)
          goto LABEL_22;
LABEL_8:
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_29;
      }
    }
  }
  v11 = a1 + 1;
LABEL_29:
  v21 = operator new(0x48uLL);
  v22 = (std::string *)(v21 + 4);
  v23 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)v23, *((_QWORD *)v23 + 1));
  }
  else
  {
    v24 = *v23;
    v21[6] = *((_QWORD *)v23 + 2);
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v24;
  }
  v21[7] = 0;
  v21[8] = 0;
  *v21 = 0;
  v21[1] = 0;
  v21[2] = v11;
  *v7 = v21;
  v25 = (uint64_t *)**a1;
  v26 = v21;
  if (v25)
  {
    *a1 = v25;
    v26 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v26);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v21;
}

void sub_1BF35F778(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::erase(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = *(_QWORD **)(a2 + 8);
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  else
  {
    v5 = (_QWORD *)a2;
    do
    {
      v4 = (_QWORD *)v5[2];
      v6 = *v4 == (_QWORD)v5;
      v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2)
    *a1 = v4;
  v7 = (uint64_t *)a1[1];
  --a1[2];
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v7, (uint64_t *)a2);
  v8 = *(std::__shared_weak_count **)(a2 + 64);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  if (*(char *)(a2 + 55) < 0)
LABEL_14:
    operator delete(*(void **)(a2 + 32));
LABEL_15:
  operator delete((void *)a2);
  return v4;
}

_QWORD *ABMServer::create_default_global@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  ABMServerInternal *v4;
  _QWORD *result;

  v3 = operator new(0x10uLL);
  *v3 = 0xAAAAAAAAAAAAAAAALL;
  v3[1] = 0xAAAAAAAAAAAAAAAALL;
  v4 = (ABMServerInternal *)operator new(0x130uLL);
  ABMServerInternal::ABMServerInternal(v4);
  std::shared_ptr<ABMServerInternal>::shared_ptr[abi:ne180100]<ABMServerInternal,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1},void>(v3, (uint64_t)v4);
  *a1 = v3;
  result = operator new(0x20uLL);
  *result = off_1E78FCC58;
  result[1] = 0;
  result[2] = 0;
  result[3] = v3;
  a1[1] = result;
  return result;
}

void sub_1BF35F8DC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = (std::__shared_weak_count *)v1[1];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      operator delete(v1);
      _Unwind_Resume(a1);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ABMServer::ABMServer(ABMServer *this)
{
  ABMServerInternal *v2;

  *(_QWORD *)this = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)this + 1) = 0xAAAAAAAAAAAAAAAALL;
  v2 = (ABMServerInternal *)operator new(0x130uLL);
  ABMServerInternal::ABMServerInternal(v2);
  std::shared_ptr<ABMServerInternal>::shared_ptr[abi:ne180100]<ABMServerInternal,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1},void>(this, (uint64_t)v2);
}

{
  ABMServerInternal *v2;

  *(_QWORD *)this = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)this + 1) = 0xAAAAAAAAAAAAAAAALL;
  v2 = (ABMServerInternal *)operator new(0x130uLL);
  ABMServerInternal::ABMServerInternal(v2);
  std::shared_ptr<ABMServerInternal>::shared_ptr[abi:ne180100]<ABMServerInternal,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1},void>(this, (uint64_t)v2);
}

void sub_1BF35F994(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BF35F9E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *ABMServerInternal::create@<X0>(_QWORD *a1@<X8>)
{
  ABMServerInternal *v3;

  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  v3 = (ABMServerInternal *)operator new(0x130uLL);
  ABMServerInternal::ABMServerInternal(v3);
  return std::shared_ptr<ABMServerInternal>::shared_ptr[abi:ne180100]<ABMServerInternal,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1},void>(a1, (uint64_t)v3);
}

void sub_1BF35FA34(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ABMServer::init(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  std::string __p;

  v4 = *a1;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  ABMServerInternal::init(v4, (uint64_t)&__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF35FACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ABMServerInternal::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD v7[6];
  std::string __p;
  _QWORD *v9;
  _QWORD block[6];

  v4 = a1 + 8;
  v5 = MEMORY[0x1E0C809B0];
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN17ABMServerInternal4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKN3abm9OverridesE_block_invoke;
  v7[3] = &__block_descriptor_tmp_6_1;
  v7[4] = a1;
  v7[5] = a3;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v9 = v7;
  block[0] = v5;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_44;
  block[4] = v4;
  block[5] = &v9;
  v6 = *(NSObject **)(a1 + 24);
  if (*(_QWORD *)(a1 + 32))
  {
    dispatch_async_and_wait(v6, block);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  dispatch_sync(v6, block);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_8;
}

BOOL ABMServer::start(ABMServerInternal **this, NSObject *a2)
{
  return ABMServerInternal::start(*this, a2);
}

BOOL ABMServerInternal::start(ABMServerInternal *this, NSObject *a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  NSObject *v8;
  _QWORD v10[6];
  dispatch_group_t group;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  uint8_t buf[8];
  uint64_t v18;
  _QWORD *(*v19)(uint64_t);
  void *v20;
  char *v21;
  _QWORD *v22;

  v4 = *((_QWORD *)this + 14);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I Request to start server", buf, 2u);
  }
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_retain(a2);
    dispatch_group_enter(a2);
    dispatch_release(a2);
  }
  v12 = 0;
  v13 = &v12;
  v14 = 0x2000000000;
  v15 = 0;
  v5 = MEMORY[0x1E0C809B0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1174405120;
  v10[2] = ___ZN17ABMServerInternal5startEP16dispatch_group_s_block_invoke;
  v10[3] = &unk_1E78FC8A8;
  v10[5] = this;
  group = a2;
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_group_enter(a2);
  }
  v10[4] = &v12;
  v16 = v10;
  *(_QWORD *)buf = v5;
  v18 = 0x40000000;
  v19 = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v20 = &__block_descriptor_tmp_44;
  v21 = (char *)this + 8;
  v22 = &v16;
  v6 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 4))
  {
    dispatch_async_and_wait(v6, buf);
    v7 = *((unsigned __int8 *)v13 + 24);
    v8 = group;
    if (!group)
      goto LABEL_13;
  }
  else
  {
    dispatch_sync(v6, buf);
    v7 = *((unsigned __int8 *)v13 + 24);
    v8 = group;
    if (!group)
      goto LABEL_13;
  }
  dispatch_group_leave(v8);
  if (group)
    dispatch_release(group);
LABEL_13:
  _Block_object_dispose(&v12, 8);
  if (a2)
  {
    dispatch_group_leave(a2);
    dispatch_release(a2);
  }
  return v7 != 0;
}

BOOL ABMServer::stop(ABMServerInternal **this, NSObject *a2)
{
  return ABMServerInternal::stop(*this, a2);
}

BOOL ABMServerInternal::stop(ABMServerInternal *this, NSObject *a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  NSObject *v8;
  _QWORD v10[6];
  dispatch_group_t group;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  uint8_t buf[8];
  uint64_t v18;
  _QWORD *(*v19)(uint64_t);
  void *v20;
  char *v21;
  _QWORD *v22;

  v4 = *((_QWORD *)this + 14);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I Request to stop server", buf, 2u);
  }
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_retain(a2);
    dispatch_group_enter(a2);
    dispatch_release(a2);
  }
  v12 = 0;
  v13 = &v12;
  v14 = 0x2000000000;
  v15 = 0;
  v5 = MEMORY[0x1E0C809B0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1174405120;
  v10[2] = ___ZN17ABMServerInternal4stopEP16dispatch_group_s_block_invoke;
  v10[3] = &unk_1E78FC8E0;
  v10[5] = this;
  group = a2;
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_group_enter(a2);
  }
  v10[4] = &v12;
  v16 = v10;
  *(_QWORD *)buf = v5;
  v18 = 0x40000000;
  v19 = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v20 = &__block_descriptor_tmp_44;
  v21 = (char *)this + 8;
  v22 = &v16;
  v6 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 4))
  {
    dispatch_async_and_wait(v6, buf);
    v7 = *((unsigned __int8 *)v13 + 24);
    v8 = group;
    if (!group)
      goto LABEL_13;
  }
  else
  {
    dispatch_sync(v6, buf);
    v7 = *((unsigned __int8 *)v13 + 24);
    v8 = group;
    if (!group)
      goto LABEL_13;
  }
  dispatch_group_leave(v8);
  if (group)
    dispatch_release(group);
LABEL_13:
  _Block_object_dispose(&v12, 8);
  if (a2)
  {
    dispatch_group_leave(a2);
    dispatch_release(a2);
  }
  return v7 != 0;
}

BOOL ABMServer::shutdown(ABMServerInternal **this, NSObject *a2)
{
  return ABMServerInternal::shutdown(*this, a2);
}

BOOL ABMServerInternal::shutdown(ABMServerInternal *this, NSObject *a2)
{
  NSObject *v4;
  NSObject *v5;
  dispatch_group_s *v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  NSObject *v10;
  _QWORD v12[6];
  dispatch_group_t group;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  uint8_t buf[8];
  uint64_t v20;
  _QWORD *(*v21)(uint64_t);
  void *v22;
  char *v23;
  _QWORD *v24;

  v4 = *((_QWORD *)this + 14);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I Request to shutdown server", buf, 2u);
  }
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_retain(a2);
    dispatch_group_enter(a2);
    dispatch_release(a2);
LABEL_5:
    v5 = 0;
    goto LABEL_8;
  }
  v6 = (dispatch_group_s *)dispatch_group_create();
  a2 = v6;
  if (!v6)
    goto LABEL_5;
  dispatch_retain((dispatch_object_t)v6);
  dispatch_group_enter(a2);
  v5 = a2;
LABEL_8:
  v14 = 0;
  v15 = &v14;
  v16 = 0x2000000000;
  v17 = 0;
  v7 = MEMORY[0x1E0C809B0];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 1174405120;
  v12[2] = ___ZN17ABMServerInternal8shutdownEP16dispatch_group_s_block_invoke;
  v12[3] = &unk_1E78FC918;
  v12[4] = &v14;
  v12[5] = this;
  group = a2;
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_group_enter(a2);
  }
  v18 = v12;
  *(_QWORD *)buf = v7;
  v20 = 0x40000000;
  v21 = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v22 = &__block_descriptor_tmp_44;
  v23 = (char *)this + 8;
  v24 = &v18;
  v8 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 4))
  {
    dispatch_async_and_wait(v8, buf);
    v9 = *((unsigned __int8 *)v15 + 24);
    v10 = group;
    if (!group)
      goto LABEL_16;
  }
  else
  {
    dispatch_sync(v8, buf);
    v9 = *((unsigned __int8 *)v15 + 24);
    v10 = group;
    if (!group)
      goto LABEL_16;
  }
  dispatch_group_leave(v10);
  if (group)
    dispatch_release(group);
LABEL_16:
  _Block_object_dispose(&v14, 8);
  if (v5)
    dispatch_release(v5);
  if (a2)
  {
    dispatch_group_leave(a2);
    dispatch_release(a2);
  }
  return v9 != 0;
}

void ABMServer::broadcast(uint64_t *a1, uint64_t a2, const void **a3, const void **a4)
{
  uint64_t v6;
  const void *v7;
  void *v8;
  void *v9;
  const void *v10;
  std::string v11;

  v6 = *a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v7 = *a3;
    v10 = v7;
    if (!v7)
      goto LABEL_6;
    goto LABEL_5;
  }
  v11 = *(std::string *)a2;
  v7 = *a3;
  v10 = v7;
  if (v7)
LABEL_5:
    CFRetain(v7);
LABEL_6:
  if (*a4)
    v8 = _Block_copy(*a4);
  else
    v8 = 0;
  v9 = v8;
  ABMServerInternal::broadcast(v6, (uint64_t)&v11, &v10, &v9);
  if (v8)
    _Block_release(v8);
  if (v7)
    CFRelease(v7);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1BF360204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  const void *v16;

  if (v16)
    _Block_release(v16);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void ABMServerInternal::broadcast(uint64_t a1, uint64_t a2, const void **a3, void **a4)
{
  const void *v7;
  void *v8;
  _QWORD v9[5];
  std::string __p;
  CFTypeRef cf;
  void *aBlock;

  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1174405120;
  v9[2] = ___ZN17ABMServerInternal9broadcastENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke;
  v9[3] = &__block_descriptor_tmp_23;
  v9[4] = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v7 = *a3;
    cf = v7;
    if (!v7)
      goto LABEL_6;
    goto LABEL_5;
  }
  __p = *(std::string *)a2;
  v7 = *a3;
  cf = v7;
  if (v7)
LABEL_5:
    CFRetain(v7);
LABEL_6:
  v8 = *a4;
  if (*a4)
    v8 = _Block_copy(v8);
  aBlock = v8;
  ctu::SharedSynchronizable<ctu::XpcServer>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v9);
  if (aBlock)
    _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void ABMServerInternal::ABMServerInternal(ABMServerInternal *this)
{
  unsigned __int8 v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *shared_owners;
  unint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE v28[16];
  xpc_object_t object;
  __int128 __p;
  void (*v31)(uint64_t);
  void *v32;
  uint64_t *v33;
  _QWORD v34[2];

  *(_QWORD *)this = &off_1E78FC7E0;
  *((_QWORD *)this + 9) = &unk_1E78FC820;
  HIBYTE(v31) = 11;
  strcpy((char *)&__p, "server.main");
  object = xpc_null_create();
  v34[0] = 0;
  ctu::XpcServer::XpcServer();
  xpc_release(object);
  object = 0;
  *(_QWORD *)this = &off_1E78FC7E0;
  *((_QWORD *)this + 9) = &unk_1E78FC820;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v28, "com.apple.telephony.abm", "server.main");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  *(_QWORD *)&__p = MEMORY[0x1E0C809B0];
  *((_QWORD *)&__p + 1) = 0x40000000;
  v31 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v32 = &__block_descriptor_tmp_13_2;
  v33 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v4 = GetABMLogServer(void)::sLogServer;
    v3 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &__p);
    v4 = GetABMLogServer(void)::sLogServer;
    v3 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_6;
  }
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
LABEL_6:
  *((_QWORD *)this + 9) = off_1E78FCC18;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&__p);
  *((_QWORD *)this + 10) = &unk_1E78FB900;
  *((_QWORD *)this + 16) = v4;
  *((_QWORD *)this + 17) = v3;
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v34);
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 - 1, v7));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v34);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v28);
  *(_QWORD *)this = &off_1E78FC7E0;
  *((_QWORD *)this + 9) = &unk_1E78FC820;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 18) = (char *)this + 152;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_DWORD *)this + 48) = 3;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  v10 = (std::__shared_weak_count *)operator new(0x38uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)off_1E78FCCF8;
  Registry::Registry((Registry *)&v10[1]);
  *((_QWORD *)this + 28) = v12;
  *((_QWORD *)this + 29) = v10;
  shared_owners = (std::__shared_weak_count *)v10[1].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      goto LABEL_27;
    do
      v14 = __ldxr(v11);
    while (__stxr(v14 + 1, v11));
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
    v10[1].__vftable = (std::__shared_weak_count_vtbl *)&v10[1];
    v10[1].__shared_owners_ = (uint64_t)v10;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    do
      v17 = __ldxr(v11);
    while (__stxr(v17 + 1, v11));
    v18 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    v10[1].__vftable = (std::__shared_weak_count_vtbl *)&v10[1];
    v10[1].__shared_owners_ = (uint64_t)v10;
  }
  do
    v20 = __ldaxr(v11);
  while (__stlxr(v20 - 1, v11));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_27:
  _ZNSt3__115allocate_sharedB8ne180100I16ABMServerFactoryNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((uint64_t *)&__p);
  v21 = __p;
  *((_OWORD *)this + 15) = __p;
  if (*((_QWORD *)&v21 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = (char *)operator new(0x28uLL);
  *((_QWORD *)v24 + 2) = 0;
  *(_QWORD *)v24 = off_1E7904D88;
  *((_QWORD *)v24 + 1) = 0;
  if (*((_QWORD *)&v21 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
    *(_OWORD *)(v24 + 24) = v21;
    *((_QWORD *)this + 32) = v24 + 24;
    *((_QWORD *)this + 33) = v24;
    do
      v27 = __ldaxr(v25);
    while (__stlxr(v27 - 1, v25));
    if (!v27)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v21 + 1) + 16))(*((_QWORD *)&v21 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v21 + 1));
    }
  }
  else
  {
    *((_QWORD *)v24 + 3) = v21;
    *((_QWORD *)v24 + 4) = 0;
    *((_QWORD *)this + 32) = v24 + 24;
    *((_QWORD *)this + 33) = v24;
  }
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  ctu::LoggerCommonBase::setLogLevel();
}

void sub_1BF36079C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  dispatch_group_t *v6;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1 + 288);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1 + 240);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1 + 224);
  if (*v6)
  {
    dispatch_group_leave(*v6);
    if (*v6)
      dispatch_release(*v6);
  }
  if (*(char *)(v1 + 191) < 0)
    operator delete(*v5);
  std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(*(_QWORD **)(v1 + 152));
  *(_QWORD *)(v1 + 72) = v4;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  ctu::XpcServer::~XpcServer((ctu::XpcServer *)v1);
  _Unwind_Resume(a1);
}

void sub_1BF36084C(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v2 - 80));
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  JUMPOUT(0x1BF36083CLL);
}

void sub_1BF360874()
{
  JUMPOUT(0x1BF36083CLL);
}

void sub_1BF360880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  NSObject *v23;

  v23 = *(NSObject **)(v21 - 80);
  if (v23)
    dispatch_release(v23);
  xpc_release(object);
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1BF360844);
}

const char *ABMServerInternal::getName(ABMServerInternal *this)
{
  return "server.main";
}

void xpc::connection::~connection(xpc_object_t *this)
{
  xpc_release(*this);
  *this = 0;
}

void ABMServerInternal::~ABMServerInternal(ABMServerInternal *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  NSObject *v18;

  *(_QWORD *)this = &off_1E78FC7E0;
  *((_QWORD *)this + 9) = &unk_1E78FC820;
  ABMServerInternal::finishShutdown_sync(this);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *((_QWORD *)this + 25);
  if (v17)
  {
    dispatch_group_leave(v17);
    v18 = *((_QWORD *)this + 25);
    if (v18)
      dispatch_release(v18);
  }
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(*((_QWORD **)this + 19));
  *((_QWORD *)this + 9) = off_1E78FCC18;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  ctu::XpcServer::~XpcServer(this);
}

{
  void *v1;

  ABMServerInternal::~ABMServerInternal(this);
  operator delete(v1);
}

void ABMServerInternal::finishShutdown_sync(ABMServerInternal *this)
{
  _QWORD *v2;
  NSObject *v3;
  xpc_connection_t *Listener_sync;
  NSObject *v5;
  uint8_t v6[16];
  xpc_object_t object;
  dispatch_group_t group;

  v2 = (_QWORD *)((char *)this + 152);
  std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(*((_QWORD **)this + 19));
  *((_QWORD *)this + 18) = v2;
  *((_QWORD *)this + 20) = 0;
  *v2 = 0;
  group = (dispatch_group_t)0xAAAAAAAAAAAAAAAALL;
  ServiceManager::shutdownGlobalServices(*((ServiceManager **)this + 36), &group);
  v3 = group;
  dispatch_group_wait(group, 0xFFFFFFFFFFFFFFFFLL);
  Listener_sync = (xpc_connection_t *)ctu::XpcServer::getListener_sync(this);
  xpc_connection_cancel(*Listener_sync);
  object = xpc_null_create();
  ctu::XpcServer::setListener_sync();
  xpc_release(object);
  object = 0;
  ABMServerInternal::changeState_sync(this, 5);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 34) + 88))(*((_QWORD *)this + 34), 5);
  v5 = *((_QWORD *)this + 14);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "#I --------- ABM shutdown completed ---------", v6, 2u);
  }
  ABMServerInternal::stopRunLoop_sync(this);
  if (v3)
    dispatch_release(v3);
}

void sub_1BF360B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  NSObject *v11;

  xpc_release(object);
  if (v11)
    dispatch_release(v11);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'ABMServerInternal::~ABMServerInternal(ABMServerInternal *this)
{
  ABMServerInternal::~ABMServerInternal((ABMServerInternal *)((char *)this - 72));
}

{
  void *v1;

  ABMServerInternal::~ABMServerInternal((ABMServerInternal *)((char *)this - 72));
  operator delete(v1);
}

void ___ZN17ABMServerInternal4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKN3abm9OverridesE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  capabilities::radio *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __CFNotificationCenter *DarwinNotifyCenter;
  __int128 *v23;
  void **v24;
  char v25;
  __int128 v26;
  void *v27;
  size_t v28;
  NSObject *v29;
  void (***v30)(uint8_t *__return_ptr, _QWORD, uint64_t *);
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  const void *v46;
  void *v47;
  const void *v48;
  NSObject *v49;
  char v50;
  char v51;
  NSObject *v52;
  _BOOL8 v53;
  int v54;
  uint64_t v55;
  __int16 v56[6];
  int v57;
  _QWORD aBlock[5];
  uint64_t v59;
  std::__shared_weak_count *v60;
  xpc_object_t object;
  uint64_t v62[2];
  dispatch_group_t buf[3];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 112);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Request to init server", (uint8_t *)buf, 2u);
  }
  v4 = *(_QWORD *)(v2 + 256);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(std::__shared_weak_count **)(v5 + 24);
  v62[0] = *(_QWORD *)(v5 + 16);
  v62[1] = (uint64_t)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  ABMServerRegistryBuilder::setupQMIServer(v4, (Registry **)(v2 + 224), v62);
  if (v6)
  {
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (capabilities::radio::vendor(v9) == 1)
  {
    v12 = (std::__shared_weak_count *)operator new(0x88uLL);
    v12->__shared_owners_ = 0;
    v13 = (unint64_t *)&v12->__shared_owners_;
    v12->__shared_weak_owners_ = 0;
    v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E78FCD48;
    v14 = v12 + 1;
    BootController::BootController((BootController *)&v12[1]);
    v12[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E78FFB10;
    LOBYTE(v12[5].__shared_owners_) = 1;
    do
      v15 = __ldxr(v13);
    while (__stxr(v15 + 1, v13));
    p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    v12[4].__shared_weak_owners_ = (uint64_t)v14;
    v12[5].__vftable = (std::__shared_weak_count_vtbl *)v12;
    do
      v18 = __ldaxr(v13);
    while (__stlxr(v18 - 1, v13));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    v19 = *(std::__shared_weak_count **)(v2 + 280);
    *(_QWORD *)(v2 + 272) = v14;
    *(_QWORD *)(v2 + 280) = v12;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  ABMServerInternal::startRunLoop_sync((ABMServerInternal *)v2);
  object = xpc_connection_create_mach_service(kABMDefaultServiceName[0], 0, 1uLL);
  if (!object)
    object = xpc_null_create();
  ctu::XpcServer::setListener_sync();
  xpc_release(object);
  object = 0;
  ctu::XpcServer::startListener_sync((ctu::XpcServer *)v2);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kAppleBasebandManagerDaemonReady"), 0, 0, 1u);
  v23 = (__int128 *)(a1 + 48);
  v24 = (void **)(v2 + 168);
  if (v2 + 168 != a1 + 48)
  {
    v25 = *(_BYTE *)(a1 + 71);
    if (*(char *)(v2 + 191) < 0)
    {
      if (v25 >= 0)
        v27 = (void *)(a1 + 48);
      else
        v27 = *(void **)(a1 + 48);
      if (v25 >= 0)
        v28 = *(unsigned __int8 *)(a1 + 71);
      else
        v28 = *(_QWORD *)(a1 + 56);
      std::string::__assign_no_alias<false>(v24, v27, v28);
    }
    else if ((*(_BYTE *)(a1 + 71) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v24, *(void **)(a1 + 48), *(_QWORD *)(a1 + 56));
    }
    else
    {
      v26 = *v23;
      *(_QWORD *)(v2 + 184) = *(_QWORD *)(a1 + 64);
      *(_OWORD *)v24 = v26;
    }
  }
  v29 = *(NSObject **)(v2 + 112);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 71) < 0)
      v23 = *(__int128 **)v23;
    LODWORD(buf[0]) = 136315138;
    *(dispatch_group_t *)((char *)buf + 4) = (dispatch_group_t)v23;
    _os_log_impl(&dword_1BF335000, v29, OS_LOG_TYPE_DEFAULT, "#I host: %s", (uint8_t *)buf, 0xCu);
  }
  ABMServerInternal::changeState_sync(v2, 3u);
  v31 = *(std::__shared_weak_count **)(v2 + 232);
  v30 = *(void (****)(uint8_t *__return_ptr, _QWORD, uint64_t *))(v2 + 240);
  v59 = *(_QWORD *)(v2 + 224);
  v60 = v31;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  (**v30)((uint8_t *)buf, v30, &v59);
  v34 = *(_OWORD *)buf;
  memset(buf, 0, 16);
  v35 = *(std::__shared_weak_count **)(v2 + 296);
  *(_OWORD *)(v2 + 288) = v34;
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)buf[1];
  if (buf[1])
  {
    v39 = (unint64_t *)&buf[1][1];
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v60;
  if (v60)
  {
    v42 = (unint64_t *)&v60->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = *(_QWORD *)(v2 + 288);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN17ABMServerInternal4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKN3abm9OverridesE_block_invoke_3;
  aBlock[3] = &__block_descriptor_tmp_3;
  aBlock[4] = v2;
  v45 = _Block_copy(aBlock);
  v46 = v45;
  if (!v45)
  {
    v48 = *(const void **)(v44 + 184);
    *(_QWORD *)(v44 + 184) = 0;
    if (!v48)
      goto LABEL_66;
    goto LABEL_65;
  }
  v47 = _Block_copy(v45);
  v48 = *(const void **)(v44 + 184);
  *(_QWORD *)(v44 + 184) = v47;
  if (v48)
LABEL_65:
    _Block_release(v48);
LABEL_66:
  if (v46)
    _Block_release(v46);
  (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 288) + 64))(*(_QWORD *)(v2 + 288));
  buf[0] = (dispatch_group_t)0xAAAAAAAAAAAAAAAALL;
  ServiceManager::initializeGlobalServices(*(ServiceManager **)(v2 + 288), buf);
  v49 = buf[0];
  dispatch_group_wait(buf[0], 0xFFFFFFFFFFFFFFFFLL);
  v57 = 6;
  v50 = (*(uint64_t (**)(_QWORD, int *))(**(_QWORD **)(v2 + 272) + 96))(*(_QWORD *)(v2 + 272), &v57);
  if (v57 == 3)
    v51 = v50;
  else
    v51 = 0;
  if ((v51 & 1) == 0)
  {
    v52 = *(NSObject **)(v2 + 112);
    v53 = os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT);
    if (v53)
    {
      v56[0] = 0;
      _os_log_impl(&dword_1BF335000, v52, OS_LOG_TYPE_DEFAULT, "#I Previous shutdown was not clean", (uint8_t *)v56, 2u);
    }
    v54 = capabilities::radio::ice((capabilities::radio *)v53);
    v55 = 72;
    if (v54)
      v55 = 80;
    (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 272) + v55))(*(_QWORD *)(v2 + 272));
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 272) + 88))(*(_QWORD *)(v2 + 272), 3);
  }
  if (v49)
    dispatch_release(v49);
}

void sub_1BF361170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, xpc_object_t object, char a19)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ABMServerInternal::startRunLoop_sync(ABMServerInternal *this)
{
  NSObject *v2;
  NSObject *v3;
  __int128 v4;
  _QWORD v5[5];
  dispatch_object_t object;
  pthread_attr_t buf;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 14);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__sig) = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Starting ABM RunLoop", (uint8_t *)&buf, 2u);
  }
  v3 = dispatch_group_create();
  dispatch_group_enter(v3);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 1174405120;
  v5[2] = ___ZN17ABMServerInternal17startRunLoop_syncEv_block_invoke;
  v5[3] = &__block_descriptor_tmp_11_0;
  v5[4] = this;
  object = v3;
  if (v3)
    dispatch_retain(v3);
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&buf.__opaque[24] = v4;
  *(_OWORD *)&buf.__opaque[40] = v4;
  *(_OWORD *)&buf.__sig = v4;
  *(_OWORD *)&buf.__opaque[8] = v4;
  pthread_attr_init(&buf);
  pthread_attr_set_qos_class_np(&buf, QOS_CLASS_USER_INITIATED, 0);
  pthread_create((pthread_t *)this + 27, &buf, (void *(__cdecl *)(void *))sServerRunLoopMain, v5);
  dispatch_group_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
  if (object)
    dispatch_release(object);
  if (v3)
    dispatch_release(v3);
}

void sub_1BF361340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object)
{
  NSObject *v14;

  if (object)
  {
    dispatch_release(object);
    if (!v14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v14)
  {
    goto LABEL_3;
  }
  dispatch_release(v14);
  _Unwind_Resume(exception_object);
}

void ABMServerInternal::changeState_sync(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  char *v5;
  NSObject *v6;
  dispatch_object_t v7;
  uint8_t buf[4];
  char *v9;
  __int16 v10;
  char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = *(NSObject **)(a1 + 112);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = to_string(*(_DWORD *)(a1 + 192));
    *(_DWORD *)buf = 136315394;
    v9 = v5;
    v10 = 2080;
    v11 = to_string(a2);
    _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I State change: %s -> %s", buf, 0x16u);
  }
  *(_DWORD *)(a1 + 192) = a2;
  v6 = *(NSObject **)(a1 + 200);
  if (v6)
  {
    v7 = *(dispatch_object_t *)(a1 + 200);
    dispatch_retain(v6);
    dispatch_group_enter(v6);
    ABMServerInternal::checkShutdown_sync((ABMServerInternal *)a1, &v7);
    dispatch_group_leave(v6);
    dispatch_release(v6);
  }
}

void sub_1BF361470(_Unwind_Exception *a1)
{
  NSObject *v1;

  dispatch_group_leave(v1);
  dispatch_release(v1);
  _Unwind_Resume(a1);
}

void ___ZN17ABMServerInternal4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKN3abm9OverridesE_block_invoke_3(uint64_t a1, uint64_t a2, void **a3, void **a4)
{
  _QWORD *v6;
  void *v7;
  void *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  char *v13;
  std::string *v14;
  NSObject *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  const void *v20;
  std::string __p;
  void *aBlock[2];

  v6 = *(_QWORD **)(a1 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v7 = *a3;
    aBlock[0] = v7;
    if (!v7)
      goto LABEL_6;
    goto LABEL_5;
  }
  __p = *(std::string *)a2;
  v7 = *a3;
  aBlock[0] = v7;
  if (v7)
LABEL_5:
    CFRetain(v7);
LABEL_6:
  v8 = *a4;
  if (*a4)
    v8 = _Block_copy(v8);
  aBlock[1] = v8;
  v9 = (std::__shared_weak_count *)v6[2];
  if (!v9 || (v10 = v6[1], (v11 = std::__shared_weak_count::lock(v9)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v12 = v11;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = v6;
  v14 = (std::string *)(v13 + 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v13 + 3) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  *((_OWORD *)v13 + 2) = *(_OWORD *)aBlock;
  aBlock[0] = 0;
  aBlock[1] = 0;
  v15 = v6[3];
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  v18 = operator new(0x18uLL);
  *v18 = v13;
  v18[1] = v10;
  v18[2] = v12;
  dispatch_async_f(v15, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableINS1_9XpcServerEE15execute_wrappedIZZZN17ABMServerInternal4initENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEERKN3abm9OverridesEEUb_EUb0_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNS7_10unique_ptrISJ_NS7_14default_deleteISJ_EEEEENUlPvE_8__invokeESS_);
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    v20 = aBlock[1];
    if (!aBlock[1])
      goto LABEL_22;
    goto LABEL_21;
  }
  v20 = aBlock[1];
  if (aBlock[1])
LABEL_21:
    _Block_release(v20);
LABEL_22:
  if (aBlock[0])
    CFRelease(aBlock[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void __copy_helper_block_e8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 48);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void ___ZN17ABMServerInternal5startEP16dispatch_group_s_block_invoke(_QWORD *a1)
{
  uint64_t v1;
  unsigned int v2;
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  void *__dst[2];
  unint64_t v13;

  v1 = a1[5];
  v2 = *(_DWORD *)(v1 + 192);
  if (v2 > 5)
    return;
  if (((1 << v2) & 0x35) != 0)
  {
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
    return;
  }
  if (v2 == 1)
  {
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
    return;
  }
  ABMServerInternal::changeState_sync(a1[5], 0);
  v4 = (const void *)*MEMORY[0x1E0CFB490];
  v5 = strlen((const char *)*MEMORY[0x1E0CFB490]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
  }
  else
  {
    HIBYTE(v13) = v5;
    v7 = __dst;
    if (!v5)
      goto LABEL_15;
  }
  memmove(v7, v4, (size_t)v6);
LABEL_15:
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  ABMServerInternal::broadcastServerState_sync(v1, (uint64_t)__dst);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
  v10 = a1[6];
  v11 = v10;
  if (v10)
  {
    dispatch_retain(v10);
    dispatch_group_enter(v10);
  }
  ABMServerInternal::start_sync(v1, &v11);
  if (v10)
  {
    dispatch_group_leave(v10);
    dispatch_release(v10);
  }
}

void sub_1BF361844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  NSObject *v15;

  if (v15)
  {
    dispatch_group_leave(v15);
    dispatch_release(v15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ABMServerInternal::getState_sync(ABMServerInternal *this)
{
  return *((unsigned int *)this + 48);
}

void ABMServerInternal::broadcastServerState_sync(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v6;
  __CFDictionary *v7;
  const void *v8;
  size_t v9;
  void *v10;
  void **v11;
  CFTypeRef v12;
  uint64_t v13;
  uint64_t v14;
  CFTypeID v15;
  const void *v16;
  void *v17;
  ctu *v18;
  void *__dst[2];
  unint64_t v20;
  CFTypeRef cf;
  std::string v22;

  cf = 0;
  v4 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = Mutable;
  if (Mutable)
    cf = Mutable;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v22 = *(std::string *)a2;
  ctu::cf::insert<char const*,std::string>(v7, (const __CFString **)*MEMORY[0x1E0CFB0E0], (uint64_t)&v22, v4, v6);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  v8 = (const void *)*MEMORY[0x1E0CFB730];
  v9 = strlen((const char *)*MEMORY[0x1E0CFB730]);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v13 = v9 | 7;
    v14 = v13 + 1;
    v11 = (void **)operator new(v13 + 1);
    __dst[1] = v10;
    v20 = v14 | 0x8000000000000000;
    __dst[0] = v11;
LABEL_16:
    memmove(v11, v8, (size_t)v10);
    *((_BYTE *)v10 + (_QWORD)v11) = 0;
    v12 = cf;
    if (!cf)
      goto LABEL_19;
    goto LABEL_17;
  }
  HIBYTE(v20) = v9;
  v11 = __dst;
  if (v9)
    goto LABEL_16;
  LOBYTE(__dst[0]) = 0;
  v12 = cf;
  if (!cf)
    goto LABEL_19;
LABEL_17:
  v15 = CFGetTypeID(v12);
  if (v15 == CFDictionaryGetTypeID())
  {
    v18 = (ctu *)v12;
    CFRetain(v12);
    v16 = v12;
    goto LABEL_20;
  }
LABEL_19:
  v16 = 0;
  v18 = 0;
LABEL_20:
  v17 = 0;
  ABMServerInternal::broadcast_sync(a1, (uint64_t)__dst, &v18, &v17);
  if (v16)
    CFRelease(v16);
  if (SHIBYTE(v20) < 0)
  {
    operator delete(__dst[0]);
    if (!v12)
      return;
  }
  else if (!v12)
  {
    return;
  }
  CFRelease(v12);
}

void sub_1BF361A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0)
  {
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a17);
    _Unwind_Resume(a1);
  }
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a17);
  _Unwind_Resume(a1);
}

void ABMServerInternal::start_sync(uint64_t a1, NSObject **a2)
{
  NSObject *v4;
  void **v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  NSObject *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD block[6];
  std::__shared_weak_count *v20;
  dispatch_group_t group;
  void *__p[2];
  char v23;
  uint8_t buf[4];
  void **v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = *(NSObject **)(a1 + 112);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    abm::asString();
    v5 = v23 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v25 = v5;
    _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I Starting ABM with profile: %s", buf, 0xCu);
    if (v23 < 0)
      operator delete(__p[0]);
  }
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 272) + 88))(*(_QWORD *)(a1 + 272), 0);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 288) + 72))(*(_QWORD *)(a1 + 288));
  __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  ServiceManager::initializeDynamicServices(*(ServiceManager **)(a1 + 288), (NSObject **)__p);
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v6 || (v7 = *(_QWORD *)(a1 + 8), (v8 = std::__shared_weak_count::lock(v6)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  v10 = __p[0];
  v11 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZN17ABMServerInternal10start_syncEN8dispatch13group_sessionE_block_invoke;
  block[3] = &__block_descriptor_tmp_12_1;
  block[4] = a1;
  block[5] = v7;
  v20 = v8;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v14 = *a2;
  group = v14;
  if (v14)
  {
    dispatch_retain(v14);
    dispatch_group_enter(v14);
  }
  dispatch_group_notify(v10, v11, block);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  v15 = v20;
  if (v20)
  {
    v16 = (unint64_t *)&v20->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p[0])
    dispatch_release((dispatch_object_t)__p[0]);
}

void sub_1BF361D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, dispatch_object_t object)
{
  if (object)
  {
    dispatch_release(object);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_48c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;

  v3 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    v4 = *(NSObject **)(a1 + 48);
    if (v4)
      dispatch_group_enter(v4);
  }
}

void __destroy_helper_block_e8_48c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 48);
    if (v3)
      dispatch_release(v3);
  }
}

void ___ZN17ABMServerInternal4stopEP16dispatch_group_s_block_invoke(_QWORD *a1)
{
  uint64_t v1;
  unsigned int v2;
  char v4;
  const void *v5;
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  void *__dst[2];
  unint64_t v14;

  v1 = a1[5];
  v2 = *(_DWORD *)(v1 + 192);
  if (v2 <= 5)
  {
    v4 = 1;
    if (((1 << v2) & 0x15) != 0)
    {
      v4 = 0;
LABEL_20:
      *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = v4;
      return;
    }
    if (((1 << v2) & 0x28) != 0)
      goto LABEL_20;
    ABMServerInternal::changeState_sync(a1[5], 2u);
    v5 = (const void *)*MEMORY[0x1E0CFB498];
    v6 = strlen((const char *)*MEMORY[0x1E0CFB498]);
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v7 = (void *)v6;
    if (v6 >= 0x17)
    {
      v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v9 = v6 | 7;
      v10 = v9 + 1;
      v8 = (void **)operator new(v9 + 1);
      __dst[1] = v7;
      v14 = v10 | 0x8000000000000000;
      __dst[0] = v8;
    }
    else
    {
      HIBYTE(v14) = v6;
      v8 = __dst;
      if (!v6)
        goto LABEL_13;
    }
    memmove(v8, v5, (size_t)v7);
LABEL_13:
    *((_BYTE *)v7 + (_QWORD)v8) = 0;
    ABMServerInternal::broadcastServerState_sync(v1, (uint64_t)__dst);
    if (SHIBYTE(v14) < 0)
      operator delete(__dst[0]);
    v11 = a1[6];
    v12 = v11;
    if (v11)
    {
      dispatch_retain(v11);
      dispatch_group_enter(v11);
    }
    ABMServerInternal::stop_sync(v1, &v12);
    if (v11)
    {
      dispatch_group_leave(v11);
      dispatch_release(v11);
    }
    v4 = 1;
    goto LABEL_20;
  }
}

void sub_1BF361F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  NSObject *v15;

  if (v15)
  {
    dispatch_group_leave(v15);
    dispatch_release(v15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ABMServerInternal::stop_sync(uint64_t a1, NSObject **a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD block[6];
  std::__shared_weak_count *v18;
  dispatch_group_t group;
  NSObject *v20;

  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 272) + 88))(*(_QWORD *)(a1 + 272), 2);
  v20 = 0xAAAAAAAAAAAAAAAALL;
  ServiceManager::shutdownDynamicServices(*(ServiceManager **)(a1 + 288), &v20);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4 || (v5 = *(_QWORD *)(a1 + 8), (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = v20;
  v9 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZN17ABMServerInternal9stop_syncEN8dispatch13group_sessionE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_1;
  block[4] = a1;
  block[5] = v5;
  v18 = v6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = *a2;
  group = v12;
  if (v12)
  {
    dispatch_retain(v12);
    dispatch_group_enter(v12);
  }
  dispatch_group_notify(v8, v9, block);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  v13 = v18;
  if (v18)
  {
    v14 = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (v20)
    dispatch_release(v20);
}

void sub_1BF3620DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  NSObject *v3;

  v3 = *(NSObject **)(v1 - 56);
  if (v3)
    dispatch_release(v3);
  _Unwind_Resume(exception_object);
}

void ___ZN17ABMServerInternal8shutdownEP16dispatch_group_s_block_invoke(_QWORD *a1)
{
  NSObject *v2;
  ABMServerInternal *v3;
  dispatch_object_t v4;

  v3 = (ABMServerInternal *)a1[5];
  v2 = a1[6];
  v4 = v2;
  if (v2)
  {
    dispatch_retain(v2);
    dispatch_group_enter(v2);
  }
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = ABMServerInternal::checkShutdown_sync(v3, &v4);
  if (v2)
  {
    dispatch_group_leave(v2);
    dispatch_release(v2);
  }
}

void sub_1BF362178(_Unwind_Exception *exception_object)
{
  NSObject *v1;

  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ABMServerInternal::checkShutdown_sync(ABMServerInternal *this, dispatch_object_t *a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  const void *v7;
  size_t v8;
  void *v9;
  void **v10;
  NSObject *v11;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  void *__dst[2];
  unint64_t v17;

  switch(*((_DWORD *)this + 48))
  {
    case 0:
    case 2:
      v4 = *a2;
      if (*a2)
      {
        dispatch_retain(*a2);
        dispatch_group_enter(v4);
      }
      v5 = *((_QWORD *)this + 25);
      *((_QWORD *)this + 25) = v4;
      if (!v5)
        return 1;
      dispatch_group_leave(v5);
      v6 = v5;
      goto LABEL_25;
    case 1:
      ABMServerInternal::changeState_sync(this, 4);
      v7 = (const void *)*MEMORY[0x1E0CFB498];
      v8 = strlen((const char *)*MEMORY[0x1E0CFB498]);
      if (v8 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v9 = (void *)v8;
      if (v8 >= 0x17)
      {
        v13 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v8 | 7) != 0x17)
          v13 = v8 | 7;
        v14 = v13 + 1;
        v10 = (void **)operator new(v13 + 1);
        __dst[1] = v9;
        v17 = v14 | 0x8000000000000000;
        __dst[0] = v10;
      }
      else
      {
        HIBYTE(v17) = v8;
        v10 = __dst;
        if (!v8)
          goto LABEL_19;
      }
      memmove(v10, v7, (size_t)v9);
LABEL_19:
      *((_BYTE *)v9 + (_QWORD)v10) = 0;
      ABMServerInternal::broadcastServerState_sync((uint64_t)this, (uint64_t)__dst);
      if (SHIBYTE(v17) < 0)
        operator delete(__dst[0]);
      v11 = *a2;
      v15 = v11;
      if (v11)
      {
        dispatch_retain(v11);
        dispatch_group_enter(v11);
      }
      ABMServerInternal::shutdown_sync((uint64_t)this, &v15);
      if (v11)
      {
LABEL_24:
        dispatch_group_leave(v11);
        v6 = v11;
LABEL_25:
        dispatch_release(v6);
      }
      return 1;
    case 3:
      ABMServerInternal::finishShutdown_sync(this);
      v11 = *((_QWORD *)this + 25);
      *((_QWORD *)this + 25) = 0;
      if (!v11)
        return 1;
      goto LABEL_24;
    case 4:
      return 0;
    case 5:
      v11 = *((_QWORD *)this + 25);
      *((_QWORD *)this + 25) = 0;
      if (!v11)
        return 1;
      goto LABEL_24;
    default:
      return 1;
  }
}

void sub_1BF36235C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  NSObject *v15;

  if (v15)
  {
    dispatch_group_leave(v15);
    dispatch_release(v15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ABMServerInternal::getRunLoop(ABMServerInternal *this)
{
  return *((_QWORD *)this + 26);
}

void ABMServerInternal::shutdown_sync(uint64_t a1, NSObject **a2)
{
  NSObject *v4;
  NSObject *v5;

  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 272) + 88))(*(_QWORD *)(a1 + 272), 4);
  v4 = *a2;
  v5 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  ABMServerInternal::stop_sync(a1, &v5);
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
}

void sub_1BF362424(_Unwind_Exception *exception_object)
{
  NSObject *v1;

  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

char *to_string(unsigned int a1)
{
  NSObject *v3;
  NSObject *v4;
  uint64_t v5[2];
  uint64_t v6[2];
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a1 >= 6)
  {
    GetABMLogServer(v6);
    v3 = *((_QWORD *)GetGlobalLogger(v6) + 4);
    std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)v6);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v8) = a1;
      _os_log_fault_impl(&dword_1BF335000, v3, OS_LOG_TYPE_FAULT, "Unknown server state %d", buf, 8u);
    }
    GetABMLogServer(v5);
    v4 = *((_QWORD *)GetGlobalLogger(v5) + 4);
    std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)v5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315906;
      v8 = "ABM ASSERT";
      v9 = 2080;
      v10 = "false";
      v11 = 2080;
      v12 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Ser"
            "ver/ABMServer.cpp";
      v13 = 1024;
      v14 = 85;
      _os_log_fault_impl(&dword_1BF335000, v4, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", buf, 0x26u);
    }
    __break(1u);
  }
  return off_1E78FCDE0[a1];
}

void sub_1BF3625A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF3625BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN17ABMServerInternal17startRunLoop_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *(_QWORD *)(a1 + 32);
  pthread_setname_np("ABM.Server.RunLoop");
  pthread_set_qos_class_self_np(QOS_CLASS_DEFAULT, 0);
  *(_QWORD *)(v2 + 208) = CFRunLoopGetCurrent();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  v3 = *(NSObject **)(v2 + 112);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I ABM RunLoop Started", v4, 2u);
  }
}

void __copy_helper_block_e8_40c21_ZTSN8dispatch5groupE(uint64_t a1, uint64_t a2)
{
  NSObject *v3;

  v3 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (v3)
    dispatch_retain(v3);
}

void __destroy_helper_block_e8_40c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  NSObject *v1;

  v1 = *(NSObject **)(a1 + 40);
  if (v1)
    dispatch_release(v1);
}

uint64_t sServerRunLoopMain(void (**a1)(_QWORD))
{
  CFRunLoopSourceRef v2;
  __CFRunLoopSource *v3;
  __CFRunLoop *Current;
  const __CFString *v5;
  __CFRunLoop *v6;
  unsigned __int8 v8;
  NSObject *v9;
  uint8_t v10[16];
  CFRunLoopSourceContext context;

  memset(&context, 0, sizeof(context));
  v2 = CFRunLoopSourceCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &context);
  if (v2)
  {
    v3 = v2;
    Current = CFRunLoopGetCurrent();
    v5 = (const __CFString *)*MEMORY[0x1E0C9B280];
    CFRunLoopAddSource(Current, v3, (CFRunLoopMode)*MEMORY[0x1E0C9B280]);
    a1[2](a1);
    while ((CFRunLoopRunInMode(v5, 1.79769313e308, 1u) - 1) > 1)
      ;
    v6 = CFRunLoopGetCurrent();
    CFRunLoopRemoveSource(v6, v3, v5);
    CFRelease(v3);
    return 0;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED7100E0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
  }
  if (GetOsLogContext(void)::onceToken != -1)
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
    v9 = qword_1ED7100E0;
    if (os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_DEFAULT))
      goto LABEL_9;
    return 0;
  }
  v9 = qword_1ED7100E0;
  if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_DEFAULT))
    return 0;
LABEL_9:
  *(_WORD *)v10 = 0;
  _os_log_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEFAULT, "Failed to create dummySource for runloop", v10, 2u);
  return 0;
}

void ABMServerInternal::stopRunLoop_sync(ABMServerInternal *this)
{
  NSObject *v2;
  int v3;
  NSObject *v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 14);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v5[0]) = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Stopping ABM RunLoop", (uint8_t *)v5, 2u);
  }
  usleep(0x7A120u);
  CFRunLoopStop(*((CFRunLoopRef *)this + 26));
  *((_QWORD *)this + 26) = 0;
  v3 = pthread_join(*((pthread_t *)this + 27), 0);
  *((_QWORD *)this + 27) = 0;
  v4 = *((_QWORD *)this + 14);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I Stopped ABM RunLoop: %d", (uint8_t *)v5, 8u);
  }
}

uint64_t ABMServer::getProfile(ABMServer *this)
{
  return 3;
}

uint64_t ___ZN17ABMServerInternal10start_syncEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  size_t v3;
  void *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  void *__dst[2];
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 32);
  ABMServerInternal::changeState_sync(v1, 1u);
  v2 = (const void *)*MEMORY[0x1E0CFB380];
  v3 = strlen((const char *)*MEMORY[0x1E0CFB380]);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    v5 = (void **)operator new(v6 + 1);
    __dst[1] = v4;
    v10 = v7 | 0x8000000000000000;
    __dst[0] = v5;
    goto LABEL_8;
  }
  HIBYTE(v10) = v3;
  v5 = __dst;
  if (v3)
LABEL_8:
    memmove(v5, v2, (size_t)v4);
  *((_BYTE *)v4 + (_QWORD)v5) = 0;
  ABMServerInternal::broadcastServerState_sync(v1, (uint64_t)__dst);
  if (SHIBYTE(v10) < 0)
    operator delete(__dst[0]);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 272) + 88))(*(_QWORD *)(v1 + 272), 1);
}

void sub_1BF362A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c42_ZTSNSt3__110shared_ptrIN3ctu9XpcServerEEE56c30_ZTSN8dispatch13group_sessionE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  NSObject *v6;
  NSObject *v7;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a2[7];
  a1[7] = v6;
  if (v6)
  {
    dispatch_retain(v6);
    v7 = a1[7];
    if (v7)
      dispatch_group_enter(v7);
  }
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__110shared_ptrIN3ctu9XpcServerEEE56c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 56);
    if (v3)
      dispatch_release(v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void ___ZN17ABMServerInternal9stop_syncEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  ABMServerInternal *v2;
  std::error_code *v3;
  NSObject *v4;
  const void *v5;
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  size_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  ctu *v18;
  void *__p[2];
  unint64_t v20;
  void *__dst[2];
  unint64_t v22;
  std::__fs::filesystem::path buf;

  v2 = *(ABMServerInternal **)(a1 + 32);
  v1 = (uint64_t)v2;
  if (*((_DWORD *)v2 + 48) == 4)
  {
    ABMServerInternal::finishShutdown_sync(v2);
  }
  else
  {
    ABMServerInternal::changeState_sync(v2, 3);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 272) + 88))(*(_QWORD *)(v1 + 272), 3);
    v4 = *(NSObject **)(v1 + 112);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__pn_.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I --------- ABM stop completed ---------", (uint8_t *)&buf, 2u);
    }
  }
  *((_BYTE *)&buf.__pn_.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&buf, "/tmp/abm.shutdown");
  if (remove(&buf, v3))
    unlink((const char *)&buf);
  v5 = (const void *)*MEMORY[0x1E0CFB388];
  v6 = strlen((const char *)*MEMORY[0x1E0CFB388]);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    v22 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_14;
  }
  HIBYTE(v22) = v6;
  v8 = __dst;
  if (v6)
LABEL_14:
    memmove(v8, v5, (size_t)v7);
  *((_BYTE *)v7 + (_QWORD)v8) = 0;
  ABMServerInternal::broadcastServerState_sync(v1, (uint64_t)__dst);
  if (SHIBYTE(v22) < 0)
    operator delete(__dst[0]);
  v11 = (const void *)*MEMORY[0x1E0CFB3B8];
  v12 = strlen((const char *)*MEMORY[0x1E0CFB3B8]);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = (void *)v12;
  if (v12 >= 0x17)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v15 = v12 | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    __p[1] = v13;
    v20 = v16 | 0x8000000000000000;
    __p[0] = v14;
    goto LABEL_24;
  }
  HIBYTE(v20) = v12;
  v14 = __p;
  if (v12)
LABEL_24:
    memmove(v14, v11, (size_t)v13);
  *((_BYTE *)v13 + (_QWORD)v14) = 0;
  v17 = 0;
  v18 = 0;
  ABMServerInternal::broadcast_sync(v1, (uint64_t)__p, &v18, &v17);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
}

void sub_1BF362D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(a1);
}

void ABMServerInternal::finishStop_sync(ABMServerInternal *this)
{
  NSObject *v2;
  uint8_t v3[16];

  ABMServerInternal::changeState_sync((uint64_t)this, 3u);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 34) + 88))(*((_QWORD *)this + 34), 3);
  v2 = *((_QWORD *)this + 14);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I --------- ABM stop completed ---------", v3, 2u);
  }
}

_QWORD *ABMServerInternal::getClientState_sync@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  *a3 = 0;
  a3[1] = 0;
  v5 = *(_QWORD **)(a1 + 152);
  result = (_QWORD *)(a1 + 152);
  v4 = v5;
  if (v5)
  {
    v6 = *a2;
    v7 = result;
    do
    {
      v8 = v4[4];
      v9 = v8 >= v6;
      if (v8 >= v6)
        v10 = v4;
      else
        v10 = v4 + 1;
      if (v9)
        v7 = v4;
      v4 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v7 != result && v6 >= v7[4])
    {
      v12 = v7[5];
      v11 = v7[6];
      if (v11)
      {
        v13 = (unint64_t *)(v11 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      *a3 = v12;
      a3[1] = v11;
    }
  }
  return result;
}

void ABMServerInternal::handleServerError_sync(uint64_t a1, xpc::object *a2)
{
  int v2;
  NSObject *v5;
  void *p_p;
  void *__p;
  char v8;
  uint8_t buf[4];
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 192);
  if (v2 != 3 && v2 != 5)
  {
    v5 = *(NSObject **)(a1 + 112);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      xpc::object::to_string(a2);
      if (v8 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      *(_DWORD *)buf = 136315138;
      v10 = p_p;
      _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "#I Server error: %s", buf, 0xCu);
      if (v8 < 0)
        operator delete(__p);
    }
  }
}

void ABMServerInternal::handleNewClient_sync(uint64_t a1@<X0>, xpc::object *a2@<X1>, const void **a3@<X8>)
{
  NSObject *v6;
  char *v7;
  size_t v8;
  void *v9;
  void *v10;
  std::string *v11;
  std::string *v12;
  _QWORD *v13;
  NSObject *v14;
  char *v15;
  size_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void **v22;
  char *v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t *v28;
  uint64_t **v29;
  unint64_t v30;
  uint64_t **v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  void *v44;
  const void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD v49[5];
  void *__p[3];
  _BYTE buf[22];
  uint8_t v52[4];
  void **v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  if ((*(_DWORD *)(a1 + 192) & 0xFFFFFFFE) == 4)
  {
    v6 = *(NSObject **)(a1 + 112);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      return;
    v7 = (char *)MEMORY[0x1C3B8A7D0](*(_QWORD *)a2);
    memset(__p, 170, sizeof(__p));
    v8 = strlen(v7);
    if (v8 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v19 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v19 = v8 | 7;
      v20 = v19 + 1;
      v10 = operator new(v19 + 1);
      __p[1] = v9;
      __p[2] = (void *)(v20 | 0x8000000000000000);
      __p[0] = v10;
    }
    else
    {
      HIBYTE(__p[2]) = v8;
      v10 = __p;
      if (!v8)
        goto LABEL_22;
    }
    memcpy(v10, v7, (size_t)v9);
LABEL_22:
    *((_BYTE *)v9 + (_QWORD)v10) = 0;
    free(v7);
    v21 = SHIBYTE(__p[2]);
    v22 = (void **)__p[0];
    v23 = to_string(*(_DWORD *)(a1 + 192));
    v24 = __p;
    if (v21 < 0)
      v24 = v22;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v24;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v23;
    _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, "#I Rejecting new client %s because server state is '%s'", buf, 0x16u);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    return;
  }
  xpc::object::to_string(a2);
  v11 = (std::string *)operator new(0x38uLL);
  v12 = v11;
  if (SHIBYTE(__p[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v11->__r_.__value_.__r.__words[2] = (std::string::size_type)__p[2];
  }
  v12[1].__r_.__value_.__s.__data_[0] = 0;
  v12[2].__r_.__value_.__r.__words[0] = 0;
  v12[1].__r_.__value_.__r.__words[2] = 0;
  v12[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v12[1].__r_.__value_.__r.__words[2];
  *(_QWORD *)buf = v12;
  v13 = operator new(0x20uLL);
  *v13 = off_1E7907298;
  v13[1] = 0;
  v13[2] = 0;
  v13[3] = v12;
  *(_QWORD *)&buf[8] = v13;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    v14 = *(NSObject **)(a1 + 112);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      goto LABEL_33;
  }
  else
  {
    v14 = *(NSObject **)(a1 + 112);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      goto LABEL_33;
  }
  v15 = (char *)MEMORY[0x1C3B8A7D0](*(_QWORD *)a2);
  memset(__p, 170, sizeof(__p));
  v16 = strlen(v15);
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v17 = (void *)v16;
  if (v16 >= 0x17)
  {
    v25 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v25 = v16 | 7;
    v26 = v25 + 1;
    v18 = operator new(v25 + 1);
    __p[1] = v17;
    __p[2] = (void *)(v26 | 0x8000000000000000);
    __p[0] = v18;
    goto LABEL_29;
  }
  HIBYTE(__p[2]) = v16;
  v18 = __p;
  if (v16)
LABEL_29:
    memcpy(v18, v15, (size_t)v17);
  *((_BYTE *)v17 + (_QWORD)v18) = 0;
  free(v15);
  v27 = __p;
  if (SHIBYTE(__p[2]) < 0)
    v27 = (void **)__p[0];
  *(_DWORD *)v52 = 136315138;
  v53 = v27;
  _os_log_impl(&dword_1BF335000, v14, OS_LOG_TYPE_DEFAULT, "#I New client: %s", v52, 0xCu);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    v29 = (uint64_t **)(a1 + 152);
    v28 = *(uint64_t **)(a1 + 152);
    if (v28)
      goto LABEL_34;
    goto LABEL_43;
  }
LABEL_33:
  v29 = (uint64_t **)(a1 + 152);
  v28 = *(uint64_t **)(a1 + 152);
  if (v28)
  {
LABEL_34:
    v30 = *(_QWORD *)a2;
    while (1)
    {
      while (1)
      {
        v31 = (uint64_t **)v28;
        v32 = v28[4];
        if (v30 >= v32)
          break;
        v28 = *v31;
        v29 = v31;
        if (!*v31)
          goto LABEL_44;
      }
      if (v32 >= v30)
        break;
      v28 = v31[1];
      if (!v28)
      {
        v29 = v31 + 1;
        goto LABEL_44;
      }
    }
    v33 = (uint64_t *)v31;
    v35 = *(_QWORD *)buf;
    v34 = *(_QWORD *)&buf[8];
    if (!*(_QWORD *)&buf[8])
      goto LABEL_52;
    goto LABEL_50;
  }
LABEL_43:
  v31 = v29;
LABEL_44:
  v33 = (uint64_t *)operator new(0x38uLL);
  v36 = *(void **)a2;
  v33[4] = *(_QWORD *)a2;
  if (v36)
    xpc_retain(v36);
  else
    v33[4] = (uint64_t)xpc_null_create();
  v33[5] = 0;
  v33[6] = 0;
  *v33 = 0;
  v33[1] = 0;
  v33[2] = (uint64_t)v31;
  *v29 = v33;
  v37 = **(_QWORD **)(a1 + 144);
  v38 = v33;
  if (v37)
  {
    *(_QWORD *)(a1 + 144) = v37;
    v38 = *v29;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 152), v38);
  ++*(_QWORD *)(a1 + 160);
  v35 = *(_QWORD *)buf;
  v34 = *(_QWORD *)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_52;
LABEL_50:
  v39 = (unint64_t *)(v34 + 8);
  do
    v40 = __ldxr(v39);
  while (__stxr(v40 + 1, v39));
LABEL_52:
  v41 = (std::__shared_weak_count *)v33[6];
  v33[5] = v35;
  v33[6] = v34;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v49[0] = MEMORY[0x1E0C809B0];
  v49[1] = 0x40000000;
  v49[2] = ___ZN17ABMServerInternal20handleNewClient_syncEN3xpc10connectionE_block_invoke;
  v49[3] = &__block_descriptor_tmp_15_0;
  v49[4] = a1;
  v44 = _Block_copy(v49);
  v45 = *a3;
  *a3 = v44;
  if (v45)
    _Block_release(v45);
  v46 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v47 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_1BF363460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  const void **v20;
  void *v21;

  operator delete(v21);
  if (a19 < 0)
    operator delete(__p);
  if (*v20)
    _Block_release(*v20);
  _Unwind_Resume(a1);
}

void ABMServerInternal::handleClientError_sync(_QWORD *a1, xpc_object_t *a2, xpc::object *a3)
{
  xpc_object_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  __int128 *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  _BOOL4 v23;
  void **v24;
  std::string *v25;
  NSObject *v26;
  void **v27;
  _QWORD *v28;
  xpc_object_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  _QWORD *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  void **v36;
  const char *v37;
  unint64_t *v38;
  unint64_t v39;
  void **v40;
  void *__p[4];
  __int128 *v42;
  std::__shared_weak_count *v43;
  std::string v44;
  std::string v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v42 = 0;
    v43 = 0;
    v8 = a1 + 19;
    v7 = (_QWORD *)a1[19];
    if (!v7)
      goto LABEL_15;
  }
  else
  {
    v6 = xpc_null_create();
    v42 = 0;
    v43 = 0;
    v8 = a1 + 19;
    v7 = (_QWORD *)a1[19];
    if (!v7)
    {
LABEL_15:
      v13 = 0;
      v14 = 0;
      goto LABEL_16;
    }
  }
  v9 = v8;
  do
  {
    v10 = v7[4];
    v11 = v10 >= (unint64_t)v6;
    if (v10 >= (unint64_t)v6)
      v12 = v7;
    else
      v12 = v7 + 1;
    if (v11)
      v9 = v7;
    v7 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v9 == v8 || (unint64_t)v6 < v9[4])
    goto LABEL_15;
  v14 = (__int128 *)v9[5];
  v13 = (std::__shared_weak_count *)v9[6];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v35 = __ldxr(p_shared_owners);
    while (__stxr(v35 + 1, p_shared_owners));
  }
  v42 = v14;
  v43 = v13;
LABEL_16:
  xpc_release(v6);
  if (!v14)
    goto LABEL_63;
  memset(__p, 170, 24);
  if (*((char *)v14 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
  }
  else
  {
    v15 = *v14;
    v44.__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v15;
  }
  v16 = std::string::insert(&v44, 0, "Client '", 8uLL);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v45, "'", 1uLL);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  __p[2] = (void *)v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v45.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_22:
      v20 = *(_QWORD *)a3;
      if (*(_QWORD *)a3 != MEMORY[0x1E0C81260])
        goto LABEL_23;
LABEL_36:
      v26 = a1[14];
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        v27 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v27 = (void **)__p[0];
        LODWORD(v45.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v45.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        _os_log_impl(&dword_1BF335000, v26, OS_LOG_TYPE_DEFAULT, "#I %s disappeared", (uint8_t *)&v45, 0xCu);
      }
      v28 = (_QWORD *)a1[19];
      if (v28)
      {
        v29 = *a2;
        v30 = (uint64_t)v8;
        do
        {
          v31 = v28[4];
          v32 = v31 >= (unint64_t)v29;
          if (v31 >= (unint64_t)v29)
            v33 = v28;
          else
            v33 = v28 + 1;
          if (v32)
            v30 = (uint64_t)v28;
          v28 = (_QWORD *)*v33;
        }
        while (*v33);
        if ((_QWORD *)v30 != v8 && (unint64_t)v29 >= *(_QWORD *)(v30 + 32))
          std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::erase(a1 + 18, v30);
      }
      goto LABEL_61;
    }
  }
  else if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_22;
  }
  operator delete(v44.__r_.__value_.__l.__data_);
  v20 = *(_QWORD *)a3;
  if (*(_QWORD *)a3 == MEMORY[0x1E0C81260])
    goto LABEL_36;
LABEL_23:
  if (v20 == MEMORY[0x1E0C81258])
  {
    v22 = a1[14];
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      goto LABEL_61;
    v36 = __p;
    if (SHIBYTE(__p[2]) < 0)
      v36 = (void **)__p[0];
    LODWORD(v45.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v45.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
    v37 = "#D %s connection interrupted";
  }
  else
  {
    v21 = MEMORY[0x1E0C81288];
    v22 = a1[14];
    v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG);
    if (v20 != v21)
    {
      if (v23)
      {
        xpc::object::to_string(a3);
        v24 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v24 = (void **)__p[0];
        v25 = (v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v45
            : (std::string *)v45.__r_.__value_.__r.__words[0];
        LODWORD(v44.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v44.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
        WORD2(v44.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v44.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v25;
        _os_log_debug_impl(&dword_1BF335000, v22, OS_LOG_TYPE_DEBUG, "#D %s %s", (uint8_t *)&v44, 0x16u);
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v45.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
            goto LABEL_63;
          goto LABEL_62;
        }
      }
LABEL_61:
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        goto LABEL_63;
      goto LABEL_62;
    }
    if (!v23)
      goto LABEL_61;
    v40 = __p;
    if (SHIBYTE(__p[2]) < 0)
      v40 = (void **)__p[0];
    LODWORD(v45.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v45.__r_.__value_.__r.__words + 4) = (std::string::size_type)v40;
    v37 = "#D %s will be terminated";
  }
  _os_log_debug_impl(&dword_1BF335000, v22, OS_LOG_TYPE_DEBUG, v37, (uint8_t *)&v45, 0xCu);
  if (SHIBYTE(__p[2]) < 0)
LABEL_62:
    operator delete(__p[0]);
LABEL_63:
  if (v13)
  {
    v38 = (unint64_t *)&v13->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1BF363940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1BF36399C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

const void **ctu::cf::CFSharedRef<void const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void ABMServerInternal::registerNotification(uint64_t a1, void **a2, char a3, const void **a4)
{
  void *v7;
  const void *v8;
  _QWORD v9[5];
  xpc_object_t object;
  CFTypeRef cf;
  char v12;

  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1174405120;
  v9[2] = ___ZN17ABMServerInternal20registerNotificationEN3xpc10connectionEbN3ctu2cf11CFSharedRefIK9__CFArrayEE_block_invoke;
  v9[3] = &__block_descriptor_tmp_22;
  v7 = *a2;
  v9[4] = a1;
  object = v7;
  if (!v7)
  {
    object = xpc_null_create();
    v12 = a3;
    v8 = *a4;
    cf = v8;
    if (!v8)
      goto LABEL_6;
    goto LABEL_5;
  }
  xpc_retain(v7);
  v12 = a3;
  v8 = *a4;
  cf = v8;
  if (v8)
LABEL_5:
    CFRetain(v8);
LABEL_6:
  ctu::SharedSynchronizable<ctu::XpcServer>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v9);
  if (cf)
    CFRelease(cf);
  xpc_release(object);
}

const void **ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void ___ZN17ABMServerInternal26handleInternalMessage_syncEN3xpc10connectionERNS0_4dictE_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v5;
  void *v6;
  const void *v7;
  size_t v8;
  void *v9;
  void **v10;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t v13;
  CFTypeID v14;
  const void *v15;
  void *v16;
  ctu *v17;
  void *__dst[2];
  unint64_t v19;
  xpc_object_t object;
  CFTypeRef cf;

  v2 = *(_QWORD **)(a1 + 32);
  cf = 0;
  v3 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
    cf = Mutable;
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E0CFB0E0], (const __CFString **)*MEMORY[0x1E0CFB380], v3, v5);
  v6 = *(void **)(a1 + 40);
  object = v6;
  if (v6)
    xpc_retain(v6);
  else
    object = xpc_null_create();
  v7 = (const void *)*MEMORY[0x1E0CFB730];
  v8 = strlen((const char *)*MEMORY[0x1E0CFB730]);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v12 = v8 | 7;
    v13 = v12 + 1;
    v10 = (void **)operator new(v12 + 1);
    __dst[1] = v9;
    v19 = v13 | 0x8000000000000000;
    __dst[0] = v10;
LABEL_14:
    memmove(v10, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v10) = 0;
    v11 = cf;
    if (!cf)
      goto LABEL_17;
    goto LABEL_15;
  }
  HIBYTE(v19) = v8;
  v10 = __dst;
  if (v8)
    goto LABEL_14;
  LOBYTE(__dst[0]) = 0;
  v11 = cf;
  if (!cf)
    goto LABEL_17;
LABEL_15:
  v14 = CFGetTypeID(v11);
  if (v14 == CFDictionaryGetTypeID())
  {
    v17 = (ctu *)v11;
    CFRetain(v11);
    v15 = v11;
    goto LABEL_18;
  }
LABEL_17:
  v15 = 0;
  v17 = 0;
LABEL_18:
  v16 = 0;
  ABMServerInternal::unicast_sync(v2, (xpc_connection_t *)&object, (uint64_t)__dst, &v17, &v16);
  if (v15)
    CFRelease(v15);
  if (SHIBYTE(v19) < 0)
    operator delete(__dst[0]);
  xpc_release(object);
  object = 0;
  if (v11)
    CFRelease(v11);
}

void sub_1BF363CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, xpc_object_t object, const void *a19)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a11);
  if (a17 < 0)
    operator delete(__p);
  xpc_release(object);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a19);
  _Unwind_Resume(a1);
}

void ABMServerInternal::unicast_sync(_QWORD *a1, xpc_connection_t *a2, uint64_t a3, ctu **a4, void **a5)
{
  xpc_object_t v10;
  xpc_object_t v11;
  const void *v12;
  uint64_t (*v13)(uint64_t);
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  const char *v17;
  xpc_object_t v18;
  xpc_object_t v19;
  NSObject *v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  xpc_connection_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  BOOL v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t SystemTime;
  NSObject *v37;
  void **v38;
  const void *v39;
  unint64_t v40;
  __int128 v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::string *v45;
  _xpc_connection_s **v46;
  void **v47;
  _xpc_connection_s *v48;
  NSObject *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  NSObject *v56;
  unint64_t v57;
  xpc_connection_t v58;
  void *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  xpc_connection_t *v63;
  uint64_t v64;
  _QWORD block[6];
  std::__shared_weak_count *v66;
  xpc_object_t object;
  std::string v68;
  void *aBlock;
  _QWORD handler[6];
  std::__shared_weak_count *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  std::string __p;
  uint64_t v75;
  NSObject *v76;
  std::string v77;
  unint64_t v78;
  unint64_t v79;
  xpc_object_t v80;
  uint8_t buf[4];
  const void *v82;
  __int16 v83;
  std::string *v84;
  __int16 v85;
  uint64_t v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v10 = xpc_dictionary_create(0, 0, 0);
  if (v10 || (v10 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v10) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v10);
      v11 = v10;
    }
    else
    {
      v11 = xpc_null_create();
    }
  }
  else
  {
    v11 = xpc_null_create();
    v10 = 0;
  }
  xpc_release(v10);
  v13 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!*a4)
    v13 = 0;
  if (v13)
  {
    ctu::cf_to_xpc(*a4, v12);
    xpc_dictionary_set_value(v11, kKeyEventData[0], v80);
    v14 = v80;
    v80 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v80);
    v80 = 0;
  }
  v15 = xpc_string_create(kCommandSignalNotification[0]);
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(v11, kKeyCommand[0], v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v17 = (const char *)a3;
  if (*(char *)(a3 + 23) < 0)
    v17 = *(const char **)a3;
  v18 = xpc_string_create(v17);
  if (!v18)
    v18 = xpc_null_create();
  xpc_dictionary_set_value(v11, kKeyEvent[0], v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  v20 = dispatch_group_create();
  v21 = (std::__shared_weak_count *)a1[2];
  if (!v21 || (v64 = a1[1], (v22 = std::__shared_weak_count::lock(v21)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v23 = v22;
  p_shared_weak_owners = (unint64_t *)&v22->__shared_weak_owners_;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v22->__shared_owners_;
  do
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (v27)
  {
    v78 = 0xAAAAAAAAAAAAAAAALL;
    v79 = 0xAAAAAAAAAAAAAAAALL;
    v28 = *a2;
    if (*a2)
      goto LABEL_25;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v23);
    v78 = 0xAAAAAAAAAAAAAAAALL;
    v79 = 0xAAAAAAAAAAAAAAAALL;
    v28 = *a2;
    if (*a2)
    {
LABEL_25:
      xpc_retain(v28);
      v78 = 0;
      v79 = 0;
      v29 = a1 + 19;
      v30 = (_QWORD *)a1[19];
      if (!v30)
        goto LABEL_39;
      goto LABEL_29;
    }
  }
  v28 = (xpc_connection_t)xpc_null_create();
  v78 = 0;
  v79 = 0;
  v29 = a1 + 19;
  v30 = (_QWORD *)a1[19];
  if (!v30)
  {
LABEL_39:
    v35 = 0;
    goto LABEL_40;
  }
LABEL_29:
  v31 = v29;
  do
  {
    v32 = v30[4];
    v33 = v32 >= (unint64_t)v28;
    if (v32 >= (unint64_t)v28)
      v34 = v30;
    else
      v34 = v30 + 1;
    if (v33)
      v31 = v30;
    v30 = (_QWORD *)*v34;
  }
  while (*v34);
  if (v31 == v29 || (unint64_t)v28 < v31[4])
    goto LABEL_39;
  v35 = v31[5];
  v42 = v31[6];
  if (v42)
  {
    v43 = (unint64_t *)(v42 + 8);
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  v78 = v35;
  v79 = v42;
LABEL_40:
  xpc_release(v28);
  if (!v35 || (uint64_t *)(v35 + 40) == std::__tree<std::string>::find<std::string>(v35 + 32, (const void **)a3))
    goto LABEL_76;
  SystemTime = TelephonyUtilGetSystemTime();
  v37 = a1[14];
  v63 = a2;
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    v38 = a5;
    v39 = (const void *)a3;
    if (*(char *)(a3 + 23) < 0)
    {
      v39 = *(const void **)a3;
      v40 = v78;
      if ((*(char *)(v78 + 23) & 0x80000000) == 0)
        goto LABEL_45;
    }
    else
    {
      v40 = v78;
      if ((*(char *)(v78 + 23) & 0x80000000) == 0)
      {
LABEL_45:
        v41 = *(_OWORD *)v40;
        v77.__r_.__value_.__r.__words[2] = *(_QWORD *)(v40 + 16);
        *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v41;
LABEL_52:
        v45 = &v77;
        if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v45 = (std::string *)v77.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315650;
        v82 = v39;
        v83 = 2080;
        v84 = v45;
        v85 = 2048;
        v86 = SystemTime;
        _os_log_impl(&dword_1BF335000, v37, OS_LOG_TYPE_DEFAULT, "#I Sending %s to %s at %llu", buf, 0x20u);
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v77.__r_.__value_.__l.__data_);
        a5 = v38;
        a2 = v63;
        goto LABEL_57;
      }
    }
    std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)v40, *(_QWORD *)(v40 + 8));
    goto LABEL_52;
  }
LABEL_57:
  if (*a5)
  {
    v46 = a2;
    v47 = a5;
    dispatch_group_enter(v20);
    v48 = *v46;
    v49 = a1[3];
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 1174405120;
    handler[2] = ___ZN17ABMServerInternal12unicast_syncEN3xpc10connectionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke;
    handler[3] = &__block_descriptor_tmp_28;
    handler[4] = a1;
    handler[5] = v64;
    v71 = v23;
    do
      v50 = __ldxr(p_shared_weak_owners);
    while (__stxr(v50 + 1, p_shared_weak_owners));
    v72 = v78;
    v73 = (std::__shared_weak_count *)v79;
    if (v79)
    {
      v51 = (unint64_t *)(v79 + 8);
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      __p = *(std::string *)a3;
    v75 = SystemTime;
    v76 = v20;
    xpc_connection_send_message_with_reply(v48, v11, v49, handler);
    a5 = v47;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v53 = v73;
    a2 = v63;
    if (v73)
    {
      v54 = (unint64_t *)&v73->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    if (v71)
      std::__shared_weak_count::__release_weak(v71);
  }
  else
  {
    xpc_connection_send_message(*a2, v11);
  }
LABEL_76:
  if (!*a5)
    goto LABEL_92;
  v56 = a1[3];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZN17ABMServerInternal12unicast_syncEN3xpc10connectionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke_29;
  block[3] = &__block_descriptor_tmp_30;
  block[4] = a1;
  block[5] = v64;
  v66 = v23;
  do
    v57 = __ldxr(p_shared_weak_owners);
  while (__stxr(v57 + 1, p_shared_weak_owners));
  v58 = *a2;
  object = v58;
  if (!v58)
  {
    object = xpc_null_create();
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
      goto LABEL_81;
LABEL_83:
    std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    goto LABEL_84;
  }
  xpc_retain(v58);
  if (*(char *)(a3 + 23) < 0)
    goto LABEL_83;
LABEL_81:
  v68 = *(std::string *)a3;
LABEL_84:
  v59 = *a5;
  if (*a5)
    v59 = _Block_copy(v59);
  aBlock = v59;
  dispatch_group_notify(v20, v56, block);
  if (aBlock)
    _Block_release(aBlock);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  xpc_release(object);
  object = 0;
  if (v66)
    std::__shared_weak_count::__release_weak(v66);
LABEL_92:
  dispatch_release(v20);
  v60 = (std::__shared_weak_count *)v79;
  if (v79)
  {
    v61 = (unint64_t *)(v79 + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  std::__shared_weak_count::__release_weak(v23);
  xpc_release(v11);
}

void sub_1BF3643B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, xpc_object_t object, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v39 - 168);
  std::__shared_weak_count::__release_weak(v38);
  xpc_release(v37);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_40c22_ZTSN3xpc10connectionE(uint64_t a1, uint64_t a2)
{
  void *v3;
  xpc_object_t result;

  v3 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (v3)
    return xpc_retain(v3);
  result = xpc_null_create();
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c22_ZTSN3xpc10connectionE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
}

void ___ZN17ABMServerInternal20registerNotificationEN3xpc10connectionEbN3ctu2cf11CFSharedRefIK9__CFArrayEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  xpc::object *v3;
  xpc_object_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  const std::string::value_type **v12;
  int v13;
  const void *v14;
  NSObject *v15;
  __int128 v16;
  NSObject *v17;
  std::string *p_p;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::string *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::string __p;
  const void *v26;
  const std::string::value_type **v27;
  std::__shared_weak_count *v28;
  uint8_t buf[4];
  std::string *v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = (xpc::object *)(a1 + 40);
  v4 = *(xpc_object_t *)(a1 + 40);
  if (v4)
  {
    xpc_retain(*(xpc_object_t *)(a1 + 40));
    v27 = 0;
    v28 = 0;
    v5 = (_QWORD *)(v2 + 152);
    v6 = *(_QWORD **)(v2 + 152);
    if (!v6)
      goto LABEL_15;
  }
  else
  {
    v4 = xpc_null_create();
    v27 = 0;
    v28 = 0;
    v5 = (_QWORD *)(v2 + 152);
    v6 = *(_QWORD **)(v2 + 152);
    if (!v6)
    {
LABEL_15:
      v11 = 0;
      v12 = 0;
      goto LABEL_16;
    }
  }
  v7 = v5;
  do
  {
    v8 = v6[4];
    v9 = v8 >= (unint64_t)v4;
    if (v8 >= (unint64_t)v4)
      v10 = v6;
    else
      v10 = v6 + 1;
    if (v9)
      v7 = v6;
    v6 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 == v5 || (unint64_t)v4 < v7[4])
    goto LABEL_15;
  v12 = (const std::string::value_type **)v7[5];
  v11 = (std::__shared_weak_count *)v7[6];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  v27 = v12;
  v28 = v11;
LABEL_16:
  xpc_release(v4);
  if (!v12)
  {
    v17 = *(NSObject **)(v2 + 112);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      goto LABEL_39;
    xpc::object::to_string(v3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v30 = p_p;
    _os_log_error_impl(&dword_1BF335000, v17, OS_LOG_TYPE_ERROR, "%s is not in client list", buf, 0xCu);
    goto LABEL_37;
  }
  v13 = *(unsigned __int8 *)(a1 + 56);
  v14 = *(const void **)(a1 + 48);
  v26 = v14;
  if (v14)
    CFRetain(v14);
  ServerClientState::registerNotification_sync((void **)&v27, v13 != 0, &v26);
  if (v14)
    CFRelease(v14);
  v15 = *(NSObject **)(v2 + 112);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *v12, (std::string::size_type)v12[1]);
    }
    else
    {
      v16 = *(_OWORD *)v12;
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v12[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v16;
    }
    v21 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v22 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 136315394;
    v30 = v21;
    v31 = 2112;
    v32 = v22;
    _os_log_impl(&dword_1BF335000, v15, OS_LOG_TYPE_DEFAULT, "#I %s registered for: %@", buf, 0x16u);
LABEL_37:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_39:
  if (v11)
  {
    v23 = (unint64_t *)&v11->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BF3647BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF3647F0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

CFTypeRef __copy_helper_block_e8_40c22_ZTSN3xpc10connectionE48c39_ZTSN3ctu2cf11CFSharedRefIK9__CFArrayEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  CFTypeRef result;

  v4 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (!v4)
  {
    *(_QWORD *)(a1 + 40) = xpc_null_create();
    result = *(CFTypeRef *)(a2 + 48);
    *(_QWORD *)(a1 + 48) = result;
    if (!result)
      return result;
    return CFRetain(result);
  }
  xpc_retain(v4);
  result = *(CFTypeRef *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_40c22_ZTSN3xpc10connectionE48c39_ZTSN3ctu2cf11CFSharedRefIK9__CFArrayEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 48);
  if (v2)
    CFRelease(v2);
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
}

void ___ZN17ABMServerInternal9broadcastENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  ctu *v3;
  const void *v4;
  void *v5;
  void *v6;
  ctu *v7;
  std::string v8;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
    v3 = *(ctu **)(a1 + 64);
    v7 = v3;
    if (!v3)
      goto LABEL_6;
    goto LABEL_5;
  }
  v8 = *(std::string *)(a1 + 40);
  v3 = *(ctu **)(a1 + 64);
  v7 = v3;
  if (v3)
LABEL_5:
    CFRetain(v3);
LABEL_6:
  v4 = *(const void **)(a1 + 72);
  if (v4)
    v5 = _Block_copy(v4);
  else
    v5 = 0;
  v6 = v5;
  ABMServerInternal::broadcast_sync(v2, (uint64_t)&v8, &v7, &v6);
  if (v5)
    _Block_release(v5);
  if (v3)
    CFRelease(v3);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

void sub_1BF3649A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  const void *v16;

  if (v16)
    _Block_release(v16);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE72c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  const void *v6;
  void *result;

  v4 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
    v6 = *(const void **)(a2 + 64);
    *(_QWORD *)(a1 + 64) = v6;
    if (!v6)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = *(_OWORD *)(a2 + 40);
  v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 56);
  *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  v6 = *(const void **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v6;
  if (v6)
LABEL_5:
    CFRetain(v6);
LABEL_6:
  result = *(void **)(a2 + 72);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 72) = result;
  return result;
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE72c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 72);
  if (v2)
    _Block_release(v2);
  v3 = *(const void **)(a1 + 64);
  if (v3)
    CFRelease(v3);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void ___ZN17ABMServerInternal14broadcast_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  __int128 *v7;
  __int128 v8;
  std::string *p_p;
  _QWORD *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string __p;
  std::__shared_weak_count *v16;
  uint8_t buf[4];
  std::string *v18;
  __int16 v19;
  _QWORD *v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2 && (v3 = *(_QWORD *)(a1 + 32), v4 = std::__shared_weak_count::lock(v2), (v16 = v4) != 0))
  {
    v5 = v4;
    if (*(_QWORD *)(a1 + 40))
    {
      v6 = *(NSObject **)(v3 + 112);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *(__int128 **)(a1 + 56);
        if (*((char *)v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
        }
        else
        {
          v8 = *v7;
          __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        v10 = (_QWORD *)(a1 + 72);
        if (*(char *)(a1 + 95) < 0)
          v10 = (_QWORD *)*v10;
        v11 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)buf = 136315650;
        v18 = p_p;
        v19 = 2080;
        v20 = v10;
        v21 = 2048;
        v22 = v11;
        _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, "#I %s responded to %s sent at %llu", buf, 0x20u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 104));
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 104));
  }
}

void sub_1BF364C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c23_ZTS17ServerClientState72c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v3;
  unint64_t *v4;
  unint64_t v5;
  std::string::size_type v6;
  unint64_t *v7;
  unint64_t v8;
  std::string *v9;
  __int128 v10;

  v3 = *(_QWORD *)(a2 + 48);
  a1[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
  a1[2].__r_.__value_.__r.__words[0] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(a2 + 64);
  a1[2].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 56);
  a1[2].__r_.__value_.__r.__words[2] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = a1 + 3;
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 72);
    a1[3].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 88);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
}

void sub_1BF364D14(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2);
  v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c23_ZTS17ServerClientState72c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  if (*(char *)(a1 + 95) < 0)
  {
    operator delete(*(void **)(a1 + 72));
    v2 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v2)
      goto LABEL_8;
  }
  else
  {
    v2 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v2)
      goto LABEL_8;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_8:
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v5)
      return;
    goto LABEL_9;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5)
LABEL_9:
    std::__shared_weak_count::__release_weak(v5);
}

uint64_t std::pair<xpc::connection const,ServerClientState>::~pair(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  xpc_release(*(xpc_object_t *)a1);
  *(_QWORD *)a1 = 0;
  return a1;
}

void ___ZN17ABMServerInternal14broadcast_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke_26(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t buf[4];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      if (*(_QWORD *)(a1 + 40))
      {
        v5 = *(NSObject **)(v2 + 112);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          v6 = (_QWORD *)(a1 + 56);
          if (*(char *)(a1 + 79) < 0)
            v6 = (_QWORD *)*v6;
          *(_DWORD *)buf = 136315138;
          v10 = v6;
          _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "#I All clients responded to %s", buf, 0xCu);
        }
      }
    }
  }
  else
  {
    v4 = 0;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 80) + 16))();
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BF364F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::string *v7;
  __int128 v8;
  void *result;

  v4 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::string *)(a1 + 7);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 56);
    a1[9] = *(_QWORD *)(a2 + 72);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  result = *(void **)(a2 + 80);
  if (result)
    result = _Block_copy(result);
  a1[10] = result;
  return result;
}

void sub_1BF364FDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 80);
  if (v2)
    _Block_release(v2);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3)
      return;
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 56));
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
LABEL_5:
    std::__shared_weak_count::__release_weak(v3);
}

void ___ZN17ABMServerInternal12unicast_syncEN3xpc10connectionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  __int128 *v7;
  __int128 v8;
  std::string *p_p;
  _QWORD *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string __p;
  std::__shared_weak_count *v16;
  uint8_t buf[4];
  std::string *v18;
  __int16 v19;
  _QWORD *v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2 && (v3 = *(_QWORD *)(a1 + 32), v4 = std::__shared_weak_count::lock(v2), (v16 = v4) != 0))
  {
    v5 = v4;
    if (*(_QWORD *)(a1 + 40))
    {
      v6 = *(NSObject **)(v3 + 112);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *(__int128 **)(a1 + 56);
        if (*((char *)v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
        }
        else
        {
          v8 = *v7;
          __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        v10 = (_QWORD *)(a1 + 72);
        if (*(char *)(a1 + 95) < 0)
          v10 = (_QWORD *)*v10;
        v11 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)buf = 136315650;
        v18 = p_p;
        v19 = 2080;
        v20 = v10;
        v21 = 2048;
        v22 = v11;
        _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, "#I %s responded to %s sent at %llu", buf, 0x20u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 104));
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 104));
  }
}

void sub_1BF3651FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN17ABMServerInternal12unicast_syncEN3xpc10connectionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke_29(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  void *p_p;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint8_t buf[4];
  void *v15;
  __int16 v16;
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v12 = 0;
  v13 = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    v13 = v4;
    if (v4)
    {
      v12 = *(_QWORD *)(a1 + 40);
      if (v12)
      {
        v5 = *(NSObject **)(v2 + 112);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          xpc::object::to_string((xpc::object *)(a1 + 56));
          p_p = __p;
          if (v11 >= 0)
            p_p = &__p;
          v7 = (_QWORD *)(a1 + 64);
          if (*(char *)(a1 + 87) < 0)
            v7 = (_QWORD *)*v7;
          *(_DWORD *)buf = 136315394;
          v15 = p_p;
          v16 = 2080;
          v17 = v7;
          _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "#I Client '%s' responded to %s", buf, 0x16u);
          if (v11 < 0)
            operator delete(__p);
        }
      }
    }
  }
  else
  {
    v4 = 0;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 88) + 16))();
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BF365370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF365384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c23_ZTSKN3xpc10connectionE64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  std::string *v8;
  __int128 v9;
  void *result;

  v4 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(void **)(a2 + 56);
  a1[7] = v7;
  if (v7)
  {
    xpc_retain(v7);
    v8 = (std::string *)(a1 + 8);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
    {
LABEL_6:
      v9 = *(_OWORD *)(a2 + 64);
      v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 80);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
      goto LABEL_9;
    }
  }
  else
  {
    a1[7] = xpc_null_create();
    v8 = (std::string *)(a1 + 8);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
      goto LABEL_6;
  }
  std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
LABEL_9:
  result = *(void **)(a2 + 88);
  if (result)
    result = _Block_copy(result);
  a1[11] = result;
  return result;
}

void sub_1BF365444(_Unwind_Exception *a1)
{
  uint64_t v1;
  xpc_object_t *v2;
  std::__shared_weak_count *v4;

  xpc::connection::~connection(v2);
  v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c23_ZTSKN3xpc10connectionE64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 88);
  if (v2)
    _Block_release(v2);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(_QWORD *)(a1 + 56) = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

uint64_t ABMServer::previousShutdownWasClean(ABMServer *this)
{
  if (qword_1ED70FEE0 != -1)
    dispatch_once(&qword_1ED70FEE0, &__block_literal_global_0);
  return _MergedGlobals_0;
}

void ___ZN9ABMServer24previousShutdownWasCleanEv_block_invoke()
{
  timespec v0;
  int v1;
  int v2;
  int v3;
  int v4;
  unsigned __int8 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;
  unint64_t *v10;
  unint64_t v11;
  const char *v12;
  unsigned __int8 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  NSObject *v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned __int8 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char __p[18];
  char v33;
  stat block;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v33 = 17;
  strcpy(__p, "/tmp/abm.shutdown");
  v0.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v0.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&block.st_blksize = v0;
  *(timespec *)block.st_qspare = v0;
  block.st_birthtimespec = v0;
  *(timespec *)&block.st_size = v0;
  block.st_mtimespec = v0;
  block.st_ctimespec = v0;
  *(timespec *)&block.st_uid = v0;
  block.st_atimespec = v0;
  *(timespec *)&block.st_dev = v0;
  v1 = stat(__p, &block);
  v2 = v1;
  if ((v33 & 0x80000000) == 0)
  {
    if (v1)
      goto LABEL_3;
LABEL_19:
    {
      __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
    }
    *(_QWORD *)&block.st_dev = MEMORY[0x1E0C809B0];
    block.st_ino = 0x40000000;
    *(_QWORD *)&block.st_uid = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
    *(_QWORD *)&block.st_rdev = &__block_descriptor_tmp_13_2;
    block.st_atimespec.tv_sec = (__darwin_time_t)&GetABMLogServer(void)::sLogServer;
    if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
    {
      v14 = *(std::__shared_weak_count **)algn_1ED710088;
      v30 = GetABMLogServer(void)::sLogServer;
      v31 = *(_QWORD *)algn_1ED710088;
      if (*(_QWORD *)algn_1ED710088)
        goto LABEL_22;
    }
    else
    {
      dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
      v14 = *(std::__shared_weak_count **)algn_1ED710088;
      v30 = GetABMLogServer(void)::sLogServer;
      v31 = *(_QWORD *)algn_1ED710088;
      if (*(_QWORD *)algn_1ED710088)
      {
LABEL_22:
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
    }
    v17 = *((_QWORD *)GetGlobalLogger(&v30) + 4);
    if (v14)
    {
      v18 = (unint64_t *)&v14->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      block.st_dev = 136315138;
      *(_QWORD *)&block.st_mode = "abmserver";
      _os_log_impl(&dword_1BF335000, v17, OS_LOG_TYPE_DEFAULT, "#I %s: Previous shutdown was not clean", (uint8_t *)&block, 0xCu);
    }
    _MergedGlobals_0 = 0;
    return;
  }
  operator delete(*(void **)__p);
  if (!v2)
    goto LABEL_19;
LABEL_3:
  _MergedGlobals_0 = 1;
  HIBYTE(block.st_gid) = 17;
  strcpy((char *)&block, "/tmp/abm.shutdown");
  v3 = open((const char *)&block, 513, 420);
  v4 = v3;
  if (SHIBYTE(block.st_gid) < 0)
  {
    operator delete(*(void **)&block.st_dev);
    if (v4 < 1)
      goto LABEL_33;
    do
    {
LABEL_5:
      if (!close(v4))
        return;
    }
    while (*__error() == 4);
    {
      __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
    }
    *(_QWORD *)&block.st_dev = MEMORY[0x1E0C809B0];
    block.st_ino = 0x40000000;
    *(_QWORD *)&block.st_uid = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
    *(_QWORD *)&block.st_rdev = &__block_descriptor_tmp_13_2;
    block.st_atimespec.tv_sec = (__darwin_time_t)&GetABMLogServer(void)::sLogServer;
    if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
    {
      v6 = *(std::__shared_weak_count **)algn_1ED710088;
      v28 = GetABMLogServer(void)::sLogServer;
      v29 = *(_QWORD *)algn_1ED710088;
      if (!*(_QWORD *)algn_1ED710088)
        goto LABEL_12;
    }
    else
    {
      dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
      v6 = *(std::__shared_weak_count **)algn_1ED710088;
      v28 = GetABMLogServer(void)::sLogServer;
      v29 = *(_QWORD *)algn_1ED710088;
      if (!*(_QWORD *)algn_1ED710088)
        goto LABEL_12;
    }
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
LABEL_12:
    v9 = *((_QWORD *)GetGlobalLogger(&v28) + 4);
    if (!v6)
      goto LABEL_16;
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        return;
    }
    else
    {
LABEL_16:
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        return;
    }
    block.st_dev = 136315394;
    *(_QWORD *)&block.st_mode = "abmserver";
    WORD2(block.st_ino) = 2080;
    *(__darwin_ino64_t *)((char *)&block.st_ino + 6) = (__darwin_ino64_t)"/tmp/abm.shutdown";
    v12 = "%s: Failed closing %s";
    goto LABEL_48;
  }
  if (v3 >= 1)
    goto LABEL_5;
LABEL_33:
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  *(_QWORD *)&block.st_dev = MEMORY[0x1E0C809B0];
  block.st_ino = 0x40000000;
  *(_QWORD *)&block.st_uid = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  *(_QWORD *)&block.st_rdev = &__block_descriptor_tmp_13_2;
  block.st_atimespec.tv_sec = (__darwin_time_t)&GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v21 = *(std::__shared_weak_count **)algn_1ED710088;
    v26 = GetABMLogServer(void)::sLogServer;
    v27 = *(_QWORD *)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_38;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v21 = *(std::__shared_weak_count **)algn_1ED710088;
    v26 = GetABMLogServer(void)::sLogServer;
    v27 = *(_QWORD *)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_38;
  }
  v22 = (unint64_t *)&v21->__shared_owners_;
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 + 1, v22));
LABEL_38:
  v9 = *((_QWORD *)GetGlobalLogger(&v26) + 4);
  if (v21)
  {
    v24 = (unint64_t *)&v21->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    block.st_dev = 136315394;
    *(_QWORD *)&block.st_mode = "abmserver";
    WORD2(block.st_ino) = 2080;
    *(__darwin_ino64_t *)((char *)&block.st_ino + 6) = (__darwin_ino64_t)"/tmp/abm.shutdown";
    v12 = "%s: Failed creating %s";
LABEL_48:
    _os_log_error_impl(&dword_1BF335000, v9, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&block, 0x16u);
  }
}

void sub_1BF365A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF365AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF365ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF365AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ABMServer::getRunLoop(ABMServer *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 208);
}

uint64_t ctu::Loggable<ABMServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<ABMServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "server.main");
}

uint64_t ctu::Loggable<ABMServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<ABMServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E78FCC18;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<ABMServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E78FCC18;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__shared_ptr_pointer<ABMServer *,std::shared_ptr<ABMServer>::__shared_ptr_default_delete<ABMServer,ABMServer>,std::allocator<ABMServer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ABMServer *,std::shared_ptr<ABMServer>::__shared_ptr_default_delete<ABMServer,ABMServer>,std::allocator<ABMServer>>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (std::__shared_weak_count *)v1[1];
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      operator delete(v1);
    }
    else
    {
LABEL_6:
      operator delete(v1);
    }
  }
}

uint64_t std::__shared_ptr_pointer<ABMServer *,std::shared_ptr<ABMServer>::__shared_ptr_default_delete<ABMServer,ABMServer>,std::allocator<ABMServer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF53C9DELL)
    return a1 + 24;
  if (((v3 & 0x80000001BF53C9DELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF53C9DELL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF53C9DELL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

_QWORD *std::shared_ptr<ABMServerInternal>::shared_ptr[abi:ne180100]<ABMServerInternal,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E78FCCA8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 8) = a2;
    *(_QWORD *)(a2 + 16) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 8) = a2;
    *(_QWORD *)(a2 + 16) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF365DD8(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1}::operator() const(ABMServerInternal*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF365DF8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ABMServerInternal *,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal *)#1},std::allocator<ABMServerInternal>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ABMServerInternal *,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal *)#1},std::allocator<ABMServerInternal>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1}::operator() const(ABMServerInternal*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<ABMServerInternal *,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal *)#1},std::allocator<ABMServerInternal>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableINS_9XpcServerEE15make_shared_ptrI17ABMServerInternalEENSt3__110shared_"
                     "ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableINS_9XpcServerEE15make_shared_ptrI17ABMServerInternalEENSt3_"
                                "_110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableINS_9XpcServerEE15make_shared_ptrI17ABMServerInternalEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableINS_9XpcServerEE15make_shared_ptrI17ABMServerInternalEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1}::operator() const(ABMServerInternal*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

void std::__shared_ptr_emplace<Registry>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E78FCCF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Registry>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E78FCCF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<Registry>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(*a1);
    std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(a1[1]);
    v2 = (std::__shared_weak_count *)a1[6];
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    xpc_release((xpc_object_t)a1[4]);
    operator delete(a1);
  }
}

void std::__shared_ptr_emplace<BootControllerLegacy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E78FCD48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BootControllerLegacy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E78FCD48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<BootControllerLegacy>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableINS1_9XpcServerEE15execute_wrappedIZZZN17ABMServerInternal4initENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEERKN3abm9OverridesEEUb_EUb0_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNS7_10unique_ptrISJ_NS7_14default_deleteISJ_EEEEENUlPvE_8__invokeESS_(void *a1)
{
  uint64_t *v2;
  uint64_t v3;
  void **v4;
  __int128 v5;
  ctu *v6;
  const void *v7;
  void *v8;
  const void *v9;
  const void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;
  ctu *v15;
  std::string v16;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)a1;
  v4 = (void **)(*(_QWORD *)a1 + 8);
  if (*(char *)(*(_QWORD *)a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, (const std::string::value_type *)v2[1], v2[2]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v16.__r_.__value_.__r.__words[2] = *(_QWORD *)(*(_QWORD *)a1 + 24);
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v5;
  }
  v6 = (ctu *)v2[4];
  v15 = v6;
  if (v6)
    CFRetain(v6);
  v7 = (const void *)v2[5];
  if (v7)
    v8 = _Block_copy(v7);
  else
    v8 = 0;
  v14 = v8;
  ABMServerInternal::broadcast_sync(v3, (uint64_t)&v16, &v15, &v14);
  if (v8)
    _Block_release(v8);
  if (v6)
    CFRelease(v6);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v16.__r_.__value_.__l.__data_);
    v9 = (const void *)v2[5];
    if (!v9)
      goto LABEL_18;
    goto LABEL_17;
  }
  v9 = (const void *)v2[5];
  if (v9)
LABEL_17:
    _Block_release(v9);
LABEL_18:
  v10 = (const void *)v2[4];
  if (v10)
    CFRelease(v10);
  if (*((char *)v2 + 31) < 0)
    operator delete(*v4);
  operator delete(v2);
  v11 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(a1);
}

void sub_1BF36617C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _QWORD *v16;
  uint64_t v17;
  void **v18;
  const void *v20;
  const void *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;

  v20 = *(const void **)(v17 + 40);
  if (v20)
    _Block_release(v20);
  v21 = *(const void **)(v17 + 32);
  if (v21)
    CFRelease(v21);
  if (*(char *)(v17 + 31) < 0)
    operator delete(*v18);
  operator delete((void *)v17);
  v22 = (std::__shared_weak_count *)v16[2];
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t ctu::cf::insert<char const*,std::string>(__CFDictionary *a1, const __CFString **a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5)
{
  void *v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  void *value;

  value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, a2, (const char *)0x8000100, a4, a5);
  v6 = value;
  value = 0;
  ctu::cf::convert_copy();
  v7 = value;
  if (v6)
    v8 = value == 0;
  else
    v8 = 1;
  v9 = !v8;
  if (v8)
  {
    if (!value)
      goto LABEL_11;
  }
  else
  {
    CFDictionaryAddValue(a1, v6, value);
  }
  CFRelease(v7);
LABEL_11:
  if (v6)
    CFRelease(v6);
  return v9;
}

void sub_1BF366310(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1BF366334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::erase(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = *(_QWORD **)(a2 + 8);
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  else
  {
    v5 = (_QWORD *)a2;
    do
    {
      v4 = (_QWORD *)v5[2];
      v6 = *v4 == (_QWORD)v5;
      v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2)
    *a1 = v4;
  v7 = (uint64_t *)a1[1];
  --a1[2];
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v7, (uint64_t *)a2);
  v8 = *(std::__shared_weak_count **)(a2 + 48);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  xpc_release(*(xpc_object_t *)(a2 + 32));
  operator delete((void *)a2);
}

uint64_t ctu::cf::insert<char const*,char const*>(__CFDictionary *a1, const __CFString **a2, const __CFString **a3, uint64_t a4, const __CFAllocator *a5)
{
  void *v8;
  const __CFAllocator *v9;
  void *v10;
  BOOL v11;
  uint64_t v12;
  void *value;

  value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, a2, (const char *)0x8000100, a4, a5);
  v8 = value;
  value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, a3, (const char *)0x8000100, a4, v9);
  v10 = value;
  if (v8)
    v11 = value == 0;
  else
    v11 = 1;
  v12 = !v11;
  if (v11)
  {
    if (!value)
      goto LABEL_11;
  }
  else
  {
    CFDictionaryAddValue(a1, v8, value);
  }
  CFRelease(v10);
LABEL_11:
  if (v8)
    CFRelease(v8);
  return v12;
}

void sub_1BF3664B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1BF3664D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<ctu::XpcServer>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E78FCDB0;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIKN3ctu9XpcServerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIKN3ctu9XpcServerEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

const char *diag::config::toString(unsigned int a1)
{
  if (a1 > 4)
    return "Unknown";
  else
    return off_1E78FCE28[a1];
}

{
  if (a1 > 2)
    return "Unknown";
  else
    return off_1E78FCE50[a1];
}

{
  if (a1 > 2)
    return "Unknown";
  else
    return off_1E78FCE68[a1];
}

const char *diag::config::toStringCompact(unsigned int a1)
{
  if (a1 > 2)
    return "unknown";
  else
    return off_1E78FCE80[a1];
}

BOOL diag::config::equal_nocase(const char *a1, const char *a2)
{
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  return strcasecmp(a1, a2) == 0;
}

uint64_t diag::config::asEnum(uint64_t a1, _DWORD *a2)
{
  const char *v3;
  int v4;
  uint64_t result;
  char v6[23];
  char v7;

  v7 = 4;
  strcpy(v6, "none");
  if (*(char *)(a1 + 23) >= 0)
    v3 = (const char *)a1;
  else
    v3 = *(const char **)a1;
  if (!strcasecmp(v3, v6))
  {
    *a2 = 0;
    return 1;
  }
  else
  {
    v7 = 5;
    strcpy(v6, "reset");
    if (!strcasecmp(v3, v6))
    {
      *a2 = 1;
      return 1;
    }
    else
    {
      v7 = 11;
      strcpy(v6, "reconfigure");
      v4 = strcasecmp(v3, v6);
      result = 0;
      if (!v4)
      {
        *a2 = 2;
        return 1;
      }
    }
  }
  return result;
}

uint64_t diag::config::getShouldAlwaysFilter(diag::config *this)
{
  int IsCarrierBuild;
  int IsInternalBuild;

  IsCarrierBuild = TelephonyUtilIsCarrierBuild();
  IsInternalBuild = TelephonyUtilIsInternalBuild();
  return (IsCarrierBuild | IsInternalBuild | TelephonyUtilIsVendorBuild()) ^ 1;
}

void coex::Module::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11[2];

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0x40uLL);
  v5 = v4;
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  v11[0] = v6;
  v11[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  coex::Module::Module(v4, v11);
  *a2 = v5;
  v10 = operator new(0x20uLL);
  *v10 = off_1E78FDB60;
  v10[1] = 0;
  v10[2] = 0;
  v10[3] = v5;
  a2[1] = v10;
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF366968(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  _Unwind_Resume(a1);
}

_QWORD *coex::Module::Module(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  __int128 v33;
  _QWORD block[5];

  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    *a1 = off_1E7908A38;
    a1[1] = v4;
    a1[2] = v5;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    a1[3] = 0;
    a1[4] = 0;
    a1[5] = 0;
    std::__shared_weak_count::__release_weak(v5);
    *a1 = &unk_1E78FC4E8;
    std::__shared_weak_count::__release_weak(v5);
  }
  else
  {
    *((_OWORD *)a1 + 1) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *a1 = &unk_1E78FC4E8;
    a1[1] = v4;
  }
  *a1 = off_1E78FCEA8;
  a1[6] = 0;
  a1[7] = 0;
  if (!capabilities::abs::supportsCoex((capabilities::abs *)a1))
    return a1;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_2;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v11 = *(_QWORD *)algn_1ED710088;
    v31 = GetABMLogServer(void)::sLogServer;
    v32 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_15;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v11 = *(_QWORD *)algn_1ED710088;
    v31 = GetABMLogServer(void)::sLogServer;
    v32 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_15;
  }
  v12 = (unint64_t *)(v11 + 8);
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
LABEL_15:
  v14 = *a2;
  v15 = (std::__shared_weak_count *)a2[1];
  v29 = v14;
  v30 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  coex::Module::State::create(&v31, &v29, (coex::Module::State **)&v33);
  v18 = v33;
  v33 = 0uLL;
  v19 = (std::__shared_weak_count *)a1[7];
  *((_OWORD *)a1 + 3) = v18;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
  if (*((_QWORD *)&v33 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v30)
    std::__shared_weak_count::__release_weak(v30);
  v25 = v32;
  if (!v32)
    return a1;
  v26 = (unint64_t *)&v32->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (v27)
    return a1;
  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
  std::__shared_weak_count::__release_weak(v25);
  return a1;
}

void sub_1BF366C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  Service *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;

  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v13);
  Service::~Service(v11);
  _Unwind_Resume(a1);
}

void sub_1BF366CA8(_Unwind_Exception *a1)
{
  Service *v1;
  uint64_t v2;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2);
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void coex::Module::State::create(uint64_t *a1@<X0>, uint64_t *a2@<X1>, coex::Module::State **a3@<X8>)
{
  CommandDriverFactory *v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count **v26;
  std::__shared_weak_count **v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_weak_owners;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  std::__shared_weak_count *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  coex::Module::State *v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD v67[2];
  _QWORD v68[2];
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t v73;
  unint64_t v74;
  __int128 block;
  void (*v76)(uint64_t);
  void *v77;
  uint64_t *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;

  v73 = 0xAAAAAAAAAAAAAAAALL;
  v74 = 0xAAAAAAAAAAAAAAAALL;
  v6 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v7 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v6);
    v8 = block;
    block = 0uLL;
    v9 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v8;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (*((_QWORD *)&block + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&block + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&block + 1) + 16))(*((_QWORD *)&block + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&block + 1));
      }
    }
    v7 = off_1ED70FD08;
  }
  v79 = v7;
  v80 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v14 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 0x40000000;
  v76 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v77 = &__block_descriptor_tmp_13_2;
  v78 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v17 = *(_QWORD *)algn_1ED710088;
    v71 = GetABMLogServer(void)::sLogServer;
    v72 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_21;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v17 = *(_QWORD *)algn_1ED710088;
    v71 = GetABMLogServer(void)::sLogServer;
    v72 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_21;
  }
  v18 = (unint64_t *)(v17 + 8);
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
LABEL_21:
  (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v7 + 48))(&v73, v7, &v71);
  v20 = v72;
  if (v72)
  {
    v21 = (unint64_t *)&v72->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v80;
  if (v80)
  {
    v24 = (unint64_t *)&v80->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  *a3 = (coex::Module::State *)0xAAAAAAAAAAAAAAAALL;
  a3[1] = (coex::Module::State *)0xAAAAAAAAAAAAAAAALL;
  v26 = (std::__shared_weak_count **)operator new(0x118uLL);
  v27 = v26;
  v28 = (std::__shared_weak_count *)a1[1];
  v69 = *a1;
  v70 = v28;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v31 = (std::__shared_weak_count *)v74;
  v68[0] = v73;
  v68[1] = v74;
  if (v74)
  {
    v32 = (unint64_t *)(v74 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = *a2;
  v35 = (std::__shared_weak_count *)a2[1];
  v67[0] = v34;
  v67[1] = v35;
  if (v35)
  {
    p_shared_weak_owners = (unint64_t *)&v35->__shared_weak_owners_;
    do
      v37 = __ldxr(p_shared_weak_owners);
    while (__stxr(v37 + 1, p_shared_weak_owners));
  }
  coex::Module::State::State((uint64_t)v26, &v69, v68, v67);
  *a3 = (coex::Module::State *)v27;
  a3[1] = (coex::Module::State *)0xAAAAAAAAAAAAAAAALL;
  v38 = (std::__shared_weak_count *)operator new(0x20uLL);
  v38->__shared_owners_ = 0;
  v39 = (unint64_t *)&v38->__shared_owners_;
  v38->__vftable = (std::__shared_weak_count_vtbl *)off_1E78FDBB0;
  v38->__shared_weak_owners_ = 0;
  v38[1].__vftable = (std::__shared_weak_count_vtbl *)v27;
  a3[1] = (coex::Module::State *)v38;
  v40 = v27[10];
  if (v40)
  {
    if (v40->__shared_owners_ != -1)
      goto LABEL_52;
    do
      v41 = __ldxr(v39);
    while (__stxr(v41 + 1, v39));
    v42 = (unint64_t *)&v38->__shared_weak_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
    v27[9] = (std::__shared_weak_count *)v27;
    v27[10] = v38;
    std::__shared_weak_count::__release_weak(v40);
  }
  else
  {
    do
      v44 = __ldxr(v39);
    while (__stxr(v44 + 1, v39));
    v45 = (unint64_t *)&v38->__shared_weak_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
    v27[9] = (std::__shared_weak_count *)v27;
    v27[10] = v38;
  }
  do
    v47 = __ldaxr(v39);
  while (__stlxr(v47 - 1, v39));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
    v48 = *a3;
    if (!*((_QWORD *)*a3 + 7))
      goto LABEL_66;
    goto LABEL_53;
  }
LABEL_52:
  v48 = *a3;
  if (!*((_QWORD *)*a3 + 7))
    goto LABEL_66;
LABEL_53:
  v49 = (std::__shared_weak_count *)*((_QWORD *)v48 + 10);
  if (!v49 || (v50 = *((_QWORD *)v48 + 9), (v51 = std::__shared_weak_count::lock(v49)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v52 = v51;
  *(_QWORD *)&block = v50;
  *((_QWORD *)&block + 1) = v51;
  ctu::LoggerCommonBase::getLogDomain((coex::Module::State *)((char *)v48 + 8));
  v79 = v50;
  v80 = v52;
  block = 0uLL;
  ctu::TrackedLogger::registerLoggerToServer();
  v53 = v80;
  if (v80)
  {
    v54 = (unint64_t *)&v80->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&block + 1);
  if (*((_QWORD *)&block + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&block + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
LABEL_66:
  if (v35)
    std::__shared_weak_count::__release_weak(v35);
  if (v31)
  {
    v59 = (unint64_t *)&v31->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v61 = v70;
  if (v70)
  {
    v62 = (unint64_t *)&v70->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  coex::Module::State::init(*a3);
  v64 = (std::__shared_weak_count *)v74;
  if (v74)
  {
    v65 = (unint64_t *)(v74 + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
}

void sub_1BF367218(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF367234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va2;
  uint64_t v17;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v15 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v5 - 80);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v3);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_1BF367254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF367270(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<coex::Module::State> ctu::SharedSynchronizable<coex::Module::State>::make_shared_ptr<coex::Module::State>(coex::Module::State*)::{lambda(coex::Module::State*)#1}::operator() const(coex::Module::State*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF367290()
{
  __cxa_end_catch();
  JUMPOUT(0x1BF3672ECLL);
}

void sub_1BF3672A0()
{
  JUMPOUT(0x1BF3672F0);
}

void sub_1BF3672AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF3672C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v7 - 80);
  _Unwind_Resume(a1);
}

void coex::Module::~Module(coex::Module *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void **v5;
  void **v6;
  void **v7;
  std::__shared_weak_count *v8;

  *(_QWORD *)this = off_1E78FCEA8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(_QWORD *)this = off_1E7908A38;
    v5 = (void **)*((_QWORD *)this + 3);
    if (!v5)
      goto LABEL_13;
  }
  else
  {
LABEL_5:
    *(_QWORD *)this = off_1E7908A38;
    v5 = (void **)*((_QWORD *)this + 3);
    if (!v5)
      goto LABEL_13;
  }
  v6 = (void **)*((_QWORD *)this + 4);
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      if (*((char *)v6 - 1) < 0)
        operator delete(*(v6 - 3));
      v6 -= 3;
    }
    while (v6 != v5);
    v7 = (void **)*((_QWORD *)this + 3);
  }
  *((_QWORD *)this + 4) = v5;
  operator delete(v7);
LABEL_13:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void **v5;
  void **v6;
  void **v7;
  std::__shared_weak_count *v8;

  *(_QWORD *)this = off_1E78FCEA8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(_QWORD *)this = off_1E7908A38;
    v5 = (void **)*((_QWORD *)this + 3);
    if (!v5)
      goto LABEL_13;
  }
  else
  {
LABEL_5:
    *(_QWORD *)this = off_1E7908A38;
    v5 = (void **)*((_QWORD *)this + 3);
    if (!v5)
      goto LABEL_13;
  }
  v6 = (void **)*((_QWORD *)this + 4);
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      if (*((char *)v6 - 1) < 0)
        operator delete(*(v6 - 3));
      v6 -= 3;
    }
    while (v6 != v5);
    v7 = (void **)*((_QWORD *)this + 3);
  }
  *((_QWORD *)this + 4) = v5;
  operator delete(v7);
LABEL_13:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void **v5;
  void **v6;
  void **v7;
  std::__shared_weak_count *v8;

  *(_QWORD *)this = off_1E78FCEA8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(_QWORD *)this = off_1E7908A38;
    v5 = (void **)*((_QWORD *)this + 3);
    if (!v5)
      goto LABEL_13;
  }
  else
  {
LABEL_5:
    *(_QWORD *)this = off_1E7908A38;
    v5 = (void **)*((_QWORD *)this + 3);
    if (!v5)
      goto LABEL_13;
  }
  v6 = (void **)*((_QWORD *)this + 4);
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      if (*((char *)v6 - 1) < 0)
        operator delete(*(v6 - 3));
      v6 -= 3;
    }
    while (v6 != v5);
    v7 = (void **)*((_QWORD *)this + 3);
  }
  *((_QWORD *)this + 4) = v5;
  operator delete(v7);
LABEL_13:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  operator delete(this);
}

const char *coex::Module::getName(coex::Module *this)
{
  return "coex.mod";
}

_BYTE *coex::Module::getShutdownStages@<X0>(_BYTE *this@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v3;

  if (*((_QWORD *)this + 6))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v3 = operator new(1uLL);
    *a2 = v3;
    *v3 = 3;
    this = v3 + 1;
    a2[1] = this;
    a2[2] = this;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return this;
}

_BYTE *coex::Module::State::getShutdownStages@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *v3;
  _BYTE *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(1uLL);
  *a1 = v3;
  *v3 = 3;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void coex::Module::shutdown(uint64_t a1, char a2, dispatch_object_t *a3)
{
  uint64_t v3;
  NSObject *v5;
  _QWORD v6[5];
  dispatch_group_t group;
  char v8;

  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v5 = *a3;
    if (*a3)
    {
      dispatch_retain(*a3);
      dispatch_group_enter(v5);
    }
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 1174405120;
    v6[2] = ___ZN4coex6Module5State8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
    v6[3] = &__block_descriptor_tmp_70;
    v6[4] = v3;
    group = v5;
    if (v5)
    {
      dispatch_retain(v5);
      dispatch_group_enter(v5);
    }
    v8 = a2;
    ctu::SharedSynchronizable<coex::Module::State>::execute_wrapped((uint64_t *)(v3 + 72), (uint64_t)v6);
    if (group)
    {
      dispatch_group_leave(group);
      if (group)
        dispatch_release(group);
    }
    if (v5)
    {
      dispatch_group_leave(v5);
      dispatch_release(v5);
    }
  }
}

void coex::Module::State::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  uint64_t *v4;
  NSObject *v5;
  _QWORD v6[5];
  dispatch_group_t group;
  char v8;

  v4 = (uint64_t *)(a1 + 72);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 1174405120;
  v6[2] = ___ZN4coex6Module5State8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v6[3] = &__block_descriptor_tmp_70;
  v5 = *a3;
  v6[4] = a1;
  group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  v8 = a2;
  ctu::SharedSynchronizable<coex::Module::State>::execute_wrapped(v4, (uint64_t)v6);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void coex::Module::State::init(coex::Module::State *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  coex::Module::State *v9;
  uint64_t *v10;
  unint64_t v11;
  void *v12;
  const void *v13;
  void *v14;
  uint64_t *v15;
  unint64_t v16;
  void *v17;
  const void *v18;
  void *v19;
  uint64_t *v20;
  unint64_t v21;
  void *v22;
  const void *v23;
  void *v24;
  uint64_t *v25;
  unint64_t v26;
  void *v27;
  const void *v28;
  void *v29;
  uint64_t *v30;
  unint64_t v31;
  void *v32;
  const void *v33;
  void *v34;
  uint64_t *v35;
  unint64_t v36;
  void *v37;
  const void *v38;
  void *v39;
  uint64_t *v40;
  unint64_t v41;
  void *v42;
  const void *v43;
  void *v44;
  uint64_t *v45;
  unint64_t v46;
  void *v47;
  const void *v48;
  void *v49;
  uint64_t *v50;
  unint64_t v51;
  void *v52;
  const void *v53;
  void *v54;
  uint64_t *v55;
  unint64_t v56;
  void *v57;
  const void *v58;
  void *v59;
  uint64_t *v60;
  unint64_t v61;
  void *v62;
  const void *v63;
  void *v64;
  uint64_t *v65;
  unint64_t v66;
  void *v67;
  const void *v68;
  void *v69;
  uint64_t *v70;
  unint64_t v71;
  void *v72;
  const void *v73;
  void *v74;
  uint64_t *v75;
  unint64_t v76;
  void *v77;
  const void *v78;
  void *v79;
  uint64_t *v80;
  unint64_t v81;
  void *v82;
  const void *v83;
  void *v84;
  uint64_t *v85;
  unint64_t v86;
  void *v87;
  const void *v88;
  void *v89;
  uint64_t *v90;
  unint64_t v91;
  void *v92;
  const void *v93;
  void *v94;
  uint64_t *v95;
  unint64_t v96;
  void *v97;
  const void *v98;
  void *v99;
  uint64_t *v100;
  unint64_t v101;
  void *v102;
  const void *v103;
  void *v104;
  uint64_t *v105;
  unint64_t v106;
  void *v107;
  const void *v108;
  void *v109;
  uint64_t *v110;
  unint64_t v111;
  void *v112;
  const void *v113;
  void *v114;
  uint64_t *v115;
  unint64_t v116;
  void *v117;
  const void *v118;
  void *v119;
  uint64_t *v120;
  unint64_t v121;
  void *v122;
  const void *v123;
  void *v124;
  uint64_t *v125;
  unint64_t v126;
  void *v127;
  const void *v128;
  void *v129;
  uint64_t *v130;
  unint64_t v131;
  void *v132;
  const void *v133;
  void *v134;
  _QWORD *v135;
  NSObject *v136;
  _QWORD *v137;
  void *v138;
  std::__shared_weak_count *v139;
  uint64_t v140;
  NSObject *v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  char v149;
  char v150;
  char v151;
  char v152;
  void (*v153)(char *, char *, uint64_t);
  void (*v154)(uint64_t, _WORD *, unsigned int);
  unint64_t *v155;
  unint64_t v156;
  _QWORD *v157;
  unint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  unint64_t v161;
  _QWORD *v162;
  _QWORD *v163;
  unint64_t v164;
  uint64_t **v165;
  __int128 v166;
  pthread_mutex_t *v167;
  unsigned int *v168;
  unsigned int v169;
  uint64_t *v170;
  uint64_t *v171;
  int v172;
  uint64_t **v173;
  uint64_t *v174;
  uint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  uint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  uint64_t v182;
  unsigned int *v183;
  unsigned int v184;
  _QWORD **v185;
  _QWORD *v186;
  _QWORD *v187;
  _QWORD *v188;
  _QWORD *v189;
  _QWORD *v190;
  uint64_t v191;
  _BYTE *v192;
  _QWORD *v193;
  _QWORD *v194;
  _QWORD *v195;
  _QWORD *v196;
  _BYTE *v197;
  _QWORD *v198;
  _QWORD *v199;
  _QWORD *v200;
  int v201;
  _QWORD *v202;
  _QWORD *v203;
  _QWORD *v204;
  _QWORD *v205;
  int v206;
  int v207;
  _QWORD *v208;
  _QWORD *v209;
  _QWORD *v210;
  int v211;
  int v212;
  int v213;
  _QWORD *v214;
  __int128 v215;
  _QWORD *v216;
  _QWORD *v217;
  _QWORD *v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  unsigned int *v222;
  unsigned int v223;
  uint64_t **v224;
  unsigned int *v225;
  unsigned int *v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int *v229;
  unsigned int v230;
  unsigned int v231;
  int v232;
  uint64_t v233;
  BOOL v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t i;
  uint64_t v238;
  unsigned int v239;
  uint64_t v240;
  uint64_t **v241;
  uint64_t v242;
  int v243;
  int v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  BOOL v249;
  BOOL v250;
  uint64_t *v251;
  uint64_t *v252;
  uint64_t **v253;
  uint64_t **v254;
  int v255;
  uint64_t ***v256;
  BOOL v257;
  BOOL v258;
  uint64_t ***v259;
  int v260;
  BOOL v261;
  int v262;
  uint64_t *v263;
  uint64_t *v264;
  int v265;
  uint64_t **v266;
  int v267;
  int v268;
  uint64_t *v269;
  uint64_t *v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t *v275;
  uint64_t v276;
  unsigned int *v277;
  unsigned int *v278;
  unsigned int v279;
  unsigned int v280;
  unsigned int *v281;
  unsigned int v282;
  unsigned int v283;
  _QWORD *v284;
  _QWORD *v285;
  uint64_t v286;
  int *v287;
  int v288;
  uint64_t v289;
  unsigned int *v290;
  unsigned int v291;
  unsigned int v292;
  _QWORD *v293;
  uint64_t *v294;
  unsigned int *v295;
  unsigned int v296;
  unsigned int *v297;
  unsigned int *v298;
  uint64_t *v299;
  _QWORD *v300;
  _QWORD *v301;
  uint64_t *v302;
  unsigned int v303;
  uint64_t v304;
  uint64_t *v305;
  uint64_t *v306;
  uint64_t v307;
  int v308;
  BOOL v309;
  BOOL v310;
  uint64_t *v311;
  int v312;
  uint64_t *v313;
  _QWORD *v314;
  uint64_t v315;
  unsigned int *v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  unsigned int *v321;
  const void *v322;
  unsigned int *v323;
  unsigned int v324;
  unsigned int v325;
  unsigned int *v326;
  unsigned int v327;
  unsigned int v328;
  char *v329;
  char *v330;
  unsigned int *v331;
  unsigned int *v332;
  unsigned int v333;
  unsigned int v334;
  unsigned int *v335;
  unsigned int v336;
  unsigned int v337;
  void (*v338)(__int128 *, __int128 *, uint64_t);
  char *v339;
  _QWORD *v340;
  void *v341;
  char *v342;
  int v343;
  int v344;
  unsigned int *v345;
  unsigned int *v346;
  unsigned int v347;
  unsigned int v348;
  uint64_t v349;
  unsigned int *v350;
  unsigned int v351;
  unsigned int v352;
  unint64_t *v353;
  unint64_t v354;
  _OWORD *v355;
  uint64_t v356;
  uint64_t v357;
  void *v358;
  std::__shared_weak_count *v359;
  uint64_t v360;
  NSObject *v361;
  void *v362;
  void *v363;
  void *v364;
  void *v365;
  void *v366;
  void *v367;
  void *v368;
  char v369;
  char v370;
  char v371;
  char v372;
  void (*v373)(char *, char *, uint64_t);
  void (*v374)(uint64_t, _WORD *, unsigned int);
  unint64_t *v375;
  unint64_t v376;
  _QWORD *v377;
  unint64_t v378;
  _QWORD *v379;
  _QWORD *v380;
  unint64_t v381;
  _QWORD *v382;
  _QWORD *v383;
  unint64_t v384;
  uint64_t **v385;
  __int128 v386;
  pthread_mutex_t *v387;
  unsigned int *v388;
  unsigned int v389;
  uint64_t *v390;
  uint64_t *v391;
  int v392;
  uint64_t **v393;
  uint64_t *v394;
  uint64_t v395;
  _QWORD *v396;
  _QWORD *v397;
  _QWORD *v398;
  uint64_t v399;
  _QWORD *v400;
  _QWORD *v401;
  uint64_t v402;
  unsigned int *v403;
  unsigned int v404;
  _QWORD **v405;
  _QWORD *v406;
  _QWORD *v407;
  _QWORD *v408;
  _QWORD *v409;
  _QWORD *v410;
  uint64_t v411;
  _BYTE *v412;
  _QWORD *v413;
  _QWORD *v414;
  _QWORD *v415;
  _QWORD *v416;
  _BYTE *v417;
  _QWORD *v418;
  _QWORD *v419;
  _QWORD *v420;
  int v421;
  _QWORD *v422;
  _QWORD *v423;
  _QWORD *v424;
  _QWORD *v425;
  int v426;
  int v427;
  _QWORD *v428;
  _QWORD *v429;
  _QWORD *v430;
  int v431;
  int v432;
  int v433;
  _QWORD *v434;
  __int128 v435;
  _QWORD *v436;
  _QWORD *v437;
  _QWORD *v438;
  uint64_t v439;
  uint64_t *v440;
  uint64_t v441;
  unsigned int *v442;
  unsigned int v443;
  uint64_t **v444;
  unsigned int *v445;
  unsigned int *v446;
  unsigned int v447;
  unsigned int v448;
  unsigned int *v449;
  unsigned int v450;
  unsigned int v451;
  int v452;
  uint64_t v453;
  BOOL v454;
  uint64_t v455;
  uint64_t *v456;
  uint64_t j;
  uint64_t v458;
  unsigned int v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t **v462;
  int v463;
  int v464;
  uint64_t *v465;
  uint64_t v466;
  uint64_t v467;
  int v468;
  BOOL v469;
  BOOL v470;
  uint64_t *v471;
  uint64_t *v472;
  int v473;
  BOOL v474;
  uint64_t **v475;
  uint64_t **v476;
  int v477;
  uint64_t ***v478;
  BOOL v479;
  BOOL v480;
  uint64_t ***v481;
  int v482;
  uint64_t *v483;
  uint64_t *v484;
  int v485;
  uint64_t **v486;
  int v487;
  int v488;
  uint64_t *v489;
  uint64_t *v490;
  uint64_t *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t *v495;
  uint64_t v496;
  unsigned int *v497;
  unsigned int *v498;
  unsigned int v499;
  unsigned int v500;
  unsigned int *v501;
  unsigned int v502;
  unsigned int v503;
  _QWORD *v504;
  _QWORD *v505;
  uint64_t v506;
  int *v507;
  int v508;
  uint64_t v509;
  unsigned int *v510;
  unsigned int v511;
  unsigned int v512;
  _QWORD *v513;
  uint64_t *v514;
  unsigned int *v515;
  unsigned int v516;
  unsigned int *v517;
  unsigned int *v518;
  uint64_t *v519;
  _QWORD *v520;
  _QWORD *v521;
  uint64_t *v522;
  unsigned int v523;
  uint64_t v524;
  uint64_t *v525;
  uint64_t *v526;
  uint64_t v527;
  int v528;
  BOOL v529;
  BOOL v530;
  uint64_t *v531;
  const void *v532;
  int v533;
  uint64_t *v534;
  _QWORD *v535;
  uint64_t v536;
  unsigned int *v537;
  unsigned int v538;
  unsigned int v539;
  unsigned int v540;
  unsigned int v541;
  unsigned int *v542;
  unsigned int *v543;
  unsigned int v544;
  unsigned int v545;
  unsigned int *v546;
  unsigned int v547;
  unsigned int v548;
  char *v549;
  char *v550;
  unsigned int *v551;
  unsigned int *v552;
  unsigned int v553;
  unsigned int v554;
  unsigned int *v555;
  unsigned int v556;
  unsigned int v557;
  void (*v558)(__int128 *, __int128 *, uint64_t);
  char *v559;
  _QWORD *v560;
  void *v561;
  char *v562;
  int v563;
  int v564;
  unsigned int *v565;
  unsigned int *v566;
  unsigned int v567;
  unsigned int v568;
  uint64_t v569;
  unsigned int *v570;
  unsigned int v571;
  unsigned int v572;
  unint64_t *v573;
  coex::Module::State *v574;
  unint64_t v575;
  _OWORD *v576;
  uint64_t v577;
  _QWORD *v578;
  void *v579;
  std::__shared_weak_count *v580;
  uint64_t v581;
  NSObject *v582;
  void *v583;
  void *v584;
  void *v585;
  void *v586;
  void *v587;
  void *v588;
  void *v589;
  char v590;
  char v591;
  char v592;
  char v593;
  void (*v594)(char *, char *, uint64_t);
  void (*v595)(uint64_t, _WORD *, unsigned int);
  unint64_t *v596;
  unint64_t v597;
  _QWORD *v598;
  unint64_t v599;
  _QWORD *v600;
  _QWORD *v601;
  unint64_t v602;
  _QWORD *v603;
  _QWORD *v604;
  unint64_t v605;
  uint64_t **v606;
  __int128 v607;
  pthread_mutex_t *v608;
  unsigned int *v609;
  unsigned int v610;
  uint64_t *v611;
  uint64_t *v612;
  int v613;
  uint64_t **v614;
  uint64_t *v615;
  uint64_t v616;
  _QWORD *v617;
  _QWORD *v618;
  _QWORD *v619;
  uint64_t v620;
  _QWORD *v621;
  _QWORD *v622;
  uint64_t v623;
  unsigned int *v624;
  unsigned int v625;
  _QWORD **v626;
  _QWORD *v627;
  _QWORD *v628;
  _QWORD *v629;
  _QWORD *v630;
  _QWORD *v631;
  uint64_t v632;
  _BYTE *v633;
  _QWORD *v634;
  _QWORD *v635;
  _QWORD *v636;
  _QWORD *v637;
  _BYTE *v638;
  _QWORD *v639;
  _QWORD *v640;
  _QWORD *v641;
  int v642;
  _QWORD *v643;
  _QWORD *v644;
  _QWORD *v645;
  _QWORD *v646;
  int v647;
  int v648;
  _QWORD *v649;
  _QWORD *v650;
  _QWORD *v651;
  int v652;
  int v653;
  int v654;
  _QWORD *v655;
  __int128 v656;
  _QWORD *v657;
  _QWORD *v658;
  _QWORD *v659;
  uint64_t v660;
  uint64_t *v661;
  uint64_t v662;
  unsigned int *v663;
  unsigned int v664;
  uint64_t **v665;
  unsigned int *v666;
  unsigned int *v667;
  unsigned int v668;
  unsigned int v669;
  unsigned int *v670;
  unsigned int v671;
  unsigned int v672;
  int v673;
  uint64_t v674;
  BOOL v675;
  uint64_t v676;
  uint64_t *v677;
  uint64_t k;
  uint64_t v679;
  unsigned int v680;
  uint64_t v681;
  char *v682;
  uint64_t **v683;
  int v684;
  int v685;
  uint64_t *v686;
  uint64_t v687;
  uint64_t v688;
  int v689;
  BOOL v690;
  BOOL v691;
  uint64_t *v692;
  uint64_t *v693;
  int v694;
  BOOL v695;
  uint64_t **v696;
  uint64_t **v697;
  int v698;
  uint64_t ***v699;
  BOOL v700;
  BOOL v701;
  uint64_t ***v702;
  int v703;
  uint64_t *v704;
  uint64_t *v705;
  int v706;
  uint64_t **v707;
  int v708;
  int v709;
  uint64_t *v710;
  uint64_t *v711;
  uint64_t *v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t *v716;
  uint64_t v717;
  unsigned int *v718;
  unsigned int *v719;
  unsigned int v720;
  unsigned int v721;
  unsigned int *v722;
  unsigned int v723;
  unsigned int v724;
  _QWORD *v725;
  _QWORD *v726;
  uint64_t v727;
  int *v728;
  int v729;
  uint64_t v730;
  unsigned int *v731;
  unsigned int v732;
  unsigned int v733;
  _QWORD *v734;
  uint64_t *v735;
  unsigned int *v736;
  unsigned int v737;
  unsigned int *v738;
  unsigned int *v739;
  uint64_t *v740;
  _QWORD *v741;
  _QWORD *v742;
  uint64_t *v743;
  unsigned int v744;
  uint64_t v745;
  uint64_t *v746;
  uint64_t *v747;
  uint64_t v748;
  int v749;
  BOOL v750;
  BOOL v751;
  uint64_t *v752;
  const void *v753;
  int v754;
  uint64_t *v755;
  _QWORD *v756;
  uint64_t v757;
  unsigned int *v758;
  unsigned int v759;
  unsigned int v760;
  unsigned int v761;
  unsigned int v762;
  unsigned int *v763;
  unsigned int *v764;
  unsigned int v765;
  unsigned int v766;
  unsigned int *v767;
  unsigned int v768;
  unsigned int v769;
  unsigned int *v770;
  unsigned int v771;
  unsigned int v772;
  unsigned int *v773;
  unsigned int v774;
  unsigned int v775;
  char *v776;
  char *v777;
  unsigned int *v778;
  unsigned int *v779;
  unsigned int v780;
  unsigned int v781;
  unsigned int *v782;
  unsigned int v783;
  unsigned int v784;
  void (*v785)(__int128 *, __int128 *, uint64_t);
  char *v786;
  _QWORD *v787;
  void *v788;
  char *v789;
  int v790;
  int v791;
  unsigned int *v792;
  unsigned int *v793;
  unsigned int v794;
  unsigned int v795;
  uint64_t v796;
  unsigned int *v797;
  unsigned int v798;
  unsigned int v799;
  unint64_t *v800;
  unint64_t v801;
  _OWORD *v802;
  uint64_t v803;
  uint64_t v804;
  void *v805;
  std::__shared_weak_count *v806;
  uint64_t v807;
  NSObject *v808;
  void *v809;
  void *v810;
  void *v811;
  void *v812;
  void *v813;
  void *v814;
  void *v815;
  char v816;
  char v817;
  char v818;
  char v819;
  void (*v820)(char *, char *, uint64_t);
  void (*v821)(uint64_t, _WORD *, unsigned int);
  unint64_t *v822;
  unint64_t v823;
  _QWORD *v824;
  unint64_t v825;
  _QWORD *v826;
  _QWORD *v827;
  unint64_t v828;
  _QWORD *v829;
  _QWORD *v830;
  unint64_t v831;
  uint64_t **v832;
  __int128 v833;
  pthread_mutex_t *v834;
  unsigned int *v835;
  unsigned int v836;
  uint64_t *v837;
  uint64_t *v838;
  int v839;
  uint64_t **v840;
  uint64_t *v841;
  uint64_t v842;
  _QWORD *v843;
  _QWORD *v844;
  _QWORD *v845;
  uint64_t v846;
  _QWORD *v847;
  _QWORD *v848;
  uint64_t v849;
  unsigned int *v850;
  unsigned int v851;
  _QWORD **v852;
  _QWORD *v853;
  _QWORD *v854;
  _QWORD *v855;
  _QWORD *v856;
  _QWORD *v857;
  uint64_t v858;
  _BYTE *v859;
  _QWORD *v860;
  _QWORD *v861;
  _QWORD *v862;
  _QWORD *v863;
  _BYTE *v864;
  _QWORD *v865;
  _QWORD *v866;
  _QWORD *v867;
  int v868;
  _QWORD *v869;
  _QWORD *v870;
  _QWORD *v871;
  _QWORD *v872;
  int v873;
  int v874;
  _QWORD *v875;
  _QWORD *v876;
  _QWORD *v877;
  int v878;
  int v879;
  int v880;
  _QWORD *v881;
  __int128 v882;
  _QWORD *v883;
  _QWORD *v884;
  _QWORD *v885;
  uint64_t v886;
  uint64_t *v887;
  uint64_t v888;
  unsigned int *v889;
  unsigned int v890;
  uint64_t **v891;
  unsigned int *v892;
  unsigned int *v893;
  unsigned int v894;
  unsigned int v895;
  unsigned int *v896;
  unsigned int v897;
  unsigned int v898;
  int v899;
  uint64_t v900;
  BOOL v901;
  uint64_t v902;
  uint64_t *v903;
  uint64_t m;
  uint64_t v905;
  unsigned int v906;
  uint64_t v907;
  char *v908;
  uint64_t **v909;
  int v910;
  int v911;
  uint64_t *v912;
  uint64_t v913;
  uint64_t v914;
  int v915;
  BOOL v916;
  BOOL v917;
  uint64_t *v918;
  uint64_t *v919;
  int v920;
  BOOL v921;
  uint64_t **v922;
  uint64_t **v923;
  int v924;
  uint64_t ***v925;
  BOOL v926;
  BOOL v927;
  uint64_t ***v928;
  int v929;
  uint64_t *v930;
  uint64_t *v931;
  int v932;
  uint64_t **v933;
  int v934;
  int v935;
  uint64_t *v936;
  uint64_t *v937;
  uint64_t *v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t *v942;
  uint64_t v943;
  unsigned int *v944;
  unsigned int *v945;
  unsigned int v946;
  unsigned int v947;
  unsigned int *v948;
  unsigned int v949;
  unsigned int v950;
  _QWORD *v951;
  _QWORD *v952;
  uint64_t v953;
  int *v954;
  int v955;
  uint64_t v956;
  unsigned int *v957;
  unsigned int v958;
  unsigned int v959;
  _QWORD *v960;
  uint64_t *v961;
  unsigned int *v962;
  unsigned int v963;
  unsigned int *v964;
  unsigned int *v965;
  uint64_t *v966;
  _QWORD *v967;
  _QWORD *v968;
  uint64_t *v969;
  unsigned int v970;
  uint64_t v971;
  uint64_t *v972;
  uint64_t *v973;
  uint64_t v974;
  int v975;
  BOOL v976;
  BOOL v977;
  uint64_t *v978;
  const void *v979;
  int v980;
  uint64_t *v981;
  _QWORD *v982;
  uint64_t v983;
  unsigned int *v984;
  unsigned int v985;
  unsigned int v986;
  unsigned int v987;
  unsigned int v988;
  unsigned int *v989;
  unsigned int *v990;
  unsigned int v991;
  unsigned int v992;
  unsigned int *v993;
  unsigned int v994;
  unsigned int v995;
  char *v996;
  char *v997;
  unsigned int *v998;
  unsigned int *v999;
  unsigned int v1000;
  unsigned int v1001;
  unsigned int *v1002;
  unsigned int v1003;
  unsigned int v1004;
  void (*v1005)(__int128 *, __int128 *, uint64_t);
  char *v1006;
  _QWORD *v1007;
  void *v1008;
  char *v1009;
  int v1010;
  int v1011;
  unsigned int *v1012;
  unsigned int *v1013;
  unsigned int v1014;
  unsigned int v1015;
  uint64_t v1016;
  unsigned int *v1017;
  unsigned int v1018;
  unsigned int v1019;
  unint64_t *v1020;
  unint64_t v1021;
  _OWORD *v1022;
  uint64_t v1023;
  __int128 v1024;
  std::__shared_weak_count *v1025;
  unint64_t *v1026;
  unint64_t v1027;
  std::__shared_weak_count *v1028;
  unint64_t *v1029;
  unint64_t v1030;
  CFTypeRef v1031;
  const void *v1032;
  size_t v1033;
  void *v1034;
  void **v1035;
  std::__shared_weak_count *v1036;
  uint64_t v1037;
  uint64_t v1038;
  unint64_t v1039;
  void *v1040;
  NSObject *v1041;
  const void *v1042;
  size_t v1043;
  void *v1044;
  void *v1045;
  coex::Module::State *v1046;
  uint64_t v1047;
  uint64_t v1048;
  unint64_t v1049;
  void *v1050;
  NSObject *v1051;
  unsigned int *v1052;
  unsigned int v1053;
  unsigned int v1054;
  unsigned int *v1055;
  unsigned int v1056;
  unsigned int v1057;
  uint64_t *v1058;
  void *v1059;
  uint64_t *v1060;
  void *v1061;
  uint64_t *v1062;
  void *v1063;
  _BYTE *v1064;
  void *v1065;
  _BYTE *v1066;
  void *v1067;
  void *v1068;
  uint64_t *v1069;
  void *v1070;
  void *v1071;
  _QWORD *v1072;
  _BYTE *v1073;
  void *v1074;
  _BYTE *v1075;
  std::__shared_weak_count *v1076;
  void *v1077;
  void *v1078;
  char *v1079;
  const void *v1080;
  std::__shared_weak_count *v1081;
  std::__shared_weak_count *v1082;
  std::__shared_weak_count *v1083;
  std::__shared_weak_count *v1084;
  _QWORD *v1085;
  uint64_t ***v1086;
  void *v1087;
  uint64_t ***v1088;
  void *v1089;
  uint64_t ***v1090;
  void *v1091;
  uint64_t ***v1092;
  uint64_t v1093;
  uint64_t **v1094;
  unsigned int v1095;
  uint64_t v1096;
  uint64_t **v1097;
  unsigned int v1098;
  uint64_t v1099;
  uint64_t **v1100;
  unsigned int v1101;
  uint64_t v1102;
  uint64_t **v1103;
  unsigned int v1104;
  uint64_t v1105;
  coex::Module::State *v1106;
  _QWORD v1107[6];
  std::__shared_weak_count *v1108;
  void *v1109;
  dispatch_object_t v1110;
  void *v1111[2];
  unint64_t v1112;
  _QWORD v1113[6];
  std::__shared_weak_count *v1114;
  void *v1115;
  dispatch_object_t v1116;
  void *__dst[2];
  unint64_t v1118;
  CFTypeRef cf;
  void *v1120[2];
  char v1121;
  __int128 v1122;
  _QWORD v1123[6];
  std::__shared_weak_count *v1124;
  _QWORD v1125[6];
  std::__shared_weak_count *v1126;
  _QWORD v1127[6];
  std::__shared_weak_count *v1128;
  _QWORD v1129[6];
  std::__shared_weak_count *v1130;
  _QWORD v1131[6];
  std::__shared_weak_count *v1132;
  _QWORD v1133[6];
  std::__shared_weak_count *v1134;
  _QWORD v1135[6];
  std::__shared_weak_count *v1136;
  _QWORD v1137[6];
  std::__shared_weak_count *v1138;
  _QWORD v1139[6];
  std::__shared_weak_count *v1140;
  _QWORD v1141[6];
  std::__shared_weak_count *v1142;
  _QWORD v1143[6];
  std::__shared_weak_count *v1144;
  _QWORD v1145[6];
  std::__shared_weak_count *v1146;
  _QWORD v1147[6];
  std::__shared_weak_count *v1148;
  _QWORD v1149[6];
  std::__shared_weak_count *v1150;
  _QWORD v1151[6];
  std::__shared_weak_count *v1152;
  _QWORD v1153[6];
  std::__shared_weak_count *v1154;
  _QWORD v1155[6];
  std::__shared_weak_count *v1156;
  _QWORD v1157[6];
  std::__shared_weak_count *v1158;
  _QWORD v1159[6];
  std::__shared_weak_count *v1160;
  _QWORD v1161[6];
  std::__shared_weak_count *v1162;
  _QWORD v1163[6];
  std::__shared_weak_count *v1164;
  _QWORD v1165[6];
  std::__shared_weak_count *v1166;
  _QWORD v1167[6];
  std::__shared_weak_count *v1168;
  _QWORD v1169[6];
  std::__shared_weak_count *v1170;
  _QWORD aBlock[6];
  std::__shared_weak_count *v1172;
  void **v1173;
  uint64_t v1174;
  void *v1175;
  void *v1176;
  char *v1177;
  uint64_t (*v1178)(coex::Module::State *__hidden);
  uint64_t v1179;
  dispatch_object_t v1180;
  void *v1181;
  void *v1182[2];
  __int128 v1183;
  __int128 v1184;
  uint64_t v1185;
  dispatch_object_t v1186;
  void *v1187;
  dispatch_object_t object;
  void *v1189;
  uint64_t (**v1190)();
  unint64_t v1191;
  void *v1192;
  __int128 block;
  __int128 v1194;
  void *v1195[2];
  __int128 v1196;
  __int128 v1197;
  __int128 v1198;
  __int128 v1199;
  __int128 v1200;
  __int128 v1201;
  __int128 v1202;
  unint64_t v1203;
  void *__p;
  uint64_t v1205;
  pthread_mutex_t *v1206;
  uint64_t v1207;

  v1207 = *MEMORY[0x1E0C80C00];
  v1105 = *((_QWORD *)this + 9);
  v1079 = (char *)this + 72;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v4 = v3;
  p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
  do
    v6 = __ldxr(p_shared_weak_owners);
  while (__stxr(v6 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  v9 = this;
  v10 = (uint64_t *)*((_QWORD *)this + 15);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State4initEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_4;
  v1106 = v9;
  aBlock[4] = v9;
  aBlock[5] = v1105;
  v1172 = v4;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  v12 = _Block_copy(aBlock);
  v13 = v12;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_5;
  v1195[0] = v10;
  LODWORD(v1196) = 1200;
  if (v12)
    v14 = _Block_copy(v12);
  else
    v14 = 0;
  v1195[1] = v14;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v10 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v13)
    _Block_release(v13);
  v15 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1169[0] = MEMORY[0x1E0C809B0];
  v1169[1] = 1174405120;
  v1169[2] = ___ZN4coex6Module5State4initEv_block_invoke_16;
  v1169[3] = &__block_descriptor_tmp_17;
  v1169[4] = v1106;
  v1169[5] = v1105;
  v1170 = v4;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  v17 = _Block_copy(v1169);
  v18 = v17;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_5;
  v1195[0] = v15;
  LODWORD(v1196) = 1201;
  if (v17)
    v19 = _Block_copy(v17);
  else
    v19 = 0;
  v1195[1] = v19;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v15 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v18)
    _Block_release(v18);
  v20 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1167[0] = MEMORY[0x1E0C809B0];
  v1167[1] = 1174405120;
  v1167[2] = ___ZN4coex6Module5State4initEv_block_invoke_18;
  v1167[3] = &__block_descriptor_tmp_19_0;
  v1167[4] = v1106;
  v1167[5] = v1105;
  v1168 = v4;
  do
    v21 = __ldxr(p_shared_weak_owners);
  while (__stxr(v21 + 1, p_shared_weak_owners));
  v22 = _Block_copy(v1167);
  v23 = v22;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_5;
  v1195[0] = v20;
  LODWORD(v1196) = 1202;
  if (v22)
    v24 = _Block_copy(v22);
  else
    v24 = 0;
  v1195[1] = v24;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v20 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v23)
    _Block_release(v23);
  v25 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1165[0] = MEMORY[0x1E0C809B0];
  v1165[1] = 1174405120;
  v1165[2] = ___ZN4coex6Module5State4initEv_block_invoke_20;
  v1165[3] = &__block_descriptor_tmp_21_0;
  v1165[4] = v1106;
  v1165[5] = v1105;
  v1166 = v4;
  do
    v26 = __ldxr(p_shared_weak_owners);
  while (__stxr(v26 + 1, p_shared_weak_owners));
  v27 = _Block_copy(v1165);
  v28 = v27;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_5;
  v1195[0] = v25;
  LODWORD(v1196) = 1203;
  if (v27)
    v29 = _Block_copy(v27);
  else
    v29 = 0;
  v1195[1] = v29;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v25 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v28)
    _Block_release(v28);
  v30 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1163[0] = MEMORY[0x1E0C809B0];
  v1163[1] = 1174405120;
  v1163[2] = ___ZN4coex6Module5State4initEv_block_invoke_22;
  v1163[3] = &__block_descriptor_tmp_23_0;
  v1163[4] = v1106;
  v1163[5] = v1105;
  v1164 = v4;
  do
    v31 = __ldxr(p_shared_weak_owners);
  while (__stxr(v31 + 1, p_shared_weak_owners));
  v32 = _Block_copy(v1163);
  v33 = v32;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_5;
  v1195[0] = v30;
  LODWORD(v1196) = 1206;
  if (v32)
    v34 = _Block_copy(v32);
  else
    v34 = 0;
  v1195[1] = v34;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v30 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v33)
    _Block_release(v33);
  v35 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1161[0] = MEMORY[0x1E0C809B0];
  v1161[1] = 1174405120;
  v1161[2] = ___ZN4coex6Module5State4initEv_block_invoke_24;
  v1161[3] = &__block_descriptor_tmp_25_0;
  v1161[4] = v1106;
  v1161[5] = v1105;
  v1162 = v4;
  do
    v36 = __ldxr(p_shared_weak_owners);
  while (__stxr(v36 + 1, p_shared_weak_owners));
  v37 = _Block_copy(v1161);
  v38 = v37;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_5;
  v1195[0] = v35;
  LODWORD(v1196) = 1204;
  if (v37)
    v39 = _Block_copy(v37);
  else
    v39 = 0;
  v1195[1] = v39;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v35 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v38)
    _Block_release(v38);
  v40 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1159[0] = MEMORY[0x1E0C809B0];
  v1159[1] = 1174405120;
  v1159[2] = ___ZN4coex6Module5State4initEv_block_invoke_26;
  v1159[3] = &__block_descriptor_tmp_27_0;
  v1159[4] = v1106;
  v1159[5] = v1105;
  v1160 = v4;
  do
    v41 = __ldxr(p_shared_weak_owners);
  while (__stxr(v41 + 1, p_shared_weak_owners));
  v42 = _Block_copy(v1159);
  v43 = v42;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_5;
  v1195[0] = v40;
  LODWORD(v1196) = 1205;
  if (v42)
    v44 = _Block_copy(v42);
  else
    v44 = 0;
  v1195[1] = v44;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v40 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v43)
    _Block_release(v43);
  v45 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1157[0] = MEMORY[0x1E0C809B0];
  v1157[1] = 1174405120;
  v1157[2] = ___ZN4coex6Module5State4initEv_block_invoke_28;
  v1157[3] = &__block_descriptor_tmp_29;
  v1157[4] = v1106;
  v1157[5] = v1105;
  v1158 = v4;
  do
    v46 = __ldxr(p_shared_weak_owners);
  while (__stxr(v46 + 1, p_shared_weak_owners));
  v47 = _Block_copy(v1157);
  v48 = v47;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_5;
  v1195[0] = v45;
  LODWORD(v1196) = 1207;
  if (v47)
    v49 = _Block_copy(v47);
  else
    v49 = 0;
  v1195[1] = v49;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v45 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v48)
    _Block_release(v48);
  v50 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1155[0] = MEMORY[0x1E0C809B0];
  v1155[1] = 1174405120;
  v1155[2] = ___ZN4coex6Module5State4initEv_block_invoke_30;
  v1155[3] = &__block_descriptor_tmp_31_0;
  v1155[4] = v1106;
  v1155[5] = v1105;
  v1156 = v4;
  do
    v51 = __ldxr(p_shared_weak_owners);
  while (__stxr(v51 + 1, p_shared_weak_owners));
  v52 = _Block_copy(v1155);
  v53 = v52;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_5;
  v1195[0] = v50;
  LODWORD(v1196) = 1208;
  if (v52)
    v54 = _Block_copy(v52);
  else
    v54 = 0;
  v1195[1] = v54;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v50 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v53)
    _Block_release(v53);
  v55 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1153[0] = MEMORY[0x1E0C809B0];
  v1153[1] = 1174405120;
  v1153[2] = ___ZN4coex6Module5State4initEv_block_invoke_32;
  v1153[3] = &__block_descriptor_tmp_33;
  v1153[4] = v1106;
  v1153[5] = v1105;
  v1154 = v4;
  do
    v56 = __ldxr(p_shared_weak_owners);
  while (__stxr(v56 + 1, p_shared_weak_owners));
  v57 = _Block_copy(v1153);
  v58 = v57;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_5;
  v1195[0] = v55;
  LODWORD(v1196) = 1209;
  if (v57)
    v59 = _Block_copy(v57);
  else
    v59 = 0;
  v1195[1] = v59;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v55 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v58)
    _Block_release(v58);
  v60 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1151[0] = MEMORY[0x1E0C809B0];
  v1151[1] = 1174405120;
  v1151[2] = ___ZN4coex6Module5State4initEv_block_invoke_34;
  v1151[3] = &__block_descriptor_tmp_35;
  v1151[4] = v1106;
  v1151[5] = v1105;
  v1152 = v4;
  do
    v61 = __ldxr(p_shared_weak_owners);
  while (__stxr(v61 + 1, p_shared_weak_owners));
  v62 = _Block_copy(v1151);
  v63 = v62;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_5;
  v1195[0] = v60;
  LODWORD(v1196) = 1210;
  if (v62)
    v64 = _Block_copy(v62);
  else
    v64 = 0;
  v1195[1] = v64;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v60 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v63)
    _Block_release(v63);
  v65 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1149[0] = MEMORY[0x1E0C809B0];
  v1149[1] = 1174405120;
  v1149[2] = ___ZN4coex6Module5State4initEv_block_invoke_36;
  v1149[3] = &__block_descriptor_tmp_37;
  v1149[4] = v1106;
  v1149[5] = v1105;
  v1150 = v4;
  do
    v66 = __ldxr(p_shared_weak_owners);
  while (__stxr(v66 + 1, p_shared_weak_owners));
  v67 = _Block_copy(v1149);
  v68 = v67;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_5;
  v1195[0] = v65;
  LODWORD(v1196) = 1211;
  if (v67)
    v69 = _Block_copy(v67);
  else
    v69 = 0;
  v1195[1] = v69;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v65 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v68)
    _Block_release(v68);
  v70 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1147[0] = MEMORY[0x1E0C809B0];
  v1147[1] = 1174405120;
  v1147[2] = ___ZN4coex6Module5State4initEv_block_invoke_38;
  v1147[3] = &__block_descriptor_tmp_39;
  v1147[4] = v1106;
  v1147[5] = v1105;
  v1148 = v4;
  do
    v71 = __ldxr(p_shared_weak_owners);
  while (__stxr(v71 + 1, p_shared_weak_owners));
  v72 = _Block_copy(v1147);
  v73 = v72;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_5;
  v1195[0] = v70;
  LODWORD(v1196) = 1212;
  if (v72)
    v74 = _Block_copy(v72);
  else
    v74 = 0;
  v1195[1] = v74;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v70 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v73)
    _Block_release(v73);
  v75 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1145[0] = MEMORY[0x1E0C809B0];
  v1145[1] = 1174405120;
  v1145[2] = ___ZN4coex6Module5State4initEv_block_invoke_40;
  v1145[3] = &__block_descriptor_tmp_41;
  v1145[4] = v1106;
  v1145[5] = v1105;
  v1146 = v4;
  do
    v76 = __ldxr(p_shared_weak_owners);
  while (__stxr(v76 + 1, p_shared_weak_owners));
  v77 = _Block_copy(v1145);
  v78 = v77;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_5;
  v1195[0] = v75;
  LODWORD(v1196) = 1213;
  if (v77)
    v79 = _Block_copy(v77);
  else
    v79 = 0;
  v1195[1] = v79;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v75 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v78)
    _Block_release(v78);
  v80 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1143[0] = MEMORY[0x1E0C809B0];
  v1143[1] = 1174405120;
  v1143[2] = ___ZN4coex6Module5State4initEv_block_invoke_42;
  v1143[3] = &__block_descriptor_tmp_43;
  v1143[4] = v1106;
  v1143[5] = v1105;
  v1144 = v4;
  do
    v81 = __ldxr(p_shared_weak_owners);
  while (__stxr(v81 + 1, p_shared_weak_owners));
  v82 = _Block_copy(v1143);
  v83 = v82;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_5;
  v1195[0] = v80;
  LODWORD(v1196) = 1214;
  if (v82)
    v84 = _Block_copy(v82);
  else
    v84 = 0;
  v1195[1] = v84;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v80 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v83)
    _Block_release(v83);
  v85 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1141[0] = MEMORY[0x1E0C809B0];
  v1141[1] = 1174405120;
  v1141[2] = ___ZN4coex6Module5State4initEv_block_invoke_44;
  v1141[3] = &__block_descriptor_tmp_45_0;
  v1141[4] = v1106;
  v1141[5] = v1105;
  v1142 = v4;
  do
    v86 = __ldxr(p_shared_weak_owners);
  while (__stxr(v86 + 1, p_shared_weak_owners));
  v87 = _Block_copy(v1141);
  v88 = v87;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_5;
  v1195[0] = v85;
  LODWORD(v1196) = 1215;
  if (v87)
    v89 = _Block_copy(v87);
  else
    v89 = 0;
  v1195[1] = v89;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v85 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v88)
    _Block_release(v88);
  v90 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1139[0] = MEMORY[0x1E0C809B0];
  v1139[1] = 1174405120;
  v1139[2] = ___ZN4coex6Module5State4initEv_block_invoke_46;
  v1139[3] = &__block_descriptor_tmp_47;
  v1139[4] = v1106;
  v1139[5] = v1105;
  v1140 = v4;
  do
    v91 = __ldxr(p_shared_weak_owners);
  while (__stxr(v91 + 1, p_shared_weak_owners));
  v92 = _Block_copy(v1139);
  v93 = v92;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_5;
  v1195[0] = v90;
  LODWORD(v1196) = 1216;
  if (v92)
    v94 = _Block_copy(v92);
  else
    v94 = 0;
  v1195[1] = v94;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v90 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v93)
    _Block_release(v93);
  v95 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1137[0] = MEMORY[0x1E0C809B0];
  v1137[1] = 1174405120;
  v1137[2] = ___ZN4coex6Module5State4initEv_block_invoke_48;
  v1137[3] = &__block_descriptor_tmp_49;
  v1137[4] = v1106;
  v1137[5] = v1105;
  v1138 = v4;
  do
    v96 = __ldxr(p_shared_weak_owners);
  while (__stxr(v96 + 1, p_shared_weak_owners));
  v97 = _Block_copy(v1137);
  v98 = v97;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_5;
  v1195[0] = v95;
  LODWORD(v1196) = 1221;
  if (v97)
    v99 = _Block_copy(v97);
  else
    v99 = 0;
  v1195[1] = v99;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v95 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v98)
    _Block_release(v98);
  v100 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1135[0] = MEMORY[0x1E0C809B0];
  v1135[1] = 1174405120;
  v1135[2] = ___ZN4coex6Module5State4initEv_block_invoke_50;
  v1135[3] = &__block_descriptor_tmp_51;
  v1135[4] = v1106;
  v1135[5] = v1105;
  v1136 = v4;
  do
    v101 = __ldxr(p_shared_weak_owners);
  while (__stxr(v101 + 1, p_shared_weak_owners));
  v102 = _Block_copy(v1135);
  v103 = v102;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_5;
  v1195[0] = v100;
  LODWORD(v1196) = 1224;
  if (v102)
    v104 = _Block_copy(v102);
  else
    v104 = 0;
  v1195[1] = v104;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v100 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v103)
    _Block_release(v103);
  v105 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1133[0] = MEMORY[0x1E0C809B0];
  v1133[1] = 1174405120;
  v1133[2] = ___ZN4coex6Module5State4initEv_block_invoke_52;
  v1133[3] = &__block_descriptor_tmp_53;
  v1133[4] = v1106;
  v1133[5] = v1105;
  v1134 = v4;
  do
    v106 = __ldxr(p_shared_weak_owners);
  while (__stxr(v106 + 1, p_shared_weak_owners));
  v107 = _Block_copy(v1133);
  v108 = v107;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_5;
  v1195[0] = v105;
  LODWORD(v1196) = 1222;
  if (v107)
    v109 = _Block_copy(v107);
  else
    v109 = 0;
  v1195[1] = v109;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v105 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v108)
    _Block_release(v108);
  v110 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1131[0] = MEMORY[0x1E0C809B0];
  v1131[1] = 1174405120;
  v1131[2] = ___ZN4coex6Module5State4initEv_block_invoke_54;
  v1131[3] = &__block_descriptor_tmp_55;
  v1131[4] = v1106;
  v1131[5] = v1105;
  v1132 = v4;
  do
    v111 = __ldxr(p_shared_weak_owners);
  while (__stxr(v111 + 1, p_shared_weak_owners));
  v112 = _Block_copy(v1131);
  v113 = v112;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_5;
  v1195[0] = v110;
  LODWORD(v1196) = 1217;
  if (v112)
    v114 = _Block_copy(v112);
  else
    v114 = 0;
  v1195[1] = v114;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v110 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v113)
    _Block_release(v113);
  v115 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1129[0] = MEMORY[0x1E0C809B0];
  v1129[1] = 1174405120;
  v1129[2] = ___ZN4coex6Module5State4initEv_block_invoke_56;
  v1129[3] = &__block_descriptor_tmp_57;
  v1129[4] = v1106;
  v1129[5] = v1105;
  v1130 = v4;
  do
    v116 = __ldxr(p_shared_weak_owners);
  while (__stxr(v116 + 1, p_shared_weak_owners));
  v117 = _Block_copy(v1129);
  v118 = v117;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_5;
  v1195[0] = v115;
  LODWORD(v1196) = 1218;
  if (v117)
    v119 = _Block_copy(v117);
  else
    v119 = 0;
  v1195[1] = v119;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v115 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v118)
    _Block_release(v118);
  v120 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1127[0] = MEMORY[0x1E0C809B0];
  v1127[1] = 1174405120;
  v1127[2] = ___ZN4coex6Module5State4initEv_block_invoke_58;
  v1127[3] = &__block_descriptor_tmp_59;
  v1127[4] = v1106;
  v1127[5] = v1105;
  v1128 = v4;
  do
    v121 = __ldxr(p_shared_weak_owners);
  while (__stxr(v121 + 1, p_shared_weak_owners));
  v122 = _Block_copy(v1127);
  v123 = v122;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_5;
  v1195[0] = v120;
  LODWORD(v1196) = 1219;
  if (v122)
    v124 = _Block_copy(v122);
  else
    v124 = 0;
  v1195[1] = v124;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v120 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v123)
    _Block_release(v123);
  v125 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1125[0] = MEMORY[0x1E0C809B0];
  v1125[1] = 1174405120;
  v1125[2] = ___ZN4coex6Module5State4initEv_block_invoke_60;
  v1125[3] = &__block_descriptor_tmp_61;
  v1125[4] = v1106;
  v1125[5] = v1105;
  v1126 = v4;
  do
    v126 = __ldxr(p_shared_weak_owners);
  while (__stxr(v126 + 1, p_shared_weak_owners));
  v127 = _Block_copy(v1125);
  v128 = v127;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_5;
  v1195[0] = v125;
  LODWORD(v1196) = 1220;
  if (v127)
    v129 = _Block_copy(v127);
  else
    v129 = 0;
  v1195[1] = v129;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v125 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v128)
    _Block_release(v128);
  v130 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1123[0] = MEMORY[0x1E0C809B0];
  v1123[1] = 1174405120;
  v1123[2] = ___ZN4coex6Module5State4initEv_block_invoke_62;
  v1123[3] = &__block_descriptor_tmp_63;
  v1123[4] = v1106;
  v1123[5] = v1105;
  v1124 = v4;
  do
    v131 = __ldxr(p_shared_weak_owners);
  while (__stxr(v131 + 1, p_shared_weak_owners));
  v132 = _Block_copy(v1123);
  v133 = v132;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_5;
  v1195[0] = v130;
  LODWORD(v1196) = 1223;
  if (v132)
    v134 = _Block_copy(v132);
  else
    v134 = 0;
  v1195[1] = v134;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v130 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v133)
    _Block_release(v133);
  v135 = (_QWORD *)*((_QWORD *)v1106 + 15);
  v1182[0] = (void *)MEMORY[0x1E0C809B0];
  v1182[1] = (void *)0x40000000;
  *(_QWORD *)&v1183 = ___ZN4coex9XpcClient5startEv_block_invoke;
  *((_QWORD *)&v1183 + 1) = &__block_descriptor_tmp_9;
  *(_QWORD *)&v1184 = v135;
  v1173 = v1182;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 0x40000000;
  *(_QWORD *)&v1194 = ___ZNK3ctu20SharedSynchronizableINS_9XpcClientEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_11_2;
  v1195[0] = v135 + 1;
  v1195[1] = &v1173;
  v136 = v135[3];
  if (v135[4])
    dispatch_async_and_wait(v136, &block);
  else
    dispatch_sync(v136, &block);
  v137 = (_QWORD *)*((_QWORD *)v1106 + 13);
  v1173 = (void **)MEMORY[0x1E0C809B0];
  v1174 = 0x40000000;
  v1175 = ___ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE13connect_eventIN5boost8signals26signalIFvvENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionIS9_EENSF_IFvRKNS7_10connectionEEEENS7_5mutexEEES3_vJEEEDTcl7connectfp_cvNSC_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSS_SU_E_block_invoke;
  v1176 = &__block_descriptor_tmp_251;
  v1177 = v1079;
  v1178 = coex::Module::State::handleCommandDriverStarted_sync;
  v1179 = 0;
  v138 = _Block_copy(&v1173);
  v1085 = v137;
  v139 = (std::__shared_weak_count *)*((_QWORD *)v1106 + 10);
  if (!v139 || (v140 = *((_QWORD *)v1106 + 9), (v1081 = std::__shared_weak_count::lock(v139)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v141 = *((_QWORD *)v1106 + 11);
  v1180 = v141;
  v1070 = v138;
  if (v138)
    v142 = _Block_copy(v138);
  else
    v142 = 0;
  v1181 = v142;
  dispatch_retain(v141);
  v1183 = 0u;
  *(_OWORD *)v1182 = 0u;
  v1186 = v141;
  if (v142)
    v142 = _Block_copy(v142);
  v1187 = v142;
  dispatch_retain(v141);
  object = v141;
  v1076 = v4;
  v1093 = v140;
  if (!v142)
  {
    v1189 = 0;
    dispatch_retain(v141);
    goto LABEL_253;
  }
  v143 = _Block_copy(v142);
  v1189 = v143;
  dispatch_retain(v141);
  if (!v143)
  {
LABEL_253:
    dispatch_retain(v141);
    v1190 = 0;
    goto LABEL_254;
  }
  v144 = _Block_copy(v143);
  dispatch_retain(v141);
  v1190 = 0;
  if (!v144)
  {
LABEL_254:
    dispatch_retain(v141);
    v1063 = 0;
    v149 = 1;
LABEL_255:
    dispatch_retain(v141);
    v1077 = 0;
    v150 = 1;
LABEL_256:
    dispatch_retain(v141);
    v146 = 0;
    v151 = 1;
LABEL_257:
    dispatch_retain(v141);
    v147 = 0;
    v1191 = (unint64_t)v141;
    v152 = 1;
    goto LABEL_258;
  }
  v145 = _Block_copy(v144);
  dispatch_retain(v141);
  v1063 = v144;
  if (!v145)
  {
    v149 = 0;
    goto LABEL_255;
  }
  v146 = _Block_copy(v145);
  dispatch_retain(v141);
  v1077 = v145;
  if (!v146)
  {
    v149 = 0;
    v150 = 0;
    goto LABEL_256;
  }
  v147 = _Block_copy(v146);
  dispatch_retain(v141);
  if (!v147)
  {
    v149 = 0;
    v150 = 0;
    v151 = 0;
    goto LABEL_257;
  }
  v148 = _Block_copy(v147);
  dispatch_retain(v141);
  v1191 = (unint64_t)v141;
  if (v148)
  {
    v149 = 0;
    v150 = 0;
    v151 = 0;
    v152 = 0;
    v1192 = _Block_copy(v148);
    dispatch_retain(v141);
    dispatch_release(v141);
    _Block_release(v148);
    goto LABEL_259;
  }
  v149 = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
LABEL_258:
  v1192 = 0;
  dispatch_retain(v141);
  dispatch_release(v141);
LABEL_259:
  dispatch_release(v141);
  if ((v152 & 1) == 0)
    _Block_release(v147);
  dispatch_release(v141);
  if ((v151 & 1) == 0)
    _Block_release(v146);
  v1190 = boost::function0<void>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>)::stored_vtable;
  dispatch_release(v141);
  if ((v150 & 1) == 0)
    _Block_release(v1077);
  dispatch_release(v141);
  if ((v149 & 1) == 0)
    _Block_release(v1063);
  *((_QWORD *)&v1194 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v1194 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&block + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&block = 0;
  boost::function0<void>::move_assign((uint64_t)&block, (uint64_t *)&v1190);
  boost::function0<void>::move_assign((uint64_t)&v1190, (uint64_t *)&v1183 + 1);
  boost::function0<void>::move_assign((uint64_t)&v1183 + 8, (uint64_t *)&block);
  if ((_QWORD)block)
  {
    if ((block & 1) == 0)
    {
      v153 = *(void (**)(char *, char *, uint64_t))(block & 0xFFFFFFFFFFFFFFFELL);
      if (v153)
        v153((char *)&block + 8, (char *)&block + 8, 2);
    }
  }
  if (v1190)
  {
    if ((v1190 & 1) == 0)
    {
      v154 = *(void (**)(uint64_t, _WORD *, unsigned int))((unint64_t)v1190 & 0xFFFFFFFFFFFFFFFELL);
      if (v154)
        v154((uint64_t)&v1191, &v1191, 2u);
    }
    v1190 = 0;
  }
  dispatch_release(object);
  if (v1189)
    _Block_release(v1189);
  dispatch_release(v1186);
  if (v1187)
    _Block_release(v1187);
  v1078 = (char *)v1106 + 224;
  v155 = (unint64_t *)&v1081->__shared_weak_owners_;
  do
    v156 = __ldxr(v155);
  while (__stxr(v156 + 1, v155));
  v157 = operator new(0x18uLL);
  *v157 = &off_1E78FE068;
  v157[1] = v1093;
  v157[2] = v1081;
  do
    v158 = __ldxr(v155);
  while (__stxr(v158 + 1, v155));
  v159 = operator new(0x18uLL);
  v160 = v159;
  *v159 = &off_1E78FE068;
  v159[1] = v1093;
  v159[2] = v1081;
  do
    v161 = __ldxr(v155);
  while (__stxr(v161 + 1, v155));
  *((_QWORD *)&block + 1) = v159;
  LODWORD(block) = 2;
  v162 = v1182[1];
  if (v1182[1] < (void *)v1183)
  {
    v163 = operator new(0x18uLL);
    *v163 = &off_1E78FE068;
    v163[1] = v1093;
    v163[2] = v1081;
    do
      v164 = __ldxr(v155);
    while (__stxr(v164 + 1, v155));
    v162[1] = v163;
    *(_DWORD *)v162 = 2;
    v1182[1] = v162 + 3;
LABEL_290:
    (*(void (**)(_QWORD *))(*v160 + 8))(v160);
    goto LABEL_291;
  }
  v287 = std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((uint64_t *)v1182, (uint64_t)&block);
  v288 = block ^ ((int)block >> 31);
  v1182[1] = v287;
  if (v288 == 2)
  {
    v160 = (_QWORD *)*((_QWORD *)&block + 1);
    if (!*((_QWORD *)&block + 1))
      goto LABEL_291;
    goto LABEL_290;
  }
  if (v288 == 1)
  {
    v289 = v1194;
    if ((_QWORD)v1194)
    {
      v290 = (unsigned int *)(v1194 + 12);
      do
      {
        v291 = __ldaxr(v290);
        v292 = v291 - 1;
      }
      while (__stlxr(v292, v290));
      if (!v292)
LABEL_500:
        (*(void (**)(uint64_t))(*(_QWORD *)v289 + 24))(v289);
    }
  }
  else
  {
    v289 = v1194;
    if ((_QWORD)v1194)
    {
      v770 = (unsigned int *)(v1194 + 12);
      do
      {
        v771 = __ldaxr(v770);
        v772 = v771 - 1;
      }
      while (__stlxr(v772, v770));
      if (!v772)
        goto LABEL_500;
    }
  }
LABEL_291:
  (*(void (**)(_QWORD *))(*v157 + 8))(v157);
  std::__shared_weak_count::__release_weak(v1081);
  v165 = (uint64_t **)v1085[16];
  *(_QWORD *)&v166 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v166 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v1202 = v166;
  v1201 = v166;
  v1200 = v166;
  v1199 = v166;
  v1198 = v166;
  v1197 = v166;
  v1196 = v166;
  *(_OWORD *)v1195 = v166;
  v1194 = v166;
  block = v166;
  v167 = (pthread_mutex_t *)v165[3];
  v1203 = 10;
  __p = &block;
  v1205 = 0;
  v1206 = v167;
  pthread_mutex_lock(v167);
  v1191 = 0xAAAAAAAAAAAAAAAALL;
  v1190 = (uint64_t (**)())0xAAAAAAAAAAAAAAAALL;
  v168 = (unsigned int *)v165[1];
  v1086 = (uint64_t ***)v165;
  if (!v168 || (v169 = atomic_load(v168 + 2), v169 != 1))
  {
    v173 = (uint64_t **)operator new(0x20uLL);
    v174 = *v165;
    v175 = **v165;
    v1094 = v173;
    v176 = operator new(0x40uLL);
    v177 = v176;
    *v176 = v176;
    v176[1] = v176;
    v176[2] = 0;
    v178 = *(_QWORD **)(v175 + 8);
    if (v178 != (_QWORD *)v175)
    {
      v179 = 0;
      v180 = v176;
      do
      {
        v181 = operator new(0x20uLL);
        v181[2] = v178[2];
        v182 = v178[3];
        v181[3] = v182;
        if (v182)
        {
          v183 = (unsigned int *)(v182 + 8);
          do
            v184 = __ldxr(v183);
          while (__stxr(v184 + 1, v183));
          v180 = (_QWORD *)*v177;
          v179 = v177[2];
        }
        *v181 = v180;
        v181[1] = v177;
        v180[1] = v181;
        *v177 = v181;
        v177[2] = ++v179;
        v178 = (_QWORD *)v178[1];
        v180 = v181;
      }
      while (v178 != (_QWORD *)v175);
    }
    v1058 = v174;
    v1064 = (_BYTE *)v175;
    v177[3] = 0;
    v185 = (_QWORD **)(v177 + 3);
    v177[4] = 0;
    v186 = v177 + 4;
    v177[5] = 0;
    *((_BYTE *)v177 + 48) = *(_BYTE *)(v175 + 48);
    v177[3] = v177 + 4;
    v187 = *(_QWORD **)(v175 + 24);
    v188 = (_QWORD *)(v175 + 32);
    if (v187 == (_QWORD *)(v175 + 32))
    {
LABEL_303:
      *((_BYTE *)v177 + 56) = v1064[56];
      v189 = (_QWORD *)*((_QWORD *)v1064 + 3);
      if (v189 != v188)
      {
        v190 = (_QWORD *)v177[3];
        v191 = v177[1];
        do
        {
          v190[6] = v191;
          v192 = v1064;
          if (v189 != v188)
            v192 = (_BYTE *)v189[6];
          v193 = (_QWORD *)v189[1];
          v194 = v193;
          v195 = v189;
          if (v193)
          {
            do
            {
              v196 = v194;
              v194 = (_QWORD *)*v194;
            }
            while (v194);
          }
          else
          {
            do
            {
              v196 = (_QWORD *)v195[2];
              v249 = *v196 == (_QWORD)v195;
              v195 = v196;
            }
            while (!v249);
          }
          v197 = v1064;
          if (v196 != v188)
            v197 = (_BYTE *)v196[6];
          while (v192 != v197)
          {
            v192 = (_BYTE *)*((_QWORD *)v192 + 1);
            v191 = *(_QWORD *)(v191 + 8);
          }
          if (v193)
          {
            do
            {
              v198 = v193;
              v193 = (_QWORD *)*v193;
            }
            while (v193);
          }
          else
          {
            do
            {
              v198 = (_QWORD *)v189[2];
              v249 = *v198 == (_QWORD)v189;
              v189 = v198;
            }
            while (!v249);
          }
          v199 = (_QWORD *)v190[1];
          if (v199)
          {
            do
            {
              v200 = v199;
              v199 = (_QWORD *)*v199;
            }
            while (v199);
          }
          else
          {
            do
            {
              v200 = (_QWORD *)v190[2];
              v249 = *v200 == (_QWORD)v190;
              v190 = v200;
            }
            while (!v249);
          }
          v189 = v198;
          v190 = v200;
        }
        while (v198 != v188);
      }
      *v1094 = v177;
      v1094[1] = 0;
      v220 = (uint64_t *)operator new(0x18uLL);
      v165 = (uint64_t **)v1086;
      v220[1] = 0x100000001;
      *v220 = (uint64_t)off_1E78FDCD0;
      v220[2] = (uint64_t)v177;
      v1094[1] = v220;
      v1094[2] = (uint64_t *)v1058[2];
      v221 = v1058[3];
      v1094[3] = (uint64_t *)v221;
      if (v221)
      {
        v222 = (unsigned int *)(v221 + 8);
        do
          v223 = __ldxr(v222);
        while (__stxr(v223 + 1, v222));
      }
      v224 = (uint64_t **)operator new(0x18uLL);
      v224[1] = (uint64_t *)0x100000001;
      *v224 = (uint64_t *)off_1E78FDC60;
      v224[2] = (uint64_t *)v1094;
      v225 = (unsigned int *)v1086[1];
      *v1086 = v1094;
      v1086[1] = v224;
      if (v225)
      {
        v226 = v225 + 2;
        do
        {
          v227 = __ldaxr(v226);
          v228 = v227 - 1;
        }
        while (__stlxr(v228, v226));
        if (!v228)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v225 + 16))(v225);
          v229 = v225 + 3;
          do
          {
            v230 = __ldaxr(v229);
            v231 = v230 - 1;
          }
          while (__stlxr(v231, v229));
          if (!v231)
            (*(void (**)(unsigned int *))(*(_QWORD *)v225 + 24))(v225);
        }
      }
      v172 = 0;
      v170 = **v1086;
LABEL_387:
      v171 = (uint64_t *)v170[1];
      if (v170 == v171)
        goto LABEL_491;
      goto LABEL_388;
    }
    while (1)
    {
      v201 = *((_DWORD *)v187 + 8);
      v202 = (_QWORD *)*v186;
      v203 = v177 + 4;
      if (*v185 != v186)
      {
        v204 = (_QWORD *)*v186;
        v205 = v177 + 4;
        if (v202)
        {
          do
          {
            v203 = v204;
            v204 = (_QWORD *)v204[1];
          }
          while (v204);
        }
        else
        {
          do
          {
            v203 = (_QWORD *)v205[2];
            v249 = *v203 == (_QWORD)v205;
            v205 = v203;
          }
          while (v249);
        }
        v206 = *((_DWORD *)v187 + 10);
        v207 = *((_DWORD *)v203 + 8);
        if (v207 == v201)
        {
          if (v201 != 1)
            goto LABEL_348;
          if (*((_DWORD *)v203 + 10) >= v206)
          {
            v208 = (_QWORD *)*v186;
            v209 = v177 + 4;
            v210 = v177 + 4;
            if (v202)
              goto LABEL_352;
LABEL_359:
            v214 = operator new(0x38uLL);
            v215 = *((_OWORD *)v187 + 2);
            v214[6] = v187[6];
            *((_OWORD *)v214 + 2) = v215;
            *v214 = 0;
            v214[1] = 0;
            v214[2] = v210;
            *v209 = v214;
            v216 = (_QWORD *)**v185;
            if (v216)
            {
              *v185 = v216;
              v214 = (_QWORD *)*v209;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v177[4], v214);
            ++v177[5];
            goto LABEL_362;
          }
        }
        else if (v207 >= v201)
        {
LABEL_348:
          v209 = v177 + 4;
          v210 = v177 + 4;
          if (!v202)
            goto LABEL_359;
          v208 = (_QWORD *)*v186;
          if (v201 != 1)
          {
            v211 = *((_DWORD *)v202 + 8);
            v210 = (_QWORD *)*v186;
            while (v201 != v211)
            {
              if (v201 < v211)
              {
                v219 = *v210;
                v209 = v210;
                if (!*v210)
                  goto LABEL_359;
              }
              else
              {
                if (v211 >= v201)
                  goto LABEL_362;
                v219 = v210[1];
                if (!v219)
                  goto LABEL_358;
              }
              v211 = *(_DWORD *)(v219 + 32);
              v210 = (_QWORD *)v219;
            }
            goto LABEL_362;
          }
          while (1)
          {
LABEL_352:
            v210 = v208;
            v212 = *((_DWORD *)v208 + 8);
            if (v212 == 1)
            {
              v213 = *((_DWORD *)v208 + 10);
              if (v213 > v206)
                goto LABEL_351;
              if (v213 >= v206)
                goto LABEL_362;
            }
            else if (v212 > 1)
            {
LABEL_351:
              v208 = (_QWORD *)*v208;
              v209 = v210;
              if (!*v210)
                goto LABEL_359;
              continue;
            }
            v208 = (_QWORD *)v208[1];
            if (!v208)
            {
LABEL_358:
              v209 = v210 + 1;
              goto LABEL_359;
            }
          }
        }
      }
      if (v202)
        v210 = v203;
      else
        v210 = v177 + 4;
      if (v202)
        v209 = v203 + 1;
      else
        v209 = v177 + 4;
      if (!*v209)
        goto LABEL_359;
LABEL_362:
      v217 = (_QWORD *)v187[1];
      if (v217)
      {
        do
        {
          v218 = v217;
          v217 = (_QWORD *)*v217;
        }
        while (v217);
      }
      else
      {
        do
        {
          v218 = (_QWORD *)v187[2];
          v249 = *v218 == (_QWORD)v187;
          v187 = v218;
        }
        while (!v249);
      }
      v187 = v218;
      if (v218 == v188)
        goto LABEL_303;
    }
  }
  v170 = (uint64_t *)**v165;
  v171 = v165[2];
  v172 = 2;
  if (v171 == v170)
    goto LABEL_387;
LABEL_388:
  v232 = 0;
  v1095 = v172 - 1;
  do
  {
    v235 = v171[2];
    v236 = *(uint64_t **)(v235 + 32);
    if (v236)
    {
      for (i = *v236; i != v236[1]; i += 24)
      {
        if ((*(_DWORD *)i ^ (*(int *)i >> 31)) > 1)
        {
          if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(i + 8) + 24))(*(_QWORD *)(i + 8)) & 1) != 0)
            goto LABEL_405;
        }
        else
        {
          v238 = *(_QWORD *)(i + 16);
          if (!v238 || (v239 = atomic_load((unsigned int *)(v238 + 8))) == 0)
          {
LABEL_405:
            if (*(_BYTE *)(v235 + 24))
            {
              *(_BYTE *)(v235 + 24) = 0;
              boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v235, &block);
            }
            break;
          }
        }
      }
    }
    v233 = v171[2];
    if (*(_BYTE *)(v233 + 24))
    {
      v170 = (uint64_t *)v171[1];
      goto LABEL_391;
    }
    v240 = **v165;
    v241 = (uint64_t **)(v240 + 32);
    v242 = *(_QWORD *)(v240 + 32);
    if (!v242)
    {
      if (*(uint64_t **)(v240 + 80) != v171)
        goto LABEL_482;
      v264 = (uint64_t *)v171[1];
      v266 = (uint64_t **)(v240 + 32);
      v245 = (uint64_t *)(v240 + 32);
      if (v264 != (uint64_t *)v240)
        goto LABEL_478;
LABEL_460:
      v269 = (uint64_t *)v245[1];
      v270 = v245;
      if (v269)
      {
        do
        {
          v271 = v269;
          v269 = (uint64_t *)*v269;
        }
        while (v269);
      }
      else
      {
        do
        {
          v271 = (uint64_t *)v270[2];
          v249 = *v271 == (_QWORD)v270;
          v270 = v271;
        }
        while (!v249);
      }
      if (*(uint64_t **)(v240 + 24) == v245)
        *(_QWORD *)(v240 + 24) = v271;
      --*(_QWORD *)(v240 + 40);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v242, v245);
      operator delete(v245);
      goto LABEL_482;
    }
    v243 = *(_DWORD *)(v233 + 64);
    v244 = *(_DWORD *)(v233 + 72);
    v245 = (uint64_t *)(v240 + 32);
    v246 = *(_QWORD *)(v240 + 32);
    if (v243 == 1)
    {
      v245 = (uint64_t *)(v240 + 32);
      v247 = *(_QWORD *)(v240 + 32);
      do
      {
        while (1)
        {
          v260 = *(_DWORD *)(v247 + 32);
          v261 = v260 < 1;
          if (v260 == 1)
            v261 = *(_DWORD *)(v247 + 40) < v244;
          if (v261)
            break;
          v245 = (uint64_t *)v247;
          v247 = *(_QWORD *)v247;
          if (!v247)
            goto LABEL_420;
        }
        v247 = *(_QWORD *)(v247 + 8);
      }
      while (v247);
    }
    else
    {
      do
      {
        v248 = *(_DWORD *)(v246 + 32);
        v249 = v248 == v243;
        v250 = v248 < v243;
        if (v248 >= v243)
          v251 = (uint64_t *)v246;
        else
          v251 = (uint64_t *)(v246 + 8);
        if (v250)
          v252 = v245;
        else
          v252 = (uint64_t *)v246;
        if (v249)
        {
          v251 = (uint64_t *)v246;
          v245 = (uint64_t *)v246;
        }
        else
        {
          v245 = v252;
        }
        v246 = *v251;
      }
      while (*v251);
    }
LABEL_420:
    if ((uint64_t *)v245[6] != v171)
      goto LABEL_482;
    v253 = (uint64_t **)(v240 + 32);
    v254 = *(uint64_t ***)(v240 + 32);
    if (v243 == 1)
    {
      while (1)
      {
        v262 = *((_DWORD *)v254 + 8);
        if (v262 == 1)
        {
          if (v244 < *((_DWORD *)v254 + 10))
            goto LABEL_443;
LABEL_438:
          v254 = (uint64_t **)v254[1];
          if (!v254)
            goto LABEL_444;
        }
        else
        {
          if (v262 <= 1)
            goto LABEL_438;
LABEL_443:
          v253 = v254;
          v254 = (uint64_t **)*v254;
          if (!v254)
            goto LABEL_444;
        }
      }
    }
    do
    {
      v255 = *((_DWORD *)v254 + 8);
      v256 = (uint64_t ***)(v254 + 1);
      v257 = v243 == v255;
      v258 = v243 < v255;
      if (v243 >= v255)
        v259 = (uint64_t ***)(v254 + 1);
      else
        v259 = (uint64_t ***)v254;
      if (!v258)
        v254 = v253;
      if (v257)
        v259 = v256;
      else
        v253 = v254;
      v254 = *v259;
    }
    while (*v259);
LABEL_444:
    v263 = (uint64_t *)v240;
    if (v253 != v241)
      v263 = v253[6];
    v264 = (uint64_t *)v171[1];
    if (v264 == v263)
      goto LABEL_460;
    if (v243 == 1)
    {
      while (1)
      {
        while (1)
        {
          v266 = (uint64_t **)v242;
          v267 = *(_DWORD *)(v242 + 32);
          if (v267 == 1)
            break;
          if (v267 <= 1)
            goto LABEL_456;
LABEL_450:
          v242 = *(_QWORD *)v242;
          if (!*v266)
          {
            v241 = v266;
            goto LABEL_478;
          }
        }
        v268 = *(_DWORD *)(v242 + 40);
        if (v268 > v244)
          goto LABEL_450;
        if (v268 >= v244)
        {
          *(_QWORD *)(v242 + 48) = v264;
          goto LABEL_482;
        }
LABEL_456:
        v242 = *(_QWORD *)(v242 + 8);
        if (!v242)
        {
          v241 = v266 + 1;
          goto LABEL_478;
        }
      }
    }
    v265 = *(_DWORD *)(v242 + 32);
    if (v243 == v265)
      goto LABEL_481;
    while (v243 >= v265)
    {
      if (v265 >= v243)
        goto LABEL_481;
      v272 = *(_QWORD *)(v242 + 8);
      if (!v272)
      {
        v241 = (uint64_t **)(v242 + 8);
        goto LABEL_477;
      }
LABEL_469:
      v265 = *(_DWORD *)(v272 + 32);
      v242 = v272;
      if (v243 == v265)
      {
        *(_QWORD *)(v272 + 48) = v264;
        goto LABEL_482;
      }
    }
    v272 = *(_QWORD *)v242;
    if (*(_QWORD *)v242)
      goto LABEL_469;
    v241 = (uint64_t **)v242;
LABEL_477:
    v266 = (uint64_t **)v242;
LABEL_478:
    v242 = (uint64_t)operator new(0x38uLL);
    v273 = *(_QWORD *)(v233 + 64);
    *(_DWORD *)(v242 + 40) = *(_DWORD *)(v233 + 72);
    *(_QWORD *)(v242 + 32) = v273;
    *(_QWORD *)(v242 + 48) = 0;
    *(_QWORD *)v242 = 0;
    *(_QWORD *)(v242 + 8) = 0;
    *(_QWORD *)(v242 + 16) = v266;
    *v241 = (uint64_t *)v242;
    v274 = **(_QWORD **)(v240 + 24);
    v275 = (uint64_t *)v242;
    if (v274)
    {
      *(_QWORD *)(v240 + 24) = v274;
      v275 = *v241;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v240 + 32), v275);
    ++*(_QWORD *)(v240 + 40);
LABEL_481:
    *(_QWORD *)(v242 + 48) = v264;
LABEL_482:
    v276 = *v171;
    v170 = (uint64_t *)v171[1];
    *(_QWORD *)(v276 + 8) = v170;
    *(_QWORD *)v171[1] = v276;
    --*(_QWORD *)(v240 + 16);
    v277 = (unsigned int *)v171[3];
    v165 = (uint64_t **)v1086;
    if (v277)
    {
      v278 = v277 + 2;
      do
      {
        v279 = __ldaxr(v278);
        v280 = v279 - 1;
      }
      while (__stlxr(v280, v278));
      if (!v280)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v277 + 16))(v277);
        v281 = v277 + 3;
        do
        {
          v282 = __ldaxr(v281);
          v283 = v282 - 1;
        }
        while (__stlxr(v283, v281));
        if (!v283)
          (*(void (**)(unsigned int *))(*(_QWORD *)v277 + 24))(v277);
      }
    }
    operator delete(v171);
LABEL_391:
    v234 = v170 != (uint64_t *)**v165 && v1095 >= ++v232;
    v171 = v170;
  }
  while (v234);
LABEL_491:
  v165[2] = v170;
  v284 = operator new(0x50uLL);
  v284[1] = 0;
  v284[2] = 0;
  *((_BYTE *)v284 + 24) = 1;
  *((_DWORD *)v284 + 7) = 1;
  *v284 = off_1E78FDD30;
  v285 = operator new(0x38uLL);
  std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v285, (uint64_t *)v1182);
  v285[3] = 0;
  v286 = *((_QWORD *)&v1183 + 1);
  if (*((_QWORD *)&v1183 + 1))
  {
    v285[3] = *((_QWORD *)&v1183 + 1);
    if ((v286 & 1) != 0)
    {
      *((_OWORD *)v285 + 2) = v1184;
      v285[6] = v1185;
    }
    else
    {
      (*(void (**)(__int128 *, _QWORD *, _QWORD))(v286 & 0xFFFFFFFFFFFFFFFELL))(&v1184, v285 + 4, 0);
    }
  }
  v284[4] = v285;
  v284[5] = 0;
  v293 = operator new(0x18uLL);
  v293[1] = 0x100000001;
  *v293 = off_1E78FDDD8;
  v293[2] = v285;
  v284[5] = v293;
  v284[6] = v165[3];
  v294 = v165[4];
  v284[7] = v294;
  if (v294)
  {
    v295 = (unsigned int *)(v294 + 1);
    do
      v296 = __ldxr(v295);
    while (__stxr(v296 + 1, v295));
  }
  *((_DWORD *)v284 + 16) = 0;
  *((_BYTE *)v284 + 68) = 0;
  v1190 = (uint64_t (**)())v284;
  v297 = (unsigned int *)operator new(0x18uLL);
  *((_QWORD *)v297 + 1) = 0x100000001;
  v298 = v297 + 2;
  *(_QWORD *)v297 = off_1E78FDE38;
  *((_QWORD *)v297 + 2) = v284;
  v1191 = (unint64_t)v297;
  v299 = (uint64_t *)**v165;
  v300 = operator new(0x20uLL);
  v301 = v300;
  v302 = v299 + 4;
  v300[2] = v284;
  v300[3] = v297;
  do
    v303 = __ldxr(v298);
  while (__stxr(v303 + 1, v298));
  v304 = *v299;
  *(_QWORD *)(v304 + 8) = v300;
  *v300 = v304;
  *v299 = (uint64_t)v300;
  v300[1] = v299;
  ++v299[2];
  v305 = (uint64_t *)v299[4];
  if (v305)
  {
    v306 = v299 + 4;
    v307 = v299[4];
    do
    {
      v308 = *(_DWORD *)(v307 + 32);
      v309 = v308 == 2;
      v310 = v308 < 2;
      if (v308 >= 2)
        v311 = (uint64_t *)v307;
      else
        v311 = (uint64_t *)(v307 + 8);
      if (!v310)
        v306 = (uint64_t *)v307;
      if (v309)
      {
        v311 = (uint64_t *)v307;
        v306 = (uint64_t *)v307;
      }
      v307 = *v311;
    }
    while (*v311);
    if (v306 == v302 || *((_DWORD *)v306 + 8) != 2)
    {
      v312 = *((_DWORD *)v305 + 8);
      while (v312 != 2)
      {
        if (v312 < 3)
        {
          v313 = (uint64_t *)v305[1];
          if (!v313)
          {
            v302 = v305 + 1;
            goto LABEL_528;
          }
        }
        else
        {
          v313 = (uint64_t *)*v305;
          v302 = v305;
          if (!*v305)
            goto LABEL_528;
        }
        v312 = *((_DWORD *)v313 + 8);
        v305 = v313;
      }
    }
    *((_DWORD *)v284 + 16) = 2;
    *(_QWORD *)((char *)v284 + 68) = 0xAAAAAAAAAAAAAA00;
LABEL_531:
    v316 = v297 + 3;
    do
      v317 = __ldxr(v316);
    while (__stxr(v317 + 1, v316));
    *(_QWORD *)&v1122 = v284;
    *((_QWORD *)&v1122 + 1) = v297;
    do
      v318 = __ldxr(v316);
    while (__stxr(v318 + 1, v316));
    do
    {
      v319 = __ldaxr(v316);
      v320 = v319 - 1;
    }
    while (__stlxr(v320, v316));
    if (!v320)
      (*(void (**)(unsigned int *))(*(_QWORD *)v297 + 24))(v297);
    v321 = (unsigned int *)v1191;
    v322 = v1070;
    if (v1191)
      goto LABEL_539;
  }
  else
  {
    v305 = v299 + 4;
LABEL_528:
    v314 = operator new(0x38uLL);
    v314[4] = 0xAAAAAA0000000002;
    *((_DWORD *)v314 + 10) = -1431655766;
    v314[6] = v301;
    *v314 = 0;
    v314[1] = 0;
    v314[2] = v305;
    *v302 = (uint64_t)v314;
    v315 = *(_QWORD *)v299[3];
    if (v315)
    {
      v299[3] = v315;
      v314 = (_QWORD *)*v302;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v299[4], v314);
    ++v299[5];
    v284 = v1190;
    v297 = (unsigned int *)v1191;
    *((_DWORD *)v1190 + 16) = 2;
    *(_QWORD *)((char *)v284 + 68) = 0xAAAAAAAAAAAAAA00;
    if (v297)
      goto LABEL_531;
    v1122 = (unint64_t)v284;
    v321 = (unsigned int *)v1191;
    v322 = v1070;
    if (v1191)
    {
LABEL_539:
      v323 = v321 + 2;
      do
      {
        v324 = __ldaxr(v323);
        v325 = v324 - 1;
      }
      while (__stlxr(v325, v323));
      if (!v325)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v321 + 16))(v321);
        v326 = v321 + 3;
        do
        {
          v327 = __ldaxr(v326);
          v328 = v327 - 1;
        }
        while (__stlxr(v328, v326));
        if (!v328)
          (*(void (**)(unsigned int *))(*(_QWORD *)v321 + 24))(v321);
      }
    }
  }
  pthread_mutex_unlock(v1206);
  v329 = (char *)__p;
  if (__p)
  {
    if (v1205 - 1 >= 0)
    {
      v330 = (char *)__p + 16 * v1205;
      do
      {
        v331 = (unsigned int *)*((_QWORD *)v330 - 1);
        if (v331)
        {
          v332 = v331 + 2;
          do
          {
            v333 = __ldaxr(v332);
            v334 = v333 - 1;
          }
          while (__stlxr(v334, v332));
          if (!v334)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v331 + 16))(v331);
            v335 = v331 + 3;
            do
            {
              v336 = __ldaxr(v335);
              v337 = v336 - 1;
            }
            while (__stlxr(v337, v335));
            if (!v337)
              (*(void (**)(unsigned int *))(*(_QWORD *)v331 + 24))(v331);
          }
        }
        v330 -= 16;
      }
      while (v330 > v329);
    }
    if (v1203 >= 0xB)
      operator delete(__p);
  }
  if (*((_QWORD *)&v1183 + 1))
  {
    if ((BYTE8(v1183) & 1) == 0)
    {
      v338 = *(void (**)(__int128 *, __int128 *, uint64_t))(*((_QWORD *)&v1183 + 1) & 0xFFFFFFFFFFFFFFFELL);
      if (v338)
        v338(&v1184, &v1184, 2);
    }
    *((_QWORD *)&v1183 + 1) = 0;
  }
  v339 = (char *)v1182[0];
  if (!v1182[0])
    goto LABEL_586;
  v340 = v1182[1];
  v341 = v1182[0];
  if (v1182[1] == v1182[0])
    goto LABEL_585;
  v342 = (char *)v1182[1];
  while (2)
  {
    v343 = *((_DWORD *)v342 - 6);
    v342 -= 24;
    v344 = v343 ^ (v343 >> 31);
    if (v344 == 2)
    {
      v349 = *(v340 - 2);
      if (v349)
        (*(void (**)(uint64_t))(*(_QWORD *)v349 + 8))(v349);
    }
    else if (v344 == 1)
    {
      v345 = (unsigned int *)*(v340 - 1);
      if (v345)
      {
        v346 = v345 + 3;
        do
        {
          v347 = __ldaxr(v346);
          v348 = v347 - 1;
        }
        while (__stlxr(v348, v346));
        if (!v348)
          goto LABEL_576;
      }
    }
    else
    {
      v345 = (unsigned int *)*(v340 - 1);
      if (v345)
      {
        v350 = v345 + 3;
        do
        {
          v351 = __ldaxr(v350);
          v352 = v351 - 1;
        }
        while (__stlxr(v352, v350));
        if (!v352)
LABEL_576:
          (*(void (**)(unsigned int *))(*(_QWORD *)v345 + 24))(v345);
      }
    }
    v340 = v342;
    if (v342 != v339)
      continue;
    break;
  }
  v341 = v1182[0];
LABEL_585:
  v1182[1] = v339;
  operator delete(v341);
LABEL_586:
  dispatch_release(v1180);
  if (v1181)
    _Block_release(v1181);
  v353 = (unint64_t *)&v1081->__shared_owners_;
  do
    v354 = __ldaxr(v353);
  while (__stlxr(v354 - 1, v353));
  if (v354)
  {
    if (!v322)
      goto LABEL_595;
LABEL_594:
    _Block_release(v322);
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v1081->__on_zero_shared)(v1081);
    std::__shared_weak_count::__release_weak(v1081);
    if (v322)
      goto LABEL_594;
  }
LABEL_595:
  v355 = operator new(0x20uLL);
  v355[1] = v1122;
  v356 = *((_QWORD *)v1106 + 28);
  *(_QWORD *)v355 = v356;
  *((_QWORD *)v355 + 1) = v1078;
  *(_QWORD *)(v356 + 8) = v355;
  *((_QWORD *)v1106 + 28) = v355;
  ++*((_QWORD *)v1106 + 30);
  v357 = *((_QWORD *)v1106 + 13);
  v1173 = (void **)MEMORY[0x1E0C809B0];
  v1174 = 0x40000000;
  v1175 = ___ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE13connect_eventIN5boost8signals26signalIFvNS_2cf11CFSharedRefIK14__CFDictionaryEENS1_5SubIdEENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionISF_EENSL_IFvRKNS7_10connectionESD_SE_EEENS7_5mutexEEES3_vJSD_SE_EEEDTcl7connectfp_cvNSI_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSY_S10_E_block_invoke;
  v1176 = &__block_descriptor_tmp_255;
  v1177 = v1079;
  v1178 = (uint64_t (*)(coex::Module::State *__hidden))coex::Module::State::handleCommandDriverStateUpdate_sync;
  v1179 = 0;
  v358 = _Block_copy(&v1173);
  v1096 = v357;
  v359 = (std::__shared_weak_count *)*((_QWORD *)v1106 + 10);
  if (!v359 || (v360 = *((_QWORD *)v1106 + 9), (v1082 = std::__shared_weak_count::lock(v359)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v361 = *((_QWORD *)v1106 + 11);
  v1180 = v361;
  if (v358)
    v362 = _Block_copy(v358);
  else
    v362 = 0;
  v1181 = v362;
  dispatch_retain(v361);
  v1183 = 0u;
  *(_OWORD *)v1182 = 0u;
  v1186 = v361;
  if (v362)
    v362 = _Block_copy(v362);
  v1187 = v362;
  dispatch_retain(v361);
  object = v361;
  v1071 = v358;
  if (!v362)
  {
    v1189 = 0;
    dispatch_retain(v361);
    goto LABEL_611;
  }
  v363 = _Block_copy(v362);
  v1189 = v363;
  dispatch_retain(v361);
  if (!v363)
  {
LABEL_611:
    dispatch_retain(v361);
    v1190 = 0;
    goto LABEL_612;
  }
  v364 = _Block_copy(v363);
  dispatch_retain(v361);
  v1190 = 0;
  if (!v364)
  {
LABEL_612:
    dispatch_retain(v361);
    v1059 = 0;
    v369 = 1;
LABEL_613:
    dispatch_retain(v361);
    v1065 = 0;
    v370 = 1;
LABEL_614:
    dispatch_retain(v361);
    v1087 = 0;
    v371 = 1;
LABEL_615:
    dispatch_retain(v361);
    v367 = 0;
    v1191 = (unint64_t)v361;
    v372 = 1;
    goto LABEL_616;
  }
  v365 = _Block_copy(v364);
  dispatch_retain(v361);
  v1059 = v364;
  if (!v365)
  {
    v369 = 0;
    goto LABEL_613;
  }
  v366 = _Block_copy(v365);
  dispatch_retain(v361);
  v1065 = v365;
  if (!v366)
  {
    v369 = 0;
    v370 = 0;
    goto LABEL_614;
  }
  v367 = _Block_copy(v366);
  dispatch_retain(v361);
  v1087 = v366;
  if (!v367)
  {
    v369 = 0;
    v370 = 0;
    v371 = 0;
    goto LABEL_615;
  }
  v368 = _Block_copy(v367);
  dispatch_retain(v361);
  v1191 = (unint64_t)v361;
  if (v368)
  {
    v369 = 0;
    v370 = 0;
    v371 = 0;
    v372 = 0;
    v1192 = _Block_copy(v368);
    dispatch_retain(v361);
    dispatch_release(v361);
    _Block_release(v368);
    goto LABEL_617;
  }
  v369 = 0;
  v370 = 0;
  v371 = 0;
  v372 = 0;
LABEL_616:
  v1192 = 0;
  dispatch_retain(v361);
  dispatch_release(v361);
LABEL_617:
  dispatch_release(v361);
  if ((v372 & 1) == 0)
    _Block_release(v367);
  dispatch_release(v361);
  if ((v371 & 1) == 0)
    _Block_release(v1087);
  v1190 = boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>)::stored_vtable;
  dispatch_release(v361);
  if ((v370 & 1) == 0)
    _Block_release(v1065);
  dispatch_release(v361);
  if ((v369 & 1) == 0)
    _Block_release(v1059);
  *((_QWORD *)&v1194 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v1194 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&block + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&block = 0;
  boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::move_assign((uint64_t)&block, (uint64_t *)&v1190);
  boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::move_assign((uint64_t)&v1190, (uint64_t *)&v1183 + 1);
  boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::move_assign((uint64_t)&v1183 + 8, (uint64_t *)&block);
  if ((_QWORD)block)
  {
    if ((block & 1) == 0)
    {
      v373 = *(void (**)(char *, char *, uint64_t))(block & 0xFFFFFFFFFFFFFFFELL);
      if (v373)
        v373((char *)&block + 8, (char *)&block + 8, 2);
    }
  }
  if (v1190)
  {
    if ((v1190 & 1) == 0)
    {
      v374 = *(void (**)(uint64_t, _WORD *, unsigned int))((unint64_t)v1190 & 0xFFFFFFFFFFFFFFFELL);
      if (v374)
        v374((uint64_t)&v1191, &v1191, 2u);
    }
    v1190 = 0;
  }
  dispatch_release(object);
  if (v1189)
    _Block_release(v1189);
  dispatch_release(v1186);
  if (v1187)
    _Block_release(v1187);
  v375 = (unint64_t *)&v1082->__shared_weak_owners_;
  do
    v376 = __ldxr(v375);
  while (__stxr(v376 + 1, v375));
  v377 = operator new(0x18uLL);
  *v377 = &off_1E78FE068;
  v377[1] = v360;
  v377[2] = v1082;
  do
    v378 = __ldxr(v375);
  while (__stxr(v378 + 1, v375));
  v379 = operator new(0x18uLL);
  v380 = v379;
  *v379 = &off_1E78FE068;
  v379[1] = v360;
  v379[2] = v1082;
  do
    v381 = __ldxr(v375);
  while (__stxr(v381 + 1, v375));
  *((_QWORD *)&block + 1) = v379;
  LODWORD(block) = 2;
  v382 = v1182[1];
  if (v1182[1] >= (void *)v1183)
  {
    v507 = std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((uint64_t *)v1182, (uint64_t)&block);
    v508 = block ^ ((int)block >> 31);
    v1182[1] = v507;
    if (v508 != 2)
    {
      if (v508 == 1)
      {
        v509 = v1194;
        if (!(_QWORD)v1194)
          goto LABEL_649;
        v510 = (unsigned int *)(v1194 + 12);
        do
        {
          v511 = __ldaxr(v510);
          v512 = v511 - 1;
        }
        while (__stlxr(v512, v510));
        if (v512)
          goto LABEL_649;
      }
      else
      {
        v509 = v1194;
        if (!(_QWORD)v1194)
          goto LABEL_649;
        v773 = (unsigned int *)(v1194 + 12);
        do
        {
          v774 = __ldaxr(v773);
          v775 = v774 - 1;
        }
        while (__stlxr(v775, v773));
        if (v775)
          goto LABEL_649;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v509 + 24))(v509);
      goto LABEL_649;
    }
    v380 = (_QWORD *)*((_QWORD *)&block + 1);
    if (*((_QWORD *)&block + 1))
      goto LABEL_648;
  }
  else
  {
    v383 = operator new(0x18uLL);
    *v383 = &off_1E78FE068;
    v383[1] = v360;
    v383[2] = v1082;
    do
      v384 = __ldxr(v375);
    while (__stxr(v384 + 1, v375));
    v382[1] = v383;
    *(_DWORD *)v382 = 2;
    v1182[1] = v382 + 3;
LABEL_648:
    (*(void (**)(_QWORD *))(*v380 + 8))(v380);
  }
LABEL_649:
  (*(void (**)(_QWORD *))(*v377 + 8))(v377);
  std::__shared_weak_count::__release_weak(v1082);
  v385 = *(uint64_t ***)(v1096 + 152);
  *(_QWORD *)&v386 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v386 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v1202 = v386;
  v1201 = v386;
  v1200 = v386;
  v1199 = v386;
  v1198 = v386;
  v1197 = v386;
  v1196 = v386;
  *(_OWORD *)v1195 = v386;
  v1194 = v386;
  block = v386;
  v387 = (pthread_mutex_t *)v385[3];
  v1203 = 10;
  __p = &block;
  v1205 = 0;
  v1206 = v387;
  pthread_mutex_lock(v387);
  v1191 = 0xAAAAAAAAAAAAAAAALL;
  v1190 = (uint64_t (**)())0xAAAAAAAAAAAAAAAALL;
  v388 = (unsigned int *)v385[1];
  v1088 = (uint64_t ***)v385;
  if (v388)
  {
    v389 = atomic_load(v388 + 2);
    if (v389 == 1)
    {
      v390 = (uint64_t *)**v385;
      v391 = v385[2];
      v392 = 2;
      if (v391 != v390)
        goto LABEL_746;
      goto LABEL_745;
    }
  }
  v393 = (uint64_t **)operator new(0x20uLL);
  v394 = *v385;
  v395 = **v385;
  v1097 = v393;
  v396 = operator new(0x40uLL);
  v397 = v396;
  *v396 = v396;
  v396[1] = v396;
  v396[2] = 0;
  v398 = *(_QWORD **)(v395 + 8);
  if (v398 != (_QWORD *)v395)
  {
    v399 = 0;
    v400 = v396;
    do
    {
      v401 = operator new(0x20uLL);
      v401[2] = v398[2];
      v402 = v398[3];
      v401[3] = v402;
      if (v402)
      {
        v403 = (unsigned int *)(v402 + 8);
        do
          v404 = __ldxr(v403);
        while (__stxr(v404 + 1, v403));
        v400 = (_QWORD *)*v397;
        v399 = v397[2];
      }
      *v401 = v400;
      v401[1] = v397;
      v400[1] = v401;
      *v397 = v401;
      v397[2] = ++v399;
      v398 = (_QWORD *)v398[1];
      v400 = v401;
    }
    while (v398 != (_QWORD *)v395);
  }
  v1060 = v394;
  v1066 = (_BYTE *)v395;
  v397[3] = 0;
  v405 = (_QWORD **)(v397 + 3);
  v397[4] = 0;
  v406 = v397 + 4;
  v397[5] = 0;
  *((_BYTE *)v397 + 48) = *(_BYTE *)(v395 + 48);
  v397[3] = v397 + 4;
  v407 = *(_QWORD **)(v395 + 24);
  v408 = (_QWORD *)(v395 + 32);
  if (v407 != (_QWORD *)(v395 + 32))
  {
    do
    {
      v421 = *((_DWORD *)v407 + 8);
      v422 = (_QWORD *)*v406;
      v423 = v397 + 4;
      if (*v405 != v406)
      {
        v424 = (_QWORD *)*v406;
        v425 = v397 + 4;
        if (v422)
        {
          do
          {
            v423 = v424;
            v424 = (_QWORD *)v424[1];
          }
          while (v424);
        }
        else
        {
          do
          {
            v423 = (_QWORD *)v425[2];
            v249 = *v423 == (_QWORD)v425;
            v425 = v423;
          }
          while (v249);
        }
        v426 = *((_DWORD *)v407 + 10);
        v427 = *((_DWORD *)v423 + 8);
        if (v427 == v421)
        {
          if (v421 != 1)
            goto LABEL_706;
          if (*((_DWORD *)v423 + 10) >= v426)
          {
            v428 = (_QWORD *)*v406;
            v429 = v397 + 4;
            v430 = v397 + 4;
            if (v422)
              goto LABEL_710;
LABEL_717:
            v434 = operator new(0x38uLL);
            v435 = *((_OWORD *)v407 + 2);
            v434[6] = v407[6];
            *((_OWORD *)v434 + 2) = v435;
            *v434 = 0;
            v434[1] = 0;
            v434[2] = v430;
            *v429 = v434;
            v436 = (_QWORD *)**v405;
            if (v436)
            {
              *v405 = v436;
              v434 = (_QWORD *)*v429;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v397[4], v434);
            ++v397[5];
            goto LABEL_720;
          }
        }
        else if (v427 >= v421)
        {
LABEL_706:
          v429 = v397 + 4;
          v430 = v397 + 4;
          if (!v422)
            goto LABEL_717;
          v428 = (_QWORD *)*v406;
          if (v421 != 1)
          {
            v431 = *((_DWORD *)v422 + 8);
            v430 = (_QWORD *)*v406;
            while (v421 != v431)
            {
              if (v421 < v431)
              {
                v439 = *v430;
                v429 = v430;
                if (!*v430)
                  goto LABEL_717;
              }
              else
              {
                if (v431 >= v421)
                  goto LABEL_720;
                v439 = v430[1];
                if (!v439)
                  goto LABEL_716;
              }
              v431 = *(_DWORD *)(v439 + 32);
              v430 = (_QWORD *)v439;
            }
            goto LABEL_720;
          }
          while (1)
          {
LABEL_710:
            v430 = v428;
            v432 = *((_DWORD *)v428 + 8);
            if (v432 == 1)
            {
              v433 = *((_DWORD *)v428 + 10);
              if (v433 > v426)
                goto LABEL_709;
              if (v433 >= v426)
                goto LABEL_720;
            }
            else if (v432 > 1)
            {
LABEL_709:
              v428 = (_QWORD *)*v428;
              v429 = v430;
              if (!*v430)
                goto LABEL_717;
              continue;
            }
            v428 = (_QWORD *)v428[1];
            if (!v428)
            {
LABEL_716:
              v429 = v430 + 1;
              goto LABEL_717;
            }
          }
        }
      }
      if (v422)
        v430 = v423;
      else
        v430 = v397 + 4;
      if (v422)
        v429 = v423 + 1;
      else
        v429 = v397 + 4;
      if (!*v429)
        goto LABEL_717;
LABEL_720:
      v437 = (_QWORD *)v407[1];
      if (v437)
      {
        do
        {
          v438 = v437;
          v437 = (_QWORD *)*v437;
        }
        while (v437);
      }
      else
      {
        do
        {
          v438 = (_QWORD *)v407[2];
          v249 = *v438 == (_QWORD)v407;
          v407 = v438;
        }
        while (!v249);
      }
      v407 = v438;
    }
    while (v438 != v408);
  }
  *((_BYTE *)v397 + 56) = v1066[56];
  v409 = (_QWORD *)*((_QWORD *)v1066 + 3);
  if (v409 != v408)
  {
    v410 = (_QWORD *)v397[3];
    v411 = v397[1];
    do
    {
      v410[6] = v411;
      v412 = v1066;
      if (v409 != v408)
        v412 = (_BYTE *)v409[6];
      v413 = (_QWORD *)v409[1];
      v414 = v413;
      v415 = v409;
      if (v413)
      {
        do
        {
          v416 = v414;
          v414 = (_QWORD *)*v414;
        }
        while (v414);
      }
      else
      {
        do
        {
          v416 = (_QWORD *)v415[2];
          v249 = *v416 == (_QWORD)v415;
          v415 = v416;
        }
        while (!v249);
      }
      v417 = v1066;
      if (v416 != v408)
        v417 = (_BYTE *)v416[6];
      while (v412 != v417)
      {
        v412 = (_BYTE *)*((_QWORD *)v412 + 1);
        v411 = *(_QWORD *)(v411 + 8);
      }
      if (v413)
      {
        do
        {
          v418 = v413;
          v413 = (_QWORD *)*v413;
        }
        while (v413);
      }
      else
      {
        do
        {
          v418 = (_QWORD *)v409[2];
          v249 = *v418 == (_QWORD)v409;
          v409 = v418;
        }
        while (!v249);
      }
      v419 = (_QWORD *)v410[1];
      if (v419)
      {
        do
        {
          v420 = v419;
          v419 = (_QWORD *)*v419;
        }
        while (v419);
      }
      else
      {
        do
        {
          v420 = (_QWORD *)v410[2];
          v249 = *v420 == (_QWORD)v410;
          v410 = v420;
        }
        while (!v249);
      }
      v409 = v418;
      v410 = v420;
    }
    while (v418 != v408);
  }
  *v1097 = v397;
  v1097[1] = 0;
  v440 = (uint64_t *)operator new(0x18uLL);
  v385 = (uint64_t **)v1088;
  v440[1] = 0x100000001;
  *v440 = (uint64_t)off_1E78FE198;
  v440[2] = (uint64_t)v397;
  v1097[1] = v440;
  v1097[2] = (uint64_t *)v1060[2];
  v441 = v1060[3];
  v1097[3] = (uint64_t *)v441;
  if (v441)
  {
    v442 = (unsigned int *)(v441 + 8);
    do
      v443 = __ldxr(v442);
    while (__stxr(v443 + 1, v442));
  }
  v444 = (uint64_t **)operator new(0x18uLL);
  v444[1] = (uint64_t *)0x100000001;
  *v444 = (uint64_t *)off_1E78FE138;
  v444[2] = (uint64_t *)v1097;
  v445 = (unsigned int *)v1088[1];
  *v1088 = v1097;
  v1088[1] = v444;
  if (v445)
  {
    v446 = v445 + 2;
    do
    {
      v447 = __ldaxr(v446);
      v448 = v447 - 1;
    }
    while (__stlxr(v448, v446));
    if (!v448)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v445 + 16))(v445);
      v449 = v445 + 3;
      do
      {
        v450 = __ldaxr(v449);
        v451 = v450 - 1;
      }
      while (__stlxr(v451, v449));
      if (!v451)
        (*(void (**)(unsigned int *))(*(_QWORD *)v445 + 24))(v445);
    }
  }
  v392 = 0;
  v390 = **v1088;
LABEL_745:
  v391 = (uint64_t *)v390[1];
  if (v390 == v391)
    goto LABEL_849;
LABEL_746:
  v452 = 0;
  v1098 = v392 - 1;
  while (2)
  {
    v455 = v391[2];
    v456 = *(uint64_t **)(v455 + 32);
    if (v456)
    {
      for (j = *v456; j != v456[1]; j += 24)
      {
        if ((*(_DWORD *)j ^ (*(int *)j >> 31)) > 1)
        {
          if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(j + 8) + 24))(*(_QWORD *)(j + 8)) & 1) != 0)
            goto LABEL_763;
        }
        else
        {
          v458 = *(_QWORD *)(j + 16);
          if (!v458 || (v459 = atomic_load((unsigned int *)(v458 + 8))) == 0)
          {
LABEL_763:
            if (*(_BYTE *)(v455 + 24))
            {
              *(_BYTE *)(v455 + 24) = 0;
              boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v455, &block);
            }
            break;
          }
        }
      }
    }
    v453 = v391[2];
    if (*(_BYTE *)(v453 + 24))
    {
      v390 = (uint64_t *)v391[1];
      goto LABEL_749;
    }
    v460 = **v385;
    v462 = (uint64_t **)(v460 + 32);
    v461 = *(_QWORD *)(v460 + 32);
    if (!v461)
    {
      if (*(uint64_t **)(v460 + 80) != v391)
        goto LABEL_840;
      v484 = (uint64_t *)v391[1];
      v486 = (uint64_t **)(v460 + 32);
      v465 = (uint64_t *)(v460 + 32);
      if (v484 != (uint64_t *)v460)
        goto LABEL_836;
      goto LABEL_818;
    }
    v463 = *(_DWORD *)(v453 + 64);
    v464 = *(_DWORD *)(v453 + 72);
    v465 = (uint64_t *)(v460 + 32);
    v466 = *(_QWORD *)(v460 + 32);
    if (v463 == 1)
    {
      v465 = (uint64_t *)(v460 + 32);
      v467 = *(_QWORD *)(v460 + 32);
      do
      {
        while (1)
        {
          v473 = *(_DWORD *)(v467 + 32);
          v474 = v473 < 1;
          if (v473 == 1)
            v474 = *(_DWORD *)(v467 + 40) < v464;
          if (!v474)
            break;
          v467 = *(_QWORD *)(v467 + 8);
          if (!v467)
            goto LABEL_784;
        }
        v465 = (uint64_t *)v467;
        v467 = *(_QWORD *)v467;
      }
      while (v467);
    }
    else
    {
      do
      {
        v468 = *(_DWORD *)(v466 + 32);
        v469 = v468 == v463;
        v470 = v468 < v463;
        if (v468 >= v463)
          v471 = (uint64_t *)v466;
        else
          v471 = (uint64_t *)(v466 + 8);
        if (v470)
          v472 = v465;
        else
          v472 = (uint64_t *)v466;
        if (v469)
        {
          v471 = (uint64_t *)v466;
          v465 = (uint64_t *)v466;
        }
        else
        {
          v465 = v472;
        }
        v466 = *v471;
      }
      while (*v471);
    }
LABEL_784:
    if ((uint64_t *)v465[6] != v391)
      goto LABEL_840;
    v475 = (uint64_t **)(v460 + 32);
    v476 = *(uint64_t ***)(v460 + 32);
    if (v463 == 1)
    {
      while (1)
      {
        v482 = *((_DWORD *)v476 + 8);
        if (v482 == 1)
        {
          if (v464 < *((_DWORD *)v476 + 10))
            goto LABEL_801;
LABEL_796:
          v476 = (uint64_t **)v476[1];
          if (!v476)
            goto LABEL_802;
        }
        else
        {
          if (v482 <= 1)
            goto LABEL_796;
LABEL_801:
          v475 = v476;
          v476 = (uint64_t **)*v476;
          if (!v476)
            goto LABEL_802;
        }
      }
    }
    do
    {
      v477 = *((_DWORD *)v476 + 8);
      v478 = (uint64_t ***)(v476 + 1);
      v479 = v463 == v477;
      v480 = v463 < v477;
      if (v463 >= v477)
        v481 = (uint64_t ***)(v476 + 1);
      else
        v481 = (uint64_t ***)v476;
      if (!v480)
        v476 = v475;
      if (v479)
        v481 = v478;
      else
        v475 = v476;
      v476 = *v481;
    }
    while (*v481);
LABEL_802:
    v483 = (uint64_t *)v460;
    if (v475 != v462)
      v483 = v475[6];
    v484 = (uint64_t *)v391[1];
    if (v484 == v483)
    {
LABEL_818:
      v489 = (uint64_t *)v465[1];
      v490 = v465;
      if (v489)
      {
        do
        {
          v491 = v489;
          v489 = (uint64_t *)*v489;
        }
        while (v489);
      }
      else
      {
        do
        {
          v491 = (uint64_t *)v490[2];
          v249 = *v491 == (_QWORD)v490;
          v490 = v491;
        }
        while (!v249);
      }
      if (*(uint64_t **)(v460 + 24) == v465)
        *(_QWORD *)(v460 + 24) = v491;
      --*(_QWORD *)(v460 + 40);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v461, v465);
      operator delete(v465);
      goto LABEL_840;
    }
    if (v463 == 1)
    {
      while (1)
      {
        while (1)
        {
          v486 = (uint64_t **)v461;
          v487 = *(_DWORD *)(v461 + 32);
          if (v487 == 1)
            break;
          if (v487 <= 1)
            goto LABEL_814;
LABEL_808:
          v461 = *(_QWORD *)v461;
          if (!*v486)
          {
            v462 = v486;
            goto LABEL_836;
          }
        }
        v488 = *(_DWORD *)(v461 + 40);
        if (v488 > v464)
          goto LABEL_808;
        if (v488 >= v464)
        {
          *(_QWORD *)(v461 + 48) = v484;
          goto LABEL_840;
        }
LABEL_814:
        v461 = *(_QWORD *)(v461 + 8);
        if (!v461)
        {
          v462 = v486 + 1;
          goto LABEL_836;
        }
      }
    }
    v485 = *(_DWORD *)(v461 + 32);
    if (v463 == v485)
      goto LABEL_839;
    while (2)
    {
      if (v463 >= v485)
      {
        if (v485 >= v463)
          goto LABEL_839;
        v492 = *(_QWORD *)(v461 + 8);
        if (!v492)
        {
          v462 = (uint64_t **)(v461 + 8);
          goto LABEL_835;
        }
        goto LABEL_827;
      }
      v492 = *(_QWORD *)v461;
      if (*(_QWORD *)v461)
      {
LABEL_827:
        v485 = *(_DWORD *)(v492 + 32);
        v461 = v492;
        if (v463 == v485)
        {
          *(_QWORD *)(v492 + 48) = v484;
          goto LABEL_840;
        }
        continue;
      }
      break;
    }
    v462 = (uint64_t **)v461;
LABEL_835:
    v486 = (uint64_t **)v461;
LABEL_836:
    v461 = (uint64_t)operator new(0x38uLL);
    v493 = *(_QWORD *)(v453 + 64);
    *(_DWORD *)(v461 + 40) = *(_DWORD *)(v453 + 72);
    *(_QWORD *)(v461 + 32) = v493;
    *(_QWORD *)(v461 + 48) = 0;
    *(_QWORD *)v461 = 0;
    *(_QWORD *)(v461 + 8) = 0;
    *(_QWORD *)(v461 + 16) = v486;
    *v462 = (uint64_t *)v461;
    v494 = **(_QWORD **)(v460 + 24);
    v495 = (uint64_t *)v461;
    if (v494)
    {
      *(_QWORD *)(v460 + 24) = v494;
      v495 = *v462;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v460 + 32), v495);
    ++*(_QWORD *)(v460 + 40);
LABEL_839:
    *(_QWORD *)(v461 + 48) = v484;
LABEL_840:
    v496 = *v391;
    v390 = (uint64_t *)v391[1];
    *(_QWORD *)(v496 + 8) = v390;
    *(_QWORD *)v391[1] = v496;
    --*(_QWORD *)(v460 + 16);
    v497 = (unsigned int *)v391[3];
    v385 = (uint64_t **)v1088;
    if (v497)
    {
      v498 = v497 + 2;
      do
      {
        v499 = __ldaxr(v498);
        v500 = v499 - 1;
      }
      while (__stlxr(v500, v498));
      if (!v500)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v497 + 16))(v497);
        v501 = v497 + 3;
        do
        {
          v502 = __ldaxr(v501);
          v503 = v502 - 1;
        }
        while (__stlxr(v503, v501));
        if (!v503)
          (*(void (**)(unsigned int *))(*(_QWORD *)v497 + 24))(v497);
      }
    }
    operator delete(v391);
LABEL_749:
    v454 = v390 != (uint64_t *)**v385 && v1098 >= ++v452;
    v391 = v390;
    if (v454)
      continue;
    break;
  }
LABEL_849:
  v385[2] = v390;
  v504 = operator new(0x50uLL);
  v504[1] = 0;
  v504[2] = 0;
  *((_BYTE *)v504 + 24) = 1;
  *((_DWORD *)v504 + 7) = 1;
  *v504 = off_1E78FE1F8;
  v505 = operator new(0x38uLL);
  std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v505, (uint64_t *)v1182);
  v505[3] = 0;
  v506 = *((_QWORD *)&v1183 + 1);
  if (*((_QWORD *)&v1183 + 1))
  {
    v505[3] = *((_QWORD *)&v1183 + 1);
    if ((v506 & 1) != 0)
    {
      *((_OWORD *)v505 + 2) = v1184;
      v505[6] = v1185;
    }
    else
    {
      (*(void (**)(__int128 *, _QWORD *, _QWORD))(v506 & 0xFFFFFFFFFFFFFFFELL))(&v1184, v505 + 4, 0);
    }
  }
  v504[4] = v505;
  v504[5] = 0;
  v513 = operator new(0x18uLL);
  v513[1] = 0x100000001;
  *v513 = off_1E78FE250;
  v513[2] = v505;
  v504[5] = v513;
  v504[6] = v385[3];
  v514 = v385[4];
  v504[7] = v514;
  if (v514)
  {
    v515 = (unsigned int *)(v514 + 1);
    do
      v516 = __ldxr(v515);
    while (__stxr(v516 + 1, v515));
  }
  *((_DWORD *)v504 + 16) = 0;
  *((_BYTE *)v504 + 68) = 0;
  v1190 = (uint64_t (**)())v504;
  v517 = (unsigned int *)operator new(0x18uLL);
  *((_QWORD *)v517 + 1) = 0x100000001;
  v518 = v517 + 2;
  *(_QWORD *)v517 = off_1E78FE2B0;
  *((_QWORD *)v517 + 2) = v504;
  v1191 = (unint64_t)v517;
  v519 = (uint64_t *)**v385;
  v520 = operator new(0x20uLL);
  v521 = v520;
  v522 = v519 + 4;
  v520[2] = v504;
  v520[3] = v517;
  do
    v523 = __ldxr(v518);
  while (__stxr(v523 + 1, v518));
  v524 = *v519;
  *(_QWORD *)(v524 + 8) = v520;
  *v520 = v524;
  *v519 = (uint64_t)v520;
  v520[1] = v519;
  ++v519[2];
  v525 = (uint64_t *)v519[4];
  if (v525)
  {
    v526 = v519 + 4;
    v527 = v519[4];
    do
    {
      v528 = *(_DWORD *)(v527 + 32);
      v529 = v528 == 2;
      v530 = v528 < 2;
      if (v528 >= 2)
        v531 = (uint64_t *)v527;
      else
        v531 = (uint64_t *)(v527 + 8);
      if (!v530)
        v526 = (uint64_t *)v527;
      if (v529)
      {
        v531 = (uint64_t *)v527;
        v526 = (uint64_t *)v527;
      }
      v527 = *v531;
    }
    while (*v531);
    if (v526 == v522 || *((_DWORD *)v526 + 8) != 2)
    {
      v533 = *((_DWORD *)v525 + 8);
      while (v533 != 2)
      {
        if (v533 < 3)
        {
          v534 = (uint64_t *)v525[1];
          if (!v534)
          {
            v522 = v525 + 1;
            goto LABEL_886;
          }
        }
        else
        {
          v534 = (uint64_t *)*v525;
          v522 = v525;
          if (!*v525)
            goto LABEL_886;
        }
        v533 = *((_DWORD *)v534 + 8);
        v525 = v534;
      }
    }
    *((_DWORD *)v504 + 16) = 2;
    *(_QWORD *)((char *)v504 + 68) = 0xAAAAAAAAAAAAAA00;
    v532 = v1071;
LABEL_889:
    v537 = v517 + 3;
    do
      v538 = __ldxr(v537);
    while (__stxr(v538 + 1, v537));
    *(_QWORD *)&v1122 = v504;
    *((_QWORD *)&v1122 + 1) = v517;
    do
      v539 = __ldxr(v537);
    while (__stxr(v539 + 1, v537));
    do
    {
      v540 = __ldaxr(v537);
      v541 = v540 - 1;
    }
    while (__stlxr(v541, v537));
    if (!v541)
      (*(void (**)(unsigned int *))(*(_QWORD *)v517 + 24))(v517);
    v542 = (unsigned int *)v1191;
    if (v1191)
      goto LABEL_897;
  }
  else
  {
    v525 = v519 + 4;
LABEL_886:
    v535 = operator new(0x38uLL);
    v535[4] = 0xAAAAAA0000000002;
    *((_DWORD *)v535 + 10) = -1431655766;
    v535[6] = v521;
    *v535 = 0;
    v535[1] = 0;
    v535[2] = v525;
    *v522 = (uint64_t)v535;
    v536 = *(_QWORD *)v519[3];
    if (v536)
    {
      v519[3] = v536;
      v535 = (_QWORD *)*v522;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v519[4], v535);
    ++v519[5];
    v504 = v1190;
    v517 = (unsigned int *)v1191;
    *((_DWORD *)v1190 + 16) = 2;
    *(_QWORD *)((char *)v504 + 68) = 0xAAAAAAAAAAAAAA00;
    v532 = v1071;
    if (v517)
      goto LABEL_889;
    v1122 = (unint64_t)v504;
    v542 = (unsigned int *)v1191;
    if (v1191)
    {
LABEL_897:
      v543 = v542 + 2;
      do
      {
        v544 = __ldaxr(v543);
        v545 = v544 - 1;
      }
      while (__stlxr(v545, v543));
      if (!v545)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v542 + 16))(v542);
        v546 = v542 + 3;
        do
        {
          v547 = __ldaxr(v546);
          v548 = v547 - 1;
        }
        while (__stlxr(v548, v546));
        if (!v548)
          (*(void (**)(unsigned int *))(*(_QWORD *)v542 + 24))(v542);
      }
    }
  }
  pthread_mutex_unlock(v1206);
  v549 = (char *)__p;
  if (__p)
  {
    if (v1205 - 1 >= 0)
    {
      v550 = (char *)__p + 16 * v1205;
      do
      {
        v551 = (unsigned int *)*((_QWORD *)v550 - 1);
        if (v551)
        {
          v552 = v551 + 2;
          do
          {
            v553 = __ldaxr(v552);
            v554 = v553 - 1;
          }
          while (__stlxr(v554, v552));
          if (!v554)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v551 + 16))(v551);
            v555 = v551 + 3;
            do
            {
              v556 = __ldaxr(v555);
              v557 = v556 - 1;
            }
            while (__stlxr(v557, v555));
            if (!v557)
              (*(void (**)(unsigned int *))(*(_QWORD *)v551 + 24))(v551);
          }
        }
        v550 -= 16;
      }
      while (v550 > v549);
    }
    if (v1203 >= 0xB)
      operator delete(__p);
  }
  if (*((_QWORD *)&v1183 + 1))
  {
    if ((BYTE8(v1183) & 1) == 0)
    {
      v558 = *(void (**)(__int128 *, __int128 *, uint64_t))(*((_QWORD *)&v1183 + 1) & 0xFFFFFFFFFFFFFFFELL);
      if (v558)
        v558(&v1184, &v1184, 2);
    }
    *((_QWORD *)&v1183 + 1) = 0;
  }
  v559 = (char *)v1182[0];
  if (!v1182[0])
    goto LABEL_944;
  v560 = v1182[1];
  v561 = v1182[0];
  if (v1182[1] == v1182[0])
    goto LABEL_943;
  v562 = (char *)v1182[1];
  while (2)
  {
    v563 = *((_DWORD *)v562 - 6);
    v562 -= 24;
    v564 = v563 ^ (v563 >> 31);
    if (v564 == 2)
    {
      v569 = *(v560 - 2);
      if (v569)
        (*(void (**)(uint64_t))(*(_QWORD *)v569 + 8))(v569);
    }
    else if (v564 == 1)
    {
      v565 = (unsigned int *)*(v560 - 1);
      if (v565)
      {
        v566 = v565 + 3;
        do
        {
          v567 = __ldaxr(v566);
          v568 = v567 - 1;
        }
        while (__stlxr(v568, v566));
        if (!v568)
          goto LABEL_934;
      }
    }
    else
    {
      v565 = (unsigned int *)*(v560 - 1);
      if (v565)
      {
        v570 = v565 + 3;
        do
        {
          v571 = __ldaxr(v570);
          v572 = v571 - 1;
        }
        while (__stlxr(v572, v570));
        if (!v572)
LABEL_934:
          (*(void (**)(unsigned int *))(*(_QWORD *)v565 + 24))(v565);
      }
    }
    v560 = v562;
    if (v562 != v559)
      continue;
    break;
  }
  v561 = v1182[0];
LABEL_943:
  v1182[1] = v559;
  operator delete(v561);
LABEL_944:
  dispatch_release(v1180);
  if (v1181)
    _Block_release(v1181);
  v573 = (unint64_t *)&v1082->__shared_owners_;
  v574 = v1106;
  do
    v575 = __ldaxr(v573);
  while (__stlxr(v575 - 1, v573));
  if (!v575)
  {
    ((void (*)(std::__shared_weak_count *))v1082->__on_zero_shared)(v1082);
    std::__shared_weak_count::__release_weak(v1082);
    if (!v532)
      goto LABEL_953;
    goto LABEL_952;
  }
  if (v532)
LABEL_952:
    _Block_release(v532);
LABEL_953:
  v576 = operator new(0x20uLL);
  v576[1] = v1122;
  v577 = *((_QWORD *)v1106 + 28);
  *(_QWORD *)v576 = v577;
  *((_QWORD *)v576 + 1) = v1078;
  *(_QWORD *)(v577 + 8) = v576;
  *((_QWORD *)v1106 + 28) = v576;
  ++*((_QWORD *)v1106 + 30);
  v578 = (_QWORD *)*((_QWORD *)v1106 + 26);
  if (v578)
  {
    v1173 = (void **)MEMORY[0x1E0C809B0];
    v1174 = 0x40000000;
    v1175 = ___ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE13connect_eventIN5boost8signals26signalIFvNS1_5SubIdEENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionISA_EENSG_IFvRKNS7_10connectionES9_EEENS7_5mutexEEES3_vJS9_EEEDTcl7connectfp_cvNSD_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FST_SV_E_block_invoke;
    v1176 = &__block_descriptor_tmp_257;
    v1177 = v1079;
    v1178 = (uint64_t (*)(coex::Module::State *__hidden))coex::Module::State::handleDesenseCommandDriverStarted_sync;
    v1179 = 0;
    v579 = _Block_copy(&v1173);
    v1072 = v578;
    v580 = (std::__shared_weak_count *)*((_QWORD *)v1106 + 10);
    if (!v580 || (v581 = *((_QWORD *)v1106 + 9), (v1083 = std::__shared_weak_count::lock(v580)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v582 = *((_QWORD *)v1106 + 11);
    v1180 = v582;
    if (v579)
      v583 = _Block_copy(v579);
    else
      v583 = 0;
    v1181 = v583;
    dispatch_retain(v582);
    v1183 = 0u;
    *(_OWORD *)v1182 = 0u;
    v1186 = v582;
    if (v583)
      v583 = _Block_copy(v583);
    v1187 = v583;
    dispatch_retain(v582);
    object = v582;
    v1067 = v579;
    v1099 = v581;
    if (v583)
    {
      v584 = _Block_copy(v583);
      v1189 = v584;
      dispatch_retain(v582);
      if (v584)
      {
        v585 = _Block_copy(v584);
        dispatch_retain(v582);
        v1190 = 0;
        if (v585)
        {
          v586 = _Block_copy(v585);
          dispatch_retain(v582);
          v1061 = v585;
          if (v586)
          {
            v587 = _Block_copy(v586);
            dispatch_retain(v582);
            if (v587)
            {
              v588 = _Block_copy(v587);
              dispatch_retain(v582);
              v1089 = v586;
              if (v588)
              {
                v589 = _Block_copy(v588);
                dispatch_retain(v582);
                v1191 = (unint64_t)v582;
                if (v589)
                {
                  v590 = 0;
                  v591 = 0;
                  v592 = 0;
                  v593 = 0;
                  v1192 = _Block_copy(v589);
                  dispatch_retain(v582);
                  dispatch_release(v582);
                  _Block_release(v589);
                  goto LABEL_976;
                }
                v590 = 0;
                v591 = 0;
                v592 = 0;
                v593 = 0;
LABEL_975:
                v1192 = 0;
                dispatch_retain(v582);
                dispatch_release(v582);
LABEL_976:
                dispatch_release(v582);
                if ((v593 & 1) == 0)
                  _Block_release(v588);
                dispatch_release(v582);
                if ((v592 & 1) == 0)
                  _Block_release(v587);
                v1190 = boost::function1<void,coex::SubId>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(coex::SubId)>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})(coex::SubId)>>)::stored_vtable;
                dispatch_release(v582);
                if ((v591 & 1) == 0)
                  _Block_release(v1089);
                dispatch_release(v582);
                if ((v590 & 1) == 0)
                  _Block_release(v1061);
                *((_QWORD *)&v1194 + 1) = 0xAAAAAAAAAAAAAAAALL;
                *(_QWORD *)&v1194 = 0xAAAAAAAAAAAAAAAALL;
                *((_QWORD *)&block + 1) = 0xAAAAAAAAAAAAAAAALL;
                *(_QWORD *)&block = 0;
                boost::function1<void,coex::SubId>::move_assign((uint64_t)&block, (uint64_t *)&v1190);
                boost::function1<void,coex::SubId>::move_assign((uint64_t)&v1190, (uint64_t *)&v1183 + 1);
                boost::function1<void,coex::SubId>::move_assign((uint64_t)&v1183 + 8, (uint64_t *)&block);
                if ((_QWORD)block)
                {
                  if ((block & 1) == 0)
                  {
                    v594 = *(void (**)(char *, char *, uint64_t))(block & 0xFFFFFFFFFFFFFFFELL);
                    if (v594)
                      v594((char *)&block + 8, (char *)&block + 8, 2);
                  }
                }
                if (v1190)
                {
                  if ((v1190 & 1) == 0)
                  {
                    v595 = *(void (**)(uint64_t, _WORD *, unsigned int))((unint64_t)v1190 & 0xFFFFFFFFFFFFFFFELL);
                    if (v595)
                      v595((uint64_t)&v1191, &v1191, 2u);
                  }
                  v1190 = 0;
                }
                dispatch_release(object);
                if (v1189)
                  _Block_release(v1189);
                dispatch_release(v1186);
                if (v1187)
                  _Block_release(v1187);
                v596 = (unint64_t *)&v1083->__shared_weak_owners_;
                do
                  v597 = __ldxr(v596);
                while (__stxr(v597 + 1, v596));
                v598 = operator new(0x18uLL);
                *v598 = &off_1E78FE068;
                v598[1] = v1099;
                v598[2] = v1083;
                do
                  v599 = __ldxr(v596);
                while (__stxr(v599 + 1, v596));
                v600 = operator new(0x18uLL);
                v601 = v600;
                *v600 = &off_1E78FE068;
                v600[1] = v1099;
                v600[2] = v1083;
                do
                  v602 = __ldxr(v596);
                while (__stxr(v602 + 1, v596));
                *((_QWORD *)&block + 1) = v600;
                LODWORD(block) = 2;
                v603 = v1182[1];
                if (v1182[1] >= (void *)v1183)
                {
                  v728 = std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((uint64_t *)v1182, (uint64_t)&block);
                  v729 = block ^ ((int)block >> 31);
                  v1182[1] = v728;
                  if (v729 != 2)
                  {
                    if (v729 == 1)
                    {
                      v730 = v1194;
                      if (!(_QWORD)v1194)
                        goto LABEL_1008;
                      v731 = (unsigned int *)(v1194 + 12);
                      do
                      {
                        v732 = __ldaxr(v731);
                        v733 = v732 - 1;
                      }
                      while (__stlxr(v733, v731));
                      if (v733)
                        goto LABEL_1008;
                    }
                    else
                    {
                      v730 = v1194;
                      if (!(_QWORD)v1194)
                        goto LABEL_1008;
                      v1052 = (unsigned int *)(v1194 + 12);
                      do
                      {
                        v1053 = __ldaxr(v1052);
                        v1054 = v1053 - 1;
                      }
                      while (__stlxr(v1054, v1052));
                      if (v1054)
                        goto LABEL_1008;
                    }
                    (*(void (**)(uint64_t))(*(_QWORD *)v730 + 24))(v730);
                    goto LABEL_1008;
                  }
                  v601 = (_QWORD *)*((_QWORD *)&block + 1);
                  if (*((_QWORD *)&block + 1))
                    goto LABEL_1007;
                }
                else
                {
                  v604 = operator new(0x18uLL);
                  *v604 = &off_1E78FE068;
                  v604[1] = v1099;
                  v604[2] = v1083;
                  do
                    v605 = __ldxr(v596);
                  while (__stxr(v605 + 1, v596));
                  v603[1] = v604;
                  *(_DWORD *)v603 = 2;
                  v1182[1] = v603 + 3;
LABEL_1007:
                  (*(void (**)(_QWORD *))(*v601 + 8))(v601);
                }
LABEL_1008:
                (*(void (**)(_QWORD *))(*v598 + 8))(v598);
                std::__shared_weak_count::__release_weak(v1083);
                v606 = (uint64_t **)v1072[14];
                *(_QWORD *)&v607 = 0xAAAAAAAAAAAAAAAALL;
                *((_QWORD *)&v607 + 1) = 0xAAAAAAAAAAAAAAAALL;
                v1202 = v607;
                v1201 = v607;
                v1200 = v607;
                v1199 = v607;
                v1198 = v607;
                v1197 = v607;
                v1196 = v607;
                *(_OWORD *)v1195 = v607;
                v1194 = v607;
                block = v607;
                v608 = (pthread_mutex_t *)v606[3];
                v1203 = 10;
                __p = &block;
                v1205 = 0;
                v1206 = v608;
                pthread_mutex_lock(v608);
                v1191 = 0xAAAAAAAAAAAAAAAALL;
                v1190 = (uint64_t (**)())0xAAAAAAAAAAAAAAAALL;
                v609 = (unsigned int *)v606[1];
                v1090 = (uint64_t ***)v606;
                if (v609)
                {
                  v610 = atomic_load(v609 + 2);
                  if (v610 == 1)
                  {
                    v611 = (uint64_t *)**v606;
                    v612 = v606[2];
                    v613 = 2;
                    if (v612 != v611)
                      goto LABEL_1105;
                    goto LABEL_1104;
                  }
                }
                v614 = (uint64_t **)operator new(0x20uLL);
                v615 = *v606;
                v616 = **v606;
                v1100 = v614;
                v617 = operator new(0x40uLL);
                v618 = v617;
                *v617 = v617;
                v617[1] = v617;
                v617[2] = 0;
                v619 = *(_QWORD **)(v616 + 8);
                if (v619 != (_QWORD *)v616)
                {
                  v620 = 0;
                  v621 = v617;
                  do
                  {
                    v622 = operator new(0x20uLL);
                    v622[2] = v619[2];
                    v623 = v619[3];
                    v622[3] = v623;
                    if (v623)
                    {
                      v624 = (unsigned int *)(v623 + 8);
                      do
                        v625 = __ldxr(v624);
                      while (__stxr(v625 + 1, v624));
                      v621 = (_QWORD *)*v618;
                      v620 = v618[2];
                    }
                    *v622 = v621;
                    v622[1] = v618;
                    v621[1] = v622;
                    *v618 = v622;
                    v618[2] = ++v620;
                    v619 = (_QWORD *)v619[1];
                    v621 = v622;
                  }
                  while (v619 != (_QWORD *)v616);
                }
                v1062 = v615;
                v618[3] = 0;
                v626 = (_QWORD **)(v618 + 3);
                v618[4] = 0;
                v627 = v618 + 4;
                v618[5] = 0;
                *((_BYTE *)v618 + 48) = *(_BYTE *)(v616 + 48);
                v618[3] = v618 + 4;
                v628 = *(_QWORD **)(v616 + 24);
                v1073 = (_BYTE *)v616;
                v629 = (_QWORD *)(v616 + 32);
                if (v628 == (_QWORD *)(v616 + 32))
                {
LABEL_1020:
                  *((_BYTE *)v618 + 56) = v1073[56];
                  v630 = (_QWORD *)*((_QWORD *)v1073 + 3);
                  if (v630 != v629)
                  {
                    v631 = (_QWORD *)v618[3];
                    v632 = v618[1];
                    do
                    {
                      v631[6] = v632;
                      v633 = v1073;
                      if (v630 != v629)
                        v633 = (_BYTE *)v630[6];
                      v634 = (_QWORD *)v630[1];
                      v635 = v634;
                      v636 = v630;
                      if (v634)
                      {
                        do
                        {
                          v637 = v635;
                          v635 = (_QWORD *)*v635;
                        }
                        while (v635);
                      }
                      else
                      {
                        do
                        {
                          v637 = (_QWORD *)v636[2];
                          v249 = *v637 == (_QWORD)v636;
                          v636 = v637;
                        }
                        while (!v249);
                      }
                      v638 = v1073;
                      if (v637 != v629)
                        v638 = (_BYTE *)v637[6];
                      while (v633 != v638)
                      {
                        v633 = (_BYTE *)*((_QWORD *)v633 + 1);
                        v632 = *(_QWORD *)(v632 + 8);
                      }
                      if (v634)
                      {
                        do
                        {
                          v639 = v634;
                          v634 = (_QWORD *)*v634;
                        }
                        while (v634);
                      }
                      else
                      {
                        do
                        {
                          v639 = (_QWORD *)v630[2];
                          v249 = *v639 == (_QWORD)v630;
                          v630 = v639;
                        }
                        while (!v249);
                      }
                      v640 = (_QWORD *)v631[1];
                      if (v640)
                      {
                        do
                        {
                          v641 = v640;
                          v640 = (_QWORD *)*v640;
                        }
                        while (v640);
                      }
                      else
                      {
                        do
                        {
                          v641 = (_QWORD *)v631[2];
                          v249 = *v641 == (_QWORD)v631;
                          v631 = v641;
                        }
                        while (!v249);
                      }
                      v630 = v639;
                      v631 = v641;
                    }
                    while (v639 != v629);
                  }
                  *v1100 = v618;
                  v1100[1] = 0;
                  v661 = (uint64_t *)operator new(0x18uLL);
                  v606 = (uint64_t **)v1090;
                  v661[1] = 0x100000001;
                  *v661 = (uint64_t)off_1E78FE3F0;
                  v661[2] = (uint64_t)v618;
                  v1100[1] = v661;
                  v1100[2] = (uint64_t *)v1062[2];
                  v662 = v1062[3];
                  v1100[3] = (uint64_t *)v662;
                  if (v662)
                  {
                    v663 = (unsigned int *)(v662 + 8);
                    do
                      v664 = __ldxr(v663);
                    while (__stxr(v664 + 1, v663));
                  }
                  v665 = (uint64_t **)operator new(0x18uLL);
                  v665[1] = (uint64_t *)0x100000001;
                  *v665 = (uint64_t *)off_1E78FE390;
                  v665[2] = (uint64_t *)v1100;
                  v666 = (unsigned int *)v1090[1];
                  *v1090 = v1100;
                  v1090[1] = v665;
                  if (v666)
                  {
                    v667 = v666 + 2;
                    do
                    {
                      v668 = __ldaxr(v667);
                      v669 = v668 - 1;
                    }
                    while (__stlxr(v669, v667));
                    if (!v669)
                    {
                      (*(void (**)(unsigned int *))(*(_QWORD *)v666 + 16))(v666);
                      v670 = v666 + 3;
                      do
                      {
                        v671 = __ldaxr(v670);
                        v672 = v671 - 1;
                      }
                      while (__stlxr(v672, v670));
                      if (!v672)
                        (*(void (**)(unsigned int *))(*(_QWORD *)v666 + 24))(v666);
                    }
                  }
                  v613 = 0;
                  v611 = **v1090;
LABEL_1104:
                  v612 = (uint64_t *)v611[1];
                  if (v611 == v612)
                    goto LABEL_1208;
LABEL_1105:
                  v673 = 0;
                  v1101 = v613 - 1;
LABEL_1113:
                  v676 = v612[2];
                  v677 = *(uint64_t **)(v676 + 32);
                  if (!v677)
                    goto LABEL_1106;
                  for (k = *v677; ; k += 24)
                  {
                    if (k == v677[1])
                      goto LABEL_1106;
                    if ((*(_DWORD *)k ^ (*(int *)k >> 31)) > 1)
                    {
                      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(k + 8) + 24))(*(_QWORD *)(k + 8)) & 1) != 0)
                        goto LABEL_1122;
                    }
                    else
                    {
                      v679 = *(_QWORD *)(k + 16);
                      if (!v679 || (v680 = atomic_load((unsigned int *)(v679 + 8))) == 0)
                      {
LABEL_1122:
                        if (*(_BYTE *)(v676 + 24))
                        {
                          *(_BYTE *)(v676 + 24) = 0;
                          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v676, &block);
                        }
LABEL_1106:
                        v674 = v612[2];
                        if (*(_BYTE *)(v674 + 24))
                        {
                          v611 = (uint64_t *)v612[1];
                          goto LABEL_1108;
                        }
                        v681 = **v606;
                        v683 = (uint64_t **)(v681 + 32);
                        v682 = *(char **)(v681 + 32);
                        if (!v682)
                        {
                          if (*(uint64_t **)(v681 + 80) != v612)
                            goto LABEL_1199;
                          v705 = (uint64_t *)v612[1];
                          v707 = (uint64_t **)(v681 + 32);
                          v686 = (uint64_t *)(v681 + 32);
                          if (v705 != (uint64_t *)v681)
                            goto LABEL_1195;
                          goto LABEL_1177;
                        }
                        v684 = *(_DWORD *)(v674 + 64);
                        v685 = *(_DWORD *)(v674 + 72);
                        v686 = (uint64_t *)(v681 + 32);
                        v687 = *(_QWORD *)(v681 + 32);
                        if (v684 == 1)
                        {
                          v686 = (uint64_t *)(v681 + 32);
                          v688 = *(_QWORD *)(v681 + 32);
                          do
                          {
                            while (1)
                            {
                              v694 = *(_DWORD *)(v688 + 32);
                              v695 = v694 < 1;
                              if (v694 == 1)
                                v695 = *(_DWORD *)(v688 + 40) < v685;
                              if (!v695)
                                break;
                              v688 = *(_QWORD *)(v688 + 8);
                              if (!v688)
                                goto LABEL_1143;
                            }
                            v686 = (uint64_t *)v688;
                            v688 = *(_QWORD *)v688;
                          }
                          while (v688);
                        }
                        else
                        {
                          do
                          {
                            v689 = *(_DWORD *)(v687 + 32);
                            v690 = v689 == v684;
                            v691 = v689 < v684;
                            if (v689 >= v684)
                              v692 = (uint64_t *)v687;
                            else
                              v692 = (uint64_t *)(v687 + 8);
                            if (v691)
                              v693 = v686;
                            else
                              v693 = (uint64_t *)v687;
                            if (v690)
                            {
                              v692 = (uint64_t *)v687;
                              v686 = (uint64_t *)v687;
                            }
                            else
                            {
                              v686 = v693;
                            }
                            v687 = *v692;
                          }
                          while (*v692);
                        }
LABEL_1143:
                        if ((uint64_t *)v686[6] == v612)
                        {
                          v696 = (uint64_t **)(v681 + 32);
                          v697 = *(uint64_t ***)(v681 + 32);
                          if (v684 != 1)
                          {
                            do
                            {
                              v698 = *((_DWORD *)v697 + 8);
                              v699 = (uint64_t ***)(v697 + 1);
                              v700 = v684 == v698;
                              v701 = v684 < v698;
                              if (v684 >= v698)
                                v702 = (uint64_t ***)(v697 + 1);
                              else
                                v702 = (uint64_t ***)v697;
                              if (!v701)
                                v697 = v696;
                              if (v700)
                                v702 = v699;
                              else
                                v696 = v697;
                              v697 = *v702;
                            }
                            while (*v702);
LABEL_1161:
                            v704 = (uint64_t *)v681;
                            if (v696 != v683)
                              v704 = v696[6];
                            v705 = (uint64_t *)v612[1];
                            if (v705 != v704)
                            {
                              if (v684 != 1)
                              {
                                v706 = *((_DWORD *)v682 + 8);
                                if (v684 == v706)
                                  goto LABEL_1198;
                                while (1)
                                {
                                  if (v684 < v706)
                                  {
                                    v713 = *(_QWORD *)v682;
                                    if (!*(_QWORD *)v682)
                                    {
                                      v683 = (uint64_t **)v682;
LABEL_1194:
                                      v707 = (uint64_t **)v682;
LABEL_1195:
                                      v682 = (char *)operator new(0x38uLL);
                                      v714 = *(_QWORD *)(v674 + 64);
                                      *((_DWORD *)v682 + 10) = *(_DWORD *)(v674 + 72);
                                      *((_QWORD *)v682 + 4) = v714;
                                      *((_QWORD *)v682 + 6) = 0;
                                      *(_QWORD *)v682 = 0;
                                      *((_QWORD *)v682 + 1) = 0;
                                      *((_QWORD *)v682 + 2) = v707;
                                      *v683 = (uint64_t *)v682;
                                      v715 = **(_QWORD **)(v681 + 24);
                                      v716 = (uint64_t *)v682;
                                      if (v715)
                                      {
                                        *(_QWORD *)(v681 + 24) = v715;
                                        v716 = *v683;
                                      }
                                      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v681 + 32), v716);
                                      ++*(_QWORD *)(v681 + 40);
LABEL_1198:
                                      *((_QWORD *)v682 + 6) = v705;
                                      goto LABEL_1199;
                                    }
                                  }
                                  else
                                  {
                                    if (v706 >= v684)
                                      goto LABEL_1198;
                                    v713 = *((_QWORD *)v682 + 1);
                                    if (!v713)
                                    {
                                      v683 = (uint64_t **)(v682 + 8);
                                      goto LABEL_1194;
                                    }
                                  }
                                  v706 = *(_DWORD *)(v713 + 32);
                                  v682 = (char *)v713;
                                  if (v684 == v706)
                                  {
                                    *(_QWORD *)(v713 + 48) = v705;
                                    goto LABEL_1199;
                                  }
                                }
                              }
                              while (1)
                              {
                                v707 = (uint64_t **)v682;
                                v708 = *((_DWORD *)v682 + 8);
                                if (v708 == 1)
                                {
                                  v709 = *((_DWORD *)v682 + 10);
                                  if (v709 <= v685)
                                  {
                                    if (v709 >= v685)
                                    {
                                      *((_QWORD *)v682 + 6) = v705;
                                      goto LABEL_1199;
                                    }
LABEL_1173:
                                    v682 = (char *)*((_QWORD *)v682 + 1);
                                    if (!v682)
                                    {
                                      v683 = v707 + 1;
                                      goto LABEL_1195;
                                    }
                                    continue;
                                  }
                                }
                                else if (v708 <= 1)
                                {
                                  goto LABEL_1173;
                                }
                                v682 = *(char **)v682;
                                if (!*v707)
                                {
                                  v683 = v707;
                                  goto LABEL_1195;
                                }
                              }
                            }
LABEL_1177:
                            v710 = (uint64_t *)v686[1];
                            v711 = v686;
                            if (v710)
                            {
                              do
                              {
                                v712 = v710;
                                v710 = (uint64_t *)*v710;
                              }
                              while (v710);
                            }
                            else
                            {
                              do
                              {
                                v712 = (uint64_t *)v711[2];
                                v249 = *v712 == (_QWORD)v711;
                                v711 = v712;
                              }
                              while (!v249);
                            }
                            if (*(uint64_t **)(v681 + 24) == v686)
                              *(_QWORD *)(v681 + 24) = v712;
                            --*(_QWORD *)(v681 + 40);
                            std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v682, v686);
                            operator delete(v686);
                            goto LABEL_1199;
                          }
                          while (1)
                          {
                            v703 = *((_DWORD *)v697 + 8);
                            if (v703 == 1)
                            {
                              if (v685 >= *((_DWORD *)v697 + 10))
                                goto LABEL_1155;
                            }
                            else if (v703 <= 1)
                            {
LABEL_1155:
                              v697 = (uint64_t **)v697[1];
                              if (!v697)
                                goto LABEL_1161;
                              continue;
                            }
                            v696 = v697;
                            v697 = (uint64_t **)*v697;
                            if (!v697)
                              goto LABEL_1161;
                          }
                        }
LABEL_1199:
                        v717 = *v612;
                        v611 = (uint64_t *)v612[1];
                        *(_QWORD *)(v717 + 8) = v611;
                        *(_QWORD *)v612[1] = v717;
                        --*(_QWORD *)(v681 + 16);
                        v718 = (unsigned int *)v612[3];
                        v606 = (uint64_t **)v1090;
                        if (v718)
                        {
                          v719 = v718 + 2;
                          do
                          {
                            v720 = __ldaxr(v719);
                            v721 = v720 - 1;
                          }
                          while (__stlxr(v721, v719));
                          if (!v721)
                          {
                            (*(void (**)(unsigned int *))(*(_QWORD *)v718 + 16))(v718);
                            v722 = v718 + 3;
                            do
                            {
                              v723 = __ldaxr(v722);
                              v724 = v723 - 1;
                            }
                            while (__stlxr(v724, v722));
                            if (!v724)
                              (*(void (**)(unsigned int *))(*(_QWORD *)v718 + 24))(v718);
                          }
                        }
                        operator delete(v612);
LABEL_1108:
                        v675 = v611 != (uint64_t *)**v606 && v1101 >= ++v673;
                        v612 = v611;
                        if (!v675)
                        {
LABEL_1208:
                          v606[2] = v611;
                          v725 = operator new(0x50uLL);
                          v725[1] = 0;
                          v725[2] = 0;
                          *((_BYTE *)v725 + 24) = 1;
                          *((_DWORD *)v725 + 7) = 1;
                          *v725 = off_1E78FE450;
                          v726 = operator new(0x38uLL);
                          std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v726, (uint64_t *)v1182);
                          v726[3] = 0;
                          v727 = *((_QWORD *)&v1183 + 1);
                          if (*((_QWORD *)&v1183 + 1))
                          {
                            v726[3] = *((_QWORD *)&v1183 + 1);
                            if ((v727 & 1) != 0)
                            {
                              *((_OWORD *)v726 + 2) = v1184;
                              v726[6] = v1185;
                            }
                            else
                            {
                              (*(void (**)(__int128 *, _QWORD *, _QWORD))(v727 & 0xFFFFFFFFFFFFFFFELL))(&v1184, v726 + 4, 0);
                            }
                          }
                          v725[4] = v726;
                          v725[5] = 0;
                          v734 = operator new(0x18uLL);
                          v734[1] = 0x100000001;
                          *v734 = off_1E78FE4A8;
                          v734[2] = v726;
                          v725[5] = v734;
                          v725[6] = v606[3];
                          v735 = v606[4];
                          v725[7] = v735;
                          if (v735)
                          {
                            v736 = (unsigned int *)(v735 + 1);
                            do
                              v737 = __ldxr(v736);
                            while (__stxr(v737 + 1, v736));
                          }
                          *((_DWORD *)v725 + 16) = 0;
                          *((_BYTE *)v725 + 68) = 0;
                          v1190 = (uint64_t (**)())v725;
                          v738 = (unsigned int *)operator new(0x18uLL);
                          *((_QWORD *)v738 + 1) = 0x100000001;
                          v739 = v738 + 2;
                          *(_QWORD *)v738 = off_1E78FE508;
                          *((_QWORD *)v738 + 2) = v725;
                          v1191 = (unint64_t)v738;
                          v740 = (uint64_t *)**v606;
                          v741 = operator new(0x20uLL);
                          v742 = v741;
                          v743 = v740 + 4;
                          v741[2] = v725;
                          v741[3] = v738;
                          do
                            v744 = __ldxr(v739);
                          while (__stxr(v744 + 1, v739));
                          v745 = *v740;
                          *(_QWORD *)(v745 + 8) = v741;
                          *v741 = v745;
                          *v740 = (uint64_t)v741;
                          v741[1] = v740;
                          ++v740[2];
                          v746 = (uint64_t *)v740[4];
                          if (!v746)
                          {
                            v746 = v740 + 4;
                            goto LABEL_1245;
                          }
                          v747 = v740 + 4;
                          v748 = v740[4];
                          do
                          {
                            v749 = *(_DWORD *)(v748 + 32);
                            v750 = v749 == 2;
                            v751 = v749 < 2;
                            if (v749 >= 2)
                              v752 = (uint64_t *)v748;
                            else
                              v752 = (uint64_t *)(v748 + 8);
                            if (!v751)
                              v747 = (uint64_t *)v748;
                            if (v750)
                            {
                              v752 = (uint64_t *)v748;
                              v747 = (uint64_t *)v748;
                            }
                            v748 = *v752;
                          }
                          while (*v752);
                          if (v747 != v743 && *((_DWORD *)v747 + 8) == 2)
                          {
LABEL_1236:
                            *((_DWORD *)v725 + 16) = 2;
                            *(_QWORD *)((char *)v725 + 68) = 0xAAAAAAAAAAAAAA00;
                            v753 = v1067;
                            goto LABEL_1248;
                          }
                          v754 = *((_DWORD *)v746 + 8);
                          while (1)
                          {
                            if (v754 == 2)
                              goto LABEL_1236;
                            if (v754 < 3)
                            {
                              v755 = (uint64_t *)v746[1];
                              if (!v755)
                              {
                                v743 = v746 + 1;
LABEL_1245:
                                v756 = operator new(0x38uLL);
                                v756[4] = 0xAAAAAA0000000002;
                                *((_DWORD *)v756 + 10) = -1431655766;
                                v756[6] = v742;
                                *v756 = 0;
                                v756[1] = 0;
                                v756[2] = v746;
                                *v743 = (uint64_t)v756;
                                v757 = *(_QWORD *)v740[3];
                                if (v757)
                                {
                                  v740[3] = v757;
                                  v756 = (_QWORD *)*v743;
                                }
                                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v740[4], v756);
                                ++v740[5];
                                v725 = v1190;
                                v738 = (unsigned int *)v1191;
                                *((_DWORD *)v1190 + 16) = 2;
                                *(_QWORD *)((char *)v725 + 68) = 0xAAAAAAAAAAAAAA00;
                                v753 = v1067;
                                if (v738)
                                {
LABEL_1248:
                                  v758 = v738 + 3;
                                  do
                                    v759 = __ldxr(v758);
                                  while (__stxr(v759 + 1, v758));
                                  *(_QWORD *)&v1122 = v725;
                                  *((_QWORD *)&v1122 + 1) = v738;
                                  do
                                    v760 = __ldxr(v758);
                                  while (__stxr(v760 + 1, v758));
                                  do
                                  {
                                    v761 = __ldaxr(v758);
                                    v762 = v761 - 1;
                                  }
                                  while (__stlxr(v762, v758));
                                  if (!v762)
                                    (*(void (**)(unsigned int *))(*(_QWORD *)v738 + 24))(v738);
                                  v763 = (unsigned int *)v1191;
                                  if (v1191)
                                  {
LABEL_1256:
                                    v764 = v763 + 2;
                                    do
                                    {
                                      v765 = __ldaxr(v764);
                                      v766 = v765 - 1;
                                    }
                                    while (__stlxr(v766, v764));
                                    if (!v766)
                                    {
                                      (*(void (**)(unsigned int *))(*(_QWORD *)v763 + 16))(v763);
                                      v767 = v763 + 3;
                                      do
                                      {
                                        v768 = __ldaxr(v767);
                                        v769 = v768 - 1;
                                      }
                                      while (__stlxr(v769, v767));
                                      if (!v769)
                                        (*(void (**)(unsigned int *))(*(_QWORD *)v763 + 24))(v763);
                                    }
                                  }
                                }
                                else
                                {
                                  v1122 = (unint64_t)v725;
                                  v763 = (unsigned int *)v1191;
                                  if (v1191)
                                    goto LABEL_1256;
                                }
                                pthread_mutex_unlock(v1206);
                                v776 = (char *)__p;
                                if (__p)
                                {
                                  if (v1205 - 1 >= 0)
                                  {
                                    v777 = (char *)__p + 16 * v1205;
                                    do
                                    {
                                      v778 = (unsigned int *)*((_QWORD *)v777 - 1);
                                      if (v778)
                                      {
                                        v779 = v778 + 2;
                                        do
                                        {
                                          v780 = __ldaxr(v779);
                                          v781 = v780 - 1;
                                        }
                                        while (__stlxr(v781, v779));
                                        if (!v781)
                                        {
                                          (*(void (**)(unsigned int *))(*(_QWORD *)v778 + 16))(v778);
                                          v782 = v778 + 3;
                                          do
                                          {
                                            v783 = __ldaxr(v782);
                                            v784 = v783 - 1;
                                          }
                                          while (__stlxr(v784, v782));
                                          if (!v784)
                                            (*(void (**)(unsigned int *))(*(_QWORD *)v778 + 24))(v778);
                                        }
                                      }
                                      v777 -= 16;
                                    }
                                    while (v777 > v776);
                                  }
                                  if (v1203 >= 0xB)
                                    operator delete(__p);
                                }
                                if (*((_QWORD *)&v1183 + 1))
                                {
                                  if ((BYTE8(v1183) & 1) == 0)
                                  {
                                    v785 = *(void (**)(__int128 *, __int128 *, uint64_t))(*((_QWORD *)&v1183 + 1) & 0xFFFFFFFFFFFFFFFELL);
                                    if (v785)
                                      v785(&v1184, &v1184, 2);
                                  }
                                  *((_QWORD *)&v1183 + 1) = 0;
                                }
                                v786 = (char *)v1182[0];
                                if (!v1182[0])
                                  goto LABEL_1317;
                                v787 = v1182[1];
                                v788 = v1182[0];
                                if (v1182[1] == v1182[0])
                                  goto LABEL_1316;
                                v789 = (char *)v1182[1];
                                while (2)
                                {
                                  v790 = *((_DWORD *)v789 - 6);
                                  v789 -= 24;
                                  v791 = v790 ^ (v790 >> 31);
                                  if (v791 == 2)
                                  {
                                    v796 = *(v787 - 2);
                                    if (v796)
                                      (*(void (**)(uint64_t))(*(_QWORD *)v796 + 8))(v796);
                                  }
                                  else if (v791 == 1)
                                  {
                                    v792 = (unsigned int *)*(v787 - 1);
                                    if (v792)
                                    {
                                      v793 = v792 + 3;
                                      do
                                      {
                                        v794 = __ldaxr(v793);
                                        v795 = v794 - 1;
                                      }
                                      while (__stlxr(v795, v793));
                                      if (!v795)
                                        goto LABEL_1307;
                                    }
                                  }
                                  else
                                  {
                                    v792 = (unsigned int *)*(v787 - 1);
                                    if (v792)
                                    {
                                      v797 = v792 + 3;
                                      do
                                      {
                                        v798 = __ldaxr(v797);
                                        v799 = v798 - 1;
                                      }
                                      while (__stlxr(v799, v797));
                                      if (!v799)
LABEL_1307:
                                        (*(void (**)(unsigned int *))(*(_QWORD *)v792 + 24))(v792);
                                    }
                                  }
                                  v787 = v789;
                                  if (v789 == v786)
                                  {
                                    v788 = v1182[0];
LABEL_1316:
                                    v1182[1] = v786;
                                    operator delete(v788);
LABEL_1317:
                                    dispatch_release(v1180);
                                    if (v1181)
                                      _Block_release(v1181);
                                    v800 = (unint64_t *)&v1083->__shared_owners_;
                                    do
                                      v801 = __ldaxr(v800);
                                    while (__stlxr(v801 - 1, v800));
                                    if (v801)
                                    {
                                      if (!v753)
                                        goto LABEL_1326;
LABEL_1325:
                                      _Block_release(v753);
                                    }
                                    else
                                    {
                                      ((void (*)(std::__shared_weak_count *))v1083->__on_zero_shared)(v1083);
                                      std::__shared_weak_count::__release_weak(v1083);
                                      if (v753)
                                        goto LABEL_1325;
                                    }
LABEL_1326:
                                    v802 = operator new(0x20uLL);
                                    v802[1] = v1122;
                                    v803 = *((_QWORD *)v1106 + 28);
                                    *(_QWORD *)v802 = v803;
                                    *((_QWORD *)v802 + 1) = v1078;
                                    *(_QWORD *)(v803 + 8) = v802;
                                    *((_QWORD *)v1106 + 28) = v802;
                                    ++*((_QWORD *)v1106 + 30);
                                    v804 = *((_QWORD *)v1106 + 26);
                                    v1173 = (void **)MEMORY[0x1E0C809B0];
                                    v1174 = 0x40000000;
                                    v1175 = ___ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE13connect_eventIN5boost8signals26signalIFvNSt3__13mapIPKcNS9_4listINS9_4pairIyjEENS9_9allocatorISF_EEEENS9_4lessISC_EENSG_INSE_IKSC_SI_EEEEEENS1_5SubIdEENS7_19optional_last_valueIvEEiNSJ_IiEENS6_8functionISQ_EENSU_IFvRKNS7_10connectionESO_SP_EEENS7_5mutexEEES3_vJSO_SP_EEEDTcl7connectfp_cvNS9_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FS17_S19_E_block_invoke;
                                    v1176 = &__block_descriptor_tmp_260;
                                    v1177 = v1079;
                                    v1178 = (uint64_t (*)(coex::Module::State *__hidden))coex::Module::State::handleDesenseFrequencyReport_sync;
                                    v1179 = 0;
                                    v805 = _Block_copy(&v1173);
                                    v1102 = v804;
                                    v806 = (std::__shared_weak_count *)*((_QWORD *)v1106 + 10);
                                    if (!v806
                                      || (v807 = *((_QWORD *)v1106 + 9),
                                          (v1084 = std::__shared_weak_count::lock(v806)) == 0))
                                    {
                                      std::__throw_bad_weak_ptr[abi:ne180100]();
                                    }
                                    v808 = *((_QWORD *)v1106 + 11);
                                    v1180 = v808;
                                    if (v805)
                                      v809 = _Block_copy(v805);
                                    else
                                      v809 = 0;
                                    v1181 = v809;
                                    dispatch_retain(v808);
                                    v1183 = 0u;
                                    *(_OWORD *)v1182 = 0u;
                                    v1186 = v808;
                                    if (v809)
                                      v809 = _Block_copy(v809);
                                    v1187 = v809;
                                    dispatch_retain(v808);
                                    object = v808;
                                    v1080 = v805;
                                    if (v809)
                                    {
                                      v810 = _Block_copy(v809);
                                      v1189 = v810;
                                      dispatch_retain(v808);
                                      if (v810)
                                      {
                                        v811 = _Block_copy(v810);
                                        dispatch_retain(v808);
                                        v1190 = 0;
                                        if (v811)
                                        {
                                          v812 = _Block_copy(v811);
                                          dispatch_retain(v808);
                                          v1068 = v811;
                                          if (v812)
                                          {
                                            v813 = _Block_copy(v812);
                                            dispatch_retain(v808);
                                            v1091 = v812;
                                            if (v813)
                                            {
                                              v814 = _Block_copy(v813);
                                              dispatch_retain(v808);
                                              v1074 = v813;
                                              if (v814)
                                              {
                                                v815 = _Block_copy(v814);
                                                dispatch_retain(v808);
                                                v1191 = (unint64_t)v808;
                                                if (v815)
                                                {
                                                  v816 = 0;
                                                  v817 = 0;
                                                  v818 = 0;
                                                  v819 = 0;
                                                  v1192 = _Block_copy(v815);
                                                  dispatch_retain(v808);
                                                  dispatch_release(v808);
                                                  _Block_release(v815);
                                                  goto LABEL_1348;
                                                }
                                                v816 = 0;
                                                v817 = 0;
                                                v818 = 0;
                                                v819 = 0;
LABEL_1347:
                                                v1192 = 0;
                                                dispatch_retain(v808);
                                                dispatch_release(v808);
LABEL_1348:
                                                dispatch_release(v808);
                                                if ((v819 & 1) == 0)
                                                  _Block_release(v814);
                                                dispatch_release(v808);
                                                if ((v818 & 1) == 0)
                                                  _Block_release(v1074);
                                                v1190 = boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>)::stored_vtable;
                                                dispatch_release(v808);
                                                if ((v817 & 1) == 0)
                                                  _Block_release(v1091);
                                                dispatch_release(v808);
                                                if ((v816 & 1) == 0)
                                                  _Block_release(v1068);
                                                *((_QWORD *)&v1194 + 1) = 0xAAAAAAAAAAAAAAAALL;
                                                *(_QWORD *)&v1194 = 0xAAAAAAAAAAAAAAAALL;
                                                *((_QWORD *)&block + 1) = 0xAAAAAAAAAAAAAAAALL;
                                                *(_QWORD *)&block = 0;
                                                boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::move_assign((uint64_t)&block, (uint64_t *)&v1190);
                                                boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::move_assign((uint64_t)&v1190, (uint64_t *)&v1183 + 1);
                                                boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::move_assign((uint64_t)&v1183 + 8, (uint64_t *)&block);
                                                if ((_QWORD)block)
                                                {
                                                  if ((block & 1) == 0)
                                                  {
                                                    v820 = *(void (**)(char *, char *, uint64_t))(block & 0xFFFFFFFFFFFFFFFELL);
                                                    if (v820)
                                                      v820((char *)&block + 8, (char *)&block + 8, 2);
                                                  }
                                                }
                                                if (v1190)
                                                {
                                                  if ((v1190 & 1) == 0)
                                                  {
                                                    v821 = *(void (**)(uint64_t, _WORD *, unsigned int))((unint64_t)v1190 & 0xFFFFFFFFFFFFFFFELL);
                                                    if (v821)
                                                      v821((uint64_t)&v1191, &v1191, 2u);
                                                  }
                                                  v1190 = 0;
                                                }
                                                dispatch_release(object);
                                                if (v1189)
                                                  _Block_release(v1189);
                                                dispatch_release(v1186);
                                                if (v1187)
                                                  _Block_release(v1187);
                                                v822 = (unint64_t *)&v1084->__shared_weak_owners_;
                                                do
                                                  v823 = __ldxr(v822);
                                                while (__stxr(v823 + 1, v822));
                                                v824 = operator new(0x18uLL);
                                                *v824 = &off_1E78FE068;
                                                v824[1] = v807;
                                                v824[2] = v1084;
                                                do
                                                  v825 = __ldxr(v822);
                                                while (__stxr(v825 + 1, v822));
                                                v826 = operator new(0x18uLL);
                                                v827 = v826;
                                                *v826 = &off_1E78FE068;
                                                v826[1] = v807;
                                                v826[2] = v1084;
                                                do
                                                  v828 = __ldxr(v822);
                                                while (__stxr(v828 + 1, v822));
                                                *((_QWORD *)&block + 1) = v826;
                                                LODWORD(block) = 2;
                                                v829 = v1182[1];
                                                if (v1182[1] >= (void *)v1183)
                                                {
                                                  v954 = std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((uint64_t *)v1182, (uint64_t)&block);
                                                  v955 = block ^ ((int)block >> 31);
                                                  v1182[1] = v954;
                                                  if (v955 != 2)
                                                  {
                                                    if (v955 == 1)
                                                    {
                                                      v956 = v1194;
                                                      if (!(_QWORD)v1194)
                                                        goto LABEL_1380;
                                                      v957 = (unsigned int *)(v1194 + 12);
                                                      do
                                                      {
                                                        v958 = __ldaxr(v957);
                                                        v959 = v958 - 1;
                                                      }
                                                      while (__stlxr(v959, v957));
                                                      if (v959)
                                                        goto LABEL_1380;
                                                    }
                                                    else
                                                    {
                                                      v956 = v1194;
                                                      if (!(_QWORD)v1194)
                                                        goto LABEL_1380;
                                                      v1055 = (unsigned int *)(v1194 + 12);
                                                      do
                                                      {
                                                        v1056 = __ldaxr(v1055);
                                                        v1057 = v1056 - 1;
                                                      }
                                                      while (__stlxr(v1057, v1055));
                                                      if (v1057)
                                                        goto LABEL_1380;
                                                    }
                                                    (*(void (**)(uint64_t))(*(_QWORD *)v956 + 24))(v956);
                                                    goto LABEL_1380;
                                                  }
                                                  v827 = (_QWORD *)*((_QWORD *)&block + 1);
                                                  if (*((_QWORD *)&block + 1))
                                                    goto LABEL_1379;
                                                }
                                                else
                                                {
                                                  v830 = operator new(0x18uLL);
                                                  *v830 = &off_1E78FE068;
                                                  v830[1] = v807;
                                                  v830[2] = v1084;
                                                  do
                                                    v831 = __ldxr(v822);
                                                  while (__stxr(v831 + 1, v822));
                                                  v829[1] = v830;
                                                  *(_DWORD *)v829 = 2;
                                                  v1182[1] = v829 + 3;
LABEL_1379:
                                                  (*(void (**)(_QWORD *))(*v827 + 8))(v827);
                                                }
LABEL_1380:
                                                (*(void (**)(_QWORD *))(*v824 + 8))(v824);
                                                std::__shared_weak_count::__release_weak(v1084);
                                                v832 = *(uint64_t ***)(v1102 + 136);
                                                *(_QWORD *)&v833 = 0xAAAAAAAAAAAAAAAALL;
                                                *((_QWORD *)&v833 + 1) = 0xAAAAAAAAAAAAAAAALL;
                                                v1202 = v833;
                                                v1201 = v833;
                                                v1200 = v833;
                                                v1199 = v833;
                                                v1198 = v833;
                                                v1197 = v833;
                                                v1196 = v833;
                                                *(_OWORD *)v1195 = v833;
                                                v1194 = v833;
                                                block = v833;
                                                v834 = (pthread_mutex_t *)v832[3];
                                                v1203 = 10;
                                                __p = &block;
                                                v1205 = 0;
                                                v1206 = v834;
                                                pthread_mutex_lock(v834);
                                                v1191 = 0xAAAAAAAAAAAAAAAALL;
                                                v1190 = (uint64_t (**)())0xAAAAAAAAAAAAAAAALL;
                                                v835 = (unsigned int *)v832[1];
                                                v1092 = (uint64_t ***)v832;
                                                if (v835)
                                                {
                                                  v836 = atomic_load(v835 + 2);
                                                  if (v836 == 1)
                                                  {
                                                    v837 = (uint64_t *)**v832;
                                                    v838 = v832[2];
                                                    v839 = 2;
                                                    if (v838 != v837)
                                                      goto LABEL_1477;
                                                    goto LABEL_1476;
                                                  }
                                                }
                                                v840 = (uint64_t **)operator new(0x20uLL);
                                                v841 = *v832;
                                                v842 = **v832;
                                                v1103 = v840;
                                                v843 = operator new(0x40uLL);
                                                v844 = v843;
                                                *v843 = v843;
                                                v843[1] = v843;
                                                v843[2] = 0;
                                                v845 = *(_QWORD **)(v842 + 8);
                                                if (v845 != (_QWORD *)v842)
                                                {
                                                  v846 = 0;
                                                  v847 = v843;
                                                  do
                                                  {
                                                    v848 = operator new(0x20uLL);
                                                    v848[2] = v845[2];
                                                    v849 = v845[3];
                                                    v848[3] = v849;
                                                    if (v849)
                                                    {
                                                      v850 = (unsigned int *)(v849 + 8);
                                                      do
                                                        v851 = __ldxr(v850);
                                                      while (__stxr(v851 + 1, v850));
                                                      v847 = (_QWORD *)*v844;
                                                      v846 = v844[2];
                                                    }
                                                    *v848 = v847;
                                                    v848[1] = v844;
                                                    v847[1] = v848;
                                                    *v844 = v848;
                                                    v844[2] = ++v846;
                                                    v845 = (_QWORD *)v845[1];
                                                    v847 = v848;
                                                  }
                                                  while (v845 != (_QWORD *)v842);
                                                }
                                                v1069 = v841;
                                                v1075 = (_BYTE *)v842;
                                                v844[3] = 0;
                                                v852 = (_QWORD **)(v844 + 3);
                                                v844[4] = 0;
                                                v853 = v844 + 4;
                                                v844[5] = 0;
                                                *((_BYTE *)v844 + 48) = *(_BYTE *)(v842 + 48);
                                                v844[3] = v844 + 4;
                                                v854 = *(_QWORD **)(v842 + 24);
                                                v855 = (_QWORD *)(v842 + 32);
                                                if (v854 == (_QWORD *)(v842 + 32))
                                                {
LABEL_1392:
                                                  *((_BYTE *)v844 + 56) = v1075[56];
                                                  v856 = (_QWORD *)*((_QWORD *)v1075 + 3);
                                                  if (v856 != v855)
                                                  {
                                                    v857 = (_QWORD *)v844[3];
                                                    v858 = v844[1];
                                                    do
                                                    {
                                                      v857[6] = v858;
                                                      v859 = v1075;
                                                      if (v856 != v855)
                                                        v859 = (_BYTE *)v856[6];
                                                      v860 = (_QWORD *)v856[1];
                                                      v861 = v860;
                                                      v862 = v856;
                                                      if (v860)
                                                      {
                                                        do
                                                        {
                                                          v863 = v861;
                                                          v861 = (_QWORD *)*v861;
                                                        }
                                                        while (v861);
                                                      }
                                                      else
                                                      {
                                                        do
                                                        {
                                                          v863 = (_QWORD *)v862[2];
                                                          v249 = *v863 == (_QWORD)v862;
                                                          v862 = v863;
                                                        }
                                                        while (!v249);
                                                      }
                                                      v864 = v1075;
                                                      if (v863 != v855)
                                                        v864 = (_BYTE *)v863[6];
                                                      while (v859 != v864)
                                                      {
                                                        v859 = (_BYTE *)*((_QWORD *)v859 + 1);
                                                        v858 = *(_QWORD *)(v858 + 8);
                                                      }
                                                      if (v860)
                                                      {
                                                        do
                                                        {
                                                          v865 = v860;
                                                          v860 = (_QWORD *)*v860;
                                                        }
                                                        while (v860);
                                                      }
                                                      else
                                                      {
                                                        do
                                                        {
                                                          v865 = (_QWORD *)v856[2];
                                                          v249 = *v865 == (_QWORD)v856;
                                                          v856 = v865;
                                                        }
                                                        while (!v249);
                                                      }
                                                      v866 = (_QWORD *)v857[1];
                                                      if (v866)
                                                      {
                                                        do
                                                        {
                                                          v867 = v866;
                                                          v866 = (_QWORD *)*v866;
                                                        }
                                                        while (v866);
                                                      }
                                                      else
                                                      {
                                                        do
                                                        {
                                                          v867 = (_QWORD *)v857[2];
                                                          v249 = *v867 == (_QWORD)v857;
                                                          v857 = v867;
                                                        }
                                                        while (!v249);
                                                      }
                                                      v856 = v865;
                                                      v857 = v867;
                                                    }
                                                    while (v865 != v855);
                                                  }
                                                  *v1103 = v844;
                                                  v1103[1] = 0;
                                                  v887 = (uint64_t *)operator new(0x18uLL);
                                                  v832 = (uint64_t **)v1092;
                                                  v887[1] = 0x100000001;
                                                  *v887 = (uint64_t)off_1E78FE648;
                                                  v887[2] = (uint64_t)v844;
                                                  v1103[1] = v887;
                                                  v1103[2] = (uint64_t *)v1069[2];
                                                  v888 = v1069[3];
                                                  v1103[3] = (uint64_t *)v888;
                                                  if (v888)
                                                  {
                                                    v889 = (unsigned int *)(v888 + 8);
                                                    do
                                                      v890 = __ldxr(v889);
                                                    while (__stxr(v890 + 1, v889));
                                                  }
                                                  v891 = (uint64_t **)operator new(0x18uLL);
                                                  v891[1] = (uint64_t *)0x100000001;
                                                  *v891 = (uint64_t *)off_1E78FE5E8;
                                                  v891[2] = (uint64_t *)v1103;
                                                  v892 = (unsigned int *)v1092[1];
                                                  *v1092 = v1103;
                                                  v1092[1] = v891;
                                                  if (v892)
                                                  {
                                                    v893 = v892 + 2;
                                                    do
                                                    {
                                                      v894 = __ldaxr(v893);
                                                      v895 = v894 - 1;
                                                    }
                                                    while (__stlxr(v895, v893));
                                                    if (!v895)
                                                    {
                                                      (*(void (**)(unsigned int *))(*(_QWORD *)v892 + 16))(v892);
                                                      v896 = v892 + 3;
                                                      do
                                                      {
                                                        v897 = __ldaxr(v896);
                                                        v898 = v897 - 1;
                                                      }
                                                      while (__stlxr(v898, v896));
                                                      if (!v898)
                                                        (*(void (**)(unsigned int *))(*(_QWORD *)v892 + 24))(v892);
                                                    }
                                                  }
                                                  v839 = 0;
                                                  v837 = **v1092;
LABEL_1476:
                                                  v838 = (uint64_t *)v837[1];
                                                  if (v837 == v838)
                                                    goto LABEL_1580;
LABEL_1477:
                                                  v899 = 0;
                                                  v1104 = v839 - 1;
LABEL_1485:
                                                  v902 = v838[2];
                                                  v903 = *(uint64_t **)(v902 + 32);
                                                  if (!v903)
                                                    goto LABEL_1478;
                                                  for (m = *v903; ; m += 24)
                                                  {
                                                    if (m == v903[1])
                                                      goto LABEL_1478;
                                                    if ((*(_DWORD *)m ^ (*(int *)m >> 31)) > 1)
                                                    {
                                                      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(m + 8)
                                                                                              + 24))(*(_QWORD *)(m + 8)) & 1) != 0)
                                                        goto LABEL_1494;
                                                    }
                                                    else
                                                    {
                                                      v905 = *(_QWORD *)(m + 16);
                                                      if (!v905
                                                        || (v906 = atomic_load((unsigned int *)(v905 + 8))) == 0)
                                                      {
LABEL_1494:
                                                        if (*(_BYTE *)(v902 + 24))
                                                        {
                                                          *(_BYTE *)(v902 + 24) = 0;
                                                          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v902, &block);
                                                        }
LABEL_1478:
                                                        v900 = v838[2];
                                                        if (*(_BYTE *)(v900 + 24))
                                                        {
                                                          v837 = (uint64_t *)v838[1];
                                                          goto LABEL_1480;
                                                        }
                                                        v907 = **v832;
                                                        v909 = (uint64_t **)(v907 + 32);
                                                        v908 = *(char **)(v907 + 32);
                                                        if (!v908)
                                                        {
                                                          if (*(uint64_t **)(v907 + 80) != v838)
                                                            goto LABEL_1571;
                                                          v931 = (uint64_t *)v838[1];
                                                          v933 = (uint64_t **)(v907 + 32);
                                                          v912 = (uint64_t *)(v907 + 32);
                                                          if (v931 != (uint64_t *)v907)
                                                            goto LABEL_1567;
                                                          goto LABEL_1549;
                                                        }
                                                        v910 = *(_DWORD *)(v900 + 64);
                                                        v911 = *(_DWORD *)(v900 + 72);
                                                        v912 = (uint64_t *)(v907 + 32);
                                                        v913 = *(_QWORD *)(v907 + 32);
                                                        if (v910 == 1)
                                                        {
                                                          v912 = (uint64_t *)(v907 + 32);
                                                          v914 = *(_QWORD *)(v907 + 32);
                                                          do
                                                          {
                                                            while (1)
                                                            {
                                                              v920 = *(_DWORD *)(v914 + 32);
                                                              v921 = v920 < 1;
                                                              if (v920 == 1)
                                                                v921 = *(_DWORD *)(v914 + 40) < v911;
                                                              if (!v921)
                                                                break;
                                                              v914 = *(_QWORD *)(v914 + 8);
                                                              if (!v914)
                                                                goto LABEL_1515;
                                                            }
                                                            v912 = (uint64_t *)v914;
                                                            v914 = *(_QWORD *)v914;
                                                          }
                                                          while (v914);
                                                        }
                                                        else
                                                        {
                                                          do
                                                          {
                                                            v915 = *(_DWORD *)(v913 + 32);
                                                            v916 = v915 == v910;
                                                            v917 = v915 < v910;
                                                            if (v915 >= v910)
                                                              v918 = (uint64_t *)v913;
                                                            else
                                                              v918 = (uint64_t *)(v913 + 8);
                                                            if (v917)
                                                              v919 = v912;
                                                            else
                                                              v919 = (uint64_t *)v913;
                                                            if (v916)
                                                            {
                                                              v918 = (uint64_t *)v913;
                                                              v912 = (uint64_t *)v913;
                                                            }
                                                            else
                                                            {
                                                              v912 = v919;
                                                            }
                                                            v913 = *v918;
                                                          }
                                                          while (*v918);
                                                        }
LABEL_1515:
                                                        if ((uint64_t *)v912[6] == v838)
                                                        {
                                                          v922 = (uint64_t **)(v907 + 32);
                                                          v923 = *(uint64_t ***)(v907 + 32);
                                                          if (v910 != 1)
                                                          {
                                                            do
                                                            {
                                                              v924 = *((_DWORD *)v923 + 8);
                                                              v925 = (uint64_t ***)(v923 + 1);
                                                              v926 = v910 == v924;
                                                              v927 = v910 < v924;
                                                              if (v910 >= v924)
                                                                v928 = (uint64_t ***)(v923 + 1);
                                                              else
                                                                v928 = (uint64_t ***)v923;
                                                              if (!v927)
                                                                v923 = v922;
                                                              if (v926)
                                                                v928 = v925;
                                                              else
                                                                v922 = v923;
                                                              v923 = *v928;
                                                            }
                                                            while (*v928);
LABEL_1533:
                                                            v930 = (uint64_t *)v907;
                                                            if (v922 != v909)
                                                              v930 = v922[6];
                                                            v931 = (uint64_t *)v838[1];
                                                            if (v931 != v930)
                                                            {
                                                              if (v910 != 1)
                                                              {
                                                                v932 = *((_DWORD *)v908 + 8);
                                                                if (v910 == v932)
                                                                  goto LABEL_1570;
                                                                while (1)
                                                                {
                                                                  if (v910 < v932)
                                                                  {
                                                                    v939 = *(_QWORD *)v908;
                                                                    if (!*(_QWORD *)v908)
                                                                    {
                                                                      v909 = (uint64_t **)v908;
LABEL_1566:
                                                                      v933 = (uint64_t **)v908;
LABEL_1567:
                                                                      v908 = (char *)operator new(0x38uLL);
                                                                      v940 = *(_QWORD *)(v900 + 64);
                                                                      *((_DWORD *)v908 + 10) = *(_DWORD *)(v900 + 72);
                                                                      *((_QWORD *)v908 + 4) = v940;
                                                                      *((_QWORD *)v908 + 6) = 0;
                                                                      *(_QWORD *)v908 = 0;
                                                                      *((_QWORD *)v908 + 1) = 0;
                                                                      *((_QWORD *)v908 + 2) = v933;
                                                                      *v909 = (uint64_t *)v908;
                                                                      v941 = **(_QWORD **)(v907 + 24);
                                                                      v942 = (uint64_t *)v908;
                                                                      if (v941)
                                                                      {
                                                                        *(_QWORD *)(v907 + 24) = v941;
                                                                        v942 = *v909;
                                                                      }
                                                                      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v907 + 32), v942);
                                                                      ++*(_QWORD *)(v907 + 40);
LABEL_1570:
                                                                      *((_QWORD *)v908 + 6) = v931;
                                                                      goto LABEL_1571;
                                                                    }
                                                                  }
                                                                  else
                                                                  {
                                                                    if (v932 >= v910)
                                                                      goto LABEL_1570;
                                                                    v939 = *((_QWORD *)v908 + 1);
                                                                    if (!v939)
                                                                    {
                                                                      v909 = (uint64_t **)(v908 + 8);
                                                                      goto LABEL_1566;
                                                                    }
                                                                  }
                                                                  v932 = *(_DWORD *)(v939 + 32);
                                                                  v908 = (char *)v939;
                                                                  if (v910 == v932)
                                                                  {
                                                                    *(_QWORD *)(v939 + 48) = v931;
                                                                    goto LABEL_1571;
                                                                  }
                                                                }
                                                              }
                                                              while (1)
                                                              {
                                                                v933 = (uint64_t **)v908;
                                                                v934 = *((_DWORD *)v908 + 8);
                                                                if (v934 == 1)
                                                                {
                                                                  v935 = *((_DWORD *)v908 + 10);
                                                                  if (v935 <= v911)
                                                                  {
                                                                    if (v935 >= v911)
                                                                    {
                                                                      *((_QWORD *)v908 + 6) = v931;
                                                                      goto LABEL_1571;
                                                                    }
LABEL_1545:
                                                                    v908 = (char *)*((_QWORD *)v908 + 1);
                                                                    if (!v908)
                                                                    {
                                                                      v909 = v933 + 1;
                                                                      goto LABEL_1567;
                                                                    }
                                                                    continue;
                                                                  }
                                                                }
                                                                else if (v934 <= 1)
                                                                {
                                                                  goto LABEL_1545;
                                                                }
                                                                v908 = *(char **)v908;
                                                                if (!*v933)
                                                                {
                                                                  v909 = v933;
                                                                  goto LABEL_1567;
                                                                }
                                                              }
                                                            }
LABEL_1549:
                                                            v936 = (uint64_t *)v912[1];
                                                            v937 = v912;
                                                            if (v936)
                                                            {
                                                              do
                                                              {
                                                                v938 = v936;
                                                                v936 = (uint64_t *)*v936;
                                                              }
                                                              while (v936);
                                                            }
                                                            else
                                                            {
                                                              do
                                                              {
                                                                v938 = (uint64_t *)v937[2];
                                                                v249 = *v938 == (_QWORD)v937;
                                                                v937 = v938;
                                                              }
                                                              while (!v249);
                                                            }
                                                            if (*(uint64_t **)(v907 + 24) == v912)
                                                              *(_QWORD *)(v907 + 24) = v938;
                                                            --*(_QWORD *)(v907 + 40);
                                                            std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v908, v912);
                                                            operator delete(v912);
                                                            goto LABEL_1571;
                                                          }
                                                          while (1)
                                                          {
                                                            v929 = *((_DWORD *)v923 + 8);
                                                            if (v929 == 1)
                                                            {
                                                              if (v911 >= *((_DWORD *)v923 + 10))
                                                                goto LABEL_1527;
                                                            }
                                                            else if (v929 <= 1)
                                                            {
LABEL_1527:
                                                              v923 = (uint64_t **)v923[1];
                                                              if (!v923)
                                                                goto LABEL_1533;
                                                              continue;
                                                            }
                                                            v922 = v923;
                                                            v923 = (uint64_t **)*v923;
                                                            if (!v923)
                                                              goto LABEL_1533;
                                                          }
                                                        }
LABEL_1571:
                                                        v943 = *v838;
                                                        v837 = (uint64_t *)v838[1];
                                                        *(_QWORD *)(v943 + 8) = v837;
                                                        *(_QWORD *)v838[1] = v943;
                                                        --*(_QWORD *)(v907 + 16);
                                                        v944 = (unsigned int *)v838[3];
                                                        v832 = (uint64_t **)v1092;
                                                        if (v944)
                                                        {
                                                          v945 = v944 + 2;
                                                          do
                                                          {
                                                            v946 = __ldaxr(v945);
                                                            v947 = v946 - 1;
                                                          }
                                                          while (__stlxr(v947, v945));
                                                          if (!v947)
                                                          {
                                                            (*(void (**)(unsigned int *))(*(_QWORD *)v944 + 16))(v944);
                                                            v948 = v944 + 3;
                                                            do
                                                            {
                                                              v949 = __ldaxr(v948);
                                                              v950 = v949 - 1;
                                                            }
                                                            while (__stlxr(v950, v948));
                                                            if (!v950)
                                                              (*(void (**)(unsigned int *))(*(_QWORD *)v944 + 24))(v944);
                                                          }
                                                        }
                                                        operator delete(v838);
LABEL_1480:
                                                        v901 = v837 != (uint64_t *)**v832 && v1104 >= ++v899;
                                                        v838 = v837;
                                                        if (!v901)
                                                        {
LABEL_1580:
                                                          v832[2] = v837;
                                                          v951 = operator new(0x50uLL);
                                                          v951[1] = 0;
                                                          v951[2] = 0;
                                                          *((_BYTE *)v951 + 24) = 1;
                                                          *((_DWORD *)v951 + 7) = 1;
                                                          *v951 = off_1E78FE6A8;
                                                          v952 = operator new(0x38uLL);
                                                          std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v952, (uint64_t *)v1182);
                                                          v952[3] = 0;
                                                          v953 = *((_QWORD *)&v1183 + 1);
                                                          if (*((_QWORD *)&v1183 + 1))
                                                          {
                                                            v952[3] = *((_QWORD *)&v1183 + 1);
                                                            if ((v953 & 1) != 0)
                                                            {
                                                              *((_OWORD *)v952 + 2) = v1184;
                                                              v952[6] = v1185;
                                                            }
                                                            else
                                                            {
                                                              (*(void (**)(__int128 *, _QWORD *, _QWORD))(v953 & 0xFFFFFFFFFFFFFFFELL))(&v1184, v952 + 4, 0);
                                                            }
                                                          }
                                                          v951[4] = v952;
                                                          v951[5] = 0;
                                                          v960 = operator new(0x18uLL);
                                                          v960[1] = 0x100000001;
                                                          *v960 = off_1E78FE700;
                                                          v960[2] = v952;
                                                          v951[5] = v960;
                                                          v951[6] = v832[3];
                                                          v961 = v832[4];
                                                          v951[7] = v961;
                                                          if (v961)
                                                          {
                                                            v962 = (unsigned int *)(v961 + 1);
                                                            do
                                                              v963 = __ldxr(v962);
                                                            while (__stxr(v963 + 1, v962));
                                                          }
                                                          *((_DWORD *)v951 + 16) = 0;
                                                          *((_BYTE *)v951 + 68) = 0;
                                                          v1190 = (uint64_t (**)())v951;
                                                          v964 = (unsigned int *)operator new(0x18uLL);
                                                          *((_QWORD *)v964 + 1) = 0x100000001;
                                                          v965 = v964 + 2;
                                                          *(_QWORD *)v964 = off_1E78FE760;
                                                          *((_QWORD *)v964 + 2) = v951;
                                                          v1191 = (unint64_t)v964;
                                                          v966 = (uint64_t *)**v832;
                                                          v967 = operator new(0x20uLL);
                                                          v968 = v967;
                                                          v969 = v966 + 4;
                                                          v967[2] = v951;
                                                          v967[3] = v964;
                                                          do
                                                            v970 = __ldxr(v965);
                                                          while (__stxr(v970 + 1, v965));
                                                          v971 = *v966;
                                                          *(_QWORD *)(v971 + 8) = v967;
                                                          *v967 = v971;
                                                          *v966 = (uint64_t)v967;
                                                          v967[1] = v966;
                                                          ++v966[2];
                                                          v972 = (uint64_t *)v966[4];
                                                          if (!v972)
                                                          {
                                                            v972 = v966 + 4;
                                                            goto LABEL_1617;
                                                          }
                                                          v973 = v966 + 4;
                                                          v974 = v966[4];
                                                          do
                                                          {
                                                            v975 = *(_DWORD *)(v974 + 32);
                                                            v976 = v975 == 2;
                                                            v977 = v975 < 2;
                                                            if (v975 >= 2)
                                                              v978 = (uint64_t *)v974;
                                                            else
                                                              v978 = (uint64_t *)(v974 + 8);
                                                            if (!v977)
                                                              v973 = (uint64_t *)v974;
                                                            if (v976)
                                                            {
                                                              v978 = (uint64_t *)v974;
                                                              v973 = (uint64_t *)v974;
                                                            }
                                                            v974 = *v978;
                                                          }
                                                          while (*v978);
                                                          if (v973 != v969 && *((_DWORD *)v973 + 8) == 2)
                                                          {
LABEL_1608:
                                                            *((_DWORD *)v951 + 16) = 2;
                                                            *(_QWORD *)((char *)v951 + 68) = 0xAAAAAAAAAAAAAA00;
                                                            v979 = v1080;
                                                            goto LABEL_1620;
                                                          }
                                                          v980 = *((_DWORD *)v972 + 8);
                                                          while (1)
                                                          {
                                                            if (v980 == 2)
                                                              goto LABEL_1608;
                                                            if (v980 < 3)
                                                            {
                                                              v981 = (uint64_t *)v972[1];
                                                              if (!v981)
                                                              {
                                                                v969 = v972 + 1;
LABEL_1617:
                                                                v982 = operator new(0x38uLL);
                                                                v982[4] = 0xAAAAAA0000000002;
                                                                *((_DWORD *)v982 + 10) = -1431655766;
                                                                v982[6] = v968;
                                                                *v982 = 0;
                                                                v982[1] = 0;
                                                                v982[2] = v972;
                                                                *v969 = (uint64_t)v982;
                                                                v983 = *(_QWORD *)v966[3];
                                                                if (v983)
                                                                {
                                                                  v966[3] = v983;
                                                                  v982 = (_QWORD *)*v969;
                                                                }
                                                                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v966[4], v982);
                                                                ++v966[5];
                                                                v951 = v1190;
                                                                v964 = (unsigned int *)v1191;
                                                                *((_DWORD *)v1190 + 16) = 2;
                                                                *(_QWORD *)((char *)v951 + 68) = 0xAAAAAAAAAAAAAA00;
                                                                v979 = v1080;
                                                                if (v964)
                                                                {
LABEL_1620:
                                                                  v984 = v964 + 3;
                                                                  do
                                                                    v985 = __ldxr(v984);
                                                                  while (__stxr(v985 + 1, v984));
                                                                  *(_QWORD *)&v1122 = v951;
                                                                  *((_QWORD *)&v1122 + 1) = v964;
                                                                  do
                                                                    v986 = __ldxr(v984);
                                                                  while (__stxr(v986 + 1, v984));
                                                                  do
                                                                  {
                                                                    v987 = __ldaxr(v984);
                                                                    v988 = v987 - 1;
                                                                  }
                                                                  while (__stlxr(v988, v984));
                                                                  if (!v988)
                                                                    (*(void (**)(unsigned int *))(*(_QWORD *)v964 + 24))(v964);
                                                                  v989 = (unsigned int *)v1191;
                                                                  if (v1191)
                                                                  {
LABEL_1628:
                                                                    v990 = v989 + 2;
                                                                    do
                                                                    {
                                                                      v991 = __ldaxr(v990);
                                                                      v992 = v991 - 1;
                                                                    }
                                                                    while (__stlxr(v992, v990));
                                                                    if (!v992)
                                                                    {
                                                                      (*(void (**)(unsigned int *))(*(_QWORD *)v989 + 16))(v989);
                                                                      v993 = v989 + 3;
                                                                      do
                                                                      {
                                                                        v994 = __ldaxr(v993);
                                                                        v995 = v994 - 1;
                                                                      }
                                                                      while (__stlxr(v995, v993));
                                                                      if (!v995)
                                                                        (*(void (**)(unsigned int *))(*(_QWORD *)v989 + 24))(v989);
                                                                    }
                                                                  }
                                                                }
                                                                else
                                                                {
                                                                  v1122 = (unint64_t)v951;
                                                                  v989 = (unsigned int *)v1191;
                                                                  if (v1191)
                                                                    goto LABEL_1628;
                                                                }
                                                                pthread_mutex_unlock(v1206);
                                                                v996 = (char *)__p;
                                                                if (__p)
                                                                {
                                                                  if (v1205 - 1 >= 0)
                                                                  {
                                                                    v997 = (char *)__p + 16 * v1205;
                                                                    do
                                                                    {
                                                                      v998 = (unsigned int *)*((_QWORD *)v997 - 1);
                                                                      if (v998)
                                                                      {
                                                                        v999 = v998 + 2;
                                                                        do
                                                                        {
                                                                          v1000 = __ldaxr(v999);
                                                                          v1001 = v1000 - 1;
                                                                        }
                                                                        while (__stlxr(v1001, v999));
                                                                        if (!v1001)
                                                                        {
                                                                          (*(void (**)(unsigned int *))(*(_QWORD *)v998 + 16))(v998);
                                                                          v1002 = v998 + 3;
                                                                          do
                                                                          {
                                                                            v1003 = __ldaxr(v1002);
                                                                            v1004 = v1003 - 1;
                                                                          }
                                                                          while (__stlxr(v1004, v1002));
                                                                          if (!v1004)
                                                                            (*(void (**)(unsigned int *))(*(_QWORD *)v998 + 24))(v998);
                                                                        }
                                                                      }
                                                                      v997 -= 16;
                                                                    }
                                                                    while (v997 > v996);
                                                                  }
                                                                  if (v1203 >= 0xB)
                                                                    operator delete(__p);
                                                                }
                                                                if (*((_QWORD *)&v1183 + 1))
                                                                {
                                                                  if ((BYTE8(v1183) & 1) == 0)
                                                                  {
                                                                    v1005 = *(void (**)(__int128 *, __int128 *, uint64_t))(*((_QWORD *)&v1183 + 1) & 0xFFFFFFFFFFFFFFFELL);
                                                                    if (v1005)
                                                                      v1005(&v1184, &v1184, 2);
                                                                  }
                                                                  *((_QWORD *)&v1183 + 1) = 0;
                                                                }
                                                                v1006 = (char *)v1182[0];
                                                                if (!v1182[0])
                                                                  goto LABEL_1675;
                                                                v1007 = v1182[1];
                                                                v1008 = v1182[0];
                                                                if (v1182[1] == v1182[0])
                                                                  goto LABEL_1674;
                                                                v1009 = (char *)v1182[1];
                                                                while (2)
                                                                {
                                                                  v1010 = *((_DWORD *)v1009 - 6);
                                                                  v1009 -= 24;
                                                                  v1011 = v1010 ^ (v1010 >> 31);
                                                                  if (v1011 == 2)
                                                                  {
                                                                    v1016 = *(v1007 - 2);
                                                                    if (v1016)
                                                                      (*(void (**)(uint64_t))(*(_QWORD *)v1016 + 8))(v1016);
                                                                  }
                                                                  else if (v1011 == 1)
                                                                  {
                                                                    v1012 = (unsigned int *)*(v1007 - 1);
                                                                    if (v1012)
                                                                    {
                                                                      v1013 = v1012 + 3;
                                                                      do
                                                                      {
                                                                        v1014 = __ldaxr(v1013);
                                                                        v1015 = v1014 - 1;
                                                                      }
                                                                      while (__stlxr(v1015, v1013));
                                                                      if (!v1015)
                                                                        goto LABEL_1665;
                                                                    }
                                                                  }
                                                                  else
                                                                  {
                                                                    v1012 = (unsigned int *)*(v1007 - 1);
                                                                    if (v1012)
                                                                    {
                                                                      v1017 = v1012 + 3;
                                                                      do
                                                                      {
                                                                        v1018 = __ldaxr(v1017);
                                                                        v1019 = v1018 - 1;
                                                                      }
                                                                      while (__stlxr(v1019, v1017));
                                                                      if (!v1019)
LABEL_1665:
                                                                        (*(void (**)(unsigned int *))(*(_QWORD *)v1012 + 24))(v1012);
                                                                    }
                                                                  }
                                                                  v1007 = v1009;
                                                                  if (v1009 == v1006)
                                                                  {
                                                                    v1008 = v1182[0];
LABEL_1674:
                                                                    v1182[1] = v1006;
                                                                    operator delete(v1008);
LABEL_1675:
                                                                    dispatch_release(v1180);
                                                                    if (v1181)
                                                                      _Block_release(v1181);
                                                                    v1020 = (unint64_t *)&v1084->__shared_owners_;
                                                                    v574 = v1106;
                                                                    do
                                                                      v1021 = __ldaxr(v1020);
                                                                    while (__stlxr(v1021 - 1, v1020));
                                                                    if (v1021)
                                                                    {
                                                                      if (!v979)
                                                                      {
LABEL_1684:
                                                                        v1022 = operator new(0x20uLL);
                                                                        v1022[1] = v1122;
                                                                        v1023 = *((_QWORD *)v1106 + 28);
                                                                        *(_QWORD *)v1022 = v1023;
                                                                        *((_QWORD *)v1022 + 1) = v1078;
                                                                        *(_QWORD *)(v1023 + 8) = v1022;
                                                                        *((_QWORD *)v1106 + 28) = v1022;
                                                                        ++*((_QWORD *)v1106 + 30);
                                                                        goto LABEL_1685;
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      ((void (*)(std::__shared_weak_count *))v1084->__on_zero_shared)(v1084);
                                                                      std::__shared_weak_count::__release_weak(v1084);
                                                                      if (!v979)
                                                                        goto LABEL_1684;
                                                                    }
                                                                    _Block_release(v979);
                                                                    goto LABEL_1684;
                                                                  }
                                                                  continue;
                                                                }
                                                              }
                                                            }
                                                            else
                                                            {
                                                              v981 = (uint64_t *)*v972;
                                                              v969 = v972;
                                                              if (!*v972)
                                                                goto LABEL_1617;
                                                            }
                                                            v980 = *((_DWORD *)v981 + 8);
                                                            v972 = v981;
                                                          }
                                                        }
                                                        goto LABEL_1485;
                                                      }
                                                    }
                                                  }
                                                }
                                                while (2)
                                                {
                                                  v868 = *((_DWORD *)v854 + 8);
                                                  v869 = (_QWORD *)*v853;
                                                  v870 = v844 + 4;
                                                  if (*v852 == v853)
                                                    goto LABEL_1429;
                                                  v871 = (_QWORD *)*v853;
                                                  v872 = v844 + 4;
                                                  if (v869)
                                                  {
                                                    do
                                                    {
                                                      v870 = v871;
                                                      v871 = (_QWORD *)v871[1];
                                                    }
                                                    while (v871);
                                                  }
                                                  else
                                                  {
                                                    do
                                                    {
                                                      v870 = (_QWORD *)v872[2];
                                                      v249 = *v870 == (_QWORD)v872;
                                                      v872 = v870;
                                                    }
                                                    while (v249);
                                                  }
                                                  v873 = *((_DWORD *)v854 + 10);
                                                  v874 = *((_DWORD *)v870 + 8);
                                                  if (v874 == v868)
                                                  {
                                                    if (v868 == 1)
                                                    {
                                                      if (*((_DWORD *)v870 + 10) >= v873)
                                                      {
                                                        v875 = (_QWORD *)*v853;
                                                        v876 = v844 + 4;
                                                        v877 = v844 + 4;
                                                        if (v869)
                                                          goto LABEL_1441;
LABEL_1448:
                                                        v881 = operator new(0x38uLL);
                                                        v882 = *((_OWORD *)v854 + 2);
                                                        v881[6] = v854[6];
                                                        *((_OWORD *)v881 + 2) = v882;
                                                        *v881 = 0;
                                                        v881[1] = 0;
                                                        v881[2] = v877;
                                                        *v876 = v881;
                                                        v883 = (_QWORD *)**v852;
                                                        if (v883)
                                                        {
                                                          *v852 = v883;
                                                          v881 = (_QWORD *)*v876;
                                                        }
                                                        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v844[4], v881);
                                                        ++v844[5];
LABEL_1451:
                                                        v884 = (_QWORD *)v854[1];
                                                        if (v884)
                                                        {
                                                          do
                                                          {
                                                            v885 = v884;
                                                            v884 = (_QWORD *)*v884;
                                                          }
                                                          while (v884);
                                                        }
                                                        else
                                                        {
                                                          do
                                                          {
                                                            v885 = (_QWORD *)v854[2];
                                                            v249 = *v885 == (_QWORD)v854;
                                                            v854 = v885;
                                                          }
                                                          while (!v249);
                                                        }
                                                        v854 = v885;
                                                        if (v885 == v855)
                                                          goto LABEL_1392;
                                                        continue;
                                                      }
LABEL_1429:
                                                      if (v869)
                                                        v877 = v870;
                                                      else
                                                        v877 = v844 + 4;
                                                      if (v869)
                                                        v876 = v870 + 1;
                                                      else
                                                        v876 = v844 + 4;
                                                      if (!*v876)
                                                        goto LABEL_1448;
                                                      goto LABEL_1451;
                                                    }
                                                  }
                                                  else if (v874 < v868)
                                                  {
                                                    goto LABEL_1429;
                                                  }
                                                  break;
                                                }
                                                v876 = v844 + 4;
                                                v877 = v844 + 4;
                                                if (!v869)
                                                  goto LABEL_1448;
                                                v875 = (_QWORD *)*v853;
                                                if (v868 != 1)
                                                {
                                                  v878 = *((_DWORD *)v869 + 8);
                                                  v877 = (_QWORD *)*v853;
                                                  while (v868 != v878)
                                                  {
                                                    if (v868 < v878)
                                                    {
                                                      v886 = *v877;
                                                      v876 = v877;
                                                      if (!*v877)
                                                        goto LABEL_1448;
                                                    }
                                                    else
                                                    {
                                                      if (v878 >= v868)
                                                        goto LABEL_1451;
                                                      v886 = v877[1];
                                                      if (!v886)
                                                        goto LABEL_1447;
                                                    }
                                                    v878 = *(_DWORD *)(v886 + 32);
                                                    v877 = (_QWORD *)v886;
                                                  }
                                                  goto LABEL_1451;
                                                }
                                                while (1)
                                                {
LABEL_1441:
                                                  v877 = v875;
                                                  v879 = *((_DWORD *)v875 + 8);
                                                  if (v879 == 1)
                                                  {
                                                    v880 = *((_DWORD *)v875 + 10);
                                                    if (v880 > v873)
                                                      goto LABEL_1440;
                                                    if (v880 >= v873)
                                                      goto LABEL_1451;
                                                  }
                                                  else if (v879 > 1)
                                                  {
LABEL_1440:
                                                    v875 = (_QWORD *)*v875;
                                                    v876 = v877;
                                                    if (!*v877)
                                                      goto LABEL_1448;
                                                    continue;
                                                  }
                                                  v875 = (_QWORD *)v875[1];
                                                  if (!v875)
                                                  {
LABEL_1447:
                                                    v876 = v877 + 1;
                                                    goto LABEL_1448;
                                                  }
                                                }
                                              }
                                              v816 = 0;
                                              v817 = 0;
                                              v818 = 0;
LABEL_1346:
                                              dispatch_retain(v808);
                                              v814 = 0;
                                              v1191 = (unint64_t)v808;
                                              v819 = 1;
                                              goto LABEL_1347;
                                            }
                                            v816 = 0;
                                            v817 = 0;
LABEL_1345:
                                            dispatch_retain(v808);
                                            v1074 = 0;
                                            v818 = 1;
                                            goto LABEL_1346;
                                          }
                                          v816 = 0;
LABEL_1344:
                                          dispatch_retain(v808);
                                          v1091 = 0;
                                          v817 = 1;
                                          goto LABEL_1345;
                                        }
LABEL_1343:
                                        dispatch_retain(v808);
                                        v1068 = 0;
                                        v816 = 1;
                                        goto LABEL_1344;
                                      }
                                    }
                                    else
                                    {
                                      v1189 = 0;
                                      dispatch_retain(v808);
                                    }
                                    dispatch_retain(v808);
                                    v1190 = 0;
                                    goto LABEL_1343;
                                  }
                                  continue;
                                }
                              }
                            }
                            else
                            {
                              v755 = (uint64_t *)*v746;
                              v743 = v746;
                              if (!*v746)
                                goto LABEL_1245;
                            }
                            v754 = *((_DWORD *)v755 + 8);
                            v746 = v755;
                          }
                        }
                        goto LABEL_1113;
                      }
                    }
                  }
                }
                while (2)
                {
                  v642 = *((_DWORD *)v628 + 8);
                  v643 = (_QWORD *)*v627;
                  v644 = v618 + 4;
                  if (*v626 == v627)
                    goto LABEL_1057;
                  v645 = (_QWORD *)*v627;
                  v646 = v618 + 4;
                  if (v643)
                  {
                    do
                    {
                      v644 = v645;
                      v645 = (_QWORD *)v645[1];
                    }
                    while (v645);
                  }
                  else
                  {
                    do
                    {
                      v644 = (_QWORD *)v646[2];
                      v249 = *v644 == (_QWORD)v646;
                      v646 = v644;
                    }
                    while (v249);
                  }
                  v647 = *((_DWORD *)v628 + 10);
                  v648 = *((_DWORD *)v644 + 8);
                  if (v648 == v642)
                  {
                    if (v642 == 1)
                    {
                      if (*((_DWORD *)v644 + 10) >= v647)
                      {
                        v649 = (_QWORD *)*v627;
                        v650 = v618 + 4;
                        v651 = v618 + 4;
                        if (v643)
                          goto LABEL_1069;
LABEL_1076:
                        v655 = operator new(0x38uLL);
                        v656 = *((_OWORD *)v628 + 2);
                        v655[6] = v628[6];
                        *((_OWORD *)v655 + 2) = v656;
                        *v655 = 0;
                        v655[1] = 0;
                        v655[2] = v651;
                        *v650 = v655;
                        v657 = (_QWORD *)**v626;
                        if (v657)
                        {
                          *v626 = v657;
                          v655 = (_QWORD *)*v650;
                        }
                        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v618[4], v655);
                        ++v618[5];
LABEL_1079:
                        v658 = (_QWORD *)v628[1];
                        if (v658)
                        {
                          do
                          {
                            v659 = v658;
                            v658 = (_QWORD *)*v658;
                          }
                          while (v658);
                        }
                        else
                        {
                          do
                          {
                            v659 = (_QWORD *)v628[2];
                            v249 = *v659 == (_QWORD)v628;
                            v628 = v659;
                          }
                          while (!v249);
                        }
                        v628 = v659;
                        if (v659 == v629)
                          goto LABEL_1020;
                        continue;
                      }
LABEL_1057:
                      if (v643)
                        v651 = v644;
                      else
                        v651 = v618 + 4;
                      if (v643)
                        v650 = v644 + 1;
                      else
                        v650 = v618 + 4;
                      if (!*v650)
                        goto LABEL_1076;
                      goto LABEL_1079;
                    }
                  }
                  else if (v648 < v642)
                  {
                    goto LABEL_1057;
                  }
                  break;
                }
                v650 = v618 + 4;
                v651 = v618 + 4;
                if (!v643)
                  goto LABEL_1076;
                v649 = (_QWORD *)*v627;
                if (v642 != 1)
                {
                  v652 = *((_DWORD *)v643 + 8);
                  v651 = (_QWORD *)*v627;
                  while (v642 != v652)
                  {
                    if (v642 < v652)
                    {
                      v660 = *v651;
                      v650 = v651;
                      if (!*v651)
                        goto LABEL_1076;
                    }
                    else
                    {
                      if (v652 >= v642)
                        goto LABEL_1079;
                      v660 = v651[1];
                      if (!v660)
                        goto LABEL_1075;
                    }
                    v652 = *(_DWORD *)(v660 + 32);
                    v651 = (_QWORD *)v660;
                  }
                  goto LABEL_1079;
                }
                while (1)
                {
LABEL_1069:
                  v651 = v649;
                  v653 = *((_DWORD *)v649 + 8);
                  if (v653 == 1)
                  {
                    v654 = *((_DWORD *)v649 + 10);
                    if (v654 > v647)
                      goto LABEL_1068;
                    if (v654 >= v647)
                      goto LABEL_1079;
                  }
                  else if (v653 > 1)
                  {
LABEL_1068:
                    v649 = (_QWORD *)*v649;
                    v650 = v651;
                    if (!*v651)
                      goto LABEL_1076;
                    continue;
                  }
                  v649 = (_QWORD *)v649[1];
                  if (!v649)
                  {
LABEL_1075:
                    v650 = v651 + 1;
                    goto LABEL_1076;
                  }
                }
              }
              v590 = 0;
              v591 = 0;
              v592 = 0;
LABEL_974:
              dispatch_retain(v582);
              v588 = 0;
              v1191 = (unint64_t)v582;
              v593 = 1;
              goto LABEL_975;
            }
            v590 = 0;
            v591 = 0;
LABEL_973:
            v1089 = v586;
            dispatch_retain(v582);
            v587 = 0;
            v592 = 1;
            goto LABEL_974;
          }
          v590 = 0;
LABEL_972:
          dispatch_retain(v582);
          v586 = 0;
          v591 = 1;
          goto LABEL_973;
        }
LABEL_971:
        dispatch_retain(v582);
        v1061 = 0;
        v590 = 1;
        goto LABEL_972;
      }
    }
    else
    {
      v1189 = 0;
      dispatch_retain(v582);
    }
    dispatch_retain(v582);
    v1190 = 0;
    goto LABEL_971;
  }
LABEL_1685:
  coex::Module::State::setIndications_sync(v574);
  v1121 = 8;
  cf = 0;
  strcpy((char *)v1120, "coex.mod");
  AppleBasebandManager::create();
  v1024 = block;
  block = 0uLL;
  v1025 = (std::__shared_weak_count *)*((_QWORD *)v1106 + 32);
  *(_OWORD *)((char *)v1106 + 248) = v1024;
  if (v1025)
  {
    v1026 = (unint64_t *)&v1025->__shared_owners_;
    do
      v1027 = __ldaxr(v1026);
    while (__stlxr(v1027 - 1, v1026));
    if (!v1027)
    {
      ((void (*)(std::__shared_weak_count *))v1025->__on_zero_shared)(v1025);
      std::__shared_weak_count::__release_weak(v1025);
      v1028 = (std::__shared_weak_count *)*((_QWORD *)&block + 1);
      if (*((_QWORD *)&block + 1))
        goto LABEL_1690;
      goto LABEL_1693;
    }
  }
  v1028 = (std::__shared_weak_count *)*((_QWORD *)&block + 1);
  if (!*((_QWORD *)&block + 1))
    goto LABEL_1693;
LABEL_1690:
  v1029 = (unint64_t *)&v1028->__shared_owners_;
  do
    v1030 = __ldaxr(v1029);
  while (__stlxr(v1030 - 1, v1029));
  if (v1030)
  {
LABEL_1693:
    v1031 = cf;
    if (cf)
      goto LABEL_1694;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v1028->__on_zero_shared)(v1028);
    std::__shared_weak_count::__release_weak(v1028);
    v1031 = cf;
    if (cf)
LABEL_1694:
      CFRelease(v1031);
  }
  if (v1121 < 0)
    operator delete(v1120[0]);
  v1032 = (const void *)*MEMORY[0x1E0CFBF60];
  v1033 = strlen((const char *)*MEMORY[0x1E0CFBF60]);
  if (v1033 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v1034 = (void *)v1033;
  if (v1033 >= 0x17)
  {
    v1037 = (v1033 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1033 | 7) != 0x17)
      v1037 = v1033 | 7;
    v1038 = v1037 + 1;
    v1035 = (void **)operator new(v1037 + 1);
    __dst[1] = v1034;
    v1118 = v1038 | 0x8000000000000000;
    __dst[0] = v1035;
    v1036 = v1076;
  }
  else
  {
    HIBYTE(v1118) = v1033;
    v1035 = __dst;
    v1036 = v1076;
    if (!v1033)
      goto LABEL_1705;
  }
  memmove(v1035, v1032, (size_t)v1034);
LABEL_1705:
  *((_BYTE *)v1034 + (_QWORD)v1035) = 0;
  v1113[0] = MEMORY[0x1E0C809B0];
  v1113[1] = 1174405120;
  v1113[2] = ___ZN4coex6Module5State4initEv_block_invoke_64;
  v1113[3] = &__block_descriptor_tmp_66;
  v1113[4] = v1106;
  v1113[5] = v1105;
  v1114 = v1036;
  do
    v1039 = __ldxr(p_shared_weak_owners);
  while (__stxr(v1039 + 1, p_shared_weak_owners));
  v1040 = _Block_copy(v1113);
  v1041 = *((_QWORD *)v1106 + 11);
  if (v1041)
    dispatch_retain(*((dispatch_object_t *)v1106 + 11));
  v1115 = v1040;
  v1116 = v1041;
  AppleBasebandManager::setEventHandler();
  if (v1116)
    dispatch_release(v1116);
  if (v1115)
    _Block_release(v1115);
  if (SHIBYTE(v1118) < 0)
    operator delete(__dst[0]);
  v1042 = (const void *)*MEMORY[0x1E0CFBD68];
  v1043 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  if (v1043 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v1044 = (void *)v1043;
  if (v1043 >= 0x17)
  {
    v1047 = (v1043 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1043 | 7) != 0x17)
      v1047 = v1043 | 7;
    v1048 = v1047 + 1;
    v1046 = v1106;
    v1045 = operator new(v1047 + 1);
    v1111[1] = v1044;
    v1112 = v1048 | 0x8000000000000000;
    v1111[0] = v1045;
    v1036 = v1076;
  }
  else
  {
    HIBYTE(v1112) = v1043;
    v1045 = v1111;
    v1046 = v1106;
    if (!v1043)
      goto LABEL_1723;
  }
  memmove(v1045, v1042, (size_t)v1044);
LABEL_1723:
  *((_BYTE *)v1044 + (_QWORD)v1045) = 0;
  v1107[0] = MEMORY[0x1E0C809B0];
  v1107[1] = 1174405120;
  v1107[2] = ___ZN4coex6Module5State4initEv_block_invoke_67;
  v1107[3] = &__block_descriptor_tmp_68;
  v1107[4] = v1046;
  v1107[5] = v1105;
  v1108 = v1036;
  do
    v1049 = __ldxr(p_shared_weak_owners);
  while (__stxr(v1049 + 1, p_shared_weak_owners));
  v1050 = _Block_copy(v1107);
  v1051 = *((_QWORD *)v1046 + 11);
  if (v1051)
    dispatch_retain(*((dispatch_object_t *)v1046 + 11));
  v1109 = v1050;
  v1110 = v1051;
  AppleBasebandManager::setEventHandler();
  if (v1110)
    dispatch_release(v1110);
  if (v1109)
    _Block_release(v1109);
  if (SHIBYTE(v1112) < 0)
    operator delete(v1111[0]);
  AppleBasebandManager::eventsOn(*((AppleBasebandManager **)v1046 + 31));
  if (v1108)
    std::__shared_weak_count::__release_weak(v1108);
  if (v1114)
    std::__shared_weak_count::__release_weak(v1114);
  if (v1124)
    std::__shared_weak_count::__release_weak(v1124);
  if (v1126)
    std::__shared_weak_count::__release_weak(v1126);
  if (v1128)
    std::__shared_weak_count::__release_weak(v1128);
  if (v1130)
    std::__shared_weak_count::__release_weak(v1130);
  if (v1132)
    std::__shared_weak_count::__release_weak(v1132);
  if (v1134)
    std::__shared_weak_count::__release_weak(v1134);
  if (v1136)
    std::__shared_weak_count::__release_weak(v1136);
  if (v1138)
    std::__shared_weak_count::__release_weak(v1138);
  if (v1140)
    std::__shared_weak_count::__release_weak(v1140);
  if (v1142)
    std::__shared_weak_count::__release_weak(v1142);
  if (v1144)
    std::__shared_weak_count::__release_weak(v1144);
  if (v1146)
    std::__shared_weak_count::__release_weak(v1146);
  if (v1148)
    std::__shared_weak_count::__release_weak(v1148);
  if (v1150)
    std::__shared_weak_count::__release_weak(v1150);
  if (v1152)
    std::__shared_weak_count::__release_weak(v1152);
  if (v1154)
    std::__shared_weak_count::__release_weak(v1154);
  if (v1156)
    std::__shared_weak_count::__release_weak(v1156);
  if (v1158)
    std::__shared_weak_count::__release_weak(v1158);
  if (v1160)
    std::__shared_weak_count::__release_weak(v1160);
  if (v1162)
    std::__shared_weak_count::__release_weak(v1162);
  if (v1164)
    std::__shared_weak_count::__release_weak(v1164);
  if (v1166)
    std::__shared_weak_count::__release_weak(v1166);
  if (v1168)
    std::__shared_weak_count::__release_weak(v1168);
  if (v1170)
    std::__shared_weak_count::__release_weak(v1170);
  if (v1172)
    std::__shared_weak_count::__release_weak(v1172);
  std::__shared_weak_count::__release_weak(v1036);
}

void sub_1BF36E08C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36E098(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36E0A0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36E0A8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36E0B0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36E0B8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36E0C4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36E0D0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36E0DC(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36E0E8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36E0F4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36E100(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36E10C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36E118(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36E124(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36E130(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36E13C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36E148(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36E154(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36E15C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36E164(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36E16C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36E174(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36E17C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36E184(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36E190(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36E19C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36E1A8(uint64_t a1, int a2)
{
  boost::signals2::detail::connection_body_base *v2;
  unsigned int *v3;

  if (a2)
  {
    if (*(_QWORD *)v3)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100](v3, *(_QWORD *)v3);
      operator delete(*(void **)v3);
    }
    operator delete(v3);
    boost::signals2::detail::connection_body_base::~connection_body_base(v2);
    JUMPOUT(0x1BF3702F8);
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF36EA88(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36EA90(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36EA98(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36EAA0(uint64_t a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  if (a2)
  {
    v2 = STACK[0x838];
    if (STACK[0x838])
    {
      if ((uint64_t)(STACK[0x840] - 1) >= 0)
      {
        v3 = v2 + 16 * STACK[0x840];
        do
        {
          v4 = *(unsigned int **)(v3 - 8);
          if (v4)
          {
            v5 = v4 + 2;
            do
            {
              v6 = __ldaxr(v5);
              v7 = v6 - 1;
            }
            while (__stlxr(v7, v5));
            if (!v7)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
              v8 = v4 + 3;
              do
              {
                v9 = __ldaxr(v8);
                v10 = v9 - 1;
              }
              while (__stlxr(v10, v8));
              if (!v10)
                (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
            }
          }
          v3 -= 16;
        }
        while (v3 > v2);
      }
      if (STACK[0x830] >= 0xB)
        operator delete((void *)STACK[0x838]);
    }
    JUMPOUT(0x1BF3705D4);
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF36EB44(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36EB4C(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF36EB5CLL);
  JUMPOUT(0x1BF370644);
}

void sub_1BF36EB6C(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF36EB74);
  JUMPOUT(0x1BF370644);
}

void sub_1BF36EB80(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36EB8C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36EB94(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1BF36EBB4(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1BF3705F4);
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF36EBC4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36EBCC(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);

  if (a2)
  {
    __cxa_begin_catch(a1);
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
    {
      if ((v3 & 1) == 0)
      {
        v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
        if (v4)
          v4(v2 + 32, v2 + 32, 2);
      }
      *(_QWORD *)(v2 + 24) = 0;
    }
    if (*(_QWORD *)v2)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v2, *(_QWORD *)v2);
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1BF36EC28(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36EC30(uint64_t a1, int a2)
{
  boost::signals2::detail::connection_body_base *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  if (a2)
  {
    __cxa_end_catch();
    v3 = (unsigned int *)*((_QWORD *)v2 + 5);
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
        v7 = v3 + 3;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
          (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
      }
    }
    boost::signals2::detail::connection_body_base::~connection_body_base(v2);
    JUMPOUT(0x1BF3703B8);
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF36EC98(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36ECA0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36ECA8(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF36ECB0);
  JUMPOUT(0x1BF370644);
}

void sub_1BF36ECBC(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF36ECC4);
  JUMPOUT(0x1BF370644);
}

void sub_1BF36ECD0(uint64_t a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  if (a2)
  {
    v2 = STACK[0x838];
    if (STACK[0x838])
    {
      if ((uint64_t)(STACK[0x840] - 1) >= 0)
      {
        v3 = v2 + 16 * STACK[0x840];
        do
        {
          v4 = *(unsigned int **)(v3 - 8);
          if (v4)
          {
            v5 = v4 + 2;
            do
            {
              v6 = __ldaxr(v5);
              v7 = v6 - 1;
            }
            while (__stlxr(v7, v5));
            if (!v7)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
              v8 = v4 + 3;
              do
              {
                v9 = __ldaxr(v8);
                v10 = v9 - 1;
              }
              while (__stlxr(v10, v8));
              if (!v10)
                (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
            }
          }
          v3 -= 16;
        }
        while (v3 > v2);
      }
      if (STACK[0x830] >= 0xB)
        operator delete((void *)STACK[0x838]);
    }
    JUMPOUT(0x1BF3705FCLL);
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF36ED74(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36ED7C(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF36ED8CLL);
  JUMPOUT(0x1BF370644);
}

void sub_1BF36ED9C(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF36EDA4);
  JUMPOUT(0x1BF370644);
}

void sub_1BF36EDBC(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EDC8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EDD4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EDE0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EDEC(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EDF8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EE04(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EE10(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EE1C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EE28(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EE34(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EE40(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EE4C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EE58(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EE64(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EE70(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EE7C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EE88(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EE94(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EEA0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EEAC(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EEB8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EEC4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EED0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EEDC(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EEE8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EEF4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EF00(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EF0C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EF18(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EF24(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EF30(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EF3C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EF48(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EF54(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EF60(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EF6C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EF78(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EF84(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EF90(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EF9C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EFA8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EFB4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EFC0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EFCC(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EFD8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EFE4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EFF0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36EFFC(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F008(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F014(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F020(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F02C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F038(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F044(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F050(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F05C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F068(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F074(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F080(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F08C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F098(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F0A4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F0B0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F0BC(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F0C8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F0D4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F0E0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F0EC(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F0F8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F104(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F110(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F11C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F128(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F134(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F140(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F14C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F158(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F164(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F170(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F17C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F188(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F194(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F1A0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F1AC(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F1B8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F1C4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F1D0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *__p)
{
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;

  if (a2)
  {
    __cxa_begin_catch(a1);
    v18 = (unsigned int *)__p[3];
    if (v18)
    {
      v19 = v18 + 2;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 16))(v18);
        v22 = v18 + 3;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
          (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 24))(v18);
      }
    }
    v25 = (unsigned int *)__p[1];
    if (v25)
    {
      v26 = v25 + 2;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 16))(v25);
        v29 = v25 + 3;
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
          (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 24))(v25);
      }
    }
    operator delete(__p);
    __cxa_rethrow();
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF36F2B0(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1BF37061CLL);
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF36F2C4(void *a1, int a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a2)
  {
    __cxa_begin_catch(a1);
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy((_QWORD *)v2[4]);
    if (v2[2])
    {
      v3 = (_QWORD *)*v2;
      v4 = (uint64_t *)v2[1];
      v5 = *v4;
      *(_QWORD *)(v5 + 8) = *(_QWORD *)(*v2 + 8);
      *(_QWORD *)v3[1] = v5;
      v2[2] = 0;
      if (v4 != v2)
      {
        do
        {
          v6 = (uint64_t *)v4[1];
          v7 = (unsigned int *)v4[3];
          if (v7)
          {
            v8 = v7 + 2;
            do
            {
              v9 = __ldaxr(v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v8));
            if (!v10)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
              v11 = v7 + 3;
              do
              {
                v12 = __ldaxr(v11);
                v13 = v12 - 1;
              }
              while (__stlxr(v13, v11));
              if (!v13)
                (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
            }
          }
          operator delete(v4);
          v4 = v6;
        }
        while (v6 != v2);
      }
    }
    operator delete(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF36F390(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;

  if (a2)
  {
    __cxa_end_catch();
    v18 = *(unsigned int **)(a18 + 8);
    if (v18)
    {
      v19 = v18 + 2;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 16))(v18);
        v22 = v18 + 3;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
          (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 24))(v18);
      }
    }
    JUMPOUT(0x1BF370474);
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF36F404(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF370474);
}

void sub_1BF36F410(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *__p)
{
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;

  if (a2)
  {
    __cxa_begin_catch(a1);
    v18 = (unsigned int *)__p[3];
    if (v18)
    {
      v19 = v18 + 2;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 16))(v18);
        v22 = v18 + 3;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
          (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 24))(v18);
      }
    }
    v25 = (unsigned int *)__p[1];
    if (v25)
    {
      v26 = v25 + 2;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 16))(v25);
        v29 = v25 + 3;
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
          (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 24))(v25);
      }
    }
    operator delete(__p);
    __cxa_rethrow();
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF36F4E8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F4F4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F500(void *a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&STACK[0x790]);
    boost::signals2::slot<void ()(void),boost::function<void ()(void)>>::~slot((uint64_t)&STACK[0x710]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>::~DispatchSlot((uint64_t)&STACK[0x700]);
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF36F510(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F51C(void *a1, int a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a2)
  {
    __cxa_begin_catch(a1);
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy((_QWORD *)v2[4]);
    if (v2[2])
    {
      v3 = (_QWORD *)*v2;
      v4 = (uint64_t *)v2[1];
      v5 = *v4;
      *(_QWORD *)(v5 + 8) = *(_QWORD *)(*v2 + 8);
      *(_QWORD *)v3[1] = v5;
      v2[2] = 0;
      if (v4 != v2)
      {
        do
        {
          v6 = (uint64_t *)v4[1];
          v7 = (unsigned int *)v4[3];
          if (v7)
          {
            v8 = v7 + 2;
            do
            {
              v9 = __ldaxr(v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v8));
            if (!v10)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
              v11 = v7 + 3;
              do
              {
                v12 = __ldaxr(v11);
                v13 = v12 - 1;
              }
              while (__stlxr(v13, v11));
              if (!v13)
                (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
            }
          }
          operator delete(v4);
          v4 = v6;
        }
        while (v6 != v2);
      }
    }
    operator delete(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF36F5E4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F5F0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;

  if (a2)
  {
    __cxa_end_catch();
    v18 = *(unsigned int **)(a18 + 8);
    if (v18)
    {
      v19 = v18 + 2;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 16))(v18);
        v22 = v18 + 3;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
          (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 24))(v18);
      }
    }
    JUMPOUT(0x1BF370538);
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF36F65C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F668(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F674(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF370538);
}

void sub_1BF36F680(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36F688(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36F690(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36F698(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36F6A0(uint64_t a1, int a2)
{
  if (a2)
  {
    boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::~shared_ptr((uint64_t)&STACK[0x770]);
    JUMPOUT(0x1BF3705CCLL);
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF36F6B4(uint64_t a1, int a2)
{
  if (a2)
  {
    boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::~shared_ptr((uint64_t)&STACK[0x770]);
    JUMPOUT(0x1BF3705F4);
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF36F6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,std::__shared_weak_count *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__shared_weak_count *a64;
  std::__shared_weak_count *a71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;

  if (a27)
    std::__shared_weak_count::__release_weak(a27);
  if (a39)
    std::__shared_weak_count::__release_weak(a39);
  if (a57)
  {
    std::__shared_weak_count::__release_weak(a57);
    v72 = a64;
    if (!a64)
    {
LABEL_7:
      v73 = a71;
      if (!a71)
        goto LABEL_8;
      goto LABEL_34;
    }
  }
  else
  {
    v72 = a64;
    if (!a64)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v72);
  v73 = a71;
  if (!a71)
  {
LABEL_8:
    v74 = (std::__shared_weak_count *)STACK[0x228];
    if (!STACK[0x228])
      goto LABEL_9;
    goto LABEL_35;
  }
LABEL_34:
  std::__shared_weak_count::__release_weak(v73);
  v74 = (std::__shared_weak_count *)STACK[0x228];
  if (!STACK[0x228])
  {
LABEL_9:
    v75 = (std::__shared_weak_count *)STACK[0x260];
    if (!STACK[0x260])
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  std::__shared_weak_count::__release_weak(v74);
  v75 = (std::__shared_weak_count *)STACK[0x260];
  if (!STACK[0x260])
  {
LABEL_10:
    v76 = (std::__shared_weak_count *)STACK[0x298];
    if (!STACK[0x298])
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  std::__shared_weak_count::__release_weak(v75);
  v76 = (std::__shared_weak_count *)STACK[0x298];
  if (!STACK[0x298])
  {
LABEL_11:
    v77 = (std::__shared_weak_count *)STACK[0x2D0];
    if (!STACK[0x2D0])
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  std::__shared_weak_count::__release_weak(v76);
  v77 = (std::__shared_weak_count *)STACK[0x2D0];
  if (!STACK[0x2D0])
  {
LABEL_12:
    v78 = (std::__shared_weak_count *)STACK[0x308];
    if (!STACK[0x308])
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  std::__shared_weak_count::__release_weak(v77);
  v78 = (std::__shared_weak_count *)STACK[0x308];
  if (!STACK[0x308])
  {
LABEL_13:
    v79 = (std::__shared_weak_count *)STACK[0x340];
    if (!STACK[0x340])
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  std::__shared_weak_count::__release_weak(v78);
  v79 = (std::__shared_weak_count *)STACK[0x340];
  if (!STACK[0x340])
  {
LABEL_14:
    v80 = (std::__shared_weak_count *)STACK[0x378];
    if (!STACK[0x378])
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  std::__shared_weak_count::__release_weak(v79);
  v80 = (std::__shared_weak_count *)STACK[0x378];
  if (!STACK[0x378])
  {
LABEL_15:
    v81 = (std::__shared_weak_count *)STACK[0x3B0];
    if (!STACK[0x3B0])
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  std::__shared_weak_count::__release_weak(v80);
  v81 = (std::__shared_weak_count *)STACK[0x3B0];
  if (!STACK[0x3B0])
  {
LABEL_16:
    v82 = (std::__shared_weak_count *)STACK[0x3E8];
    if (!STACK[0x3E8])
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  std::__shared_weak_count::__release_weak(v81);
  v82 = (std::__shared_weak_count *)STACK[0x3E8];
  if (!STACK[0x3E8])
  {
LABEL_17:
    v83 = (std::__shared_weak_count *)STACK[0x420];
    if (!STACK[0x420])
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  std::__shared_weak_count::__release_weak(v82);
  v83 = (std::__shared_weak_count *)STACK[0x420];
  if (!STACK[0x420])
  {
LABEL_18:
    v84 = (std::__shared_weak_count *)STACK[0x458];
    if (!STACK[0x458])
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  std::__shared_weak_count::__release_weak(v83);
  v84 = (std::__shared_weak_count *)STACK[0x458];
  if (!STACK[0x458])
  {
LABEL_19:
    v85 = (std::__shared_weak_count *)STACK[0x490];
    if (!STACK[0x490])
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  std::__shared_weak_count::__release_weak(v84);
  v85 = (std::__shared_weak_count *)STACK[0x490];
  if (!STACK[0x490])
  {
LABEL_20:
    v86 = (std::__shared_weak_count *)STACK[0x4C8];
    if (!STACK[0x4C8])
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  std::__shared_weak_count::__release_weak(v85);
  v86 = (std::__shared_weak_count *)STACK[0x4C8];
  if (!STACK[0x4C8])
  {
LABEL_21:
    v87 = (std::__shared_weak_count *)STACK[0x500];
    if (!STACK[0x500])
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  std::__shared_weak_count::__release_weak(v86);
  v87 = (std::__shared_weak_count *)STACK[0x500];
  if (!STACK[0x500])
  {
LABEL_22:
    v88 = (std::__shared_weak_count *)STACK[0x538];
    if (!STACK[0x538])
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  std::__shared_weak_count::__release_weak(v87);
  v88 = (std::__shared_weak_count *)STACK[0x538];
  if (!STACK[0x538])
  {
LABEL_23:
    v89 = (std::__shared_weak_count *)STACK[0x570];
    if (!STACK[0x570])
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  std::__shared_weak_count::__release_weak(v88);
  v89 = (std::__shared_weak_count *)STACK[0x570];
  if (!STACK[0x570])
  {
LABEL_24:
    v90 = (std::__shared_weak_count *)STACK[0x5A8];
    if (!STACK[0x5A8])
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_50:
  std::__shared_weak_count::__release_weak(v89);
  v90 = (std::__shared_weak_count *)STACK[0x5A8];
  if (!STACK[0x5A8])
  {
LABEL_25:
    v91 = (std::__shared_weak_count *)STACK[0x5E0];
    if (!STACK[0x5E0])
      goto LABEL_26;
    goto LABEL_52;
  }
LABEL_51:
  std::__shared_weak_count::__release_weak(v90);
  v91 = (std::__shared_weak_count *)STACK[0x5E0];
  if (!STACK[0x5E0])
  {
LABEL_26:
    v92 = (std::__shared_weak_count *)STACK[0x618];
    if (!STACK[0x618])
      goto LABEL_27;
    goto LABEL_53;
  }
LABEL_52:
  std::__shared_weak_count::__release_weak(v91);
  v92 = (std::__shared_weak_count *)STACK[0x618];
  if (!STACK[0x618])
  {
LABEL_27:
    v93 = (std::__shared_weak_count *)STACK[0x650];
    if (!STACK[0x650])
      goto LABEL_28;
    goto LABEL_54;
  }
LABEL_53:
  std::__shared_weak_count::__release_weak(v92);
  v93 = (std::__shared_weak_count *)STACK[0x650];
  if (!STACK[0x650])
  {
LABEL_28:
    v94 = (std::__shared_weak_count *)STACK[0x688];
    if (!STACK[0x688])
      goto LABEL_29;
    goto LABEL_55;
  }
LABEL_54:
  std::__shared_weak_count::__release_weak(v93);
  v94 = (std::__shared_weak_count *)STACK[0x688];
  if (!STACK[0x688])
  {
LABEL_29:
    v95 = (std::__shared_weak_count *)STACK[0x6C0];
    if (!STACK[0x6C0])
      goto LABEL_31;
    goto LABEL_30;
  }
LABEL_55:
  std::__shared_weak_count::__release_weak(v94);
  v95 = (std::__shared_weak_count *)STACK[0x6C0];
  if (!STACK[0x6C0])
  {
LABEL_31:
    std::__shared_weak_count::__release_weak(a13);
    _Unwind_Resume(a1);
  }
LABEL_30:
  std::__shared_weak_count::__release_weak(v95);
  goto LABEL_31;
}

void sub_1BF36F6DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,std::__shared_weak_count *a42)
{
  dispatch::callback<void({block_pointer})(std::shared_ptr<abm::client::Event>)>::~callback((uint64_t)&a28);
  if (a27)
    std::__shared_weak_count::__release_weak(a27);
  if (a35 < 0)
    operator delete(__p);
  if (a42)
    std::__shared_weak_count::__release_weak(a42);
  JUMPOUT(0x1BF36FEE8);
}

void sub_1BF36F708(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36F710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,std::__shared_weak_count *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__shared_weak_count *a67;
  std::__shared_weak_count *a72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count *v96;

  dispatch::callback<void({block_pointer})(std::shared_ptr<abm::client::Event>)>::~callback((uint64_t)&a40);
  if (a39)
    std::__shared_weak_count::__release_weak(a39);
  if (a47 < 0)
    operator delete(__p);
  if (a60)
  {
    std::__shared_weak_count::__release_weak(a60);
    v73 = a67;
    if (!a67)
    {
LABEL_7:
      v74 = a72;
      if (!a72)
        goto LABEL_8;
      goto LABEL_34;
    }
  }
  else
  {
    v73 = a67;
    if (!a67)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v73);
  v74 = a72;
  if (!a72)
  {
LABEL_8:
    v75 = (std::__shared_weak_count *)STACK[0x228];
    if (!STACK[0x228])
      goto LABEL_9;
    goto LABEL_35;
  }
LABEL_34:
  std::__shared_weak_count::__release_weak(v74);
  v75 = (std::__shared_weak_count *)STACK[0x228];
  if (!STACK[0x228])
  {
LABEL_9:
    v76 = (std::__shared_weak_count *)STACK[0x260];
    if (!STACK[0x260])
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  std::__shared_weak_count::__release_weak(v75);
  v76 = (std::__shared_weak_count *)STACK[0x260];
  if (!STACK[0x260])
  {
LABEL_10:
    v77 = (std::__shared_weak_count *)STACK[0x298];
    if (!STACK[0x298])
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  std::__shared_weak_count::__release_weak(v76);
  v77 = (std::__shared_weak_count *)STACK[0x298];
  if (!STACK[0x298])
  {
LABEL_11:
    v78 = (std::__shared_weak_count *)STACK[0x2D0];
    if (!STACK[0x2D0])
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  std::__shared_weak_count::__release_weak(v77);
  v78 = (std::__shared_weak_count *)STACK[0x2D0];
  if (!STACK[0x2D0])
  {
LABEL_12:
    v79 = (std::__shared_weak_count *)STACK[0x308];
    if (!STACK[0x308])
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  std::__shared_weak_count::__release_weak(v78);
  v79 = (std::__shared_weak_count *)STACK[0x308];
  if (!STACK[0x308])
  {
LABEL_13:
    v80 = (std::__shared_weak_count *)STACK[0x340];
    if (!STACK[0x340])
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  std::__shared_weak_count::__release_weak(v79);
  v80 = (std::__shared_weak_count *)STACK[0x340];
  if (!STACK[0x340])
  {
LABEL_14:
    v81 = (std::__shared_weak_count *)STACK[0x378];
    if (!STACK[0x378])
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  std::__shared_weak_count::__release_weak(v80);
  v81 = (std::__shared_weak_count *)STACK[0x378];
  if (!STACK[0x378])
  {
LABEL_15:
    v82 = (std::__shared_weak_count *)STACK[0x3B0];
    if (!STACK[0x3B0])
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  std::__shared_weak_count::__release_weak(v81);
  v82 = (std::__shared_weak_count *)STACK[0x3B0];
  if (!STACK[0x3B0])
  {
LABEL_16:
    v83 = (std::__shared_weak_count *)STACK[0x3E8];
    if (!STACK[0x3E8])
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  std::__shared_weak_count::__release_weak(v82);
  v83 = (std::__shared_weak_count *)STACK[0x3E8];
  if (!STACK[0x3E8])
  {
LABEL_17:
    v84 = (std::__shared_weak_count *)STACK[0x420];
    if (!STACK[0x420])
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  std::__shared_weak_count::__release_weak(v83);
  v84 = (std::__shared_weak_count *)STACK[0x420];
  if (!STACK[0x420])
  {
LABEL_18:
    v85 = (std::__shared_weak_count *)STACK[0x458];
    if (!STACK[0x458])
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  std::__shared_weak_count::__release_weak(v84);
  v85 = (std::__shared_weak_count *)STACK[0x458];
  if (!STACK[0x458])
  {
LABEL_19:
    v86 = (std::__shared_weak_count *)STACK[0x490];
    if (!STACK[0x490])
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  std::__shared_weak_count::__release_weak(v85);
  v86 = (std::__shared_weak_count *)STACK[0x490];
  if (!STACK[0x490])
  {
LABEL_20:
    v87 = (std::__shared_weak_count *)STACK[0x4C8];
    if (!STACK[0x4C8])
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  std::__shared_weak_count::__release_weak(v86);
  v87 = (std::__shared_weak_count *)STACK[0x4C8];
  if (!STACK[0x4C8])
  {
LABEL_21:
    v88 = (std::__shared_weak_count *)STACK[0x500];
    if (!STACK[0x500])
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  std::__shared_weak_count::__release_weak(v87);
  v88 = (std::__shared_weak_count *)STACK[0x500];
  if (!STACK[0x500])
  {
LABEL_22:
    v89 = (std::__shared_weak_count *)STACK[0x538];
    if (!STACK[0x538])
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  std::__shared_weak_count::__release_weak(v88);
  v89 = (std::__shared_weak_count *)STACK[0x538];
  if (!STACK[0x538])
  {
LABEL_23:
    v90 = (std::__shared_weak_count *)STACK[0x570];
    if (!STACK[0x570])
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  std::__shared_weak_count::__release_weak(v89);
  v90 = (std::__shared_weak_count *)STACK[0x570];
  if (!STACK[0x570])
  {
LABEL_24:
    v91 = (std::__shared_weak_count *)STACK[0x5A8];
    if (!STACK[0x5A8])
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_50:
  std::__shared_weak_count::__release_weak(v90);
  v91 = (std::__shared_weak_count *)STACK[0x5A8];
  if (!STACK[0x5A8])
  {
LABEL_25:
    v92 = (std::__shared_weak_count *)STACK[0x5E0];
    if (!STACK[0x5E0])
      goto LABEL_26;
    goto LABEL_52;
  }
LABEL_51:
  std::__shared_weak_count::__release_weak(v91);
  v92 = (std::__shared_weak_count *)STACK[0x5E0];
  if (!STACK[0x5E0])
  {
LABEL_26:
    v93 = (std::__shared_weak_count *)STACK[0x618];
    if (!STACK[0x618])
      goto LABEL_27;
    goto LABEL_53;
  }
LABEL_52:
  std::__shared_weak_count::__release_weak(v92);
  v93 = (std::__shared_weak_count *)STACK[0x618];
  if (!STACK[0x618])
  {
LABEL_27:
    v94 = (std::__shared_weak_count *)STACK[0x650];
    if (!STACK[0x650])
      goto LABEL_28;
    goto LABEL_54;
  }
LABEL_53:
  std::__shared_weak_count::__release_weak(v93);
  v94 = (std::__shared_weak_count *)STACK[0x650];
  if (!STACK[0x650])
  {
LABEL_28:
    v95 = (std::__shared_weak_count *)STACK[0x688];
    if (!STACK[0x688])
      goto LABEL_29;
    goto LABEL_55;
  }
LABEL_54:
  std::__shared_weak_count::__release_weak(v94);
  v95 = (std::__shared_weak_count *)STACK[0x688];
  if (!STACK[0x688])
  {
LABEL_29:
    v96 = (std::__shared_weak_count *)STACK[0x6C0];
    if (!STACK[0x6C0])
      goto LABEL_31;
    goto LABEL_30;
  }
LABEL_55:
  std::__shared_weak_count::__release_weak(v95);
  v96 = (std::__shared_weak_count *)STACK[0x6C0];
  if (!STACK[0x6C0])
  {
LABEL_31:
    std::__shared_weak_count::__release_weak(a13);
    _Unwind_Resume(a1);
  }
LABEL_30:
  std::__shared_weak_count::__release_weak(v96);
  goto LABEL_31;
}

void sub_1BF36F73C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36F744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,const void *a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,std::__shared_weak_count *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__shared_weak_count *a67;
  std::__shared_weak_count *a72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count *v96;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a45);
  if (a51 < 0)
    operator delete(__p);
  if (a60)
  {
    std::__shared_weak_count::__release_weak(a60);
    v73 = a67;
    if (!a67)
    {
LABEL_5:
      v74 = a72;
      if (!a72)
        goto LABEL_6;
      goto LABEL_32;
    }
  }
  else
  {
    v73 = a67;
    if (!a67)
      goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v73);
  v74 = a72;
  if (!a72)
  {
LABEL_6:
    v75 = (std::__shared_weak_count *)STACK[0x228];
    if (!STACK[0x228])
      goto LABEL_7;
    goto LABEL_33;
  }
LABEL_32:
  std::__shared_weak_count::__release_weak(v74);
  v75 = (std::__shared_weak_count *)STACK[0x228];
  if (!STACK[0x228])
  {
LABEL_7:
    v76 = (std::__shared_weak_count *)STACK[0x260];
    if (!STACK[0x260])
      goto LABEL_8;
    goto LABEL_34;
  }
LABEL_33:
  std::__shared_weak_count::__release_weak(v75);
  v76 = (std::__shared_weak_count *)STACK[0x260];
  if (!STACK[0x260])
  {
LABEL_8:
    v77 = (std::__shared_weak_count *)STACK[0x298];
    if (!STACK[0x298])
      goto LABEL_9;
    goto LABEL_35;
  }
LABEL_34:
  std::__shared_weak_count::__release_weak(v76);
  v77 = (std::__shared_weak_count *)STACK[0x298];
  if (!STACK[0x298])
  {
LABEL_9:
    v78 = (std::__shared_weak_count *)STACK[0x2D0];
    if (!STACK[0x2D0])
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  std::__shared_weak_count::__release_weak(v77);
  v78 = (std::__shared_weak_count *)STACK[0x2D0];
  if (!STACK[0x2D0])
  {
LABEL_10:
    v79 = (std::__shared_weak_count *)STACK[0x308];
    if (!STACK[0x308])
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  std::__shared_weak_count::__release_weak(v78);
  v79 = (std::__shared_weak_count *)STACK[0x308];
  if (!STACK[0x308])
  {
LABEL_11:
    v80 = (std::__shared_weak_count *)STACK[0x340];
    if (!STACK[0x340])
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  std::__shared_weak_count::__release_weak(v79);
  v80 = (std::__shared_weak_count *)STACK[0x340];
  if (!STACK[0x340])
  {
LABEL_12:
    v81 = (std::__shared_weak_count *)STACK[0x378];
    if (!STACK[0x378])
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  std::__shared_weak_count::__release_weak(v80);
  v81 = (std::__shared_weak_count *)STACK[0x378];
  if (!STACK[0x378])
  {
LABEL_13:
    v82 = (std::__shared_weak_count *)STACK[0x3B0];
    if (!STACK[0x3B0])
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  std::__shared_weak_count::__release_weak(v81);
  v82 = (std::__shared_weak_count *)STACK[0x3B0];
  if (!STACK[0x3B0])
  {
LABEL_14:
    v83 = (std::__shared_weak_count *)STACK[0x3E8];
    if (!STACK[0x3E8])
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  std::__shared_weak_count::__release_weak(v82);
  v83 = (std::__shared_weak_count *)STACK[0x3E8];
  if (!STACK[0x3E8])
  {
LABEL_15:
    v84 = (std::__shared_weak_count *)STACK[0x420];
    if (!STACK[0x420])
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  std::__shared_weak_count::__release_weak(v83);
  v84 = (std::__shared_weak_count *)STACK[0x420];
  if (!STACK[0x420])
  {
LABEL_16:
    v85 = (std::__shared_weak_count *)STACK[0x458];
    if (!STACK[0x458])
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  std::__shared_weak_count::__release_weak(v84);
  v85 = (std::__shared_weak_count *)STACK[0x458];
  if (!STACK[0x458])
  {
LABEL_17:
    v86 = (std::__shared_weak_count *)STACK[0x490];
    if (!STACK[0x490])
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  std::__shared_weak_count::__release_weak(v85);
  v86 = (std::__shared_weak_count *)STACK[0x490];
  if (!STACK[0x490])
  {
LABEL_18:
    v87 = (std::__shared_weak_count *)STACK[0x4C8];
    if (!STACK[0x4C8])
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  std::__shared_weak_count::__release_weak(v86);
  v87 = (std::__shared_weak_count *)STACK[0x4C8];
  if (!STACK[0x4C8])
  {
LABEL_19:
    v88 = (std::__shared_weak_count *)STACK[0x500];
    if (!STACK[0x500])
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  std::__shared_weak_count::__release_weak(v87);
  v88 = (std::__shared_weak_count *)STACK[0x500];
  if (!STACK[0x500])
  {
LABEL_20:
    v89 = (std::__shared_weak_count *)STACK[0x538];
    if (!STACK[0x538])
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  std::__shared_weak_count::__release_weak(v88);
  v89 = (std::__shared_weak_count *)STACK[0x538];
  if (!STACK[0x538])
  {
LABEL_21:
    v90 = (std::__shared_weak_count *)STACK[0x570];
    if (!STACK[0x570])
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  std::__shared_weak_count::__release_weak(v89);
  v90 = (std::__shared_weak_count *)STACK[0x570];
  if (!STACK[0x570])
  {
LABEL_22:
    v91 = (std::__shared_weak_count *)STACK[0x5A8];
    if (!STACK[0x5A8])
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  std::__shared_weak_count::__release_weak(v90);
  v91 = (std::__shared_weak_count *)STACK[0x5A8];
  if (!STACK[0x5A8])
  {
LABEL_23:
    v92 = (std::__shared_weak_count *)STACK[0x5E0];
    if (!STACK[0x5E0])
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  std::__shared_weak_count::__release_weak(v91);
  v92 = (std::__shared_weak_count *)STACK[0x5E0];
  if (!STACK[0x5E0])
  {
LABEL_24:
    v93 = (std::__shared_weak_count *)STACK[0x618];
    if (!STACK[0x618])
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_50:
  std::__shared_weak_count::__release_weak(v92);
  v93 = (std::__shared_weak_count *)STACK[0x618];
  if (!STACK[0x618])
  {
LABEL_25:
    v94 = (std::__shared_weak_count *)STACK[0x650];
    if (!STACK[0x650])
      goto LABEL_26;
    goto LABEL_52;
  }
LABEL_51:
  std::__shared_weak_count::__release_weak(v93);
  v94 = (std::__shared_weak_count *)STACK[0x650];
  if (!STACK[0x650])
  {
LABEL_26:
    v95 = (std::__shared_weak_count *)STACK[0x688];
    if (!STACK[0x688])
      goto LABEL_27;
    goto LABEL_53;
  }
LABEL_52:
  std::__shared_weak_count::__release_weak(v94);
  v95 = (std::__shared_weak_count *)STACK[0x688];
  if (!STACK[0x688])
  {
LABEL_27:
    v96 = (std::__shared_weak_count *)STACK[0x6C0];
    if (!STACK[0x6C0])
      goto LABEL_29;
    goto LABEL_28;
  }
LABEL_53:
  std::__shared_weak_count::__release_weak(v95);
  v96 = (std::__shared_weak_count *)STACK[0x6C0];
  if (!STACK[0x6C0])
  {
LABEL_29:
    std::__shared_weak_count::__release_weak(a13);
    _Unwind_Resume(a1);
  }
LABEL_28:
  std::__shared_weak_count::__release_weak(v96);
  goto LABEL_29;
}

void sub_1BF36F76C(void *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF36F794(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1BF37061CLL);
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF36F7A8(void *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);

  if (a2)
  {
    __cxa_begin_catch(a1);
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
    {
      if ((v3 & 1) == 0)
      {
        v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
        if (v4)
          v4(v2 + 32, v2 + 32, 2);
      }
      *(_QWORD *)(v2 + 24) = 0;
    }
    if (*(_QWORD *)v2)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v2, *(_QWORD *)v2);
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF36F810(uint64_t a1, int a2)
{
  boost::signals2::detail::connection_body_base *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  if (a2)
  {
    __cxa_end_catch();
    v3 = (unsigned int *)*((_QWORD *)v2 + 5);
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
        v7 = v3 + 3;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
          (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
      }
    }
    boost::signals2::detail::connection_body_base::~connection_body_base(v2);
    JUMPOUT(0x1BF370478);
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF36F880(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF36F888);
  JUMPOUT(0x1BF370644);
}

void sub_1BF36F894(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF36F89CLL);
  JUMPOUT(0x1BF370644);
}

void sub_1BF36F8A8(uint64_t a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  if (a2)
  {
    v2 = STACK[0x838];
    if (STACK[0x838])
    {
      if ((uint64_t)(STACK[0x840] - 1) >= 0)
      {
        v3 = v2 + 16 * STACK[0x840];
        do
        {
          v4 = *(unsigned int **)(v3 - 8);
          if (v4)
          {
            v5 = v4 + 2;
            do
            {
              v6 = __ldaxr(v5);
              v7 = v6 - 1;
            }
            while (__stlxr(v7, v5));
            if (!v7)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
              v8 = v4 + 3;
              do
              {
                v9 = __ldaxr(v8);
                v10 = v9 - 1;
              }
              while (__stlxr(v10, v8));
              if (!v10)
                (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
            }
          }
          v3 -= 16;
        }
        while (v3 > v2);
      }
      if (STACK[0x830] >= 0xB)
        operator delete((void *)STACK[0x838]);
    }
    JUMPOUT(0x1BF370624);
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF36F94C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F958(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF36F968);
  JUMPOUT(0x1BF370644);
}

void sub_1BF36F978(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF36F980);
  JUMPOUT(0x1BF370644);
}

void sub_1BF36F98C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,std::__shared_weak_count *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__shared_weak_count *a64;
  std::__shared_weak_count *a71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;

  boost::signals2::connection::~connection((boost::signals2::connection *)&a49);
  if (a57)
  {
    std::__shared_weak_count::__release_weak(a57);
    v72 = a64;
    if (!a64)
    {
LABEL_3:
      v73 = a71;
      if (!a71)
        goto LABEL_4;
      goto LABEL_30;
    }
  }
  else
  {
    v72 = a64;
    if (!a64)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v72);
  v73 = a71;
  if (!a71)
  {
LABEL_4:
    v74 = (std::__shared_weak_count *)STACK[0x228];
    if (!STACK[0x228])
      goto LABEL_5;
    goto LABEL_31;
  }
LABEL_30:
  std::__shared_weak_count::__release_weak(v73);
  v74 = (std::__shared_weak_count *)STACK[0x228];
  if (!STACK[0x228])
  {
LABEL_5:
    v75 = (std::__shared_weak_count *)STACK[0x260];
    if (!STACK[0x260])
      goto LABEL_6;
    goto LABEL_32;
  }
LABEL_31:
  std::__shared_weak_count::__release_weak(v74);
  v75 = (std::__shared_weak_count *)STACK[0x260];
  if (!STACK[0x260])
  {
LABEL_6:
    v76 = (std::__shared_weak_count *)STACK[0x298];
    if (!STACK[0x298])
      goto LABEL_7;
    goto LABEL_33;
  }
LABEL_32:
  std::__shared_weak_count::__release_weak(v75);
  v76 = (std::__shared_weak_count *)STACK[0x298];
  if (!STACK[0x298])
  {
LABEL_7:
    v77 = (std::__shared_weak_count *)STACK[0x2D0];
    if (!STACK[0x2D0])
      goto LABEL_8;
    goto LABEL_34;
  }
LABEL_33:
  std::__shared_weak_count::__release_weak(v76);
  v77 = (std::__shared_weak_count *)STACK[0x2D0];
  if (!STACK[0x2D0])
  {
LABEL_8:
    v78 = (std::__shared_weak_count *)STACK[0x308];
    if (!STACK[0x308])
      goto LABEL_9;
    goto LABEL_35;
  }
LABEL_34:
  std::__shared_weak_count::__release_weak(v77);
  v78 = (std::__shared_weak_count *)STACK[0x308];
  if (!STACK[0x308])
  {
LABEL_9:
    v79 = (std::__shared_weak_count *)STACK[0x340];
    if (!STACK[0x340])
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  std::__shared_weak_count::__release_weak(v78);
  v79 = (std::__shared_weak_count *)STACK[0x340];
  if (!STACK[0x340])
  {
LABEL_10:
    v80 = (std::__shared_weak_count *)STACK[0x378];
    if (!STACK[0x378])
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  std::__shared_weak_count::__release_weak(v79);
  v80 = (std::__shared_weak_count *)STACK[0x378];
  if (!STACK[0x378])
  {
LABEL_11:
    v81 = (std::__shared_weak_count *)STACK[0x3B0];
    if (!STACK[0x3B0])
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  std::__shared_weak_count::__release_weak(v80);
  v81 = (std::__shared_weak_count *)STACK[0x3B0];
  if (!STACK[0x3B0])
  {
LABEL_12:
    v82 = (std::__shared_weak_count *)STACK[0x3E8];
    if (!STACK[0x3E8])
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  std::__shared_weak_count::__release_weak(v81);
  v82 = (std::__shared_weak_count *)STACK[0x3E8];
  if (!STACK[0x3E8])
  {
LABEL_13:
    v83 = (std::__shared_weak_count *)STACK[0x420];
    if (!STACK[0x420])
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  std::__shared_weak_count::__release_weak(v82);
  v83 = (std::__shared_weak_count *)STACK[0x420];
  if (!STACK[0x420])
  {
LABEL_14:
    v84 = (std::__shared_weak_count *)STACK[0x458];
    if (!STACK[0x458])
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  std::__shared_weak_count::__release_weak(v83);
  v84 = (std::__shared_weak_count *)STACK[0x458];
  if (!STACK[0x458])
  {
LABEL_15:
    v85 = (std::__shared_weak_count *)STACK[0x490];
    if (!STACK[0x490])
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  std::__shared_weak_count::__release_weak(v84);
  v85 = (std::__shared_weak_count *)STACK[0x490];
  if (!STACK[0x490])
  {
LABEL_16:
    v86 = (std::__shared_weak_count *)STACK[0x4C8];
    if (!STACK[0x4C8])
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  std::__shared_weak_count::__release_weak(v85);
  v86 = (std::__shared_weak_count *)STACK[0x4C8];
  if (!STACK[0x4C8])
  {
LABEL_17:
    v87 = (std::__shared_weak_count *)STACK[0x500];
    if (!STACK[0x500])
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  std::__shared_weak_count::__release_weak(v86);
  v87 = (std::__shared_weak_count *)STACK[0x500];
  if (!STACK[0x500])
  {
LABEL_18:
    v88 = (std::__shared_weak_count *)STACK[0x538];
    if (!STACK[0x538])
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  std::__shared_weak_count::__release_weak(v87);
  v88 = (std::__shared_weak_count *)STACK[0x538];
  if (!STACK[0x538])
  {
LABEL_19:
    v89 = (std::__shared_weak_count *)STACK[0x570];
    if (!STACK[0x570])
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  std::__shared_weak_count::__release_weak(v88);
  v89 = (std::__shared_weak_count *)STACK[0x570];
  if (!STACK[0x570])
  {
LABEL_20:
    v90 = (std::__shared_weak_count *)STACK[0x5A8];
    if (!STACK[0x5A8])
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  std::__shared_weak_count::__release_weak(v89);
  v90 = (std::__shared_weak_count *)STACK[0x5A8];
  if (!STACK[0x5A8])
  {
LABEL_21:
    v91 = (std::__shared_weak_count *)STACK[0x5E0];
    if (!STACK[0x5E0])
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  std::__shared_weak_count::__release_weak(v90);
  v91 = (std::__shared_weak_count *)STACK[0x5E0];
  if (!STACK[0x5E0])
  {
LABEL_22:
    v92 = (std::__shared_weak_count *)STACK[0x618];
    if (!STACK[0x618])
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  std::__shared_weak_count::__release_weak(v91);
  v92 = (std::__shared_weak_count *)STACK[0x618];
  if (!STACK[0x618])
  {
LABEL_23:
    v93 = (std::__shared_weak_count *)STACK[0x650];
    if (!STACK[0x650])
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  std::__shared_weak_count::__release_weak(v92);
  v93 = (std::__shared_weak_count *)STACK[0x650];
  if (!STACK[0x650])
  {
LABEL_24:
    v94 = (std::__shared_weak_count *)STACK[0x688];
    if (!STACK[0x688])
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_50:
  std::__shared_weak_count::__release_weak(v93);
  v94 = (std::__shared_weak_count *)STACK[0x688];
  if (!STACK[0x688])
  {
LABEL_25:
    v95 = (std::__shared_weak_count *)STACK[0x6C0];
    if (!STACK[0x6C0])
      goto LABEL_27;
    goto LABEL_26;
  }
LABEL_51:
  std::__shared_weak_count::__release_weak(v94);
  v95 = (std::__shared_weak_count *)STACK[0x6C0];
  if (!STACK[0x6C0])
  {
LABEL_27:
    std::__shared_weak_count::__release_weak(a13);
    _Unwind_Resume(a1);
  }
LABEL_26:
  std::__shared_weak_count::__release_weak(v95);
  goto LABEL_27;
}

void sub_1BF36F9A8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F9B4(void *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF36F9DC(void *a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&STACK[0x790]);
    boost::signals2::slot<void ()(void),boost::function<void ()(void)>>::~slot((uint64_t)&STACK[0x710]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>::~DispatchSlot((uint64_t)&STACK[0x700]);
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF36F9EC(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36F9F8(void *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);

  if (a2)
  {
    __cxa_begin_catch(a1);
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
    {
      if ((v3 & 1) == 0)
      {
        v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
        if (v4)
          v4(v2 + 32, v2 + 32, 2);
      }
      *(_QWORD *)(v2 + 24) = 0;
    }
    if (*(_QWORD *)v2)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v2, *(_QWORD *)v2);
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF36FA5C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36FA68(uint64_t a1, int a2)
{
  boost::signals2::detail::connection_body_base *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  void *v10;

  if (a2)
  {
    __cxa_end_catch();
    v3 = (unsigned int *)*((_QWORD *)v2 + 5);
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
        v7 = v3 + 3;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
          (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
      }
    }
    boost::signals2::detail::connection_body_base::~connection_body_base(v2);
    operator delete(v10);
    JUMPOUT(0x1BF37064CLL);
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF36FAD0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36FADC(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36FAE8(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF36FAF0);
  JUMPOUT(0x1BF370644);
}

void sub_1BF36FAFC(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF36FB04);
  JUMPOUT(0x1BF370644);
}

void sub_1BF36FB14(uint64_t a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  if (a2)
  {
    v2 = STACK[0x838];
    if (STACK[0x838])
    {
      if ((uint64_t)(STACK[0x840] - 1) >= 0)
      {
        v3 = v2 + 16 * STACK[0x840];
        do
        {
          v4 = *(unsigned int **)(v3 - 8);
          if (v4)
          {
            v5 = v4 + 2;
            do
            {
              v6 = __ldaxr(v5);
              v7 = v6 - 1;
            }
            while (__stlxr(v7, v5));
            if (!v7)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
              v8 = v4 + 3;
              do
              {
                v9 = __ldaxr(v8);
                v10 = v9 - 1;
              }
              while (__stlxr(v10, v8));
              if (!v10)
                (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
            }
          }
          v3 -= 16;
        }
        while (v3 > v2);
      }
      if (STACK[0x830] >= 0xB)
        operator delete((void *)STACK[0x838]);
    }
    JUMPOUT(0x1BF370654);
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF36FBB8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36FBC4(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF36FBD4);
  JUMPOUT(0x1BF370644);
}

void sub_1BF36FBE4(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF36FBECLL);
  JUMPOUT(0x1BF370644);
}

void sub_1BF36FBF8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36FC04(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36FC10(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36FC1C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36FC28(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36FC34(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36FC40(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36FC4C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36FC58(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36FC64(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36FC70(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36FC7C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36FC88(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36FC94(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36FCA0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36FCAC(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36FCB8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36FCC4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36FCD0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36FCDC(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36FCE8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36FCF4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36FD00(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36FD0C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36FD18(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36FD24(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36FD38(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF37027CLL);
  JUMPOUT(0x1BF370644);
}

void sub_1BF36FD50(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36FD5C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36FD68(uint64_t a1, int a2)
{
  if (a2)
  {
    boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::~shared_ptr((uint64_t)&STACK[0x770]);
    JUMPOUT(0x1BF37061CLL);
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF36FD7C(void *a1, int a2)
{
  if (a2)
  {
    boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::~shared_ptr((uint64_t)&STACK[0x770]);
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&STACK[0x790]);
    boost::signals2::slot<void ()(void),boost::function<void ()(void)>>::~slot((uint64_t)&STACK[0x710]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>::~DispatchSlot((uint64_t)&STACK[0x700]);
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF36FDA8(uint64_t a1, int a2)
{
  if (a2)
  {
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock(&STACK[0x790]);
    boost::signals2::slot<void ()(void),boost::function<void ()(void)>>::~slot(&STACK[0x710]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>::~DispatchSlot(&STACK[0x700]);
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF36FDB4(void *a1, int a2)
{
  unint64_t v3;
  void (*v4)(unint64_t *, unint64_t *, uint64_t);

  if (a2)
  {
    boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::~function2((uint64_t *)&STACK[0x790]);
    boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>::~function((uint64_t *)&STACK[0x770]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x760]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x750]);
    v3 = STACK[0x728];
    if (STACK[0x728])
    {
      if ((v3 & 1) == 0)
      {
        v4 = *(void (**)(unint64_t *, unint64_t *, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
        if (v4)
          v4(&STACK[0x730], &STACK[0x730], 2);
      }
      STACK[0x728] = 0;
    }
    if (STACK[0x710])
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)&STACK[0x710], STACK[0x710]);
      operator delete((void *)STACK[0x710]);
      ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x700]);
      __clang_call_terminate(a1);
    }
    JUMPOUT(0x1BF3705DCLL);
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF36FE34(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36FE3C(void *a1, int a2)
{
  unint64_t v3;
  void (*v4)(unint64_t *, unint64_t *, uint64_t);

  if (a2)
  {
    boost::function1<void,coex::SubId>::~function1((uint64_t *)&STACK[0x790]);
    boost::function<void ()(coex::SubId)>::~function((uint64_t *)&STACK[0x770]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x760]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x750]);
    v3 = STACK[0x728];
    if (STACK[0x728])
    {
      if ((v3 & 1) == 0)
      {
        v4 = *(void (**)(unint64_t *, unint64_t *, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
        if (v4)
          v4(&STACK[0x730], &STACK[0x730], 2);
      }
      STACK[0x728] = 0;
    }
    if (STACK[0x710])
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)&STACK[0x710], STACK[0x710]);
      operator delete((void *)STACK[0x710]);
      ctu::DispatchSlot<dispatch::block<void({block_pointer})(coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x700]);
      __clang_call_terminate(a1);
    }
    JUMPOUT(0x1BF370604);
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF36FEBC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36FEC8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF36FED4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF36FEDC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF3700F0(void *a1, int a2)
{
  unint64_t v3;
  void (*v4)(unint64_t *, unint64_t *, uint64_t);

  if (a2)
  {
    boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::~function2((uint64_t *)&STACK[0x790]);
    boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>::~function((uint64_t *)&STACK[0x770]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x760]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x750]);
    v3 = STACK[0x728];
    if (STACK[0x728])
    {
      if ((v3 & 1) == 0)
      {
        v4 = *(void (**)(unint64_t *, unint64_t *, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
        if (v4)
          v4(&STACK[0x730], &STACK[0x730], 2);
      }
      STACK[0x728] = 0;
    }
    if (STACK[0x710])
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)&STACK[0x710], STACK[0x710]);
      operator delete((void *)STACK[0x710]);
      ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x700]);
      __clang_call_terminate(a1);
    }
    JUMPOUT(0x1BF37062CLL);
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF370170(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF37017C(void *a1, int a2)
{
  unint64_t v3;
  void (*v4)(unint64_t *, unint64_t *, uint64_t);

  if (a2)
  {
    boost::function0<void>::~function0((uint64_t *)&STACK[0x790]);
    boost::function<void ()(void)>::~function((uint64_t *)&STACK[0x770]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>::~DispatchSlot((uint64_t)&STACK[0x760]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>::~DispatchSlot((uint64_t)&STACK[0x750]);
    v3 = STACK[0x728];
    if (STACK[0x728])
    {
      if ((v3 & 1) == 0)
      {
        v4 = *(void (**)(unint64_t *, unint64_t *, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
        if (v4)
          v4(&STACK[0x730], &STACK[0x730], 2);
      }
      STACK[0x728] = 0;
    }
    if (STACK[0x710])
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)&STACK[0x710], STACK[0x710]);
      operator delete((void *)STACK[0x710]);
      ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>::~DispatchSlot((uint64_t)&STACK[0x700]);
      __clang_call_terminate(a1);
    }
    JUMPOUT(0x1BF37065CLL);
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF3701FC(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF37020C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370644);
  JUMPOUT(0x1BF37027CLL);
}

void sub_1BF370218(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF37021CLL);
  _Unwind_Resume(a1);
}

void sub_1BF370220(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF370224);
  __clang_call_terminate(a1);
}

void sub_1BF370230(uint64_t a1, int a2)
{
  uint64_t *v2;
  _QWORD *v3;

  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(v3);
    std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>::~list(v2);
    JUMPOUT(0x1BF3702ECLL);
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF37024C(uint64_t a1, int a2)
{
  uint64_t *v2;
  _QWORD *v3;

  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(v3);
    std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>::~list(v2);
    JUMPOUT(0x1BF3703ACLL);
  }
  JUMPOUT(0x1BF370644);
}

void sub_1BF370268(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t coex::Module::State::State(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  NSObject *initially_inactive;
  NSObject *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  const void *v17;
  size_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  CommandDriverFactory *v25;
  uint64_t v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  const __CFAllocator *v46;
  CFMutableDictionaryRef Mutable;
  const void *v48;
  CFMutableDictionaryRef v49;
  const void *v50;
  __int128 v52;
  char v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  __int128 v56;

  *(_QWORD *)a1 = off_1E78FCF18;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v54, "com.apple.telephony.abm", "coex.mod");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v9 = dispatch_queue_create_with_target_V2("coex.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v9, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v9);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v9;
  if (v9)
  {
    dispatch_retain(v9);
    *(_QWORD *)(a1 + 96) = 0;
    dispatch_release(v9);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_QWORD *)a1 = off_1E78FDB20;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v52);
  *(_QWORD *)(a1 + 8) = &unk_1E78FB900;
  *(_QWORD *)(a1 + 56) = *a2;
  v10 = a2[1];
  *(_QWORD *)(a1 + 64) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v56);
  *(_QWORD *)a1 = off_1E78FDC00;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v54);
  *(_QWORD *)a1 = off_1E78FCF18;
  *(_QWORD *)(a1 + 104) = *a3;
  v13 = a3[1];
  *(_QWORD *)(a1 + 112) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v53 = 0;
  LOBYTE(v52) = 0;
  coex::XpcClient::create((uint64_t)&v52, (_QWORD *)(a1 + 120));
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 172) = 8;
  v16 = (void *)(a1 + 176);
  v17 = (const void *)*MEMORY[0x1E0CFB988];
  v18 = strlen((const char *)*MEMORY[0x1E0CFB988]);
  if (v18 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v20 = v18 | 7;
    v21 = v20 + 1;
    v16 = operator new(v20 + 1);
    *(_QWORD *)(a1 + 184) = v19;
    *(_QWORD *)(a1 + 192) = v21 | 0x8000000000000000;
    *(_QWORD *)(a1 + 176) = v16;
    goto LABEL_17;
  }
  *(_BYTE *)(a1 + 199) = v18;
  if (v18)
LABEL_17:
    v18 = (size_t)memmove(v16, v17, v19);
  *((_BYTE *)v16 + v19) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 200) = 2;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 224;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 232) = a1 + 224;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = *a4;
  v22 = a4[1];
  *(_QWORD *)(a1 + 272) = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 16);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  if (capabilities::abs::supportsDesense((capabilities::abs *)v18))
  {
    v25 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    v26 = off_1ED70FD08;
    if (!off_1ED70FD08)
    {
      CommandDriverFactory::create_default_global(v25);
      v27 = v52;
      v52 = 0uLL;
      v28 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
      off_1ED70FD08 = v27;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldaxr(p_shared_owners);
        while (__stlxr(v30 - 1, p_shared_owners));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v31 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
      if (*((_QWORD *)&v52 + 1))
      {
        v32 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v26 = off_1ED70FD08;
    }
    v54 = v26;
    v55 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    if (*(&off_1ED70FD08 + 1))
    {
      v34 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v26 + 144))(&v56, v26);
    v36 = v56;
    v56 = 0uLL;
    v37 = *(std::__shared_weak_count **)(a1 + 216);
    *(_OWORD *)(a1 + 208) = v36;
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v40 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
    if (*((_QWORD *)&v56 + 1))
    {
      v41 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v43 = v55;
    if (v55)
    {
      v44 = (unint64_t *)&v55->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
  }
  ctu::LoggerCommonBase::setLogLevel();
  coex::CoexCache::initProperty((coex::CoexCache *)(a1 + 136));
  v46 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v48 = *(const void **)(a1 + 144);
    *(_QWORD *)(a1 + 144) = Mutable;
    if (v48)
      CFRelease(v48);
  }
  v49 = CFDictionaryCreateMutable(v46, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v49)
  {
    v50 = *(const void **)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v49;
    if (v50)
      CFRelease(v50);
  }
  return a1;
}

void sub_1BF370B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  coex::CoexCache *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  std::__shared_weak_count *v18;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v18 = *(std::__shared_weak_count **)(v10 + 272);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v16);
  std::list<boost::signals2::connection>::~list(v15);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v14);
  if (*(char *)(v10 + 199) < 0)
    operator delete(*a10);
  coex::CoexCache::~CoexCache(v13);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v12);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v11);
  ctu::SharedLoggable<coex::Module::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable((_QWORD *)v10);
  _Unwind_Resume(a1);
}

const char *coex::Module::State::getName(coex::Module::State *this)
{
  return "coex.mod";
}

void coex::CoexCache::initProperty(coex::CoexCache *this)
{
  const __CFAllocator *v2;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v4;
  const void *v5;
  CFMutableDictionaryRef v6;
  CFMutableDictionaryRef v7;
  const void *v8;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v4 = Mutable;
    v5 = *(const void **)this;
    *(_QWORD *)this = v4;
    if (v5)
      CFRelease(v5);
  }
  v6 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v6)
  {
    v7 = v6;
    v8 = (const void *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v7;
    if (v8)
      CFRelease(v8);
  }
}

uint64_t *std::list<boost::signals2::connection>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 3;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

_QWORD *ctu::SharedLoggable<coex::Module::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E78FDB20;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E78FDB20;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void coex::Module::State::~State(coex::Module::State *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  coex::Module::State *v8;
  uint64_t v9;
  coex::Module::State *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  NSObject *v24;
  NSObject *v25;
  std::__shared_weak_count *v26;
  uint8_t v27[16];

  *(_QWORD *)this = off_1E78FCF18;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v27 = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v27, 2u);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 34);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (!v4)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!*((_QWORD *)this + 30))
      goto LABEL_19;
  }
  else
  {
LABEL_9:
    if (!*((_QWORD *)this + 30))
      goto LABEL_19;
  }
  v7 = *((_QWORD *)this + 28);
  v8 = (coex::Module::State *)*((_QWORD *)this + 29);
  v9 = *(_QWORD *)v8;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
  **(_QWORD **)(v7 + 8) = v9;
  *((_QWORD *)this + 30) = 0;
  if (v8 != (coex::Module::State *)((char *)this + 224))
  {
    do
    {
      v10 = (coex::Module::State *)*((_QWORD *)v8 + 1);
      v11 = (unsigned int *)*((_QWORD *)v8 + 3);
      if (v11)
      {
        v12 = v11 + 3;
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
          (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 24))(v11);
      }
      operator delete(v8);
      v8 = v10;
    }
    while (v10 != (coex::Module::State *)((char *)this + 224));
  }
LABEL_19:
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      if ((*((char *)this + 199) & 0x80000000) == 0)
        goto LABEL_25;
      goto LABEL_24;
    }
  }
  if (*((char *)this + 199) < 0)
LABEL_24:
    operator delete(*((void **)this + 22));
LABEL_25:
  coex::CoexCache::~CoexCache((coex::Module::State *)((char *)this + 136));
  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  *(_QWORD *)this = off_1E78FDB20;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v24 = *((_QWORD *)this + 12);
  if (v24)
    dispatch_release(v24);
  v25 = *((_QWORD *)this + 11);
  if (v25)
    dispatch_release(v25);
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
}

{
  void *v1;

  coex::Module::State::~State(this);
  operator delete(v1);
}

void ___ZN4coex6Module5State4initEv_block_invoke(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  _DWORD *v14;
  NSObject *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;

  v5 = a1[4];
  v26 = 0;
  v6 = (std::__shared_weak_count *)a1[6];
  if (v6 && (v26 = std::__shared_weak_count::lock(v6)) != 0)
  {
    v7 = (_QWORD *)a1[5];
    v25 = 0;
    v8 = *(std::__shared_weak_count **)(v5 + 272);
    if (!v8)
      goto LABEL_18;
  }
  else
  {
    v7 = 0;
    v25 = 0;
    v8 = *(std::__shared_weak_count **)(v5 + 272);
    if (!v8)
      goto LABEL_18;
  }
  v25 = std::__shared_weak_count::lock(v8);
  if (!v25)
    goto LABEL_22;
  v9 = *(_QWORD *)(v5 + 264);
  if (v7 && v9 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9) & 1) == 0)
  {
    v10 = (std::__shared_weak_count *)v7[10];
    if (!v10 || (v11 = v7[9], (v12 = std::__shared_weak_count::lock(v10)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v13 = v12;
    v14 = operator new(0x10uLL);
    *(_QWORD *)v14 = v5;
    v14[2] = a3;
    v15 = v7[11];
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    v18 = operator new(0x18uLL);
    *v18 = v14;
    v18[1] = v11;
    v18[2] = v13;
    dispatch_async_f(v15, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_18:
  if (v25)
  {
    v20 = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      v22 = v26;
      if (!v26)
        return;
      goto LABEL_23;
    }
  }
LABEL_22:
  v22 = v26;
  if (!v26)
    return;
LABEL_23:
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
}

void sub_1BF3711FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c43_ZTSNSt3__18weak_ptrIN4coex6Module5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c43_ZTSNSt3__18weak_ptrIN4coex6Module5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN4coex6Module5State4initEv_block_invoke_16(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  _DWORD *v14;
  NSObject *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;

  v5 = a1[4];
  v26 = 0;
  v6 = (std::__shared_weak_count *)a1[6];
  if (v6 && (v26 = std::__shared_weak_count::lock(v6)) != 0)
  {
    v7 = (_QWORD *)a1[5];
    v25 = 0;
    v8 = *(std::__shared_weak_count **)(v5 + 272);
    if (!v8)
      goto LABEL_18;
  }
  else
  {
    v7 = 0;
    v25 = 0;
    v8 = *(std::__shared_weak_count **)(v5 + 272);
    if (!v8)
      goto LABEL_18;
  }
  v25 = std::__shared_weak_count::lock(v8);
  if (!v25)
    goto LABEL_22;
  v9 = *(_QWORD *)(v5 + 264);
  if (v7 && v9 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9) & 1) == 0)
  {
    v10 = (std::__shared_weak_count *)v7[10];
    if (!v10 || (v11 = v7[9], (v12 = std::__shared_weak_count::lock(v10)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v13 = v12;
    v14 = operator new(0x10uLL);
    *(_QWORD *)v14 = v5;
    v14[2] = a3;
    v15 = v7[11];
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    v18 = operator new(0x18uLL);
    *v18 = v14;
    v18[1] = v11;
    v18[2] = v13;
    dispatch_async_f(v15, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_18:
  if (v25)
  {
    v20 = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      v22 = v26;
      if (!v26)
        return;
      goto LABEL_23;
    }
  }
LABEL_22:
  v22 = v26;
  if (!v26)
    return;
LABEL_23:
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
}

void sub_1BF371428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State4initEv_block_invoke_18(_QWORD *a1, xpc_object_t *a2, int a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  xpc_object_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  xpc_object_t v19;
  NSObject *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;

  v6 = a1[4];
  v31 = 0;
  v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (v31 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = (_QWORD *)a1[5];
    v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9)
      goto LABEL_25;
  }
  else
  {
    v8 = 0;
    v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9)
      goto LABEL_25;
  }
  v10 = std::__shared_weak_count::lock(v9);
  v30 = v10;
  if (!v10)
    goto LABEL_25;
  v11 = v10;
  v12 = *(_QWORD *)(v6 + 264);
  if (!v8 || !v12 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 80))(v12) & 1) != 0)
    goto LABEL_22;
  v13 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v14 = (std::__shared_weak_count *)v8[10];
    if (!v14)
LABEL_33:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    v13 = xpc_null_create();
    v14 = (std::__shared_weak_count *)v8[10];
    if (!v14)
      goto LABEL_33;
  }
  v15 = v8[9];
  v16 = std::__shared_weak_count::lock(v14);
  if (!v16)
    goto LABEL_33;
  v17 = v16;
  v18 = operator new(0x18uLL);
  *v18 = v6;
  v18[1] = v13;
  v19 = xpc_null_create();
  *((_DWORD *)v18 + 4) = a3;
  v20 = v8[11];
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v22 = __ldxr(p_shared_owners);
  while (__stxr(v22 + 1, p_shared_owners));
  v23 = operator new(0x18uLL);
  *v23 = v18;
  v23[1] = v15;
  v23[2] = v17;
  dispatch_async_f(v20, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
  v11 = v30;
  if (v30)
  {
LABEL_22:
    v25 = (unint64_t *)&v11->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v27 = v31;
      if (!v31)
        return;
      goto LABEL_26;
    }
  }
LABEL_25:
  v27 = v31;
  if (!v31)
    return;
LABEL_26:
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
}

void sub_1BF37166C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State4initEv_block_invoke_20(_QWORD *a1, xpc_object_t *a2, int a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  xpc_object_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  xpc_object_t v19;
  NSObject *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;

  v6 = a1[4];
  v31 = 0;
  v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (v31 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = (_QWORD *)a1[5];
    v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9)
      goto LABEL_25;
  }
  else
  {
    v8 = 0;
    v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9)
      goto LABEL_25;
  }
  v10 = std::__shared_weak_count::lock(v9);
  v30 = v10;
  if (!v10)
    goto LABEL_25;
  v11 = v10;
  v12 = *(_QWORD *)(v6 + 264);
  if (!v8 || !v12 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 80))(v12) & 1) != 0)
    goto LABEL_22;
  v13 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v14 = (std::__shared_weak_count *)v8[10];
    if (!v14)
LABEL_33:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    v13 = xpc_null_create();
    v14 = (std::__shared_weak_count *)v8[10];
    if (!v14)
      goto LABEL_33;
  }
  v15 = v8[9];
  v16 = std::__shared_weak_count::lock(v14);
  if (!v16)
    goto LABEL_33;
  v17 = v16;
  v18 = operator new(0x18uLL);
  *v18 = v6;
  v18[1] = v13;
  v19 = xpc_null_create();
  *((_DWORD *)v18 + 4) = a3;
  v20 = v8[11];
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v22 = __ldxr(p_shared_owners);
  while (__stxr(v22 + 1, p_shared_owners));
  v23 = operator new(0x18uLL);
  *v23 = v18;
  v23[1] = v15;
  v23[2] = v17;
  dispatch_async_f(v20, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
  v11 = v30;
  if (v30)
  {
LABEL_22:
    v25 = (unint64_t *)&v11->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v27 = v31;
      if (!v31)
        return;
      goto LABEL_26;
    }
  }
LABEL_25:
  v27 = v31;
  if (!v31)
    return;
LABEL_26:
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
}

void sub_1BF3718B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State4initEv_block_invoke_22(_QWORD *a1, xpc_object_t *a2, int a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  xpc_object_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  xpc_object_t v19;
  NSObject *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;

  v6 = a1[4];
  v31 = 0;
  v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (v31 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = (_QWORD *)a1[5];
    v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9)
      goto LABEL_25;
  }
  else
  {
    v8 = 0;
    v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9)
      goto LABEL_25;
  }
  v10 = std::__shared_weak_count::lock(v9);
  v30 = v10;
  if (!v10)
    goto LABEL_25;
  v11 = v10;
  v12 = *(_QWORD *)(v6 + 264);
  if (!v8 || !v12 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 80))(v12) & 1) != 0)
    goto LABEL_22;
  v13 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v14 = (std::__shared_weak_count *)v8[10];
    if (!v14)
LABEL_33:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    v13 = xpc_null_create();
    v14 = (std::__shared_weak_count *)v8[10];
    if (!v14)
      goto LABEL_33;
  }
  v15 = v8[9];
  v16 = std::__shared_weak_count::lock(v14);
  if (!v16)
    goto LABEL_33;
  v17 = v16;
  v18 = operator new(0x18uLL);
  *v18 = v6;
  v18[1] = v13;
  v19 = xpc_null_create();
  *((_DWORD *)v18 + 4) = a3;
  v20 = v8[11];
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v22 = __ldxr(p_shared_owners);
  while (__stxr(v22 + 1, p_shared_owners));
  v23 = operator new(0x18uLL);
  *v23 = v18;
  v23[1] = v15;
  v23[2] = v17;
  dispatch_async_f(v20, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
  v11 = v30;
  if (v30)
  {
LABEL_22:
    v25 = (unint64_t *)&v11->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v27 = v31;
      if (!v31)
        return;
      goto LABEL_26;
    }
  }
LABEL_25:
  v27 = v31;
  if (!v31)
    return;
LABEL_26:
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
}

void sub_1BF371AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State4initEv_block_invoke_24(_QWORD *a1, xpc_object_t *a2, int a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  xpc_object_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  xpc_object_t v19;
  NSObject *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;

  v6 = a1[4];
  v31 = 0;
  v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (v31 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = (_QWORD *)a1[5];
    v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9)
      goto LABEL_25;
  }
  else
  {
    v8 = 0;
    v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9)
      goto LABEL_25;
  }
  v10 = std::__shared_weak_count::lock(v9);
  v30 = v10;
  if (!v10)
    goto LABEL_25;
  v11 = v10;
  v12 = *(_QWORD *)(v6 + 264);
  if (!v8 || !v12 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 80))(v12) & 1) != 0)
    goto LABEL_22;
  v13 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v14 = (std::__shared_weak_count *)v8[10];
    if (!v14)
LABEL_33:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    v13 = xpc_null_create();
    v14 = (std::__shared_weak_count *)v8[10];
    if (!v14)
      goto LABEL_33;
  }
  v15 = v8[9];
  v16 = std::__shared_weak_count::lock(v14);
  if (!v16)
    goto LABEL_33;
  v17 = v16;
  v18 = operator new(0x18uLL);
  *v18 = v6;
  v18[1] = v13;
  v19 = xpc_null_create();
  *((_DWORD *)v18 + 4) = a3;
  v20 = v8[11];
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v22 = __ldxr(p_shared_owners);
  while (__stxr(v22 + 1, p_shared_owners));
  v23 = operator new(0x18uLL);
  *v23 = v18;
  v23[1] = v15;
  v23[2] = v17;
  dispatch_async_f(v20, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb4_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
  v11 = v30;
  if (v30)
  {
LABEL_22:
    v25 = (unint64_t *)&v11->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v27 = v31;
      if (!v31)
        return;
      goto LABEL_26;
    }
  }
LABEL_25:
  v27 = v31;
  if (!v31)
    return;
LABEL_26:
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
}

void sub_1BF371D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State4initEv_block_invoke_26(_QWORD *a1, xpc_object_t *a2, int a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  xpc_object_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  xpc_object_t v19;
  NSObject *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;

  v6 = a1[4];
  v31 = 0;
  v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (v31 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = (_QWORD *)a1[5];
    v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9)
      goto LABEL_25;
  }
  else
  {
    v8 = 0;
    v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9)
      goto LABEL_25;
  }
  v10 = std::__shared_weak_count::lock(v9);
  v30 = v10;
  if (!v10)
    goto LABEL_25;
  v11 = v10;
  v12 = *(_QWORD *)(v6 + 264);
  if (!v8 || !v12 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 80))(v12) & 1) != 0)
    goto LABEL_22;
  v13 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v14 = (std::__shared_weak_count *)v8[10];
    if (!v14)
LABEL_33:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    v13 = xpc_null_create();
    v14 = (std::__shared_weak_count *)v8[10];
    if (!v14)
      goto LABEL_33;
  }
  v15 = v8[9];
  v16 = std::__shared_weak_count::lock(v14);
  if (!v16)
    goto LABEL_33;
  v17 = v16;
  v18 = operator new(0x18uLL);
  *v18 = v6;
  v18[1] = v13;
  v19 = xpc_null_create();
  *((_DWORD *)v18 + 4) = a3;
  v20 = v8[11];
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v22 = __ldxr(p_shared_owners);
  while (__stxr(v22 + 1, p_shared_owners));
  v23 = operator new(0x18uLL);
  *v23 = v18;
  v23[1] = v15;
  v23[2] = v17;
  dispatch_async_f(v20, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb5_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
  v11 = v30;
  if (v30)
  {
LABEL_22:
    v25 = (unint64_t *)&v11->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v27 = v31;
      if (!v31)
        return;
      goto LABEL_26;
    }
  }
LABEL_25:
  v27 = v31;
  if (!v31)
    return;
LABEL_26:
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
}

void sub_1BF371F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State4initEv_block_invoke_28(_QWORD *a1, xpc_object_t *a2, int a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  xpc_object_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  xpc_object_t v19;
  NSObject *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;

  v6 = a1[4];
  v31 = 0;
  v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (v31 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = (_QWORD *)a1[5];
    v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9)
      goto LABEL_25;
  }
  else
  {
    v8 = 0;
    v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9)
      goto LABEL_25;
  }
  v10 = std::__shared_weak_count::lock(v9);
  v30 = v10;
  if (!v10)
    goto LABEL_25;
  v11 = v10;
  v12 = *(_QWORD *)(v6 + 264);
  if (!v8 || !v12 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 80))(v12) & 1) != 0)
    goto LABEL_22;
  v13 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v14 = (std::__shared_weak_count *)v8[10];
    if (!v14)
LABEL_33:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    v13 = xpc_null_create();
    v14 = (std::__shared_weak_count *)v8[10];
    if (!v14)
      goto LABEL_33;
  }
  v15 = v8[9];
  v16 = std::__shared_weak_count::lock(v14);
  if (!v16)
    goto LABEL_33;
  v17 = v16;
  v18 = operator new(0x18uLL);
  *v18 = v6;
  v18[1] = v13;
  v19 = xpc_null_create();
  *((_DWORD *)v18 + 4) = a3;
  v20 = v8[11];
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v22 = __ldxr(p_shared_owners);
  while (__stxr(v22 + 1, p_shared_owners));
  v23 = operator new(0x18uLL);
  *v23 = v18;
  v23[1] = v15;
  v23[2] = v17;
  dispatch_async_f(v20, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb6_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
  v11 = v30;
  if (v30)
  {
LABEL_22:
    v25 = (unint64_t *)&v11->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v27 = v31;
      if (!v31)
        return;
      goto LABEL_26;
    }
  }
LABEL_25:
  v27 = v31;
  if (!v31)
    return;
LABEL_26:
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
}

void sub_1BF3721C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State4initEv_block_invoke_30(_QWORD *a1, xpc_object_t *a2, int a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  xpc_object_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  xpc_object_t v19;
  NSObject *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;

  v6 = a1[4];
  v31 = 0;
  v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (v31 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = (_QWORD *)a1[5];
    v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9)
      goto LABEL_25;
  }
  else
  {
    v8 = 0;
    v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9)
      goto LABEL_25;
  }
  v10 = std::__shared_weak_count::lock(v9);
  v30 = v10;
  if (!v10)
    goto LABEL_25;
  v11 = v10;
  v12 = *(_QWORD *)(v6 + 264);
  if (!v8 || !v12 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 80))(v12) & 1) != 0)
    goto LABEL_22;
  v13 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v14 = (std::__shared_weak_count *)v8[10];
    if (!v14)
LABEL_33:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    v13 = xpc_null_create();
    v14 = (std::__shared_weak_count *)v8[10];
    if (!v14)
      goto LABEL_33;
  }
  v15 = v8[9];
  v16 = std::__shared_weak_count::lock(v14);
  if (!v16)
    goto LABEL_33;
  v17 = v16;
  v18 = operator new(0x18uLL);
  *v18 = v6;
  v18[1] = v13;
  v19 = xpc_null_create();
  *((_DWORD *)v18 + 4) = a3;
  v20 = v8[11];
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v22 = __ldxr(p_shared_owners);
  while (__stxr(v22 + 1, p_shared_owners));
  v23 = operator new(0x18uLL);
  *v23 = v18;
  v23[1] = v15;
  v23[2] = v17;
  dispatch_async_f(v20, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb7_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
  v11 = v30;
  if (v30)
  {
LABEL_22:
    v25 = (unint64_t *)&v11->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v27 = v31;
      if (!v31)
        return;
      goto LABEL_26;
    }
  }
LABEL_25:
  v27 = v31;
  if (!v31)
    return;
LABEL_26:
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
}

void sub_1BF372404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State4initEv_block_invoke_32(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  _DWORD *v14;
  NSObject *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;

  v5 = a1[4];
  v26 = 0;
  v6 = (std::__shared_weak_count *)a1[6];
  if (v6 && (v26 = std::__shared_weak_count::lock(v6)) != 0)
  {
    v7 = (_QWORD *)a1[5];
    v25 = 0;
    v8 = *(std::__shared_weak_count **)(v5 + 272);
    if (!v8)
      goto LABEL_18;
  }
  else
  {
    v7 = 0;
    v25 = 0;
    v8 = *(std::__shared_weak_count **)(v5 + 272);
    if (!v8)
      goto LABEL_18;
  }
  v25 = std::__shared_weak_count::lock(v8);
  if (!v25)
    goto LABEL_22;
  v9 = *(_QWORD *)(v5 + 264);
  if (v7 && v9 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9) & 1) == 0)
  {
    v10 = (std::__shared_weak_count *)v7[10];
    if (!v10 || (v11 = v7[9], (v12 = std::__shared_weak_count::lock(v10)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v13 = v12;
    v14 = operator new(0x10uLL);
    *(_QWORD *)v14 = v5;
    v14[2] = a3;
    v15 = v7[11];
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    v18 = operator new(0x18uLL);
    *v18 = v14;
    v18[1] = v11;
    v18[2] = v13;
    dispatch_async_f(v15, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb8_E3__9EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_18:
  if (v25)
  {
    v20 = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      v22 = v26;
      if (!v26)
        return;
      goto LABEL_23;
    }
  }
LABEL_22:
  v22 = v26;
  if (!v26)
    return;
LABEL_23:
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
}

void sub_1BF3725FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State4initEv_block_invoke_34(_QWORD *a1, xpc_object_t *a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  xpc_object_t v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = (_QWORD *)a1[5];
      if (v10)
      {
        v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
LABEL_21:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v11 = xpc_null_create();
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
            goto LABEL_21;
        }
        v13 = v10[9];
        v14 = std::__shared_weak_count::lock(v12);
        if (!v14)
          goto LABEL_21;
        v15 = v14;
        v16 = operator new(0x18uLL);
        *v16 = v7;
        v16[1] = v11;
        v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        v18 = v10[11];
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = operator new(0x18uLL);
        *v21 = v16;
        v21[1] = v13;
        v21[2] = v15;
        dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb9_E4__10EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_36(_QWORD *a1, xpc_object_t *a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  xpc_object_t v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = (_QWORD *)a1[5];
      if (v10)
      {
        v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
LABEL_21:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v11 = xpc_null_create();
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
            goto LABEL_21;
        }
        v13 = v10[9];
        v14 = std::__shared_weak_count::lock(v12);
        if (!v14)
          goto LABEL_21;
        v15 = v14;
        v16 = operator new(0x18uLL);
        *v16 = v7;
        v16[1] = v11;
        v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        v18 = v10[11];
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = operator new(0x18uLL);
        *v21 = v16;
        v21[1] = v13;
        v21[2] = v15;
        dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb10_E4__11EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_38(_QWORD *a1, xpc_object_t *a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  xpc_object_t v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = (_QWORD *)a1[5];
      if (v10)
      {
        v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
LABEL_21:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v11 = xpc_null_create();
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
            goto LABEL_21;
        }
        v13 = v10[9];
        v14 = std::__shared_weak_count::lock(v12);
        if (!v14)
          goto LABEL_21;
        v15 = v14;
        v16 = operator new(0x18uLL);
        *v16 = v7;
        v16[1] = v11;
        v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        v18 = v10[11];
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = operator new(0x18uLL);
        *v21 = v16;
        v21[1] = v13;
        v21[2] = v15;
        dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb11_E4__12EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_40(_QWORD *a1, xpc_object_t *a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  xpc_object_t v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = (_QWORD *)a1[5];
      if (v10)
      {
        v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
LABEL_21:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v11 = xpc_null_create();
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
            goto LABEL_21;
        }
        v13 = v10[9];
        v14 = std::__shared_weak_count::lock(v12);
        if (!v14)
          goto LABEL_21;
        v15 = v14;
        v16 = operator new(0x18uLL);
        *v16 = v7;
        v16[1] = v11;
        v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        v18 = v10[11];
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = operator new(0x18uLL);
        *v21 = v16;
        v21[1] = v13;
        v21[2] = v15;
        dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb12_E4__13EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_42(_QWORD *a1, xpc_object_t *a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  xpc_object_t v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = (_QWORD *)a1[5];
      if (v10)
      {
        v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
LABEL_21:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v11 = xpc_null_create();
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
            goto LABEL_21;
        }
        v13 = v10[9];
        v14 = std::__shared_weak_count::lock(v12);
        if (!v14)
          goto LABEL_21;
        v15 = v14;
        v16 = operator new(0x18uLL);
        *v16 = v7;
        v16[1] = v11;
        v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        v18 = v10[11];
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = operator new(0x18uLL);
        *v21 = v16;
        v21[1] = v13;
        v21[2] = v15;
        dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb13_E4__14EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_44(_QWORD *a1, xpc_object_t *a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  xpc_object_t v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = (_QWORD *)a1[5];
      if (v10)
      {
        v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
LABEL_21:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v11 = xpc_null_create();
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
            goto LABEL_21;
        }
        v13 = v10[9];
        v14 = std::__shared_weak_count::lock(v12);
        if (!v14)
          goto LABEL_21;
        v15 = v14;
        v16 = operator new(0x18uLL);
        *v16 = v7;
        v16[1] = v11;
        v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        v18 = v10[11];
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = operator new(0x18uLL);
        *v21 = v16;
        v21[1] = v13;
        v21[2] = v15;
        dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb14_E4__15EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_46(_QWORD *a1, xpc_object_t *a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  xpc_object_t v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = (_QWORD *)a1[5];
      if (v10)
      {
        v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
LABEL_21:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v11 = xpc_null_create();
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
            goto LABEL_21;
        }
        v13 = v10[9];
        v14 = std::__shared_weak_count::lock(v12);
        if (!v14)
          goto LABEL_21;
        v15 = v14;
        v16 = operator new(0x18uLL);
        *v16 = v7;
        v16[1] = v11;
        v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        v18 = v10[11];
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = operator new(0x18uLL);
        *v21 = v16;
        v21[1] = v13;
        v21[2] = v15;
        dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb15_E4__16EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_48(_QWORD *a1, xpc_object_t *a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  xpc_object_t v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = (_QWORD *)a1[5];
      if (v10)
      {
        v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
LABEL_21:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v11 = xpc_null_create();
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
            goto LABEL_21;
        }
        v13 = v10[9];
        v14 = std::__shared_weak_count::lock(v12);
        if (!v14)
          goto LABEL_21;
        v15 = v14;
        v16 = operator new(0x18uLL);
        *v16 = v7;
        v16[1] = v11;
        v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        v18 = v10[11];
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = operator new(0x18uLL);
        *v21 = v16;
        v21[1] = v13;
        v21[2] = v15;
        dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb16_E4__17EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_50(_QWORD *a1, xpc_object_t *a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  xpc_object_t v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = (_QWORD *)a1[5];
      if (v10)
      {
        v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
LABEL_21:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v11 = xpc_null_create();
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
            goto LABEL_21;
        }
        v13 = v10[9];
        v14 = std::__shared_weak_count::lock(v12);
        if (!v14)
          goto LABEL_21;
        v15 = v14;
        v16 = operator new(0x18uLL);
        *v16 = v7;
        v16[1] = v11;
        v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        v18 = v10[11];
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = operator new(0x18uLL);
        *v21 = v16;
        v21[1] = v13;
        v21[2] = v15;
        dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb17_E4__18EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_52(_QWORD *a1, xpc_object_t *a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  xpc_object_t v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = (_QWORD *)a1[5];
      if (v10)
      {
        v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
LABEL_21:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v11 = xpc_null_create();
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
            goto LABEL_21;
        }
        v13 = v10[9];
        v14 = std::__shared_weak_count::lock(v12);
        if (!v14)
          goto LABEL_21;
        v15 = v14;
        v16 = operator new(0x18uLL);
        *v16 = v7;
        v16[1] = v11;
        v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        v18 = v10[11];
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = operator new(0x18uLL);
        *v21 = v16;
        v21[1] = v13;
        v21[2] = v15;
        dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb18_E4__19EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_54(_QWORD *a1, xpc_object_t *a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  xpc_object_t v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = (_QWORD *)a1[5];
      if (v10)
      {
        v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
LABEL_21:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v11 = xpc_null_create();
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
            goto LABEL_21;
        }
        v13 = v10[9];
        v14 = std::__shared_weak_count::lock(v12);
        if (!v14)
          goto LABEL_21;
        v15 = v14;
        v16 = operator new(0x18uLL);
        *v16 = v7;
        v16[1] = v11;
        v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        v18 = v10[11];
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = operator new(0x18uLL);
        *v21 = v16;
        v21[1] = v13;
        v21[2] = v15;
        dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb19_E4__20EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_56(_QWORD *a1, xpc_object_t *a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  xpc_object_t v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = (_QWORD *)a1[5];
      if (v10)
      {
        v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
LABEL_21:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v11 = xpc_null_create();
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
            goto LABEL_21;
        }
        v13 = v10[9];
        v14 = std::__shared_weak_count::lock(v12);
        if (!v14)
          goto LABEL_21;
        v15 = v14;
        v16 = operator new(0x18uLL);
        *v16 = v7;
        v16[1] = v11;
        v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        v18 = v10[11];
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = operator new(0x18uLL);
        *v21 = v16;
        v21[1] = v13;
        v21[2] = v15;
        dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb20_E4__21EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_58(_QWORD *a1, xpc_object_t *a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  xpc_object_t v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = (_QWORD *)a1[5];
      if (v10)
      {
        v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
LABEL_21:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v11 = xpc_null_create();
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
            goto LABEL_21;
        }
        v13 = v10[9];
        v14 = std::__shared_weak_count::lock(v12);
        if (!v14)
          goto LABEL_21;
        v15 = v14;
        v16 = operator new(0x18uLL);
        *v16 = v7;
        v16[1] = v11;
        v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        v18 = v10[11];
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = operator new(0x18uLL);
        *v21 = v16;
        v21[1] = v13;
        v21[2] = v15;
        dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb21_E4__22EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_60(_QWORD *a1, xpc_object_t *a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  xpc_object_t v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = (_QWORD *)a1[5];
      if (v10)
      {
        v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
LABEL_21:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v11 = xpc_null_create();
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
            goto LABEL_21;
        }
        v13 = v10[9];
        v14 = std::__shared_weak_count::lock(v12);
        if (!v14)
          goto LABEL_21;
        v15 = v14;
        v16 = operator new(0x18uLL);
        *v16 = v7;
        v16[1] = v11;
        v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        v18 = v10[11];
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = operator new(0x18uLL);
        *v21 = v16;
        v21[1] = v13;
        v21[2] = v15;
        dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb22_E4__23EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_62(_QWORD *a1, xpc_object_t *a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  xpc_object_t v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = (_QWORD *)a1[5];
      if (v10)
      {
        v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
LABEL_21:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v11 = xpc_null_create();
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
            goto LABEL_21;
        }
        v13 = v10[9];
        v14 = std::__shared_weak_count::lock(v12);
        if (!v14)
          goto LABEL_21;
        v15 = v14;
        v16 = operator new(0x18uLL);
        *v16 = v7;
        v16[1] = v11;
        v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        v18 = v10[11];
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = operator new(0x18uLL);
        *v21 = v16;
        v21[1] = v13;
        v21[2] = v15;
        dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb23_E4__24EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void boost::signals2::connection::~connection(boost::signals2::connection *this)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v1 = (unsigned int *)*((_QWORD *)this + 1);
  if (v1)
  {
    v2 = v1 + 3;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 24))(v1);
  }
}

uint64_t coex::Module::State::handleDesenseCommandDriverStarted_sync(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 208);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  return result;
}

void coex::Module::State::setIndications_sync(coex::Module::State *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __CFDictionary *Mutable;
  __CFDictionary *v11;
  const void *v12;
  capabilities::abs *v13;
  uint64_t v14;
  CFTypeID v15;
  unint64_t v16;
  void *v17;
  NSObject *v18;
  _QWORD aBlock[6];
  std::__shared_weak_count *v20;
  void *v21;
  dispatch_object_t object;
  CFTypeRef cf;
  __CFDictionary *v24;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v24 = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v11 = Mutable;
  if (Mutable)
    v24 = Mutable;
  v12 = (const void *)*MEMORY[0x1E0C9AE50];
  ctu::cf::insert<__CFString const*,__CFBoolean const*>(Mutable, (CFTypeRef)*MEMORY[0x1E0DDF3A0], (CFTypeRef)*MEMORY[0x1E0C9AE50]);
  ctu::cf::insert<__CFString const*,__CFBoolean const*>(v11, (CFTypeRef)*MEMORY[0x1E0DDF398], v12);
  ctu::cf::insert<__CFString const*,__CFBoolean const*>(v11, (CFTypeRef)*MEMORY[0x1E0DDF450], v12);
  if (capabilities::abs::supportsCoexEur5G(v13))
  {
    ctu::cf::insert<__CFString const*,__CFBoolean const*>(v11, (CFTypeRef)*MEMORY[0x1E0DDF488], (CFTypeRef)*MEMORY[0x1E0C9AE40]);
    ctu::cf::insert<__CFString const*,__CFBoolean const*>(v11, (CFTypeRef)*MEMORY[0x1E0DDF348], v12);
    ctu::cf::insert<__CFString const*,__CFBoolean const*>(v11, (CFTypeRef)*MEMORY[0x1E0DDF400], v12);
  }
  v14 = *((_QWORD *)this + 13);
  if (v11 && (v15 = CFGetTypeID(v11), v15 == CFDictionaryGetTypeID()))
  {
    cf = v11;
    CFRetain(v11);
  }
  else
  {
    cf = 0;
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State19setIndications_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_73;
  aBlock[4] = this;
  aBlock[5] = v3;
  v20 = v5;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  v17 = _Block_copy(aBlock);
  v18 = *((_QWORD *)this + 11);
  if (v18)
    dispatch_retain(v18);
  if (v17)
  {
    v21 = _Block_copy(v17);
    object = v18;
    if (!v18)
      goto LABEL_24;
    goto LABEL_23;
  }
  v21 = 0;
  object = v18;
  if (v18)
LABEL_23:
    dispatch_retain(v18);
LABEL_24:
  (*(void (**)(uint64_t, CFTypeRef *, void **))(*(_QWORD *)v14 + 64))(v14, &cf, &v21);
  if (object)
    dispatch_release(object);
  if (v21)
    _Block_release(v21);
  if (v18)
    dispatch_release(v18);
  if (v17)
    _Block_release(v17);
  if (cf)
    CFRelease(cf);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  if (v11)
    CFRelease(v11);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF37400C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, const void *a19)
{
  std::__shared_weak_count *v19;
  NSObject *v20;
  const void *v21;
  uint64_t v22;

  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)&a17);
  if (v20)
    dispatch_release(v20);
  if (v21)
    _Block_release(v21);
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a19);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v22 - 72));
  std::__shared_weak_count::__release_weak(v19);
  _Unwind_Resume(a1);
}

void sub_1BF374064(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;

  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v2 - 72));
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State4initEv_block_invoke_64(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  coex::Module::State *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  CFTypeRef v8;
  char Int;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[2];
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  __CFString *v16;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (coex::Module::State *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v15 = v6;
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        abm::client::Event::getData(*a2);
        v8 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
        {
          v12[0] = 0xAAAAAAAAAAAAAAAALL;
          v12[1] = 0xAAAAAAAAAAAAAAAALL;
          ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v12, (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL);
          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v16, (const char *)*MEMORY[0x1E0CFB9E8]);
          Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v12, v16);
          MEMORY[0x1C3B8936C](&v16);
          *((_BYTE *)v5 + 172) = Int;
          coex::Module::State::evaluateCurrentCoexBootState_sync(v5);
          MEMORY[0x1C3B893A8](v12);
          v8 = cf;
        }
        if (v8)
          CFRelease(v8);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void coex::Module::State::evaluateCurrentCoexBootState_sync(coex::Module::State *this)
{
  uint64_t v2;
  _OWORD *v3;
  int v4;
  int v5;
  size_t v6;
  int v7;
  const void *v8;
  int v9;
  NSObject *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  uint64_t v15;
  xpc_object_t v16;
  NSObject *v17;
  std::string __p;
  uint8_t buf[8];
  uint64_t v20;
  void (*v21)(uint64_t);
  void *v22;
  uint64_t v23;
  xpc_object_t object;
  int v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = *((char *)this + 172);
  v3 = (_OWORD *)((char *)this + 176);
  memset(&__p, 170, sizeof(__p));
  if (*((char *)this + 199) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 22), *((_QWORD *)this + 23));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v3;
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 24);
  }
  if (v2 > 7)
    v4 = 2;
  else
    v4 = dword_1BF53E44C[v2];
  v5 = *((char *)this + 199);
  if (v5 >= 0)
    v6 = *((unsigned __int8 *)this + 199);
  else
    v6 = *((_QWORD *)this + 23);
  v7 = 2;
  if (v6 == strlen((const char *)*MEMORY[0x1E0CFB980]))
  {
    if (v5 >= 0)
      v8 = v3;
    else
      v8 = *(const void **)v3;
    if (!memcmp(v8, (const void *)*MEMORY[0x1E0CFB980], v6))
      v7 = v4;
    else
      v7 = 2;
  }
  v9 = *((_DWORD *)this + 50);
  if (v7 != v9)
  {
    v10 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v9;
      LOWORD(v20) = 1024;
      *(_DWORD *)((char *)&v20 + 2) = v7;
      _os_log_impl(&dword_1BF335000, v10, OS_LOG_TYPE_DEFAULT, "#I Coex boot state changing from %d -> %d", buf, 0xEu);
    }
    *((_DWORD *)this + 50) = v7;
    if (*((_QWORD *)this + 15))
    {
      v11 = xpc_dictionary_create(0, 0, 0);
      if (v11 || (v11 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8A86C](v11) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v11);
          v12 = v11;
        }
        else
        {
          v12 = xpc_null_create();
        }
      }
      else
      {
        v12 = xpc_null_create();
        v11 = 0;
      }
      xpc_release(v11);
      v13 = xpc_int64_create(*((unsigned int *)this + 50));
      if (!v13)
        v13 = xpc_null_create();
      xpc_dictionary_set_value(v12, "kWCMCellular_BBState", v13);
      v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
      v15 = *((_QWORD *)this + 15);
      if (v12)
      {
        xpc_retain(v12);
        v16 = v12;
      }
      else
      {
        v16 = xpc_null_create();
      }
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      v20 = 1174405120;
      v21 = ___ZN4coex9XpcClient11sendMessageE19WCMReceiveMessageIdN3xpc6objectENS_5SubIdE_block_invoke;
      v22 = &__block_descriptor_tmp_7_3;
      v25 = 388;
      v23 = v15;
      object = v16;
      if (v16)
        xpc_retain(v16);
      else
        object = xpc_null_create();
      v26 = 0;
      ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped((uint64_t *)(v15 + 8), (uint64_t)buf);
      xpc_release(object);
      xpc_release(v16);
      v17 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BF335000, v17, OS_LOG_TYPE_DEFAULT, "#I Notified CXM with baseband state", buf, 2u);
      }
      xpc_release(v12);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF37452C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t dispatch::callback<void({block_pointer})(std::shared_ptr<abm::client::Event>)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void ___ZN4coex6Module5State4initEv_block_invoke_67(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  CFTypeRef v7;
  const void *v8;
  size_t v9;
  void *v10;
  void **v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  void **v16;
  size_t v17;
  char v18;
  size_t v19;
  size_t v20;
  const void *v21;
  xpc_object_t v22;
  xpc_object_t v23;
  uint64_t v24;
  xpc_object_t v25;
  NSObject *v26;
  size_t v27;
  const void *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  void *v31;
  void *__dst[2];
  unint64_t v33;
  uint8_t buf[16];
  uint64_t v35;
  _QWORD v36[2];
  CFTypeRef cf;
  std::__shared_weak_count *v39;
  uint64_t v40;

  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  v39 = v6;
  if (!v6)
    return;
  if (!a1[5])
  {
    v12 = v6;
LABEL_52:
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    return;
  }
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  abm::client::Event::getData(*a2);
  v7 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
  {
    v36[0] = 0xAAAAAAAAAAAAAAAALL;
    v36[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v36, (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL);
    v8 = (const void *)*MEMORY[0x1E0CFB988];
    v9 = strlen((const char *)*MEMORY[0x1E0CFB988]);
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v10 = (void *)v9;
    if (v9 >= 0x17)
    {
      v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v13 = v9 | 7;
      v14 = v13 + 1;
      v11 = (void **)operator new(v13 + 1);
      __dst[1] = v10;
      v33 = v14 | 0x8000000000000000;
      __dst[0] = v11;
    }
    else
    {
      HIBYTE(v33) = v9;
      v11 = __dst;
      if (!v9)
        goto LABEL_14;
    }
    memmove(v11, v8, (size_t)v10);
LABEL_14:
    v15 = (const char *)*MEMORY[0x1E0CFB530];
    *((_BYTE *)v10 + (_QWORD)v11) = 0;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v40, v15);
    ctu::cf::map_adapter::getString();
    MEMORY[0x1C3B8936C](&v40);
    v16 = (void **)(v5 + 176);
    if (*(char *)(v5 + 199) < 0)
      operator delete(*v16);
    *(_OWORD *)v16 = *(_OWORD *)buf;
    *(_QWORD *)(v5 + 192) = v35;
    HIBYTE(v35) = 0;
    buf[0] = 0;
    if (SHIBYTE(v33) < 0)
      operator delete(__dst[0]);
    v17 = *(unsigned __int8 *)(v5 + 199);
    v18 = v17;
    v19 = *(_QWORD *)(v5 + 184);
    if ((v17 & 0x80u) == 0)
      v20 = *(unsigned __int8 *)(v5 + 199);
    else
      v20 = *(_QWORD *)(v5 + 184);
    if (v20 == strlen((const char *)*MEMORY[0x1E0CFB980]))
    {
      v21 = (v17 & 0x80u) == 0 ? (const void *)(v5 + 176) : *v16;
      if (!memcmp(v21, (const void *)*MEMORY[0x1E0CFB980], v20) && *(_QWORD *)(v5 + 120))
      {
        v22 = xpc_dictionary_create(0, 0, 0);
        if (v22 || (v22 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8A86C](v22) == MEMORY[0x1E0C812F8])
          {
            xpc_retain(v22);
            v23 = v22;
          }
          else
          {
            v23 = xpc_null_create();
          }
        }
        else
        {
          v23 = xpc_null_create();
          v22 = 0;
        }
        xpc_release(v22);
        v24 = *(_QWORD *)(v5 + 120);
        v31 = v23;
        if (v23)
        {
          xpc_retain(v23);
          v25 = v31;
        }
        else
        {
          v25 = xpc_null_create();
          v31 = v25;
        }
        coex::XpcClient::sendMessage(v24, 304, &v31, 0);
        xpc_release(v25);
        v31 = 0;
        v26 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BF335000, v26, OS_LOG_TYPE_DEFAULT, "#I Notified CXM that Baseband is Ready", buf, 2u);
        }
        xpc_release(v23);
        v17 = *(unsigned __int8 *)(v5 + 199);
        v19 = *(_QWORD *)(v5 + 184);
        v18 = *(_BYTE *)(v5 + 199);
      }
    }
    if (v18 >= 0)
      v27 = v17;
    else
      v27 = v19;
    if (v27 == strlen((const char *)*MEMORY[0x1E0CFBB68]))
    {
      v28 = v18 >= 0 ? (const void *)(v5 + 176) : *v16;
      if (!memcmp(v28, (const void *)*MEMORY[0x1E0CFBB68], v27))
        coex::CoexCache::initProperty((coex::CoexCache *)(v5 + 136));
    }
    coex::Module::State::evaluateCurrentCoexBootState_sync((coex::Module::State *)v5);
    MEMORY[0x1C3B893A8](v36);
    v7 = cf;
  }
  if (v7)
    CFRelease(v7);
  v12 = v39;
  if (v39)
    goto LABEL_52;
}

void ___ZN4coex6Module5State8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *i;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int j;
  unsigned int v7;
  boost::signals2::detail::connection_body_base *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = v1 + 28;
  for (i = (uint64_t *)v1[29]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = (unsigned int *)i[3];
    if (v4)
    {
      v5 = v4 + 2;
      for (j = v4[2]; j; j = v7)
      {
        v7 = __ldxr(v5);
        if (v7 == j)
        {
          if (!__stxr(j + 1, v5))
          {
            v8 = (boost::signals2::detail::connection_body_base *)i[2];
            if (v8)
              boost::signals2::detail::connection_body_base::disconnect(v8);
            do
            {
              v9 = __ldaxr(v5);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v5));
            if (!v10)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
              v11 = v4 + 3;
              do
              {
                v12 = __ldaxr(v11);
                v13 = v12 - 1;
              }
              while (__stlxr(v13, v11));
              if (!v13)
                (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
            }
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
  }
  if (v1[30])
  {
    v14 = v1[28];
    v15 = (uint64_t *)v1[29];
    v16 = *v15;
    *(_QWORD *)(v16 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v16;
    v1[30] = 0;
    if (v15 != v2)
    {
      do
      {
        v26 = (uint64_t *)v15[1];
        v27 = (unsigned int *)v15[3];
        if (v27)
        {
          v28 = v27 + 3;
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
            (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 24))(v27);
        }
        operator delete(v15);
        v15 = v26;
      }
      while (v26 != v2);
    }
  }
  v17 = (std::__shared_weak_count *)v1[16];
  v1[15] = 0;
  v1[16] = 0;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)v1[14];
  v1[13] = 0;
  v1[14] = 0;
  if (!v20)
    goto LABEL_30;
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    v23 = (std::__shared_weak_count *)v1[32];
    v1[31] = 0;
    v1[32] = 0;
    if (!v23)
      return;
  }
  else
  {
LABEL_30:
    v23 = (std::__shared_weak_count *)v1[32];
    v1[31] = 0;
    v1[32] = 0;
    if (!v23)
      return;
  }
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
}

void sub_1BF374C48(_Unwind_Exception *exception_object)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  do
  {
    v4 = __ldaxr(v2);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v2));
  if (!v5)
  {
    (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1);
    v6 = v1 + 3;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 24))(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN4coex6Module5State19setIndications_syncEv_block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  _BOOL4 v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
        goto LABEL_13;
      v8 = *a2;
      if (*a2)
        v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      else
        v9 = 0;
      v10 = *(NSObject **)(v5 + 40);
      v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      if (v9)
      {
        if (!v11)
          goto LABEL_13;
        v17 = 138412290;
        v18 = v8;
        v12 = "#I Failed to  set indications:\n%@";
        v13 = v10;
        v14 = 12;
      }
      else
      {
        if (!v11)
          goto LABEL_13;
        LOWORD(v17) = 0;
        v12 = "#I Indications set successfully";
        v13 = v10;
        v14 = 2;
      }
      _os_log_impl(&dword_1BF335000, v13, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v17, v14);
LABEL_13:
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void coex::CommandDriver::Callback::~Callback(coex::CommandDriver::Callback *this)
{
  NSObject *v2;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)this)
    _Block_release(*(const void **)this);
}

void coex::Module::State::handleSetNetworkConfigOfInterest_sync(uint64_t a1, xpc_object_t *a2, unsigned int a3)
{
  xpc_object_t *v4;
  NSObject *v6;
  const __CFAllocator *v7;
  const __CFArray *Mutable;
  xpc_object_t v9;
  xpc_object_t v10;
  size_t count;
  xpc_object_t v12;
  xpc_object_t v13;
  uint64_t v14;
  xpc_object_t value;
  const object *v16;
  const void *v17;
  CFTypeID v18;
  const void *v19;
  xpc_object_t v20;
  const object *v21;
  const void *v22;
  CFTypeID v23;
  const void *v24;
  xpc_object_t v25;
  const object *v26;
  const void *v27;
  CFTypeID v28;
  const void *v29;
  xpc_object_t v30;
  const object *v31;
  const void *v32;
  CFTypeID v33;
  const void *v34;
  xpc_object_t v35;
  unsigned __int8 v36;
  CFDictionaryRef v37;
  CFDictionaryRef v38;
  CFDictionaryRef v39;
  CFDictionaryRef v40;
  CFMutableDictionaryRef v41;
  __CFDictionary *v42;
  CFDataRef v43;
  const __CFAllocator *v44;
  __CFArray *v45;
  xpc_object_t v46;
  CFArrayRef v47;
  CFDictionaryRef v48;
  CFDictionaryRef v49;
  CFMutableDictionaryRef v50;
  CFMutableDictionaryRef v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  CFTypeID v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  void *v60;
  NSObject *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  const void *v68;
  NSObject *v69;
  uint8_t *v70;
  unsigned int v71;
  uint64_t v72;
  xpc_object_t *v73;
  CFTypeRef v74;
  CFTypeRef v75;
  uint64_t v76;
  uint64_t v77;
  CFTypeRef cf;
  _QWORD aBlock[6];
  std::__shared_weak_count *v80;
  void *v81;
  dispatch_object_t object;
  CFTypeRef v83[2];
  CFDictionaryRef v84;
  CFDictionaryRef v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  xpc_object_t xdict;
  CFArrayRef v91;
  uint8_t buf[23];
  char v93;
  UInt8 bytes[8];
  void *v95[2];
  void *values[2];
  __int128 keys;
  uint64_t v98;

  v4 = a2;
  v98 = *MEMORY[0x1E0C80C00];
  if (MEMORY[0x1C3B8A86C](*a2) != MEMORY[0x1E0C812C8])
  {
    v6 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, "#I Invalid XPC array", buf, 2u);
    }
    return;
  }
  v72 = a1;
  v91 = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
    v91 = Mutable;
  memset(buf, 170, 16);
  v9 = *v4;
  if (*v4)
  {
    xpc_retain(*v4);
    *(_QWORD *)buf = v9;
  }
  else
  {
    v9 = xpc_null_create();
    *(_QWORD *)buf = v9;
    if (!v9)
    {
      v9 = 0;
      *(_QWORD *)buf = xpc_null_create();
      goto LABEL_10;
    }
  }
  xpc_retain(v9);
LABEL_10:
  *(_QWORD *)&buf[8] = 0;
  xpc_release(v9);
  v71 = a3;
  v77 = *MEMORY[0x1E0DDF388];
  v75 = (CFTypeRef)*MEMORY[0x1E0DDF218];
  v76 = *MEMORY[0x1E0DDF268];
  v73 = v4;
  v74 = (CFTypeRef)*MEMORY[0x1E0DDF258];
  cf = (CFTypeRef)*MEMORY[0x1E0DDF240];
  while (1)
  {
    v10 = *v4;
    if (*v4)
      xpc_retain(*v4);
    else
      v10 = xpc_null_create();
    if (MEMORY[0x1C3B8A86C](*v4) == MEMORY[0x1E0C812C8])
    {
      count = xpc_array_get_count(*v4);
      if (!v10)
      {
LABEL_20:
        v12 = xpc_null_create();
        goto LABEL_21;
      }
    }
    else
    {
      count = 0;
      if (!v10)
        goto LABEL_20;
    }
    xpc_retain(v10);
    v12 = v10;
LABEL_21:
    xpc_release(v10);
    v13 = *(xpc_object_t *)buf;
    v14 = *(_QWORD *)&buf[8];
    xpc_release(v12);
    if (v14 == count && v13 == v12)
      break;
    xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&keys = buf;
    *((_QWORD *)&keys + 1) = *(_QWORD *)&buf[8];
    xpc::array::object_proxy::operator xpc::dict((uint64_t)&keys, &xdict);
    v89 = 0xAAAAAAAAAAAAAAAALL;
    value = xpc_dictionary_get_value(xdict, "kWCMCellularSetNetworkConfigOfInterest_ULCenterFreq");
    values[0] = value;
    if (value)
      xpc_retain(value);
    else
      values[0] = xpc_null_create();
    xpc::bridge((xpc *)values, v16);
    v17 = (const void *)keys;
    if (!(_QWORD)keys || (v18 = CFGetTypeID((CFTypeRef)keys), v18 != CFNumberGetTypeID()))
    {
      v17 = 0;
      v89 = 0;
      v19 = (const void *)keys;
      if (!(_QWORD)keys)
        goto LABEL_32;
LABEL_31:
      CFRelease(v19);
      goto LABEL_32;
    }
    v89 = (unint64_t)v17;
    CFRetain(v17);
    v19 = (const void *)keys;
    if ((_QWORD)keys)
      goto LABEL_31;
LABEL_32:
    xpc_release(values[0]);
    v88 = 0xAAAAAAAAAAAAAAAALL;
    v20 = xpc_dictionary_get_value(xdict, "kWCMCellularSetNetworkConfigOfInterest_ULBandwidth");
    values[0] = v20;
    if (v20)
      xpc_retain(v20);
    else
      values[0] = xpc_null_create();
    xpc::bridge((xpc *)values, v21);
    v22 = (const void *)keys;
    if (!(_QWORD)keys || (v23 = CFGetTypeID((CFTypeRef)keys), v23 != CFNumberGetTypeID()))
    {
      v22 = 0;
      v88 = 0;
      v24 = (const void *)keys;
      if (!(_QWORD)keys)
        goto LABEL_41;
LABEL_40:
      CFRelease(v24);
      goto LABEL_41;
    }
    v88 = (unint64_t)v22;
    CFRetain(v22);
    v24 = (const void *)keys;
    if ((_QWORD)keys)
      goto LABEL_40;
LABEL_41:
    xpc_release(values[0]);
    v87 = 0xAAAAAAAAAAAAAAAALL;
    v25 = xpc_dictionary_get_value(xdict, "kWCMCellularSetNetworkConfigOfInterest_DLCenterFreq");
    values[0] = v25;
    if (v25)
      xpc_retain(v25);
    else
      values[0] = xpc_null_create();
    xpc::bridge((xpc *)values, v26);
    v27 = (const void *)keys;
    if (!(_QWORD)keys || (v28 = CFGetTypeID((CFTypeRef)keys), v28 != CFNumberGetTypeID()))
    {
      v27 = 0;
      v87 = 0;
      v29 = (const void *)keys;
      if (!(_QWORD)keys)
        goto LABEL_50;
LABEL_49:
      CFRelease(v29);
      goto LABEL_50;
    }
    v87 = (unint64_t)v27;
    CFRetain(v27);
    v29 = (const void *)keys;
    if ((_QWORD)keys)
      goto LABEL_49;
LABEL_50:
    xpc_release(values[0]);
    v86 = 0xAAAAAAAAAAAAAAAALL;
    v30 = xpc_dictionary_get_value(xdict, "kWCMCellularSetNetworkConfigOfInterest_DLBandwidth");
    values[0] = v30;
    if (v30)
      xpc_retain(v30);
    else
      values[0] = xpc_null_create();
    xpc::bridge((xpc *)values, v31);
    v32 = (const void *)keys;
    if (!(_QWORD)keys || (v33 = CFGetTypeID((CFTypeRef)keys), v33 != CFNumberGetTypeID()))
    {
      v32 = 0;
      v86 = 0;
      v34 = (const void *)keys;
      if (!(_QWORD)keys)
        goto LABEL_59;
LABEL_58:
      CFRelease(v34);
      goto LABEL_59;
    }
    v86 = (unint64_t)v32;
    CFRetain(v32);
    v34 = (const void *)keys;
    if ((_QWORD)keys)
      goto LABEL_58;
LABEL_59:
    xpc_release(values[0]);
    v35 = xpc_dictionary_get_value(xdict, "kWCMCellularSetNetworkConfigOfInterest_BandMask");
    *(_QWORD *)&keys = v35;
    if (v35)
      xpc_retain(v35);
    else
      *(_QWORD *)&keys = xpc_null_create();
    v36 = xpc::dyn_cast_or_default((xpc *)&keys, 0);
    xpc_release((xpc_object_t)keys);
    if (!v17 || !v22 || !v27)
    {
      if (v32)
        goto LABEL_91;
      goto LABEL_92;
    }
    if (v32)
    {
      v84 = 0;
      v85 = 0;
      *(_QWORD *)&keys = v77;
      *((_QWORD *)&keys + 1) = v76;
      values[0] = (void *)v17;
      values[1] = (void *)v22;
      v95[0] = (void *)v27;
      v95[1] = (void *)v32;
      v37 = CFDictionaryCreate(v7, (const void **)&keys, (const void **)values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v38 = v37;
      if (v37)
        v85 = v37;
      v39 = CFDictionaryCreate(v7, (const void **)&keys, (const void **)v95, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v40 = v39;
      if (v39)
        v84 = v39;
      v95[0] = 0;
      v41 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v42 = v41;
      if (v41)
        v95[0] = v41;
      ctu::cf::insert<__CFString const*,__CFDictionary const*>(v41, v75, v38);
      ctu::cf::insert<__CFString const*,__CFDictionary const*>(v42, v74, v40);
      *(_QWORD *)bytes = v36;
      v43 = CFDataCreate(v7, bytes, 8);
      v83[1] = v43;
      *(_QWORD *)&keys = cf;
      if (cf)
        CFRetain(cf);
      values[0] = v43;
      if (v43)
      {
        CFRetain(v43);
        if (cf)
          CFDictionaryAddValue(v42, cf, v43);
        CFRelease(v43);
      }
      v44 = v7;
      if (cf)
        CFRelease(cf);
      v45 = v91;
      *(_QWORD *)&keys = v42;
      if (v42)
      {
        CFRetain(v42);
        CFArrayAppendValue(v45, v42);
        CFRelease(v42);
      }
      if (v43)
        CFRelease(v43);
      v7 = v44;
      if (v42)
        CFRelease(v42);
      v4 = v73;
      if (v40)
        CFRelease(v40);
      if (v38)
        CFRelease(v38);
LABEL_91:
      CFRelease(v32);
LABEL_92:
      if (!v27)
        goto LABEL_94;
    }
    CFRelease(v27);
LABEL_94:
    if (v22)
      CFRelease(v22);
    if (v17)
      CFRelease(v17);
    xpc_release(xdict);
    v46 = *(xpc_object_t *)buf;
    if (*(_QWORD *)buf)
      xpc_retain(*(xpc_object_t *)buf);
    else
      v46 = xpc_null_create();
    ++*(_QWORD *)&buf[8];
    xpc_release(v46);
  }
  xpc_release(*(xpc_object_t *)buf);
  v47 = v91;
  if (!CFArrayGetCount(v91))
  {
    v69 = *(NSObject **)(v72 + 40);
    if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
    {
      xpc::object::to_string((xpc::object *)v4);
      if (v93 >= 0)
        v70 = buf;
      else
        v70 = *(uint8_t **)buf;
      LODWORD(keys) = 136315138;
      *(_QWORD *)((char *)&keys + 4) = v70;
      _os_log_error_impl(&dword_1BF335000, v69, OS_LOG_TYPE_ERROR, "XPC array is: %s", (uint8_t *)&keys, 0xCu);
      if (v93 < 0)
        operator delete(*(void **)buf);
      v69 = *(NSObject **)(v72 + 40);
      if (!os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
      {
LABEL_144:
        if (!v47)
          return;
        goto LABEL_145;
      }
    }
    else if (!os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
    {
      goto LABEL_144;
    }
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v47;
    _os_log_error_impl(&dword_1BF335000, v69, OS_LOG_TYPE_ERROR, "Band filter array is: %@", buf, 0xCu);
    if (!v47)
      return;
LABEL_145:
    CFRelease(v47);
    return;
  }
  *(_QWORD *)&keys = 0;
  *(_QWORD *)buf = *MEMORY[0x1E0DDF2D8];
  values[0] = v47;
  v48 = CFDictionaryCreate(v7, (const void **)buf, (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v49 = v48;
  if (v48)
    *(_QWORD *)&keys = v48;
  values[0] = 0;
  v50 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v51 = v50;
  if (v50)
    values[0] = v50;
  ctu::cf::insert<__CFString const*,__CFDictionary const*>(v50, (CFTypeRef)*MEMORY[0x1E0DDF370], v49);
  v53 = *(_QWORD *)(v72 + 72);
  v52 = *(std::__shared_weak_count **)(v72 + 80);
  *(_QWORD *)buf = v53;
  if (!v52 || (v54 = std::__shared_weak_count::lock(v52), (*(_QWORD *)&buf[8] = v54) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v55 = v54;
  v56 = *(_QWORD *)(v72 + 104);
  if (v51 && (v57 = CFGetTypeID(v51), v57 == CFDictionaryGetTypeID()))
  {
    v83[0] = v51;
    CFRetain(v51);
  }
  else
  {
    v83[0] = 0;
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State37handleSetNetworkConfigOfInterest_syncEN3xpc5arrayENS_5SubIdE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_79;
  aBlock[4] = v72;
  aBlock[5] = v53;
  v80 = v55;
  p_shared_owners = (unint64_t *)&v55->__shared_owners_;
  do
    v59 = __ldxr(p_shared_owners);
  while (__stxr(v59 + 1, p_shared_owners));
  v60 = _Block_copy(aBlock);
  v61 = *(NSObject **)(v72 + 88);
  if (v61)
    dispatch_retain(*(dispatch_object_t *)(v72 + 88));
  if (v60)
  {
    v81 = _Block_copy(v60);
    object = v61;
    if (v61)
      goto LABEL_117;
  }
  else
  {
    v81 = 0;
    object = v61;
    if (v61)
LABEL_117:
      dispatch_retain(v61);
  }
  (*(void (**)(uint64_t, CFTypeRef *, _QWORD, void **))(*(_QWORD *)v56 + 48))(v56, v83, v71, &v81);
  if (object)
    dispatch_release(object);
  if (v81)
    _Block_release(v81);
  if (v61)
    dispatch_release(v61);
  if (v60)
    _Block_release(v60);
  if (v83[0])
    CFRelease(v83[0]);
  v62 = v80;
  if (v80)
  {
    v63 = (unint64_t *)&v80->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
      v65 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
        goto LABEL_133;
      goto LABEL_136;
    }
  }
  v65 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_136;
LABEL_133:
  v66 = (unint64_t *)&v65->__shared_owners_;
  do
    v67 = __ldaxr(v66);
  while (__stlxr(v67 - 1, v66));
  if (v67)
  {
LABEL_136:
    v68 = values[0];
    if (values[0])
      goto LABEL_137;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
    v68 = values[0];
    if (values[0])
LABEL_137:
      CFRelease(v68);
  }
  if ((_QWORD)keys)
    CFRelease((CFTypeRef)keys);
  v47 = v91;
  if (v91)
    goto LABEL_145;
}

void sub_1BF37588C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,int a28,__int16 a29,char a30,char a31,int a32,__int16 a33,char a34,char a35,int a36,__int16 a37,char a38,char a39,int a40,__int16 a41,char a42,char a43,int a44,__int16 a45,char a46,char a47,int a48,__int16 a49,char a50,char a51,int a52,__int16 a53,char a54,char a55,xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

const void **ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void ___ZN4coex6Module5State37handleSetNetworkConfigOfInterest_syncEN3xpc5arrayENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I Failed to set: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

const void **ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void coex::Module::State::handleSetTxPowerLimit_sync(_QWORD *a1, xpc *this, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  __CFDictionary *v7;
  uint64_t (*v8)(uint64_t);
  CFMutableDictionaryRef theDict;

  v5 = xpc::dyn_cast_or_default(this, 0);
  v6 = 20;
  if (!(_DWORD)a3)
    v6 = 18;
  v7 = (__CFDictionary *)a1[v6];
  theDict = v7;
  if (v7)
    CFRetain(v7);
  ctu::cf::update<__CFString const*,long long>(v7, (CFTypeRef)*MEMORY[0x1E0DDF508], v5, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  if (v7)
    CFRelease(v7);
  theDict = (CFMutableDictionaryRef)0xAAAAAAAAAAAAAAAALL;
  coex::Module::State::getSubProperty((uint64_t)a1, coex::kKeyFailCondition, a3, 0, &theDict);
  v8 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  if (!theDict)
    v8 = 0;
  if (v8)
  {
    CFDictionaryRemoveValue(theDict, (const void *)*MEMORY[0x1E0DDF528]);
    CFDictionaryRemoveValue(theDict, (const void *)*MEMORY[0x1E0DDF458]);
  }
  coex::Module::State::setPolicy_sync(a1, a3);
  if (theDict)
    CFRelease(theDict);
}

void sub_1BF375E04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1BF375E18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void coex::Module::State::handleSetWCI2TxPowerLimit_sync(_QWORD *a1, xpc *this, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  __CFDictionary *v7;
  uint64_t (*v8)(uint64_t);
  CFMutableDictionaryRef theDict;

  v5 = xpc::dyn_cast_or_default(this, 0);
  v6 = 20;
  if (!(_DWORD)a3)
    v6 = 18;
  v7 = (__CFDictionary *)a1[v6];
  theDict = v7;
  if (v7)
    CFRetain(v7);
  ctu::cf::update<__CFString const*,long long>(v7, (CFTypeRef)*MEMORY[0x1E0DDF3C8], v5, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  if (v7)
    CFRelease(v7);
  theDict = (CFMutableDictionaryRef)0xAAAAAAAAAAAAAAAALL;
  coex::Module::State::getSubProperty((uint64_t)a1, coex::kKeyFailCondition, a3, 0, &theDict);
  v8 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  if (!theDict)
    v8 = 0;
  if (v8)
  {
    CFDictionaryRemoveValue(theDict, (const void *)*MEMORY[0x1E0DDF528]);
    CFDictionaryRemoveValue(theDict, (const void *)*MEMORY[0x1E0DDF458]);
  }
  coex::Module::State::setPolicy_sync(a1, a3);
  if (theDict)
    CFRelease(theDict);
}

void sub_1BF375F44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1BF375F58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void coex::Module::State::handleSetWCI2CalibrationInfo_sync(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v2 = 0;
    _os_log_error_impl(&dword_1BF335000, v1, OS_LOG_TYPE_ERROR, "WCMCellularSetWCI2CalibrationInfo not supported", v2, 2u);
  }
}

void coex::Module::State::handleSetLinkQualityMode_sync(uint64_t a1, xpc_object_t *a2, uint64_t a3)
{
  xpc_object_t value;
  uint64_t v7;
  xpc_object_t v8;
  int v9;
  int v10;
  int v11;
  NSObject *v12;
  const void *v13;
  const void *v14;
  xpc_object_t v15;
  uint64_t v16;
  const __CFAllocator *v17;
  xpc_object_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  xpc_object_t v23;
  CFTypeRef cf;
  xpc_object_t object[2];

  object[1] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  value = xpc_dictionary_get_value(*a2, "kWCMBTSetLinkQuality_Mode");
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  v7 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  v8 = xpc_dictionary_get_value(*a2, "kWCMBTSetLinkQuality_EventType");
  object[0] = v8;
  if (v8)
    xpc_retain(v8);
  else
    object[0] = xpc_null_create();
  v9 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  if (!v7)
    goto LABEL_15;
  if (v9 == 1)
  {
    v10 = 0;
    v11 = *(_DWORD *)(a1 + 168) ^ 1;
    if (!v11)
      return;
    goto LABEL_16;
  }
  if (v9 == 2)
  {
    v9 = 2;
    v10 = 1;
    v11 = *(_DWORD *)(a1 + 168) ^ 2;
    if (!v11)
      return;
    goto LABEL_16;
  }
  v12 = *(NSObject **)(a1 + 40);
  if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
LABEL_15:
    v10 = 0;
    v9 = 0;
    LOBYTE(v11) = *(_DWORD *)(a1 + 168);
    if (!*(_DWORD *)(a1 + 168))
      return;
    goto LABEL_16;
  }
  LODWORD(object[0]) = 67109120;
  HIDWORD(object[0]) = v9;
  _os_log_error_impl(&dword_1BF335000, v12, OS_LOG_TYPE_ERROR, "Unrecognized event type: %d", (uint8_t *)object, 8u);
  v10 = 0;
  v9 = 0;
  LOBYTE(v11) = *(_DWORD *)(a1 + 168);
  if (!*(_DWORD *)(a1 + 168))
    return;
LABEL_16:
  object[0] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v13 = (const void *)*MEMORY[0x1E0DDF318];
  coex::Module::State::getSubProperty(a1, *MEMORY[0x1E0DDF318], a3, 1, (CFMutableDictionaryRef *)object);
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v14 = (const void *)*MEMORY[0x1E0DDF308];
  coex::Module::State::getSubProperty(a1, *MEMORY[0x1E0DDF308], a3, 1, (CFMutableDictionaryRef *)&cf);
  if ((v11 & 1) != 0)
  {
    ctu::cf::update<__CFString const*,BOOL>((CFMutableDictionaryRef)object[0], (CFTypeRef)*MEMORY[0x1E0DDF6F0], v9 & 1);
    if ((v9 & 1) != 0)
      ctu::cf::update<__CFString const*,double>((__CFDictionary *)object[0], (CFTypeRef)*MEMORY[0x1E0DDF700], (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1.0);
  }
  if ((v11 & 2) != 0)
  {
    ctu::cf::update<__CFString const*,BOOL>((CFMutableDictionaryRef)cf, (CFTypeRef)*MEMORY[0x1E0DDF6F0], v10);
    if (v10)
    {
      v15 = xpc_dictionary_get_value(*a2, "kWCMCellularSetLinkQuality_BLERBlockCount");
      v23 = v15;
      if (v15)
        xpc_retain(v15);
      else
        v23 = xpc_null_create();
      v16 = xpc::dyn_cast_or_default((xpc *)&v23, 0);
      v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      ctu::cf::update<__CFString const*,long long>((__CFDictionary *)cf, (CFTypeRef)*MEMORY[0x1E0DDF2A8], v16, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
      xpc_release(v23);
      v18 = xpc_dictionary_get_value(*a2, "kWCMCellularSetLinkQuality_BLERThreshold");
      v23 = v18;
      if (v18)
        xpc_retain(v18);
      else
        v23 = xpc_null_create();
      v19 = xpc::dyn_cast_or_default((xpc *)&v23, 0);
      ctu::cf::update<__CFString const*,long long>((__CFDictionary *)cf, (CFTypeRef)*MEMORY[0x1E0DDF590], v19, v17);
      xpc_release(v23);
    }
  }
  if ((_DWORD)a3)
    v20 = 152;
  else
    v20 = 136;
  v21 = *(void **)(a1 + v20);
  v23 = v21;
  if (v21)
    CFRetain(v21);
  ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v21, v13, object[0]);
  if (v21)
    CFRelease(v21);
  v22 = *(void **)(a1 + v20);
  v23 = v22;
  if (v22)
    CFRetain(v22);
  ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v22, v14, cf);
  if (v22)
    CFRelease(v22);
  coex::Module::State::setLinkQualityMode_sync(a1, v9, a3);
  if (cf)
    CFRelease(cf);
  if (object[0])
    CFRelease(object[0]);
}

void sub_1BF37638C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, char a10, xpc_object_t a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void coex::Module::State::setLinkQualityMode_sync(uint64_t a1, int a2, uint64_t a3)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v7;
  uint64_t v8;
  const void *v9;
  int v10;
  const void *v11;
  const void *v12;
  const void *v13;
  char v14;
  const void *v15;
  const void *v16;
  const void *v17;
  std::__shared_weak_count *v18;
  const void *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  CFTypeID v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void *v26;
  NSObject *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  CFMutableDictionaryRef v34;
  _QWORD aBlock[6];
  std::__shared_weak_count *v36;
  void *v37;
  dispatch_object_t object;
  CFTypeRef cf;
  const void *v40;
  std::__shared_weak_count *v41;
  CFMutableDictionaryRef v42;
  CFMutableDictionaryRef v43;
  _QWORD v44[2];
  CFMutableDictionaryRef v45;

  v45 = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = Mutable;
  if (Mutable)
    v45 = Mutable;
  v44[0] = 0xAAAAAAAAAAAAAAAALL;
  v44[1] = 0xAAAAAAAAAAAAAAAALL;
  v8 = 152;
  if (!(_DWORD)a3)
    v8 = 136;
  v9 = *(const void **)(a1 + v8);
  v40 = v9;
  if (v9)
    CFRetain(v9);
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v44, (const __CFDictionary *)v9);
  if (v9)
    CFRelease(v9);
  v10 = *(_DWORD *)(a1 + 168) ^ a2;
  if ((v10 & 1) != 0)
  {
    v43 = v7;
    if (v7)
      CFRetain(v7);
    v11 = (const void *)*MEMORY[0x1E0DDF318];
    v12 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v44[0])(v44, *MEMORY[0x1E0DDF318]);
    v13 = v12;
    if (v12)
    {
      CFRelease(v12);
      ctu::cf::update<__CFString const*,void const*>(v7, v11, v13);
    }
    if (!v7)
    {
      if ((v10 & 2) == 0)
        goto LABEL_28;
      v42 = 0;
LABEL_23:
      v14 = 1;
      goto LABEL_24;
    }
    CFRelease(v7);
    if ((v10 & 2) == 0)
      goto LABEL_28;
    v42 = v7;
  }
  else
  {
    if ((v10 & 2) == 0)
      goto LABEL_28;
    v42 = v7;
    if (!v7)
      goto LABEL_23;
  }
  CFRetain(v7);
  v14 = 0;
LABEL_24:
  v15 = (const void *)*MEMORY[0x1E0DDF308];
  v16 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v44[0])(v44, *MEMORY[0x1E0DDF308]);
  v17 = v16;
  if (v16)
  {
    CFRelease(v16);
    ctu::cf::update<__CFString const*,void const*>(v7, v15, v17);
  }
  if ((v14 & 1) == 0)
    CFRelease(v7);
LABEL_28:
  v19 = *(const void **)(a1 + 72);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  v40 = v19;
  if (!v18 || (v20 = std::__shared_weak_count::lock(v18), (v41 = v20) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v21 = v20;
  v22 = *(_QWORD *)(a1 + 104);
  if (v7 && (v23 = CFGetTypeID(v7), v23 == CFDictionaryGetTypeID()))
  {
    cf = v7;
    CFRetain(v7);
  }
  else
  {
    cf = 0;
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State23setLinkQualityMode_syncEjNS_5SubIdE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_239;
  aBlock[4] = a1;
  aBlock[5] = v19;
  v36 = v21;
  p_shared_owners = (unint64_t *)&v21->__shared_owners_;
  do
    v25 = __ldxr(p_shared_owners);
  while (__stxr(v25 + 1, p_shared_owners));
  v26 = _Block_copy(aBlock);
  v27 = *(NSObject **)(a1 + 88);
  if (v27)
    dispatch_retain(v27);
  if (v26)
  {
    v37 = _Block_copy(v26);
    object = v27;
    if (!v27)
      goto LABEL_41;
    goto LABEL_40;
  }
  v37 = 0;
  object = v27;
  if (v27)
LABEL_40:
    dispatch_retain(v27);
LABEL_41:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(_QWORD *)v22 + 48))(v22, &cf, a3, &v37);
  if (object)
    dispatch_release(object);
  if (v37)
    _Block_release(v37);
  if (v27)
    dispatch_release(v27);
  if (v26)
    _Block_release(v26);
  if (cf)
    CFRelease(cf);
  v28 = v36;
  if (!v36)
    goto LABEL_55;
  v29 = (unint64_t *)&v36->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    v31 = v41;
    if (!v41)
      goto LABEL_59;
  }
  else
  {
LABEL_55:
    v31 = v41;
    if (!v41)
      goto LABEL_59;
  }
  v32 = (unint64_t *)&v31->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (v33)
  {
LABEL_59:
    MEMORY[0x1C3B893A8](v44);
    v34 = v45;
    if (!v45)
      return;
    goto LABEL_60;
  }
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  MEMORY[0x1C3B893A8](v44);
  v34 = v45;
  if (v45)
LABEL_60:
    CFRelease(v34);
}

void sub_1BF37685C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  NSObject *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  va_list va;
  uint64_t v16;
  const void *v17;
  va_list va1;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v17 = va_arg(va2, const void *);
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)va);
  if (v9)
    dispatch_release(v9);
  if (v10)
    _Block_release(v10);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v11);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  MEMORY[0x1C3B893A8](v12 - 88);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v12 - 72));
  _Unwind_Resume(a1);
}

void coex::Module::State::handleSetScanFreqBandFilter_sync(uint64_t a1, xpc_object_t *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  const __CFAllocator *v9;
  const __CFArray *Mutable;
  xpc_object_t v11;
  const CFDictionaryKeyCallBacks *v12;
  const CFDictionaryValueCallBacks *v13;
  uint64_t v14;
  xpc_object_t v15;
  size_t count;
  xpc_object_t v17;
  uint64_t v18;
  xpc_object_t v19;
  CFMutableDictionaryRef v20;
  __CFDictionary *v21;
  xpc_object_t value;
  int v23;
  xpc_object_t v24;
  int v25;
  __CFArray *v26;
  xpc_object_t v27;
  CFArrayRef v28;
  __CFDictionary *v29;
  __CFDictionary *v30;
  CFMutableDictionaryRef v31;
  CFMutableDictionaryRef v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  CFTypeID v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  void *v41;
  NSObject *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  CFTypeRef v49;
  NSObject *v50;
  uint8_t *v51;
  unsigned int v52;
  uint64_t v53;
  CFTypeRef v54;
  CFTypeRef v55;
  _QWORD aBlock[6];
  std::__shared_weak_count *v57;
  void *v58;
  dispatch_object_t object;
  CFTypeRef cf;
  xpc_object_t xdict;
  CFTypeRef v62;
  CFArrayRef theArray;
  uint8_t buf[23];
  char v65;
  __int128 v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v6 = MEMORY[0x1C3B8A86C](*a2);
  v7 = MEMORY[0x1E0C812C8];
  if (v6 != MEMORY[0x1E0C812C8])
  {
    v8 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF335000, v8, OS_LOG_TYPE_ERROR, "Invalid XPC array", buf, 2u);
    }
    return;
  }
  v52 = a3;
  theArray = 0;
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
    theArray = Mutable;
  memset(buf, 170, 16);
  v11 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    *(_QWORD *)buf = v11;
  }
  else
  {
    v11 = xpc_null_create();
    *(_QWORD *)buf = v11;
    if (!v11)
    {
      v11 = 0;
      *(_QWORD *)buf = xpc_null_create();
      goto LABEL_10;
    }
  }
  xpc_retain(v11);
LABEL_10:
  *(_QWORD *)&buf[8] = 0;
  xpc_release(v11);
  v53 = a1;
  v55 = (CFTypeRef)*MEMORY[0x1E0DDF388];
  v54 = (CFTypeRef)*MEMORY[0x1E0DDF268];
  v12 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v13 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v14 = MEMORY[0x1E0C812F8];
  while (1)
  {
    v15 = *a2;
    if (*a2)
      xpc_retain(*a2);
    else
      v15 = xpc_null_create();
    if (MEMORY[0x1C3B8A86C](*a2) == v7)
    {
      count = xpc_array_get_count(*a2);
      if (!v15)
      {
LABEL_20:
        v17 = xpc_null_create();
        goto LABEL_21;
      }
    }
    else
    {
      count = 0;
      if (!v15)
        goto LABEL_20;
    }
    xpc_retain(v15);
    v17 = v15;
LABEL_21:
    xpc_release(v15);
    v19 = *(xpc_object_t *)buf;
    v18 = *(_QWORD *)&buf[8];
    xpc_release(v17);
    if (v18 == count && v19 == v17)
      break;
    v62 = 0;
    v20 = CFDictionaryCreateMutable(v9, 0, v12, v13);
    v21 = v20;
    if (v20)
      v62 = v20;
    xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v66 = buf;
    *((_QWORD *)&v66 + 1) = *(_QWORD *)&buf[8];
    xpc::array::object_proxy::operator xpc::dict((uint64_t)&v66, &xdict);
    if (MEMORY[0x1C3B8A86C](xdict) == v14)
    {
      value = xpc_dictionary_get_value(xdict, "kWCMCellularScanFreqBandFilter_CenterFreq");
      *(_QWORD *)&v66 = value;
      if (value)
        xpc_retain(value);
      else
        *(_QWORD *)&v66 = xpc_null_create();
      v23 = xpc::dyn_cast_or_default((xpc *)&v66, 0);
      xpc_release((xpc_object_t)v66);
      v24 = xpc_dictionary_get_value(xdict, "kWCMCellularScanFreqBandFilter_Bandwidth");
      *(_QWORD *)&v66 = v24;
      if (v24)
        xpc_retain(v24);
      else
        *(_QWORD *)&v66 = xpc_null_create();
      v25 = xpc::dyn_cast_or_default((xpc *)&v66, 0);
      xpc_release((xpc_object_t)v66);
      ctu::cf::insert<__CFString const*,long long>(v21, v55, v23, v9);
      ctu::cf::insert<__CFString const*,long long>(v21, v54, v25, v9);
    }
    v26 = theArray;
    *(_QWORD *)&v66 = v21;
    if (v21)
    {
      CFRetain(v21);
      CFArrayAppendValue(v26, v21);
      CFRelease(v21);
    }
    xpc_release(xdict);
    if (v21)
      CFRelease(v21);
    v27 = *(xpc_object_t *)buf;
    if (*(_QWORD *)buf)
      xpc_retain(*(xpc_object_t *)buf);
    else
      v27 = xpc_null_create();
    ++*(_QWORD *)&buf[8];
    xpc_release(v27);
  }
  xpc_release(*(xpc_object_t *)buf);
  v28 = theArray;
  if (!CFArrayGetCount(theArray))
  {
    v50 = *(NSObject **)(v53 + 40);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      xpc::object::to_string((xpc::object *)a2);
      if (v65 >= 0)
        v51 = buf;
      else
        v51 = *(uint8_t **)buf;
      LODWORD(v66) = 136315138;
      *(_QWORD *)((char *)&v66 + 4) = v51;
      _os_log_error_impl(&dword_1BF335000, v50, OS_LOG_TYPE_ERROR, "XPC array is: %s", (uint8_t *)&v66, 0xCu);
      if (v65 < 0)
        operator delete(*(void **)buf);
      v50 = *(NSObject **)(v53 + 40);
      if (!os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
      {
LABEL_84:
        if (!v28)
          return;
        goto LABEL_85;
      }
    }
    else if (!os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      goto LABEL_84;
    }
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v28;
    _os_log_error_impl(&dword_1BF335000, v50, OS_LOG_TYPE_ERROR, "Scan frequency band filter array is: %@", buf, 0xCu);
    if (!v28)
      return;
LABEL_85:
    CFRelease(v28);
    return;
  }
  *(_QWORD *)&v66 = 0;
  v29 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v30 = v29;
  if (v29)
    *(_QWORD *)&v66 = v29;
  ctu::cf::insert<__CFString const*,__CFArray *>(v29, (CFTypeRef)*MEMORY[0x1E0DDF408], v28);
  v62 = 0;
  v31 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v32 = v31;
  if (v31)
    v62 = v31;
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v31, (CFTypeRef)*MEMORY[0x1E0DDF500], v30);
  v34 = *(_QWORD *)(v53 + 72);
  v33 = *(std::__shared_weak_count **)(v53 + 80);
  *(_QWORD *)buf = v34;
  if (!v33 || (v35 = std::__shared_weak_count::lock(v33), (*(_QWORD *)&buf[8] = v35) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v36 = v35;
  v37 = *(_QWORD *)(v53 + 104);
  if (v32 && (v38 = CFGetTypeID(v32), v38 == CFDictionaryGetTypeID()))
  {
    cf = v32;
    CFRetain(v32);
  }
  else
  {
    cf = 0;
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State32handleSetScanFreqBandFilter_syncEN3xpc5arrayENS_5SubIdE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_118;
  aBlock[4] = v53;
  aBlock[5] = v34;
  v57 = v36;
  p_shared_owners = (unint64_t *)&v36->__shared_owners_;
  do
    v40 = __ldxr(p_shared_owners);
  while (__stxr(v40 + 1, p_shared_owners));
  v41 = _Block_copy(aBlock);
  v42 = *(NSObject **)(v53 + 88);
  if (v42)
    dispatch_retain(*(dispatch_object_t *)(v53 + 88));
  if (v41)
  {
    v58 = _Block_copy(v41);
    object = v42;
    if (v42)
      goto LABEL_56;
  }
  else
  {
    v58 = 0;
    object = v42;
    if (v42)
LABEL_56:
      dispatch_retain(v42);
  }
  (*(void (**)(uint64_t, CFTypeRef *, _QWORD, void **))(*(_QWORD *)v37 + 48))(v37, &cf, v52, &v58);
  if (object)
    dispatch_release(object);
  if (v58)
    _Block_release(v58);
  if (v42)
    dispatch_release(v42);
  if (v41)
    _Block_release(v41);
  if (cf)
    CFRelease(cf);
  v43 = v57;
  if (v57)
  {
    v44 = (unint64_t *)&v57->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_76;
  v47 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v48 = __ldaxr(v47);
  while (__stlxr(v48 - 1, v47));
  if (!v48)
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
    v49 = v62;
    if (v62)
LABEL_77:
      CFRelease(v49);
  }
  else
  {
LABEL_76:
    v49 = v62;
    if (v62)
      goto LABEL_77;
  }
  if ((_QWORD)v66)
    CFRelease((CFTypeRef)v66);
  v28 = theArray;
  if (theArray)
    goto LABEL_85;
}

void sub_1BF377028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,xpc_object_t object,char a25,int a26,__int16 a27,char a28,char a29,xpc_object_t a30)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State32handleSetScanFreqBandFilter_syncEN3xpc5arrayENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I Failed to set: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetWiFiStatus_sync(_QWORD *a1, xpc_object_t *a2, uint64_t a3)
{
  NSObject *v6;
  xpc_object_t value;
  int v8;
  xpc_object_t v9;
  int v10;
  xpc_object_t v11;
  int v12;
  const __CFAllocator *v13;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v15;
  CFMutableDictionaryRef v16;
  CFMutableDictionaryRef v17;
  NSObject *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  CFTypeID v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  void *v27;
  NSObject *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  CFTypeRef v35;
  _QWORD v36[6];
  std::__shared_weak_count *v37;
  void *aBlock;
  dispatch_object_t object;
  CFTypeRef cf;
  CFTypeRef v41;
  CFTypeRef v42;
  __int128 buf;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (MEMORY[0x1C3B8A86C](*a2) != MEMORY[0x1E0C812F8])
  {
    v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", (uint8_t *)&buf, 2u);
    }
    return;
  }
  value = xpc_dictionary_get_value(*a2, "WCMCellularSetWiFiStatus_CenterFrequency");
  *(_QWORD *)&buf = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v8 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  xpc_release((xpc_object_t)buf);
  v9 = xpc_dictionary_get_value(*a2, "WCMCellularSetWiFiStatus_ChannelBandwidth");
  *(_QWORD *)&buf = v9;
  if (v9)
    xpc_retain(v9);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v10 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  xpc_release((xpc_object_t)buf);
  v11 = xpc_dictionary_get_value(*a2, "WCMCellularSetWiFiStatus_TxPower");
  *(_QWORD *)&buf = v11;
  if (v11)
    xpc_retain(v11);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v12 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  xpc_release((xpc_object_t)buf);
  v42 = 0;
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v15 = Mutable;
  if (Mutable)
    v42 = Mutable;
  ctu::cf::insert<__CFString const*,int>(Mutable, (CFTypeRef)*MEMORY[0x1E0DDF388], v8, v13);
  ctu::cf::insert<__CFString const*,int>(v15, (CFTypeRef)*MEMORY[0x1E0DDF268], v10, v13);
  ctu::cf::insert<__CFString const*,int>(v15, (CFTypeRef)*MEMORY[0x1E0DDF230], v12, v13);
  v41 = 0;
  v16 = CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v17 = v16;
  if (v16)
    v41 = v16;
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v16, (CFTypeRef)*MEMORY[0x1E0DDF350], v15);
  v18 = a1[5];
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v17;
    _os_log_impl(&dword_1BF335000, v18, OS_LOG_TYPE_DEFAULT, "#I Setting WiFi status with: %@", (uint8_t *)&buf, 0xCu);
  }
  v20 = a1[9];
  v19 = (std::__shared_weak_count *)a1[10];
  *(_QWORD *)&buf = v20;
  if (!v19 || (v21 = std::__shared_weak_count::lock(v19), (*((_QWORD *)&buf + 1) = v21) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v22 = v21;
  v23 = a1[13];
  if (v17 && (v24 = CFGetTypeID(v17), v24 == CFDictionaryGetTypeID()))
  {
    cf = v17;
    CFRetain(v17);
  }
  else
  {
    cf = 0;
  }
  v36[0] = MEMORY[0x1E0C809B0];
  v36[1] = 1174405120;
  v36[2] = ___ZN4coex6Module5State24handleSetWiFiStatus_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  v36[3] = &__block_descriptor_tmp_122;
  v36[4] = a1;
  v36[5] = v20;
  v37 = v22;
  p_shared_owners = (unint64_t *)&v22->__shared_owners_;
  do
    v26 = __ldxr(p_shared_owners);
  while (__stxr(v26 + 1, p_shared_owners));
  v27 = _Block_copy(v36);
  v28 = a1[11];
  if (v28)
    dispatch_retain(v28);
  if (v27)
  {
    aBlock = _Block_copy(v27);
    object = v28;
    if (!v28)
      goto LABEL_32;
    goto LABEL_31;
  }
  aBlock = 0;
  object = v28;
  if (v28)
LABEL_31:
    dispatch_retain(v28);
LABEL_32:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(_QWORD *)v23 + 48))(v23, &cf, a3, &aBlock);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v28)
    dispatch_release(v28);
  if (v27)
    _Block_release(v27);
  if (cf)
    CFRelease(cf);
  v29 = v37;
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (!*((_QWORD *)&buf + 1))
    goto LABEL_51;
  v33 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (v34)
  {
LABEL_51:
    v35 = v41;
    if (!v41)
      goto LABEL_53;
    goto LABEL_52;
  }
  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
  std::__shared_weak_count::__release_weak(v32);
  v35 = v41;
  if (v41)
LABEL_52:
    CFRelease(v35);
LABEL_53:
  if (v42)
    CFRelease(v42);
}

void sub_1BF3776F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,xpc_object_t object)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1BF3777EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State24handleSetWiFiStatus_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set wifi status: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetTimeShareConfigReq_sync(uint64_t a1, xpc_object_t *a2, uint64_t a3)
{
  NSObject *v6;
  const __CFAllocator *v7;
  __CFDictionary *Mutable;
  __CFDictionary *v9;
  xpc_object_t value;
  NSObject *v11;
  int v12;
  xpc_object_t v13;
  unsigned int v14;
  xpc_object_t v15;
  unsigned int v16;
  xpc_object_t v17;
  unsigned __int16 v18;
  xpc_object_t v19;
  unsigned __int16 v20;
  xpc_object_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  CFMutableArrayRef v25;
  xpc_object_t v26;
  const CFDictionaryKeyCallBacks *v27;
  const CFDictionaryValueCallBacks *v28;
  xpc_object_t v29;
  size_t count;
  xpc_object_t v31;
  uint64_t v32;
  xpc_object_t v33;
  CFMutableDictionaryRef v34;
  __CFDictionary *v35;
  xpc_object_t v36;
  int v37;
  xpc_object_t v38;
  int v39;
  __CFArray *v40;
  xpc_object_t v41;
  CFMutableArrayRef v42;
  CFMutableDictionaryRef v43;
  CFMutableDictionaryRef v44;
  NSObject *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  CFTypeID v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  void *v54;
  NSObject *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  xpc_object_t v62;
  uint64_t v63;
  unsigned int v64;
  CFTypeRef v65;
  CFTypeRef v66;
  _QWORD aBlock[6];
  std::__shared_weak_count *v68;
  void *v69;
  dispatch_object_t v70;
  CFTypeRef cf;
  xpc_object_t object[2];
  xpc_object_t xdict;
  CFMutableDictionaryRef v74;
  CFMutableArrayRef v75;
  xpc_object_t v76;
  __CFDictionary *v77;
  uint8_t buf[16];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  if (MEMORY[0x1C3B8A86C](*a2) != MEMORY[0x1E0C812F8])
  {
    v6 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", buf, 2u);
    }
    return;
  }
  if (xpc_dictionary_get_value(*a2, "kWCMCellularSetTimeShareConfig_Enable"))
  {
    v77 = 0;
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v9 = Mutable;
    if (Mutable)
      v77 = Mutable;
    value = xpc_dictionary_get_value(*a2, "kWCMCellularSetTimeShareConfig_Enable");
    *(_QWORD *)buf = value;
    if (value)
      xpc_retain(value);
    else
      *(_QWORD *)buf = xpc_null_create();
    v12 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E0DDF538], v12);
    xpc_release(*(xpc_object_t *)buf);
    v13 = xpc_dictionary_get_value(*a2, "kWCMCellularTimeShareConfig_CoexTech");
    *(_QWORD *)buf = v13;
    if (v13)
      xpc_retain(v13);
    else
      *(_QWORD *)buf = xpc_null_create();
    v14 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF570], v14, v7);
    xpc_release(*(xpc_object_t *)buf);
    v15 = xpc_dictionary_get_value(*a2, "kWCMCellularTimeShareConfig_CallType");
    *(_QWORD *)buf = v15;
    if (v15)
      xpc_retain(v15);
    else
      *(_QWORD *)buf = xpc_null_create();
    v16 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF568], v16, v7);
    xpc_release(*(xpc_object_t *)buf);
    v17 = xpc_dictionary_get_value(*a2, "kWCMCellularTimeShareConfig_LongDrxCycle");
    *(_QWORD *)buf = v17;
    if (v17)
      xpc_retain(v17);
    else
      *(_QWORD *)buf = xpc_null_create();
    v18 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    ctu::cf::insert<__CFString const*,unsigned short>(v9, (CFTypeRef)*MEMORY[0x1E0DDF650], v18, v7);
    xpc_release(*(xpc_object_t *)buf);
    v19 = xpc_dictionary_get_value(*a2, "kWCMCellularTimeShareConfig_ShortDrxCycle");
    *(_QWORD *)buf = v19;
    if (v19)
      xpc_retain(v19);
    else
      *(_QWORD *)buf = xpc_null_create();
    v20 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    ctu::cf::insert<__CFString const*,unsigned short>(v9, (CFTypeRef)*MEMORY[0x1E0DDF670], v20, v7);
    xpc_release(*(xpc_object_t *)buf);
    v21 = xpc_dictionary_get_value(*a2, "kWCMCellularTImeShareConfig_SleepWakeDurScale");
    *(_QWORD *)buf = v21;
    if (v21)
      xpc_retain(v21);
    else
      *(_QWORD *)buf = xpc_null_create();
    v22 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    ctu::cf::insert<__CFString const*,unsigned char>(v9, (CFTypeRef)*MEMORY[0x1E0DDF6C0], v22, v7);
    xpc_release(*(xpc_object_t *)buf);
    v76 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)buf = a2;
    *(_QWORD *)&buf[8] = "kWCMCellularTImeShareConfig_BandInformationSet";
    xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &v76);
    v23 = MEMORY[0x1C3B8A86C](v76);
    v24 = MEMORY[0x1E0C812C8];
    if (v23 == MEMORY[0x1E0C812C8])
    {
      v75 = 0;
      v25 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E0C9B378]);
      if (v25)
        v75 = v25;
      memset(buf, 170, sizeof(buf));
      v26 = v76;
      if (v76)
      {
        xpc_retain(v76);
        *(_QWORD *)buf = v26;
      }
      else
      {
        v26 = xpc_null_create();
        *(_QWORD *)buf = v26;
        if (!v26)
        {
          v26 = 0;
          *(_QWORD *)buf = xpc_null_create();
          goto LABEL_35;
        }
      }
      xpc_retain(v26);
LABEL_35:
      *(_QWORD *)&buf[8] = 0;
      xpc_release(v26);
      v63 = a1;
      v64 = a3;
      v65 = (CFTypeRef)*MEMORY[0x1E0DDF268];
      v66 = (CFTypeRef)*MEMORY[0x1E0DDF388];
      v27 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
      v28 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      while (1)
      {
        v29 = v76;
        if (v76)
          xpc_retain(v76);
        else
          v29 = xpc_null_create();
        if (MEMORY[0x1C3B8A86C](v76) == v24)
        {
          count = xpc_array_get_count(v76);
          if (!v29)
          {
LABEL_45:
            v31 = xpc_null_create();
            goto LABEL_46;
          }
        }
        else
        {
          count = 0;
          if (!v29)
            goto LABEL_45;
        }
        xpc_retain(v29);
        v31 = v29;
LABEL_46:
        xpc_release(v29);
        v33 = *(xpc_object_t *)buf;
        v32 = *(_QWORD *)&buf[8];
        xpc_release(v31);
        if (v32 == count && v33 == v31)
        {
          xpc_release(*(xpc_object_t *)buf);
          v42 = v75;
          v9 = v77;
          ctu::cf::insert<__CFString const*,__CFArray *>(v77, (CFTypeRef)*MEMORY[0x1E0DDF6D8], v75);
          a3 = v64;
          a1 = v63;
          if (v42)
            CFRelease(v42);
          break;
        }
        v74 = 0;
        v34 = CFDictionaryCreateMutable(v7, 0, v27, v28);
        v35 = v34;
        if (v34)
          v74 = v34;
        object[0] = buf;
        object[1] = *(xpc_object_t *)&buf[8];
        xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        xpc::array::object_proxy::operator xpc::dict((uint64_t)object, &xdict);
        if (MEMORY[0x1C3B8A86C](xdict) == MEMORY[0x1E0C812F8])
        {
          v36 = xpc_dictionary_get_value(xdict, "kWCMCellularTImeShareConfig_BandSet_Frequency");
          object[0] = v36;
          if (v36)
            xpc_retain(v36);
          else
            object[0] = xpc_null_create();
          v37 = xpc::dyn_cast_or_default((xpc *)object, 0);
          xpc_release(object[0]);
          v38 = xpc_dictionary_get_value(xdict, "kWCMCellularTImeShareConfig_BandSet_BW");
          object[0] = v38;
          if (v38)
            xpc_retain(v38);
          else
            object[0] = xpc_null_create();
          v39 = xpc::dyn_cast_or_default((xpc *)object, 0);
          xpc_release(object[0]);
          ctu::cf::insert<__CFString const*,long long>(v35, v66, v37, v7);
          ctu::cf::insert<__CFString const*,long long>(v35, v65, v39, v7);
        }
        v40 = v75;
        object[0] = v35;
        if (v35)
        {
          CFRetain(v35);
          CFArrayAppendValue(v40, v35);
          CFRelease(v35);
        }
        xpc_release(xdict);
        if (v35)
          CFRelease(v35);
        v41 = *(xpc_object_t *)buf;
        if (*(_QWORD *)buf)
          xpc_retain(*(xpc_object_t *)buf);
        else
          v41 = xpc_null_create();
        ++*(_QWORD *)&buf[8];
        xpc_release(v41);
      }
    }
    object[0] = 0;
    v43 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v44 = v43;
    if (v43)
      object[0] = v43;
    ctu::cf::insert<__CFString const*,__CFDictionary *>(v43, (CFTypeRef)*MEMORY[0x1E0DDF410], v9);
    v45 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v44;
      _os_log_impl(&dword_1BF335000, v45, OS_LOG_TYPE_DEFAULT, "#I Setting Time share config with: %@", buf, 0xCu);
    }
    v47 = *(_QWORD *)(a1 + 72);
    v46 = *(std::__shared_weak_count **)(a1 + 80);
    *(_QWORD *)buf = v47;
    if (!v46 || (v48 = std::__shared_weak_count::lock(v46), (*(_QWORD *)&buf[8] = v48) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v49 = v48;
    v50 = *(_QWORD *)(a1 + 104);
    if (v44 && (v51 = CFGetTypeID(v44), v51 == CFDictionaryGetTypeID()))
    {
      cf = v44;
      CFRetain(v44);
    }
    else
    {
      cf = 0;
    }
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN4coex6Module5State32handleSetTimeShareConfigReq_syncEN3xpc4dictENS_5SubIdE_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_132;
    aBlock[4] = a1;
    aBlock[5] = v47;
    v68 = v49;
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v53 = __ldxr(p_shared_owners);
    while (__stxr(v53 + 1, p_shared_owners));
    v54 = _Block_copy(aBlock);
    v55 = *(NSObject **)(a1 + 88);
    if (v55)
      dispatch_retain(*(dispatch_object_t *)(a1 + 88));
    if (v54)
    {
      v69 = _Block_copy(v54);
      v70 = v55;
      if (!v55)
        goto LABEL_83;
    }
    else
    {
      v69 = 0;
      v70 = v55;
      if (!v55)
      {
LABEL_83:
        (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(_QWORD *)v50 + 48))(v50, &cf, a3, &v69);
        if (v70)
          dispatch_release(v70);
        if (v69)
          _Block_release(v69);
        if (v55)
          dispatch_release(v55);
        if (v54)
          _Block_release(v54);
        if (cf)
          CFRelease(cf);
        v56 = v68;
        if (v68)
        {
          v57 = (unint64_t *)&v68->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v59 = *(std::__shared_weak_count **)&buf[8];
        if (!*(_QWORD *)&buf[8])
          goto LABEL_102;
        v60 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
          v62 = object[0];
          if (!object[0])
          {
LABEL_104:
            xpc_release(v76);
            if (v77)
              CFRelease(v77);
            return;
          }
        }
        else
        {
LABEL_102:
          v62 = object[0];
          if (!object[0])
            goto LABEL_104;
        }
        CFRelease(v62);
        goto LABEL_104;
      }
    }
    dispatch_retain(v55);
    goto LABEL_83;
  }
  v11 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v11, OS_LOG_TYPE_DEFAULT, "#E Missing Time share config", buf, 2u);
  }
}

void sub_1BF37819C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,xpc_object_t a24,uint64_t a25,xpc_object_t object,char a27)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State32handleSetTimeShareConfigReq_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set Time share config: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetWCI2TxAntMap_sync(uint64_t a1, xpc_object_t *a2, uint64_t a3)
{
  NSObject *v6;
  const __CFAllocator *v7;
  __CFDictionary *Mutable;
  __CFDictionary *v9;
  xpc_object_t value;
  NSObject *v11;
  int v12;
  xpc_object_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  CFMutableArrayRef v17;
  xpc_object_t v18;
  const CFDictionaryKeyCallBacks *v19;
  const CFDictionaryValueCallBacks *v20;
  xpc_object_t v21;
  size_t count;
  xpc_object_t v23;
  uint64_t v24;
  xpc_object_t v25;
  CFMutableDictionaryRef v26;
  __CFDictionary *v27;
  xpc_object_t v28;
  unsigned __int8 v29;
  xpc_object_t v30;
  unsigned __int8 v31;
  __CFArray *v32;
  xpc_object_t v33;
  CFMutableArrayRef v34;
  xpc_object_t v35;
  xpc_object_t v36;
  int v37;
  CFMutableDictionaryRef v38;
  CFMutableDictionaryRef v39;
  NSObject *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  CFTypeID v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  void *v49;
  NSObject *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  CFMutableArrayRef v57;
  uint64_t v58;
  unsigned int v59;
  CFTypeRef v60;
  CFTypeRef v61;
  _QWORD aBlock[6];
  std::__shared_weak_count *v63;
  void *v64;
  dispatch_object_t v65;
  CFTypeRef cf;
  xpc_object_t object[2];
  xpc_object_t xdict;
  CFMutableDictionaryRef v69;
  CFMutableArrayRef v70;
  xpc_object_t v71;
  __CFDictionary *v72;
  uint8_t buf[16];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  if (MEMORY[0x1C3B8A86C](*a2) != MEMORY[0x1E0C812F8])
  {
    v6 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", buf, 2u);
    }
    return;
  }
  if (xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2TxAntMap_Enable"))
  {
    v72 = 0;
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v9 = Mutable;
    if (Mutable)
      v72 = Mutable;
    value = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2TxAntMap_Enable");
    *(_QWORD *)buf = value;
    if (value)
      xpc_retain(value);
    else
      *(_QWORD *)buf = xpc_null_create();
    v12 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E0DDF460], v12);
    xpc_release(*(xpc_object_t *)buf);
    v13 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2TxAntMap_DefaultIdx");
    *(_QWORD *)buf = v13;
    if (v13)
      xpc_retain(v13);
    else
      *(_QWORD *)buf = xpc_null_create();
    v14 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    ctu::cf::insert<__CFString const*,unsigned char>(v9, (CFTypeRef)*MEMORY[0x1E0DDF548], v14, v7);
    xpc_release(*(xpc_object_t *)buf);
    v71 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)buf = a2;
    *(_QWORD *)&buf[8] = "kWCMCellularSetWCI2TxAntMap_InformationSet";
    xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &v71);
    v15 = MEMORY[0x1C3B8A86C](v71);
    v16 = MEMORY[0x1E0C812C8];
    if (v15 == MEMORY[0x1E0C812C8])
    {
      v70 = 0;
      v17 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E0C9B378]);
      if (v17)
        v70 = v17;
      memset(buf, 170, sizeof(buf));
      v18 = v71;
      if (v71)
      {
        xpc_retain(v71);
        *(_QWORD *)buf = v18;
      }
      else
      {
        v18 = xpc_null_create();
        *(_QWORD *)buf = v18;
        if (!v18)
        {
          v18 = 0;
          *(_QWORD *)buf = xpc_null_create();
          goto LABEL_23;
        }
      }
      xpc_retain(v18);
LABEL_23:
      *(_QWORD *)&buf[8] = 0;
      xpc_release(v18);
      v58 = a1;
      v59 = a3;
      v60 = (CFTypeRef)*MEMORY[0x1E0DDF628];
      v61 = (CFTypeRef)*MEMORY[0x1E0DDF5F0];
      v19 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
      v20 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      while (1)
      {
        v21 = v71;
        if (v71)
          xpc_retain(v71);
        else
          v21 = xpc_null_create();
        if (MEMORY[0x1C3B8A86C](v71) == v16)
        {
          count = xpc_array_get_count(v71);
          if (!v21)
          {
LABEL_33:
            v23 = xpc_null_create();
            goto LABEL_34;
          }
        }
        else
        {
          count = 0;
          if (!v21)
            goto LABEL_33;
        }
        xpc_retain(v21);
        v23 = v21;
LABEL_34:
        xpc_release(v21);
        v25 = *(xpc_object_t *)buf;
        v24 = *(_QWORD *)&buf[8];
        xpc_release(v23);
        if (v24 == count && v25 == v23)
        {
          xpc_release(*(xpc_object_t *)buf);
          v34 = v70;
          v9 = v72;
          ctu::cf::insert<__CFString const*,__CFArray *>(v72, (CFTypeRef)*MEMORY[0x1E0DDF630], v70);
          a3 = v59;
          a1 = v58;
          if (v34)
            CFRelease(v34);
          break;
        }
        v69 = 0;
        v26 = CFDictionaryCreateMutable(v7, 0, v19, v20);
        v27 = v26;
        if (v26)
          v69 = v26;
        object[0] = buf;
        object[1] = *(xpc_object_t *)&buf[8];
        xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        xpc::array::object_proxy::operator xpc::dict((uint64_t)object, &xdict);
        if (MEMORY[0x1C3B8A86C](xdict) == MEMORY[0x1E0C812F8])
        {
          v28 = xpc_dictionary_get_value(xdict, "kWCMCellularSetWCI2TxAntMap_Infoet_AntIdx");
          object[0] = v28;
          if (v28)
            xpc_retain(v28);
          else
            object[0] = xpc_null_create();
          v29 = xpc::dyn_cast_or_default((xpc *)object, 0);
          xpc_release(object[0]);
          v30 = xpc_dictionary_get_value(xdict, "kWCMCellularSetWCI2TxAntMap_InfoSet_WCI2Idx");
          object[0] = v30;
          if (v30)
            xpc_retain(v30);
          else
            object[0] = xpc_null_create();
          v31 = xpc::dyn_cast_or_default((xpc *)object, 0);
          xpc_release(object[0]);
          ctu::cf::insert<__CFString const*,unsigned char>(v27, v61, v29, v7);
          ctu::cf::insert<__CFString const*,unsigned char>(v27, v60, v31, v7);
        }
        v32 = v70;
        object[0] = v27;
        if (v27)
        {
          CFRetain(v27);
          CFArrayAppendValue(v32, v27);
          CFRelease(v27);
        }
        xpc_release(xdict);
        if (v27)
          CFRelease(v27);
        v33 = *(xpc_object_t *)buf;
        if (*(_QWORD *)buf)
          xpc_retain(*(xpc_object_t *)buf);
        else
          v33 = xpc_null_create();
        ++*(_QWORD *)&buf[8];
        xpc_release(v33);
      }
    }
    object[0] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    v35 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Type7FRTwoTxEnable");
    object[0] = v35;
    if (v35)
    {
      xpc_retain(v35);
      v36 = object[0];
    }
    else
    {
      v36 = xpc_null_create();
      object[0] = v36;
    }
    if (MEMORY[0x1C3B8A86C](v36) != MEMORY[0x1E0C81350])
    {
      v37 = xpc::dyn_cast_or_default((xpc *)object, 0);
      ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E0DDF660], v37);
    }
    v70 = 0;
    v38 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v39 = v38;
    if (v38)
      v70 = v38;
    ctu::cf::insert<__CFString const*,__CFDictionary *>(v38, (CFTypeRef)*MEMORY[0x1E0DDF3A8], v9);
    v40 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v39;
      _os_log_impl(&dword_1BF335000, v40, OS_LOG_TYPE_DEFAULT, "#I Setting Tx antenna map with: %@", buf, 0xCu);
    }
    v42 = *(_QWORD *)(a1 + 72);
    v41 = *(std::__shared_weak_count **)(a1 + 80);
    *(_QWORD *)buf = v42;
    if (!v41 || (v43 = std::__shared_weak_count::lock(v41), (*(_QWORD *)&buf[8] = v43) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v44 = v43;
    v45 = *(_QWORD *)(a1 + 104);
    if (v39 && (v46 = CFGetTypeID(v39), v46 == CFDictionaryGetTypeID()))
    {
      cf = v39;
      CFRetain(v39);
    }
    else
    {
      cf = 0;
    }
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN4coex6Module5State26handleSetWCI2TxAntMap_syncEN3xpc4dictENS_5SubIdE_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_139;
    aBlock[4] = a1;
    aBlock[5] = v42;
    v63 = v44;
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v48 = __ldxr(p_shared_owners);
    while (__stxr(v48 + 1, p_shared_owners));
    v49 = _Block_copy(aBlock);
    v50 = *(NSObject **)(a1 + 88);
    if (v50)
      dispatch_retain(*(dispatch_object_t *)(a1 + 88));
    if (v49)
    {
      v64 = _Block_copy(v49);
      v65 = v50;
      if (!v50)
        goto LABEL_76;
    }
    else
    {
      v64 = 0;
      v65 = v50;
      if (!v50)
      {
LABEL_76:
        (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(_QWORD *)v45 + 48))(v45, &cf, a3, &v64);
        if (v65)
          dispatch_release(v65);
        if (v64)
          _Block_release(v64);
        if (v50)
          dispatch_release(v50);
        if (v49)
          _Block_release(v49);
        if (cf)
          CFRelease(cf);
        v51 = v63;
        if (v63)
        {
          v52 = (unint64_t *)&v63->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        v54 = *(std::__shared_weak_count **)&buf[8];
        if (!*(_QWORD *)&buf[8])
          goto LABEL_95;
        v55 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
          v57 = v70;
          if (!v70)
          {
LABEL_97:
            xpc_release(object[0]);
            xpc_release(v71);
            if (v72)
              CFRelease(v72);
            return;
          }
        }
        else
        {
LABEL_95:
          v57 = v70;
          if (!v70)
            goto LABEL_97;
        }
        CFRelease(v57);
        goto LABEL_97;
      }
    }
    dispatch_retain(v50);
    goto LABEL_76;
  }
  v11 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v11, OS_LOG_TYPE_DEFAULT, "#E Missing Tx antenna map", buf, 2u);
  }
}

void sub_1BF378CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,xpc_object_t object,uint64_t a25,xpc_object_t a26,char a27)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State26handleSetWCI2TxAntMap_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set Tx antenna map: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetAntBlocking_sync(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  const __CFAllocator *v9;
  __CFDictionary *Mutable;
  __CFDictionary *v11;
  uint64_t v12;
  uint64_t v13;
  CFMutableArrayRef v14;
  xpc_object_t v15;
  xpc_object_t v16;
  size_t count;
  xpc_object_t v18;
  xpc_object_t v19;
  uint64_t v20;
  CFMutableDictionaryRef v21;
  __CFDictionary *v22;
  xpc_object_t value;
  unsigned __int8 v24;
  CFMutableArrayRef v25;
  xpc_object_t v26;
  void *v27;
  size_t i;
  xpc_object_t v29;
  xpc_object_t v30;
  size_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  int v34;
  __CFArray *v35;
  CFNumberRef v36;
  CFTypeRef v37;
  __CFArray *v38;
  xpc_object_t v39;
  CFMutableArrayRef v40;
  CFMutableDictionaryRef v41;
  CFMutableDictionaryRef v42;
  NSObject *v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  CFTypeID v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  void *v52;
  NSObject *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  xpc_object_t v60;
  unsigned int v61;
  CFTypeRef v62;
  CFTypeRef v63;
  _QWORD aBlock[6];
  std::__shared_weak_count *v65;
  void *v66;
  dispatch_object_t v67;
  CFTypeRef v68;
  xpc_object_t v69;
  CFTypeRef v70;
  xpc_object_t xarray;
  xpc_object_t object;
  const char *v73;
  xpc_object_t xdict;
  CFTypeRef cf;
  CFMutableArrayRef v76;
  xpc_object_t v77;
  __CFDictionary *v78;
  int valuePtr;
  uint8_t buf[16];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v6 = MEMORY[0x1C3B8A86C](*a2);
  v7 = MEMORY[0x1E0C812F8];
  if (v6 != MEMORY[0x1E0C812F8])
  {
    v8 = a1[5];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BF335000, v8, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", buf, 2u);
    }
    return;
  }
  v78 = 0;
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v11 = Mutable;
  if (Mutable)
    v78 = Mutable;
  v77 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)buf = a2;
  *(_QWORD *)&buf[8] = "kWCMCellularSetAntBlocking_BandInformationSet";
  xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &v77);
  v12 = MEMORY[0x1C3B8A86C](v77);
  v13 = MEMORY[0x1E0C812C8];
  if (v12 == MEMORY[0x1E0C812C8])
  {
    v76 = 0;
    v14 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
    if (v14)
      v76 = v14;
    memset(buf, 170, sizeof(buf));
    v15 = v77;
    if (v77)
    {
      xpc_retain(v77);
      *(_QWORD *)buf = v15;
    }
    else
    {
      v15 = xpc_null_create();
      *(_QWORD *)buf = v15;
      if (!v15)
      {
        v15 = 0;
        *(_QWORD *)buf = xpc_null_create();
        goto LABEL_13;
      }
    }
    xpc_retain(v15);
LABEL_13:
    *(_QWORD *)&buf[8] = 0;
    xpc_release(v15);
    v61 = a3;
    v63 = (CFTypeRef)*MEMORY[0x1E0DDF3D0];
    v62 = (CFTypeRef)*MEMORY[0x1E0DDF428];
    while (1)
    {
      v16 = v77;
      if (v77)
        xpc_retain(v77);
      else
        v16 = xpc_null_create();
      if (MEMORY[0x1C3B8A86C](v77) == v13)
      {
        count = xpc_array_get_count(v77);
        if (!v16)
        {
LABEL_23:
          v18 = xpc_null_create();
          goto LABEL_24;
        }
      }
      else
      {
        count = 0;
        if (!v16)
          goto LABEL_23;
      }
      xpc_retain(v16);
      v18 = v16;
LABEL_24:
      xpc_release(v16);
      v19 = *(xpc_object_t *)buf;
      v20 = *(_QWORD *)&buf[8];
      xpc_release(v18);
      if (v20 == count && v19 == v18)
      {
        xpc_release(*(xpc_object_t *)buf);
        v40 = v76;
        v11 = v78;
        ctu::cf::insert<__CFString const*,__CFArray *>(v78, (CFTypeRef)*MEMORY[0x1E0DDF5B8], v76);
        a3 = v61;
        if (v40)
          CFRelease(v40);
        break;
      }
      cf = 0;
      v21 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v22 = v21;
      if (v21)
        cf = v21;
      object = buf;
      v73 = *(const char **)&buf[8];
      xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      xpc::array::object_proxy::operator xpc::dict((uint64_t)&object, &xdict);
      if (MEMORY[0x1C3B8A86C](xdict) != v7)
        goto LABEL_62;
      value = xpc_dictionary_get_value(xdict, "kWCMCellularSetAntBlocking_BandInfoSet_AntNum");
      object = value;
      if (value)
        xpc_retain(value);
      else
        object = xpc_null_create();
      v24 = xpc::dyn_cast_or_default((xpc *)&object, 0);
      xpc_release(object);
      ctu::cf::insert<__CFString const*,unsigned char>(v22, v63, v24, v9);
      xarray = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      object = &xdict;
      v73 = "kWCMCellularSetAntBlocking_BandInfoSet_BandList";
      xpc::dict::object_proxy::operator xpc::array((uint64_t)&object, &xarray);
      if (MEMORY[0x1C3B8A86C](xarray) != v13)
        goto LABEL_61;
      v70 = 0;
      v25 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
      if (v25)
        v70 = v25;
      v26 = xarray;
      if (xarray)
      {
        xpc_retain(xarray);
      }
      else
      {
        v26 = xpc_null_create();
        if (!v26)
        {
          v26 = xpc_null_create();
          v27 = 0;
          goto LABEL_39;
        }
      }
      xpc_retain(v26);
      v27 = v26;
LABEL_39:
      xpc_release(v27);
      for (i = 0; ; ++i)
      {
        v30 = xarray;
        if (xarray)
          xpc_retain(xarray);
        else
          v30 = xpc_null_create();
        if (MEMORY[0x1C3B8A86C](xarray) == v13)
        {
          v31 = xpc_array_get_count(xarray);
          if (!v30)
          {
LABEL_49:
            v32 = xpc_null_create();
            goto LABEL_50;
          }
        }
        else
        {
          v31 = 0;
          if (!v30)
            goto LABEL_49;
        }
        xpc_retain(v30);
        v32 = v30;
LABEL_50:
        xpc_release(v30);
        xpc_release(v32);
        if (i == v31 && v26 == v32)
          break;
        v33 = xpc_array_get_value(v26, i);
        v69 = v33;
        if (v33)
          xpc_retain(v33);
        else
          v69 = xpc_null_create();
        v34 = xpc::dyn_cast_or_default((xpc *)&v69, 0);
        v35 = (__CFArray *)v70;
        valuePtr = v34;
        v36 = CFNumberCreate(v9, kCFNumberIntType, &valuePtr);
        object = v36;
        if (v36)
        {
          CFArrayAppendValue(v35, v36);
          CFRelease(v36);
        }
        xpc_release(v69);
        if (v26)
        {
          xpc_retain(v26);
          v29 = v26;
        }
        else
        {
          v29 = xpc_null_create();
        }
        xpc_release(v29);
      }
      xpc_release(v26);
      v37 = v70;
      v22 = (__CFDictionary *)cf;
      ctu::cf::insert<__CFString const*,__CFArray *>((__CFDictionary *)cf, v62, v70);
      if (v37)
        CFRelease(v37);
LABEL_61:
      xpc_release(xarray);
LABEL_62:
      v38 = v76;
      object = v22;
      if (v22)
      {
        CFRetain(v22);
        CFArrayAppendValue(v38, v22);
        CFRelease(v22);
      }
      xpc_release(xdict);
      if (cf)
        CFRelease(cf);
      v39 = *(xpc_object_t *)buf;
      if (*(_QWORD *)buf)
        xpc_retain(*(xpc_object_t *)buf);
      else
        v39 = xpc_null_create();
      ++*(_QWORD *)&buf[8];
      xpc_release(v39);
    }
  }
  object = 0;
  v41 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v42 = v41;
  if (v41)
    object = v41;
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v41, (CFTypeRef)*MEMORY[0x1E0DDF368], v11);
  v43 = a1[5];
  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v42;
    _os_log_impl(&dword_1BF335000, v43, OS_LOG_TYPE_DEFAULT, "#I Setting Ant blocking with: %@", buf, 0xCu);
  }
  v45 = a1[9];
  v44 = (std::__shared_weak_count *)a1[10];
  *(_QWORD *)buf = v45;
  if (!v44 || (v46 = std::__shared_weak_count::lock(v44), (*(_QWORD *)&buf[8] = v46) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v47 = v46;
  v48 = a1[13];
  if (v42 && (v49 = CFGetTypeID(v42), v49 == CFDictionaryGetTypeID()))
  {
    v68 = v42;
    CFRetain(v42);
  }
  else
  {
    v68 = 0;
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State25handleSetAntBlocking_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_143;
  aBlock[4] = a1;
  aBlock[5] = v45;
  v65 = v47;
  p_shared_owners = (unint64_t *)&v47->__shared_owners_;
  do
    v51 = __ldxr(p_shared_owners);
  while (__stxr(v51 + 1, p_shared_owners));
  v52 = _Block_copy(aBlock);
  v53 = a1[11];
  if (v53)
    dispatch_retain(v53);
  if (v52)
  {
    v66 = _Block_copy(v52);
    v67 = v53;
    if (!v53)
      goto LABEL_88;
    goto LABEL_87;
  }
  v66 = 0;
  v67 = v53;
  if (v53)
LABEL_87:
    dispatch_retain(v53);
LABEL_88:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(_QWORD *)v48 + 48))(v48, &v68, a3, &v66);
  if (v67)
    dispatch_release(v67);
  if (v66)
    _Block_release(v66);
  if (v53)
    dispatch_release(v53);
  if (v52)
    _Block_release(v52);
  if (v68)
    CFRelease(v68);
  v54 = v65;
  if (v65)
  {
    v55 = (unint64_t *)&v65->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_107;
  v58 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v59 = __ldaxr(v58);
  while (__stlxr(v59 - 1, v58));
  if (v59)
  {
LABEL_107:
    v60 = object;
    if (!object)
      goto LABEL_109;
    goto LABEL_108;
  }
  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
  std::__shared_weak_count::__release_weak(v57);
  v60 = object;
  if (object)
LABEL_108:
    CFRelease(v60);
LABEL_109:
  xpc_release(v77);
  if (v78)
    CFRelease(v78);
}

void sub_1BF379788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,xpc_object_t a22,char a23,xpc_object_t object,xpc_object_t a25,uint64_t a26,xpc_object_t a27,char a28)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State25handleSetAntBlocking_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set Ant blocking: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetClientAntBlocking_sync(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  const __CFAllocator *v9;
  __CFDictionary *Mutable;
  __CFDictionary *v11;
  uint64_t v12;
  uint64_t v13;
  CFMutableArrayRef v14;
  xpc_object_t v15;
  xpc_object_t v16;
  size_t count;
  xpc_object_t v18;
  xpc_object_t v19;
  uint64_t v20;
  __CFDictionary *v21;
  __CFDictionary *v22;
  xpc_object_t *value;
  unsigned int v24;
  xpc_object_t *v25;
  int v26;
  xpc_object_t *v27;
  unsigned int v28;
  CFMutableArrayRef v29;
  xpc_object_t v30;
  void *v31;
  size_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  size_t v35;
  xpc_object_t v36;
  CFMutableDictionaryRef v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  xpc_object_t *v41;
  xpc_object_t *v42;
  unsigned __int8 v43;
  CFMutableArrayRef v44;
  xpc_object_t v45;
  void *v46;
  size_t v47;
  xpc_object_t v48;
  xpc_object_t v49;
  size_t v50;
  xpc_object_t v51;
  xpc_object_t v52;
  int v53;
  __CFArray *v54;
  CFNumberRef v55;
  CFTypeRef v56;
  __CFArray *v57;
  CFTypeRef v58;
  __CFArray *v59;
  xpc_object_t v60;
  CFMutableArrayRef v61;
  CFMutableDictionaryRef v62;
  CFMutableDictionaryRef v63;
  NSObject *v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  CFTypeID v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  void *v73;
  NSObject *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  xpc_object_t *v81;
  unsigned int v82;
  uint64_t v83;
  CFTypeRef v84;
  CFTypeRef v85;
  CFTypeRef v86;
  CFTypeRef v87;
  CFTypeRef v88;
  CFTypeRef v89;
  _QWORD aBlock[6];
  std::__shared_weak_count *v91;
  void *v92;
  dispatch_object_t v93;
  CFTypeRef v94;
  xpc_object_t v95;
  CFTypeRef v96;
  xpc_object_t object;
  xpc_object_t xdict;
  CFTypeRef cf;
  CFTypeRef v100;
  xpc_object_t v101;
  xpc_object_t *p_xdict;
  const char *v103;
  xpc_object_t v104;
  __CFDictionary *v105;
  CFMutableArrayRef v106;
  xpc_object_t v107;
  __CFDictionary *v108;
  int valuePtr;
  uint8_t buf[16];
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v6 = MEMORY[0x1C3B8A86C](*a2);
  v7 = MEMORY[0x1E0C812F8];
  if (v6 != MEMORY[0x1E0C812F8])
  {
    v8 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BF335000, v8, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", buf, 2u);
    }
    return;
  }
  v82 = a3;
  v108 = 0;
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v11 = Mutable;
  if (Mutable)
    v108 = Mutable;
  v107 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)buf = a2;
  *(_QWORD *)&buf[8] = "kWCMCellularSetAntBlocking_ClientInformationSet";
  xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &v107);
  v83 = a1;
  v12 = MEMORY[0x1C3B8A86C](v107);
  v13 = MEMORY[0x1E0C812C8];
  if (v12 == MEMORY[0x1E0C812C8])
  {
    v106 = 0;
    v14 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
    if (v14)
      v106 = v14;
    memset(buf, 170, sizeof(buf));
    v15 = v107;
    if (v107)
    {
      xpc_retain(v107);
      *(_QWORD *)buf = v15;
    }
    else
    {
      v15 = xpc_null_create();
      *(_QWORD *)buf = v15;
      if (!v15)
      {
        v15 = 0;
        *(_QWORD *)buf = xpc_null_create();
        goto LABEL_13;
      }
    }
    xpc_retain(v15);
LABEL_13:
    *(_QWORD *)&buf[8] = 0;
    xpc_release(v15);
    v86 = (CFTypeRef)*MEMORY[0x1E0DDF4A8];
    v87 = (CFTypeRef)*MEMORY[0x1E0DDF430];
    v85 = (CFTypeRef)*MEMORY[0x1E0DDF5C0];
    v89 = (CFTypeRef)*MEMORY[0x1E0DDF3D0];
    v88 = (CFTypeRef)*MEMORY[0x1E0DDF428];
    v84 = (CFTypeRef)*MEMORY[0x1E0DDF5B8];
    while (1)
    {
      v16 = v107;
      if (v107)
        xpc_retain(v107);
      else
        v16 = xpc_null_create();
      if (MEMORY[0x1C3B8A86C](v107) == v13)
      {
        count = xpc_array_get_count(v107);
        if (!v16)
        {
LABEL_23:
          v18 = xpc_null_create();
          goto LABEL_24;
        }
      }
      else
      {
        count = 0;
        if (!v16)
          goto LABEL_23;
      }
      xpc_retain(v16);
      v18 = v16;
LABEL_24:
      xpc_release(v16);
      v19 = *(xpc_object_t *)buf;
      v20 = *(_QWORD *)&buf[8];
      xpc_release(v18);
      if (v20 == count && v19 == v18)
      {
        xpc_release(*(xpc_object_t *)buf);
        v61 = v106;
        v11 = v108;
        ctu::cf::insert<__CFString const*,__CFArray *>(v108, (CFTypeRef)*MEMORY[0x1E0DDF6B0], v106);
        if (v61)
          CFRelease(v61);
        break;
      }
      v105 = 0;
      v21 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v22 = v21;
      if (v21)
        v105 = v21;
      p_xdict = (xpc_object_t *)buf;
      v103 = *(const char **)&buf[8];
      v104 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      xpc::array::object_proxy::operator xpc::dict((uint64_t)&p_xdict, &v104);
      value = (xpc_object_t *)xpc_dictionary_get_value(v104, "kWCMCellularSetAntBlocking_ClientId");
      p_xdict = value;
      if (value)
        xpc_retain(value);
      else
        p_xdict = (xpc_object_t *)xpc_null_create();
      v24 = xpc::dyn_cast_or_default((xpc *)&p_xdict, 0);
      ctu::cf::insert<__CFString const*,unsigned int>(v22, v87, v24, v9);
      xpc_release(p_xdict);
      v25 = (xpc_object_t *)xpc_dictionary_get_value(v104, "kWCMCellularSetAntBlocking_BlockVoice");
      p_xdict = v25;
      if (v25)
        xpc_retain(v25);
      else
        p_xdict = (xpc_object_t *)xpc_null_create();
      v26 = xpc::dyn_cast_or_default((xpc *)&p_xdict, 0);
      ctu::cf::insert<__CFString const*,BOOL>(v22, v86, v26);
      xpc_release(p_xdict);
      v27 = (xpc_object_t *)xpc_dictionary_get_value(v104, "kWCMCellularSetAntBlocking_TimeMultiplier");
      p_xdict = v27;
      if (v27)
        xpc_retain(v27);
      else
        p_xdict = (xpc_object_t *)xpc_null_create();
      v28 = xpc::dyn_cast_or_default((xpc *)&p_xdict, 0);
      ctu::cf::insert<__CFString const*,unsigned int>(v22, v85, v28, v9);
      xpc_release(p_xdict);
      v101 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      p_xdict = &v104;
      v103 = "kWCMCellularSetAntBlocking_BandInformationSet";
      xpc::dict::object_proxy::operator xpc::array((uint64_t)&p_xdict, &v101);
      if (MEMORY[0x1C3B8A86C](v101) == v13)
      {
        v100 = 0;
        v29 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
        if (v29)
          v100 = v29;
        v30 = v101;
        if (v101)
        {
          xpc_retain(v101);
          goto LABEL_43;
        }
        v30 = xpc_null_create();
        if (v30)
        {
LABEL_43:
          xpc_retain(v30);
          v31 = v30;
        }
        else
        {
          v30 = xpc_null_create();
          v31 = 0;
        }
        xpc_release(v31);
        v32 = 0;
        while (2)
        {
          v34 = v101;
          if (v101)
            xpc_retain(v101);
          else
            v34 = xpc_null_create();
          if (MEMORY[0x1C3B8A86C](v101) == v13)
          {
            v35 = xpc_array_get_count(v101);
            if (!v34)
              goto LABEL_54;
LABEL_52:
            xpc_retain(v34);
            v36 = v34;
          }
          else
          {
            v35 = 0;
            if (v34)
              goto LABEL_52;
LABEL_54:
            v36 = xpc_null_create();
          }
          xpc_release(v34);
          xpc_release(v36);
          if (v32 == v35 && v30 == v36)
          {
            xpc_release(v30);
            v58 = v100;
            v22 = v105;
            ctu::cf::insert<__CFString const*,__CFArray *>(v105, v84, v100);
            if (v58)
              CFRelease(v58);
            goto LABEL_111;
          }
          cf = 0;
          v37 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (v37)
            cf = v37;
          xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
          v38 = xpc_array_get_value(v30, v32);
          v39 = v38;
          if (v38)
          {
            xpc_retain(v38);
            xdict = v39;
            goto LABEL_62;
          }
          v39 = xpc_null_create();
          xdict = v39;
          if (v39)
          {
LABEL_62:
            if (MEMORY[0x1C3B8A86C](v39) != v7)
            {
              v40 = xpc_null_create();
              goto LABEL_66;
            }
            xpc_retain(v39);
          }
          else
          {
            v40 = xpc_null_create();
            v39 = 0;
LABEL_66:
            xdict = v40;
          }
          xpc_release(v39);
          if (MEMORY[0x1C3B8A86C](xdict) != v7)
          {
            v41 = (xpc_object_t *)cf;
            goto LABEL_102;
          }
          v42 = (xpc_object_t *)xpc_dictionary_get_value(xdict, "kWCMCellularSetAntBlocking_BandInfoSet_AntNum");
          p_xdict = v42;
          if (v42)
            xpc_retain(v42);
          else
            p_xdict = (xpc_object_t *)xpc_null_create();
          v43 = xpc::dyn_cast_or_default((xpc *)&p_xdict, 0);
          xpc_release(p_xdict);
          v41 = (xpc_object_t *)cf;
          ctu::cf::insert<__CFString const*,unsigned char>((__CFDictionary *)cf, v89, v43, v9);
          object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
          p_xdict = &xdict;
          v103 = "kWCMCellularSetAntBlocking_BandInfoSet_BandList";
          xpc::dict::object_proxy::operator xpc::array((uint64_t)&p_xdict, &object);
          if (MEMORY[0x1C3B8A86C](object) != v13)
            goto LABEL_101;
          v96 = 0;
          v44 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
          if (v44)
            v96 = v44;
          v45 = object;
          if (object)
          {
            xpc_retain(object);
            goto LABEL_78;
          }
          v45 = xpc_null_create();
          if (v45)
          {
LABEL_78:
            xpc_retain(v45);
            v46 = v45;
          }
          else
          {
            v45 = xpc_null_create();
            v46 = 0;
          }
          xpc_release(v46);
          v47 = 0;
LABEL_82:
          v49 = object;
          if (object)
            xpc_retain(object);
          else
            v49 = xpc_null_create();
          if (MEMORY[0x1C3B8A86C](object) == v13)
          {
            v50 = xpc_array_get_count(object);
            if (!v49)
              goto LABEL_89;
LABEL_87:
            xpc_retain(v49);
            v51 = v49;
          }
          else
          {
            v50 = 0;
            if (v49)
              goto LABEL_87;
LABEL_89:
            v51 = xpc_null_create();
          }
          xpc_release(v49);
          xpc_release(v51);
          if (v47 == v50 && v45 == v51)
          {
            xpc_release(v45);
            v56 = v96;
            v41 = (xpc_object_t *)cf;
            ctu::cf::insert<__CFString const*,__CFArray *>((__CFDictionary *)cf, v88, v96);
            if (v56)
              CFRelease(v56);
LABEL_101:
            xpc_release(object);
LABEL_102:
            v57 = (__CFArray *)v100;
            p_xdict = v41;
            if (v41)
            {
              CFRetain(v41);
              CFArrayAppendValue(v57, v41);
              CFRelease(v41);
            }
            xpc_release(xdict);
            if (cf)
              CFRelease(cf);
            if (v30)
            {
              xpc_retain(v30);
              v33 = v30;
            }
            else
            {
              v33 = xpc_null_create();
            }
            ++v32;
            xpc_release(v33);
            continue;
          }
          break;
        }
        v52 = xpc_array_get_value(v45, v47);
        v95 = v52;
        if (v52)
          xpc_retain(v52);
        else
          v95 = xpc_null_create();
        v53 = xpc::dyn_cast_or_default((xpc *)&v95, 0);
        v54 = (__CFArray *)v96;
        valuePtr = v53;
        v55 = CFNumberCreate(v9, kCFNumberIntType, &valuePtr);
        p_xdict = (xpc_object_t *)v55;
        if (v55)
        {
          CFArrayAppendValue(v54, v55);
          CFRelease(v55);
        }
        xpc_release(v95);
        if (v45)
        {
          xpc_retain(v45);
          v48 = v45;
        }
        else
        {
          v48 = xpc_null_create();
        }
        ++v47;
        xpc_release(v48);
        goto LABEL_82;
      }
LABEL_111:
      v59 = v106;
      p_xdict = (xpc_object_t *)v22;
      if (v22)
      {
        CFRetain(v22);
        CFArrayAppendValue(v59, v22);
        CFRelease(v22);
      }
      xpc_release(v101);
      xpc_release(v104);
      if (v22)
        CFRelease(v22);
      v60 = *(xpc_object_t *)buf;
      if (*(_QWORD *)buf)
        xpc_retain(*(xpc_object_t *)buf);
      else
        v60 = xpc_null_create();
      ++*(_QWORD *)&buf[8];
      xpc_release(v60);
    }
  }
  p_xdict = 0;
  v62 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v63 = v62;
  if (v62)
    p_xdict = (xpc_object_t *)v62;
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v62, (CFTypeRef)*MEMORY[0x1E0DDF490], v11);
  v64 = *(NSObject **)(v83 + 40);
  if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v63;
    _os_log_impl(&dword_1BF335000, v64, OS_LOG_TYPE_DEFAULT, "#I Setting Client Ant blocking with: %@", buf, 0xCu);
  }
  v66 = *(_QWORD *)(v83 + 72);
  v65 = *(std::__shared_weak_count **)(v83 + 80);
  *(_QWORD *)buf = v66;
  if (!v65 || (v67 = std::__shared_weak_count::lock(v65), (*(_QWORD *)&buf[8] = v67) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v68 = v67;
  v69 = *(_QWORD *)(v83 + 104);
  if (v63 && (v70 = CFGetTypeID(v63), v70 == CFDictionaryGetTypeID()))
  {
    v94 = v63;
    CFRetain(v63);
  }
  else
  {
    v94 = 0;
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State31handleSetClientAntBlocking_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_152;
  aBlock[4] = v83;
  aBlock[5] = v66;
  v91 = v68;
  p_shared_owners = (unint64_t *)&v68->__shared_owners_;
  do
    v72 = __ldxr(p_shared_owners);
  while (__stxr(v72 + 1, p_shared_owners));
  v73 = _Block_copy(aBlock);
  v74 = *(NSObject **)(v83 + 88);
  if (v74)
    dispatch_retain(*(dispatch_object_t *)(v83 + 88));
  if (v73)
  {
    v92 = _Block_copy(v73);
    v93 = v74;
    if (!v74)
      goto LABEL_137;
    goto LABEL_136;
  }
  v92 = 0;
  v93 = v74;
  if (v74)
LABEL_136:
    dispatch_retain(v74);
LABEL_137:
  (*(void (**)(uint64_t, CFTypeRef *, _QWORD, void **))(*(_QWORD *)v69 + 48))(v69, &v94, v82, &v92);
  if (v93)
    dispatch_release(v93);
  if (v92)
    _Block_release(v92);
  if (v74)
    dispatch_release(v74);
  if (v73)
    _Block_release(v73);
  if (v94)
    CFRelease(v94);
  v75 = v91;
  if (v91)
  {
    v76 = (unint64_t *)&v91->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_156;
  v79 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v80 = __ldaxr(v79);
  while (__stlxr(v80 - 1, v79));
  if (v80)
  {
LABEL_156:
    v81 = p_xdict;
    if (!p_xdict)
      goto LABEL_158;
    goto LABEL_157;
  }
  ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
  std::__shared_weak_count::__release_weak(v78);
  v81 = p_xdict;
  if (p_xdict)
LABEL_157:
    CFRelease(v81);
LABEL_158:
  xpc_release(v107);
  if (v108)
    CFRelease(v108);
}

void sub_1BF37A5FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,xpc_object_t a28,char a29,xpc_object_t object,xpc_object_t a31,char a32,int a33,__int16 a34,char a35,char a36)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State31handleSetClientAntBlocking_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set Ant blocking: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetClientAntBlockingExtended_sync(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  const __CFAllocator *v9;
  __CFDictionary *Mutable;
  __CFDictionary *v11;
  uint64_t v12;
  uint64_t v13;
  CFMutableArrayRef v14;
  xpc_object_t v15;
  xpc_object_t v16;
  size_t count;
  xpc_object_t v18;
  xpc_object_t v19;
  uint64_t v20;
  __CFDictionary *v21;
  __CFDictionary *v22;
  xpc_object_t *value;
  unsigned int v24;
  xpc_object_t *v25;
  int v26;
  xpc_object_t *v27;
  unsigned int v28;
  CFMutableArrayRef v29;
  xpc_object_t v30;
  void *v31;
  size_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  size_t v35;
  xpc_object_t v36;
  CFMutableDictionaryRef v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  xpc_object_t *v41;
  xpc_object_t *v42;
  unsigned __int8 v43;
  CFMutableArrayRef v44;
  xpc_object_t v45;
  void *v46;
  size_t v47;
  xpc_object_t v48;
  xpc_object_t v49;
  size_t v50;
  xpc_object_t v51;
  xpc_object_t v52;
  int v53;
  __CFArray *v54;
  CFNumberRef v55;
  CFTypeRef v56;
  __CFArray *v57;
  CFTypeRef v58;
  __CFArray *v59;
  xpc_object_t v60;
  CFMutableArrayRef v61;
  CFMutableDictionaryRef v62;
  CFMutableDictionaryRef v63;
  NSObject *v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  CFTypeID v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  void *v73;
  NSObject *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  xpc_object_t *v81;
  unsigned int v82;
  uint64_t v83;
  CFTypeRef v84;
  CFTypeRef v85;
  CFTypeRef v86;
  CFTypeRef v87;
  CFTypeRef v88;
  CFTypeRef v89;
  _QWORD aBlock[6];
  std::__shared_weak_count *v91;
  void *v92;
  dispatch_object_t v93;
  CFTypeRef v94;
  xpc_object_t v95;
  CFTypeRef v96;
  xpc_object_t object;
  xpc_object_t xdict;
  CFTypeRef cf;
  CFTypeRef v100;
  xpc_object_t v101;
  xpc_object_t *p_xdict;
  const char *v103;
  xpc_object_t v104;
  __CFDictionary *v105;
  CFMutableArrayRef v106;
  xpc_object_t v107;
  __CFDictionary *v108;
  int valuePtr;
  uint8_t buf[16];
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v6 = MEMORY[0x1C3B8A86C](*a2);
  v7 = MEMORY[0x1E0C812F8];
  if (v6 != MEMORY[0x1E0C812F8])
  {
    v8 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF335000, v8, OS_LOG_TYPE_ERROR, "Invalid XPC dict", buf, 2u);
    }
    return;
  }
  v82 = a3;
  v108 = 0;
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v11 = Mutable;
  if (Mutable)
    v108 = Mutable;
  v107 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)buf = a2;
  *(_QWORD *)&buf[8] = "kWCMCellularSetAntBlocking_ClientInformationSet";
  xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &v107);
  v83 = a1;
  v12 = MEMORY[0x1C3B8A86C](v107);
  v13 = MEMORY[0x1E0C812C8];
  if (v12 == MEMORY[0x1E0C812C8])
  {
    v106 = 0;
    v14 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
    if (v14)
      v106 = v14;
    memset(buf, 170, sizeof(buf));
    v15 = v107;
    if (v107)
    {
      xpc_retain(v107);
      *(_QWORD *)buf = v15;
    }
    else
    {
      v15 = xpc_null_create();
      *(_QWORD *)buf = v15;
      if (!v15)
      {
        v15 = 0;
        *(_QWORD *)buf = xpc_null_create();
        goto LABEL_13;
      }
    }
    xpc_retain(v15);
LABEL_13:
    *(_QWORD *)&buf[8] = 0;
    xpc_release(v15);
    v86 = (CFTypeRef)*MEMORY[0x1E0DDF4A8];
    v87 = (CFTypeRef)*MEMORY[0x1E0DDF430];
    v85 = (CFTypeRef)*MEMORY[0x1E0DDF5C0];
    v89 = (CFTypeRef)*MEMORY[0x1E0DDF3D0];
    v88 = (CFTypeRef)*MEMORY[0x1E0DDF428];
    v84 = (CFTypeRef)*MEMORY[0x1E0DDF5B8];
    while (1)
    {
      v16 = v107;
      if (v107)
        xpc_retain(v107);
      else
        v16 = xpc_null_create();
      if (MEMORY[0x1C3B8A86C](v107) == v13)
      {
        count = xpc_array_get_count(v107);
        if (!v16)
        {
LABEL_23:
          v18 = xpc_null_create();
          goto LABEL_24;
        }
      }
      else
      {
        count = 0;
        if (!v16)
          goto LABEL_23;
      }
      xpc_retain(v16);
      v18 = v16;
LABEL_24:
      xpc_release(v16);
      v19 = *(xpc_object_t *)buf;
      v20 = *(_QWORD *)&buf[8];
      xpc_release(v18);
      if (v20 == count && v19 == v18)
      {
        xpc_release(*(xpc_object_t *)buf);
        v61 = v106;
        v11 = v108;
        ctu::cf::insert<__CFString const*,__CFArray *>(v108, (CFTypeRef)*MEMORY[0x1E0DDF6B0], v106);
        if (v61)
          CFRelease(v61);
        break;
      }
      v105 = 0;
      v21 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v22 = v21;
      if (v21)
        v105 = v21;
      p_xdict = (xpc_object_t *)buf;
      v103 = *(const char **)&buf[8];
      v104 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      xpc::array::object_proxy::operator xpc::dict((uint64_t)&p_xdict, &v104);
      value = (xpc_object_t *)xpc_dictionary_get_value(v104, "kWCMCellularSetAntBlocking_ClientId");
      p_xdict = value;
      if (value)
        xpc_retain(value);
      else
        p_xdict = (xpc_object_t *)xpc_null_create();
      v24 = xpc::dyn_cast_or_default((xpc *)&p_xdict, 0);
      ctu::cf::insert<__CFString const*,unsigned int>(v22, v87, v24, v9);
      xpc_release(p_xdict);
      v25 = (xpc_object_t *)xpc_dictionary_get_value(v104, "kWCMCellularSetAntBlocking_BlockVoice");
      p_xdict = v25;
      if (v25)
        xpc_retain(v25);
      else
        p_xdict = (xpc_object_t *)xpc_null_create();
      v26 = xpc::dyn_cast_or_default((xpc *)&p_xdict, 0);
      ctu::cf::insert<__CFString const*,BOOL>(v22, v86, v26);
      xpc_release(p_xdict);
      v27 = (xpc_object_t *)xpc_dictionary_get_value(v104, "kWCMCellularSetAntBlocking_TimeMultiplier");
      p_xdict = v27;
      if (v27)
        xpc_retain(v27);
      else
        p_xdict = (xpc_object_t *)xpc_null_create();
      v28 = xpc::dyn_cast_or_default((xpc *)&p_xdict, 0);
      ctu::cf::insert<__CFString const*,unsigned int>(v22, v85, v28, v9);
      xpc_release(p_xdict);
      v101 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      p_xdict = &v104;
      v103 = "kWCMCellularSetAntBlocking_BandInformationSet";
      xpc::dict::object_proxy::operator xpc::array((uint64_t)&p_xdict, &v101);
      if (MEMORY[0x1C3B8A86C](v101) == v13)
      {
        v100 = 0;
        v29 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
        if (v29)
          v100 = v29;
        v30 = v101;
        if (v101)
        {
          xpc_retain(v101);
          goto LABEL_43;
        }
        v30 = xpc_null_create();
        if (v30)
        {
LABEL_43:
          xpc_retain(v30);
          v31 = v30;
        }
        else
        {
          v30 = xpc_null_create();
          v31 = 0;
        }
        xpc_release(v31);
        v32 = 0;
        while (2)
        {
          v34 = v101;
          if (v101)
            xpc_retain(v101);
          else
            v34 = xpc_null_create();
          if (MEMORY[0x1C3B8A86C](v101) == v13)
          {
            v35 = xpc_array_get_count(v101);
            if (!v34)
              goto LABEL_54;
LABEL_52:
            xpc_retain(v34);
            v36 = v34;
          }
          else
          {
            v35 = 0;
            if (v34)
              goto LABEL_52;
LABEL_54:
            v36 = xpc_null_create();
          }
          xpc_release(v34);
          xpc_release(v36);
          if (v32 == v35 && v30 == v36)
          {
            xpc_release(v30);
            v58 = v100;
            v22 = v105;
            ctu::cf::insert<__CFString const*,__CFArray *>(v105, v84, v100);
            if (v58)
              CFRelease(v58);
            goto LABEL_111;
          }
          cf = 0;
          v37 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (v37)
            cf = v37;
          xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
          v38 = xpc_array_get_value(v30, v32);
          v39 = v38;
          if (v38)
          {
            xpc_retain(v38);
            xdict = v39;
            goto LABEL_62;
          }
          v39 = xpc_null_create();
          xdict = v39;
          if (v39)
          {
LABEL_62:
            if (MEMORY[0x1C3B8A86C](v39) != v7)
            {
              v40 = xpc_null_create();
              goto LABEL_66;
            }
            xpc_retain(v39);
          }
          else
          {
            v40 = xpc_null_create();
            v39 = 0;
LABEL_66:
            xdict = v40;
          }
          xpc_release(v39);
          if (MEMORY[0x1C3B8A86C](xdict) != v7)
          {
            v41 = (xpc_object_t *)cf;
            goto LABEL_102;
          }
          v42 = (xpc_object_t *)xpc_dictionary_get_value(xdict, "kWCMCellularSetAntBlocking_BandInfoSet_AntNum");
          p_xdict = v42;
          if (v42)
            xpc_retain(v42);
          else
            p_xdict = (xpc_object_t *)xpc_null_create();
          v43 = xpc::dyn_cast_or_default((xpc *)&p_xdict, 0);
          xpc_release(p_xdict);
          v41 = (xpc_object_t *)cf;
          ctu::cf::insert<__CFString const*,unsigned char>((__CFDictionary *)cf, v89, v43, v9);
          object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
          p_xdict = &xdict;
          v103 = "kWCMCellularSetAntBlocking_BandInfoSet_BandList";
          xpc::dict::object_proxy::operator xpc::array((uint64_t)&p_xdict, &object);
          if (MEMORY[0x1C3B8A86C](object) != v13)
            goto LABEL_101;
          v96 = 0;
          v44 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
          if (v44)
            v96 = v44;
          v45 = object;
          if (object)
          {
            xpc_retain(object);
            goto LABEL_78;
          }
          v45 = xpc_null_create();
          if (v45)
          {
LABEL_78:
            xpc_retain(v45);
            v46 = v45;
          }
          else
          {
            v45 = xpc_null_create();
            v46 = 0;
          }
          xpc_release(v46);
          v47 = 0;
LABEL_82:
          v49 = object;
          if (object)
            xpc_retain(object);
          else
            v49 = xpc_null_create();
          if (MEMORY[0x1C3B8A86C](object) == v13)
          {
            v50 = xpc_array_get_count(object);
            if (!v49)
              goto LABEL_89;
LABEL_87:
            xpc_retain(v49);
            v51 = v49;
          }
          else
          {
            v50 = 0;
            if (v49)
              goto LABEL_87;
LABEL_89:
            v51 = xpc_null_create();
          }
          xpc_release(v49);
          xpc_release(v51);
          if (v47 == v50 && v45 == v51)
          {
            xpc_release(v45);
            v56 = v96;
            v41 = (xpc_object_t *)cf;
            ctu::cf::insert<__CFString const*,__CFArray *>((__CFDictionary *)cf, v88, v96);
            if (v56)
              CFRelease(v56);
LABEL_101:
            xpc_release(object);
LABEL_102:
            v57 = (__CFArray *)v100;
            p_xdict = v41;
            if (v41)
            {
              CFRetain(v41);
              CFArrayAppendValue(v57, v41);
              CFRelease(v41);
            }
            xpc_release(xdict);
            if (cf)
              CFRelease(cf);
            if (v30)
            {
              xpc_retain(v30);
              v33 = v30;
            }
            else
            {
              v33 = xpc_null_create();
            }
            ++v32;
            xpc_release(v33);
            continue;
          }
          break;
        }
        v52 = xpc_array_get_value(v45, v47);
        v95 = v52;
        if (v52)
          xpc_retain(v52);
        else
          v95 = xpc_null_create();
        v53 = xpc::dyn_cast_or_default((xpc *)&v95, 0);
        v54 = (__CFArray *)v96;
        valuePtr = v53;
        v55 = CFNumberCreate(v9, kCFNumberIntType, &valuePtr);
        p_xdict = (xpc_object_t *)v55;
        if (v55)
        {
          CFArrayAppendValue(v54, v55);
          CFRelease(v55);
        }
        xpc_release(v95);
        if (v45)
        {
          xpc_retain(v45);
          v48 = v45;
        }
        else
        {
          v48 = xpc_null_create();
        }
        ++v47;
        xpc_release(v48);
        goto LABEL_82;
      }
LABEL_111:
      v59 = v106;
      p_xdict = (xpc_object_t *)v22;
      if (v22)
      {
        CFRetain(v22);
        CFArrayAppendValue(v59, v22);
        CFRelease(v22);
      }
      xpc_release(v101);
      xpc_release(v104);
      if (v22)
        CFRelease(v22);
      v60 = *(xpc_object_t *)buf;
      if (*(_QWORD *)buf)
        xpc_retain(*(xpc_object_t *)buf);
      else
        v60 = xpc_null_create();
      ++*(_QWORD *)&buf[8];
      xpc_release(v60);
    }
  }
  p_xdict = 0;
  v62 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v63 = v62;
  if (v62)
    p_xdict = (xpc_object_t *)v62;
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v62, (CFTypeRef)*MEMORY[0x1E0DDF668], v11);
  v64 = *(NSObject **)(v83 + 40);
  if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v63;
    _os_log_impl(&dword_1BF335000, v64, OS_LOG_TYPE_DEFAULT, "#I Setting Client Ant blocking Extended with: %@ ", buf, 0xCu);
  }
  v66 = *(_QWORD *)(v83 + 72);
  v65 = *(std::__shared_weak_count **)(v83 + 80);
  *(_QWORD *)buf = v66;
  if (!v65 || (v67 = std::__shared_weak_count::lock(v65), (*(_QWORD *)&buf[8] = v67) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v68 = v67;
  v69 = *(_QWORD *)(v83 + 104);
  if (v63 && (v70 = CFGetTypeID(v63), v70 == CFDictionaryGetTypeID()))
  {
    v94 = v63;
    CFRetain(v63);
  }
  else
  {
    v94 = 0;
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State39handleSetClientAntBlockingExtended_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_153;
  aBlock[4] = v83;
  aBlock[5] = v66;
  v91 = v68;
  p_shared_owners = (unint64_t *)&v68->__shared_owners_;
  do
    v72 = __ldxr(p_shared_owners);
  while (__stxr(v72 + 1, p_shared_owners));
  v73 = _Block_copy(aBlock);
  v74 = *(NSObject **)(v83 + 88);
  if (v74)
    dispatch_retain(*(dispatch_object_t *)(v83 + 88));
  if (v73)
  {
    v92 = _Block_copy(v73);
    v93 = v74;
    if (!v74)
      goto LABEL_137;
    goto LABEL_136;
  }
  v92 = 0;
  v93 = v74;
  if (v74)
LABEL_136:
    dispatch_retain(v74);
LABEL_137:
  (*(void (**)(uint64_t, CFTypeRef *, _QWORD, void **))(*(_QWORD *)v69 + 48))(v69, &v94, v82, &v92);
  if (v93)
    dispatch_release(v93);
  if (v92)
    _Block_release(v92);
  if (v74)
    dispatch_release(v74);
  if (v73)
    _Block_release(v73);
  if (v94)
    CFRelease(v94);
  v75 = v91;
  if (v91)
  {
    v76 = (unint64_t *)&v91->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_156;
  v79 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v80 = __ldaxr(v79);
  while (__stlxr(v80 - 1, v79));
  if (v80)
  {
LABEL_156:
    v81 = p_xdict;
    if (!p_xdict)
      goto LABEL_158;
    goto LABEL_157;
  }
  ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
  std::__shared_weak_count::__release_weak(v78);
  v81 = p_xdict;
  if (p_xdict)
LABEL_157:
    CFRelease(v81);
LABEL_158:
  xpc_release(v107);
  if (v108)
    CFRelease(v108);
}

void sub_1BF37B59C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,xpc_object_t a28,char a29,xpc_object_t object,xpc_object_t a31,char a32,int a33,__int16 a34,char a35,char a36)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State39handleSetClientAntBlockingExtended_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set Ant blocking Extended: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleTriggerAntennaBlocking_sync(_QWORD *a1, xpc_object_t *a2, uint64_t a3)
{
  NSObject *v6;
  const __CFAllocator *v7;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v9;
  xpc_object_t value;
  int v11;
  xpc_object_t v12;
  unsigned int v13;
  xpc_object_t v14;
  unsigned int v15;
  CFMutableDictionaryRef v16;
  CFMutableDictionaryRef v17;
  NSObject *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  CFTypeID v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  void *v27;
  NSObject *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  CFTypeRef v35;
  _QWORD v36[6];
  std::__shared_weak_count *v37;
  void *aBlock;
  dispatch_object_t object;
  CFTypeRef cf;
  CFTypeRef v41;
  CFTypeRef v42;
  __int128 buf;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (MEMORY[0x1C3B8A86C](*a2) != MEMORY[0x1E0C812F8])
  {
    v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", (uint8_t *)&buf, 2u);
    }
    return;
  }
  v42 = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9 = Mutable;
  if (Mutable)
    v42 = Mutable;
  value = xpc_dictionary_get_value(*a2, "kWCMCellularTriggerClientAntBlockingReq_Enable");
  *(_QWORD *)&buf = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v11 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E0DDF5A8], v11);
  xpc_release((xpc_object_t)buf);
  v12 = xpc_dictionary_get_value(*a2, "kWCMCellularTriggerClientAntBlockingReq_ClientID");
  *(_QWORD *)&buf = v12;
  if (v12)
    xpc_retain(v12);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v13 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF618], v13, v7);
  xpc_release((xpc_object_t)buf);
  if (xpc_dictionary_get_value(*a2, "kWCMCellularTriggerClientAntBlockingReq_Duration"))
  {
    v14 = xpc_dictionary_get_value(*a2, "kWCMCellularTriggerClientAntBlockingReq_Duration");
    *(_QWORD *)&buf = v14;
    if (v14)
      xpc_retain(v14);
    else
      *(_QWORD *)&buf = xpc_null_create();
    v15 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF620], v15, v7);
    xpc_release((xpc_object_t)buf);
  }
  v41 = 0;
  v16 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v17 = v16;
  if (v16)
    v41 = v16;
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v16, (CFTypeRef)*MEMORY[0x1E0DDF418], v9);
  v18 = a1[5];
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v17;
    _os_log_impl(&dword_1BF335000, v18, OS_LOG_TYPE_DEFAULT, "#I Triggering client antenna blocking with params: %@", (uint8_t *)&buf, 0xCu);
  }
  v20 = a1[9];
  v19 = (std::__shared_weak_count *)a1[10];
  *(_QWORD *)&buf = v20;
  if (!v19 || (v21 = std::__shared_weak_count::lock(v19), (*((_QWORD *)&buf + 1) = v21) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v22 = v21;
  v23 = a1[13];
  if (v17 && (v24 = CFGetTypeID(v17), v24 == CFDictionaryGetTypeID()))
  {
    cf = v17;
    CFRetain(v17);
  }
  else
  {
    cf = 0;
  }
  v36[0] = MEMORY[0x1E0C809B0];
  v36[1] = 1174405120;
  v36[2] = ___ZN4coex6Module5State33handleTriggerAntennaBlocking_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  v36[3] = &__block_descriptor_tmp_157;
  v36[4] = a1;
  v36[5] = v20;
  v37 = v22;
  p_shared_owners = (unint64_t *)&v22->__shared_owners_;
  do
    v26 = __ldxr(p_shared_owners);
  while (__stxr(v26 + 1, p_shared_owners));
  v27 = _Block_copy(v36);
  v28 = a1[11];
  if (v28)
    dispatch_retain(v28);
  if (v27)
  {
    aBlock = _Block_copy(v27);
    object = v28;
    if (!v28)
      goto LABEL_34;
    goto LABEL_33;
  }
  aBlock = 0;
  object = v28;
  if (v28)
LABEL_33:
    dispatch_retain(v28);
LABEL_34:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(_QWORD *)v23 + 48))(v23, &cf, a3, &aBlock);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v28)
    dispatch_release(v28);
  if (v27)
    _Block_release(v27);
  if (cf)
    CFRelease(cf);
  v29 = v37;
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (!*((_QWORD *)&buf + 1))
    goto LABEL_53;
  v33 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (v34)
  {
LABEL_53:
    v35 = v41;
    if (!v41)
      goto LABEL_55;
    goto LABEL_54;
  }
  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
  std::__shared_weak_count::__release_weak(v32);
  v35 = v41;
  if (v41)
LABEL_54:
    CFRelease(v35);
LABEL_55:
  if (v42)
    CFRelease(v42);
}

void sub_1BF37BE40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State33handleTriggerAntennaBlocking_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to trigger antenna blocking: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetCC1_sync(_QWORD *a1, xpc_object_t *a2, uint64_t a3)
{
  NSObject *v6;
  const __CFAllocator *v7;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v9;
  xpc_object_t value;
  int v11;
  xpc_object_t v12;
  unsigned __int8 v13;
  unsigned int v14;
  xpc_object_t v15;
  unsigned __int8 v16;
  xpc_object_t v17;
  unsigned int v18;
  xpc_object_t v19;
  unsigned int v20;
  CFMutableDictionaryRef v21;
  CFMutableDictionaryRef v22;
  NSObject *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  CFTypeID v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  void *v32;
  NSObject *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  CFTypeRef v40;
  _QWORD v41[6];
  std::__shared_weak_count *v42;
  void *aBlock;
  dispatch_object_t object;
  CFTypeRef cf;
  CFTypeRef v46;
  CFTypeRef v47;
  __int128 buf;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (MEMORY[0x1C3B8A86C](*a2) != MEMORY[0x1E0C812F8])
  {
    v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", (uint8_t *)&buf, 2u);
    }
    return;
  }
  v47 = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9 = Mutable;
  if (Mutable)
    v47 = Mutable;
  value = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_Enable");
  *(_QWORD *)&buf = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v11 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E0DDF270], v11);
  xpc_release((xpc_object_t)buf);
  v12 = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_CoexTech");
  *(_QWORD *)&buf = v12;
  if (v12)
    xpc_retain(v12);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v13 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned char>(v9, (CFTypeRef)*MEMORY[0x1E0DDF248], v13, v7);
  xpc_release((xpc_object_t)buf);
  *(_QWORD *)&buf = xpc_int64_create(a3);
  if (!(_QWORD)buf)
    *(_QWORD *)&buf = xpc_null_create();
  v14 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF320], v14, v7);
  xpc_release((xpc_object_t)buf);
  v15 = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_CarrierId");
  *(_QWORD *)&buf = v15;
  if (v15)
    xpc_retain(v15);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v16 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned char>(v9, (CFTypeRef)*MEMORY[0x1E0DDF278], v16, v7);
  xpc_release((xpc_object_t)buf);
  if (xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_CenterFrequency")
    && xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_Bandwidth"))
  {
    v17 = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_CenterFrequency");
    *(_QWORD *)&buf = v17;
    if (v17)
      xpc_retain(v17);
    else
      *(_QWORD *)&buf = xpc_null_create();
    v18 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF388], v18, v7);
    xpc_release((xpc_object_t)buf);
    v19 = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_Bandwidth");
    *(_QWORD *)&buf = v19;
    if (v19)
      xpc_retain(v19);
    else
      *(_QWORD *)&buf = xpc_null_create();
    v20 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF268], v20, v7);
    xpc_release((xpc_object_t)buf);
  }
  v46 = 0;
  v21 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v22 = v21;
  if (v21)
    v46 = v21;
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v21, (CFTypeRef)*MEMORY[0x1E0DDF288], v9);
  v23 = a1[5];
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v22;
    _os_log_impl(&dword_1BF335000, v23, OS_LOG_TYPE_DEFAULT, "#I Setting CC1 with: %@", (uint8_t *)&buf, 0xCu);
  }
  v25 = a1[9];
  v24 = (std::__shared_weak_count *)a1[10];
  *(_QWORD *)&buf = v25;
  if (!v24 || (v26 = std::__shared_weak_count::lock(v24), (*((_QWORD *)&buf + 1) = v26) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v27 = v26;
  v28 = a1[13];
  if (v22 && (v29 = CFGetTypeID(v22), v29 == CFDictionaryGetTypeID()))
  {
    cf = v22;
    CFRetain(v22);
  }
  else
  {
    cf = 0;
  }
  v41[0] = MEMORY[0x1E0C809B0];
  v41[1] = 1174405120;
  v41[2] = ___ZN4coex6Module5State17handleSetCC1_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  v41[3] = &__block_descriptor_tmp_163;
  v41[4] = a1;
  v41[5] = v25;
  v42 = v27;
  p_shared_owners = (unint64_t *)&v27->__shared_owners_;
  do
    v31 = __ldxr(p_shared_owners);
  while (__stxr(v31 + 1, p_shared_owners));
  v32 = _Block_copy(v41);
  v33 = a1[11];
  if (v33)
    dispatch_retain(v33);
  if (v32)
  {
    aBlock = _Block_copy(v32);
    object = v33;
    if (!v33)
      goto LABEL_43;
    goto LABEL_42;
  }
  aBlock = 0;
  object = v33;
  if (v33)
LABEL_42:
    dispatch_retain(v33);
LABEL_43:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(_QWORD *)v28 + 48))(v28, &cf, a3, &aBlock);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v33)
    dispatch_release(v33);
  if (v32)
    _Block_release(v32);
  if (cf)
    CFRelease(cf);
  v34 = v42;
  if (v42)
  {
    v35 = (unint64_t *)&v42->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (!*((_QWORD *)&buf + 1))
    goto LABEL_62;
  v38 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (v39)
  {
LABEL_62:
    v40 = v46;
    if (!v46)
      goto LABEL_64;
    goto LABEL_63;
  }
  ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
  std::__shared_weak_count::__release_weak(v37);
  v40 = v46;
  if (v46)
LABEL_63:
    CFRelease(v40);
LABEL_64:
  if (v47)
    CFRelease(v47);
}

void sub_1BF37C58C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State17handleSetCC1_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set CC1: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetCC2_sync(_QWORD *a1, xpc_object_t *a2, uint64_t a3)
{
  NSObject *v6;
  const __CFAllocator *v7;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v9;
  xpc_object_t value;
  int v11;
  xpc_object_t v12;
  unsigned __int8 v13;
  unsigned int v14;
  xpc_object_t v15;
  unsigned __int8 v16;
  xpc_object_t v17;
  unsigned int v18;
  xpc_object_t v19;
  unsigned int v20;
  CFMutableDictionaryRef v21;
  CFMutableDictionaryRef v22;
  NSObject *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  CFTypeID v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  void *v32;
  NSObject *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  CFTypeRef v40;
  _QWORD v41[6];
  std::__shared_weak_count *v42;
  void *aBlock;
  dispatch_object_t object;
  CFTypeRef cf;
  CFTypeRef v46;
  CFTypeRef v47;
  __int128 buf;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (MEMORY[0x1C3B8A86C](*a2) != MEMORY[0x1E0C812F8])
  {
    v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", (uint8_t *)&buf, 2u);
    }
    return;
  }
  v47 = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9 = Mutable;
  if (Mutable)
    v47 = Mutable;
  value = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_Enable");
  *(_QWORD *)&buf = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v11 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E0DDF270], v11);
  xpc_release((xpc_object_t)buf);
  v12 = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_CoexTech");
  *(_QWORD *)&buf = v12;
  if (v12)
    xpc_retain(v12);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v13 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned char>(v9, (CFTypeRef)*MEMORY[0x1E0DDF248], v13, v7);
  xpc_release((xpc_object_t)buf);
  *(_QWORD *)&buf = xpc_int64_create(a3);
  if (!(_QWORD)buf)
    *(_QWORD *)&buf = xpc_null_create();
  v14 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF320], v14, v7);
  xpc_release((xpc_object_t)buf);
  v15 = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_CarrierId");
  *(_QWORD *)&buf = v15;
  if (v15)
    xpc_retain(v15);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v16 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned char>(v9, (CFTypeRef)*MEMORY[0x1E0DDF278], v16, v7);
  xpc_release((xpc_object_t)buf);
  if (xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_CenterFrequency")
    && xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_Bandwidth"))
  {
    v17 = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_CenterFrequency");
    *(_QWORD *)&buf = v17;
    if (v17)
      xpc_retain(v17);
    else
      *(_QWORD *)&buf = xpc_null_create();
    v18 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF388], v18, v7);
    xpc_release((xpc_object_t)buf);
    v19 = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_Bandwidth");
    *(_QWORD *)&buf = v19;
    if (v19)
      xpc_retain(v19);
    else
      *(_QWORD *)&buf = xpc_null_create();
    v20 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF268], v20, v7);
    xpc_release((xpc_object_t)buf);
  }
  v46 = 0;
  v21 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v22 = v21;
  if (v21)
    v46 = v21;
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v21, (CFTypeRef)*MEMORY[0x1E0DDF290], v9);
  v23 = a1[5];
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v22;
    _os_log_impl(&dword_1BF335000, v23, OS_LOG_TYPE_DEFAULT, "#I Setting CC2 with: %@", (uint8_t *)&buf, 0xCu);
  }
  v25 = a1[9];
  v24 = (std::__shared_weak_count *)a1[10];
  *(_QWORD *)&buf = v25;
  if (!v24 || (v26 = std::__shared_weak_count::lock(v24), (*((_QWORD *)&buf + 1) = v26) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v27 = v26;
  v28 = a1[13];
  if (v22 && (v29 = CFGetTypeID(v22), v29 == CFDictionaryGetTypeID()))
  {
    cf = v22;
    CFRetain(v22);
  }
  else
  {
    cf = 0;
  }
  v41[0] = MEMORY[0x1E0C809B0];
  v41[1] = 1174405120;
  v41[2] = ___ZN4coex6Module5State17handleSetCC2_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  v41[3] = &__block_descriptor_tmp_164;
  v41[4] = a1;
  v41[5] = v25;
  v42 = v27;
  p_shared_owners = (unint64_t *)&v27->__shared_owners_;
  do
    v31 = __ldxr(p_shared_owners);
  while (__stxr(v31 + 1, p_shared_owners));
  v32 = _Block_copy(v41);
  v33 = a1[11];
  if (v33)
    dispatch_retain(v33);
  if (v32)
  {
    aBlock = _Block_copy(v32);
    object = v33;
    if (!v33)
      goto LABEL_43;
    goto LABEL_42;
  }
  aBlock = 0;
  object = v33;
  if (v33)
LABEL_42:
    dispatch_retain(v33);
LABEL_43:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(_QWORD *)v28 + 48))(v28, &cf, a3, &aBlock);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v33)
    dispatch_release(v33);
  if (v32)
    _Block_release(v32);
  if (cf)
    CFRelease(cf);
  v34 = v42;
  if (v42)
  {
    v35 = (unint64_t *)&v42->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (!*((_QWORD *)&buf + 1))
    goto LABEL_62;
  v38 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (v39)
  {
LABEL_62:
    v40 = v46;
    if (!v46)
      goto LABEL_64;
    goto LABEL_63;
  }
  ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
  std::__shared_weak_count::__release_weak(v37);
  v40 = v46;
  if (v46)
LABEL_63:
    CFRelease(v40);
LABEL_64:
  if (v47)
    CFRelease(v47);
}

void sub_1BF37CD3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State17handleSetCC2_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set CC2: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetLaaGpioThrottle_sync(_QWORD *a1, xpc_object_t *a2, uint64_t a3)
{
  NSObject *v6;
  const __CFAllocator *v7;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v9;
  xpc_object_t value;
  int v11;
  xpc_object_t v12;
  unsigned int v13;
  CFMutableDictionaryRef v14;
  CFMutableDictionaryRef v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  CFTypeID v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  void *v25;
  NSObject *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  CFTypeRef v33;
  _QWORD v34[6];
  std::__shared_weak_count *v35;
  void *aBlock;
  dispatch_object_t object;
  CFTypeRef cf;
  CFTypeRef v39;
  CFTypeRef v40;
  __int128 buf;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (MEMORY[0x1C3B8A86C](*a2) != MEMORY[0x1E0C812F8])
  {
    v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", (uint8_t *)&buf, 2u);
    }
    return;
  }
  v40 = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9 = Mutable;
  if (Mutable)
    v40 = Mutable;
  value = xpc_dictionary_get_value(*a2, "kWCMCellularSetLaaGpioThrottleReq_Enabled");
  *(_QWORD *)&buf = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v11 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E0DDF518], v11);
  xpc_release((xpc_object_t)buf);
  v12 = xpc_dictionary_get_value(*a2, "kWCMCellularSetLaaGpioThrottleReq_Periodicity");
  *(_QWORD *)&buf = v12;
  if (v12)
    xpc_retain(v12);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v13 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF610], v13, v7);
  xpc_release((xpc_object_t)buf);
  v39 = 0;
  v14 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v15 = v14;
  if (v14)
    v39 = v14;
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v14, (CFTypeRef)*MEMORY[0x1E0DDF4F8], v9);
  v16 = a1[5];
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v15;
    _os_log_impl(&dword_1BF335000, v16, OS_LOG_TYPE_DEFAULT, "#I Setting LAA GPIO throttle with: %@", (uint8_t *)&buf, 0xCu);
  }
  v18 = a1[9];
  v17 = (std::__shared_weak_count *)a1[10];
  *(_QWORD *)&buf = v18;
  if (!v17 || (v19 = std::__shared_weak_count::lock(v17), (*((_QWORD *)&buf + 1) = v19) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v20 = v19;
  v21 = a1[13];
  if (v15 && (v22 = CFGetTypeID(v15), v22 == CFDictionaryGetTypeID()))
  {
    cf = v15;
    CFRetain(v15);
  }
  else
  {
    cf = 0;
  }
  v34[0] = MEMORY[0x1E0C809B0];
  v34[1] = 1174405120;
  v34[2] = ___ZN4coex6Module5State29handleSetLaaGpioThrottle_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  v34[3] = &__block_descriptor_tmp_167;
  v34[4] = a1;
  v34[5] = v18;
  v35 = v20;
  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v24 = __ldxr(p_shared_owners);
  while (__stxr(v24 + 1, p_shared_owners));
  v25 = _Block_copy(v34);
  v26 = a1[11];
  if (v26)
    dispatch_retain(v26);
  if (v25)
  {
    aBlock = _Block_copy(v25);
    object = v26;
    if (!v26)
      goto LABEL_29;
    goto LABEL_28;
  }
  aBlock = 0;
  object = v26;
  if (v26)
LABEL_28:
    dispatch_retain(v26);
LABEL_29:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(_QWORD *)v21 + 48))(v21, &cf, a3, &aBlock);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v26)
    dispatch_release(v26);
  if (v25)
    _Block_release(v25);
  if (cf)
    CFRelease(cf);
  v27 = v35;
  if (v35)
  {
    v28 = (unint64_t *)&v35->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (!*((_QWORD *)&buf + 1))
    goto LABEL_48;
  v31 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (v32)
  {
LABEL_48:
    v33 = v39;
    if (!v39)
      goto LABEL_50;
    goto LABEL_49;
  }
  ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
  std::__shared_weak_count::__release_weak(v30);
  v33 = v39;
  if (v39)
LABEL_49:
    CFRelease(v33);
LABEL_50:
  if (v40)
    CFRelease(v40);
}

void sub_1BF37D374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State29handleSetLaaGpioThrottle_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set LAA GPIO throttle: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetGnssParams_sync(_QWORD *a1, xpc_object_t *a2, uint64_t a3)
{
  NSObject *v6;
  const __CFAllocator *v7;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v9;
  xpc_object_t value;
  int v11;
  xpc_object_t v12;
  unsigned int v13;
  xpc_object_t v14;
  unsigned int v15;
  CFMutableDictionaryRef v16;
  CFMutableDictionaryRef v17;
  NSObject *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  CFTypeID v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  void *v27;
  NSObject *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  CFTypeRef v35;
  _QWORD v36[6];
  std::__shared_weak_count *v37;
  void *aBlock;
  dispatch_object_t object;
  CFTypeRef cf;
  CFTypeRef v41;
  CFTypeRef v42;
  __int128 buf;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (MEMORY[0x1C3B8A86C](*a2) != MEMORY[0x1E0C812F8])
  {
    v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", (uint8_t *)&buf, 2u);
    }
    return;
  }
  v42 = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9 = Mutable;
  if (Mutable)
    v42 = Mutable;
  value = xpc_dictionary_get_value(*a2, "kWCMCellularSetGnssParamsReq_Enabled");
  *(_QWORD *)&buf = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v11 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E0DDF2B0], v11);
  xpc_release((xpc_object_t)buf);
  v12 = xpc_dictionary_get_value(*a2, "kWCMCellularSetGnssParamsReq_Band");
  *(_QWORD *)&buf = v12;
  if (v12)
    xpc_retain(v12);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v13 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF228], v13, v7);
  xpc_release((xpc_object_t)buf);
  v14 = xpc_dictionary_get_value(*a2, "kWCMCellularSetGnssParamsReq_L5Level");
  *(_QWORD *)&buf = v14;
  if (v14)
    xpc_retain(v14);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v15 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF2B8], v15, v7);
  xpc_release((xpc_object_t)buf);
  v41 = 0;
  v16 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v17 = v16;
  if (v16)
    v41 = v16;
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v16, (CFTypeRef)*MEMORY[0x1E0DDF3B8], v9);
  v18 = a1[5];
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v17;
    _os_log_impl(&dword_1BF335000, v18, OS_LOG_TYPE_DEFAULT, "#I Setting Gnss params with: %@", (uint8_t *)&buf, 0xCu);
  }
  v20 = a1[9];
  v19 = (std::__shared_weak_count *)a1[10];
  *(_QWORD *)&buf = v20;
  if (!v19 || (v21 = std::__shared_weak_count::lock(v19), (*((_QWORD *)&buf + 1) = v21) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v22 = v21;
  v23 = a1[13];
  if (v17 && (v24 = CFGetTypeID(v17), v24 == CFDictionaryGetTypeID()))
  {
    cf = v17;
    CFRetain(v17);
  }
  else
  {
    cf = 0;
  }
  v36[0] = MEMORY[0x1E0C809B0];
  v36[1] = 1174405120;
  v36[2] = ___ZN4coex6Module5State24handleSetGnssParams_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  v36[3] = &__block_descriptor_tmp_171;
  v36[4] = a1;
  v36[5] = v20;
  v37 = v22;
  p_shared_owners = (unint64_t *)&v22->__shared_owners_;
  do
    v26 = __ldxr(p_shared_owners);
  while (__stxr(v26 + 1, p_shared_owners));
  v27 = _Block_copy(v36);
  v28 = a1[11];
  if (v28)
    dispatch_retain(v28);
  if (v27)
  {
    aBlock = _Block_copy(v27);
    object = v28;
    if (!v28)
      goto LABEL_32;
    goto LABEL_31;
  }
  aBlock = 0;
  object = v28;
  if (v28)
LABEL_31:
    dispatch_retain(v28);
LABEL_32:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(_QWORD *)v23 + 48))(v23, &cf, a3, &aBlock);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v28)
    dispatch_release(v28);
  if (v27)
    _Block_release(v27);
  if (cf)
    CFRelease(cf);
  v29 = v37;
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (!*((_QWORD *)&buf + 1))
    goto LABEL_51;
  v33 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (v34)
  {
LABEL_51:
    v35 = v41;
    if (!v41)
      goto LABEL_53;
    goto LABEL_52;
  }
  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
  std::__shared_weak_count::__release_weak(v32);
  v35 = v41;
  if (v41)
LABEL_52:
    CFRelease(v35);
LABEL_53:
  if (v42)
    CFRelease(v42);
}

void sub_1BF37D97C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State24handleSetGnssParams_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set Gnss params: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetLAAConfig_sync(_QWORD *a1, xpc_object_t *a2, uint64_t a3)
{
  NSObject *v6;
  const __CFAllocator *v7;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v9;
  xpc_object_t value;
  NSObject *v11;
  int v12;
  xpc_object_t v13;
  int v14;
  xpc_object_t v15;
  int v16;
  xpc_object_t v17;
  int v18;
  xpc_object_t v19;
  int v20;
  xpc_object_t v21;
  int v22;
  CFMutableDictionaryRef v23;
  CFMutableDictionaryRef v24;
  NSObject *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  CFTypeID v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  void *v34;
  NSObject *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  CFTypeRef v42;
  _QWORD v43[6];
  std::__shared_weak_count *v44;
  void *aBlock;
  dispatch_object_t object;
  CFTypeRef cf;
  CFTypeRef v48;
  CFTypeRef v49;
  __int128 buf;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (MEMORY[0x1C3B8A86C](*a2) != MEMORY[0x1E0C812F8])
  {
    v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", (uint8_t *)&buf, 2u);
    }
    return;
  }
  if (xpc_dictionary_get_value(*a2, "WCMCellularSetLAAConfig_CoexEnable"))
  {
    v49 = 0;
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v9 = Mutable;
    if (Mutable)
      v49 = Mutable;
    value = xpc_dictionary_get_value(*a2, "WCMCellularSetLAAConfig_CoexEnable");
    *(_QWORD *)&buf = value;
    if (value)
      xpc_retain(value);
    else
      *(_QWORD *)&buf = xpc_null_create();
    v12 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E0DDF478], v12);
    xpc_release((xpc_object_t)buf);
    v13 = xpc_dictionary_get_value(*a2, "WCMCellularSetLAAConfig_ProtectCQIPeriod");
    *(_QWORD *)&buf = v13;
    if (v13)
      xpc_retain(v13);
    else
      *(_QWORD *)&buf = xpc_null_create();
    v14 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF5D0], v14, v7);
    xpc_release((xpc_object_t)buf);
    v15 = xpc_dictionary_get_value(*a2, "WCMCellularSetLAAConfig_ThresholdIn");
    *(_QWORD *)&buf = v15;
    if (v15)
      xpc_retain(v15);
    else
      *(_QWORD *)&buf = xpc_null_create();
    v16 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF480], v16, v7);
    xpc_release((xpc_object_t)buf);
    v17 = xpc_dictionary_get_value(*a2, "WCMCellularSetLAAConfig_ThresholdOut");
    *(_QWORD *)&buf = v17;
    if (v17)
      xpc_retain(v17);
    else
      *(_QWORD *)&buf = xpc_null_create();
    v18 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF4D8], v18, v7);
    xpc_release((xpc_object_t)buf);
    v19 = xpc_dictionary_get_value(*a2, "WCMCellularSetLAAConfig_DeactTimer");
    *(_QWORD *)&buf = v19;
    if (v19)
      xpc_retain(v19);
    else
      *(_QWORD *)&buf = xpc_null_create();
    v20 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF448], v20, v7);
    xpc_release((xpc_object_t)buf);
    v21 = xpc_dictionary_get_value(*a2, "WCMCellularSetLAAConfig_DeactStopTimer");
    *(_QWORD *)&buf = v21;
    if (v21)
      xpc_retain(v21);
    else
      *(_QWORD *)&buf = xpc_null_create();
    v22 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF558], v22, v7);
    xpc_release((xpc_object_t)buf);
    v48 = 0;
    v23 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v24 = v23;
    if (v23)
      v48 = v23;
    ctu::cf::insert<__CFString const*,__CFDictionary *>(v23, (CFTypeRef)*MEMORY[0x1E0DDF310], v9);
    v25 = a1[5];
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v24;
      _os_log_impl(&dword_1BF335000, v25, OS_LOG_TYPE_DEFAULT, "#I Setting LAA config with: %@", (uint8_t *)&buf, 0xCu);
    }
    v27 = a1[9];
    v26 = (std::__shared_weak_count *)a1[10];
    *(_QWORD *)&buf = v27;
    if (!v26 || (v28 = std::__shared_weak_count::lock(v26), (*((_QWORD *)&buf + 1) = v28) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v29 = v28;
    v30 = a1[13];
    if (v24 && (v31 = CFGetTypeID(v24), v31 == CFDictionaryGetTypeID()))
    {
      cf = v24;
      CFRetain(v24);
    }
    else
    {
      cf = 0;
    }
    v43[0] = MEMORY[0x1E0C809B0];
    v43[1] = 1174405120;
    v43[2] = ___ZN4coex6Module5State23handleSetLAAConfig_syncEN3xpc4dictENS_5SubIdE_block_invoke;
    v43[3] = &__block_descriptor_tmp_178;
    v43[4] = a1;
    v43[5] = v27;
    v44 = v29;
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v33 = __ldxr(p_shared_owners);
    while (__stxr(v33 + 1, p_shared_owners));
    v34 = _Block_copy(v43);
    v35 = a1[11];
    if (v35)
      dispatch_retain(v35);
    if (v34)
    {
      aBlock = _Block_copy(v34);
      object = v35;
      if (!v35)
        goto LABEL_45;
    }
    else
    {
      aBlock = 0;
      object = v35;
      if (!v35)
      {
LABEL_45:
        (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(_QWORD *)v30 + 48))(v30, &cf, a3, &aBlock);
        if (object)
          dispatch_release(object);
        if (aBlock)
          _Block_release(aBlock);
        if (v35)
          dispatch_release(v35);
        if (v34)
          _Block_release(v34);
        if (cf)
          CFRelease(cf);
        v36 = v44;
        if (v44)
        {
          v37 = (unint64_t *)&v44->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        v39 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
        if (!*((_QWORD *)&buf + 1))
          goto LABEL_64;
        v40 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
          v42 = v48;
          if (!v48)
          {
LABEL_66:
            if (v49)
              CFRelease(v49);
            return;
          }
        }
        else
        {
LABEL_64:
          v42 = v48;
          if (!v48)
            goto LABEL_66;
        }
        CFRelease(v42);
        goto LABEL_66;
      }
    }
    dispatch_retain(v35);
    goto LABEL_45;
  }
  v11 = a1[5];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1BF335000, v11, OS_LOG_TYPE_DEFAULT, "#E Missing LAA config", (uint8_t *)&buf, 2u);
  }
}

void sub_1BF37E104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State23handleSetLAAConfig_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set LAA config: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetFCMBCMAntennaMode_sync(_QWORD *a1, xpc_object_t *a2, uint64_t a3)
{
  NSObject *v6;
  xpc_object_t value;
  NSObject *v8;
  unsigned int v9;
  const __CFAllocator *v10;
  CFMutableArrayRef Mutable;
  CFTypeRef v12;
  uint64_t v13;
  CFMutableDictionaryRef v14;
  __CFDictionary *v15;
  CFMutableDictionaryRef v16;
  CFMutableDictionaryRef v17;
  NSObject *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  CFTypeID v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  void *v27;
  NSObject *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  NSObject *v35;
  CFTypeRef v36;
  _QWORD aBlock[6];
  std::__shared_weak_count *v38;
  void *v39;
  dispatch_object_t object;
  CFTypeRef v41;
  CFTypeRef v42;
  CFTypeRef v43;
  _QWORD applier[5];
  uint8_t buf[8];
  uint8_t *v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t);
  void (*v49)(uint64_t);
  CFTypeRef cf;
  xpc_object_t v51;
  __int128 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (MEMORY[0x1C3B8A86C](*a2) != MEMORY[0x1E0C812F8])
  {
    v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", buf, 2u);
    }
    return;
  }
  if (xpc_dictionary_get_value(*a2, "WCMCellularSetFCM_BCM_Antenna_Switching_RAT"))
  {
    value = xpc_dictionary_get_value(*a2, "WCMCellularSetFCM_BCM_Antenna_Switching_RAT");
    *(_QWORD *)buf = value;
    if (value)
      xpc_retain(value);
    else
      *(_QWORD *)buf = xpc_null_create();
    v9 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    xpc_release(*(xpc_object_t *)buf);
    v51 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)buf = a2;
    v46 = (uint8_t *)"WCMCellularSetFCM_BCM_Antenna_Switching_PortMapInformationSet";
    xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &v51);
    *(_QWORD *)buf = 0;
    v46 = buf;
    v47 = 0x3002000000;
    v48 = __Block_byref_object_copy__0;
    v49 = __Block_byref_object_dispose__0;
    cf = 0;
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v12 = cf;
      cf = Mutable;
      if (v12)
        CFRelease(v12);
    }
    v13 = MEMORY[0x1E0C809B0];
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 0x40000000;
    applier[2] = ___ZN4coex6Module5State31handleSetFCMBCMAntennaMode_syncEN3xpc4dictENS_5SubIdE_block_invoke;
    applier[3] = &unk_1E78FD790;
    applier[4] = buf;
    xpc_array_apply(v51, applier);
    if (!CFArrayGetCount(*((CFArrayRef *)v46 + 5)))
    {
      v35 = a1[5];
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v52) = 0;
        _os_log_debug_impl(&dword_1BF335000, v35, OS_LOG_TYPE_DEBUG, "#D Empty port map passed for FCM BCM Antenna mode", (uint8_t *)&v52, 2u);
        _Block_object_dispose(buf, 8);
        v36 = cf;
        if (!cf)
          goto LABEL_60;
        goto LABEL_59;
      }
LABEL_58:
      _Block_object_dispose(buf, 8);
      v36 = cf;
      if (!cf)
      {
LABEL_60:
        xpc_release(v51);
        return;
      }
LABEL_59:
      CFRelease(v36);
      goto LABEL_60;
    }
    v43 = 0;
    v14 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v15 = v14;
    if (v14)
      v43 = v14;
    ctu::cf::insert<__CFString const*,unsigned int>(v14, (CFTypeRef)*MEMORY[0x1E0DDF5C8], v9, v10);
    ctu::cf::insert<__CFString const*,__CFArray *>(v15, (CFTypeRef)*MEMORY[0x1E0DDF6D0], *((CFTypeRef *)v46 + 5));
    v42 = 0;
    v16 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v17 = v16;
    if (v16)
      v42 = v16;
    ctu::cf::insert<__CFString const*,__CFDictionary *>(v16, (CFTypeRef)*MEMORY[0x1E0DDF498], v15);
    v18 = a1[5];
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v52) = 138412290;
      *(_QWORD *)((char *)&v52 + 4) = v17;
      _os_log_impl(&dword_1BF335000, v18, OS_LOG_TYPE_DEFAULT, "#I Setting FCM BCM Antenna mode with: %@", (uint8_t *)&v52, 0xCu);
    }
    v20 = a1[9];
    v19 = (std::__shared_weak_count *)a1[10];
    *(_QWORD *)&v52 = v20;
    if (!v19 || (v21 = std::__shared_weak_count::lock(v19), (*((_QWORD *)&v52 + 1) = v21) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v22 = v21;
    v23 = a1[13];
    if (v17 && (v24 = CFGetTypeID(v17), v24 == CFDictionaryGetTypeID()))
    {
      v41 = v17;
      CFRetain(v17);
    }
    else
    {
      v41 = 0;
    }
    aBlock[0] = v13;
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN4coex6Module5State31handleSetFCMBCMAntennaMode_syncEN3xpc4dictENS_5SubIdE_block_invoke_185;
    aBlock[3] = &__block_descriptor_tmp_186;
    aBlock[4] = a1;
    aBlock[5] = v20;
    v38 = v22;
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
    v27 = _Block_copy(aBlock);
    v28 = a1[11];
    if (v28)
      dispatch_retain(v28);
    if (v27)
    {
      v39 = _Block_copy(v27);
      object = v28;
      if (!v28)
      {
LABEL_33:
        (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(_QWORD *)v23 + 48))(v23, &v41, a3, &v39);
        if (object)
          dispatch_release(object);
        if (v39)
          _Block_release(v39);
        if (v28)
          dispatch_release(v28);
        if (v27)
          _Block_release(v27);
        if (v41)
          CFRelease(v41);
        v29 = v38;
        if (v38)
        {
          v30 = (unint64_t *)&v38->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v32 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
        if (*((_QWORD *)&v52 + 1))
        {
          v33 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        if (v42)
          CFRelease(v42);
        if (v43)
          CFRelease(v43);
        goto LABEL_58;
      }
    }
    else
    {
      v39 = 0;
      object = v28;
      if (!v28)
        goto LABEL_33;
    }
    dispatch_retain(v28);
    goto LABEL_33;
  }
  v8 = a1[5];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v8, OS_LOG_TYPE_DEFAULT, "#E Invalid RAT option passed for FCM BCM Antenna mode", buf, 2u);
  }
}

void sub_1BF37E888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t ___ZN4coex6Module5State31handleSetFCMBCMAntennaMode_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, int a2, xpc_object_t object)
{
  xpc_object_t v4;
  xpc_object_t v5;
  CFMutableDictionaryRef Mutable;
  ctu *value;
  void *v8;
  ctu *v9;
  void *v10;
  __CFArray *v11;
  __CFDictionary *v13;
  CFTypeRef cf;

  if (object)
  {
    v4 = object;
    xpc_retain(object);
  }
  else
  {
    v4 = xpc_null_create();
    if (!v4)
    {
      v5 = xpc_null_create();
      v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v4) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v4);
    v5 = v4;
  }
  else
  {
    v5 = xpc_null_create();
  }
LABEL_8:
  xpc_release(v4);
  v13 = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
    v13 = Mutable;
  if (xpc_dictionary_get_value(v5, "WCMCellularSetFCM_BCM_Antenna_Switching_Band")
    && xpc_dictionary_get_value(v5, "WCMCellularSetFCM_BCM_Antenna_Switching_Port"))
  {
    value = (ctu *)xpc_dictionary_get_value(v5, "WCMCellularSetFCM_BCM_Antenna_Switching_Band");
    ctu::xpc_to_cf(value, v8);
    ctu::cf::insert<__CFString const*,void const*>(v13, (CFTypeRef)*MEMORY[0x1E0DDF5F8], cf);
    if (cf)
      CFRelease(cf);
    v9 = (ctu *)xpc_dictionary_get_value(v5, "WCMCellularSetFCM_BCM_Antenna_Switching_Port");
    ctu::xpc_to_cf(v9, v10);
    ctu::cf::insert<__CFString const*,void const*>(v13, (CFTypeRef)*MEMORY[0x1E0DDF600], cf);
    if (cf)
      CFRelease(cf);
    v11 = *(__CFArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    if (v13)
    {
      CFRetain(v13);
      CFArrayAppendValue(v11, v13);
      CFRelease(v13);
    }
  }
  if (v13)
    CFRelease(v13);
  xpc_release(v5);
  return 1;
}

void sub_1BF37EB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  void *v10;

  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a9);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State31handleSetFCMBCMAntennaMode_syncEN3xpc4dictENS_5SubIdE_block_invoke_185(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set FCM BCM Antenna mode: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetRC1DurationParam_sync(_QWORD *a1, xpc_object_t *a2, uint64_t a3)
{
  NSObject *v6;
  xpc_object_t value;
  NSObject *v8;
  unsigned int v9;
  const __CFAllocator *v10;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v12;
  CFMutableDictionaryRef v13;
  CFMutableDictionaryRef v14;
  NSObject *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  CFTypeID v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  void *v24;
  NSObject *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  CFTypeRef v32;
  _QWORD v33[6];
  std::__shared_weak_count *v34;
  void *aBlock;
  dispatch_object_t object;
  CFTypeRef cf;
  CFTypeRef v38;
  CFTypeRef v39;
  uint8_t buf[8];
  std::__shared_weak_count *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (MEMORY[0x1C3B8A86C](*a2) != MEMORY[0x1E0C812F8])
  {
    v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", buf, 2u);
    }
    return;
  }
  if (xpc_dictionary_get_value(*a2, "kWCMCellularRC1Duration"))
  {
    value = xpc_dictionary_get_value(*a2, "kWCMCellularRC1Duration");
    *(_QWORD *)buf = value;
    if (value)
      xpc_retain(value);
    else
      *(_QWORD *)buf = xpc_null_create();
    v9 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    xpc_release(*(xpc_object_t *)buf);
    v39 = 0;
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v12 = Mutable;
    if (Mutable)
      v39 = Mutable;
    ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x1E0DDF2F8], v9, v10);
    v38 = 0;
    v13 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v14 = v13;
    if (v13)
      v38 = v13;
    ctu::cf::insert<__CFString const*,__CFDictionary *>(v13, (CFTypeRef)*MEMORY[0x1E0DDF378], v12);
    v15 = a1[5];
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v9;
      _os_log_impl(&dword_1BF335000, v15, OS_LOG_TYPE_DEFAULT, "#I Setting RC1 duration to %u", buf, 8u);
    }
    v17 = a1[9];
    v16 = (std::__shared_weak_count *)a1[10];
    *(_QWORD *)buf = v17;
    if (!v16 || (v18 = std::__shared_weak_count::lock(v16), (v41 = v18) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v19 = v18;
    v20 = a1[13];
    if (v14 && (v21 = CFGetTypeID(v14), v21 == CFDictionaryGetTypeID()))
    {
      cf = v14;
      CFRetain(v14);
    }
    else
    {
      cf = 0;
    }
    v33[0] = MEMORY[0x1E0C809B0];
    v33[1] = 1174405120;
    v33[2] = ___ZN4coex6Module5State30handleSetRC1DurationParam_syncEN3xpc4dictENS_5SubIdE_block_invoke;
    v33[3] = &__block_descriptor_tmp_188;
    v33[4] = a1;
    v33[5] = v17;
    v34 = v19;
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    v24 = _Block_copy(v33);
    v25 = a1[11];
    if (v25)
      dispatch_retain(v25);
    if (v24)
    {
      aBlock = _Block_copy(v24);
      object = v25;
      if (!v25)
        goto LABEL_30;
    }
    else
    {
      aBlock = 0;
      object = v25;
      if (!v25)
      {
LABEL_30:
        (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(_QWORD *)v20 + 48))(v20, &cf, a3, &aBlock);
        if (object)
          dispatch_release(object);
        if (aBlock)
          _Block_release(aBlock);
        if (v25)
          dispatch_release(v25);
        if (v24)
          _Block_release(v24);
        if (cf)
          CFRelease(cf);
        v26 = v34;
        if (v34)
        {
          v27 = (unint64_t *)&v34->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v29 = v41;
        if (!v41)
          goto LABEL_49;
        v30 = (unint64_t *)&v41->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
          v32 = v38;
          if (!v38)
          {
LABEL_51:
            if (v39)
              CFRelease(v39);
            return;
          }
        }
        else
        {
LABEL_49:
          v32 = v38;
          if (!v38)
            goto LABEL_51;
        }
        CFRelease(v32);
        goto LABEL_51;
      }
    }
    dispatch_retain(v25);
    goto LABEL_30;
  }
  v8 = a1[5];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v8, OS_LOG_TYPE_DEFAULT, "#E Invalid RC1 duration passed", buf, 2u);
  }
}

void sub_1BF37F078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1BF37F138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State30handleSetRC1DurationParam_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set RC1 duration; %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::convertScanFreqBandFilter_sync(uint64_t a1, xpc_object_t *a2, CFArrayRef *a3)
{
  uint64_t (*v5)(uint64_t);
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  const __CFString *v9;
  const __CFString *v10;
  const void *ValueAtIndex;
  const void *v12;
  CFTypeID v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  int Int;
  xpc_object_t v19;
  xpc_object_t v20;
  int v21;
  xpc_object_t v22;
  xpc_object_t v23;
  _QWORD v24[2];
  CFTypeRef cf;

  if (MEMORY[0x1C3B8A86C](*a2) == MEMORY[0x1E0C812C8])
  {
    v5 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    if (!*a3)
      v5 = 0;
    if (v5)
    {
      Count = CFArrayGetCount(*a3);
      if (Count >= 1)
      {
        v7 = Count;
        v8 = 0;
        v9 = (const __CFString *)*MEMORY[0x1E0DDF388];
        v10 = (const __CFString *)*MEMORY[0x1E0DDF268];
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*a3, v8);
          if (ValueAtIndex && (v12 = ValueAtIndex, v13 = CFGetTypeID(ValueAtIndex), v13 == CFDictionaryGetTypeID()))
          {
            cf = v12;
            CFRetain(v12);
            if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
            {
              v24[0] = 0xAAAAAAAAAAAAAAAALL;
              v24[1] = 0xAAAAAAAAAAAAAAAALL;
              ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v24, (const __CFDictionary *)v12);
              v14 = xpc_dictionary_create(0, 0, 0);
              if (v14 || (v14 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8A86C](v14) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v14);
                  v15 = v14;
                }
                else
                {
                  v15 = xpc_null_create();
                }
              }
              else
              {
                v15 = xpc_null_create();
                v14 = 0;
              }
              xpc_release(v14);
              Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v24, v9);
              v19 = xpc_int64_create(Int);
              if (!v19)
                v19 = xpc_null_create();
              xpc_dictionary_set_value(v15, "kWCMCellularScanFreqBandFilter_CenterFreq", v19);
              v20 = xpc_null_create();
              xpc_release(v19);
              xpc_release(v20);
              v21 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v24, v10);
              v22 = xpc_int64_create(v21);
              if (!v22)
                v22 = xpc_null_create();
              xpc_dictionary_set_value(v15, "kWCMCellularScanFreqBandFilter_Bandwidth", v22);
              v23 = xpc_null_create();
              xpc_release(v22);
              xpc_release(v23);
              xpc_array_append_value(*a2, v15);
              xpc_release(v15);
              MEMORY[0x1C3B893A8](v24);
              goto LABEL_31;
            }
          }
          else
          {
            cf = 0;
          }
          v16 = xpc_dictionary_create(0, 0, 0);
          if (v16 || (v16 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x1C3B8A86C](v16) == MEMORY[0x1E0C812F8])
            {
              xpc_retain(v16);
              v17 = v16;
            }
            else
            {
              v17 = xpc_null_create();
            }
          }
          else
          {
            v17 = xpc_null_create();
            v16 = 0;
          }
          xpc_release(v16);
          xpc_array_append_value(*a2, v17);
          xpc_release(v17);
LABEL_31:
          if (cf)
            CFRelease(cf);
          ++v8;
        }
        while (v7 != v8);
      }
    }
  }
}

void sub_1BF37F508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, const void *a12)
{
  void *v12;

  xpc_release(v12);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a12);
  _Unwind_Resume(a1);
}

void coex::Module::State::handleGetScanFreqBandFilter_sync(_QWORD *a1, uint64_t a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v8;
  std::__shared_weak_count *v9;
  const void *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  CFTypeID v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v17;
  NSObject *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  CFTypeRef v25;
  _QWORD aBlock[7];
  std::__shared_weak_count *v27;
  int v28;
  void *v29;
  dispatch_object_t object;
  CFTypeRef cf[2];
  std::__shared_weak_count *v32;
  CFTypeRef v33;
  _QWORD v34[5];
  xpc_object_t v35;

  v34[0] = 0;
  v34[1] = v34;
  v34[2] = 0x3002000000;
  v34[3] = __Block_byref_object_copy__189;
  v34[4] = __Block_byref_object_dispose__190;
  v35 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_array_create(0, 0);
  v5 = v4;
  if (v4)
  {
    v35 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    v35 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v5) == MEMORY[0x1E0C812C8])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  v35 = v6;
LABEL_9:
  xpc_release(v5);
  v33 = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v8 = Mutable;
  if (Mutable)
    v33 = Mutable;
  ctu::cf::insert<__CFString const*,BOOL>(Mutable, (CFTypeRef)*MEMORY[0x1E0DDF4C8], 1);
  v10 = (const void *)a1[9];
  v9 = (std::__shared_weak_count *)a1[10];
  cf[1] = v10;
  if (!v9 || (v11 = std::__shared_weak_count::lock(v9), (v32 = v11) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v12 = v11;
  v13 = a1[13];
  if (v8 && (v14 = CFGetTypeID(v8), v14 == CFDictionaryGetTypeID()))
  {
    cf[0] = v8;
    CFRetain(v8);
  }
  else
  {
    cf[0] = 0;
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State32handleGetScanFreqBandFilter_syncENS_5SubIdE_block_invoke;
  aBlock[3] = &unk_1E78FD818;
  aBlock[5] = a1;
  aBlock[6] = v10;
  v27 = v12;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v16 = __ldxr(p_shared_owners);
  while (__stxr(v16 + 1, p_shared_owners));
  aBlock[4] = v34;
  v28 = a2;
  v17 = _Block_copy(aBlock);
  v18 = a1[11];
  if (v18)
    dispatch_retain(v18);
  if (v17)
  {
    v29 = _Block_copy(v17);
    object = v18;
    if (!v18)
      goto LABEL_24;
    goto LABEL_23;
  }
  v29 = 0;
  object = v18;
  if (v18)
LABEL_23:
    dispatch_retain(v18);
LABEL_24:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(_QWORD *)v13 + 56))(v13, cf, a2, &v29);
  if (object)
    dispatch_release(object);
  if (v29)
    _Block_release(v29);
  if (v18)
    dispatch_release(v18);
  if (v17)
    _Block_release(v17);
  if (cf[0])
    CFRelease(cf[0]);
  v19 = v27;
  if (!v27)
    goto LABEL_38;
  v20 = (unint64_t *)&v27->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    v22 = v32;
    if (!v32)
      goto LABEL_42;
  }
  else
  {
LABEL_38:
    v22 = v32;
    if (!v32)
      goto LABEL_42;
  }
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    v25 = v33;
    if (!v33)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_42:
  v25 = v33;
  if (v33)
LABEL_43:
    CFRelease(v25);
LABEL_44:
  _Block_object_dispose(v34, 8);
  xpc_release(v35);
}

void sub_1BF37F8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  NSObject *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  va_list va;
  uint64_t v18;
  const void *v19;
  va_list va1;
  uint64_t v21;
  va_list va2;
  uint64_t v23;
  va_list va3;

  va_start(va3, a11);
  va_start(va2, a11);
  va_start(va1, a11);
  va_start(va, a11);
  v16 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v19 = va_arg(va2, const void *);
  va_copy(va3, va2);
  v21 = va_arg(va3, _QWORD);
  v23 = va_arg(va3, _QWORD);
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)va);
  if (v11)
    dispatch_release(v11);
  if (v12)
    _Block_release(v12);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v13);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va3);
  _Block_object_dispose((const void *)(v14 - 112), 8);
  xpc_release(*(xpc_object_t *)(v14 - 72));
  _Unwind_Resume(a1);
}

xpc_object_t __Block_byref_object_copy__189(uint64_t a1, uint64_t a2)
{
  xpc_object_t result;

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  result = xpc_null_create();
  *(_QWORD *)(a2 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__190(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
}

void ___ZN4coex6Module5State32handleGetScanFreqBandFilter_syncENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2, const __CFDictionary **a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  NSObject *v7;
  const __CFDictionary *v8;
  uint64_t (*v9)(uint64_t);
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  xpc_object_t v15;
  int v16;
  CFArrayRef v17;
  xpc_object_t v18[2];
  uint8_t buf[16];
  void (*v20)(uint64_t);
  void *v21;
  uint64_t v22;
  xpc_object_t object;
  int v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *a2;
  v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v6 = 0;
  if (v6)
  {
    v7 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl(&dword_1BF335000, v7, OS_LOG_TYPE_DEFAULT, "#I Failed to get: %@", buf, 0xCu);
    }
    goto LABEL_19;
  }
  v8 = *a3;
  v9 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!*a3)
    v9 = 0;
  if (v9)
  {
    memset(buf, 170, sizeof(buf));
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, v8);
    v10 = (void *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E0DDF408]);
    v11 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    v18[0] = v11;
    v18[1] = v10;
    if (v11)
    {
      v12 = xpc_retain(v11);
      v17 = (CFArrayRef)v10;
      if (!v10)
        goto LABEL_14;
    }
    else
    {
      v12 = xpc_null_create();
      v11 = v12;
      v17 = (CFArrayRef)v10;
      v18[0] = v12;
      if (!v10)
      {
LABEL_14:
        coex::Module::State::convertScanFreqBandFilter_sync((uint64_t)v12, v18, &v17);
        if (v10)
          CFRelease(v10);
        xpc_release(v11);
        v18[0] = 0;
        if (v10)
          CFRelease(v10);
        MEMORY[0x1C3B893A8](buf);
        goto LABEL_19;
      }
    }
    v12 = (void *)CFRetain(v10);
    goto LABEL_14;
  }
LABEL_19:
  v13 = *(_QWORD *)(v4 + 120);
  if (v13)
  {
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v15 = *(xpc_object_t *)(v14 + 40);
    if (v15)
      xpc_retain(*(xpc_object_t *)(v14 + 40));
    else
      v15 = xpc_null_create();
    v16 = *(_DWORD *)(a1 + 64);
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 1174405120;
    v20 = ___ZN4coex9XpcClient11sendMessageE19WCMReceiveMessageIdN3xpc6objectENS_5SubIdE_block_invoke;
    v21 = &__block_descriptor_tmp_7_3;
    v24 = 305;
    v22 = v13;
    object = v15;
    if (v15)
      xpc_retain(v15);
    else
      object = xpc_null_create();
    v25 = v16;
    ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped((uint64_t *)(v13 + 8), (uint64_t)buf);
    xpc_release(object);
    xpc_release(v15);
  }
}

void sub_1BF37FBEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_48c46_ZTSNSt3__110shared_ptrIN4coex6Module5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_48c46_ZTSNSt3__110shared_ptrIN4coex6Module5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

xpc_object_t __Block_byref_object_copy__195(uint64_t a1, uint64_t a2)
{
  xpc_object_t result;

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  result = xpc_null_create();
  *(_QWORD *)(a2 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__196(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
}

void ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_3(uint64_t a1, int64_t value)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_int64_create(value);
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_FrameOffset", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_4(uint64_t a1, int64_t value)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_int64_create(value);
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_TTDUL_DL", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_5(uint64_t a1, int64_t value)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_int64_create(value);
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_SubFrameFormat", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_6(uint64_t a1, int64_t value)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_int64_create(value);
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_ULCPConfig", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_7(uint64_t a1, int64_t value)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_int64_create(value);
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_DLCPConfig", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_8(uint64_t a1, int64_t value)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_int64_create(value);
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_LTEOffPeriod", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void coex::Module::State::sendLinkQuality_sync(uint64_t a1, int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  uint64_t (*v6)(uint64_t);
  void *v7;
  const __CFNumber *v8;
  uint64_t (*v9)(uint64_t);
  xpc_object_t v10;
  xpc_object_t v11;
  const __CFDictionary *v12;
  uint64_t (*v13)(uint64_t);
  int Int;
  int v15;
  double v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  uint64_t v21;
  xpc_object_t v22;
  int64_t value[2];
  const __CFDictionary *v24;
  CFTypeRef cf;
  CFTypeRef v26;
  unint64_t v27;
  unint64_t v28;
  void (*v29)(uint64_t);
  void *v30;
  uint64_t v31;
  xpc_object_t object;
  int v33;
  int v34;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v4) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v4);
      v5 = v4;
    }
    else
    {
      v5 = xpc_null_create();
    }
  }
  else
  {
    v5 = xpc_null_create();
    v4 = 0;
  }
  xpc_release(v4);
  v26 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  coex::Module::State::getSubProperty(a1, coex::kKeyLinkQuality, a2, 0, (CFMutableDictionaryRef *)&v26);
  v6 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  if (!v26)
    v6 = 0;
  if (v6)
  {
    v27 = 0xAAAAAAAAAAAAAAAALL;
    v28 = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v27, (const __CFDictionary *)v26);
    v7 = (void *)ctu::cf::map_adapter::copyCFNumberRef((ctu::cf::map_adapter *)&v27, (const __CFString *)*MEMORY[0x1E0DDF6F8]);
    cf = v7;
    v9 = ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get;
    if (!v7)
      v9 = 0;
    if (v9)
    {
      value[0] = 0;
      ctu::cf::assign((ctu::cf *)value, (uint64_t *)v7, v8);
      v10 = xpc_int64_create(value[0]);
      if (!v10)
        v10 = xpc_null_create();
      xpc_dictionary_set_value(v5, "kWCMCellularLinkQuality_SINR", v10);
      v11 = xpc_null_create();
      xpc_release(v10);
      xpc_release(v11);
    }
    v12 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)&v27, (const __CFString *)*MEMORY[0x1E0DDF398]);
    v24 = v12;
    v13 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    if (!v12)
      v13 = 0;
    if (v13)
    {
      value[0] = 0xAAAAAAAAAAAAAAAALL;
      value[1] = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)value, v12);
      Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)value, (const __CFString *)*MEMORY[0x1E0DDF2A8]);
      v15 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)value, (const __CFString *)*MEMORY[0x1E0DDF590]);
      v16 = (double)Int;
      v17 = xpc_double_create((double)Int);
      if (!v17)
        v17 = xpc_null_create();
      xpc_dictionary_set_value(v5, "kWCMCellularLinkQuality_BLERBlockCount", v17);
      v18 = xpc_null_create();
      xpc_release(v17);
      xpc_release(v18);
      v19 = xpc_double_create((double)v15 / v16);
      if (!v19)
        v19 = xpc_null_create();
      xpc_dictionary_set_value(v5, "kWCMCellularLinkQuality_BLER", v19);
      v20 = xpc_null_create();
      xpc_release(v19);
      xpc_release(v20);
      MEMORY[0x1C3B893A8](value);
      v12 = v24;
    }
    if (v12)
      CFRelease(v12);
    if (cf)
      CFRelease(cf);
    MEMORY[0x1C3B893A8](&v27);
  }
  v21 = *(_QWORD *)(a1 + 120);
  if (v21)
  {
    if (v5)
    {
      xpc_retain(v5);
      v22 = v5;
    }
    else
    {
      v22 = xpc_null_create();
    }
    v27 = MEMORY[0x1E0C809B0];
    v28 = 1174405120;
    v29 = ___ZN4coex9XpcClient11sendMessageE19WCMReceiveMessageIdN3xpc6objectENS_5SubIdE_block_invoke;
    v30 = &__block_descriptor_tmp_7_3;
    v33 = 302;
    v31 = v21;
    object = v22;
    if (v22)
      xpc_retain(v22);
    else
      object = xpc_null_create();
    v34 = a2;
    ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped((uint64_t *)(v21 + 8), (uint64_t)&v27);
    xpc_release(object);
    xpc_release(v22);
  }
  if (v26)
    CFRelease(v26);
  xpc_release(v5);
}

void sub_1BF3803E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void *a11, const void *a12, const void *a13, char a14)
{
  void *v14;

  MEMORY[0x1C3B893A8](&a9);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a11);
  ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef(&a12);
  MEMORY[0x1C3B893A8](&a14);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a13);
  xpc_release(v14);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State22sendFailCondition_syncENS_5SubIdE_block_invoke(uint64_t a1, int a2)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_int64_create(a2);
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "kWCMCellularThresholdReached_EventData", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void ___ZN4coex6Module5State22sendFailCondition_syncENS_5SubIdE_block_invoke_2(uint64_t a1, int a2)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_int64_create(a2);
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "kWCMCellularThresholdReached_EventData", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void ___ZN4coex6Module5State14setPolicy_syncENS_5SubIdE_block_invoke_235(uint64_t a1, int a2)
{
  uint64_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t (*v7)(uint64_t);
  int64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  uint64_t v13;
  xpc_object_t v14;
  _QWORD v15[5];
  xpc_object_t object;
  int v17;
  int v18;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = xpc_dictionary_create(0, 0, 0);
  if (v5 || (v5 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v5) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v5);
      v6 = v5;
    }
    else
    {
      v6 = xpc_null_create();
    }
  }
  else
  {
    v6 = xpc_null_create();
    v5 = 0;
  }
  xpc_release(v5);
  v7 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*(_QWORD *)(a1 + 40))
    v7 = 0;
  if (v7)
    v8 = 39321;
  else
    v8 = 0;
  v9 = xpc_int64_create(v8);
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v6, "kWCMCellularTxPower_Response", v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v11 = xpc_int64_create(a2);
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(v6, "kWCMCellularTxPower_Level", v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  v13 = *(_QWORD *)(v4 + 120);
  if (v13)
  {
    if (v6)
    {
      xpc_retain(v6);
      v14 = v6;
    }
    else
    {
      v14 = xpc_null_create();
    }
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 1174405120;
    v15[2] = ___ZN4coex9XpcClient11sendMessageE19WCMReceiveMessageIdN3xpc6objectENS_5SubIdE_block_invoke;
    v15[3] = &__block_descriptor_tmp_7_3;
    v17 = 301;
    v15[4] = v13;
    object = v14;
    if (v14)
      xpc_retain(v14);
    else
      object = xpc_null_create();
    v18 = 0;
    ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped((uint64_t *)(v13 + 8), (uint64_t)v15);
    xpc_release(object);
    xpc_release(v14);
  }
  xpc_release(v6);
}

CFTypeRef __copy_helper_block_e8_40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    CFRelease(v1);
}

const void **ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void ___ZN4coex6Module5State23setLinkQualityMode_syncEjNS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_error_impl(&dword_1BF335000, v4, OS_LOG_TYPE_ERROR, "Failed to set SINR and/or BLER: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

uint64_t *std::list<std::pair<unsigned long long,unsigned int>>::~list(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = (uint64_t *)a1[1];
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

uint64_t ctu::Loggable<coex::Module::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<coex::Module::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "coex.mod");
}

uint64_t ctu::Loggable<coex::Module::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

void coex::CoexCache::~CoexCache(coex::CoexCache *this)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)*((_QWORD *)this + 3);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 2);
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 1);
  if (v4)
    CFRelease(v4);
  if (*(_QWORD *)this)
    CFRelease(*(CFTypeRef *)this);
}

_QWORD *ctu::Loggable<coex::Module::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E78FDB20;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<coex::Module::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E78FDB20;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void boost::signals2::detail::connection_body_base::disconnect(boost::signals2::detail::connection_body_base *this)
{
  __int128 v2;
  char *v3;
  char *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _OWORD v12[10];
  unint64_t v13;
  void *__p;
  uint64_t v15;
  boost::signals2::detail::connection_body_base *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v12[8] = v2;
  v12[9] = v2;
  v12[6] = v2;
  v12[7] = v2;
  v12[4] = v2;
  v12[5] = v2;
  v12[2] = v2;
  v12[3] = v2;
  v12[0] = v2;
  v12[1] = v2;
  v13 = 10;
  __p = v12;
  v15 = 0;
  v16 = this;
  (*(void (**)(boost::signals2::detail::connection_body_base *))(*(_QWORD *)this + 24))(this);
  if (*((_BYTE *)this + 24))
  {
    *((_BYTE *)this + 24) = 0;
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(this, v12);
  }
  (*(void (**)(boost::signals2::detail::connection_body_base *))(*(_QWORD *)v16 + 32))(v16);
  v3 = (char *)__p;
  if (__p)
  {
    if (v15 - 1 >= 0)
    {
      v4 = (char *)__p + 16 * v15;
      do
      {
        v5 = (unsigned int *)*((_QWORD *)v4 - 1);
        if (v5)
        {
          v6 = v5 + 2;
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
            v9 = v5 + 3;
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
              (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 24))(v5);
          }
        }
        v4 -= 16;
      }
      while (v4 > v3);
    }
    if (v13 >= 0xB)
      operator delete(__p);
  }
}

void sub_1BF380BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF380BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 32))(*(_QWORD *)(a1 + 184));
  v2 = *(_QWORD *)(a1 + 168);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 176);
    if (v3 - 1 >= 0)
    {
      v4 = v2 + 16 * v3;
      do
      {
        v5 = *(unsigned int **)(v4 - 8);
        if (v5)
        {
          v6 = v5 + 2;
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
            v9 = v5 + 3;
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
              (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 24))(v5);
          }
        }
        v4 -= 16;
      }
      while (v4 > v2);
    }
    if (*(_QWORD *)(a1 + 160) >= 0xBuLL)
      operator delete(*(void **)(a1 + 168));
  }
  return a1;
}

uint64_t boost::shared_ptr<void>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(_DWORD *a1, _QWORD *a2)
{
  int v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  __int128 v16;

  v2 = a1[7] - 1;
  a1[7] = v2;
  if (!v2)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 40))(&v16);
    v4 = a2[22];
    if (v4 == a2[20] && v4 != -1)
    {
      if (4 * v4 <= (unint64_t)(v4 + 1))
        v5 = v4 + 1;
      else
        v5 = 4 * v4;
      boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve_impl((uint64_t)a2, v5);
      v4 = a2[22];
    }
    v6 = *((_QWORD *)&v16 + 1);
    *(_OWORD *)(a2[21] + 16 * v4) = v16;
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      v4 = a2[22];
    }
    a2[22] = v4 + 1;
    v9 = (unsigned int *)*((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v10 = (unsigned int *)(*((_QWORD *)&v16 + 1) + 8);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
  }
}

void sub_1BF380EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::shared_ptr<void>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve_impl(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;

  v4 = (_QWORD *)a1;
  if (a2 >= 0xB)
  {
    if (a2 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(16 * a2);
  }
  v6 = *(_QWORD **)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 176);
  if (v5)
  {
    v7 = &v6[2 * v5];
    v8 = v4;
    do
    {
      v9 = v6[1];
      *v8 = *v6;
      v8[1] = v9;
      if (v9)
      {
        v10 = (unsigned int *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v6 += 2;
      v8 += 2;
    }
    while (v6 != v7);
    v6 = *(_QWORD **)(a1 + 168);
  }
  if (v6)
  {
    v12 = *(_QWORD *)(a1 + 176);
    if (v12 - 1 >= 0)
    {
      v13 = &v6[2 * v12];
      do
      {
        v14 = (unsigned int *)*(v13 - 1);
        if (v14)
        {
          v15 = v14 + 2;
          do
          {
            v16 = __ldaxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
            v18 = v14 + 3;
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
              (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 24))(v14);
          }
        }
        v13 -= 2;
      }
      while (v13 > v6);
    }
    if (*(_QWORD *)(a1 + 160) >= 0xBuLL)
      operator delete(*(void **)(a1 + 168));
  }
  *(_QWORD *)(a1 + 160) = a2;
  *(_QWORD *)(a1 + 168) = v4;
}

void std::__shared_ptr_pointer<coex::Module *,std::shared_ptr<coex::Module>::__shared_ptr_default_delete<coex::Module,coex::Module>,std::allocator<coex::Module>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<coex::Module *,std::shared_ptr<coex::Module>::__shared_ptr_default_delete<coex::Module,coex::Module>,std::allocator<coex::Module>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<coex::Module *,std::shared_ptr<coex::Module>::__shared_ptr_default_delete<coex::Module,coex::Module>,std::allocator<coex::Module>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF53CDDBLL)
    return a1 + 24;
  if (((v3 & 0x80000001BF53CDDBLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF53CDDBLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF53CDDBLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__shared_ptr_pointer<coex::Module::State *,std::shared_ptr<coex::Module::State> ctu::SharedSynchronizable<coex::Module::State>::make_shared_ptr<coex::Module::State>(coex::Module::State*)::{lambda(coex::Module::State *)#1},std::allocator<coex::Module::State>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<coex::Module::State *,std::shared_ptr<coex::Module::State> ctu::SharedSynchronizable<coex::Module::State>::make_shared_ptr<coex::Module::State>(coex::Module::State*)::{lambda(coex::Module::State *)#1},std::allocator<coex::Module::State>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<coex::Module::State> ctu::SharedSynchronizable<coex::Module::State>::make_shared_ptr<coex::Module::State>(coex::Module::State*)::{lambda(coex::Module::State*)#1}::operator() const(coex::Module::State*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<coex::Module::State *,std::shared_ptr<coex::Module::State> ctu::SharedSynchronizable<coex::Module::State>::make_shared_ptr<coex::Module::State>(coex::Module::State*)::{lambda(coex::Module::State *)#1},std::allocator<coex::Module::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE15make_shared_ptrIS3_EENSt3__110shared"
                                "_ptrIT_EEPS8_EUlPS3_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<coex::Module::State> ctu::SharedSynchronizable<coex::Module::State>::make_shared_ptr<coex::Module::State>(coex::Module::State*)::{lambda(coex::Module::State*)#1}::operator() const(coex::Module::State*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedLoggable<coex::Module::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E78FDB20;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(uint64_t **)a1;
  coex::Module::State::sendWWANState_sync(**(_QWORD **)a1, *(unsigned int *)(*(_QWORD *)a1 + 8));
  operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete((void *)a1);
  }
  else
  {
LABEL_5:
    operator delete((void *)a1);
  }
}

void sub_1BF3812CC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(uint64_t **)a1;
  coex::Module::State::sendLinkQuality_sync(**(_QWORD **)a1, *(_DWORD *)(*(_QWORD *)a1 + 8));
  operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete((void *)a1);
  }
  else
  {
LABEL_5:
    operator delete((void *)a1);
  }
}

void sub_1BF3813AC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t object;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)a1;
  v4 = *(void **)(*(_QWORD *)a1 + 8);
  object = v4;
  if (v4 && MEMORY[0x1C3B8A86C](v4) == MEMORY[0x1E0C812C8])
    xpc_retain(v4);
  else
    object = xpc_null_create();
  coex::Module::State::handleSetNetworkConfigOfInterest_sync(v3, &object, *((_DWORD *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(a1);
}

void sub_1BF3814E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  xpc_object_t *v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t object;

  v2 = (_QWORD *)*a1;
  v4 = *(_QWORD **)*a1;
  v3 = *(void **)(*a1 + 8);
  object = v3;
  if (v3)
    xpc_retain(v3);
  else
    object = xpc_null_create();
  coex::Module::State::handleSetTxPowerLimit_sync(v4, (xpc *)&object, *((unsigned int *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(a1);
}

void sub_1BF38160C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  xpc_object_t *v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t object;

  v2 = (_QWORD *)*a1;
  v4 = *(_QWORD **)*a1;
  v3 = *(void **)(*a1 + 8);
  object = v3;
  if (v3)
    xpc_retain(v3);
  else
    object = xpc_null_create();
  coex::Module::State::handleSetWCI2TxPowerLimit_sync(v4, (xpc *)&object, *((unsigned int *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(a1);
}

void sub_1BF381738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  xpc_object_t *v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb4_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(xpc_object_t **a1)
{
  xpc_object_t *v2;
  xpc_object_t v3;
  xpc_object_t v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int16 v9[8];

  v2 = *a1;
  v4 = **a1;
  v3 = (*a1)[1];
  if (v3 && MEMORY[0x1C3B8A86C]((*a1)[1]) == MEMORY[0x1E0C812F8])
    xpc_retain(v3);
  else
    v3 = xpc_null_create();
  v5 = *((_QWORD *)v4 + 5);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v9[0] = 0;
    _os_log_error_impl(&dword_1BF335000, v5, OS_LOG_TYPE_ERROR, "WCMCellularSetWCI2CalibrationInfo not supported", (uint8_t *)v9, 2u);
  }
  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb6_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t *v2;
  xpc_object_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t v8;

  v2 = *(uint64_t **)a1;
  v4 = **(_QWORD **)a1;
  v3 = *(xpc_object_t *)(*(_QWORD *)a1 + 8);
  v8 = v3;
  if (v3 && MEMORY[0x1C3B8A86C](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
  }
  else
  {
    v3 = xpc_null_create();
    v8 = v3;
  }
  coex::Module::State::handleSetLinkQualityMode_sync(v4, &v8, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (!v5)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(a1);
  }
  else
  {
LABEL_9:
    operator delete(a1);
  }
}

void sub_1BF3819A8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  xpc_object_t *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb7_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t object;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)a1;
  v4 = *(void **)(*(_QWORD *)a1 + 8);
  object = v4;
  if (v4 && MEMORY[0x1C3B8A86C](v4) == MEMORY[0x1E0C812C8])
    xpc_retain(v4);
  else
    object = xpc_null_create();
  coex::Module::State::handleSetScanFreqBandFilter_sync(v3, &object, *((_DWORD *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(a1);
}

void sub_1BF381AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  xpc_object_t *v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb8_E3__9EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  _QWORD **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = (_QWORD **)*a1;
  coex::Module::State::handleGetScanFreqBandFilter_sync(*(_QWORD **)*a1, *(unsigned int *)(*a1 + 8));
  operator delete(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete(a1);
  }
  else
  {
LABEL_5:
    operator delete(a1);
  }
}

void sub_1BF381BF4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb9_E4__10EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  _QWORD *v2;
  xpc_object_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t v8;

  v2 = (_QWORD *)*a1;
  v4 = *(_QWORD **)*a1;
  v3 = *(xpc_object_t *)(*a1 + 8);
  v8 = v3;
  if (v3 && MEMORY[0x1C3B8A86C](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
  }
  else
  {
    v3 = xpc_null_create();
    v8 = v3;
  }
  coex::Module::State::handleSetWiFiStatus_sync(v4, &v8, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(a1);
  }
  else
  {
LABEL_9:
    operator delete(a1);
  }
}

void sub_1BF381D40(_Unwind_Exception *a1)
{
  _QWORD *v1;
  xpc_object_t *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb10_E4__11EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  _QWORD *v2;
  xpc_object_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t v8;

  v2 = (_QWORD *)*a1;
  v4 = *(_QWORD **)*a1;
  v3 = *(xpc_object_t *)(*a1 + 8);
  v8 = v3;
  if (v3 && MEMORY[0x1C3B8A86C](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
  }
  else
  {
    v3 = xpc_null_create();
    v8 = v3;
  }
  coex::Module::State::handleSetLAAConfig_sync(v4, &v8, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(a1);
  }
  else
  {
LABEL_9:
    operator delete(a1);
  }
}

void sub_1BF381EA8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  xpc_object_t *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb11_E4__12EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t object;

  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  v4 = *(void **)(*a1 + 8);
  object = v4;
  if (v4 && MEMORY[0x1C3B8A86C](v4) == MEMORY[0x1E0C812F8])
    xpc_retain(v4);
  else
    object = xpc_null_create();
  coex::Module::State::handleSetFCMBCMAntennaMode_sync(v3, &object, *((unsigned int *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(a1);
}

void sub_1BF381FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  xpc_object_t *v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb12_E4__13EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  _QWORD *v2;
  xpc_object_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t v8;

  v2 = (_QWORD *)*a1;
  v4 = *(_QWORD **)*a1;
  v3 = *(xpc_object_t *)(*a1 + 8);
  v8 = v3;
  if (v3 && MEMORY[0x1C3B8A86C](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
  }
  else
  {
    v3 = xpc_null_create();
    v8 = v3;
  }
  coex::Module::State::handleSetRC1DurationParam_sync(v4, &v8, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(a1);
  }
  else
  {
LABEL_9:
    operator delete(a1);
  }
}

void sub_1BF382160(_Unwind_Exception *a1)
{
  _QWORD *v1;
  xpc_object_t *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb13_E4__14EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t object;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)a1;
  v4 = *(void **)(*(_QWORD *)a1 + 8);
  object = v4;
  if (v4 && MEMORY[0x1C3B8A86C](v4) == MEMORY[0x1E0C812F8])
    xpc_retain(v4);
  else
    object = xpc_null_create();
  coex::Module::State::handleSetTimeShareConfigReq_sync(v3, &object, *((unsigned int *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(a1);
}

void sub_1BF3822B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  xpc_object_t *v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb14_E4__15EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t object;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)a1;
  v4 = *(void **)(*(_QWORD *)a1 + 8);
  object = v4;
  if (v4 && MEMORY[0x1C3B8A86C](v4) == MEMORY[0x1E0C812F8])
    xpc_retain(v4);
  else
    object = xpc_null_create();
  coex::Module::State::handleSetWCI2TxAntMap_sync(v3, &object, *((unsigned int *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(a1);
}

void sub_1BF382400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  xpc_object_t *v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb15_E4__16EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t object;

  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  v4 = *(void **)(*a1 + 8);
  object = v4;
  if (v4 && MEMORY[0x1C3B8A86C](v4) == MEMORY[0x1E0C812F8])
    xpc_retain(v4);
  else
    object = xpc_null_create();
  coex::Module::State::handleSetAntBlocking_sync(v3, &object, *((unsigned int *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(a1);
}

void sub_1BF382550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  xpc_object_t *v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb16_E4__17EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t object;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)a1;
  v4 = *(void **)(*(_QWORD *)a1 + 8);
  object = v4;
  if (v4 && MEMORY[0x1C3B8A86C](v4) == MEMORY[0x1E0C812F8])
    xpc_retain(v4);
  else
    object = xpc_null_create();
  coex::Module::State::handleSetClientAntBlocking_sync(v3, &object, *((_DWORD *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(a1);
}

void sub_1BF3826A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  xpc_object_t *v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb17_E4__18EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t object;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)a1;
  v4 = *(void **)(*(_QWORD *)a1 + 8);
  object = v4;
  if (v4 && MEMORY[0x1C3B8A86C](v4) == MEMORY[0x1E0C812F8])
    xpc_retain(v4);
  else
    object = xpc_null_create();
  coex::Module::State::handleSetClientAntBlockingExtended_sync(v3, &object, *((_DWORD *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(a1);
}

void sub_1BF3827F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  xpc_object_t *v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb18_E4__19EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  _QWORD *v2;
  xpc_object_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t v8;

  v2 = (_QWORD *)*a1;
  v4 = *(_QWORD **)*a1;
  v3 = *(xpc_object_t *)(*a1 + 8);
  v8 = v3;
  if (v3 && MEMORY[0x1C3B8A86C](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
  }
  else
  {
    v3 = xpc_null_create();
    v8 = v3;
  }
  coex::Module::State::handleTriggerAntennaBlocking_sync(v4, &v8, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(a1);
  }
  else
  {
LABEL_9:
    operator delete(a1);
  }
}

void sub_1BF382958(_Unwind_Exception *a1)
{
  _QWORD *v1;
  xpc_object_t *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb19_E4__20EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  _QWORD *v2;
  xpc_object_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t v8;

  v2 = (_QWORD *)*a1;
  v4 = *(_QWORD **)*a1;
  v3 = *(xpc_object_t *)(*a1 + 8);
  v8 = v3;
  if (v3 && MEMORY[0x1C3B8A86C](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
  }
  else
  {
    v3 = xpc_null_create();
    v8 = v3;
  }
  coex::Module::State::handleSetCC1_sync(v4, &v8, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(a1);
  }
  else
  {
LABEL_9:
    operator delete(a1);
  }
}

void sub_1BF382AC0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  xpc_object_t *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb20_E4__21EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  _QWORD *v2;
  xpc_object_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t v8;

  v2 = (_QWORD *)*a1;
  v4 = *(_QWORD **)*a1;
  v3 = *(xpc_object_t *)(*a1 + 8);
  v8 = v3;
  if (v3 && MEMORY[0x1C3B8A86C](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
  }
  else
  {
    v3 = xpc_null_create();
    v8 = v3;
  }
  coex::Module::State::handleSetCC2_sync(v4, &v8, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(a1);
  }
  else
  {
LABEL_9:
    operator delete(a1);
  }
}

void sub_1BF382C28(_Unwind_Exception *a1)
{
  _QWORD *v1;
  xpc_object_t *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb21_E4__22EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  _QWORD *v2;
  xpc_object_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t v8;

  v2 = (_QWORD *)*a1;
  v4 = *(_QWORD **)*a1;
  v3 = *(xpc_object_t *)(*a1 + 8);
  v8 = v3;
  if (v3 && MEMORY[0x1C3B8A86C](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
  }
  else
  {
    v3 = xpc_null_create();
    v8 = v3;
  }
  coex::Module::State::handleSetLaaGpioThrottle_sync(v4, &v8, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(a1);
  }
  else
  {
LABEL_9:
    operator delete(a1);
  }
}

void sub_1BF382D90(_Unwind_Exception *a1)
{
  _QWORD *v1;
  xpc_object_t *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb22_E4__23EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  _QWORD *v2;
  xpc_object_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t v8;

  v2 = (_QWORD *)*a1;
  v4 = *(_QWORD **)*a1;
  v3 = *(xpc_object_t *)(*a1 + 8);
  v8 = v3;
  if (v3 && MEMORY[0x1C3B8A86C](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
  }
  else
  {
    v3 = xpc_null_create();
    v8 = v3;
  }
  coex::Module::State::handleSetGnssParams_sync(v4, &v8, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(a1);
  }
  else
  {
LABEL_9:
    operator delete(a1);
  }
}

void sub_1BF382EF8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  xpc_object_t *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE13connect_eventIN5boost8signals26signalIFvvENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionIS9_EENSF_IFvRKNS7_10connectionEEEENS7_5mutexEEES3_vJEEEDTcl7connectfp_cvNSC_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSS_SU_E_block_invoke(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[5];
  v2 = a1[6];
  v3 = (_QWORD *)(a1[4] + (v2 >> 1) - 72);
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t boost::signals2::slot<void ()(void),boost::function<void ()(void)>>::~slot(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 32, a1 + 32, 2);
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*(_QWORD *)a1)
  {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)a1, *(_QWORD *)a1);
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>::~DispatchSlot(uint64_t a1)
{
  const void *v2;

  dispatch_release(*(dispatch_object_t *)a1);
  v2 = *(const void **)(a1 + 8);
  if (v2)
    _Block_release(v2);
  return a1;
}

uint64_t boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 184));
  v2 = *(_QWORD *)(a1 + 168);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 176);
    if (v3 - 1 >= 0)
    {
      v4 = v2 + 16 * v3;
      do
      {
        v5 = *(unsigned int **)(v4 - 8);
        if (v5)
        {
          v6 = v5 + 2;
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
            v9 = v5 + 3;
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
              (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 24))(v5);
          }
        }
        v4 -= 16;
      }
      while (v4 > v2);
    }
    if (*(_QWORD *)(a1 + 160) >= 0xBuLL)
      operator delete(*(void **)(a1 + 168));
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_base::destroy(uint64_t this)
{
  if (this)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  return this;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy((_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

void boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>(_DWORD *a1, _QWORD *a2)
{
  int v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  __int128 v16;

  v2 = a1[7] - 1;
  a1[7] = v2;
  if (!v2)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 40))(&v16);
    v4 = a2[22];
    if (v4 == a2[20] && v4 != -1)
    {
      if (4 * v4 <= (unint64_t)(v4 + 1))
        v5 = v4 + 1;
      else
        v5 = 4 * v4;
      boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve_impl((uint64_t)a2, v5);
      v4 = a2[22];
    }
    v6 = *((_QWORD *)&v16 + 1);
    *(_OWORD *)(a2[21] + 16 * v4) = v16;
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      v4 = a2[22];
    }
    a2[22] = v4 + 1;
    v9 = (unsigned int *)*((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v10 = (unsigned int *)(*((_QWORD *)&v16 + 1) + 8);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
  }
}

void sub_1BF38356C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::shared_ptr<void>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void boost::signals2::detail::connection_body_base::~connection_body_base(boost::signals2::detail::connection_body_base *this)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  *(_QWORD *)this = &unk_1E78FDD98;
  v1 = (unsigned int *)*((_QWORD *)this + 2);
  if (v1)
  {
    v2 = v1 + 3;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 24))(v1);
  }
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  _QWORD *v1;

  v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>::~connection_body(a1);
  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  __int128 v2;
  pthread_mutex_t *v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int i;
  unsigned int v10;
  uint64_t v11;
  char v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  char *v22;
  char *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v32;
  _OWORD v33[10];
  unint64_t v34;
  void *__p;
  uint64_t v36;
  pthread_mutex_t *v37;
  _QWORD v38[4];

  v38[3] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[8] = v2;
  v33[9] = v2;
  v33[6] = v2;
  v33[7] = v2;
  v33[4] = v2;
  v33[5] = v2;
  v33[2] = v2;
  v33[3] = v2;
  v33[0] = v2;
  v33[1] = v2;
  v3 = *(pthread_mutex_t **)(a1 + 48);
  v34 = 10;
  __p = v33;
  v36 = 0;
  v37 = v3;
  pthread_mutex_lock(v3);
  v4 = *(uint64_t **)(a1 + 32);
  if (!v4)
    goto LABEL_40;
  v5 = *v4;
  if (*v4 == v4[1])
    goto LABEL_40;
  do
  {
    memset(v38, 170, 24);
    v6 = *(_DWORD *)v5 ^ (*(int *)v5 >> 31);
    if (v6 == 2)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v5 + 8) + 16))(&v32);
      v38[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
      LODWORD(v38[0]) = 1;
      if (v32)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
          goto LABEL_26;
LABEL_19:
        v11 = *(_QWORD *)(v5 + 16);
        if (!v11)
          goto LABEL_27;
        if (!atomic_load((unsigned int *)(v11 + 8)))
          goto LABEL_27;
LABEL_21:
        v13 = 0;
        if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
          goto LABEL_30;
        goto LABEL_22;
      }
LABEL_18:
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v6 != 1)
    {
      LODWORD(v38[0]) = 0;
      v38[1] = 0;
      v38[2] = 0;
      goto LABEL_18;
    }
    v7 = *(_QWORD *)(v5 + 16);
    if (!v7)
    {
LABEL_25:
      v38[1] = 0;
      v38[2] = v7;
      LODWORD(v38[0]) = 0;
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    v8 = (unsigned int *)(v7 + 8);
    for (i = *(_DWORD *)(v7 + 8); ; i = v10)
    {
      if (!i)
      {
        v7 = 0;
        goto LABEL_25;
      }
      v10 = __ldxr(v8);
      if (v10 != i)
      {
        __clrex();
        continue;
      }
      if (!__stxr(i + 1, v8))
        break;
    }
    v38[1] = *(_QWORD *)(v5 + 8);
    v38[2] = v7;
    LODWORD(v38[0]) = 0;
    if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) != 2)
      goto LABEL_19;
LABEL_26:
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v5 + 8) + 24))(*(_QWORD *)(v5 + 8)))
      goto LABEL_21;
LABEL_27:
    if (*(_BYTE *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = 0;
      boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v33);
    }
    v13 = 1;
    if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
    {
LABEL_30:
      v14 = (unsigned int *)v38[2];
      if (v38[2])
      {
        v15 = (unsigned int *)(v38[2] + 8);
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
          v18 = v14 + 3;
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
            (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 24))(v14);
        }
      }
      goto LABEL_38;
    }
LABEL_22:
    if (v38[1])
      (*(void (**)(_QWORD))(*(_QWORD *)v38[1] + 8))(v38[1]);
LABEL_38:
    if ((v13 & 1) != 0)
      break;
    v5 += 24;
  }
  while (v5 != *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
LABEL_40:
  v21 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v37);
  v22 = (char *)__p;
  if (__p)
  {
    if (v36 - 1 >= 0)
    {
      v23 = (char *)__p + 16 * v36;
      do
      {
        v24 = (unsigned int *)*((_QWORD *)v23 - 1);
        if (v24)
        {
          v25 = v24 + 2;
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 16))(v24);
            v28 = v24 + 3;
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
              (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 24))(v24);
          }
        }
        v23 -= 16;
      }
      while (v23 > v22);
    }
    if (v34 >= 0xB)
      operator delete(__p);
  }
  return v21 != 0;
}

void sub_1BF383968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *(_QWORD *)(result + 40);
  v2 = (_QWORD *)(result + 32);
  *a2 = *(_QWORD *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = *(unsigned int **)(result + 40);
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
    if (v6)
    {
      v7 = v6 + 2;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
        v10 = v6 + 3;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
      }
    }
  }
  else
  {
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
  }
  return result;
}

_QWORD *std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[24 * v7];
    a1[1] = std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>,boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*,boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*,boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_1BF383BF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  if (*(_QWORD *)v1)
  {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v1, *(_QWORD *)v1);
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>,boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*,boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*,boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v17;

  v4 = a4;
  v17 = a4;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v9 = *(_DWORD *)v6 ^ (*(int *)v6 >> 31);
      if (v9 == 2)
      {
        *(_QWORD *)(v4 + 8) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 8) + 32))(*(_QWORD *)(v6 + 8));
        v7 = v17;
        goto LABEL_4;
      }
      if (v9 == 1)
      {
        *(_QWORD *)(v4 + 8) = *(_QWORD *)(v6 + 8);
        v10 = *(_QWORD *)(v6 + 16);
        *(_QWORD *)(v4 + 16) = v10;
        v7 = v4;
        if (!v10)
          goto LABEL_4;
        v11 = (unsigned int *)(v10 + 12);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      else
      {
        *(_QWORD *)(v4 + 8) = *(_QWORD *)(v6 + 8);
        v13 = *(_QWORD *)(v6 + 16);
        *(_QWORD *)(v4 + 16) = v13;
        v7 = v4;
        if (!v13)
          goto LABEL_4;
        v14 = (unsigned int *)(v13 + 12);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v7 = v4;
LABEL_4:
      v8 = *(_DWORD *)v6;
      v6 += 24;
      *(_DWORD *)v4 = v8 ^ (v8 >> 31);
      v4 = v7 + 24;
      v17 = v7 + 24;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_1BF383D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  std::_AllocatorDestroyRangeReverse<std::allocator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>,boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD **std::_AllocatorDestroyRangeReverse<std::allocator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>,boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>::operator()[abi:ne180100](_QWORD **result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v1 = *result[2];
  v2 = *result[1];
  if (v1 != v2)
  {
    v3 = *result[2];
    do
    {
      v4 = *(_DWORD *)(v3 - 24);
      v3 -= 24;
      v5 = v4 ^ (v4 >> 31);
      if (v5 == 2)
      {
        result = *(_QWORD ***)(v1 - 16);
        if (result)
          result = (_QWORD **)((uint64_t (*)(_QWORD **))(*result)[1])(result);
        goto LABEL_3;
      }
      if (v5 == 1)
      {
        result = *(_QWORD ***)(v1 - 8);
        if (!result)
          goto LABEL_3;
        v6 = (unsigned int *)result + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (v8)
          goto LABEL_3;
      }
      else
      {
        result = *(_QWORD ***)(v1 - 8);
        if (!result)
          goto LABEL_3;
        v9 = (unsigned int *)result + 3;
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (v11)
          goto LABEL_3;
      }
      result = (_QWORD **)((uint64_t (*)(_QWORD **))(*result)[3])(result);
LABEL_3:
      v1 = v3;
    }
    while (v3 != v2);
  }
  return result;
}

uint64_t boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::~variant(uint64_t a1)
{
  int v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v2 = *(_DWORD *)a1 ^ (*(int *)a1 >> 31);
  if (v2 != 2)
  {
    if (v2 == 1)
    {
      v3 = *(unsigned int **)(a1 + 16);
      if (!v3)
        return a1;
      v4 = v3 + 3;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (v6)
        return a1;
    }
    else
    {
      v3 = *(unsigned int **)(a1 + 16);
      if (!v3)
        return a1;
      v9 = v3 + 3;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (v11)
        return a1;
    }
    (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    return a1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

unsigned int *std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100](unsigned int *result, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  if (v4 != a2)
  {
    v5 = *((_QWORD *)result + 1);
    do
    {
      v6 = *(_DWORD *)(v5 - 24);
      v5 -= 24;
      v7 = v6 ^ (v6 >> 31);
      if (v7 == 2)
      {
        result = *(unsigned int **)(v4 - 16);
        if (result)
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        goto LABEL_3;
      }
      if (v7 == 1)
      {
        result = *(unsigned int **)(v4 - 8);
        if (!result)
          goto LABEL_3;
        v8 = result + 3;
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (v10)
          goto LABEL_3;
      }
      else
      {
        result = *(unsigned int **)(v4 - 8);
        if (!result)
          goto LABEL_3;
        v11 = result + 3;
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (v13)
          goto LABEL_3;
      }
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 24))(result);
LABEL_3:
      v4 = v5;
    }
    while (v5 != a2);
  }
  *((_QWORD *)v3 + 1) = a2;
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(void),boost::function<void ()(void)>>>::dispose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3)
          v3(v1 + 32, v1 + 32, 2);
      }
      *(_QWORD *)(v1 + 24) = 0;
    }
    if (*(_QWORD *)v1)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v1, *(_QWORD *)v1);
      operator delete(*(void **)v1);
    }
    operator delete((void *)v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(void),boost::function<void ()(void)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(void),boost::function<void ()(void)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(void),boost::function<void ()(void)>>>::get_untyped_deleter()
{
  return 0;
}

_QWORD *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  *a1 = off_1E78FDD30;
  v2 = (unsigned int *)a1[7];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  v9 = (unsigned int *)a1[5];
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
      v13 = v9 + 3;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
    }
  }
  *a1 = &unk_1E78FDD98;
  v16 = (unsigned int *)a1[2];
  if (v16)
  {
    v17 = v16 + 3;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16);
  }
  return a1;
}

uint64_t boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::~variant(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;

  if (*(_DWORD *)a1 == *(int *)a1 >> 31)
  {
    v2 = *(unsigned int **)(a1 + 16);
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    return a1;
  }
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return a1;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(void)>::~function(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  NSObject *v6;
  void *v7;
  const void *v8;
  const char *v9;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v9 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001BF53D2B9 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001BF53D2B9 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      v8 = (const void *)*((_QWORD *)a2 + 1);
      if (v8)
LABEL_9:
        _Block_release(v8);
    }
  }
  else
  {
    v6 = *(NSObject **)a1;
    v7 = *(void **)(a1 + 8);
    *(_QWORD *)a2 = *(_QWORD *)a1;
    if (v7)
    {
      v7 = _Block_copy(v7);
      v6 = *(NSObject **)a2;
    }
    *((_QWORD *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      v8 = *(const void **)(a1 + 8);
      if (v8)
        goto LABEL_9;
    }
  }
}

void boost::detail::function::void_function_obj_invoker0<ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>,void>::invoke(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  void *v3;
  const void *v4;
  void *v5;
  const void *v6;
  void *v7;
  const void *v8;
  void *v9;
  const void *v10;
  void *v11;
  const void *v12;
  void *v13;
  const void *v14;
  void *v15;
  char v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  void (*v20)(_QWORD *, _QWORD *, uint64_t);
  _QWORD v21[3];
  _QWORD block[5];

  v2 = *(NSObject **)a1;
  v1 = *(const void **)(a1 + 8);
  if (!v1)
  {
    v4 = 0;
    goto LABEL_10;
  }
  v3 = _Block_copy(v1);
  v4 = v3;
  if (!v3)
  {
LABEL_10:
    v16 = 1;
LABEL_11:
    v15 = 0;
    v21[0] = 0;
    goto LABEL_21;
  }
  v5 = _Block_copy(v3);
  v6 = v5;
  if (!v5)
  {
    v16 = 0;
    goto LABEL_11;
  }
  v7 = _Block_copy(v5);
  v8 = v7;
  if (v7)
  {
    v9 = _Block_copy(v7);
    v10 = v9;
    if (v9)
    {
      v11 = _Block_copy(v9);
      v12 = v11;
      if (v11)
      {
        v13 = _Block_copy(v11);
        v14 = v13;
        if (v13)
        {
          v15 = _Block_copy(v13);
          v21[0] = v15;
          _Block_release(v14);
        }
        else
        {
          v15 = 0;
          v21[0] = 0;
        }
        _Block_release(v12);
      }
      else
      {
        v15 = 0;
        v21[0] = 0;
      }
      _Block_release(v10);
    }
    else
    {
      v15 = 0;
      v21[0] = 0;
    }
    _Block_release(v8);
  }
  else
  {
    v15 = 0;
    v21[0] = 0;
  }
  _Block_release(v6);
  v16 = 0;
LABEL_21:
  v17 = operator new(0x20uLL);
  *v17 = boost::function0<void>::assign_to<dispatch::block<void({block_pointer})(void)>>(dispatch::block<void({block_pointer})(void)>)::stored_vtable;
  if (v15)
    v18 = _Block_copy(v15);
  else
    v18 = 0;
  v19 = MEMORY[0x1E0C809B0];
  v17[1] = v18;
  block[0] = v19;
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvvEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_252;
  block[4] = v17;
  dispatch_async(v2, block);
  if (boost::function0<void>::assign_to<dispatch::block<void({block_pointer})(void)>>(dispatch::block<void({block_pointer})(void)>)::stored_vtable)
  {
    if ((boost::function0<void>::assign_to<dispatch::block<void({block_pointer})(void)>>(dispatch::block<void({block_pointer})(void)>)::stored_vtable & 1) == 0)
    {
      v20 = *(void (**)(_QWORD *, _QWORD *, uint64_t))((unint64_t)boost::function0<void>::assign_to<dispatch::block<void({block_pointer})(void)>>(dispatch::block<void({block_pointer})(void)>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL);
      if (v20)
        v20(v21, v21, 2);
    }
  }
  if ((v16 & 1) == 0)
    _Block_release(v4);
}

void sub_1BF3845F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;
  const void *v11;
  char v12;

  if (v11)
    _Block_release(v11);
  if ((v12 & 1) == 0)
    _Block_release(v10);
  _Unwind_Resume(exception_object);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvvEEE_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v3;
  uint64_t v4;
  void (*v5)(uint64_t *, uint64_t *, uint64_t);
  std::runtime_error v6;

  v1 = *(_QWORD **)(a1 + 32);
  if (!*v1)
  {
    std::runtime_error::runtime_error(&v6, "call to empty boost::function");
    v6.__vftable = (std::runtime_error_vtbl *)&unk_1E78FE000;
    boost::throw_exception<boost::bad_function_call>(&v6);
  }
  (*(void (**)(_QWORD *))((*v1 & 0xFFFFFFFFFFFFFFFELL) + 8))(v1 + 1);
  v3 = *(uint64_t **)(a1 + 32);
  if (v3)
  {
    v4 = *v3;
    if (*v3)
    {
      if ((v4 & 1) == 0)
      {
        v5 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
        if (v5)
          v5(v3 + 1, v3 + 1, 2);
      }
      *v3 = 0;
    }
    operator delete(v3);
  }
}

void sub_1BF3846D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::bad_function_call>(const std::runtime_error *a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

void sub_1BF384728(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, const std::runtime_error *a2)
{
  *(_QWORD *)a1 = &unk_1E78FDFD0;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &unk_1E78FDF58;
  *(_QWORD *)(a1 + 8) = &unk_1E78FDF88;
  *(_QWORD *)(a1 + 24) = &unk_1E78FDFB0;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_1E78FE028;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

char *boost::wrapexcept<boost::bad_function_call>::clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_1E78FDFD0;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *((_QWORD *)v2 + 1) = &unk_1E78FE000;
  *((_QWORD *)v2 + 3) = &unk_1E78FE028;
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)v2 + 4) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &unk_1E78FDF58;
  *((_QWORD *)v2 + 1) = &unk_1E78FDF88;
  *((_QWORD *)v2 + 3) = &unk_1E78FDFB0;
  boost::exception_detail::copy_boost_exception((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void sub_1BF3848BC(_Unwind_Exception *a1)
{
  void *v1;
  std::runtime_error *v2;

  std::runtime_error::~runtime_error(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BF3848D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

void sub_1BF384930(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_1E78FE028;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  operator delete((void *)a1);
}

void `non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&unk_1E78FE028;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&unk_1E78FE028;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
  operator delete(&this[-1].__imp_);
}

void `non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_1E78FE028;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_1E78FE028;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
  operator delete(&a1[-2].__imp_);
}

void boost::bad_function_call::~bad_function_call(std::runtime_error *this)
{
  void *v1;

  std::runtime_error::~runtime_error(this);
  operator delete(v1);
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E78FDFD0;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = &unk_1E78FE000;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_1E78FE028;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &unk_1E78FDF58;
  *(_QWORD *)(a1 + 8) = &unk_1E78FDF88;
  *(_QWORD *)(a1 + 24) = &unk_1E78FDFB0;
  return a1;
}

void sub_1BF384BBC(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::copy_boost_exception(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    v5 = 0;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    result = *(_QWORD *)(a1 + 8);
    if (!result)
      goto LABEL_9;
    goto LABEL_8;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 40))(&v7);
  v5 = v7;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  result = *(_QWORD *)(a1 + 8);
  if (result)
LABEL_8:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
LABEL_9:
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
  return result;
}

void sub_1BF384CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 32))(a10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  _Unwind_Resume(exception_object);
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(void)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  void *v6;
  void *v7;
  const char *v8;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v8 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001BF53D37BLL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001BF53D37BLL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
LABEL_9:
        _Block_release(v7);
    }
  }
  else
  {
    v6 = *a1;
    if (*a1)
      v6 = _Block_copy(v6);
    *(_QWORD *)a2 = v6;
    if (a3 == 1)
    {
      v7 = *a1;
      if (*a1)
        goto LABEL_9;
    }
  }
}

uint64_t boost::detail::function::void_function_obj_invoker0<dispatch::block<void({block_pointer})(void)>,void>::invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 16))();
}

uint64_t boost::function0<void>::move_assign(uint64_t result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  __int128 v7;

  if (a2 != (uint64_t *)result)
  {
    v2 = a2;
    v3 = (uint64_t *)result;
    v4 = *a2;
    if (*a2)
    {
      *(_QWORD *)result = v4;
      if ((v4 & 1) != 0)
      {
        v7 = *(_OWORD *)(a2 + 1);
        *(_QWORD *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      v5 = *(_QWORD *)result;
      if (!*(_QWORD *)result)
        return result;
      if ((v5 & 1) == 0)
      {
        v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6)
          result = v6(result + 8, result + 8, 2);
      }
      v2 = v3;
    }
    *v2 = 0;
  }
  return result;
}

void sub_1BF384EA4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_1BF384EB4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *boost::function0<void>::~function0(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

int *std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  int *v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  char *v26;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = (int *)&v7[24 * v3];
  v9 = &v7[24 * v6];
  v10 = v8 + 2;
  v11 = (_QWORD *)(a2 + 8);
  v12 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  if (v12 == 2)
  {
    *v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v11 + 32))(*v11);
    v12 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  }
  else
  {
    if (v12 != 1)
      v12 = 0;
    *(_OWORD *)v10 = *(_OWORD *)v11;
    *v11 = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  *v8 = v12;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>,std::reverse_iterator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>,std::reverse_iterator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>,std::reverse_iterator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>>((uint64_t)(a1 + 2), a1[1], (int *)a1[1], *a1, (int *)*a1, (uint64_t)v8, (uint64_t)v8);
  v14 = (char *)*a1;
  v13 = (char *)a1[1];
  *a1 = v15;
  a1[1] = (uint64_t)(v8 + 6);
  a1[2] = (uint64_t)v9;
  if (v13 == v14)
  {
    if (v14)
      goto LABEL_18;
    return v8 + 6;
  }
  do
  {
    v26 = v13 - 24;
    v17 = *((_DWORD *)v13 - 6) ^ (*((int *)v13 - 6) >> 31);
    if (v17 == 2)
    {
      v22 = *((_QWORD *)v13 - 2);
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    }
    else if (v17 == 1)
    {
      v18 = (unsigned int *)*((_QWORD *)v13 - 1);
      if (v18)
      {
        v19 = v18 + 3;
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
          goto LABEL_27;
      }
    }
    else
    {
      v18 = (unsigned int *)*((_QWORD *)v13 - 1);
      if (v18)
      {
        v23 = v18 + 3;
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
LABEL_27:
          (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 24))(v18);
      }
    }
    v13 = v26;
  }
  while (v26 != v14);
  if (!v14)
    return v8 + 6;
LABEL_18:
  operator delete(v14);
  return v8 + 6;
}

void sub_1BF385148(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__destruct_at_end[abi:ne180100]((unsigned int *)a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>,std::reverse_iterator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>,std::reverse_iterator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>,std::reverse_iterator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int *v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v19;
  uint64_t v20;

  v7 = a7;
  v19 = a6;
  v20 = a7;
  if (a3 != a5)
  {
    v9 = a3;
    do
    {
      v10 = *(v9 - 6);
      v9 -= 6;
      v11 = v10 ^ (v10 >> 31);
      if (v11 == 2)
      {
        *(_QWORD *)(v7 - 16) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 - 2) + 32))(*((_QWORD *)a3 - 2));
      }
      else if (v11 == 1)
      {
        *(_QWORD *)(v7 - 16) = *((_QWORD *)a3 - 2);
        v12 = *((_QWORD *)a3 - 1);
        *(_QWORD *)(v7 - 8) = v12;
        if (v12)
        {
          v13 = (unsigned int *)(v12 + 12);
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
      }
      else
      {
        *(_QWORD *)(v7 - 16) = *((_QWORD *)a3 - 2);
        v15 = *((_QWORD *)a3 - 1);
        *(_QWORD *)(v7 - 8) = v15;
        if (v15)
        {
          v16 = (unsigned int *)(v15 + 12);
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
        }
      }
      *(_DWORD *)(v7 - 24) = *v9 ^ (*v9 >> 31);
      v7 = v20 - 24;
      v20 -= 24;
      a3 = v9;
    }
    while (v9 != a5);
    return v19;
  }
  return a6;
}

void sub_1BF3852B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>,std::reverse_iterator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>,std::reverse_iterator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>,std::reverse_iterator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>>::operator()[abi:ne180100]((unsigned int *)a1);
  return a1;
}

unsigned int *std::_AllocatorDestroyRangeReverse<std::allocator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>,std::reverse_iterator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>>::operator()[abi:ne180100](unsigned int *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v1 = *(_QWORD *)(*((_QWORD *)result + 2) + 8);
  v2 = *(_QWORD *)(*((_QWORD *)result + 1) + 8);
  while (v1 != v2)
  {
    v3 = *(_DWORD *)v1 ^ (*(int *)v1 >> 31);
    if (v3 == 2)
    {
      result = *(unsigned int **)(v1 + 8);
      if (result)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
    else if (v3 == 1)
    {
      result = *(unsigned int **)(v1 + 16);
      if (result)
      {
        v4 = result + 3;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
          goto LABEL_10;
      }
    }
    else
    {
      result = *(unsigned int **)(v1 + 16);
      if (result)
      {
        v7 = result + 3;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
LABEL_10:
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 24))(result);
      }
    }
    v1 += 24;
  }
  return result;
}

unsigned int *std::__split_buffer<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__destruct_at_end[abi:ne180100](unsigned int *result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v4;
  int v5;
  int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *((_QWORD *)result + 2);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      v5 = *(_DWORD *)(v2 - 24);
      *((_QWORD *)v4 + 2) = v2 - 24;
      v6 = v5 ^ (v5 >> 31);
      if (v6 == 2)
      {
        result = *(unsigned int **)(v2 - 16);
        if (result)
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        goto LABEL_3;
      }
      if (v6 == 1)
      {
        result = *(unsigned int **)(v2 - 8);
        if (!result)
          goto LABEL_3;
        v7 = result + 3;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (v9)
          goto LABEL_3;
      }
      else
      {
        result = *(unsigned int **)(v2 - 8);
        if (!result)
          goto LABEL_3;
        v10 = result + 3;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (v12)
          goto LABEL_3;
      }
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 24))(result);
LABEL_3:
      v2 = *((_QWORD *)v4 + 2);
    }
    while (v2 != a2);
  }
  return result;
}

_QWORD *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<coex::Module::State>>::~foreign_weak_ptr_impl(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78FE068;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<coex::Module::State>>::~foreign_weak_ptr_impl(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_1E78FE068;
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

_QWORD *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<coex::Module::State>>::clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E78FE068;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

_QWORD *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<coex::Module::State>>::~foreign_shared_ptr_impl(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_1E78FE0C8;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>::~slot(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 32, a1 + 32, 2);
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*(_QWORD *)a1)
  {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)a1, *(_QWORD *)a1);
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>::~DispatchSlot(uint64_t a1)
{
  const void *v2;

  dispatch_release(*(dispatch_object_t *)a1);
  v2 = *(const void **)(a1 + 8);
  if (v2)
    _Block_release(v2);
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy((_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  _QWORD *v1;

  v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>::~connection_body(a1);
  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  __int128 v2;
  pthread_mutex_t *v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int i;
  unsigned int v10;
  uint64_t v11;
  char v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  char *v22;
  char *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v32;
  _OWORD v33[10];
  unint64_t v34;
  void *__p;
  uint64_t v36;
  pthread_mutex_t *v37;
  _QWORD v38[4];

  v38[3] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[8] = v2;
  v33[9] = v2;
  v33[6] = v2;
  v33[7] = v2;
  v33[4] = v2;
  v33[5] = v2;
  v33[2] = v2;
  v33[3] = v2;
  v33[0] = v2;
  v33[1] = v2;
  v3 = *(pthread_mutex_t **)(a1 + 48);
  v34 = 10;
  __p = v33;
  v36 = 0;
  v37 = v3;
  pthread_mutex_lock(v3);
  v4 = *(uint64_t **)(a1 + 32);
  if (!v4)
    goto LABEL_40;
  v5 = *v4;
  if (*v4 == v4[1])
    goto LABEL_40;
  do
  {
    memset(v38, 170, 24);
    v6 = *(_DWORD *)v5 ^ (*(int *)v5 >> 31);
    if (v6 == 2)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v5 + 8) + 16))(&v32);
      v38[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
      LODWORD(v38[0]) = 1;
      if (v32)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
          goto LABEL_26;
LABEL_19:
        v11 = *(_QWORD *)(v5 + 16);
        if (!v11)
          goto LABEL_27;
        if (!atomic_load((unsigned int *)(v11 + 8)))
          goto LABEL_27;
LABEL_21:
        v13 = 0;
        if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
          goto LABEL_30;
        goto LABEL_22;
      }
LABEL_18:
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v6 != 1)
    {
      LODWORD(v38[0]) = 0;
      v38[1] = 0;
      v38[2] = 0;
      goto LABEL_18;
    }
    v7 = *(_QWORD *)(v5 + 16);
    if (!v7)
    {
LABEL_25:
      v38[1] = 0;
      v38[2] = v7;
      LODWORD(v38[0]) = 0;
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    v8 = (unsigned int *)(v7 + 8);
    for (i = *(_DWORD *)(v7 + 8); ; i = v10)
    {
      if (!i)
      {
        v7 = 0;
        goto LABEL_25;
      }
      v10 = __ldxr(v8);
      if (v10 != i)
      {
        __clrex();
        continue;
      }
      if (!__stxr(i + 1, v8))
        break;
    }
    v38[1] = *(_QWORD *)(v5 + 8);
    v38[2] = v7;
    LODWORD(v38[0]) = 0;
    if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) != 2)
      goto LABEL_19;
LABEL_26:
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v5 + 8) + 24))(*(_QWORD *)(v5 + 8)))
      goto LABEL_21;
LABEL_27:
    if (*(_BYTE *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = 0;
      boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v33);
    }
    v13 = 1;
    if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
    {
LABEL_30:
      v14 = (unsigned int *)v38[2];
      if (v38[2])
      {
        v15 = (unsigned int *)(v38[2] + 8);
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
          v18 = v14 + 3;
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
            (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 24))(v14);
        }
      }
      goto LABEL_38;
    }
LABEL_22:
    if (v38[1])
      (*(void (**)(_QWORD))(*(_QWORD *)v38[1] + 8))(v38[1]);
LABEL_38:
    if ((v13 & 1) != 0)
      break;
    v5 += 24;
  }
  while (v5 != *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
LABEL_40:
  v21 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v37);
  v22 = (char *)__p;
  if (__p)
  {
    if (v36 - 1 >= 0)
    {
      v23 = (char *)__p + 16 * v36;
      do
      {
        v24 = (unsigned int *)*((_QWORD *)v23 - 1);
        if (v24)
        {
          v25 = v24 + 2;
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 16))(v24);
            v28 = v24 + 3;
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
              (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 24))(v24);
          }
        }
        v23 -= 16;
      }
      while (v23 > v22);
    }
    if (v34 >= 0xB)
      operator delete(__p);
  }
  return v21 != 0;
}

void sub_1BF385D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *(_QWORD *)(result + 40);
  v2 = (_QWORD *)(result + 32);
  *a2 = *(_QWORD *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = *(unsigned int **)(result + 40);
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
    if (v6)
    {
      v7 = v6 + 2;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
        v10 = v6 + 3;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
      }
    }
  }
  else
  {
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>>::dispose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3)
          v3(v1 + 32, v1 + 32, 2);
      }
      *(_QWORD *)(v1 + 24) = 0;
    }
    if (*(_QWORD *)v1)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v1, *(_QWORD *)v1);
      operator delete(*(void **)v1);
    }
    operator delete((void *)v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>>::get_untyped_deleter()
{
  return 0;
}

_QWORD *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  *a1 = off_1E78FE1F8;
  v2 = (unsigned int *)a1[7];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  v9 = (unsigned int *)a1[5];
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
      v13 = v9 + 3;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
    }
  }
  *a1 = &unk_1E78FDD98;
  v16 = (unsigned int *)a1[2];
  if (v16)
  {
    v17 = v16 + 3;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16);
  }
  return a1;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>::~function(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  NSObject *v6;
  void *v7;
  const void *v8;
  const char *v9;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v9 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001BF53D909 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001BF53D909 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      v8 = (const void *)*((_QWORD *)a2 + 1);
      if (v8)
LABEL_9:
        _Block_release(v8);
    }
  }
  else
  {
    v6 = *(NSObject **)a1;
    v7 = *(void **)(a1 + 8);
    *(_QWORD *)a2 = *(_QWORD *)a1;
    if (v7)
    {
      v7 = _Block_copy(v7);
      v6 = *(NSObject **)a2;
    }
    *((_QWORD *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      v8 = *(const void **)(a1 + 8);
      if (v8)
        goto LABEL_9;
    }
  }
}

uint64_t boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::move_assign(uint64_t result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  __int128 v7;

  if (a2 != (uint64_t *)result)
  {
    v2 = a2;
    v3 = (uint64_t *)result;
    v4 = *a2;
    if (*a2)
    {
      *(_QWORD *)result = v4;
      if ((v4 & 1) != 0)
      {
        v7 = *(_OWORD *)(a2 + 1);
        *(_QWORD *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      v5 = *(_QWORD *)result;
      if (!*(_QWORD *)result)
        return result;
      if ((v5 & 1) == 0)
      {
        v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6)
          result = v6(result + 8, result + 8, 2);
      }
      v2 = v3;
    }
    *v2 = 0;
  }
  return result;
}

void sub_1BF38631C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_1BF38632C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::~function2(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t ___ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE13connect_eventIN5boost8signals26signalIFvNS1_5SubIdEENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionISA_EENSG_IFvRKNS7_10connectionES9_EEENS7_5mutexEEES3_vJS9_EEEDTcl7connectfp_cvNSD_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FST_SV_E_block_invoke(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[5];
  v2 = a1[6];
  v3 = (_QWORD *)(a1[4] + (v2 >> 1) - 72);
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>::~slot(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 32, a1 + 32, 2);
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*(_QWORD *)a1)
  {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)a1, *(_QWORD *)a1);
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(coex::SubId)>>::~DispatchSlot(uint64_t a1)
{
  const void *v2;

  dispatch_release(*(dispatch_object_t *)a1);
  v2 = *(const void **)(a1 + 8);
  if (v2)
    _Block_release(v2);
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy((_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  _QWORD *v1;

  v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>::~connection_body(a1);
  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  __int128 v2;
  pthread_mutex_t *v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int i;
  unsigned int v10;
  uint64_t v11;
  char v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  char *v22;
  char *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v32;
  _OWORD v33[10];
  unint64_t v34;
  void *__p;
  uint64_t v36;
  pthread_mutex_t *v37;
  _QWORD v38[4];

  v38[3] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[8] = v2;
  v33[9] = v2;
  v33[6] = v2;
  v33[7] = v2;
  v33[4] = v2;
  v33[5] = v2;
  v33[2] = v2;
  v33[3] = v2;
  v33[0] = v2;
  v33[1] = v2;
  v3 = *(pthread_mutex_t **)(a1 + 48);
  v34 = 10;
  __p = v33;
  v36 = 0;
  v37 = v3;
  pthread_mutex_lock(v3);
  v4 = *(uint64_t **)(a1 + 32);
  if (!v4)
    goto LABEL_40;
  v5 = *v4;
  if (*v4 == v4[1])
    goto LABEL_40;
  do
  {
    memset(v38, 170, 24);
    v6 = *(_DWORD *)v5 ^ (*(int *)v5 >> 31);
    if (v6 == 2)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v5 + 8) + 16))(&v32);
      v38[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
      LODWORD(v38[0]) = 1;
      if (v32)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
          goto LABEL_26;
LABEL_19:
        v11 = *(_QWORD *)(v5 + 16);
        if (!v11)
          goto LABEL_27;
        if (!atomic_load((unsigned int *)(v11 + 8)))
          goto LABEL_27;
LABEL_21:
        v13 = 0;
        if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
          goto LABEL_30;
        goto LABEL_22;
      }
LABEL_18:
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v6 != 1)
    {
      LODWORD(v38[0]) = 0;
      v38[1] = 0;
      v38[2] = 0;
      goto LABEL_18;
    }
    v7 = *(_QWORD *)(v5 + 16);
    if (!v7)
    {
LABEL_25:
      v38[1] = 0;
      v38[2] = v7;
      LODWORD(v38[0]) = 0;
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    v8 = (unsigned int *)(v7 + 8);
    for (i = *(_DWORD *)(v7 + 8); ; i = v10)
    {
      if (!i)
      {
        v7 = 0;
        goto LABEL_25;
      }
      v10 = __ldxr(v8);
      if (v10 != i)
      {
        __clrex();
        continue;
      }
      if (!__stxr(i + 1, v8))
        break;
    }
    v38[1] = *(_QWORD *)(v5 + 8);
    v38[2] = v7;
    LODWORD(v38[0]) = 0;
    if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) != 2)
      goto LABEL_19;
LABEL_26:
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v5 + 8) + 24))(*(_QWORD *)(v5 + 8)))
      goto LABEL_21;
LABEL_27:
    if (*(_BYTE *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = 0;
      boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v33);
    }
    v13 = 1;
    if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
    {
LABEL_30:
      v14 = (unsigned int *)v38[2];
      if (v38[2])
      {
        v15 = (unsigned int *)(v38[2] + 8);
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
          v18 = v14 + 3;
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
            (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 24))(v14);
        }
      }
      goto LABEL_38;
    }
LABEL_22:
    if (v38[1])
      (*(void (**)(_QWORD))(*(_QWORD *)v38[1] + 8))(v38[1]);
LABEL_38:
    if ((v13 & 1) != 0)
      break;
    v5 += 24;
  }
  while (v5 != *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
LABEL_40:
  v21 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v37);
  v22 = (char *)__p;
  if (__p)
  {
    if (v36 - 1 >= 0)
    {
      v23 = (char *)__p + 16 * v36;
      do
      {
        v24 = (unsigned int *)*((_QWORD *)v23 - 1);
        if (v24)
        {
          v25 = v24 + 2;
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 16))(v24);
            v28 = v24 + 3;
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
              (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 24))(v24);
          }
        }
        v23 -= 16;
      }
      while (v23 > v22);
    }
    if (v34 >= 0xB)
      operator delete(__p);
  }
  return v21 != 0;
}

void sub_1BF386B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *(_QWORD *)(result + 40);
  v2 = (_QWORD *)(result + 32);
  *a2 = *(_QWORD *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = *(unsigned int **)(result + 40);
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
    if (v6)
    {
      v7 = v6 + 2;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
        v10 = v6 + 3;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
      }
    }
  }
  else
  {
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>>::dispose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3)
          v3(v1 + 32, v1 + 32, 2);
      }
      *(_QWORD *)(v1 + 24) = 0;
    }
    if (*(_QWORD *)v1)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v1, *(_QWORD *)v1);
      operator delete(*(void **)v1);
    }
    operator delete((void *)v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>>::get_untyped_deleter()
{
  return 0;
}

_QWORD *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  *a1 = off_1E78FE450;
  v2 = (unsigned int *)a1[7];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  v9 = (unsigned int *)a1[5];
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
      v13 = v9 + 3;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
    }
  }
  *a1 = &unk_1E78FDD98;
  v16 = (unsigned int *)a1[2];
  if (v16)
  {
    v17 = v16 + 3;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16);
  }
  return a1;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(coex::SubId)>::~function(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(coex::SubId)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  NSObject *v6;
  void *v7;
  const void *v8;
  const char *v9;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v9 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001BF53DD4ALL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001BF53DD4ALL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      v8 = (const void *)*((_QWORD *)a2 + 1);
      if (v8)
LABEL_9:
        _Block_release(v8);
    }
  }
  else
  {
    v6 = *(NSObject **)a1;
    v7 = *(void **)(a1 + 8);
    *(_QWORD *)a2 = *(_QWORD *)a1;
    if (v7)
    {
      v7 = _Block_copy(v7);
      v6 = *(NSObject **)a2;
    }
    *((_QWORD *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      v8 = *(const void **)(a1 + 8);
      if (v8)
        goto LABEL_9;
    }
  }
}

void boost::detail::function::void_function_obj_invoker1<ctu::DispatchSlot<dispatch::block<void({block_pointer})(coex::SubId)>>,void,coex::SubId>::invoke(uint64_t a1, int a2)
{
  const void *v3;
  NSObject *v4;
  void *v5;
  const void *v6;
  void *v7;
  const void *v8;
  void *v9;
  const void *v10;
  void *v11;
  const void *v12;
  void *v13;
  const void *v14;
  void *v15;
  const void *v16;
  void *v17;
  char v18;
  _DWORD *v19;
  _QWORD *v20;
  void *v21;
  void (*v22)(_QWORD *, _QWORD *, uint64_t);
  _QWORD v23[3];
  _QWORD block[6];

  v4 = *(NSObject **)a1;
  v3 = *(const void **)(a1 + 8);
  if (!v3)
  {
    v6 = 0;
    goto LABEL_10;
  }
  v5 = _Block_copy(v3);
  v6 = v5;
  if (!v5)
  {
LABEL_10:
    v18 = 1;
LABEL_11:
    v17 = 0;
    v23[0] = 0;
    goto LABEL_21;
  }
  v7 = _Block_copy(v5);
  v8 = v7;
  if (!v7)
  {
    v18 = 0;
    goto LABEL_11;
  }
  v9 = _Block_copy(v7);
  v10 = v9;
  if (v9)
  {
    v11 = _Block_copy(v9);
    v12 = v11;
    if (v11)
    {
      v13 = _Block_copy(v11);
      v14 = v13;
      if (v13)
      {
        v15 = _Block_copy(v13);
        v16 = v15;
        if (v15)
        {
          v17 = _Block_copy(v15);
          v23[0] = v17;
          _Block_release(v16);
        }
        else
        {
          v17 = 0;
          v23[0] = 0;
        }
        _Block_release(v14);
      }
      else
      {
        v17 = 0;
        v23[0] = 0;
      }
      _Block_release(v12);
    }
    else
    {
      v17 = 0;
      v23[0] = 0;
    }
    _Block_release(v10);
  }
  else
  {
    v17 = 0;
    v23[0] = 0;
  }
  _Block_release(v8);
  v18 = 0;
LABEL_21:
  v19 = operator new(4uLL);
  *v19 = a2;
  v20 = operator new(0x20uLL);
  *v20 = boost::function1<void,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(coex::SubId)>>(dispatch::block<void({block_pointer})(coex::SubId)>)::stored_vtable;
  if (v17)
    v21 = _Block_copy(v17);
  else
    v21 = 0;
  v20[1] = v21;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvN4coex5SubIdEEEES4__block_invoke;
  block[3] = &__block_descriptor_tmp_258;
  block[4] = v20;
  block[5] = v19;
  dispatch_async(v4, block);
  if (boost::function1<void,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(coex::SubId)>>(dispatch::block<void({block_pointer})(coex::SubId)>)::stored_vtable)
  {
    if ((boost::function1<void,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(coex::SubId)>>(dispatch::block<void({block_pointer})(coex::SubId)>)::stored_vtable & 1) == 0)
    {
      v22 = *(void (**)(_QWORD *, _QWORD *, uint64_t))((unint64_t)boost::function1<void,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(coex::SubId)>>(dispatch::block<void({block_pointer})(coex::SubId)>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL);
      if (v22)
        v22(v23, v23, 2);
    }
  }
  if ((v18 & 1) == 0)
    _Block_release(v6);
}

void sub_1BF387294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  const void *v9;
  const void *v10;
  char v11;

  if (v10)
    _Block_release(v10);
  if ((v11 & 1) == 0)
    _Block_release(v9);
  _Unwind_Resume(exception_object);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvN4coex5SubIdEEEES4__block_invoke(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v3;
  uint64_t v4;
  void (*v5)(uint64_t *, uint64_t *, uint64_t);
  void *v6;
  std::runtime_error v7;

  v1 = *(_QWORD **)(a1 + 32);
  if (!*v1)
  {
    std::runtime_error::runtime_error(&v7, "call to empty boost::function");
    v7.__vftable = (std::runtime_error_vtbl *)&unk_1E78FE000;
    boost::throw_exception<boost::bad_function_call>(&v7);
  }
  (*(void (**)(_QWORD *, _QWORD))((*v1 & 0xFFFFFFFFFFFFFFFELL) + 8))(v1 + 1, **(unsigned int **)(a1 + 40));
  v3 = *(uint64_t **)(a1 + 32);
  if (v3)
  {
    v4 = *v3;
    if (*v3)
    {
      if ((v4 & 1) == 0)
      {
        v5 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
        if (v5)
          v5(v3 + 1, v3 + 1, 2);
      }
      *v3 = 0;
    }
    operator delete(v3);
  }
  v6 = *(void **)(a1 + 40);
  if (v6)
    operator delete(v6);
}

void sub_1BF387390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(coex::SubId)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  void *v6;
  void *v7;
  const char *v8;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v8 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001BF53DD94 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001BF53DD94 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
LABEL_9:
        _Block_release(v7);
    }
  }
  else
  {
    v6 = *a1;
    if (*a1)
      v6 = _Block_copy(v6);
    *(_QWORD *)a2 = v6;
    if (a3 == 1)
    {
      v7 = *a1;
      if (*a1)
        goto LABEL_9;
    }
  }
}

uint64_t boost::detail::function::void_function_obj_invoker1<dispatch::block<void({block_pointer})(coex::SubId)>,void,coex::SubId>::invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 16))();
}

uint64_t boost::function1<void,coex::SubId>::move_assign(uint64_t result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  __int128 v7;

  if (a2 != (uint64_t *)result)
  {
    v2 = a2;
    v3 = (uint64_t *)result;
    v4 = *a2;
    if (*a2)
    {
      *(_QWORD *)result = v4;
      if ((v4 & 1) != 0)
      {
        v7 = *(_OWORD *)(a2 + 1);
        *(_QWORD *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      v5 = *(_QWORD *)result;
      if (!*(_QWORD *)result)
        return result;
      if ((v5 & 1) == 0)
      {
        v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6)
          result = v6(result + 8, result + 8, 2);
      }
      v2 = v3;
    }
    *v2 = 0;
  }
  return result;
}

void sub_1BF387540(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_1BF387550(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *boost::function1<void,coex::SubId>::~function1(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

_QWORD *std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _OWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD **v25;

  if (a2 != a3)
  {
    v3 = a2;
    v4 = result + 1;
    v24 = a3;
    v25 = (_QWORD **)result;
    while (1)
    {
      v5 = (uint64_t *)result[1];
      v6 = v4;
      if ((_QWORD *)*result != v4)
      {
        v7 = (_QWORD *)result[1];
        v8 = v4;
        if (v5)
        {
          do
          {
            v6 = v7;
            v7 = (_QWORD *)v7[1];
          }
          while (v7);
        }
        else
        {
          do
          {
            v6 = (_QWORD *)v8[2];
            v9 = *v6 == (_QWORD)v8;
            v8 = v6;
          }
          while (v9);
        }
        v10 = v3[4];
        if (v6[4] >= v10)
          break;
      }
      if (v5)
        v11 = (uint64_t **)v6;
      else
        v11 = (uint64_t **)v4;
      if (v5)
        v12 = (uint64_t **)(v6 + 1);
      else
        v12 = (uint64_t **)v4;
      if (!*v12)
        goto LABEL_25;
LABEL_31:
      v22 = (_QWORD *)v3[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v3[2];
          v9 = *v23 == (_QWORD)v3;
          v3 = v23;
        }
        while (!v9);
      }
      v3 = v23;
      result = v25;
      if (v23 == a3)
        return result;
    }
    v12 = (uint64_t **)v4;
    v11 = (uint64_t **)v4;
    if (v5)
    {
      while (1)
      {
        while (1)
        {
          v11 = (uint64_t **)v5;
          v13 = v5[4];
          if (v13 <= v10)
            break;
          v5 = *v11;
          v12 = v11;
          if (!*v11)
            goto LABEL_25;
        }
        if (v13 >= v10)
          goto LABEL_31;
        v5 = v11[1];
        if (!v5)
        {
          v12 = v11 + 1;
          break;
        }
      }
    }
LABEL_25:
    v14 = (uint64_t *)operator new(0x40uLL);
    v15 = v14;
    v16 = v14 + 5;
    v14[4] = v3[4];
    v14[5] = (uint64_t)(v14 + 5);
    v14[6] = (uint64_t)(v14 + 5);
    v14[7] = 0;
    v17 = v3[6];
    if ((_QWORD *)v17 != v3 + 5)
    {
      v18 = 1;
      v19 = v14 + 5;
      do
      {
        v20 = operator new(0x20uLL);
        v20[1] = *(_OWORD *)(v17 + 16);
        *(_QWORD *)v20 = v19;
        *((_QWORD *)v20 + 1) = v16;
        v19[1] = v20;
        v15[5] = (uint64_t)v20;
        v15[7] = v18;
        v17 = *(_QWORD *)(v17 + 8);
        ++v18;
        v19 = v20;
      }
      while ((_QWORD *)v17 != v3 + 5);
    }
    *v15 = 0;
    v15[1] = 0;
    v15[2] = (uint64_t)v11;
    *v12 = v15;
    v21 = (_QWORD *)**v25;
    if (v21)
    {
      *v25 = v21;
      v15 = *v12;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v25[1], v15);
    v25[2] = (_QWORD *)((char *)v25[2] + 1);
    a3 = v24;
    goto LABEL_31;
  }
  return result;
}

uint64_t boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>::~slot(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 32, a1 + 32, 2);
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*(_QWORD *)a1)
  {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)a1, *(_QWORD *)a1);
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>::~DispatchSlot(uint64_t a1)
{
  const void *v2;

  dispatch_release(*(dispatch_object_t *)a1);
  v2 = *(const void **)(a1 + 8);
  if (v2)
    _Block_release(v2);
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy((_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  _QWORD *v1;

  v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>::~connection_body(a1);
  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  __int128 v2;
  pthread_mutex_t *v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int i;
  unsigned int v10;
  uint64_t v11;
  char v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  char *v22;
  char *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v32;
  _OWORD v33[10];
  unint64_t v34;
  void *__p;
  uint64_t v36;
  pthread_mutex_t *v37;
  _QWORD v38[4];

  v38[3] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[8] = v2;
  v33[9] = v2;
  v33[6] = v2;
  v33[7] = v2;
  v33[4] = v2;
  v33[5] = v2;
  v33[2] = v2;
  v33[3] = v2;
  v33[0] = v2;
  v33[1] = v2;
  v3 = *(pthread_mutex_t **)(a1 + 48);
  v34 = 10;
  __p = v33;
  v36 = 0;
  v37 = v3;
  pthread_mutex_lock(v3);
  v4 = *(uint64_t **)(a1 + 32);
  if (!v4)
    goto LABEL_40;
  v5 = *v4;
  if (*v4 == v4[1])
    goto LABEL_40;
  do
  {
    memset(v38, 170, 24);
    v6 = *(_DWORD *)v5 ^ (*(int *)v5 >> 31);
    if (v6 == 2)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v5 + 8) + 16))(&v32);
      v38[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
      LODWORD(v38[0]) = 1;
      if (v32)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
          goto LABEL_26;
LABEL_19:
        v11 = *(_QWORD *)(v5 + 16);
        if (!v11)
          goto LABEL_27;
        if (!atomic_load((unsigned int *)(v11 + 8)))
          goto LABEL_27;
LABEL_21:
        v13 = 0;
        if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
          goto LABEL_30;
        goto LABEL_22;
      }
LABEL_18:
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v6 != 1)
    {
      LODWORD(v38[0]) = 0;
      v38[1] = 0;
      v38[2] = 0;
      goto LABEL_18;
    }
    v7 = *(_QWORD *)(v5 + 16);
    if (!v7)
    {
LABEL_25:
      v38[1] = 0;
      v38[2] = v7;
      LODWORD(v38[0]) = 0;
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    v8 = (unsigned int *)(v7 + 8);
    for (i = *(_DWORD *)(v7 + 8); ; i = v10)
    {
      if (!i)
      {
        v7 = 0;
        goto LABEL_25;
      }
      v10 = __ldxr(v8);
      if (v10 != i)
      {
        __clrex();
        continue;
      }
      if (!__stxr(i + 1, v8))
        break;
    }
    v38[1] = *(_QWORD *)(v5 + 8);
    v38[2] = v7;
    LODWORD(v38[0]) = 0;
    if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) != 2)
      goto LABEL_19;
LABEL_26:
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v5 + 8) + 24))(*(_QWORD *)(v5 + 8)))
      goto LABEL_21;
LABEL_27:
    if (*(_BYTE *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = 0;
      boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v33);
    }
    v13 = 1;
    if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
    {
LABEL_30:
      v14 = (unsigned int *)v38[2];
      if (v38[2])
      {
        v15 = (unsigned int *)(v38[2] + 8);
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
          v18 = v14 + 3;
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
            (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 24))(v14);
        }
      }
      goto LABEL_38;
    }
LABEL_22:
    if (v38[1])
      (*(void (**)(_QWORD))(*(_QWORD *)v38[1] + 8))(v38[1]);
LABEL_38:
    if ((v13 & 1) != 0)
      break;
    v5 += 24;
  }
  while (v5 != *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
LABEL_40:
  v21 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v37);
  v22 = (char *)__p;
  if (__p)
  {
    if (v36 - 1 >= 0)
    {
      v23 = (char *)__p + 16 * v36;
      do
      {
        v24 = (unsigned int *)*((_QWORD *)v23 - 1);
        if (v24)
        {
          v25 = v24 + 2;
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 16))(v24);
            v28 = v24 + 3;
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
              (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 24))(v24);
          }
        }
        v23 -= 16;
      }
      while (v23 > v22);
    }
    if (v34 >= 0xB)
      operator delete(__p);
  }
  return v21 != 0;
}

void sub_1BF387F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *(_QWORD *)(result + 40);
  v2 = (_QWORD *)(result + 32);
  *a2 = *(_QWORD *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = *(unsigned int **)(result + 40);
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
    if (v6)
    {
      v7 = v6 + 2;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
        v10 = v6 + 3;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
      }
    }
  }
  else
  {
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>>::dispose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3)
          v3(v1 + 32, v1 + 32, 2);
      }
      *(_QWORD *)(v1 + 24) = 0;
    }
    if (*(_QWORD *)v1)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v1, *(_QWORD *)v1);
      operator delete(*(void **)v1);
    }
    operator delete((void *)v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>>::get_untyped_deleter()
{
  return 0;
}

_QWORD *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  *a1 = off_1E78FE6A8;
  v2 = (unsigned int *)a1[7];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  v9 = (unsigned int *)a1[5];
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
      v13 = v9 + 3;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
    }
  }
  *a1 = &unk_1E78FDD98;
  v16 = (unsigned int *)a1[2];
  if (v16)
  {
    v17 = v16 + 3;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16);
  }
  return a1;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>::~function(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  NSObject *v6;
  void *v7;
  const void *v8;
  const char *v9;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v9 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001BF53E308 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001BF53E308 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      v8 = (const void *)*((_QWORD *)a2 + 1);
      if (v8)
LABEL_9:
        _Block_release(v8);
    }
  }
  else
  {
    v6 = *(NSObject **)a1;
    v7 = *(void **)(a1 + 8);
    *(_QWORD *)a2 = *(_QWORD *)a1;
    if (v7)
    {
      v7 = _Block_copy(v7);
      v6 = *(NSObject **)a2;
    }
    *((_QWORD *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      v8 = *(const void **)(a1 + 8);
      if (v8)
        goto LABEL_9;
    }
  }
}

uint64_t boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::move_assign(uint64_t result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  __int128 v7;

  if (a2 != (uint64_t *)result)
  {
    v2 = a2;
    v3 = (uint64_t *)result;
    v4 = *a2;
    if (*a2)
    {
      *(_QWORD *)result = v4;
      if ((v4 & 1) != 0)
      {
        v7 = *(_OWORD *)(a2 + 1);
        *(_QWORD *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      v5 = *(_QWORD *)result;
      if (!*(_QWORD *)result)
        return result;
      if ((v5 & 1) == 0)
      {
        v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6)
          result = v6(result + 8, result + 8, 2);
      }
      v2 = v3;
    }
    *v2 = 0;
  }
  return result;
}

void sub_1BF388534(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_1BF388544(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::~function2(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

void ctu::SharedSynchronizable<coex::Module::State>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E78FE818;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrIKN4coex6Module5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrIKN4coex6Module5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ctu::cf::insert<__CFString const*,__CFBoolean const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf)
    CFRetain(cf);
  if (a3)
  {
    CFRetain(a3);
    if (cf)
      CFDictionaryAddValue(a1, cf, a3);
    CFRelease(a3);
  }
  if (cf)
    CFRelease(cf);
}

void sub_1BF3887CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void sub_1BF3887F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,__CFDictionary const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf)
    CFRetain(cf);
  if (a3)
  {
    CFRetain(a3);
    if (cf)
      CFDictionaryAddValue(a1, cf, a3);
    CFRelease(a3);
  }
  if (cf)
    CFRelease(cf);
}

void sub_1BF388880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void sub_1BF3888A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,int>(__CFDictionary *a1, CFTypeRef cf, int a3, CFAllocatorRef allocator)
{
  CFNumberRef v8;
  CFNumberRef v9;
  int valuePtr;

  if (cf)
    CFRetain(cf);
  valuePtr = a3;
  v8 = CFNumberCreate(allocator, kCFNumberIntType, &valuePtr);
  v9 = v8;
  if (cf && v8)
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf)
    CFRelease(cf);
}

void sub_1BF388950(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1BF388974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,BOOL>(CFMutableDictionaryRef theDict, CFTypeRef cf, int a3)
{
  const void **v6;
  const void *v7;

  if (cf)
    CFRetain(cf);
  v6 = (const void **)MEMORY[0x1E0C9AE50];
  if (!a3)
    v6 = (const void **)MEMORY[0x1E0C9AE40];
  v7 = *v6;
  if (cf && v7)
  {
    CFDictionaryAddValue(theDict, cf, v7);
  }
  else if (!v7)
  {
    goto LABEL_10;
  }
  CFRelease(v7);
LABEL_10:
  if (cf)
    CFRelease(cf);
}

void sub_1BF388A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,unsigned short>(__CFDictionary *a1, CFTypeRef cf, unsigned int a3, CFAllocatorRef allocator)
{
  CFNumberRef v8;
  CFNumberRef v9;
  uint64_t valuePtr;

  if (cf)
    CFRetain(cf);
  valuePtr = a3;
  v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  v9 = v8;
  if (cf && v8)
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf)
    CFRelease(cf);
}

void sub_1BF388AE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1BF388B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,unsigned char>(__CFDictionary *a1, CFTypeRef cf, unsigned int a3, CFAllocatorRef allocator)
{
  CFNumberRef v8;
  CFNumberRef v9;
  uint64_t valuePtr;

  if (cf)
    CFRetain(cf);
  valuePtr = a3;
  v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  v9 = v8;
  if (cf && v8)
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf)
    CFRelease(cf);
}

void sub_1BF388BB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1BF388BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,void const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf)
    CFRetain(cf);
  if (a3)
  {
    CFRetain(a3);
    if (cf)
      CFDictionaryAddValue(a1, cf, a3);
    CFRelease(a3);
  }
  if (cf)
    CFRelease(cf);
}

void sub_1BF388C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void sub_1BF388C8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_246()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1BF335000);
  }
  return result;
}

uint64_t *BasebandTransport::getSupportedProtocols@<X0>(BasebandTransport *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *result;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  *a2 = (uint64_t)a2;
  a2[1] = (uint64_t)a2;
  a2[2] = 0;
  result = (uint64_t *)capabilities::radio::vendor(this);
  if ((_DWORD)result == 1)
  {
    v13 = operator new(0x18uLL);
    v13[4] = 0;
    *(_QWORD *)v13 = &v33;
    *((_QWORD *)v13 + 1) = &v33;
    v34 = (uint64_t *)v13;
    v14 = operator new(0x18uLL);
    v14[4] = 1;
    *(_QWORD *)v14 = v13;
    *((_QWORD *)v14 + 1) = &v33;
    *((_QWORD *)v13 + 1) = v14;
    v15 = operator new(0x18uLL);
    v15[4] = 2;
    *(_QWORD *)v15 = v14;
    *((_QWORD *)v15 + 1) = &v33;
    *((_QWORD *)v14 + 1) = v15;
    v16 = operator new(0x18uLL);
    v16[4] = 3;
    *(_QWORD *)v16 = v15;
    *((_QWORD *)v16 + 1) = &v33;
    *((_QWORD *)v15 + 1) = v16;
    v17 = operator new(0x18uLL);
    v17[4] = 4;
    *(_QWORD *)v17 = v16;
    *((_QWORD *)v17 + 1) = &v33;
    *((_QWORD *)v16 + 1) = v17;
    v18 = operator new(0x18uLL);
    v18[4] = 5;
    *(_QWORD *)v18 = v17;
    *((_QWORD *)v18 + 1) = &v33;
    *((_QWORD *)v17 + 1) = v18;
    v19 = operator new(0x18uLL);
    v19[4] = 10;
    *(_QWORD *)v19 = v18;
    *((_QWORD *)v19 + 1) = &v33;
    *((_QWORD *)v18 + 1) = v19;
    v20 = operator new(0x18uLL);
    v20[4] = 12;
    *(_QWORD *)v20 = v19;
    *((_QWORD *)v20 + 1) = &v33;
    *((_QWORD *)v19 + 1) = v20;
    v21 = operator new(0x18uLL);
    v21[4] = 14;
    *(_QWORD *)v21 = v20;
    *((_QWORD *)v21 + 1) = &v33;
    *((_QWORD *)v20 + 1) = v21;
    v33 = (uint64_t)v21;
    v35 = 9;
    result = (uint64_t *)capabilities::radio::mav20Plus((capabilities::radio *)v21);
    if ((_DWORD)result)
    {
      v22 = operator new(0x18uLL);
      v22[4] = 11;
      v23 = v33;
      *(_QWORD *)v22 = v33;
      *((_QWORD *)v22 + 1) = &v33;
      *(_QWORD *)(v23 + 8) = v22;
      v24 = v35;
      v33 = (uint64_t)v22;
      ++v35;
      result = (uint64_t *)operator new(0x18uLL);
      *((_DWORD *)result + 4) = 15;
      *result = (uint64_t)v22;
      result[1] = (uint64_t)&v33;
      *((_QWORD *)v22 + 1) = result;
      v33 = (uint64_t)result;
      v35 = v24 + 2;
    }
    if (a2[2])
    {
      v25 = *a2;
      result = (uint64_t *)a2[1];
      v26 = *result;
      *(_QWORD *)(v26 + 8) = *(_QWORD *)(*a2 + 8);
      **(_QWORD **)(v25 + 8) = v26;
      a2[2] = 0;
      if (result != a2)
      {
        do
        {
          v27 = result[1];
          operator delete(result);
          result = (uint64_t *)v27;
        }
        while ((uint64_t *)v27 != a2);
      }
    }
  }
  else
  {
    if ((_DWORD)result != 2)
      return result;
    v4 = operator new(0x18uLL);
    v4[4] = 6;
    *(_QWORD *)v4 = &v33;
    *((_QWORD *)v4 + 1) = &v33;
    v34 = (uint64_t *)v4;
    v5 = operator new(0x18uLL);
    v5[4] = 7;
    *(_QWORD *)v5 = v4;
    *((_QWORD *)v5 + 1) = &v33;
    *((_QWORD *)v4 + 1) = v5;
    v6 = operator new(0x18uLL);
    v6[4] = 8;
    *(_QWORD *)v6 = v5;
    *((_QWORD *)v6 + 1) = &v33;
    *((_QWORD *)v5 + 1) = v6;
    v7 = operator new(0x18uLL);
    v7[4] = 9;
    *(_QWORD *)v7 = v6;
    *((_QWORD *)v7 + 1) = &v33;
    *((_QWORD *)v6 + 1) = v7;
    v8 = operator new(0x18uLL);
    v8[4] = 10;
    *(_QWORD *)v8 = v7;
    *((_QWORD *)v8 + 1) = &v33;
    *((_QWORD *)v7 + 1) = v8;
    v33 = (uint64_t)v8;
    v35 = 5;
    result = (uint64_t *)capabilities::abs::supportsETSProtocol((capabilities::abs *)v8);
    if ((_DWORD)result)
    {
      result = (uint64_t *)operator new(0x18uLL);
      *((_DWORD *)result + 4) = 13;
      v9 = v33;
      *result = v33;
      result[1] = (uint64_t)&v33;
      *(_QWORD *)(v9 + 8) = result;
      v33 = (uint64_t)result;
      ++v35;
    }
    if (a2[2])
    {
      v10 = *a2;
      result = (uint64_t *)a2[1];
      v11 = *result;
      *(_QWORD *)(v11 + 8) = *(_QWORD *)(*a2 + 8);
      **(_QWORD **)(v10 + 8) = v11;
      a2[2] = 0;
      if (result != a2)
      {
        do
        {
          v12 = result[1];
          operator delete(result);
          result = (uint64_t *)v12;
        }
        while ((uint64_t *)v12 != a2);
      }
    }
  }
  v28 = v35;
  if (v35)
  {
    v30 = v33;
    v29 = v34;
    v31 = *v34;
    *(_QWORD *)(v31 + 8) = *(_QWORD *)(v33 + 8);
    **(_QWORD **)(v30 + 8) = v31;
    v32 = *a2;
    *(_QWORD *)(v32 + 8) = v29;
    *v29 = v32;
    *a2 = v30;
    *(_QWORD *)(v30 + 8) = a2;
    a2[2] += v28;
  }
  return result;
}

void sub_1BF389038(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t *v2;
  va_list va;

  va_start(va, a2);
  std::list<std::pair<unsigned long long,unsigned int>>::~list((uint64_t *)va);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(v2);
  _Unwind_Resume(a1);
}

void sub_1BF389068(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::list<std::pair<unsigned long long,unsigned int>>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_1BF389080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v16;

  do
  {
    v16 = (_QWORD *)v13[1];
    operator delete(v13);
    v13 = v16;
  }
  while (v16 != v14);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(v12);
  _Unwind_Resume(a1);
}

void BasebandTransport::getSupportedProtocolsAsStringLowerCase(BasebandTransport *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t i;
  int v4;
  char v5;
  char v6;
  char v7;
  char v8;
  __darwin_ct_rune_t v9;
  char v10;
  __darwin_ct_rune_t v11;
  _QWORD *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  __darwin_ct_rune_t v19[6];
  uint64_t v20[3];

  *a2 = (uint64_t)a2;
  a2[1] = (uint64_t)a2;
  a2[2] = 0;
  memset(v20, 170, sizeof(v20));
  BasebandTransport::getSupportedProtocols(this, v20);
  for (i = v20[1]; (uint64_t *)i != v20; i = *(_QWORD *)(i + 8))
  {
    v4 = *(_DWORD *)(i + 16);
    memset(v19, 170, sizeof(v19));
    switch(v4)
    {
      case 0:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 4997712;
        goto LABEL_30;
      case 1:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 4997715;
        goto LABEL_30;
      case 2:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1195460932;
        goto LABEL_26;
      case 3:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1397114194;
        goto LABEL_26;
      case 4:
        v5 = 0;
        v10 = 0;
        v6 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 5;
        strcpy((char *)v19, "QMUX1");
        v7 = 1;
        break;
      case 5:
        v5 = 0;
        v10 = 0;
        v6 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 5;
        strcpy((char *)v19, "QMUX2");
        v7 = 1;
        break;
      case 6:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 5066578;
        goto LABEL_30;
      case 7:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1414483778;
        goto LABEL_26;
      case 8:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 4805185;
        goto LABEL_30;
      case 9:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 5526611;
        goto LABEL_30;
      case 10:
        v10 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 2;
        strcpy((char *)v19, "AT");
        v5 = 1;
        break;
      case 11:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1280328769;
        goto LABEL_26;
      case 12:
        v5 = 0;
        v10 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 8;
        strcpy((char *)v19, "MEDIACTL");
        break;
      case 13:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 5461061;
        goto LABEL_30;
      case 14:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        strcpy((char *)v19, "GNSS");
        v6 = 1;
        break;
      case 15:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1397965905;
        goto LABEL_26;
      case 16:
        v5 = 0;
        v10 = 0;
        v6 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 5;
        strcpy((char *)v19, "RCTTH");
        v7 = 1;
        break;
      case 17:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 5260097;
        goto LABEL_30;
      case 18:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1297040214;
        goto LABEL_26;
      case 19:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1129335117;
LABEL_26:
        v19[0] = v11;
        v6 = 1;
        LOBYTE(v19[1]) = 0;
        break;
      case 20:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 4999236;
        goto LABEL_30;
      case 21:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 5789005;
        goto LABEL_30;
      case 22:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 4407622;
LABEL_30:
        v19[0] = v9;
        v10 = 1;
        break;
      default:
        v5 = 0;
        v10 = 0;
        v6 = 0;
        v7 = 0;
        HIBYTE(v19[5]) = 7;
        strcpy((char *)v19, "Unknown");
        v8 = 1;
        break;
    }
    LOBYTE(v19[0]) = __tolower(SLOBYTE(v19[0]));
    BYTE1(v19[0]) = __tolower(SBYTE1(v19[0]));
    if ((v5 & 1) == 0)
    {
      BYTE2(v19[0]) = __tolower(SBYTE2(v19[0]));
      if ((v10 & 1) == 0)
      {
        HIBYTE(v19[0]) = __tolower(SHIBYTE(v19[0]));
        if ((v6 & 1) == 0)
        {
          LOBYTE(v19[1]) = __tolower(SLOBYTE(v19[1]));
          if ((v7 & 1) == 0)
          {
            BYTE1(v19[1]) = __tolower(SBYTE1(v19[1]));
            BYTE2(v19[1]) = __tolower(SBYTE2(v19[1]));
            if ((v8 & 1) == 0)
              HIBYTE(v19[1]) = __tolower(SHIBYTE(v19[1]));
          }
        }
      }
    }
    v12 = operator new(0x28uLL);
    v13 = (std::string *)(v12 + 2);
    *v12 = 0;
    v12[1] = 0;
    if (SHIBYTE(v19[5]) < 0)
    {
      std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v19, *(std::string::size_type *)&v19[2]);
    }
    else
    {
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)v19;
      v12[4] = *(_QWORD *)&v19[4];
    }
    v14 = *a2;
    *v12 = *a2;
    v12[1] = a2;
    *(_QWORD *)(v14 + 8) = v12;
    *a2 = (uint64_t)v12;
    ++a2[2];
    if (SHIBYTE(v19[5]) < 0)
      operator delete(*(void **)v19);
  }
  if (v20[2])
  {
    v16 = v20[0];
    v15 = (uint64_t *)v20[1];
    v17 = *(_QWORD *)v20[1];
    *(_QWORD *)(v17 + 8) = *(_QWORD *)(v20[0] + 8);
    **(_QWORD **)(v16 + 8) = v17;
    v20[2] = 0;
    if (v15 != v20)
    {
      do
      {
        v18 = (uint64_t *)v15[1];
        operator delete(v15);
        v15 = v18;
      }
      while (v18 != v20);
    }
  }
}

void sub_1BF389694(_Unwind_Exception *a1)
{
  char *v1;

  std::list<std::string>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_1BF3896A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  char *v15;
  void *v16;
  void *v17;

  v17 = v16;
  operator delete(v17);
  if (a14 < 0)
    operator delete(__p);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(&a15);
  std::list<std::string>::~list(v15);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::asStringLowerCase@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;

  memset(a2, 170, 24);
  result = BasebandTransport::asString(a1, (char *)a2);
  v4 = *((unsigned __int8 *)a2 + 23);
  v5 = (char)v4;
  v6 = (char *)a2 + v4;
  if (v5 >= 0)
    v7 = v6;
  else
    v7 = (_BYTE *)(*a2 + a2[1]);
  if (v5 >= 0)
    v8 = a2;
  else
    v8 = (_BYTE *)*a2;
  for (; v8 != v7; ++v8)
  {
    result = __tolower((char)*v8);
    *v8 = result;
  }
  return result;
}

void sub_1BF389760(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *std::list<std::string>::~list(char *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v6;

  if (*((_QWORD *)a1 + 2))
  {
    v2 = *(_QWORD *)a1;
    v3 = (char *)*((_QWORD *)a1 + 1);
    v4 = *(_QWORD *)v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*(_QWORD *)a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    *((_QWORD *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (char *)*((_QWORD *)v3 + 1);
        if (v3[39] < 0)
          operator delete(*((void **)v3 + 2));
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void BasebandTransport::getSupportedProtocolsAsString(BasebandTransport *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18[3];

  *a2 = a2;
  a2[1] = a2;
  a2[2] = 0;
  memset(v18, 170, sizeof(v18));
  BasebandTransport::getSupportedProtocols(this, v18);
  v3 = (uint64_t *)v18[1];
  if ((uint64_t *)v18[1] != v18)
  {
    v4 = a2[2];
    v5 = v4 + 1;
    v6 = (_QWORD *)*a2;
    v7 = v18[1];
    do
    {
      v8 = 8;
      v9 = 0x4C5443414944454DLL;
      switch(*(_DWORD *)(v7 + 16))
      {
        case 0:
          v9 = v4 & 0xFFFFFFFF00000000 | 0x4C4250;
          v8 = 3;
          break;
        case 1:
          v9 = (v4 & 0xFFFFFFFF00000000 | 0x4C4250) + 3;
          v8 = 3;
          break;
        case 2:
          v10 = 1195460932;
          goto LABEL_25;
        case 3:
          v10 = 1397114194;
          goto LABEL_25;
        case 4:
          v11 = 0x3158554D51;
          goto LABEL_21;
        case 5:
          v11 = 0x3258554D51;
          goto LABEL_21;
        case 6:
          v12 = 5066578;
          goto LABEL_29;
        case 7:
          v10 = 1414483778;
          goto LABEL_25;
        case 8:
          v12 = 4805185;
          goto LABEL_29;
        case 9:
          v12 = 5526611;
          goto LABEL_29;
        case 0xA:
          v13 = v4 & 0xFFFFFFFFFF000000 | 0x5441;
          v8 = 2;
          goto LABEL_30;
        case 0xB:
          v10 = 1280328769;
          goto LABEL_25;
        case 0xC:
          break;
        case 0xD:
          v12 = 5461061;
          goto LABEL_29;
        case 0xE:
          v9 = (v4 & 0xFFFFFF0000000000 | 0x53534451) + 2550;
          v8 = 4;
          break;
        case 0xF:
          v9 = v4 & 0xFFFFFF0000000000 | 0x53534451;
          v8 = 4;
          break;
        case 0x10:
          v11 = 0x4854544352;
LABEL_21:
          v13 = v4 & 0xFFFF000000000000 | v11 & 0xFFFFFFFFFFFFLL;
          v8 = 5;
          goto LABEL_30;
        case 0x11:
          v12 = 5260097;
          goto LABEL_29;
        case 0x12:
          v10 = 1297040214;
          goto LABEL_25;
        case 0x13:
          v10 = 1129335117;
LABEL_25:
          v13 = v4 & 0xFFFFFF0000000000 | v10 & 0xFFFFFFFFFFLL;
          v8 = 4;
          goto LABEL_30;
        case 0x14:
          v9 = (v4 & 0xFFFFFFFF00000000 | 0x4C4250) + 1524;
          v8 = 3;
          break;
        case 0x15:
          v12 = 5789005;
          goto LABEL_29;
        case 0x16:
          v12 = 4407622;
LABEL_29:
          v13 = v4 & 0xFFFFFFFF00000000 | v12;
          v8 = 3;
LABEL_30:
          v9 = v13;
          break;
        default:
          v8 = 7;
          v9 = 0x6E776F6E6B6E55;
          break;
      }
      v14 = operator new(0x28uLL);
      v14[2] = v9;
      v14[3] = 0;
      *((_BYTE *)v14 + 39) = v8;
      *v14 = v6;
      v14[1] = a2;
      v6[1] = v14;
      *a2 = v14;
      a2[2] = v5;
      v7 = *(_QWORD *)(v7 + 8);
      ++v5;
      v4 = v9;
      v6 = v14;
    }
    while ((uint64_t *)v7 != v18);
  }
  if (v18[2])
  {
    v15 = v18[0];
    v16 = *v3;
    *(_QWORD *)(v16 + 8) = *(_QWORD *)(v18[0] + 8);
    **(_QWORD **)(v15 + 8) = v16;
    v18[2] = 0;
    if (v3 != v18)
    {
      do
      {
        v17 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v17;
      }
      while (v17 != v18);
    }
  }
}

void sub_1BF389AB8(_Unwind_Exception *a1)
{
  char *v1;

  std::list<std::string>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_1BF389ACC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  char *v2;
  va_list va;

  va_start(va, a2);
  std::list<std::pair<unsigned long long,unsigned int>>::~list((uint64_t *)va);
  std::list<std::string>::~list(v2);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::asString@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  switch((int)result)
  {
    case 0:
      a2[23] = 3;
      *(_DWORD *)a2 = 4997712;
      break;
    case 1:
      a2[23] = 3;
      *(_DWORD *)a2 = 4997715;
      break;
    case 2:
      a2[23] = 4;
      strcpy(a2, "DIAG");
      break;
    case 3:
      a2[23] = 4;
      strcpy(a2, "REFS");
      break;
    case 4:
      a2[23] = 5;
      strcpy(a2, "QMUX1");
      break;
    case 5:
      a2[23] = 5;
      strcpy(a2, "QMUX2");
      break;
    case 6:
      a2[23] = 3;
      *(_DWORD *)a2 = 5066578;
      break;
    case 7:
      a2[23] = 4;
      strcpy(a2, "BOOT");
      break;
    case 8:
      a2[23] = 3;
      *(_DWORD *)a2 = 4805185;
      break;
    case 9:
      a2[23] = 3;
      *(_DWORD *)a2 = 5526611;
      break;
    case 10:
      a2[23] = 2;
      strcpy(a2, "AT");
      break;
    case 11:
      a2[23] = 4;
      strcpy(a2, "ADPL");
      break;
    case 12:
      a2[23] = 8;
      strcpy(a2, "MEDIACTL");
      break;
    case 13:
      a2[23] = 3;
      *(_DWORD *)a2 = 5461061;
      break;
    case 14:
      a2[23] = 4;
      strcpy(a2, "GNSS");
      break;
    case 15:
      a2[23] = 4;
      strcpy(a2, "QDSS");
      break;
    case 16:
      a2[23] = 5;
      strcpy(a2, "RCTTH");
      break;
    case 17:
      a2[23] = 3;
      *(_DWORD *)a2 = 5260097;
      break;
    case 18:
      a2[23] = 4;
      strcpy(a2, "VCOM");
      break;
    case 19:
      a2[23] = 4;
      strcpy(a2, "MIPC");
      break;
    case 20:
      a2[23] = 3;
      *(_DWORD *)a2 = 4999236;
      break;
    case 21:
      a2[23] = 3;
      *(_DWORD *)a2 = 5789005;
      break;
    case 22:
      a2[23] = 3;
      *(_DWORD *)a2 = 4407622;
      break;
    default:
      a2[23] = 7;
      strcpy(a2, "Unknown");
      break;
  }
  return result;
}

{
  switch((int)result)
  {
    case 0:
      a2[23] = 8;
      strcpy(a2, "NotReady");
      break;
    case 1:
      a2[23] = 5;
      strcpy(a2, "Ready");
      break;
    case 2:
      a2[23] = 5;
      strcpy(a2, "Error");
      break;
    case 3:
      a2[23] = 7;
      strcpy(a2, "Stalled");
      break;
    default:
      a2[23] = 7;
      strcpy(a2, "Unknown");
      break;
  }
  return result;
}

uint64_t BasebandTransport::asProtocol(char *__s1)
{
  const char *v1;
  uint64_t result;

  v1 = __s1;
  if ((__s1[23] & 0x80000000) == 0)
  {
    result = strcmp(__s1, "PBL");
    if (!(_DWORD)result)
      return result;
    if (!strcmp(v1, "SBL"))
      return 1;
    if (strcasecmp(v1, "DIAG"))
    {
      if (strcasecmp(v1, "REFS"))
      {
        if (strcasecmp(v1, "QMUX1"))
        {
          if (strcasecmp(v1, "QMUX2"))
          {
            if (strcasecmp(v1, "ROM"))
            {
              if (strcasecmp(v1, "BOOT"))
              {
                if (strcasecmp(v1, "ARI"))
                {
                  if (strcasecmp(v1, "STT"))
                  {
                    if (strcasecmp(v1, "AT"))
                    {
                      if (strcasecmp(v1, "ADPL"))
                      {
                        if (strcasecmp(v1, "MEDIACTL"))
                        {
                          if (strcasecmp(v1, "ETS"))
                          {
                            if (strcasecmp(v1, "GNSS"))
                            {
                              if (strcasecmp(v1, "QDSS"))
                              {
                                if (strcasecmp(v1, "RCTTH"))
                                {
                                  if (strcasecmp(v1, "ACP"))
                                  {
                                    if (strcasecmp(v1, "VCOM"))
                                    {
                                      if (strcasecmp(v1, "MIPC"))
                                      {
                                        if (strcasecmp(v1, "DHL"))
                                        {
                                          if (strcasecmp(v1, "MUX"))
                                            goto LABEL_24;
                                          return 21;
                                        }
                                        return 20;
                                      }
                                      return 19;
                                    }
                                    return 18;
                                  }
                                  return 17;
                                }
                                return 16;
                              }
                              return 15;
                            }
                            return 14;
                          }
                          return 13;
                        }
                        return 12;
                      }
                      return 11;
                    }
                    return 10;
                  }
                  return 9;
                }
                return 8;
              }
              return 7;
            }
            return 6;
          }
          return 5;
        }
        return 4;
      }
      return 3;
    }
    return 2;
  }
  v1 = *(const char **)__s1;
  result = strcmp(*(const char **)__s1, "PBL");
  if (!(_DWORD)result)
    return result;
  if (!strcmp(v1, "SBL"))
    return 1;
  if (!strcasecmp(v1, "DIAG"))
    return 2;
  if (!strcasecmp(v1, "REFS"))
    return 3;
  if (!strcasecmp(v1, "QMUX1"))
    return 4;
  if (!strcasecmp(v1, "QMUX2"))
    return 5;
  if (!strcasecmp(v1, "ROM"))
    return 6;
  if (!strcasecmp(v1, "BOOT"))
    return 7;
  if (!strcasecmp(v1, "ARI"))
    return 8;
  if (!strcasecmp(v1, "STT"))
    return 9;
  if (!strcasecmp(v1, "AT"))
    return 10;
  if (!strcasecmp(v1, "ADPL"))
    return 11;
  if (!strcasecmp(v1, "MEDIACTL"))
    return 12;
  if (!strcasecmp(v1, "ETS"))
    return 13;
  if (!strcasecmp(v1, "GNSS"))
    return 14;
  if (!strcasecmp(v1, "QDSS"))
    return 15;
  if (!strcasecmp(v1, "RCTTH"))
    return 16;
  if (!strcasecmp(v1, "ACP"))
    return 17;
  if (!strcasecmp(v1, "VCOM"))
    return 18;
  if (!strcasecmp(v1, "MIPC"))
    return 19;
  if (!strcasecmp(v1, "DHL"))
    return 20;
  if (!strcasecmp(v1, "MUX"))
    return 21;
LABEL_24:
  if (!strcasecmp(v1, "FAC"))
    return 22;
  else
    return 23;
}

uint64_t BasebandTransport::getDefaultTransportIOReadSize(capabilities::abs *a1)
{
  if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(a1))
    return 0x4000;
  else
    return 0x8000;
}

uint64_t BasebandTransport::getDefaultTransportIOReadCount(capabilities::abs *a1)
{
  int v1;
  char shouldUseMinBasebandTransportIOReadCount;
  int v3;
  int v4;
  unsigned int v5;

  v1 = (int)a1;
  shouldUseMinBasebandTransportIOReadCount = capabilities::abs::shouldUseMinBasebandTransportIOReadCount(a1);
  if (v1 == 15)
    v3 = 36;
  else
    v3 = 4;
  if (v1 == 16)
    v4 = 36;
  else
    v4 = v3;
  if (v1 == 2)
    v5 = 16;
  else
    v5 = v4;
  if ((shouldUseMinBasebandTransportIOReadCount & 1) != 0)
    return 4;
  else
    return v5;
}

double BasebandTransport::Status::Status(BasebandTransport::Status *this)
{
  double result;

  *(_DWORD *)this = 0;
  *((_BYTE *)this + 4) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(_DWORD *)this = 0;
  *((_BYTE *)this + 4) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

double BasebandTransport::Status::init(BasebandTransport::Status *this)
{
  double result;

  *(_DWORD *)this = 0;
  *((_BYTE *)this + 4) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

uint64_t BasebandTransport::Status::toString@<X0>(BasebandTransport::Status *this@<X0>, _BYTE *a2@<X8>)
{
  __int128 v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  size_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  void *__p[2];
  char v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  void *v32[2];
  __int128 v33;
  __int128 v34;
  _OWORD v35[9];
  unint64_t v36;

  v36 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v35[7] = v4;
  v35[8] = v4;
  v35[5] = v4;
  v35[6] = v4;
  v35[3] = v4;
  v35[4] = v4;
  v35[1] = v4;
  v35[2] = v4;
  v34 = v4;
  v35[0] = v4;
  *(_OWORD *)v32 = v4;
  v33 = v4;
  v30 = v4;
  v31 = v4;
  v28 = v4;
  v29 = v4;
  v27 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v27);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"State: ", 7);
  switch(*(_DWORD *)this)
  {
    case 0:
      v6 = 8;
      v26 = 8;
      strcpy((char *)__p, "NotReady");
      break;
    case 1:
      v6 = 5;
      v26 = 5;
      strcpy((char *)__p, "Ready");
      break;
    case 2:
      v6 = 5;
      v26 = 5;
      strcpy((char *)__p, "Error");
      break;
    case 3:
      v6 = 7;
      v26 = 7;
      LODWORD(__p[0]) = 1818326099;
      v7 = 1684368492;
      goto LABEL_7;
    default:
      v6 = 7;
      v26 = 7;
      LODWORD(__p[0]) = 1852534357;
      v7 = 1853321070;
LABEL_7:
      *(_DWORD *)((char *)__p + 3) = v7;
      HIBYTE(__p[0]) = 0;
      break;
  }
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, v6);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", ", 2);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Async: ", 7);
  *(_DWORD *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 8) |= 1u;
  v11 = (_QWORD *)std::ostream::operator<<();
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Total Rx: ", 10);
  v13 = (_QWORD *)std::ostream::operator<<();
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" KB, ", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Total Tx: ", 10);
  v15 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" KB", 3);
  if ((v26 & 0x80000000) == 0)
  {
    v16 = BYTE8(v34);
    if ((BYTE8(v34) & 0x10) == 0)
      goto LABEL_10;
LABEL_13:
    v18 = v34;
    if ((unint64_t)v34 < *((_QWORD *)&v31 + 1))
    {
      *(_QWORD *)&v34 = *((_QWORD *)&v31 + 1);
      v18 = *((_QWORD *)&v31 + 1);
    }
    v19 = (const void *)v31;
    v17 = v18 - v31;
    if ((unint64_t)(v18 - v31) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_27;
    goto LABEL_16;
  }
  operator delete(__p[0]);
  v16 = BYTE8(v34);
  if ((BYTE8(v34) & 0x10) != 0)
    goto LABEL_13;
LABEL_10:
  if ((v16 & 8) == 0)
  {
    v17 = 0;
    a2[23] = 0;
    goto LABEL_23;
  }
  v19 = (const void *)*((_QWORD *)&v29 + 1);
  v17 = *((_QWORD *)&v30 + 1) - *((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v30 + 1) - *((_QWORD *)&v29 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_27:
    std::string::__throw_length_error[abi:ne180100]();
LABEL_16:
  if (v17 >= 0x17)
  {
    v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v20 = v17 | 7;
    v21 = v20 + 1;
    v22 = operator new(v20 + 1);
    *((_QWORD *)a2 + 1) = v17;
    *((_QWORD *)a2 + 2) = v21 | 0x8000000000000000;
    *(_QWORD *)a2 = v22;
    a2 = v22;
    goto LABEL_22;
  }
  a2[23] = v17;
  if (v17)
LABEL_22:
    memmove(a2, v19, v17);
LABEL_23:
  a2[v17] = 0;
  *(_QWORD *)&v27 = *MEMORY[0x1E0DE4F50];
  v23 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&v27 + *(_QWORD *)(v27 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v28 = v23;
  *((_QWORD *)&v28 + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v33) < 0)
    operator delete(v32[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3B89E4C](v35);
}

void sub_1BF38A6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF38A6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::Parameters::toString@<X0>(BasebandTransport::Parameters *this@<X0>, _BYTE *a2@<X8>)
{
  __int128 v4;
  size_t v5;
  int v6;
  uint64_t p_p;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  char v18;
  size_t v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  void *v27[2];
  char v28;
  void *__p;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void *v37[2];
  __int128 v38;
  __int128 v39;
  _OWORD v40[9];
  unint64_t v41;

  v41 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v40[7] = v4;
  v40[8] = v4;
  v40[5] = v4;
  v40[6] = v4;
  v40[3] = v4;
  v40[4] = v4;
  v40[1] = v4;
  v40[2] = v4;
  v39 = v4;
  v40[0] = v4;
  *(_OWORD *)v37 = v4;
  v38 = v4;
  v35 = v4;
  v36 = v4;
  v33 = v4;
  v34 = v4;
  v32 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v32);
  switch(*(_DWORD *)this)
  {
    case 0:
      v5 = 3;
      v28 = 3;
      strcpy((char *)v27, "PBL");
      break;
    case 1:
      v5 = 3;
      v28 = 3;
      strcpy((char *)v27, "SBL");
      break;
    case 2:
      v5 = 4;
      v28 = 4;
      v6 = 1195460932;
      goto LABEL_25;
    case 3:
      v5 = 4;
      v28 = 4;
      v6 = 1397114194;
      goto LABEL_25;
    case 4:
      v5 = 5;
      v28 = 5;
      strcpy((char *)v27, "QMUX1");
      break;
    case 5:
      v5 = 5;
      v28 = 5;
      strcpy((char *)v27, "QMUX2");
      break;
    case 6:
      v5 = 3;
      v28 = 3;
      strcpy((char *)v27, "ROM");
      break;
    case 7:
      v5 = 4;
      v28 = 4;
      v6 = 1414483778;
      goto LABEL_25;
    case 8:
      v5 = 3;
      v28 = 3;
      strcpy((char *)v27, "ARI");
      break;
    case 9:
      v5 = 3;
      v28 = 3;
      strcpy((char *)v27, "STT");
      break;
    case 0xA:
      v5 = 2;
      v28 = 2;
      strcpy((char *)v27, "AT");
      break;
    case 0xB:
      v5 = 4;
      v28 = 4;
      v6 = 1280328769;
      goto LABEL_25;
    case 0xC:
      v5 = 8;
      v28 = 8;
      strcpy((char *)v27, "MEDIACTL");
      break;
    case 0xD:
      v5 = 3;
      v28 = 3;
      strcpy((char *)v27, "ETS");
      break;
    case 0xE:
      v5 = 4;
      v28 = 4;
      v6 = 1397968455;
      goto LABEL_25;
    case 0xF:
      v5 = 4;
      v28 = 4;
      v6 = 1397965905;
      goto LABEL_25;
    case 0x10:
      v5 = 5;
      v28 = 5;
      strcpy((char *)v27, "RCTTH");
      break;
    case 0x11:
      v5 = 3;
      v28 = 3;
      strcpy((char *)v27, "ACP");
      break;
    case 0x12:
      v5 = 4;
      v28 = 4;
      v6 = 1297040214;
      goto LABEL_25;
    case 0x13:
      v5 = 4;
      v28 = 4;
      v6 = 1129335117;
LABEL_25:
      LODWORD(v27[0]) = v6;
      BYTE4(v27[0]) = 0;
      break;
    case 0x14:
      v5 = 3;
      v28 = 3;
      strcpy((char *)v27, "DHL");
      break;
    case 0x15:
      v5 = 3;
      v28 = 3;
      strcpy((char *)v27, "MUX");
      break;
    case 0x16:
      v5 = 3;
      v28 = 3;
      strcpy((char *)v27, "FAC");
      break;
    default:
      v5 = 7;
      v28 = 7;
      strcpy((char *)v27, "Unknown");
      break;
  }
  v30 = 8250;
  v31 = 0;
  HIBYTE(v31) = v5 + 10;
  __p = *(void **)"Protocol: ";
  memcpy((char *)&v30 + 2, v27, v5);
  *((_BYTE *)&v30 + v5 + 2) = 0;
  if (v31 >= 0)
    p_p = (uint64_t)&__p;
  else
    p_p = 0x6C6F636F746F7250;
  if (v31 >= 0)
    v8 = HIBYTE(v31);
  else
    v8 = v30;
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, p_p, v8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Powersave: ", 11);
  *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 8) |= 1u;
  v12 = (_QWORD *)std::ostream::operator<<();
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Create Timeout: ", 16);
  v14 = (_QWORD *)std::ostream::operator<<();
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" sec, ", 6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"IO Size: ", 9);
  v16 = (_QWORD *)std::ostream::operator<<();
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" KB, ", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Num Pending Reads: ", 19);
  std::ostream::operator<<();
  if (SHIBYTE(v31) < 0)
  {
    operator delete(__p);
    if ((v28 & 0x80000000) == 0)
    {
LABEL_34:
      v18 = BYTE8(v39);
      if ((BYTE8(v39) & 0x10) == 0)
        goto LABEL_35;
LABEL_39:
      v20 = v39;
      if ((unint64_t)v39 < *((_QWORD *)&v36 + 1))
      {
        *(_QWORD *)&v39 = *((_QWORD *)&v36 + 1);
        v20 = *((_QWORD *)&v36 + 1);
      }
      v21 = (const void *)v36;
      v19 = v20 - v36;
      if ((unint64_t)(v20 - v36) >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_53;
      goto LABEL_42;
    }
  }
  else if ((v28 & 0x80000000) == 0)
  {
    goto LABEL_34;
  }
  operator delete(v27[0]);
  v18 = BYTE8(v39);
  if ((BYTE8(v39) & 0x10) != 0)
    goto LABEL_39;
LABEL_35:
  if ((v18 & 8) == 0)
  {
    v19 = 0;
    a2[23] = 0;
    goto LABEL_49;
  }
  v21 = (const void *)*((_QWORD *)&v34 + 1);
  v19 = *((_QWORD *)&v35 + 1) - *((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v35 + 1) - *((_QWORD *)&v34 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_53:
    std::string::__throw_length_error[abi:ne180100]();
LABEL_42:
  if (v19 >= 0x17)
  {
    v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v22 = v19 | 7;
    v23 = v22 + 1;
    v24 = operator new(v22 + 1);
    *((_QWORD *)a2 + 1) = v19;
    *((_QWORD *)a2 + 2) = v23 | 0x8000000000000000;
    *(_QWORD *)a2 = v24;
    a2 = v24;
    goto LABEL_48;
  }
  a2[23] = v19;
  if (v19)
LABEL_48:
    memmove(a2, v21, v19);
LABEL_49:
  a2[v19] = 0;
  *(_QWORD *)&v32 = *MEMORY[0x1E0DE4F50];
  v25 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&v32 + *(_QWORD *)(v32 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v33 = v25;
  *((_QWORD *)&v33 + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v38) < 0)
    operator delete(v37[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3B89E4C](v40);
}

void sub_1BF38AD5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF38AD70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
      _Unwind_Resume(a1);
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::BasebandTransport(uint64_t a1, _QWORD *a2, NSObject **a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  capabilities::abs *v11;
  capabilities::abs *shouldUseMinBasebandTransportIOReadSize;
  int v13;
  NSObject *v14;
  uint64_t Controller;
  _BYTE v17[16];
  _BYTE v18[16];
  _BYTE v19[16];

  *(_QWORD *)a1 = off_1E78FE858;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v17, "com.apple.telephony.abm", "ipc.bb");
  v6 = dispatch_queue_create("ipc.bb", 0);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v6;
  if (v6)
  {
    v7 = v6;
    dispatch_retain(v6);
    *(_QWORD *)(a1 + 96) = 0;
    dispatch_release(v7);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_QWORD *)a1 = off_1E78FECE0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v19);
  *(_QWORD *)(a1 + 8) = &unk_1E78FB900;
  *(_QWORD *)(a1 + 56) = *a2;
  v8 = a2[1];
  *(_QWORD *)(a1 + 64) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v18);
  *(_QWORD *)a1 = off_1E78FEDF8;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v17);
  *(_QWORD *)a1 = off_1E78FE858;
  *(_DWORD *)(a1 + 104) = 23;
  *(_BYTE *)(a1 + 108) = 0;
  *(_QWORD *)(a1 + 112) = 10;
  shouldUseMinBasebandTransportIOReadSize = (capabilities::abs *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v11);
  if ((_DWORD)shouldUseMinBasebandTransportIOReadSize)
    v13 = 0x4000;
  else
    v13 = 0x8000;
  *(_DWORD *)(a1 + 120) = v13;
  capabilities::abs::shouldUseMinBasebandTransportIOReadCount(shouldUseMinBasebandTransportIOReadSize);
  *(_DWORD *)(a1 + 124) = 4;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v14 = *a3;
  *(_QWORD *)(a1 + 152) = *a3;
  if (v14)
    dispatch_retain(v14);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  Controller = TelephonyBasebandCreateController();
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 264) = Controller;
  *(_QWORD *)(a1 + 285) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 320) = dispatch_group_create();
  *(_DWORD *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 332) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_QWORD *)(a1 + 365) = 0;
  return a1;
}

void sub_1BF38AFB0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  const void **v2;
  const void *v4;
  NSObject *v5;
  const void *v6;

  v4 = (const void *)v1[21];
  if (v4)
    _Block_release(v4);
  if (*v2)
    _Block_release(*v2);
  v5 = v1[19];
  if (v5)
    dispatch_release(v5);
  v6 = (const void *)v1[18];
  if (v6)
    _Block_release(v6);
  ctu::SharedLoggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

const char *BasebandTransport::getName(BasebandTransport *this)
{
  return "ipc.bb";
}

_QWORD *ctu::SharedLoggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E78FECE0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E78FECE0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void BasebandTransport::~BasebandTransport(BasebandTransport *this)
{
  NSObject *v2;
  NSObject *v3;
  const void *v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  NSObject *v11;
  const void *v12;
  NSObject *v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  uint8_t v16[16];

  *(_QWORD *)this = off_1E78FE858;
  v2 = *((_QWORD *)this + 35);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 35));
    *((_QWORD *)this + 35) = 0;
    v3 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Status report disabled", v16, 2u);
    }
  }
  (*(void (**)(BasebandTransport *))(*(_QWORD *)this + 80))(this);
  v4 = (const void *)*((_QWORD *)this + 33);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 33) = 0;
  }
  v5 = (void *)*((_QWORD *)this + 37);
  if (v5)
  {
    operator delete[](v5);
    *((_QWORD *)this + 37) = 0;
  }
  v6 = *((_QWORD *)this + 40);
  if (v6)
    dispatch_release(v6);
  v7 = *((_QWORD *)this + 39);
  if (v7)
    dispatch_release(v7);
  v8 = (const void *)*((_QWORD *)this + 34);
  if (v8)
    _Block_release(v8);
  v9 = (const void *)*((_QWORD *)this + 21);
  if (v9)
    _Block_release(v9);
  v10 = (const void *)*((_QWORD *)this + 20);
  if (v10)
    _Block_release(v10);
  v11 = *((_QWORD *)this + 19);
  if (v11)
    dispatch_release(v11);
  v12 = (const void *)*((_QWORD *)this + 18);
  if (v12)
    _Block_release(v12);
  *(_QWORD *)this = off_1E78FECE0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v13 = *((_QWORD *)this + 12);
  if (v13)
    dispatch_release(v13);
  v14 = *((_QWORD *)this + 11);
  if (v14)
    dispatch_release(v14);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
}

{
  void *v1;

  BasebandTransport::~BasebandTransport(this);
  operator delete(v1);
}

void BasebandTransport::timerOff_sync(BasebandTransport *this)
{
  NSObject *v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *((_QWORD *)this + 35);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 35));
    *((_QWORD *)this + 35) = 0;
    v3 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Status report disabled", v4, 2u);
    }
  }
}

void BasebandTransport::create(NSObject **this@<X0>, queue a2@<0:X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  NSObject *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL14sLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_75;
  block[4] = &qword_1ED70FEF0;
  if (_MergedGlobals_1 == -1)
  {
    v5 = *(std::__shared_weak_count **)algn_1ED70FEF8;
    v12 = qword_1ED70FEF0;
    v13 = *(_QWORD *)algn_1ED70FEF8;
    if (!*(_QWORD *)algn_1ED70FEF8)
      goto LABEL_5;
  }
  else
  {
    dispatch_once(&_MergedGlobals_1, block);
    v5 = *(std::__shared_weak_count **)algn_1ED70FEF8;
    v12 = qword_1ED70FEF0;
    v13 = *(_QWORD *)algn_1ED70FEF8;
    if (!*(_QWORD *)algn_1ED70FEF8)
      goto LABEL_5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
LABEL_5:
  v8 = *this;
  v11 = v8;
  if (v8)
    dispatch_retain(v8);
  BasebandTransport::create((capabilities::radio *)&v12, &v11, a3);
  if (v8)
    dispatch_release(v8);
  if (v5)
  {
    v9 = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BF38B3B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  NSObject *v10;

  if (v10)
    dispatch_release(v10);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void BasebandTransport::create(capabilities::radio *a1@<X0>, NSObject **a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  std::__shared_weak_count_vtbl *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  NSObject *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  std::__shared_weak_count *v34;
  unint64_t v35;
  unint64_t *p_shared_weak_owners;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  NSObject *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  dispatch_object_t object;
  uint64_t v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count_vtbl *v51;
  unint64_t v52;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v6 = capabilities::radio::vendor(a1);
  if (v6 == 1)
  {
    v27 = (std::__shared_weak_count_vtbl *)operator new(0x198uLL);
    v28 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
    v49 = *(_QWORD *)a1;
    v50 = v28;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(p_shared_owners);
      while (__stxr(v30 + 1, p_shared_owners));
    }
    v31 = *a2;
    object = v31;
    if (v31)
      dispatch_retain(v31);
    BasebandTransportMAV::BasebandTransportMAV(v27, &v49, &object);
    v51 = v27;
    v52 = 0xAAAAAAAAAAAAAAAALL;
    v32 = (std::__shared_weak_count *)operator new(0x20uLL);
    v32->__shared_owners_ = 0;
    v33 = (unint64_t *)&v32->__shared_owners_;
    v32->__vftable = (std::__shared_weak_count_vtbl *)off_1E78FEE38;
    v32->__shared_weak_owners_ = 0;
    v32[1].__vftable = v27;
    v52 = (unint64_t)v32;
    v34 = (std::__shared_weak_count *)v27[2].~__shared_weak_count;
    if (v34)
    {
      if (v34->__shared_owners_ != -1)
      {
LABEL_45:
        v42 = (uint64_t)v51;
        ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)v51);
        v43 = v52;
        v51 = 0;
        v52 = 0;
        *(_QWORD *)a3 = v42;
        *(_QWORD *)(a3 + 8) = v43;
        if (object)
          dispatch_release(object);
        v24 = v50;
        if (!v50)
          goto LABEL_52;
        v44 = (unint64_t *)&v50->__shared_owners_;
        do
          v26 = __ldaxr(v44);
        while (__stlxr(v26 - 1, v44));
        goto LABEL_50;
      }
      do
        v35 = __ldxr(v33);
      while (__stxr(v35 + 1, v33));
      p_shared_weak_owners = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v37 = __ldxr(p_shared_weak_owners);
      while (__stxr(v37 + 1, p_shared_weak_owners));
      v27[1].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v27;
      v27[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v32;
      std::__shared_weak_count::__release_weak(v34);
    }
    else
    {
      do
        v38 = __ldxr(v33);
      while (__stxr(v38 + 1, v33));
      v39 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      v27[1].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v27;
      v27[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v32;
    }
    do
      v41 = __ldaxr(v33);
    while (__stlxr(v41 - 1, v33));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
    goto LABEL_45;
  }
  if (v6 != 3)
    return;
  v7 = (std::__shared_weak_count_vtbl *)operator new(0x198uLL);
  v8 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  v46 = *(_QWORD *)a1;
  v47 = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *a2;
  v45 = v11;
  if (v11)
    dispatch_retain(v11);
  BasebandTransport::BasebandTransport((uint64_t)v7, &v46, &v45);
  v51 = v7;
  v52 = 0xAAAAAAAAAAAAAAAALL;
  v12 = (std::__shared_weak_count *)operator new(0x20uLL);
  v12->__shared_owners_ = 0;
  v13 = (unint64_t *)&v12->__shared_owners_;
  v12->__vftable = (std::__shared_weak_count_vtbl *)off_1E78FEE88;
  v12->__shared_weak_owners_ = 0;
  v12[1].__vftable = v7;
  v52 = (unint64_t)v12;
  v14 = (std::__shared_weak_count *)v7[2].~__shared_weak_count;
  if (!v14)
  {
    do
      v18 = __ldxr(v13);
    while (__stxr(v18 + 1, v13));
    v19 = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v7[1].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
    v7[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
    do
LABEL_18:
      v21 = __ldaxr(v13);
    while (__stlxr(v21 - 1, v13));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    goto LABEL_21;
  }
  if (v14->__shared_owners_ == -1)
  {
    do
      v15 = __ldxr(v13);
    while (__stxr(v15 + 1, v13));
    v16 = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v7[1].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
    v7[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
    std::__shared_weak_count::__release_weak(v14);
    goto LABEL_18;
  }
LABEL_21:
  v22 = (uint64_t)v51;
  ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)v51);
  v23 = v52;
  v51 = 0;
  v52 = 0;
  *(_QWORD *)a3 = v22;
  *(_QWORD *)(a3 + 8) = v23;
  if (v11)
    dispatch_release(v11);
  v24 = v47;
  if (!v47)
    goto LABEL_52;
  v25 = (unint64_t *)&v47->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
LABEL_50:
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
LABEL_52:
  BasebandTransport::init(*(BasebandTransport **)a3);
}

void sub_1BF38B704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object, char a13, uint64_t a14, char a15)
{
  uint64_t v15;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (object)
    dispatch_release(object);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void BasebandTransport::init(BasebandTransport *this)
{
  std::__shared_weak_count *v3;
  char *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  _QWORD v16[6];
  std::__shared_weak_count *v17;
  _QWORD *v18;
  _QWORD block[6];

  v5 = *((_QWORD *)this + 9);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  v4 = (char *)this + 72;
  if (!v3 || (v6 = std::__shared_weak_count::lock(v3)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 1174405120;
  v16[2] = ___ZN17BasebandTransport4initEv_block_invoke;
  v16[3] = &__block_descriptor_tmp_47_0;
  v16[4] = this;
  v16[5] = v5;
  v17 = v7;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v18 = v16;
  block[0] = v12;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_77;
  block[4] = v4;
  block[5] = &v18;
  v14 = *((_QWORD *)this + 11);
  if (!*((_QWORD *)this + 12))
  {
    dispatch_sync(v14, block);
    v15 = v17;
    if (!v17)
      goto LABEL_14;
    goto LABEL_13;
  }
  dispatch_async_and_wait(v14, block);
  v15 = v17;
  if (v17)
LABEL_13:
    std::__shared_weak_count::__release_weak(v15);
LABEL_14:
  std::__shared_weak_count::__release_weak(v7);
}

void ___ZN17BasebandTransport4initEv_block_invoke(capabilities::ipc *a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  void *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  const void *v15;
  _QWORD v16[6];
  std::__shared_weak_count *v17;
  _QWORD aBlock[6];
  std::__shared_weak_count *v19;

  v2 = *((_QWORD *)a1 + 4);
  if (capabilities::ipc::supportsPCI(a1))
  {
    v3 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN17BasebandTransport4initEv_block_invoke_2;
    aBlock[3] = &__block_descriptor_tmp_5;
    v5 = *((_QWORD *)a1 + 5);
    v4 = (std::__shared_weak_count *)*((_QWORD *)a1 + 6);
    aBlock[4] = v2;
    aBlock[5] = v5;
    v19 = v4;
    if (v4)
    {
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v7 = __ldxr(p_shared_weak_owners);
      while (__stxr(v7 + 1, p_shared_weak_owners));
    }
    v8 = _Block_copy(aBlock);
    v9 = *(const void **)(v2 + 160);
    *(_QWORD *)(v2 + 160) = v8;
    if (v9)
      _Block_release(v9);
    v16[0] = v3;
    v16[1] = 1174405120;
    v16[2] = ___ZN17BasebandTransport4initEv_block_invoke_43;
    v16[3] = &__block_descriptor_tmp_45_1;
    v11 = *((_QWORD *)a1 + 5);
    v10 = (std::__shared_weak_count *)*((_QWORD *)a1 + 6);
    v16[4] = v2;
    v16[5] = v11;
    v17 = v10;
    if (v10)
    {
      v12 = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v14 = _Block_copy(v16);
    v15 = *(const void **)(v2 + 168);
    *(_QWORD *)(v2 + 168) = v14;
    if (v15)
      _Block_release(v15);
    if (v17)
      std::__shared_weak_count::__release_weak(v17);
    if (v19)
      std::__shared_weak_count::__release_weak(v19);
  }
}

void ___ZN17BasebandTransport4initEv_block_invoke_2(_QWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  NSObject *v12;
  const void *v13;
  void *v14;
  const void *v15;
  __int128 v16;
  NSObject *v17;
  void *v18;
  char *v19;
  __int128 v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _BYTE v23[32];
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    v9 = a1[4];
    v10 = std::__shared_weak_count::lock(v5);
    if (v10)
    {
      v11 = v10;
      if (a1[5])
      {
        v12 = *(NSObject **)(v9 + 40);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v23 = 67109632;
          *(_DWORD *)&v23[4] = a2;
          *(_WORD *)&v23[8] = 2048;
          *(_QWORD *)&v23[10] = a3;
          *(_WORD *)&v23[18] = 2048;
          *(_QWORD *)&v23[20] = a4;
          _os_log_error_impl(&dword_1BF335000, v12, OS_LOG_TYPE_ERROR, "PCI Transport Status: 0x%x (0x%08lx, 0x%08lx)", v23, 0x1Cu);
        }
        *(_DWORD *)(v9 + 328) = 2 * (a2 != 0);
        *(int64x2_t *)(v9 + 352) = vsubq_s64(*(int64x2_t *)(v9 + 336), *(int64x2_t *)(v9 + 376));
        v13 = *(const void **)(v9 + 272);
        if (v13)
        {
          v14 = _Block_copy(v13);
          v15 = v14;
          v16 = *(_OWORD *)(v9 + 344);
          *(_OWORD *)v23 = *(_OWORD *)(v9 + 328);
          *(_OWORD *)&v23[16] = v16;
          v24 = *(_QWORD *)(v9 + 360);
          v17 = *(NSObject **)(v9 + 152);
          if (v14)
            v18 = _Block_copy(v14);
          else
            v18 = 0;
          v19 = (char *)operator new(0x30uLL);
          *(_QWORD *)v19 = v18;
          v20 = *(_OWORD *)&v23[16];
          *(_OWORD *)(v19 + 8) = *(_OWORD *)v23;
          *(_OWORD *)(v19 + 24) = v20;
          *((_QWORD *)v19 + 5) = v24;
          dispatch_async_f(v17, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb0_E3__0EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_);
          if (v15)
            _Block_release(v15);
        }
      }
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_1BF38BC34(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

int64x2_t BasebandTransport::updateDeltas_sync(BasebandTransport *this)
{
  int64x2_t result;

  result = vsubq_s64(*((int64x2_t *)this + 21), *(int64x2_t *)((char *)this + 376));
  *((int64x2_t *)this + 22) = result;
  return result;
}

uint64_t __copy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrI17BasebandTransportEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrI17BasebandTransportEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN17BasebandTransport4initEv_block_invoke_43(_QWORD *a1, int a2, void *a3, unsigned int a4)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  const void *v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  void *v20;
  char v21;
  NSObject *v22;
  void *v23;
  void *v24;
  size_t v25;
  char *v26;
  char *v27;
  _QWORD *v28;
  _QWORD *v29;
  void *__p;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint8_t buf[8];
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v6 = a1[4];
  v33 = 0;
  v34 = 0;
  v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (v34 = std::__shared_weak_count::lock(v7)) != 0 && (v10 = a1[5], (v33 = v10) != 0))
  {
    v11 = *(NSObject **)(v10 + 320);
    if (v11)
    {
      dispatch_retain(*(dispatch_object_t *)(v10 + 320));
      dispatch_group_enter(v11);
    }
    if (a2)
    {
      v12 = *(NSObject **)(v6 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = a2;
        _os_log_debug_impl(&dword_1BF335000, v12, OS_LOG_TYPE_DEBUG, "#D Async read error 0x%08x", buf, 8u);
      }
    }
    else
    {
      *(_QWORD *)(v6 + 336) += a4;
      v16 = *(const void **)(v6 + 144);
      if (v16)
      {
        v17 = _Block_copy(v16);
        v18 = *(_QWORD *)(v6 + 128);
        if (v18)
        {
          __p = 0;
          v31 = 0;
          v32 = 0;
          (*(void (**)(uint64_t, void *, _QWORD, void **))(*(_QWORD *)v18 + 8))(v18, a3, a4, &__p);
          v19 = *(NSObject **)(v6 + 152);
          if (v17)
            v20 = _Block_copy(v17);
          else
            v20 = 0;
          *(_QWORD *)buf = v20;
          v36 = 0;
          v37 = 0;
          v38 = 0;
          v24 = __p;
          v25 = v31 - (_BYTE *)__p;
          if (v31 == __p)
          {
            v27 = 0;
            v26 = 0;
          }
          else
          {
            if ((v25 & 0x8000000000000000) != 0)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v26 = (char *)operator new(v31 - (_BYTE *)__p);
            v27 = &v26[v25];
            v36 = v26;
            v38 = &v26[v25];
            memcpy(v26, v24, v25);
            v37 = &v26[v25];
          }
          v28 = operator new(0x20uLL);
          *v28 = v20;
          v28[1] = v26;
          v28[2] = v27;
          v28[3] = v27;
          dispatch_async_f(v19, v28, (dispatch_function_t)_ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__1EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_);
          if (__p)
          {
            v31 = __p;
            operator delete(__p);
          }
        }
        else
        {
          v21 = *(_BYTE *)(v6 + 136);
          v22 = *(NSObject **)(v6 + 152);
          if (v17)
            v23 = _Block_copy(v17);
          else
            v23 = 0;
          v29 = operator new(0x18uLL);
          *v29 = v23;
          v29[1] = a3;
          *((_DWORD *)v29 + 4) = a4;
          *((_BYTE *)v29 + 20) = v21;
          dispatch_async_f(v22, v29, (dispatch_function_t)_ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__2EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_);
          a3 = 0;
        }
        if (v17)
          _Block_release(v17);
      }
    }
    if (a3 && !*(_BYTE *)(v6 + 136))
      free(a3);
    if (v11)
    {
      dispatch_group_leave(v11);
      dispatch_release(v11);
    }
  }
  else if (a3)
  {
    free(a3);
  }
  v13 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1BF38BF70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *aBlock, void *a16, uint64_t a17)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

BOOL BasebandTransport::open(BasebandTransport *a1, __int128 *a2, void **a3)
{
  uint64_t v6;
  __int128 v7;
  void *v8;
  NSObject *v9;
  int v10;
  void *v11;
  _QWORD v13[6];
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  void *aBlock;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  _QWORD block[6];

  v18 = 0;
  v19 = &v18;
  v20 = 0x2000000000;
  v21 = 0;
  BasebandTransport::stopReader(a1);
  v6 = MEMORY[0x1E0C809B0];
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 1174405120;
  v13[2] = ___ZN17BasebandTransport4openENS_10ParametersEN8dispatch5blockIU13block_pointerFvPhjEEE_block_invoke;
  v13[3] = &unk_1E78FE948;
  v13[5] = a1;
  v7 = a2[1];
  v14 = *a2;
  v15 = v7;
  v16 = *((_QWORD *)a2 + 4);
  v8 = *a3;
  if (*a3)
    v8 = _Block_copy(v8);
  aBlock = v8;
  v13[4] = &v18;
  v22 = v13;
  block[0] = v6;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_77;
  block[4] = (char *)a1 + 72;
  block[5] = &v22;
  v9 = *((_QWORD *)a1 + 11);
  if (*((_QWORD *)a1 + 12))
  {
    dispatch_async_and_wait(v9, block);
    v10 = *((unsigned __int8 *)v19 + 24);
    v11 = aBlock;
    if (!aBlock)
      goto LABEL_8;
    goto LABEL_7;
  }
  dispatch_sync(v9, block);
  v10 = *((unsigned __int8 *)v19 + 24);
  v11 = aBlock;
  if (aBlock)
LABEL_7:
    _Block_release(v11);
LABEL_8:
  _Block_object_dispose(&v18, 8);
  return v10 != 0;
}

void sub_1BF38C148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void BasebandTransport::stopReader(BasebandTransport *this)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  char *v5;
  NSObject *v6;
  NSObject *v7;
  dispatch_time_t v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[3];
  char v16;
  _QWORD *v17;
  _QWORD block[6];

  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x2000000000;
  v16 = 0;
  v2 = (uint64_t *)((char *)this + 72);
  v3 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 0x40000000;
  v14[2] = ___ZN17BasebandTransport10stopReaderEv_block_invoke;
  v14[3] = &unk_1E78FEAB0;
  v14[4] = v15;
  v14[5] = this;
  v17 = v14;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_77;
  block[4] = (char *)this + 72;
  block[5] = &v17;
  v5 = (char *)this + 88;
  v4 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v5 + 1))
    dispatch_async_and_wait(v4, block);
  else
    dispatch_sync(v4, block);
  v13[0] = v3;
  v13[1] = 0x40000000;
  v13[2] = ___ZN17BasebandTransport10stopReaderEv_block_invoke_2;
  v13[3] = &unk_1E78FEAD8;
  v13[4] = v15;
  v13[5] = this;
  ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v2, (uint64_t)v13);
  v6 = *((_QWORD *)this + 40);
  if (v6)
  {
    v7 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(block[0]) = 0;
      _os_log_impl(&dword_1BF335000, v7, OS_LOG_TYPE_DEFAULT, "#I Waiting for reader to be stopped", (uint8_t *)block, 2u);
      v6 = *((_QWORD *)this + 40);
    }
    v8 = dispatch_time(0, 3000000000);
    if (dispatch_group_wait(v6, v8))
    {
      (*(void (**)(BasebandTransport *))(*(_QWORD *)this + 80))(this);
      v9 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        LOWORD(block[0]) = 0;
        _os_log_error_impl(&dword_1BF335000, v9, OS_LOG_TYPE_ERROR, "Timeout waiting for read to unblock, freed transport to force read unblock", (uint8_t *)block, 2u);
      }
    }
    else
    {
      v11 = (void *)*((_QWORD *)this + 37);
      if (v11)
      {
        operator delete[](v11);
        *((_QWORD *)this + 37) = 0;
        v12 = *((_QWORD *)this + 39);
        *((_QWORD *)this + 39) = 0;
        if (v12)
          dispatch_release(v12);
      }
    }
    v10 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(block[0]) = 0;
      _os_log_impl(&dword_1BF335000, v10, OS_LOG_TYPE_DEFAULT, "#I Reader stopped", (uint8_t *)block, 2u);
    }
  }
  _Block_object_dispose(v15, 8);
}

void sub_1BF38C374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN17BasebandTransport4openENS_10ParametersEN8dispatch5blockIU13block_pointerFvPhjEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  char v5;
  __int128 v6;
  void *v7;
  const void *v8;
  _QWORD v9[5];
  char v10;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(NSObject **)(v2 + 280);
  if (v3)
  {
    dispatch_source_cancel(v3);
    dispatch_release(*(dispatch_object_t *)(v2 + 280));
    *(_QWORD *)(v2 + 280) = 0;
    v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v9[0]) = 0;
      _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I Status report disabled", (uint8_t *)v9, 2u);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
  *(_DWORD *)(v2 + 328) = 0;
  *(_BYTE *)(v2 + 332) = 0;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_QWORD *)(v2 + 365) = 0;
  v5 = *(_BYTE *)(a1 + 80);
  v6 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 120) = v6;
  *(_BYTE *)(v2 + 136) = v5;
  v7 = *(void **)(a1 + 88);
  if (v7)
    v7 = _Block_copy(v7);
  v8 = *(const void **)(v2 + 144);
  *(_QWORD *)(v2 + 144) = v7;
  if (v8)
    _Block_release(v8);
  if (*(_DWORD *)(v2 + 104) != 23)
  {
    if (capabilities::ipc::supportsPCI((capabilities::ipc *)v7))
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = BasebandTransport::openPCI_sync((BasebandTransport *)v2);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      BasebandTransport::timerOn_sync((BasebandTransport *)v2);
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 0x40000000;
    v9[2] = ___ZN17BasebandTransport9dumpStateEb_block_invoke;
    v9[3] = &__block_descriptor_tmp_70_0;
    v9[4] = v2;
    v10 = 0;
    ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped((uint64_t *)(v2 + 72), (uint64_t)v9);
  }
}

uint64_t BasebandTransport::openPCI_sync(BasebandTransport *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  capabilities::abs *inited;
  int v10;
  uint64_t shouldUseMinBasebandTransportIOReadCount;
  int v12;
  NSObject *v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  uint8_t *v23;
  const char *v24;
  NSObject *v25;
  uint32_t v26;
  int v27;
  int v28;
  int v29;
  unsigned int v31;
  unsigned int v32;
  uint8_t buf[23];
  char v34;
  uint8_t v35[4];
  uint8_t *v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v4 = v3;
  p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
  do
    v6 = __ldxr(p_shared_weak_owners);
  while (__stxr(v6 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  inited = (capabilities::abs *)TelephonyBasebandPCITransportInitParameters();
  v10 = *((_DWORD *)this + 28);
  shouldUseMinBasebandTransportIOReadCount = capabilities::abs::traceTransportTimeoutScalingFactor(inited);
  v12 = 1000 * v10;
  if ((((1000 * v10) * (unint64_t)shouldUseMinBasebandTransportIOReadCount) & 0xFFFFFFFF00000000) != 0)
  {
    v13 = *((_QWORD *)this + 5);
    shouldUseMinBasebandTransportIOReadCount = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
    if ((_DWORD)shouldUseMinBasebandTransportIOReadCount)
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v12;
      _os_log_error_impl(&dword_1BF335000, v13, OS_LOG_TYPE_ERROR, "Scaled create timeout overflowed, falling back to unscaled value: %u", buf, 8u);
    }
  }
  v14 = *((_DWORD *)this + 31);
  if (v14)
    goto LABEL_20;
  v15 = *((_DWORD *)this + 26);
  shouldUseMinBasebandTransportIOReadCount = capabilities::abs::shouldUseMinBasebandTransportIOReadCount((capabilities::abs *)shouldUseMinBasebandTransportIOReadCount);
  if ((shouldUseMinBasebandTransportIOReadCount & 1) != 0)
    goto LABEL_14;
  if (v15 != 2)
  {
    if (v15 != 16 && v15 != 15)
    {
LABEL_14:
      v31 = 4;
      v16 = *((_DWORD *)this + 30);
      if (!v16)
        goto LABEL_21;
      goto LABEL_24;
    }
    v14 = 36;
LABEL_20:
    v31 = v14;
    v16 = *((_DWORD *)this + 30);
    if (!v16)
      goto LABEL_21;
    goto LABEL_24;
  }
  v31 = 16;
  v16 = *((_DWORD *)this + 30);
  if (!v16)
  {
LABEL_21:
    if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize((capabilities::abs *)shouldUseMinBasebandTransportIOReadCount))
      v16 = 0x4000;
    else
      v16 = 0x8000;
  }
LABEL_24:
  v32 = v16;
  v17 = *((_DWORD *)this + 26);
  switch(v17)
  {
    case 0:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 1:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 2:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 3:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 4:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 5:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 6:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 7:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 8:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 9:
    case 17:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 10:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 11:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 12:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 13:
    case 18:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 14:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 15:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 16:
      v18 = v31;
      if (v31 >= 0x41)
      {
LABEL_30:
        v19 = *((_QWORD *)this + 5);
        if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          goto LABEL_148;
        switch(v17)
        {
          case 0:
            v34 = 3;
            strcpy((char *)buf, "PBL");
            break;
          case 1:
            v34 = 3;
            strcpy((char *)buf, "SBL");
            break;
          case 2:
            v34 = 4;
            v28 = 1195460932;
            goto LABEL_122;
          case 3:
            v34 = 4;
            v28 = 1397114194;
            goto LABEL_122;
          case 4:
            v34 = 5;
            strcpy((char *)buf, "QMUX1");
            break;
          case 5:
            v34 = 5;
            strcpy((char *)buf, "QMUX2");
            break;
          case 6:
            v34 = 3;
            strcpy((char *)buf, "ROM");
            break;
          case 7:
            v34 = 4;
            v28 = 1414483778;
            goto LABEL_122;
          case 8:
            v34 = 3;
            strcpy((char *)buf, "ARI");
            break;
          case 9:
            v34 = 3;
            strcpy((char *)buf, "STT");
            break;
          case 10:
            v34 = 2;
            strcpy((char *)buf, "AT");
            break;
          case 11:
            v34 = 4;
            v28 = 1280328769;
            goto LABEL_122;
          case 12:
            v34 = 8;
            strcpy((char *)buf, "MEDIACTL");
            break;
          case 13:
            v34 = 3;
            strcpy((char *)buf, "ETS");
            break;
          case 14:
            v34 = 4;
            v28 = 1397968455;
            goto LABEL_122;
          case 15:
            v34 = 4;
            v28 = 1397965905;
            goto LABEL_122;
          case 16:
            v34 = 5;
            strcpy((char *)buf, "RCTTH");
            break;
          case 17:
            v34 = 3;
            strcpy((char *)buf, "ACP");
            break;
          case 18:
            v34 = 4;
            v28 = 1297040214;
LABEL_122:
            *(_DWORD *)buf = v28;
            buf[4] = 0;
            break;
          default:
            v34 = 7;
            strcpy((char *)buf, "Unknown");
            break;
        }
        *(_DWORD *)v35 = 136315394;
        v36 = buf;
        v37 = 2048;
        v38 = v18;
        v24 = "%s: invalid transport io read count (%lu)";
LABEL_145:
        v25 = v19;
        v26 = 22;
LABEL_146:
        _os_log_error_impl(&dword_1BF335000, v25, OS_LOG_TYPE_ERROR, v24, v35, v26);
        if (v34 < 0)
          operator delete(*(void **)buf);
        goto LABEL_148;
      }
LABEL_60:
      if (v16 - 0x4000 > 0xFC000)
      {
        v19 = *((_QWORD *)this + 5);
        if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          goto LABEL_148;
        switch(v17)
        {
          case 0:
            v34 = 3;
            strcpy((char *)buf, "PBL");
            break;
          case 1:
            v34 = 3;
            strcpy((char *)buf, "SBL");
            break;
          case 2:
            v34 = 4;
            v29 = 1195460932;
            goto LABEL_143;
          case 3:
            v34 = 4;
            v29 = 1397114194;
            goto LABEL_143;
          case 4:
            v34 = 5;
            strcpy((char *)buf, "QMUX1");
            break;
          case 5:
            v34 = 5;
            strcpy((char *)buf, "QMUX2");
            break;
          case 6:
            v34 = 3;
            strcpy((char *)buf, "ROM");
            break;
          case 7:
            v34 = 4;
            v29 = 1414483778;
            goto LABEL_143;
          case 8:
            v34 = 3;
            strcpy((char *)buf, "ARI");
            break;
          case 9:
            v34 = 3;
            strcpy((char *)buf, "STT");
            break;
          case 10:
            v34 = 2;
            strcpy((char *)buf, "AT");
            break;
          case 11:
            v34 = 4;
            v29 = 1280328769;
            goto LABEL_143;
          case 12:
            v34 = 8;
            strcpy((char *)buf, "MEDIACTL");
            break;
          case 13:
            v34 = 3;
            strcpy((char *)buf, "ETS");
            break;
          case 14:
            v34 = 4;
            v29 = 1397968455;
            goto LABEL_143;
          case 15:
            v34 = 4;
            v29 = 1397965905;
            goto LABEL_143;
          case 16:
            v34 = 5;
            strcpy((char *)buf, "RCTTH");
            break;
          case 17:
            v34 = 3;
            strcpy((char *)buf, "ACP");
            break;
          case 18:
            v34 = 4;
            v29 = 1297040214;
LABEL_143:
            *(_DWORD *)buf = v29;
            buf[4] = 0;
            break;
          default:
            v34 = 7;
            strcpy((char *)buf, "Unknown");
            break;
        }
        *(_DWORD *)v35 = 136315394;
        v36 = buf;
        v37 = 2048;
        v38 = v16;
        v24 = "%s: invalid transport io read size (%lu)";
        goto LABEL_145;
      }
      if (*((_QWORD *)this + 18))
        *((_BYTE *)this + 332) = 1;
      if (!TelephonyBasebandPCITransportCreate())
      {
        *((_DWORD *)this + 82) = 2;
        v22 = *((_QWORD *)this + 5);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          BasebandTransport::asString(*((unsigned int *)this + 26), (char *)buf);
          if (v34 >= 0)
            v23 = buf;
          else
            v23 = *(uint8_t **)buf;
          *(_DWORD *)v35 = 136315138;
          v36 = v23;
          v24 = "%s: transport open failed";
          v25 = v22;
          v26 = 12;
          goto LABEL_146;
        }
LABEL_148:
        v20 = 0;
        goto LABEL_149;
      }
      v20 = 1;
      *((_DWORD *)this + 82) = 1;
      v21 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        switch(*((_DWORD *)this + 26))
        {
          case 0:
            v34 = 3;
            strcpy((char *)buf, "PBL");
            break;
          case 1:
            v34 = 3;
            strcpy((char *)buf, "SBL");
            break;
          case 2:
            v34 = 4;
            v27 = 1195460932;
            goto LABEL_97;
          case 3:
            v34 = 4;
            v27 = 1397114194;
            goto LABEL_97;
          case 4:
            v34 = 5;
            strcpy((char *)buf, "QMUX1");
            break;
          case 5:
            v34 = 5;
            strcpy((char *)buf, "QMUX2");
            break;
          case 6:
            v34 = 3;
            strcpy((char *)buf, "ROM");
            break;
          case 7:
            v34 = 4;
            v27 = 1414483778;
            goto LABEL_97;
          case 8:
            v34 = 3;
            strcpy((char *)buf, "ARI");
            break;
          case 9:
            v34 = 3;
            strcpy((char *)buf, "STT");
            break;
          case 0xA:
            v34 = 2;
            strcpy((char *)buf, "AT");
            break;
          case 0xB:
            v34 = 4;
            v27 = 1280328769;
            goto LABEL_97;
          case 0xC:
            v34 = 8;
            strcpy((char *)buf, "MEDIACTL");
            break;
          case 0xD:
            v34 = 3;
            strcpy((char *)buf, "ETS");
            break;
          case 0xE:
            v34 = 4;
            v27 = 1397968455;
            goto LABEL_97;
          case 0xF:
            v34 = 4;
            v27 = 1397965905;
            goto LABEL_97;
          case 0x10:
            v34 = 5;
            strcpy((char *)buf, "RCTTH");
            break;
          case 0x11:
            v34 = 3;
            strcpy((char *)buf, "ACP");
            break;
          case 0x12:
            v34 = 4;
            v27 = 1297040214;
            goto LABEL_97;
          case 0x13:
            v34 = 4;
            v27 = 1129335117;
LABEL_97:
            *(_DWORD *)buf = v27;
            buf[4] = 0;
            break;
          case 0x14:
            v34 = 3;
            strcpy((char *)buf, "DHL");
            break;
          case 0x15:
            v34 = 3;
            strcpy((char *)buf, "MUX");
            break;
          case 0x16:
            v34 = 3;
            strcpy((char *)buf, "FAC");
            break;
          default:
            v34 = 7;
            strcpy((char *)buf, "Unknown");
            break;
        }
        *(_DWORD *)v35 = 136315394;
        v36 = buf;
        v37 = 1024;
        LODWORD(v38) = v32;
        _os_log_impl(&dword_1BF335000, v21, OS_LOG_TYPE_DEFAULT, "#I %s: transport successfully opened with read io size as %u", v35, 0x12u);
        if (v34 < 0)
          operator delete(*(void **)buf);
      }
LABEL_149:
      std::__shared_weak_count::__release_weak(v4);
      return v20;
    default:
      goto LABEL_148;
  }
}

void sub_1BF38D164(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void sub_1BF38D178(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void BasebandTransport::timerOn_sync(BasebandTransport *this)
{
  NSObject *v2;
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  NSObject *v6;
  dispatch_time_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  NSObject *v16;
  unint64_t v17;
  NSObject *v18;
  int v19;
  NSObject *v20;
  _QWORD handler[6];
  std::__shared_weak_count *v22;
  uint8_t buf[4];
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 35);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 35));
    *((_QWORD *)this + 35) = 0;
    v3 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Status report disabled", buf, 2u);
    }
  }
  if (*((_DWORD *)this + 82) == 1)
  {
    v4 = *((_DWORD *)this + 72);
    if (v4 && *((_QWORD *)this + 34))
    {
      v5 = 1000000000 * v4;
      v6 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, *((dispatch_queue_t *)this + 11));
      *((_QWORD *)this + 35) = v6;
      v7 = dispatch_time(0, v5);
      dispatch_source_set_timer(v6, v7, v5, 0xBEBC200uLL);
      v8 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
      if (!v8 || (v9 = *((_QWORD *)this + 9), (v10 = std::__shared_weak_count::lock(v8)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v11 = v10;
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v13 = __ldxr(p_shared_weak_owners);
      while (__stxr(v13 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
      v16 = *((_QWORD *)this + 35);
      handler[0] = MEMORY[0x1E0C809B0];
      handler[1] = 1174405120;
      handler[2] = ___ZN17BasebandTransport12timerOn_syncEv_block_invoke;
      handler[3] = &__block_descriptor_tmp_69;
      handler[4] = this;
      handler[5] = v9;
      v22 = v11;
      do
        v17 = __ldxr(p_shared_weak_owners);
      while (__stxr(v17 + 1, p_shared_weak_owners));
      dispatch_source_set_event_handler(v16, handler);
      dispatch_activate(*((dispatch_object_t *)this + 35));
      v18 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        v19 = *((_DWORD *)this + 72);
        *(_DWORD *)buf = 67109120;
        v24 = v19;
        _os_log_impl(&dword_1BF335000, v18, OS_LOG_TYPE_DEFAULT, "#I Status report enabled(%d sec)", buf, 8u);
      }
      if (v22)
        std::__shared_weak_count::__release_weak(v22);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    v20 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF335000, v20, OS_LOG_TYPE_DEFAULT, "#I Invalid state for status report enable.  Ignoring enable request.", buf, 2u);
    }
  }
}

void BasebandTransport::dumpState(BasebandTransport *this, char a2)
{
  _QWORD v2[5];
  char v3;

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 0x40000000;
  v2[2] = ___ZN17BasebandTransport9dumpStateEb_block_invoke;
  v2[3] = &__block_descriptor_tmp_70_0;
  v2[4] = this;
  v3 = a2;
  ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v2);
}

void *__copy_helper_block_e8_88c45_ZTSN8dispatch5blockIU13block_pointerFvPhjEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 88);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 88) = result;
  return result;
}

void __destroy_helper_block_e8_88c45_ZTSN8dispatch5blockIU13block_pointerFvPhjEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 88);
  if (v1)
    _Block_release(v1);
}

BOOL BasebandTransport::write(BasebandTransport *this, const unsigned __int8 *a2, uint64_t a3, unsigned int *a4)
{
  char *v7;
  _QWORD *v8;
  NSObject *v9;
  char *v10;
  NSObject *v11;
  uint64_t (**v12)(_QWORD, uint64_t);
  int v13;
  NSObject *v14;
  _BOOL8 v15;
  _QWORD v17[6];
  _QWORD v18[10];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  const unsigned __int8 *v26;
  uint64_t block;
  uint64_t p_block;
  uint64_t v29;
  __n128 (*v30)(_QWORD *, uint64_t);
  void (*v31)(uint64_t);
  void *__p;
  void *v33;
  uint64_t v34;
  _QWORD v35[7];
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  char v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *(*v47)(uint64_t);
  void *v48;
  char *v49;
  _QWORD *v50;

  v40 = 0;
  v41 = &v40;
  v42 = 0x2000000000;
  v43 = 0;
  v36 = 0;
  v37 = &v36;
  v38 = 0x2000000000;
  v39 = 0;
  v7 = (char *)this + 72;
  v8 = (_QWORD *)MEMORY[0x1E0C809B0];
  v35[0] = MEMORY[0x1E0C809B0];
  v35[1] = 0x40000000;
  v35[2] = ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke;
  v35[3] = &unk_1E78FE980;
  v35[5] = &v40;
  v35[6] = this;
  v35[4] = &v36;
  v45 = v35;
  block = MEMORY[0x1E0C809B0];
  p_block = 0x40000000;
  v29 = (uint64_t)___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v30 = (__n128 (*)(_QWORD *, uint64_t))&__block_descriptor_tmp_77;
  v31 = (void (*)(uint64_t))((char *)this + 72);
  __p = &v45;
  v10 = (char *)this + 88;
  v9 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v10 + 1))
  {
    dispatch_async_and_wait(v9, &block);
    if (*((_BYTE *)v41 + 24))
      goto LABEL_3;
LABEL_10:
    v15 = 0;
    goto LABEL_19;
  }
  dispatch_sync(v9, &block);
  if (!*((_BYTE *)v41 + 24))
    goto LABEL_10;
LABEL_3:
  block = 0;
  p_block = (uint64_t)&block;
  v29 = 0x4002000000;
  v30 = __Block_byref_object_copy__1;
  v31 = __Block_byref_object_dispose__1;
  v33 = 0;
  v34 = 0;
  __p = 0;
  v23 = 0;
  v24 = &v23;
  v25 = 0x2000000000;
  v26 = a2;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2000000000;
  v22 = a3;
  v18[0] = v8;
  v18[1] = 0x40000000;
  v18[2] = ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke_50;
  v18[3] = &unk_1E78FE9A8;
  v18[8] = a2;
  v18[9] = a3;
  v18[4] = &block;
  v18[5] = &v23;
  v18[6] = &v19;
  v18[7] = this;
  v44 = v18;
  v45 = v8;
  v46 = 0x40000000;
  v47 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v48 = &__block_descriptor_tmp_77;
  v49 = v7;
  v50 = &v44;
  v11 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12))
  {
    dispatch_async_and_wait(v11, &v45);
    if (v20[3])
      goto LABEL_5;
  }
  else
  {
    dispatch_sync(v11, &v45);
    if (v20[3])
    {
LABEL_5:
      v12 = (uint64_t (**)(_QWORD, uint64_t))v37[3];
      if (*v12)
      {
        v13 = (*v12)(v12, v24[3]);
        *((_BYTE *)v41 + 24) = v13;
        if (v13)
        {
          v17[0] = v8;
          v17[1] = 0x40000000;
          v17[2] = ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke_2;
          v17[3] = &unk_1E78FE9D0;
          v17[4] = &v19;
          v17[5] = this;
          v44 = v17;
          v45 = v8;
          v46 = 0x40000000;
          v47 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
          v48 = &__block_descriptor_tmp_77;
          v49 = v7;
          v50 = &v44;
          v14 = *((_QWORD *)this + 11);
          if (*((_QWORD *)this + 12))
            dispatch_async_and_wait(v14, &v45);
          else
            dispatch_sync(v14, &v45);
          v15 = *((_BYTE *)v41 + 24) != 0;
        }
        else
        {
          v15 = 0;
        }
      }
      else
      {
        v15 = 0;
        *((_BYTE *)v41 + 24) = 0;
      }
      goto LABEL_17;
    }
  }
  v15 = 1;
LABEL_17:
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&block, 8);
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
LABEL_19:
  _Block_object_dispose(&v36, 8);
  _Block_object_dispose(&v40, 8);
  return v15;
}

void sub_1BF38D798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  uint64_t v40;

  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a34, 8);
  if (__p)
  {
    a40 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v40 - 224), 8);
  _Block_object_dispose((const void *)(v40 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t result;

  v2 = a1[6];
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v2 + 176;
  v3 = *(uint64_t (**)(void))(v2 + 232);
  if (v3)
  {
    result = v3();
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = result;
  }
  else
  {
    result = 0;
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 0;
  }
  return result;
}

void ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(v2 + 344) + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  *(_QWORD *)(v2 + 344) = v3;
  v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v6 = 134218240;
    v7 = v5;
    v8 = 2048;
    v9 = v3;
    _os_log_debug_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEBUG, "#D Written: %zu bytes, for a total of: %llu", (uint8_t *)&v6, 0x16u);
  }
}

uint64_t BasebandTransport::read(BasebandTransport *this, unsigned __int8 *a2, unint64_t a3, unsigned int *a4)
{
  uint64_t *v6;
  uint64_t v7;
  NSObject *v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  char v13;
  void (*v14)(void);
  uint64_t v15;
  _QWORD v17[6];
  _QWORD v18[7];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  _QWORD block[6];

  v23 = 0;
  v24 = &v23;
  v25 = 0x2000000000;
  v26 = 0;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2000000000;
  v22 = 0;
  v6 = (uint64_t *)((char *)this + 72);
  v7 = MEMORY[0x1E0C809B0];
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 0x40000000;
  v18[2] = ___ZN17BasebandTransport4readEPhmPjbj_block_invoke;
  v18[3] = &unk_1E78FE9F8;
  v18[5] = &v23;
  v18[6] = this;
  v18[4] = &v19;
  v27 = v18;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_77;
  block[4] = (char *)this + 72;
  block[5] = &v27;
  v9 = (char *)this + 88;
  v8 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v9 + 1))
  {
    dispatch_async_and_wait(v8, block);
    v10 = v24;
    if (!*((_BYTE *)v24 + 24))
      goto LABEL_13;
LABEL_5:
    v11 = v20[3];
    if (v11 && (v12 = *(uint64_t (**)(void))(v11 + 8)) != 0)
    {
      v13 = v12();
      *((_BYTE *)v24 + 24) = v13;
      if ((v13 & 1) != 0)
      {
        v17[0] = v7;
        v17[1] = 0x40000000;
        v17[2] = ___ZN17BasebandTransport4readEPhmPjbj_block_invoke_54;
        v17[3] = &__block_descriptor_tmp_55_0;
        v17[4] = this;
        v17[5] = a4;
        ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v6, (uint64_t)v17);
        goto LABEL_13;
      }
      v14 = *(void (**)(void))(v20[3] + 24);
      if (!v14)
        goto LABEL_13;
    }
    else
    {
      *((_BYTE *)v10 + 24) = 0;
      v14 = *(void (**)(void))(v11 + 24);
      if (!v14)
        goto LABEL_13;
    }
    v14();
    goto LABEL_13;
  }
  dispatch_sync(v8, block);
  v10 = v24;
  if (*((_BYTE *)v24 + 24))
    goto LABEL_5;
LABEL_13:
  v15 = *((unsigned __int8 *)v24 + 24);
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
  return v15;
}

void sub_1BF38DB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void ___ZN17BasebandTransport4readEPhmPjbj_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  unsigned int (*v3)(void);
  NSObject *v4;
  uint8_t v5[16];

  v2 = a1[6];
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v2 + 176;
  v3 = *(unsigned int (**)(void))(v2 + 232);
  if (v3)
  {
    if (!v3())
    {
      *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 0;
      if (!*(_BYTE *)(v2 + 332))
        return;
      goto LABEL_7;
    }
    LOBYTE(v3) = *(_BYTE *)(v2 + 332) == 0;
  }
  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = (_BYTE)v3;
  if (!*(_BYTE *)(v2 + 332))
    return;
LABEL_7:
  v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v5 = 0;
    _os_log_error_impl(&dword_1BF335000, v4, OS_LOG_TYPE_ERROR, "Explicit reads not allowed in async mode", v5, 2u);
  }
}

uint64_t ___ZN17BasebandTransport4readEPhmPjbj_block_invoke_54(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 32) + 336) += **(unsigned int **)(result + 40);
  return result;
}

uint64_t BasebandTransport::close(BasebandTransport *this)
{
  char *v2;
  uint64_t v3;
  NSObject *v4;
  char *v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD v9[6];
  _QWORD v10[5];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;
  _QWORD *v15;
  uint64_t block;
  uint64_t v17;
  _QWORD *(*v18)(uint64_t);
  void *v19;
  char *v20;
  _QWORD *v21;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 1;
  *((_DWORD *)this + 72) = 0;
  v2 = (char *)this + 72;
  v3 = MEMORY[0x1E0C809B0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = ___ZN17BasebandTransport5closeEv_block_invoke;
  v10[3] = &__block_descriptor_tmp_56;
  v10[4] = this;
  v15 = v10;
  block = MEMORY[0x1E0C809B0];
  v17 = 0x40000000;
  v18 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v19 = &__block_descriptor_tmp_77;
  v20 = (char *)this + 72;
  v21 = &v15;
  v5 = (char *)this + 88;
  v4 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v5 + 1))
    dispatch_async_and_wait(v4, &block);
  else
    dispatch_sync(v4, &block);
  BasebandTransport::stopReader(this);
  v9[0] = v3;
  v9[1] = 0x40000000;
  v9[2] = ___ZN17BasebandTransport5closeEv_block_invoke_2;
  v9[3] = &unk_1E78FEA60;
  v9[4] = &v11;
  v9[5] = this;
  v15 = v9;
  block = v3;
  v17 = 0x40000000;
  v18 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v19 = &__block_descriptor_tmp_77;
  v20 = v2;
  v21 = &v15;
  v6 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12))
    dispatch_async_and_wait(v6, &block);
  else
    dispatch_sync(v6, &block);
  v7 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v7;
}

void sub_1BF38DDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN17BasebandTransport5closeEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 280);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(v1 + 280));
    *(_QWORD *)(v1 + 280) = 0;
    v3 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Status report disabled", v4, 2u);
    }
  }
}

uint64_t ___ZN17BasebandTransport5closeEv_block_invoke_2(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 80))(*(_QWORD *)(a1 + 40));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t BasebandTransport::operator*(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD block[6];

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN17BasebandTransportdeEv_block_invoke;
  v5[3] = &unk_1E78FEA88;
  v5[4] = &v6;
  v5[5] = a1;
  v10 = v5;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_77;
  block[4] = a1 + 72;
  block[5] = &v10;
  v2 = a1 + 88;
  v1 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(v2 + 8))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
  v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t ___ZN17BasebandTransportdeEv_block_invoke(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_QWORD *)(result + 40) + 176;
  return result;
}

uint64_t BasebandTransport::switchDIAG_sync(BasebandTransport *this)
{
  return 0;
}

uint64_t BasebandTransport::getIOSizeRx(BasebandTransport *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t BasebandTransport::close_sync(BasebandTransport *this)
{
  unsigned int (*v2)(char *);
  _OWORD *v3;
  uint64_t v4;
  NSObject *v5;
  int v6;
  const char *v7;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  void **v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (unsigned int (*)(char *))*((_QWORD *)this + 29);
  if (v2 && (v3 = (_OWORD *)((char *)this + 176), v2((char *)this + 176)))
  {
    *((_DWORD *)this + 82) = 0;
    v4 = TelephonyUtilTransportFree();
    *v3 = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_QWORD *)this + 32) = 0;
    v5 = *((_QWORD *)this + 5);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      return v4;
  }
  else
  {
    v4 = 1;
    v5 = *((_QWORD *)this + 5);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      return v4;
  }
  switch(*((_DWORD *)this + 26))
  {
    case 0:
      v10 = 3;
      LODWORD(__p[0]) = 4997712;
      break;
    case 1:
      v10 = 3;
      LODWORD(__p[0]) = 4997715;
      break;
    case 2:
      v10 = 4;
      v6 = 1195460932;
      goto LABEL_28;
    case 3:
      v10 = 4;
      v6 = 1397114194;
      goto LABEL_28;
    case 4:
      v10 = 5;
      strcpy((char *)__p, "QMUX1");
      break;
    case 5:
      v10 = 5;
      strcpy((char *)__p, "QMUX2");
      break;
    case 6:
      v10 = 3;
      LODWORD(__p[0]) = 5066578;
      break;
    case 7:
      v10 = 4;
      v6 = 1414483778;
      goto LABEL_28;
    case 8:
      v10 = 3;
      LODWORD(__p[0]) = 4805185;
      break;
    case 9:
      v10 = 3;
      LODWORD(__p[0]) = 5526611;
      break;
    case 0xA:
      v10 = 2;
      strcpy((char *)__p, "AT");
      break;
    case 0xB:
      v10 = 4;
      v6 = 1280328769;
      goto LABEL_28;
    case 0xC:
      v10 = 8;
      strcpy((char *)__p, "MEDIACTL");
      break;
    case 0xD:
      v10 = 3;
      LODWORD(__p[0]) = 5461061;
      break;
    case 0xE:
      v10 = 4;
      v6 = 1397968455;
      goto LABEL_28;
    case 0xF:
      v10 = 4;
      v6 = 1397965905;
      goto LABEL_28;
    case 0x10:
      v10 = 5;
      strcpy((char *)__p, "RCTTH");
      break;
    case 0x11:
      v10 = 3;
      LODWORD(__p[0]) = 5260097;
      break;
    case 0x12:
      v10 = 4;
      v6 = 1297040214;
      goto LABEL_28;
    case 0x13:
      v10 = 4;
      v6 = 1129335117;
LABEL_28:
      LODWORD(__p[0]) = v6;
      BYTE4(__p[0]) = 0;
      break;
    case 0x14:
      v10 = 3;
      LODWORD(__p[0]) = 4999236;
      break;
    case 0x15:
      v10 = 3;
      LODWORD(__p[0]) = 5789005;
      break;
    case 0x16:
      v10 = 3;
      LODWORD(__p[0]) = 4407622;
      break;
    default:
      v10 = 7;
      strcpy((char *)__p, "Unknown");
      break;
  }
  v7 = "error";
  if ((_DWORD)v4)
    v7 = "success";
  *(_DWORD *)buf = 136315394;
  v12 = __p;
  v13 = 2080;
  v14 = v7;
  _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "#I Transport close %s: %s", buf, 0x16u);
  if (v10 < 0)
    operator delete(__p[0]);
  return v4;
}

uint64_t BasebandTransport::startReader_sync(NSObject **this)
{
  size_t v2;
  dispatch_queue_t v3;
  NSObject *v4;

  if (!this[37])
  {
    if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize((capabilities::abs *)this))
      v2 = 0x4000;
    else
      v2 = 0x8000;
    this[38] = v2;
    this[37] = operator new[](v2);
    v3 = dispatch_queue_create("ipc.bb", 0);
    v4 = this[39];
    this[39] = v3;
    if (v4)
      dispatch_release(v4);
  }
  *((_BYTE *)this + 292) = 1;
  *((_BYTE *)this + 332) = 1;
  BasebandTransport::queueRead_sync((BasebandTransport *)this);
  return *((unsigned __int8 *)this + 292);
}

void BasebandTransport::queueRead_sync(BasebandTransport *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD v13[6];
  std::__shared_weak_count *v14;
  dispatch_group_t group;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = *((_QWORD *)this + 40);
  if (v6)
  {
    dispatch_retain(*((dispatch_object_t *)this + 40));
    dispatch_group_enter(v6);
  }
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 1174405120;
  v13[2] = ___ZN17BasebandTransport14queueRead_syncEv_block_invoke;
  v13[3] = &__block_descriptor_tmp_63_0;
  v13[4] = this;
  v13[5] = v3;
  v14 = v5;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  group = v6;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(v6);
  }
  dispatch_async(*((dispatch_queue_t *)this + 39), v13);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v6)
  {
    dispatch_group_leave(v6);
    dispatch_release(v6);
  }
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t ___ZN17BasebandTransport10stopReaderEv_block_invoke(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 40);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_BYTE *)(v1 + 292);
  *(_BYTE *)(v1 + 292) = 0;
  *(_BYTE *)(v1 + 332) = 0;
  return result;
}

uint64_t ___ZN17BasebandTransport10stopReaderEv_block_invoke_2(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  v1 = *(_QWORD *)(result + 40);
  v2 = *(uint64_t (**)(uint64_t))(v1 + 232);
  if (v2)
  {
    v3 = result;
    result = v2(v1 + 176);
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 24))
      {
        v4 = *(uint64_t (**)(uint64_t))(v1 + 192);
        if (v4)
          return v4(v1 + 176);
      }
    }
  }
  return result;
}

void ___ZN17BasebandTransport14queueRead_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(a1 + 56);
  v3 = v2;
  if (v2)
  {
    dispatch_retain(v2);
    dispatch_group_enter(v2);
  }
  BasebandTransport::read_sync(v1, &v3);
  if (v2)
  {
    dispatch_group_leave(v2);
    dispatch_release(v2);
  }
}

void sub_1BF38E618(_Unwind_Exception *exception_object)
{
  NSObject *v1;

  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void BasebandTransport::read_sync(uint64_t a1, NSObject **a2)
{
  std::__shared_weak_count *v4;
  uint64_t *v5;
  uint64_t v6;
  capabilities::abs *v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, int *, _QWORD, uint64_t, _QWORD);
  uint64_t v10;
  capabilities::abs *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  NSObject *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD v31[6];
  std::__shared_weak_count *v32;
  _QWORD block[6];
  std::__shared_weak_count *v34;
  dispatch_group_t group;
  int v36;
  _QWORD v37[5];
  int v38;
  int v39;
  uint64_t v40;
  std::__shared_weak_count *v41;

  v6 = *(_QWORD *)(a1 + 72);
  v4 = *(std::__shared_weak_count **)(a1 + 80);
  v5 = (uint64_t *)(a1 + 72);
  v40 = v6;
  if (!v4
    || (v8 = (capabilities::abs *)std::__shared_weak_count::lock(v4), (v41 = (std::__shared_weak_count *)v8) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v39 = 0;
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, _QWORD, uint64_t, _QWORD))(a1 + 184);
  v10 = MEMORY[0x1E0C809B0];
  if (v9)
  {
    v11 = v8;
    v12 = *(_QWORD *)(a1 + 296);
    v13 = capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v8) ? 0x4000 : 0x8000;
    v14 = v9(a1 + 176, v12, v13, &v39, 0, 0xFFFFFFFFLL, 0);
    v15 = v39 ? v14 : 0;
    if (v15 == 1)
    {
      v37[0] = v10;
      v37[1] = 0x40000000;
      v37[2] = ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke;
      v37[3] = &__block_descriptor_tmp_64;
      v37[4] = a1;
      v38 = v39;
      ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v5, (uint64_t)v37);
      block[0] = v10;
      block[1] = 1174405120;
      block[2] = ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke_2;
      block[3] = &__block_descriptor_tmp_65;
      block[4] = a1;
      block[5] = v6;
      v34 = (std::__shared_weak_count *)v11;
      v16 = (unint64_t *)((char *)v11 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      v18 = *a2;
      group = v18;
      if (v18)
      {
        dispatch_retain(v18);
        dispatch_group_enter(v18);
      }
      v36 = v39;
      dispatch_sync(*(dispatch_queue_t *)(a1 + 152), block);
      v19 = group;
      if (group)
      {
        dispatch_group_leave(group);
        dispatch_release(v19);
      }
      v20 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
  }
  v31[0] = v10;
  v31[1] = 1174405120;
  v31[2] = ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke_66;
  v31[3] = &__block_descriptor_tmp_67;
  v31[4] = a1;
  v31[5] = v40;
  v32 = v41;
  if (v41)
  {
    v23 = (unint64_t *)&v41->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v5, (uint64_t)v31);
  v25 = v32;
  if (v32)
  {
    v26 = (unint64_t *)&v32->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v41;
  if (v41)
  {
    v29 = (unint64_t *)&v41->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_1BF38E8BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1 - 96);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE56c30_ZTSN8dispatch13group_sessionE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  NSObject *v6;
  NSObject *v7;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a2[7];
  a1[7] = v6;
  if (v6)
  {
    dispatch_retain(v6);
    v7 = a1[7];
    if (v7)
      dispatch_group_enter(v7);
  }
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE56c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 56);
    if (v3)
      dispatch_release(v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 32) + 336) += *(unsigned int *)(result + 40);
  return result;
}

void ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke_2(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p;
  void *v5;
  uint64_t v6;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = v2[16];
  if (v3)
  {
    __p = 0;
    v5 = 0;
    v6 = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD, void **))(*(_QWORD *)v3 + 8))(v3, v2[37], *(unsigned int *)(a1 + 64), &__p);
    (*(void (**)(void))(v2[18] + 16))();
    if (__p)
    {
      v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    (*(void (**)(void))(v2[18] + 16))();
  }
}

void sub_1BF38EA54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ___ZN17BasebandTransport12timerOn_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD block[6];
  std::__shared_weak_count *v22;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      if (!v6)
      {
LABEL_19:
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return;
      }
      v7 = (_OWORD *)(v3 + 328);
      v8 = *(_QWORD *)(v3 + 336);
      v9 = *(_QWORD *)(v3 + 376);
      v10 = *(_QWORD *)(v3 + 344) - *(_QWORD *)(v3 + 384);
      *(_QWORD *)(v3 + 352) = v8 - v9;
      *(_QWORD *)(v3 + 360) = v10;
      if (v10)
        v11 = 0;
      else
        v11 = v8 == v9;
      if (v11)
      {
        v12 = 3;
      }
      else
      {
        if (*(_DWORD *)v7 != 3)
        {
LABEL_12:
          v13 = *(_OWORD *)(v3 + 344);
          *(_OWORD *)(v3 + 368) = *v7;
          *(_OWORD *)(v3 + 384) = v13;
          *(_QWORD *)(v3 + 400) = *(_QWORD *)(v3 + 360);
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 1174405120;
          block[2] = ___ZN17BasebandTransport12timerOn_syncEv_block_invoke_2;
          block[3] = &__block_descriptor_tmp_68_0;
          block[4] = v3;
          block[5] = v6;
          v14 = (unint64_t *)&v4->__shared_owners_;
          v22 = v4;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
          dispatch_async(*(dispatch_queue_t *)(v3 + 152), block);
          v16 = v22;
          if (v22)
          {
            v17 = (unint64_t *)&v22->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
          goto LABEL_19;
        }
        v12 = 1;
      }
      *(_DWORD *)v7 = v12;
      goto LABEL_12;
    }
  }
}

uint64_t ___ZN17BasebandTransport12timerOn_syncEv_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _OWORD v9[2];
  uint64_t v10;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 272);
  v10 = *(_QWORD *)(v5 + 400);
  v7 = *(_OWORD *)(v5 + 384);
  v9[0] = *(_OWORD *)(v5 + 368);
  v9[1] = v7;
  return (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t))(v6 + 16))(v6, v9, a3, a4, a5);
}

__n128 BasebandTransport::getStatus@<Q0>(BasebandTransport *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)(a2 + 32) = *((_QWORD *)this + 45);
  result = *(__n128 *)((char *)this + 328);
  v3 = *(_OWORD *)((char *)this + 344);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void ___ZN17BasebandTransport9dumpStateEb_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void **v4;
  void **v5;
  void *__p[2];
  char v7;
  uint8_t buf[4];
  void **v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  *(int64x2_t *)(v2 + 352) = vsubq_s64(*(int64x2_t *)(v2 + 336), *(int64x2_t *)(v2 + 376));
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    BasebandTransport::Parameters::toString((BasebandTransport::Parameters *)(v2 + 104), __p);
    if (v7 >= 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v9 = v4;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu);
    if (v7 < 0)
      operator delete(__p[0]);
    v3 = *(NSObject **)(v2 + 40);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)
    && ((BasebandTransport::Status::toString((BasebandTransport::Status *)(v2 + 328), __p), v7 >= 0)
      ? (v5 = __p)
      : (v5 = (void **)__p[0]),
        *(_DWORD *)buf = 136315138,
        v9 = v5,
        _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu),
        v7 < 0))
  {
    operator delete(__p[0]);
    if (!*(_BYTE *)(a1 + 40))
      return;
  }
  else if (!*(_BYTE *)(a1 + 40))
  {
    return;
  }
  *(_DWORD *)(v2 + 328) = 0;
  *(_BYTE *)(v2 + 332) = 0;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_QWORD *)(v2 + 365) = 0;
  BasebandTransport::timerOn_sync((BasebandTransport *)v2);
}

void BasebandTransport::reportStatus(uint64_t a1, int a2, void **a3)
{
  uint64_t v4;
  void *v5;
  NSObject *v6;
  void *v7;
  _QWORD v8[5];
  void *aBlock;
  int v10;
  _QWORD *v11;
  _QWORD block[6];

  v4 = MEMORY[0x1E0C809B0];
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1174405120;
  v8[2] = ___ZN17BasebandTransport12reportStatusEjN8dispatch5blockIU13block_pointerFvNS_6StatusEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_71;
  v8[4] = a1;
  v10 = a2;
  v5 = *a3;
  if (*a3)
    v5 = _Block_copy(v5);
  aBlock = v5;
  v11 = v8;
  block[0] = v4;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_77;
  block[4] = a1 + 72;
  block[5] = &v11;
  v6 = *(NSObject **)(a1 + 88);
  if (!*(_QWORD *)(a1 + 96))
  {
    dispatch_sync(v6, block);
    v7 = aBlock;
    if (!aBlock)
      return;
    goto LABEL_7;
  }
  dispatch_async_and_wait(v6, block);
  v7 = aBlock;
  if (aBlock)
LABEL_7:
    _Block_release(v7);
}

void ___ZN17BasebandTransport12reportStatusEjN8dispatch5blockIU13block_pointerFvNS_6StatusEEEE_block_invoke(uint64_t a1)
{
  int v1;
  void *v2;
  uint64_t v3;
  const void *v4;

  v1 = *(_DWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  *(_DWORD *)(v3 + 288) = v1;
  if (v2)
    v2 = _Block_copy(v2);
  v4 = *(const void **)(v3 + 272);
  *(_QWORD *)(v3 + 272) = v2;
  if (v4)
    _Block_release(v4);
  BasebandTransport::timerOn_sync((BasebandTransport *)v3);
}

void *__copy_helper_block_e8_40c70_ZTSN8dispatch5blockIU13block_pointerFvN17BasebandTransport6StatusEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 40);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c70_ZTSN8dispatch5blockIU13block_pointerFvN17BasebandTransport6StatusEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    _Block_release(v1);
}

uint64_t ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

double ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 16) = 0x600000000000000;
  result = *(double *)"ipc.bb";
  *(_OWORD *)a1 = *(_OWORD *)"ipc.bb";
  return result;
}

uint64_t ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E78FECE0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E78FECE0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ___ZL14sLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  char __p[19];
  char v19;
  __int128 v20;

  v19 = 18;
  strcpy(__p, "baseband.transport");
  ctu::LogServer::create();
  v2 = *(_QWORD *)(a1 + 32);
  v3 = v20;
  v20 = 0uLL;
  v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)v2 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (*((_QWORD *)&v20 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v20 + 1) + 16))(*((_QWORD *)&v20 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v20 + 1));
      if ((v19 & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  if (v19 < 0)
LABEL_11:
    operator delete(*(void **)__p);
LABEL_12:
  v9 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_1E78FED40;
  *(_QWORD *)__p = v9;
  v10 = (std::__shared_weak_count *)operator new(0x20uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E78FEDA8;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = v9;
  *(_QWORD *)&__p[8] = v10;
  v17 = v10;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  ctu::LogServer::addWriter();
  if (v17)
  {
    v13 = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  ctu::LogServer::start(**(ctu::LogServer ***)(a1 + 32));
  ctu::LogServer::setEnabled(**(ctu::LogServer ***)(a1 + 32));
  if (*(_QWORD *)&__p[8])
  {
    v15 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&__p[8] + 16))(*(_QWORD *)&__p[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__p[8]);
    }
  }
}

void sub_1BF38F25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF38F278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_1BF38F2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<EmptyLogWriter *,std::shared_ptr<ctu::LogWriter>::__shared_ptr_default_delete<ctu::LogWriter,EmptyLogWriter>,std::allocator<EmptyLogWriter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<EmptyLogWriter *,std::shared_ptr<ctu::LogWriter>::__shared_ptr_default_delete<ctu::LogWriter,EmptyLogWriter>,std::allocator<EmptyLogWriter>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<EmptyLogWriter *,std::shared_ptr<ctu::LogWriter>::__shared_ptr_default_delete<ctu::LogWriter,EmptyLogWriter>,std::allocator<EmptyLogWriter>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF53E757)
    return a1 + 24;
  if (((v3 & 0x80000001BF53E757 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF53E757))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF53E757 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void ctu::SharedLoggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E78FECE0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF38F518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF38F534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<BasebandTransportMAV *,std::shared_ptr<BasebandTransportMAV> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportMAV>(BasebandTransportMAV*)::{lambda(BasebandTransportMAV *)#1},std::allocator<BasebandTransportMAV>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<BasebandTransportMAV *,std::shared_ptr<BasebandTransportMAV> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportMAV>(BasebandTransportMAV*)::{lambda(BasebandTransportMAV *)#1},std::allocator<BasebandTransportMAV>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<BasebandTransportMAV> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportMAV>(BasebandTransportMAV*)::{lambda(BasebandTransportMAV*)#1}::operator() const(BasebandTransportMAV*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<BasebandTransportMAV *,std::shared_ptr<BasebandTransportMAV> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportMAV>(BasebandTransportMAV*)::{lambda(BasebandTransportMAV *)#1},std::allocator<BasebandTransportMAV>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportMAVEENSt3__11"
                     "0shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportMA"
                                "VEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportMAVEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportMAVEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<BasebandTransportMAV> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportMAV>(BasebandTransportMAV*)::{lambda(BasebandTransportMAV*)#1}::operator() const(BasebandTransportMAV*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<BasebandTransport *,std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport *)#1},std::allocator<BasebandTransport>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<BasebandTransport *,std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport *)#1},std::allocator<BasebandTransport>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport*)#1}::operator() const(BasebandTransport*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<BasebandTransport *,std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport *)#1},std::allocator<BasebandTransport>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_"
                                "ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport*)#1}::operator() const(BasebandTransport*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void _ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb0_E3__0EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (**v6)(const void *, _OWORD *, uint64_t, uint64_t, uint64_t);
  __int128 v7;
  _OWORD v8[2];
  uint64_t v9;

  v6 = *(void (***)(const void *, _OWORD *, uint64_t, uint64_t, uint64_t))a1;
  v7 = *(_OWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 40);
  v8[0] = *(_OWORD *)(a1 + 8);
  v8[1] = v7;
  v6[2](v6, v8, a3, a4, a5);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  operator delete((void *)a1);
}

void sub_1BF38F708(_Unwind_Exception *a1)
{
  const void **v1;

  if (*v1)
    _Block_release(*v1);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__1EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_(const void **a1)
{
  void *v2;

  (*((void (**)(void))*a1 + 2))();
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  if (*a1)
    _Block_release(*a1);
  operator delete(a1);
}

void sub_1BF38F780(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    *(_QWORD *)(v1 + 16) = v3;
    operator delete(v3);
  }
  if (*(_QWORD *)v1)
    _Block_release(*(const void **)v1);
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__2EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_(void *a1)
{
  const void *v2;

  (*(void (**)(void))(*(_QWORD *)a1 + 16))();
  if (*((_BYTE *)a1 + 20))
  {
    v2 = *(const void **)a1;
    if (!*(_QWORD *)a1)
      goto LABEL_6;
    goto LABEL_5;
  }
  free(*((void **)a1 + 1));
  v2 = *(const void **)a1;
  if (*(_QWORD *)a1)
LABEL_5:
    _Block_release(v2);
LABEL_6:
  operator delete(a1);
}

void sub_1BF38F810(_Unwind_Exception *a1)
{
  const void **v1;

  if (*v1)
    _Block_release(*v1);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E78FEEF0;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c46_ZTSNSt3__110shared_ptrIK17BasebandTransportEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__110shared_ptrIK17BasebandTransportEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

const char *CPMSModule::getName(CPMSModule *this)
{
  return "cpms.mod";
}

void CPMSModule::create(capabilities::abs *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unsigned __int8 v33;
  NSObject *v34;
  unsigned __int8 v35;
  NSObject *v36;
  uint64_t v37[2];
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint8_t buf[8];
  std::__shared_weak_count *v43;

  if (capabilities::abs::getCPMSVariant(a1) != 1)
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED7100E0 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v36 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_DEFAULT))
      {
LABEL_44:
        *a2 = 0;
        a2[1] = 0;
        return;
      }
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
      v36 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_DEFAULT))
        goto LABEL_44;
    }
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v36, OS_LOG_TYPE_DEFAULT, "User-space CPMS not supported!", buf, 2u);
    goto LABEL_44;
  }
  *a2 = 0;
  a2[1] = 0;
  v4 = operator new(0x1B8uLL);
  v5 = v4;
  v6 = *(_QWORD *)a1;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  v37[0] = v6;
  v37[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  CPMSModule::CPMSModule((uint64_t)v4, v37);
  v38 = v5;
  v39 = 0xAAAAAAAAAAAAAAAALL;
  v10 = (std::__shared_weak_count *)operator new(0x20uLL);
  v10->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)off_1E78FF3C8;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  v39 = (unint64_t)v10;
  v12 = (std::__shared_weak_count *)*((_QWORD *)v5 + 16);
  if (v12)
  {
    if (v12->__shared_owners_ != -1)
      goto LABEL_17;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v14 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    *((_QWORD *)v5 + 15) = v5;
    *((_QWORD *)v5 + 16) = v10;
    std::__shared_weak_count::__release_weak(v12);
  }
  else
  {
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    *((_QWORD *)v5 + 15) = v5;
    *((_QWORD *)v5 + 16) = v10;
  }
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v20 = v38;
    if (!v38[13])
      goto LABEL_33;
    goto LABEL_18;
  }
LABEL_17:
  v20 = v38;
  if (!v38[13])
    goto LABEL_33;
LABEL_18:
  v21 = (std::__shared_weak_count *)v20[16];
  if (!v21 || (v22 = v20[15], (v23 = std::__shared_weak_count::lock(v21)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v24 = v23;
  *(_QWORD *)buf = v22;
  v43 = v23;
  ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v20 + 7));
  v25 = v22 + 48;
  if (!v22)
    v25 = 0;
  v40 = v25;
  v41 = v24;
  *(_QWORD *)buf = 0;
  v43 = 0;
  ctu::TrackedLogger::registerLoggerToServer();
  v26 = v41;
  if (v41)
  {
    v27 = (unint64_t *)&v41->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v43;
  if (v43)
  {
    v30 = (unint64_t *)&v43->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v20 = v38;
LABEL_33:
  v32 = v39;
  *a2 = v20;
  a2[1] = v32;
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  if (!v20)
  {
    if ((v33 & 1) == 0)
    {
      {
        GetOsLogContext(void)::sOsLogContext = 0;
        qword_1ED7100E0 = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
      }
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v34 = qword_1ED7100E0;
      if (os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_DEFAULT))
      {
LABEL_39:
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BF335000, v34, OS_LOG_TYPE_DEFAULT, "Failed to create CPMS Module!", buf, 2u);
      }
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
      v34 = qword_1ED7100E0;
      if (os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_DEFAULT))
        goto LABEL_39;
    }
  }
}

void sub_1BF38FDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void sub_1BF38FE10(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<CPMSModule> ctu::SharedSynchronizable<CPMSModule>::make_shared_ptr<CPMSModule>(CPMSModule*)::{lambda(CPMSModule*)#1}::operator() const(CPMSModule*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF38FE30()
{
  __cxa_end_catch();
  JUMPOUT(0x1BF38FE6CLL);
}

void sub_1BF38FE40()
{
  JUMPOUT(0x1BF38FE70);
}

void sub_1BF38FE4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t CPMSModule::CPMSModule(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unsigned __int8 v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  NSObject *initially_inactive;
  NSObject *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  _BYTE v21[16];
  _QWORD block[5];
  _BYTE v23[16];

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_1E7908A38;
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(_QWORD *)a1 = &unk_1E78FF318;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_1E78FF318;
    *(_QWORD *)(a1 + 8) = v3;
  }
  *(_QWORD *)a1 = off_1E78FEF48;
  *(_QWORD *)(a1 + 48) = &unk_1E78FEFB8;
  v9 = (_QWORD *)(a1 + 48);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v21, "com.apple.telephony.abm", "cpms.mod");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_2;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v12 = GetABMLogServer(void)::sLogServer;
    v11 = *(std::__shared_weak_count **)algn_1ED710088;
    if (*(_QWORD *)algn_1ED710088)
      goto LABEL_12;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v12 = GetABMLogServer(void)::sLogServer;
    v11 = *(std::__shared_weak_count **)algn_1ED710088;
    if (*(_QWORD *)algn_1ED710088)
    {
LABEL_12:
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v16 = dispatch_queue_create_with_target_V2("cpms.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v16, QOS_CLASS_UTILITY, 0);
  dispatch_activate(v16);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v16;
  if (v16)
  {
    dispatch_retain(v16);
    *(_QWORD *)(a1 + 144) = 0;
    dispatch_release(v16);
  }
  else
  {
    *(_QWORD *)(a1 + 144) = 0;
  }
  *(_QWORD *)(a1 + 48) = off_1E78FF388;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)block);
  *(_QWORD *)(a1 + 56) = &unk_1E78FB900;
  *(_QWORD *)(a1 + 104) = v12;
  *(_QWORD *)(a1 + 112) = v11;
  if (v11)
  {
    v17 = (unint64_t *)&v11->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v23);
    *v9 = off_1E78FF418;
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v23);
    *v9 = off_1E78FF418;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v21);
  *(_QWORD *)a1 = off_1E78FEF48;
  *(_QWORD *)(a1 + 48) = &unk_1E78FEFB8;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 240) = a1 + 248;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_QWORD *)(a1 + 229) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 272) = a1 + 280;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 304) = a1 + 312;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = a1 + 344;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = a1 + 376;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = a1 + 408;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = TelephonyBasebandCreateController();
  return a1;
}

void sub_1BF390260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  Service *v11;
  uint64_t v12;
  uint64_t v13;
  PowerBudget *v14;
  uint64_t v15;
  PowerBudget *v16;
  PowerBudget *v17;
  PowerBudget *v18;
  PowerBudget *v19;
  PowerBudget *v20;
  PowerBudget *v21;
  uint64_t v23;
  uint64_t v24;

  v24 = v12;
  v21 = v16;
  PowerBudget::~PowerBudget(v20);
  PowerBudget::~PowerBudget(v19);
  PowerBudget::~PowerBudget(v18);
  PowerBudget::~PowerBudget(v17);
  PowerBudget::~PowerBudget(v14);
  PowerBudget::~PowerBudget(v21);
  v23 = *((_QWORD *)v11 + 28);
  *((_QWORD *)v11 + 28) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v15);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v13);
  ctu::SharedLoggable<CPMSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(a11);
  Service::~Service(v11);
  _Unwind_Resume(a1);
}

void sub_1BF3902E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  Service *v4;
  _QWORD *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va3;

  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v13 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  v18 = va_arg(va3, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va3);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v5);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  Service::~Service(v4);
  _Unwind_Resume(a1);
}

void sub_1BF390320(_Unwind_Exception *a1)
{
  Service *v1;

  Service::~Service(v1);
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedLoggable<CPMSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E78FF388;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E78FF388;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void CPMSModule::~CPMSModule(CPMSModule *this)
{
  NSObject *v2;
  const void *v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  uint8_t v22[16];

  *(_QWORD *)this = off_1E78FEF48;
  *((_QWORD *)this + 6) = &unk_1E78FEFB8;
  v2 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v22 = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v22, 2u);
  }
  v3 = (const void *)*((_QWORD *)this + 54);
  if (v3)
    CFRelease(v3);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 400, *((_QWORD **)this + 51));
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 50) = (char *)this + 408;

  *((_QWORD *)this + 53) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 400, *((_QWORD **)this + 51));
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 50) = (char *)this + 408;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 368, *((_QWORD **)this + 47));
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 46) = (char *)this + 376;

  *((_QWORD *)this + 49) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 368, *((_QWORD **)this + 47));
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 46) = (char *)this + 376;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 336, *((_QWORD **)this + 43));
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 42) = (char *)this + 344;

  *((_QWORD *)this + 45) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 336, *((_QWORD **)this + 43));
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 42) = (char *)this + 344;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 304, *((_QWORD **)this + 39));
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 38) = (char *)this + 312;

  *((_QWORD *)this + 41) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 304, *((_QWORD **)this + 39));
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 38) = (char *)this + 312;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 272, *((_QWORD **)this + 35));
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 34) = (char *)this + 280;

  *((_QWORD *)this + 37) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 272, *((_QWORD **)this + 35));
  v4 = (_QWORD *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 34) = (char *)this + 280;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 240, v4);
  *((_QWORD *)this + 30) = (char *)this + 248;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;

  *((_QWORD *)this + 33) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 240, *((_QWORD **)this + 31));
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 30) = (char *)this + 248;
  v5 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *((_QWORD *)this + 6) = off_1E78FF388;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v15 = *((_QWORD *)this + 18);
  if (v15)
    dispatch_release(v15);
  v16 = *((_QWORD *)this + 17);
  if (v16)
    dispatch_release(v16);
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  *(_QWORD *)this = off_1E7908A38;
  v18 = *((_QWORD *)this + 3);
  if (v18)
  {
    v19 = *((_QWORD *)this + 4);
    v20 = (void *)*((_QWORD *)this + 3);
    if (v19 != v18)
    {
      do
      {
        if (*(char *)(v19 - 1) < 0)
          operator delete(*(void **)(v19 - 24));
        v19 -= 24;
      }
      while (v19 != v18);
      v20 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v18;
    operator delete(v20);
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
}

{
  void *v1;

  CPMSModule::~CPMSModule(this);
  operator delete(v1);
}

void `non-virtual thunk to'CPMSModule::~CPMSModule(CPMSModule *this)
{
  CPMSModule::~CPMSModule((CPMSModule *)((char *)this - 48));
}

{
  void *v1;

  CPMSModule::~CPMSModule((CPMSModule *)((char *)this - 48));
  operator delete(v1);
}

void CPMSModule::shutdown(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[17];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CPMSModule>::execute_wrapped<CPMSModule::shutdown(dispatch::group_session)::$_0>(CPMSModule::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CPMSModule::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<CPMSModule::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void CPMSModule::initialize(_QWORD *a1, NSObject **a2)
{
  uint64_t v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD v16[5];
  dispatch_group_t group;
  _QWORD block[6];
  std::__shared_weak_count *v19;

  v3 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3321888768;
  v16[2] = ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v16[3] = &__block_descriptor_48_e8_40c30_ZTSN8dispatch13group_sessionE_e5_v8__0l;
  v4 = *a2;
  v16[4] = a1;
  group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  v5 = (std::__shared_weak_count *)a1[16];
  if (!v5 || (v6 = a1[15], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v9 = a1[17];
  block[0] = v3;
  block[1] = 3321888768;
  block[2] = ___ZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E78FF4B0;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  block[5] = v6;
  v19 = v8;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  block[4] = v16;
  dispatch_async(v9, block);
  v12 = v19;
  if (v19)
  {
    v13 = (unint64_t *)&v19->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  CommandDriverFactory *v10;
  const void *v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  const void *v30;
  size_t v31;
  size_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  const void *v39;
  size_t v40;
  size_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  const void *v47;
  size_t v48;
  size_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  const void *v55;
  size_t v56;
  size_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  const void *v63;
  size_t v64;
  size_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  unsigned __int8 v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  __int128 v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  _QWORD *v89;
  NSObject *v90;
  unint64_t *v91;
  unint64_t v92;
  _QWORD *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  NSObject *v96;
  NSObject *v97;
  NSObject *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  _QWORD v101[6];
  std::__shared_weak_count *v102;
  const void *v103;
  _QWORD v104[6];
  std::__shared_weak_count *v105;
  const void *v106;
  _QWORD v107[6];
  std::__shared_weak_count *v108;
  const void *v109;
  _QWORD v110[6];
  std::__shared_weak_count *v111;
  const void *v112;
  _QWORD aBlock[6];
  std::__shared_weak_count *v114;
  const void *v115[2];
  std::__shared_weak_count *v116;
  __int128 v117;
  _BYTE __dst[24];
  const char *v119;
  uint64_t *v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (v3 = *(_QWORD *)(v1 + 120), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v11 = (const void *)off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v10);
    v12 = *(_OWORD *)__dst;
    *(_OWORD *)__dst = 0uLL;
    v13 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v12;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (*(_QWORD *)&__dst[8])
    {
      v16 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)&__dst[8] + 16))(*(_QWORD *)&__dst[8]);
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__dst[8]);
      }
    }
    v11 = (const void *)off_1ED70FD08;
  }
  v115[1] = v11;
  v116 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v18 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(__int128 *__return_ptr, const void *))(*(_QWORD *)v11 + 104))(&v117, v11);
  v20 = v117;
  v117 = 0uLL;
  v21 = *(std::__shared_weak_count **)(v1 + 200);
  *(_OWORD *)(v1 + 192) = v20;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
  if (!*((_QWORD *)&v117 + 1))
    goto LABEL_33;
  v25 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    v27 = v116;
    if (!v116)
      goto LABEL_37;
  }
  else
  {
LABEL_33:
    v27 = v116;
    if (!v116)
      goto LABEL_37;
  }
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (v29)
  {
LABEL_37:
    if (*(_QWORD *)(v1 + 192))
      goto LABEL_38;
LABEL_153:
    v97 = *(NSObject **)(v1 + 88);
    if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__dst = 0;
      _os_log_error_impl(&dword_1BF335000, v97, OS_LOG_TYPE_ERROR, "Failed to create CPMS Command Driver", __dst, 2u);
    }
    goto LABEL_155;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  if (!*(_QWORD *)(v1 + 192))
    goto LABEL_153;
LABEL_38:
  v30 = (const void *)*MEMORY[0x1E0CFB188];
  v31 = strlen((const char *)*MEMORY[0x1E0CFB188]);
  if (v31 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v32 = v31;
  if (v31 >= 0x17)
  {
    v34 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17)
      v34 = v31 | 7;
    v35 = v34 + 1;
    v33 = operator new(v34 + 1);
    *(_QWORD *)&__dst[8] = v32;
    *(_QWORD *)&__dst[16] = v35 | 0x8000000000000000;
    *(_QWORD *)__dst = v33;
  }
  else
  {
    __dst[23] = v31;
    v33 = __dst;
    if (!v31)
      goto LABEL_46;
  }
  memmove(v33, v30, v32);
LABEL_46:
  v33[v32] = 0;
  v36 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_3;
  aBlock[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  aBlock[4] = v1;
  aBlock[5] = v3;
  v114 = v5;
  do
    v37 = __ldxr(p_shared_weak_owners);
  while (__stxr(v37 + 1, p_shared_weak_owners));
  v38 = _Block_copy(aBlock);
  v115[0] = v38;
  Service::registerCommandHandler(v1, (uint64_t)__dst, v115);
  if (v38)
    _Block_release(v38);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  v39 = (const void *)*MEMORY[0x1E0CFBD60];
  v40 = strlen((const char *)*MEMORY[0x1E0CFBD60]);
  if (v40 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v41 = v40;
  if (v40 >= 0x17)
  {
    v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v43 = v40 | 7;
    v44 = v43 + 1;
    v42 = operator new(v43 + 1);
    *(_QWORD *)&__dst[8] = v41;
    *(_QWORD *)&__dst[16] = v44 | 0x8000000000000000;
    *(_QWORD *)__dst = v42;
  }
  else
  {
    __dst[23] = v40;
    v42 = __dst;
    if (!v40)
      goto LABEL_60;
  }
  memmove(v42, v39, v41);
LABEL_60:
  v42[v41] = 0;
  v110[0] = v36;
  v110[1] = 3321888768;
  v110[2] = ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_5;
  v110[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v110[4] = v1;
  v110[5] = v3;
  v111 = v5;
  do
    v45 = __ldxr(p_shared_weak_owners);
  while (__stxr(v45 + 1, p_shared_weak_owners));
  v46 = _Block_copy(v110);
  v112 = v46;
  Service::registerCommandHandler(v1, (uint64_t)__dst, &v112);
  if (v46)
    _Block_release(v46);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  v47 = (const void *)*MEMORY[0x1E0CFB568];
  v48 = strlen((const char *)*MEMORY[0x1E0CFB568]);
  if (v48 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v49 = v48;
  if (v48 >= 0x17)
  {
    v51 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v48 | 7) != 0x17)
      v51 = v48 | 7;
    v52 = v51 + 1;
    v50 = operator new(v51 + 1);
    *(_QWORD *)&__dst[8] = v49;
    *(_QWORD *)&__dst[16] = v52 | 0x8000000000000000;
    *(_QWORD *)__dst = v50;
  }
  else
  {
    __dst[23] = v48;
    v50 = __dst;
    if (!v48)
      goto LABEL_74;
  }
  memmove(v50, v47, v49);
LABEL_74:
  v50[v49] = 0;
  v107[0] = v36;
  v107[1] = 3321888768;
  v107[2] = ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  v107[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v107[4] = v1;
  v107[5] = v3;
  v108 = v5;
  do
    v53 = __ldxr(p_shared_weak_owners);
  while (__stxr(v53 + 1, p_shared_weak_owners));
  v54 = _Block_copy(v107);
  v109 = v54;
  Service::registerCommandHandler(v1, (uint64_t)__dst, &v109);
  if (v54)
    _Block_release(v54);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  v55 = (const void *)*MEMORY[0x1E0CFB110];
  v56 = strlen((const char *)*MEMORY[0x1E0CFB110]);
  if (v56 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v57 = v56;
  if (v56 >= 0x17)
  {
    v59 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v56 | 7) != 0x17)
      v59 = v56 | 7;
    v60 = v59 + 1;
    v58 = operator new(v59 + 1);
    *(_QWORD *)&__dst[8] = v57;
    *(_QWORD *)&__dst[16] = v60 | 0x8000000000000000;
    *(_QWORD *)__dst = v58;
  }
  else
  {
    __dst[23] = v56;
    v58 = __dst;
    if (!v56)
      goto LABEL_88;
  }
  memmove(v58, v55, v57);
LABEL_88:
  v58[v57] = 0;
  v104[0] = v36;
  v104[1] = 3321888768;
  v104[2] = ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_3;
  v104[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v104[4] = v1;
  v104[5] = v3;
  v105 = v5;
  do
    v61 = __ldxr(p_shared_weak_owners);
  while (__stxr(v61 + 1, p_shared_weak_owners));
  v62 = _Block_copy(v104);
  v106 = v62;
  Service::registerCommandHandler(v1, (uint64_t)__dst, &v106);
  if (v62)
    _Block_release(v62);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  v63 = (const void *)*MEMORY[0x1E0CFB0B8];
  v64 = strlen((const char *)*MEMORY[0x1E0CFB0B8]);
  if (v64 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v65 = v64;
  if (v64 >= 0x17)
  {
    v67 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v64 | 7) != 0x17)
      v67 = v64 | 7;
    v68 = v67 + 1;
    v66 = operator new(v67 + 1);
    *(_QWORD *)&__dst[8] = v65;
    *(_QWORD *)&__dst[16] = v68 | 0x8000000000000000;
    *(_QWORD *)__dst = v66;
  }
  else
  {
    __dst[23] = v64;
    v66 = __dst;
    if (!v64)
      goto LABEL_102;
  }
  memmove(v66, v63, v65);
LABEL_102:
  v66[v65] = 0;
  v101[0] = v36;
  v101[1] = 3321888768;
  v101[2] = ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_4;
  v101[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v101[4] = v1;
  v101[5] = v3;
  v102 = v5;
  do
    v69 = __ldxr(p_shared_weak_owners);
  while (__stxr(v69 + 1, p_shared_weak_owners));
  v70 = _Block_copy(v101);
  v103 = v70;
  Service::registerCommandHandler(v1, (uint64_t)__dst, &v103);
  if (v70)
    _Block_release(v70);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  *(_QWORD *)__dst = v36;
  *(_QWORD *)&__dst[8] = 0x40000000;
  *(_QWORD *)&__dst[16] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v119 = (const char *)&__block_descriptor_tmp_13_2;
  v120 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v72 = *(_QWORD *)algn_1ED710088;
    v99 = GetABMLogServer(void)::sLogServer;
    v100 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_113;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, __dst);
    v72 = *(_QWORD *)algn_1ED710088;
    v99 = GetABMLogServer(void)::sLogServer;
    v100 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_113;
  }
  v73 = (unint64_t *)(v72 + 8);
  do
    v74 = __ldxr(v73);
  while (__stxr(v74 + 1, v73));
LABEL_113:
  ctu::DispatchTimerService::create();
  v75 = v117;
  v117 = 0uLL;
  v76 = *(std::__shared_weak_count **)(v1 + 216);
  *(_OWORD *)(v1 + 208) = v75;
  if (v76)
  {
    v77 = (unint64_t *)&v76->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
  if (*((_QWORD *)&v117 + 1))
  {
    v80 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  if (v100)
  {
    v82 = (unint64_t *)&v100->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v84 = objc_msgSend(MEMORY[0x1E0D09928], "sharedCPMSAgent", v99);
  *(_QWORD *)(v1 + 168) = v84;
  if (v84)
  {
    if ((CPMSModule::initPowerConfig_sync((id *)v1) & 1) == 0)
    {
      v96 = *(NSObject **)(v1 + 88);
      if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__dst = 0;
        _os_log_error_impl(&dword_1BF335000, v96, OS_LOG_TYPE_ERROR, "Failed to initialization of CPMS power config.", __dst, 2u);
        v95 = v102;
        if (!v102)
          goto LABEL_142;
        goto LABEL_141;
      }
LABEL_140:
      v95 = v102;
      if (!v102)
      {
LABEL_142:
        if (v105)
          std::__shared_weak_count::__release_weak(v105);
        if (v108)
          std::__shared_weak_count::__release_weak(v108);
        if (v111)
          std::__shared_weak_count::__release_weak(v111);
        if (v114)
          std::__shared_weak_count::__release_weak(v114);
LABEL_155:
        std::__shared_weak_count::__release_weak(v5);
        return;
      }
LABEL_141:
      std::__shared_weak_count::__release_weak(v95);
      goto LABEL_142;
    }
    v85 = *(std::__shared_weak_count **)(v1 + 128);
    if (v85)
    {
      v86 = *(_QWORD *)(v1 + 120);
      v87 = std::__shared_weak_count::lock(v85);
      if (v87)
      {
        v88 = v87;
        v89 = operator new(8uLL);
        *v89 = v1;
        v90 = *(NSObject **)(v1 + 136);
        v91 = (unint64_t *)&v88->__shared_owners_;
        do
          v92 = __ldxr(v91);
        while (__stxr(v92 + 1, v91));
        v93 = operator new(0x18uLL);
        *v93 = v89;
        v93[1] = v86;
        v93[2] = v88;
        dispatch_async_f(v90, v93, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZNS3_10initializeENS_13group_sessionEEUb_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        do
          v94 = __ldaxr(v91);
        while (__stlxr(v94 - 1, v91));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
          v95 = v102;
          if (!v102)
            goto LABEL_142;
          goto LABEL_141;
        }
        goto LABEL_140;
      }
    }
LABEL_170:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v98 = GetOsLogContext()[1];
  if (os_log_type_enabled(v98, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)__dst = 136315906;
    *(_QWORD *)&__dst[4] = "ABM ASSERT";
    *(_WORD *)&__dst[12] = 2080;
    *(_QWORD *)&__dst[14] = "fCPMSAgent";
    *(_WORD *)&__dst[22] = 2080;
    v119 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Serv"
           "er/CPMS/CPMSModule.mm";
    LOWORD(v120) = 1024;
    *(_DWORD *)((char *)&v120 + 2) = 232;
    _os_log_fault_impl(&dword_1BF335000, v98, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", __dst, 0x26u);
    __break(1u);
    goto LABEL_170;
  }
  __break(1u);
}

void sub_1BF3914B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,std::__shared_weak_count *a41)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_3(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  NSObject *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = (_QWORD *)a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (v11)
      {
        if (!v9)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v8);
        if (!v9)
          return;
      }
      v13 = a1[5];
      v12 = (std::__shared_weak_count *)a1[6];
      if (v12)
      {
        p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
        do
          v15 = __ldxr(p_shared_weak_owners);
        while (__stxr(v15 + 1, p_shared_weak_owners));
      }
      if (*a3)
      {
        v16 = _Block_copy(*a3);
        v17 = (std::__shared_weak_count *)v6[16];
        if (!v17)
LABEL_29:
          std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      else
      {
        v16 = 0;
        v17 = (std::__shared_weak_count *)v6[16];
        if (!v17)
          goto LABEL_29;
      }
      v18 = v6[15];
      v19 = std::__shared_weak_count::lock(v17);
      if (!v19)
        goto LABEL_29;
      v20 = v19;
      v21 = operator new(0x20uLL);
      v22 = v21;
      *v21 = v13;
      v21[1] = v12;
      if (v12)
      {
        v23 = (unint64_t *)&v12->__shared_weak_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v21[2] = v6;
      v21[3] = v16;
      v25 = (unint64_t *)&v20->__shared_owners_;
      v26 = v6[17];
      do
        v27 = __ldxr(v25);
      while (__stxr(v27 + 1, v25));
      v28 = operator new(0x18uLL);
      *v28 = v22;
      v28[1] = v18;
      v28[2] = v20;
      dispatch_async_f(v26, v28, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      do
        v29 = __ldaxr(v25);
      while (__stlxr(v29 - 1, v25));
      if (v29)
      {
        if (v12)
LABEL_26:
          std::__shared_weak_count::__release_weak(v12);
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
        if (v12)
          goto LABEL_26;
      }
    }
  }
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_5(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t value;
  int v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  NSObject *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  xpc_object_t object;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (v12)
      {
        if (!v10)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
        if (!v10)
          return;
      }
      value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB000]);
      object = value;
      if (value)
        xpc_retain(value);
      else
        object = xpc_null_create();
      v14 = xpc::dyn_cast_or_default((xpc *)&object, 0);
      xpc_release(object);
      v16 = a1[5];
      v15 = (std::__shared_weak_count *)a1[6];
      if (v15)
      {
        p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
        do
          v18 = __ldxr(p_shared_weak_owners);
        while (__stxr(v18 + 1, p_shared_weak_owners));
      }
      if (*a3)
      {
        v19 = _Block_copy(*a3);
        v20 = (std::__shared_weak_count *)v7[16];
        if (!v20)
LABEL_32:
          std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      else
      {
        v19 = 0;
        v20 = (std::__shared_weak_count *)v7[16];
        if (!v20)
          goto LABEL_32;
      }
      v21 = v7[15];
      v22 = std::__shared_weak_count::lock(v20);
      if (!v22)
        goto LABEL_32;
      v23 = v22;
      v24 = operator new(0x28uLL);
      v25 = v24;
      *v24 = v16;
      v24[1] = v15;
      if (v15)
      {
        v26 = (unint64_t *)&v15->__shared_weak_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v24[2] = v7;
      *((_DWORD *)v24 + 6) = v14;
      v24[4] = v19;
      v28 = v7[17];
      v29 = (unint64_t *)&v23->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      v31 = operator new(0x18uLL);
      *v31 = v25;
      v31[1] = v21;
      v31[2] = v23;
      dispatch_async_f(v28, v31, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      do
        v32 = __ldaxr(v29);
      while (__stlxr(v32 - 1, v29));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
      if (v15)
        std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1BF391A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_2(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  NSObject *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = (_QWORD *)a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (v11)
      {
        if (!v9)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v8);
        if (!v9)
          return;
      }
      v13 = a1[5];
      v12 = (std::__shared_weak_count *)a1[6];
      if (v12)
      {
        p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
        do
          v15 = __ldxr(p_shared_weak_owners);
        while (__stxr(v15 + 1, p_shared_weak_owners));
      }
      if (*a3)
      {
        v16 = _Block_copy(*a3);
        v17 = (std::__shared_weak_count *)v6[16];
        if (!v17)
LABEL_29:
          std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      else
      {
        v16 = 0;
        v17 = (std::__shared_weak_count *)v6[16];
        if (!v17)
          goto LABEL_29;
      }
      v18 = v6[15];
      v19 = std::__shared_weak_count::lock(v17);
      if (!v19)
        goto LABEL_29;
      v20 = v19;
      v21 = operator new(0x20uLL);
      v22 = v21;
      *v21 = v13;
      v21[1] = v12;
      if (v12)
      {
        v23 = (unint64_t *)&v12->__shared_weak_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v21[2] = v6;
      v21[3] = v16;
      v25 = (unint64_t *)&v20->__shared_owners_;
      v26 = v6[17];
      do
        v27 = __ldxr(v25);
      while (__stxr(v27 + 1, v25));
      v28 = operator new(0x18uLL);
      *v28 = v22;
      v28[1] = v18;
      v28[2] = v20;
      dispatch_async_f(v26, v28, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      do
        v29 = __ldaxr(v25);
      while (__stlxr(v29 - 1, v25));
      if (v29)
      {
        if (v12)
LABEL_26:
          std::__shared_weak_count::__release_weak(v12);
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
        if (v12)
          goto LABEL_26;
      }
    }
  }
}

void ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_3(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  xpc_object_t v17;
  const void *v18;
  void *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  xpc_object_t v28;
  NSObject *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;

  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v14 = a1[5];
  v13 = (std::__shared_weak_count *)a1[6];
  if (v13)
  {
    p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
  }
  v17 = *a2;
  if (v17)
  {
    xpc_retain(v17);
    v18 = *a3;
    if (*a3)
      goto LABEL_14;
  }
  else
  {
    v17 = xpc_null_create();
    v18 = *a3;
    if (*a3)
    {
LABEL_14:
      v19 = _Block_copy(v18);
      v20 = (std::__shared_weak_count *)v7[16];
      if (!v20)
LABEL_31:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_18;
    }
  }
  v19 = 0;
  v20 = (std::__shared_weak_count *)v7[16];
  if (!v20)
    goto LABEL_31;
LABEL_18:
  v21 = v7[15];
  v22 = std::__shared_weak_count::lock(v20);
  if (!v22)
    goto LABEL_31;
  v23 = v22;
  v24 = operator new(0x28uLL);
  v25 = v24;
  *v24 = v14;
  v24[1] = v13;
  if (v13)
  {
    v26 = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v24[2] = v7;
  v24[3] = v17;
  v28 = xpc_null_create();
  v25[4] = v19;
  v29 = v7[17];
  v30 = (unint64_t *)&v23->__shared_owners_;
  do
    v31 = __ldxr(v30);
  while (__stxr(v31 + 1, v30));
  v32 = operator new(0x18uLL);
  *v32 = v25;
  v32[1] = v21;
  v32[2] = v23;
  dispatch_async_f(v29, v32, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
  do
    v33 = __ldaxr(v30);
  while (__stlxr(v33 - 1, v30));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  xpc_release(v28);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
}

void ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_4(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const void *v12;
  NSObject *v13;
  void *aBlock;
  NSObject *v15;
  uint8_t buf[16];

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (v11)
      {
        if (!v9)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v8);
        if (!v9)
          return;
      }
      v12 = *a3;
      if (*a3)
      {
        v15 = 0;
        aBlock = _Block_copy(v12);
        CPMSModule::getCurrentPower(v6, &v15, (uint64_t *)&aBlock);
        if (aBlock)
          _Block_release(aBlock);
      }
      else
      {
        v13 = *(NSObject **)(v6 + 88);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1BF335000, v13, OS_LOG_TYPE_ERROR, "Expected response handler", buf, 2u);
        }
      }
    }
  }
}

void sub_1BF391F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock)
{
  if (aBlock)
    _Block_release(aBlock);
  _Unwind_Resume(exception_object);
}

void CPMSModule::getCurrentPower(uint64_t a1, NSObject **a2, uint64_t *a3)
{
  uint64_t v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  unint64_t v20;
  void *v21;
  void *v22;
  NSObject *v23;
  NSObject *v24;
  ctu *NSDict;
  const void *v26;
  xpc_object_t v27;
  uint64_t v28;
  int v29;
  _QWORD v30[7];
  _QWORD aBlock[5];
  dispatch_group_t group;
  uint64_t v33;
  std::__shared_weak_count *v34;
  void *v35;
  void *v36;
  dispatch_object_t object;
  _QWORD v38[7];
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  char v46;
  _QWORD *v47;
  void *block;
  uint64_t v49;
  _QWORD *(*v50)(uint64_t);
  void *v51;
  uint64_t v52;
  xpc_object_t *v53;

  v43 = 0;
  v44 = &v43;
  v45 = 0x2020000000;
  v46 = 0;
  v39 = 0;
  v40 = &v39;
  v41 = 0x2020000000;
  v42 = 0;
  v6 = a1 + 120;
  v7 = (void *)MEMORY[0x1E0C809B0];
  v38[0] = MEMORY[0x1E0C809B0];
  v38[1] = 3221225472;
  v38[2] = ___ZN10CPMSModule15getCurrentPowerEN8dispatch13group_sessionENS0_5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke;
  v38[3] = &unk_1E78FF1F0;
  v38[5] = &v39;
  v38[6] = a1;
  v38[4] = &v43;
  v47 = v38;
  block = (void *)MEMORY[0x1E0C809B0];
  v49 = 3221225472;
  v50 = ___ZNK3ctu20SharedSynchronizableI10CPMSModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v51 = &__block_descriptor_48_e5_v8__0l;
  v52 = a1 + 120;
  v53 = (xpc_object_t *)&v47;
  v9 = a1 + 136;
  v8 = *(NSObject **)(a1 + 136);
  if (*(_QWORD *)(v9 + 8))
  {
    dispatch_async_and_wait(v8, &block);
    if (!*((_BYTE *)v44 + 24))
      goto LABEL_34;
  }
  else
  {
    dispatch_sync(v8, &block);
    if (!*((_BYTE *)v44 + 24))
      goto LABEL_34;
  }
  if (*((_BYTE *)v40 + 24))
  {
    v10 = *(std::__shared_weak_count **)(a1 + 128);
    if (!v10 || (v11 = *(_QWORD *)(a1 + 120), (v12 = std::__shared_weak_count::lock(v10)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v13 = v12;
    p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v13);
    }
    v18 = *(_QWORD *)(a1 + 192);
    aBlock[0] = v7;
    aBlock[1] = 3321888768;
    aBlock[2] = ___ZN10CPMSModule15getCurrentPowerEN8dispatch13group_sessionENS0_5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke_2;
    aBlock[3] = &__block_descriptor_72_e8_40c30_ZTSN8dispatch13group_sessionE48c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE64c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_e1095_v32__0_BudgetData__map_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int___std::less_abm::BasebandCPMSPowerBudgetScale___std::allocator_std::pair_const_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int________tree_std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int____std::__map_value_compare_abm::BasebandCPMSPowerBudgetScale__std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int____std::less_abm::BasebandCPMSPowerBudgetScale____std::allocator_std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int______v___compressed_pair_std::__tree_end_node_std::__tree_node_base_void________std::allocator_std::__tree_node_std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int____void_________tree_end_node_std::__tree_node_base_void________v_____compressed_pair_unsigned_long__std::__map_value_compare_abm::BasebandCPMSPowerBudgetScale__std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int____std::less_abm::BasebandCPMSPowerBudgetScale____Q____8l;
    v19 = *a2;
    aBlock[4] = a1;
    group = v19;
    if (v19)
    {
      dispatch_retain(v19);
      dispatch_group_enter(v19);
    }
    v33 = v11;
    v34 = v13;
    do
      v20 = __ldxr(p_shared_weak_owners);
    while (__stxr(v20 + 1, p_shared_weak_owners));
    v21 = (void *)*a3;
    if (*a3)
      v21 = _Block_copy(v21);
    v35 = v21;
    v22 = _Block_copy(aBlock);
    v23 = *(NSObject **)(a1 + 136);
    if (v23)
      dispatch_retain(v23);
    v36 = v22;
    object = v23;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v18 + 40))(v18, &v36);
    if (object)
      dispatch_release(object);
    if (v36)
      _Block_release(v36);
    if (v35)
      _Block_release(v35);
    if (v34)
      std::__shared_weak_count::__release_weak(v34);
    if (group)
    {
      dispatch_group_leave(group);
      if (group)
        dispatch_release(group);
    }
    std::__shared_weak_count::__release_weak(v13);
    goto LABEL_46;
  }
LABEL_34:
  v30[0] = v7;
  v30[1] = 3221225472;
  v30[2] = ___ZN10CPMSModule15getCurrentPowerEN8dispatch13group_sessionENS0_5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke_63;
  v30[3] = &unk_1E78FF1F0;
  v30[4] = &v43;
  v30[5] = &v39;
  v30[6] = a1;
  v47 = v30;
  block = v7;
  v49 = 3221225472;
  v50 = ___ZNK3ctu20SharedSynchronizableI10CPMSModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v51 = &__block_descriptor_48_e5_v8__0l;
  v52 = v6;
  v53 = (xpc_object_t *)&v47;
  v24 = *(NSObject **)(a1 + 136);
  if (*(_QWORD *)(a1 + 144))
  {
    dispatch_async_and_wait(v24, &block);
    if (!*a3)
      goto LABEL_46;
  }
  else
  {
    dispatch_sync(v24, &block);
    if (!*a3)
      goto LABEL_46;
  }
  NSDict = (ctu *)PowerBudget::getNSDict((id *)(a1 + 400));
  ctu::cf_to_xpc(NSDict, v26);
  v27 = v47;
  block = v47;
  v28 = MEMORY[0x1E0C812F8];
  if (v47 && MEMORY[0x1C3B8A86C](v47) == v28)
  {
    xpc_retain(v27);
  }
  else
  {
    v27 = xpc_null_create();
    block = v27;
  }
  xpc_release(v47);
  if (MEMORY[0x1C3B8A86C](v27) == v28)
    v29 = 0;
  else
    v29 = -534716416;
  LODWORD(v47) = v29;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, (unsigned int *)&v47, &block);
  xpc_release(block);
LABEL_46:
  _Block_object_dispose(&v39, 8);
  _Block_object_dispose(&v43, 8);
}

void sub_1BF392308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,dispatch_group_t group,uint64_t a22,std::__shared_weak_count *a23,void *aBlock,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__shared_weak_count *v34;
  uint64_t v35;

  dispatch::callback<void({block_pointer})(BudgetData)>::~callback((uint64_t)&a25);
  if (aBlock)
    _Block_release(aBlock);
  if (a23)
    std::__shared_weak_count::__release_weak(a23);
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  std::__shared_weak_count::__release_weak(v34);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose((const void *)(v35 - 184), 8);
  _Unwind_Resume(a1);
}

uint64_t CPMSModule::initPowerConfig_sync(id *this)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t i;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BOOL8 v15;
  int v16;
  const char *v17;
  std::__shared_weak_count *v18;
  id v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  NSError *v32;
  char v33;
  NSObject *v34;
  _BYTE *v36;
  unsigned int v37;
  void *v38;
  void *v39;
  void *v40;
  NSError *v41;
  _QWORD v42[6];
  std::__shared_weak_count *v43;
  _QWORD v44[6];
  std::__shared_weak_count *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  std::string v50;
  CFTypeRef cf;
  std::string __p;
  _BYTE buf[12];
  char v54;
  uint8_t v55[4];
  _BYTE *v56;
  _BYTE v57[128];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  memset(&__p, 170, sizeof(__p));
  CPMSModule::getCPMSBudgetPlistPath((CPMSModule *)this, (void **)&__p.__r_.__value_.__l.__data_);
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v50, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v50 = __p;
  util::readPlistToCFDictionary((uint64_t)&v50, &cf);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  v2 = (void *)cf;
  v3 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v48 = 0u;
  v49 = 0u;
  v47 = 0u;
  v46 = 0u;
  v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v46, v57, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v47;
    v38 = (void *)*MEMORY[0x1E0D09988];
    v39 = (void *)*MEMORY[0x1E0D09970];
    v40 = (void *)*MEMORY[0x1E0D09958];
    v37 = 5000;
    v6 = (void *)*MEMORY[0x1E0D09960];
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v47 != v5)
          objc_enumerationMutation(v2);
        v8 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * i);
        if (objc_msgSend(v8, "isEqualToString:", CFSTR("CPMSPowerTimeScale1s")))
        {
          CPMSModule::initPowerConfig_sync(void)::$_1::operator()((uint64_t)this, v6, (void *)objc_msgSend(v2, "valueForKey:", v8), v3);
        }
        else if (objc_msgSend(v8, "isEqualToString:", CFSTR("CPMSPowerTimeScale100ms")))
        {
          CPMSModule::initPowerConfig_sync(void)::$_1::operator()((uint64_t)this, v40, (void *)objc_msgSend(v2, "valueForKey:", v8), v3);
        }
        else if (objc_msgSend(v8, "isEqualToString:", CFSTR("CPMSPowerTimeScaleInstantaneous")))
        {
          CPMSModule::initPowerConfig_sync(void)::$_1::operator()((uint64_t)this, v39, (void *)objc_msgSend(v2, "valueForKey:", v8), v3);
        }
        else if (objc_msgSend(v8, "isEqualToString:", CFSTR("CPMSPowerTimeScaleThermal")))
        {
          CPMSModule::initPowerConfig_sync(void)::$_1::operator()((uint64_t)this, v38, (void *)objc_msgSend(v2, "valueForKey:", v8), v3);
        }
        else if (objc_msgSend(v8, "isEqualToString:", CFSTR("CPMSPowerBudgetPeriodms")))
        {
          v37 = objc_msgSend((id)objc_msgSend(v2, "valueForKey:", v8), "intValue");
        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v46, v57, 16);
    }
    while (v4);
  }
  else
  {
    v37 = 5000;
  }
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)(this + 30), this[46], this + 47);

  this[33] = (id)objc_msgSend(this[49], "copy");
  v9 = this[11];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = objc_msgSend((id)objc_msgSend(v3, "description"), "UTF8String");
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v10;
    _os_log_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEFAULT, "#I Power budget config to be registered with CPMS %s", buf, 0xCu);
    v9 = this[11];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    PowerBudget::to_string((PowerBudget *)(this + 34), buf);
    if (v54 >= 0)
      v11 = buf;
    else
      v11 = *(_BYTE **)buf;
    *(_DWORD *)v55 = 136315138;
    v56 = v11;
    _os_log_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEFAULT, "#I Min default budget %s", v55, 0xCu);
    if (v54 < 0)
      operator delete(*(void **)buf);
    v9 = this[11];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    PowerBudget::to_string((PowerBudget *)(this + 38), buf);
    if (v54 >= 0)
      v12 = buf;
    else
      v12 = *(_BYTE **)buf;
    *(_DWORD *)v55 = 136315138;
    v56 = v12;
    _os_log_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEFAULT, "#I Max default budget %s", v55, 0xCu);
    if (v54 < 0)
      operator delete(*(void **)buf);
    v9 = this[11];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    PowerBudget::to_string((PowerBudget *)(this + 42), buf);
    if (v54 >= 0)
      v13 = buf;
    else
      v13 = *(_BYTE **)buf;
    *(_DWORD *)v55 = 136315138;
    v56 = v13;
    _os_log_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEFAULT, "#I Idle default budget %s", v55, 0xCu);
    if (v54 < 0)
      operator delete(*(void **)buf);
    v9 = this[11];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    PowerBudget::to_string((PowerBudget *)(this + 46), buf);
    if (v54 >= 0)
      v14 = buf;
    else
      v14 = *(_BYTE **)buf;
    *(_DWORD *)v55 = 136315138;
    v56 = v14;
    _os_log_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEFAULT, "#I Low default budget %s", v55, 0xCu);
    if (v54 < 0)
      operator delete(*(void **)buf);
    v9 = this[11];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v37;
    _os_log_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEFAULT, "#I Power budget update period (ms) %u", buf, 8u);
    v9 = this[11];
  }
  v15 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v15)
  {
    v16 = capabilities::abs::supportsCPMSConnectedState((capabilities::abs *)v15);
    v17 = " not";
    if (v16)
      v17 = "";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v17;
    _os_log_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEFAULT, "#I Connected state evaluation is%s supported", buf, 0xCu);
  }
  v18 = (std::__shared_weak_count *)this[16];
  if (!v18 || (v19 = this[15], (v20 = std::__shared_weak_count::lock(v18)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v21 = v20;
  p_shared_weak_owners = (unint64_t *)&v20->__shared_weak_owners_;
  do
    v23 = __ldxr(p_shared_weak_owners);
  while (__stxr(v23 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v21);
  }
  v26 = MEMORY[0x1E0C809B0];
  v44[0] = MEMORY[0x1E0C809B0];
  v44[1] = 3321888768;
  v44[2] = ___ZN10CPMSModule20initPowerConfig_syncEv_block_invoke;
  v44[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e22_v16__0__NSDictionary_8l;
  v44[4] = this;
  v44[5] = v19;
  v45 = v21;
  do
    v27 = __ldxr(p_shared_weak_owners);
  while (__stxr(v27 + 1, p_shared_weak_owners));
  this[22] = v44;
  v42[0] = v26;
  v42[1] = 3321888768;
  v42[2] = ___ZN10CPMSModule20initPowerConfig_syncEv_block_invoke_41;
  v42[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e19___NSDictionary_8__0l;
  v42[4] = this;
  v42[5] = v19;
  v43 = v21;
  do
    v28 = __ldxr(p_shared_weak_owners);
  while (__stxr(v28 + 1, p_shared_weak_owners));
  this[23] = v42;
  v41 = 0;
  v29 = objc_alloc_init(MEMORY[0x1E0D09938]);
  objc_msgSend(v29, "setClientId:", 4);
  objc_msgSend(v29, "setPowerLevels:", v3);
  objc_msgSend(v29, "setIsContinuous:", 1);
  objc_msgSend(v29, "setNotificationCallback:", this[22]);
  objc_msgSend(v29, "setGetCurrentPower:", this[23]);
  objc_msgSend(v29, "setPowerBudgetUpdateMinimumPeriod:", v37);
  v30 = objc_msgSend(this[21], "registerClientWithDescription:error:", v29, &v41);
  v31 = v30;
  v32 = v41;
  if (v41)
    v33 = 0;
  else
    v33 = v30;
  if ((v33 & 1) == 0)
  {
    v34 = this[11];
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      CPMSModule::getErrorMsg(v32, (uint64_t)buf);
      v36 = v54 >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)v55 = 136315138;
      v56 = v36;
      _os_log_error_impl(&dword_1BF335000, v34, OS_LOG_TYPE_ERROR, "Failed to register CPMS: %s", v55, 0xCu);
      if (v54 < 0)
        operator delete(*(void **)buf);
    }
  }

  if (v43)
    std::__shared_weak_count::__release_weak(v43);
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  std::__shared_weak_count::__release_weak(v21);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v31;
}

void sub_1BF392BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,char a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a50 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CPMSModule::finishInitialization_sync(CPMSModule *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const char *v10;
  size_t v11;
  void *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  const void *v23;
  const void *v24;
  size_t v25;
  void *v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  NSObject *v32;
  const void *v33;
  size_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  NSObject *v41;
  const void *v42;
  size_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  NSObject *v50;
  config::hw *v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  NSObject *v55;
  _QWORD v56[6];
  std::__shared_weak_count *v57;
  void *v58;
  dispatch_object_t v59;
  _QWORD v60[6];
  std::__shared_weak_count *v61;
  void *v62;
  dispatch_object_t v63;
  void *v64[2];
  unint64_t v65;
  _QWORD v66[6];
  std::__shared_weak_count *v67;
  void *v68;
  dispatch_object_t object;
  void *__p[2];
  unint64_t v71;
  _QWORD aBlock[6];
  std::__shared_weak_count *v73;
  const void *v74;
  dispatch_object_t v75;
  void *v76[2];
  unint64_t v77;
  const void *v78;
  void *__dst[2];
  unint64_t v80;
  __int128 v81;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v2 || (v3 = *((_QWORD *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (const char *)(*(uint64_t (**)(CPMSModule *))(*(_QWORD *)this + 16))(this);
  v11 = strlen(v10);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = (void *)v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = (void **)operator new(v14 + 1);
    __dst[1] = v12;
    v80 = v15 | 0x8000000000000000;
    __dst[0] = v13;
  }
  else
  {
    HIBYTE(v80) = v11;
    v13 = __dst;
    if (!v11)
      goto LABEL_17;
  }
  memmove(v13, v10, (size_t)v12);
LABEL_17:
  *((_BYTE *)v12 + (_QWORD)v13) = 0;
  v78 = 0;
  AppleBasebandManager::create();
  v16 = v81;
  v81 = 0uLL;
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  *(_OWORD *)((char *)this + 152) = v16;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
  if (!*((_QWORD *)&v81 + 1))
    goto LABEL_26;
  v21 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
  {
LABEL_26:
    v23 = v78;
    if (!v78)
      goto LABEL_28;
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  v23 = v78;
  if (v78)
LABEL_27:
    CFRelease(v23);
LABEL_28:
  if (SHIBYTE(v80) < 0)
    operator delete(__dst[0]);
  v24 = (const void *)*MEMORY[0x1E0CFBD68];
  v25 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  if (v25 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v26 = (void *)v25;
  if (v25 >= 0x17)
  {
    v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v28 = v25 | 7;
    v29 = v28 + 1;
    v27 = (void **)operator new(v28 + 1);
    v76[1] = v26;
    v77 = v29 | 0x8000000000000000;
    v76[0] = v27;
  }
  else
  {
    HIBYTE(v77) = v25;
    v27 = v76;
    if (!v25)
      goto LABEL_38;
  }
  memmove(v27, v24, (size_t)v26);
LABEL_38:
  *((_BYTE *)v26 + (_QWORD)v27) = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10CPMSModule25finishInitialization_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e70_v24__0_shared_ptr_abm::client::Event____Event_____shared_weak_count__8l;
  aBlock[4] = this;
  aBlock[5] = v3;
  v73 = v5;
  do
    v30 = __ldxr(p_shared_weak_owners);
  while (__stxr(v30 + 1, p_shared_weak_owners));
  v31 = _Block_copy(aBlock);
  v32 = *((_QWORD *)this + 17);
  if (v32)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v74 = v31;
  v75 = v32;
  AppleBasebandManager::setEventHandler();
  if (v75)
    dispatch_release(v75);
  if (v74)
    _Block_release(v74);
  if (SHIBYTE(v77) < 0)
    operator delete(v76[0]);
  v33 = (const void *)*MEMORY[0x1E0CFBF60];
  v34 = strlen((const char *)*MEMORY[0x1E0CFBF60]);
  if (v34 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v35 = (void *)v34;
  if (v34 >= 0x17)
  {
    v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v34 | 7) != 0x17)
      v37 = v34 | 7;
    v38 = v37 + 1;
    v36 = operator new(v37 + 1);
    __p[1] = v35;
    v71 = v38 | 0x8000000000000000;
    __p[0] = v36;
  }
  else
  {
    HIBYTE(v71) = v34;
    v36 = __p;
    if (!v34)
      goto LABEL_56;
  }
  memmove(v36, v33, (size_t)v35);
LABEL_56:
  *((_BYTE *)v35 + (_QWORD)v36) = 0;
  v66[0] = MEMORY[0x1E0C809B0];
  v66[1] = 3321888768;
  v66[2] = ___ZN10CPMSModule25finishInitialization_syncEv_block_invoke_13;
  v66[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e70_v24__0_shared_ptr_abm::client::Event____Event_____shared_weak_count__8l;
  v66[4] = this;
  v66[5] = v3;
  v67 = v5;
  do
    v39 = __ldxr(p_shared_weak_owners);
  while (__stxr(v39 + 1, p_shared_weak_owners));
  v40 = _Block_copy(v66);
  v41 = *((_QWORD *)this + 17);
  if (v41)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v68 = v40;
  object = v41;
  AppleBasebandManager::setEventHandler();
  if (object)
    dispatch_release(object);
  if (v68)
    _Block_release(v68);
  if (SHIBYTE(v71) < 0)
    operator delete(__p[0]);
  v42 = (const void *)*MEMORY[0x1E0CFBC68];
  v43 = strlen((const char *)*MEMORY[0x1E0CFBC68]);
  if (v43 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v44 = (void *)v43;
  if (v43 >= 0x17)
  {
    v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v46 = v43 | 7;
    v47 = v46 + 1;
    v45 = operator new(v46 + 1);
    v64[1] = v44;
    v65 = v47 | 0x8000000000000000;
    v64[0] = v45;
  }
  else
  {
    HIBYTE(v65) = v43;
    v45 = v64;
    if (!v43)
      goto LABEL_74;
  }
  memmove(v45, v42, (size_t)v44);
LABEL_74:
  *((_BYTE *)v44 + (_QWORD)v45) = 0;
  v60[0] = MEMORY[0x1E0C809B0];
  v60[1] = 3321888768;
  v60[2] = ___ZN10CPMSModule25finishInitialization_syncEv_block_invoke_2;
  v60[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e70_v24__0_shared_ptr_abm::client::Event____Event_____shared_weak_count__8l;
  v60[4] = this;
  v60[5] = v3;
  v61 = v5;
  do
    v48 = __ldxr(p_shared_weak_owners);
  while (__stxr(v48 + 1, p_shared_weak_owners));
  v49 = _Block_copy(v60);
  v50 = *((_QWORD *)this + 17);
  if (v50)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v62 = v49;
  v63 = v50;
  AppleBasebandManager::setEventHandler();
  if (v63)
    dispatch_release(v63);
  if (v62)
    _Block_release(v62);
  if (SHIBYTE(v65) < 0)
    operator delete(v64[0]);
  v51 = (config::hw *)AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 19));
  if ((config::hw::watch(v51) & 1) == 0)
  {
    v52 = *((_QWORD *)this + 24);
    v56[0] = MEMORY[0x1E0C809B0];
    v56[1] = 3321888768;
    v56[2] = ___ZN10CPMSModule25finishInitialization_syncEv_block_invoke_16;
    v56[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e1095_v32__0_BudgetData__map_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int___std::less_abm::BasebandCPMSPowerBudgetScale___std::allocator_std::pair_const_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int________tree_std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int____std::__map_value_compare_abm::BasebandCPMSPowerBudgetScale__std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int____std::less_abm::BasebandCPMSPowerBudgetScale____std::allocator_std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int______v___compressed_pair_std::__tree_end_node_std::__tree_node_base_void________std::allocator_std::__tree_node_std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int____void_________tree_end_node_std::__tree_node_base_void________v_____compressed_pair_unsigned_long__std::__map_value_compare_abm::BasebandCPMSPowerBudgetScale__std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int____std::less_abm::BasebandCPMSPowerBudgetScale____Q____8l;
    v56[4] = this;
    v56[5] = v3;
    v57 = v5;
    do
      v53 = __ldxr(p_shared_weak_owners);
    while (__stxr(v53 + 1, p_shared_weak_owners));
    v54 = _Block_copy(v56);
    v55 = *((_QWORD *)this + 17);
    if (v55)
      dispatch_retain(v55);
    v58 = v54;
    v59 = v55;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v52 + 32))(v52, &v58);
    if (v59)
      dispatch_release(v59);
    if (v58)
      _Block_release(v58);
    if (v57)
      std::__shared_weak_count::__release_weak(v57);
  }
  if (v61)
    std::__shared_weak_count::__release_weak(v61);
  if (v67)
    std::__shared_weak_count::__release_weak(v67);
  if (v73)
    std::__shared_weak_count::__release_weak(v73);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF39329C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v51;

  dispatch::callback<void({block_pointer})(BudgetData)>::~callback((uint64_t)&a17);
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  if (a25)
    std::__shared_weak_count::__release_weak(a25);
  if (a40)
    std::__shared_weak_count::__release_weak(a40);
  v51 = *(std::__shared_weak_count **)(v49 - 208);
  if (v51)
  {
    std::__shared_weak_count::__release_weak(v51);
    std::__shared_weak_count::__release_weak(v48);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v48);
  _Unwind_Resume(a1);
}

void ___ZN10CPMSModule25finishInitialization_syncEv_block_invoke(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  const void *v11;
  int v12;
  const void *v13;
  size_t v14;
  void *v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  size_t v20;
  void **v21;
  config::hw *v22;
  capabilities::abs *v23;
  capabilities::abs *v24;
  uint64_t v25;
  void *v26;
  void *__dst[2];
  unint64_t v28;
  void *__p[3];
  _QWORD v30[2];
  unint64_t v31;
  uint64_t v32;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v31 = 0xAAAAAAAAAAAAAAAALL;
      abm::client::Event::getData(*a2);
      v11 = (const void *)0xAAAAAAAAAAAAAAAALL;
      if (!ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
        goto LABEL_38;
      v12 = *(unsigned __int8 *)(v5 + 232);
      v30[0] = 0xAAAAAAAAAAAAAAAALL;
      v30[1] = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v30, (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL);
      memset(__p, 170, sizeof(__p));
      v13 = (const void *)*MEMORY[0x1E0CFB988];
      v14 = strlen((const char *)*MEMORY[0x1E0CFB988]);
      if (v14 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v15 = (void *)v14;
      if (v14 >= 0x17)
      {
        v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v14 | 7) != 0x17)
          v17 = v14 | 7;
        v18 = v17 + 1;
        v16 = (void **)operator new(v17 + 1);
        __dst[1] = v15;
        v28 = v18 | 0x8000000000000000;
        __dst[0] = v16;
      }
      else
      {
        HIBYTE(v28) = v14;
        v16 = __dst;
        if (!v14)
          goto LABEL_18;
      }
      memmove(v16, v13, (size_t)v15);
LABEL_18:
      v19 = (const char *)*MEMORY[0x1E0CFB530];
      *((_BYTE *)v15 + (_QWORD)v16) = 0;
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v32, v19);
      ctu::cf::map_adapter::getString();
      MEMORY[0x1C3B8936C](&v32);
      if (SHIBYTE(v28) < 0)
        operator delete(__dst[0]);
      if (SHIBYTE(__p[2]) >= 0)
        v20 = HIBYTE(__p[2]);
      else
        v20 = (size_t)__p[1];
      if (v20 == strlen((const char *)*MEMORY[0x1E0CFB980]))
      {
        if (SHIBYTE(__p[2]) >= 0)
          v21 = __p;
        else
          v21 = (void **)__p[0];
        v22 = (config::hw *)memcmp(v21, (const void *)*MEMORY[0x1E0CFB980], v20);
        *(_BYTE *)(v5 + 232) = (_DWORD)v22 == 0;
        if (!(_DWORD)v22)
        {
          v23 = (capabilities::abs *)config::hw::watch(v22);
          if ((v23 & 1) == 0)
          {
            v24 = (capabilities::abs *)capabilities::abs::supportsSMCThermalReport(v23);
            if ((_DWORD)v24)
            {
              v25 = capabilities::abs::SMCThermalReportInterval(v24);
              v26 = 0;
              CPMSModule::configureThermalReportFrequency_sync((_QWORD *)v5, v25, &v26);
            }
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 + 192) + 48))(*(_QWORD *)(v5 + 192), 1, 5);
          }
        }
      }
      else
      {
        *(_BYTE *)(v5 + 232) = 0;
      }
      if (*(unsigned __int8 *)(v5 + 232) != v12)
        CPMSModule::evaluatePowerBudgetNeed_sync((CPMSModule *)v5);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      MEMORY[0x1C3B893A8](v30);
      v11 = (const void *)v31;
LABEL_38:
      if (v11)
        CFRelease(v11);
    }
  }
}

void sub_1BF39368C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  uint64_t v23;

  if (a22 < 0)
  {
    operator delete(__p);
    MEMORY[0x1C3B893A8](&a23);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v23 - 64));
    _Unwind_Resume(a1);
  }
  MEMORY[0x1C3B893A8](&a23);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v23 - 64));
  _Unwind_Resume(a1);
}

void CPMSModule::configureThermalReportFrequency_sync(_QWORD *a1, uint64_t a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  capabilities::abs *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  void *v25;
  void *v26;
  NSObject *v27;
  _QWORD v28[6];
  std::__shared_weak_count *v29;
  void *v30;
  int v31;
  void *v32;
  dispatch_object_t object;
  void *v34;
  _QWORD aBlock[6];
  std::__shared_weak_count *v36;
  char v37;
  uint8_t buf[4];
  const char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v7 = a1[15], (v8 = (capabilities::abs *)std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = (std::__shared_weak_count *)v8;
  v10 = (unint64_t *)((char *)v8 + 16);
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  v12 = (unint64_t *)((char *)v8 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    (*(void (**)(capabilities::abs *))(*(_QWORD *)v8 + 16))(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v14 = capabilities::abs::supportsSMCThermalReport(v8);
  v15 = a1[11];
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    v16 = "Thermal Monitor";
    if (v14)
      v16 = "SMC";
    *(_DWORD *)buf = 136315138;
    v39 = v16;
    _os_log_impl(&dword_1BF335000, v15, OS_LOG_TYPE_DEFAULT, "#I Thermal Report to %s", buf, 0xCu);
  }
  v17 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10CPMSModule36configureThermalReportFrequency_syncEjN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_57_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e226_v32__0_vector_abm::ThermalSensorData__std::allocator_abm::ThermalSensorData_____ThermalSensorData___ThermalSensorData____compressed_pair_abm::ThermalSensorData____std::allocator_abm::ThermalSensorData_____ThermalSensorData___8l;
  aBlock[4] = a1;
  aBlock[5] = v7;
  v36 = v9;
  do
    v18 = __ldxr(v10);
  while (__stxr(v18 + 1, v10));
  v37 = v14;
  v19 = _Block_copy(aBlock);
  v20 = v19;
  v21 = a1[24];
  if (v14)
    v22 = 2;
  else
    v22 = 1;
  if (v19)
    v23 = _Block_copy(v19);
  else
    v23 = 0;
  v34 = v23;
  v28[0] = v17;
  v28[1] = 3321888768;
  v28[2] = ___ZN10CPMSModule36configureThermalReportFrequency_syncEjN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke_60;
  v28[3] = &__block_descriptor_68_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_e44_v16__0_CFSharedRef___CFError______CFError__8l;
  v28[4] = a1;
  v28[5] = v7;
  v29 = v9;
  do
    v24 = __ldxr(v10);
  while (__stxr(v24 + 1, v10));
  v31 = a2;
  v25 = *a3;
  if (*a3)
    v25 = _Block_copy(v25);
  v30 = v25;
  v26 = _Block_copy(v28);
  v27 = a1[17];
  if (v27)
    dispatch_retain(v27);
  v32 = v26;
  object = v27;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void **, void **))(*(_QWORD *)v21 + 64))(v21, v22, a2, &v34, &v32);
  if (object)
    dispatch_release(object);
  if (v32)
    _Block_release(v32);
  if (v34)
    _Block_release(v34);
  if (v30)
    _Block_release(v30);
  if (v29)
    std::__shared_weak_count::__release_weak(v29);
  if (v20)
    _Block_release(v20);
  if (v36)
    std::__shared_weak_count::__release_weak(v36);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1BF3939C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void CPMSModule::evaluatePowerBudgetNeed_sync(CPMSModule *this)
{
  NSObject *v2;
  _BOOL8 v3;
  const char *v4;
  const char *v5;
  int v6;
  const char *v7;
  capabilities::abs *v8;
  uint64_t *v9;
  uint64_t **v10;
  int v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v19[2];
  uint64_t v20;
  _QWORD *v21;
  _QWORD v22[2];
  uint64_t v23;
  _QWORD *v24;
  _QWORD v25[2];
  uint64_t v26;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 11);
  v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    v4 = "true";
    if (*((_BYTE *)this + 235))
      v5 = "true";
    else
      v5 = "false";
    v6 = *((unsigned __int8 *)this + 232);
    if (*((_BYTE *)this + 233))
      v7 = "true";
    else
      v7 = "false";
    *(_DWORD *)buf = 136315650;
    v28 = v5;
    if (!v6)
      v4 = "false";
    v29 = 2080;
    v30 = v7;
    v31 = 2080;
    v32 = v4;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Evaluating power budget need; IsConnected(debounce)=%s, IsOnline=%s IsReady=%s",
      buf,
      0x20u);
  }
  v8 = (capabilities::abs *)capabilities::abs::supportsCPMSConnectedState((capabilities::abs *)v3);
  if ((_DWORD)v8 && *((_BYTE *)this + 235) && *((_BYTE *)this + 232) && *((_BYTE *)this + 233))
  {
    v9 = v25;
    v25[0] = 0;
    v25[1] = 0;
    v24 = v25;
    v26 = 0;
    if ((_QWORD **)((char *)this + 304) != &v24)
      std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v24, *((_QWORD **)this + 38), (_QWORD *)this + 39);
    v26 = objc_msgSend(*((id *)this + 41), "copy");
    v10 = &v24;
    CPMSModule::reportPowerBudgetNeed_sync((uint64_t)this, (PowerBudget *)&v24);
  }
  else if (*((_BYTE *)this + 232))
  {
    if (*((_BYTE *)this + 233))
    {
      v11 = capabilities::abs::supportsCPMSConnectedState(v8);
      v9 = v22;
      v12 = 304;
      if (v11)
      {
        v12 = 336;
        v13 = (char *)this + 336;
      }
      else
      {
        v13 = (char *)this + 304;
      }
      v22[0] = 0;
      v22[1] = 0;
      v21 = v22;
      v23 = 0;
      if (v13 != (char *)&v21)
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v21, *(_QWORD **)((char *)this + v12), (_QWORD *)v13 + 1);
      v23 = objc_msgSend(*((id *)v13 + 3), "copy");
      v10 = &v21;
      CPMSModule::reportPowerBudgetNeed_sync((uint64_t)this, (PowerBudget *)&v21);
    }
    else
    {
      v9 = v19;
      v19[0] = 0;
      v19[1] = 0;
      v18 = v19;
      v20 = 0;
      if ((_QWORD **)((char *)this + 368) != &v18)
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v18, *((_QWORD **)this + 46), (_QWORD *)this + 47);
      v20 = objc_msgSend(*((id *)this + 49), "copy");
      v10 = &v18;
      CPMSModule::reportPowerBudgetNeed_sync((uint64_t)this, (PowerBudget *)&v18);
    }
  }
  else
  {
    v9 = &v15;
    v15 = 0;
    v16 = 0;
    v14 = &v15;
    v17 = 0;
    if ((uint64_t **)((char *)this + 368) != &v14)
      std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v14, *((_QWORD **)this + 46), (_QWORD *)this + 47);
    v17 = objc_msgSend(*((id *)this + 49), "copy", v14, v15, v16, v17);
    v10 = &v14;
    CPMSModule::reportPowerBudgetNeed_sync((uint64_t)this, (PowerBudget *)&v14);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v10, v10[1]);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = v9;

  v10[3] = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v10, v10[1]);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = v9;
}

void sub_1BF393D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  PowerBudget::~PowerBudget((PowerBudget *)va);
  _Unwind_Resume(a1);
}

void sub_1BF393D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  PowerBudget::~PowerBudget((PowerBudget *)va);
  _Unwind_Resume(a1);
}

void sub_1BF393D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,_QWORD *a22)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a21, a22);
  _Unwind_Resume(a1);
}

void sub_1BF393D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, _QWORD *a14)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

void sub_1BF393D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PowerBudget::~PowerBudget((PowerBudget *)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF393D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  PowerBudget::~PowerBudget((PowerBudget *)va);
  _Unwind_Resume(a1);
}

void sub_1BF393D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_1BF393DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, _QWORD *a18)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

void sub_1BF393DC0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN10CPMSModule25finishInitialization_syncEv_block_invoke_13(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  unsigned __int8 *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  CFTypeRef v11;
  int v12;
  char Int;
  int v14;
  _QWORD v15[2];
  CFTypeRef cf;
  __CFString *v17;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (unsigned __int8 *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      abm::client::Event::getData(*a2);
      v11 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
      {
        v15[0] = 0xAAAAAAAAAAAAAAAALL;
        v15[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v15, (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL);
        v12 = v5[233];
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v17, (const char *)*MEMORY[0x1E0CFB9E8]);
        Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v15, v17);
        MEMORY[0x1C3B8936C](&v17);
        v14 = Int == 0;
        v5[233] = v14;
        if (v12 != v14)
          CPMSModule::evaluatePowerBudgetNeed_sync((CPMSModule *)v5);
        MEMORY[0x1C3B893A8](v15);
        v11 = cf;
      }
      if (v11)
        CFRelease(v11);
    }
  }
}

void ___ZN10CPMSModule25finishInitialization_syncEv_block_invoke_2(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  CFTypeRef v11;
  int v12;
  const char *v13;
  size_t v14;
  void **v15;
  _BOOL4 v16;
  NSObject *v17;
  _BOOL8 v18;
  const char *v19;
  void *v20[3];
  _QWORD v21[2];
  CFTypeRef cf;
  uint64_t v23;
  __int128 __p;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      abm::client::Event::getData(*a2);
      v11 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
      {
        v21[0] = 0xAAAAAAAAAAAAAAAALL;
        v21[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v21, (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL);
        v12 = *(unsigned __int8 *)(v5 + 234);
        memset(v20, 170, sizeof(v20));
        v13 = (const char *)*MEMORY[0x1E0CFBBD8];
        __p = 0uLL;
        v25 = 0;
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v23, v13);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C3B8936C](&v23);
        if (SHIBYTE(v25) < 0)
          operator delete((void *)__p);
        if (SHIBYTE(v20[2]) >= 0)
          v14 = HIBYTE(v20[2]);
        else
          v14 = (size_t)v20[1];
        if (v14 == strlen((const char *)*MEMORY[0x1E0CFBF28]))
        {
          if (SHIBYTE(v20[2]) >= 0)
            v15 = v20;
          else
            v15 = (void **)v20[0];
          v16 = memcmp(v15, (const void *)*MEMORY[0x1E0CFBF28], v14) == 0;
        }
        else
        {
          v16 = 0;
        }
        *(_BYTE *)(v5 + 234) = v16;
        v17 = *(NSObject **)(v5 + 88);
        v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG);
        if (v18)
        {
          v19 = "disconnected";
          if (v16)
            v19 = "connected";
          LODWORD(__p) = 136315138;
          *(_QWORD *)((char *)&__p + 4) = v19;
          _os_log_debug_impl(&dword_1BF335000, v17, OS_LOG_TYPE_DEBUG, "#D Baseband is in %s state", (uint8_t *)&__p, 0xCu);
        }
        if (capabilities::abs::supportsCPMSConnectedState((capabilities::abs *)v18)
          && *(unsigned __int8 *)(v5 + 234) != v12)
        {
          CPMSModule::debounceConnectedState_sync((CPMSModule *)v5);
        }
        if (SHIBYTE(v20[2]) < 0)
          operator delete(v20[0]);
        MEMORY[0x1C3B893A8](v21);
        v11 = cf;
      }
      if (v11)
        CFRelease(v11);
    }
  }
}

void sub_1BF3941B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void CPMSModule::debounceConnectedState_sync(CPMSModule *this)
{
  NSObject *v2;
  _BOOL8 v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[6];
  std::__shared_weak_count *v26;
  void *v27;
  dispatch_object_t object;
  char __p[17];
  char v30;
  uint8_t buf[24];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 11);
  v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG);
  if (v3)
  {
    if (*((_BYTE *)this + 234))
      v7 = "connected";
    else
      v7 = "idle";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v7;
    _os_log_debug_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEBUG, "#D Baseband is in %s state", buf, 0xCu);
    if (*((_BYTE *)this + 234))
      goto LABEL_3;
  }
  else if (*((_BYTE *)this + 234))
  {
LABEL_3:
    v4 = *((_QWORD *)this + 28);
    if (v4)
    {
      v5 = *((_QWORD *)this + 11);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEBUG, "#D Cancelling idle timer", buf, 2u);
        v4 = *((_QWORD *)this + 28);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
      v6 = *((_QWORD *)this + 28);
      *((_QWORD *)this + 28) = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
    if (!*((_BYTE *)this + 235))
    {
      *((_BYTE *)this + 235) = 1;
      CPMSModule::evaluatePowerBudgetNeed_sync(this);
    }
    return;
  }
  v8 = capabilities::abs::CPMSDebounceTimer((capabilities::abs *)v3);
  v9 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v8;
    _os_log_debug_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEBUG, "#D Starting idle timer for %lld secs", buf, 0xCu);
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v10)
LABEL_41:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v10)
      goto LABEL_41;
  }
  v11 = *((_QWORD *)this + 15);
  v12 = std::__shared_weak_count::lock(v10);
  if (!v12)
    goto LABEL_41;
  v13 = v12;
  p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  v18 = *((_QWORD *)this + 26);
  v30 = 16;
  strcpy(__p, "Idle state timer");
  v19 = 1000000 * v8;
  v20 = *((_QWORD *)this + 17);
  object = v20;
  if (v20)
    dispatch_retain(v20);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10CPMSModule27debounceConnectedState_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e5_v8__0l;
  aBlock[4] = this;
  aBlock[5] = v11;
  v26 = v13;
  do
    v21 = __ldxr(p_shared_weak_owners);
  while (__stxr(v21 + 1, p_shared_weak_owners));
  v27 = _Block_copy(aBlock);
  ctu::TimerService::createOneShotTimer(v18, (uint64_t)__p, 0, v19, &object, &v27);
  v22 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  v23 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = v22;
  if (v23)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    v24 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  }
  if (v27)
    _Block_release(v27);
  if (object)
    dispatch_release(object);
  if (v30 < 0)
    operator delete(*(void **)__p);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  std::__shared_weak_count::__release_weak(v13);
}

void sub_1BF39458C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, dispatch_object_t object, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN10CPMSModule25finishInitialization_syncEv_block_invoke_16(_QWORD *a1, _QWORD **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  void **v12;
  _QWORD **v13;
  _QWORD *v14;
  uint64_t v15;
  id v16;
  void *__p[2];
  char v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  id v22;
  uint8_t buf[4];
  void **v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v19 = &v20;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      if (&v19 != a2)
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v19, *a2, a2 + 1);
      v11 = *(NSObject **)(v5 + 88);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        PowerBudget::to_string((PowerBudget *)&v19, __p);
        if (v18 >= 0)
          v12 = __p;
        else
          v12 = (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        v24 = v12;
        _os_log_impl(&dword_1BF335000, v11, OS_LOG_TYPE_DEFAULT, "#I Baseband power budget need is %s", buf, 0xCu);
        if (v18 < 0)
          operator delete(__p[0]);
      }
      v13 = &v14;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v13, v19, &v20);
      v16 = (id)objc_msgSend(v22, "copy");
      CPMSModule::reportPowerBudgetNeed_sync(v5, (PowerBudget *)&v13);
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v13, v14);
      v14 = 0;
      v15 = 0;
      v13 = &v14;

      v16 = 0;
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v13, v14);
      v14 = 0;
      v15 = 0;
      v13 = &v14;
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v19, v20);
      v20 = 0;
      v21 = 0;
      v19 = &v20;

      v22 = 0;
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v19, v20);
    }
  }
}

void sub_1BF394808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  PowerBudget::~PowerBudget((PowerBudget *)va);
  _Unwind_Resume(a1);
}

void CPMSModule::reportPowerBudgetNeed_sync(uint64_t a1, PowerBudget *a2)
{
  int v4;
  NSObject *v5;
  _BOOL4 v6;
  _BYTE *v7;
  NSDictionary *v8;
  id *v9;
  NSObject *v10;
  _BYTE *v11;
  int v12;
  NSObject *v13;
  id NSDict;
  const char *v15;
  NSObject *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  id v20;
  __int128 v21;
  uint64_t v22;
  id v23;
  _QWORD **v24;
  _QWORD *v25;
  uint64_t v26;
  id v27;
  _BYTE __p[12];
  __int16 v29;
  id v30;
  char v31;
  uint8_t buf[4];
  _BYTE *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int8 *)(a1 + 236);
  v5 = *(NSObject **)(a1 + 88);
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      PowerBudget::to_string(a2, __p);
      if (v31 >= 0)
        v7 = __p;
      else
        v7 = *(_BYTE **)__p;
      *(_DWORD *)buf = 136315138;
      v33 = v7;
      _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "#I Brick mode is still enabled; ignoring power budget request for %s",
        buf,
        0xCu);
      if (v31 < 0)
        operator delete(*(void **)__p);
    }
  }
  else
  {
    if (v6)
    {
      *(_DWORD *)__p = 138412290;
      *(_QWORD *)&__p[4] = PowerBudget::getNSDict((id *)a2);
      _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "#I Reporting to CPMS with power budget need %@", __p, 0xCu);
    }
    v8 = (NSDictionary *)objc_msgSend(*(id *)(a1 + 168), "copyPowerBudgetForRequest:forClient:error:", PowerBudget::getNSDict((id *)a2), 4, 0);
    if (v8)
    {
      v9 = (id *)(a1 + 240);
      PowerBudget::fill((id *)(a1 + 240), v8);
      v10 = *(NSObject **)(a1 + 88);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        PowerBudget::to_string((PowerBudget *)(a1 + 240), __p);
        v11 = v31 >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315138;
        v33 = v11;
        _os_log_impl(&dword_1BF335000, v10, OS_LOG_TYPE_DEFAULT, "#I CPMS responded with power budget allocation %s", buf, 0xCu);
        if (v31 < 0)
          operator delete(*(void **)__p);
      }
      v24 = &v25;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      if (v9 != (id *)&v24)
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v24, *(_QWORD **)(a1 + 240), (_QWORD *)(a1 + 248));
      v27 = (id)objc_msgSend(*(id *)(a1 + 264), "copy");
      v12 = objc_msgSend(*(id *)(a1 + 168), "acknowledgePowerBudget:forClientId:error:", PowerBudget::getNSDict((id *)&v24), 4, 0);
      v13 = *(NSObject **)(a1 + 88);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        NSDict = PowerBudget::getNSDict((id *)&v24);
        v15 = "failed";
        if (v12)
          v15 = "succeeded";
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = v15;
        v29 = 2112;
        v30 = NSDict;
        _os_log_impl(&dword_1BF335000, v13, OS_LOG_TYPE_DEFAULT, "#I Acked CPMS %s for power budget %@", __p, 0x16u);
      }
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v24, v25);
      v25 = 0;
      v26 = 0;
      v24 = &v25;

      v27 = 0;
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v24, v25);
      v25 = 0;
      v26 = 0;
      v23 = 0;
      v24 = &v25;
      *((_QWORD *)&v21 + 1) = 0;
      v22 = 0;
      *(_QWORD *)&v21 = (char *)&v21 + 8;
      if (v9 != (id *)&v21)
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v21, *(_QWORD **)(a1 + 240), (_QWORD *)(a1 + 248));
      v23 = (id)objc_msgSend(*(id *)(a1 + 264), "copy");
      CPMSModule::evaluateBrickMode_sync(a1, &v21);
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v21, *((_QWORD **)&v21 + 1));
      *((_QWORD *)&v21 + 1) = 0;
      v22 = 0;
      *(_QWORD *)&v21 = (char *)&v21 + 8;

      v23 = 0;
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v21, *((_QWORD **)&v21 + 1));
      *((_QWORD *)&v21 + 1) = 0;
      v22 = 0;
      v20 = 0;
      *(_QWORD *)&v21 = (char *)&v21 + 8;
      v18 = 0;
      v19 = 0;
      v17 = &v18;
      if (v9 != (id *)&v17)
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v17, *(_QWORD **)(a1 + 240), (_QWORD *)(a1 + 248));
      v20 = (id)objc_msgSend(*(id *)(a1 + 264), "copy", v17);
      CPMSModule::sendPowerBudgetToBB_sync(a1, &v17);
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v17, v18);
      v18 = 0;
      v19 = 0;
      v17 = &v18;

      v20 = 0;
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v17, v18);
      v18 = 0;
      v19 = 0;
      v17 = &v18;
    }
    else
    {
      v16 = *(NSObject **)(a1 + 88);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__p = 0;
        _os_log_error_impl(&dword_1BF335000, v16, OS_LOG_TYPE_ERROR, "Reporting to CPMS with power budget need failed", __p, 2u);
      }
    }

  }
}

void sub_1BF394C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t dispatch::callback<void({block_pointer})(BudgetData)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void CPMSModule::getErrorMsg(NSError *a1@<X1>, uint64_t a2@<X8>)
{
  NSString *v5;
  NSString *v6;

  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)(a2 + 16) = 0xAAAAAAAAAAAAAAAALL;
  *(_BYTE *)(a2 + 23) = 13;
  strcpy((char *)a2, "Unknown error");
  if (a1)
  {
    v5 = -[NSError localizedDescription](a1, "localizedDescription");
    if (-[NSError localizedFailureReason](a1, "localizedFailureReason"))
      v6 = -[NSError localizedFailureReason](a1, "localizedFailureReason");
    else
      v6 = (NSString *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "localizedStringForKey:value:table:", CFSTR("Not found localizedFailureReason"), &stru_1E790CD10, 0);
    std::string::__assign_external((std::string *)a2, (const std::string::value_type *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %@"), v5, v6), "UTF8String"));
  }
}

void sub_1BF394E38(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void ctu::TimerService::createOneShotTimer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, NSObject **a5, void **a6)
{
  NSObject *v6;
  void *aBlock;
  dispatch_object_t object;
  void *__p[2];
  uint64_t v10;

  v10 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)__p = *(_OWORD *)a2;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v6 = *a5;
  *a5 = 0;
  aBlock = *a6;
  object = v6;
  *a6 = 0;
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t, _QWORD, dispatch_object_t *, void **))(*(_QWORD *)a1 + 16))(a1, __p, a3, a4, 0, &object, &aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (object)
    dispatch_release(object);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
}

void sub_1BF394EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, dispatch_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (aBlock)
    _Block_release(aBlock);
  if (object)
  {
    dispatch_release(object);
    if ((a16 & 0x80000000) == 0)
LABEL_5:
      _Unwind_Resume(exception_object);
  }
  else if ((a16 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN10CPMSModule27debounceConnectedState_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t v9[16];
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v11 = v4;
    if (v4)
    {
      v5 = v4;
      if (!a1[5])
        goto LABEL_7;
      v6 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)v9 = 0;
        _os_log_debug_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEBUG, "#D Idle timer expired", v9, 2u);
        if (*(_BYTE *)(v3 + 234))
        {
LABEL_7:
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
          return;
        }
      }
      else if (*(_BYTE *)(v3 + 234))
      {
        goto LABEL_7;
      }
      *(_BYTE *)(v3 + 235) = 0;
      CPMSModule::evaluatePowerBudgetNeed_sync((CPMSModule *)v3);
      goto LABEL_7;
    }
  }
}

void sub_1BF395034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void CPMSModule::sendPowerBudgetToBB_sync(uint64_t a1, _QWORD **a2)
{
  int v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  NSObject *v17;
  const char *v18;
  const char *v19;
  int v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD *, _QWORD *);
  void *v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  _QWORD **v29;
  _QWORD *v30;
  uint64_t v31;
  id v32;
  void *aBlock;
  dispatch_object_t object;
  _QWORD **v35;
  _QWORD *v36;
  uint64_t v37;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  const char *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned __int8 *)(a1 + 236);
  if (!*(_BYTE *)(a1 + 236) && *(_BYTE *)(a1 + 232) && *(_BYTE *)(a1 + 233))
  {
    v5 = *(std::__shared_weak_count **)(a1 + 128);
    if (!v5 || (v7 = *(_QWORD *)(a1 + 120), (v8 = std::__shared_weak_count::lock(v5)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v9 = v8;
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v9);
    }
    v14 = *(_QWORD *)(a1 + 192);
    v36 = 0;
    v37 = 0;
    v35 = &v36;
    if (&v35 != a2)
      std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v35, *a2, a2 + 1);
    v22 = MEMORY[0x1E0C809B0];
    v23 = 3321888768;
    v24 = ___ZN10CPMSModule24sendPowerBudgetToBB_syncE11PowerBudget_block_invoke;
    v25 = &__block_descriptor_88_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE56c17_ZTS11PowerBudget_e44_v16__0_CFSharedRef___CFError______CFError__8l;
    v26 = a1;
    v27 = v7;
    v28 = v9;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    v29 = &v30;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    if (&v29 != a2)
      std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v29, *a2, a2 + 1);
    v32 = (id)objc_msgSend(a2[3], "copy", v22, v23, v24, v25, v26, v27);
    v16 = _Block_copy(&v22);
    v17 = *(NSObject **)(a1 + 136);
    if (v17)
      dispatch_retain(v17);
    aBlock = v16;
    object = v17;
    (*(void (**)(uint64_t, _QWORD ***, void **))(*(_QWORD *)v14 + 24))(v14, &v35, &aBlock);
    if (object)
      dispatch_release(object);
    if (aBlock)
      _Block_release(aBlock);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v35, v36);
    v36 = 0;
    v37 = 0;
    v35 = &v36;
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v29, v30);
    v30 = 0;
    v31 = 0;
    v29 = &v30;

    v32 = 0;
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v29, v30);
    v30 = 0;
    v31 = 0;
    v29 = &v30;
    if (v28)
      std::__shared_weak_count::__release_weak(v28);
    std::__shared_weak_count::__release_weak(v9);
  }
  else
  {
    v4 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      v18 = "true";
      if (v3)
        v19 = "true";
      else
        v19 = "false";
      v20 = *(unsigned __int8 *)(a1 + 233);
      if (*(_BYTE *)(a1 + 232))
        v21 = "true";
      else
        v21 = "false";
      *(_DWORD *)buf = 136315650;
      v39 = v19;
      v40 = 2080;
      if (!v20)
        v18 = "false";
      v41 = v21;
      v42 = 2080;
      v43 = v18;
      _os_log_debug_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEBUG, "#D Not sending budget to BB due to this condition: BrickMode: %s, Baseband is ready: %s, Baseband is online: %s", buf, 0x20u);
    }
  }
}

void sub_1BF395318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN10CPMSModule24sendPowerBudgetToBB_syncE11PowerBudget_block_invoke(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  uint64_t (*v12)(uint64_t);
  const char *v13;
  void **v14;
  void *__p[2];
  char v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  void **v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v11 = *(NSObject **)(v5 + 88);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v12 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        if (!*a2)
          v12 = 0;
        if (v12)
          v13 = "failed";
        else
          v13 = "succeeded";
        PowerBudget::to_string((PowerBudget *)(a1 + 7), __p);
        if (v16 >= 0)
          v14 = __p;
        else
          v14 = (void **)__p[0];
        *(_DWORD *)buf = 136315394;
        v18 = v13;
        v19 = 2080;
        v20 = v14;
        _os_log_impl(&dword_1BF335000, v11, OS_LOG_TYPE_DEFAULT, "#I Sent power budget to baseband %s for %s", buf, 0x16u);
        if (v16 < 0)
          operator delete(__p[0]);
      }
    }
  }
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE56c17_ZTS11PowerBudget(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  a1[8] = 0;
  a1[7] = a1 + 8;
  a1[9] = 0;
  a1[10] = 0;
  if ((_QWORD *)a2 != a1)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)(a1 + 7), *(_QWORD **)(a2 + 56), (_QWORD *)(a2 + 64));
  result = objc_msgSend(*(id *)(a2 + 80), "copy");
  a1[10] = result;
  return result;
}

void sub_1BF395594(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v5;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v2, *(_QWORD **)(v1 + 64));
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 56) = v3;
  v5 = *(std::__shared_weak_count **)(v1 + 48);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE56c17_ZTS11PowerBudget(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  v2 = a1 + 64;
  v3 = a1 + 56;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1 + 56, *(_QWORD **)(a1 + 64));
  *(_QWORD *)(v2 - 8) = v2;
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;

  *(_QWORD *)(a1 + 80) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v3, *(_QWORD **)(a1 + 64));
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = v2;
  v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void CPMSModule::ackPowerBudgetToCPMS_sync(uint64_t a1, id *a2)
{
  int v4;
  NSObject *v5;
  const char *v6;
  int v7;
  const char *v8;
  __int16 v9;
  id NSDict;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = objc_msgSend(*(id *)(a1 + 168), "acknowledgePowerBudget:forClientId:error:", PowerBudget::getNSDict(a2), 4, 0);
  v5 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (v4)
      v6 = "succeeded";
    else
      v6 = "failed";
    v7 = 136315394;
    v8 = v6;
    v9 = 2112;
    NSDict = PowerBudget::getNSDict(a2);
    _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "#I Acked CPMS %s for power budget %@", (uint8_t *)&v7, 0x16u);
  }
}

void CPMSModule::getCPMSBudgetPlistPath(CPMSModule *this@<X0>, void **a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  unsigned int v8;
  std::string *v9;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  _WORD *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  _WORD *v22;
  std::string *v23;
  __int128 v24;
  std::string::size_type v25;
  char v26;
  NSObject *v27;
  std::string::size_type v28;
  _OWORD v29[4];
  std::string::value_type v30[8];
  char v31;
  void *v32[2];
  char v33;
  std::string::value_type __s[23];
  char v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  memset(a2, 170, 24);
  v36.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
  *(_OWORD *)&v36.__r_.__value_.__r.__words[1] = xmmword_1BF53EA20;
  strcpy(v36.__r_.__value_.__l.__data_, "/System/Library/PrivateFrameworks/AppleBasebandManager.framework/");
  qmemcpy(v29, "anager.frameworks/AppleBasebandMPrivateFramework/System/Library/", sizeof(v29));
  v35 = 12;
  strcpy(__s, "cpms.budgets");
  v4 = std::string::append(&v36, __s, 0xCuLL);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v33 = 10;
  strcpy((char *)v32, ".override.");
  v6 = std::string::append(&v37, (const std::string::value_type *)v32, 0xAuLL);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = capabilities::radio::product((capabilities::radio *)v6);
  std::to_string(&v39, v8);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v39;
  else
    v9 = (std::string *)v39.__r_.__value_.__r.__words[0];
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  else
    size = v39.__r_.__value_.__l.__size_;
  v11 = std::string::append(&v38, (const std::string::value_type *)v9, size);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v31 = 6;
  strcpy(v30, ".plist");
  v13 = std::string::append(&v40, v30, 6uLL);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  a2[2] = (void *)v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)a2 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (v31 < 0)
  {
    operator delete(*(void **)v30);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_20;
    }
  }
  else if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v40.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(v39.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_11:
    if ((v33 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(v38.__r_.__value_.__l.__data_);
  if ((v33 & 0x80000000) == 0)
  {
LABEL_12:
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(v32[0]);
  if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_13:
    if ((v35 & 0x80000000) == 0)
      goto LABEL_14;
LABEL_24:
    operator delete(*(void **)__s);
    if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_23:
  operator delete(v37.__r_.__value_.__l.__data_);
  if (v35 < 0)
    goto LABEL_24;
LABEL_14:
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_15;
LABEL_25:
  operator delete(v36.__r_.__value_.__l.__data_);
LABEL_15:
  v15 = ctu::fs::file_exists();
  if ((v15 & 1) != 0)
    goto LABEL_35;
  if (config::hw::watch((config::hw *)v15))
  {
    v16 = operator new(0x48uLL);
    v37.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
    *(_OWORD *)&v37.__r_.__value_.__r.__words[1] = xmmword_1BF53EA20;
    v16[32] = 47;
    *(_OWORD *)v16 = v29[3];
    *((_OWORD *)v16 + 1) = v29[2];
    *((_OWORD *)v16 + 2) = v29[1];
    *((_OWORD *)v16 + 3) = v29[0];
    *((_BYTE *)&v36.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&v36, "cpms.budgets");
    v17 = std::string::append(&v37, (const std::string::value_type *)&v36, 0xCuLL);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v35 = 6;
    strcpy(__s, ".watch");
    v19 = std::string::append(&v38, __s, 6uLL);
  }
  else
  {
    v22 = operator new(0x48uLL);
    v37.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
    *(_OWORD *)&v37.__r_.__value_.__r.__words[1] = xmmword_1BF53EA20;
    v22[32] = 47;
    *(_OWORD *)v22 = v29[3];
    *((_OWORD *)v22 + 1) = v29[2];
    *((_OWORD *)v22 + 2) = v29[1];
    *((_OWORD *)v22 + 3) = v29[0];
    *((_BYTE *)&v36.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&v36, "cpms.budgets");
    v23 = std::string::append(&v37, (const std::string::value_type *)&v36, 0xCuLL);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v35 = 7;
    strcpy(__s, ".iphone");
    v19 = std::string::append(&v38, __s, 7uLL);
  }
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v33 = 6;
  strcpy((char *)v32, ".plist");
  v21 = std::string::append(&v40, (const std::string::value_type *)v32, 6uLL);
  v25 = v21->__r_.__value_.__r.__words[0];
  v39.__r_.__value_.__r.__words[0] = v21->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
  v26 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)a2 + 23) < 0)
    operator delete(*a2);
  *a2 = (void *)v25;
  a2[1] = (void *)v39.__r_.__value_.__r.__words[0];
  *(void **)((char *)a2 + 15) = *(void **)((char *)v39.__r_.__value_.__r.__words + 7);
  *((_BYTE *)a2 + 23) = v26;
  if (v33 < 0)
  {
    operator delete(v32[0]);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_31:
      if ((v35 & 0x80000000) == 0)
        goto LABEL_32;
      goto LABEL_43;
    }
  }
  else if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v40.__r_.__value_.__l.__data_);
  if ((v35 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_44;
  }
LABEL_43:
  operator delete(*(void **)__s);
  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_45;
  }
LABEL_44:
  operator delete(v38.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_34:
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_46;
  }
LABEL_45:
  operator delete(v36.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_35:
    v27 = *((_QWORD *)this + 11);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      return;
    goto LABEL_36;
  }
LABEL_46:
  operator delete(v37.__r_.__value_.__l.__data_);
  v27 = *((_QWORD *)this + 11);
  if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    return;
LABEL_36:
  if (*((char *)a2 + 23) >= 0)
    v28 = (std::string::size_type)a2;
  else
    v28 = (std::string::size_type)*a2;
  LODWORD(v40.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)v40.__r_.__value_.__r.__words + 4) = v28;
  _os_log_impl(&dword_1BF335000, v27, OS_LOG_TYPE_DEFAULT, "#I CPMS Power Budget List: %s", (uint8_t *)&v40, 0xCu);
}

void sub_1BF395D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;
  uint64_t v49;

  if (a30 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v49 - 73) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a36 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(char *)(v49 - 73) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v49 - 96));
  if ((a36 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v49 - 121) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a31);
  if ((*(char *)(v49 - 121) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a42 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*(void **)(v49 - 144));
  if ((a42 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a48 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a37);
  if ((a48 & 0x80000000) == 0)
  {
LABEL_7:
    if ((*(char *)(v48 + 23) & 0x80000000) == 0)
LABEL_16:
      _Unwind_Resume(exception_object);
LABEL_15:
    operator delete(*(void **)v48);
    goto LABEL_16;
  }
LABEL_14:
  operator delete(a43);
  if ((*(char *)(v48 + 23) & 0x80000000) == 0)
    goto LABEL_16;
  goto LABEL_15;
}

uint64_t *CPMSModule::initPowerConfig_sync(void)::$_1::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v8;
  id v9;
  int v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t v13;
  id v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t **v17;
  _QWORD *v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  unsigned __int8 *v24;
  uint64_t **v25;
  _QWORD *v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *result;
  int v32;
  unsigned __int8 *v33;
  uint64_t **v34;
  _QWORD *v35;
  unsigned int v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  unsigned __int8 *v40;
  unsigned __int8 **v41;
  unsigned __int8 **v42;
  unsigned int v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  uint64_t v46;
  id v47;
  int v48;
  unsigned __int8 *v49;
  uint64_t **v50;
  _QWORD *v51;
  unsigned int v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t *v55;
  int v56;
  unsigned __int8 *v57;
  uint64_t **v58;
  _QWORD *v59;
  unsigned int v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t *v63;
  int v64;
  unsigned __int8 *v65;
  uint64_t **v66;
  _QWORD *v67;
  unsigned int v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t *v71;
  unsigned __int8 *v72;
  unsigned int v73;
  char v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t *v77;
  int v78;
  uint64_t *v79;
  uint64_t **v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t *v83;
  int v84;
  uint64_t *v85;
  uint64_t **v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t *v89;
  unsigned __int8 **v90;
  uint64_t v91;
  int v92;
  uint64_t **v93;
  unsigned __int8 *v94;
  uint64_t **v95;
  _QWORD *v96;
  unsigned int v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t *v100;
  int v101;
  uint64_t **v102;
  unsigned __int8 *v103;
  uint64_t **v104;
  _QWORD *v105;
  unsigned int v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t *v109;
  int v110;
  uint64_t **v111;
  unsigned __int8 *v112;
  uint64_t **v113;
  _QWORD *v114;
  unsigned int v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t *v118;
  unsigned __int8 *v119;
  uint64_t **v120;
  _QWORD *v121;
  unsigned int v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t *v125;
  int v126;
  uint64_t *v127;
  uint64_t **v128;
  uint64_t **v129;
  unsigned int v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t *v133;
  int v134;
  uint64_t *v135;
  uint64_t **v136;
  uint64_t **v137;
  unsigned int v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t *v141;
  int v142;
  uint64_t *v143;
  uint64_t **v144;
  uint64_t **v145;
  unsigned int v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t *v149;
  unsigned __int8 *v150;
  uint64_t **v151;
  _QWORD *v152;
  unsigned int v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t *v156;
  int v157;
  unsigned __int8 *v158;
  uint64_t **v159;
  _QWORD *v160;
  unsigned int v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t *v164;
  int v165;
  unsigned __int8 *v166;
  uint64_t **v167;
  _QWORD *v168;
  unsigned int v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t *v172;
  int v173;
  unsigned __int8 *v174;
  uint64_t **v175;
  _QWORD *v176;
  unsigned int v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t *v180;
  unsigned __int8 *v181;
  uint64_t **v182;
  _QWORD *v183;
  unsigned int v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t *v187;
  int v188;
  unsigned __int8 *v189;
  _QWORD *v190;
  unsigned int v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t *v194;
  int v195;
  unsigned __int8 *v196;
  _QWORD *v197;
  unsigned int v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t *v201;
  int v202;
  unsigned __int8 *v203;
  _QWORD *v204;
  unsigned int v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t *v208;
  unsigned __int8 *v209;
  unsigned int v210;

  v8 = *MEMORY[0x1E0D09960];
  if (objc_msgSend(a2, "isEqualToString:", *MEMORY[0x1E0D09960]))
  {
    v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    objc_msgSend(v9, "addObject:", objc_msgSend(a3, "valueForKey:", CFSTR("Min")));
    objc_msgSend(v9, "addObject:", objc_msgSend(a3, "valueForKey:", CFSTR("Max")));
    objc_msgSend(a4, "setObject:forKey:", v9, v8);
    v10 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Min")), "unsignedIntValue");
    v11 = *(uint64_t **)(a1 + 280);
    if (v11)
    {
      while (1)
      {
        v12 = (uint64_t **)v11;
        if (!*((_BYTE *)v11 + 28))
          break;
        v11 = (uint64_t *)*v11;
        if (!*v12)
          goto LABEL_85;
      }
      v75 = v11;
    }
    else
    {
      v12 = (uint64_t **)(a1 + 280);
LABEL_85:
      v75 = operator new(0x28uLL);
      v75[28] = 0;
      v75[32] = 0;
      v75[36] = 0;
      *(_QWORD *)v75 = 0;
      *((_QWORD *)v75 + 1) = 0;
      *((_QWORD *)v75 + 2) = v12;
      *v12 = (uint64_t *)v75;
      v76 = **(_QWORD **)(a1 + 272);
      v77 = (uint64_t *)v75;
      if (v76)
      {
        *(_QWORD *)(a1 + 272) = v76;
        v77 = *v12;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 280), v77);
      ++*(_QWORD *)(a1 + 288);
    }
    *((_DWORD *)v75 + 8) = v10;
    v75[36] = 1;
    v78 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Max")), "unsignedIntValue");
    v79 = *(uint64_t **)(a1 + 312);
    if (v79)
    {
      while (1)
      {
        v80 = (uint64_t **)v79;
        if (!*((_BYTE *)v79 + 28))
          break;
        v79 = (uint64_t *)*v79;
        if (!*v80)
          goto LABEL_94;
      }
      v81 = v79;
    }
    else
    {
      v80 = (uint64_t **)(a1 + 312);
LABEL_94:
      v81 = operator new(0x28uLL);
      v81[28] = 0;
      v81[32] = 0;
      v81[36] = 0;
      *(_QWORD *)v81 = 0;
      *((_QWORD *)v81 + 1) = 0;
      *((_QWORD *)v81 + 2) = v80;
      *v80 = (uint64_t *)v81;
      v82 = **(_QWORD **)(a1 + 304);
      v83 = (uint64_t *)v81;
      if (v82)
      {
        *(_QWORD *)(a1 + 304) = v82;
        v83 = *v80;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 312), v83);
      ++*(_QWORD *)(a1 + 320);
    }
    *((_DWORD *)v81 + 8) = v78;
    v81[36] = 1;
    result = (uint64_t *)objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Idle")), "unsignedIntValue");
    v84 = (int)result;
    v85 = *(uint64_t **)(a1 + 344);
    if (v85)
    {
      while (1)
      {
        v86 = (uint64_t **)v85;
        if (!*((_BYTE *)v85 + 28))
          break;
        v85 = (uint64_t *)*v85;
        if (!*v86)
          goto LABEL_103;
      }
      *((_DWORD *)v85 + 8) = (_DWORD)result;
      *((_BYTE *)v85 + 36) = 1;
      v90 = *(unsigned __int8 ***)(a1 + 376);
      if (v90)
        goto LABEL_106;
    }
    else
    {
      v86 = (uint64_t **)(a1 + 344);
LABEL_103:
      v87 = operator new(0x28uLL);
      v87[28] = 0;
      v87[32] = 0;
      v87[36] = 0;
      *(_QWORD *)v87 = 0;
      *((_QWORD *)v87 + 1) = 0;
      *((_QWORD *)v87 + 2) = v86;
      *v86 = (uint64_t *)v87;
      v88 = **(_QWORD **)(a1 + 336);
      v89 = (uint64_t *)v87;
      if (v88)
      {
        *(_QWORD *)(a1 + 336) = v88;
        v89 = *v86;
      }
      result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v89);
      ++*(_QWORD *)(a1 + 352);
      *((_DWORD *)v87 + 8) = v84;
      v87[36] = 1;
      v90 = *(unsigned __int8 ***)(a1 + 376);
      if (v90)
      {
LABEL_106:
        while (1)
        {
          v41 = v90;
          if (!*((_BYTE *)v90 + 28))
            break;
          v90 = (unsigned __int8 **)*v90;
          if (!*v41)
            goto LABEL_111;
        }
        v42 = v90;
        goto LABEL_277;
      }
    }
    v41 = (unsigned __int8 **)(a1 + 376);
LABEL_111:
    v45 = (unsigned __int8 *)operator new(0x28uLL);
    v45[28] = 0;
    v45[32] = 0;
    v45[36] = 0;
    *(_QWORD *)v45 = 0;
    *((_QWORD *)v45 + 1) = 0;
    *((_QWORD *)v45 + 2) = v41;
    *v41 = v45;
    v91 = **(_QWORD **)(a1 + 368);
    if (!v91)
      goto LABEL_112;
LABEL_275:
    *(_QWORD *)(a1 + 368) = v91;
    v42 = (unsigned __int8 **)v45;
    v45 = *v41;
    goto LABEL_276;
  }
  v13 = *MEMORY[0x1E0D09958];
  if (objc_msgSend(a2, "isEqualToString:", *MEMORY[0x1E0D09958]))
  {
    v14 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    objc_msgSend(v14, "addObject:", objc_msgSend(a3, "valueForKey:", CFSTR("Min")));
    objc_msgSend(v14, "addObject:", objc_msgSend(a3, "valueForKey:", CFSTR("Max")));
    objc_msgSend(a4, "setObject:forKey:", v14, v13);
    v15 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Min")), "unsignedIntValue");
    v16 = *(unsigned __int8 **)(a1 + 280);
    if (v16)
    {
      while (1)
      {
        while (1)
        {
          v18 = v16;
          v19 = v16[28];
          if (v19 < 2)
            break;
          v16 = (unsigned __int8 *)*v18;
          v17 = (uint64_t **)v18;
          if (!*v18)
            goto LABEL_14;
        }
        if (v19)
          break;
        v16 = (unsigned __int8 *)v18[1];
        if (!v16)
        {
          v17 = (uint64_t **)(v18 + 1);
          goto LABEL_14;
        }
      }
    }
    else
    {
      v17 = (uint64_t **)(a1 + 280);
      v18 = (_QWORD *)(a1 + 280);
LABEL_14:
      v20 = v18;
      v18 = operator new(0x28uLL);
      *((_BYTE *)v18 + 28) = 1;
      *((_BYTE *)v18 + 32) = 0;
      *((_BYTE *)v18 + 36) = 0;
      *v18 = 0;
      v18[1] = 0;
      v18[2] = v20;
      *v17 = v18;
      v21 = **(_QWORD **)(a1 + 272);
      v22 = v18;
      if (v21)
      {
        *(_QWORD *)(a1 + 272) = v21;
        v22 = *v17;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 280), v22);
      ++*(_QWORD *)(a1 + 288);
    }
    *((_DWORD *)v18 + 8) = v15;
    *((_BYTE *)v18 + 36) = 1;
    v23 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Max")), "unsignedIntValue");
    v24 = *(unsigned __int8 **)(a1 + 312);
    if (v24)
    {
      while (1)
      {
        while (1)
        {
          v26 = v24;
          v27 = v24[28];
          if (v27 < 2)
            break;
          v24 = (unsigned __int8 *)*v26;
          v25 = (uint64_t **)v26;
          if (!*v26)
            goto LABEL_24;
        }
        if (v27)
          break;
        v24 = (unsigned __int8 *)v26[1];
        if (!v24)
        {
          v25 = (uint64_t **)(v26 + 1);
          goto LABEL_24;
        }
      }
    }
    else
    {
      v25 = (uint64_t **)(a1 + 312);
      v26 = (_QWORD *)(a1 + 312);
LABEL_24:
      v28 = v26;
      v26 = operator new(0x28uLL);
      *((_BYTE *)v26 + 28) = 1;
      *((_BYTE *)v26 + 32) = 0;
      *((_BYTE *)v26 + 36) = 0;
      *v26 = 0;
      v26[1] = 0;
      v26[2] = v28;
      *v25 = v26;
      v29 = **(_QWORD **)(a1 + 304);
      v30 = v26;
      if (v29)
      {
        *(_QWORD *)(a1 + 304) = v29;
        v30 = *v25;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 312), v30);
      ++*(_QWORD *)(a1 + 320);
    }
    *((_DWORD *)v26 + 8) = v23;
    *((_BYTE *)v26 + 36) = 1;
    result = (uint64_t *)objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Idle")), "unsignedIntValue");
    v32 = (int)result;
    v33 = *(unsigned __int8 **)(a1 + 344);
    if (v33)
    {
      while (1)
      {
        while (1)
        {
          v35 = v33;
          v36 = v33[28];
          if (v36 < 2)
            break;
          v33 = (unsigned __int8 *)*v35;
          v34 = (uint64_t **)v35;
          if (!*v35)
            goto LABEL_34;
        }
        if (v36)
          break;
        v33 = (unsigned __int8 *)v35[1];
        if (!v33)
        {
          v34 = (uint64_t **)(v35 + 1);
          goto LABEL_34;
        }
      }
    }
    else
    {
      v34 = (uint64_t **)(a1 + 344);
      v35 = (_QWORD *)(a1 + 344);
LABEL_34:
      v37 = v35;
      v35 = operator new(0x28uLL);
      *((_BYTE *)v35 + 28) = 1;
      *((_BYTE *)v35 + 32) = 0;
      *((_BYTE *)v35 + 36) = 0;
      *v35 = 0;
      v35[1] = 0;
      v35[2] = v37;
      *v34 = v35;
      v38 = **(_QWORD **)(a1 + 336);
      v39 = v35;
      if (v38)
      {
        *(_QWORD *)(a1 + 336) = v38;
        v39 = *v34;
      }
      result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v39);
      ++*(_QWORD *)(a1 + 352);
    }
    *((_DWORD *)v35 + 8) = v32;
    *((_BYTE *)v35 + 36) = 1;
    v40 = *(unsigned __int8 **)(a1 + 376);
    if (v40)
    {
      while (1)
      {
        while (1)
        {
          v42 = (unsigned __int8 **)v40;
          v43 = v40[28];
          if (v43 < 2)
            break;
          v40 = *v42;
          v41 = v42;
          if (!*v42)
            goto LABEL_44;
        }
        if (v43)
          goto LABEL_277;
        v40 = v42[1];
        if (!v40)
        {
          v41 = v42 + 1;
          goto LABEL_44;
        }
      }
    }
    v41 = (unsigned __int8 **)(a1 + 376);
    v42 = (unsigned __int8 **)(a1 + 376);
LABEL_44:
    v44 = (unsigned __int8 *)operator new(0x28uLL);
    v45 = v44;
    v44[28] = 1;
  }
  else
  {
    v46 = *MEMORY[0x1E0D09970];
    if (objc_msgSend(a2, "isEqualToString:", *MEMORY[0x1E0D09970]))
    {
      v47 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      objc_msgSend(v47, "addObject:", objc_msgSend(a3, "valueForKey:", CFSTR("Min")));
      objc_msgSend(v47, "addObject:", objc_msgSend(a3, "valueForKey:", CFSTR("Max")));
      objc_msgSend(a4, "setObject:forKey:", v47, v46);
      v48 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Min")), "unsignedIntValue");
      v49 = *(unsigned __int8 **)(a1 + 280);
      if (v49)
      {
        while (1)
        {
          while (1)
          {
            v51 = v49;
            v52 = v49[28];
            if (v52 < 3)
              break;
            v49 = (unsigned __int8 *)*v51;
            v50 = (uint64_t **)v51;
            if (!*v51)
              goto LABEL_53;
          }
          if (v52 == 2)
            break;
          v49 = (unsigned __int8 *)v51[1];
          if (!v49)
          {
            v50 = (uint64_t **)(v51 + 1);
            goto LABEL_53;
          }
        }
      }
      else
      {
        v50 = (uint64_t **)(a1 + 280);
        v51 = (_QWORD *)(a1 + 280);
LABEL_53:
        v53 = v51;
        v51 = operator new(0x28uLL);
        *((_BYTE *)v51 + 28) = 2;
        *((_BYTE *)v51 + 32) = 0;
        *((_BYTE *)v51 + 36) = 0;
        *v51 = 0;
        v51[1] = 0;
        v51[2] = v53;
        *v50 = v51;
        v54 = **(_QWORD **)(a1 + 272);
        v55 = v51;
        if (v54)
        {
          *(_QWORD *)(a1 + 272) = v54;
          v55 = *v50;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 280), v55);
        ++*(_QWORD *)(a1 + 288);
      }
      *((_DWORD *)v51 + 8) = v48;
      *((_BYTE *)v51 + 36) = 1;
      v56 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Max")), "unsignedIntValue");
      v57 = *(unsigned __int8 **)(a1 + 312);
      if (v57)
      {
        while (1)
        {
          while (1)
          {
            v59 = v57;
            v60 = v57[28];
            if (v60 < 3)
              break;
            v57 = (unsigned __int8 *)*v59;
            v58 = (uint64_t **)v59;
            if (!*v59)
              goto LABEL_63;
          }
          if (v60 == 2)
            break;
          v57 = (unsigned __int8 *)v59[1];
          if (!v57)
          {
            v58 = (uint64_t **)(v59 + 1);
            goto LABEL_63;
          }
        }
      }
      else
      {
        v58 = (uint64_t **)(a1 + 312);
        v59 = (_QWORD *)(a1 + 312);
LABEL_63:
        v61 = v59;
        v59 = operator new(0x28uLL);
        *((_BYTE *)v59 + 28) = 2;
        *((_BYTE *)v59 + 32) = 0;
        *((_BYTE *)v59 + 36) = 0;
        *v59 = 0;
        v59[1] = 0;
        v59[2] = v61;
        *v58 = v59;
        v62 = **(_QWORD **)(a1 + 304);
        v63 = v59;
        if (v62)
        {
          *(_QWORD *)(a1 + 304) = v62;
          v63 = *v58;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 312), v63);
        ++*(_QWORD *)(a1 + 320);
      }
      *((_DWORD *)v59 + 8) = v56;
      *((_BYTE *)v59 + 36) = 1;
      result = (uint64_t *)objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Idle")), "unsignedIntValue");
      v64 = (int)result;
      v65 = *(unsigned __int8 **)(a1 + 344);
      if (v65)
      {
        while (1)
        {
          while (1)
          {
            v67 = v65;
            v68 = v65[28];
            if (v68 < 3)
              break;
            v65 = (unsigned __int8 *)*v67;
            v66 = (uint64_t **)v67;
            if (!*v67)
              goto LABEL_73;
          }
          if (v68 == 2)
            break;
          v65 = (unsigned __int8 *)v67[1];
          if (!v65)
          {
            v66 = (uint64_t **)(v67 + 1);
            goto LABEL_73;
          }
        }
      }
      else
      {
        v66 = (uint64_t **)(a1 + 344);
        v67 = (_QWORD *)(a1 + 344);
LABEL_73:
        v69 = v67;
        v67 = operator new(0x28uLL);
        *((_BYTE *)v67 + 28) = 2;
        *((_BYTE *)v67 + 32) = 0;
        *((_BYTE *)v67 + 36) = 0;
        *v67 = 0;
        v67[1] = 0;
        v67[2] = v69;
        *v66 = v67;
        v70 = **(_QWORD **)(a1 + 336);
        v71 = v67;
        if (v70)
        {
          *(_QWORD *)(a1 + 336) = v70;
          v71 = *v66;
        }
        result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v71);
        ++*(_QWORD *)(a1 + 352);
      }
      *((_DWORD *)v67 + 8) = v64;
      *((_BYTE *)v67 + 36) = 1;
      v72 = *(unsigned __int8 **)(a1 + 376);
      if (v72)
      {
        while (1)
        {
          while (1)
          {
            v42 = (unsigned __int8 **)v72;
            v73 = v72[28];
            if (v73 < 3)
              break;
            v72 = *v42;
            v41 = v42;
            if (!*v42)
              goto LABEL_83;
          }
          if (v73 == 2)
            goto LABEL_277;
          v72 = v42[1];
          if (!v72)
          {
            v41 = v42 + 1;
            goto LABEL_83;
          }
        }
      }
      v41 = (unsigned __int8 **)(a1 + 376);
      v42 = (unsigned __int8 **)(a1 + 376);
LABEL_83:
      v44 = (unsigned __int8 *)operator new(0x28uLL);
      v45 = v44;
      v74 = 2;
    }
    else
    {
      result = (uint64_t *)objc_msgSend(a2, "isEqualToString:", *MEMORY[0x1E0D09988]);
      if (!(_DWORD)result)
        return result;
      v92 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Min")), "unsignedIntValue");
      v93 = (uint64_t **)(a1 + 280);
      v94 = *(unsigned __int8 **)(a1 + 280);
      v95 = (uint64_t **)(a1 + 280);
      v96 = (_QWORD *)(a1 + 280);
      if (v94)
      {
        while (1)
        {
          while (1)
          {
            v96 = v94;
            v97 = v94[28];
            if (v97 < 0xB)
              break;
            v94 = (unsigned __int8 *)*v96;
            v95 = (uint64_t **)v96;
            if (!*v96)
              goto LABEL_122;
          }
          if (v97 == 10)
            break;
          v94 = (unsigned __int8 *)v96[1];
          if (!v94)
          {
            v95 = (uint64_t **)(v96 + 1);
            goto LABEL_122;
          }
        }
      }
      else
      {
LABEL_122:
        v98 = v96;
        v96 = operator new(0x28uLL);
        *((_BYTE *)v96 + 28) = 10;
        *((_BYTE *)v96 + 32) = 0;
        *((_BYTE *)v96 + 36) = 0;
        *v96 = 0;
        v96[1] = 0;
        v96[2] = v98;
        *v95 = v96;
        v99 = **(_QWORD **)(a1 + 272);
        v100 = v96;
        if (v99)
        {
          *(_QWORD *)(a1 + 272) = v99;
          v100 = *v95;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 280), v100);
        ++*(_QWORD *)(a1 + 288);
      }
      *((_DWORD *)v96 + 8) = v92;
      *((_BYTE *)v96 + 36) = 1;
      v101 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Max")), "unsignedIntValue");
      v102 = (uint64_t **)(a1 + 312);
      v103 = *(unsigned __int8 **)(a1 + 312);
      v104 = (uint64_t **)(a1 + 312);
      v105 = (_QWORD *)(a1 + 312);
      if (v103)
      {
        while (1)
        {
          while (1)
          {
            v105 = v103;
            v106 = v103[28];
            if (v106 < 0xB)
              break;
            v103 = (unsigned __int8 *)*v105;
            v104 = (uint64_t **)v105;
            if (!*v105)
              goto LABEL_132;
          }
          if (v106 == 10)
            break;
          v103 = (unsigned __int8 *)v105[1];
          if (!v103)
          {
            v104 = (uint64_t **)(v105 + 1);
            goto LABEL_132;
          }
        }
      }
      else
      {
LABEL_132:
        v107 = v105;
        v105 = operator new(0x28uLL);
        *((_BYTE *)v105 + 28) = 10;
        *((_BYTE *)v105 + 32) = 0;
        *((_BYTE *)v105 + 36) = 0;
        *v105 = 0;
        v105[1] = 0;
        v105[2] = v107;
        *v104 = v105;
        v108 = **(_QWORD **)(a1 + 304);
        v109 = v105;
        if (v108)
        {
          *(_QWORD *)(a1 + 304) = v108;
          v109 = *v104;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 312), v109);
        ++*(_QWORD *)(a1 + 320);
      }
      *((_DWORD *)v105 + 8) = v101;
      *((_BYTE *)v105 + 36) = 1;
      v110 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Idle")), "unsignedIntValue");
      v111 = (uint64_t **)(a1 + 344);
      v112 = *(unsigned __int8 **)(a1 + 344);
      v113 = (uint64_t **)(a1 + 344);
      v114 = (_QWORD *)(a1 + 344);
      if (v112)
      {
        while (1)
        {
          while (1)
          {
            v114 = v112;
            v115 = v112[28];
            if (v115 < 0xB)
              break;
            v112 = (unsigned __int8 *)*v114;
            v113 = (uint64_t **)v114;
            if (!*v114)
              goto LABEL_142;
          }
          if (v115 == 10)
            break;
          v112 = (unsigned __int8 *)v114[1];
          if (!v112)
          {
            v113 = (uint64_t **)(v114 + 1);
            goto LABEL_142;
          }
        }
      }
      else
      {
LABEL_142:
        v116 = v114;
        v114 = operator new(0x28uLL);
        *((_BYTE *)v114 + 28) = 10;
        *((_BYTE *)v114 + 32) = 0;
        *((_BYTE *)v114 + 36) = 0;
        *v114 = 0;
        v114[1] = 0;
        v114[2] = v116;
        *v113 = v114;
        v117 = **(_QWORD **)(a1 + 336);
        v118 = v114;
        if (v117)
        {
          *(_QWORD *)(a1 + 336) = v117;
          v118 = *v113;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v118);
        ++*(_QWORD *)(a1 + 352);
      }
      *((_DWORD *)v114 + 8) = v110;
      *((_BYTE *)v114 + 36) = 1;
      v41 = (unsigned __int8 **)(a1 + 376);
      v119 = *(unsigned __int8 **)(a1 + 376);
      v120 = (uint64_t **)(a1 + 376);
      v121 = (_QWORD *)(a1 + 376);
      if (v119)
      {
        while (1)
        {
          while (1)
          {
            v121 = v119;
            v122 = v119[28];
            if (v122 < 0xB)
              break;
            v119 = (unsigned __int8 *)*v121;
            v120 = (uint64_t **)v121;
            if (!*v121)
              goto LABEL_152;
          }
          if (v122 == 10)
            break;
          v119 = (unsigned __int8 *)v121[1];
          if (!v119)
          {
            v120 = (uint64_t **)(v121 + 1);
            goto LABEL_152;
          }
        }
      }
      else
      {
LABEL_152:
        v123 = v121;
        v121 = operator new(0x28uLL);
        *((_BYTE *)v121 + 28) = 10;
        *((_BYTE *)v121 + 32) = 0;
        *((_BYTE *)v121 + 36) = 0;
        *v121 = 0;
        v121[1] = 0;
        v121[2] = v123;
        *v120 = v121;
        v124 = **(_QWORD **)(a1 + 368);
        v125 = v121;
        if (v124)
        {
          *(_QWORD *)(a1 + 368) = v124;
          v125 = *v120;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 376), v125);
        ++*(_QWORD *)(a1 + 384);
      }
      *((_DWORD *)v121 + 8) = 1;
      *((_BYTE *)v121 + 36) = 1;
      v126 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Min")), "unsignedIntValue");
      v127 = *v93;
      v128 = (uint64_t **)(a1 + 280);
      v129 = (uint64_t **)(a1 + 280);
      if (*v93)
      {
        while (1)
        {
          while (1)
          {
            v129 = (uint64_t **)v127;
            v130 = *((unsigned __int8 *)v127 + 28);
            if (v130 < 0xC)
              break;
            v127 = *v129;
            v128 = v129;
            if (!*v129)
              goto LABEL_162;
          }
          if (v130 == 11)
            break;
          v127 = v129[1];
          if (!v127)
          {
            v128 = v129 + 1;
            goto LABEL_162;
          }
        }
      }
      else
      {
LABEL_162:
        v131 = (uint64_t *)v129;
        v129 = (uint64_t **)operator new(0x28uLL);
        *((_BYTE *)v129 + 28) = 11;
        *((_BYTE *)v129 + 32) = 0;
        *((_BYTE *)v129 + 36) = 0;
        *v129 = 0;
        v129[1] = 0;
        v129[2] = v131;
        *v128 = (uint64_t *)v129;
        v132 = **(_QWORD **)(a1 + 272);
        v133 = (uint64_t *)v129;
        if (v132)
        {
          *(_QWORD *)(a1 + 272) = v132;
          v133 = *v128;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 280), v133);
        ++*(_QWORD *)(a1 + 288);
      }
      *((_DWORD *)v129 + 8) = v126;
      *((_BYTE *)v129 + 36) = 1;
      v134 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Max")), "unsignedIntValue");
      v135 = *v102;
      v136 = (uint64_t **)(a1 + 312);
      v137 = (uint64_t **)(a1 + 312);
      if (*v102)
      {
        while (1)
        {
          while (1)
          {
            v137 = (uint64_t **)v135;
            v138 = *((unsigned __int8 *)v135 + 28);
            if (v138 < 0xC)
              break;
            v135 = *v137;
            v136 = v137;
            if (!*v137)
              goto LABEL_172;
          }
          if (v138 == 11)
            break;
          v135 = v137[1];
          if (!v135)
          {
            v136 = v137 + 1;
            goto LABEL_172;
          }
        }
      }
      else
      {
LABEL_172:
        v139 = (uint64_t *)v137;
        v137 = (uint64_t **)operator new(0x28uLL);
        *((_BYTE *)v137 + 28) = 11;
        *((_BYTE *)v137 + 32) = 0;
        *((_BYTE *)v137 + 36) = 0;
        *v137 = 0;
        v137[1] = 0;
        v137[2] = v139;
        *v136 = (uint64_t *)v137;
        v140 = **(_QWORD **)(a1 + 304);
        v141 = (uint64_t *)v137;
        if (v140)
        {
          *(_QWORD *)(a1 + 304) = v140;
          v141 = *v136;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 312), v141);
        ++*(_QWORD *)(a1 + 320);
      }
      *((_DWORD *)v137 + 8) = v134;
      *((_BYTE *)v137 + 36) = 1;
      v142 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Idle")), "unsignedIntValue");
      v143 = *v111;
      v144 = (uint64_t **)(a1 + 344);
      v145 = (uint64_t **)(a1 + 344);
      if (*v111)
      {
        while (1)
        {
          while (1)
          {
            v145 = (uint64_t **)v143;
            v146 = *((unsigned __int8 *)v143 + 28);
            if (v146 < 0xC)
              break;
            v143 = *v145;
            v144 = v145;
            if (!*v145)
              goto LABEL_182;
          }
          if (v146 == 11)
            break;
          v143 = v145[1];
          if (!v143)
          {
            v144 = v145 + 1;
            goto LABEL_182;
          }
        }
      }
      else
      {
LABEL_182:
        v147 = (uint64_t *)v145;
        v145 = (uint64_t **)operator new(0x28uLL);
        *((_BYTE *)v145 + 28) = 11;
        *((_BYTE *)v145 + 32) = 0;
        *((_BYTE *)v145 + 36) = 0;
        *v145 = 0;
        v145[1] = 0;
        v145[2] = v147;
        *v144 = (uint64_t *)v145;
        v148 = **(_QWORD **)(a1 + 336);
        v149 = (uint64_t *)v145;
        if (v148)
        {
          *(_QWORD *)(a1 + 336) = v148;
          v149 = *v144;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v149);
        ++*(_QWORD *)(a1 + 352);
      }
      *((_DWORD *)v145 + 8) = v142;
      *((_BYTE *)v145 + 36) = 1;
      v150 = *v41;
      v151 = (uint64_t **)(a1 + 376);
      v152 = (_QWORD *)(a1 + 376);
      if (*v41)
      {
        while (1)
        {
          while (1)
          {
            v152 = v150;
            v153 = v150[28];
            if (v153 < 0xC)
              break;
            v150 = (unsigned __int8 *)*v152;
            v151 = (uint64_t **)v152;
            if (!*v152)
              goto LABEL_192;
          }
          if (v153 == 11)
            break;
          v150 = (unsigned __int8 *)v152[1];
          if (!v150)
          {
            v151 = (uint64_t **)(v152 + 1);
            goto LABEL_192;
          }
        }
      }
      else
      {
LABEL_192:
        v154 = v152;
        v152 = operator new(0x28uLL);
        *((_BYTE *)v152 + 28) = 11;
        *((_BYTE *)v152 + 32) = 0;
        *((_BYTE *)v152 + 36) = 0;
        *v152 = 0;
        v152[1] = 0;
        v152[2] = v154;
        *v151 = v152;
        v155 = **(_QWORD **)(a1 + 368);
        v156 = v152;
        if (v155)
        {
          *(_QWORD *)(a1 + 368) = v155;
          v156 = *v151;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 376), v156);
        ++*(_QWORD *)(a1 + 384);
      }
      *((_DWORD *)v152 + 8) = 1;
      *((_BYTE *)v152 + 36) = 1;
      v157 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Min")), "unsignedIntValue");
      v158 = (unsigned __int8 *)*v93;
      v159 = (uint64_t **)(a1 + 280);
      v160 = (_QWORD *)(a1 + 280);
      if (*v93)
      {
        while (1)
        {
          while (1)
          {
            v160 = v158;
            v161 = v158[28];
            if (v161 < 0xD)
              break;
            v158 = (unsigned __int8 *)*v160;
            v159 = (uint64_t **)v160;
            if (!*v160)
              goto LABEL_202;
          }
          if (v161 == 12)
            break;
          v158 = (unsigned __int8 *)v160[1];
          if (!v158)
          {
            v159 = (uint64_t **)(v160 + 1);
            goto LABEL_202;
          }
        }
      }
      else
      {
LABEL_202:
        v162 = v160;
        v160 = operator new(0x28uLL);
        *((_BYTE *)v160 + 28) = 12;
        *((_BYTE *)v160 + 32) = 0;
        *((_BYTE *)v160 + 36) = 0;
        *v160 = 0;
        v160[1] = 0;
        v160[2] = v162;
        *v159 = v160;
        v163 = **(_QWORD **)(a1 + 272);
        v164 = v160;
        if (v163)
        {
          *(_QWORD *)(a1 + 272) = v163;
          v164 = *v159;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 280), v164);
        ++*(_QWORD *)(a1 + 288);
      }
      *((_DWORD *)v160 + 8) = v157;
      *((_BYTE *)v160 + 36) = 1;
      v165 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Max")), "unsignedIntValue");
      v166 = (unsigned __int8 *)*v102;
      v167 = (uint64_t **)(a1 + 312);
      v168 = (_QWORD *)(a1 + 312);
      if (*v102)
      {
        while (1)
        {
          while (1)
          {
            v168 = v166;
            v169 = v166[28];
            if (v169 < 0xD)
              break;
            v166 = (unsigned __int8 *)*v168;
            v167 = (uint64_t **)v168;
            if (!*v168)
              goto LABEL_212;
          }
          if (v169 == 12)
            break;
          v166 = (unsigned __int8 *)v168[1];
          if (!v166)
          {
            v167 = (uint64_t **)(v168 + 1);
            goto LABEL_212;
          }
        }
      }
      else
      {
LABEL_212:
        v170 = v168;
        v168 = operator new(0x28uLL);
        *((_BYTE *)v168 + 28) = 12;
        *((_BYTE *)v168 + 32) = 0;
        *((_BYTE *)v168 + 36) = 0;
        *v168 = 0;
        v168[1] = 0;
        v168[2] = v170;
        *v167 = v168;
        v171 = **(_QWORD **)(a1 + 304);
        v172 = v168;
        if (v171)
        {
          *(_QWORD *)(a1 + 304) = v171;
          v172 = *v167;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 312), v172);
        ++*(_QWORD *)(a1 + 320);
      }
      *((_DWORD *)v168 + 8) = v165;
      *((_BYTE *)v168 + 36) = 1;
      v173 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Idle")), "unsignedIntValue");
      v174 = (unsigned __int8 *)*v111;
      v175 = (uint64_t **)(a1 + 344);
      v176 = (_QWORD *)(a1 + 344);
      if (*v111)
      {
        while (1)
        {
          while (1)
          {
            v176 = v174;
            v177 = v174[28];
            if (v177 < 0xD)
              break;
            v174 = (unsigned __int8 *)*v176;
            v175 = (uint64_t **)v176;
            if (!*v176)
              goto LABEL_222;
          }
          if (v177 == 12)
            break;
          v174 = (unsigned __int8 *)v176[1];
          if (!v174)
          {
            v175 = (uint64_t **)(v176 + 1);
            goto LABEL_222;
          }
        }
      }
      else
      {
LABEL_222:
        v178 = v176;
        v176 = operator new(0x28uLL);
        *((_BYTE *)v176 + 28) = 12;
        *((_BYTE *)v176 + 32) = 0;
        *((_BYTE *)v176 + 36) = 0;
        *v176 = 0;
        v176[1] = 0;
        v176[2] = v178;
        *v175 = v176;
        v179 = **(_QWORD **)(a1 + 336);
        v180 = v176;
        if (v179)
        {
          *(_QWORD *)(a1 + 336) = v179;
          v180 = *v175;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v180);
        ++*(_QWORD *)(a1 + 352);
      }
      *((_DWORD *)v176 + 8) = v173;
      *((_BYTE *)v176 + 36) = 1;
      v181 = *v41;
      v182 = (uint64_t **)(a1 + 376);
      v183 = (_QWORD *)(a1 + 376);
      if (*v41)
      {
        while (1)
        {
          while (1)
          {
            v183 = v181;
            v184 = v181[28];
            if (v184 < 0xD)
              break;
            v181 = (unsigned __int8 *)*v183;
            v182 = (uint64_t **)v183;
            if (!*v183)
              goto LABEL_232;
          }
          if (v184 == 12)
            break;
          v181 = (unsigned __int8 *)v183[1];
          if (!v181)
          {
            v182 = (uint64_t **)(v183 + 1);
            goto LABEL_232;
          }
        }
      }
      else
      {
LABEL_232:
        v185 = v183;
        v183 = operator new(0x28uLL);
        *((_BYTE *)v183 + 28) = 12;
        *((_BYTE *)v183 + 32) = 0;
        *((_BYTE *)v183 + 36) = 0;
        *v183 = 0;
        v183[1] = 0;
        v183[2] = v185;
        *v182 = v183;
        v186 = **(_QWORD **)(a1 + 368);
        v187 = v183;
        if (v186)
        {
          *(_QWORD *)(a1 + 368) = v186;
          v187 = *v182;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 376), v187);
        ++*(_QWORD *)(a1 + 384);
      }
      *((_DWORD *)v183 + 8) = 1;
      *((_BYTE *)v183 + 36) = 1;
      v188 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Min")), "unsignedIntValue");
      v189 = (unsigned __int8 *)*v93;
      v190 = (_QWORD *)(a1 + 280);
      if (*v93)
      {
        while (1)
        {
          while (1)
          {
            v190 = v189;
            v191 = v189[28];
            if (v191 < 0xE)
              break;
            v189 = (unsigned __int8 *)*v190;
            v93 = (uint64_t **)v190;
            if (!*v190)
              goto LABEL_242;
          }
          if (v191 == 13)
            break;
          v189 = (unsigned __int8 *)v190[1];
          if (!v189)
          {
            v93 = (uint64_t **)(v190 + 1);
            goto LABEL_242;
          }
        }
      }
      else
      {
LABEL_242:
        v192 = v190;
        v190 = operator new(0x28uLL);
        *((_BYTE *)v190 + 28) = 13;
        *((_BYTE *)v190 + 32) = 0;
        *((_BYTE *)v190 + 36) = 0;
        *v190 = 0;
        v190[1] = 0;
        v190[2] = v192;
        *v93 = v190;
        v193 = **(_QWORD **)(a1 + 272);
        v194 = v190;
        if (v193)
        {
          *(_QWORD *)(a1 + 272) = v193;
          v194 = *v93;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 280), v194);
        ++*(_QWORD *)(a1 + 288);
      }
      *((_DWORD *)v190 + 8) = v188;
      *((_BYTE *)v190 + 36) = 1;
      v195 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Max")), "unsignedIntValue");
      v196 = (unsigned __int8 *)*v102;
      v197 = (_QWORD *)(a1 + 312);
      if (*v102)
      {
        while (1)
        {
          while (1)
          {
            v197 = v196;
            v198 = v196[28];
            if (v198 < 0xE)
              break;
            v196 = (unsigned __int8 *)*v197;
            v102 = (uint64_t **)v197;
            if (!*v197)
              goto LABEL_252;
          }
          if (v198 == 13)
            break;
          v196 = (unsigned __int8 *)v197[1];
          if (!v196)
          {
            v102 = (uint64_t **)(v197 + 1);
            goto LABEL_252;
          }
        }
      }
      else
      {
LABEL_252:
        v199 = v197;
        v197 = operator new(0x28uLL);
        *((_BYTE *)v197 + 28) = 13;
        *((_BYTE *)v197 + 32) = 0;
        *((_BYTE *)v197 + 36) = 0;
        *v197 = 0;
        v197[1] = 0;
        v197[2] = v199;
        *v102 = v197;
        v200 = **(_QWORD **)(a1 + 304);
        v201 = v197;
        if (v200)
        {
          *(_QWORD *)(a1 + 304) = v200;
          v201 = *v102;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 312), v201);
        ++*(_QWORD *)(a1 + 320);
      }
      *((_DWORD *)v197 + 8) = v195;
      *((_BYTE *)v197 + 36) = 1;
      result = (uint64_t *)objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Idle")), "unsignedIntValue");
      v202 = (int)result;
      v203 = (unsigned __int8 *)*v111;
      v204 = (_QWORD *)(a1 + 344);
      if (*v111)
      {
        while (1)
        {
          while (1)
          {
            v204 = v203;
            v205 = v203[28];
            if (v205 < 0xE)
              break;
            v203 = (unsigned __int8 *)*v204;
            v111 = (uint64_t **)v204;
            if (!*v204)
              goto LABEL_262;
          }
          if (v205 == 13)
            break;
          v203 = (unsigned __int8 *)v204[1];
          if (!v203)
          {
            v111 = (uint64_t **)(v204 + 1);
            goto LABEL_262;
          }
        }
      }
      else
      {
LABEL_262:
        v206 = v204;
        v204 = operator new(0x28uLL);
        *((_BYTE *)v204 + 28) = 13;
        *((_BYTE *)v204 + 32) = 0;
        *((_BYTE *)v204 + 36) = 0;
        *v204 = 0;
        v204[1] = 0;
        v204[2] = v206;
        *v111 = v204;
        v207 = **(_QWORD **)(a1 + 336);
        v208 = v204;
        if (v207)
        {
          *(_QWORD *)(a1 + 336) = v207;
          v208 = *v111;
        }
        result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v208);
        ++*(_QWORD *)(a1 + 352);
      }
      *((_DWORD *)v204 + 8) = v202;
      *((_BYTE *)v204 + 36) = 1;
      v209 = *v41;
      v42 = (unsigned __int8 **)(a1 + 376);
      if (*v41)
      {
        while (1)
        {
          while (1)
          {
            v42 = (unsigned __int8 **)v209;
            v210 = v209[28];
            if (v210 < 0xE)
              break;
            v209 = *v42;
            v41 = v42;
            if (!*v42)
              goto LABEL_272;
          }
          if (v210 == 13)
            goto LABEL_277;
          v209 = v42[1];
          if (!v209)
          {
            v41 = v42 + 1;
            break;
          }
        }
      }
LABEL_272:
      v44 = (unsigned __int8 *)operator new(0x28uLL);
      v45 = v44;
      v74 = 13;
    }
    v44[28] = v74;
  }
  v44[32] = 0;
  v44[36] = 0;
  *(_QWORD *)v44 = 0;
  *((_QWORD *)v44 + 1) = 0;
  *((_QWORD *)v44 + 2) = v42;
  *v41 = v44;
  v91 = **(_QWORD **)(a1 + 368);
  if (v91)
    goto LABEL_275;
LABEL_112:
  v42 = (unsigned __int8 **)v45;
LABEL_276:
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 376), (uint64_t *)v45);
  ++*(_QWORD *)(a1 + 384);
LABEL_277:
  *((_DWORD *)v42 + 8) = 1;
  *((_BYTE *)v42 + 36) = 1;
  return result;
}

void ___ZN10CPMSModule20initPowerConfig_syncEv_block_invoke(_QWORD *a1, void *a2)
{
  std::__shared_weak_count *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  NSObject *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (_QWORD *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v11 = objc_msgSend(a2, "copy");
      v12 = (std::__shared_weak_count *)v5[16];
      if (!v12 || (v13 = v5[15], (v14 = std::__shared_weak_count::lock(v12)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v15 = v14;
      v16 = operator new(0x10uLL);
      *v16 = v11;
      v16[1] = v5;
      v17 = v5[17];
      v18 = (unint64_t *)&v15->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      v20 = operator new(0x18uLL);
      *v20 = v16;
      v20[1] = v13;
      v20[2] = v15;
      dispatch_async_f(v17, v20, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZNS3_20initPowerConfig_syncEvEUb4_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
      do
        v21 = __ldaxr(v18);
      while (__stlxr(v21 - 1, v18));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

void sub_1BF3977D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *aBlock, uint64_t a17, char a18)
{
  NSObject *v18;

  if (aBlock)
    _Block_release(aBlock);
  if (v18)
  {
    dispatch_group_leave(v18);
    dispatch_release(v18);
    dispatch_group_leave(v18);
    dispatch_release(v18);
    dispatch_release(v18);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

id ___ZN10CPMSModule20initPowerConfig_syncEv_block_invoke_42(uint64_t a1)
{
  return PowerBudget::getNSDict((id *)(*(_QWORD *)(a1 + 32) + 400));
}

void CPMSModule::evaluateBrickMode_sync(uint64_t a1, __int128 *a2)
{
  _QWORD *v4;
  uint64_t (***v5)();
  uint64_t (***v6)();
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  __CFDictionary *Mutable;
  const __CFAllocator *v16;
  const void *v17;
  size_t v18;
  void *v19;
  void **v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  CFTypeID v24;
  void *aBlock;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v28;
  unsigned __int8 v29;
  uint64_t (**v30)();
  unsigned __int8 *v31;
  uint64_t (***v32)();
  __int128 buf;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (!config::hw::watch((config::hw *)a1))
    return;
  v29 = 0;
  *((_QWORD *)&buf + 1) = 0;
  v34 = 0;
  *(_QWORD *)&buf = (char *)&buf + 8;
  if (&buf == a2)
  {
    v30 = off_1E78FF510;
    v31 = &v29;
    v5 = &v30;
    v32 = &v30;
    goto LABEL_18;
  }
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&buf, *(_QWORD **)a2, (_QWORD *)a2 + 1);
  v4 = (_QWORD *)buf;
  v30 = off_1E78FF510;
  v31 = &v29;
  v5 = &v30;
  v32 = &v30;
  if ((__int128 *)buf == (__int128 *)((char *)&buf + 8))
  {
LABEL_18:
    v10 = 4;
    goto LABEL_19;
  }
  v6 = &v30;
  while (((unsigned int (*)(uint64_t (***)(), uint64_t, _QWORD *))(*v6)[6])(v6, (uint64_t)v4 + 28, v4 + 4))
  {
    v7 = (_QWORD *)v4[1];
    v8 = v4;
    if (v7)
    {
      do
      {
        v4 = v7;
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v8[2];
        v9 = *v4 == (_QWORD)v8;
        v8 = v4;
      }
      while (!v9);
    }
    if (v4 == (_QWORD *)((char *)&buf + 8))
      break;
    v6 = v32;
    if (!v32)
      std::__throw_bad_function_call[abi:ne180100]();
  }
  v5 = v32;
  if (v32 == &v30)
  {
    v10 = 4;
    v5 = &v30;
  }
  else
  {
    if (!v32)
      goto LABEL_20;
    v10 = 5;
  }
LABEL_19:
  (*v5)[v10]();
LABEL_20:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&buf, *((_QWORD **)&buf + 1));
  v11 = v29;
  if (*(unsigned __int8 *)(a1 + 236) == v29)
    return;
  *(_BYTE *)(a1 + 236) = v29;
  v12 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = "enabled";
    if (!v11)
      v13 = "disabled";
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v13;
    _os_log_impl(&dword_1BF335000, v12, OS_LOG_TYPE_DEFAULT, "#I Brick mode is %s", (uint8_t *)&buf, 0xCu);
  }
  *(_QWORD *)&buf = 0;
  v14 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
    *(_QWORD *)&buf = Mutable;
  ctu::cf::insert<char const*,BOOL>(Mutable, (const __CFString **)*MEMORY[0x1E0CFB4D0], *(unsigned __int8 *)(a1 + 236), v14, v16);
  v17 = (const void *)*MEMORY[0x1E0CFB1E0];
  v18 = strlen((const char *)*MEMORY[0x1E0CFB1E0]);
  if (v18 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v19 = (void *)v18;
  if (v18 >= 0x17)
  {
    v22 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v22 = v18 | 7;
    v23 = v22 + 1;
    v20 = (void **)operator new(v22 + 1);
    __dst[1] = v19;
    v28 = v23 | 0x8000000000000000;
    __dst[0] = v20;
  }
  else
  {
    HIBYTE(v28) = v18;
    v20 = __dst;
    if (!v18)
    {
      LOBYTE(__dst[0]) = 0;
      v21 = (const void *)buf;
      if (!(_QWORD)buf)
        goto LABEL_38;
      goto LABEL_36;
    }
  }
  memmove(v20, v17, (size_t)v19);
  *((_BYTE *)v19 + (_QWORD)v20) = 0;
  v21 = (const void *)buf;
  if (!(_QWORD)buf)
  {
LABEL_38:
    cf = 0;
    goto LABEL_39;
  }
LABEL_36:
  v24 = CFGetTypeID(v21);
  if (v24 != CFDictionaryGetTypeID())
    goto LABEL_38;
  cf = v21;
  CFRetain(v21);
LABEL_39:
  aBlock = 0;
  Service::broadcastEvent(a1, (uint64_t)__dst, &cf, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v28) < 0)
  {
    operator delete(__dst[0]);
    if (!v21)
      return;
  }
  else if (!v21)
  {
    return;
  }
  CFRelease(v21);
}

void sub_1BF397BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void CPMSModule::reportThermalDataToSMC_sync(uint64_t a1, float **a2)
{
  unsigned __int8 v4;
  int v5;
  char v6;
  int v7;
  int v8;
  NSObject *v9;
  float *v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  float v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  int v18;
  NSObject *v19;
  const char *v20;
  capabilities::abs *v21;
  _BYTE v22[4];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  uint8_t buf[4];
  _BYTE v32[14];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = atomic_load((unsigned __int8 *)&qword_1ED70FF08);
  if ((v4 & 1) == 0)
  {
    v21 = (capabilities::abs *)__cxa_guard_acquire(&qword_1ED70FF08);
    if ((_DWORD)v21)
    {
      dword_1ED70FF04 = capabilities::abs::thermalSensorMaxCount(v21);
      __cxa_guard_release(&qword_1ED70FF08);
    }
  }
  v30 = 0;
  v29 = 0u;
  v28 = 0u;
  v27 = 0u;
  v26 = 0u;
  v25 = 0u;
  v24 = 0u;
  v23 = 0u;
  v5 = dword_1ED70FF04;
  if (dword_1ED70FF04 == 2)
  {
    v6 = 2;
    v7 = 2;
  }
  else
  {
    if (dword_1ED70FF04 != 3)
    {
      v16 = *(NSObject **)(a1 + 88);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)v32 = v5;
        _os_log_error_impl(&dword_1BF335000, v16, OS_LOG_TYPE_ERROR, "Failed to find the SMC Exchange BB version with the number of sensor capability %u", buf, 8u);
      }
      return;
    }
    v6 = 1;
    v7 = 1;
  }
  v22[1] = v6;
  v22[0] = dword_1ED70FF04;
  v8 = _MergedGlobals_2++;
  v22[2] = v8;
  v22[3] = 0;
  v9 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v32 = v7;
    _os_log_debug_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEBUG, "#D Thermal Report to SMC: Version: %u", buf, 8u);
    v9 = *(NSObject **)(a1 + 88);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
LABEL_8:
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        goto LABEL_9;
      goto LABEL_23;
    }
  }
  else if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    goto LABEL_8;
  }
  *(_DWORD *)buf = 67109120;
  *(_DWORD *)v32 = v5;
  _os_log_debug_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEBUG, "#D Thermal Report to SMC: Number of Sensors: %u", buf, 8u);
  v9 = *(NSObject **)(a1 + 88);
  if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
LABEL_9:
    v10 = *a2;
    v11 = (unsigned __int8 *)a2[1];
    if (*a2 != (float *)v11)
      goto LABEL_10;
LABEL_24:
    v18 = TelephonyBasebandReportThermalData();
    v19 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      v20 = "Failed";
      if (v18)
        v20 = "Succeeded";
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)v32 = v20;
      *(_WORD *)&v32[8] = 1024;
      *(_DWORD *)&v32[10] = 255;
      _os_log_impl(&dword_1BF335000, v19, OS_LOG_TYPE_DEFAULT, "#I %s to report the thermal data to SMC, result: %u", buf, 0x12u);
    }
    return;
  }
LABEL_23:
  *(_DWORD *)buf = 67109120;
  *(_DWORD *)v32 = v8;
  _os_log_debug_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEBUG, "#D Thermal Report to SMC: Sequence Number: %u", buf, 8u);
  v10 = *a2;
  v11 = (unsigned __int8 *)a2[1];
  if (*a2 == (float *)v11)
    goto LABEL_24;
LABEL_10:
  v12 = dword_1ED70FF04;
  while (1)
  {
    v13 = *(unsigned __int8 *)v10;
    if (v12 <= v13)
      break;
    v14 = v10[1];
    *(float *)&v22[4 * *(unsigned __int8 *)v10 + 4] = v14;
    v15 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v32 = v13;
      *(_WORD *)&v32[4] = 2048;
      *(double *)&v32[6] = v14;
      _os_log_debug_impl(&dword_1BF335000, v15, OS_LOG_TYPE_DEBUG, "#D Thermal Report to SMC: Sensor ID: %d, Sensor Data: %f", buf, 0x12u);
      v12 = dword_1ED70FF04;
      v10 += 2;
      if (v10 == (float *)v11)
        goto LABEL_24;
    }
    else
    {
      v10 += 2;
      if (v10 == (float *)v11)
        goto LABEL_24;
    }
  }
  v17 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)v32 = v13;
    *(_WORD *)&v32[4] = 1024;
    *(_DWORD *)&v32[6] = v12;
    _os_log_error_impl(&dword_1BF335000, v17, OS_LOG_TYPE_ERROR, "Sensor ID (%d) cannot exceed the max number of sensors (%u) in the device", buf, 0xEu);
  }
}

void sub_1BF398080(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ED70FF08);
  _Unwind_Resume(a1);
}

void ___ZN10CPMSModule36configureThermalReportFrequency_syncEjN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke(uint64_t a1, float **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  float *v11;
  float *v12;
  NSObject *v13;
  NSObject *v14;
  int v15;
  _BOOL4 v16;
  double v17;
  NSObject *v18;
  const char *v19;
  uint32_t v20;
  int v21;
  int v22;
  int v23;
  NSObject *v24;
  xpc_object_t v25;
  xpc_object_t v26;
  uint64_t v27;
  xpc_object_t v28;
  NSObject *v29;
  xpc_object_t v30;
  xpc_object_t v31;
  NSObject *v32;
  const void *v33;
  size_t v34;
  void *v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  const object *v39;
  const void *v40;
  CFTypeID v41;
  _BYTE *v42;
  void *aBlock;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v46;
  xpc_object_t xdict;
  _BYTE buf[12];
  char v49;
  _BYTE object[24];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)(a1 + 40);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v11 = *a2;
      v12 = a2[1];
      if (*a2 != v12)
      {
        if (*(_BYTE *)(a1 + 56))
        {
          v13 = *(NSObject **)(v5 + 88);
          if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            if (v11 != v12)
              goto LABEL_16;
            goto LABEL_65;
          }
          *(_WORD *)buf = 0;
          _os_log_debug_impl(&dword_1BF335000, v13, OS_LOG_TYPE_DEBUG, "#D Reporting thermal data to SMC:", buf, 2u);
          v11 = *a2;
          v12 = a2[1];
          if (*a2 == v12)
          {
LABEL_65:
            CPMSModule::reportThermalDataToSMC_sync(v5, a2);
            return;
          }
          while (1)
          {
LABEL_16:
            v14 = *(NSObject **)(v5 + 88);
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
            {
              v21 = *(unsigned __int8 *)v11;
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&buf[4] = v21;
              _os_log_debug_impl(&dword_1BF335000, v14, OS_LOG_TYPE_DEBUG, "#D Sensor ID: %d", buf, 8u);
              v14 = *(NSObject **)(v5 + 88);
              v22 = *(unsigned __int8 *)(a1 + 56);
              v16 = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
              if (v22)
              {
LABEL_18:
                if (v16)
                {
                  v17 = v11[1];
                  *(_DWORD *)buf = 134217984;
                  *(double *)&buf[4] = v17;
                  v18 = v14;
                  v19 = "#D Sensor Data (float): %f";
                  v20 = 12;
LABEL_23:
                  _os_log_debug_impl(&dword_1BF335000, v18, OS_LOG_TYPE_DEBUG, v19, buf, v20);
                  goto LABEL_15;
                }
                goto LABEL_15;
              }
            }
            else
            {
              v15 = *(unsigned __int8 *)(a1 + 56);
              v16 = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
              if (v15)
                goto LABEL_18;
            }
            if (v16)
            {
              v23 = *((_DWORD *)v11 + 1);
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&buf[4] = v23;
              v18 = v14;
              v19 = "#D Sensor Data (int32): %d";
              v20 = 8;
              goto LABEL_23;
            }
LABEL_15:
            v11 += 2;
            if (v11 == v12)
              goto LABEL_65;
          }
        }
        xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        v25 = xpc_dictionary_create(0, 0, 0);
        v26 = v25;
        v27 = MEMORY[0x1E0C812F8];
        if (v25)
        {
          xdict = v25;
        }
        else
        {
          v26 = xpc_null_create();
          xdict = v26;
          if (!v26)
          {
            v28 = xpc_null_create();
            v26 = 0;
            goto LABEL_33;
          }
        }
        if (MEMORY[0x1C3B8A86C](v26) == v27)
        {
          xpc_retain(v26);
          goto LABEL_34;
        }
        v28 = xpc_null_create();
LABEL_33:
        xdict = v28;
LABEL_34:
        xpc_release(v26);
        if (MEMORY[0x1C3B8A86C](xdict) != v27)
        {
          v29 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1BF335000, v29, OS_LOG_TYPE_ERROR, "Failed to create xpc dictionary!", buf, 2u);
          }
LABEL_63:
          xpc_release(xdict);
          return;
        }
        v30 = xpc_data_create(*a2, (char *)a2[1] - (char *)*a2);
        if (!v30)
          v30 = xpc_null_create();
        xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB0F0], v30);
        v31 = xpc_null_create();
        xpc_release(v30);
        xpc_release(v31);
        v32 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
          xpc::dict::to_debug_string((xpc::dict *)&xdict, buf);
          v42 = v49 >= 0 ? buf : *(_BYTE **)buf;
          *(_DWORD *)object = 136315138;
          *(_QWORD *)&object[4] = v42;
          _os_log_debug_impl(&dword_1BF335000, v32, OS_LOG_TYPE_DEBUG, "#D Reporting thermal data to Thermal Monitor: %s", object, 0xCu);
          if (v49 < 0)
            operator delete(*(void **)buf);
        }
        v33 = (const void *)*MEMORY[0x1E0CFB318];
        v34 = strlen((const char *)*MEMORY[0x1E0CFB318]);
        if (v34 >= 0x7FFFFFFFFFFFFFF8)
          std::string::__throw_length_error[abi:ne180100]();
        v35 = (void *)v34;
        if (v34 >= 0x17)
        {
          v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v34 | 7) != 0x17)
            v37 = v34 | 7;
          v38 = v37 + 1;
          v36 = (void **)operator new(v37 + 1);
          __dst[1] = v35;
          v46 = v38 | 0x8000000000000000;
          __dst[0] = v36;
        }
        else
        {
          HIBYTE(v46) = v34;
          v36 = __dst;
          if (!v34)
            goto LABEL_48;
        }
        memmove(v36, v33, (size_t)v35);
LABEL_48:
        *((_BYTE *)v35 + (_QWORD)v36) = 0;
        *(_QWORD *)object = xdict;
        if (xdict)
          xpc_retain(xdict);
        else
          *(_QWORD *)object = xpc_null_create();
        xpc::bridge((xpc *)object, v39);
        v40 = *(const void **)buf;
        if (*(_QWORD *)buf && (v41 = CFGetTypeID(*(CFTypeRef *)buf), v41 == CFDictionaryGetTypeID()))
        {
          cf = v40;
          CFRetain(v40);
        }
        else
        {
          cf = 0;
        }
        aBlock = 0;
        Service::broadcastEvent(v5, (uint64_t)__dst, &cf, (const void **)&aBlock);
        if (aBlock)
          _Block_release(aBlock);
        if (cf)
          CFRelease(cf);
        if (*(_QWORD *)buf)
          CFRelease(*(CFTypeRef *)buf);
        xpc_release(*(xpc_object_t *)object);
        if (SHIBYTE(v46) < 0)
          operator delete(__dst[0]);
        goto LABEL_63;
      }
      v24 = *(NSObject **)(v5 + 88);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BF335000, v24, OS_LOG_TYPE_DEFAULT, "#I Thermal Data is empty!", buf, 2u);
      }
    }
  }
}

void sub_1BF39860C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *aBlock, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,xpc_object_t object,char a22,uint64_t a23,uint64_t a24,uint64_t a25,xpc_object_t a26)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void xpc::dict::to_debug_string(xpc::dict *this@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  size_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (char *)MEMORY[0x1C3B8A7D0](*(_QWORD *)this);
  memset(a2, 170, 24);
  v4 = strlen(v3);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v6 = v4 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
    goto LABEL_9;
  }
  *((_BYTE *)a2 + 23) = v4;
  if (v4)
  {
LABEL_9:
    memcpy(a2, v3, v5);
    *((_BYTE *)a2 + v5) = 0;
    free(v3);
    return;
  }
  *(_BYTE *)a2 = 0;
  free(v3);
}

void ___ZN10CPMSModule36configureThermalReportFrequency_syncEjN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke_60(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t (*v11)(uint64_t);
  NSObject *v12;
  uint64_t (*v13)(uint64_t);
  xpc_object_t v14;
  uint64_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  uint64_t v18;
  int v19;
  xpc_object_t object[2];

  object[1] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)(a1 + 40);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      if (*a2)
        v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      else
        v11 = 0;
      if (!v11 && (v12 = *(NSObject **)(v5 + 88), os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)))
      {
        v19 = *(_DWORD *)(a1 + 64);
        LODWORD(object[0]) = 67109120;
        HIDWORD(object[0]) = v19;
        _os_log_debug_impl(&dword_1BF335000, v12, OS_LOG_TYPE_DEBUG, "#D Thermal Report Interval (%u ms) is set.", (uint8_t *)object, 8u);
        if (!*(_QWORD *)(a1 + 56))
          return;
      }
      else if (!*(_QWORD *)(a1 + 56))
      {
        return;
      }
      if (*a2)
        v13 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      else
        v13 = 0;
      if (v13)
      {
        v14 = xpc_null_create();
        v15 = *(_QWORD *)(a1 + 56);
        object[0] = v14;
        v16 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v15 + 16))(v15, 3760250880, object);
      }
      else
      {
        v17 = xpc_null_create();
        v18 = *(_QWORD *)(a1 + 56);
        object[0] = v17;
        v16 = xpc_null_create();
        (*(void (**)(uint64_t, _QWORD, xpc_object_t *))(v18 + 16))(v18, 0, object);
      }
      xpc_release(object[0]);
      xpc_release(v16);
    }
  }
}

void sub_1BF398958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void *__copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[7];
  if (result)
    result = _Block_copy(result);
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 56);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void ___ZN10CPMSModule15getCurrentPowerEN8dispatch13group_sessionENS0_5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke_2(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  id *v11;
  NSObject *v12;
  uint64_t *v13;
  uint64_t v14;
  ctu *v15;
  const void *v16;
  xpc_object_t v17;
  uint64_t v18;
  int v19;
  int v20;
  xpc_object_t *v21;
  id NSDict;
  xpc_object_t *v23;
  xpc_object_t __p[2];
  char v25;
  _BYTE object[12];
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[7];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[6];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v11 = (id *)(v5 + 400);

      *(_QWORD *)(v5 + 424) = 0;
      if (v5 + 400 != a2)
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(v5 + 400, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
      v12 = *(NSObject **)(v5 + 88);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        PowerBudget::to_string((PowerBudget *)(v5 + 400), __p);
        v20 = v25;
        v21 = (xpc_object_t *)__p[0];
        NSDict = PowerBudget::getNSDict(v11);
        v23 = __p;
        if (v20 < 0)
          v23 = v21;
        *(_DWORD *)object = 136315394;
        *(_QWORD *)&object[4] = v23;
        v27 = 2112;
        v28 = NSDict;
        _os_log_debug_impl(&dword_1BF335000, v12, OS_LOG_TYPE_DEBUG, "#D Current power estimation in baseband side: %s, and reporting back to CPMS: %@", object, 0x16u);
        if (v25 < 0)
          operator delete(__p[0]);
      }
      v14 = a1[8];
      v13 = a1 + 8;
      if (v14)
      {
        v15 = (ctu *)PowerBudget::getNSDict(v11);
        ctu::cf_to_xpc(v15, v16);
        v17 = *(xpc_object_t *)object;
        __p[0] = *(xpc_object_t *)object;
        v18 = MEMORY[0x1E0C812F8];
        if (*(_QWORD *)object && MEMORY[0x1C3B8A86C](*(_QWORD *)object) == v18)
        {
          xpc_retain(v17);
        }
        else
        {
          v17 = xpc_null_create();
          __p[0] = v17;
        }
        xpc_release(*(xpc_object_t *)object);
        if (MEMORY[0x1C3B8A86C](v17) == v18)
          v19 = 0;
        else
          v19 = -534716416;
        *(_DWORD *)object = v19;
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v13, (unsigned int *)object, __p);
        xpc_release(__p[0]);
      }
    }
  }
}

void sub_1BF398C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(uint64_t *a1, unsigned int *a2, void **a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  xpc_object_t object;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  object = v5;
  if (v5)
    xpc_retain(v5);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v3 + 16))(v3, v4, &object);
  xpc_release(object);
}

void sub_1BF398D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE64c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(_QWORD *a1, _QWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  void *result;

  v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = a1[5];
    if (v5)
      dispatch_group_enter(v5);
  }
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  result = (void *)a2[8];
  if (result)
    result = _Block_copy(result);
  a1[8] = result;
  return result;
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE64c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(_QWORD *a1)
{
  const void *v2;
  std::__shared_weak_count *v3;
  NSObject *v4;
  NSObject *v5;

  v2 = (const void *)a1[8];
  if (v2)
    _Block_release(v2);
  v3 = (std::__shared_weak_count *)a1[7];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = a1[5];
  if (v4)
  {
    dispatch_group_leave(v4);
    v5 = a1[5];
    if (v5)
      dispatch_release(v5);
  }
}

void ___ZN10CPMSModule15getCurrentPowerEN8dispatch13group_sessionENS0_5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke_63(_QWORD *a1)
{
  uint64_t v2;
  id *v3;
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  int v8;
  const char *v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  id NSDict;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = a1[6];
  v3 = (id *)(v2 + 400);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(v2 + 400, *(_QWORD **)(v2 + 336), (_QWORD *)(v2 + 344));

  *(_QWORD *)(v2 + 424) = objc_msgSend(*(id *)(v2 + 360), "copy");
  v4 = *(NSObject **)(v2 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v5 = a1[5];
    if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
      v6 = "true";
    else
      v6 = "false";
    if (*(_BYTE *)(*(_QWORD *)(v5 + 8) + 24))
      v7 = "true";
    else
      v7 = "false";
    v8 = 136315650;
    v9 = v6;
    v10 = 2080;
    v11 = v7;
    v12 = 2112;
    NSDict = PowerBudget::getNSDict(v3);
    _os_log_debug_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEBUG, "#D Because baseband is not in traffic(%s) or online(%s), reporting idle power estimation back to CPMS: %@", (uint8_t *)&v8, 0x20u);
  }
}

void GlobalService::getShutdownStages(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t ctu::Loggable<CPMSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<CPMSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<CPMSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<CPMSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E78FF388;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<CPMSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E78FF388;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__shared_ptr_pointer<CPMSModule *,std::shared_ptr<CPMSModule> ctu::SharedSynchronizable<CPMSModule>::make_shared_ptr<CPMSModule>(CPMSModule*)::{lambda(CPMSModule *)#1},std::allocator<CPMSModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<CPMSModule *,std::shared_ptr<CPMSModule> ctu::SharedSynchronizable<CPMSModule>::make_shared_ptr<CPMSModule>(CPMSModule*)::{lambda(CPMSModule *)#1},std::allocator<CPMSModule>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<CPMSModule> ctu::SharedSynchronizable<CPMSModule>::make_shared_ptr<CPMSModule>(CPMSModule*)::{lambda(CPMSModule*)#1}::operator() const(CPMSModule*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<CPMSModule *,std::shared_ptr<CPMSModule> ctu::SharedSynchronizable<CPMSModule>::make_shared_ptr<CPMSModule>(CPMSModule*)::{lambda(CPMSModule *)#1},std::allocator<CPMSModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI10CPMSModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI10CPMSModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI10CPMSModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI10CPMSModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<CPMSModule> ctu::SharedSynchronizable<CPMSModule>::make_shared_ptr<CPMSModule>(CPMSModule*)::{lambda(CPMSModule*)#1}::operator() const(CPMSModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedLoggable<CPMSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E78FF388;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<CPMSModule>::execute_wrapped<CPMSModule::shutdown(dispatch::group_session)::$_0>(CPMSModule::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CPMSModule::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<CPMSModule::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(config::hw *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  NSObject *v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  v2 = *(_QWORD **)a1;
  v3 = **(_QWORD ***)a1;
  if ((config::hw::watch(a1) & 1) == 0)
  {
    v4 = v3[24];
    if (v4)
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v4 + 48))(v4, 0, 5);
  }
  v5 = (std::__shared_weak_count *)v3[20];
  v3[19] = 0;
  v3[20] = 0;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v2[1];
  if (v8)
  {
    dispatch_group_leave(v8);
    v9 = v2[1];
    if (v9)
      dispatch_release(v9);
  }
  operator delete(v2);
  v10 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (!v10)
    goto LABEL_16;
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    operator delete(a1);
  }
  else
  {
LABEL_16:
    operator delete(a1);
  }
}

void sub_1BF399308(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = v2[1];
  if (v4)
  {
    dispatch_group_leave(v4);
    v5 = v2[1];
    if (v5)
      dispatch_release(v5);
  }
  operator delete(v2);
  v6 = (std::__shared_weak_count *)v1[2];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  void *v9;
  NSObject *v10;
  const void *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD v17[6];
  std::__shared_weak_count *v18;
  void *v19;
  void *aBlock;
  dispatch_object_t object;

  v2 = (_QWORD *)*a1;
  v4 = *(_QWORD **)(*a1 + 16);
  v3 = *(void **)(*a1 + 24);
  if (v3)
  {
    v5 = v4[24];
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3321888768;
    v17[2] = ___ZZZZN10CPMSModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__1clEv_block_invoke;
    v17[3] = &__block_descriptor_64_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_e172_v32__0_vector_abm::BasebandThermalID__std::allocator_abm::BasebandThermalID____C_C___compressed_pair_abm::BasebandThermalID____std::allocator_abm::BasebandThermalID____C__8l;
    v17[4] = v4;
    v17[5] = *v2;
    v6 = (std::__shared_weak_count *)v2[1];
    v18 = v6;
    if (!v6)
      goto LABEL_6;
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    v3 = (void *)v2[3];
    if (v3)
LABEL_6:
      v3 = _Block_copy(v3);
    v19 = v3;
    v9 = _Block_copy(v17);
    v10 = v4[17];
    if (v10)
      dispatch_retain(v10);
    aBlock = v9;
    object = v10;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 56))(v5, &aBlock);
    if (object)
      dispatch_release(object);
    if (aBlock)
      _Block_release(aBlock);
    if (v19)
      _Block_release(v19);
    if (v18)
    {
      std::__shared_weak_count::__release_weak(v18);
      v11 = (const void *)v2[3];
      if (!v11)
        goto LABEL_21;
LABEL_20:
      _Block_release(v11);
      goto LABEL_21;
    }
LABEL_19:
    v11 = (const void *)v2[3];
    if (!v11)
      goto LABEL_21;
    goto LABEL_20;
  }
  v12 = v4[11];
  if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    goto LABEL_19;
  LOWORD(v17[0]) = 0;
  _os_log_error_impl(&dword_1BF335000, v12, OS_LOG_TYPE_ERROR, "Expected response handler", (uint8_t *)v17, 2u);
  v11 = (const void *)v2[3];
  if (v11)
    goto LABEL_20;
LABEL_21:
  v13 = (std::__shared_weak_count *)v2[1];
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  operator delete(v2);
  v14 = (std::__shared_weak_count *)a1[2];
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  operator delete(a1);
}

void sub_1BF399548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *a16, void *aBlock, dispatch_object_t object)
{
  _QWORD *v18;
  _QWORD *v19;
  const void *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;

  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (a16)
    _Block_release(a16);
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  v21 = (const void *)v19[3];
  if (v21)
    _Block_release(v21);
  v22 = (std::__shared_weak_count *)v19[1];
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  operator delete(v19);
  v23 = (std::__shared_weak_count *)v18[2];
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  operator delete(v18);
  _Unwind_Resume(a1);
}

void ___ZZZZN10CPMSModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__1clEv_block_invoke(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  uint64_t v13;
  xpc_object_t v14;
  void *v15;
  xpc_object_t v16;
  uint64_t v17;
  xpc_object_t v18;
  uint64_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  NSObject *v22;
  xpc_object_t v23;
  uint64_t v24;
  xpc_object_t v25;
  void *v26;
  xpc_object_t object[2];

  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  if (!v6)
    return;
  v7 = v6;
  v8 = a1[5];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
  {
    if (!v8)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    if (!v8)
      return;
  }
  v11 = xpc_dictionary_create(0, 0, 0);
  v12 = v11;
  v13 = MEMORY[0x1E0C812F8];
  if (v11)
  {
    v26 = v11;
  }
  else
  {
    v12 = xpc_null_create();
    v26 = v12;
    if (!v12)
    {
      v14 = xpc_null_create();
      v12 = 0;
      goto LABEL_16;
    }
  }
  if (MEMORY[0x1C3B8A86C](v12) != v13)
  {
    v14 = xpc_null_create();
LABEL_16:
    v26 = v14;
    goto LABEL_17;
  }
  xpc_retain(v12);
LABEL_17:
  xpc_release(v12);
  v15 = v26;
  if (MEMORY[0x1C3B8A86C](v26) == v13)
  {
    v19 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 == v19)
    {
      v22 = *(NSObject **)(v5 + 88);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(object[0]) = 0;
        _os_log_impl(&dword_1BF335000, v22, OS_LOG_TYPE_DEFAULT, "#I Thermal IDs are empty!", (uint8_t *)object, 2u);
      }
      v23 = xpc_null_create();
      v24 = a1[7];
      object[0] = v23;
      v25 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v24 + 16))(v24, 3760250880, object);
      xpc_release(object[0]);
      xpc_release(v25);
    }
    else
    {
      v20 = xpc_data_create(*(const void **)a2, v19 - *(_QWORD *)a2);
      if (!v20)
        v20 = xpc_null_create();
      xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x1E0CFB070], v20);
      v21 = xpc_null_create();
      xpc_release(v20);
      xpc_release(v21);
      LODWORD(object[0]) = 0;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 7, (unsigned int *)object, &v26);
      v15 = v26;
    }
  }
  else
  {
    v16 = xpc_null_create();
    v17 = a1[7];
    object[0] = v16;
    v18 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v17 + 16))(v17, 3760250880, object);
    xpc_release(object[0]);
    xpc_release(v18);
  }
  xpc_release(v15);
}

void sub_1BF399844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  void *v11;
  void *v12;

  xpc_release(object);
  xpc_release(v12);
  xpc_release(v11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  const void *v5;
  void *v6;
  const void *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;

  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)(*a1 + 16);
  v4 = *(unsigned int *)(*a1 + 24);
  v5 = *(const void **)(*a1 + 32);
  if (v5)
    v6 = _Block_copy(v5);
  else
    v6 = 0;
  v12 = v6;
  CPMSModule::configureThermalReportFrequency_sync(v3, v4, &v12);
  if (v6)
    _Block_release(v6);
  v7 = (const void *)v2[4];
  if (v7)
    _Block_release(v7);
  v8 = (std::__shared_weak_count *)v2[1];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  operator delete(v2);
  v9 = (std::__shared_weak_count *)a1[2];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(a1);
}

void sub_1BF3999C8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  const void *v3;
  const void *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  if (v3)
    _Block_release(v3);
  v5 = (const void *)v2[4];
  if (v5)
    _Block_release(v5);
  v6 = (std::__shared_weak_count *)v2[1];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(v2);
  v7 = (std::__shared_weak_count *)v1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  void *v9;
  NSObject *v10;
  const void *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD v17[6];
  std::__shared_weak_count *v18;
  void *v19;
  void *aBlock;
  dispatch_object_t object;

  v2 = (_QWORD *)*a1;
  v4 = *(_QWORD **)(*a1 + 16);
  v3 = *(void **)(*a1 + 24);
  if (v3)
  {
    v5 = v4[24];
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3321888768;
    v17[2] = ___ZZZZN10CPMSModule10initializeEN8dispatch13group_sessionEEUb_EUb2_ENK3__3clEv_block_invoke;
    v17[3] = &__block_descriptor_64_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_e240_v32__0_vector_abm::PowerMitigationData__std::allocator_abm::PowerMitigationData_____PowerMitigationData___PowerMitigationData____compressed_pair_abm::PowerMitigationData____std::allocator_abm::PowerMitigationData_____PowerMitigationData___8l;
    v17[4] = v4;
    v17[5] = *v2;
    v6 = (std::__shared_weak_count *)v2[1];
    v18 = v6;
    if (!v6)
      goto LABEL_6;
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    v3 = (void *)v2[3];
    if (v3)
LABEL_6:
      v3 = _Block_copy(v3);
    v19 = v3;
    v9 = _Block_copy(v17);
    v10 = v4[17];
    if (v10)
      dispatch_retain(v10);
    aBlock = v9;
    object = v10;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 72))(v5, &aBlock);
    if (object)
      dispatch_release(object);
    if (aBlock)
      _Block_release(aBlock);
    if (v19)
      _Block_release(v19);
    if (v18)
    {
      std::__shared_weak_count::__release_weak(v18);
      v11 = (const void *)v2[3];
      if (!v11)
        goto LABEL_21;
LABEL_20:
      _Block_release(v11);
      goto LABEL_21;
    }
LABEL_19:
    v11 = (const void *)v2[3];
    if (!v11)
      goto LABEL_21;
    goto LABEL_20;
  }
  v12 = v4[11];
  if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    goto LABEL_19;
  LOWORD(v17[0]) = 0;
  _os_log_error_impl(&dword_1BF335000, v12, OS_LOG_TYPE_ERROR, "Expected response handler", (uint8_t *)v17, 2u);
  v11 = (const void *)v2[3];
  if (v11)
    goto LABEL_20;
LABEL_21:
  v13 = (std::__shared_weak_count *)v2[1];
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  operator delete(v2);
  v14 = (std::__shared_weak_count *)a1[2];
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  operator delete(a1);
}

void sub_1BF399C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *a16, void *aBlock, dispatch_object_t object)
{
  _QWORD *v18;
  _QWORD *v19;
  const void *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;

  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (a16)
    _Block_release(a16);
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  v21 = (const void *)v19[3];
  if (v21)
    _Block_release(v21);
  v22 = (std::__shared_weak_count *)v19[1];
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  operator delete(v19);
  v23 = (std::__shared_weak_count *)v18[2];
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  operator delete(v18);
  _Unwind_Resume(a1);
}

void ___ZZZZN10CPMSModule10initializeEN8dispatch13group_sessionEEUb_EUb2_ENK3__3clEv_block_invoke(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  uint64_t v13;
  xpc_object_t v14;
  void *v15;
  xpc_object_t v16;
  uint64_t v17;
  xpc_object_t v18;
  uint64_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  NSObject *v22;
  xpc_object_t v23;
  uint64_t v24;
  xpc_object_t v25;
  void *v26;
  xpc_object_t object[2];

  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  if (!v6)
    return;
  v7 = v6;
  v8 = a1[5];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
  {
    if (!v8)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    if (!v8)
      return;
  }
  v11 = xpc_dictionary_create(0, 0, 0);
  v12 = v11;
  v13 = MEMORY[0x1E0C812F8];
  if (v11)
  {
    v26 = v11;
  }
  else
  {
    v12 = xpc_null_create();
    v26 = v12;
    if (!v12)
    {
      v14 = xpc_null_create();
      v12 = 0;
      goto LABEL_16;
    }
  }
  if (MEMORY[0x1C3B8A86C](v12) != v13)
  {
    v14 = xpc_null_create();
LABEL_16:
    v26 = v14;
    goto LABEL_17;
  }
  xpc_retain(v12);
LABEL_17:
  xpc_release(v12);
  v15 = v26;
  if (MEMORY[0x1C3B8A86C](v26) == v13)
  {
    v19 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 == v19)
    {
      v22 = *(NSObject **)(v5 + 88);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(object[0]) = 0;
        _os_log_impl(&dword_1BF335000, v22, OS_LOG_TYPE_DEFAULT, "#I Power Mitigation Data are empty!", (uint8_t *)object, 2u);
      }
      v23 = xpc_null_create();
      v24 = a1[7];
      object[0] = v23;
      v25 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v24 + 16))(v24, 3760250880, object);
      xpc_release(object[0]);
      xpc_release(v25);
    }
    else
    {
      v20 = xpc_data_create(*(const void **)a2, v19 - *(_QWORD *)a2);
      if (!v20)
        v20 = xpc_null_create();
      xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x1E0CFB7C8], v20);
      v21 = xpc_null_create();
      xpc_release(v20);
      xpc_release(v21);
      LODWORD(object[0]) = 0;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 7, (unsigned int *)object, &v26);
      v15 = v26;
    }
  }
  else
  {
    v16 = xpc_null_create();
    v17 = a1[7];
    object[0] = v16;
    v18 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v17 + 16))(v17, 3760250880, object);
    xpc_release(object[0]);
    xpc_release(v18);
  }
  xpc_release(v15);
}

void sub_1BF399F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  void *v11;
  void *v12;

  xpc_release(object);
  xpc_release(v12);
  xpc_release(v11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  xpc_object_t v5;
  uint64_t v6;
  xpc_object_t v7;
  void *v8;
  xpc_object_t value;
  xpc_object_t v10;
  xpc_object_t v11;
  const void *bytes_ptr;
  int64_t length;
  uint64_t v14;
  char *v15;
  char *v16;
  unsigned __int8 *v17;
  unint64_t v18;
  uint64_t **v19;
  unsigned int v20;
  NSObject *v21;
  void *p_object;
  int v23;
  char *v25;
  int v26;
  uint64_t *v27;
  uint64_t **v28;
  uint64_t **v29;
  unsigned int v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t *v33;
  xpc_object_t v34;
  uint64_t v35;
  xpc_object_t v36;
  const void *v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unint64_t v46;
  xpc_object_t object;
  _QWORD *v48;
  uint64_t v49;
  id v50;
  void *__p[3];
  _BYTE v52[12];
  __int16 v53;
  int v54;
  uint64_t v55;

  v1 = a1;
  v55 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  if (MEMORY[0x1C3B8A86C](*(_QWORD *)(*a1 + 24)) != MEMORY[0x1E0C812F8] || (v8 = *(void **)(v2 + 24)) == 0)
  {
    v4 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object) = 0;
      _os_log_error_impl(&dword_1BF335000, v4, OS_LOG_TYPE_ERROR, "Expected intput/response handler", (uint8_t *)&object, 2u);
      if (!*(_QWORD *)(v2 + 32))
        goto LABEL_49;
    }
    else if (!*(_QWORD *)(v2 + 32))
    {
      goto LABEL_49;
    }
    v5 = xpc_null_create();
    v6 = *(_QWORD *)(v2 + 32);
    object = v5;
    v7 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, 3760250880, &object);
    xpc_release(object);
    xpc_release(v7);
    goto LABEL_49;
  }
  memset(__p, 170, sizeof(__p));
  value = xpc_dictionary_get_value(v8, (const char *)*MEMORY[0x1E0CFB540]);
  *(_QWORD *)v52 = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)v52 = xpc_null_create();
  object = 0;
  v48 = 0;
  v49 = 0;
  v42 = v1;
  v44 = v2;
  xpc::dyn_cast_or_default();
  xpc_release(*(xpc_object_t *)v52);
  v10 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFB160]);
  v11 = v10;
  if (v10)
    xpc_retain(v10);
  else
    v11 = xpc_null_create();
  v43 = v11;
  bytes_ptr = xpc_data_get_bytes_ptr(v11);
  length = xpc_data_get_length(v11);
  v14 = length;
  if (length >= 4)
  {
    v15 = (char *)operator new(length & 0xFFFFFFFFFFFFFFFCLL);
    memcpy(v15, bytes_ptr, v14 & 0xFFFFFFFFFFFFFFFCLL);
    v16 = &v15[4 * (v14 >> 2)];
    v17 = (unsigned __int8 *)__p[0];
    v45 = (unsigned __int8 *)__p[1];
    if (__p[0] == __p[1])
      goto LABEL_41;
LABEL_16:
    v18 = 0;
    v19 = (uint64_t **)(v3 + 248);
    v46 = (v16 - v15) >> 2;
    do
    {
      v20 = *v17;
      v21 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        abm::asString();
        if (v46 <= v18)
          std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
        p_object = &object;
        if (v49 < 0)
          p_object = object;
        v23 = *(_DWORD *)&v15[4 * v18];
        *(_DWORD *)v52 = 136315394;
        *(_QWORD *)&v52[4] = p_object;
        v53 = 1024;
        v54 = v23;
        _os_log_impl(&dword_1BF335000, v21, OS_LOG_TYPE_DEFAULT, "#I Budget Scale: %s, value: %d", v52, 0x12u);
        if (SHIBYTE(v49) < 0)
          operator delete(object);
      }
      if (v46 <= v18)
        std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
      if (v20 <= 0xD && ((1 << v20) & 0x3C07) != 0)
      {
        v25 = v15;
        v26 = *(_DWORD *)&v15[4 * v18];
        v27 = *v19;
        v28 = (uint64_t **)(v3 + 248);
        v29 = (uint64_t **)(v3 + 248);
        if (*v19)
        {
          while (1)
          {
            while (1)
            {
              v29 = (uint64_t **)v27;
              v30 = *((unsigned __int8 *)v27 + 28);
              if (v30 <= v20)
                break;
              v27 = *v29;
              v28 = v29;
              if (!*v29)
                goto LABEL_38;
            }
            if (v30 >= v20)
              break;
            v27 = v29[1];
            if (!v27)
            {
              v28 = v29 + 1;
              goto LABEL_38;
            }
          }
          v31 = v29;
        }
        else
        {
LABEL_38:
          v31 = operator new(0x28uLL);
          v31[28] = v20;
          v31[32] = 0;
          v31[36] = 0;
          *(_QWORD *)v31 = 0;
          *((_QWORD *)v31 + 1) = 0;
          *((_QWORD *)v31 + 2) = v29;
          *v28 = (uint64_t *)v31;
          v32 = **(_QWORD **)(v3 + 240);
          v33 = (uint64_t *)v31;
          if (v32)
          {
            *(_QWORD *)(v3 + 240) = v32;
            v33 = *v28;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 248), v33);
          ++*(_QWORD *)(v3 + 256);
        }
        *((_DWORD *)v31 + 8) = v26;
        v31[36] = 1;
        v15 = v25;
      }
      ++v18;
      ++v17;
    }
    while (v17 != v45);
    goto LABEL_41;
  }
  v15 = 0;
  v16 = 0;
  v17 = (unsigned __int8 *)__p[0];
  v45 = (unsigned __int8 *)__p[1];
  if (__p[0] != __p[1])
    goto LABEL_16;
LABEL_41:
  object = &v48;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  if ((xpc_object_t *)(v3 + 240) != &object)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&object, *(_QWORD **)(v3 + 240), (_QWORD *)(v3 + 248));
  v50 = (id)objc_msgSend(*(id *)(v3 + 264), "copy");
  v2 = v44;
  CPMSModule::sendPowerBudgetToBB_sync(v3, (_QWORD **)&object);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&object, v48);
  v48 = 0;
  v49 = 0;
  object = &v48;

  v50 = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&object, v48);
  v48 = 0;
  v49 = 0;
  object = &v48;
  v1 = v42;
  if (*(_QWORD *)(v44 + 32))
  {
    v34 = xpc_null_create();
    v35 = *(_QWORD *)(v44 + 32);
    *(_QWORD *)v52 = v34;
    v36 = xpc_null_create();
    (*(void (**)(uint64_t, _QWORD, _BYTE *))(v35 + 16))(v35, 0, v52);
    xpc_release(*(xpc_object_t *)v52);
    xpc_release(v36);
  }
  if (v15)
    operator delete(v15);
  xpc_release(v43);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_49:
  v37 = *(const void **)(v2 + 32);
  if (v37)
    _Block_release(v37);
  xpc_release(*(xpc_object_t *)(v2 + 24));
  *(_QWORD *)(v2 + 24) = 0;
  v38 = *(std::__shared_weak_count **)(v2 + 8);
  if (v38)
    std::__shared_weak_count::__release_weak(v38);
  operator delete((void *)v2);
  v39 = (std::__shared_weak_count *)v1[2];
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  operator delete(v1);
}

void sub_1BF39A500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, xpc_object_t object, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, xpc_object_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,xpc_object_t a25)
{
  const void *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;

  xpc_release(object);
  if (__p)
    operator delete(__p);
  if (a12)
  {
    v26 = (const void *)*((_QWORD *)a12 + 4);
    if (v26)
      _Block_release(v26);
    xpc_release(*((xpc_object_t *)a12 + 3));
    *((_QWORD *)a12 + 3) = 0;
    v27 = (std::__shared_weak_count *)*((_QWORD *)a12 + 1);
    if (v27)
      std::__shared_weak_count::__release_weak(v27);
    operator delete(a12);
  }
  v28 = (std::__shared_weak_count *)a10[2];
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_1BF39A6F8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZNS3_10initializeENS_13group_sessionEEUb_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  CPMSModule **v2;
  CPMSModule *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(CPMSModule ***)a1;
  v3 = **(CPMSModule ***)a1;
  CPMSModule::finishInitialization_sync(v3);
  CPMSModule::evaluatePowerBudgetNeed_sync(v3);
  operator delete(v2);
  v4 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (!v4)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    operator delete(a1);
  }
  else
  {
LABEL_5:
    operator delete(a1);
  }
}

void sub_1BF39A7B8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v3 = v2;
  operator delete(v3);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10CPMSModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10CPMSModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZNS3_20initPowerConfig_syncEvEUb4_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(void *a1)
{
  NSDictionary **v2;
  NSDictionary *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  void **v8;
  void **p_p;
  _BYTE *v10;
  int v11;
  NSObject *v12;
  id NSDict;
  const char *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *__p;
  _QWORD *v19;
  uint64_t v20;
  id v21;
  _BYTE v22[24];
  id v23;
  _BYTE v24[24];
  id v25;
  __int128 buf;
  uint64_t v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = *(NSDictionary ***)a1;
  v3 = **(NSDictionary ***)a1;
  if (!v3)
    goto LABEL_17;
  v4 = (uint64_t)v2[1];
  v5 = *(NSObject **)(v4 + 88);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v3;
    _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "#I Given budget from CPMS is %@", (uint8_t *)&buf, 0xCu);
    v3 = *v2;
  }
  PowerBudget::fill((id *)(v4 + 240), v3);
  *(_QWORD *)&buf = (char *)&buf + 8;
  *((_QWORD *)&buf + 1) = 0;
  v27 = 0;
  v28 = 0;
  PowerBudget::fill((id *)&buf, *v2);
  v6 = *(NSObject **)(v4 + 88);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    PowerBudget::to_string((PowerBudget *)&buf, &__p);
    v7 = SHIBYTE(v20);
    v8 = (void **)__p;
    PowerBudget::to_string((PowerBudget *)(v4 + 240), v24);
    p_p = &__p;
    if (v7 < 0)
      p_p = v8;
    if (v24[23] >= 0)
      v10 = v24;
    else
      v10 = *(_BYTE **)v24;
    *(_DWORD *)v22 = 136315394;
    *(_QWORD *)&v22[4] = p_p;
    *(_WORD *)&v22[12] = 2080;
    *(_QWORD *)&v22[14] = v10;
    _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, "#I Budget from CPMS: %s, Cached Budgets: %s", v22, 0x16u);
    if ((v24[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v24);
      if ((SHIBYTE(v20) & 0x80000000) == 0)
        goto LABEL_12;
    }
    else if ((SHIBYTE(v20) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete(__p);
  }
LABEL_12:
  __p = &v19;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&__p, (_QWORD *)buf, (_QWORD *)&buf + 1);
  v21 = (id)objc_msgSend(v28, "copy");
  v11 = objc_msgSend(*(id *)(v4 + 168), "acknowledgePowerBudget:forClientId:error:", PowerBudget::getNSDict(&__p), 4, 0);
  v12 = *(NSObject **)(v4 + 88);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    NSDict = PowerBudget::getNSDict(&__p);
    v14 = "failed";
    if (v11)
      v14 = "succeeded";
    *(_DWORD *)v24 = 136315394;
    *(_QWORD *)&v24[4] = v14;
    *(_WORD *)&v24[12] = 2112;
    *(_QWORD *)&v24[14] = NSDict;
    _os_log_impl(&dword_1BF335000, v12, OS_LOG_TYPE_DEFAULT, "#I Acked CPMS %s for power budget %@", v24, 0x16u);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&__p, v19);
  v19 = 0;
  v20 = 0;
  __p = &v19;

  v21 = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&__p, v19);
  v19 = 0;
  v20 = 0;
  __p = &v19;
  v25 = 0;
  *(_QWORD *)v24 = &v24[8];
  *(_OWORD *)&v24[8] = 0uLL;
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)v24, (_QWORD *)buf, (_QWORD *)&buf + 1);
  v25 = (id)objc_msgSend(v28, "copy");
  CPMSModule::evaluateBrickMode_sync(v4, (__int128 *)v24);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v24, *(_QWORD **)&v24[8]);
  *(_OWORD *)&v24[8] = 0uLL;
  *(_QWORD *)v24 = &v24[8];

  v25 = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v24, *(_QWORD **)&v24[8]);
  *(_OWORD *)&v24[8] = 0uLL;
  v23 = 0;
  *(_QWORD *)v24 = &v24[8];
  *(_OWORD *)&v22[8] = 0uLL;
  *(_QWORD *)v22 = &v22[8];
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)v22, (_QWORD *)buf, (_QWORD *)&buf + 1);
  v23 = (id)objc_msgSend(v28, "copy");
  CPMSModule::sendPowerBudgetToBB_sync(v4, (_QWORD **)v22);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v22, *(_QWORD **)&v22[8]);
  *(_OWORD *)&v22[8] = 0uLL;
  *(_QWORD *)v22 = &v22[8];

  v23 = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v22, *(_QWORD **)&v22[8]);
  *(_OWORD *)&v22[8] = 0uLL;
  *(_QWORD *)v22 = &v22[8];

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&buf, *((_QWORD **)&buf + 1));
  *((_QWORD *)&buf + 1) = 0;
  v27 = 0;
  *(_QWORD *)&buf = (char *)&buf + 8;

  v28 = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&buf, *((_QWORD **)&buf + 1));
LABEL_17:
  operator delete(v2);
  v15 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator delete(a1);
}

void sub_1BF39AC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  void *v25;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  if (a14 < 0)
    operator delete(__p);
  PowerBudget::~PowerBudget((PowerBudget *)&a24);
  operator delete(v25);
  v27 = (std::__shared_weak_count *)v24[2];
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  operator delete(v24);
  _Unwind_Resume(a1);
}

uint64_t ___ZN8dispatch9sync_implIRU13block_pointerFP12NSDictionaryvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 40) + 16))();
  **(_QWORD **)(a1 + 32) = result;
  return result;
}

uint64_t ___ZN8dispatch19async_and_wait_implIRU13block_pointerFP12NSDictionaryvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 40) + 16))();
  **(_QWORD **)(a1 + 32) = result;
  return result;
}

_QWORD *std::__function::__func<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0,std::allocator<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E78FF510;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0,std::allocator<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E78FF510;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0,std::allocator<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL *v3;
  _BOOL8 result;

  if (!*(_BYTE *)(a3 + 4))
    return 1;
  v3 = *(BOOL **)(a1 + 8);
  result = *(_DWORD *)a3 != 0;
  *v3 = *(_DWORD *)a3 == 0;
  return result;
}

uint64_t std::__function::__func<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0,std::allocator<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN10CPMSModule22evaluateBrickMode_syncE11PowerBudgetE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN10CPMSModule22evaluateBrickMode_syncE11PowerBudgetE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN10CPMSModule22evaluateBrickMode_syncE11PowerBudgetE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN10CPMSModule22evaluateBrickMode_syncE11PowerBudgetE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0,std::allocator<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::target_type()
{
}

uint64_t ctu::cf::insert<char const*,BOOL>(__CFDictionary *a1, const __CFString **a2, int a3, uint64_t a4, const __CFAllocator *a5)
{
  void *v7;
  void **v8;
  void *v9;
  BOOL v10;
  uint64_t v11;
  void *key;

  key = 0;
  ctu::cf::convert_copy((ctu::cf *)&key, a2, (const char *)0x8000100, a4, a5);
  v7 = key;
  v8 = (void **)MEMORY[0x1E0C9AE50];
  if (!a3)
    v8 = (void **)MEMORY[0x1E0C9AE40];
  v9 = *v8;
  key = *v8;
  if (v7)
    v10 = v9 == 0;
  else
    v10 = 1;
  v11 = !v10;
  if (v10)
  {
    if (!v9)
      goto LABEL_13;
  }
  else
  {
    CFDictionaryAddValue(a1, v7, v9);
  }
  CFRelease(v9);
LABEL_13:
  if (v7)
    CFRelease(v7);
  return v11;
}

void sub_1BF39AFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_64()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1BF335000);
  }
  return result;
}

void Simulator::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  uint64_t v10[2];

  v4 = operator new(0xB0uLL);
  v5 = (uint64_t)v4;
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  v10[0] = v6;
  v10[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  Simulator::Simulator((uint64_t)v4, v10);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<Simulator>::shared_ptr[abi:ne180100]<Simulator,std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator*)#1},void>(a2, v5);
  ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2 + 48);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF39B0FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

uint64_t Simulator::Simulator(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *initially_inactive;
  NSObject *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE v20[16];
  _QWORD block[5];
  _BYTE v22[16];

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_1E7908A38;
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(_QWORD *)a1 = &unk_1E78FC4E8;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_1E78FC4E8;
    *(_QWORD *)(a1 + 8) = v3;
  }
  *(_QWORD *)a1 = off_1E78FF5A0;
  *(_QWORD *)(a1 + 48) = &unk_1E78FF610;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v20, "com.apple.telephony.abm", "simulator");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_2;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v11 = GetABMLogServer(void)::sLogServer;
    v10 = *(std::__shared_weak_count **)algn_1ED710088;
    if (*(_QWORD *)algn_1ED710088)
      goto LABEL_12;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v11 = GetABMLogServer(void)::sLogServer;
    v10 = *(std::__shared_weak_count **)algn_1ED710088;
    if (*(_QWORD *)algn_1ED710088)
    {
LABEL_12:
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v15 = dispatch_queue_create_with_target_V2("simulator", initially_inactive, 0);
  dispatch_set_qos_class_floor(v15, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v15);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v15;
  if (v15)
  {
    dispatch_retain(v15);
    *(_QWORD *)(a1 + 144) = 0;
    dispatch_release(v15);
  }
  else
  {
    *(_QWORD *)(a1 + 144) = 0;
  }
  *(_QWORD *)(a1 + 48) = off_1E78FF7F0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)block);
  *(_QWORD *)(a1 + 56) = &unk_1E78FB900;
  *(_QWORD *)(a1 + 104) = v11;
  *(_QWORD *)(a1 + 112) = v10;
  if (v10)
  {
    v16 = (unint64_t *)&v10->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
    *(_QWORD *)(a1 + 48) = off_1E78FF880;
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
    *(_QWORD *)(a1 + 48) = off_1E78FF880;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v20);
  *(_QWORD *)a1 = off_1E78FF5A0;
  *(_QWORD *)(a1 + 48) = &unk_1E78FF610;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  return a1;
}

void sub_1BF39B44C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  Service *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v4 - 64));
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  Service::~Service(v2);
  _Unwind_Resume(a1);
}

void sub_1BF39B488(_Unwind_Exception *a1)
{
  Service *v1;

  Service::~Service(v1);
  _Unwind_Resume(a1);
}

const char *Simulator::getName(Simulator *this)
{
  return "simulator";
}

void Simulator::initialize(_QWORD *a1, NSObject **a2)
{
  uint64_t *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD v15[5];
  dispatch_group_t group;

  v3 = a1 + 15;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1174405120;
  v15[2] = ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke;
  v15[3] = &__block_descriptor_tmp_5_3;
  v4 = *a2;
  v15[4] = a1;
  group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  ctu::SharedSynchronizable<Simulator>::execute_wrapped(v3, (uint64_t)v15);
  v5 = (std::__shared_weak_count *)a1[16];
  if (!v5 || (v6 = a1[15], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v9 = operator new(8uLL);
  *v9 = a1;
  v10 = a1[17];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = operator new(0x18uLL);
  *v13 = v9;
  v13[1] = v6;
  v13[2] = v8;
  dispatch_async_f(v10, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<Simulator>::execute_wrapped<Simulator::initialize(dispatch::group_session)::$_0>(Simulator::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<Simulator::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<Simulator::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void *v10;
  size_t v11;
  void *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  _QWORD aBlock[6];
  std::__shared_weak_count *v19;
  const void *v20;
  void *__dst[2];
  unint64_t v22;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (v3 = *(_QWORD *)(v1 + 120), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (const void *)*MEMORY[0x1E0CFBF58];
  v11 = strlen((const char *)*MEMORY[0x1E0CFBF58]);
  if (v11 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = (void *)v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = (void **)operator new(v14 + 1);
    __dst[1] = v12;
    v22 = v15 | 0x8000000000000000;
    __dst[0] = v13;
  }
  else
  {
    HIBYTE(v22) = v11;
    v13 = __dst;
    if (!v11)
      goto LABEL_17;
  }
  memmove(v13, v10, (size_t)v12);
LABEL_17:
  *((_BYTE *)v12 + (_QWORD)v13) = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_4;
  aBlock[4] = v1;
  aBlock[5] = v3;
  v19 = v5;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  v17 = _Block_copy(aBlock);
  v20 = v17;
  Service::registerCommandHandler(v1, (uint64_t)__dst, &v20);
  if (v17)
    _Block_release(v17);
  if (SHIBYTE(v22) < 0)
    operator delete(__dst[0]);
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF39B7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__shared_weak_count *v23;
  const void *v24;

  if (v24)
    _Block_release(v24);
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_5:
      std::__shared_weak_count::__release_weak(v23);
      _Unwind_Resume(a1);
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  std::__shared_weak_count::__release_weak(v23);
  _Unwind_Resume(a1);
}

void sub_1BF39B808(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke_2(_QWORD *a1, void **a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  void *v10;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  xpc_object_t object;
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 1174405120;
      v14[2] = ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke_3;
      v14[3] = &__block_descriptor_tmp_6;
      v10 = *a2;
      v14[4] = v7;
      object = v10;
      if (v10)
      {
        xpc_retain(v10);
        v11 = *a3;
        if (!*a3)
          goto LABEL_9;
      }
      else
      {
        object = xpc_null_create();
        v11 = *a3;
        if (!*a3)
        {
LABEL_9:
          aBlock = v11;
          ctu::SharedSynchronizable<Simulator>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v14);
          if (aBlock)
            _Block_release(aBlock);
          xpc_release(object);
          object = 0;
          goto LABEL_12;
        }
      }
      v11 = _Block_copy(v11);
      goto LABEL_9;
    }
  }
}

void ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke_3(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t value;
  int v4;
  xpc_object_t v5;
  uint64_t v6;
  xpc_object_t v7;
  xpc_object_t object;

  v2 = *(_QWORD *)(a1 + 32);
  value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E0CFBD08]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  v4 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  if ((v4 | 0xE0000000) != 0xE0000270)
    *(_BYTE *)(v2 + 168) = (v4 | 0xE0000000) == -536870272;
  v5 = xpc_null_create();
  v6 = *(_QWORD *)(a1 + 48);
  object = v5;
  v7 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, 3760250880, &object);
  xpc_release(object);
  xpc_release(v7);
}

void sub_1BF39BA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

uint64_t Simulator::handleSimulatedPowerNotification_sync(Simulator *this, int a2)
{
  if (a2 != -536870288)
    *((_BYTE *)this + 168) = a2 == -536870272;
  return 0;
}

void *__copy_helper_block_e8_40c15_ZTSN3xpc4dictE48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *result;

  v4 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
  {
    xpc_retain(v4);
    result = *(void **)(a2 + 48);
    if (!result)
      goto LABEL_6;
    goto LABEL_5;
  }
  *(_QWORD *)(a1 + 40) = xpc_null_create();
  result = *(void **)(a2 + 48);
  if (result)
LABEL_5:
    result = _Block_copy(result);
LABEL_6:
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_40c15_ZTSN3xpc4dictE48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 48);
  if (v2)
    _Block_release(v2);
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
}

uint64_t __copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9SimulatorEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9SimulatorEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void Simulator::finishInitialization_sync(std::__shared_weak_count **this)
{
  const char *v2;
  size_t v3;
  void *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  const void *v24;
  size_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  NSObject *v32;
  _QWORD v33[6];
  std::__shared_weak_count *v34;
  void *aBlock;
  dispatch_object_t object;
  void *__p[2];
  unint64_t v38;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v41;
  __int128 v42;

  v2 = (const char *)((uint64_t (*)(std::__shared_weak_count **))(*this)->__shared_weak_owners_)(this);
  v3 = strlen(v2);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    v5 = (void **)operator new(v6 + 1);
    __dst[1] = v4;
    v41 = v7 | 0x8000000000000000;
    __dst[0] = v5;
  }
  else
  {
    HIBYTE(v41) = v3;
    v5 = __dst;
    if (!v3)
      goto LABEL_9;
  }
  memmove(v5, v2, (size_t)v4);
LABEL_9:
  *((_BYTE *)v4 + (_QWORD)v5) = 0;
  cf = 0;
  AppleBasebandManager::create();
  v8 = v42;
  v42 = 0uLL;
  v9 = this[20];
  *(_OWORD *)(this + 19) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_18;
  v13 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
  {
LABEL_18:
    v15 = cf;
    if (!cf)
      goto LABEL_20;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  v15 = cf;
  if (cf)
LABEL_19:
    CFRelease(v15);
LABEL_20:
  if (SHIBYTE(v41) < 0)
    operator delete(__dst[0]);
  v16 = this[16];
  if (!v16 || (v17 = this[15], (v18 = std::__shared_weak_count::lock(v16)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = v18;
  p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
  do
    v21 = __ldxr(p_shared_weak_owners);
  while (__stxr(v21 + 1, p_shared_weak_owners));
  v22 = (unint64_t *)&v18->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v19);
  }
  v24 = (const void *)*MEMORY[0x1E0CFBBB0];
  v25 = strlen((const char *)*MEMORY[0x1E0CFBBB0]);
  if (v25 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v26 = (void *)v25;
  if (v25 >= 0x17)
  {
    v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v28 = v25 | 7;
    v29 = v28 + 1;
    v27 = operator new(v28 + 1);
    __p[1] = v26;
    v38 = v29 | 0x8000000000000000;
    __p[0] = v27;
  }
  else
  {
    HIBYTE(v38) = v25;
    v27 = __p;
    if (!v25)
      goto LABEL_38;
  }
  memmove(v27, v24, (size_t)v26);
LABEL_38:
  *((_BYTE *)v26 + (_QWORD)v27) = 0;
  v33[0] = MEMORY[0x1E0C809B0];
  v33[1] = 1174405120;
  v33[2] = ___ZN9Simulator25finishInitialization_syncEv_block_invoke;
  v33[3] = &__block_descriptor_tmp_7_1;
  v33[4] = this;
  v33[5] = v17;
  v34 = v19;
  do
    v30 = __ldxr(p_shared_weak_owners);
  while (__stxr(v30 + 1, p_shared_weak_owners));
  v31 = _Block_copy(v33);
  v32 = this[17];
  if (v32)
    dispatch_retain((dispatch_object_t)this[17]);
  aBlock = v31;
  object = v32;
  AppleBasebandManager::setEventHandler();
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (SHIBYTE(v38) < 0)
    operator delete(__p[0]);
  AppleBasebandManager::eventsOn((AppleBasebandManager *)this[19]);
  if (v34)
    std::__shared_weak_count::__release_weak(v34);
  std::__shared_weak_count::__release_weak(v19);
}

void sub_1BF39BEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::__shared_weak_count *v30;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  std::__shared_weak_count::__release_weak(v30);
  _Unwind_Resume(a1);
}

void ___ZN9Simulator25finishInitialization_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t v9[16];

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5] && *(_BYTE *)(v3 + 168))
      {
        v6 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v9 = 0;
          _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, "#I Baseband reset during simulated low power, simulating exit low power", v9, 2u);
        }
        *(_BYTE *)(v3 + 168) = 0;
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

_BYTE *Simulator::getShutdownStages@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *v3;
  _BYTE *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(1uLL);
  *a1 = v3;
  *v3 = 3;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void Simulator::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  uint64_t *v4;
  NSObject *v5;
  _QWORD v6[4];
  dispatch_group_t group;
  char v8;

  v4 = (uint64_t *)(a1 + 120);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 1174405120;
  v6[2] = ___ZN9Simulator8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v6[3] = &__block_descriptor_tmp_8_1;
  v5 = *a3;
  group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  v8 = a2;
  ctu::SharedSynchronizable<Simulator>::execute_wrapped(v4, (uint64_t)v6);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void Simulator::~Simulator(Simulator *this)
{
  void *v1;

  Simulator::~Simulator(this);
  operator delete(v1);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;

  *(_QWORD *)this = off_1E78FF5A0;
  *((_QWORD *)this + 6) = &unk_1E78FF610;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *((_QWORD *)this + 6) = off_1E78FF7F0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v5 = *((_QWORD *)this + 18);
  if (v5)
    dispatch_release(v5);
  v6 = *((_QWORD *)this + 17);
  if (v6)
    dispatch_release(v6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  *(_QWORD *)this = off_1E7908A38;
  v8 = *((_QWORD *)this + 3);
  if (v8)
  {
    v9 = *((_QWORD *)this + 4);
    v10 = (void *)*((_QWORD *)this + 3);
    if (v9 != v8)
    {
      do
      {
        if (*(char *)(v9 - 1) < 0)
          operator delete(*(void **)(v9 - 24));
        v9 -= 24;
      }
      while (v9 != v8);
      v10 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v8;
    operator delete(v10);
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
}

void `non-virtual thunk to'Simulator::~Simulator(Simulator *this)
{
  Simulator::~Simulator((Simulator *)((char *)this - 48));
}

{
  void *v1;

  Simulator::~Simulator((Simulator *)((char *)this - 48));
  operator delete(v1);
}

uint64_t ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E78FF7F0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E78FF7F0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF39C464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF39C480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<Simulator>::shared_ptr[abi:ne180100]<Simulator,std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E78FF830;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF39C59C(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator*)#1}::operator() const(Simulator*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF39C5BC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<Simulator *,std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator *)#1},std::allocator<Simulator>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<Simulator *,std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator *)#1},std::allocator<Simulator>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator*)#1}::operator() const(Simulator*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<Simulator *,std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator *)#1},std::allocator<Simulator>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI9SimulatorE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI9SimulatorE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI9SimulatorE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI9SimulatorE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator*)#1}::operator() const(Simulator*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *ctu::SharedLoggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E78FF7F0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E78FF7F0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void ctu::SharedSynchronizable<Simulator>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI9SimulatorE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E78FF8B8;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI9SimulatorE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c37_ZTSNSt3__110shared_ptrIK9SimulatorEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__110shared_ptrIK9SimulatorEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void dispatch::async<void ctu::SharedSynchronizable<Simulator>::execute_wrapped<Simulator::initialize(dispatch::group_session)::$_0>(Simulator::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<Simulator::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<Simulator::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  std::__shared_weak_count ***v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(std::__shared_weak_count ****)a1;
  Simulator::finishInitialization_sync(**(std::__shared_weak_count ****)a1);
  operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete((void *)a1);
  }
  else
  {
LABEL_5:
    operator delete((void *)a1);
  }
}

void sub_1BF39C958(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_1()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1BF335000);
  }
  return result;
}

void BluetoothManager::create(BluetoothManager *this@<X0>, BluetoothManager **a2@<X8>)
{
  BluetoothManager *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 v16;
  NSObject *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint8_t buf[8];

  v5 = (BluetoothManager *)operator new(0x40uLL);
  BluetoothManager::BluetoothManager(v5, (const char *)this);
  v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_1E78FF958;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  v21 = v6;
  *(_QWORD *)buf = 0;
  v8 = (std::__shared_weak_count *)*((_QWORD *)v5 + 2);
  if (v8)
  {
    if (v8->__shared_owners_ != -1)
      goto LABEL_14;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    *((_QWORD *)v5 + 1) = v5;
    *((_QWORD *)v5 + 2) = v6;
    std::__shared_weak_count::__release_weak(v8);
  }
  else
  {
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v13 = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    *((_QWORD *)v5 + 1) = v5;
    *((_QWORD *)v5 + 2) = v6;
  }
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_14:
  if (*(_QWORD *)buf)
    BluetoothManager::~BluetoothManager(*(BluetoothManager **)buf);
  if (v5 && BluetoothManager::init(v5))
  {
    *a2 = v5;
    a2[1] = (BluetoothManager *)v6;
    return;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED7100E0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v17 = qword_1ED7100E0;
    if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
      goto LABEL_23;
LABEL_29:
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF335000, v17, OS_LOG_TYPE_ERROR, "Failed to create Bluetooth Manager!", buf, 2u);
    *a2 = 0;
    a2[1] = 0;
    v18 = v21;
    if (!v21)
      return;
    goto LABEL_24;
  }
  dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
  v17 = qword_1ED7100E0;
  if (os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
    goto LABEL_29;
LABEL_23:
  *a2 = 0;
  a2[1] = 0;
  v18 = v21;
  if (!v21)
    return;
LABEL_24:
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
}

void sub_1BF39CC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF39CC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unique_ptr<BluetoothManager>::~unique_ptr[abi:ne180100]((BluetoothManager **)va);
  _Unwind_Resume(a1);
}

void sub_1BF39CC70(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL BluetoothManager::init(BluetoothManager *this)
{
  id v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  _QWORD v17[6];
  std::__shared_weak_count *v18;
  _QWORD v19[6];
  std::__shared_weak_count *v20;
  uint8_t buf[16];

  *((_BYTE *)this + 24) = 1;
  v2 = objc_alloc_init(MEMORY[0x1E0C97740]);
  *((_QWORD *)this + 4) = v2;
  v4 = *((_QWORD *)this + 1);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    v7 = (id)*((_QWORD *)this + 4);
    if (v7)
    {
LABEL_5:
      v8 = MEMORY[0x1E0C809B0];
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 3321888768;
      v19[2] = ___ZN16BluetoothManager4initEv_block_invoke;
      v19[3] = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrI16BluetoothManagerEE_e5_v8__0l;
      v19[4] = this;
      v19[5] = v4;
      v20 = v3;
      v9 = v7;
      if (v3)
      {
        v10 = (unint64_t *)&v3->__shared_weak_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        v9 = (void *)*((_QWORD *)this + 4);
      }
      objc_msgSend(v9, "setBluetoothStateChangedHandler:", v19);
      v12 = (void *)*((_QWORD *)this + 4);
      v17[0] = v8;
      v17[1] = 3321888768;
      v17[2] = ___ZN16BluetoothManager4initEv_block_invoke_3;
      v17[3] = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrI16BluetoothManagerEE_e17_v16__0__NSError_8l;
      v17[4] = this;
      v17[5] = v4;
      v18 = v3;
      if (v3)
      {
        v13 = (unint64_t *)&v3->__shared_weak_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      objc_msgSend(v12, "activateWithCompletion:", v17);
      if (v18)
        std::__shared_weak_count::__release_weak(v18);
      if (v20)
      {
        std::__shared_weak_count::__release_weak(v20);
        if (!v3)
          return v7 != 0;
        goto LABEL_20;
      }
      goto LABEL_19;
    }
  }
  else
  {
    v7 = v2;
    if (v2)
      goto LABEL_5;
  }
  v15 = *(NSObject **)this;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF335000, v15, OS_LOG_TYPE_ERROR, "Failed to create BluetoothManager interface", buf, 2u);
    if (!v3)
      return v7 != 0;
    goto LABEL_20;
  }
LABEL_19:
  if (v3)
LABEL_20:
    std::__shared_weak_count::__release_weak(v3);
  return v7 != 0;
}

void sub_1BF39CE24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v24;

  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    v24 = a22;
    if (!a22)
    {
LABEL_3:
      if (!v22)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v24 = a22;
    if (!a22)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v24);
  if (!v22)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  std::__shared_weak_count::__release_weak(v22);
  _Unwind_Resume(exception_object);
}

void BluetoothManager::BluetoothManager(BluetoothManager *this, const char *__s)
{
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  void **v13;
  std::string __dst;
  std::string v15;
  void *__p[2];
  int64_t v17;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4)
LABEL_8:
    memcpy(p_dst, __s, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  v9 = std::string::append(&__dst, ".", 1uLL);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v15, "BluetoothManager", 0x10uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v17 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v17 >= 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  ctu::OsLogLogger::OsLogLogger(this, "com.apple.telephony.abm", (const char *)v13);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_17:
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_15;
LABEL_18:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_15;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_17;
LABEL_14:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_18;
LABEL_15:
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = 0;
}

void sub_1BF39CFFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void BluetoothManager::~BluetoothManager(BluetoothManager *this)
{
  uint64_t v2;
  uint64_t i;
  NSObject *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  const void *v10;
  std::__shared_weak_count *v11;

  v2 = *((_QWORD *)this + 5);
  for (i = *((_QWORD *)this + 6); i != v2; i -= 16)
  {
    v4 = *(NSObject **)(i - 8);
    if (v4)
      dispatch_release(v4);
    v5 = *(const void **)(i - 16);
    if (v5)
      _Block_release(v5);
  }
  *((_QWORD *)this + 6) = v2;
  objc_msgSend(*((id *)this + 4), "invalidate");
  v6 = *((_QWORD *)this + 5);
  if (v6)
  {
    v7 = *((_QWORD *)this + 6);
    v8 = (void *)*((_QWORD *)this + 5);
    if (v7 != v6)
    {
      do
      {
        v9 = *(NSObject **)(v7 - 8);
        if (v9)
          dispatch_release(v9);
        v10 = *(const void **)(v7 - 16);
        if (v10)
          _Block_release(v10);
        v7 -= 16;
      }
      while (v7 != v6);
      v8 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v6;
    operator delete(v8);
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  JUMPOUT(0x1C3B89240);
}

void ___ZN16BluetoothManager4initEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  os_log_t *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  uint8_t v10[16];

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (os_log_t *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (v6)
      {
        v9 = *v3;
        if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)v10 = 0;
          _os_log_debug_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEBUG, "#D BluetoothManager Power Change Event", v10, 2u);
        }
        BluetoothManager::notifyClients((id *)v3);
      }
    }
  }
}

void BluetoothManager::notifyClients(id *this)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  char *v5;
  char *v6;
  void *v7;
  NSObject *v8;
  char v9;
  void *v10;
  const void *v11;
  void *v12;
  char v13;
  __int128 v14;
  uint64_t (*v15)(uint64_t);
  void *v16;
  void *aBlock;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(this[4], "bluetoothState");
  *((_BYTE *)this + 24) = v2 == 5;
  v3 = *this;
  if (os_log_type_enabled((os_log_t)*this, OS_LOG_TYPE_DEFAULT))
  {
    v4 = "Off";
    if (v2 == 5)
      v4 = "On";
    LODWORD(v14) = 136315138;
    *(_QWORD *)((char *)&v14 + 4) = v4;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Notifying BT Power: %s", (uint8_t *)&v14, 0xCu);
  }
  v5 = (char *)this[5];
  v6 = (char *)this[6];
  if (v5 != v6)
  {
    while (*(_QWORD *)v5)
    {
      v7 = _Block_copy(*(const void **)v5);
      v8 = *((_QWORD *)v5 + 1);
      if (v8)
        goto LABEL_10;
LABEL_11:
      v9 = *((_BYTE *)this + 24);
      if (v7)
      {
        v10 = _Block_copy(v7);
        v11 = v10;
        *(_QWORD *)&v14 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v14 + 1) = 3321888768;
        v15 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
        v16 = &__block_descriptor_41_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE_e5_v8__0l;
        if (v10)
        {
          v12 = _Block_copy(v10);
          v13 = 0;
        }
        else
        {
          v12 = 0;
          v13 = 1;
        }
      }
      else
      {
        v11 = 0;
        v12 = 0;
        *(_QWORD *)&v14 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v14 + 1) = 3321888768;
        v13 = 1;
        v15 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
        v16 = &__block_descriptor_41_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE_e5_v8__0l;
      }
      aBlock = v12;
      v18 = v9;
      dispatch_async(v8, &v14);
      if (aBlock)
        _Block_release(aBlock);
      if ((v13 & 1) == 0)
        _Block_release(v11);
      if (v8)
        dispatch_release(v8);
      if (v7)
        _Block_release(v7);
      v5 += 16;
      if (v5 == v6)
        return;
    }
    v7 = 0;
    v8 = *((_QWORD *)v5 + 1);
    if (!v8)
      goto LABEL_11;
LABEL_10:
    dispatch_retain(v8);
    goto LABEL_11;
  }
}

void sub_1BF39D408(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrI16BluetoothManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrI16BluetoothManagerEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN16BluetoothManager4initEv_block_invoke_3(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  uint8_t v12[16];

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      if (a2)
      {
        v11 = *(NSObject **)v5;
        if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v12 = 0;
          _os_log_error_impl(&dword_1BF335000, v11, OS_LOG_TYPE_ERROR, "Failed to activate BT Controller", v12, 2u);
        }
      }
      else
      {
        (*(void (**)(void))(objc_msgSend(*(id *)(v5 + 32), "bluetoothStateChangedHandler") + 16))();
      }
    }
  }
}

uint64_t BluetoothManager::getBTState(BluetoothManager *this)
{
  return *((unsigned __int8 *)this + 24);
}

_QWORD *BluetoothManager::registerCallback(_QWORD *a1, void **a2)
{
  _QWORD *v4;
  void *v5;
  NSObject *v6;
  _QWORD *result;

  v4 = (_QWORD *)a1[6];
  if ((unint64_t)v4 >= a1[7])
  {
    result = std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>(a1 + 5, (uint64_t)a2);
    a1[6] = result;
  }
  else
  {
    v5 = *a2;
    if (*a2)
      v5 = _Block_copy(v5);
    v6 = a2[1];
    *v4 = v5;
    v4[1] = v6;
    if (v6)
      dispatch_retain(v6);
    result = v4 + 2;
    a1[6] = v4 + 2;
  }
  return result;
}

_QWORD *std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  void *v9;
  NSObject *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  NSObject *v20;
  const void *v21;
  char *v23;
  BOOL v24;
  BOOL v25;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  double *v30;
  const double *v31;
  uint64_t v32;
  float64x2x2_t v33;

  v3 = a1[1] - *a1;
  v4 = (v3 >> 4) + 1;
  if (v4 >> 60)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v6 = a1[2] - *a1;
  if (v6 >> 3 > v4)
    v4 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  if (!v7)
  {
    v8 = 0;
    v9 = *(void **)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (v7 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v8 = (char *)operator new(16 * v7);
  v9 = *(void **)a2;
  if (*(_QWORD *)a2)
LABEL_12:
    v9 = _Block_copy(v9);
LABEL_13:
  v10 = *(NSObject **)(a2 + 8);
  v11 = &v8[16 * (v3 >> 4)];
  *(_QWORD *)v11 = v9;
  *((_QWORD *)v11 + 1) = v10;
  if (v10)
    dispatch_retain(v10);
  v12 = &v8[16 * v7];
  v13 = v11 + 16;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    v16 = (unint64_t)&v15[-*a1 - 16];
    if (v16 < 0xD0)
      goto LABEL_17;
    v23 = &v15[-(v16 & 0xFFFFFFFFFFFFFFF0)];
    v24 = &v8[v3 - 8 - (v16 & 0xFFFFFFFFFFFFFFF0)] >= v15 || v23 - 8 >= v11;
    v25 = !v24;
    if (v23 - 16 < &v8[v3 - 8] && &v8[v3 - (v16 & 0xFFFFFFFFFFFFFFF0) - 16] < v15 - 8)
      goto LABEL_17;
    if (v25)
      goto LABEL_17;
    v27 = (v16 >> 4) + 1;
    v28 = 16 * (v27 & 0x1FFFFFFFFFFFFFFELL);
    v17 = &v11[-v28];
    v29 = &v15[-v28];
    v30 = (double *)(v11 - 32);
    v31 = (const double *)(v15 - 32);
    v32 = v27 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v33 = vld2q_f64(v31);
      vst2q_f64(v30, v33);
      *(_OWORD *)v31 = 0uLL;
      *((_OWORD *)v31 + 1) = 0uLL;
      v31 -= 4;
      v30 -= 4;
      v32 -= 2;
    }
    while (v32);
    v11 = v17;
    v15 = v29;
    if (v27 != (v27 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_17:
      v17 = v11;
      do
      {
        v18 = *((_OWORD *)v15 - 1);
        v15 -= 16;
        *((_OWORD *)v17 - 1) = v18;
        v17 -= 16;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = v17;
    a1[1] = v13;
    a1[2] = v12;
    while (v19 != v15)
    {
      v20 = *((_QWORD *)v19 - 1);
      if (v20)
        dispatch_release(v20);
      v21 = (const void *)*((_QWORD *)v19 - 2);
      if (v21)
        _Block_release(v21);
      v19 -= 16;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

BluetoothManager **std::unique_ptr<BluetoothManager>::~unique_ptr[abi:ne180100](BluetoothManager **a1)
{
  BluetoothManager *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    BluetoothManager::~BluetoothManager(v2);
  return a1;
}

void std::__shared_ptr_pointer<BluetoothManager *,std::shared_ptr<BluetoothManager>::__shared_ptr_default_delete<BluetoothManager,BluetoothManager>,std::allocator<BluetoothManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

BluetoothManager *std::__shared_ptr_pointer<BluetoothManager *,std::shared_ptr<BluetoothManager>::__shared_ptr_default_delete<BluetoothManager,BluetoothManager>,std::allocator<BluetoothManager>>::__on_zero_shared(uint64_t a1)
{
  BluetoothManager *result;

  result = *(BluetoothManager **)(a1 + 24);
  if (result)
    BluetoothManager::~BluetoothManager(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<BluetoothManager *,std::shared_ptr<BluetoothManager>::__shared_ptr_default_delete<BluetoothManager,BluetoothManager>,std::allocator<BluetoothManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF53F019)
    return a1 + 24;
  if (((v3 & 0x80000001BF53F019 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF53F019))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF53F019 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void *__copy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

const char *IOKitEventNotifier::getName(IOKitEventNotifier *this)
{
  return "iokit.event";
}

uint64_t IOKitEventNotifier::setMESAQuality(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 72))
    ctu::iokit::Controller::setMesaQuality();
  return 0;
}

void IOKitEventNotifier::start(IOKitEventNotifier *this)
{
  const void *v2;
  void *v3;
  NSObject *v4;
  char v5;
  NSObject *v6;
  const void *v7;
  void *v8;
  NSObject *v9;
  char v10;
  NSObject *v11;
  int v12;
  NSObject *v13;
  const char *v14;
  void *v15;
  NSObject *v16;
  NSObject *v17;
  const void *v18;
  void *v19;
  NSObject *v20;
  char v21;
  NSObject *v22;
  int v23;
  NSObject *v24;
  const char *v25;
  const void *v26;
  void *v27;
  NSObject *v28;
  const void *v29;
  void *v30;
  NSObject *v31;
  NSObject *v32;
  void *v33;
  NSObject *v34;
  void *v35;
  NSObject *v36;
  void *v37;
  NSObject *v38;
  void *v39;
  NSObject *v40;
  void *v41;
  NSObject *v42;
  void *aBlock;
  NSObject *object;
  uint8_t buf[4];
  const char *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 9))
    return;
  v2 = (const void *)*((_QWORD *)this + 11);
  if (!v2 || !*((_QWORD *)this + 12))
    goto LABEL_12;
  v3 = _Block_copy(v2);
  v4 = *((_QWORD *)this + 12);
  aBlock = v3;
  object = v4;
  if (v4)
    dispatch_retain(v4);
  v5 = ctu::iokit::Controller::setAccessoryCallback();
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if ((v5 & 1) == 0 && (v6 = *((_QWORD *)this + 5), os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF335000, v6, OS_LOG_TYPE_ERROR, "Failed to setup accessory callback", buf, 2u);
    v7 = (const void *)*((_QWORD *)this + 13);
    if (!v7)
      goto LABEL_23;
  }
  else
  {
LABEL_12:
    v7 = (const void *)*((_QWORD *)this + 13);
    if (!v7)
      goto LABEL_23;
  }
  if (*((_QWORD *)this + 14))
  {
    v8 = _Block_copy(v7);
    v9 = *((_QWORD *)this + 14);
    v41 = v8;
    v42 = v9;
    if (v9)
      dispatch_retain(v9);
    v10 = ctu::iokit::Controller::setDisplayCallback();
    if (v42)
      dispatch_release(v42);
    if (v41)
      _Block_release(v41);
    if ((v10 & 1) == 0)
    {
      v11 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1BF335000, v11, OS_LOG_TYPE_ERROR, "Failed to setup display callback", buf, 2u);
      }
    }
  }
LABEL_23:
  if (!*((_QWORD *)this + 15) || !*((_QWORD *)this + 16))
    goto LABEL_39;
  v12 = ctu::iokit::Controller::acquireMesaService(*((ctu::iokit::Controller **)this + 9));
  v13 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = "failed";
    if (v12)
      v14 = "succeeded";
    *(_DWORD *)buf = 136315138;
    v46 = v14;
    _os_log_impl(&dword_1BF335000, v13, OS_LOG_TYPE_DEFAULT, "#I Acquire MESA service %s", buf, 0xCu);
  }
  if (v12)
  {
    v15 = (void *)*((_QWORD *)this + 15);
    if (v15)
      v15 = _Block_copy(v15);
    v16 = *((_QWORD *)this + 16);
    v39 = v15;
    v40 = v16;
    if (v16)
      dispatch_retain(v16);
    ctu::iokit::Controller::setMesaCallback();
    if (v40)
      dispatch_release(v40);
    if (v39)
      _Block_release(v39);
LABEL_39:
    v18 = (const void *)*((_QWORD *)this + 17);
    if (v18)
      goto LABEL_40;
    goto LABEL_50;
  }
  v17 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    goto LABEL_39;
  *(_WORD *)buf = 0;
  _os_log_error_impl(&dword_1BF335000, v17, OS_LOG_TYPE_ERROR, "Failed to setup MESA callback", buf, 2u);
  v18 = (const void *)*((_QWORD *)this + 17);
  if (v18)
  {
LABEL_40:
    if (*((_QWORD *)this + 18))
    {
      v19 = _Block_copy(v18);
      v20 = *((_QWORD *)this + 18);
      v37 = v19;
      v38 = v20;
      if (v20)
        dispatch_retain(v20);
      v21 = ctu::iokit::Controller::setPowerSourceCallback();
      if (v38)
        dispatch_release(v38);
      if (v37)
        _Block_release(v37);
      if ((v21 & 1) == 0)
      {
        v22 = *((_QWORD *)this + 5);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1BF335000, v22, OS_LOG_TYPE_ERROR, "Failed to setup power source", buf, 2u);
        }
      }
    }
  }
LABEL_50:
  if (*((_QWORD *)this + 19) && *((_QWORD *)this + 20) || *((_QWORD *)this + 21) && *((_QWORD *)this + 22))
  {
    v23 = ctu::iokit::Controller::setupCameraService(*((ctu::iokit::Controller **)this + 9));
    v24 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      v25 = "failed";
      if (v23)
        v25 = "succeeded";
      *(_DWORD *)buf = 136315138;
      v46 = v25;
      _os_log_impl(&dword_1BF335000, v24, OS_LOG_TYPE_DEFAULT, "#I Setup camera service is %s", buf, 0xCu);
    }
    if ((v23 & 1) != 0)
    {
      v26 = (const void *)*((_QWORD *)this + 19);
      if (v26 && *((_QWORD *)this + 20))
      {
        v27 = _Block_copy(v26);
        v28 = *((_QWORD *)this + 20);
        v35 = v27;
        v36 = v28;
        if (v28)
          dispatch_retain(v28);
        ctu::iokit::Controller::setFaceIDCallback();
        if (v36)
          dispatch_release(v36);
        if (v35)
          _Block_release(v35);
      }
      v29 = (const void *)*((_QWORD *)this + 21);
      if (v29 && *((_QWORD *)this + 22))
      {
        v30 = _Block_copy(v29);
        v31 = *((_QWORD *)this + 22);
        v33 = v30;
        v34 = v31;
        if (v31)
          dispatch_retain(v31);
        ctu::iokit::Controller::setFrontCameraCallback();
        if (v34)
          dispatch_release(v34);
        if (v33)
          _Block_release(v33);
      }
    }
    else
    {
      v32 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1BF335000, v32, OS_LOG_TYPE_ERROR, "Failed to setup camera service callback", buf, 2u);
      }
    }
  }
}

