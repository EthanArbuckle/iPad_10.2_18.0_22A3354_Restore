void sub_1BF39DE30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitAccessoryParameter)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitDisplayLink)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitMesaEvent)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitPowerSource)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitFaceIDState)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitFrontCameraState)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void IOKitEventNotifier::registerCallbackAccessory(uint64_t a1, uint64_t a2)
{
  void *v4;
  const void *v5;
  NSObject *v6;
  NSObject *v7;

  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = *(const void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v4;
  if (v5)
    _Block_release(v5);
  v6 = *(NSObject **)(a2 + 8);
  if (v6)
    dispatch_retain(v6);
  v7 = *(NSObject **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v6;
  if (v7)
    dispatch_release(v7);
}

void IOKitEventNotifier::registerCallbackVideo(uint64_t a1, uint64_t a2)
{
  void *v4;
  const void *v5;
  NSObject *v6;
  NSObject *v7;

  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = *(const void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v4;
  if (v5)
    _Block_release(v5);
  v6 = *(NSObject **)(a2 + 8);
  if (v6)
    dispatch_retain(v6);
  v7 = *(NSObject **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v6;
  if (v7)
    dispatch_release(v7);
}

void IOKitEventNotifier::registerCallbackMesa(uint64_t a1, uint64_t a2)
{
  void *v4;
  const void *v5;
  NSObject *v6;
  NSObject *v7;

  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = *(const void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v4;
  if (v5)
    _Block_release(v5);
  v6 = *(NSObject **)(a2 + 8);
  if (v6)
    dispatch_retain(v6);
  v7 = *(NSObject **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v6;
  if (v7)
    dispatch_release(v7);
}

void IOKitEventNotifier::registerCallbackPowerSource(uint64_t a1, uint64_t a2)
{
  void *v4;
  const void *v5;
  NSObject *v6;
  NSObject *v7;

  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = *(const void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v4;
  if (v5)
    _Block_release(v5);
  v6 = *(NSObject **)(a2 + 8);
  if (v6)
    dispatch_retain(v6);
  v7 = *(NSObject **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v6;
  if (v7)
    dispatch_release(v7);
}

void IOKitEventNotifier::registerCallbackFaceID(uint64_t a1, uint64_t a2)
{
  void *v4;
  const void *v5;
  NSObject *v6;
  NSObject *v7;

  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = *(const void **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v4;
  if (v5)
    _Block_release(v5);
  v6 = *(NSObject **)(a2 + 8);
  if (v6)
    dispatch_retain(v6);
  v7 = *(NSObject **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v6;
  if (v7)
    dispatch_release(v7);
}

void IOKitEventNotifier::registerCallbackFrontCamera(uint64_t a1, uint64_t a2)
{
  void *v4;
  const void *v5;
  NSObject *v6;
  NSObject *v7;

  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = *(const void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v4;
  if (v5)
    _Block_release(v5);
  v6 = *(NSObject **)(a2 + 8);
  if (v6)
    dispatch_retain(v6);
  v7 = *(NSObject **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v6;
  if (v7)
    dispatch_release(v7);
}

uint64_t IOKitEventNotifier::queryPowerSource(IOKitEventNotifier *this)
{
  ctu::iokit::Controller *v1;

  v1 = (ctu::iokit::Controller *)*((_QWORD *)this + 9);
  if (v1)
    return ctu::iokit::Controller::queryPowerSource(v1);
  else
    return 1;
}

uint64_t IOKitEventNotifier::IOKitEventNotifier(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v12;
  const char *v13;

  *(_QWORD *)a1 = off_1E78FF9E0;
  v13 = "iokit.event";
  *ctu::Loggable<IOKitEventNotifier,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<char const*,std::shared_ptr<ctu::LogServer>&>((_QWORD *)a1, &v13, a2) = off_1E78FF9E0;
  v6 = (std::__shared_weak_count *)a2[1];
  v12 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  ctu::iokit::Controller::create();
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 184) = a3;
  return a1;
}

void sub_1BF39E3F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  *v2 = off_1E78FFA80;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  _Unwind_Resume(a1);
}

_QWORD *ctu::Loggable<IOKitEventNotifier,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<char const*,std::shared_ptr<ctu::LogServer>&>(_QWORD *a1, const char **a2, _QWORD *a3)
{
  const char *v5;
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *__dst[2];
  unint64_t v16;

  *a1 = off_1E78FFA80;
  v5 = *a2;
  v6 = strlen(*a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    v16 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(v16) = v6;
  v8 = __dst;
  if (v6)
LABEL_8:
    memmove(v8, v5, (size_t)v7);
  *((_BYTE *)v7 + (_QWORD)v8) = 0;
  ctu::LoggerCommonBase::LoggerCommonBase();
  a1[1] = &unk_1E78FB900;
  a1[7] = *a3;
  v11 = a3[1];
  a1[8] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (SHIBYTE(v16) < 0)
    operator delete(__dst[0]);
  return a1;
}

void sub_1BF39E540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IOKitEventNotifier::shutdown(IOKitEventNotifier *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  __CFRunLoop *v5;
  NSObject *v6;
  NSObject *v7;
  __CFRunLoop *v8;
  const void *v9;
  _QWORD block[4];
  dispatch_group_t group;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (__CFRunLoop *)*((_QWORD *)this + 23);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = (__CFRunLoop *)*((_QWORD *)this + 23);
    if (!v5)
      return;
  }
  if (CFRunLoopIsWaiting(v5))
  {
    v6 = dispatch_group_create();
    v7 = v6;
    if (v6)
    {
      dispatch_retain(v6);
      dispatch_group_enter(v7);
    }
    v8 = (__CFRunLoop *)*((_QWORD *)this + 23);
    v9 = (const void *)*MEMORY[0x1E0C9B280];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZN18IOKitEventNotifier8shutdownEv_block_invoke;
    block[3] = &__block_descriptor_tmp_7;
    group = v7;
    if (v7)
    {
      dispatch_retain(v7);
      dispatch_group_enter(v7);
    }
    CFRunLoopPerformBlock(v8, v9, block);
    CFRunLoopWakeUp(*((CFRunLoopRef *)this + 23));
    if (group)
    {
      dispatch_group_leave(group);
      if (group)
        dispatch_release(group);
    }
    if (v7)
    {
      dispatch_group_leave(v7);
      dispatch_release(v7);
      dispatch_group_wait(v7, 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(v7);
    }
    else
    {
      dispatch_group_wait(0, 0xFFFFFFFFFFFFFFFFLL);
    }
  }
}

void sub_1BF39E6CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_group_t group)
{
  NSObject *v14;

  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  if (v14)
  {
    dispatch_group_leave(v14);
    dispatch_release(v14);
    dispatch_release(v14);
  }
  _Unwind_Resume(exception_object);
}

void IOKitEventNotifier::~IOKitEventNotifier(IOKitEventNotifier *this)
{
  NSObject *v2;
  const void *v3;
  NSObject *v4;
  const void *v5;
  NSObject *v6;
  const void *v7;
  NSObject *v8;
  const void *v9;
  NSObject *v10;
  const void *v11;
  NSObject *v12;
  const void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  *(_QWORD *)this = off_1E78FF9E0;
  IOKitEventNotifier::shutdown(this);
  v2 = *((_QWORD *)this + 22);
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)*((_QWORD *)this + 21);
  if (v3)
    _Block_release(v3);
  v4 = *((_QWORD *)this + 20);
  if (v4)
    dispatch_release(v4);
  v5 = (const void *)*((_QWORD *)this + 19);
  if (v5)
    _Block_release(v5);
  v6 = *((_QWORD *)this + 18);
  if (v6)
    dispatch_release(v6);
  v7 = (const void *)*((_QWORD *)this + 17);
  if (v7)
    _Block_release(v7);
  v8 = *((_QWORD *)this + 16);
  if (v8)
    dispatch_release(v8);
  v9 = (const void *)*((_QWORD *)this + 15);
  if (v9)
    _Block_release(v9);
  v10 = *((_QWORD *)this + 14);
  if (v10)
    dispatch_release(v10);
  v11 = (const void *)*((_QWORD *)this + 13);
  if (v11)
    _Block_release(v11);
  v12 = *((_QWORD *)this + 12);
  if (v12)
    dispatch_release(v12);
  v13 = (const void *)*((_QWORD *)this + 11);
  if (v13)
    _Block_release(v13);
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *(_QWORD *)this = off_1E78FFA80;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
}

{
  void *v1;

  IOKitEventNotifier::~IOKitEventNotifier(this);
  operator delete(v1);
}

_QWORD *IOKitEventNotifier::create@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;

  v7 = a2;
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  v5 = operator new(0xD8uLL);
  result = std::__shared_ptr_emplace<IOKitEventNotifier>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<ctu::LogServer> &,__CFRunLoop *&,std::allocator<IOKitEventNotifier>,0>(v5, a1, &v7);
  *a3 = v5 + 3;
  a3[1] = v5;
  return result;
}

void sub_1BF39E8B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t IOKitEventNotifier::getAccessoryPrimaryPortNumber(ctu::iokit::Controller **this)
{
  return ctu::iokit::Controller::getAccessoryPrimaryPortNumber(this[9]);
}

uint64_t ctu::Loggable<IOKitEventNotifier,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<IOKitEventNotifier,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "iokit.event");
}

uint64_t ctu::Loggable<IOKitEventNotifier,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<IOKitEventNotifier,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E78FFA80;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<IOKitEventNotifier,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E78FFA80;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

_QWORD *std::__shared_ptr_emplace<IOKitEventNotifier>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<ctu::LogServer> &,__CFRunLoop *&,std::allocator<IOKitEventNotifier>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1E78FFAC0;
  v4 = (uint64_t)(a1 + 3);
  v5 = (std::__shared_weak_count *)a2[1];
  v12 = *a2;
  v13 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  IOKitEventNotifier::IOKitEventNotifier(v4, &v12, *a3);
  v8 = v13;
  if (!v13)
    return a1;
  v9 = (unint64_t *)&v13->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_1BF39EA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<IOKitEventNotifier>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E78FFAC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IOKitEventNotifier>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E78FFAC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<IOKitEventNotifier>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void BootControllerLegacy::BootControllerLegacy(BootControllerLegacy *this)
{
  uint64_t v1;

  BootController::BootController(this);
  *(_QWORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 96) = 0;
  *(_QWORD *)v1 = off_1E78FFB10;
  *(_BYTE *)(v1 + 104) = 1;
}

{
  uint64_t v1;

  BootController::BootController(this);
  *(_QWORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 96) = 0;
  *(_QWORD *)v1 = off_1E78FFB10;
  *(_BYTE *)(v1 + 104) = 1;
}

BOOL BootControllerLegacy::prepare(capabilities::radio *a1, std::string *a2)
{
  timespec v4;
  void **v5;
  int v6;
  NSObject *v7;
  _BOOL8 v8;
  void **v10;
  void *__p[3];
  stat v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  memset(__p, 170, sizeof(__p));
  capabilities::radio::personalizedFirmwarePath(a1);
  v4.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v4.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v12.st_blksize = v4;
  *(timespec *)v12.st_qspare = v4;
  v12.st_birthtimespec = v4;
  *(timespec *)&v12.st_size = v4;
  v12.st_mtimespec = v4;
  v12.st_ctimespec = v4;
  *(timespec *)&v12.st_uid = v4;
  v12.st_atimespec = v4;
  *(timespec *)&v12.st_dev = v4;
  if (SHIBYTE(__p[2]) >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  v6 = stat((const char *)v5, &v12);
  if (v6)
  {
    v7 = *((_QWORD *)a1 + 5);
    v8 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      v10 = __p;
      if (SHIBYTE(__p[2]) < 0)
        v10 = (void **)__p[0];
      v12.st_dev = 136315138;
      *(_QWORD *)&v12.st_mode = v10;
      _os_log_error_impl(&dword_1BF335000, v7, OS_LOG_TYPE_ERROR, "Failed to find the firmware in \"%s\"", (uint8_t *)&v12, 0xCu);
    }
    capabilities::trace::allowed((capabilities::trace *)v8);
    std::string::__assign_external(a2, "Baseband Firmware Path Not Found", 0x20uLL);
  }
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return v6 == 0;
}

void sub_1BF39EC50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BootControllerLegacy::bootModem(uint64_t a1, uint64_t a2)
{
  ctu::XpcJetsamAssertion *v4;
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  const void *v16;
  unsigned __int8 v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t (***v28)(void *, _QWORD);
  _BYTE *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  const char *v35;
  const __CFString *v36;
  const __CFString *v37;
  CFTypeID v38;
  CFTypeID TypeID;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  const __CFAllocator *v43;
  CFNumberRef v44;
  uint64_t v45;
  CFDictionaryRef v46;
  int v47;
  NSObject *v48;
  int v49;
  NSObject *v50;
  uint64_t v51;
  CFTypeRef v52;
  char *v53;
  NSObject *v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  CFTypeRef *v60;
  uint8_t *v61;
  CFTypeRef v62[2];
  const __CFString *v63;
  CFDictionaryRef v64;
  CFNumberRef v65;
  int valuePtr;
  const __CFString *v67;
  CFTypeRef cf;
  void *v69[3];
  void *__p[2];
  char v71;
  unint64_t v72;
  unint64_t v73;
  void *values[2];
  const __CFString *v75;
  uint64_t v76;
  uint8_t buf[16];
  const __CFString *v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v72 = 0xAAAAAAAAAAAAAAAALL;
  v73 = 0xAAAAAAAAAAAAAAAALL;
  v4 = (ctu::XpcJetsamAssertion *)pthread_mutex_lock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
  v5 = xmmword_1ED70FC10;
  if (!(_QWORD)xmmword_1ED70FC10)
  {
    ctu::XpcJetsamAssertion::create_default_global(v4);
    v6 = *(_OWORD *)values;
    values[0] = 0;
    values[1] = 0;
    v7 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED70FC10 + 1);
    xmmword_1ED70FC10 = v6;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = xmmword_1ED70FC10;
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED70FC10 + 1);
  *(_QWORD *)buf = v5;
  *(_QWORD *)&buf[8] = *((_QWORD *)&xmmword_1ED70FC10 + 1);
  if (*((_QWORD *)&xmmword_1ED70FC10 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&xmmword_1ED70FC10 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
  v71 = 13;
  strcpy((char *)__p, "Booting modem");
  ctu::XpcJetsamAssertion::createActivity();
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  BYTE5(v69[2]) = -86;
  HIWORD(v69[2]) = 5290;
  strcpy((char *)v69, "boot::debugArguments");
  if (*(char *)(a2 + 23) < 0)
  {
    *(_QWORD *)(a2 + 8) = 7;
    v15 = *(char **)a2;
  }
  else
  {
    *(_BYTE *)(a2 + 23) = 7;
    v15 = (char *)a2;
  }
  strcpy(v15, "unknown");
  cf = 0;
  v16 = (const void *)BBUpdaterExtremeCreate();
  if (!v16)
  {
    std::string::__assign_external((std::string *)a2, "failed creating BBUpdaterExtremeRef", 0x23uLL);
    v29 = (_BYTE *)(a1 + 104);
    if (*(_BYTE *)(a1 + 104))
      goto LABEL_89;
    goto LABEL_72;
  }
  v17 = atomic_load((unsigned __int8 *)&_MergedGlobals_3);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_3))
  {
    __cxa_atexit((void (*)(void *))std::weak_ptr<BootControllerLegacy>::~weak_ptr, &qword_1ED70FF18, &dword_1BF335000);
    __cxa_guard_release(&_MergedGlobals_3);
  }
  v18 = *(std::__shared_weak_count **)(a1 + 96);
  if (!v18 || (v19 = *(_QWORD *)(a1 + 88), (v20 = std::__shared_weak_count::lock(v18)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v21 = v20;
  p_shared_weak_owners = (unint64_t *)&v20->__shared_weak_owners_;
  do
    v23 = __ldxr(p_shared_weak_owners);
  while (__stxr(v23 + 1, p_shared_weak_owners));
  v24 = (std::__shared_weak_count *)qword_1ED70FF20;
  qword_1ED70FF18 = v19;
  qword_1ED70FF20 = (uint64_t)v21;
  if (v24)
    std::__shared_weak_count::__release_weak(v24);
  v25 = (unint64_t *)&v21->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1ED70FAF0)
  {
    v28 = (uint64_t (***)(void *, _QWORD))operator new(0x18uLL);
    MEMORY[0x1C3B893B4](v28, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
    v27 = operator new(0x20uLL);
    *v27 = &unk_1E78FFBE0;
    v27[1] = 0;
    v27[2] = 0;
    v27[3] = v28;
    v30 = (std::__shared_weak_count *)off_1ED70FAF8;
    qword_1ED70FAF0 = (uint64_t)v28;
    off_1ED70FAF8 = v27;
    if (!v30)
    {
      values[0] = v28;
      values[1] = v27;
LABEL_42:
      v33 = v27 + 1;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
      goto LABEL_44;
    }
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v28 = (uint64_t (***)(void *, _QWORD))qword_1ED70FAF0;
  v27 = off_1ED70FAF8;
  values[0] = (void *)qword_1ED70FAF0;
  values[1] = off_1ED70FAF8;
  if (off_1ED70FAF8)
    goto LABEL_42;
LABEL_44:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (SHIBYTE(v69[2]) >= 0)
    v35 = (const char *)v69;
  else
    v35 = (const char *)v69[0];
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)buf, v35);
  v36 = (const __CFString *)(**v28)(v28, *(_QWORD *)buf);
  v37 = v36;
  if (v36)
  {
    v38 = CFGetTypeID(v36);
    TypeID = CFStringGetTypeID();
    CFRelease(v37);
    MEMORY[0x1C3B8936C](buf);
    if (v38 == TypeID)
    {
      v40 = (std::__shared_weak_count *)values[1];
      if (!values[1])
        goto LABEL_57;
      goto LABEL_53;
    }
  }
  else
  {
    MEMORY[0x1C3B8936C](buf);
  }
  v37 = CFSTR("-l 0xffffffdf -v 0 -N");
  v40 = (std::__shared_weak_count *)values[1];
  if (!values[1])
    goto LABEL_57;
LABEL_53:
  v41 = (unint64_t *)&v40->__shared_owners_;
  do
    v42 = __ldaxr(v41);
  while (__stlxr(v42 - 1, v41));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
LABEL_57:
  v67 = v37;
  CFRetain(v37);
  valuePtr = 1;
  v43 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v44 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  v65 = v44;
  v45 = *MEMORY[0x1E0C9AE50];
  values[0] = *(void **)MEMORY[0x1E0C9AE50];
  values[1] = v44;
  if (!*(_BYTE *)(a1 + 80))
    v45 = *MEMORY[0x1E0C9AE40];
  v75 = v37;
  v76 = v45;
  v46 = CFDictionaryCreate(v43, (const void **)&BootControllerLegacy::bootModem(std::string &)::keys, (const void **)values, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v64 = v46;
  v47 = BBUpdaterSetOptions();
  if (!v47)
  {
    memset(buf, 0, sizeof(buf));
    v78 = 0;
    ctu::cf::assign();
    *(_OWORD *)v62 = *(_OWORD *)buf;
    v63 = v78;
    v48 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      v60 = v62;
      if (SHIBYTE(v63) < 0)
        v60 = (CFTypeRef *)v62[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v60;
      _os_log_error_impl(&dword_1BF335000, v48, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
      if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      {
LABEL_65:
        *(_OWORD *)a2 = *(_OWORD *)v62;
        *(_QWORD *)(a2 + 16) = v63;
        CFRelease(cf);
        cf = 0;
        if (!v46)
          goto LABEL_67;
        goto LABEL_66;
      }
    }
    else if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
      goto LABEL_65;
    }
    operator delete(*(void **)a2);
    goto LABEL_65;
  }
  if (v46)
LABEL_66:
    CFRelease(v46);
LABEL_67:
  if (v44)
    CFRelease(v44);
  CFRelease(v37);
  v29 = (_BYTE *)(a1 + 104);
  if (!*(_BYTE *)(a1 + 104))
  {
LABEL_72:
    if (TelephonyBasebandPowerOnModem())
    {
      v62[0] = 0;
      goto LABEL_74;
    }
    if (*(char *)(a2 + 23) < 0)
    {
      *(_QWORD *)(a2 + 8) = 21;
      v53 = *(char **)a2;
    }
    else
    {
      *(_BYTE *)(a2 + 23) = 21;
      v53 = (char *)a2;
    }
    strcpy(v53, "failed power on modem");
LABEL_89:
    v62[0] = 0;
    goto LABEL_90;
  }
  v62[0] = 0;
  if (!v47)
  {
LABEL_90:
    v54 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a2 + 23) >= 0)
        v55 = (void *)a2;
      else
        v55 = *(void **)a2;
      LODWORD(values[0]) = 136446210;
      *(void **)((char *)values + 4) = v55;
      _os_log_impl(&dword_1BF335000, v54, OS_LOG_TYPE_DEFAULT, "#I boot failed due to %{public}s", (uint8_t *)values, 0xCu);
    }
    v51 = 0;
    *v29 = 0;
    v52 = v62[0];
    if (v62[0])
      goto LABEL_96;
    goto LABEL_97;
  }
LABEL_74:
  v49 = BBUpdaterExecCommand();
  if (!v49 && cf)
  {
    values[0] = 0;
    values[1] = 0;
    v75 = 0;
    ctu::cf::assign();
    *(_OWORD *)buf = *(_OWORD *)values;
    v78 = v75;
    v50 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      v61 = buf;
      if (SHIBYTE(v78) < 0)
        v61 = *(uint8_t **)buf;
      LODWORD(values[0]) = 136315138;
      *(void **)((char *)values + 4) = v61;
      _os_log_error_impl(&dword_1BF335000, v50, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)values, 0xCu);
      if ((*(char *)(a2 + 23) & 0x80000000) == 0)
        goto LABEL_79;
    }
    else if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_79:
      *(_OWORD *)a2 = *(_OWORD *)buf;
      *(_QWORD *)(a2 + 16) = v78;
      CFRelease(cf);
      cf = 0;
      goto LABEL_90;
    }
    operator delete(*(void **)a2);
    goto LABEL_79;
  }
  if (!v49)
    goto LABEL_90;
  if (!v62[0])
  {
    std::string::__assign_external((std::string *)a2, "BBUpdaterExecCommand failed returning output", 0x2CuLL);
    goto LABEL_90;
  }
  BootControllerLegacy::printOutput((BootControllerLegacy *)a1, v62[0]);
  values[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  values[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)values, (const __CFDictionary *)v62[0]);
  if ((ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)values, CFSTR("done")) & 1) == 0)
  {
    std::string::__assign_external((std::string *)a2, "output did not return done", 0x1AuLL);
    MEMORY[0x1C3B893A8](values);
    goto LABEL_90;
  }
  MEMORY[0x1C3B893A8](values);
  *(_BYTE *)(a1 + 80) = 0;
  v51 = 1;
  *v29 = 0;
  v52 = v62[0];
  if (v62[0])
  {
LABEL_96:
    CFRelease(v52);
    v62[0] = 0;
  }
LABEL_97:
  if (v16)
    CFRelease(v16);
  if (SHIBYTE(v69[2]) < 0)
    operator delete(v69[0]);
  v56 = (std::__shared_weak_count *)v73;
  if (v73)
  {
    v57 = (unint64_t *)(v73 + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  return v51;
}

void sub_1BF39F560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a25 < 0)
    operator delete(__p);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void BootControllerLegacy::handleError(BootControllerLegacy *this@<X0>, _OWORD *a2@<X8>)
{
  NSObject *v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  memset(a2, 170, 24);
  v7 = 0uLL;
  v8 = 0;
  ctu::cf::assign();
  *a2 = 0uLL;
  *((_QWORD *)a2 + 2) = v8;
  v5 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)a2 + 23) >= 0)
      v6 = a2;
    else
      v6 = *(_OWORD **)a2;
    LODWORD(v7) = 136315138;
    *(_QWORD *)((char *)&v7 + 4) = v6;
    _os_log_error_impl(&dword_1BF335000, v5, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v7, 0xCu);
  }
}

void sub_1BF39F7B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const void **ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void BootControllerLegacy::printOutput(BootControllerLegacy *this, CFTypeRef cf)
{
  CFStringRef v3;
  NSObject *v4;
  void **v5;
  void *__p[2];
  uint64_t v7;
  CFStringRef v8;
  uint8_t buf[4];
  void **v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = CFCopyDescription(cf);
  v7 = 0;
  v8 = v3;
  __p[0] = 0;
  __p[1] = 0;
  ctu::cf::assign();
  v4 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    if ((SHIBYTE(v7) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_8:
    operator delete(__p[0]);
    if (!v3)
      return;
    goto LABEL_9;
  }
  v5 = __p;
  if (v7 < 0)
    v5 = (void **)__p[0];
  *(_DWORD *)buf = 136315138;
  v10 = v5;
  _os_log_error_impl(&dword_1BF335000, v4, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
  if (SHIBYTE(v7) < 0)
    goto LABEL_8;
LABEL_3:
  if (v3)
LABEL_9:
    CFRelease(v3);
}

void sub_1BF39F8F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void BootControllerLegacy::~BootControllerLegacy(BootControllerLegacy *this)
{
  std::__shared_weak_count *v2;
  const void *v3;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  *(_QWORD *)this = off_1E79018E0;
  v3 = (const void *)*((_QWORD *)this + 9);
  if (v3)
    CFRelease(v3);
  *(_QWORD *)this = &unk_1E78FFC48;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
}

{
  std::__shared_weak_count *v2;
  const void *v3;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  *(_QWORD *)this = off_1E79018E0;
  v3 = (const void *)*((_QWORD *)this + 9);
  if (v3)
    CFRelease(v3);
  *(_QWORD *)this = &unk_1E78FFC48;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(this);
}

uint64_t ctu::Loggable<BootController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<BootController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "boot.ctrl");
}

uint64_t ctu::Loggable<BootController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

uint64_t ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t std::weak_ptr<BootControllerLegacy>::~weak_ptr(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

_QWORD *ctu::Loggable<BootController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = &unk_1E78FFC48;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<BootController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = &unk_1E78FFC48;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__shared_ptr_pointer<ABMProperties *,std::shared_ptr<ABMProperties>::__shared_ptr_default_delete<ABMProperties,ABMProperties>,std::allocator<ABMProperties>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ABMProperties *,std::shared_ptr<ABMProperties>::__shared_ptr_default_delete<ABMProperties,ABMProperties>,std::allocator<ABMProperties>>::__on_zero_shared(uint64_t a1)
{
  void *v1;

  if (*(_QWORD *)(a1 + 24))
  {
    v1 = (void *)MEMORY[0x1C3B893C0]();
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<ABMProperties *,std::shared_ptr<ABMProperties>::__shared_ptr_default_delete<ABMProperties,ABMProperties>,std::allocator<ABMProperties>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF53F1F7)
    return a1 + 24;
  if (((v3 & 0x80000001BF53F1F7 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF53F1F7))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF53F1F7 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t __cxx_global_var_init_2()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance, &dword_1BF335000);
  }
  return result;
}

uint64_t __cxx_global_var_init_24()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_1BF335000);
  }
  return result;
}

void ServerLogging::~ServerLogging(ServerLogging *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 9));
    *((_QWORD *)this + 9) = 0;
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_8:
      if ((*((char *)this + 47) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else
  {
LABEL_7:
    if ((*((char *)this + 71) & 0x80000000) == 0)
      goto LABEL_8;
  }
  operator delete(*((void **)this + 6));
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_9:
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v6)
      return;
    goto LABEL_10;
  }
LABEL_14:
  operator delete(*((void **)this + 3));
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (!v6)
    return;
LABEL_10:
  std::__shared_weak_count::__release_weak(v6);
}

uint64_t ServerLogging::ServerLogging(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  os_unfair_lock_s *v7;
  _QWORD *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  const void *v18;
  size_t v19;
  void *v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::string __p;
  void *__dst[2];
  int64_t v31;
  os_unfair_lock_s *v32;
  std::__shared_weak_count *v33;
  std::string v34;
  std::string v35;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 24) = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 48) = v6;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v7 = (os_unfair_lock_s *)off_1ED70FDE8;
  if (!off_1ED70FDE8)
  {
    v8 = operator new(0x30uLL);
    MEMORY[0x1C3B893B4](v8, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x1E0C9B260]);
    v8[3] = 0;
    v8[4] = 0;
    *((_DWORD *)v8 + 10) = 0;
    std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(&v35, (uint64_t)v8);
    v9 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = 0uLL;
    v10 = (std::__shared_weak_count *)*(&off_1ED70FDE8 + 1);
    off_1ED70FDE8 = v9;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    size = (std::__shared_weak_count *)v35.__r_.__value_.__l.__size_;
    if (v35.__r_.__value_.__l.__size_)
    {
      v14 = (unint64_t *)(v35.__r_.__value_.__l.__size_ + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v7 = (os_unfair_lock_s *)off_1ED70FDE8;
  }
  v32 = v7;
  v33 = (std::__shared_weak_count *)*(&off_1ED70FDE8 + 1);
  if (*(&off_1ED70FDE8 + 1))
  {
    v16 = (unint64_t *)(*(&off_1ED70FDE8 + 1) + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v18 = (const void *)*MEMORY[0x1E0D01A58];
  v19 = strlen((const char *)*MEMORY[0x1E0D01A58]);
  if (v19 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v20 = (void *)v19;
  if (v19 >= 0x17)
  {
    v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v22 = v19 | 7;
    v23 = v22 + 1;
    v21 = (void **)operator new(v22 + 1);
    __dst[1] = v20;
    v31 = v23 | 0x8000000000000000;
    __dst[0] = v21;
LABEL_30:
    memmove(v21, v18, (size_t)v20);
    *((_BYTE *)v20 + (_QWORD)v21) = 0;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_31;
  }
  HIBYTE(v31) = v19;
  v21 = __dst;
  if (v19)
    goto LABEL_30;
  LOBYTE(__dst[0]) = 0;
  if ((*((char *)a3 + 23) & 0x80000000) == 0)
  {
LABEL_26:
    __p = *(std::string *)a3;
    goto LABEL_32;
  }
LABEL_31:
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
LABEL_32:
  os_unfair_lock_lock(v7 + 10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v34, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v34 = __p;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v35, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
  else
    v35 = v34;
  if (v31 >= 0)
    v24 = (char *)__dst;
  else
    v24 = (char *)__dst[0];
  ctu::cf::plist_adapter::set<std::string>((int)v7, (uint64_t)&v35, v24);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v35.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_43:
      os_unfair_lock_unlock(v7 + 10);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_44;
      goto LABEL_49;
    }
  }
  else if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_43;
  }
  operator delete(v34.__r_.__value_.__l.__data_);
  os_unfair_lock_unlock(v7 + 10);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_44:
    if ((SHIBYTE(v31) & 0x80000000) == 0)
      goto LABEL_45;
LABEL_50:
    operator delete(__dst[0]);
    v25 = v33;
    if (!v33)
      return a1;
    goto LABEL_51;
  }
LABEL_49:
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31) < 0)
    goto LABEL_50;
LABEL_45:
  v25 = v33;
  if (!v33)
    return a1;
LABEL_51:
  v26 = (unint64_t *)&v25->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  return a1;
}

void sub_1BF3A01B8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a25 < 0)
    operator delete(__p);
  __clang_call_terminate(a1);
}

void sub_1BF3A0254()
{
  JUMPOUT(0x1BF3A0268);
}

void ServerLogging::init(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  NSObject *v3;
  ctu::LogServer *v4;

  v2 = this + 4;
  os_unfair_lock_lock(this + 4);
  v3 = ServerLogging::monitorSnapshotPath_sync((ServerLogging *)this);
  *(_QWORD *)&this[18]._os_unfair_lock_opaque = v3;
  ServerLogging::clearScratchFolders_sync((ServerLogging *)v3);
  v4 = *(ctu::LogServer **)&this[20]._os_unfair_lock_opaque;
  if (v4)
    ctu::LogServer::setEnabled(v4);
  os_unfair_lock_unlock(v2);
}

NSObject *ServerLogging::monitorSnapshotPath_sync(ServerLogging *this)
{
  const char *v2;
  const char *v3;
  timespec v4;
  const char *v5;
  unsigned __int8 v6;
  NSObject *v7;
  const char *v8;
  unsigned int v9;
  NSObject *global_queue;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD v15[4];
  unsigned int v16;
  _QWORD handler[5];
  unsigned int v18;
  stat v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = (char *)this + 48;
  v2 = (const char *)*((_QWORD *)this + 6);
  v4.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v4.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v19.st_blksize = v4;
  *(timespec *)v19.st_qspare = v4;
  v19.st_birthtimespec = v4;
  *(timespec *)&v19.st_size = v4;
  v19.st_mtimespec = v4;
  v19.st_ctimespec = v4;
  *(timespec *)&v19.st_uid = v4;
  v19.st_atimespec = v4;
  *(timespec *)&v19.st_dev = v4;
  if (*((char *)this + 71) >= 0)
    v5 = (char *)this + 48;
  else
    v5 = v2;
  if (stat(v5, &v19))
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED7100E0 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v7 = qword_1ED7100E0;
      if (os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_DEFAULT))
      {
LABEL_8:
        v8 = v3;
        if (*((char *)this + 71) < 0)
          v8 = *(const char **)v3;
        v19.st_dev = 136315138;
        *(_QWORD *)&v19.st_mode = v8;
        _os_log_impl(&dword_1BF335000, v7, OS_LOG_TYPE_DEFAULT, "Snapshot path [%s] was not found, so recreating it\n", (uint8_t *)&v19, 0xCu);
      }
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
      v7 = qword_1ED7100E0;
      if (os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_DEFAULT))
        goto LABEL_8;
    }
    support::fs::createDir(v3, 0x1EDu, 1);
  }
  if (*((char *)this + 71) < 0)
    v3 = *(const char **)v3;
  v9 = open(v3, 0x8000);
  if ((v9 & 0x80000000) != 0)
    return 0;
  global_queue = dispatch_get_global_queue(17, 0);
  v11 = dispatch_source_create(MEMORY[0x1E0C80DE8], v9, 0x21uLL, global_queue);
  if (!v11)
  {
    close(v9);
    return 0;
  }
  v12 = v11;
  v13 = MEMORY[0x1E0C809B0];
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 0x40000000;
  handler[2] = ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke;
  handler[3] = &__block_descriptor_tmp_7_2;
  handler[4] = this;
  v18 = v9;
  dispatch_source_set_event_handler(v11, handler);
  v15[0] = v13;
  v15[1] = 0x40000000;
  v15[2] = ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke_8;
  v15[3] = &__block_descriptor_tmp_9_3;
  v16 = v9;
  dispatch_source_set_cancel_handler(v12, v15);
  dispatch_activate(v12);
  return v12;
}

void ServerLogging::clearScratchFolders_sync(ServerLogging *this)
{
  const void *v1;
  size_t v2;
  void *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *global_queue;
  capabilities::abs *v8;
  void *__dst[2];
  unint64_t v10;

  v1 = (const void *)*MEMORY[0x1E0D01A18];
  v2 = strlen((const char *)*MEMORY[0x1E0D01A18]);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v3 = (void *)v2;
  if (v2 >= 0x17)
  {
    v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v5 = v2 | 7;
    v6 = v5 + 1;
    v4 = (void **)operator new(v5 + 1);
    __dst[1] = v3;
    v10 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_8;
  }
  HIBYTE(v10) = v2;
  v4 = __dst;
  if (v2)
LABEL_8:
    memmove(v4, v1, (size_t)v3);
  *((_BYTE *)v3 + (_QWORD)v4) = 0;
  support::fs::createDir((const char *)__dst, 0x1EDu, 1);
  if (SHIBYTE(v10) < 0)
    operator delete(__dst[0]);
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_async(global_queue, &__block_literal_global_1);
  capabilities::abs::logScratchPath(v8);
  support::fs::createDir((const char *)__dst, 0x1EDu, 1);
  if (SHIBYTE(v10) < 0)
    operator delete(__dst[0]);
}

void sub_1BF3A06B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

ctu::LogServer *ServerLogging::init_sync(ServerLogging *this)
{
  ctu::LogServer *result;

  result = (ctu::LogServer *)*((_QWORD *)this + 10);
  if (result)
    return (ctu::LogServer *)ctu::LogServer::setEnabled(result);
  return result;
}

void ServerLogging::registerLogServer(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  ctu::LogServer *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  os_unfair_lock_s *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v4 = *(ctu::LogServer **)a2;
  v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = (os_unfair_lock_s *)(a1 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(std::__shared_weak_count **)(a1 + 88);
    *(_QWORD *)(a1 + 80) = v4;
    *(_QWORD *)(a1 + 88) = v3;
    if (!v9)
    {
LABEL_7:
      if (!v4)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else
  {
    v7 = (os_unfair_lock_s *)(a1 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    v9 = *(std::__shared_weak_count **)(a1 + 88);
    *(_QWORD *)(a1 + 80) = v4;
    *(_QWORD *)(a1 + 88) = 0;
    if (!v9)
      goto LABEL_7;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v4 = *(ctu::LogServer **)(a1 + 80);
    if (!v4)
      goto LABEL_17;
    goto LABEL_16;
  }
  v4 = *(ctu::LogServer **)(a1 + 80);
  if (v4)
LABEL_16:
    ctu::LogServer::setEnabled(v4);
LABEL_17:
  os_unfair_lock_unlock(v7);
  if (v3)
  {
    v12 = (unint64_t *)&v3->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ServerLogging::snapshot(os_unfair_lock_s *a1, CFTypeRef *a2)
{
  CFTypeRef v3;
  os_unfair_lock_s *v4;

  v3 = *a2;
  if (*a2)
  {
    CFRetain(*a2);
    v4 = a1 + 4;
    os_unfair_lock_lock(v4);
    CFRetain(v3);
    CFRelease(v3);
    os_unfair_lock_unlock(v4);
    CFRelease(v3);
  }
  else
  {
    os_unfair_lock_lock(a1 + 4);
    os_unfair_lock_unlock(a1 + 4);
  }
}

void ___ZN13ServerLogging24clearScratchFolders_syncEv_block_invoke()
{
  const void *v0;
  size_t v1;
  void *v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  void *__dst[2];
  unint64_t v7;

  v0 = (const void *)*MEMORY[0x1E0D01A18];
  v1 = strlen((const char *)*MEMORY[0x1E0D01A18]);
  if (v1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v2 = (void *)v1;
  if (v1 >= 0x17)
  {
    v4 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1 | 7) != 0x17)
      v4 = v1 | 7;
    v5 = v4 + 1;
    v3 = (void **)operator new(v4 + 1);
    __dst[1] = v2;
    v7 = v5 | 0x8000000000000000;
    __dst[0] = v3;
    goto LABEL_8;
  }
  HIBYTE(v7) = v1;
  v3 = __dst;
  if (v1)
LABEL_8:
    memmove(v3, v0, (size_t)v2);
  *((_BYTE *)v2 + (_QWORD)v3) = 0;
  support::fs::removeDirContents((const char *)__dst, 0);
  if (SHIBYTE(v7) < 0)
    operator delete(__dst[0]);
}

void sub_1BF3A0984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ServerLogging::backupFolders_sync(capabilities::abs *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::string::size_type *v7;
  timespec v8;
  std::string *p_p;
  DIR *v10;
  std::string *v11;
  DIR *v12;
  dirent *v13;
  int v14;
  size_t v15;
  unint64_t v16;
  std::string *v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  void **v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  int v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  std::string::size_type v29;
  char v30;
  int st_gid_high;
  capabilities::abs *v32;
  void *v33;
  char v34;
  _BYTE v35[8];
  _QWORD *v36;
  void *v37[2];
  unsigned __int8 v38;
  std::string __p;
  stat v40;

  *(_QWORD *)(a4 + 8) = 0;
  v7 = (std::string::size_type *)(a4 + 8);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 16) = 0;
  capabilities::abs::logScratchPath(a1);
  v8.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v8.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v40.st_blksize = v8;
  *(timespec *)v40.st_qspare = v8;
  v40.st_birthtimespec = v8;
  *(timespec *)&v40.st_size = v8;
  v40.st_mtimespec = v8;
  v40.st_ctimespec = v8;
  *(timespec *)&v40.st_uid = v8;
  v40.st_atimespec = v8;
  *(timespec *)&v40.st_dev = v8;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (stat((const char *)p_p, &v40))
  {
    LODWORD(v10) = 0;
  }
  else
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &__p;
    else
      v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v12 = opendir((const char *)v11);
    v10 = v12;
    if (v12)
    {
      v13 = readdir(v12);
      closedir(v10);
      LODWORD(v10) = v13 != 0;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!(_DWORD)v10)
      return;
  }
  else if (!(_DWORD)v10)
  {
    return;
  }
  v14 = *((char *)a2 + 23);
  if (v14 >= 0)
    v15 = *((unsigned __int8 *)a2 + 23);
  else
    v15 = (size_t)a2[1];
  v16 = v15 + 7;
  memset(&__p, 170, sizeof(__p));
  if (v15 + 7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v16 >= 0x17)
  {
    v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v18 = v16 | 7;
    v19 = v18 + 1;
    v17 = (std::string *)operator new(v18 + 1);
    __p.__r_.__value_.__l.__size_ = v15 + 7;
    __p.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
  }
  else
  {
    memset(&__p, 0, sizeof(__p));
    v17 = &__p;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v15 + 7;
    if (!v15)
      goto LABEL_29;
  }
  if (v14 >= 0)
    v20 = a2;
  else
    v20 = *a2;
  memmove(v17, v20, v15);
LABEL_29:
  strcpy((char *)v17 + v15, "log-bb-");
  Timestamp::Timestamp((Timestamp *)v35);
  Timestamp::asString((uint64_t)v35, 0, 9, v37);
  if ((v38 & 0x80u) == 0)
    v21 = v37;
  else
    v21 = (void **)v37[0];
  if ((v38 & 0x80u) == 0)
    v22 = v38;
  else
    v22 = (std::string::size_type)v37[1];
  v23 = std::string::append(&__p, (const std::string::value_type *)v21, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  *(_QWORD *)&v40.st_uid = *((_QWORD *)&v23->__r_.__value_.__l + 2);
  *(_OWORD *)&v40.st_dev = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = *(char *)(a3 + 23);
  if (v25 >= 0)
    v26 = (const std::string::value_type *)a3;
  else
    v26 = *(const std::string::value_type **)a3;
  if (v25 >= 0)
    v27 = *(unsigned __int8 *)(a3 + 23);
  else
    v27 = *(_QWORD *)(a3 + 8);
  v28 = std::string::append((std::string *)&v40, v26, v27);
  v29 = v28->__r_.__value_.__r.__words[0];
  *v7 = v28->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v7 + 7) = *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1]
                                                                          + 7);
  v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  st_gid_high = SHIBYTE(v40.st_gid);
  *(_QWORD *)a4 = v29;
  *(_BYTE *)(a4 + 23) = v30;
  if ((st_gid_high & 0x80000000) == 0)
  {
    if (((char)v38 & 0x80000000) == 0)
      goto LABEL_43;
LABEL_48:
    operator delete(v37[0]);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v35, v36);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_49;
  }
  operator delete(*(void **)&v40.st_dev);
  if ((char)v38 < 0)
    goto LABEL_48;
LABEL_43:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v35, v36);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_44;
LABEL_49:
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_44:
  capabilities::abs::logScratchPath(v32);
  support::fs::moveDirUnique((const char *)&v40, a4, (uint64_t)&v33);
  if ((v34 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v40.st_gid) & 0x80000000) == 0)
      return;
LABEL_51:
    operator delete(*(void **)&v40.st_dev);
    return;
  }
  operator delete(v33);
  if (SHIBYTE(v40.st_gid) < 0)
    goto LABEL_51;
}

void sub_1BF3A0C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  int v33;

  if (a32 < 0)
    operator delete(__p);
  if (v33 < 0)
    operator delete(v32);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  NSObject *v4;
  _QWORD *v5;
  uint64_t result;
  int v7;
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED7100E0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v4 = qword_1ED7100E0;
    if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_DEFAULT))
      goto LABEL_7;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
    v4 = qword_1ED7100E0;
    if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_DEFAULT))
      goto LABEL_7;
  }
  v5 = (_QWORD *)(v2 + 48);
  if (*(char *)(v2 + 71) < 0)
    v5 = (_QWORD *)*v5;
  v7 = 136315138;
  v8 = v5;
  _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "Snapshot path [%s] was removed\n", (uint8_t *)&v7, 0xCu);
LABEL_7:
  dispatch_release(*(dispatch_object_t *)(v2 + 72));
  *(_QWORD *)(v2 + 72) = 0;
  close(*(_DWORD *)(a1 + 40));
  result = ServerLogging::monitorSnapshotPath_sync((ServerLogging *)v2);
  *(_QWORD *)(v2 + 72) = result;
  return result;
}

uint64_t ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke_8(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

void GetABMLogServer(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD block[5];

  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_2;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v3 = *(_QWORD *)algn_1ED710088;
    *a1 = GetABMLogServer(void)::sLogServer;
    a1[1] = v3;
    if (!v3)
      return;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v3 = *(_QWORD *)algn_1ED710088;
    *a1 = GetABMLogServer(void)::sLogServer;
    a1[1] = v3;
    if (!v3)
      return;
  }
  v4 = (unint64_t *)(v3 + 8);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
}

uint64_t ctu::PthreadMutexGuardPolicy<ServerLogging>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *size;
  unint64_t *v8;
  unint64_t v9;
  capabilities::abs *v10;
  uint64_t v11;
  size_t v12;
  std::string *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  NSObject *v26;
  ctu::LogServer *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  _QWORD v51[2];
  std::string v52;
  ServerLogging *v53;
  std::string __p;
  void *v55;
  uint64_t *v56;

  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1BF53F2A0;
  strcpy(__p.__r_.__value_.__l.__data_, "AppleBasebandManagerServerLog");
  ctu::LogServer::create();
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = 0uLL;
  v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)v2 = v3;
  if (!v4)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (!v52.__r_.__value_.__l.__size_)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (!v52.__r_.__value_.__l.__size_)
      goto LABEL_9;
  }
  v8 = (unint64_t *)&size->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
  {
LABEL_9:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
  std::__shared_weak_count::__release_weak(size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_10:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_11:
  ctu::LogServer::start(**(ctu::LogServer ***)(a1 + 32));
  v10 = (capabilities::abs *)pthread_mutex_lock(&ctu::Singleton<ServerLogging,ServerLogging,ctu::PthreadMutexGuardPolicy<ServerLogging>>::sInstance);
  v11 = qword_1ED70FBC0;
  if (qword_1ED70FBC0)
    goto LABEL_46;
  capabilities::abs::logScratchPath(v10);
  v12 = strlen((const char *)kDaemonLogScratchDir);
  v13 = std::string::append(&v52, (const std::string::value_type *)kDaemonLogScratchDir, v12);
  __p = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  memset(&v52, 170, sizeof(v52));
  capabilities::abs::logSnapshotPath((capabilities::abs *)v13);
  v14 = operator new(0x60uLL);
  ServerLogging::ServerLogging((uint64_t)v14, (__int128 *)&__p, (__int128 *)&v52);
  v53 = (ServerLogging *)v14;
  v15 = (std::__shared_weak_count *)operator new(0x20uLL);
  v15->__shared_owners_ = 0;
  v16 = (unint64_t *)&v15->__shared_owners_;
  v15->__vftable = (std::__shared_weak_count_vtbl *)off_1E78FFD28;
  v15->__shared_weak_owners_ = 0;
  v15[1].__vftable = (std::__shared_weak_count_vtbl *)v14;
  v53 = 0;
  v17 = (std::__shared_weak_count *)*((_QWORD *)v14 + 1);
  if (v17)
  {
    if (v17->__shared_owners_ != -1)
      goto LABEL_27;
    do
      v18 = __ldxr(v16);
    while (__stxr(v18 + 1, v16));
    p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v20 = __ldxr(p_shared_weak_owners);
    while (__stxr(v20 + 1, p_shared_weak_owners));
    *(_QWORD *)v14 = v14;
    *((_QWORD *)v14 + 1) = v15;
    std::__shared_weak_count::__release_weak(v17);
  }
  else
  {
    do
      v21 = __ldxr(v16);
    while (__stxr(v21 + 1, v16));
    v22 = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    *(_QWORD *)v14 = v14;
    *((_QWORD *)v14 + 1) = v15;
  }
  do
    v24 = __ldaxr(v16);
  while (__stlxr(v24 - 1, v16));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_27:
  if (v53)
  {
    ServerLogging::~ServerLogging(v53);
    operator delete(v25);
  }
  os_unfair_lock_lock((os_unfair_lock_t)v14 + 4);
  v26 = ServerLogging::monitorSnapshotPath_sync((ServerLogging *)v14);
  *((_QWORD *)v14 + 9) = v26;
  ServerLogging::clearScratchFolders_sync((ServerLogging *)v26);
  v27 = (ctu::LogServer *)*((_QWORD *)v14 + 10);
  if (v27)
    ctu::LogServer::setEnabled(v27);
  os_unfair_lock_unlock((os_unfair_lock_t)v14 + 4);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v52.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_33:
      v28 = (std::__shared_weak_count *)off_1ED70FBC8;
      qword_1ED70FBC0 = (uint64_t)v14;
      off_1ED70FBC8 = v15;
      if (!v28)
        goto LABEL_45;
LABEL_41:
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
      goto LABEL_45;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_33;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  v28 = (std::__shared_weak_count *)off_1ED70FBC8;
  qword_1ED70FBC0 = (uint64_t)v14;
  off_1ED70FBC8 = v15;
  if (v28)
    goto LABEL_41;
LABEL_45:
  v11 = qword_1ED70FBC0;
LABEL_46:
  v31 = (std::__shared_weak_count *)off_1ED70FBC8;
  if (off_1ED70FBC8)
  {
    v32 = (unint64_t *)((char *)off_1ED70FBC8 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  pthread_mutex_unlock(&ctu::Singleton<ServerLogging,ServerLogging,ctu::PthreadMutexGuardPolicy<ServerLogging>>::sInstance);
  v34 = *(_QWORD **)(a1 + 32);
  v35 = (std::__shared_weak_count *)v34[1];
  v51[0] = *v34;
  v51[1] = v35;
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
    ServerLogging::registerLogServer(v11, (uint64_t)v51);
    do
      v38 = __ldaxr(v36);
    while (__stlxr(v38 - 1, v36));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  else
  {
    ServerLogging::registerLogServer(v11, (uint64_t)v51);
  }
  if (v31)
  {
    v39 = (unint64_t *)&v31->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v41 = *(uint64_t **)(a1 + 32);
  v43 = *v41;
  v42 = (std::__shared_weak_count *)v41[1];
  v49 = v43;
  v50 = v42;
  if (v42)
  {
    v44 = (unint64_t *)&v42->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  __p.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
  __p.__r_.__value_.__l.__size_ = 0x40000000;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v55 = &__block_descriptor_tmp_16;
  v56 = &v49;
  if (abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v46 = v50;
    if (!v50)
      return;
  }
  else
  {
    dispatch_once(&abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &__p);
    v46 = v50;
    if (!v50)
      return;
  }
  v47 = (unint64_t *)&v46->__shared_owners_;
  do
    v48 = __ldaxr(v47);
  while (__stlxr(v48 - 1, v47));
  if (!v48)
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
}

void sub_1BF3A1530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, ServerLogging *a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::unique_ptr<ServerLogging>::~unique_ptr[abi:ne180100](&a19);
  if (a18 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  pthread_mutex_unlock(&ctu::Singleton<ServerLogging,ServerLogging,ctu::PthreadMutexGuardPolicy<ServerLogging>>::sInstance);
  _Unwind_Resume(a1);
}

ServerLogging **std::unique_ptr<ServerLogging>::~unique_ptr[abi:ne180100](ServerLogging **a1)
{
  ServerLogging *v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    ServerLogging::~ServerLogging(v2);
    operator delete(v3);
  }
  return a1;
}

void std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::__on_zero_shared(uint64_t a1)
{
  ServerLogging *v1;
  void *v2;

  v1 = *(ServerLogging **)(a1 + 24);
  if (v1)
  {
    ServerLogging::~ServerLogging(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF53F32ELL)
    return a1 + 24;
  if (((v3 & 0x80000001BF53F32ELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF53F32ELL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF53F32ELL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t ctu::cf::plist_adapter::set<std::string>(int a1, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v6;
  std::string v7;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v7 = *(std::string *)a2;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v6, a3);
  v4 = ctu::cf::plist_adapter::set<std::string>();
  MEMORY[0x1C3B8936C](&v6);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return v4;
}

uint64_t ctu::cf::plist_adapter::set<std::string>()
{
  ctu::cf::convert_copy();
  return 0;
}

void sub_1BF3A1868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_3()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1BF335000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<sys::UIObserver>::~PthreadMutexGuardPolicy, &ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance, &dword_1BF335000);
  }
  return result;
}

uint64_t __cxx_global_var_init_10()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ServerLogging>::~PthreadMutexGuardPolicy, &ctu::Singleton<ServerLogging,ServerLogging,ctu::PthreadMutexGuardPolicy<ServerLogging>>::sInstance, &dword_1BF335000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1BF335000);
  }
  return result;
}

void BootModule::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12[2];
  uint64_t v13[2];
  __int128 v14;

  *a2 = 0;
  a2[1] = 0;
  if (capabilities::radio::vendor((capabilities::radio *)a1) == 1)
  {
    v4 = operator new(0x1E8uLL);
    v5 = (uint64_t)v4;
    v6 = *a1;
    v7 = (std::__shared_weak_count *)a1[1];
    v13[0] = v6;
    v13[1] = (uint64_t)v7;
    if (v7)
    {
      p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
    }
    v12[0] = 0;
    v12[1] = 0;
    BootModule::BootModule((uint64_t)v4, v13, v12);
    *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
    std::shared_ptr<BootModule>::shared_ptr[abi:ne180100]<BootModule,std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule*)#1},void>(&v14, v5);
    ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(v14 + 48);
    v10 = v14;
    v14 = 0uLL;
    *(_OWORD *)a2 = v10;
    if (v7)
    {
      v11 = v10;
      std::__shared_weak_count::__release_weak(v7);
      *(_QWORD *)&v10 = v11;
    }
    BootModule::init((BootModule *)v10);
  }
}

void sub_1BF3A19C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void sub_1BF3A1A34(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BootModule::init(BootModule *this)
{
  std::__shared_weak_count *v3;
  char *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  _QWORD v16[6];
  std::__shared_weak_count *v17;
  _QWORD *v18;
  _QWORD block[6];

  v5 = *((_QWORD *)this + 15);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  v4 = (char *)this + 120;
  if (!v3 || (v6 = std::__shared_weak_count::lock(v3)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 1174405120;
  v16[2] = ___ZN10BootModule4initEv_block_invoke;
  v16[3] = &__block_descriptor_tmp_16;
  v16[4] = this;
  v16[5] = v5;
  v17 = v7;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v18 = v16;
  block[0] = v12;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI10BootModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_142;
  block[4] = v4;
  block[5] = &v18;
  v14 = *((_QWORD *)this + 17);
  if (!*((_QWORD *)this + 18))
  {
    dispatch_sync(v14, block);
    v15 = v17;
    if (!v17)
      goto LABEL_14;
    goto LABEL_13;
  }
  dispatch_async_and_wait(v14, block);
  v15 = v17;
  if (v17)
LABEL_13:
    std::__shared_weak_count::__release_weak(v15);
LABEL_14:
  std::__shared_weak_count::__release_weak(v7);
}

uint64_t BootModule::BootModule(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unsigned __int8 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  NSObject *initially_inactive;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  config::hw *v22;
  const char *v23;
  size_t v24;
  std::string::size_type v25;
  std::string *p_dst;
  uint64_t v27;
  uint64_t v28;
  std::string *v29;
  __int128 v30;
  void **v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  std::__shared_weak_count *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  void *v48[2];
  char v49;
  std::string __dst;
  uint64_t v51;
  uint64_t v52;
  void *__p[2];
  void (*v54)(uint64_t);
  void *v55;
  uint64_t *v56;

  v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_1E7908A38;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v6);
    *(_QWORD *)a1 = &unk_1E78FC4E8;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_1E78FC4E8;
    *(_QWORD *)(a1 + 8) = v5;
  }
  *(_QWORD *)a1 = off_1E78FFD78;
  *(_QWORD *)(a1 + 48) = &unk_1E78FFE00;
  v11 = (_QWORD *)(a1 + 48);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v48, "com.apple.telephony.abm", "boot.mod");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  __p[0] = (void *)MEMORY[0x1E0C809B0];
  __p[1] = (void *)0x40000000;
  v54 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v55 = &__block_descriptor_tmp_13_2;
  v56 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v14 = GetABMLogServer(void)::sLogServer;
    v13 = *(std::__shared_weak_count **)algn_1ED710088;
    v51 = GetABMLogServer(void)::sLogServer;
    v52 = *(_QWORD *)algn_1ED710088;
    if (*(_QWORD *)algn_1ED710088)
      goto LABEL_12;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, __p);
    v14 = GetABMLogServer(void)::sLogServer;
    v13 = *(std::__shared_weak_count **)algn_1ED710088;
    v51 = GetABMLogServer(void)::sLogServer;
    v52 = *(_QWORD *)algn_1ED710088;
    if (*(_QWORD *)algn_1ED710088)
    {
LABEL_12:
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v18 = dispatch_queue_create_with_target_V2("boot.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v18, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v18);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v18;
  if (v18)
  {
    dispatch_retain(v18);
    *(_QWORD *)(a1 + 144) = 0;
    dispatch_release(v18);
  }
  else
  {
    *(_QWORD *)(a1 + 144) = 0;
  }
  *(_QWORD *)(a1 + 48) = off_1E7900768;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)__p);
  *(_QWORD *)(a1 + 56) = &unk_1E78FB900;
  *(_QWORD *)(a1 + 104) = v14;
  *(_QWORD *)(a1 + 112) = v13;
  if (v13)
  {
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&__dst);
    *v11 = off_1E79007F8;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&__dst);
    *v11 = off_1E79007F8;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v48);
  *(_QWORD *)a1 = off_1E78FFD78;
  *(_QWORD *)(a1 + 48) = &unk_1E78FFE00;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 196) = 15;
  v22 = (config::hw *)dispatch_semaphore_create(0);
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 200) = v22;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = -1;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_QWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = -1;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_QWORD *)(a1 + 384) = 0;
  config::hw::regionInfo(v22);
  *(_QWORD *)(a1 + 416) = dispatch_group_create();
  *(_QWORD *)(a1 + 424) = 0;
  v23 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v24 = strlen(v23);
  if (v24 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v25 = v24;
  if (v24 >= 0x17)
  {
    v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v27 = v24 | 7;
    v28 = v27 + 1;
    p_dst = (std::string *)operator new(v27 + 1);
    __dst.__r_.__value_.__l.__size_ = v25;
    __dst.__r_.__value_.__r.__words[2] = v28 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_32;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v24;
  p_dst = &__dst;
  if (v24)
LABEL_32:
    memmove(p_dst, v23, v25);
  p_dst->__r_.__value_.__s.__data_[v25] = 0;
  v49 = 11;
  strcpy((char *)v48, ".resetqueue");
  v29 = std::string::append(&__dst, (const std::string::value_type *)v48, 0xBuLL);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v54 = (void (*)(uint64_t))v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v54) >= 0)
    v31 = __p;
  else
    v31 = (void **)__p[0];
  v32 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
  *(_QWORD *)(a1 + 432) = dispatch_queue_create((const char *)v31, v32);
  if ((SHIBYTE(v54) & 0x80000000) == 0)
  {
    if ((v49 & 0x80000000) == 0)
      goto LABEL_38;
LABEL_46:
    operator delete(v48[0]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_47;
  }
  operator delete(__p[0]);
  if (v49 < 0)
    goto LABEL_46;
LABEL_38:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_39;
LABEL_47:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_39:
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  v33 = *a3;
  *(_QWORD *)(a1 + 472) = *a3;
  v34 = a3[1];
  *(_QWORD *)(a1 + 480) = v34;
  if (v34)
  {
    v35 = (unint64_t *)(v34 + 8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
    v33 = *(_QWORD *)(a1 + 472);
  }
  *(_WORD *)(a1 + 228) = 0;
  *(_DWORD *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 256) = 8;
  if (!v33)
  {
    v38 = (std::__shared_weak_count *)operator new(0x88uLL);
    v38->__shared_owners_ = 0;
    v39 = (unint64_t *)&v38->__shared_owners_;
    v38->__shared_weak_owners_ = 0;
    v38->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E78FCD48;
    v40 = v38 + 1;
    BootController::BootController((BootController *)&v38[1]);
    v38[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E78FFB10;
    LOBYTE(v38[5].__shared_owners_) = 1;
    do
      v41 = __ldxr(v39);
    while (__stxr(v41 + 1, v39));
    v42 = (unint64_t *)&v38->__shared_weak_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
    v38[4].__shared_weak_owners_ = (uint64_t)v40;
    v38[5].__vftable = (std::__shared_weak_count_vtbl *)v38;
    do
      v44 = __ldaxr(v39);
    while (__stlxr(v44 - 1, v39));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
    v45 = *(std::__shared_weak_count **)(a1 + 480);
    *(_QWORD *)(a1 + 472) = v40;
    *(_QWORD *)(a1 + 480) = v38;
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
  return a1;
}

void sub_1BF3A21A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23)
{
  uint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  void **v26;
  uint64_t v27;
  void **v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *v32;
  NSObject *v33;
  NSObject *v34;
  NSObject *v35;
  NSObject *v36;
  NSObject *v37;
  NSObject *v38;
  uint64_t v39;
  const void **v40;
  const void *v41;
  NSObject *v42;
  NSObject *v43;
  NSObject *v44;

  v30 = v25;
  std::__shared_weak_count::~__shared_weak_count(v30);
  operator delete(v32);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v27);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v23 + 456);
  v33 = *(NSObject **)(v23 + 440);
  if (v33)
  {
    dispatch_resume(v33);
    v34 = *(NSObject **)(v23 + 440);
    if (v34)
      dispatch_release(v34);
  }
  v35 = *(NSObject **)(v23 + 432);
  if (v35)
    dispatch_release(v35);
  v36 = *(NSObject **)(v23 + 424);
  if (v36)
  {
    dispatch_group_leave(v36);
    v37 = *(NSObject **)(v23 + 424);
    if (v37)
      dispatch_release(v37);
  }
  v38 = *(NSObject **)(v23 + 416);
  if (v38)
  {
    dispatch_release(v38);
    if ((*(char *)(v23 + 415) & 0x80000000) == 0)
    {
LABEL_11:
      v39 = v29 + 64;
      if ((*(char *)(v23 + 375) & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_17;
    }
  }
  else if ((*(char *)(v23 + 415) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(*v26);
  v39 = v29 + 64;
  if ((*(char *)(v23 + 375) & 0x80000000) == 0)
  {
LABEL_12:
    v40 = (const void **)(v29 + 56);
    if ((*(char *)(v23 + 327) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)(v29 + 144));
  v40 = (const void **)(v29 + 56);
  if ((*(char *)(v23 + 327) & 0x80000000) == 0)
  {
LABEL_13:
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v39);
    v41 = *v40;
    if (!*v40)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v29 + 96));
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v39);
  v41 = *v40;
  if (!*v40)
  {
LABEL_20:
    v42 = *(NSObject **)(v23 + 216);
    if (v42)
    {
      dispatch_group_leave(v42);
      v43 = *(NSObject **)(v23 + 216);
      if (v43)
        dispatch_release(v43);
    }
    if (*(_QWORD *)v29)
    {
      dispatch_group_leave(*(dispatch_group_t *)v29);
      if (*(_QWORD *)v29)
        dispatch_release(*(dispatch_object_t *)v29);
    }
    v44 = *(NSObject **)(v23 + 200);
    if (v44)
      dispatch_release(v44);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v29 - 32);
    if (*(char *)(v23 + 175) < 0)
      operator delete(*v28);
    ctu::SharedLoggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v24);
    Service::~Service((Service *)v23);
    _Unwind_Resume(a1);
  }
LABEL_19:
  _Block_release(v41);
  goto LABEL_20;
}

_QWORD *ctu::SharedLoggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7900768;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7900768;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void BootModule::~BootModule(BootModule *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  const void *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *v27;
  NSObject *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  std::__shared_weak_count *v33;
  uint8_t v34[16];

  *(_QWORD *)this = off_1E78FFD78;
  *((_QWORD *)this + 6) = &unk_1E78FFE00;
  v2 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v34 = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v34, 2u);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 60);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 58);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = *((_QWORD *)this + 55);
  if (v9)
  {
    dispatch_resume(v9);
    v10 = *((_QWORD *)this + 55);
    if (v10)
      dispatch_release(v10);
  }
  v11 = *((_QWORD *)this + 54);
  if (v11)
    dispatch_release(v11);
  v12 = *((_QWORD *)this + 53);
  if (v12)
  {
    dispatch_group_leave(v12);
    v13 = *((_QWORD *)this + 53);
    if (v13)
      dispatch_release(v13);
  }
  v14 = *((_QWORD *)this + 52);
  if (v14)
    dispatch_release(v14);
  if (*((char *)this + 415) < 0)
  {
    operator delete(*((void **)this + 49));
    if ((*((char *)this + 375) & 0x80000000) == 0)
    {
LABEL_25:
      if ((*((char *)this + 327) & 0x80000000) == 0)
        goto LABEL_26;
      goto LABEL_30;
    }
  }
  else if ((*((char *)this + 375) & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(*((void **)this + 44));
  if ((*((char *)this + 327) & 0x80000000) == 0)
  {
LABEL_26:
    v15 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
    if (!v15)
      goto LABEL_34;
    goto LABEL_31;
  }
LABEL_30:
  operator delete(*((void **)this + 38));
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (!v15)
    goto LABEL_34;
LABEL_31:
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    v18 = (const void *)*((_QWORD *)this + 33);
    if (!v18)
      goto LABEL_36;
    goto LABEL_35;
  }
LABEL_34:
  v18 = (const void *)*((_QWORD *)this + 33);
  if (v18)
LABEL_35:
    _Block_release(v18);
LABEL_36:
  v19 = *((_QWORD *)this + 27);
  if (v19)
  {
    dispatch_group_leave(v19);
    v20 = *((_QWORD *)this + 27);
    if (v20)
      dispatch_release(v20);
  }
  v21 = *((_QWORD *)this + 26);
  if (v21)
  {
    dispatch_group_leave(v21);
    v22 = *((_QWORD *)this + 26);
    if (v22)
      dispatch_release(v22);
  }
  v23 = *((_QWORD *)this + 25);
  if (v23)
    dispatch_release(v23);
  v24 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (!v24)
    goto LABEL_48;
  v25 = (unint64_t *)&v24->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (v26)
  {
LABEL_48:
    if ((*((char *)this + 175) & 0x80000000) == 0)
      goto LABEL_50;
    goto LABEL_49;
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  if (*((char *)this + 175) < 0)
LABEL_49:
    operator delete(*((void **)this + 19));
LABEL_50:
  *((_QWORD *)this + 6) = off_1E7900768;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v27 = *((_QWORD *)this + 18);
  if (v27)
    dispatch_release(v27);
  v28 = *((_QWORD *)this + 17);
  if (v28)
    dispatch_release(v28);
  v29 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v29)
    std::__shared_weak_count::__release_weak(v29);
  *(_QWORD *)this = off_1E7908A38;
  v30 = *((_QWORD *)this + 3);
  if (v30)
  {
    v31 = *((_QWORD *)this + 4);
    v32 = (void *)*((_QWORD *)this + 3);
    if (v31 != v30)
    {
      do
      {
        if (*(char *)(v31 - 1) < 0)
          operator delete(*(void **)(v31 - 24));
        v31 -= 24;
      }
      while (v31 != v30);
      v32 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v30;
    operator delete(v32);
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v33)
    std::__shared_weak_count::__release_weak(v33);
}

{
  void *v1;

  BootModule::~BootModule(this);
  operator delete(v1);
}

void `non-virtual thunk to'BootModule::~BootModule(BootModule *this)
{
  BootModule::~BootModule((BootModule *)((char *)this - 48));
}

{
  void *v1;

  BootModule::~BootModule((BootModule *)((char *)this - 48));
  operator delete(v1);
}

void BootModule::changeState_sync(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  _BOOL8 v5;
  uint64_t v6;
  const char *v7;
  const char *v8;
  void *v9;
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  NSObject *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  int v32;
  NSObject *v33;
  NSObject *v34;
  uint64_t v35;
  __CFDictionary *Mutable;
  const __CFAllocator *v37;
  const void *v38;
  size_t v39;
  void *v40;
  void **v41;
  const void *v42;
  uint64_t v43;
  uint64_t v44;
  CFTypeID v45;
  void *v46;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  void *aBlock;
  __int128 v53;
  _BYTE buf[22];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v4 = *(NSObject **)(a1 + 88);
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    v6 = *(int *)(a1 + 448);
    if (v6 > 8)
    {
      v7 = "Unknown";
      if (a2 > 8)
        goto LABEL_4;
    }
    else
    {
      v7 = off_1E7900FC0[v6];
      if (a2 > 8)
      {
LABEL_4:
        v8 = "Unknown";
LABEL_7:
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v7;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v8;
        _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I boot state changing %{public}s -> %{public}s", buf, 0x16u);
        goto LABEL_8;
      }
    }
    v8 = off_1E7900FC0[a2];
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(a1 + 448) = a2;
  if (!capabilities::ipc::supportsPCI((capabilities::ipc *)v5))
    goto LABEL_56;
  if ((*(_DWORD *)(a1 + 448) - 3) > 1)
  {
    v29 = *(std::__shared_weak_count **)(a1 + 280);
    *(_QWORD *)(a1 + 272) = 0;
    *(_QWORD *)(a1 + 280) = 0;
    if (!v29)
      goto LABEL_56;
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (v31)
      goto LABEL_56;
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    if (!*(_QWORD *)(a1 + 216))
      goto LABEL_62;
  }
  else
  {
    if (*(_QWORD *)(a1 + 272))
      goto LABEL_56;
    v9 = *(void **)(a1 + 264);
    if (v9)
      v9 = _Block_copy(v9);
    aBlock = v9;
    pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
    v10 = off_1ED70FA00;
    if (!off_1ED70FA00)
    {
      ABMServer::create_default_global(buf);
      v11 = *(_OWORD *)buf;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v12 = (std::__shared_weak_count *)*(&off_1ED70FA00 + 1);
      off_1ED70FA00 = v11;
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v16 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v10 = off_1ED70FA00;
    }
    v50 = v10;
    v51 = (std::__shared_weak_count *)*(&off_1ED70FA00 + 1);
    if (*(&off_1ED70FA00 + 1))
    {
      v18 = (unint64_t *)(*(&off_1ED70FA00 + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
    pci::event::Listener::create();
    v20 = v53;
    v53 = 0uLL;
    v21 = *(std::__shared_weak_count **)(a1 + 280);
    *(_OWORD *)(a1 + 272) = v20;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (*((_QWORD *)&v53 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v53 + 1) + 16))(*((_QWORD *)&v53 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v53 + 1));
      }
    }
    if (v51)
    {
      v26 = &v51->__shared_owners_;
      do
        v27 = __ldaxr((unint64_t *)v26);
      while (__stlxr(v27 - 1, (unint64_t *)v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    if (aBlock)
      _Block_release(aBlock);
    v28 = *(NSObject **)(a1 + 88);
    if (*(_QWORD *)(a1 + 272))
    {
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BF335000, v28, OS_LOG_TYPE_DEFAULT, "#I Listening for PCI events", buf, 2u);
        if (!*(_QWORD *)(a1 + 216))
          goto LABEL_62;
        goto LABEL_57;
      }
LABEL_56:
      if (!*(_QWORD *)(a1 + 216))
        goto LABEL_62;
      goto LABEL_57;
    }
    if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      goto LABEL_56;
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF335000, v28, OS_LOG_TYPE_ERROR, "Could not create PCI event listener!", buf, 2u);
    if (!*(_QWORD *)(a1 + 216))
      goto LABEL_62;
  }
LABEL_57:
  v32 = *(_DWORD *)(a1 + 448);
  if (v32 != 4)
    goto LABEL_63;
  v33 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v33, OS_LOG_TYPE_DEFAULT, "#I Releasing shutdown request session", buf, 2u);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, 7);
  v34 = *(NSObject **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v34)
  {
    dispatch_group_leave(v34);
    dispatch_release(v34);
  }
LABEL_62:
  v32 = *(_DWORD *)(a1 + 448);
LABEL_63:
  if (v32 != 7)
    return;
  *(_QWORD *)buf = 0;
  v35 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
    *(_QWORD *)buf = Mutable;
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E0CFB530], (const __CFString **)*MEMORY[0x1E0CFBD98], v35, v37);
  v38 = (const void *)*MEMORY[0x1E0CFBD68];
  v39 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  if (v39 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v40 = (void *)v39;
  if (v39 >= 0x17)
  {
    v43 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v39 | 7) != 0x17)
      v43 = v39 | 7;
    v44 = v43 + 1;
    v41 = (void **)operator new(v43 + 1);
    __dst[1] = v40;
    v49 = v44 | 0x8000000000000000;
    __dst[0] = v41;
LABEL_74:
    memmove(v41, v38, (size_t)v40);
    *((_BYTE *)v40 + (_QWORD)v41) = 0;
    v42 = *(const void **)buf;
    if (!*(_QWORD *)buf)
      goto LABEL_77;
    goto LABEL_75;
  }
  HIBYTE(v49) = v39;
  v41 = __dst;
  if (v39)
    goto LABEL_74;
  LOBYTE(__dst[0]) = 0;
  v42 = *(const void **)buf;
  if (!*(_QWORD *)buf)
    goto LABEL_77;
LABEL_75:
  v45 = CFGetTypeID(v42);
  if (v45 == CFDictionaryGetTypeID())
  {
    cf = v42;
    CFRetain(v42);
    goto LABEL_78;
  }
LABEL_77:
  cf = 0;
LABEL_78:
  v46 = 0;
  Service::broadcastEvent(a1, (uint64_t)__dst, &cf, (const void **)&v46);
  if (v46)
    _Block_release(v46);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v49) < 0)
  {
    operator delete(__dst[0]);
    if (!v42)
      return;
  }
  else if (!v42)
  {
    return;
  }
  CFRelease(v42);
}

void sub_1BF3A2CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *aBlock, uint64_t a20,uint64_t a21,char a22)
{
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  if (aBlock)
    _Block_release(aBlock);
  _Unwind_Resume(a1);
}

const char *BootModule::getName(BootModule *this)
{
  return "boot.mod";
}

void BootModule::requestReset(_QWORD *a1, __int128 *a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  capabilities::abs *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  void **v15;
  void (**v16)(void *, _QWORD, void **);
  NSObject *v17;
  unint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  _QWORD block[6];
  std::__shared_weak_count *v22;
  std::string v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  void *aBlock;
  void *v31[2];
  char v32;
  uint8_t buf[4];
  void **v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v7 = a1[15], (v8 = (capabilities::abs *)std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = (std::__shared_weak_count *)v8;
  v10 = (unint64_t *)((char *)v8 + 16);
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  v12 = (unint64_t *)((char *)v8 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    (*(void (**)(capabilities::abs *))(*(_QWORD *)v8 + 16))(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (!capabilities::abs::shouldIgnoreResets(v8))
  {
    v17 = a1[54];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZN10BootModule12requestResetE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_8_2;
    block[4] = a1;
    block[5] = v7;
    v22 = v9;
    do
      v18 = __ldxr(v10);
    while (__stxr(v18 + 1, v10));
    ResetInfo::ResetInfo(&v23, a2);
    v19 = *a3;
    if (*a3)
      v19 = _Block_copy(v19);
    aBlock = v19;
    dispatch_async(v17, block);
    if (aBlock)
      _Block_release(aBlock);
    if (v29 < 0)
    {
      operator delete(__p);
      if ((v27 & 0x80000000) == 0)
      {
LABEL_26:
        if ((v25 & 0x80000000) == 0)
          goto LABEL_27;
        goto LABEL_32;
      }
    }
    else if ((v27 & 0x80000000) == 0)
    {
      goto LABEL_26;
    }
    operator delete(v26);
    if ((v25 & 0x80000000) == 0)
    {
LABEL_27:
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_33;
    }
LABEL_32:
    operator delete(v24);
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_28:
      v20 = v22;
      if (!v22)
        goto LABEL_35;
      goto LABEL_34;
    }
LABEL_33:
    operator delete(v23.__r_.__value_.__l.__data_);
    v20 = v22;
    if (!v22)
      goto LABEL_35;
LABEL_34:
    std::__shared_weak_count::__release_weak(v20);
    goto LABEL_35;
  }
  v14 = a1[11];
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)
    && ((ResetInfo::asString((ResetInfo *)a2, v31), v32 >= 0) ? (v15 = v31) : (v15 = (void **)v31[0]),
        *(_DWORD *)buf = 136446210,
        v34 = v15,
        _os_log_impl(&dword_1BF335000, v14, OS_LOG_TYPE_DEFAULT, "#I Ignoring modem reset request: %{public}s", buf, 0xCu), v32 < 0))
  {
    operator delete(v31[0]);
    v16 = (void (**)(void *, _QWORD, void **))*a3;
    if (!*a3)
      goto LABEL_35;
  }
  else
  {
    v16 = (void (**)(void *, _QWORD, void **))*a3;
    if (!*a3)
      goto LABEL_35;
  }
  v32 = 0;
  LOBYTE(v31[0]) = 0;
  v16[2](v16, 0, v31);
  if (v32 < 0)
    operator delete(v31[0]);
LABEL_35:
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1BF3A304C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  std::__shared_weak_count *v16;

  std::__shared_weak_count::__release_weak(v16);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule12requestResetE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  const void *v6;
  void *v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD v16[5];
  std::string v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *__p;
  char v23;
  void *aBlock;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v28;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = std::__shared_weak_count::lock(v2);
    v28 = v4;
    if (v4)
    {
      v5 = v4;
      if (!*(_QWORD *)(a1 + 40))
        goto LABEL_18;
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 1174405120;
      v16[2] = ___ZN10BootModule12requestResetE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2;
      v16[3] = &__block_descriptor_tmp_8;
      v16[4] = v3;
      ResetInfo::ResetInfo(&v17, (__int128 *)(a1 + 56));
      v6 = *(const void **)(a1 + 168);
      if (v6)
      {
        v7 = _Block_copy(v6);
        v8 = (uint64_t *)(v3 + 120);
        v10 = *(_QWORD *)(a1 + 40);
        v9 = *(std::__shared_weak_count **)(a1 + 48);
        aBlock = v7;
        v25 = v10;
        v26 = v9;
        if (!v9)
          goto LABEL_10;
      }
      else
      {
        v8 = (uint64_t *)(v3 + 120);
        v11 = *(_QWORD *)(a1 + 40);
        v9 = *(std::__shared_weak_count **)(a1 + 48);
        aBlock = 0;
        v25 = v11;
        v26 = v9;
        if (!v9)
          goto LABEL_10;
      }
      p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
      do
        v13 = __ldxr(p_shared_weak_owners);
      while (__stxr(v13 + 1, p_shared_weak_owners));
LABEL_10:
      ctu::SharedSynchronizable<BootModule>::execute_wrapped(v8, (uint64_t)v16);
      if (v26)
        std::__shared_weak_count::__release_weak(v26);
      if (aBlock)
        _Block_release(aBlock);
      if (v23 < 0)
      {
        operator delete(__p);
        if ((v21 & 0x80000000) == 0)
        {
LABEL_16:
          if ((v19 & 0x80000000) == 0)
            goto LABEL_17;
          goto LABEL_25;
        }
      }
      else if ((v21 & 0x80000000) == 0)
      {
        goto LABEL_16;
      }
      operator delete(v20);
      if ((v19 & 0x80000000) == 0)
      {
LABEL_17:
        if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_18;
LABEL_26:
        operator delete(v17.__r_.__value_.__l.__data_);
LABEL_18:
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return;
      }
LABEL_25:
      operator delete(v18);
      if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_18;
      goto LABEL_26;
    }
  }
}

void sub_1BF3A3254(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule12requestResetE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2(uint64_t a1)
{
  _QWORD *v2;
  unsigned int v3;
  uint64_t v5;
  const char *v6;
  size_t v7;
  std::string *v8;
  __int128 v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  std::string *v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  int v17;
  std::string::size_type v18;
  std::string *p_buf;
  std::string *v20;
  xpc_object_t v21;
  xpc_object_t v22;
  int v23;
  size_t size;
  std::string *p_p;
  _BOOL4 v26;
  std::string::size_type v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  std::string::size_type v31;
  std::string::size_type v32;
  unint64_t *v33;
  unint64_t v34;
  void *v35;
  NSObject *v36;
  NSObject *v37;
  std::string *v38;
  std::string::__raw *v39;
  std::string::size_type v40;
  unint64_t *v41;
  unint64_t v42;
  void *v43;
  dispatch_object_t v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::string __p;
  std::string v50;
  void *v51;
  char v52;
  void *v53;
  char v54;
  void *v55;
  char v56;
  void *aBlock;
  dispatch_object_t v58;
  dispatch_object_t object;
  xpc_object_t v60;
  xpc_object_t v61;
  _BYTE v62[12];
  __int16 v63;
  std::string *v64;
  std::string buf;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 32);
  v3 = *((_DWORD *)v2 + 112);
  if (v3 > 8 || ((1 << v3) & 0x1C7) == 0)
  {
    v12 = v2[11];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      ResetInfo::asString((ResetInfo *)(a1 + 40), &__p);
      v13 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
      _os_log_impl(&dword_1BF335000, v12, OS_LOG_TYPE_DEFAULT, "#I Reset requested: %{public}s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    (*(void (**)(_QWORD *, uint64_t))(*v2 + 96))(v2, 1);
    *(_QWORD *)v62 = 0xAAAAAAAAAAAAAAAALL;
    v14 = xpc_dictionary_create(0, 0, 0);
    v15 = v14;
    if (v14)
    {
      *(_QWORD *)v62 = v14;
    }
    else
    {
      v15 = xpc_null_create();
      *(_QWORD *)v62 = v15;
      if (!v15)
      {
        v16 = xpc_null_create();
        v15 = 0;
        goto LABEL_40;
      }
    }
    if (MEMORY[0x1C3B8A86C](v15) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v15);
      goto LABEL_41;
    }
    v16 = xpc_null_create();
LABEL_40:
    *(_QWORD *)v62 = v16;
LABEL_41:
    xpc_release(v15);
    ResetInfo::addToDict((ResetInfo *)(a1 + 40), (xpc_object_t *)v62);
    v21 = *(xpc_object_t *)v62;
    v61 = *(xpc_object_t *)v62;
    if (*(_QWORD *)v62)
    {
      xpc_retain(*(xpc_object_t *)v62);
    }
    else
    {
      v21 = xpc_null_create();
      v61 = v21;
    }
    BootModule::submitBBResetMetric_sync((uint64_t)v2, &v61);
    xpc_release(v21);
    v22 = *(xpc_object_t *)v62;
    v60 = *(xpc_object_t *)v62;
    v61 = 0;
    if (*(_QWORD *)v62)
    {
      xpc_retain(*(xpc_object_t *)v62);
    }
    else
    {
      v22 = xpc_null_create();
      v60 = v22;
    }
    BootModule::updateAnalyticsEvent_sync((uint64_t)v2, &v60);
    xpc_release(v22);
    v60 = 0;
    if (*(char *)(a1 + 63) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
    else
      __p = *(std::string *)(a1 + 40);
    v23 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    if (size == strlen((const char *)*MEMORY[0x1E0CFB590]))
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v26 = memcmp(p_p, (const void *)*MEMORY[0x1E0CFB590], size) == 0;
      if ((v23 & 0x80000000) == 0)
      {
LABEL_61:
        if (v26)
          BootModule::reportStatisticsHardResetTime_sync((BootModule *)v2);
        memset(&buf, 170, 16);
        (*(void (**)(std::string *__return_ptr, _QWORD *))(*v2 + 80))(&buf, v2);
        v27 = buf.__r_.__value_.__r.__words[0];
        if (!buf.__r_.__value_.__r.__words[0])
          goto LABEL_91;
        object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
        v28 = (char *)operator new(0x38uLL);
        strcpy(v28, "com.apple.AppleBasebandManager.RadioNotReady.Bootup");
        v29 = capabilities::abs::resetAssertionTimeoutScalingFactor((capabilities::abs *)v28);
        v30 = *(_QWORD *)(v27 + 104);
        std::string::__init_copy_ctor_external(&__p, v28, 0x33uLL);
        (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, std::string *, uint64_t))(*(_QWORD *)v30 + 24))(&object, v30, &__p, 360000 * v29);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        operator delete(v28);
        v32 = *(_QWORD *)(a1 + 160);
        v31 = *(_QWORD *)(a1 + 168);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v2;
        __p.__r_.__value_.__l.__size_ = v32;
        __p.__r_.__value_.__r.__words[2] = v31;
        if (v31)
        {
          v33 = (unint64_t *)(v31 + 16);
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
        }
        ResetInfo::ResetInfo(&v50, (__int128 *)(a1 + 40));
        v35 = *(void **)(a1 + 152);
        if (v35)
          v35 = _Block_copy(v35);
        aBlock = v35;
        v58 = object;
        if (object)
        {
          dispatch_retain(object);
          v36 = object;
        }
        else
        {
          v36 = 0;
        }
        v37 = v2[17];
        v38 = (std::string *)operator new(0x98uLL);
        v39 = (std::string::__raw *)v38;
        *(_OWORD *)&v38->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v40 = __p.__r_.__value_.__r.__words[2];
        v38->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        if (v40)
        {
          v41 = (unint64_t *)(v40 + 16);
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
        }
        ResetInfo::ResetInfo(v38 + 1, (__int128 *)&v50);
        v43 = aBlock;
        if (aBlock)
          v43 = _Block_copy(aBlock);
        v44 = v58;
        v39[5].__words[2] = (std::string::size_type)v43;
        v39[6].__words[0] = (std::string::size_type)v44;
        v58 = 0;
        dispatch_group_notify_f(v36, v37, v39, (dispatch_function_t)_ZZN8dispatch6detail12group_notifyIZZZN10BootModule12requestResetE9ResetInfoNS_5blockIU13block_pointerFviNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEEUb_EUb0_E3__0EEvP16dispatch_group_sP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEEENUlPvE_8__invokeESO_);
        if (v58)
          dispatch_release(v58);
        if (aBlock)
          _Block_release(aBlock);
        if (v56 < 0)
        {
          operator delete(v55);
          if ((v54 & 0x80000000) == 0)
          {
LABEL_85:
            if ((v52 & 0x80000000) == 0)
              goto LABEL_86;
            goto LABEL_100;
          }
        }
        else if ((v54 & 0x80000000) == 0)
        {
          goto LABEL_85;
        }
        operator delete(v53);
        if ((v52 & 0x80000000) == 0)
        {
LABEL_86:
          if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_87;
          goto LABEL_101;
        }
LABEL_100:
        operator delete(v51);
        if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_87:
          v45 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
          if (!__p.__r_.__value_.__r.__words[2])
            goto LABEL_89;
          goto LABEL_88;
        }
LABEL_101:
        operator delete(v50.__r_.__value_.__l.__data_);
        v45 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
        if (!__p.__r_.__value_.__r.__words[2])
        {
LABEL_89:
          if (object)
            dispatch_release(object);
LABEL_91:
          v46 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
          if (buf.__r_.__value_.__l.__size_)
          {
            v47 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 - 1, v47));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          xpc_release(*(xpc_object_t *)v62);
          return;
        }
LABEL_88:
        std::__shared_weak_count::__release_weak(v45);
        goto LABEL_89;
      }
    }
    else
    {
      v26 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_61;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_61;
  }
  v5 = (int)v3;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1BF53F390;
  strcpy(__p.__r_.__value_.__l.__data_, "Reset rejected; Boot state is: ");
  if (v5 > 8)
    v6 = "Unknown";
  else
    v6 = off_1E7900FC0[v5];
  v7 = strlen(v6);
  v8 = std::string::append(&__p, v6, v7);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  buf.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v10 = v2[11];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    v17 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
    v18 = buf.__r_.__value_.__r.__words[0];
    ResetInfo::asString((ResetInfo *)(a1 + 40), &__p);
    p_buf = &buf;
    if (v17 < 0)
      p_buf = (std::string *)v18;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &__p;
    else
      v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)v62 = 136315394;
    *(_QWORD *)&v62[4] = p_buf;
    v63 = 2080;
    v64 = v20;
    _os_log_debug_impl(&dword_1BF335000, v10, OS_LOG_TYPE_DEBUG, "#D %s; %s", v62, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v11 = *(_QWORD *)(a1 + 152);
  if (!v11)
    goto LABEL_16;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  else
    __p = buf;
  (*(void (**)(uint64_t, uint64_t, std::string *))(v11 + 16))(v11, 3760250880, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_17;
  }
  else
  {
LABEL_16:
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
LABEL_17:
      operator delete(buf.__r_.__value_.__l.__data_);
  }
}

void sub_1BF3A3930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,dispatch_object_t object)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void BootModule::submitBBResetMetric_sync(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  const char *v15;
  xpc_object_t v16;
  xpc_object_t v17;
  const char *v18;
  xpc_object_t v19;
  xpc_object_t v20;
  const char *v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  const void *v32;
  size_t v33;
  size_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  const void *v38;
  xpc_object_t object;
  uint8_t buf[8];
  size_t v41;
  unint64_t v42;

  v4 = MEMORY[0x1C3B8A86C](*a2);
  v5 = MEMORY[0x1E0C812F8];
  v6 = *(NSObject **)(a1 + 88);
  if (v4 != MEMORY[0x1E0C812F8])
  {
    if (os_log_type_enabled(*(os_log_t *)(a1 + 88), OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF335000, v6, OS_LOG_TYPE_ERROR, "No input is given", buf, 2u);
    }
    return;
  }
  if (os_log_type_enabled(*(os_log_t *)(a1 + 88), OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of baseband reset", buf, 2u);
  }
  v7 = xpc_dictionary_create(0, 0, 0);
  if (v7 || (v7 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v7) == v5)
    {
      xpc_retain(v7);
      v8 = v7;
    }
    else
    {
      v8 = xpc_null_create();
    }
  }
  else
  {
    v8 = xpc_null_create();
    v7 = 0;
  }
  xpc_release(v7);
  v9 = xpc_BOOL_create(*(_BYTE *)(a1 + 288));
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB040], v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v11 = xpc_int64_create(*(int *)(a1 + 296));
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFC1F0], v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  v13 = xpc_int64_create(*(int *)(a1 + 344));
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFC1F8], v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  v15 = (const char *)(a1 + 304);
  if (*(char *)(a1 + 327) < 0)
    v15 = *(const char **)v15;
  v16 = xpc_string_create(v15);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFC230], v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  v18 = (const char *)(a1 + 352);
  if (*(char *)(a1 + 375) < 0)
    v18 = *(const char **)v18;
  v19 = xpc_string_create(v18);
  if (!v19)
    v19 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFC238], v19);
  v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  v21 = (const char *)(a1 + 392);
  if (*(char *)(a1 + 415) < 0)
    v21 = *(const char **)v21;
  v22 = xpc_string_create(v21);
  if (!v22)
    v22 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFC198], v22);
  v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  v24 = xpc_int64_create(*(int *)(a1 + 256));
  if (!v24)
    v24 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFAFE0], v24);
  v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  v26 = xpc_string_create((const char *)*MEMORY[0x1E0CFC190]);
  if (!v26)
    v26 = xpc_null_create();
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFB020], v26);
  v27 = xpc_null_create();
  xpc_release(v26);
  xpc_release(v27);
  v28 = xpc_int64_create(524310);
  if (!v28)
    v28 = xpc_null_create();
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFB0E8], v28);
  v29 = xpc_null_create();
  xpc_release(v28);
  xpc_release(v29);
  v30 = *a2;
  if (v30)
    xpc_retain(v30);
  else
    v30 = xpc_null_create();
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFB018], v30);
  v31 = xpc_null_create();
  xpc_release(v30);
  xpc_release(v31);
  v32 = (const void *)*MEMORY[0x1E0CFB5E0];
  v33 = strlen((const char *)*MEMORY[0x1E0CFB5E0]);
  if (v33 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v34 = v33;
  if (v33 >= 0x17)
  {
    v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17)
      v36 = v33 | 7;
    v37 = v36 + 1;
    v35 = operator new(v36 + 1);
    v41 = v34;
    v42 = v37 | 0x8000000000000000;
    *(_QWORD *)buf = v35;
LABEL_47:
    memmove(v35, v32, v34);
    *((_BYTE *)v35 + v34) = 0;
    object = v8;
    if (v8)
      goto LABEL_43;
LABEL_48:
    object = xpc_null_create();
    goto LABEL_49;
  }
  HIBYTE(v42) = v33;
  v35 = buf;
  if (v33)
    goto LABEL_47;
  buf[0] = 0;
  object = v8;
  if (!v8)
    goto LABEL_48;
LABEL_43:
  xpc_retain(v8);
LABEL_49:
  v38 = 0;
  Service::runCommand(a1, (uint64_t)buf, &object, &v38);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(v42) < 0)
    operator delete(*(void **)buf);
  xpc_release(v8);
}

void sub_1BF3A3FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  xpc_release(object);
  if (a16 < 0)
    operator delete(__p);
  xpc_release(v16);
  _Unwind_Resume(a1);
}

void BootModule::updateAnalyticsEvent_sync(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  const char *v17;
  xpc_object_t v18;
  xpc_object_t v19;
  const char *v20;
  xpc_object_t v21;
  xpc_object_t v22;
  uint64_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  uint64_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  uint64_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  uint64_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  const char *v35;
  xpc_object_t v36;
  xpc_object_t v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t value;
  int v41;
  util::apfs *v42;
  int is_transcription_pending;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  const char *v47;
  NSObject *v48;
  NSObject *v49;
  const char *v50;
  xpc_object_t v51;
  xpc_object_t v52;
  size_t v53;
  const void *v54;
  const void *v55;
  const void **v56;
  size_t v57;
  xpc_object_t v58;
  xpc_object_t v59;
  xpc_object_t v60;
  const char *v61;
  const void *v62;
  const void *v63;
  const void *v64;
  const void *v65;
  size_t v66;
  capabilities::radio *v67;
  const void *v68;
  capabilities::radio *v69;
  __int128 v70;
  __int128 v71;
  std::string::size_type size;
  std::sub_match<const char *> *p_dst;
  int v74;
  std::string::size_type v75;
  std::string *v76;
  char *v77;
  unint64_t v78;
  void **v79;
  char *v80;
  char *v81;
  unint64_t v82;
  char *v83;
  __int128 v84;
  __int128 v85;
  std::string::size_type v86;
  std::sub_match<const char *> *v87;
  int v88;
  std::string::size_type v89;
  std::string *v90;
  uint64_t *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  __int128 *v99;
  _OWORD *v100;
  unint64_t v101;
  __int128 v102;
  char v103;
  unsigned __int8 *v104;
  unsigned int v105;
  BOOL v106;
  uint64_t *v107;
  uint64_t v108;
  char **v109;
  char *v110;
  unint64_t v111;
  _OWORD *v112;
  std::string::size_type v113;
  void **v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE *v117;
  char *v118;
  __int128 *v119;
  _OWORD *v120;
  unint64_t v121;
  __int128 v122;
  char v123;
  void **v124;
  std::string::size_type v125;
  std::string *v126;
  __int128 v127;
  unint64_t v128;
  unsigned __int8 *v129;
  unsigned int v130;
  BOOL v131;
  uint64_t *v132;
  uint64_t v133;
  char **v134;
  char *v135;
  unint64_t v136;
  _OWORD *v137;
  std::string::size_type v138;
  void **v139;
  uint64_t v140;
  uint64_t v141;
  _BYTE *v142;
  char *v143;
  __int128 *v144;
  _OWORD *v145;
  unint64_t v146;
  __int128 v147;
  char v148;
  void **v149;
  std::string::size_type v150;
  std::string *v151;
  std::string::size_type v152;
  char v153;
  size_t v154;
  std::string *p_str;
  size_t v156;
  unint64_t *v157;
  std::string *v158;
  xpc_object_t v159;
  xpc_object_t v160;
  std::string *v161;
  xpc_object_t v162;
  xpc_object_t v163;
  xpc_object_t v164;
  xpc_object_t v165;
  xpc_object_t v166;
  xpc_object_t v167;
  xpc_object_t v168;
  xpc_object_t v169;
  xpc_object_t v170;
  xpc_object_t v171;
  xpc_object_t v172;
  xpc_object_t v173;
  xpc_object_t v174;
  xpc_object_t v175;
  xpc_object_t v176;
  xpc_object_t v177;
  const void *v178;
  size_t v179;
  size_t v180;
  __int128 *p_buf;
  uint64_t v182;
  uint64_t v183;
  const void *v184;
  xpc_object_t object;
  void *v186;
  unint64_t v187;
  unint64_t v188;
  void *v189;
  unint64_t v190;
  unint64_t v191;
  std::string v192;
  void *__p[2];
  _QWORD v194[4];
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  __int128 v200;
  uint64_t v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  std::string __str;
  std::string __dst;
  const void *__s1[3];
  __int128 buf;
  _OWORD v210[2];
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  __int128 v216;
  uint64_t v217;
  _QWORD v218[5];

  v218[2] = *MEMORY[0x1E0C80C00];
  v4 = MEMORY[0x1C3B8A86C](*a2);
  v5 = MEMORY[0x1E0C812F8];
  v6 = *(NSObject **)(a1 + 88);
  if (v4 != MEMORY[0x1E0C812F8])
  {
    if (os_log_type_enabled(*(os_log_t *)(a1 + 88), OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl(&dword_1BF335000, v6, OS_LOG_TYPE_ERROR, "No input is given", (uint8_t *)&buf, 2u);
    }
    return;
  }
  if (os_log_type_enabled(*(os_log_t *)(a1 + 88), OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, "#I Updating Analytics metric of baseband reset", (uint8_t *)&buf, 2u);
  }
  v7 = xpc_dictionary_create(0, 0, 0);
  if (v7 || (v7 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v7) == v5)
    {
      xpc_retain(v7);
      v8 = v7;
    }
    else
    {
      v8 = xpc_null_create();
    }
  }
  else
  {
    v8 = xpc_null_create();
    v7 = 0;
  }
  xpc_release(v7);
  v9 = xpc_dictionary_create(0, 0, 0);
  if (v9 || (v9 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v9) == v5)
    {
      xpc_retain(v9);
      v10 = v9;
    }
    else
    {
      v10 = xpc_null_create();
    }
  }
  else
  {
    v10 = xpc_null_create();
    v9 = 0;
  }
  xpc_release(v9);
  v11 = xpc_BOOL_create(*(_BYTE *)(a1 + 288));
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(v10, "inVoiceCall", v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  v13 = xpc_int64_create(*(int *)(a1 + 296));
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(v10, "rat", v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  v15 = xpc_int64_create(*(int *)(a1 + 344));
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(v10, "rat2", v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v17 = (const char *)(a1 + 304);
  if (*(char *)(a1 + 327) < 0)
    v17 = *(const char **)v17;
  v18 = xpc_string_create(v17);
  if (!v18)
    v18 = xpc_null_create();
  xpc_dictionary_set_value(v10, "PLMN", v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  v20 = (const char *)(a1 + 352);
  if (*(char *)(a1 + 375) < 0)
    v20 = *(const char **)v20;
  v21 = xpc_string_create(v20);
  if (!v21)
    v21 = xpc_null_create();
  xpc_dictionary_set_value(v10, "PLMN2", v21);
  v22 = xpc_null_create();
  xpc_release(v21);
  xpc_release(v22);
  v23 = *(_QWORD *)(a1 + 328);
  if (v23)
  {
    v24 = xpc_uint64_create(v23);
    if (!v24)
      v24 = xpc_null_create();
    xpc_dictionary_set_value(v10, "cellId", v24);
    v25 = xpc_null_create();
    xpc_release(v24);
    xpc_release(v25);
  }
  v26 = *(_QWORD *)(a1 + 376);
  if (v26)
  {
    v27 = xpc_uint64_create(v26);
    if (!v27)
      v27 = xpc_null_create();
    xpc_dictionary_set_value(v10, "cellId2", v27);
    v28 = xpc_null_create();
    xpc_release(v27);
    xpc_release(v28);
  }
  v29 = *(_QWORD *)(a1 + 336);
  if (v29)
  {
    v30 = xpc_uint64_create(v29);
    if (!v30)
      v30 = xpc_null_create();
    xpc_dictionary_set_value(v10, "tac", v30);
    v31 = xpc_null_create();
    xpc_release(v30);
    xpc_release(v31);
  }
  v32 = *(_QWORD *)(a1 + 384);
  if (v32)
  {
    v33 = xpc_uint64_create(v32);
    if (!v33)
      v33 = xpc_null_create();
    xpc_dictionary_set_value(v10, "tac2", v33);
    v34 = xpc_null_create();
    xpc_release(v33);
    xpc_release(v34);
  }
  v35 = (const char *)(a1 + 392);
  if (*(char *)(a1 + 415) < 0)
    v35 = *(const char **)v35;
  v36 = xpc_string_create(v35);
  if (!v36)
    v36 = xpc_null_create();
  xpc_dictionary_set_value(v10, "sku", v36);
  v37 = xpc_null_create();
  xpc_release(v36);
  xpc_release(v37);
  v38 = xpc_int64_create(*(int *)(a1 + 256));
  if (!v38)
    v38 = xpc_null_create();
  xpc_dictionary_set_value(v10, "operatingMode", v38);
  v39 = xpc_null_create();
  xpc_release(v38);
  xpc_release(v39);
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB780]);
  *(_QWORD *)&buf = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v41 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  xpc_release((xpc_object_t)buf);
  is_transcription_pending = util::apfs::is_transcription_pending(v42);
  v44 = xpc_BOOL_create(v41 & ~(_BYTE)is_transcription_pending);
  if (!v44)
    v44 = xpc_null_create();
  xpc_dictionary_set_value(v10, "isMTBF", v44);
  v45 = xpc_null_create();
  xpc_release(v44);
  xpc_release(v45);
  memset(__s1, 170, sizeof(__s1));
  v46 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB8D0]);
  *(_QWORD *)&buf = v46;
  if (v46)
    xpc_retain(v46);
  else
    *(_QWORD *)&buf = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&buf, (const object *)*MEMORY[0x1E0CFBEA8], v47);
  xpc_release((xpc_object_t)buf);
  if (is_transcription_pending)
  {
    v48 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1BF335000, v48, OS_LOG_TYPE_DEFAULT, "#I APFS transcription is pending", (uint8_t *)&buf, 2u);
    }
    if (v41)
    {
      v49 = *(NSObject **)(a1 + 88);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1BF335000, v49, OS_LOG_TYPE_DEFAULT, "#I Downgrading Baseband Reset MTBF metric because APFS transcription is pending", (uint8_t *)&buf, 2u);
      }
    }
  }
  if (SHIBYTE(__s1[2]) >= 0)
    v50 = (const char *)__s1;
  else
    v50 = (const char *)__s1[0];
  v51 = xpc_string_create(v50);
  if (!v51)
    v51 = xpc_null_create();
  xpc_dictionary_set_value(v10, "resetType", v51);
  v52 = xpc_null_create();
  xpc_release(v51);
  xpc_release(v52);
  v53 = strlen((const char *)*MEMORY[0x1E0CFBF98]);
  v54 = (const void *)v53;
  if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
  {
    if (v53 != -1)
    {
      v55 = (const void *)HIBYTE(__s1[2]);
      v56 = __s1;
      goto LABEL_78;
    }
LABEL_310:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v53 == -1)
    goto LABEL_310;
  v56 = (const void **)__s1[0];
  v55 = __s1[1];
LABEL_78:
  if (v55 >= v54)
    v57 = (size_t)v54;
  else
    v57 = (size_t)v55;
  if (!memcmp(v56, (const void *)*MEMORY[0x1E0CFBF98], v57) && v55 == v54)
  {
    v58 = xpc_string_create((const char *)*MEMORY[0x1E0CFB358]);
    if (!v58)
      v58 = xpc_null_create();
    xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFB3E8], v58);
    v59 = xpc_null_create();
    xpc_release(v58);
    xpc_release(v59);
    goto LABEL_274;
  }
  memset(&__dst, 170, sizeof(__dst));
  v60 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB788]);
  *(_QWORD *)&buf = v60;
  if (v60)
    xpc_retain(v60);
  else
    *(_QWORD *)&buf = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&buf, (const object *)"no-reset-reason", v61);
  xpc_release((xpc_object_t)buf);
  memset(&__str, 170, sizeof(__str));
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__str, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    __str = __dst;
  v62 = (const void *)*MEMORY[0x1E0CFC000];
  v63 = (const void *)strlen((const char *)*MEMORY[0x1E0CFC000]);
  v64 = v63;
  if (SHIBYTE(__s1[2]) < 0)
  {
    if (v63 != (const void *)-1)
    {
      v65 = __s1[1];
      if (__s1[1] >= v63)
        v68 = v63;
      else
        v68 = __s1[1];
      v67 = (capabilities::radio *)memcmp(__s1[0], v62, (size_t)v68);
      if ((_DWORD)v67)
        goto LABEL_260;
      goto LABEL_104;
    }
LABEL_312:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v63 == (const void *)-1)
    goto LABEL_312;
  v65 = (const void *)HIBYTE(__s1[2]);
  if (HIBYTE(__s1[2]) >= (unint64_t)v63)
    v66 = (size_t)v63;
  else
    v66 = HIBYTE(__s1[2]);
  v67 = (capabilities::radio *)memcmp(__s1, v62, v66);
  if ((_DWORD)v67)
    goto LABEL_260;
LABEL_104:
  if (v65 == v64)
  {
    v69 = (capabilities::radio *)capabilities::radio::maverick(v67);
    if ((_DWORD)v69)
    {
      *(_QWORD *)&v70 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v70 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v204 = v70;
      v205 = v70;
      v202 = v70;
      v203 = v70;
      std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v202, "(ATCS_TIMEOUT on message for svc=[0-9]*)(client=[0-9]*).*(txid=[0-9]*)(msgid=0x[a-zA-Z0-9]*)\\)(.*)", 0);
      *(_QWORD *)&v71 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v71 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v197 = 0xAAAAAAAAAAAAAA00;
      v194[3] = 0xAAAAAAAAAAAAAAAALL;
      v200 = v71;
      v195 = 0;
      v196 = 0;
      v198 = 0;
      v199 = 0;
      LOBYTE(v200) = 0;
      BYTE8(v200) = 0;
      v201 = 0;
      *(_OWORD *)__p = 0u;
      memset(v194, 0, 25);
      v213 = 0xAAAAAAAAAAAAAA00;
      *((_QWORD *)&v210[1] + 1) = 0xAAAAAAAAAAAAAAAALL;
      v216 = v71;
      v211 = 0;
      v212 = 0;
      v214 = 0;
      v215 = 0;
      LOBYTE(v216) = 0;
      BYTE8(v216) = 0;
      v217 = 0;
      buf = 0u;
      v210[0] = 0u;
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_dst = (std::sub_match<const char *> *)&__dst;
      else
        p_dst = (std::sub_match<const char *> *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __dst.__r_.__value_.__l.__size_;
      *(_OWORD *)((char *)v210 + 9) = 0uLL;
      v74 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)&v202, p_dst, (std::sub_match<const char *> *)((char *)p_dst + size), (std::vector<std::csub_match> *)&buf, 0);
      v75 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v76 = &__dst;
      else
        v76 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v75 = __dst.__r_.__value_.__l.__size_;
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__p, (uint64_t)v76, (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v76 + v75), (uint64_t *)&buf, 0);
      if ((_QWORD)buf)
      {
        *((_QWORD *)&buf + 1) = buf;
        operator delete((void *)buf);
      }
      if (!v74)
        goto LABEL_252;
      v77 = (char *)__p[0];
      v78 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
      if (v78 <= 1)
        v79 = __p;
      else
        v79 = (void **)__p[0];
      if (!*((_BYTE *)v79 + 40))
      {
        memset(&v192, 0, sizeof(v192));
        goto LABEL_167;
      }
      v80 = (char *)v79[3];
      v81 = (char *)v79[4];
      v82 = v81 - v80;
      if ((unint64_t)(v81 - v80) > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v82 > 0x16)
      {
        v95 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v82 | 7) != 0x17)
          v95 = v82 | 7;
        v96 = v95 + 1;
        v83 = (char *)operator new(v95 + 1);
        v192.__r_.__value_.__l.__size_ = v81 - v80;
        v192.__r_.__value_.__r.__words[2] = v96 | 0x8000000000000000;
        v192.__r_.__value_.__r.__words[0] = (std::string::size_type)v83;
      }
      else
      {
        *((_BYTE *)&v192.__r_.__value_.__s + 23) = (_BYTE)v81 - (_BYTE)v80;
        v83 = (char *)&v192;
      }
      if (v80 == v81)
      {
        v97 = v83;
      }
      else
      {
        if (v82 < 0x20 || (unint64_t)(v83 - v80) < 0x20)
        {
          v97 = v83;
          v98 = v80;
        }
        else
        {
          v97 = &v83[v82 & 0xFFFFFFFFFFFFFFE0];
          v98 = &v80[v82 & 0xFFFFFFFFFFFFFFE0];
          v99 = (__int128 *)(v80 + 16);
          v100 = v83 + 16;
          v101 = v82 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v102 = *v99;
            *(v100 - 1) = *(v99 - 1);
            *v100 = v102;
            v99 += 2;
            v100 += 2;
            v101 -= 32;
          }
          while (v101);
          if (v82 == (v82 & 0xFFFFFFFFFFFFFFE0))
            goto LABEL_166;
        }
        do
        {
          v103 = *v98++;
          *v97++ = v103;
        }
        while (v98 != v81);
      }
LABEL_166:
      *v97 = 0;
      v77 = (char *)__p[0];
      v78 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
LABEL_167:
      v104 = (unsigned __int8 *)(v77 + 112);
      if (v78 <= 4)
        v104 = (unsigned __int8 *)&v194[3];
      v105 = *v104;
      if (!v105)
      {
        v113 = 0;
        v114 = 0;
        v189 = 0;
        v190 = 0;
        v191 = 0;
        goto LABEL_193;
      }
      v106 = v78 > 4;
      if (v78 <= 4)
        v107 = &v194[1];
      else
        v107 = (uint64_t *)(v77 + 96);
      v108 = *v107;
      v109 = (char **)(v77 + 104);
      if (!v106)
        v109 = (char **)&v194[2];
      v110 = *v109;
      v111 = (unint64_t)&(*v109)[-v108];
      if (v111 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v111 > 0x16)
      {
        v115 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v111 | 7) != 0x17)
          v115 = v111 | 7;
        v116 = v115 + 1;
        v112 = operator new(v115 + 1);
        v190 = v111;
        v191 = v116 | 0x8000000000000000;
        v189 = v112;
      }
      else
      {
        HIBYTE(v191) = *(_BYTE *)v109 - v108;
        v112 = &v189;
      }
      if ((char *)v108 == v110)
      {
        v117 = v112;
      }
      else
      {
        if (v111 < 0x20 || (unint64_t)v112 - v108 < 0x20)
        {
          v117 = v112;
          v118 = (char *)v108;
        }
        else
        {
          v117 = (char *)v112 + (v111 & 0xFFFFFFFFFFFFFFE0);
          v118 = (char *)(v108 + (v111 & 0xFFFFFFFFFFFFFFE0));
          v119 = (__int128 *)(v108 + 16);
          v120 = v112 + 1;
          v121 = v111 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v122 = *v119;
            *(v120 - 1) = *(v119 - 1);
            *v120 = v122;
            v119 += 2;
            v120 += 2;
            v121 -= 32;
          }
          while (v121);
          if (v111 == (v111 & 0x7FFFFFFFFFFFFFE0))
            goto LABEL_192;
        }
        do
        {
          v123 = *v118++;
          *v117++ = v123;
        }
        while (v118 != v110);
      }
LABEL_192:
      *v117 = 0;
      v105 = HIBYTE(v191);
      v114 = (void **)v189;
      v113 = v190;
LABEL_193:
      if ((v105 & 0x80u) == 0)
        v124 = &v189;
      else
        v124 = v114;
      if ((v105 & 0x80u) == 0)
        v125 = v105;
      else
        v125 = v113;
      v126 = std::string::append(&v192, (const std::string::value_type *)v124, v125);
      v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
      *(_QWORD *)&v210[0] = *((_QWORD *)&v126->__r_.__value_.__l + 2);
      buf = v127;
      v126->__r_.__value_.__l.__size_ = 0;
      v126->__r_.__value_.__r.__words[2] = 0;
      v126->__r_.__value_.__r.__words[0] = 0;
      v128 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
      v129 = (unsigned __int8 *)__p[0] + 136;
      if (v128 <= 5)
        v129 = (unsigned __int8 *)&v194[3];
      v130 = *v129;
      if (!v130)
      {
        v138 = 0;
        v139 = 0;
        v186 = 0;
        v187 = 0;
        v188 = 0;
        goto LABEL_225;
      }
      v131 = v128 > 5;
      if (v128 <= 5)
        v132 = &v194[1];
      else
        v132 = (uint64_t *)((char *)__p[0] + 120);
      v133 = *v132;
      v134 = (char **)((char *)__p[0] + 128);
      if (!v131)
        v134 = (char **)&v194[2];
      v135 = *v134;
      v136 = (unint64_t)&(*v134)[-v133];
      if (v136 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v136 > 0x16)
      {
        v140 = (v136 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v136 | 7) != 0x17)
          v140 = v136 | 7;
        v141 = v140 + 1;
        v137 = operator new(v140 + 1);
        v187 = v136;
        v188 = v141 | 0x8000000000000000;
        v186 = v137;
      }
      else
      {
        HIBYTE(v188) = *(_BYTE *)v134 - v133;
        v137 = &v186;
      }
      if ((char *)v133 == v135)
      {
        v142 = v137;
      }
      else
      {
        if (v136 < 0x20 || (unint64_t)v137 - v133 < 0x20)
        {
          v142 = v137;
          v143 = (char *)v133;
        }
        else
        {
          v142 = (char *)v137 + (v136 & 0xFFFFFFFFFFFFFFE0);
          v143 = (char *)(v133 + (v136 & 0xFFFFFFFFFFFFFFE0));
          v144 = (__int128 *)(v133 + 16);
          v145 = v137 + 1;
          v146 = v136 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v147 = *v144;
            *(v145 - 1) = *(v144 - 1);
            *v145 = v147;
            v144 += 2;
            v145 += 2;
            v146 -= 32;
          }
          while (v146);
          if (v136 == (v136 & 0x7FFFFFFFFFFFFFE0))
            goto LABEL_224;
        }
        do
        {
          v148 = *v143++;
          *v142++ = v148;
        }
        while (v143 != v135);
      }
LABEL_224:
      *v142 = 0;
      v130 = HIBYTE(v188);
      v139 = (void **)v186;
      v138 = v187;
LABEL_225:
      if ((v130 & 0x80u) == 0)
        v149 = &v186;
      else
        v149 = v139;
      if ((v130 & 0x80u) == 0)
        v150 = v130;
      else
        v150 = v138;
      v151 = std::string::append((std::string *)&buf, (const std::string::value_type *)v149, v150);
      v152 = v151->__r_.__value_.__r.__words[0];
      v218[0] = v151->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v218 + 7) = *(std::string::size_type *)((char *)&v151->__r_.__value_.__r.__words[1] + 7);
      v153 = HIBYTE(v151->__r_.__value_.__r.__words[2]);
      v151->__r_.__value_.__l.__size_ = 0;
      v151->__r_.__value_.__r.__words[2] = 0;
      v151->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      __str.__r_.__value_.__r.__words[0] = v152;
      __str.__r_.__value_.__l.__size_ = v218[0];
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v218 + 7);
      *((_BYTE *)&__str.__r_.__value_.__s + 23) = v153;
      if (SHIBYTE(v188) < 0)
      {
        operator delete(v186);
        if ((SBYTE7(v210[0]) & 0x80000000) == 0)
        {
LABEL_235:
          if ((SHIBYTE(v191) & 0x80000000) == 0)
            goto LABEL_236;
          goto LABEL_242;
        }
      }
      else if ((SBYTE7(v210[0]) & 0x80000000) == 0)
      {
        goto LABEL_235;
      }
      operator delete((void *)buf);
      if ((SHIBYTE(v191) & 0x80000000) == 0)
      {
LABEL_236:
        if ((SHIBYTE(v192.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_237;
        goto LABEL_243;
      }
LABEL_242:
      operator delete(v189);
      if ((SHIBYTE(v192.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_237:
        v154 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_238;
        goto LABEL_244;
      }
LABEL_243:
      operator delete(v192.__r_.__value_.__l.__data_);
      v154 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_238:
        if ((v154 & 0x80) != 0)
          std::string::__assign_no_alias<true>(&__dst, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        else
          __dst = __str;
LABEL_252:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v92 = (std::__shared_weak_count *)v205;
        if (!(_QWORD)v205)
          goto LABEL_259;
        v157 = (unint64_t *)(v205 + 8);
        do
          v94 = __ldaxr(v157);
        while (__stlxr(v94 - 1, v157));
LABEL_257:
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
LABEL_259:
        std::locale::~locale((std::locale *)&v202);
        goto LABEL_260;
      }
LABEL_244:
      if ((v154 & 0x80u) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((v154 & 0x80u) == 0)
        v156 = v154;
      else
        v156 = __str.__r_.__value_.__l.__size_;
      std::string::__assign_no_alias<false>((void **)&__dst.__r_.__value_.__l.__data_, p_str, v156);
      goto LABEL_252;
    }
    if (capabilities::radio::ice(v69))
    {
      *(_QWORD *)&v84 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v84 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v204 = v84;
      v205 = v84;
      v202 = v84;
      v203 = v84;
      std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v202, "(.*ARI_TIMEOUT -.*)( SZ\\([0-9]*\\).*)", 0);
      *(_QWORD *)&v85 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v85 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v197 = 0xAAAAAAAAAAAAAA00;
      v194[3] = 0xAAAAAAAAAAAAAAAALL;
      v200 = v85;
      v195 = 0;
      v196 = 0;
      v198 = 0;
      v199 = 0;
      LOBYTE(v200) = 0;
      BYTE8(v200) = 0;
      v201 = 0;
      *(_OWORD *)__p = 0u;
      memset(v194, 0, 25);
      v213 = 0xAAAAAAAAAAAAAA00;
      *((_QWORD *)&v210[1] + 1) = 0xAAAAAAAAAAAAAAAALL;
      v216 = v85;
      v211 = 0;
      v212 = 0;
      v214 = 0;
      v215 = 0;
      LOBYTE(v216) = 0;
      BYTE8(v216) = 0;
      v217 = 0;
      buf = 0u;
      v210[0] = 0u;
      v86 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v87 = (std::sub_match<const char *> *)&__dst;
      else
        v87 = (std::sub_match<const char *> *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v86 = __dst.__r_.__value_.__l.__size_;
      *(_OWORD *)((char *)v210 + 9) = 0uLL;
      v88 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)&v202, v87, (std::sub_match<const char *> *)((char *)v87 + v86), (std::vector<std::csub_match> *)&buf, 0);
      v89 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v90 = &__dst;
      else
        v90 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v89 = __dst.__r_.__value_.__l.__size_;
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__p, (uint64_t)v90, (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v90 + v89), (uint64_t *)&buf, 0);
      if ((_QWORD)buf)
      {
        *((_QWORD *)&buf + 1) = buf;
        operator delete((void *)buf);
      }
      if (v88)
      {
        if (0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3) <= 1)
          v91 = &v194[1];
        else
          v91 = (uint64_t *)((char *)__p[0] + 24);
        std::sub_match<std::__wrap_iter<char const*>>::str[abi:ne180100](&buf, v91);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = buf;
        __str.__r_.__value_.__r.__words[2] = *(_QWORD *)&v210[0];
        std::string::operator=(&__dst, &__str);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v92 = (std::__shared_weak_count *)v205;
      if (!(_QWORD)v205)
        goto LABEL_259;
      v93 = (unint64_t *)(v205 + 8);
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      goto LABEL_257;
    }
  }
LABEL_260:
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v158 = &__dst;
  else
    v158 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  v159 = xpc_string_create((const char *)v158);
  if (!v159)
    v159 = xpc_null_create();
  xpc_dictionary_set_value(v10, "resetReason", v159);
  v160 = xpc_null_create();
  xpc_release(v159);
  xpc_release(v160);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v161 = &__str;
  else
    v161 = (std::string *)__str.__r_.__value_.__r.__words[0];
  v162 = xpc_string_create((const char *)v161);
  if (!v162)
    v162 = xpc_null_create();
  xpc_dictionary_set_value(v10, "shortResetReason", v162);
  v163 = xpc_null_create();
  xpc_release(v162);
  xpc_release(v163);
  v164 = xpc_string_create((const char *)*MEMORY[0x1E0CFB368]);
  if (!v164)
    v164 = xpc_null_create();
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFB3E8], v164);
  v165 = xpc_null_create();
  xpc_release(v164);
  xpc_release(v165);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_274;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_274;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_274:
  v166 = xpc_string_create("metricsCCBasebandResetInfo");
  if (!v166)
    v166 = xpc_null_create();
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFB278], v166);
  v167 = xpc_null_create();
  xpc_release(v166);
  xpc_release(v167);
  v168 = xpc_string_create("Reset");
  if (!v168)
    v168 = xpc_null_create();
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFB3F0], v168);
  v169 = xpc_null_create();
  xpc_release(v168);
  xpc_release(v169);
  if (v10)
  {
    xpc_retain(v10);
    v170 = v10;
  }
  else
  {
    v170 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFB9D8], v170);
  v171 = xpc_null_create();
  xpc_release(v170);
  xpc_release(v171);
  v172 = xpc_dictionary_create(0, 0, 0);
  if (v172 || (v172 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v172) == v5)
    {
      xpc_retain(v172);
      v173 = v172;
    }
    else
    {
      v173 = xpc_null_create();
    }
  }
  else
  {
    v173 = xpc_null_create();
    v172 = 0;
  }
  xpc_release(v172);
  v174 = xpc_string_create((const char *)*MEMORY[0x1E0CFAFE8]);
  if (!v174)
    v174 = xpc_null_create();
  xpc_dictionary_set_value(v173, (const char *)*MEMORY[0x1E0CFB020], v174);
  v175 = xpc_null_create();
  xpc_release(v174);
  xpc_release(v175);
  if (v8)
  {
    xpc_retain(v8);
    v176 = v8;
  }
  else
  {
    v176 = xpc_null_create();
  }
  xpc_dictionary_set_value(v173, (const char *)*MEMORY[0x1E0CFB018], v176);
  v177 = xpc_null_create();
  xpc_release(v176);
  xpc_release(v177);
  v178 = (const void *)*MEMORY[0x1E0CFB5E0];
  v179 = strlen((const char *)*MEMORY[0x1E0CFB5E0]);
  if (v179 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v180 = v179;
  if (v179 >= 0x17)
  {
    v182 = (v179 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v179 | 7) != 0x17)
      v182 = v179 | 7;
    v183 = v182 + 1;
    p_buf = (__int128 *)operator new(v182 + 1);
    *((_QWORD *)&buf + 1) = v180;
    *(_QWORD *)&v210[0] = v183 | 0x8000000000000000;
    *(_QWORD *)&buf = p_buf;
LABEL_302:
    memmove(p_buf, v178, v180);
    *((_BYTE *)p_buf + v180) = 0;
    object = v173;
    if (v173)
      goto LABEL_298;
LABEL_303:
    object = xpc_null_create();
    goto LABEL_304;
  }
  BYTE7(v210[0]) = v179;
  p_buf = &buf;
  if (v179)
    goto LABEL_302;
  LOBYTE(buf) = 0;
  object = v173;
  if (!v173)
    goto LABEL_303;
LABEL_298:
  xpc_retain(v173);
LABEL_304:
  v184 = 0;
  Service::runCommand(a1, (uint64_t)&buf, &object, &v184);
  xpc_release(object);
  object = 0;
  if (SBYTE7(v210[0]) < 0)
    operator delete((void *)buf);
  xpc_release(v173);
  if (SHIBYTE(__s1[2]) < 0)
    operator delete((void *)__s1[0]);
  xpc_release(v10);
  xpc_release(v8);
}

void sub_1BF3A55DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::locale a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *v63;
  void *v64;

  if (__p)
    operator delete(__p);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a37);
  if (a50 < 0)
    operator delete(a45);
  if (a57 < 0)
    operator delete(a52);
  if (a63 < 0)
    operator delete(a58);
  xpc_release(v64);
  xpc_release(v63);
  _Unwind_Resume(a1);
}

void BootModule::reportStatisticsHardResetTime_sync(BootModule *this)
{
  NSObject *v2;
  xpc_object_t v3;
  uint64_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  time_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  const void *v17;
  size_t v18;
  size_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  xpc_object_t object;
  uint8_t buf[8];
  size_t v26;
  unint64_t v27;

  v2 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Submitting Stats of hard reset time", buf, 2u);
  }
  v3 = xpc_dictionary_create(0, 0, 0);
  v4 = MEMORY[0x1E0C812F8];
  if (v3 || (v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v3) == v4)
    {
      xpc_retain(v3);
      v5 = v3;
    }
    else
    {
      v5 = xpc_null_create();
    }
  }
  else
  {
    v5 = xpc_null_create();
    v3 = 0;
  }
  xpc_release(v3);
  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6 || (v6 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v6) == v4)
    {
      xpc_retain(v6);
      v7 = v6;
    }
    else
    {
      v7 = xpc_null_create();
    }
  }
  else
  {
    v7 = xpc_null_create();
    v6 = 0;
  }
  xpc_release(v6);
  v8 = time(0);
  v9 = xpc_int64_create(v8);
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E0CFBDE8], v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v11 = xpc_string_create((const char *)*MEMORY[0x1E0CFC240]);
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0CFB020], v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  v13 = xpc_int64_create(0);
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0CFB0E8], v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  if (v7)
  {
    xpc_retain(v7);
    v15 = v7;
  }
  else
  {
    v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0CFB018], v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v17 = (const void *)*MEMORY[0x1E0CFB5E0];
  v18 = strlen((const char *)*MEMORY[0x1E0CFB5E0]);
  if (v18 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v20 = operator new(v21 + 1);
    v26 = v19;
    v27 = v22 | 0x8000000000000000;
    *(_QWORD *)buf = v20;
LABEL_32:
    memmove(v20, v17, v19);
    *((_BYTE *)v20 + v19) = 0;
    object = v5;
    if (v5)
      goto LABEL_28;
    goto LABEL_33;
  }
  HIBYTE(v27) = v18;
  v20 = buf;
  if (v18)
    goto LABEL_32;
  buf[0] = 0;
  object = v5;
  if (v5)
  {
LABEL_28:
    xpc_retain(v5);
    goto LABEL_34;
  }
LABEL_33:
  object = xpc_null_create();
LABEL_34:
  v23 = 0;
  Service::runCommand((uint64_t)this, (uint64_t)buf, &object, &v23);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(v27) < 0)
    operator delete(*(void **)buf);
  xpc_release(v7);
  xpc_release(v5);
}

void sub_1BF3A5DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;

  xpc_release(object);
  if (a16 < 0)
    operator delete(__p);
  xpc_release(v17);
  xpc_release(v16);
  _Unwind_Resume(a1);
}

uint64_t _ZZZZN10BootModule12requestResetE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEEUb_EUb0_EN3__0D1Ev(uint64_t a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = *(NSObject **)(a1 + 144);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 136);
  if (v3)
    _Block_release(v3);
  if (*(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_7:
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_14;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      goto LABEL_9;
LABEL_15:
    operator delete(*(void **)(a1 + 24));
    v4 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v4)
      return a1;
    goto LABEL_10;
  }
LABEL_14:
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_15;
LABEL_9:
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
LABEL_10:
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void *__copy_helper_block_e8_40c15_ZTSK9ResetInfo152c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE160c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1, uint64_t a2)
{
  void *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  ResetInfo::ResetInfo((std::string *)(a1 + 40), (__int128 *)(a2 + 40));
  result = *(void **)(a2 + 152);
  if (result)
    result = _Block_copy(result);
  v6 = *(_QWORD *)(a2 + 160);
  v5 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 152) = result;
  *(_QWORD *)(a1 + 160) = v6;
  *(_QWORD *)(a1 + 168) = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void __destroy_helper_block_e8_40c15_ZTSK9ResetInfo152c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE160c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  const void *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 168);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(const void **)(a1 + 152);
  if (v3)
    _Block_release(v3);
  if (*(char *)(a1 + 151) < 0)
  {
    operator delete(*(void **)(a1 + 128));
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
    {
LABEL_7:
      if ((*(char *)(a1 + 87) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_12;
    }
  }
  else if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 63) & 0x80000000) == 0)
      return;
LABEL_13:
    operator delete(*(void **)(a1 + 40));
    return;
  }
LABEL_12:
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_13;
}

void *__copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10BootModuleEE56c15_ZTSK9ResetInfo168c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *result;

  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  ResetInfo::ResetInfo((std::string *)(a1 + 56), (__int128 *)(a2 + 56));
  result = *(void **)(a2 + 168);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 168) = result;
  return result;
}

void sub_1BF3A6074(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10BootModuleEE56c15_ZTSK9ResetInfo168c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 168);
  if (v2)
    _Block_release(v2);
  if (*(char *)(a1 + 167) < 0)
  {
    operator delete(*(void **)(a1 + 144));
    if ((*(char *)(a1 + 127) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a1 + 103) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a1 + 127) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 104));
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 80));
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
LABEL_7:
    v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3)
      return;
    goto LABEL_8;
  }
LABEL_12:
  operator delete(*(void **)(a1 + 56));
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
LABEL_8:
    std::__shared_weak_count::__release_weak(v3);
}

void ___ZN10BootModule4initEv_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  _BOOL8 v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  void *v9;
  const void *v10;
  _QWORD aBlock[6];
  std::__shared_weak_count *v12;
  uint8_t buf[16];

  v2 = a1[4];
  v3 = *(NSObject **)(v2 + 88);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  if (capabilities::ipc::supportsPCI((capabilities::ipc *)v4))
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN10BootModule4initEv_block_invoke_9;
    aBlock[3] = &__block_descriptor_tmp_15_1;
    v6 = a1[5];
    v5 = (std::__shared_weak_count *)a1[6];
    aBlock[4] = v2;
    aBlock[5] = v6;
    v12 = v5;
    if (v5)
    {
      p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
      do
        v8 = __ldxr(p_shared_weak_owners);
      while (__stxr(v8 + 1, p_shared_weak_owners));
    }
    v9 = _Block_copy(aBlock);
    v10 = *(const void **)(v2 + 264);
    *(_QWORD *)(v2 + 264) = v9;
    if (v10)
      _Block_release(v10);
    if (v12)
      std::__shared_weak_count::__release_weak(v12);
  }
}

void ___ZN10BootModule4initEv_block_invoke_9(_QWORD *a1, int a2, uint64_t a3, int a4)
{
  std::__shared_weak_count *v5;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  std::string __p;
  int v16;
  int v17;
  std::string v18;
  std::__shared_weak_count *v20;

  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    v9 = a1[4];
    v10 = std::__shared_weak_count::lock(v5);
    v20 = v10;
    if (v10)
    {
      v11 = v10;
      if (!a1[5])
        goto LABEL_12;
      memset(&v18, 170, sizeof(v18));
      if (*(char *)(a3 + 23) < 0)
        std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
      else
        v18 = *(std::string *)a3;
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 1174405120;
      v14[2] = ___ZN10BootModule4initEv_block_invoke_2;
      v14[3] = &__block_descriptor_tmp_13_3;
      v14[4] = v9;
      v16 = a2;
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
      else
        __p = v18;
      v17 = a4;
      ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v9 + 120), (uint64_t)v14);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_12;
      }
      else if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_12;
      }
      operator delete(v18.__r_.__value_.__l.__data_);
LABEL_12:
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_1BF3A63A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a24 < 0)
  {
    operator delete(__p);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v24 - 64);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v24 - 64);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule4initEv_block_invoke_2(uint64_t a1)
{
  _QWORD *v2;
  NSObject *v3;
  _QWORD *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  BOOL v15;
  BOOL v16;
  __int128 v18;
  const void *v19;
  size_t v20;
  size_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  size_t v26;
  size_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  int v32;
  void *v33;
  std::string v34;
  void *v35;
  char v36;
  void *v37;
  char v38;
  void *v39;
  char v40;
  __int128 v41;
  char v42;
  _BYTE v43[8];
  _QWORD *v44;
  void *__p[2];
  char v46;
  __int128 v47;
  unint64_t v48;
  std::string v49;
  _BYTE __dst[24];
  uint8_t buf[16];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 32);
  if (!*(_DWORD *)(a1 + 64))
  {
    v5 = *(char *)(a1 + 63);
    if (v5 >= 0)
      v6 = *(unsigned __int8 *)(a1 + 63);
    else
      v6 = *(_QWORD *)(a1 + 48);
    v7 = v6 + 11;
    memset(&v49, 170, sizeof(v49));
    if (v6 + 11 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v8 = (_QWORD **)(a1 + 40);
    if (v7 > 0x16)
    {
      v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v10 = v7 | 7;
      v11 = v10 + 1;
      v12 = (char *)operator new(v10 + 1);
      v49.__r_.__value_.__l.__size_ = v6 + 11;
      v49.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
      v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
      v13 = v12 + 11;
      *(_DWORD *)(v12 + 7) = 540693582;
      *(_QWORD *)v12 = *(_QWORD *)"PCI-EVENT: ";
      if (v5 >= 0)
        v14 = (_QWORD *)(a1 + 40);
      else
        v14 = *v8;
      memmove(v12 + 11, v14, v6);
      v13[v6] = 0;
      if (v6 == 27)
      {
        v15 = *v14 == 0x67676972742D5041 && v14[1] == 0x7361622064657265;
        v16 = v15 && v14[2] == 0x657220646E616265;
        if (v16 && *(_QWORD *)((char *)v14 + 19) == 0x746573657220646ELL)
          std::string::append(&v49, " [likely caused by bbctl reset]", 0x1FuLL);
      }
    }
    else
    {
      *(_OWORD *)&v49.__r_.__value_.__r.__words[1] = 0uLL;
      *((_BYTE *)&v49.__r_.__value_.__s + 23) = v6 + 11;
      *(_DWORD *)((char *)v49.__r_.__value_.__r.__words + 7) = 540693582;
      v49.__r_.__value_.__r.__words[0] = *(_QWORD *)"PCI-EVENT: ";
      if (v6)
      {
        if (v5 >= 0)
          v9 = (_QWORD *)(a1 + 40);
        else
          v9 = *v8;
        memmove((char *)&v49.__r_.__value_.__r.__words[1] + 3, v9, v6);
      }
      *((_BYTE *)&v49.__r_.__value_.__r.__words[1] + v6 + 3) = 0;
    }
    *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v56 = v18;
    v57 = v18;
    v54 = v18;
    v55 = v18;
    v52 = v18;
    v53 = v18;
    *(_OWORD *)buf = v18;
    v19 = (const void *)*MEMORY[0x1E0CFB590];
    v20 = strlen((const char *)*MEMORY[0x1E0CFB590]);
    if (v20 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v21 = v20;
    if (v20 >= 0x17)
    {
      v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v23 = v20 | 7;
      v24 = v23 + 1;
      v22 = operator new(v23 + 1);
      *(_QWORD *)&__dst[8] = v21;
      *(_QWORD *)&__dst[16] = v24 | 0x8000000000000000;
      *(_QWORD *)__dst = v22;
    }
    else
    {
      __dst[23] = v20;
      v22 = __dst;
      if (!v20)
      {
LABEL_43:
        v22[v21] = 0;
        v25 = (const void *)*MEMORY[0x1E0CFC000];
        v26 = strlen((const char *)*MEMORY[0x1E0CFC000]);
        if (v26 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v27 = v26;
        if (v26 >= 0x17)
        {
          v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v26 | 7) != 0x17)
            v29 = v26 | 7;
          v30 = v29 + 1;
          v28 = operator new(v29 + 1);
          *((_QWORD *)&v47 + 1) = v27;
          v48 = v30 | 0x8000000000000000;
          *(_QWORD *)&v47 = v28;
        }
        else
        {
          HIBYTE(v48) = v26;
          v28 = &v47;
          if (!v26)
          {
LABEL_51:
            v28[v27] = 0;
            Timestamp::Timestamp((Timestamp *)v43);
            Timestamp::asString((uint64_t)v43, 0, 9, __p);
            v42 = 0;
            LOBYTE(v41) = 0;
            ResetInfo::ResetInfo((std::string *)buf, (__int128 *)__dst, &v47, (__int128 *)&v49, (uint64_t)__p, 7, &v41);
            if (v46 < 0)
            {
              operator delete(__p[0]);
              std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v43, v44);
              if ((SHIBYTE(v48) & 0x80000000) == 0)
              {
LABEL_53:
                if ((__dst[23] & 0x80000000) == 0)
                  goto LABEL_54;
                goto LABEL_58;
              }
            }
            else
            {
              std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v43, v44);
              if ((SHIBYTE(v48) & 0x80000000) == 0)
                goto LABEL_53;
            }
            operator delete((void *)v47);
            if ((__dst[23] & 0x80000000) == 0)
            {
LABEL_54:
              v31 = v2[11];
              if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
                goto LABEL_59;
LABEL_78:
              if (*(char *)(a1 + 63) < 0)
                v8 = (_QWORD **)*v8;
              v32 = *(_DWORD *)(a1 + 68);
              *(_DWORD *)__dst = 136315394;
              *(_QWORD *)&__dst[4] = v8;
              *(_WORD *)&__dst[12] = 1024;
              *(_DWORD *)&__dst[14] = v32;
              _os_log_error_impl(&dword_1BF335000, v31, OS_LOG_TYPE_ERROR, "PCI event: %s, sleeping for %u ms, then requesting Baseband reset", __dst, 0x12u);
LABEL_59:
              usleep(1000 * *(_DWORD *)(a1 + 68));
              ResetInfo::ResetInfo(&v34, (__int128 *)buf);
              v33 = 0;
              BootModule::requestReset(v2, (__int128 *)&v34, &v33);
              if (v40 < 0)
              {
                operator delete(v39);
                if ((v38 & 0x80000000) == 0)
                {
LABEL_61:
                  if ((v36 & 0x80000000) == 0)
                    goto LABEL_62;
                  goto LABEL_71;
                }
              }
              else if ((v38 & 0x80000000) == 0)
              {
                goto LABEL_61;
              }
              operator delete(v37);
              if ((v36 & 0x80000000) == 0)
              {
LABEL_62:
                if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_63;
                goto LABEL_72;
              }
LABEL_71:
              operator delete(v35);
              if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_63:
                if ((SHIBYTE(v57) & 0x80000000) == 0)
                  goto LABEL_64;
                goto LABEL_73;
              }
LABEL_72:
              operator delete(v34.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v57) & 0x80000000) == 0)
              {
LABEL_64:
                if ((SBYTE7(v55) & 0x80000000) == 0)
                  goto LABEL_65;
                goto LABEL_74;
              }
LABEL_73:
              operator delete(*((void **)&v56 + 1));
              if ((SBYTE7(v55) & 0x80000000) == 0)
              {
LABEL_65:
                if ((SHIBYTE(v53) & 0x80000000) == 0)
                  goto LABEL_66;
                goto LABEL_75;
              }
LABEL_74:
              operator delete((void *)v54);
              if ((SHIBYTE(v53) & 0x80000000) == 0)
              {
LABEL_66:
                if ((SBYTE7(v52) & 0x80000000) == 0)
                  goto LABEL_67;
                goto LABEL_76;
              }
LABEL_75:
              operator delete(*((void **)&v52 + 1));
              if ((SBYTE7(v52) & 0x80000000) == 0)
              {
LABEL_67:
                if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  return;
                goto LABEL_77;
              }
LABEL_76:
              operator delete(*(void **)buf);
              if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                return;
LABEL_77:
              operator delete(v49.__r_.__value_.__l.__data_);
              return;
            }
LABEL_58:
            operator delete(*(void **)__dst);
            v31 = v2[11];
            if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
              goto LABEL_59;
            goto LABEL_78;
          }
        }
        memmove(v28, v25, v27);
        goto LABEL_51;
      }
    }
    memmove(v22, v19, v21);
    goto LABEL_43;
  }
  v3 = v2[11];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (_QWORD *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
      v4 = (_QWORD *)*v4;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I PCI event: %s", buf, 0xCu);
  }
}

void sub_1BF3A69AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if ((a47 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

char *BootModule::getShutdownStages@<X0>(_QWORD *a1@<X8>)
{
  char *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = (char *)operator new(3uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *(_WORD *)result = 256;
  result[2] = 3;
  *a1 = result;
  return result;
}

void BootModule::shutdown(uint64_t a1, int a2, NSObject **a3)
{
  uint64_t *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t *v6;
  NSObject *v7;
  uint64_t *v8;
  NSObject *v9;
  _QWORD v10[5];
  dispatch_group_t group;
  _QWORD v12[5];
  dispatch_group_t object;
  _QWORD v14[5];
  dispatch_group_t v15;

  if (a2 == 3)
  {
    v6 = (uint64_t *)(a1 + 120);
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 1174405120;
    v10[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_26;
    v10[3] = &__block_descriptor_tmp_27_1;
    v7 = *a3;
    v10[4] = a1;
    group = v7;
    if (v7)
    {
      dispatch_retain(v7);
      dispatch_group_enter(v7);
    }
    ctu::SharedSynchronizable<BootModule>::execute_wrapped(v6, (uint64_t)v10);
    if (group)
    {
      dispatch_group_leave(group);
      v5 = group;
      if (group)
        goto LABEL_18;
    }
  }
  else
  {
    if (a2 != 1)
    {
      if (a2)
        return;
      v3 = (uint64_t *)(a1 + 120);
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 1174405120;
      v14[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
      v14[3] = &__block_descriptor_tmp_18_1;
      v4 = *a3;
      v14[4] = a1;
      v15 = v4;
      if (v4)
      {
        dispatch_retain(v4);
        dispatch_group_enter(v4);
      }
      ctu::SharedSynchronizable<BootModule>::execute_wrapped(v3, (uint64_t)v14);
      if (!v15)
        return;
      dispatch_group_leave(v15);
      v5 = v15;
      if (!v15)
        return;
LABEL_18:
      dispatch_release(v5);
      return;
    }
    v8 = (uint64_t *)(a1 + 120);
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 1174405120;
    v12[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_19;
    v12[3] = &__block_descriptor_tmp_25_1;
    v9 = *a3;
    v12[4] = a1;
    object = v9;
    if (v9)
    {
      dispatch_retain(v9);
      dispatch_group_enter(v9);
    }
    ctu::SharedSynchronizable<BootModule>::execute_wrapped(v8, (uint64_t)v12);
    if (object)
    {
      dispatch_group_leave(object);
      v5 = object;
      if (object)
        goto LABEL_18;
    }
  }
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  unsigned int v4;
  int v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  dispatch_object_t object;
  unint64_t v18;
  unint64_t v19;
  std::string buf;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 88);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Shutdown prepare", (uint8_t *)&buf, 2u);
  }
  v4 = *(_DWORD *)(v2 + 448);
  if (v4 <= 8)
  {
    v5 = 1 << v4;
    if ((v5 & 0x1E1) != 0)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 96))(v2, 8);
      v6 = *(NSObject **)(v2 + 216);
      *(_QWORD *)(v2 + 216) = 0;
      if (v6)
      {
        dispatch_group_leave(v6);
        dispatch_release(v6);
      }
    }
    else if ((v5 & 0xE) != 0)
    {
      v7 = *(NSObject **)(a1 + 40);
      if (v7)
      {
        dispatch_retain(v7);
        dispatch_group_enter(v7);
      }
      v8 = *(NSObject **)(v2 + 216);
      *(_QWORD *)(v2 + 216) = v7;
      if (v8)
      {
        dispatch_group_leave(v8);
        dispatch_release(v8);
      }
      v9 = *(NSObject **)(v2 + 88);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEFAULT, "#I Holding shutdown request session", (uint8_t *)&buf, 2u);
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 96))(v2, 7);
    }
  }
  v18 = 0xAAAAAAAAAAAAAAAALL;
  v19 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v2 + 80))(&v18, v2);
  v10 = v18;
  if (v18)
  {
    v11 = (char *)operator new(0x38uLL);
    strcpy(v11, "com.apple.AppleBasebandManager.RadioNotReady.Shutdown");
    v12 = capabilities::abs::shutdownAssertionTimeoutScalingFactor((capabilities::abs *)v11);
    v13 = *(_QWORD *)(v10 + 104);
    std::string::__init_copy_ctor_external(&buf, v11, 0x35uLL);
    (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, std::string *, uint64_t))(*(_QWORD *)v13 + 24))(&object, v13, &buf, 240000 * v12);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (object)
      dispatch_release(object);
    operator delete(v11);
  }
  v14 = (std::__shared_weak_count *)v19;
  if (v19)
  {
    v15 = (unint64_t *)(v19 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1BF3A6F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  if (a18 < 0)
  {
    operator delete(__p);
    operator delete(v18);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  operator delete(v18);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_19(uint64_t a1)
{
  _QWORD *v2;
  NSObject *v3;
  NSObject *v4;
  _QWORD aBlock[5];
  dispatch_group_t group;
  void *v7;
  uint8_t buf[16];

  v2 = *(_QWORD **)(a1 + 32);
  v3 = v2[11];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Shutdown baseband", buf, 2u);
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_20;
  aBlock[3] = &__block_descriptor_tmp_24;
  v4 = *(NSObject **)(a1 + 40);
  aBlock[4] = v2;
  group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  v7 = _Block_copy(aBlock);
  (*(void (**)(_QWORD *, void **))(*v2 + 112))(v2, &v7);
  if (v7)
    _Block_release(v7);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void sub_1BF3A7084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, dispatch_group_t group, void *aBlock)
{
  if (aBlock)
    _Block_release(aBlock);
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  const void *v14;
  size_t v15;
  void *v16;
  void **v17;
  CFMutableDictionaryRef v18;
  uint64_t v19;
  uint64_t v20;
  CFTypeID v21;
  NSObject *v22;
  unint64_t v23;
  const void *v24;
  size_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  CFTypeRef v31;
  void *__p[2];
  unint64_t v33;
  _QWORD aBlock[5];
  dispatch_group_t group;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v41;
  CFMutableDictionaryRef v42;

  v2 = *(_QWORD *)(a1 + 32);
  v42 = 0;
  v3 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
    v42 = Mutable;
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E0CFB530], (const __CFString **)*MEMORY[0x1E0CFBD30], v3, v5);
  v6 = *(std::__shared_weak_count **)(v2 + 128);
  if (!v6 || (v7 = *(_QWORD *)(v2 + 120), (v8 = std::__shared_weak_count::lock(v6)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v14 = (const void *)*MEMORY[0x1E0CFBD68];
  v15 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v16 = (void *)v15;
  if (v15 >= 0x17)
  {
    v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v19 = v15 | 7;
    v20 = v19 + 1;
    v17 = (void **)operator new(v19 + 1);
    __dst[1] = v16;
    v41 = v20 | 0x8000000000000000;
    __dst[0] = v17;
LABEL_19:
    memmove(v17, v14, (size_t)v16);
    *((_BYTE *)v16 + (_QWORD)v17) = 0;
    v18 = v42;
    if (!v42)
      goto LABEL_22;
    goto LABEL_20;
  }
  HIBYTE(v41) = v15;
  v17 = __dst;
  if (v15)
    goto LABEL_19;
  LOBYTE(__dst[0]) = 0;
  v18 = v42;
  if (!v42)
    goto LABEL_22;
LABEL_20:
  v21 = CFGetTypeID(v18);
  if (v21 == CFDictionaryGetTypeID())
  {
    cf = v18;
    CFRetain(v18);
    goto LABEL_23;
  }
LABEL_22:
  cf = 0;
LABEL_23:
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_22_0;
  v22 = *(NSObject **)(a1 + 40);
  aBlock[4] = v2;
  group = v22;
  if (v22)
  {
    dispatch_retain(v22);
    dispatch_group_enter(v22);
  }
  v36 = v7;
  v37 = v9;
  do
    v23 = __ldxr(p_shared_weak_owners);
  while (__stxr(v23 + 1, p_shared_weak_owners));
  v38 = _Block_copy(aBlock);
  Service::broadcastEvent(v2, (uint64_t)__dst, &cf, (const void **)&v38);
  if (v38)
    _Block_release(v38);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v41) < 0)
    operator delete(__dst[0]);
  v24 = (const void *)*MEMORY[0x1E0CFB600];
  v25 = strlen((const char *)*MEMORY[0x1E0CFB600]);
  if (v25 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v26 = (void *)v25;
  if (v25 >= 0x17)
  {
    v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v28 = v25 | 7;
    v29 = v28 + 1;
    v27 = operator new(v28 + 1);
    __p[1] = v26;
    v33 = v29 | 0x8000000000000000;
    __p[0] = v27;
    goto LABEL_40;
  }
  HIBYTE(v33) = v25;
  v27 = __p;
  if (v25)
LABEL_40:
    memmove(v27, v24, (size_t)v26);
  *((_BYTE *)v26 + (_QWORD)v27) = 0;
  v30 = 0;
  v31 = 0;
  Service::broadcastEvent(v2, (uint64_t)__p, &v31, (const void **)&v30);
  if (v30)
    _Block_release(v30);
  if (v31)
    CFRelease(v31);
  if (SHIBYTE(v33) < 0)
    operator delete(__p[0]);
  if (v37)
    std::__shared_weak_count::__release_weak(v37);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  std::__shared_weak_count::__release_weak(v9);
  if (v42)
    CFRelease(v42);
}

void sub_1BF3A7448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,dispatch_group_t group,uint64_t a23,std::__shared_weak_count *a24,void *a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v35;
  NSObject *v36;

  if (aBlock)
    _Block_release(aBlock);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0)
  {
    operator delete(__p);
    v35 = a24;
    if (!a24)
    {
LABEL_5:
      v36 = group;
      if (!group)
        goto LABEL_11;
      goto LABEL_9;
    }
  }
  else
  {
    v35 = a24;
    if (!a24)
      goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v35);
  v36 = group;
  if (!group)
    goto LABEL_11;
LABEL_9:
  dispatch_group_leave(v36);
  if (group)
    dispatch_release(group);
LABEL_11:
  std::__shared_weak_count::__release_weak(v32);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v33 - 96));
  _Unwind_Resume(a1);
}

void sub_1BF3A753C(_Unwind_Exception *a1)
{
  uint64_t v1;

  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_1BF3A7550(_Unwind_Exception *a1)
{
  uint64_t v1;

  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v1 - 96));
  _Unwind_Resume(a1);
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_2(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[5];

  v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[6];
      if (v6)
      {
        v9[0] = MEMORY[0x1E0C809B0];
        v9[1] = 0x40000000;
        v9[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_3;
        v9[3] = &__block_descriptor_tmp_21_1;
        v9[4] = v3;
        ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v9);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_3(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string v10;

  v1 = *(_QWORD *)(a1 + 32);
  v8 = 0xAAAAAAAAAAAAAAAALL;
  v9 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr))(*(_QWORD *)v1 + 80))(&v8);
  v2 = v8;
  if (v8)
  {
    v3 = (char *)operator new(0x38uLL);
    strcpy(v3, "com.apple.AppleBasebandManager.RadioNotReady.Shutdown");
    v4 = *(_QWORD *)(v2 + 104);
    std::string::__init_copy_ctor_external(&v10, v3, 0x35uLL);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v4 + 32))(v4, &v10);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
    operator delete(v3);
  }
  v5 = (std::__shared_weak_count *)v9;
  if (v9)
  {
    v6 = (unint64_t *)(v9 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BF3A772C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);
  operator delete(v17);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1BF3A7760(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c35_ZTSNSt3__18weak_ptrI10BootModuleEE(_QWORD *a1, _QWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = a1[5];
    if (v5)
      dispatch_group_enter(v5);
  }
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  NSObject *v4;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(NSObject **)(a1 + 40);
  if (v3)
  {
    dispatch_group_leave(v3);
    v4 = *(NSObject **)(a1 + 40);
    if (v4)
      dispatch_release(v4);
  }
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_26(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  std::string v26;

  v1 = *(_QWORD **)(a1 + 32);
  v24 = 0xAAAAAAAAAAAAAAAALL;
  v25 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, _QWORD *))(*v1 + 80))(&v24, v1);
  v2 = v24;
  if (v24)
  {
    v3 = (char *)operator new(0x38uLL);
    strcpy(v3, "com.apple.AppleBasebandManager.RadioNotReady.Bootup");
    v4 = *(_QWORD *)(v2 + 104);
    std::string::__init_copy_ctor_external(&v26, v3, 0x33uLL);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v4 + 32))(v4, &v26);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    operator delete(v3);
    v5 = v24;
    v6 = (char *)operator new(0x38uLL);
    strcpy(v6, "com.apple.AppleBasebandManager.RadioNotReady.Shutdown");
    v7 = *(_QWORD *)(v5 + 104);
    std::string::__init_copy_ctor_external(&v26, v6, 0x35uLL);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v7 + 32))(v7, &v26);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    operator delete(v6);
  }
  v8 = (std::__shared_weak_count *)v1[23];
  v1[22] = 0;
  v1[23] = 0;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v1 + 57;
  v12 = (std::__shared_weak_count *)v1[35];
  v1[34] = 0;
  v1[35] = 0;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)v1[60];
  v1[59] = 0;
  v1[60] = 0;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)v1[58];
  *v11 = 0;
  v11[1] = 0;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)v25;
  if (v25)
  {
    v22 = (unint64_t *)(v25 + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1BF3A7A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);
  operator delete(v17);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1BF3A7ACC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void BootModule::initialize(_QWORD *a1, NSObject **a2)
{
  uint64_t *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD v15[5];
  dispatch_group_t group;

  v3 = a1 + 15;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1174405120;
  v15[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v15[3] = &__block_descriptor_tmp_47_1;
  v4 = *a2;
  v15[4] = a1;
  group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  ctu::SharedSynchronizable<BootModule>::execute_wrapped(v3, (uint64_t)v15);
  v5 = (std::__shared_weak_count *)a1[16];
  if (!v5 || (v6 = a1[15], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v9 = operator new(8uLL);
  *v9 = a1;
  v10 = a1[17];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = operator new(0x18uLL);
  *v13 = v9;
  v13[1] = v6;
  v13[2] = v8;
  dispatch_async_f(v10, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::initialize(dispatch::group_session)::$_0>(BootModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<BootModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void *v10;
  size_t v11;
  size_t v12;
  __int128 *p_dst;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  const void *v19;
  size_t v20;
  size_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  const void *v27;
  size_t v28;
  size_t v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  const void *v35;
  size_t v36;
  size_t v37;
  __int128 *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  CommandDriverFactory *v43;
  uint64_t v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  void *v58;
  NSObject *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  const void *v63;
  NSObject *object;
  _QWORD v65[6];
  std::__shared_weak_count *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  _QWORD v73[6];
  std::__shared_weak_count *v74;
  const void *v75;
  _QWORD v76[5];
  std::__shared_weak_count *v77;
  const void *v78;
  _QWORD v79[6];
  std::__shared_weak_count *v80;
  const void *v81;
  _QWORD aBlock[6];
  std::__shared_weak_count *v83;
  const void *v84;
  __int128 __dst;
  unint64_t v86;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = (std::__shared_weak_count *)v1[16];
  if (!v2 || (v3 = v1[15], (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (const void *)*MEMORY[0x1E0CFBC38];
  v11 = strlen((const char *)*MEMORY[0x1E0CFBC38]);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (__int128 *)operator new(v14 + 1);
    *((_QWORD *)&__dst + 1) = v12;
    v86 = v15 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v86) = v11;
    p_dst = &__dst;
    if (!v11)
      goto LABEL_17;
  }
  memmove(p_dst, v10, v12);
LABEL_17:
  *((_BYTE *)p_dst + v12) = 0;
  v16 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_30_0;
  aBlock[4] = v1;
  aBlock[5] = v3;
  v83 = v5;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  v18 = _Block_copy(aBlock);
  v84 = v18;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v84);
  if (v18)
    _Block_release(v18);
  if (SHIBYTE(v86) < 0)
    operator delete((void *)__dst);
  v19 = (const void *)*MEMORY[0x1E0CFB4E0];
  v20 = strlen((const char *)*MEMORY[0x1E0CFB4E0]);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = (__int128 *)operator new(v23 + 1);
    *((_QWORD *)&__dst + 1) = v21;
    v86 = v24 | 0x8000000000000000;
    *(_QWORD *)&__dst = v22;
  }
  else
  {
    HIBYTE(v86) = v20;
    v22 = &__dst;
    if (!v20)
      goto LABEL_31;
  }
  memmove(v22, v19, v21);
LABEL_31:
  *((_BYTE *)v22 + v21) = 0;
  v79[0] = v16;
  v79[1] = 1174405120;
  v79[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_31;
  v79[3] = &__block_descriptor_tmp_37_0;
  v79[4] = v1;
  v79[5] = v3;
  v80 = v5;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  v26 = _Block_copy(v79);
  v81 = v26;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v81);
  if (v26)
    _Block_release(v26);
  if (SHIBYTE(v86) < 0)
    operator delete((void *)__dst);
  v27 = (const void *)*MEMORY[0x1E0CFBC60];
  v28 = strlen((const char *)*MEMORY[0x1E0CFBC60]);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v29 = v28;
  if (v28 >= 0x17)
  {
    v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v31 = v28 | 7;
    v32 = v31 + 1;
    v30 = (__int128 *)operator new(v31 + 1);
    *((_QWORD *)&__dst + 1) = v29;
    v86 = v32 | 0x8000000000000000;
    *(_QWORD *)&__dst = v30;
  }
  else
  {
    HIBYTE(v86) = v28;
    v30 = &__dst;
    if (!v28)
      goto LABEL_45;
  }
  memmove(v30, v27, v29);
LABEL_45:
  *((_BYTE *)v30 + v29) = 0;
  v76[0] = v16;
  v76[1] = 1174405120;
  v76[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_38;
  v76[3] = &__block_descriptor_tmp_39_0;
  v76[4] = v3;
  v77 = v5;
  do
    v33 = __ldxr(p_shared_weak_owners);
  while (__stxr(v33 + 1, p_shared_weak_owners));
  v34 = _Block_copy(v76);
  v78 = v34;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v78);
  if (v34)
    _Block_release(v34);
  if (SHIBYTE(v86) < 0)
    operator delete((void *)__dst);
  v35 = (const void *)*MEMORY[0x1E0CFB870];
  v36 = strlen((const char *)*MEMORY[0x1E0CFB870]);
  if (v36 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v37 = v36;
  if (v36 >= 0x17)
  {
    v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v39 = v36 | 7;
    v40 = v39 + 1;
    v38 = (__int128 *)operator new(v39 + 1);
    *((_QWORD *)&__dst + 1) = v37;
    v86 = v40 | 0x8000000000000000;
    *(_QWORD *)&__dst = v38;
  }
  else
  {
    HIBYTE(v86) = v36;
    v38 = &__dst;
    if (!v36)
      goto LABEL_59;
  }
  memmove(v38, v35, v37);
LABEL_59:
  *((_BYTE *)v38 + v37) = 0;
  v73[0] = v16;
  v73[1] = 1174405120;
  v73[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_40;
  v73[3] = &__block_descriptor_tmp_41_0;
  v73[4] = v1;
  v73[5] = v3;
  v74 = v5;
  do
    v41 = __ldxr(p_shared_weak_owners);
  while (__stxr(v41 + 1, p_shared_weak_owners));
  v42 = _Block_copy(v73);
  v75 = v42;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v75);
  if (v42)
    _Block_release(v42);
  if (SHIBYTE(v86) < 0)
    operator delete((void *)__dst);
  v71 = 0xAAAAAAAAAAAAAAAALL;
  v72 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v43 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v44 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v43);
    v45 = __dst;
    __dst = 0uLL;
    v46 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v45;
    if (v46)
    {
      v47 = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v49 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
    if (*((_QWORD *)&__dst + 1))
    {
      v50 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v44 = off_1ED70FD08;
  }
  v52 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  v67 = v44;
  v68 = *(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v53 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v44 + 16))(&v69, v44);
  v71 = 0;
  v72 = 0;
  if (v70)
  {
    v72 = std::__shared_weak_count::lock(v70);
    if (v72)
      v71 = v69;
    if (v70)
      std::__shared_weak_count::__release_weak(v70);
  }
  if (!v52)
    goto LABEL_89;
  v55 = (unint64_t *)&v52->__shared_owners_;
  do
    v56 = __ldaxr(v55);
  while (__stlxr(v56 - 1, v55));
  if (!v56)
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
    if (!v71)
      goto LABEL_107;
  }
  else
  {
LABEL_89:
    if (!v71)
      goto LABEL_107;
  }
  *(_QWORD *)&__dst = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&__dst + 1) = 0xAAAAAAAAAAAAAAAALL;
  v65[0] = v16;
  v65[1] = 1174405120;
  v65[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_42;
  v65[3] = &__block_descriptor_tmp_46;
  v65[4] = v1;
  v65[5] = v3;
  v66 = v5;
  do
    v57 = __ldxr(p_shared_weak_owners);
  while (__stxr(v57 + 1, p_shared_weak_owners));
  v58 = _Block_copy(v65);
  v59 = v1[17];
  if (v59)
    dispatch_retain(v59);
  *(_QWORD *)&__dst = v58;
  *((_QWORD *)&__dst + 1) = v59;
  if (!v58)
  {
    v63 = 0;
    object = v59;
    if (!v59)
      goto LABEL_97;
    goto LABEL_96;
  }
  v63 = _Block_copy(v58);
  object = v59;
  if (v59)
LABEL_96:
    dispatch_retain(v59);
LABEL_97:
  radio::CommandDriver::watchClientState();
  if (object)
    dispatch_release(object);
  if (v63)
    _Block_release(v63);
  if (v59)
    dispatch_release(v59);
  if (v58)
    _Block_release(v58);
  if (v66)
    std::__shared_weak_count::__release_weak(v66);
LABEL_107:
  v60 = v72;
  if (v72)
  {
    v61 = (unint64_t *)&v72->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  if (v74)
    std::__shared_weak_count::__release_weak(v74);
  if (v77)
    std::__shared_weak_count::__release_weak(v77);
  if (v80)
    std::__shared_weak_count::__release_weak(v80);
  if (v83)
    std::__shared_weak_count::__release_weak(v83);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF3A8360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45)
{
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v48;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  if (a30)
    std::__shared_weak_count::__release_weak(a30);
  if (a37)
    std::__shared_weak_count::__release_weak(a37);
  if (a45)
    std::__shared_weak_count::__release_weak(a45);
  v48 = *(std::__shared_weak_count **)(v46 - 144);
  if (v48)
  {
    std::__shared_weak_count::__release_weak(v48);
    std::__shared_weak_count::__release_weak(v45);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v45);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_2(_QWORD *a1, uint64_t a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[5];
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      if (a1[5])
      {
        v12[0] = MEMORY[0x1E0C809B0];
        v12[1] = 1174405120;
        v12[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_3;
        v12[3] = &__block_descriptor_tmp_28_0;
        v12[4] = v6;
        v9 = *a3;
        if (*a3)
          v9 = _Block_copy(v9);
        aBlock = v9;
        ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v12);
        if (aBlock)
          _Block_release(aBlock);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_3(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  const char *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  unsigned int v11;
  xpc_object_t xdict;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = xpc_dictionary_create(0, 0, 0);
  v4 = v3;
  if (v3)
  {
    xdict = v3;
  }
  else
  {
    v4 = xpc_null_create();
    xdict = v4;
    if (!v4)
    {
      v5 = xpc_null_create();
      v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v4) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v4);
    goto LABEL_9;
  }
  v5 = xpc_null_create();
LABEL_8:
  xdict = v5;
LABEL_9:
  xpc_release(v4);
  switch(*(_DWORD *)(v2 + 448))
  {
    case 1:
      v6 = xpc_string_create((const char *)*MEMORY[0x1E0CFBB68]);
      if (!v6)
        v6 = xpc_null_create();
      break;
    case 3:
      v6 = xpc_string_create((const char *)*MEMORY[0x1E0CFB7F0]);
      if (!v6)
        v6 = xpc_null_create();
      break;
    case 4:
      v6 = xpc_string_create((const char *)*MEMORY[0x1E0CFB980]);
      if (!v6)
        v6 = xpc_null_create();
      break;
    case 6:
      v6 = xpc_string_create((const char *)*MEMORY[0x1E0CFB588]);
      if (!v6)
        v6 = xpc_null_create();
      break;
    case 7:
      v6 = xpc_string_create((const char *)*MEMORY[0x1E0CFBD98]);
      if (!v6)
        v6 = xpc_null_create();
      break;
    case 8:
      v6 = xpc_string_create((const char *)*MEMORY[0x1E0CFBD30]);
      if (!v6)
        v6 = xpc_null_create();
      break;
    default:
      v6 = xpc_string_create((const char *)*MEMORY[0x1E0CFBA60]);
      if (!v6)
        v6 = xpc_null_create();
      break;
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB530], v6);
  v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  if (*(_BYTE *)(v2 + 228))
  {
    v8 = (const char *)(v2 + 152);
    if (*(char *)(v2 + 175) < 0)
      v8 = *(const char **)v8;
    v9 = xpc_string_create(v8);
    if (!v9)
      v9 = xpc_null_create();
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB0D0], v9);
    v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
  }
  v11 = 0;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), &v11, &xdict);
  xpc_release(xdict);
}

void sub_1BF3A8AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

xpc_object_t xpc::dict::object_proxy::operator=@<X0>(uint64_t a1@<X0>, xpc_object_t *a2@<X1>, xpc_object_t *a3@<X8>)
{
  xpc_object_t result;

  xpc_dictionary_set_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8), *a2);
  *a3 = *a2;
  result = xpc_null_create();
  *a2 = result;
  return result;
}

{
  xpc_object_t result;

  xpc_dictionary_set_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8), *a2);
  *a3 = *a2;
  result = xpc_null_create();
  *a2 = result;
  return result;
}

void *__copy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 40);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    _Block_release(v1);
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_31(_QWORD *a1, xpc_object_t *a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  char v13;
  size_t size;
  std::string *v15;
  int v16;
  size_t v17;
  std::string *v18;
  _BOOL4 v19;
  const void *v20;
  size_t v21;
  std::string::size_type v22;
  _BYTE *p_dst;
  NSObject *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  std::string *v29;
  __int128 v30;
  NSObject *v31;
  std::string *v32;
  xpc_object_t v33;
  uint64_t v34;
  xpc_object_t v35;
  std::string *v36;
  std::string::size_type v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  std::string *v41;
  std::string::size_type v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  _QWORD v45[5];
  std::string v46;
  void *v47;
  char v48;
  void *v49;
  char v50;
  void *v51;
  char v52;
  void *aBlock;
  xpc_object_t v54;
  xpc_object_t object;
  xpc_object_t v56;
  std::string v57;
  __int128 buf;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  void *__p;
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v69;
  std::string __dst;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (uint64_t *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    v69 = v8;
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
        goto LABEL_115;
      v10 = MEMORY[0x1C3B8A86C](*a2);
      v11 = MEMORY[0x1E0C812F8];
      if (v10 != MEMORY[0x1E0C812F8])
      {
        v12 = v7[11];
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_error_impl(&dword_1BF335000, v12, OS_LOG_TYPE_ERROR, "No input is given", (uint8_t *)&buf, 2u);
        }
        goto LABEL_115;
      }
      v64 = 0xAAAAAAAAAAAAAAAALL;
      __p = 0;
      v66 = 0;
      v67 = 0;
      buf = 0u;
      v59 = 0u;
      v60 = 0u;
      v61 = 0u;
      v62 = 0;
      v63 = 0xAAAAAAAAAAAAAAAALL;
      ResetInfo::fetchFromDict((void **)&buf, a2);
      if (SBYTE7(v59) < 0)
      {
        std::string::__init_copy_ctor_external(&v57, (const std::string::value_type *)buf, *((std::string::size_type *)&buf + 1));
      }
      else
      {
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = buf;
        v57.__r_.__value_.__r.__words[2] = v59;
      }
      v13 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
      else
        size = v57.__r_.__value_.__l.__size_;
      if (size == strlen((const char *)*MEMORY[0x1E0CFB590]))
      {
        v15 = (v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v57
            : (std::string *)v57.__r_.__value_.__r.__words[0];
        if (!memcmp(v15, (const void *)*MEMORY[0x1E0CFB590], size))
        {
          v19 = 1;
          if ((v13 & 0x80) == 0)
          {
LABEL_34:
            if (!v19)
            {
              v24 = v7[11];
              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
              {
                if (SBYTE7(v59) < 0)
                {
                  std::string::__init_copy_ctor_external(&v57, (const std::string::value_type *)buf, *((std::string::size_type *)&buf + 1));
                }
                else
                {
                  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = buf;
                  v57.__r_.__value_.__r.__words[2] = v59;
                }
                v32 = &v57;
                if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v32 = (std::string *)v57.__r_.__value_.__r.__words[0];
                LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
                _os_log_impl(&dword_1BF335000, v24, OS_LOG_TYPE_DEFAULT, "#I Invalid reset request [%s] ignoring it", (uint8_t *)&__dst, 0xCu);
                if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v57.__r_.__value_.__l.__data_);
              }
              v33 = xpc_null_create();
              v34 = *a3;
              v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
              v35 = xpc_null_create();
              (*(void (**)(uint64_t, uint64_t, std::string *))(v34 + 16))(v34, 3760250882, &v57);
              xpc_release(v57.__r_.__value_.__l.__data_);
              xpc_release(v35);
LABEL_68:
              if (SHIBYTE(v67) < 0)
              {
                operator delete(__p);
                if ((SHIBYTE(v62) & 0x80000000) == 0)
                {
LABEL_70:
                  if ((SHIBYTE(v60) & 0x80000000) == 0)
                    goto LABEL_71;
                  goto LABEL_75;
                }
              }
              else if ((SHIBYTE(v62) & 0x80000000) == 0)
              {
                goto LABEL_70;
              }
              operator delete((void *)v61);
              if ((SHIBYTE(v60) & 0x80000000) == 0)
              {
LABEL_71:
                if ((SBYTE7(v59) & 0x80000000) == 0)
                  goto LABEL_115;
LABEL_76:
                operator delete((void *)buf);
LABEL_115:
                p_shared_owners = (unint64_t *)&v9->__shared_owners_;
                do
                  v44 = __ldaxr(p_shared_owners);
                while (__stlxr(v44 - 1, p_shared_owners));
                if (!v44)
                {
                  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
                  std::__shared_weak_count::__release_weak(v9);
                }
                return;
              }
LABEL_75:
              operator delete(*((void **)&v59 + 1));
              if ((SBYTE7(v59) & 0x80000000) == 0)
                goto LABEL_115;
              goto LABEL_76;
            }
            if ((*(unsigned int (**)(uint64_t *))(*v7 + 88))(v7))
            {
              memset(&v57, 170, sizeof(v57));
              v20 = (const void *)*MEMORY[0x1E0CFB4E0];
              v21 = strlen((const char *)*MEMORY[0x1E0CFB4E0]);
              if (v21 >= 0x7FFFFFFFFFFFFFF8)
                std::string::__throw_length_error[abi:ne180100]();
              v22 = v21;
              if (v21 >= 0x17)
              {
                v26 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v21 | 7) != 0x17)
                  v26 = v21 | 7;
                v27 = v26 + 1;
                p_dst = operator new(v26 + 1);
                __dst.__r_.__value_.__l.__size_ = v22;
                __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
              }
              else
              {
                *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v21;
                p_dst = &__dst;
                if (!v21)
                {
LABEL_58:
                  p_dst[v22] = 0;
                  v28 = (char *)operator new(0x28uLL);
                  strcpy(v28, " rejected; ABM is shutting down ");
                  v29 = std::string::append(&__dst, v28, 0x20uLL);
                  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
                  v57.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v30;
                  v29->__r_.__value_.__l.__size_ = 0;
                  v29->__r_.__value_.__r.__words[2] = 0;
                  v29->__r_.__value_.__r.__words[0] = 0;
                  operator delete(v28);
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(__dst.__r_.__value_.__l.__data_);
                    v31 = v7[11];
                    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
                    {
LABEL_60:
                      if (!*a3)
                        goto LABEL_103;
                      goto LABEL_85;
                    }
                  }
                  else
                  {
                    v31 = v7[11];
                    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
                      goto LABEL_60;
                  }
                  v36 = &v57;
                  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v36 = (std::string *)v57.__r_.__value_.__r.__words[0];
                  LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
                  _os_log_impl(&dword_1BF335000, v31, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
                  if (!*a3)
                  {
LABEL_103:
                    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(v57.__r_.__value_.__l.__data_);
                      v9 = v69;
                      if ((SHIBYTE(v67) & 0x80000000) == 0)
                      {
LABEL_105:
                        if ((SHIBYTE(v62) & 0x80000000) == 0)
                          goto LABEL_106;
                        goto LABEL_112;
                      }
                    }
                    else
                    {
                      v9 = v69;
                      if ((SHIBYTE(v67) & 0x80000000) == 0)
                        goto LABEL_105;
                    }
                    operator delete(__p);
                    if ((SHIBYTE(v62) & 0x80000000) == 0)
                    {
LABEL_106:
                      if ((SHIBYTE(v60) & 0x80000000) == 0)
                        goto LABEL_107;
                      goto LABEL_113;
                    }
LABEL_112:
                    operator delete((void *)v61);
                    if ((SHIBYTE(v60) & 0x80000000) == 0)
                    {
LABEL_107:
                      if ((SBYTE7(v59) & 0x80000000) == 0)
                        goto LABEL_108;
                      goto LABEL_114;
                    }
LABEL_113:
                    operator delete(*((void **)&v59 + 1));
                    if ((SBYTE7(v59) & 0x80000000) == 0)
                    {
LABEL_108:
                      if (!v9)
                        return;
                      goto LABEL_115;
                    }
LABEL_114:
                    operator delete((void *)buf);
                    if (!v9)
                      return;
                    goto LABEL_115;
                  }
LABEL_85:
                  v56 = xpc_null_create();
                  v37 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
                  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v37 = v57.__r_.__value_.__l.__size_;
                  if (!v37)
                    goto LABEL_102;
                  v38 = xpc_dictionary_create(0, 0, 0);
                  v39 = v38;
                  if (v38)
                  {
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
                  }
                  else
                  {
                    v39 = xpc_null_create();
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
                    if (!v39)
                    {
                      v40 = xpc_null_create();
                      v39 = 0;
                      goto LABEL_95;
                    }
                  }
                  if (MEMORY[0x1C3B8A86C](v39) == v11)
                  {
                    xpc_retain(v39);
LABEL_96:
                    xpc_release(v39);
                    xpc::dict::operator=(&v56, (xpc_object_t *)&__dst.__r_.__value_.__l.__data_);
                    xpc_release(__dst.__r_.__value_.__l.__data_);
                    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v41 = &v57;
                    else
                      v41 = (std::string *)v57.__r_.__value_.__r.__words[0];
                    v54 = xpc_string_create((const char *)v41);
                    if (!v54)
                      v54 = xpc_null_create();
                    v42 = *MEMORY[0x1E0CFB0D0];
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
                    __dst.__r_.__value_.__l.__size_ = v42;
                    xpc::dict::object_proxy::operator=((uint64_t)&__dst, &v54, &object);
                    xpc_release(object);
                    object = 0;
                    xpc_release(v54);
                    v54 = 0;
LABEL_102:
                    LODWORD(__dst.__r_.__value_.__l.__data_) = -534716415;
                    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, (unsigned int *)&__dst, &v56);
                    xpc_release(v56);
                    goto LABEL_103;
                  }
                  v40 = xpc_null_create();
LABEL_95:
                  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
                  goto LABEL_96;
                }
              }
              memmove(p_dst, v20, v22);
              goto LABEL_58;
            }
            v45[0] = MEMORY[0x1E0C809B0];
            v45[1] = 1174405120;
            v45[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_33;
            v45[3] = &__block_descriptor_tmp_36;
            v45[4] = v7;
            ResetInfo::ResetInfo(&v46, &buf);
            v25 = (void *)*a3;
            if (*a3)
              v25 = _Block_copy(v25);
            aBlock = v25;
            ctu::SharedSynchronizable<BootModule>::execute_wrapped(v7 + 15, (uint64_t)v45);
            if (aBlock)
              _Block_release(aBlock);
            if (v52 < 0)
            {
              operator delete(v51);
              if ((v50 & 0x80000000) == 0)
              {
LABEL_49:
                if ((v48 & 0x80000000) == 0)
                  goto LABEL_50;
                goto LABEL_79;
              }
            }
            else if ((v50 & 0x80000000) == 0)
            {
              goto LABEL_49;
            }
            operator delete(v49);
            if ((v48 & 0x80000000) == 0)
            {
LABEL_50:
              if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_68;
LABEL_80:
              operator delete(v46.__r_.__value_.__l.__data_);
              goto LABEL_68;
            }
LABEL_79:
            operator delete(v47);
            if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_68;
            goto LABEL_80;
          }
LABEL_33:
          operator delete(v57.__r_.__value_.__l.__data_);
          goto LABEL_34;
        }
      }
      if (SBYTE7(v59) < 0)
      {
        std::string::__init_copy_ctor_external(&__dst, (const std::string::value_type *)buf, *((std::string::size_type *)&buf + 1));
      }
      else
      {
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = buf;
        __dst.__r_.__value_.__r.__words[2] = v59;
      }
      v16 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        v17 = __dst.__r_.__value_.__l.__size_;
      if (v17 == strlen((const char *)*MEMORY[0x1E0CFB598]))
      {
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = &__dst;
        else
          v18 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        v19 = memcmp(v18, (const void *)*MEMORY[0x1E0CFB598], v17) == 0;
        if ((v16 & 0x80000000) == 0)
        {
LABEL_32:
          if ((*((_BYTE *)&v57.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_34;
          goto LABEL_33;
        }
      }
      else
      {
        v19 = 0;
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_32;
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_32;
    }
  }
}

void sub_1BF3A9318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,xpc_object_t object,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,char a40)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void **xpc::dict::operator=(void **a1, xpc_object_t *a2)
{
  xpc_object_t v3;
  void *v4;

  v3 = *a2;
  *a2 = xpc_null_create();
  v4 = *a1;
  *a1 = v3;
  xpc_release(v4);
  return a1;
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_33(uint64_t a1)
{
  _QWORD *v2;
  __int128 *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[4];
  std::string v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *aBlock;
  void *v16;
  std::string v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *__p;
  char v23;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = (__int128 *)(a1 + 40);
  ResetInfo::ResetInfo(&v17, (__int128 *)(a1 + 40));
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_2_34;
  v7[3] = &__block_descriptor_tmp_35_0;
  ResetInfo::ResetInfo(&v8, v3);
  v4 = *(void **)(a1 + 152);
  if (v4)
    v4 = _Block_copy(v4);
  aBlock = v4;
  v5 = _Block_copy(v7);
  v16 = v5;
  BootModule::requestReset(v2, (__int128 *)&v17, &v16);
  if (v5)
    _Block_release(v5);
  if (v23 < 0)
  {
    operator delete(__p);
    if ((v21 & 0x80000000) == 0)
    {
LABEL_7:
      if ((v19 & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_13;
    }
  }
  else if ((v21 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(v20);
  if ((v19 & 0x80000000) == 0)
  {
LABEL_8:
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_9;
LABEL_14:
    operator delete(v17.__r_.__value_.__l.__data_);
    v6 = aBlock;
    if (!aBlock)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_13:
  operator delete(v18);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_14;
LABEL_9:
  v6 = aBlock;
  if (aBlock)
LABEL_15:
    _Block_release(v6);
LABEL_16:
  if (v14 < 0)
  {
    operator delete(v13);
    if ((v12 & 0x80000000) == 0)
    {
LABEL_18:
      if ((v10 & 0x80000000) == 0)
        goto LABEL_19;
      goto LABEL_23;
    }
  }
  else if ((v12 & 0x80000000) == 0)
  {
    goto LABEL_18;
  }
  operator delete(v11);
  if ((v10 & 0x80000000) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_24:
    operator delete(v8.__r_.__value_.__l.__data_);
    return;
  }
LABEL_23:
  operator delete(v9);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_24;
}

void sub_1BF3A9608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *aBlock,uint64_t a28,void *a29)
{
  void **v29;
  const void *v30;

  if (v30)
    _Block_release(v30);
  if (aBlock)
    _Block_release(aBlock);
  ResetInfo::~ResetInfo(v29);
  ResetInfo::~ResetInfo(&a29);
  _Unwind_Resume(a1);
}

void sub_1BF3A9648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  ResetInfo::~ResetInfo(&a29);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_2_34(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  uint64_t v10;
  _DWORD *v11;
  void **v12;
  xpc_object_t v13;
  xpc_object_t v14;
  void *__p[2];
  char v16;
  xpc_object_t xdict;
  unsigned int v18;
  _DWORD *v19;
  _QWORD *v20[2];

  v18 = a2;
  v5 = xpc_dictionary_create(0, 0, 0);
  v6 = v5;
  if (v5)
  {
    xdict = v5;
  }
  else
  {
    v6 = xpc_null_create();
    xdict = v6;
    if (!v6)
    {
      v7 = xpc_null_create();
      v6 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v6) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v6);
    goto LABEL_9;
  }
  v7 = xpc_null_create();
LABEL_8:
  xdict = v7;
LABEL_9:
  xpc_release(v6);
  if (*((char *)a3 + 23) < 0)
  {
    if (!a3[1])
      goto LABEL_17;
    a3 = (uint64_t *)*a3;
  }
  else if (!*((_BYTE *)a3 + 23))
  {
    goto LABEL_17;
  }
  v8 = xpc_string_create((const char *)a3);
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB0D0], v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
LABEL_17:
  v10 = *(_QWORD *)(a1 + 104);
  v11 = operator new(0x38uLL);
  v11[8] = 0;
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = v20;
  v19 = v11;
  v20[0] = v11;
  *((_BYTE *)v11 + 24) = 1;
  v20[1] = (_QWORD *)1;
  *((_QWORD *)v11 + 5) = v10;
  *((_QWORD *)v11 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v19, 0, 9, __p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v19, v20[0]);
  if (v16 >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  v13 = xpc_string_create((const char *)v12);
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB370], v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  if (v16 < 0)
    operator delete(__p[0]);
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 144), &v18, &xdict);
  xpc_release(xdict);
}

void sub_1BF3A9864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, uint64_t a13, char a14, uint64_t a15)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c14_ZTS9ResetInfo144c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  ResetInfo::ResetInfo((std::string *)(a1 + 32), (__int128 *)(a2 + 32));
  result = *(void **)(a2 + 144);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 144) = result;
  return result;
}

void __destroy_helper_block_e8_32c14_ZTS9ResetInfo144c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 144);
  if (v2)
    _Block_release(v2);
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a1 + 79) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 80));
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      return;
LABEL_11:
    operator delete(*(void **)(a1 + 32));
    return;
  }
LABEL_10:
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_11;
}

void *__copy_helper_block_e8_40c14_ZTS9ResetInfo152c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  ResetInfo::ResetInfo((std::string *)(a1 + 40), (__int128 *)(a2 + 40));
  result = *(void **)(a2 + 152);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 152) = result;
  return result;
}

void __destroy_helper_block_e8_40c14_ZTS9ResetInfo152c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 152);
  if (v2)
    _Block_release(v2);
  if (*(char *)(a1 + 151) < 0)
  {
    operator delete(*(void **)(a1 + 128));
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a1 + 87) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 63) & 0x80000000) == 0)
      return;
LABEL_11:
    operator delete(*(void **)(a1 + 40));
    return;
  }
LABEL_10:
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_11;
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_38(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v6;
  xpc_object_t v7;
  xpc_object_t v8;
  std::__shared_weak_count *v9;
  xpc_object_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unsigned int v13;
  xpc_object_t object;
  std::__shared_weak_count *v16;

  v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
    v6 = std::__shared_weak_count::lock(v4);
    v16 = v6;
    if (v6)
    {
      if (!*(_QWORD *)(a1 + 32))
      {
        v9 = v6;
LABEL_14:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v7 = xpc_dictionary_create(0, 0, 0);
      v8 = v7;
      if (v7)
      {
        object = v7;
      }
      else
      {
        v8 = xpc_null_create();
        object = v8;
        if (!v8)
        {
          v10 = xpc_null_create();
          v8 = 0;
          goto LABEL_12;
        }
      }
      if (MEMORY[0x1C3B8A86C](v8) == MEMORY[0x1E0C812F8])
      {
        xpc_retain(v8);
        goto LABEL_13;
      }
      v10 = xpc_null_create();
LABEL_12:
      object = v10;
LABEL_13:
      xpc_release(v8);
      v13 = 0;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, &v13, &object);
      xpc_release(object);
      v9 = v16;
      if (!v16)
        return;
      goto LABEL_14;
    }
  }
}

void sub_1BF3A9B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
  xpc_release(object);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_40(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  xpc_object_t v11;
  void (**v12)(const void *, uint64_t, _BYTE *);
  xpc_object_t v13;
  xpc_object_t v14;
  void (**v15)(const void *, uint64_t, _BYTE *);
  void *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  xpc_object_t v22;
  NSObject *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  _BYTE object[24];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  v31 = v8;
  if (!v8)
    return;
  v9 = v8;
  if (!a1[5])
    goto LABEL_22;
  if (MEMORY[0x1C3B8A86C](*a2) != MEMORY[0x1E0C812F8])
  {
    v10 = v7[11];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v30 = *MEMORY[0x1E0CFB870];
      *(_DWORD *)object = 136315138;
      *(_QWORD *)&object[4] = v30;
      _os_log_error_impl(&dword_1BF335000, v10, OS_LOG_TYPE_ERROR, "No input is given for %s", object, 0xCu);
      if (!*a3)
      {
LABEL_22:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v29 = __ldaxr(p_shared_owners);
        while (__stlxr(v29 - 1, p_shared_owners));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
    }
    else if (!*a3)
    {
      goto LABEL_22;
    }
    v11 = xpc_null_create();
    v12 = (void (**)(const void *, uint64_t, _BYTE *))*a3;
    *(_QWORD *)object = v11;
    v13 = xpc_null_create();
    v12[2](v12, 3760250880, object);
    xpc_release(*(xpc_object_t *)object);
    xpc_release(v13);
    goto LABEL_22;
  }
  v14 = (xpc_object_t)*a2;
  if (v14)
  {
    xpc_retain(v14);
    v15 = (void (**)(const void *, uint64_t, _BYTE *))*a3;
    if (*a3)
      goto LABEL_10;
  }
  else
  {
    v14 = xpc_null_create();
    v15 = (void (**)(const void *, uint64_t, _BYTE *))*a3;
    if (*a3)
    {
LABEL_10:
      v16 = _Block_copy(v15);
      v17 = (std::__shared_weak_count *)v7[16];
      if (!v17)
LABEL_29:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_14;
    }
  }
  v16 = 0;
  v17 = (std::__shared_weak_count *)v7[16];
  if (!v17)
    goto LABEL_29;
LABEL_14:
  v18 = v7[15];
  v19 = std::__shared_weak_count::lock(v17);
  if (!v19)
    goto LABEL_29;
  v20 = v19;
  v21 = operator new(0x18uLL);
  *v21 = v7;
  v21[1] = v14;
  v22 = xpc_null_create();
  v21[2] = v16;
  v23 = v7[17];
  v24 = (unint64_t *)&v20->__shared_owners_;
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
  v26 = operator new(0x18uLL);
  *v26 = v21;
  v26[1] = v18;
  v26[2] = v20;
  dispatch_async_f(v23, v26, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb1_EUb2_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
  do
    v27 = __ldaxr(v24);
  while (__stlxr(v27 - 1, v24));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  xpc_release(v22);
  v9 = v31;
  if (v31)
    goto LABEL_22;
}

void sub_1BF3A9E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_42(_QWORD *a1, uint64_t a2, ctu **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  const void *v8;
  std::__shared_weak_count *v9;
  xpc_object_t v10;
  uint64_t v11;
  xpc_object_t value;
  NSObject *v13;
  const char *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _BYTE object[24];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v9 = v7;
      if (a1[5])
      {
        ctu::cf_to_xpc(*a3, v8);
        v10 = *(xpc_object_t *)object;
        v11 = MEMORY[0x1E0C812F8];
        if (*(_QWORD *)object && MEMORY[0x1C3B8A86C](*(_QWORD *)object) == v11)
          xpc_retain(*(xpc_object_t *)object);
        else
          v10 = xpc_null_create();
        xpc_release(*(xpc_object_t *)object);
        if (MEMORY[0x1C3B8A86C](v10) == v11)
        {
          value = xpc_dictionary_get_value(v10, (const char *)*MEMORY[0x1E0DDF828]);
          *(_QWORD *)object = value;
          if (value)
            xpc_retain(value);
          else
            *(_QWORD *)object = xpc_null_create();
          *(_BYTE *)(v6 + 192) = xpc::dyn_cast_or_default((xpc *)object, 0);
          xpc_release(*(xpc_object_t *)object);
          v13 = *(NSObject **)(v6 + 88);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            if (*(_BYTE *)(v6 + 192))
              v14 = "started";
            else
              v14 = "stopped";
            *(_DWORD *)object = 136315138;
            *(_QWORD *)&object[4] = v14;
            _os_log_impl(&dword_1BF335000, v13, OS_LOG_TYPE_DEFAULT, "#I Transport client %s", object, 0xCu);
          }
        }
        xpc_release(v10);
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1BF3AA08C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void BootModule::start(_QWORD *a1, dispatch_object_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *v19;
  NSObject *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v13);
  }
  v14 = (std::__shared_weak_count *)a1[16];
  if (!v14 || (v15 = a1[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v17 = v16;
  v18 = operator new(0x20uLL);
  *v18 = v5;
  v18[1] = v7;
  v18[2] = v13;
  v18[3] = a1;
  v19 = (unint64_t *)&v17->__shared_owners_;
  v20 = a1[17];
  do
    v21 = __ldxr(v19);
  while (__stxr(v21 + 1, v19));
  v22 = operator new(0x18uLL);
  *v22 = v18;
  v22[1] = v15;
  v22[2] = v17;
  dispatch_async_f(v20, v22, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::start(dispatch::group_session)::$_0>(BootModule::start(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::start(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<BootModule::start(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v23 = __ldaxr(v19);
  while (__stlxr(v23 - 1, v19));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void BootModule::finishInitialization_sync(BootModule *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const char *v10;
  size_t v11;
  void *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  AppleBasebandManager **v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  const void *v24;
  char *v25;
  size_t v26;
  void *v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  NSObject *v33;
  const void *v34;
  size_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  NSObject *v42;
  const void *v43;
  size_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  NSObject *v51;
  _QWORD v52[6];
  std::__shared_weak_count *v53;
  void *v54;
  dispatch_object_t v55;
  void *v56[2];
  unint64_t v57;
  _QWORD v58[6];
  std::__shared_weak_count *v59;
  void *v60;
  dispatch_object_t object;
  void *__p[2];
  unint64_t v63;
  _QWORD aBlock[6];
  std::__shared_weak_count *v65;
  const void *v66;
  dispatch_object_t v67;
  void *v68[2];
  unint64_t v69;
  const void *v70;
  void *__dst[2];
  unint64_t v72;
  __int128 v73;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v2 || (v3 = *((_QWORD *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (const char *)(*(uint64_t (**)(BootModule *))(*(_QWORD *)this + 16))(this);
  v11 = strlen(v10);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = (void *)v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = (void **)operator new(v14 + 1);
    __dst[1] = v12;
    v72 = v15 | 0x8000000000000000;
    __dst[0] = v13;
  }
  else
  {
    HIBYTE(v72) = v11;
    v13 = __dst;
    if (!v11)
      goto LABEL_17;
  }
  memmove(v13, v10, (size_t)v12);
LABEL_17:
  *((_BYTE *)v12 + (_QWORD)v13) = 0;
  v70 = 0;
  AppleBasebandManager::create();
  v16 = (AppleBasebandManager **)((char *)this + 456);
  v17 = v73;
  v73 = 0uLL;
  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 58);
  *(_OWORD *)((char *)this + 456) = v17;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
  if (!*((_QWORD *)&v73 + 1))
    goto LABEL_26;
  v22 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
  {
LABEL_26:
    v24 = v70;
    if (!v70)
      goto LABEL_28;
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  v24 = v70;
  if (v70)
LABEL_27:
    CFRelease(v24);
LABEL_28:
  if (SHIBYTE(v72) < 0)
    operator delete(__dst[0]);
  v25 = abm::kEventTransportIsReady[0];
  v26 = strlen(abm::kEventTransportIsReady[0]);
  if (v26 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v27 = (void *)v26;
  if (v26 >= 0x17)
  {
    v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v29 = v26 | 7;
    v30 = v29 + 1;
    v28 = (void **)operator new(v29 + 1);
    v68[1] = v27;
    v69 = v30 | 0x8000000000000000;
    v68[0] = v28;
  }
  else
  {
    HIBYTE(v69) = v26;
    v28 = v68;
    if (!v26)
      goto LABEL_38;
  }
  memmove(v28, v25, (size_t)v27);
LABEL_38:
  *((_BYTE *)v27 + (_QWORD)v28) = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule25finishInitialization_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_51_1;
  aBlock[4] = this;
  aBlock[5] = v3;
  v65 = v5;
  do
    v31 = __ldxr(p_shared_weak_owners);
  while (__stxr(v31 + 1, p_shared_weak_owners));
  v32 = _Block_copy(aBlock);
  v33 = *((_QWORD *)this + 17);
  if (v33)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v66 = v32;
  v67 = v33;
  AppleBasebandManager::setEventHandler();
  if (v67)
    dispatch_release(v67);
  if (v66)
    _Block_release(v66);
  if (SHIBYTE(v69) < 0)
    operator delete(v68[0]);
  v34 = (const void *)*MEMORY[0x1E0CFBAD0];
  v35 = strlen((const char *)*MEMORY[0x1E0CFBAD0]);
  if (v35 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v36 = (void *)v35;
  if (v35 >= 0x17)
  {
    v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v38 = v35 | 7;
    v39 = v38 + 1;
    v37 = operator new(v38 + 1);
    __p[1] = v36;
    v63 = v39 | 0x8000000000000000;
    __p[0] = v37;
  }
  else
  {
    HIBYTE(v63) = v35;
    v37 = __p;
    if (!v35)
      goto LABEL_56;
  }
  memmove(v37, v34, (size_t)v36);
LABEL_56:
  *((_BYTE *)v36 + (_QWORD)v37) = 0;
  v58[0] = MEMORY[0x1E0C809B0];
  v58[1] = 1174405120;
  v58[2] = ___ZN10BootModule25finishInitialization_syncEv_block_invoke_52;
  v58[3] = &__block_descriptor_tmp_53_1;
  v58[4] = this;
  v58[5] = v3;
  v59 = v5;
  do
    v40 = __ldxr(p_shared_weak_owners);
  while (__stxr(v40 + 1, p_shared_weak_owners));
  v41 = _Block_copy(v58);
  v42 = *((_QWORD *)this + 17);
  if (v42)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v60 = v41;
  object = v42;
  AppleBasebandManager::setEventHandler();
  if (object)
    dispatch_release(object);
  if (v60)
    _Block_release(v60);
  if (SHIBYTE(v63) < 0)
    operator delete(__p[0]);
  v43 = (const void *)*MEMORY[0x1E0CFBF60];
  v44 = strlen((const char *)*MEMORY[0x1E0CFBF60]);
  if (v44 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v45 = (void *)v44;
  if (v44 >= 0x17)
  {
    v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v47 = v44 | 7;
    v48 = v47 + 1;
    v46 = operator new(v47 + 1);
    v56[1] = v45;
    v57 = v48 | 0x8000000000000000;
    v56[0] = v46;
  }
  else
  {
    HIBYTE(v57) = v44;
    v46 = v56;
    if (!v44)
      goto LABEL_74;
  }
  memmove(v46, v43, (size_t)v45);
LABEL_74:
  *((_BYTE *)v45 + (_QWORD)v46) = 0;
  v52[0] = MEMORY[0x1E0C809B0];
  v52[1] = 1174405120;
  v52[2] = ___ZN10BootModule25finishInitialization_syncEv_block_invoke_54;
  v52[3] = &__block_descriptor_tmp_55_1;
  v52[4] = this;
  v52[5] = v3;
  v53 = v5;
  do
    v49 = __ldxr(p_shared_weak_owners);
  while (__stxr(v49 + 1, p_shared_weak_owners));
  v50 = _Block_copy(v52);
  v51 = *((_QWORD *)this + 17);
  if (v51)
    dispatch_retain(v51);
  v54 = v50;
  v55 = v51;
  AppleBasebandManager::setEventHandler();
  if (v55)
    dispatch_release(v55);
  if (v54)
    _Block_release(v54);
  if (SHIBYTE(v57) < 0)
    operator delete(v56[0]);
  AppleBasebandManager::eventsOn(*v16);
  if (v53)
    std::__shared_weak_count::__release_weak(v53);
  if (v59)
    std::__shared_weak_count::__release_weak(v59);
  if (v65)
    std::__shared_weak_count::__release_weak(v65);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF3AA850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45)
{
  std::__shared_weak_count *v45;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (a30)
    std::__shared_weak_count::__release_weak(a30);
  if (a45)
  {
    std::__shared_weak_count::__release_weak(a45);
    std::__shared_weak_count::__release_weak(v45);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v45);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule25finishInitialization_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  BootModule *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v9;
  __CFDictionary *v10;
  const __CFString **v11;
  const __CFString **v12;
  const void *v13;
  const __CFAllocator *v14;
  const void *v15;
  NSObject *v16;
  const char *v17;
  const __CFAllocator *v18;
  __CFDictionary *v19;
  uint64_t (*v20)(uint64_t);
  const __CFString **v21;
  const void *v22;
  const void *v23;
  size_t v24;
  void *v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  CFTypeRef v29;
  CFTypeID v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  unint64_t *p_shared_weak_owners;
  unint64_t v34;
  NSObject *v35;
  uint64_t v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  _QWORD v39[6];
  std::__shared_weak_count *v40;
  void *aBlock;
  CFTypeRef v42;
  void *__dst[2];
  unint64_t v44;
  CFTypeRef cf;
  void *object;
  std::__shared_weak_count *v48;
  __CFDictionary *v49;
  uint64_t v50;
  _BYTE state[22];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    return;
  v3 = (BootModule *)a1[4];
  v4 = std::__shared_weak_count::lock(v2);
  v48 = v4;
  if (!v4)
    return;
  v5 = v4;
  if (!a1[5])
  {
LABEL_61:
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    return;
  }
  v6 = *((int *)v3 + 112);
  if ((_DWORD)v6 != 3)
  {
    v16 = *((_QWORD *)v3 + 11);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      if (v6 > 8)
        v17 = "Unknown";
      else
        v17 = off_1E7901008[v6];
      v36 = *MEMORY[0x1E0CFB980];
      *(_DWORD *)state = 136315394;
      *(_QWORD *)&state[4] = v17;
      *(_WORD *)&state[12] = 2080;
      *(_QWORD *)&state[14] = v36;
      _os_log_impl(&dword_1BF335000, v16, OS_LOG_TYPE_DEFAULT, "#I State is '%s'; don't send '%s' event", state, 0x16u);
    }
    goto LABEL_61;
  }
  object = _os_activity_create(&dword_1BF335000, "Baseband state: transport is ready", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  memset(state, 170, 16);
  os_activity_scope_enter((os_activity_t)object, (os_activity_scope_state_t)state);
  os_activity_scope_leave((os_activity_scope_state_t)state);
  (*(void (**)(BootModule *, uint64_t))(*(_QWORD *)v3 + 96))(v3, 4);
  cf = 0;
  v7 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v10 = Mutable;
  if (Mutable)
    cf = Mutable;
  v11 = (const __CFString **)*MEMORY[0x1E0CFB530];
  *(_QWORD *)state = 0;
  ctu::cf::convert_copy((ctu::cf *)state, v11, (const char *)0x8000100, v7, v9);
  v12 = (const __CFString **)*MEMORY[0x1E0CFB980];
  v13 = *(const void **)state;
  v50 = *(_QWORD *)state;
  *(_QWORD *)state = 0;
  ctu::cf::convert_copy((ctu::cf *)state, v12, (const char *)0x8000100, v7, v14);
  v15 = *(const void **)state;
  v49 = *(__CFDictionary **)state;
  if (v13 && *(_QWORD *)state)
  {
    CFDictionarySetValue(v10, v13, *(const void **)state);
  }
  else if (!*(_QWORD *)state)
  {
    goto LABEL_15;
  }
  CFRelease(v15);
LABEL_15:
  if (v13)
    CFRelease(v13);
  v49 = (__CFDictionary *)0xAAAAAAAAAAAAAAAALL;
  BootModule::calculateBootStatistics_sync(v3, &v49);
  v19 = v49;
  v20 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!v49)
    v20 = 0;
  if (v20)
  {
    v21 = (const __CFString **)*MEMORY[0x1E0CFBAE8];
    *(_QWORD *)state = 0;
    ctu::cf::convert_copy((ctu::cf *)state, v21, (const char *)0x8000100, v7, v18);
    v22 = *(const void **)state;
    v50 = *(_QWORD *)state;
    *(_QWORD *)state = v19;
    if (v19)
    {
      CFRetain(v19);
      if (v22)
        CFDictionarySetValue(v10, v22, v19);
      CFRelease(v19);
    }
    if (v22)
      CFRelease(v22);
  }
  v23 = (const void *)*MEMORY[0x1E0CFBD68];
  v24 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  if (v24 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v25 = (void *)v24;
  if (v24 >= 0x17)
  {
    v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v27 = v24 | 7;
    v28 = v27 + 1;
    v26 = (void **)operator new(v27 + 1);
    __dst[1] = v25;
    v44 = v28 | 0x8000000000000000;
    __dst[0] = v26;
  }
  else
  {
    HIBYTE(v44) = v24;
    v26 = __dst;
    if (!v24)
      goto LABEL_34;
  }
  memmove(v26, v23, (size_t)v25);
LABEL_34:
  *((_BYTE *)v25 + (_QWORD)v26) = 0;
  v29 = cf;
  if (cf && (v30 = CFGetTypeID(cf), v30 == CFDictionaryGetTypeID()))
  {
    v42 = v29;
    CFRetain(v29);
  }
  else
  {
    v42 = 0;
  }
  v39[0] = MEMORY[0x1E0C809B0];
  v39[1] = 1174405120;
  v39[2] = ___ZN10BootModule25finishInitialization_syncEv_block_invoke_2;
  v39[3] = &__block_descriptor_tmp_49_1;
  v32 = a1[5];
  v31 = (std::__shared_weak_count *)a1[6];
  v39[4] = v3;
  v39[5] = v32;
  v40 = v31;
  if (v31)
  {
    p_shared_weak_owners = (unint64_t *)&v31->__shared_weak_owners_;
    do
      v34 = __ldxr(p_shared_weak_owners);
    while (__stxr(v34 + 1, p_shared_weak_owners));
  }
  aBlock = _Block_copy(v39);
  Service::broadcastEvent((uint64_t)v3, (uint64_t)__dst, &v42, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (v42)
    CFRelease(v42);
  if (SHIBYTE(v44) < 0)
    operator delete(__dst[0]);
  v35 = *((_QWORD *)v3 + 26);
  *((_QWORD *)v3 + 26) = 0;
  if (v35)
  {
    dispatch_group_leave(v35);
    dispatch_release(v35);
  }
  if (v40)
    std::__shared_weak_count::__release_weak(v40);
  if (v49)
    CFRelease(v49);
  if (v29)
    CFRelease(v29);
  if (object)
    os_release(object);
  v5 = v48;
  if (v48)
    goto LABEL_61;
}

void sub_1BF3AAE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,const void *a24,void *a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)(v28 - 80));
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)(v28 - 88));
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v28 - 96));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a24);
  ctu::os::scoped_activity::~scoped_activity(&a25);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void BootModule::calculateBootStatistics_sync(BootModule *this@<X0>, __CFDictionary **a2@<X8>)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  NSObject *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  const __CFAllocator *v12;
  __CFDictionary *Mutable;
  const __CFAllocator *v14;
  __CFDictionary *v15;
  const __CFAllocator *v16;
  const __CFAllocator *v17;
  CFTypeID v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v4 = TelephonyUtilSystemMachTime();
  v5 = *((_QWORD *)this + 29);
  v6 = v4 - v5;
  v7 = *((_DWORD *)this + 60);
  v8 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v19[0]) = 67109120;
    HIDWORD(v19[0]) = v4 - v5;
    _os_log_impl(&dword_1BF335000, v8, OS_LOG_TYPE_DEFAULT, "#I Baseband total boot time = %u millisec", (uint8_t *)v19, 8u);
    v8 = *((_QWORD *)this + 11);
    v9 = v7 - v5;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
LABEL_3:
      v10 = v4 - v7;
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else
  {
    v9 = v7 - v5;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      goto LABEL_3;
  }
  LODWORD(v19[0]) = 67109120;
  HIDWORD(v19[0]) = v9;
  _os_log_impl(&dword_1BF335000, v8, OS_LOG_TYPE_DEFAULT, "#I Baseband image push time = %u millisec", (uint8_t *)v19, 8u);
  v8 = *((_QWORD *)this + 11);
  v10 = v4 - v7;
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
LABEL_4:
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_13:
  LODWORD(v19[0]) = 67109120;
  HIDWORD(v19[0]) = v10;
  _os_log_impl(&dword_1BF335000, v8, OS_LOG_TYPE_DEFAULT, "#I Baseband engage time     = %u millisec", (uint8_t *)v19, 8u);
  v8 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
LABEL_5:
    v11 = *((_DWORD *)this + 56);
    LODWORD(v19[0]) = 67109120;
    HIDWORD(v19[0]) = v11;
    _os_log_impl(&dword_1BF335000, v8, OS_LOG_TYPE_DEFAULT, "#I Baseband boot attempts   = %u", (uint8_t *)v19, 8u);
  }
LABEL_6:
  BootModule::submitMetric_sync(this, *((_DWORD *)this + 56), v6, 1);
  *((_DWORD *)this + 56) = 0;
  v19[0] = 0;
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v15 = Mutable;
  if (Mutable)
    v19[0] = Mutable;
  ctu::cf::update<char const*,unsigned int>(Mutable, (const __CFString **)*MEMORY[0x1E0CFB3F8], v6, v12, v14);
  ctu::cf::update<char const*,unsigned int>(v15, (const __CFString **)*MEMORY[0x1E0CFB9E0], v9, v12, v16);
  ctu::cf::update<char const*,unsigned int>(v15, (const __CFString **)*MEMORY[0x1E0CFB650], v10, v12, v17);
  if (v15)
  {
    v18 = CFGetTypeID(v15);
    if (v18 == CFDictionaryGetTypeID())
    {
      *a2 = v15;
      CFRetain(v15);
    }
    else
    {
      *a2 = 0;
    }
    CFRelease(v15);
  }
  else
  {
    *a2 = 0;
  }
}

void sub_1BF3AB1EC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1BF3AB20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a9);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule25finishInitialization_syncEv_block_invoke_2(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v8[5];

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v8[0] = MEMORY[0x1E0C809B0];
        v8[1] = 0x40000000;
        v8[2] = ___ZN10BootModule25finishInitialization_syncEv_block_invoke_3;
        v8[3] = &__block_descriptor_tmp_48_0;
        v8[4] = v3;
        ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v3 + 120), (uint64_t)v8);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void ___ZN10BootModule25finishInitialization_syncEv_block_invoke_3(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;
  const char *v10;
  unint64_t v11;
  unint64_t v12;
  std::string v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(int *)(v1 + 448);
  if ((_DWORD)v2 == 4)
  {
    v11 = 0xAAAAAAAAAAAAAAAALL;
    v12 = 0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(unint64_t *__return_ptr))(*(_QWORD *)v1 + 80))(&v11);
    v3 = v11;
    if (v11)
    {
      v4 = (char *)operator new(0x38uLL);
      strcpy(v4, "com.apple.AppleBasebandManager.RadioNotReady.Bootup");
      v5 = *(_QWORD *)(v3 + 104);
      std::string::__init_copy_ctor_external(&v13, v4, 0x33uLL);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v5 + 32))(v5, &v13);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
      operator delete(v4);
    }
    v6 = (std::__shared_weak_count *)v12;
    if (v12)
    {
      v7 = (unint64_t *)(v12 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    v9 = *(NSObject **)(v1 + 88);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      if (v2 > 8)
        v10 = "Unknown";
      else
        v10 = off_1E7901050[v2];
      LODWORD(v13.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v13.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
      _os_log_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEFAULT, "#I State is '%s' not releasing power assertion yet", (uint8_t *)&v13, 0xCu);
    }
  }
}

void sub_1BF3AB480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  if (a16 < 0)
    operator delete(__p);
  operator delete(v16);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF3AB4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ctu::os::scoped_activity::~scoped_activity(void **this)
{
  void *v1;

  v1 = *this;
  if (v1)
    os_release(v1);
}

void ___ZN10BootModule25finishInitialization_syncEv_block_invoke_52(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  BootController *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *(BootController **)(v3 + 472);
        if (v6)
          BootController::markNonvolatileDataErased(v6);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF3AB59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule25finishInitialization_syncEv_block_invoke_54(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  CFTypeRef v11;
  int Int;
  _QWORD v13[2];
  CFTypeRef cf;
  __CFString *v15;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      abm::client::Event::getData(*a2);
      v11 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
      {
        v13[0] = 0xAAAAAAAAAAAAAAAALL;
        v13[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v13, (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v15, (const char *)*MEMORY[0x1E0CFB9E8]);
        Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v13, v15);
        MEMORY[0x1C3B8936C](&v15);
        *(_DWORD *)(v5 + 256) = Int;
        MEMORY[0x1C3B893A8](v13);
        v11 = cf;
      }
      if (v11)
        CFRelease(v11);
    }
  }
}

void BootModule::submitMetric_sync(BootModule *this, unsigned int a2, uint64_t a3, BOOL a4)
{
  NSObject *v8;
  xpc_object_t v9;
  uint64_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  const void *v26;
  size_t v27;
  size_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  xpc_object_t object;
  uint8_t buf[8];
  size_t v35;
  unint64_t v36;

  v8 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v8, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of bootup time", buf, 2u);
  }
  v9 = xpc_dictionary_create(0, 0, 0);
  v10 = MEMORY[0x1E0C812F8];
  if (v9 || (v9 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v9) == v10)
    {
      xpc_retain(v9);
      v11 = v9;
    }
    else
    {
      v11 = xpc_null_create();
    }
  }
  else
  {
    v11 = xpc_null_create();
    v9 = 0;
  }
  xpc_release(v9);
  v12 = xpc_dictionary_create(0, 0, 0);
  if (v12 || (v12 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v12) == v10)
    {
      xpc_retain(v12);
      v13 = v12;
    }
    else
    {
      v13 = xpc_null_create();
    }
  }
  else
  {
    v13 = xpc_null_create();
    v12 = 0;
  }
  xpc_release(v12);
  v14 = xpc_int64_create(a2);
  if (!v14)
    v14 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFB260], v14);
  v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  v16 = xpc_uint64_create(a3);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFB320], v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  v18 = xpc_BOOL_create(a4);
  if (!v18)
    v18 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFB268], v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  v20 = xpc_string_create((const char *)*MEMORY[0x1E0CFC190]);
  if (!v20)
    v20 = xpc_null_create();
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E0CFB020], v20);
  v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  v22 = xpc_int64_create(524384);
  if (!v22)
    v22 = xpc_null_create();
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E0CFB0E8], v22);
  v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  if (v13)
  {
    xpc_retain(v13);
    v24 = v13;
  }
  else
  {
    v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E0CFB018], v24);
  v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  v26 = (const void *)*MEMORY[0x1E0CFB5E0];
  v27 = strlen((const char *)*MEMORY[0x1E0CFB5E0]);
  if (v27 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v28 = v27;
  if (v27 >= 0x17)
  {
    v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v30 = v27 | 7;
    v31 = v30 + 1;
    v29 = operator new(v30 + 1);
    v35 = v28;
    v36 = v31 | 0x8000000000000000;
    *(_QWORD *)buf = v29;
LABEL_36:
    memmove(v29, v26, v28);
    *((_BYTE *)v29 + v28) = 0;
    object = v11;
    if (v11)
      goto LABEL_32;
    goto LABEL_37;
  }
  HIBYTE(v36) = v27;
  v29 = buf;
  if (v27)
    goto LABEL_36;
  buf[0] = 0;
  object = v11;
  if (v11)
  {
LABEL_32:
    xpc_retain(v11);
    goto LABEL_38;
  }
LABEL_37:
  object = xpc_null_create();
LABEL_38:
  v32 = 0;
  Service::runCommand((uint64_t)this, (uint64_t)buf, &object, &v32);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(v36) < 0)
    operator delete(*(void **)buf);
  xpc_release(v13);
  xpc_release(v11);
}

void sub_1BF3ABB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;

  xpc_release(object);
  if (a16 < 0)
    operator delete(__p);
  xpc_release(v17);
  xpc_release(v16);
  _Unwind_Resume(a1);
}

void BootModule::handleBootFailed_sync(uint64_t a1, const void **a2)
{
  int v4;
  size_t v5;
  size_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const void *v11;
  std::string *v12;
  __int128 v13;
  unsigned int v14;
  NSObject *v15;
  uint64_t v16;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  const void *v37;
  size_t v38;
  void *v39;
  void **v40;
  CFTypeRef v41;
  uint64_t v42;
  uint64_t v43;
  CFTypeID v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  xpc_object_t v48;
  xpc_object_t v49;
  NSObject *v50;
  __int128 v51;
  const void *v52;
  size_t v53;
  size_t v54;
  _BYTE *v55;
  xpc_object_t v56;
  xpc_object_t v57;
  void **v58;
  xpc_object_t v59;
  xpc_object_t v60;
  const char *v61;
  xpc_object_t v62;
  xpc_object_t v63;
  const void *v64;
  size_t v65;
  size_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  CFTypeRef v75;
  os_activity_t v76;
  uint64_t v77;
  uint64_t v78;
  const void *v79;
  size_t v80;
  size_t v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD v85[6];
  std::__shared_weak_count *v86;
  const void *v87;
  xpc_object_t object;
  _QWORD aBlock[6];
  std::__shared_weak_count *v90;
  const void *v91;
  const void *v92;
  void *__dst[2];
  unint64_t v94;
  uint64_t v95;
  std::string v96;
  void *v97;
  char v98;
  void *v99;
  char v100;
  void *v101;
  char v102;
  __int128 v103;
  char v104;
  CFTypeRef cf;
  _QWORD *v106;
  void *v107[2];
  char v108;
  __int128 v109;
  unint64_t v110;
  __int128 v111;
  unint64_t v112;
  void *__p[3];
  os_activity_t v114;
  _BYTE state[32];
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  v114 = _os_activity_create(&dword_1BF335000, "Baseband state: boot up failed", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  memset(state, 170, 16);
  os_activity_scope_enter(v114, (os_activity_scope_state_t)state);
  os_activity_scope_leave((os_activity_scope_state_t)state);
  memset(__p, 170, sizeof(__p));
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  v6 = v5 + 23;
  memset(state, 170, 24);
  if (v5 + 23 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 >= 0xFFFFFFFFFFFFFFE9)
  {
    v7 = &state[23];
    state[23] = v5 + 23;
    qmemcpy(state, "modem boot up failure [", 23);
LABEL_10:
    if (v4 >= 0)
      v11 = a2;
    else
      v11 = *a2;
    memmove(v7, v11, v5);
    goto LABEL_14;
  }
  v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v6 | 7) != 0x17)
    v8 = v6 | 7;
  v9 = v8 + 1;
  v10 = (char *)operator new(v8 + 1);
  *(_QWORD *)&state[8] = v5 + 23;
  *(_QWORD *)&state[16] = v9 | 0x8000000000000000;
  *(_QWORD *)state = v10;
  qmemcpy(v10, "modem boot up failure [", 23);
  v7 = v10 + 23;
  if (v5)
    goto LABEL_10;
LABEL_14:
  v7[v5] = 0;
  v12 = std::string::append((std::string *)state, "]", 1uLL);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  __p[2] = (void *)v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((state[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)state);
    if (*(_BYTE *)(a1 + 229))
      goto LABEL_19;
  }
  else if (*(_BYTE *)(a1 + 229))
  {
    goto LABEL_19;
  }
  v14 = *(_DWORD *)(a1 + 224);
  if (v14 <= *(_DWORD *)(a1 + 196))
  {
    v50 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)state = 67109120;
      *(_DWORD *)&state[4] = v14;
      _os_log_error_impl(&dword_1BF335000, v50, OS_LOG_TYPE_ERROR, "Attempting to boot baseband again; attempt=%d",
        state,
        8u);
    }
    *(_QWORD *)&v51 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v51 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v119 = v51;
    v120 = v51;
    v117 = v51;
    v118 = v51;
    *(_OWORD *)&state[16] = v51;
    v116 = v51;
    *(_OWORD *)state = v51;
    v52 = (const void *)*MEMORY[0x1E0CFB590];
    v53 = strlen((const char *)*MEMORY[0x1E0CFB590]);
    if (v53 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v54 = v53;
    if (v53 >= 0x17)
    {
      v77 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v53 | 7) != 0x17)
        v77 = v53 | 7;
      v78 = v77 + 1;
      v55 = operator new(v77 + 1);
      *((_QWORD *)&v111 + 1) = v54;
      v112 = v78 | 0x8000000000000000;
      *(_QWORD *)&v111 = v55;
    }
    else
    {
      HIBYTE(v112) = v53;
      v55 = &v111;
      if (!v53)
      {
LABEL_130:
        v55[v54] = 0;
        v79 = (const void *)*MEMORY[0x1E0CFBEA0];
        v80 = strlen((const char *)*MEMORY[0x1E0CFBEA0]);
        if (v80 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v81 = v80;
        if (v80 >= 0x17)
        {
          v83 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v80 | 7) != 0x17)
            v83 = v80 | 7;
          v84 = v83 + 1;
          v82 = operator new(v83 + 1);
          *((_QWORD *)&v109 + 1) = v81;
          v110 = v84 | 0x8000000000000000;
          *(_QWORD *)&v109 = v82;
        }
        else
        {
          HIBYTE(v110) = v80;
          v82 = &v109;
          if (!v80)
          {
LABEL_138:
            v82[v81] = 0;
            Timestamp::Timestamp((Timestamp *)&cf);
            Timestamp::asString((uint64_t)&cf, 0, 9, v107);
            v104 = 0;
            LOBYTE(v103) = 0;
            ResetInfo::ResetInfo((std::string *)state, &v111, &v109, (__int128 *)__p, (uint64_t)v107, 4, &v103);
            if (v108 < 0)
            {
              operator delete(v107[0]);
              std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&cf, v106);
              if ((SHIBYTE(v110) & 0x80000000) == 0)
              {
LABEL_140:
                if ((SHIBYTE(v112) & 0x80000000) == 0)
                  goto LABEL_141;
LABEL_152:
                operator delete((void *)v111);
LABEL_141:
                ResetInfo::ResetInfo(&v96, (__int128 *)state);
                v95 = 0;
                BootModule::requestReset(a1, &v96, &v95);
                if (v102 < 0)
                {
                  operator delete(v101);
                  if ((v100 & 0x80000000) == 0)
                  {
LABEL_143:
                    if ((v98 & 0x80000000) == 0)
                      goto LABEL_144;
                    goto LABEL_155;
                  }
                }
                else if ((v100 & 0x80000000) == 0)
                {
                  goto LABEL_143;
                }
                operator delete(v99);
                if ((v98 & 0x80000000) == 0)
                {
LABEL_144:
                  if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_145;
                  goto LABEL_156;
                }
LABEL_155:
                operator delete(v97);
                if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_145:
                  if ((SHIBYTE(v120) & 0x80000000) == 0)
                    goto LABEL_146;
                  goto LABEL_157;
                }
LABEL_156:
                operator delete(v96.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v120) & 0x80000000) == 0)
                {
LABEL_146:
                  if ((SBYTE7(v118) & 0x80000000) == 0)
                    goto LABEL_147;
                  goto LABEL_158;
                }
LABEL_157:
                operator delete(*((void **)&v119 + 1));
                if ((SBYTE7(v118) & 0x80000000) == 0)
                {
LABEL_147:
                  if ((SHIBYTE(v116) & 0x80000000) == 0)
                    goto LABEL_148;
                  goto LABEL_159;
                }
LABEL_158:
                operator delete((void *)v117);
                if ((SHIBYTE(v116) & 0x80000000) == 0)
                {
LABEL_148:
                  if ((state[23] & 0x80000000) == 0)
                    goto LABEL_118;
LABEL_160:
                  operator delete(*(void **)state);
                  goto LABEL_118;
                }
LABEL_159:
                operator delete(*(void **)&state[24]);
                if ((state[23] & 0x80000000) == 0)
                  goto LABEL_118;
                goto LABEL_160;
              }
            }
            else
            {
              std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&cf, v106);
              if ((SHIBYTE(v110) & 0x80000000) == 0)
                goto LABEL_140;
            }
            operator delete((void *)v109);
            if ((SHIBYTE(v112) & 0x80000000) == 0)
              goto LABEL_141;
            goto LABEL_152;
          }
        }
        memmove(v82, v79, v81);
        goto LABEL_138;
      }
    }
    memmove(v55, v52, v54);
    goto LABEL_130;
  }
LABEL_19:
  v15 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)state = 0;
    _os_log_error_impl(&dword_1BF335000, v15, OS_LOG_TYPE_ERROR, "Baseband is declared dead; no more boot attempts",
      state,
      2u);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, 6);
  cf = 0;
  v16 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
    cf = Mutable;
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E0CFB530], (const __CFString **)*MEMORY[0x1E0CFB588], v16, v18);
  v19 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v19 || (v20 = *(_QWORD *)(a1 + 120), (v21 = std::__shared_weak_count::lock(v19)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v22 = v21;
  p_shared_weak_owners = (unint64_t *)&v21->__shared_weak_owners_;
  do
    v24 = __ldxr(p_shared_weak_owners);
  while (__stxr(v24 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v21->__shared_owners_;
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v22);
  }
  *(_QWORD *)&v109 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v109 + 1) = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v27 = (uint64_t *)off_1ED70FA00;
  if (!off_1ED70FA00)
  {
    ABMServer::create_default_global(state);
    v28 = *(_OWORD *)state;
    *(_QWORD *)state = 0;
    *(_QWORD *)&state[8] = 0;
    v29 = (std::__shared_weak_count *)*(&off_1ED70FA00 + 1);
    off_1ED70FA00 = v28;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = *(std::__shared_weak_count **)&state[8];
    if (*(_QWORD *)&state[8])
    {
      v33 = (unint64_t *)(*(_QWORD *)&state[8] + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v27 = (uint64_t *)off_1ED70FA00;
  }
  *(_QWORD *)&v109 = v27;
  *((_QWORD *)&v109 + 1) = *(&off_1ED70FA00 + 1);
  if (*(&off_1ED70FA00 + 1))
  {
    v35 = (unint64_t *)(*(&off_1ED70FA00 + 1) + 8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v37 = (const void *)*MEMORY[0x1E0CFBD68];
  v38 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  if (v38 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v39 = (void *)v38;
  if (v38 >= 0x17)
  {
    v42 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17)
      v42 = v38 | 7;
    v43 = v42 + 1;
    v40 = (void **)operator new(v42 + 1);
    __dst[1] = v39;
    v94 = v43 | 0x8000000000000000;
    __dst[0] = v40;
  }
  else
  {
    HIBYTE(v94) = v38;
    v40 = __dst;
    if (!v38)
    {
      LOBYTE(__dst[0]) = 0;
      v41 = cf;
      if (!cf)
        goto LABEL_57;
      goto LABEL_55;
    }
  }
  memmove(v40, v37, (size_t)v39);
  *((_BYTE *)v39 + (_QWORD)v40) = 0;
  v41 = cf;
  if (!cf)
  {
LABEL_57:
    v41 = 0;
    v92 = 0;
    goto LABEL_58;
  }
LABEL_55:
  v44 = CFGetTypeID(v41);
  if (v44 != CFDictionaryGetTypeID())
    goto LABEL_57;
  v92 = v41;
  CFRetain(v41);
LABEL_58:
  v45 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule21handleBootFailed_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_58_0;
  aBlock[4] = a1;
  aBlock[5] = v20;
  v90 = v22;
  do
    v46 = __ldxr(p_shared_weak_owners);
  while (__stxr(v46 + 1, p_shared_weak_owners));
  v47 = _Block_copy(aBlock);
  v91 = v47;
  ABMServer::broadcast(v27, (uint64_t)__dst, &v92, &v91);
  if (v47)
    _Block_release(v47);
  if (v41)
    CFRelease(v41);
  if (SHIBYTE(v94) < 0)
    operator delete(__dst[0]);
  v48 = xpc_dictionary_create(0, 0, 0);
  if (v48 || (v48 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v48) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v48);
      v49 = v48;
    }
    else
    {
      v49 = xpc_null_create();
    }
  }
  else
  {
    v49 = xpc_null_create();
    v48 = 0;
  }
  xpc_release(v48);
  v56 = xpc_int64_create(4);
  if (!v56)
    v56 = xpc_null_create();
  xpc_dictionary_set_value(v49, (const char *)*MEMORY[0x1E0CFB010], v56);
  v57 = xpc_null_create();
  xpc_release(v56);
  xpc_release(v57);
  if (SHIBYTE(__p[2]) >= 0)
    v58 = __p;
  else
    v58 = (void **)__p[0];
  v59 = xpc_string_create((const char *)v58);
  if (!v59)
    v59 = xpc_null_create();
  xpc_dictionary_set_value(v49, (const char *)*MEMORY[0x1E0CFB930], v59);
  v60 = xpc_null_create();
  xpc_release(v59);
  xpc_release(v60);
  Timestamp::Timestamp((Timestamp *)&v111);
  Timestamp::asString((uint64_t)&v111, 0, 9, state);
  if (state[23] >= 0)
    v61 = state;
  else
    v61 = *(const char **)state;
  v62 = xpc_string_create(v61);
  if (!v62)
    v62 = xpc_null_create();
  xpc_dictionary_set_value(v49, (const char *)*MEMORY[0x1E0CFB370], v62);
  v63 = xpc_null_create();
  xpc_release(v62);
  xpc_release(v63);
  if ((state[23] & 0x80000000) != 0)
    operator delete(*(void **)state);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v111, *((_QWORD **)&v111 + 1));
  v64 = (const void *)*MEMORY[0x1E0CFB5F0];
  v65 = strlen((const char *)*MEMORY[0x1E0CFB5F0]);
  if (v65 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v66 = v65;
  if (v65 >= 0x17)
  {
    v68 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v65 | 7) != 0x17)
      v68 = v65 | 7;
    v69 = v68 + 1;
    v67 = operator new(v68 + 1);
    *(_QWORD *)&state[8] = v66;
    *(_QWORD *)&state[16] = v69 | 0x8000000000000000;
    *(_QWORD *)state = v67;
LABEL_100:
    memmove(v67, v64, v66);
    v67[v66] = 0;
    object = v49;
    if (v49)
      goto LABEL_96;
    goto LABEL_101;
  }
  state[23] = v65;
  v67 = state;
  if (v65)
    goto LABEL_100;
  state[0] = 0;
  object = v49;
  if (v49)
  {
LABEL_96:
    xpc_retain(v49);
    goto LABEL_102;
  }
LABEL_101:
  object = xpc_null_create();
LABEL_102:
  v85[0] = v45;
  v85[1] = 1174405120;
  v85[2] = ___ZN10BootModule21handleBootFailed_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke_59;
  v85[3] = &__block_descriptor_tmp_61_1;
  v85[4] = a1;
  v85[5] = v20;
  v86 = v22;
  do
    v70 = __ldxr(p_shared_weak_owners);
  while (__stxr(v70 + 1, p_shared_weak_owners));
  v71 = _Block_copy(v85);
  v87 = v71;
  Service::runCommand(a1, (uint64_t)state, &object, &v87);
  if (v71)
    _Block_release(v71);
  xpc_release(object);
  object = 0;
  if ((state[23] & 0x80000000) != 0)
    operator delete(*(void **)state);
  if (v86)
    std::__shared_weak_count::__release_weak(v86);
  xpc_release(v49);
  if (v90)
    std::__shared_weak_count::__release_weak(v90);
  v72 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
  if (!*((_QWORD *)&v109 + 1))
    goto LABEL_116;
  v73 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v74 - 1, v73));
  if (v74)
  {
LABEL_116:
    std::__shared_weak_count::__release_weak(v22);
    v75 = cf;
    if (!cf)
      goto LABEL_118;
    goto LABEL_117;
  }
  ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
  std::__shared_weak_count::__release_weak(v72);
  std::__shared_weak_count::__release_weak(v22);
  v75 = cf;
  if (cf)
LABEL_117:
    CFRelease(v75);
LABEL_118:
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    v76 = v114;
    if (!v114)
      return;
  }
  else
  {
    v76 = v114;
    if (!v114)
      return;
  }
  os_release(v76);
}

void sub_1BF3AC7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, xpc_object_t object, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  char a66;
  uint64_t v66;

  ResetInfo::~ResetInfo(&a32);
  ResetInfo::~ResetInfo((void **)(v66 - 240));
  if (a66 < 0)
    operator delete(__p);
  ctu::os::scoped_activity::~scoped_activity((void **)(v66 - 248));
  _Unwind_Resume(a1);
}

void ___ZN10BootModule21handleBootFailed_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v20;
  std::string v21;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    return;
  v3 = (_QWORD *)a1[4];
  v4 = std::__shared_weak_count::lock(v2);
  v20 = v4;
  if (!v4)
    return;
  if (!a1[5])
  {
    v14 = v4;
LABEL_21:
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    return;
  }
  v5 = (std::__shared_weak_count *)v3[23];
  v3[22] = 0;
  v3[23] = 0;
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v17 = 0xAAAAAAAAAAAAAAAALL;
  v18 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, _QWORD *))(*v3 + 80))(&v17, v3);
  v8 = v17;
  if (v17)
  {
    v9 = (char *)operator new(0x38uLL);
    strcpy(v9, "com.apple.AppleBasebandManager.RadioNotReady.Bootup");
    v10 = *(_QWORD *)(v8 + 104);
    std::string::__init_copy_ctor_external(&v21, v9, 0x33uLL);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v10 + 32))(v10, &v21);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    operator delete(v9);
  }
  v11 = (std::__shared_weak_count *)v18;
  if (v18)
  {
    v12 = (unint64_t *)(v18 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v20;
  if (v20)
    goto LABEL_21;
}

void sub_1BF3ACBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  if (a19 < 0)
    operator delete(__p);
  operator delete(v19);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_1BF3ACC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule21handleBootFailed_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke_59(_QWORD *a1, int a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  xpc_object_t v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
        v13 = *a3;
        if (*a3)
        {
          xpc_retain(*a3);
          v14 = (std::__shared_weak_count *)v7[16];
          if (!v14)
LABEL_23:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v13 = xpc_null_create();
          v14 = (std::__shared_weak_count *)v7[16];
          if (!v14)
            goto LABEL_23;
        }
        v15 = v7[15];
        v16 = std::__shared_weak_count::lock(v14);
        if (!v16)
          goto LABEL_23;
        v17 = v16;
        v18 = operator new(0x28uLL);
        *v18 = v7;
        v18[1] = v10;
        v18[2] = v9;
        *((_DWORD *)v18 + 6) = a2;
        v18[4] = v13;
        v19 = xpc_null_create();
        v20 = v7[17];
        v21 = (unint64_t *)&v17->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
        v23 = operator new(0x18uLL);
        *v23 = v18;
        v23[1] = v15;
        v23[2] = v17;
        dispatch_async_f(v20, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZNS3_21handleBootFailed_syncENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEUb4_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNS6_10unique_ptrISE_NS6_14default_deleteISE_EEEEENUlPvE_8__invokeESN_);
        do
          v24 = __ldaxr(v21);
        while (__stlxr(v24 - 1, v21));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        xpc_release(v19);
      }
      v25 = (unint64_t *)&v9->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void BootModule::handleReset_sync(uint64_t a1, uint64_t a2, void **a3)
{
  void **v6;
  uint64_t v7;
  __CFDictionary *Mutable;
  const __CFAllocator *v9;
  uint64_t v10;
  uint64_t v11;
  const __CFAllocator *v12;
  unint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_weak_owners;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  const void *v32;
  size_t v33;
  void *v34;
  void **v35;
  __CFDictionary *v36;
  void **v37;
  uint64_t v38;
  uint64_t v39;
  CFTypeID v40;
  unint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  __CFDictionary *v49;
  _QWORD aBlock[6];
  std::__shared_weak_count *v51;
  std::string v52;
  void *v53;
  char v54;
  void *v55;
  char v56;
  void *__p;
  char v58;
  void *v59;
  const void *v60;
  __CFDictionary *v61;
  void *__dst[2];
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  __CFDictionary *v66;
  std::string v67;

  if ((*(char *)(a2 + 71) & 0x80000000) == 0)
  {
    v67 = *(std::string *)(a2 + 48);
    v6 = (void **)(a1 + 152);
    if ((*(char *)(a1 + 175) & 0x80000000) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  v6 = (void **)(a1 + 152);
  if (*(char *)(a1 + 175) < 0)
LABEL_3:
    operator delete(*v6);
LABEL_4:
  *(std::string *)v6 = v67;
  v66 = 0;
  v7 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
    v66 = Mutable;
  else
    Mutable = v66;
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E0CFB530], (const __CFString **)*MEMORY[0x1E0CFBB68], v7, v9);
  ResetInfo::addToDict(a2, &v66, v10, v11, v12);
  v64 = 0xAAAAAAAAAAAAAAAALL;
  v65 = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v13 = off_1ED70FA00;
  if (!off_1ED70FA00)
  {
    ABMServer::create_default_global(&v67);
    v14 = *(_OWORD *)&v67.__r_.__value_.__l.__data_;
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = 0uLL;
    v15 = (std::__shared_weak_count *)*(&off_1ED70FA00 + 1);
    off_1ED70FA00 = v14;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    size = (std::__shared_weak_count *)v67.__r_.__value_.__l.__size_;
    if (v67.__r_.__value_.__l.__size_)
    {
      v19 = (unint64_t *)(v67.__r_.__value_.__l.__size_ + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v13 = off_1ED70FA00;
  }
  v64 = v13;
  v65 = *(&off_1ED70FA00 + 1);
  if (*(&off_1ED70FA00 + 1))
  {
    v21 = (unint64_t *)(*(&off_1ED70FA00 + 1) + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v23 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v23 || (v24 = *(_QWORD *)(a1 + 120), (v25 = std::__shared_weak_count::lock(v23)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v26 = v25;
  p_shared_weak_owners = (unint64_t *)&v25->__shared_weak_owners_;
  do
    v28 = __ldxr(p_shared_weak_owners);
  while (__stxr(v28 + 1, p_shared_weak_owners));
  v29 = (unint64_t *)&v25->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v26);
  }
  v31 = (uint64_t *)v64;
  v32 = (const void *)*MEMORY[0x1E0CFBD68];
  v33 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  if (v33 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v34 = (void *)v33;
  if (v33 >= 0x17)
  {
    v37 = a3;
    v38 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17)
      v38 = v33 | 7;
    v39 = v38 + 1;
    v35 = (void **)operator new(v38 + 1);
    __dst[1] = v34;
    v63 = v39 | 0x8000000000000000;
    __dst[0] = v35;
    a3 = v37;
    v31 = (uint64_t *)v64;
  }
  else
  {
    HIBYTE(v63) = v33;
    v35 = __dst;
    if (!v33)
    {
      LOBYTE(__dst[0]) = 0;
      v36 = v66;
      if (!v66)
        goto LABEL_43;
      goto LABEL_41;
    }
  }
  memmove(v35, v32, (size_t)v34);
  *((_BYTE *)v34 + (_QWORD)v35) = 0;
  v36 = v66;
  if (!v66)
  {
LABEL_43:
    v36 = 0;
    v61 = 0;
    goto LABEL_44;
  }
LABEL_41:
  v40 = CFGetTypeID(v36);
  if (v40 != CFDictionaryGetTypeID())
    goto LABEL_43;
  v61 = v36;
  CFRetain(v36);
LABEL_44:
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule16handleReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_62_0;
  aBlock[4] = a1;
  aBlock[5] = v24;
  v51 = v26;
  do
    v41 = __ldxr(p_shared_weak_owners);
  while (__stxr(v41 + 1, p_shared_weak_owners));
  ResetInfo::ResetInfo(&v52, (__int128 *)a2);
  v42 = *a3;
  if (*a3)
    v42 = _Block_copy(v42);
  v59 = v42;
  v43 = _Block_copy(aBlock);
  v60 = v43;
  ABMServer::broadcast(v31, (uint64_t)__dst, (const void **)&v61, &v60);
  if (v43)
    _Block_release(v43);
  if (v36)
    CFRelease(v36);
  if (SHIBYTE(v63) < 0)
  {
    operator delete(__dst[0]);
    v44 = v59;
    if (!v59)
      goto LABEL_57;
    goto LABEL_56;
  }
  v44 = v59;
  if (v59)
LABEL_56:
    _Block_release(v44);
LABEL_57:
  if (v58 < 0)
  {
    operator delete(__p);
    if ((v56 & 0x80000000) == 0)
    {
LABEL_59:
      if ((v54 & 0x80000000) == 0)
        goto LABEL_60;
      goto LABEL_72;
    }
  }
  else if ((v56 & 0x80000000) == 0)
  {
    goto LABEL_59;
  }
  operator delete(v55);
  if ((v54 & 0x80000000) == 0)
  {
LABEL_60:
    if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_61;
LABEL_73:
    operator delete(v52.__r_.__value_.__l.__data_);
    v45 = v51;
    if (!v51)
      goto LABEL_63;
    goto LABEL_62;
  }
LABEL_72:
  operator delete(v53);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_73;
LABEL_61:
  v45 = v51;
  if (v51)
LABEL_62:
    std::__shared_weak_count::__release_weak(v45);
LABEL_63:
  std::__shared_weak_count::__release_weak(v26);
  v46 = (std::__shared_weak_count *)v65;
  if (!v65)
    goto LABEL_67;
  v47 = (unint64_t *)(v65 + 8);
  do
    v48 = __ldaxr(v47);
  while (__stlxr(v48 - 1, v47));
  if (v48)
  {
LABEL_67:
    v49 = v66;
    if (!v66)
      return;
    goto LABEL_68;
  }
  ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
  std::__shared_weak_count::__release_weak(v46);
  v49 = v66;
  if (v66)
LABEL_68:
    CFRelease(v49);
}

void sub_1BF3AD2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *aBlock)
{
  uint64_t v32;

  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v32 - 120));
  _Unwind_Resume(a1);
}

void ___ZN10BootModule16handleReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  int v6;
  size_t size;
  std::string *v8;
  _BOOL4 v9;
  NSObject *v10;
  _BOOL4 v11;
  void *v12;
  std::string *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  const void *v16;
  void *v17;
  void *v18;
  std::string v19;
  char v20;
  void *aBlock;
  std::string v22;
  char v23;
  std::string v24;
  std::__shared_weak_count *v26;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 32);
    v4 = std::__shared_weak_count::lock(v2);
    v26 = v4;
    if (v4)
    {
      v5 = v4;
      if (!*(_QWORD *)(a1 + 40))
        goto LABEL_27;
      if (*(char *)(a1 + 79) < 0)
        std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)(a1 + 56), *(_QWORD *)(a1 + 64));
      else
        v24 = *(std::string *)(a1 + 56);
      v6 = SHIBYTE(v24.__r_.__value_.__r.__words[2]);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
      else
        size = v24.__r_.__value_.__l.__size_;
      if (size == strlen((const char *)*MEMORY[0x1E0CFB598]))
      {
        if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v8 = &v24;
        else
          v8 = (std::string *)v24.__r_.__value_.__r.__words[0];
        v9 = memcmp(v8, (const void *)*MEMORY[0x1E0CFB598], size) == 0;
        if ((v6 & 0x80000000) == 0)
        {
LABEL_15:
          v10 = v3[11];
          v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
          if (v9)
            goto LABEL_16;
          goto LABEL_34;
        }
      }
      else
      {
        v9 = 0;
        if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_15;
      }
      operator delete(v24.__r_.__value_.__l.__data_);
      v10 = v3[11];
      v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      if (v9)
      {
LABEL_16:
        if (v11)
        {
          LOWORD(v24.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1BF335000, v10, OS_LOG_TYPE_DEFAULT, "#I Request to perform soft reset", (uint8_t *)&v24, 2u);
        }
        ResetInfo::ResetInfo(&v22, (__int128 *)(a1 + 56));
        v12 = *(void **)(a1 + 168);
        if (v12)
          v12 = _Block_copy(v12);
        aBlock = v12;
        (*(void (**)(_QWORD *, std::string *, void **))(*v3 + 104))(v3, &v22, &aBlock);
        if (aBlock)
          _Block_release(aBlock);
        v13 = &v22;
        if (v23 < 0)
LABEL_23:
          operator delete((void *)v13[3].__r_.__value_.__r.__words[2]);
LABEL_24:
        if (SHIBYTE(v13[2].__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v13[2].__r_.__value_.__l.__data_);
          if ((SHIBYTE(v13[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_26:
            if ((SHIBYTE(v13->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_27;
LABEL_40:
            operator delete(v13->__r_.__value_.__l.__data_);
LABEL_27:
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v15 = __ldaxr(p_shared_owners);
            while (__stlxr(v15 - 1, p_shared_owners));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
            return;
          }
        }
        else if ((SHIBYTE(v13[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_26;
        }
        operator delete(v13[1].__r_.__value_.__l.__data_);
        if ((SHIBYTE(v13->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_27;
        goto LABEL_40;
      }
LABEL_34:
      if (v11)
      {
        LOWORD(v24.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1BF335000, v10, OS_LOG_TYPE_DEFAULT, "#I Request to perform hard reset", (uint8_t *)&v24, 2u);
      }
      ResetInfo::ResetInfo(&v19, (__int128 *)(a1 + 56));
      v16 = *(const void **)(a1 + 168);
      if (v16)
        v17 = _Block_copy(v16);
      else
        v17 = 0;
      v18 = v17;
      BootModule::hardReset_sync((uint64_t)v3, (uint64_t)&v19, (uint64_t *)&v18);
      if (v17)
        _Block_release(v17);
      v13 = &v19;
      if (v20 < 0)
        goto LABEL_23;
      goto LABEL_24;
    }
  }
}

void sub_1BF3AD690(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1 - 80);
  _Unwind_Resume(a1);
}

void sub_1BF3AD6A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  const void *v10;
  uint64_t v11;

  if (v10)
    _Block_release(v10);
  ResetInfo::~ResetInfo(&a10);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v11 - 80);
  _Unwind_Resume(a1);
}

void sub_1BF3AD6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *aBlock,void *a25)
{
  uint64_t v25;

  if (aBlock)
    _Block_release(aBlock);
  ResetInfo::~ResetInfo(&a25);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v25 - 80);
  _Unwind_Resume(a1);
}

void sub_1BF3AD6FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1 - 80);
  _Unwind_Resume(a1);
}

void BootModule::hardReset_sync(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  size_t v17;
  std::string *v18;
  _BOOL4 v19;
  NSObject *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __CFDictionary *Mutable;
  const __CFAllocator *v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  const __CFAllocator *v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_weak_owners;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t *v39;
  const void *v40;
  size_t v41;
  void *v42;
  void **v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  CFTypeID v47;
  unint64_t v48;
  void *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD v53[6];
  std::__shared_weak_count *v54;
  const void *v55;
  const void *v56;
  void *__dst[2];
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  std::string v61;

  v59 = 0xAAAAAAAAAAAAAAAALL;
  v60 = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v6 = off_1ED70FA00;
  if (!off_1ED70FA00)
  {
    ABMServer::create_default_global(&v61);
    v7 = *(_OWORD *)&v61.__r_.__value_.__l.__data_;
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = 0uLL;
    v8 = (std::__shared_weak_count *)*(&off_1ED70FA00 + 1);
    off_1ED70FA00 = v7;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    size = (std::__shared_weak_count *)v61.__r_.__value_.__l.__size_;
    if (v61.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v61.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v6 = off_1ED70FA00;
  }
  v59 = v6;
  v60 = *(&off_1ED70FA00 + 1);
  if (*(&off_1ED70FA00 + 1))
  {
    v14 = (unint64_t *)(*(&off_1ED70FA00 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  *(_BYTE *)(a1 + 228) = 0;
  if (*(char *)(a2 + 47) < 0)
    std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  else
    v61 = *(std::string *)(a2 + 24);
  v16 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
  else
    v17 = v61.__r_.__value_.__l.__size_;
  if (v17 != strlen((const char *)*MEMORY[0x1E0CFBEA0]))
  {
    v19 = 0;
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_27;
LABEL_32:
    operator delete(v61.__r_.__value_.__l.__data_);
    if (v19)
      goto LABEL_28;
LABEL_33:
    v21 = *(_QWORD **)(a1 + 472);
    if (v21)
    {
      v22 = 8;
      goto LABEL_35;
    }
    goto LABEL_36;
  }
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &v61;
  else
    v18 = (std::string *)v61.__r_.__value_.__r.__words[0];
  v19 = memcmp(v18, (const void *)*MEMORY[0x1E0CFBEA0], v17) == 0;
  if (v16 < 0)
    goto LABEL_32;
LABEL_27:
  if (!v19)
    goto LABEL_33;
LABEL_28:
  v20 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v61.__r_.__value_.__l.__data_) = 0;
    _os_log_error_impl(&dword_1BF335000, v20, OS_LOG_TYPE_ERROR, "Falling back to baseband powercycle as bootup failed", (uint8_t *)&v61, 2u);
    v21 = *(_QWORD **)(a1 + 472);
    if (!v21)
      goto LABEL_36;
    goto LABEL_30;
  }
  v21 = *(_QWORD **)(a1 + 472);
  if (v21)
  {
LABEL_30:
    v22 = 9;
LABEL_35:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }
LABEL_36:
  v23 = *a3;
  if (*a3)
  {
    *((_BYTE *)&v61.__r_.__value_.__s + 23) = 0;
    v61.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t, _QWORD, std::string *))(v23 + 16))(v23, 0, &v61);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
  }
  v61.__r_.__value_.__r.__words[0] = 0;
  v24 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v27 = (const void *)v61.__r_.__value_.__r.__words[0];
  if (Mutable)
  {
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)Mutable;
    if (v27)
    {
      CFRelease(v27);
      Mutable = (__CFDictionary *)v61.__r_.__value_.__r.__words[0];
    }
  }
  else
  {
    Mutable = (__CFDictionary *)v61.__r_.__value_.__r.__words[0];
  }
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E0CFB530], (const __CFString **)*MEMORY[0x1E0CFBA60], v24, v26);
  ResetInfo::addToDict(a2, (__CFDictionary **)&v61, v28, v29, v30);
  v31 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v31 || (v32 = *(_QWORD *)(a1 + 120), (v33 = std::__shared_weak_count::lock(v31)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v34 = v33;
  p_shared_weak_owners = (unint64_t *)&v33->__shared_weak_owners_;
  do
    v36 = __ldxr(p_shared_weak_owners);
  while (__stxr(v36 + 1, p_shared_weak_owners));
  v37 = (unint64_t *)&v33->__shared_owners_;
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 - 1, v37));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v34);
  }
  v39 = (uint64_t *)v59;
  v40 = (const void *)*MEMORY[0x1E0CFBD68];
  v41 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  if (v41 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v42 = (void *)v41;
  if (v41 >= 0x17)
  {
    v45 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v41 | 7) != 0x17)
      v45 = v41 | 7;
    v46 = v45 + 1;
    v43 = (void **)operator new(v45 + 1);
    __dst[1] = v42;
    v58 = v46 | 0x8000000000000000;
    __dst[0] = v43;
  }
  else
  {
    HIBYTE(v58) = v41;
    v43 = __dst;
    if (!v41)
    {
      LOBYTE(__dst[0]) = 0;
      v44 = (const void *)v61.__r_.__value_.__r.__words[0];
      if (!v61.__r_.__value_.__r.__words[0])
        goto LABEL_62;
      goto LABEL_60;
    }
  }
  memmove(v43, v40, (size_t)v42);
  *((_BYTE *)v42 + (_QWORD)v43) = 0;
  v44 = (const void *)v61.__r_.__value_.__r.__words[0];
  if (!v61.__r_.__value_.__r.__words[0])
  {
LABEL_62:
    v44 = 0;
    v56 = 0;
    goto LABEL_63;
  }
LABEL_60:
  v47 = CFGetTypeID(v44);
  if (v47 != CFDictionaryGetTypeID())
    goto LABEL_62;
  v56 = v44;
  CFRetain(v44);
LABEL_63:
  v53[0] = MEMORY[0x1E0C809B0];
  v53[1] = 1174405120;
  v53[2] = ___ZN10BootModule14hardReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke;
  v53[3] = &__block_descriptor_tmp_64_0;
  v53[4] = a1;
  v53[5] = v32;
  v54 = v34;
  do
    v48 = __ldxr(p_shared_weak_owners);
  while (__stxr(v48 + 1, p_shared_weak_owners));
  v49 = _Block_copy(v53);
  v55 = v49;
  ABMServer::broadcast(v39, (uint64_t)__dst, &v56, &v55);
  if (v49)
    _Block_release(v49);
  if (v44)
    CFRelease(v44);
  if (SHIBYTE(v58) < 0)
    operator delete(__dst[0]);
  if (v54)
    std::__shared_weak_count::__release_weak(v54);
  std::__shared_weak_count::__release_weak(v34);
  if (v61.__r_.__value_.__r.__words[0])
    CFRelease(v61.__r_.__value_.__l.__data_);
  v50 = (std::__shared_weak_count *)v60;
  if (v60)
  {
    v51 = (unint64_t *)(v60 + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
}

void sub_1BF3ADC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF3ADC24(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF3ADC50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
  {
    operator delete(__p);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule14hardReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v8[5];

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v8[0] = MEMORY[0x1E0C809B0];
        v8[1] = 0x40000000;
        v8[2] = ___ZN10BootModule14hardReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2;
        v8[3] = &__block_descriptor_tmp_63_1;
        v8[4] = v3;
        ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v3 + 120), (uint64_t)v8);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void ___ZN10BootModule14hardReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2(uint64_t a1)
{
  BootModule::boot_sync(*(BootModule **)(a1 + 32));
}

void BootModule::boot_sync(BootModule *this)
{
  unsigned int v2;
  NSObject *v3;
  char *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  capabilities::abs *v9;
  int shouldBoot;
  uint64_t v11;
  NSObject *global_queue;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  uint64_t v19;
  char *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD v36[8];
  std::__shared_weak_count *v37;
  dispatch_object_t object;
  _QWORD aBlock[6];
  std::__shared_weak_count *v40;
  dispatch_group_t group;
  void *v42;
  char *v43;
  __int128 v44;
  uint8_t buf[8];
  _QWORD block[8];
  std::__shared_weak_count *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  __int128 v54;
  uint64_t v55;
  __n128 (*v56)(uint64_t, uint64_t);
  void (*v57)(uint64_t);
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v2 = *((_DWORD *)this + 112) - 2;
  if (v2 <= 6)
  {
    v3 = *((_QWORD *)this + 11);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = off_1E7901098[v2];
      LODWORD(v54) = 136315138;
      *(_QWORD *)((char *)&v54 + 4) = v4;
      _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Bootup request rejected as we are already in %s state", (uint8_t *)&v54, 0xCu);
    }
    return;
  }
  (*(void (**)(BootModule *, uint64_t))(*(_QWORD *)this + 96))(this, 2);
  ++*((_DWORD *)this + 56);
  v6 = *((_QWORD *)this + 15);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  v52 = v6;
  if (!v5 || (v7 = std::__shared_weak_count::lock(v5), (v53 = v7) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v48 = 0;
  v49 = &v48;
  v50 = 0x2000000000;
  v51 = 0;
  v9 = (capabilities::abs *)dispatch_group_create();
  *(_QWORD *)&v54 = 0;
  *((_QWORD *)&v54 + 1) = &v54;
  v55 = 0x4002000000;
  v56 = __Block_byref_object_copy__2;
  v57 = __Block_byref_object_dispose__2;
  v59 = 0;
  v60 = 0;
  v58 = 0;
  shouldBoot = capabilities::abs::shouldBoot(v9);
  v11 = MEMORY[0x1E0C809B0];
  if (shouldBoot)
  {
    global_queue = dispatch_get_global_queue(25, 0);
    block[0] = v11;
    block[1] = 1174405120;
    block[2] = ___ZN10BootModule9boot_syncEv_block_invoke;
    block[3] = &unk_1E7900558;
    block[6] = this;
    block[7] = v6;
    v47 = v8;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    block[4] = &v48;
    block[5] = &v54;
    dispatch_group_async((dispatch_group_t)v9, global_queue, block);
    v15 = v47;
    if (v47)
    {
      v16 = (unint64_t *)&v47->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  else
  {
    if (v9)
    {
      dispatch_retain((dispatch_object_t)v9);
      dispatch_group_enter((dispatch_group_t)v9);
    }
    v18 = *((_QWORD *)this + 11);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF335000, v18, OS_LOG_TYPE_DEFAULT, "#I Faking bootup", buf, 2u);
    }
    v19 = *((_QWORD *)this + 22);
    v20 = (char *)operator new(0x20uLL);
    v43 = v20;
    v44 = xmmword_1BF53F3A0;
    strcpy(v20, "Wait for Ready on Fake Boot");
    aBlock[0] = v11;
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN10BootModule9boot_syncEv_block_invoke_93;
    aBlock[3] = &__block_descriptor_tmp_94;
    aBlock[4] = this;
    aBlock[5] = v6;
    v21 = (unint64_t *)&v8->__shared_owners_;
    v40 = v8;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    group = (dispatch_group_t)v9;
    if (v9)
    {
      dispatch_retain((dispatch_object_t)v9);
      dispatch_group_enter(group);
    }
    v23 = _Block_copy(aBlock);
    v42 = v23;
    ResetDetection::add(v19, (uint64_t)&v43, 0, &v42, -1);
    if (v23)
      _Block_release(v23);
    operator delete(v20);
    *((_BYTE *)v49 + 24) = 1;
    if (group)
    {
      dispatch_group_leave(group);
      if (group)
        dispatch_release(group);
    }
    v24 = v40;
    if (v40)
    {
      v25 = (unint64_t *)&v40->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v9)
    {
      dispatch_group_leave((dispatch_group_t)v9);
      dispatch_release((dispatch_object_t)v9);
    }
  }
  v27 = *((_QWORD *)this + 17);
  v36[0] = v11;
  v36[1] = 1174405120;
  v36[2] = ___ZN10BootModule9boot_syncEv_block_invoke_95;
  v36[3] = &unk_1E7900678;
  v36[6] = this;
  v36[7] = v52;
  v37 = v53;
  if (v53)
  {
    v28 = (unint64_t *)&v53->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v36[4] = &v48;
  object = (dispatch_object_t)v9;
  if (v9)
    dispatch_retain((dispatch_object_t)v9);
  v36[5] = &v54;
  dispatch_group_notify((dispatch_group_t)v9, v27, v36);
  if (object)
    dispatch_release(object);
  v30 = v37;
  if (v37)
  {
    v31 = (unint64_t *)&v37->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
      _Block_object_dispose(&v54, 8);
      if ((SHIBYTE(v60) & 0x80000000) == 0)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  _Block_object_dispose(&v54, 8);
  if (SHIBYTE(v60) < 0)
LABEL_46:
    operator delete(v58);
LABEL_47:
  if (v9)
    dispatch_release((dispatch_object_t)v9);
  _Block_object_dispose(&v48, 8);
  v33 = v53;
  if (v53)
  {
    v34 = (unint64_t *)&v53->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_1BF3AE2E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,dispatch_group_t group)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void BootModule::checkFSSyncStatus_sync(uint64_t a1, void **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const void *v12;
  size_t v13;
  void *v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  xpc_object_t v18;
  void *v19;
  unint64_t v20;
  void *v21;
  _QWORD aBlock[5];
  void *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  const void *v26;
  xpc_object_t v27;
  void *__dst[2];
  unint64_t v29;

  v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v3 || (v5 = *(_QWORD *)(a1 + 120), (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = (const void *)*MEMORY[0x1E0CFBC30];
  v13 = strlen((const char *)*MEMORY[0x1E0CFBC30]);
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v14 = (void *)v13;
  if (v13 >= 0x17)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    v15 = (void **)operator new(v16 + 1);
    __dst[1] = v14;
    v29 = v17 | 0x8000000000000000;
    __dst[0] = v15;
    goto LABEL_16;
  }
  HIBYTE(v29) = v13;
  v15 = __dst;
  if (v13)
LABEL_16:
    memmove(v15, v12, (size_t)v14);
  *((_BYTE *)v14 + (_QWORD)v15) = 0;
  v18 = xpc_null_create();
  v27 = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule22checkFSSyncStatus_syncEN8dispatch5blockIU13block_pointerFvbbEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_65_0;
  aBlock[4] = a1;
  v19 = *a2;
  if (*a2)
    v19 = _Block_copy(v19);
  v23 = v19;
  v24 = v5;
  v25 = v7;
  do
    v20 = __ldxr(p_shared_weak_owners);
  while (__stxr(v20 + 1, p_shared_weak_owners));
  v21 = _Block_copy(aBlock);
  v26 = v21;
  Service::runCommand(a1, (uint64_t)__dst, &v27, &v26);
  if (v21)
    _Block_release(v21);
  xpc_release(v18);
  v27 = 0;
  if (SHIBYTE(v29) < 0)
    operator delete(__dst[0]);
  if (v25)
    std::__shared_weak_count::__release_weak(v25);
  if (v23)
    _Block_release(v23);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF3AE5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *aBlock, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::__shared_weak_count *v25;
  const void *v26;
  void *v27;

  if (v26)
    _Block_release(v26);
  if (a17)
    std::__shared_weak_count::__release_weak(a17);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(v27);
  if (a25 < 0)
  {
    operator delete(__p);
    std::__shared_weak_count::__release_weak(v25);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v25);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule22checkFSSyncStatus_syncEN8dispatch5blockIU13block_pointerFvbbEEE_block_invoke(_QWORD *a1, int a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  xpc_object_t v10;
  const void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  xpc_object_t v18;
  void *v19;
  NSObject *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  v4 = (std::__shared_weak_count *)a1[7];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[6])
        goto LABEL_24;
      v10 = *a3;
      if (*a3)
      {
        xpc_retain(*a3);
        v11 = (const void *)a1[5];
        if (v11)
          goto LABEL_6;
      }
      else
      {
        v10 = xpc_null_create();
        v11 = (const void *)a1[5];
        if (v11)
        {
LABEL_6:
          v12 = _Block_copy(v11);
          v13 = (std::__shared_weak_count *)v7[16];
          if (!v13)
LABEL_29:
            std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_10:
          v14 = v7[15];
          v15 = std::__shared_weak_count::lock(v13);
          if (!v15)
            goto LABEL_29;
          v16 = v15;
          v17 = operator new(0x18uLL);
          *(_DWORD *)v17 = a2;
          v17[1] = v10;
          v18 = xpc_null_create();
          if (v12)
            v19 = _Block_copy(v12);
          else
            v19 = 0;
          v17[2] = v19;
          v20 = v7[17];
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v22 = __ldxr(p_shared_owners);
          while (__stxr(v22 + 1, p_shared_owners));
          v23 = operator new(0x18uLL);
          *v23 = v17;
          v23[1] = v14;
          v23[2] = v16;
          dispatch_async_f(v20, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZNS3_22checkFSSyncStatus_syncENS_5blockIU13block_pointerFvbbEEEEUb5_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISB_NSG_14default_deleteISB_EEEEENUlPvE_8__invokeESL_);
          do
            v24 = __ldaxr(p_shared_owners);
          while (__stlxr(v24 - 1, p_shared_owners));
          if (v24)
          {
            if (!v12)
              goto LABEL_23;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
            if (!v12)
            {
LABEL_23:
              xpc_release(v18);
LABEL_24:
              v25 = (unint64_t *)&v9->__shared_owners_;
              do
                v26 = __ldaxr(v25);
              while (__stlxr(v26 - 1, v25));
              if (!v26)
              {
                ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
                std::__shared_weak_count::__release_weak(v9);
              }
              return;
            }
          }
          _Block_release(v12);
          goto LABEL_23;
        }
      }
      v12 = 0;
      v13 = (std::__shared_weak_count *)v7[16];
      if (!v13)
        goto LABEL_29;
      goto LABEL_10;
    }
  }
}

void *__copy_helper_block_e8_40c44_ZTSN8dispatch5blockIU13block_pointerFvbbEEE48c35_ZTSNSt3__18weak_ptrI10BootModuleEE(_QWORD *a1, _QWORD *a2)
{
  void *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (void *)a2[5];
  if (result)
    result = _Block_copy(result);
  v6 = a2[6];
  v5 = a2[7];
  a1[5] = result;
  a1[6] = v6;
  a1[7] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSN8dispatch5blockIU13block_pointerFvbbEEE48c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  const void *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void BootModule::softReset_sync(uint64_t a1, __int128 *a2, void **a3)
{
  unsigned __int8 v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  void *v19;
  NSObject *v20;
  CommandDriverFactory *v21;
  uint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  void *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  config::hw *v48;
  int v49;
  uint64_t v50;
  void *v51;
  dispatch_object_t object;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  _QWORD aBlock[6];
  std::__shared_weak_count *v60;
  void *v61;
  std::string v62;
  void *v63;
  char v64;
  void *v65;
  char v66;
  void *__p;
  char v68;
  void *v69;
  dispatch_object_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  __int128 v73;

  v6 = atomic_load((unsigned __int8 *)&qword_1ED70FF30);
  if ((v6 & 1) == 0)
  {
    v48 = (config::hw *)__cxa_guard_acquire(&qword_1ED70FF30);
    if ((_DWORD)v48)
    {
      v49 = config::hw::watch(v48);
      v50 = 12;
      if (v49)
        v50 = 18;
      _MergedGlobals_4 = v50;
      __cxa_guard_release(&qword_1ED70FF30);
    }
  }
  v7 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v7 || (v8 = *(_QWORD *)(a1 + 120), (v9 = std::__shared_weak_count::lock(v7)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v10 = v9;
  p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
    v71 = 0;
    v15 = std::__shared_weak_count::lock(v9);
    v72 = v15;
    if (v15)
    {
LABEL_10:
      v71 = v8;
      goto LABEL_13;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v10);
    v71 = 0;
    v15 = std::__shared_weak_count::lock(v10);
    v72 = v15;
    if (v15)
      goto LABEL_10;
  }
  v8 = 0;
LABEL_13:
  v69 = (void *)0xAAAAAAAAAAAAAAAALL;
  v70 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_83;
  aBlock[4] = a1;
  aBlock[5] = v8;
  v60 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = *a3;
  if (*a3)
    v18 = _Block_copy(v18);
  v61 = v18;
  ResetInfo::ResetInfo(&v62, a2);
  v19 = _Block_copy(aBlock);
  v20 = *(NSObject **)(a1 + 136);
  if (v20)
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  v69 = v19;
  v70 = v20;
  v57 = 0xAAAAAAAAAAAAAAAALL;
  v58 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v21 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v22 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v21);
    v23 = v73;
    v73 = 0uLL;
    v24 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v23;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
    if (*((_QWORD *)&v73 + 1))
    {
      v28 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v22 = off_1ED70FD08;
  }
  v30 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  v53 = v22;
  v54 = *(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v31 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v22 + 16))(&v55, v22);
  v57 = 0;
  v58 = 0;
  if (v56)
  {
    v58 = std::__shared_weak_count::lock(v56);
    if (v58)
      v57 = v55;
    if (v56)
      std::__shared_weak_count::__release_weak(v56);
  }
  if (!v30)
    goto LABEL_44;
  v33 = (unint64_t *)&v30->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
    v35 = v57;
    if (!v57)
      goto LABEL_55;
  }
  else
  {
LABEL_44:
    v35 = v57;
    if (!v57)
      goto LABEL_55;
  }
  v36 = *(_QWORD *)(a1 + 472);
  if (v36)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 104))(v36, 5);
  v37 = v69;
  if (v69)
    v37 = _Block_copy(v69);
  v51 = v37;
  object = v70;
  if (v70)
    dispatch_retain(v70);
  (*(void (**)(unint64_t, uint64_t, void **))(*(_QWORD *)v35 + 56))(v35, 8000000000, &v51);
  if (object)
    dispatch_release(object);
  if (v51)
    _Block_release(v51);
LABEL_55:
  v38 = v58;
  if (v58)
  {
    v39 = (unint64_t *)&v58->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v70)
    dispatch_release(v70);
  if (v69)
    _Block_release(v69);
  if (v68 < 0)
  {
    operator delete(__p);
    if ((v66 & 0x80000000) == 0)
    {
LABEL_66:
      if ((v64 & 0x80000000) == 0)
        goto LABEL_67;
      goto LABEL_72;
    }
  }
  else if ((v66 & 0x80000000) == 0)
  {
    goto LABEL_66;
  }
  operator delete(v65);
  if ((v64 & 0x80000000) == 0)
  {
LABEL_67:
    if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_68;
    goto LABEL_73;
  }
LABEL_72:
  operator delete(v63);
  if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_68:
    v41 = v61;
    if (!v61)
      goto LABEL_75;
    goto LABEL_74;
  }
LABEL_73:
  operator delete(v62.__r_.__value_.__l.__data_);
  v41 = v61;
  if (v61)
LABEL_74:
    _Block_release(v41);
LABEL_75:
  v42 = v60;
  if (v60)
  {
    v43 = (unint64_t *)&v60->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = v72;
  if (v72)
  {
    v46 = (unint64_t *)&v72->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  std::__shared_weak_count::__release_weak(v10);
}

void sub_1BF3AED40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ED70FF30);
  _Unwind_Resume(a1);
}

void sub_1BF3AED58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *aBlock)
{
  std::__shared_weak_count *v24;
  void **v25;
  uint64_t v26;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v26 - 96);
  ResetInfo::~ResetInfo(v25);
  if (aBlock)
    _Block_release(aBlock);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v26 - 80);
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke(uint64_t a1, ctu::cf **a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;
  void *v15;
  dispatch_time_t v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  size_t v24;
  uint64_t v25;
  __int128 v26;
  const void *v27;
  size_t v28;
  size_t v29;
  __int128 *p_dst;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  size_t v34;
  size_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[6];
  std::__shared_weak_count *v40;
  void *aBlock;
  std::string v42;
  void *v43;
  char v44;
  void *v45;
  char v46;
  void *__p;
  char v48;
  void *v49;
  char *v50;
  __int128 v51;
  void *v52;
  std::string v53;
  void *v54;
  char v55;
  void *v56;
  char v57;
  void *v58;
  char v59;
  __int128 v60;
  char v61;
  char v62[8];
  _QWORD *v63;
  void *v64[2];
  char v65;
  __int128 v66;
  unint64_t v67;
  __int128 __dst;
  unint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint8_t buf[16];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  v70 = 0uLL;
  v71 = 0;
  v4 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v4 = 0;
  if (!v4)
  {
    v7 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF335000, v7, OS_LOG_TYPE_DEFAULT, "#I Soft reset issued; waiting for reset detection",
        buf,
        2u);
    }
    v8 = *(_QWORD *)(v3 + 176);
    v9 = (char *)operator new(0x20uLL);
    v50 = v9;
    v51 = xmmword_1BF53F3B0;
    strcpy(v9, "Soft Reset Wait for Reset");
    v39[0] = MEMORY[0x1E0C809B0];
    v39[1] = 1174405120;
    v39[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_67;
    v39[3] = &__block_descriptor_tmp_81;
    v11 = *(_QWORD *)(a1 + 40);
    v10 = *(std::__shared_weak_count **)(a1 + 48);
    v39[4] = v3;
    v39[5] = v11;
    v40 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    v14 = *(void **)(a1 + 56);
    if (v14)
      v14 = _Block_copy(v14);
    aBlock = v14;
    ResetInfo::ResetInfo(&v42, (__int128 *)(a1 + 64));
    v15 = _Block_copy(v39);
    v49 = v15;
    v16 = dispatch_time(0, 1000000000 * _MergedGlobals_4);
    ResetDetection::add(v8, (uint64_t)&v50, 1, &v49, v16);
    if (v15)
      _Block_release(v15);
    operator delete(v9);
    if (v48 < 0)
    {
      operator delete(__p);
      if ((v46 & 0x80000000) == 0)
      {
LABEL_20:
        if ((v44 & 0x80000000) == 0)
          goto LABEL_21;
        goto LABEL_26;
      }
    }
    else if ((v46 & 0x80000000) == 0)
    {
      goto LABEL_20;
    }
    operator delete(v45);
    if ((v44 & 0x80000000) == 0)
    {
LABEL_21:
      if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_22;
      goto LABEL_27;
    }
LABEL_26:
    operator delete(v43);
    if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_22:
      v17 = aBlock;
      if (!aBlock)
        goto LABEL_29;
      goto LABEL_28;
    }
LABEL_27:
    operator delete(v42.__r_.__value_.__l.__data_);
    v17 = aBlock;
    if (!aBlock)
    {
LABEL_29:
      v18 = v40;
      if (v40)
      {
        v19 = (unint64_t *)&v40->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
          if ((SHIBYTE(v71) & 0x80000000) == 0)
            return;
          goto LABEL_84;
        }
      }
      goto LABEL_83;
    }
LABEL_28:
    _Block_release(v17);
    goto LABEL_29;
  }
  ctu::cf::show(*a2, a2);
  if (SHIBYTE(v71) < 0)
    operator delete((void *)v70);
  v70 = *(_OWORD *)buf;
  v71 = v73;
  v5 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v21 = &v70;
    if (v71 < 0)
      v21 = (__int128 *)v70;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v21;
    _os_log_error_impl(&dword_1BF335000, v5, OS_LOG_TYPE_ERROR, "Soft reset failed; falling back to hard reset: %{public}s",
      buf,
      0xCu);
    v6 = *(_QWORD *)(a1 + 56);
    if ((SHIBYTE(v71) & 0x80000000) == 0)
      goto LABEL_8;
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 56);
    if ((SHIBYTE(v71) & 0x80000000) == 0)
    {
LABEL_8:
      *(_OWORD *)buf = v70;
      *(_QWORD *)&v73 = v71;
      goto LABEL_39;
    }
  }
  std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v70, *((std::string::size_type *)&v70 + 1));
LABEL_39:
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(v6 + 16))(v6, 3760250880, buf);
  if (SBYTE7(v73) < 0)
  {
    operator delete(*(void **)buf);
    v22 = v3 + 152;
    if ((__int128 *)(v3 + 152) == &v70)
      goto LABEL_54;
  }
  else
  {
    v22 = v3 + 152;
    if ((__int128 *)(v3 + 152) == &v70)
      goto LABEL_54;
  }
  if (*(char *)(v3 + 175) < 0)
  {
    if (v71 >= 0)
      v23 = &v70;
    else
      v23 = (__int128 *)v70;
    if (v71 >= 0)
      v24 = HIBYTE(v71);
    else
      v24 = *((_QWORD *)&v70 + 1);
    std::string::__assign_no_alias<false>((void **)v22, v23, v24);
  }
  else if (v71 < 0)
  {
    std::string::__assign_no_alias<true>((_QWORD *)v22, (void *)v70, *((size_t *)&v70 + 1));
  }
  else
  {
    *(_OWORD *)v22 = v70;
    *(_QWORD *)(v22 + 16) = v71;
  }
LABEL_54:
  v25 = *(_QWORD *)(v3 + 472);
  if (v25)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 104))(v25, 7);
  *(_QWORD *)&v26 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v77 = v26;
  v78 = v26;
  v75 = v26;
  v76 = v26;
  v73 = v26;
  v74 = v26;
  *(_OWORD *)buf = v26;
  v27 = (const void *)*MEMORY[0x1E0CFB590];
  v28 = strlen((const char *)*MEMORY[0x1E0CFB590]);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v29 = v28;
  if (v28 >= 0x17)
  {
    v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v31 = v28 | 7;
    v32 = v31 + 1;
    p_dst = (__int128 *)operator new(v31 + 1);
    *((_QWORD *)&__dst + 1) = v29;
    v69 = v32 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_63;
  }
  HIBYTE(v69) = v28;
  p_dst = &__dst;
  if (v28)
LABEL_63:
    memmove(p_dst, v27, v29);
  *((_BYTE *)p_dst + v29) = 0;
  v33 = (const void *)*MEMORY[0x1E0CFBEA8];
  v34 = strlen((const char *)*MEMORY[0x1E0CFBEA8]);
  if (v34 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v35 = v34;
  if (v34 >= 0x17)
  {
    v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v34 | 7) != 0x17)
      v37 = v34 | 7;
    v38 = v37 + 1;
    v36 = operator new(v37 + 1);
    *((_QWORD *)&v66 + 1) = v35;
    v67 = v38 | 0x8000000000000000;
    *(_QWORD *)&v66 = v36;
    goto LABEL_71;
  }
  HIBYTE(v67) = v34;
  v36 = &v66;
  if (v34)
LABEL_71:
    memmove(v36, v33, v35);
  *((_BYTE *)v36 + v35) = 0;
  Timestamp::Timestamp((Timestamp *)v62);
  Timestamp::asString((uint64_t)v62, 0, 9, v64);
  v61 = 0;
  LOBYTE(v60) = 0;
  ResetInfo::ResetInfo((std::string *)buf, &__dst, &v66, (__int128 *)v22, (uint64_t)v64, 7, &v60);
  if ((v65 & 0x80000000) == 0)
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v62, v63);
    if ((SHIBYTE(v67) & 0x80000000) == 0)
      goto LABEL_74;
LABEL_87:
    operator delete((void *)v66);
    if ((SHIBYTE(v69) & 0x80000000) == 0)
      goto LABEL_75;
    goto LABEL_88;
  }
  operator delete(v64[0]);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v62, v63);
  if (SHIBYTE(v67) < 0)
    goto LABEL_87;
LABEL_74:
  if ((SHIBYTE(v69) & 0x80000000) == 0)
    goto LABEL_75;
LABEL_88:
  operator delete((void *)__dst);
LABEL_75:
  ResetInfo::ResetInfo(&v53, (__int128 *)buf);
  v52 = 0;
  BootModule::handleReset_sync(v3, (uint64_t)&v53, &v52);
  if (v59 < 0)
  {
    operator delete(v58);
    if ((v57 & 0x80000000) == 0)
    {
LABEL_77:
      if ((v55 & 0x80000000) == 0)
        goto LABEL_78;
      goto LABEL_91;
    }
  }
  else if ((v57 & 0x80000000) == 0)
  {
    goto LABEL_77;
  }
  operator delete(v56);
  if ((v55 & 0x80000000) == 0)
  {
LABEL_78:
    if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_79;
    goto LABEL_92;
  }
LABEL_91:
  operator delete(v54);
  if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_79:
    if ((SHIBYTE(v78) & 0x80000000) == 0)
      goto LABEL_80;
    goto LABEL_93;
  }
LABEL_92:
  operator delete(v53.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v78) & 0x80000000) == 0)
  {
LABEL_80:
    if ((SBYTE7(v76) & 0x80000000) == 0)
      goto LABEL_81;
    goto LABEL_94;
  }
LABEL_93:
  operator delete(*((void **)&v77 + 1));
  if ((SBYTE7(v76) & 0x80000000) == 0)
  {
LABEL_81:
    if ((SHIBYTE(v74) & 0x80000000) == 0)
      goto LABEL_82;
    goto LABEL_95;
  }
LABEL_94:
  operator delete((void *)v75);
  if (SHIBYTE(v74) < 0)
  {
LABEL_95:
    operator delete(*((void **)&v73 + 1));
    if (SBYTE7(v73) < 0)
      goto LABEL_96;
LABEL_83:
    if ((SHIBYTE(v71) & 0x80000000) == 0)
      return;
    goto LABEL_84;
  }
LABEL_82:
  if ((SBYTE7(v73) & 0x80000000) == 0)
    goto LABEL_83;
LABEL_96:
  operator delete(*(void **)buf);
  if (SHIBYTE(v71) < 0)
LABEL_84:
    operator delete((void *)v70);
}

void sub_1BF3AF4D4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_67(uint64_t a1, int a2)
{
  uint64_t v3;
  char *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  int IsCarrierBuild;
  _BOOL4 v18;
  void *v19;
  std::string *v20;
  size_t size;
  uint64_t v22;
  __int128 v23;
  const void *v24;
  size_t v25;
  size_t v26;
  __int128 *p_dst;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  size_t v31;
  size_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  _QWORD v38[4];
  void *v39;
  std::string v40;
  void *v41;
  std::string v42;
  void *v43;
  char v44;
  void *v45;
  char v46;
  void *v47;
  char v48;
  void *v49;
  std::string v50;
  void *v51;
  char v52;
  void *v53;
  char v54;
  void *v55;
  char v56;
  __int128 v57;
  char v58;
  char v59[8];
  _QWORD *v60;
  void *v61[2];
  char v62;
  __int128 v63;
  unint64_t v64;
  __int128 __dst;
  unint64_t v66;
  std::string v67;
  _QWORD aBlock[5];
  void *v69;
  std::string v70;
  void *v71;
  char v72;
  void *v73;
  char v74;
  void *__p;
  char v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  void *v79;
  __int128 buf;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  if (!a2)
  {
    v7 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1BF335000, v7, OS_LOG_TYPE_DEFAULT, "#I Reset detection observed for soft reset", (uint8_t *)&buf, 2u);
    }
    usleep(0x249F0u);
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_68;
    aBlock[3] = &__block_descriptor_tmp_76;
    aBlock[4] = v3;
    v8 = *(void **)(a1 + 56);
    if (v8)
      v8 = _Block_copy(v8);
    v69 = v8;
    ResetInfo::ResetInfo(&v70, (__int128 *)(a1 + 64));
    v9 = *(std::__shared_weak_count **)(a1 + 48);
    v77 = *(_QWORD *)(a1 + 40);
    v78 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v12 = _Block_copy(aBlock);
    v79 = v12;
    BootModule::checkFSSyncStatus_sync(v3, &v79);
    if (v12)
      _Block_release(v12);
    v13 = v78;
    if (!v78)
      goto LABEL_24;
    v14 = (unint64_t *)&v78->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if ((v76 & 0x80000000) == 0)
      {
LABEL_25:
        if ((v74 & 0x80000000) == 0)
          goto LABEL_26;
        goto LABEL_48;
      }
    }
    else
    {
LABEL_24:
      if ((v76 & 0x80000000) == 0)
        goto LABEL_25;
    }
    operator delete(__p);
    if ((v74 & 0x80000000) == 0)
    {
LABEL_26:
      if ((v72 & 0x80000000) == 0)
        goto LABEL_27;
      goto LABEL_49;
    }
LABEL_48:
    operator delete(v73);
    if ((v72 & 0x80000000) == 0)
    {
LABEL_27:
      if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_50;
    }
LABEL_49:
    operator delete(v71);
    if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_28:
      v16 = v69;
      if (!v69)
        return;
      goto LABEL_51;
    }
LABEL_50:
    operator delete(v70.__r_.__value_.__l.__data_);
    v16 = v69;
    if (!v69)
      return;
LABEL_51:
    _Block_release(v16);
    return;
  }
  v4 = (char *)operator new(0x38uLL);
  v67.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
  *(_OWORD *)&v67.__r_.__value_.__r.__words[1] = xmmword_1BF53F3C0;
  strcpy(v4, "Soft reset failed; timeout waiting for reset detection");
  v5 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v4;
    _os_log_error_impl(&dword_1BF335000, v5, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
  }
  if (TelephonyUtilIsInternalBuild())
  {
    v6 = *(NSObject **)(v3 + 88);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      goto LABEL_7;
    goto LABEL_6;
  }
  IsCarrierBuild = TelephonyUtilIsCarrierBuild();
  v6 = *(NSObject **)(v3 + 88);
  v18 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (IsCarrierBuild)
  {
    if (!v18)
    {
LABEL_7:
      if ((std::string *)(v3 + 152) != &v67)
      {
        if (*(char *)(v3 + 175) < 0)
        {
          if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v20 = &v67;
          else
            v20 = (std::string *)v67.__r_.__value_.__r.__words[0];
          if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v67.__r_.__value_.__r.__words[2]);
          else
            size = v67.__r_.__value_.__l.__size_;
          std::string::__assign_no_alias<false>((void **)(v3 + 152), v20, size);
        }
        else if ((*((_BYTE *)&v67.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>((_QWORD *)(v3 + 152), v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
        }
        else
        {
          *(std::string *)(v3 + 152) = v67;
        }
      }
      v22 = *(_QWORD *)(a1 + 56);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&buf, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
      }
      else
      {
        buf = *(_OWORD *)&v67.__r_.__value_.__l.__data_;
        *(_QWORD *)&v81 = *((_QWORD *)&v67.__r_.__value_.__l + 2);
      }
      (*(void (**)(uint64_t, uint64_t, __int128 *))(v22 + 16))(v22, 3760250880, &buf);
      if (SBYTE7(v81) < 0)
        operator delete((void *)buf);
      *(_QWORD *)&v23 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v85 = v23;
      v86 = v23;
      v83 = v23;
      v84 = v23;
      v81 = v23;
      v82 = v23;
      buf = v23;
      v24 = (const void *)*MEMORY[0x1E0CFB590];
      v25 = strlen((const char *)*MEMORY[0x1E0CFB590]);
      if (v25 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v26 = v25;
      if (v25 >= 0x17)
      {
        v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v25 | 7) != 0x17)
          v28 = v25 | 7;
        v29 = v28 + 1;
        p_dst = (__int128 *)operator new(v28 + 1);
        *((_QWORD *)&__dst + 1) = v26;
        v66 = v29 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v66) = v25;
        p_dst = &__dst;
        if (!v25)
        {
LABEL_66:
          *((_BYTE *)p_dst + v26) = 0;
          v30 = (const void *)*MEMORY[0x1E0CFBFF0];
          v31 = strlen((const char *)*MEMORY[0x1E0CFBFF0]);
          if (v31 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v32 = v31;
          if (v31 >= 0x17)
          {
            v34 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v31 | 7) != 0x17)
              v34 = v31 | 7;
            v35 = v34 + 1;
            v33 = operator new(v34 + 1);
            *((_QWORD *)&v63 + 1) = v32;
            v64 = v35 | 0x8000000000000000;
            *(_QWORD *)&v63 = v33;
          }
          else
          {
            HIBYTE(v64) = v31;
            v33 = &v63;
            if (!v31)
            {
LABEL_74:
              v33[v32] = 0;
              Timestamp::Timestamp((Timestamp *)v59);
              Timestamp::asString((uint64_t)v59, 0, 9, v61);
              v58 = 0;
              LOBYTE(v57) = 0;
              ResetInfo::ResetInfo((std::string *)&buf, &__dst, &v63, (__int128 *)(v3 + 152), (uint64_t)v61, 7, &v57);
              if (v62 < 0)
              {
                operator delete(v61[0]);
                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v59, v60);
                if ((SHIBYTE(v64) & 0x80000000) == 0)
                {
LABEL_76:
                  if ((SHIBYTE(v66) & 0x80000000) == 0)
                    goto LABEL_77;
LABEL_88:
                  operator delete((void *)__dst);
LABEL_77:
                  ResetInfo::ResetInfo(&v50, &buf);
                  v49 = 0;
                  BootModule::handleReset_sync(v3, (uint64_t)&v50, &v49);
                  if (v56 < 0)
                  {
                    operator delete(v55);
                    if ((v54 & 0x80000000) == 0)
                    {
LABEL_79:
                      if ((v52 & 0x80000000) == 0)
                        goto LABEL_80;
                      goto LABEL_91;
                    }
                  }
                  else if ((v54 & 0x80000000) == 0)
                  {
                    goto LABEL_79;
                  }
                  operator delete(v53);
                  if ((v52 & 0x80000000) == 0)
                  {
LABEL_80:
                    if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_81;
                    goto LABEL_92;
                  }
LABEL_91:
                  operator delete(v51);
                  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_81:
                    if ((SHIBYTE(v86) & 0x80000000) == 0)
                      goto LABEL_82;
                    goto LABEL_93;
                  }
LABEL_92:
                  operator delete(v50.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v86) & 0x80000000) == 0)
                  {
LABEL_82:
                    if ((SBYTE7(v84) & 0x80000000) == 0)
                      goto LABEL_83;
                    goto LABEL_94;
                  }
LABEL_93:
                  operator delete(*((void **)&v85 + 1));
                  if ((SBYTE7(v84) & 0x80000000) == 0)
                  {
LABEL_83:
                    if ((SHIBYTE(v82) & 0x80000000) == 0)
                      goto LABEL_84;
                    goto LABEL_95;
                  }
LABEL_94:
                  operator delete((void *)v83);
                  if ((SHIBYTE(v82) & 0x80000000) == 0)
                  {
LABEL_84:
                    if ((SBYTE7(v81) & 0x80000000) == 0)
                      goto LABEL_113;
LABEL_96:
                    operator delete((void *)buf);
                    goto LABEL_113;
                  }
LABEL_95:
                  operator delete(*((void **)&v81 + 1));
                  if ((SBYTE7(v81) & 0x80000000) == 0)
                    goto LABEL_113;
                  goto LABEL_96;
                }
              }
              else
              {
                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v59, v60);
                if ((SHIBYTE(v64) & 0x80000000) == 0)
                  goto LABEL_76;
              }
              operator delete((void *)v63);
              if ((SHIBYTE(v66) & 0x80000000) == 0)
                goto LABEL_77;
              goto LABEL_88;
            }
          }
          memmove(v33, v30, v32);
          goto LABEL_74;
        }
      }
      memmove(p_dst, v24, v26);
      goto LABEL_66;
    }
LABEL_6:
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, "#I Dumping logs", (uint8_t *)&buf, 2u);
    goto LABEL_7;
  }
  if (v18)
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, "#I Falling back to hard reset", (uint8_t *)&buf, 2u);
  }
  ResetInfo::ResetInfo(&v42, (__int128 *)(a1 + 64));
  v38[0] = MEMORY[0x1E0C809B0];
  v38[1] = 1174405120;
  v38[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_78;
  v38[3] = &__block_descriptor_tmp_79_0;
  v19 = *(void **)(a1 + 56);
  if (v19)
    v19 = _Block_copy(v19);
  v39 = v19;
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v40, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
  else
    v40 = v67;
  v36 = _Block_copy(v38);
  v41 = v36;
  BootModule::hardReset_sync(v3, (uint64_t)&v42, (uint64_t *)&v41);
  if (v36)
    _Block_release(v36);
  if (v48 < 0)
  {
    operator delete(v47);
    if ((v46 & 0x80000000) == 0)
    {
LABEL_102:
      if ((v44 & 0x80000000) == 0)
        goto LABEL_103;
      goto LABEL_109;
    }
  }
  else if ((v46 & 0x80000000) == 0)
  {
    goto LABEL_102;
  }
  operator delete(v45);
  if ((v44 & 0x80000000) == 0)
  {
LABEL_103:
    if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_104;
    goto LABEL_110;
  }
LABEL_109:
  operator delete(v43);
  if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_104:
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_105;
LABEL_111:
    operator delete(v40.__r_.__value_.__l.__data_);
    v37 = v39;
    if (!v39)
      goto LABEL_113;
    goto LABEL_112;
  }
LABEL_110:
  operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_111;
LABEL_105:
  v37 = v39;
  if (v39)
LABEL_112:
    _Block_release(v37);
LABEL_113:
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
}

void sub_1BF3AFDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *__p)
{
  char a68;

  if (aBlock)
    _Block_release(aBlock);
  ResetInfo::~ResetInfo(&a19);
  if (a68 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_68(_QWORD *a1, int a2, int a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  capabilities::ipc *v9;
  uint64_t v10;
  uint64_t v11;
  __CFDictionary *Mutable;
  const __CFAllocator *v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  uint64_t v16;
  uint64_t v17;
  const __CFAllocator *v18;
  uint64_t *v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  const void *v29;
  size_t v30;
  void *v31;
  void **v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  CFTypeID v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  void *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  const void *v48;
  std::string *v49;
  size_t size;
  NSObject *v51;
  uint64_t v52;
  std::string *v53;
  uint64_t v54;
  __int128 v55;
  const void *v56;
  size_t v57;
  size_t v58;
  __int128 *v59;
  uint64_t v60;
  uint64_t v61;
  const void *v62;
  size_t v63;
  size_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[6];
  std::__shared_weak_count *v69;
  const void *v70;
  const void *v71;
  void *__dst[2];
  unint64_t v73;
  void *v74;
  std::string v75;
  void *v76;
  char v77;
  void *v78;
  char v79;
  void *v80;
  char v81;
  __int128 v82;
  char v83;
  char v84[8];
  _QWORD *v85;
  void *__p[2];
  char v87;
  __int128 v88;
  unint64_t v89;
  __int128 v90;
  unint64_t v91;
  std::string v92;
  uint8_t buf[16];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v6 = a1[4];
  v7 = *(NSObject **)(v6 + 88);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = a2;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = a3;
    _os_log_impl(&dword_1BF335000, v7, OS_LOG_TYPE_DEFAULT, "#I Check FS Sync in progress: %d and sync not started: %d", buf, 0xEu);
  }
  if ((a2 & 1) != 0 || a3)
  {
    if (a2)
      v14 = "Baseband shutdown during baseband filesystem sync";
    else
      v14 = "Baseband never started filesystem sync";
    v92.__r_.__value_.__r.__words[2] = 0x13AAAAAA00AAAAAALL;
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = *(_OWORD *)"Soft reset failed: ";
    *(_DWORD *)((char *)&v92.__r_.__value_.__r.__words[1] + 7) = 540697701;
    if (a2)
      v15 = 49;
    else
      v15 = 38;
    std::string::append(&v92, v14, v15);
    if ((std::string *)(v6 + 152) != &v92)
    {
      if (*(char *)(v6 + 175) < 0)
      {
        if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v49 = &v92;
        else
          v49 = (std::string *)v92.__r_.__value_.__r.__words[0];
        if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v92.__r_.__value_.__r.__words[2]);
        else
          size = v92.__r_.__value_.__l.__size_;
        std::string::__assign_no_alias<false>((void **)(v6 + 152), v49, size);
      }
      else if ((*((_BYTE *)&v92.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>((_QWORD *)(v6 + 152), v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
      }
      else
      {
        *(std::string *)(v6 + 152) = v92;
      }
    }
    v51 = *(NSObject **)(v6 + 88);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      v53 = &v92;
      if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v53 = (std::string *)v92.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v53;
      _os_log_error_impl(&dword_1BF335000, v51, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
      v52 = a1[5];
      if ((*((_BYTE *)&v92.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_83;
    }
    else
    {
      v52 = a1[5];
      if ((*((_BYTE *)&v92.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_83:
        *(_OWORD *)buf = *(_OWORD *)&v92.__r_.__value_.__l.__data_;
        *(_QWORD *)&v94 = *((_QWORD *)&v92.__r_.__value_.__l + 2);
        goto LABEL_88;
      }
    }
    std::string::__init_copy_ctor_external((std::string *)buf, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
LABEL_88:
    (*(void (**)(uint64_t, uint64_t, uint8_t *))(v52 + 16))(v52, 3760250880, buf);
    if (SBYTE7(v94) < 0)
    {
      operator delete(*(void **)buf);
      v54 = *(_QWORD *)(v6 + 472);
      if (!v54)
        goto LABEL_93;
    }
    else
    {
      v54 = *(_QWORD *)(v6 + 472);
      if (!v54)
      {
LABEL_93:
        *(_QWORD *)&v55 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v55 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v98 = v55;
        v99 = v55;
        v96 = v55;
        v97 = v55;
        v94 = v55;
        v95 = v55;
        *(_OWORD *)buf = v55;
        v56 = (const void *)*MEMORY[0x1E0CFB590];
        v57 = strlen((const char *)*MEMORY[0x1E0CFB590]);
        if (v57 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v58 = v57;
        if (v57 >= 0x17)
        {
          v60 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v57 | 7) != 0x17)
            v60 = v57 | 7;
          v61 = v60 + 1;
          v59 = (__int128 *)operator new(v60 + 1);
          *((_QWORD *)&v90 + 1) = v58;
          v91 = v61 | 0x8000000000000000;
          *(_QWORD *)&v90 = v59;
        }
        else
        {
          HIBYTE(v91) = v57;
          v59 = &v90;
          if (!v57)
          {
LABEL_101:
            *((_BYTE *)v59 + v58) = 0;
            v62 = (const void *)*MEMORY[0x1E0CFC098];
            v63 = strlen((const char *)*MEMORY[0x1E0CFC098]);
            if (v63 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v64 = v63;
            if (v63 >= 0x17)
            {
              v66 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v63 | 7) != 0x17)
                v66 = v63 | 7;
              v67 = v66 + 1;
              v65 = operator new(v66 + 1);
              *((_QWORD *)&v88 + 1) = v64;
              v89 = v67 | 0x8000000000000000;
              *(_QWORD *)&v88 = v65;
            }
            else
            {
              HIBYTE(v89) = v63;
              v65 = &v88;
              if (!v63)
              {
LABEL_109:
                v65[v64] = 0;
                Timestamp::Timestamp((Timestamp *)v84);
                Timestamp::asString((uint64_t)v84, 0, 9, __p);
                v83 = 0;
                LOBYTE(v82) = 0;
                ResetInfo::ResetInfo((std::string *)buf, &v90, &v88, (__int128 *)(v6 + 152), (uint64_t)__p, 7, &v82);
                if (v87 < 0)
                {
                  operator delete(__p[0]);
                  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v84, v85);
                  if ((SHIBYTE(v89) & 0x80000000) == 0)
                  {
LABEL_111:
                    if ((SHIBYTE(v91) & 0x80000000) == 0)
                      goto LABEL_112;
LABEL_124:
                    operator delete((void *)v90);
LABEL_112:
                    ResetInfo::ResetInfo(&v75, (__int128 *)buf);
                    v74 = 0;
                    BootModule::handleReset_sync(v6, (uint64_t)&v75, &v74);
                    if (v81 < 0)
                    {
                      operator delete(v80);
                      if ((v79 & 0x80000000) == 0)
                      {
LABEL_114:
                        if ((v77 & 0x80000000) == 0)
                          goto LABEL_115;
                        goto LABEL_127;
                      }
                    }
                    else if ((v79 & 0x80000000) == 0)
                    {
                      goto LABEL_114;
                    }
                    operator delete(v78);
                    if ((v77 & 0x80000000) == 0)
                    {
LABEL_115:
                      if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        goto LABEL_116;
                      goto LABEL_128;
                    }
LABEL_127:
                    operator delete(v76);
                    if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_116:
                      if ((SHIBYTE(v99) & 0x80000000) == 0)
                        goto LABEL_117;
                      goto LABEL_129;
                    }
LABEL_128:
                    operator delete(v75.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v99) & 0x80000000) == 0)
                    {
LABEL_117:
                      if ((SBYTE7(v97) & 0x80000000) == 0)
                        goto LABEL_118;
                      goto LABEL_130;
                    }
LABEL_129:
                    operator delete(*((void **)&v98 + 1));
                    if ((SBYTE7(v97) & 0x80000000) == 0)
                    {
LABEL_118:
                      if ((SHIBYTE(v95) & 0x80000000) == 0)
                        goto LABEL_119;
                      goto LABEL_131;
                    }
LABEL_130:
                    operator delete((void *)v96);
                    if ((SHIBYTE(v95) & 0x80000000) == 0)
                    {
LABEL_119:
                      if ((SBYTE7(v94) & 0x80000000) == 0)
                        goto LABEL_120;
                      goto LABEL_132;
                    }
LABEL_131:
                    operator delete(*((void **)&v94 + 1));
                    if ((SBYTE7(v94) & 0x80000000) == 0)
                    {
LABEL_120:
                      if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        return;
                      goto LABEL_133;
                    }
LABEL_132:
                    operator delete(*(void **)buf);
                    if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      return;
LABEL_133:
                    operator delete(v92.__r_.__value_.__l.__data_);
                    return;
                  }
                }
                else
                {
                  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v84, v85);
                  if ((SHIBYTE(v89) & 0x80000000) == 0)
                    goto LABEL_111;
                }
                operator delete((void *)v88);
                if ((SHIBYTE(v91) & 0x80000000) == 0)
                  goto LABEL_112;
                goto LABEL_124;
              }
            }
            memmove(v65, v62, v64);
            goto LABEL_109;
          }
        }
        memmove(v59, v56, v58);
        goto LABEL_101;
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v54 + 104))(v54, 7);
    goto LABEL_93;
  }
  v8 = *(_QWORD *)(v6 + 472);
  if (v8)
  {
    v9 = (capabilities::ipc *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 104))(v8, 6);
    if (capabilities::ipc::supportsPCI(v9))
      (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 472) + 64))(*(_QWORD *)(v6 + 472));
  }
  v10 = a1[5];
  BYTE7(v94) = 0;
  buf[0] = 0;
  (*(void (**)(void))(v10 + 16))();
  if (SBYTE7(v94) < 0)
    operator delete(*(void **)buf);
  *(_QWORD *)&v90 = 0;
  v11 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
    *(_QWORD *)&v90 = Mutable;
  else
    Mutable = (__CFDictionary *)v90;
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E0CFB530], (const __CFString **)*MEMORY[0x1E0CFBA60], v11, v13);
  ResetInfo::addToDict((uint64_t)(a1 + 6), (__CFDictionary **)&v90, v16, v17, v18);
  v92.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  v92.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v19 = (uint64_t *)off_1ED70FA00;
  if (!off_1ED70FA00)
  {
    ABMServer::create_default_global(buf);
    v20 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v21 = (std::__shared_weak_count *)*(&off_1ED70FA00 + 1);
    off_1ED70FA00 = v20;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v25 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v19 = (uint64_t *)off_1ED70FA00;
  }
  v92.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
  v92.__r_.__value_.__l.__size_ = *(&off_1ED70FA00 + 1);
  if (*(&off_1ED70FA00 + 1))
  {
    v27 = (unint64_t *)(*(&off_1ED70FA00 + 1) + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v29 = (const void *)*MEMORY[0x1E0CFBD68];
  v30 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  if (v30 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v31 = (void *)v30;
  if (v30 >= 0x17)
  {
    v34 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v34 = v30 | 7;
    v35 = v34 + 1;
    v32 = (void **)operator new(v34 + 1);
    __dst[1] = v31;
    v73 = v35 | 0x8000000000000000;
    __dst[0] = v32;
LABEL_46:
    memmove(v32, v29, (size_t)v31);
    *((_BYTE *)v31 + (_QWORD)v32) = 0;
    v33 = (const void *)v90;
    if (!(_QWORD)v90)
      goto LABEL_49;
    goto LABEL_47;
  }
  HIBYTE(v73) = v30;
  v32 = __dst;
  if (v30)
    goto LABEL_46;
  LOBYTE(__dst[0]) = 0;
  v33 = (const void *)v90;
  if (!(_QWORD)v90)
    goto LABEL_49;
LABEL_47:
  v36 = CFGetTypeID(v33);
  if (v36 == CFDictionaryGetTypeID())
  {
    v71 = v33;
    CFRetain(v33);
    goto LABEL_50;
  }
LABEL_49:
  v33 = 0;
  v71 = 0;
LABEL_50:
  v68[0] = MEMORY[0x1E0C809B0];
  v68[1] = 1174405120;
  v68[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_72;
  v68[3] = &__block_descriptor_tmp_74;
  v38 = a1[20];
  v37 = (std::__shared_weak_count *)a1[21];
  v68[4] = v6;
  v68[5] = v38;
  v69 = v37;
  if (v37)
  {
    v39 = (unint64_t *)&v37->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  v41 = _Block_copy(v68);
  v70 = v41;
  ABMServer::broadcast(v19, (uint64_t)__dst, &v71, &v70);
  if (v41)
    _Block_release(v41);
  if (v33)
    CFRelease(v33);
  if (SHIBYTE(v73) < 0)
    operator delete(__dst[0]);
  v42 = v69;
  if (!v69)
    goto LABEL_63;
  v43 = (unint64_t *)&v69->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
    v45 = (std::__shared_weak_count *)v92.__r_.__value_.__l.__size_;
    if (!v92.__r_.__value_.__l.__size_)
      goto LABEL_67;
  }
  else
  {
LABEL_63:
    v45 = (std::__shared_weak_count *)v92.__r_.__value_.__l.__size_;
    if (!v92.__r_.__value_.__l.__size_)
      goto LABEL_67;
  }
  v46 = (unint64_t *)&v45->__shared_owners_;
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
    v48 = (const void *)v90;
    if ((_QWORD)v90)
      goto LABEL_68;
    return;
  }
LABEL_67:
  v48 = (const void *)v90;
  if ((_QWORD)v90)
LABEL_68:
    CFRelease(v48);
}

void sub_1BF3B0830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_72(uint64_t a1)
{
  uint64_t v1;
  _QWORD v2[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 0x40000000;
  v2[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2;
  v2[3] = &__block_descriptor_tmp_73_0;
  v2[4] = v1;
  ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v1 + 120), (uint64_t)v2);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2(uint64_t a1)
{
  BootModule::boot_sync(*(BootModule **)(a1 + 32));
}

uint64_t __copy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void __copy_helper_block_e8_40c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE48c15_ZTSK9ResetInfo160c38_ZTSNSt3__110shared_ptrI10BootModuleEE(std::string *a1, uint64_t a2)
{
  void *v4;
  std::string::size_type v5;
  unint64_t *v6;
  unint64_t v7;

  v4 = *(void **)(a2 + 40);
  if (v4)
    v4 = _Block_copy(v4);
  a1[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v4;
  ResetInfo::ResetInfo(a1 + 2, (__int128 *)(a2 + 48));
  v5 = *(_QWORD *)(a2 + 168);
  a1[6].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 160);
  a1[7].__r_.__value_.__r.__words[0] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
}

void sub_1BF3B0B0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 40);
  if (v3)
    _Block_release(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE48c15_ZTSK9ResetInfo160c38_ZTSNSt3__110shared_ptrI10BootModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  const void *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 168);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 159) & 0x80000000) == 0)
    {
LABEL_6:
      if ((*(char *)(a1 + 119) & 0x80000000) == 0)
        goto LABEL_7;
      goto LABEL_13;
    }
  }
  else
  {
LABEL_5:
    if ((*(char *)(a1 + 159) & 0x80000000) == 0)
      goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 136));
  if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
LABEL_7:
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_9;
LABEL_15:
    operator delete(*(void **)(a1 + 48));
    v5 = *(const void **)(a1 + 40);
    if (!v5)
      return;
    goto LABEL_16;
  }
LABEL_14:
  operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_15;
LABEL_9:
  v5 = *(const void **)(a1 + 40);
  if (v5)
LABEL_16:
    _Block_release(v5);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_78(uint64_t a1)
{
  uint64_t v1;
  std::string __p;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 63) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
  else
    __p = *(std::string *)(a1 + 40);
  (*(void (**)(uint64_t, uint64_t, std::string *))(v1 + 16))(v1, 3760250880, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF3B0C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  std::string *v5;
  __int128 v6;

  v4 = *(void **)(a2 + 32);
  if (v4)
    v4 = _Block_copy(v4);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1BF3B0D00(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 32);
  if (v3)
    _Block_release(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  const void *v2;

  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    v2 = *(const void **)(a1 + 32);
    if (!v2)
      return;
    goto LABEL_5;
  }
  v2 = *(const void **)(a1 + 32);
  if (v2)
LABEL_5:
    _Block_release(v2);
}

void __copy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE56c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE64c15_ZTSK9ResetInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;

  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(void **)(a2 + 56);
  if (v7)
    v7 = _Block_copy(v7);
  *(_QWORD *)(a1 + 56) = v7;
  ResetInfo::ResetInfo((std::string *)(a1 + 64), (__int128 *)(a2 + 64));
}

void sub_1BF3B0DD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  const void *v4;

  v4 = *(const void **)(v2 + 56);
  if (v4)
    _Block_release(v4);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE56c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE64c15_ZTSK9ResetInfo(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (*(char *)(a1 + 175) < 0)
  {
    operator delete(*(void **)(a1 + 152));
    if ((*(char *)(a1 + 135) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 111) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 112));
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_5;
LABEL_10:
    operator delete(*(void **)(a1 + 64));
    v2 = *(const void **)(a1 + 56);
    if (!v2)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_9:
  operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    goto LABEL_10;
LABEL_5:
  v2 = *(const void **)(a1 + 56);
  if (v2)
LABEL_11:
    _Block_release(v2);
LABEL_12:
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void BootModule::shutdown_sync(uint64_t a1, _QWORD *a2)
{
  void (**v3)(void *, _QWORD, std::string *);
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void (**v10)(void *, _QWORD, std::string *);
  void *v11;
  NSObject *v12;
  CommandDriverFactory *v13;
  uint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *size;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  NSObject *v28;
  void *v29;
  NSObject *v30;
  void (**v31)(void *, _QWORD, std::string *);
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  void *v42;
  dispatch_object_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  _QWORD aBlock[7];
  std::__shared_weak_count *v51;
  void *v52;
  void *v53;
  dispatch_object_t object;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  __n128 (*v60)(uint64_t, uint64_t);
  void (*v61)(uint64_t);
  std::string v62;
  std::string buf;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v57 = 0;
  v58 = &v57;
  v59 = 0x4002000000;
  v60 = __Block_byref_object_copy__2;
  v61 = __Block_byref_object_dispose__2;
  memset(&v62, 0, sizeof(v62));
  if (*(_DWORD *)(a1 + 448) == 8)
  {
    std::string::__assign_external(&v62, "BootModule already in shutdown state", 0x24uLL);
    v3 = (void (**)(void *, _QWORD, std::string *))*a2;
    if (*((char *)v58 + 63) < 0)
      std::string::__init_copy_ctor_external(&buf, (const std::string::value_type *)v58[5], v58[6]);
    else
      buf = *(std::string *)(v58 + 5);
    v3[2](v3, 0, &buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf.__r_.__value_.__l.__data_);
      _Block_object_dispose(&v57, 8);
      if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      goto LABEL_81;
    }
    goto LABEL_80;
  }
  v6 = *(_QWORD *)(a1 + 120);
  v5 = *(std::__shared_weak_count **)(a1 + 128);
  v55 = v6;
  if (!v5 || (v7 = std::__shared_weak_count::lock(v5), (v56 = v7) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v53 = (void *)0xAAAAAAAAAAAAAAAALL;
  object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke;
  aBlock[3] = &unk_1E7900520;
  aBlock[5] = a1;
  aBlock[6] = v6;
  v51 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  aBlock[4] = &v57;
  v10 = (void (**)(void *, _QWORD, std::string *))*a2;
  if (*a2)
    v10 = (void (**)(void *, _QWORD, std::string *))_Block_copy(v10);
  v52 = v10;
  v11 = _Block_copy(aBlock);
  v12 = *(NSObject **)(a1 + 136);
  if (v12)
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  v53 = v11;
  object = v12;
  v48 = 0xAAAAAAAAAAAAAAAALL;
  v49 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v13 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v14 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v13);
    v15 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
    v16 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v15;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    if (buf.__r_.__value_.__l.__size_)
    {
      v20 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v14 = off_1ED70FD08;
  }
  v22 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  v44 = v14;
  v45 = *(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v23 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v14 + 16))(&v46, v14);
  v48 = 0;
  v49 = 0;
  if (v47)
  {
    v49 = std::__shared_weak_count::lock(v47);
    if (v49)
      v48 = v46;
    if (v47)
      std::__shared_weak_count::__release_weak(v47);
  }
  if (!v22)
    goto LABEL_36;
  v25 = (unint64_t *)&v22->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    v27 = v48;
    if (!v48)
      goto LABEL_53;
  }
  else
  {
LABEL_36:
    v27 = v48;
    if (!v48)
      goto LABEL_53;
  }
  if (*(_BYTE *)(a1 + 192))
  {
    v28 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = 10;
      _os_log_impl(&dword_1BF335000, v28, OS_LOG_TYPE_DEFAULT, "#I Poweroff baseband requested with timeout %llu sec", (uint8_t *)&buf, 0xCu);
    }
    v29 = v53;
    if (v53)
      v29 = _Block_copy(v53);
    v42 = v29;
    v43 = object;
    if (object)
      dispatch_retain(object);
    (*(void (**)(unint64_t, uint64_t, void **))(*(_QWORD *)v27 + 64))(v27, 10000000000, &v42);
    if (v43)
      dispatch_release(v43);
    if (v42)
      _Block_release(v42);
    goto LABEL_61;
  }
LABEL_53:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, 8);
  if (*(_QWORD *)(a1 + 472))
  {
    std::string::__assign_external((std::string *)(v58 + 5), "Transport clients are not started yet", 0x25uLL);
    v30 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v41 = v58 + 5;
      if (*((char *)v58 + 63) < 0)
        v41 = (_QWORD *)*v41;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v41;
      _os_log_error_impl(&dword_1BF335000, v30, OS_LOG_TYPE_ERROR, "Poweroff baseband request skipped (powercycle anyway); Error: %s",
        (uint8_t *)&buf,
        0xCu);
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 472) + 72))(*(_QWORD *)(a1 + 472));
  }
  v31 = (void (**)(void *, _QWORD, std::string *))*a2;
  if (*((char *)v58 + 63) < 0)
    std::string::__init_copy_ctor_external(&buf, (const std::string::value_type *)v58[5], v58[6]);
  else
    buf = *(std::string *)(v58 + 5);
  v31[2](v31, 3760250880, &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
LABEL_61:
  v32 = v49;
  if (v49)
  {
    v33 = (unint64_t *)&v49->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (object)
    dispatch_release(object);
  if (v53)
    _Block_release(v53);
  if (v52)
    _Block_release(v52);
  v35 = v51;
  if (!v51)
    goto LABEL_76;
  v36 = (unint64_t *)&v51->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
    v38 = v56;
    if (!v56)
      goto LABEL_80;
  }
  else
  {
LABEL_76:
    v38 = v56;
    if (!v56)
      goto LABEL_80;
  }
  v39 = (unint64_t *)&v38->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (v40)
  {
LABEL_80:
    _Block_object_dispose(&v57, 8);
    if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_81;
  }
  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
  std::__shared_weak_count::__release_weak(v38);
  _Block_object_dispose(&v57, 8);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
LABEL_81:
    operator delete(v62.__r_.__value_.__l.__data_);
}

void sub_1BF3B14B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *aBlock,char a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a27);
  if (aBlock)
    _Block_release(aBlock);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v29);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  _Block_object_dispose((const void *)(v30 - 160), 8);
  if (*(char *)(v30 - 97) < 0)
    operator delete(*(void **)(v30 - 120));
  _Unwind_Resume(a1);
}

void ___ZN10BootModule13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke(_QWORD *a1, ctu::cf **a2)
{
  _QWORD *v3;
  uint64_t (*v4)(uint64_t);
  const void *v6;
  uint64_t v7;
  void **v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  char *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  dispatch_time_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD aBlock[7];
  std::__shared_weak_count *v30;
  void *v31;
  void *v32;
  char *v33;
  __int128 v34;
  std::string buf;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a1[5];
  if (*a2)
    v4 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  else
    v4 = 0;
  if (v4)
  {
    (*(void (**)(_QWORD, uint64_t))(*v3 + 96))(a1[5], 8);
    ctu::cf::show(*a2, v6);
    v7 = *(_QWORD *)(a1[4] + 8);
    v8 = (void **)(v7 + 40);
    if (*(char *)(v7 + 63) < 0)
      operator delete(*v8);
    *(std::string *)v8 = buf;
    v9 = v3[11];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v27 = *(_QWORD *)(a1[4] + 8);
      v28 = (_QWORD *)(v27 + 40);
      if (*(char *)(v27 + 63) < 0)
        v28 = (_QWORD *)*v28;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v28;
      _os_log_error_impl(&dword_1BF335000, v9, OS_LOG_TYPE_ERROR, "#I Poweroff baseband request failed; Error: %{public}s",
        (uint8_t *)&buf,
        0xCu);
      v10 = v3[59];
      if (!v10)
        goto LABEL_10;
    }
    else
    {
      v10 = v3[59];
      if (!v10)
      {
LABEL_10:
        v11 = *(_QWORD *)(a1[4] + 8);
        v12 = a1[8];
        if (*(char *)(v11 + 63) < 0)
          std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v11 + 40), *(_QWORD *)(v11 + 48));
        else
          buf = *(std::string *)(v11 + 40);
        (*(void (**)(uint64_t, uint64_t, std::string *))(v12 + 16))(v12, 3760250880, &buf);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        return;
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10);
    goto LABEL_10;
  }
  v13 = v3[11];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1BF335000, v13, OS_LOG_TYPE_DEFAULT, "#I Poweroff baseband request delivered; waiting for reset detection",
      (uint8_t *)&buf,
      2u);
  }
  v14 = v3[22];
  v15 = (char *)operator new(0x28uLL);
  v33 = v15;
  v34 = xmmword_1BF53F3D0;
  strcpy(v15, "Poweroff: Wait for reset detection");
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke_86;
  aBlock[3] = &unk_1E79004E8;
  v17 = a1[6];
  v16 = (std::__shared_weak_count *)a1[7];
  aBlock[5] = v3;
  aBlock[6] = v17;
  v30 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v20 = (void *)a1[8];
  if (v20)
    v20 = _Block_copy(v20);
  v21 = a1[4];
  v31 = v20;
  aBlock[4] = v21;
  v22 = _Block_copy(aBlock);
  v32 = v22;
  v23 = dispatch_time(0, 10000000000);
  ResetDetection::add(v14, (uint64_t)&v33, 1, &v32, v23);
  if (v22)
    _Block_release(v22);
  operator delete(v15);
  if (v31)
    _Block_release(v31);
  v24 = v30;
  if (v30)
  {
    v25 = (unint64_t *)&v30->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_1BF3B18D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN10BootModule13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke_86(_QWORD *a1, int a2)
{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  std::string __p;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)a1[5];
  (*(void (**)(_QWORD *, uint64_t))(*v4 + 96))(v4, 8);
  if (a2)
  {
    v5 = (char *)operator new(0x30uLL);
    strcpy(v5, "Poweroff: Timeout waiting for reset detection");
    v6 = *(_QWORD *)(a1[4] + 8);
    if (*(char *)(v6 + 63) < 0)
      operator delete(*(void **)(v6 + 40));
    *(_QWORD *)(v6 + 40) = v5;
    *(_OWORD *)(v6 + 48) = xmmword_1BF53F3E0;
    v7 = v4[11];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v13 = *(_QWORD *)(a1[4] + 8);
      v14 = (_QWORD *)(v13 + 40);
      if (*(char *)(v13 + 63) < 0)
        v14 = (_QWORD *)*v14;
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v14;
      _os_log_error_impl(&dword_1BF335000, v7, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&__p, 0xCu);
      v8 = *(_QWORD *)(a1[4] + 8);
      v9 = a1[8];
      if ((*(char *)(v8 + 63) & 0x80000000) == 0)
        goto LABEL_6;
    }
    else
    {
      v8 = *(_QWORD *)(a1[4] + 8);
      v9 = a1[8];
      if ((*(char *)(v8 + 63) & 0x80000000) == 0)
      {
LABEL_6:
        __p = *(std::string *)(v8 + 40);
LABEL_17:
        (*(void (**)(uint64_t, uint64_t, std::string *))(v9 + 16))(v9, 3760250883, &__p);
        goto LABEL_18;
      }
    }
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v8 + 40), *(_QWORD *)(v8 + 48));
    goto LABEL_17;
  }
  v10 = v4[11];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1BF335000, v10, OS_LOG_TYPE_DEFAULT, "#I Poweroff baseband success", (uint8_t *)&__p, 2u);
  }
  v11 = *(_QWORD *)(a1[4] + 8);
  v12 = a1[8];
  if (*(char *)(v11 + 63) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v11 + 40), *(_QWORD *)(v11 + 48));
  else
    __p = *(std::string *)(v11 + 40);
  (*(void (**)(uint64_t, _QWORD, std::string *))(v12 + 16))(v12, 0, &__p);
LABEL_18:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    result = v4[59];
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  }
  result = v4[59];
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  return result;
}

void sub_1BF3B1BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_48c38_ZTSNSt3__110shared_ptrI10BootModuleEE64c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[7];
  a1[6] = a2[6];
  a1[7] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[8];
  if (result)
    result = _Block_copy(result);
  a1[8] = result;
  return result;
}

void __destroy_helper_block_e8_48c38_ZTSNSt3__110shared_ptrI10BootModuleEE64c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(const void **)(a1 + 64);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ___ZN10BootModule9boot_syncEv_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD *v7;
  const char *v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = a1[6];
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = *(_QWORD *)(v2 + 472) != 0;
  if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24)
    || (*(_BYTE *)(v2 + 229) = 1, v3 = *(NSObject **)(v2 + 88), !os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)))
  {
    v4 = *(_QWORD *)(a1[4] + 8);
    if (*(_BYTE *)(v4 + 24))
      goto LABEL_4;
LABEL_11:
    *(_BYTE *)(v4 + 24) = 0;
    if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
      goto LABEL_5;
    goto LABEL_12;
  }
  LOWORD(v11) = 0;
  _os_log_error_impl(&dword_1BF335000, v3, OS_LOG_TYPE_ERROR, "Boot controller object has not been created!", (uint8_t *)&v11, 2u);
  v4 = *(_QWORD *)(a1[4] + 8);
  if (!*(_BYTE *)(v4 + 24))
    goto LABEL_11;
LABEL_4:
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 472)
                                                                                           + 48))(*(_QWORD *)(v2 + 472), *(_QWORD *)(a1[5] + 8) + 40);
  if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
LABEL_5:
    *(_QWORD *)(v2 + 232) = TelephonyUtilSystemMachTime();
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 472)
                                                                                             + 56))(*(_QWORD *)(v2 + 472), *(_QWORD *)(a1[5] + 8) + 40);
    if (!*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
    {
      v5 = *(NSObject **)(v2 + 88);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v6 = *(_QWORD *)(a1[5] + 8);
        v7 = (_QWORD *)(v6 + 40);
        if (*(char *)(v6 + 63) < 0)
          v7 = (_QWORD *)*v7;
        v11 = 136315138;
        v12 = v7;
        v8 = "Failed on booting!: Reason: %s";
LABEL_17:
        _os_log_error_impl(&dword_1BF335000, v5, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v11, 0xCu);
        return;
      }
    }
    return;
  }
LABEL_12:
  *(_BYTE *)(v2 + 229) = 1;
  v5 = *(NSObject **)(v2 + 88);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v9 = *(_QWORD *)(a1[5] + 8);
    v10 = (_QWORD *)(v9 + 40);
    if (*(char *)(v9 + 63) < 0)
      v10 = (_QWORD *)*v10;
    v11 = 136315138;
    v12 = v10;
    v8 = "Failed on preparation for booting!: Reason: %s";
    goto LABEL_17;
  }
}

uint64_t __copy_helper_block_e8_56c38_ZTSNSt3__110shared_ptrI10BootModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 64) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_56c38_ZTSNSt3__110shared_ptrI10BootModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 64);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ___ZN10BootModule9boot_syncEv_block_invoke_93(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1BF335000, v1, OS_LOG_TYPE_DEFAULT, "#I Recovery detected", v2, 2u);
  }
}

void __copy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE56c30_ZTSN8dispatch13group_sessionE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  NSObject *v6;
  NSObject *v7;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a2[7];
  a1[7] = v6;
  if (v6)
  {
    dispatch_retain(v6);
    v7 = a1[7];
    if (v7)
      dispatch_group_enter(v7);
  }
}

void __destroy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE56c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 56);
    if (v3)
      dispatch_release(v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void ___ZN10BootModule9boot_syncEv_block_invoke_95(_QWORD *a1)
{
  _QWORD *v1;
  NSObject *v3;
  uint64_t v4;
  __CFDictionary *Mutable;
  const __CFAllocator *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  const void *v15;
  size_t v16;
  void *v17;
  void **v18;
  const void *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  CFTypeID v23;
  NSObject *v24;
  NSObject *v25;
  unint64_t v26;
  _QWORD v27[6];
  _QWORD block[6];
  std::__shared_weak_count *v29;
  void *aBlock;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v33;
  NSObject *v34;
  os_activity_scope_state_s state;

  v1 = (_QWORD *)a1[6];
  if ((*((_DWORD *)v1 + 112) - 7) < 2)
    return;
  if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
    v34 = _os_activity_create(&dword_1BF335000, "Baseband state: booted", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
    state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
    os_activity_scope_enter(v34, &state);
    os_activity_scope_leave(&state);
    v3 = v1[11];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(state.opaque[0]) = 0;
      _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Baseband bootup succeeded", (uint8_t *)&state, 2u);
    }
    (*(void (**)(_QWORD *, uint64_t))(*v1 + 96))(v1, 3);
    v1[30] = TelephonyUtilSystemMachTime();
    state.opaque[0] = 0;
    v4 = *MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
      state.opaque[0] = (uint64_t)Mutable;
    ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E0CFB530], (const __CFString **)*MEMORY[0x1E0CFB7F0], v4, v6);
    v7 = (std::__shared_weak_count *)v1[16];
    if (!v7 || (v8 = v1[15], (v9 = std::__shared_weak_count::lock(v7)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v10 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    BootModule::reportStatisticsBootUpTime_sync((BootModule *)v1);
    v15 = (const void *)*MEMORY[0x1E0CFBD68];
    v16 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
    if (v16 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v17 = (void *)v16;
    if (v16 >= 0x17)
    {
      v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v21 = v16 | 7;
      v22 = v21 + 1;
      v18 = (void **)operator new(v21 + 1);
      __dst[1] = v17;
      v33 = v22 | 0x8000000000000000;
      __dst[0] = v18;
    }
    else
    {
      HIBYTE(v33) = v16;
      v18 = __dst;
      if (!v16)
      {
        LOBYTE(__dst[0]) = 0;
        v19 = (const void *)state.opaque[0];
        if (!state.opaque[0])
          goto LABEL_29;
LABEL_27:
        v23 = CFGetTypeID(v19);
        if (v23 == CFDictionaryGetTypeID())
        {
          cf = v19;
          CFRetain(v19);
LABEL_30:
          aBlock = 0;
          Service::broadcastEvent((uint64_t)v1, (uint64_t)__dst, &cf, (const void **)&aBlock);
          if (aBlock)
            _Block_release(aBlock);
          if (cf)
            CFRelease(cf);
          if (SHIBYTE(v33) < 0)
            operator delete(__dst[0]);
          v24 = a1[9];
          v25 = v1[17];
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 1174405120;
          block[2] = ___ZN10BootModule9boot_syncEv_block_invoke_96;
          block[3] = &__block_descriptor_tmp_102;
          block[4] = v1;
          block[5] = v8;
          v29 = v10;
          do
            v26 = __ldxr(p_shared_weak_owners);
          while (__stxr(v26 + 1, p_shared_weak_owners));
          dispatch_group_notify(v24, v25, block);
          if (v29)
            std::__shared_weak_count::__release_weak(v29);
          std::__shared_weak_count::__release_weak(v10);
          if (v19)
            CFRelease(v19);
          if (v34)
            os_release(v34);
          return;
        }
LABEL_29:
        cf = 0;
        goto LABEL_30;
      }
    }
    memmove(v18, v15, (size_t)v17);
    *((_BYTE *)v17 + (_QWORD)v18) = 0;
    v19 = (const void *)state.opaque[0];
    if (!state.opaque[0])
      goto LABEL_29;
    goto LABEL_27;
  }
  v20 = v1[11];
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    LOWORD(state.opaque[0]) = 0;
    _os_log_error_impl(&dword_1BF335000, v20, OS_LOG_TYPE_ERROR, "Baseband bootup failed", (uint8_t *)&state, 2u);
  }
  (*(void (**)(_QWORD *, uint64_t))(*v1 + 96))(v1, 5);
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 0x40000000;
  v27[2] = ___ZN10BootModule9boot_syncEv_block_invoke_103;
  v27[3] = &unk_1E7900650;
  v27[4] = a1[5];
  v27[5] = v1;
  ctu::SharedSynchronizable<BootModule>::execute_wrapped(v1 + 15, (uint64_t)v27);
}

void sub_1BF3B2478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *aBlock,const void *a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::__shared_weak_count *v30;
  uint64_t v31;

  if (aBlock)
    _Block_release(aBlock);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a24);
  if (a30 < 0)
    operator delete(__p);
  std::__shared_weak_count::__release_weak(v30);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v31 - 96));
  ctu::os::scoped_activity::~scoped_activity((void **)(v31 - 104));
  _Unwind_Resume(a1);
}

void BootModule::reportStatisticsBootUpTime_sync(BootModule *this)
{
  NSObject *v2;
  xpc_object_t v3;
  uint64_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  time_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  const void *v17;
  size_t v18;
  size_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  xpc_object_t object;
  uint8_t buf[8];
  size_t v26;
  unint64_t v27;

  v2 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Submitting Stats of bootup time", buf, 2u);
  }
  v3 = xpc_dictionary_create(0, 0, 0);
  v4 = MEMORY[0x1E0C812F8];
  if (v3 || (v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v3) == v4)
    {
      xpc_retain(v3);
      v5 = v3;
    }
    else
    {
      v5 = xpc_null_create();
    }
  }
  else
  {
    v5 = xpc_null_create();
    v3 = 0;
  }
  xpc_release(v3);
  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6 || (v6 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v6) == v4)
    {
      xpc_retain(v6);
      v7 = v6;
    }
    else
    {
      v7 = xpc_null_create();
    }
  }
  else
  {
    v7 = xpc_null_create();
    v6 = 0;
  }
  xpc_release(v6);
  v8 = time(0);
  v9 = xpc_int64_create(v8);
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E0CFBD90], v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v11 = xpc_string_create((const char *)*MEMORY[0x1E0CFC240]);
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0CFB020], v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  v13 = xpc_int64_create(0);
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0CFB0E8], v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  if (v7)
  {
    xpc_retain(v7);
    v15 = v7;
  }
  else
  {
    v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0CFB018], v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v17 = (const void *)*MEMORY[0x1E0CFB5E0];
  v18 = strlen((const char *)*MEMORY[0x1E0CFB5E0]);
  if (v18 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v20 = operator new(v21 + 1);
    v26 = v19;
    v27 = v22 | 0x8000000000000000;
    *(_QWORD *)buf = v20;
LABEL_32:
    memmove(v20, v17, v19);
    *((_BYTE *)v20 + v19) = 0;
    object = v5;
    if (v5)
      goto LABEL_28;
    goto LABEL_33;
  }
  HIBYTE(v27) = v18;
  v20 = buf;
  if (v18)
    goto LABEL_32;
  buf[0] = 0;
  object = v5;
  if (v5)
  {
LABEL_28:
    xpc_retain(v5);
    goto LABEL_34;
  }
LABEL_33:
  object = xpc_null_create();
LABEL_34:
  v23 = 0;
  Service::runCommand((uint64_t)this, (uint64_t)buf, &object, &v23);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(v27) < 0)
    operator delete(*(void **)buf);
  xpc_release(v7);
  xpc_release(v5);
}

void sub_1BF3B2894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;

  xpc_release(object);
  if (a16 < 0)
    operator delete(__p);
  xpc_release(v17);
  xpc_release(v16);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule9boot_syncEv_block_invoke_96(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  void *v9;
  _QWORD aBlock[6];
  std::__shared_weak_count *v11;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = a1[4];
  v3 = *(_QWORD *)(v2 + 176);
  v4 = (char *)operator new(0x19uLL);
  v13 = v4;
  v14 = xmmword_1BF53F3F0;
  strcpy(v4, "Baseband Recovered Gate");
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule9boot_syncEv_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_101;
  v6 = a1[5];
  v5 = (std::__shared_weak_count *)a1[6];
  aBlock[4] = v2;
  aBlock[5] = v6;
  v11 = v5;
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  v9 = _Block_copy(aBlock);
  v12 = v9;
  ResetDetection::add(v3, (uint64_t)&v13, 0, &v12, -1);
  if (v9)
    _Block_release(v9);
  operator delete(v4);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
}

void sub_1BF3B2A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  void *v16;
  const void *v17;

  if (v17)
    _Block_release(v17);
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  operator delete(v16);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule9boot_syncEv_block_invoke_2(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  BootModule *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  char *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  void *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD aBlock[6];
  std::__shared_weak_count *v16;
  void *v17;
  char *v18;
  __int128 v19;
  std::__shared_weak_count *v21;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (BootModule *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v21 = v4;
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        BootModule::bbResetFlag(v3, 0);
        v6 = *((_QWORD *)v3 + 22);
        v7 = (char *)operator new(0x19uLL);
        v18 = v7;
        v19 = xmmword_1BF53F3F0;
        strcpy(v7, "Baseband Crash Recovery");
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZN10BootModule9boot_syncEv_block_invoke_3;
        aBlock[3] = &__block_descriptor_tmp_100;
        v9 = a1[5];
        v8 = (std::__shared_weak_count *)a1[6];
        aBlock[4] = v3;
        aBlock[5] = v9;
        v16 = v8;
        if (v8)
        {
          p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
          do
            v11 = __ldxr(p_shared_weak_owners);
          while (__stxr(v11 + 1, p_shared_weak_owners));
        }
        v12 = _Block_copy(aBlock);
        v17 = v12;
        ResetDetection::add(v6, (uint64_t)&v18, 1, &v17, -1);
        if (v12)
          _Block_release(v12);
        operator delete(v7);
        if (v16)
          std::__shared_weak_count::__release_weak(v16);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF3B2C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  void *v16;
  const void *v17;
  uint64_t v18;

  if (v17)
    _Block_release(v17);
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  operator delete(v16);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v18 - 64);
  _Unwind_Resume(a1);
}

void sub_1BF3B2C50(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

void BootModule::bbResetFlag(BootModule *this, char a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _BYTE *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v3 || (v5 = *((_QWORD *)this + 15), (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *(_QWORD *)v8 = this;
  v8[8] = a2;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = *((_QWORD *)this + 17);
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::bbResetFlag(BOOL)::$_0>(BootModule::bbResetFlag(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::bbResetFlag(BOOL)::$_0,dispatch_queue_s *::default_delete<BootModule::bbResetFlag(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN10BootModule9boot_syncEv_block_invoke_3(_QWORD *a1)
{
  BootModule *v1;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  __int128 v5;
  const void *v6;
  size_t v7;
  size_t v8;
  __int128 *p_dst;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  size_t v14;
  size_t v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  const void *v20;
  size_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  void *aBlock;
  CFTypeRef cf;
  void *v30[2];
  unint64_t v31;
  uint64_t v32;
  std::string v33;
  void *v34;
  char v35;
  void *v36;
  char v37;
  void *v38;
  char v39;
  __int128 v40;
  char v41;
  _BYTE v42[8];
  _QWORD *v43;
  void *__p[2];
  char v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  __int128 __dst;
  unint64_t v51;
  _BYTE v52[32];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  std::__shared_weak_count *v59;

  v1 = (BootModule *)a1[4];
  if ((*((_DWORD *)v1 + 112) - 7) >= 2)
  {
    v3 = (std::__shared_weak_count *)a1[6];
    if (v3)
    {
      v4 = std::__shared_weak_count::lock(v3);
      v59 = v4;
      if (v4)
      {
        if (!a1[5])
        {
          v10 = v4;
LABEL_60:
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
          return;
        }
        BootModule::bbResetFlag(v1, 1);
        *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v56 = v5;
        v57 = v5;
        v54 = v5;
        v55 = v5;
        *(_OWORD *)&v52[16] = v5;
        v53 = v5;
        *(_OWORD *)v52 = v5;
        v6 = (const void *)*MEMORY[0x1E0CFB590];
        v7 = strlen((const char *)*MEMORY[0x1E0CFB590]);
        if (v7 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v8 = v7;
        if (v7 >= 0x17)
        {
          v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v7 | 7) != 0x17)
            v11 = v7 | 7;
          v12 = v11 + 1;
          p_dst = (__int128 *)operator new(v11 + 1);
          *((_QWORD *)&__dst + 1) = v8;
          v51 = v12 | 0x8000000000000000;
          *(_QWORD *)&__dst = p_dst;
        }
        else
        {
          HIBYTE(v51) = v7;
          p_dst = &__dst;
          if (!v7)
          {
LABEL_14:
            *((_BYTE *)p_dst + v8) = 0;
            v13 = (const void *)*MEMORY[0x1E0CFBF98];
            v14 = strlen((const char *)*MEMORY[0x1E0CFBF98]);
            if (v14 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v15 = v14;
            if (v14 >= 0x17)
            {
              v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v14 | 7) != 0x17)
                v17 = v14 | 7;
              v18 = v17 + 1;
              v16 = (__int128 *)operator new(v17 + 1);
              *((_QWORD *)&v48 + 1) = v15;
              v49 = v18 | 0x8000000000000000;
              *(_QWORD *)&v48 = v16;
            }
            else
            {
              HIBYTE(v49) = v14;
              v16 = &v48;
              if (!v14)
              {
LABEL_22:
                *((_BYTE *)v16 + v15) = 0;
                v19 = (char *)operator new(0x20uLL);
                v46 = v19;
                v47 = xmmword_1BF53F400;
                strcpy(v19, "** baseband crash detected");
                Timestamp::Timestamp((Timestamp *)v42);
                Timestamp::asString((uint64_t)v42, 0, 9, __p);
                v41 = 0;
                LOBYTE(v40) = 0;
                ResetInfo::ResetInfo((std::string *)v52, &__dst, &v48, (__int128 *)&v46, (uint64_t)__p, 3, &v40);
                if (v45 < 0)
                  operator delete(__p[0]);
                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v42, v43);
                operator delete(v19);
                if (SHIBYTE(v49) < 0)
                  operator delete((void *)v48);
                if (SHIBYTE(v51) < 0)
                  operator delete((void *)__dst);
                ResetInfo::ResetInfo(&v33, (__int128 *)v52);
                v32 = 0;
                BootModule::requestReset(v1, &v33, &v32);
                if (v39 < 0)
                {
                  operator delete(v38);
                  if ((v37 & 0x80000000) == 0)
                  {
LABEL_30:
                    if ((v35 & 0x80000000) == 0)
                      goto LABEL_31;
                    goto LABEL_53;
                  }
                }
                else if ((v37 & 0x80000000) == 0)
                {
                  goto LABEL_30;
                }
                operator delete(v36);
                if ((v35 & 0x80000000) == 0)
                {
LABEL_31:
                  if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_32;
LABEL_54:
                  operator delete(v33.__r_.__value_.__l.__data_);
LABEL_32:
                  v20 = (const void *)*MEMORY[0x1E0CFBBB0];
                  v21 = strlen((const char *)*MEMORY[0x1E0CFBBB0]);
                  if (v21 > 0x7FFFFFFFFFFFFFF7)
                    std::string::__throw_length_error[abi:ne180100]();
                  v22 = (void *)v21;
                  if (v21 >= 0x17)
                  {
                    v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v21 | 7) != 0x17)
                      v24 = v21 | 7;
                    v25 = v24 + 1;
                    v23 = operator new(v24 + 1);
                    v30[1] = v22;
                    v31 = v25 | 0x8000000000000000;
                    v30[0] = v23;
                  }
                  else
                  {
                    HIBYTE(v31) = v21;
                    v23 = v30;
                    if (!v21)
                    {
LABEL_40:
                      *((_BYTE *)v22 + (_QWORD)v23) = 0;
                      aBlock = 0;
                      cf = 0;
                      Service::broadcastEvent((uint64_t)v1, (uint64_t)v30, &cf, (const void **)&aBlock);
                      if (aBlock)
                        _Block_release(aBlock);
                      if (cf)
                        CFRelease(cf);
                      if (SHIBYTE(v31) < 0)
                      {
                        operator delete(v30[0]);
                        if ((SHIBYTE(v57) & 0x80000000) == 0)
                        {
LABEL_46:
                          if ((SBYTE7(v55) & 0x80000000) == 0)
                            goto LABEL_47;
                          goto LABEL_57;
                        }
                      }
                      else if ((SHIBYTE(v57) & 0x80000000) == 0)
                      {
                        goto LABEL_46;
                      }
                      operator delete(*((void **)&v56 + 1));
                      if ((SBYTE7(v55) & 0x80000000) == 0)
                      {
LABEL_47:
                        if ((SHIBYTE(v53) & 0x80000000) == 0)
                          goto LABEL_48;
                        goto LABEL_58;
                      }
LABEL_57:
                      operator delete((void *)v54);
                      if ((SHIBYTE(v53) & 0x80000000) == 0)
                      {
LABEL_48:
                        if ((v52[23] & 0x80000000) == 0)
                          goto LABEL_49;
                        goto LABEL_59;
                      }
LABEL_58:
                      operator delete(*(void **)&v52[24]);
                      if ((v52[23] & 0x80000000) == 0)
                      {
LABEL_49:
                        v10 = v59;
                        if (!v59)
                          return;
                        goto LABEL_60;
                      }
LABEL_59:
                      operator delete(*(void **)v52);
                      v10 = v59;
                      if (!v59)
                        return;
                      goto LABEL_60;
                    }
                  }
                  memmove(v23, v20, (size_t)v22);
                  goto LABEL_40;
                }
LABEL_53:
                operator delete(v34);
                if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_32;
                goto LABEL_54;
              }
            }
            memmove(v16, v13, v15);
            goto LABEL_22;
          }
        }
        memmove(p_dst, v6, v8);
        goto LABEL_14;
      }
    }
  }
}

void sub_1BF3B31A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  if (aBlock)
    _Block_release(aBlock);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0)
  {
    operator delete(__p);
    ResetInfo::~ResetInfo((void **)(v43 - 192));
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v43 - 80);
    _Unwind_Resume(a1);
  }
  ResetInfo::~ResetInfo((void **)(v43 - 192));
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v43 - 80);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule9boot_syncEv_block_invoke_103(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::string __p;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(char *)(v2 + 63) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v2 + 40), *(_QWORD *)(v2 + 48));
  else
    __p = *(std::string *)(v2 + 40);
  BootModule::handleBootFailed_sync(v1, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF3B3354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_56c38_ZTSNSt3__110shared_ptrI10BootModuleEE72c21_ZTSN8dispatch5groupE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  NSObject *v5;

  v2 = a2[8];
  a1[7] = a2[7];
  a1[8] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[9];
  a1[9] = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_56c38_ZTSNSt3__110shared_ptrI10BootModuleEE72c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(NSObject **)(a1 + 72);
  if (v2)
    dispatch_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void BootModule::setVoiceCall_sync(BootModule *this, char a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  NSObject *v14;
  _QWORD *v15;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v3 || (v5 = *((_QWORD *)this + 15), (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = *((_QWORD *)this + 52);
  v14 = *((_QWORD *)this + 17);
  v15 = operator new(0x20uLL);
  *v15 = this;
  v15[1] = v5;
  v15[2] = v7;
  *((_BYTE *)v15 + 24) = a2;
  dispatch_group_notify_f(v13, v14, v15, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setVoiceCall_sync(BOOL)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setVoiceCall_sync(BOOL)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF3B34E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void BootModule::setRat1_sync(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  NSObject *v14;
  _QWORD *v15;

  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = a1[52];
  v14 = a1[17];
  v15 = operator new(0x20uLL);
  *v15 = a1;
  v15[1] = v5;
  v15[2] = v7;
  *((_DWORD *)v15 + 6) = a2;
  dispatch_group_notify_f(v13, v14, v15, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setRat1_sync(abm::RadioAccessTechnology)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setRat1_sync(abm::RadioAccessTechnology)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF3B35DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void BootModule::setRat2_sync(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  NSObject *v14;
  _QWORD *v15;

  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = a1[52];
  v14 = a1[17];
  v15 = operator new(0x20uLL);
  *v15 = a1;
  v15[1] = v5;
  v15[2] = v7;
  *((_DWORD *)v15 + 6) = a2;
  dispatch_group_notify_f(v13, v14, v15, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setRat2_sync(abm::RadioAccessTechnology)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setRat2_sync(abm::RadioAccessTechnology)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF3B36D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void BootModule::setPLMN1_sync(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  NSObject *v14;
  std::string *v15;
  __int128 v16;
  std::string __p;

  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(_QWORD *)&v16 = a1;
  *((_QWORD *)&v16 + 1) = v5;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v13 = a1[52];
  v14 = a1[17];
  v15 = (std::string *)operator new(0x30uLL);
  *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
  v15[1] = __p;
  memset(&__p, 0, sizeof(__p));
  dispatch_group_notify_f(v13, v14, v15, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setPLMN1_sync(std::string)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setPLMN1_sync(std::string)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF3B384C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  std::__shared_weak_count *v11;

  if (a11)
  {
    std::__shared_weak_count::__release_weak(a11);
    std::__shared_weak_count::__release_weak(v11);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v11);
  _Unwind_Resume(a1);
}

uint64_t BootModule::setPLMN1_sync(std::string)::$_0::~$_0(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2)
      return a1;
    goto LABEL_3;
  }
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
LABEL_3:
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void BootModule::setPLMN2_sync(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  NSObject *v14;
  std::string *v15;
  __int128 v16;
  std::string __p;

  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(_QWORD *)&v16 = a1;
  *((_QWORD *)&v16 + 1) = v5;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v13 = a1[52];
  v14 = a1[17];
  v15 = (std::string *)operator new(0x30uLL);
  *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
  v15[1] = __p;
  memset(&__p, 0, sizeof(__p));
  dispatch_group_notify_f(v13, v14, v15, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setPLMN2_sync(std::string)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setPLMN2_sync(std::string)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF3B3A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  std::__shared_weak_count *v11;

  if (a11)
  {
    std::__shared_weak_count::__release_weak(a11);
    std::__shared_weak_count::__release_weak(v11);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v11);
  _Unwind_Resume(a1);
}

void BootModule::setCellId_sync(_QWORD *a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  NSObject *v15;
  NSObject *v16;
  _QWORD *v17;

  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v7 = a1[15], (v8 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v15 = a1[52];
  v16 = a1[17];
  v17 = operator new(0x28uLL);
  *v17 = a1;
  v17[1] = v7;
  v17[2] = v9;
  v17[3] = a2;
  *((_DWORD *)v17 + 8) = a3;
  dispatch_group_notify_f(v15, v16, v17, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setCellId_sync(unsigned long long,BootModule::SimSlotIndex)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setCellId_sync(unsigned long long,BootModule::SimSlotIndex)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1BF3B3B50(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void BootModule::setAreaCode_sync(_QWORD *a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  NSObject *v15;
  NSObject *v16;
  _QWORD *v17;

  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v7 = a1[15], (v8 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v15 = a1[52];
  v16 = a1[17];
  v17 = operator new(0x28uLL);
  *v17 = a1;
  v17[1] = v7;
  v17[2] = v9;
  v17[3] = a2;
  *((_DWORD *)v17 + 8) = a3;
  dispatch_group_notify_f(v15, v16, v17, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setAreaCode_sync(unsigned long long,BootModule::SimSlotIndex)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setAreaCode_sync(unsigned long long,BootModule::SimSlotIndex)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1BF3B3C50(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::sub_match<std::__wrap_iter<char const*>>::str[abi:ne180100](_QWORD *result, uint64_t *a2)
{
  _QWORD *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  _BYTE *v6;
  char *v7;
  __int128 *v8;
  _OWORD *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v2 = result;
  if (!*((_BYTE *)a2 + 16))
  {
    *result = 0;
    result[1] = 0;
    result[2] = 0;
    return result;
  }
  v4 = *a2;
  v3 = (char *)a2[1];
  v5 = (unint64_t)&v3[-*a2];
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 <= 0x16)
  {
    *((_BYTE *)result + 23) = v5;
    if ((char *)v4 != v3)
      goto LABEL_5;
LABEL_15:
    *(_BYTE *)v2 = 0;
    return result;
  }
  v12 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v12 = v5 | 7;
  v13 = v12 + 1;
  result = operator new(v12 + 1);
  v2[1] = v5;
  v2[2] = v13 | 0x8000000000000000;
  *v2 = result;
  v2 = result;
  if ((char *)v4 == v3)
    goto LABEL_15;
LABEL_5:
  if (v5 < 0x20 || (unint64_t)v2 - v4 < 0x20)
  {
    v6 = v2;
    v7 = (char *)v4;
  }
  else
  {
    v6 = (char *)v2 + (v5 & 0xFFFFFFFFFFFFFFE0);
    v7 = (char *)(v4 + (v5 & 0xFFFFFFFFFFFFFFE0));
    v8 = (__int128 *)(v4 + 16);
    v9 = v2 + 2;
    v10 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v11 = *v8;
      *(v9 - 1) = *(v8 - 1);
      *v9 = v11;
      v8 += 2;
      v9 += 2;
      v10 -= 32;
    }
    while (v10);
    if (v5 == (v5 & 0x7FFFFFFFFFFFFFE0))
      goto LABEL_18;
  }
  do
  {
    v14 = *v7++;
    *v6++ = v14;
  }
  while (v7 != v3);
LABEL_18:
  *v6 = 0;
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v4;

  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (!locale)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&locale->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
    std::locale::~locale(this);
  }
  else
  {
LABEL_5:
    std::locale::~locale(this);
  }
}

uint64_t ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7900768;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7900768;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ResetInfo::ResetInfo(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  __int128 v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(__int128 *)((char *)a2 + 24);
      v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
LABEL_6:
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  }
  v8 = *((_QWORD *)a2 + 9);
  LODWORD(this[3].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 20);
  this[3].__r_.__value_.__r.__words[0] = v8;
  v9 = (std::string *)((char *)this + 88);
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 11), *((_QWORD *)a2 + 12));
  }
  else
  {
    v10 = *(__int128 *)((char *)a2 + 88);
    this[4].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 13);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
}

void sub_1BF3B4044(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 23) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF3B41C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF3B41DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<BootModule>::shared_ptr[abi:ne180100]<BootModule,std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E79007A8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF3B42F8(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule*)#1}::operator() const(BootModule*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF3B4318(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<BootModule *,std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule *)#1},std::allocator<BootModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<BootModule *,std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule *)#1},std::allocator<BootModule>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule*)#1}::operator() const(BootModule*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<BootModule *,std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule *)#1},std::allocator<BootModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI10BootModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI10BootModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI10BootModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI10BootModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule*)#1}::operator() const(BootModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedLoggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7900768;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void _ZZN8dispatch6detail12group_notifyIZZZN10BootModule12requestResetE9ResetInfoNS_5blockIU13block_pointerFviNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEEUb_EUb0_E3__0EEvP16dispatch_group_sP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEEENUlPvE_8__invokeESO_(char *__p)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  const void *v6;
  void *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v10;
  const void *v11;
  std::__shared_weak_count *v12;
  void *v13;
  std::string v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  void *__pa;
  char v20;

  v2 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (!v2)
    goto LABEL_17;
  v3 = *(_QWORD *)__p;
  v4 = std::__shared_weak_count::lock(v2);
  if (!v4)
    goto LABEL_17;
  v5 = v4;
  if (*((_QWORD *)__p + 1))
  {
    ResetInfo::ResetInfo(&v14, (__int128 *)(__p + 24));
    v6 = (const void *)*((_QWORD *)__p + 17);
    if (v6)
      v7 = _Block_copy(v6);
    else
      v7 = 0;
    v13 = v7;
    BootModule::handleReset_sync(v3, (uint64_t)&v14, &v13);
    if (v7)
      _Block_release(v7);
    if (v20 < 0)
    {
      operator delete(__pa);
      if ((v18 & 0x80000000) == 0)
      {
LABEL_11:
        if ((v16 & 0x80000000) == 0)
          goto LABEL_12;
        goto LABEL_35;
      }
    }
    else if ((v18 & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(v17);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_13;
LABEL_36:
      operator delete(v14.__r_.__value_.__l.__data_);
      goto LABEL_13;
    }
LABEL_35:
    operator delete(v15);
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_36;
  }
LABEL_13:
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_17:
  v10 = *((_QWORD *)__p + 18);
  if (v10)
    dispatch_release(v10);
  v11 = (const void *)*((_QWORD *)__p + 17);
  if (v11)
    _Block_release(v11);
  if (__p[135] < 0)
  {
    operator delete(*((void **)__p + 14));
    if ((__p[95] & 0x80000000) == 0)
    {
LABEL_23:
      if ((__p[71] & 0x80000000) == 0)
        goto LABEL_24;
      goto LABEL_30;
    }
  }
  else if ((__p[95] & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(*((void **)__p + 9));
  if ((__p[71] & 0x80000000) == 0)
  {
LABEL_24:
    if ((__p[47] & 0x80000000) == 0)
      goto LABEL_25;
LABEL_31:
    operator delete(*((void **)__p + 3));
    v12 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
    if (!v12)
      goto LABEL_27;
    goto LABEL_26;
  }
LABEL_30:
  operator delete(*((void **)__p + 6));
  if (__p[47] < 0)
    goto LABEL_31;
LABEL_25:
  v12 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (v12)
LABEL_26:
    std::__shared_weak_count::__release_weak(v12);
LABEL_27:
  operator delete(__p);
}

void sub_1BF3B4644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  _QWORD *v11;
  std::__shared_weak_count *v12;
  void **v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;
  NSObject *v18;
  const void *v19;
  std::__shared_weak_count *v20;

  if (v14)
    _Block_release(v14);
  ResetInfo::~ResetInfo(&a11);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (v17)
  {
    v18 = v11[18];
    if (!v18)
      goto LABEL_7;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    v18 = v11[18];
    if (!v18)
    {
LABEL_7:
      v19 = (const void *)v11[17];
      if (!v19)
      {
LABEL_12:
        ResetInfo::~ResetInfo(v13);
        v20 = (std::__shared_weak_count *)v11[2];
        if (v20)
          std::__shared_weak_count::__release_weak(v20);
        operator delete(v11);
        _Unwind_Resume(a1);
      }
LABEL_11:
      _Block_release(v19);
      goto LABEL_12;
    }
  }
  dispatch_release(v18);
  v19 = (const void *)v11[17];
  if (!v19)
    goto LABEL_12;
  goto LABEL_11;
}

void ctu::SharedSynchronizable<BootModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E7900830;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10BootModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10BootModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb1_EUb2_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t *v2;
  const char *v3;
  uint64_t v4;
  xpc_object_t value;
  int v6;
  NSObject *v7;
  NSObject *v8;
  const void *v9;
  size_t v10;
  void *v11;
  void **v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  xpc_object_t v17;
  int v18;
  const char *v19;
  xpc_object_t v20;
  int v21;
  const char *v22;
  xpc_object_t v23;
  const char *v24;
  const char *v25;
  xpc_object_t v26;
  const char *v27;
  const char *v28;
  xpc_object_t v29;
  uint64_t v30;
  const char *v31;
  xpc_object_t v32;
  uint64_t v33;
  const char *v34;
  xpc_object_t v35;
  uint64_t v36;
  const char *v37;
  xpc_object_t v38;
  uint64_t v39;
  const char *v40;
  xpc_object_t v41;
  char v42;
  xpc_object_t v43;
  int v44;
  NSObject *v45;
  NSObject *v46;
  xpc_object_t v47;
  uint64_t v48;
  xpc_object_t v49;
  const void *v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  std::string __p;
  std::string v55;
  xpc_object_t v56;
  std::string object;
  void *aBlock;
  xpc_object_t v59;
  void *__dst[2];
  unint64_t v61;

  v2 = *(uint64_t **)a1;
  v3 = (const char *)*MEMORY[0x1E0CFB040];
  v4 = **(_QWORD **)a1;
  if (!xpc_dictionary_get_value(*(xpc_object_t *)(*(_QWORD *)a1 + 8), (const char *)*MEMORY[0x1E0CFB040]))
    goto LABEL_26;
  value = xpc_dictionary_get_value((xpc_object_t)v2[1], v3);
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value)
    xpc_retain(value);
  else
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  v6 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object.__r_.__value_.__l.__data_);
  if (!v6)
  {
    v8 = *(NSObject **)(v4 + 440);
    *(_QWORD *)(v4 + 440) = 0;
    if (!v8)
      goto LABEL_12;
    goto LABEL_11;
  }
  v7 = *(NSObject **)(v4 + 432);
  if (v7)
  {
    dispatch_retain(*(dispatch_object_t *)(v4 + 432));
    dispatch_suspend(v7);
  }
  v8 = *(NSObject **)(v4 + 440);
  *(_QWORD *)(v4 + 440) = v7;
  if (v8)
  {
LABEL_11:
    dispatch_resume(v8);
    dispatch_release(v8);
  }
LABEL_12:
  BootModule::setVoiceCall_sync((BootModule *)v4, v6);
  v9 = (const void *)*MEMORY[0x1E0CFB0B0];
  v10 = strlen((const char *)*MEMORY[0x1E0CFB0B0]);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    v14 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v14 = v10 | 7;
    v15 = v14 + 1;
    v12 = (void **)operator new(v14 + 1);
    __dst[1] = v11;
    v61 = v15 | 0x8000000000000000;
    __dst[0] = v12;
LABEL_20:
    memmove(v12, v9, (size_t)v11);
    *((_BYTE *)v11 + (_QWORD)v12) = 0;
    v13 = (void *)v2[1];
    v59 = v13;
    if (v13)
      goto LABEL_16;
LABEL_21:
    v59 = xpc_null_create();
    goto LABEL_22;
  }
  HIBYTE(v61) = v10;
  v12 = __dst;
  if (v10)
    goto LABEL_20;
  LOBYTE(__dst[0]) = 0;
  v13 = (void *)v2[1];
  v59 = v13;
  if (!v13)
    goto LABEL_21;
LABEL_16:
  xpc_retain(v13);
LABEL_22:
  aBlock = 0;
  Service::broadcastEvent(v4, (uint64_t)__dst, &v59, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(v59);
  v59 = 0;
  if (SHIBYTE(v61) < 0)
    operator delete(__dst[0]);
LABEL_26:
  v16 = (const char *)*MEMORY[0x1E0CFC1F0];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFC1F0]))
  {
    v17 = xpc_dictionary_get_value((xpc_object_t)v2[1], v16);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    if (v17)
      xpc_retain(v17);
    else
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v18 = xpc::dyn_cast_or_default((xpc *)&object, (const object *)0xFFFFFFFFLL);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setRat1_sync((_QWORD *)v4, v18);
  }
  v19 = (const char *)*MEMORY[0x1E0CFC1F8];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFC1F8]))
  {
    v20 = xpc_dictionary_get_value((xpc_object_t)v2[1], v19);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
    if (v20)
      xpc_retain(v20);
    else
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v21 = xpc::dyn_cast_or_default((xpc *)&object, (const object *)0xFFFFFFFFLL);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setRat2_sync((_QWORD *)v4, v21);
  }
  v22 = (const char *)*MEMORY[0x1E0CFC230];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFC230]))
  {
    memset(&object, 170, sizeof(object));
    v23 = xpc_dictionary_get_value((xpc_object_t)v2[1], v22);
    v56 = v23;
    if (v23)
      xpc_retain(v23);
    else
      v56 = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&v56, (const object *)"", v24);
    xpc_release(v56);
    if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v55, object.__r_.__value_.__l.__data_, object.__r_.__value_.__l.__size_);
    else
      v55 = object;
    BootModule::setPLMN1_sync((_QWORD *)v4, (uint64_t)&v55);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v55.__r_.__value_.__l.__data_);
      if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_45;
    }
    else if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_45;
    }
    operator delete(object.__r_.__value_.__l.__data_);
  }
LABEL_45:
  v25 = (const char *)*MEMORY[0x1E0CFC238];
  if (!xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFC238]))
    goto LABEL_56;
  memset(&object, 170, sizeof(object));
  v26 = xpc_dictionary_get_value((xpc_object_t)v2[1], v25);
  v56 = v26;
  if (v26)
    xpc_retain(v26);
  else
    v56 = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&v56, (const object *)"", v27);
  xpc_release(v56);
  if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, object.__r_.__value_.__l.__data_, object.__r_.__value_.__l.__size_);
  else
    __p = object;
  BootModule::setPLMN2_sync((_QWORD *)v4, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_56;
  }
  else if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_56;
  }
  operator delete(object.__r_.__value_.__l.__data_);
LABEL_56:
  v28 = (const char *)*MEMORY[0x1E0CFAF58];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFAF58]))
  {
    v29 = xpc_dictionary_get_value((xpc_object_t)v2[1], v28);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
    if (v29)
      xpc_retain(v29);
    else
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v30 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setCellId_sync((_QWORD *)v4, v30, 0);
  }
  v31 = (const char *)*MEMORY[0x1E0CFAF60];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFAF60]))
  {
    v32 = xpc_dictionary_get_value((xpc_object_t)v2[1], v31);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    if (v32)
      xpc_retain(v32);
    else
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v33 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setCellId_sync((_QWORD *)v4, v33, 1);
  }
  v34 = (const char *)*MEMORY[0x1E0CFAFF0];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFAFF0]))
  {
    v35 = xpc_dictionary_get_value((xpc_object_t)v2[1], v34);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
    if (v35)
      xpc_retain(v35);
    else
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v36 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setAreaCode_sync((_QWORD *)v4, v36, 0);
  }
  v37 = (const char *)*MEMORY[0x1E0CFAFF8];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFAFF8]))
  {
    v38 = xpc_dictionary_get_value((xpc_object_t)v2[1], v37);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
    if (v38)
      xpc_retain(v38);
    else
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v39 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setAreaCode_sync((_QWORD *)v4, v39, 1);
  }
  v40 = (const char *)*MEMORY[0x1E0CFC218];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFC218])
    || xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFC220]))
  {
    v41 = xpc_dictionary_get_value((xpc_object_t)v2[1], v40);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
    if (v41)
      xpc_retain(v41);
    else
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v42 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object.__r_.__value_.__l.__data_);
    if ((v42 & 1) == 0)
    {
      v43 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFC220]);
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
      if (v43)
        xpc_retain(v43);
      else
        object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      v44 = xpc::dyn_cast_or_default((xpc *)&object, 0);
      xpc_release(object.__r_.__value_.__l.__data_);
      if (!v44)
      {
        v46 = *(NSObject **)(v4 + 440);
        *(_QWORD *)(v4 + 440) = 0;
        if (!v46)
          goto LABEL_92;
        goto LABEL_91;
      }
    }
    v45 = *(NSObject **)(v4 + 432);
    if (v45)
    {
      dispatch_retain(*(dispatch_object_t *)(v4 + 432));
      dispatch_suspend(v45);
    }
    v46 = *(NSObject **)(v4 + 440);
    *(_QWORD *)(v4 + 440) = v45;
    if (v46)
    {
LABEL_91:
      dispatch_resume(v46);
      dispatch_release(v46);
    }
  }
LABEL_92:
  if (v2[2])
  {
    v47 = xpc_null_create();
    v48 = v2[2];
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
    v49 = xpc_null_create();
    (*(void (**)(uint64_t, _QWORD, std::string *))(v48 + 16))(v48, 0, &object);
    xpc_release(object.__r_.__value_.__l.__data_);
    xpc_release(v49);
    v50 = (const void *)v2[2];
    if (v50)
      _Block_release(v50);
  }
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v51 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v51)
  {
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    do
      v53 = __ldaxr(p_shared_owners);
    while (__stlxr(v53 - 1, p_shared_owners));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  operator delete(a1);
}

void sub_1BF3B501C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,xpc_object_t object,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *aBlock,xpc_object_t a30)
{
  _QWORD *v30;
  uint64_t v31;
  const void *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;

  if (a28 < 0)
    operator delete(__p);
  v33 = *(const void **)(v31 + 16);
  if (v33)
    _Block_release(v33);
  xpc_release(*(xpc_object_t *)(v31 + 8));
  operator delete((void *)v31);
  v34 = (std::__shared_weak_count *)v30[2];
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  operator delete(v30);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::initialize(dispatch::group_session)::$_0>(BootModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<BootModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  BootModule **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(BootModule ***)a1;
  BootModule::finishInitialization_sync(**(BootModule ***)a1);
  operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete((void *)a1);
  }
  else
  {
LABEL_5:
    operator delete((void *)a1);
  }
}

void sub_1BF3B5310(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::start(dispatch::group_session)::$_0>(BootModule::start(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::start(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<BootModule::start(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  unsigned __int8 v5;
  std::string::size_type v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *size;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t *v33;
  NSObject *v34;
  NSObject *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  dispatch_object_t v44;
  NSObject *v45;
  NSObject *v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  NSObject *v51;
  NSObject *v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  dispatch_object_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  dispatch_object_t object;
  __int128 v61;
  std::string block;
  void *v63;
  uint64_t *v64;

  v2 = *a1;
  v3 = (*a1)[3];
  v4 = *(NSObject **)(v3 + 136);
  object = v4;
  if (v4)
    dispatch_retain(v4);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  v6 = MEMORY[0x1E0C809B0];
  block.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
  block.__r_.__value_.__l.__size_ = 0x40000000;
  block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v63 = &__block_descriptor_tmp_13_2;
  v64 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v7 = *(_QWORD *)algn_1ED710088;
    v58 = GetABMLogServer(void)::sLogServer;
    v59 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_8;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v7 = *(_QWORD *)algn_1ED710088;
    v58 = GetABMLogServer(void)::sLogServer;
    v59 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_8;
  }
  v8 = (unint64_t *)(v7 + 8);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
LABEL_8:
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v10 = off_1ED70FA00;
  if (!off_1ED70FA00)
  {
    ABMServer::create_default_global(&block);
    v11 = *(_OWORD *)&block.__r_.__value_.__l.__data_;
    *(_OWORD *)&block.__r_.__value_.__l.__data_ = 0uLL;
    v12 = (std::__shared_weak_count *)*(&off_1ED70FA00 + 1);
    off_1ED70FA00 = v11;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    size = (std::__shared_weak_count *)block.__r_.__value_.__l.__size_;
    if (block.__r_.__value_.__l.__size_)
    {
      v16 = (unint64_t *)(block.__r_.__value_.__l.__size_ + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v10 = off_1ED70FA00;
  }
  v18 = (std::__shared_weak_count *)*(&off_1ED70FA00 + 1);
  if (*(&off_1ED70FA00 + 1))
  {
    v19 = (unint64_t *)(*(&off_1ED70FA00 + 1) + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  ResetDetection::create(&object, &v58, *(_QWORD *)(*(_QWORD *)v10 + 208), (uint64_t *)&v61);
  v21 = v61;
  v61 = 0uLL;
  v22 = *(std::__shared_weak_count **)(v3 + 184);
  *(_OWORD *)(v3 + 176) = v21;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (*((_QWORD *)&v61 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (v18)
  {
    v28 = (unint64_t *)&v18->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v30 = v59;
  if (v59)
  {
    v31 = (unint64_t *)&v59->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (object)
    dispatch_release(object);
  v33 = *(uint64_t **)(v3 + 176);
  block.__r_.__value_.__r.__words[0] = v6;
  block.__r_.__value_.__l.__size_ = 0x40000000;
  block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN14ResetDetection5startEv_block_invoke;
  v63 = &__block_descriptor_tmp_3_1;
  v64 = v33;
  ctu::SharedSynchronizable<ResetDetection>::execute_wrapped(v33 + 9, (uint64_t)&block);
  v34 = v2[2];
  if (v34)
  {
    dispatch_retain((dispatch_object_t)v2[2]);
    dispatch_group_enter(v34);
  }
  v35 = *(NSObject **)(v3 + 208);
  *(_QWORD *)(v3 + 208) = v34;
  if (v35)
  {
    dispatch_group_leave(v35);
    dispatch_release(v35);
  }
  *(_QWORD *)&v61 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v61 + 1) = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v3 + 80))(&v61, v3);
  v36 = v61;
  if ((_QWORD)v61)
  {
    v57 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
    v37 = (char *)operator new(0x38uLL);
    strcpy(v37, "com.apple.AppleBasebandManager.RadioNotReady.Bootup");
    v38 = capabilities::abs::bootupAssertionTimeoutScalingFactor((capabilities::abs *)v37);
    v39 = *(_QWORD *)(v36 + 104);
    std::string::__init_copy_ctor_external(&block, v37, 0x33uLL);
    (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, std::string *, uint64_t))(*(_QWORD *)v39 + 24))(&v57, v39, &block, 180000 * v38);
    if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
      operator delete(block.__r_.__value_.__l.__data_);
    operator delete(v37);
    v41 = *v2;
    v40 = v2[1];
    if (v40)
    {
      v42 = (unint64_t *)(v40 + 16);
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v57;
    if (v57)
    {
      dispatch_retain(v57);
      v45 = v57;
    }
    else
    {
      v45 = 0;
    }
    v46 = *(NSObject **)(v3 + 136);
    v47 = operator new(0x20uLL);
    *v47 = v3;
    v47[1] = v41;
    v47[2] = v40;
    v47[3] = v44;
    dispatch_group_notify_f(v45, v46, v47, (dispatch_function_t)dispatch::detail::group_notify<BootModule::start(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,BootModule::start(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
    if (v57)
      dispatch_release(v57);
  }
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (*((_QWORD *)&v61 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = v2[2];
  if (v51)
  {
    dispatch_group_leave(v51);
    v52 = v2[2];
    if (v52)
      dispatch_release(v52);
  }
  v53 = (std::__shared_weak_count *)v2[1];
  if (v53)
    std::__shared_weak_count::__release_weak(v53);
  operator delete(v2);
  v54 = (std::__shared_weak_count *)a1[2];
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  operator delete(a1);
}

void sub_1BF3B5898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t a9, uint64_t a10, std::__shared_weak_count *a11, dispatch_object_t object, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _QWORD *v20;
  _QWORD *v21;
  unint64_t *p_shared_owners;
  unint64_t v24;
  NSObject *v25;
  NSObject *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;

  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  if (object)
    dispatch_release(object);
  v25 = v21[2];
  if (v25)
  {
    dispatch_group_leave(v25);
    v26 = v21[2];
    if (v26)
      dispatch_release(v26);
  }
  v27 = (std::__shared_weak_count *)v21[1];
  if (v27)
    std::__shared_weak_count::__release_weak(v27);
  operator delete(v21);
  v28 = (std::__shared_weak_count *)v20[2];
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  operator delete(v20);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::start(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,BootModule::start(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(BootModule **__p)
{
  std::__shared_weak_count *v2;
  BootModule *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  BootModule *v6;
  uint64_t v7;
  __CFDictionary *Mutable;
  const __CFAllocator *v9;
  const void *v10;
  size_t v11;
  void *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeID v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  NSObject *v24;
  std::__shared_weak_count *v25;
  _QWORD v26[6];
  std::__shared_weak_count *v27;
  void *aBlock;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v31;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_37;
  v3 = *__p;
  v4 = std::__shared_weak_count::lock(v2);
  if (!v4)
    goto LABEL_37;
  v5 = v4;
  v6 = __p[1];
  if (v6)
  {
    if (*((_DWORD *)v3 + 112))
    {
      v7 = *MEMORY[0x1E0C9AE00];
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E0CFB530], (const __CFString **)*MEMORY[0x1E0CFBA60], v7, v9);
      v10 = (const void *)*MEMORY[0x1E0CFBD68];
      v11 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
      if (v11 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v12 = (void *)v11;
      if (v11 >= 0x17)
      {
        v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17)
          v14 = v11 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __dst[1] = v12;
        v31 = v15 | 0x8000000000000000;
        __dst[0] = v13;
      }
      else
      {
        HIBYTE(v31) = v11;
        v13 = __dst;
        if (!v11)
        {
          LOBYTE(__dst[0]) = 0;
          if (!Mutable)
            goto LABEL_17;
LABEL_15:
          v16 = CFGetTypeID(Mutable);
          if (v16 == CFDictionaryGetTypeID())
          {
            cf = Mutable;
            CFRetain(Mutable);
            goto LABEL_18;
          }
LABEL_17:
          cf = 0;
LABEL_18:
          v26[0] = MEMORY[0x1E0C809B0];
          v26[1] = 1174405120;
          v26[2] = ___ZZZN10BootModule5startEN8dispatch13group_sessionEENK3__0clEvENKUlvE_clEv_block_invoke;
          v26[3] = &__block_descriptor_tmp_144;
          v26[4] = v3;
          v26[5] = v6;
          v27 = v5;
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v18 = __ldxr(p_shared_owners);
          while (__stxr(v18 + 1, p_shared_owners));
          aBlock = _Block_copy(v26);
          Service::broadcastEvent((uint64_t)v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
          if (aBlock)
            _Block_release(aBlock);
          if (cf)
            CFRelease(cf);
          if (SHIBYTE(v31) < 0)
            operator delete(__dst[0]);
          v19 = v27;
          if (v27)
          {
            v20 = (unint64_t *)&v27->__shared_owners_;
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          if (Mutable)
            CFRelease(Mutable);
          goto LABEL_33;
        }
      }
      memmove(v13, v10, (size_t)v12);
      *((_BYTE *)v12 + (_QWORD)v13) = 0;
      if (!Mutable)
        goto LABEL_17;
      goto LABEL_15;
    }
    BootModule::boot_sync(v3);
  }
LABEL_33:
  v22 = (unint64_t *)&v5->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_37:
  v24 = __p[3];
  if (v24)
    dispatch_release(v24);
  v25 = (std::__shared_weak_count *)__p[2];
  if (v25)
    std::__shared_weak_count::__release_weak(v25);
  operator delete(__p);
}

void sub_1BF3B5D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *aBlock, CFTypeRef cf, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v27;
  NSObject *v28;
  std::__shared_weak_count *v29;

  p_shared_owners = (unint64_t *)&v24->__shared_owners_;
  do
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (v27)
  {
    v28 = v23[3];
    if (!v28)
      goto LABEL_5;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    v28 = v23[3];
    if (!v28)
    {
LABEL_5:
      v29 = (std::__shared_weak_count *)v23[2];
      if (!v29)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  dispatch_release(v28);
  v29 = (std::__shared_weak_count *)v23[2];
  if (!v29)
  {
LABEL_6:
    operator delete(v23);
    _Unwind_Resume(a1);
  }
LABEL_9:
  std::__shared_weak_count::__release_weak(v29);
  operator delete(v23);
  _Unwind_Resume(a1);
}

void ___ZZZN10BootModule5startEN8dispatch13group_sessionEENK3__0clEvENKUlvE_clEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _QWORD v2[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 0x40000000;
  v2[2] = ___ZZZN10BootModule5startEN8dispatch13group_sessionEENK3__0clEvENKUlvE_clEv_block_invoke_2;
  v2[3] = &__block_descriptor_tmp_143_0;
  v2[4] = v1;
  ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v1 + 120), (uint64_t)v2);
}

void ___ZZZN10BootModule5startEN8dispatch13group_sessionEENK3__0clEvENKUlvE_clEv_block_invoke_2(uint64_t a1)
{
  BootModule::boot_sync(*(BootModule **)(a1 + 32));
}

uint64_t ctu::cf::update<char const*,unsigned int>(__CFDictionary *a1, const __CFString **a2, unsigned int a3, const __CFAllocator *a4, const __CFAllocator *a5)
{
  const void *v8;
  CFNumberRef v9;
  CFNumberRef v10;
  BOOL v11;
  uint64_t v12;
  unint64_t valuePtr;

  valuePtr = 0;
  ctu::cf::convert_copy((ctu::cf *)&valuePtr, a2, (const char *)0x8000100, (uint64_t)a4, a5);
  v8 = (const void *)valuePtr;
  valuePtr = a3;
  v9 = CFNumberCreate(a4, kCFNumberLongLongType, &valuePtr);
  v10 = v9;
  if (v8)
    v11 = v9 == 0;
  else
    v11 = 1;
  v12 = !v11;
  if (v11)
  {
    if (!v9)
      goto LABEL_11;
  }
  else
  {
    CFDictionarySetValue(a1, v8, v9);
  }
  CFRelease(v10);
LABEL_11:
  if (v8)
    CFRelease(v8);
  return v12;
}

void sub_1BF3B5F5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1BF3B5F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZNS3_21handleBootFailed_syncENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEUb4_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNS6_10unique_ptrISE_NS6_14default_deleteISE_EEEEENUlPvE_8__invokeESN_(_QWORD *a1)
{
  _QWORD *v2;
  NSObject *v3;
  void **v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *__p;
  char v12;
  uint8_t buf[4];
  void **v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*a1;
  if (*(_DWORD *)(*a1 + 24))
  {
    v3 = *(NSObject **)(*v2 + 88);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      xpc::object::to_string((xpc::object *)(v2 + 4));
      v4 = v12 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 136315138;
      v14 = v4;
      _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Dumping logs failed: %s", buf, 0xCu);
      if (v12 < 0)
        operator delete(__p);
    }
  }
  xpc_release((xpc_object_t)v2[4]);
  v2[4] = 0;
  v5 = (std::__shared_weak_count *)v2[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

void sub_1BF3B610C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  xpc_object_t *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  xpc_release(*v3);
  v2[4] = 0;
  v5 = (std::__shared_weak_count *)v2[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v2);
  v8 = (std::__shared_weak_count *)v1[2];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BF3B61A4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZNS3_22checkFSSyncStatus_syncENS_5blockIU13block_pointerFvbbEEEEUb5_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISB_NSG_14default_deleteISB_EEEEENUlPvE_8__invokeESL_(xpc_object_t **a1)
{
  xpc_object_t *v2;
  uint64_t v3;
  uint64_t v4;
  xpc_object_t value;
  xpc_object_t v6;
  void (**v7)(xpc_object_t, uint64_t, uint64_t);
  xpc_object_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  xpc_object_t object;

  v2 = *a1;
  if (*(_DWORD *)*a1)
  {
    v3 = 0;
    v4 = 1;
  }
  else
  {
    value = xpc_dictionary_get_value(v2[1], (const char *)*MEMORY[0x1E0CFB438]);
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    v3 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
    v6 = xpc_dictionary_get_value(v2[1], (const char *)*MEMORY[0x1E0CFB440]);
    object = v6;
    if (v6)
      xpc_retain(v6);
    else
      object = xpc_null_create();
    v4 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  v7 = (void (**)(xpc_object_t, uint64_t, uint64_t))v2[2];
  if (v7)
  {
    v7[2](v7, v3, v4);
    v8 = v2[2];
    if (v8)
      _Block_release(v8);
  }
  xpc_release(v2[1]);
  operator delete(v2);
  v9 = (std::__shared_weak_count *)a1[2];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(a1);
}

void sub_1BF3B6304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  uint64_t v11;
  const void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  xpc_release(object);
  v13 = *(const void **)(v11 + 16);
  if (v13)
    _Block_release(v13);
  xpc_release(*(xpc_object_t *)(v11 + 8));
  operator delete((void *)v11);
  v14 = (std::__shared_weak_count *)v10[2];
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::setVoiceCall_sync(BOOL)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setVoiceCall_sync(BOOL)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t *__p)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  int v6;
  NSObject *v7;
  const char *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    v3 = *__p;
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (__p[1])
      {
        v6 = *((unsigned __int8 *)__p + 24);
        *(_BYTE *)(v3 + 288) = v6;
        v7 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          v8 = "YES";
          if (!v6)
            v8 = "NO";
          v12 = 136315138;
          v13 = v8;
          _os_log_impl(&dword_1BF335000, v7, OS_LOG_TYPE_DEFAULT, "#I Voice Call: %s", (uint8_t *)&v12, 0xCu);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v11 = (std::__shared_weak_count *)__p[2];
    if (v11)
      std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(__p);
}

void dispatch::detail::group_notify<BootModule::setRat1_sync(abm::RadioAccessTechnology)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setRat1_sync(abm::RadioAccessTechnology)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  void **v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *__pa;
  char v13;
  uint8_t buf[4];
  void **v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    v3 = *__p;
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (__p[1])
      {
        *(_DWORD *)(v3 + 296) = *((_DWORD *)__p + 6);
        v6 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          abm::asString();
          v7 = v13 >= 0 ? &__pa : (void **)__pa;
          v8 = *((_DWORD *)__p + 6);
          *(_DWORD *)buf = 136315394;
          v15 = v7;
          v16 = 1024;
          v17 = v8;
          _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, "#I RAT1: %s (%d)", buf, 0x12u);
          if (v13 < 0)
            operator delete(__pa);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v11 = (std::__shared_weak_count *)__p[2];
    if (v11)
      std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(__p);
}

void sub_1BF3B6628(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;

  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
  {
    v6 = (std::__shared_weak_count *)v1[2];
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v6 = (std::__shared_weak_count *)v1[2];
    if (!v6)
    {
LABEL_5:
      operator delete(v1);
      _Unwind_Resume(a1);
    }
  }
  std::__shared_weak_count::__release_weak(v6);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::setRat2_sync(abm::RadioAccessTechnology)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setRat2_sync(abm::RadioAccessTechnology)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  void **v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *__pa;
  char v13;
  uint8_t buf[4];
  void **v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    v3 = *__p;
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (__p[1])
      {
        *(_DWORD *)(v3 + 344) = *((_DWORD *)__p + 6);
        v6 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          abm::asString();
          v7 = v13 >= 0 ? &__pa : (void **)__pa;
          v8 = *((_DWORD *)__p + 6);
          *(_DWORD *)buf = 136315394;
          v15 = v7;
          v16 = 1024;
          v17 = v8;
          _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, "#I RAT2: %s (%d)", buf, 0x12u);
          if (v13 < 0)
            operator delete(__pa);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v11 = (std::__shared_weak_count *)__p[2];
    if (v11)
      std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(__p);
}

void sub_1BF3B67E4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;

  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
  {
    v6 = (std::__shared_weak_count *)v1[2];
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v6 = (std::__shared_weak_count *)v1[2];
    if (!v6)
    {
LABEL_5:
      operator delete(v1);
      _Unwind_Resume(a1);
    }
  }
  std::__shared_weak_count::__release_weak(v6);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::setPLMN1_sync(std::string)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setPLMN1_sync(std::string)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(char *__p)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _OWORD *v6;
  void **v7;
  char v8;
  __int128 v9;
  char *v10;
  size_t v11;
  NSObject *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  int v16;
  _OWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (!v2)
    goto LABEL_23;
  v3 = *(_QWORD *)__p;
  v4 = std::__shared_weak_count::lock(v2);
  if (!v4)
    goto LABEL_23;
  v5 = v4;
  if (*((_QWORD *)__p + 1))
  {
    v6 = __p + 24;
    v7 = (void **)(v3 + 304);
    if ((char *)(v3 + 304) != __p + 24)
    {
      v8 = __p[47];
      if (*(char *)(v3 + 327) < 0)
      {
        if (v8 >= 0)
          v10 = __p + 24;
        else
          v10 = (char *)*((_QWORD *)__p + 3);
        if (v8 >= 0)
          v11 = __p[47];
        else
          v11 = *((_QWORD *)__p + 4);
        std::string::__assign_no_alias<false>(v7, v10, v11);
      }
      else if (__p[47] < 0)
      {
        std::string::__assign_no_alias<true>(v7, *((void **)__p + 3), *((_QWORD *)__p + 4));
      }
      else
      {
        v9 = *v6;
        *(_QWORD *)(v3 + 320) = *((_QWORD *)__p + 5);
        *(_OWORD *)v7 = v9;
      }
    }
    v12 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      if (__p[47] < 0)
        v6 = *(_OWORD **)v6;
      v16 = 136315138;
      v17 = v6;
      _os_log_impl(&dword_1BF335000, v12, OS_LOG_TYPE_DEFAULT, "#I PLMN1: %s", (uint8_t *)&v16, 0xCu);
    }
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_23:
    if ((__p[47] & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (__p[47] < 0)
LABEL_24:
    operator delete(*((void **)__p + 3));
LABEL_25:
  v15 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  operator delete(__p);
}

void sub_1BF3B69D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  void **v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;

  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
  {
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
      goto LABEL_5;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
    {
LABEL_5:
      v7 = *(std::__shared_weak_count **)(v1 + 16);
      if (!v7)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  operator delete(*v3);
  v7 = *(std::__shared_weak_count **)(v1 + 16);
  if (!v7)
  {
LABEL_6:
    operator delete((void *)v1);
    _Unwind_Resume(a1);
  }
LABEL_9:
  std::__shared_weak_count::__release_weak(v7);
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::setPLMN2_sync(std::string)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setPLMN2_sync(std::string)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(char *__p)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _OWORD *v6;
  void **v7;
  char v8;
  __int128 v9;
  char *v10;
  size_t v11;
  NSObject *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  int v16;
  _OWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (!v2)
    goto LABEL_23;
  v3 = *(_QWORD *)__p;
  v4 = std::__shared_weak_count::lock(v2);
  if (!v4)
    goto LABEL_23;
  v5 = v4;
  if (*((_QWORD *)__p + 1))
  {
    v6 = __p + 24;
    v7 = (void **)(v3 + 352);
    if ((char *)(v3 + 352) != __p + 24)
    {
      v8 = __p[47];
      if (*(char *)(v3 + 375) < 0)
      {
        if (v8 >= 0)
          v10 = __p + 24;
        else
          v10 = (char *)*((_QWORD *)__p + 3);
        if (v8 >= 0)
          v11 = __p[47];
        else
          v11 = *((_QWORD *)__p + 4);
        std::string::__assign_no_alias<false>(v7, v10, v11);
      }
      else if (__p[47] < 0)
      {
        std::string::__assign_no_alias<true>(v7, *((void **)__p + 3), *((_QWORD *)__p + 4));
      }
      else
      {
        v9 = *v6;
        *(_QWORD *)(v3 + 368) = *((_QWORD *)__p + 5);
        *(_OWORD *)v7 = v9;
      }
    }
    v12 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      if (__p[47] < 0)
        v6 = *(_OWORD **)v6;
      v16 = 136315138;
      v17 = v6;
      _os_log_impl(&dword_1BF335000, v12, OS_LOG_TYPE_DEFAULT, "#I PLMN2: %s", (uint8_t *)&v16, 0xCu);
    }
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_23:
    if ((__p[47] & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (__p[47] < 0)
LABEL_24:
    operator delete(*((void **)__p + 3));
LABEL_25:
  v15 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  operator delete(__p);
}

void sub_1BF3B6BD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  void **v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;

  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
  {
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
      goto LABEL_5;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
    {
LABEL_5:
      v7 = *(std::__shared_weak_count **)(v1 + 16);
      if (!v7)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  operator delete(*v3);
  v7 = *(std::__shared_weak_count **)(v1 + 16);
  if (!v7)
  {
LABEL_6:
    operator delete((void *)v1);
    _Unwind_Resume(a1);
  }
LABEL_9:
  std::__shared_weak_count::__release_weak(v7);
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::setCellId_sync(unsigned long long,BootModule::SimSlotIndex)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setCellId_sync(unsigned long long,BootModule::SimSlotIndex)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unsigned int v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  _DWORD v12[2];
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    v3 = *__p;
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (__p[1])
      {
        v6 = __p[3];
        v7 = *((_DWORD *)__p + 8);
        *(_QWORD *)(v3 + 48 * v7 + 328) = v6;
        v8 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          v12[0] = 67109376;
          v12[1] = v7 + 1;
          v13 = 2048;
          v14 = v6;
          _os_log_impl(&dword_1BF335000, v8, OS_LOG_TYPE_DEFAULT, "#I CellId%d: %llu", (uint8_t *)v12, 0x12u);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v11 = (std::__shared_weak_count *)__p[2];
    if (v11)
      std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(__p);
}

void dispatch::detail::group_notify<BootModule::setAreaCode_sync(unsigned long long,BootModule::SimSlotIndex)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setAreaCode_sync(unsigned long long,BootModule::SimSlotIndex)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unsigned int v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  _DWORD v12[2];
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    v3 = *__p;
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (__p[1])
      {
        v6 = __p[3];
        v7 = *((_DWORD *)__p + 8);
        *(_QWORD *)(v3 + 48 * v7 + 336) = v6;
        v8 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          v12[0] = 67109376;
          v12[1] = v7 + 1;
          v13 = 2048;
          v14 = v6;
          _os_log_impl(&dword_1BF335000, v8, OS_LOG_TYPE_DEFAULT, "#I AreaCode%d: %llu", (uint8_t *)v12, 0x12u);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v11 = (std::__shared_weak_count *)__p[2];
    if (v11)
      std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(__p);
}

void dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::bbResetFlag(BOOL)::$_0>(BootModule::bbResetFlag(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::bbResetFlag(BOOL)::$_0,dispatch_queue_s *::default_delete<BootModule::bbResetFlag(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(NSObject ****a1)
{
  NSObject ***v2;
  NSObject **v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  NSObject *v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int16 v14;
  __int16 v15;

  v2 = *a1;
  v3 = **a1;
  if (*((_BYTE *)*a1 + 8))
  {
    v4 = v3[52];
    if (v4)
    {
      dispatch_retain(v3[52]);
      dispatch_group_enter(v4);
    }
    v5 = v3[53];
    v3[53] = v4;
    if (v5)
    {
      dispatch_group_leave(v5);
      dispatch_release(v5);
    }
    v6 = v3[11];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v15 = 0;
      v7 = "#I The baseband reset was detected.";
      v8 = (uint8_t *)&v15;
LABEL_12:
      _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, v7, v8, 2u);
    }
  }
  else
  {
    v9 = v3[53];
    v3[53] = 0;
    if (v9)
    {
      dispatch_group_leave(v9);
      dispatch_release(v9);
    }
    v6 = v3[11];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 0;
      v7 = "#I The baseband reset-flag is reset.";
      v8 = (uint8_t *)&v14;
      goto LABEL_12;
    }
  }
  v10 = v3[55];
  v3[55] = 0;
  if (v10)
  {
    dispatch_resume(v10);
    dispatch_release(v10);
  }
  operator delete(v2);
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1, char *a2, int a3)
{
  const std::locale *v6;
  size_t v7;

  v6 = (const std::locale *)MEMORY[0x1C3B89E10]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x1E0DE4A90]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E0DE4C08]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  v7 = strlen(a2);
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(a1, a2, &a2[v7]) != (std::basic_regex<char> *)&a2[v7])
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_1BF3B70B4(_Unwind_Exception *a1)
{
  std::locale *v1;
  uint64_t v2;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_1BF3B70D0(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char *v15;
  std::basic_regex<char> *v16;
  std::__owns_one_state<char> *v17;
  int v18;
  std::basic_regex<char> *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  std::basic_regex<char> *v30;
  char *v31;
  std::__owns_one_state<char> *v32;
  int v33;
  std::basic_regex<char> *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;

  v6 = operator new(8uLL);
  *v6 = &unk_1E79008E0;
  v7 = operator new(0x10uLL);
  v7[1] = v6;
  v8 = operator new(0x20uLL);
  *v8 = &unk_1E7900938;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      v12 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 56) = v12;
      v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
      if (v13 <= 0x3F)
        goto LABEL_6;
LABEL_11:
      if (v13 != 64)
      {
        if (v13 == 128)
          return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(a1, a2, a3);
        if (v13 == 256)
          return std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
LABEL_38:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
    }
  }
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 56) = v12;
  v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v13 > 0x3F)
    goto LABEL_11;
LABEL_6:
  if (v13)
  {
    if (v13 == 16)
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, a2, a3);
    if (v13 != 32)
      goto LABEL_38;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
  }
  v15 = a2;
  while (1)
  {
    v16 = (std::basic_regex<char> *)v15;
    v15 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v15, a3);
    if (v15 == (char *)v16)
      break;
LABEL_17:
    if (v15 == (char *)v16)
      goto LABEL_23;
  }
  v17 = *(std::__owns_one_state<char> **)(a1 + 56);
  v18 = *(_DWORD *)(a1 + 28);
  v19 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>((std::basic_regex<char> *)a1, v16, (std::basic_regex<char> *)a3);
  if (v19 != v16)
  {
    v15 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v19, (std::basic_regex<char> *)a3, v17, (v18 + 1), (*(_DWORD *)(a1 + 28) + 1));
    goto LABEL_17;
  }
LABEL_23:
  if (v16 == (std::basic_regex<char> *)a2)
  {
    v20 = operator new(0x10uLL);
    v21 = *(_QWORD *)(a1 + 56);
    v22 = *(_QWORD *)(v21 + 8);
    v20[1] = v22;
    *(_QWORD *)(v21 + 8) = v20;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
  if (v16 == (std::basic_regex<char> *)a3)
    return (std::basic_regex<char> *)a3;
  while (2)
  {
    if (LOBYTE(v16->__traits_.__loc_.__locale_) != 124)
      return v16;
    v29 = *(_QWORD *)(a1 + 56);
    v30 = (std::basic_regex<char> *)((char *)&v16->__traits_.__loc_.__locale_ + 1);
    v31 = (char *)&v16->__traits_.__loc_.__locale_ + 1;
    while (2)
    {
      v16 = (std::basic_regex<char> *)v31;
      v31 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v31, a3);
      if (v31 != (char *)v16)
      {
LABEL_32:
        if (v31 == (char *)v16)
          goto LABEL_27;
        continue;
      }
      break;
    }
    v32 = *(std::__owns_one_state<char> **)(a1 + 56);
    v33 = *(_DWORD *)(a1 + 28);
    v34 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>((std::basic_regex<char> *)a1, v16, (std::basic_regex<char> *)a3);
    if (v34 != v16)
    {
      v31 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v34, (std::basic_regex<char> *)a3, v32, (v33 + 1), (*(_DWORD *)(a1 + 28) + 1));
      goto LABEL_32;
    }
LABEL_27:
    if (v16 == v30)
    {
      v35 = operator new(0x10uLL);
      v36 = *(_QWORD *)(a1 + 56);
      v37 = *(_QWORD *)(v36 + 8);
      v35[1] = v37;
      *(_QWORD *)(v36 + 8) = v35;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    v23 = operator new(0x18uLL);
    v24 = *(_QWORD *)(v29 + 8);
    v23[1] = *(_QWORD *)(v12 + 8);
    v23[2] = v24;
    *v23 = &unk_1E7900EF8;
    *(_QWORD *)(v12 + 8) = v23;
    *(_QWORD *)(v29 + 8) = 0;
    v25 = operator new(0x10uLL);
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v25[1] = v26;
    *(_QWORD *)(v29 + 8) = v25;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v27 = operator new(0x10uLL);
    v28 = *(_QWORD *)(v29 + 8);
    *v27 = &unk_1E7900F40;
    v27[1] = v28;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v27;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v29 + 8);
    if (v16 != (std::basic_regex<char> *)a3)
      continue;
    return (std::basic_regex<char> *)a3;
  }
}

void sub_1BF3B74E4(_Unwind_Exception *a1)
{
  void *v1;
  void (__cdecl ***v2)(std::__owns_one_state<char> *__hidden);

  operator delete(v1);
  operator delete(v2);
  (*(void (**)(void *))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1BF3B7520(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(v2 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B89BF4](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BF3B7570(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  char *v7;
  std::basic_regex<char> *v8;
  std::__owns_one_state<char> *v9;
  unsigned int marked_count;
  std::basic_regex<char> *v11;
  std::__node<char> *v12;
  std::__owns_one_state<char> *v13;
  std::__node<char> *first;
  std::__node<char> *v15;
  std::__node<char> *v16;
  std::__node<char> *v17;
  std::__node<char> *v18;
  std::__node<char> *v19;
  std::__node<char> *v20;
  std::__owns_one_state<char> *v21;
  std::basic_regex<char> *v22;
  char *v23;
  std::__owns_one_state<char> *v24;
  unsigned int v25;
  std::basic_regex<char> *v26;
  std::__node<char> *v27;
  std::__owns_one_state<char> *v28;
  std::__node<char> *v29;

  end = a1->__end_;
  v7 = a2;
  while (1)
  {
    v8 = (std::basic_regex<char> *)v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>((uint64_t)a1, v7, a3);
    if (v7 == (char *)v8)
      break;
LABEL_2:
    if (v7 == (char *)v8)
      goto LABEL_6;
  }
  v9 = a1->__end_;
  marked_count = a1->__marked_count_;
  v11 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, v8);
  if (v11 != v8)
  {
    v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v11, (std::basic_regex<char> *)a3, v9, marked_count + 1, a1->__marked_count_ + 1);
    goto LABEL_2;
  }
LABEL_6:
  if (v8 == (std::basic_regex<char> *)a2)
  {
    v12 = (std::__node<char> *)operator new(0x10uLL);
    v13 = a1->__end_;
    first = v13->__first_;
    v12[1].__vftable = (std::__node<char>_vtbl *)first;
    v13->__first_ = v12;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  if (v8 == (std::basic_regex<char> *)a3)
    return a3;
  while (2)
  {
    if (LOBYTE(v8->__traits_.__loc_.__locale_) != 124)
      return (char *)v8;
    v21 = a1->__end_;
    v22 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    v23 = (char *)&v8->__traits_.__loc_.__locale_ + 1;
    while (2)
    {
      v8 = (std::basic_regex<char> *)v23;
      v23 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>((uint64_t)a1, v23, a3);
      if (v23 != (char *)v8)
      {
LABEL_14:
        if (v23 == (char *)v8)
          goto LABEL_17;
        continue;
      }
      break;
    }
    v24 = a1->__end_;
    v25 = a1->__marked_count_;
    v26 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, v8);
    if (v26 != v8)
    {
      v23 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v26, (std::basic_regex<char> *)a3, v24, v25 + 1, a1->__marked_count_ + 1);
      goto LABEL_14;
    }
LABEL_17:
    if (v8 == v22)
    {
      v27 = (std::__node<char> *)operator new(0x10uLL);
      v28 = a1->__end_;
      v29 = v28->__first_;
      v27[1].__vftable = (std::__node<char>_vtbl *)v29;
      v28->__first_ = v27;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    v15 = (std::__node<char> *)operator new(0x18uLL);
    v16 = v21->__first_;
    v15[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
    v15[2].__vftable = (std::__node<char>_vtbl *)v16;
    v15->__vftable = (std::__node<char>_vtbl *)&unk_1E7900EF8;
    end->__first_ = v15;
    v21->__first_ = 0;
    v17 = (std::__node<char> *)operator new(0x10uLL);
    v18 = a1->__end_->__first_;
    v17[1].__vftable = (std::__node<char>_vtbl *)v18;
    v21->__first_ = v17;
    a1->__end_->__first_ = 0;
    v19 = (std::__node<char> *)operator new(0x10uLL);
    v20 = v21->__first_;
    v19->__vftable = (std::__node<char>_vtbl *)&unk_1E7900F40;
    v19[1].__vftable = (std::__node<char>_vtbl *)v20;
    a1->__end_->__first_ = v19;
    a1->__end_ = (std::__owns_one_state<char> *)v21->__first_;
    if (v8 != (std::basic_regex<char> *)a3)
      continue;
    return a3;
  }
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(uint64_t a1, char *a2, char *a3)
{
  std::basic_regex<char> *v3;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  std::basic_regex<char> *v10;
  std::__owns_one_state<char> *v11;
  int v12;
  char *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v3 = (std::basic_regex<char> *)a2;
  if (a2 == a3)
    return a2;
  if (*a2 == 94)
  {
    v6 = operator new(0x18uLL);
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *v6 = &unk_1E7900A30;
    v6[1] = v9;
    *((_BYTE *)v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v3 = (std::basic_regex<char> *)((char *)v3 + 1);
  }
  if (v3 != (std::basic_regex<char> *)a3)
  {
    while (v3 != (std::basic_regex<char> *)a3)
    {
      v10 = v3;
      v11 = *(std::__owns_one_state<char> **)(a1 + 56);
      v12 = *(_DWORD *)(a1 + 28);
      v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, (uint64_t)v10, a3);
      if (v13 != (char *)v10)
      {
        v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, v11, (v12 + 1), (*(_DWORD *)(a1 + 28) + 1));
        if (v3 != v10)
          continue;
      }
      if ((char *)&v10->__traits_.__loc_.__locale_ + 1 != a3 || LOBYTE(v10->__traits_.__loc_.__locale_) != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v14 = operator new(0x18uLL);
      v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_QWORD *)(v16 + 8);
      *v14 = &unk_1E7900A78;
      v14[1] = v17;
      *((_BYTE *)v14 + 16) = v15;
      *(_QWORD *)(v16 + 8) = v14;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  uint64_t v6;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  uint64_t v9;
  std::basic_regex<char> *v10;
  std::basic_regex<char> *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v3 = a3;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v7 == a2)
    goto LABEL_13;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v7, v3);
  }
  while (v7 != v8);
  if (v8 == a2)
LABEL_13:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  if (v8 != v3)
  {
    while (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
    {
      v9 = *(_QWORD *)(a1 + 56);
      v10 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
      v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1), v3);
      if (v11 == (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1))
        goto LABEL_13;
      do
      {
        v8 = v11;
        v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v11, v3);
      }
      while (v11 != v8);
      if (v8 == v10)
        goto LABEL_13;
      v12 = operator new(0x18uLL);
      v13 = *(_QWORD *)(v9 + 8);
      v12[1] = *(_QWORD *)(v6 + 8);
      v12[2] = v13;
      *v12 = &unk_1E7900EF8;
      *(_QWORD *)(v6 + 8) = v12;
      *(_QWORD *)(v9 + 8) = 0;
      v14 = operator new(0x10uLL);
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v14[1] = v15;
      *(_QWORD *)(v9 + 8) = v14;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
      v16 = operator new(0x10uLL);
      v17 = *(_QWORD *)(v9 + 8);
      *v16 = &unk_1E7900F40;
      v16[1] = v17;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(v9 + 8);
      if (v8 == v3)
        return v3;
    }
    return v8;
  }
  return v3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v10 = operator new(0x10uLL);
    v11 = *(_QWORD *)(v6 + 8);
    v10[1] = v11;
    *(_QWORD *)(v6 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = v8 + 1;
    if (v9 == a3)
      return a3;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, __s, v8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = v8 + 1;
    if (v9 == a3)
      return a3;
  }
  v12 = *(_QWORD *)(a1 + 56);
  do
  {
    v21 = (char *)memchr(v9, 10, a3 - v9);
    if (v21)
      v22 = v21;
    else
      v22 = a3;
    if (v22 == v9)
    {
      v13 = operator new(0x10uLL);
      v14 = *(_QWORD *)(v12 + 8);
      v13[1] = v14;
      *(_QWORD *)(v12 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v9, v22);
    }
    v15 = operator new(0x18uLL);
    v16 = *(_QWORD *)(v12 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &unk_1E7900EF8;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v12 + 8) = 0;
    v17 = operator new(0x10uLL);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v17[1] = v18;
    *(_QWORD *)(v12 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = operator new(0x10uLL);
    v20 = *(_QWORD *)(v12 + 8);
    *v19 = &unk_1E7900F40;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    v12 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(a1 + 56) = v12;
    if (v22 == a3)
      v9 = v22;
    else
      v9 = v22 + 1;
  }
  while (v9 != a3);
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(uint64_t a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  uint64_t v6;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  std::basic_regex<char> *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::basic_regex<char> *v21;
  std::basic_regex<char> *v22;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v10 = operator new(0x10uLL);
    v11 = *(_QWORD *)(v6 + 8);
    v10[1] = v11;
    *(_QWORD *)(v6 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v9 == a3)
      return a3;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, __s, v8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v9 == a3)
      return a3;
  }
  v12 = *(_QWORD *)(a1 + 56);
  do
  {
    v21 = (std::basic_regex<char> *)memchr(v9, 10, (char *)a3 - (char *)v9);
    if (v21)
      v22 = v21;
    else
      v22 = a3;
    if (v22 == v9)
    {
      v13 = operator new(0x10uLL);
      v14 = *(_QWORD *)(v12 + 8);
      v13[1] = v14;
      *(_QWORD *)(v12 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, v9, v22);
    }
    v15 = operator new(0x18uLL);
    v16 = *(_QWORD *)(v12 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &unk_1E7900EF8;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v12 + 8) = 0;
    v17 = operator new(0x10uLL);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v17[1] = v18;
    *(_QWORD *)(v12 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = operator new(0x10uLL);
    v20 = *(_QWORD *)(v12 + 8);
    *v19 = &unk_1E7900F40;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    v12 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(a1 + 56) = v12;
    if (v22 == a3)
      v9 = v22;
    else
      v9 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
  }
  while (v9 != a3);
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B89BF4](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BF3B7E6C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF53F950)
    return a1 + 24;
  if (((v3 & 0x80000001BF53F950 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF53F950))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF53F950 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  operator delete(this);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(uint64_t a1, char *a2, char *a3)
{
  int v6;
  char *v7;
  BOOL v8;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int v20;
  __int128 v21;
  char *v22;
  unsigned int v23;
  uint64_t v24;
  __int128 v25;
  unsigned int marked_count;
  std::basic_regex<char> v27;

  if (a2 == a3)
    return a2;
  v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        v15 = a2[1];
        if (v15 == 66)
        {
          v16 = (char *)operator new(0x30uLL);
          v24 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v16 = &unk_1E7900AC0;
          *((_QWORD *)v16 + 1) = v24;
          std::locale::locale((std::locale *)v16 + 2, (const std::locale *)a1);
          *(_OWORD *)(v16 + 24) = *(_OWORD *)(a1 + 8);
          v16[40] = 1;
        }
        else
        {
          if (v15 != 98)
            return a2;
          v16 = (char *)operator new(0x30uLL);
          v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v16 = &unk_1E7900AC0;
          *((_QWORD *)v16 + 1) = v17;
          std::locale::locale((std::locale *)v16 + 2, (const std::locale *)a1);
          *(_OWORD *)(v16 + 24) = *(_OWORD *)(a1 + 8);
          v16[40] = 0;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        return a2 + 2;
      }
      return a2;
    }
    if (v6 != 94)
      return a2;
    v10 = operator new(0x18uLL);
    v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(v12 + 8);
LABEL_14:
    *v10 = v14 + 16;
    v10[1] = v13;
    *((_BYTE *)v10 + 16) = v11;
    *(_QWORD *)(v12 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return a2 + 1;
  }
  if (v6 == 36)
  {
    v10 = operator new(0x18uLL);
    v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(v12 + 8);
    goto LABEL_14;
  }
  v8 = v6 == 40;
  v7 = a2 + 1;
  v8 = !v8 || v7 == a3;
  if (v8)
    return a2;
  v8 = *v7 == 63;
  v18 = a2 + 2;
  if (!v8 || v18 == a3)
    return a2;
  v20 = *v18;
  if (v20 == 33)
  {
    *(_QWORD *)&v25 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v27.__loop_count_ = v25;
    *(_OWORD *)&v27.__start_.__cntrl_ = v25;
    *(_OWORD *)&v27.__traits_.__loc_.__locale_ = v25;
    *(_OWORD *)&v27.__traits_.__col_ = v25;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v27);
    v27.__flags_ = *(_DWORD *)(a1 + 24);
    v22 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v27, a2 + 3, a3);
    marked_count = v27.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v27, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += marked_count;
    if (v22 == a3 || *v22 != 41)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    goto LABEL_32;
  }
  if (v20 != 61)
    return a2;
  *(_QWORD *)&v21 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v27.__loop_count_ = v21;
  *(_OWORD *)&v27.__start_.__cntrl_ = v21;
  *(_OWORD *)&v27.__traits_.__loc_.__locale_ = v21;
  *(_OWORD *)&v27.__traits_.__col_ = v21;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v27);
  v27.__flags_ = *(_DWORD *)(a1 + 24);
  v22 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v27, a2 + 3, a3);
  v23 = v27.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v27, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v23;
  if (v22 == a3 || *v22 != 41)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_32:
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v27.__traits_.__loc_);
  return v22 + 1;
}

void sub_1BF3B836C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_1BF3B8380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_1BF3B8394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_1BF3B83A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(std::basic_regex<char> *this, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  int *p_open_count;
  char *v7;
  std::__node<char> *v8;
  std::__owns_one_state<char> *v9;
  std::__node<char> *v10;
  std::__node<char> *v12;
  unsigned int marked_count;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  char *v16;
  std::__node<char> *v17;
  std::__owns_one_state<char> *v18;
  std::__node<char> *v19;

  v3 = a2;
  if (a2 != a3)
  {
    switch(LOBYTE(a2->__traits_.__loc_.__locale_))
    {
      case '(':
        if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1) == a3)
          goto LABEL_26;
        if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 2) != a3
          && BYTE1(a2->__traits_.__loc_.__locale_) == 63
          && BYTE2(a2->__traits_.__loc_.__locale_) == 58)
        {
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, (char *)&a2->__traits_.__loc_.__locale_ + 3, (char *)a3);
          if (v7 == (char *)a3)
            goto LABEL_26;
          v3 = (std::basic_regex<char> *)v7;
          if (*v7 != 41)
            goto LABEL_26;
        }
        else
        {
          if ((this->__flags_ & 2) != 0)
          {
            marked_count = this->__marked_count_;
          }
          else
          {
            v12 = (std::__node<char> *)operator new(0x18uLL);
            marked_count = this->__marked_count_ + 1;
            this->__marked_count_ = marked_count;
            end = this->__end_;
            first = end->__first_;
            v12->__vftable = (std::__node<char>_vtbl *)&unk_1E7900D90;
            v12[1].__vftable = (std::__node<char>_vtbl *)first;
            LODWORD(v12[2].__vftable) = marked_count;
            end->__first_ = v12;
            this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          }
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, (char *)&v3->__traits_.__loc_.__locale_ + 1, (char *)a3);
          if (v16 == (char *)a3 || (v3 = (std::basic_regex<char> *)v16, *v16 != 41))
LABEL_26:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          if ((this->__flags_ & 2) == 0)
          {
            v17 = (std::__node<char> *)operator new(0x18uLL);
            v18 = this->__end_;
            v19 = v18->__first_;
            v17->__vftable = (std::__node<char>_vtbl *)&unk_1E7900DD8;
            v17[1].__vftable = (std::__node<char>_vtbl *)v19;
            LODWORD(v17[2].__vftable) = marked_count;
            v18->__first_ = v17;
            this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          }
        }
        --*p_open_count;
LABEL_23:
        v3 = (std::basic_regex<char> *)((char *)v3 + 1);
        break;
      case ')':
      case ',':
      case '-':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
      case '<':
      case '=':
      case '>':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
      case '*':
      case '+':
      case '?':
        goto LABEL_25;
      case '.':
        v8 = (std::__node<char> *)operator new(0x10uLL);
        v9 = this->__end_;
        v10 = v9->__first_;
        v8->__vftable = (std::__node<char>_vtbl *)&unk_1E7900B50;
        v8[1].__vftable = (std::__node<char>_vtbl *)v10;
        v9->__first_ = v8;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        goto LABEL_23;
      case '[':
        return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, (char *)a2, (char *)a3);
      case '\\':
        return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      default:
        if (LOBYTE(a2->__traits_.__loc_.__locale_) == 123)
LABEL_25:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
    }
  }
  return v3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  int v6;
  int locale_low;
  std::basic_regex<char> *v8;
  char *v9;
  size_t v10;
  char *v11;
  int v12;
  int v13;
  char *v14;
  int v15;
  int v16;
  std::basic_regex<char> *v17;
  unsigned __int8 *v18;
  BOOL v20;
  std::basic_regex<char> *v21;
  BOOL v22;
  char *v23;
  size_t v24;
  std::basic_regex<char> *v25;
  int v26;
  int v27;
  std::basic_regex<char> *v28;
  int v29;
  std::basic_regex<char> *v30;
  _BYTE *v31;

  if (this == a3)
    return this;
  v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 62)
  {
    if (locale_low == 42)
    {
      v8 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (v6)
        v20 = 1;
      else
        v20 = v8 == a3;
      if (!v20 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        v9 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        v10 = 0;
        goto LABEL_35;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v24 = 0;
      goto LABEL_44;
    }
    if (locale_low == 43)
    {
      v8 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (!v6 && v8 != a3 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        v9 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        v10 = 1;
LABEL_35:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v10, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 0);
        return (std::basic_regex<char> *)v9;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v24 = 1;
      goto LABEL_44;
    }
    return this;
  }
  if (locale_low == 63)
  {
    v21 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    if (v6)
      v22 = 1;
    else
      v22 = v21 == a3;
    if (v22 || LOBYTE(v21->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 1);
      return v21;
    }
    else
    {
      v23 = (char *)&this->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v23;
    }
  }
  else
  {
    if (locale_low != 123)
      return this;
    v11 = (char *)&this->__traits_.__loc_.__locale_ + 1;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_71;
    v12 = *v11;
    if ((v12 & 0xF8) != 0x30 && (v12 & 0xFE) != 0x38)
      goto LABEL_71;
    v13 = v12 - 48;
    v14 = (char *)&this->__traits_.__loc_.__locale_ + 2;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_19:
      v14 = (char *)a3;
    }
    else
    {
      while (1)
      {
        v15 = *v14;
        if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38)
          break;
        if (v13 >= 214748364)
          goto LABEL_71;
        v13 = v15 + 10 * v13 - 48;
        if (++v14 == (char *)a3)
          goto LABEL_19;
      }
    }
    if (v14 == v11)
      goto LABEL_71;
    if (v14 == (char *)a3)
      goto LABEL_72;
    v16 = *v14;
    if (v16 != 44)
    {
      if (v16 == 125)
      {
        v17 = (std::basic_regex<char> *)(v14 + 1);
        if (v6 || v17 == a3 || LOBYTE(v17->__traits_.__loc_.__locale_) != 63)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v13, a4, __mexp_begin, __mexp_end, 1);
          return v17;
        }
        else
        {
          v18 = (unsigned __int8 *)(v14 + 2);
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v13, a4, __mexp_begin, __mexp_end, 0);
          return (std::basic_regex<char> *)v18;
        }
      }
LABEL_71:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    }
    v25 = (std::basic_regex<char> *)(v14 + 1);
    if (v14 + 1 == (char *)a3)
      goto LABEL_71;
    v26 = LOBYTE(v25->__traits_.__loc_.__locale_);
    if (v26 == 125)
    {
      v8 = (std::basic_regex<char> *)(v14 + 2);
      if (!v6 && v8 != a3 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        v10 = v13;
        v9 = v14 + 3;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        goto LABEL_35;
      }
      v24 = v13;
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
LABEL_44:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v24, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
      return v8;
    }
    if ((v26 & 0xF8) != 0x30 && (v26 & 0xFE) != 0x38)
      goto LABEL_72;
    v27 = v26 - 48;
    v28 = (std::basic_regex<char> *)(v14 + 2);
    if (v28 == a3)
    {
LABEL_60:
      v28 = a3;
    }
    else
    {
      while (1)
      {
        v29 = LOBYTE(v28->__traits_.__loc_.__locale_);
        if ((v29 & 0xF8) != 0x30 && (v29 & 0xFE) != 0x38)
          break;
        if (v27 >= 214748364)
          goto LABEL_71;
        v27 = v29 + 10 * v27 - 48;
        v28 = (std::basic_regex<char> *)((char *)v28 + 1);
        if (v28 == a3)
          goto LABEL_60;
      }
    }
    if (v28 == v25 || v28 == a3 || LOBYTE(v28->__traits_.__loc_.__locale_) != 125)
LABEL_72:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    if (v27 < v13)
      goto LABEL_71;
    v30 = (std::basic_regex<char> *)((char *)&v28->__traits_.__loc_.__locale_ + 1);
    if (v6 || v30 == a3 || LOBYTE(v30->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v27, a4, __mexp_begin, __mexp_end, 1);
      return v30;
    }
    else
    {
      v31 = (char *)&v28->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v27, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v31;
    }
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x1C3B89E10]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v2, MEMORY[0x1E0DE4A90]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E0DE4C08]);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_1BF3B8A54(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  char *v8;
  std::__node<char> *first;
  std::__shared_weak_count *cntrl;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v8 = (char *)operator new(0x58uLL);
  first = this->__end_->__first_;
  *(_QWORD *)v8 = &unk_1E7900B08;
  *((_QWORD *)v8 + 1) = first;
  std::locale::locale((std::locale *)v8 + 2, &a2->__traits_.__loc_);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)&a2->__traits_.__ct_;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)&a2->__flags_;
  cntrl = a2->__start_.__cntrl_;
  *((_QWORD *)v8 + 7) = a2->__start_.__ptr_;
  *((_QWORD *)v8 + 8) = cntrl;
  if (cntrl)
  {
    p_shared_owners = (unint64_t *)&cntrl->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  *((_QWORD *)v8 + 9) = a2->__end_;
  *((_DWORD *)v8 + 20) = a4;
  v8[84] = a3;
  this->__end_->__first_ = (std::__node<char> *)v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B89BF4](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BF3B8B58(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2;

  if (!*(_BYTE *)(a2 + 92))
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
LABEL_11:
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
    return result;
  }
  if (*(_QWORD *)(a2 + 16) == *(_QWORD *)(a2 + 8) && (*(_BYTE *)(a2 + 88) & 1) == 0)
    goto LABEL_11;
LABEL_12:
  *(_DWORD *)a2 = -993;
  *(_QWORD *)(a2 + 80) = 0;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E7900AC0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E7900AC0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_19;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 != v3)
  {
    if (v4 == v2)
    {
      v5 = *(_DWORD *)(a2 + 88);
      if ((v5 & 0x80) == 0)
      {
        if ((v5 & 4) == 0)
        {
          v6 = *v2;
          if (v6 == 95)
            goto LABEL_17;
          goto LABEL_15;
        }
        goto LABEL_19;
      }
    }
    v7 = *(v4 - 1);
    v8 = *v4;
    if (v7 == 95
      || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0)
    {
      v9 = 1;
      if ((_DWORD)v8 == 95)
        goto LABEL_24;
    }
    else
    {
      v9 = 0;
      if ((_DWORD)v8 == 95)
        goto LABEL_24;
    }
    if ((v8 & 0x80) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) == 0)
    {
      if (*(_BYTE *)(result + 40) == (v9 != 0))
        goto LABEL_20;
      goto LABEL_27;
    }
LABEL_24:
    if (*(_BYTE *)(result + 40) != (v9 != 1))
      goto LABEL_27;
    goto LABEL_20;
  }
  if ((*(_BYTE *)(a2 + 88) & 8) == 0)
  {
    v6 = *(v3 - 1);
    if (v6 == 95)
      goto LABEL_17;
LABEL_15:
    if ((v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
    {
LABEL_17:
      if (*(_BYTE *)(result + 40) != 1)
        goto LABEL_27;
LABEL_20:
      *(_DWORD *)a2 = -993;
      *(_QWORD *)(a2 + 80) = 0;
      return result;
    }
  }
LABEL_19:
  if (!*(_BYTE *)(result + 40))
    goto LABEL_20;
LABEL_27:
  v10 = *(_QWORD *)(result + 8);
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  std::locale *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void (__cdecl **v6)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E7900B08;
  v2 = (std::locale *)(a1 + 2);
  v3 = (std::__shared_weak_count *)a1[8];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  std::locale::~locale(v2);
  v6 = a1[1];
  if (v6)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v6 + 1))(v6);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(std::locale *a1)
{
  std::locale *v2;
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::locale::__imp *v6;

  a1->__locale_ = (std::locale::__imp *)&unk_1E7900B08;
  v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale)
  {
    p_shared_owners = (unint64_t *)&locale->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
      std::__shared_weak_count::__release_weak(locale);
    }
  }
  std::locale::~locale(v2);
  v6 = a1[1].__locale_;
  if (v6)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v6 + 8))(v6);
  operator delete(a1);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::vector<std::csub_match>::size_type v5;
  uint64_t v6;
  const char *v7;
  BOOL v8;
  char v9;
  std::sub_match<const char *> *begin;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  std::sub_match<const char *> *v16;
  uint64_t v17;
  std::vector<std::csub_match> __p;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v20 = 0xAAAAAAAAAAAAAAAALL;
  v22 = 0xAAAAAAAAAAAAAA00;
  v24 = v4;
  v21 = 0;
  v23 = 0uLL;
  LOBYTE(v24) = 0;
  BYTE8(v24) = 0;
  v25 = 0;
  memset(&__p, 0, sizeof(__p));
  v5 = (*(_DWORD *)(a1 + 44) + 1);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)&v19 = *(_QWORD *)(a2 + 24);
  *((_QWORD *)&v19 + 1) = v19;
  LOBYTE(v20) = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v5, (std::vector<std::csub_match>::const_reference)&v19);
  *((_QWORD *)&v20 + 1) = v6;
  v21 = v6;
  LOBYTE(v22) = 0;
  v23 = v19;
  LOBYTE(v24) = v20;
  v25 = v6;
  BYTE8(v24) = 1;
  v7 = *(const char **)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v8 = v7 == *(const char **)(a2 + 8);
  else
    v8 = 0;
  v9 = v8;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v7, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v9))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  begin = __p.__begin_;
  v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v11 < 2)
  {
LABEL_13:
    if (!begin)
      return;
    goto LABEL_14;
  }
  v12 = 0;
  v13 = *(_DWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = 1;
  do
  {
    v16 = &begin[v15];
    v17 = v14 + 24 * (v13 + v12);
    *(std::pair<const char *, const char *> *)v17 = v16->std::pair<const char *, const char *>;
    *(_BYTE *)(v17 + 16) = v16->matched;
    v15 = (v12 + 2);
    ++v12;
  }
  while (v11 > v15);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_1BF3B91EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  char *v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  void *v25;
  void *v26;
  __int128 v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void *v33;
  void *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  _BYTE v45[96];
  std::vector<std::csub_match>::value_type __x;
  char *v47;
  char *v48;
  unint64_t v49;

  v47 = 0;
  v48 = 0;
  v49 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    __x.second = a3;
    *(_QWORD *)&__x.matched = 0xAAAAAAAAAAAAAA00;
    __x.first = a3;
    *(_DWORD *)v45 = 0;
    memset(&v45[8], 0, 85);
    v48 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v47, (uint64_t)v45);
    if (*(_QWORD *)&v45[56])
    {
      *(_QWORD *)&v45[64] = *(_QWORD *)&v45[56];
      operator delete(*(void **)&v45[56]);
    }
    if (*(_QWORD *)&v45[32])
    {
      *(_QWORD *)&v45[40] = *(_QWORD *)&v45[32];
      operator delete(*(void **)&v45[32]);
    }
    v13 = v48;
    *((_DWORD *)v48 - 24) = 0;
    *((_QWORD *)v13 - 11) = a2;
    *((_QWORD *)v13 - 10) = a2;
    *((_QWORD *)v13 - 9) = a3;
    v14 = *((_QWORD *)v13 - 8);
    v15 = *(unsigned int *)(a1 + 28);
    v16 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v13 - 7) - v14) >> 3);
    if (v15 <= v16)
    {
      if (v15 < v16)
        *((_QWORD *)v13 - 7) = v14 + 24 * v15;
    }
    else
    {
      std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v13 - 64), v15 - v16, &__x);
      v13 = v48;
    }
    v17 = *((_QWORD *)v13 - 5);
    v18 = *(unsigned int *)(a1 + 32);
    v19 = (*((_QWORD *)v13 - 4) - v17) >> 4;
    if (v18 <= v19)
    {
      if (v18 < v19)
        *((_QWORD *)v13 - 4) = v17 + 16 * v18;
    }
    else
    {
      std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v13 - 40), v18 - v19);
      v13 = v48;
    }
    *((_QWORD *)v13 - 2) = v6;
    *((_DWORD *)v13 - 2) = a5;
    *(v13 - 4) = a6;
    v20 = 1;
    while (2)
    {
      if ((v20 & 0xFFF) == 0 && (int)(v20 >> 12) >= (int)a3 - (int)a2)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v22 = *((_QWORD *)v13 - 2);
      if (v22)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v22 + 16))(v22, v13 - 96);
      switch(*((_DWORD *)v13 - 24))
      {
        case 0xFFFFFC18:
          v23 = (const char *)*((_QWORD *)v13 - 10);
          if ((a5 & 0x20) != 0 && v23 == a2 || (a5 & 0x1000) != 0 && v23 != a3)
            goto LABEL_26;
          v36 = *a4;
          *(_QWORD *)v36 = a2;
          *(_QWORD *)(v36 + 8) = v23;
          *(_BYTE *)(v36 + 16) = 1;
          v37 = *((_QWORD *)v13 - 8);
          v38 = *((_QWORD *)v13 - 7) - v37;
          if (v38)
          {
            v39 = 0xAAAAAAAAAAAAAAABLL * (v38 >> 3);
            v40 = (_BYTE *)(v37 + 16);
            v41 = 1;
            do
            {
              v42 = v36 + 24 * v41;
              *(_OWORD *)v42 = *((_OWORD *)v40 - 1);
              v43 = *v40;
              v40 += 24;
              *(_BYTE *)(v42 + 16) = v43;
            }
            while (v39 > v41++);
          }
          v6 = 1;
          v21 = v47;
          if (!v47)
            return v6;
          goto LABEL_37;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_16;
        case 0xFFFFFC1F:
LABEL_26:
          v24 = v48;
          v25 = (void *)*((_QWORD *)v48 - 5);
          if (v25)
          {
            *((_QWORD *)v48 - 4) = v25;
            operator delete(v25);
          }
          v26 = (void *)*((_QWORD *)v24 - 8);
          if (v26)
          {
            *((_QWORD *)v24 - 7) = v26;
            operator delete(v26);
          }
          v48 = v24 - 96;
          goto LABEL_16;
        case 0xFFFFFC20:
          *(_QWORD *)&v27 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&v45[64] = v27;
          *(_OWORD *)&v45[80] = v27;
          *(_OWORD *)&v45[32] = v27;
          *(_OWORD *)&v45[48] = v27;
          *(_OWORD *)v45 = v27;
          *(_OWORD *)&v45[16] = v27;
          std::__state<char>::__state((uint64_t)v45, (__int128 *)v13 - 6);
          (*(void (**)(_QWORD, uint64_t, char *))(**((_QWORD **)v13 - 2) + 24))(*((_QWORD *)v13 - 2), 1, v13 - 96);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(**(_QWORD **)&v45[80] + 24))(*(_QWORD *)&v45[80], 0, v45);
          v28 = v48;
          if ((unint64_t)v48 >= v49)
          {
            v48 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v47, (uint64_t)v45);
            if (*(_QWORD *)&v45[56])
            {
              *(_QWORD *)&v45[64] = *(_QWORD *)&v45[56];
              operator delete(*(void **)&v45[56]);
            }
          }
          else
          {
            v29 = *(_OWORD *)&v45[16];
            *(_OWORD *)v48 = *(_OWORD *)v45;
            *((_OWORD *)v28 + 1) = v29;
            *((_QWORD *)v28 + 4) = 0;
            *((_QWORD *)v28 + 5) = 0;
            *((_QWORD *)v28 + 6) = 0;
            *((_QWORD *)v28 + 7) = 0;
            *((_OWORD *)v28 + 2) = *(_OWORD *)&v45[32];
            *((_QWORD *)v28 + 6) = *(_QWORD *)&v45[48];
            memset(&v45[32], 0, 24);
            *((_QWORD *)v28 + 8) = 0;
            *((_QWORD *)v28 + 9) = 0;
            *(_OWORD *)(v28 + 56) = *(_OWORD *)&v45[56];
            *((_QWORD *)v28 + 9) = *(_QWORD *)&v45[72];
            memset(&v45[56], 0, 24);
            v30 = *(_QWORD *)&v45[80];
            *(_QWORD *)(v28 + 85) = *(_QWORD *)&v45[85];
            *((_QWORD *)v28 + 10) = v30;
            v48 = v28 + 96;
          }
          if (*(_QWORD *)&v45[32])
          {
            *(_QWORD *)&v45[40] = *(_QWORD *)&v45[32];
            operator delete(*(void **)&v45[32]);
          }
LABEL_16:
          v21 = v47;
          v13 = v48;
          ++v20;
          if (v47 != v48)
            continue;
          v6 = 0;
          if (v47)
          {
LABEL_37:
            v31 = v48;
            v32 = v21;
            if (v48 != v21)
            {
              do
              {
                v33 = (void *)*((_QWORD *)v31 - 5);
                if (v33)
                {
                  *((_QWORD *)v31 - 4) = v33;
                  operator delete(v33);
                }
                v34 = (void *)*((_QWORD *)v31 - 8);
                if (v34)
                {
                  *((_QWORD *)v31 - 7) = v34;
                  operator delete(v34);
                }
                v31 -= 96;
              }
              while (v31 != v21);
              v32 = v47;
            }
            v48 = v21;
            operator delete(v32);
          }
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  return v6;
}

void sub_1BF3B9618(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_1BF3B962C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::__state<char>::~__state((uint64_t *)va);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v3 - 112));
  _Unwind_Resume(a1);
}

void sub_1BF3B9674(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_1BF3B9688(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *begin;
  unint64_t v8;
  std::vector<std::csub_match>::size_type v9;
  unint64_t v10;
  uint64_t v11;
  std::sub_match<const char *> *v12;
  std::vector<std::csub_match>::size_type v13;
  std::sub_match<const char *> *v14;
  std::vector<std::csub_match>::pointer end;
  unint64_t v16;
  std::vector<std::csub_match>::size_type v17;
  std::vector<std::csub_match>::value_type *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> v21;

  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) < __n)
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_26;
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= __n)
      v9 = __n;
    v10 = v8 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
LABEL_26:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = v10;
    v12 = (std::sub_match<const char *> *)operator new(24 * v10);
    this->__begin_ = v12;
    this->__end_ = v12;
    this->__end_cap_.__value_ = &v12[v11];
    v13 = 24 * __n;
    v14 = &v12[__n];
    do
    {
      v12->std::pair<const char *, const char *> = __u->std::pair<const char *, const char *>;
      *(_QWORD *)&v12->matched = *(_QWORD *)&__u->matched;
      ++v12;
      v13 -= 24;
    }
    while (v13);
    goto LABEL_25;
  }
  end = this->__end_;
  v16 = end - begin;
  if (v16 >= __n)
    v17 = __n;
  else
    v17 = end - begin;
  if (v17)
  {
    v18 = begin;
    do
    {
      *v18++ = *__u;
      --v17;
    }
    while (v17);
  }
  if (__n <= v16)
  {
    v14 = &begin[__n];
LABEL_25:
    this->__end_ = v14;
    return;
  }
  v19 = &end[__n - v16];
  v20 = 24 * __n - 24 * v16;
  do
  {
    v21 = __u->std::pair<const char *, const char *>;
    *(_QWORD *)&end->matched = *(_QWORD *)&__u->matched;
    end->std::pair<const char *, const char *> = v21;
    ++end;
    v20 -= 24;
  }
  while (v20);
  this->__end_ = v19;
}

_QWORD *std::__state<char>::~__state(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B89BF4](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BF3B98AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B89BF4](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BF3B98F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void **std::vector<std::__state<char>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 5);
        if (v5)
        {
          *((_QWORD *)v3 - 4) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 8);
        if (v6)
        {
          *((_QWORD *)v3 - 7) = v6;
          operator delete(v6);
        }
        v3 -= 96;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  void *v22;
  void *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[96 * v3];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v9 + 85) = *(_QWORD *)(a2 + 85);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = v11;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v13 = v9 + 96;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v9[v16];
      v18 = &v15[v16];
      v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((_QWORD *)v17 - 7) = 0;
      *((_QWORD *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((_QWORD *)v17 - 6) = *(_QWORD *)&v15[v16 - 48];
      *((_QWORD *)v18 - 8) = 0;
      *((_QWORD *)v18 - 7) = 0;
      *((_QWORD *)v18 - 6) = 0;
      *((_QWORD *)v17 - 4) = 0;
      *((_QWORD *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((_QWORD *)v17 - 3) = *(_QWORD *)&v15[v16 - 24];
      *((_QWORD *)v18 - 5) = 0;
      *((_QWORD *)v18 - 4) = 0;
      *((_QWORD *)v18 - 3) = 0;
      v20 = *(_QWORD *)&v15[v16 - 16];
      *(_QWORD *)(v17 - 11) = *(_QWORD *)&v15[v16 - 11];
      *((_QWORD *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    v15 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v22 = (void *)*((_QWORD *)v21 - 5);
      if (v22)
      {
        *((_QWORD *)v21 - 4) = v22;
        operator delete(v22);
      }
      v23 = (void *)*((_QWORD *)v21 - 8);
      if (v23)
      {
        *((_QWORD *)v21 - 7) = v23;
        operator delete(v23);
      }
      v21 -= 96;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  std::sub_match<const char *> *value;
  std::vector<std::csub_match>::pointer end;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::sub_match<const char *> *v13;
  std::vector<std::csub_match>::size_type v14;
  std::pair<const char *, const char *> v15;
  std::sub_match<const char *> *v16;
  std::vector<std::csub_match>::size_type v17;
  std::sub_match<const char *> *v18;
  std::pair<const char *, const char *> *v19;
  std::pair<const char *, const char *> v20;
  std::vector<std::csub_match>::pointer begin;
  std::pair<const char *, const char *> v22;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      v13 = &end[__n];
      v14 = 24 * __n;
      do
      {
        v15 = __x->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__x->matched;
        end->std::pair<const char *, const char *> = v15;
        ++end;
        v14 -= 24;
      }
      while (v14);
      end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(24 * v11);
    }
    else
    {
      v12 = 0;
    }
    v16 = (std::sub_match<const char *> *)&v12[24 * v8];
    v17 = 24 * __n;
    v18 = &v16[__n];
    v19 = v16;
    do
    {
      v20 = __x->std::pair<const char *, const char *>;
      v19[1].first = *(const char **)&__x->matched;
      *v19 = v20;
      v19 = (std::pair<const char *, const char *> *)((char *)v19 + 24);
      v17 -= 24;
    }
    while (v17);
    begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        v22 = end[-1].std::pair<const char *, const char *>;
        *(_QWORD *)&v16[-1].matched = *(_QWORD *)&end[-1].matched;
        v16[-1].std::pair<const char *, const char *> = v22;
        --v16;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v16;
    this->__end_ = v18;
    this->__end_cap_.__value_ = (std::sub_match<const char *> *)&v12[24 * v11];
    if (end)
      operator delete(end);
  }
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  std::pair<unsigned long, const char *> *value;
  std::pair<unsigned long, const char *> *end;
  std::vector<std::pair<unsigned long, const char *>>::pointer begin;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  std::vector<std::pair<unsigned long, const char *>>::size_type v12;
  std::pair<unsigned long, const char *> *v13;
  size_t v14;
  std::pair<unsigned long, const char *> *v15;
  std::pair<unsigned long, const char *> *v16;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      v12 = 16 * __n;
      bzero(this->__end_, 16 * __n);
      end = (std::pair<unsigned long, const char *> *)((char *)end + v12);
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v7 = end - this->__begin_;
    v8 = v7 + __n;
    if ((v7 + __n) >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v9 = (char *)value - (char *)begin;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = (std::pair<unsigned long, const char *> *)&v11[16 * v7];
    v14 = __n;
    v15 = (std::pair<unsigned long, const char *> *)&v11[16 * v10];
    bzero(v13, v14 * 16);
    v16 = &v13[v14];
    if (end != begin)
    {
      do
      {
        v13[-1] = end[-1];
        --v13;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
      operator delete(end);
  }
}

uint64_t std::__state<char>::__state(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  size_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v7 = (_BYTE *)*((_QWORD *)a2 + 4);
  v6 = (_BYTE *)*((_QWORD *)a2 + 5);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v9 = (char *)operator new(v8);
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = &v9[8 * (v8 >> 3)];
    v10 = 24 * ((v8 - 24) / 0x18uLL) + 24;
    memcpy(v9, v7, v10);
    *(_QWORD *)(a1 + 40) = &v9[v10];
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v12 = (_BYTE *)*((_QWORD *)a2 + 7);
  v11 = (_BYTE *)*((_QWORD *)a2 + 8);
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(v11 - v12);
    *(_QWORD *)(a1 + 56) = v14;
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = &v14[16 * (v13 >> 4)];
    memcpy(v14, v12, v13 & 0xFFFFFFFFFFFFFFF0);
    *(_QWORD *)(a1 + 64) = &v14[v13 & 0xFFFFFFFFFFFFFFF0];
  }
  v15 = *((_QWORD *)a2 + 10);
  *(_QWORD *)(a1 + 85) = *(_QWORD *)((char *)a2 + 85);
  *(_QWORD *)(a1 + 80) = v15;
  return a1;
}

void sub_1BF3B9F68(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 64) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;
  int v7;
  unsigned int v8;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;

  if (a2 == a3 || *a2 != 92)
    return a2;
  v5 = a2 + 1;
  if (a2 + 1 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v7 = *v5;
  v8 = v7 - 48;
  if (v7 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v8);
    return a2 + 2;
  }
  if ((v7 - 49) > 8)
    goto LABEL_18;
  v10 = a2 + 2;
  if (a2 + 2 == a3)
  {
    v10 = a3;
  }
  else
  {
    while (1)
    {
      v11 = *v10;
      if ((v11 - 48) > 9)
        break;
      if (v8 >= 0x19999999)
        goto LABEL_23;
      ++v10;
      v8 = v11 + 10 * v8 - 48;
      if (v10 == a3)
      {
        v10 = a3;
        break;
      }
    }
    if (!v8)
LABEL_23:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  if (v8 > this->__marked_count_)
    goto LABEL_23;
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v8);
  if (v10 == v5)
  {
LABEL_18:
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>((uint64_t)this, a2 + 1, a3);
    if (v10 == v5)
    {
      v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(this, a2 + 1, a3, 0);
      if (v12 == v5)
        return a2;
      else
        return v12;
    }
  }
  return v10;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  int v5;
  char v6;
  char *v7;
  void *v8;
  char *v9;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_20;
    v5 = a2[1];
    v6 = v5 == 94;
    v7 = v5 == 94 ? a2 + 2 : a2 + 1;
    v8 = operator new(0xB0uLL);
    std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v8, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
    *(_QWORD *)(a1 + 56) = v8;
    if (v7 == a3)
      goto LABEL_20;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 93);
      ++v7;
    }
    if (v7 == a3)
      goto LABEL_20;
    do
    {
      v9 = v7;
      v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(a1, v7, a3, (uint64_t)v8);
    }
    while (v7 != v9);
    if (v9 == a3)
      goto LABEL_20;
    if (*v9 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 45);
      ++v9;
    }
    if (v9 == a3 || *v9 != 93)
LABEL_20:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v9 + 1;
  }
  return a2;
}

void sub_1BF3BA250(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B89BF4](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BF3BA29C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *result;

  if (this == a3)
    return this;
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '{':
    case '|':
    case '}':
      return this;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
      result = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      break;
  }
  return result;
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B89BF4](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BF3BA3E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  _DWORD *v5;
  _DWORD *v6;
  int v7;

  v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_7;
      case 'S':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_11;
      case 'W':
        v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_9;
      case 'd':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_7:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = v5[40] | 0x400;
        goto LABEL_12;
      case 's':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_11:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = v5[40] | 0x4000;
LABEL_12:
        v5[40] = v7;
        goto LABEL_13;
      case 'w':
        v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_9:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v6;
        *(_QWORD *)(a1 + 56) = v6;
        v6[40] |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, 95);
LABEL_13:
        ++v3;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_1BF3BA5C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BF3BA5D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BF3BA5EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BF3BA600(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BF3BA614(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BF3BA628(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  std::basic_regex<char>::value_type v6;
  unsigned __int8 *result;
  unsigned __int8 v8;
  std::basic_regex<char>::value_type v9;
  int v10;
  int v11;
  unsigned __int8 v12;
  char v13;
  unsigned __int8 v14;
  char v15;
  std::basic_regex<char>::value_type v16;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  v6 = v5;
  switch((char)v5)
  {
    case '0':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 0);
        return v4 + 1;
      }
    case 'c':
      if (v4 + 1 == a3)
        goto LABEL_81;
      v8 = v4[1];
      if (((v8 & 0xDF) - 65) > 0x19u)
        goto LABEL_81;
      v9 = v8 & 0x1F;
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v9;
        *((_BYTE *)a4 + 1) = 0;
        return v4 + 2;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v9);
        return v4 + 2;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return v4 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return v4 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return v4 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return v4 + 1;
      }
    case 'u':
      if (v4 + 1 != a3)
      {
        v10 = v4[1];
        if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38 || (v10 | 0x20u) - 97 < 6)
        {
          v4 += 2;
          if (v4 != a3)
          {
            v11 = *v4;
            if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6)
              goto LABEL_38;
          }
        }
      }
      goto LABEL_81;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return v4 + 1;
      }
      else
      {
        v6 = 11;
LABEL_65:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return v4 + 1;
      }
    case 'x':
LABEL_38:
      if (v4 + 1 == a3)
        goto LABEL_81;
      v12 = v4[1];
      v13 = -48;
      if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
        goto LABEL_43;
      v12 |= 0x20u;
      if ((v12 - 97) >= 6u)
        goto LABEL_81;
      v13 = -87;
LABEL_43:
      if (v4 + 2 == a3)
        goto LABEL_81;
      v14 = v4[2];
      v15 = -48;
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
      {
        v14 |= 0x20u;
        if ((v14 - 97) >= 6u)
LABEL_81:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        v15 = -87;
      }
      v16 = v14 + 16 * (v12 + v13) + v15;
      if (!a4)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
        v4 += 3;
        return v4;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v16;
      *((_BYTE *)a4 + 1) = 0;
      result = v4 + 3;
      break;
    default:
      if ((char)v5 == 95 || ((char)v5 & 0x80000000) == 0 && (a1->__traits_.__ct_->__tab_[v5] & 0x500) != 0)
        goto LABEL_81;
      if (!a4)
        goto LABEL_65;
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v5;
      *((_BYTE *)a4 + 1) = 0;
      return v4 + 1;
  }
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2;
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  std::__node<char> *v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  char *v8;
  std::__node<char> *first;
  std::__node<char> *v10;

  v2 = __c;
  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (char *)operator new(0x30uLL);
    first = this->__end_->__first_;
    *(_QWORD *)v8 = &unk_1E7900B98;
    *((_QWORD *)v8 + 1) = first;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = ((uint64_t (*)(const std::ctype<char> *, uint64_t))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v2);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (char *)operator new(0x30uLL);
    v10 = this->__end_->__first_;
    *(_QWORD *)v8 = &unk_1E7900BE0;
    *((_QWORD *)v8 + 1) = v10;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = v2;
    goto LABEL_6;
  }
  v5 = (std::__node<char> *)operator new(0x18uLL);
  end = this->__end_;
  v7 = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_1E7900C28;
  v5[1].__vftable = (std::__node<char>_vtbl *)v7;
  LOBYTE(v5[2].__vftable) = v2;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_1BF3BAC04(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  std::locale *v2;
  void (__cdecl **v4)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale(v2);
  v4 = v1[1];
  if (v4)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B89BF4](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BF3BAC7C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  std::__node<char> *v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  std::locale *v8;
  std::locale *v9;
  std::__node<char> *first;
  char *v11;

  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (std::locale *)operator new(0x30uLL);
    v9 = v8;
    first = this->__end_->__first_;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)(v11 + 16);
    v8[1].__locale_ = (std::locale::__imp *)first;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (std::locale *)operator new(0x30uLL);
    v9 = v8;
    first = this->__end_->__first_;
    goto LABEL_6;
  }
  v5 = (std::__node<char> *)operator new(0x18uLL);
  end = this->__end_;
  v7 = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_1E7900D00;
  v5[1].__vftable = (std::__node<char>_vtbl *)v7;
  LODWORD(v5[2].__vftable) = __i;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E7900B98;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E7900B98;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(v4 + 8);
  }
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E7900BE0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E7900BE0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E7900C70;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E7900C70;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (!*(_BYTE *)(v3 + 16)
    || (v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3, v5 = *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24) - v5 < v4))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    return result;
  }
  v6 = result;
  if (v4 >= 1)
  {
    v7 = 0;
    while (1)
    {
      v8 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), *(char *)(*(_QWORD *)v3 + v7));
      result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v7));
      if (v8 != (_DWORD)result)
        goto LABEL_3;
      if (v4 == ++v7)
      {
        v5 = *(_QWORD *)(a2 + 16);
        break;
      }
    }
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 16) = v5 + v4;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(v6 + 8);
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E7900CB8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E7900CB8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (!*(_BYTE *)(v3 + 24 * v2 + 16)
    || (v4 = (unsigned __int8 **)(v3 + 24 * v2),
        v5 = *v4,
        v6 = v4[1] - *v4,
        v7 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v7 < v6))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    return result;
  }
  if (v6 >= 1)
  {
    v8 = v6;
    v9 = *(unsigned __int8 **)(a2 + 16);
    do
    {
      v11 = *v5++;
      v10 = v11;
      v12 = *v9++;
      if (v10 != v12)
        goto LABEL_3;
    }
    while (--v8);
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 16) = v7 + v6;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    *(_QWORD *)(a2 + 80) = *((_QWORD *)v6 + 1);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  return result;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  unint64_t v40;
  __int128 v41;
  char *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  char *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  char *v56;
  char v57;
  char *v58;
  char v59;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = (_QWORD *)(a1 + 40);
    v5 = *(_BYTE **)(a1 + 48);
    v16 = *(_QWORD *)(a1 + 56);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16)
        goto LABEL_24;
      v17 = (_BYTE *)*v6;
      v18 = (unint64_t)&v5[-*v6];
      v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        v20 = v16 - (_QWORD)v17;
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
          v21 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v12 = operator new(v21);
          v13 = &v12[v18];
          v14 = &v12[v21];
          v12[v18] = v2;
          v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17)
            goto LABEL_49;
        }
        else
        {
          v12 = 0;
          v13 = &v5[-*v6];
          v14 = 0;
          *(_BYTE *)v18 = a2;
          v15 = v18 + 1;
          if (v5 == v17)
            goto LABEL_49;
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            v38 = (__int128 *)(v5 - 16);
            v39 = &v12[v5 - 16 - v17];
            v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28)
              goto LABEL_86;
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          v42 = &v5[-v28 - 8];
          v43 = &v12[v42 - v17];
          v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v45 = *(_QWORD *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_86;
        }
LABEL_80:
        v56 = v13 - 1;
        do
        {
          v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16)
      goto LABEL_24;
    v23 = (_BYTE *)*v6;
    v24 = (unint64_t)&v5[-*v6];
    v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0)
      goto LABEL_89;
    v26 = v16 - (_QWORD)v23;
    if (2 * v26 > v25)
      v25 = 2 * v26;
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v12 = operator new(v27);
      v13 = &v12[v24];
      v14 = &v12[v27];
      v12[v24] = v2;
      v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(_QWORD *)(a1 + 40) = v13;
        *(_QWORD *)(a1 + 48) = v15;
        *(_QWORD *)(a1 + 56) = v14;
        if (!v5)
          goto LABEL_88;
        goto LABEL_87;
      }
    }
    else
    {
      v12 = 0;
      v13 = &v5[-*v6];
      v14 = 0;
      *(_BYTE *)v24 = a2;
      v15 = v24 + 1;
      if (v5 == v23)
        goto LABEL_49;
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        v46 = (__int128 *)(v5 - 16);
        v47 = &v12[v5 - 16 - v23];
        v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29)
          goto LABEL_86;
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      v50 = &v5[-v29 - 8];
      v51 = &v12[v50 - v23];
      v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v53 = *(_QWORD *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_86;
    }
LABEL_84:
    v58 = v13 - 1;
    do
    {
      v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v5 = *(_BYTE **)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *v5 = v2;
    v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  v6 = (_QWORD *)(a1 + 40);
  v7 = *(_BYTE **)(a1 + 40);
  v8 = v5 - v7;
  v9 = v5 - v7 + 1;
  if (v9 < 0)
    goto LABEL_89;
  v10 = v4 - (_QWORD)v7;
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    v12 = operator new(v11);
    v13 = &v12[v8];
    v14 = &v12[v11];
    v12[v8] = v2;
    v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7)
      goto LABEL_49;
  }
  else
  {
    v12 = 0;
    v13 = (char *)(v5 - v7);
    v14 = 0;
    *(_BYTE *)v8 = v2;
    v15 = v8 + 1;
    if (v5 == v7)
      goto LABEL_49;
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20)
    goto LABEL_76;
  if (v8 < 0x20)
  {
    v22 = 0;
    goto LABEL_55;
  }
  v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  v30 = (__int128 *)(v5 - 16);
  v31 = &v12[v5 - 16 - v7];
  v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    v34 = &v5[-v22 - 8];
    v35 = &v12[v34 - v7];
    v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v37 = *(_QWORD *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_86;
LABEL_76:
    v54 = v13 - 1;
    do
    {
      v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  v5 = (_BYTE *)*v6;
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v15;
  *(_QWORD *)(a1 + 56) = v14;
  if (v5)
LABEL_87:
    operator delete(v5);
LABEL_88:
  *(_QWORD *)(a1 + 48) = v15;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  const std::locale *v11;
  __int128 v12;
  std::string::size_type size;
  std::string *v14;
  BOOL v15;
  std::locale v17;
  std::string v18;

  *(_QWORD *)(a1 + 8) = a3;
  v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  v12 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = a4;
  *(_BYTE *)(a1 + 169) = a5;
  *(_BYTE *)(a1 + 170) = a6;
  std::locale::locale(&v17, v11);
  std::locale::name(&v18, &v17);
  size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v18.__r_.__value_.__l.__size_;
  if (size == 1)
  {
    v14 = (std::string *)v18.__r_.__value_.__r.__words[0];
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v18;
    v15 = v14->__r_.__value_.__s.__data_[0] != 67;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_9;
  }
  else
  {
    v15 = 1;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
LABEL_9:
      operator delete(v18.__r_.__value_.__l.__data_);
  }
  std::locale::~locale(&v17);
  *(_BYTE *)(a1 + 171) = v15;
  return a1;
}

void sub_1BF3BBA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  uint64_t v9;
  std::locale *v10;
  void **v11;
  void **v12;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  std::locale::~locale(&a9);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v9 + 136));
  v14 = *(void **)(v9 + 112);
  if (v14)
  {
    *(_QWORD *)(v9 + 120) = v14;
    operator delete(v14);
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v11);
    v15 = *(void **)(v9 + 64);
    if (!v15)
    {
LABEL_3:
      v16 = *v12;
      if (!*v12)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v11);
    v15 = *(void **)(v9 + 64);
    if (!v15)
      goto LABEL_3;
  }
  *(_QWORD *)(v9 + 72) = v15;
  operator delete(v15);
  v16 = *v12;
  if (!*v12)
  {
LABEL_5:
    std::locale::~locale(v10);
    v17 = *(_QWORD *)(v9 + 8);
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    _Unwind_Resume(a1);
  }
LABEL_4:
  *(_QWORD *)(v9 + 48) = v16;
  operator delete(v16);
  goto LABEL_5;
}

void **std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0)
LABEL_9:
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale *v1;

  v1 = std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);
  operator delete(v1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v2;
  char *current;
  char *last;
  char v6;
  char v7;
  std::regex_traits<char> *p_traits;
  std::vector<std::pair<char, char>>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  char *p_second;
  std::vector<std::pair<std::string, std::string>>::pointer v14;
  char v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  void **v19;
  char v20;
  void *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  BOOL v24;
  uint64_t v25;
  _BOOL4 negate;
  void *v27;
  unsigned __int8 v28;
  std::vector<char>::pointer v29;
  unint64_t v30;
  int v31;
  std::regex_traits<char>::char_class_type v32;
  char v33;
  int v34;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v36;
  char *v37;
  std::vector<std::pair<std::string, std::string>>::pointer v38;
  std::vector<std::pair<std::string, std::string>>::pointer v39;
  unsigned int v40;
  int64_t v41;
  uint64_t v42;
  unint64_t v43;
  void **v44;
  void *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  BOOL v48;
  int v49;
  char *v50;
  size_t v51;
  size_t v52;
  int v53;
  int v54;
  char *v55;
  size_t v56;
  size_t v57;
  int v58;
  int v59;
  char *v60;
  size_t v61;
  size_t v62;
  int v63;
  int v64;
  char *v65;
  size_t v66;
  size_t v67;
  int v68;
  int v69;
  int v70;
  std::vector<std::string>::pointer v71;
  uint64_t v72;
  int64_t v73;
  unint64_t v74;
  unint64_t v75;
  const void *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  BOOL v80;
  std::string *v81;
  void *v82;
  int v83;
  std::string *v84;
  uint64_t v85;
  const void *v86;
  void *v87;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v88;
  std::vector<std::string>::pointer v89;
  int v90;
  int64_t v91;
  unint64_t v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  std::string *v98;
  void *v99;
  int v100;
  void **v101;
  uint64_t v102;
  uint64_t v103;
  const void *v104;
  uint64_t v105;
  std::string::size_type size;
  int v107;
  std::vector<std::string>::pointer v108;
  std::regex_traits<char>::char_class_type mask;
  const std::ctype_base::mask *tab;
  std::ctype_base::mask v111;
  std::regex_traits<char>::char_class_type neg_mask;
  int v113;
  std::string::size_type v114;
  std::regex_traits<char>::char_class_type v115;
  int v116;
  std::__node<char> *first;
  int v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  std::string::value_type *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  char v126;
  BOOL v127;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v128;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v129;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v130;
  _BOOL4 v131;
  _BOOL4 v132;
  int v133;
  uint64_t v134;
  int v135;
  void *v136[3];
  __int16 __src;
  void *__p[3];

  v2 = a2;
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    v25 = 0;
    negate = this->__negate_;
    goto LABEL_245;
  }
  if (!this->__might_have_digraph_ || current + 1 == last)
    goto LABEL_34;
  v6 = *current;
  LOBYTE(__src) = *current;
  v7 = current[1];
  HIBYTE(__src) = v7;
  if (this->__icase_)
  {
    LOBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  p_traits = &this->__traits_;
  std::regex_traits<char>::__lookup_collatename<char *>(&__src, (uint64_t)&this->__traits_, __p, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    v27 = __p[1];
    operator delete(__p[0]);
    if (v27)
      goto LABEL_8;
LABEL_34:
    negate = 0;
    v25 = 1;
    v28 = *v2->__current_;
    LOBYTE(__src) = v28;
    if (!this->__icase_)
      goto LABEL_36;
    goto LABEL_35;
  }
  if (!HIBYTE(__p[2]))
    goto LABEL_34;
LABEL_8:
  begin = this->__digraphs_.__begin_;
  v10 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v10)
  {
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    p_second = &begin->second;
    while (__src != *(p_second - 1) || HIBYTE(__src) != *p_second)
    {
      p_second += 2;
      if (!--v11)
        goto LABEL_17;
    }
    goto LABEL_227;
  }
LABEL_17:
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    negate = 0;
    goto LABEL_167;
  }
  memset(v136, 170, sizeof(v136));
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[2] = (void *)0x2AAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAA00AAAALL;
  LOWORD(__p[0]) = __src;
  (*(void (**)(void **__return_ptr, const std::collate<char> *, void **, char *))(*(_QWORD *)this->__traits_.__col_
                                                                                           + 32))(v136, this->__traits_.__col_, __p, (char *)__p + 2);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v14 = this->__ranges_.__begin_;
  v15 = HIBYTE(v136[2]);
  v16 = (char *)this->__ranges_.__end_ - (char *)v14;
  if (!v16)
  {
    v24 = 0;
    v70 = 0;
    v69 = 0;
    goto LABEL_164;
  }
  v128 = v2;
  v17 = 0;
  v18 = v16 / 48;
  if (SHIBYTE(v136[2]) >= 0)
    v19 = v136;
  else
    v19 = (void **)v136[0];
  v20 = HIBYTE(v136[2]);
  if (SHIBYTE(v136[2]) >= 0)
    v21 = (void *)HIBYTE(v136[2]);
  else
    v21 = v136[1];
  if (v18 <= 1)
    v22 = 1;
  else
    v22 = v16 / 48;
  v23 = (unsigned __int8 *)&v14->second.__r_.__value_.__r.__words[2] + 7;
  v24 = 1;
  do
  {
    v59 = (char)*(v23 - 24);
    if (v59 >= 0)
      v60 = (char *)(v23 - 47);
    else
      v60 = *(char **)(v23 - 47);
    if (v59 >= 0)
      v61 = *(v23 - 24);
    else
      v61 = *(_QWORD *)(v23 - 39);
    if ((unint64_t)v21 >= v61)
      v62 = v61;
    else
      v62 = (size_t)v21;
    v63 = memcmp(v60, v19, v62);
    if (v63)
    {
      if ((v63 & 0x80000000) == 0)
        goto LABEL_98;
    }
    else if (v61 > (unint64_t)v21)
    {
      goto LABEL_98;
    }
    v64 = (char)*v23;
    if (v64 >= 0)
      v65 = (char *)(v23 - 23);
    else
      v65 = *(char **)(v23 - 23);
    if (v64 >= 0)
      v66 = *v23;
    else
      v66 = *(_QWORD *)(v23 - 15);
    if (v66 >= (unint64_t)v21)
      v67 = (size_t)v21;
    else
      v67 = v66;
    v68 = memcmp(v19, v65, v67);
    if (v68)
    {
      if (v68 < 0)
      {
LABEL_123:
        v69 = 1;
        v70 = 5;
        goto LABEL_162;
      }
    }
    else if ((unint64_t)v21 <= v66)
    {
      goto LABEL_123;
    }
LABEL_98:
    v24 = ++v17 < v18;
    v23 += 48;
  }
  while (v22 != v17);
  v70 = 0;
  v69 = 0;
LABEL_162:
  v2 = v128;
  p_traits = &this->__traits_;
  v15 = v20;
LABEL_164:
  if (v15 < 0)
    operator delete(v136[0]);
  negate = v69;
  if (v24)
    goto LABEL_207;
LABEL_167:
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_209;
  v133 = negate;
  v88 = v2;
  memset(__p, 170, sizeof(__p));
  std::regex_traits<char>::__transform_primary<char *>(&__src, (uint64_t)p_traits, __p, __p);
  v89 = this->__equivalences_.__begin_;
  v90 = SHIBYTE(__p[2]);
  v91 = (char *)this->__equivalences_.__end_ - (char *)v89;
  if (!v91)
    goto LABEL_188;
  v92 = v91 / 24;
  v93 = __p[1];
  if (SHIBYTE(__p[2]) >= 0)
    v94 = (void *)HIBYTE(__p[2]);
  else
    v94 = __p[1];
  if (SHIBYTE(__p[2]) < 0)
  {
    v135 = SHIBYTE(__p[2]);
    v103 = 0;
    v104 = __p[0];
    if (v92 <= 1)
      v105 = 1;
    else
      v105 = v91 / 24;
    v97 = 1;
    do
    {
      size = HIBYTE(v89->__r_.__value_.__r.__words[2]);
      v107 = (char)size;
      if ((size & 0x80u) != 0)
        size = v89->__r_.__value_.__l.__size_;
      if (v94 == (void *)size)
      {
        v108 = v107 >= 0 ? v89 : (std::vector<std::string>::pointer)v89->__r_.__value_.__r.__words[0];
        if (!memcmp(v104, v108, (size_t)v93))
        {
          v133 = 1;
          v70 = 5;
          goto LABEL_203;
        }
      }
      v97 = ++v103 < v92;
      ++v89;
    }
    while (v105 != v103);
    v70 = 0;
LABEL_203:
    v2 = v88;
    v90 = v135;
    goto LABEL_204;
  }
  if (!HIBYTE(__p[2]))
  {
    v114 = HIBYTE(v89->__r_.__value_.__r.__words[2]);
    if ((v114 & 0x80u) != 0)
      v114 = v89->__r_.__value_.__l.__size_;
    if (v114 != HIBYTE(__p[2]))
    {
      v119 = 0;
      if (v92 <= 1)
        v120 = 1;
      else
        v120 = v92;
      v121 = v120 - 1;
      v122 = &v89[1].__r_.__value_.__s.__data_[8];
      v2 = v88;
      while (v121 != v119)
      {
        ++v119;
        v123 = v122[15];
        v125 = *(_QWORD *)v122;
        v122 += 24;
        v124 = v125;
        if ((v123 & 0x80u) != 0)
          v123 = v124;
        if (v94 == (void *)v123)
        {
          v97 = v119 < v92;
          v133 = 1;
          v70 = 5;
          goto LABEL_204;
        }
      }
      v97 = 0;
      v70 = 0;
      goto LABEL_204;
    }
    v2 = v88;
    negate = 1;
LABEL_208:
    v25 = 2;
    goto LABEL_245;
  }
  v95 = 0;
  v96 = v92 <= 1 ? 1 : v91 / 24;
  v97 = 1;
  do
  {
    v98 = &v89[v95];
    v99 = (void *)HIBYTE(v98->__r_.__value_.__r.__words[2]);
    v100 = (char)v99;
    if ((char)v99 < 0)
      v99 = (void *)v98->__r_.__value_.__l.__size_;
    if (v94 == v99)
    {
      if (v100 < 0)
        v98 = (std::string *)v98->__r_.__value_.__r.__words[0];
      v101 = __p;
      v102 = HIBYTE(__p[2]);
      while (*(unsigned __int8 *)v101 == v98->__r_.__value_.__s.__data_[0])
      {
        v101 = (void **)((char *)v101 + 1);
        v98 = (std::string *)((char *)v98 + 1);
        if (!--v102)
        {
          v133 = 1;
          v70 = 5;
          v2 = v88;
          goto LABEL_204;
        }
      }
    }
    v97 = ++v95 < v92;
  }
  while (v95 != v96);
LABEL_188:
  v97 = 0;
  v70 = 0;
  v2 = v88;
LABEL_204:
  if (v90 < 0)
    operator delete(__p[0]);
  negate = v133;
  if (!v97)
  {
LABEL_209:
    if ((char)__src < 0)
    {
      neg_mask = this->__neg_mask_;
    }
    else
    {
      mask = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      v111 = tab[__src];
      if (((v111 & mask) != 0 || __src == 95 && (mask & 0x80) != 0)
        && (SHIBYTE(__src) & 0x80000000) == 0
        && ((tab[HIBYTE(__src)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(__src) == 95))
      {
        goto LABEL_227;
      }
      neg_mask = this->__neg_mask_;
      if ((neg_mask & v111) != 0 || __src == 95 && (neg_mask & 0x80) != 0)
      {
LABEL_226:
        v113 = negate;
LABEL_228:
        negate = v113;
        v25 = 2;
        goto LABEL_245;
      }
    }
    if ((SHIBYTE(__src) & 0x80000000) == 0)
    {
      if ((this->__traits_.__ct_->__tab_[HIBYTE(__src)] & neg_mask) == 0)
      {
        v113 = 1;
        if (HIBYTE(__src) != 95 || (neg_mask & 0x80) == 0)
          goto LABEL_228;
      }
      goto LABEL_226;
    }
LABEL_227:
    v113 = 1;
    goto LABEL_228;
  }
LABEL_207:
  if (v70)
    goto LABEL_208;
  v25 = 2;
  v28 = *v2->__current_;
  LOBYTE(__src) = v28;
  if (this->__icase_)
  {
LABEL_35:
    v28 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v28);
    LOBYTE(__src) = v28;
  }
LABEL_36:
  v29 = this->__chars_.__begin_;
  v30 = this->__chars_.__end_ - v29;
  if (v30)
  {
    if (v30 <= 1)
      v30 = 1;
    while (1)
    {
      v31 = *v29++;
      if (v31 == v28)
        break;
      if (!--v30)
        goto LABEL_41;
    }
LABEL_244:
    negate = 1;
    goto LABEL_245;
  }
LABEL_41:
  v32 = this->__neg_mask_;
  if (v32 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v28 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v28] & v32) == 0)
    {
      v34 = (v32 >> 7) & 1;
      v33 = v28 == 95 ? v34 : 0;
    }
    else
    {
      v33 = 1;
    }
    end = this->__neg_chars_.__end_;
    v36 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v28, end - this->__neg_chars_.__begin_);
    v37 = v36 ? v36 : end;
    if ((v33 & 1) == 0 && v37 == end)
      goto LABEL_244;
  }
  v38 = this->__ranges_.__begin_;
  v39 = this->__ranges_.__end_;
  if (v38 == v39)
    goto LABEL_128;
  memset(v136, 170, sizeof(v136));
  if (!this->__collate_)
  {
    v40 = 1;
    HIBYTE(v136[2]) = 1;
    LOWORD(v136[0]) = v28;
    v41 = (char *)v39 - (char *)v38;
    if (v41)
      goto LABEL_59;
LABEL_155:
    v48 = 0;
    if ((v40 & 0x80) != 0)
      goto LABEL_126;
    goto LABEL_127;
  }
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[2] = (void *)0x1AAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  LOWORD(__p[0]) = v28;
  (*(void (**)(void **__return_ptr, const std::collate<char> *, void **, char *))(*(_QWORD *)this->__traits_.__col_
                                                                                           + 32))(v136, this->__traits_.__col_, __p, (char *)__p + 1);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v38 = this->__ranges_.__begin_;
  v40 = HIBYTE(v136[2]);
  v41 = (char *)this->__ranges_.__end_ - (char *)v38;
  if (!v41)
    goto LABEL_155;
LABEL_59:
  v134 = v25;
  v131 = negate;
  v129 = v2;
  v42 = 0;
  v43 = v41 / 48;
  v126 = v40;
  if ((v40 & 0x80u) == 0)
    v44 = v136;
  else
    v44 = (void **)v136[0];
  if ((v40 & 0x80u) == 0)
    v45 = (void *)v40;
  else
    v45 = v136[1];
  if (v43 <= 1)
    v46 = 1;
  else
    v46 = v41 / 48;
  v47 = (unsigned __int8 *)&v38->second.__r_.__value_.__r.__words[2] + 7;
  v48 = 1;
  while (2)
  {
    v49 = (char)*(v47 - 24);
    if (v49 >= 0)
      v50 = (char *)(v47 - 47);
    else
      v50 = *(char **)(v47 - 47);
    if (v49 >= 0)
      v51 = *(v47 - 24);
    else
      v51 = *(_QWORD *)(v47 - 39);
    if ((unint64_t)v45 >= v51)
      v52 = v51;
    else
      v52 = (size_t)v45;
    v53 = memcmp(v50, v44, v52);
    if (v53)
    {
      if (v53 < 0)
        goto LABEL_84;
    }
    else if (v51 <= (unint64_t)v45)
    {
LABEL_84:
      v54 = (char)*v47;
      if (v54 >= 0)
        v55 = (char *)(v47 - 23);
      else
        v55 = *(char **)(v47 - 23);
      if (v54 >= 0)
        v56 = *v47;
      else
        v56 = *(_QWORD *)(v47 - 15);
      if (v56 >= (unint64_t)v45)
        v57 = (size_t)v45;
      else
        v57 = v56;
      v58 = memcmp(v44, v55, v57);
      if (v58)
      {
        if (v58 < 0)
        {
LABEL_95:
          negate = 1;
          v2 = v129;
          v25 = v134;
          if ((v126 & 0x80) == 0)
            goto LABEL_127;
          goto LABEL_126;
        }
      }
      else if ((unint64_t)v45 <= v56)
      {
        goto LABEL_95;
      }
    }
    v48 = ++v42 < v43;
    v47 += 48;
    if (v46 != v42)
      continue;
    break;
  }
  v2 = v129;
  negate = v131;
  v25 = v134;
  if ((v126 & 0x80) == 0)
    goto LABEL_127;
LABEL_126:
  operator delete(v136[0]);
LABEL_127:
  if (v48)
    goto LABEL_245;
LABEL_128:
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_239:
    if ((v28 & 0x80) != 0)
      goto LABEL_245;
    v115 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v28] & v115) == 0)
    {
      v116 = (v115 >> 7) & 1;
      if (v28 != 95)
        v116 = 0;
      if (v116 != 1)
        goto LABEL_245;
    }
    goto LABEL_244;
  }
  memset(__p, 170, sizeof(__p));
  std::regex_traits<char>::__transform_primary<char *>(&__src, (uint64_t)&this->__traits_, (_BYTE *)&__src + 1, __p);
  v71 = this->__equivalences_.__begin_;
  v72 = HIBYTE(__p[2]);
  v73 = (char *)this->__equivalences_.__end_ - (char *)v71;
  if (!v73)
  {
    if ((HIBYTE(__p[2]) & 0x80) != 0)
      operator delete(__p[0]);
LABEL_238:
    v28 = __src;
    goto LABEL_239;
  }
  v132 = negate;
  v130 = v2;
  v74 = 0;
  v75 = v73 / 24;
  v76 = __p[0];
  v77 = __p[1];
  if (SHIBYTE(__p[2]) >= 0)
    v78 = (void *)HIBYTE(__p[2]);
  else
    v78 = __p[1];
  if (v75 <= 1)
    v79 = 1;
  else
    v79 = v73 / 24;
  v80 = 1;
  while (2)
  {
    v81 = &v71[v74];
    v82 = (void *)HIBYTE(v81->__r_.__value_.__r.__words[2]);
    v83 = (char)v82;
    if ((char)v82 < 0)
      v82 = (void *)v81->__r_.__value_.__l.__size_;
    if (v78 != v82)
    {
LABEL_149:
      if (++v74 == v79)
      {
        if ((v72 & 0x80) != 0)
LABEL_236:
          operator delete(__p[0]);
        v2 = v130;
        negate = v132;
        goto LABEL_238;
      }
      goto LABEL_153;
    }
    if (v83 >= 0)
      v84 = &v71[v74];
    else
      v84 = (std::string *)v81->__r_.__value_.__r.__words[0];
    if ((v72 & 0x80) == 0)
    {
      if (!(_DWORD)v72)
      {
LABEL_157:
        v2 = v130;
        negate = 1;
        if (!v80)
          goto LABEL_238;
        goto LABEL_245;
      }
      v85 = 0;
      while (*((unsigned __int8 *)__p + v85) == v84->__r_.__value_.__s.__data_[v85])
      {
        if (v72 == ++v85)
          goto LABEL_157;
      }
      goto LABEL_149;
    }
    v127 = v80;
    v86 = v76;
    v87 = v77;
    if (memcmp(v76, v84, (size_t)v77))
    {
      ++v74;
      v77 = v87;
      v76 = v86;
      if (v74 == v79)
        goto LABEL_236;
LABEL_153:
      v80 = v74 < v75;
      continue;
    }
    break;
  }
  operator delete(__p[0]);
  v2 = v130;
  negate = 1;
  if (!v127)
    goto LABEL_238;
LABEL_245:
  if (negate == this->__negate_)
  {
    first = 0;
    v118 = -993;
  }
  else
  {
    v2->__current_ += v25;
    first = this->__first_;
    v118 = -995;
  }
  v2->__do_ = v118;
  v2->__node_ = first;
}

void sub_1BF3BC628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale::__imp *v6;
  std::locale::__imp *v7;
  std::locale::__imp *v8;
  std::locale::__imp *v9;
  std::locale::__imp *v10;
  std::locale::__imp *v11;

  locale = a1[17].__locale_;
  if (locale)
  {
    v3 = a1[18].__locale_;
    v4 = a1[17].__locale_;
    if (v3 != locale)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*((void **)v3 - 3));
        v3 = (std::locale::__imp *)((char *)v3 - 24);
      }
      while (v3 != locale);
      v4 = a1[17].__locale_;
    }
    a1[18].__locale_ = locale;
    operator delete(v4);
  }
  v5 = a1[14].__locale_;
  if (v5)
  {
    a1[15].__locale_ = v5;
    operator delete(v5);
  }
  v6 = a1[11].__locale_;
  if (v6)
  {
    v7 = a1[12].__locale_;
    v8 = a1[11].__locale_;
    if (v7 == v6)
    {
LABEL_21:
      a1[12].__locale_ = v6;
      operator delete(v8);
      goto LABEL_22;
    }
    while (1)
    {
      if (*((char *)v7 - 1) < 0)
      {
        operator delete(*((void **)v7 - 3));
        if (*((char *)v7 - 25) < 0)
LABEL_19:
          operator delete(*((void **)v7 - 6));
      }
      else if (*((char *)v7 - 25) < 0)
      {
        goto LABEL_19;
      }
      v7 = (std::locale::__imp *)((char *)v7 - 48);
      if (v7 == v6)
      {
        v8 = a1[11].__locale_;
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v9 = a1[8].__locale_;
  if (v9)
  {
    a1[9].__locale_ = v9;
    operator delete(v9);
  }
  v10 = a1[5].__locale_;
  if (v10)
  {
    a1[6].__locale_ = v10;
    operator delete(v10);
  }
  std::locale::~locale(a1 + 2);
  v11 = a1[1].__locale_;
  if (v11)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v11 + 8))(v11);
  return a1;
}

void std::regex_traits<char>::__lookup_collatename<char *>(_BYTE *__src@<X1>, uint64_t a2@<X0>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _BYTE *v18;
  size_t v19;
  std::string v20;
  _BYTE __dst[24];

  v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 <= 0x16)
  {
    __dst[23] = (_BYTE)a3 - (_BYTE)__src;
    v9 = __dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(v9, __src, v5);
    v9 += v5;
    goto LABEL_9;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  v11 = v10 + 1;
  v9 = operator new(v10 + 1);
  *(_QWORD *)&__dst[8] = v5;
  *(_QWORD *)&__dst[16] = v11 | 0x8000000000000000;
  *(_QWORD *)__dst = v9;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *v9 = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if ((__dst[23] & 0x80000000) != 0)
  {
    v12 = *(char **)__dst;
    if (!*(_QWORD *)&__dst[8])
      goto LABEL_18;
  }
  else
  {
    if (!__dst[23])
      return;
    v12 = __dst;
  }
  std::__get_collation_name(&v20, v12);
  *(_OWORD *)a4 = *(_OWORD *)&v20.__r_.__value_.__l.__data_;
  v13 = v20.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v20.__r_.__value_.__l + 2);
  v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a4 + 8);
  if (v14)
    goto LABEL_16;
  if ((__dst[23] & 0x80000000) != 0)
  {
    v15 = *(_QWORD *)&__dst[8];
    v12 = *(char **)__dst;
    if (*(_QWORD *)&__dst[8] < 3uLL)
      goto LABEL_24;
LABEL_18:
    operator delete(v12);
    return;
  }
  v15 = __dst[23];
  if (__dst[23] < 3u)
  {
    v12 = __dst;
LABEL_24:
    (*(void (**)(std::string *__return_ptr, _QWORD, char *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v20, *(_QWORD *)(a2 + 16), v12, &v12[v15]);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(std::string *)a4 = v20;
    if (*(char *)(a4 + 23) < 0)
    {
      v17 = *(_QWORD *)(a4 + 8);
      if (v17 == 1 || v17 == 12)
      {
        if (__dst != (_BYTE *)a4)
        {
          if (__dst[23] >= 0)
            v18 = __dst;
          else
            v18 = *(_BYTE **)__dst;
          if (__dst[23] >= 0)
            v19 = __dst[23];
          else
            v19 = *(_QWORD *)&__dst[8];
          std::string::__assign_no_alias<false>((void **)a4, v18, v19);
        }
      }
      else
      {
        **(_BYTE **)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
      }
    }
    else
    {
      v16 = *(unsigned __int8 *)(a4 + 23);
      if (v16 == 1 || v16 == 12)
      {
        if (__dst != (_BYTE *)a4)
        {
          if ((__dst[23] & 0x80000000) != 0)
          {
            std::string::__assign_no_alias<true>((_QWORD *)a4, *(void **)__dst, *(size_t *)&__dst[8]);
          }
          else
          {
            *(_OWORD *)a4 = *(_OWORD *)__dst;
            *(_QWORD *)(a4 + 16) = *(_QWORD *)&__dst[16];
          }
        }
      }
      else
      {
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 23) = 0;
      }
    }
LABEL_16:
    if ((__dst[23] & 0x80000000) == 0)
      return;
    v12 = *(char **)__dst;
    goto LABEL_18;
  }
}

void sub_1BF3BCA38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(_BYTE *__src@<X1>, uint64_t a2@<X0>, _BYTE *a3@<X2>, _QWORD *a4@<X8>)
{
  size_t v5;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void **v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  void *__dst[3];

  v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 <= 0x16)
  {
    HIBYTE(__dst[2]) = (_BYTE)a3 - (_BYTE)__src;
    v9 = __dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(v9, __src, v5);
    v9 = (void **)((char *)v9 + v5);
    goto LABEL_9;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  v11 = v10 + 1;
  v9 = (void **)operator new(v10 + 1);
  __dst[1] = (void *)v5;
  __dst[2] = (void *)(v11 | 0x8000000000000000);
  __dst[0] = v9;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)v9 = 0;
  memset(a4, 170, 24);
  v12 = (char *)HIBYTE(__dst[2]);
  if (SHIBYTE(__dst[2]) >= 0)
    v13 = __dst;
  else
    v13 = (void **)__dst[0];
  if (SHIBYTE(__dst[2]) < 0)
    v12 = (char *)__dst[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v13, &v12[(_QWORD)v13]);
  v14 = *((unsigned __int8 *)a4 + 23);
  v15 = (char)v14;
  if ((v14 & 0x80u) != 0)
    v14 = a4[1];
  if (v14 == 1)
  {
LABEL_25:
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      return;
    goto LABEL_26;
  }
  if (v14 == 12)
  {
    if (v15 >= 0)
      v16 = a4;
    else
      v16 = (_BYTE *)*a4;
    v16[11] = v16[3];
    if (SHIBYTE(__dst[2]) < 0)
      goto LABEL_26;
    return;
  }
  if ((v15 & 0x80000000) == 0)
  {
    *(_BYTE *)a4 = 0;
    *((_BYTE *)a4 + 23) = 0;
    goto LABEL_25;
  }
  *(_BYTE *)*a4 = 0;
  a4[1] = 0;
  if (SHIBYTE(__dst[2]) < 0)
LABEL_26:
    operator delete(__dst[0]);
}

void sub_1BF3BCC0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B89BF4](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BF3BCC60(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v4;
  int v5;
  char *v6;
  int v9;
  int v10;
  char v11;
  _BYTE *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  char *v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  char *v22;
  uint64_t v23;
  int v24;
  int v25;
  std::basic_regex<char>::value_type *v26;
  char *v27;
  char *v28;
  int v29;
  void **v30;
  _BYTE *v31;
  char *v32;
  _BYTE *v34;
  void *v35[2];
  uint64_t v36;
  void *v37[2];
  uint64_t v38;
  void *__p[2];
  uint64_t v40;
  __int128 v41;
  int64_t v42;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  if (v5 == 93)
    return v4;
  v6 = (char *)a4;
  v9 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v40 = 0;
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_38:
    v24 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_33;
  }
  v10 = a2[1];
  if (v10 != 46)
  {
    if (v10 != 58)
    {
      if (v10 == 61)
      {
        v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(a1, a2 + 2, a3, a4);
        v11 = 0;
        if ((SHIBYTE(v40) & 0x80000000) == 0)
          goto LABEL_64;
        goto LABEL_63;
      }
      v9 = 0;
      goto LABEL_38;
    }
    v12 = a2 + 2;
    if (a3 - (v4 + 2) >= 2)
    {
      v13 = 0;
      v14 = (unsigned __int8 *)v4;
      if (v4[2] == 58)
        goto LABEL_14;
      do
      {
        do
        {
          if (a3 - v4 - 4 == v13)
            goto LABEL_89;
          v14 = (unsigned __int8 *)&v4[++v13];
        }
        while (v4[v13 + 2] != 58);
LABEL_14:
        ;
      }
      while (v14[3] != 93);
      v15 = &v4[v13 + 2];
      if (v15 != a3)
      {
        v16 = std::regex_traits<char>::__lookup_classname<char const*>(a1, v12, v15, *(_DWORD *)(a1 + 24) & 1);
        if (!v16)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
        v11 = 0;
        *((_DWORD *)v6 + 40) |= v16;
        v6 = &v4[v13 + 4];
        if (SHIBYTE(v40) < 0)
          goto LABEL_63;
        goto LABEL_64;
      }
    }
LABEL_89:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  v17 = a2 + 2;
  if (a3 - (v4 + 2) < 2)
    goto LABEL_89;
  v18 = a3 - v4 - 4;
  v19 = v4 + 2;
  v20 = v17 + 1;
  if (*v17 == 46)
    goto LABEL_23;
  do
  {
    do
    {
      if (!v18)
        goto LABEL_89;
      --v18;
      v19 = v20;
      v21 = *v20++;
    }
    while (v21 != 46);
LABEL_23:
    ;
  }
  while (*v20 != 93);
  if (v19 == a3)
    goto LABEL_89;
  std::regex_traits<char>::__lookup_collatename<char *>(v17, a1, v19, (uint64_t)&v41);
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  v40 = v42;
  *(_OWORD *)__p = v41;
  v22 = (char *)HIBYTE(v42);
  v9 = SHIBYTE(v42);
  v23 = *((_QWORD *)&v41 + 1);
  if (v42 < 0)
    v22 = (char *)__p[1];
  if ((unint64_t)(v22 - 1) >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  v4 = v19 + 2;
  v24 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v42 >= 0)
    v23 = HIBYTE(v42);
  if (v23)
  {
    v28 = v4;
    if (v4 == a3)
      goto LABEL_41;
    goto LABEL_40;
  }
LABEL_33:
  if ((v24 | 0x40) != 0x40)
  {
    LOBYTE(v25) = *v4;
LABEL_57:
    if (v9 < 0)
    {
      v34 = __p[0];
      __p[1] = (void *)1;
      *(_BYTE *)__p[0] = v25;
      v34[1] = 0;
      v28 = v4 + 1;
      if (v4 + 1 == a3)
        goto LABEL_41;
    }
    else
    {
      HIBYTE(v40) = 1;
      LOWORD(__p[0]) = v25;
      v28 = v4 + 1;
      if (v4 + 1 == a3)
        goto LABEL_41;
    }
    goto LABEL_40;
  }
  v25 = *v4;
  if (v25 != 92)
    goto LABEL_57;
  v26 = v4 + 1;
  if (v24)
    v27 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v26, a3, (uint64_t *)__p);
  else
    v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v26, (unsigned __int8 *)a3, (uint64_t)__p, (uint64_t)v6);
  v28 = v27;
  if (v27 == a3)
  {
LABEL_41:
    if (SHIBYTE(v40) < 0)
    {
      if (!__p[1])
        goto LABEL_62;
      if (__p[1] != (void *)1)
      {
        v30 = (void **)__p[0];
LABEL_61:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v6, *(char *)v30, *((char *)v30 + 1));
LABEL_62:
        v11 = 1;
        v4 = v28;
        if ((SHIBYTE(v40) & 0x80000000) == 0)
          goto LABEL_64;
        goto LABEL_63;
      }
      v30 = (void **)__p[0];
    }
    else
    {
      if (!HIBYTE(v40))
        goto LABEL_62;
      v30 = __p;
      if (HIBYTE(v40) != 1)
        goto LABEL_61;
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, *(char *)v30);
    goto LABEL_62;
  }
LABEL_40:
  v29 = *v28;
  if (v29 == 93)
    goto LABEL_41;
  v31 = v28 + 1;
  if (v28 + 1 == a3 || v29 != 45 || *v31 == 93)
    goto LABEL_41;
  v41 = 0uLL;
  v42 = 0;
  v4 = v28 + 2;
  if (v28 + 2 == a3 || *v31 != 91 || *v4 != 46)
  {
    if ((v24 | 0x40) == 0x40)
    {
      LODWORD(v31) = *v31;
      if ((_DWORD)v31 == 92)
      {
        if (v24)
          v32 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v28 + 2, a3, (uint64_t *)&v41);
        else
          v32 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v28 + 2, (unsigned __int8 *)a3, (uint64_t)&v41, (uint64_t)v6);
        goto LABEL_79;
      }
    }
    else
    {
      LOBYTE(v31) = *v31;
    }
    HIBYTE(v42) = 1;
    LOWORD(v41) = v31;
    goto LABEL_80;
  }
  v32 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v28 + 3, a3, (uint64_t)&v41);
LABEL_79:
  v4 = v32;
LABEL_80:
  *(_OWORD *)v37 = *(_OWORD *)__p;
  v38 = v40;
  __p[1] = 0;
  v40 = 0;
  __p[0] = 0;
  *(_OWORD *)v35 = v41;
  v36 = v42;
  v41 = 0uLL;
  v42 = 0;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]((uint64_t)v6, (char *)v37, (uint64_t)v35);
  if (SHIBYTE(v36) < 0)
  {
    operator delete(v35[0]);
    if ((SHIBYTE(v38) & 0x80000000) == 0)
    {
LABEL_82:
      if ((SHIBYTE(v42) & 0x80000000) == 0)
        goto LABEL_83;
LABEL_87:
      operator delete((void *)v41);
      v11 = 1;
      if (SHIBYTE(v40) < 0)
        goto LABEL_63;
      goto LABEL_64;
    }
  }
  else if ((SHIBYTE(v38) & 0x80000000) == 0)
  {
    goto LABEL_82;
  }
  operator delete(v37[0]);
  if (SHIBYTE(v42) < 0)
    goto LABEL_87;
LABEL_83:
  v11 = 1;
  if (SHIBYTE(v40) < 0)
LABEL_63:
    operator delete(__p[0]);
LABEL_64:
  if ((v11 & 1) != 0)
    return v4;
  return v6;
}

void sub_1BF3BD178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 49) < 0)
  {
    operator delete(*(void **)(v28 - 72));
    if (a28 < 0)
    {
LABEL_5:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  uint64_t v7;
  char *v8;
  char *v9;
  void **v10;
  unint64_t v11;
  __int128 v12;
  void *v13;
  void **v14;
  void **v15;
  void *__p[3];
  void *v18[3];

  if (a3 - __src < 2 || a3 - 1 == __src)
    goto LABEL_39;
  v7 = 0;
  v8 = __src;
  if (*__src != 61)
    goto LABEL_5;
LABEL_4:
  if (v8[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v7)
    {
      v8 = &__src[++v7];
      if (__src[v7] == 61)
        goto LABEL_4;
    }
LABEL_39:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (&__src[v7] == a3)
    goto LABEL_39;
  memset(v18, 170, sizeof(v18));
  std::regex_traits<char>::__lookup_collatename<char *>(__src, a1, &__src[v7], (uint64_t)v18);
  if ((SHIBYTE(v18[2]) & 0x80000000) == 0)
  {
    v9 = (char *)HIBYTE(v18[2]);
    if (HIBYTE(v18[2]))
    {
      memset(__p, 170, sizeof(__p));
      v10 = v18;
      goto LABEL_14;
    }
LABEL_40:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  v9 = (char *)v18[1];
  if (!v18[1])
    goto LABEL_40;
  memset(__p, 170, sizeof(__p));
  v10 = (void **)v18[0];
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)v10, &v9[(_QWORD)v10], (_BYTE **)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1])
    {
LABEL_16:
      v11 = *(_QWORD *)(a4 + 144);
      if (v11 >= *(_QWORD *)(a4 + 152))
      {
        *(_QWORD *)(a4 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a4 + 136), (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0)
          goto LABEL_37;
      }
      else
      {
        if ((HIBYTE(__p[2]) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 144), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v12 = *(_OWORD *)__p;
          *(void **)(v11 + 16) = __p[2];
          *(_OWORD *)v11 = v12;
        }
        *(_QWORD *)(a4 + 144) = v11 + 24;
        *(_QWORD *)(a4 + 144) = v11 + 24;
        if (SHIBYTE(__p[2]) < 0)
          goto LABEL_37;
      }
      goto LABEL_33;
    }
  }
  else if (HIBYTE(__p[2]))
  {
    goto LABEL_16;
  }
  v13 = (void *)HIBYTE(v18[2]);
  if (SHIBYTE(v18[2]) < 0)
    v13 = v18[1];
  if (v13 == (void *)2)
  {
    v15 = v18;
    if (SHIBYTE(v18[2]) < 0)
      v15 = (void **)v18[0];
    std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](a4, *(char *)v15, *((char *)v15 + 1));
  }
  else
  {
    if (v13 != (void *)1)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
    v14 = v18;
    if (SHIBYTE(v18[2]) < 0)
      v14 = (void **)v18[0];
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a4, *(char *)v14);
  }
  if (SHIBYTE(__p[2]) < 0)
  {
LABEL_37:
    operator delete(__p[0]);
    if (SHIBYTE(v18[2]) < 0)
      goto LABEL_38;
    return &__src[v7 + 2];
  }
LABEL_33:
  if (SHIBYTE(v18[2]) < 0)
LABEL_38:
    operator delete(v18[0]);
  return &__src[v7 + 2];
}

void sub_1BF3BD440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v11;
  unint64_t v12;

  if (a3 - __src < 2 || a3 - 1 == __src)
    goto LABEL_15;
  v6 = 0;
  v7 = __src;
  if (*__src != 46)
    goto LABEL_5;
LABEL_4:
  if (v7[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v6)
    {
      v7 = &__src[++v6];
      if (__src[v6] == 46)
        goto LABEL_4;
    }
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (&__src[v6] == a3)
    goto LABEL_15;
  std::regex_traits<char>::__lookup_collatename<char *>(__src, a1, &__src[v6], (uint64_t)&v11);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v11;
  v8 = v12;
  *(_QWORD *)(a4 + 16) = v12;
  v9 = HIBYTE(v8);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a4 + 8);
  if (v9 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return &__src[v6 + 2];
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *result;

  if (a2 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_8;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      result = a2 + 1;
      break;
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(_QWORD *)(a4 + 8) = 1;
        a4 = *(_QWORD *)a4;
      }
      else
      {
        *(_BYTE *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_8:
        result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
      }
      else
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(_QWORD *)(a4 + 8) = 1;
          a4 = *(_QWORD *)a4;
        }
        else
        {
          *(_BYTE *)(a4 + 23) = 1;
        }
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 1) = 0;
        result = a2 + 1;
      }
      break;
  }
  return result;
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, uint64_t *a4)
{
  std::basic_regex<char>::value_type v5;
  std::basic_regex<char>::value_type v7;
  std::basic_regex<char>::value_type *v8;
  std::basic_regex<char>::value_type v9;
  int v10;
  std::basic_regex<char>::value_type v11;

  if (a2 == a3)
LABEL_70:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  switch(*a2)
  {
    case '"':
    case '/':
    case '\\':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v5;
        *((_BYTE *)a4 + 1) = 0;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
        return a2 + 1;
      }
    case 'a':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 7;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
        return a2 + 1;
      }
    case 'b':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
        return a2 + 1;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return a2 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return a2 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return a2 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return a2 + 1;
      }
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xF8) != 0x30)
        goto LABEL_70;
      v7 = *a2 - 48;
      v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        v8 = a3;
LABEL_42:
        if (a4)
          goto LABEL_43;
LABEL_69:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return v8;
      }
      if ((*v8 & 0xF8) != 0x30)
        goto LABEL_42;
      v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 == a3)
      {
        v8 = a3;
        if (a4)
          goto LABEL_43;
        goto LABEL_69;
      }
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      if (!a4)
        goto LABEL_69;
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v7;
      *((_BYTE *)a4 + 1) = 0;
      return v8;
  }
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t j;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t k;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t m;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  int v33;
  char *v34;
  char v35;
  char *v36;
  char v37;
  _BYTE *v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  int v43;
  void *v44[2];
  uint64_t v45;
  void *v46[2];
  uint64_t v47;
  void *__p[2];
  uint64_t v49;
  void *v50[2];
  uint64_t v51;

  v3 = a3;
  v4 = (uint64_t)a2;
  if (!*(_BYTE *)(a1 + 170))
  {
    v16 = a2[23];
    if (a2[23] < 0)
    {
      if (*((_QWORD *)a2 + 1) != 1)
        goto LABEL_74;
    }
    else if (v16 != 1)
    {
LABEL_74:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    }
    if (*(char *)(a3 + 23) < 0)
    {
      if (*(_QWORD *)(a3 + 8) != 1)
        goto LABEL_74;
    }
    else if (*(_BYTE *)(a3 + 23) != 1)
    {
      goto LABEL_74;
    }
    if (!*(_BYTE *)(a1 + 169))
    {
LABEL_67:
      *(_OWORD *)__p = *(_OWORD *)v4;
      v49 = *(_QWORD *)(v4 + 16);
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)v4 = 0;
      *(_OWORD *)v50 = *(_OWORD *)v3;
      v51 = *(_QWORD *)(v3 + 16);
      *(_QWORD *)(v3 + 8) = 0;
      *(_QWORD *)(v3 + 16) = 0;
      *(_QWORD *)v3 = 0;
      v39 = *(_QWORD *)(a1 + 96);
      if (v39 < *(_QWORD *)(a1 + 104))
      {
        v40 = *(_OWORD *)__p;
        *(_QWORD *)(v39 + 16) = v49;
        *(_OWORD *)v39 = v40;
        __p[1] = 0;
        v49 = 0;
        __p[0] = 0;
        v41 = v51;
        *(_OWORD *)(v39 + 24) = *(_OWORD *)v50;
        *(_QWORD *)(v39 + 40) = v41;
        v50[1] = 0;
        v51 = 0;
        v50[0] = 0;
        *(_QWORD *)(a1 + 96) = v39 + 48;
        if (SHIBYTE(v49) < 0)
          goto LABEL_69;
        return;
      }
      v42 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
      v43 = SHIBYTE(v51);
      *(_QWORD *)(a1 + 96) = v42;
      if ((v43 & 0x80000000) == 0)
      {
        if (SHIBYTE(v49) < 0)
          goto LABEL_69;
        return;
      }
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0)
        return;
LABEL_69:
      operator delete(__p[0]);
      return;
    }
    v34 = a2;
    if ((v16 & 0x80) != 0)
      v34 = *(char **)a2;
    v35 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v34);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = v35;
      v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
        goto LABEL_64;
    }
    else
    {
      *(_BYTE *)v4 = v35;
      v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
      {
LABEL_64:
        v37 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v36);
        v38 = (_BYTE *)v3;
        if (*(char *)(v3 + 23) < 0)
          v38 = *(_BYTE **)v3;
        *v38 = v37;
        goto LABEL_67;
      }
    }
    v36 = *(char **)v3;
    goto LABEL_64;
  }
  if (*(_BYTE *)(a1 + 169))
  {
    for (i = 0; ; ++i)
    {
      v7 = *(unsigned __int8 *)(v4 + 23);
      if (*(char *)(v4 + 23) < 0)
      {
        if (i >= *(_QWORD *)(v4 + 8))
        {
LABEL_13:
          for (j = 0; ; ++j)
          {
            v12 = *(unsigned __int8 *)(v3 + 23);
            if (*(char *)(v3 + 23) < 0)
            {
              if (j >= *(_QWORD *)(v3 + 8))
                goto LABEL_44;
            }
            else if (j >= v12)
            {
              goto LABEL_44;
            }
            v13 = v3;
            if ((v12 & 0x80) != 0)
              v13 = *(_QWORD *)v3;
            v14 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *(char *)(v13 + j));
            v15 = v3;
            if (*(char *)(v3 + 23) < 0)
              v15 = *(_QWORD *)v3;
            *(_BYTE *)(v15 + j) = v14;
          }
        }
      }
      else if (i >= v7)
      {
        goto LABEL_13;
      }
      v8 = v4;
      if ((v7 & 0x80) != 0)
        v8 = *(_QWORD *)v4;
      v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *(char *)(v8 + i));
      v10 = v4;
      if (*(char *)(v4 + 23) < 0)
        v10 = *(_QWORD *)v4;
      *(_BYTE *)(v10 + i) = v9;
    }
  }
  for (k = 0; ; ++k)
  {
    v19 = a2[23];
    if (a2[23] < 0)
      break;
    if (k >= v19)
      goto LABEL_35;
LABEL_33:
    v18 = a2;
    if ((v19 & 0x80) != 0)
    {
      v18 = *(char **)a2;
      v20 = *(char **)a2;
    }
    else
    {
      v20 = a2;
    }
    v20[k] = v18[k];
  }
  if (k < *((_QWORD *)a2 + 1))
    goto LABEL_33;
LABEL_35:
  for (m = 0; ; ++m)
  {
    v23 = *(unsigned __int8 *)(a3 + 23);
    if (*(char *)(a3 + 23) < 0)
      break;
    if (m >= v23)
      goto LABEL_44;
LABEL_42:
    v22 = a3;
    if ((v23 & 0x80) != 0)
    {
      v22 = *(_QWORD *)a3;
      v24 = *(_QWORD *)a3;
    }
    else
    {
      v24 = a3;
    }
    *(_BYTE *)(v24 + m) = *(_BYTE *)(v22 + m);
  }
  if (m < *(_QWORD *)(a3 + 8))
    goto LABEL_42;
LABEL_44:
  if (*(char *)(v4 + 23) < 0)
  {
    v26 = v4;
    v4 = *(_QWORD *)v4;
    v25 = *(_QWORD *)(v26 + 8);
  }
  else
  {
    v25 = *(unsigned __int8 *)(v4 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v4, (char *)(v4 + v25));
  if (*(char *)(v3 + 23) < 0)
  {
    v28 = v3;
    v3 = *(_QWORD *)v3;
    v27 = *(_QWORD *)(v28 + 8);
  }
  else
  {
    v27 = *(unsigned __int8 *)(v3 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v3, (char *)(v3 + v27));
  *(_OWORD *)__p = *(_OWORD *)v46;
  v49 = v47;
  *(_OWORD *)v50 = *(_OWORD *)v44;
  v51 = v45;
  v29 = *(_QWORD *)(a1 + 96);
  if (v29 >= *(_QWORD *)(a1 + 104))
  {
    v32 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
    v33 = SHIBYTE(v51);
    *(_QWORD *)(a1 + 96) = v32;
    if (v33 < 0)
    {
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0)
        return;
    }
    else if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
      return;
    }
    goto LABEL_69;
  }
  v30 = *(_OWORD *)__p;
  *(_QWORD *)(v29 + 16) = v49;
  *(_OWORD *)v29 = v30;
  __p[1] = 0;
  v49 = 0;
  __p[0] = 0;
  v31 = v51;
  *(_OWORD *)(v29 + 24) = *(_OWORD *)v50;
  *(_QWORD *)(v29 + 40) = v31;
  v50[1] = 0;
  v51 = 0;
  v50[0] = 0;
  *(_QWORD *)(a1 + 96) = v29 + 48;
  if (SHIBYTE(v49) < 0)
    goto LABEL_69;
}

void sub_1BF3BE034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF3BE048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a21);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  char *v8;
  char **v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _WORD *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  unint64_t v36;
  __int128 v37;
  __int16 v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  _OWORD *v51;
  char *v52;
  unint64_t v53;
  __int128 v54;
  __int16 v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  _OWORD *v60;
  char *v61;
  unint64_t v62;
  __int128 v63;
  __int16 v64;

  if (*(_BYTE *)(a1 + 169))
  {
    v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3) << 8);
    v8 = *(char **)(a1 + 120);
    v7 = *(_QWORD *)(a1 + 128);
    if ((unint64_t)v8 >= v7)
    {
      v9 = (char **)(a1 + 112);
      v10 = *(char **)(a1 + 112);
      v11 = v8 - v10;
      if (v8 - v10 > -3)
      {
        v12 = v11 >> 1;
        v13 = v7 - (_QWORD)v10;
        if (v13 <= (v11 >> 1) + 1)
          v14 = v12 + 1;
        else
          v14 = v13;
        if (v13 >= 0x7FFFFFFFFFFFFFFELL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (!v15)
        {
          v16 = 0;
          v17 = (_WORD *)(2 * v12);
          v18 = 0;
          *(_WORD *)(2 * v12) = v6;
          v19 = 2 * v12 + 2;
          v20 = (char *)(v8 - v10);
          if (v8 == v10)
            goto LABEL_64;
LABEL_30:
          v30 = (unint64_t)(v20 - 2);
          if (v30 < 0x1E)
            goto LABEL_71;
          if ((unint64_t)(v8 - &v16[v11 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
            goto LABEL_71;
          v31 = (v30 >> 1) + 1;
          v32 = 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
          v33 = &v8[-v32];
          v17 = (_WORD *)((char *)v17 - v32);
          v34 = &v16[2 * v12 - 16];
          v35 = v8 - 16;
          v36 = v31 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v37 = *(_OWORD *)v35;
            *(v34 - 1) = *((_OWORD *)v35 - 1);
            *v34 = v37;
            v34 -= 2;
            v35 -= 32;
            v36 -= 16;
          }
          while (v36);
          v8 = v33;
          if (v31 != (v31 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_71:
            do
            {
              v38 = *((_WORD *)v8 - 1);
              v8 -= 2;
              *--v17 = v38;
            }
            while (v8 != v10);
          }
LABEL_63:
          v8 = *v9;
          goto LABEL_64;
        }
        if ((v15 & 0x8000000000000000) == 0)
        {
          v16 = operator new(2 * v15);
          v17 = &v16[2 * v12];
          v18 = &v16[2 * v15];
          *v17 = v6;
          v19 = (uint64_t)(v17 + 1);
          v20 = (char *)(v8 - v10);
          if (v8 == v10)
            goto LABEL_64;
          goto LABEL_30;
        }
LABEL_68:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
LABEL_67:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
LABEL_28:
    *(_WORD *)v8 = v6;
    v19 = (uint64_t)(v8 + 2);
    goto LABEL_66;
  }
  v9 = (char **)(a1 + 112);
  v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
  v8 = *(char **)(a1 + 120);
  v21 = *(_QWORD *)(a1 + 128);
  if (*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v8 < v21)
      goto LABEL_28;
    v22 = *v9;
    v23 = v8 - *v9;
    if (v23 <= -3)
      goto LABEL_67;
    v24 = v23 >> 1;
    v25 = v21 - (_QWORD)v22;
    if (v25 <= (v23 >> 1) + 1)
      v26 = v24 + 1;
    else
      v26 = v25;
    if (v25 >= 0x7FFFFFFFFFFFFFFELL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v26;
    if (v27)
    {
      if (v27 < 0)
        goto LABEL_68;
      v28 = operator new(2 * v27);
      v17 = &v28[2 * v24];
      v18 = &v28[2 * v27];
      *v17 = v6;
      v19 = (uint64_t)(v17 + 1);
      v29 = (char *)(v8 - v22);
      if (v8 == v22)
        goto LABEL_64;
    }
    else
    {
      v28 = 0;
      v17 = (_WORD *)(2 * v24);
      v18 = 0;
      *(_WORD *)(2 * v24) = v6;
      v19 = 2 * v24 + 2;
      v29 = (char *)(v8 - v22);
      if (v8 == v22)
        goto LABEL_64;
    }
    v47 = (unint64_t)(v29 - 2);
    if (v47 < 0x1E)
      goto LABEL_72;
    if ((unint64_t)(v8 - &v28[v23 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
      goto LABEL_72;
    v48 = (v47 >> 1) + 1;
    v49 = 2 * (v48 & 0xFFFFFFFFFFFFFFF0);
    v50 = &v8[-v49];
    v17 = (_WORD *)((char *)v17 - v49);
    v51 = &v28[2 * v24 - 16];
    v52 = v8 - 16;
    v53 = v48 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v54 = *(_OWORD *)v52;
      *(v51 - 1) = *((_OWORD *)v52 - 1);
      *v51 = v54;
      v51 -= 2;
      v52 -= 32;
      v53 -= 16;
    }
    while (v53);
    v8 = v50;
    if (v48 != (v48 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_72:
      do
      {
        v55 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v17 = v55;
      }
      while (v8 != v22);
    }
    goto LABEL_63;
  }
  if ((unint64_t)v8 < v21)
    goto LABEL_28;
  v39 = *v9;
  v40 = v8 - *v9;
  if (v40 <= -3)
    goto LABEL_67;
  v41 = v40 >> 1;
  v42 = v21 - (_QWORD)v39;
  if (v42 <= (v40 >> 1) + 1)
    v43 = v41 + 1;
  else
    v43 = v42;
  if (v42 >= 0x7FFFFFFFFFFFFFFELL)
    v44 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v44 = v43;
  if (!v44)
  {
    v45 = 0;
    v17 = (_WORD *)(2 * v41);
    v18 = 0;
    *(_WORD *)(2 * v41) = v6;
    v19 = 2 * v41 + 2;
    v46 = (char *)(v8 - v39);
    if (v8 == v39)
      goto LABEL_64;
    goto LABEL_57;
  }
  if (v44 < 0)
    goto LABEL_68;
  v45 = operator new(2 * v44);
  v17 = &v45[2 * v41];
  v18 = &v45[2 * v44];
  *v17 = v6;
  v19 = (uint64_t)(v17 + 1);
  v46 = (char *)(v8 - v39);
  if (v8 != v39)
  {
LABEL_57:
    v56 = (unint64_t)(v46 - 2);
    if (v56 < 0x1E)
      goto LABEL_73;
    if ((unint64_t)(v8 - &v45[v40 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
      goto LABEL_73;
    v57 = (v56 >> 1) + 1;
    v58 = 2 * (v57 & 0xFFFFFFFFFFFFFFF0);
    v59 = &v8[-v58];
    v17 = (_WORD *)((char *)v17 - v58);
    v60 = &v45[2 * v41 - 16];
    v61 = v8 - 16;
    v62 = v57 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v63 = *(_OWORD *)v61;
      *(v60 - 1) = *((_OWORD *)v61 - 1);
      *v60 = v63;
      v60 -= 2;
      v61 -= 32;
      v62 -= 16;
    }
    while (v62);
    v8 = v59;
    if (v57 != (v57 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_73:
      do
      {
        v64 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v17 = v64;
      }
      while (v8 != v39);
    }
    goto LABEL_63;
  }
LABEL_64:
  *(_QWORD *)(a1 + 112) = v17;
  *(_QWORD *)(a1 + 120) = v19;
  *(_QWORD *)(a1 + 128) = v18;
  if (v8)
    operator delete(v8);
LABEL_66:
  *(_QWORD *)(a1 + 120) = v19;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B89BF4](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BF3BE484(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, _BYTE **a4@<X8>)
{
  unint64_t v5;
  _OWORD *v9;
  _BYTE *v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  void **v20;
  _BYTE *v21;
  int v22;
  _BYTE *v23;
  void *__p[3];

  v5 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 > 0x16)
  {
    v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v16 = v5 | 7;
    v17 = v16 + 1;
    v9 = operator new(v16 + 1);
    __p[1] = (void *)v5;
    __p[2] = (void *)(v17 | 0x8000000000000000);
    __p[0] = v9;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v10 = v9;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  v9 = __p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v5 < 0x20 || (unint64_t)v9 - a2 < 0x20)
  {
    v10 = v9;
    v11 = (char *)a2;
  }
  else
  {
    v10 = (char *)v9 + (v5 & 0xFFFFFFFFFFFFFFE0);
    v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
    v12 = (__int128 *)(a2 + 16);
    v13 = v9 + 1;
    v14 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v5 == (v5 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  *v10 = 0;
  memset(a4, 170, 24);
  v19 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0)
    v20 = __p;
  else
    v20 = (void **)__p[0];
  if (SHIBYTE(__p[2]) < 0)
    v19 = (char *)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v20, &v19[(_QWORD)v20]);
  v21 = (_BYTE *)*((unsigned __int8 *)a4 + 23);
  v22 = (char)v21;
  if ((char)v21 < 0)
    v21 = a4[1];
  if (v21 == (_BYTE *)1)
    goto LABEL_32;
  if (v21 != (_BYTE *)12)
  {
    if (v22 < 0)
    {
      **a4 = 0;
      a4[1] = 0;
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        return;
LABEL_35:
      operator delete(__p[0]);
      return;
    }
    *(_BYTE *)a4 = 0;
    *((_BYTE *)a4 + 23) = 0;
LABEL_32:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return;
    goto LABEL_35;
  }
  if (v22 >= 0)
    v23 = a4;
  else
    v23 = *a4;
  v23[11] = v23[3];
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_35;
}

void sub_1BF3BE688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B89BF4](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BF3BE6DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_traits<char>::__lookup_classname<char const*>(uint64_t a1, _BYTE *__src, _BYTE *a3, BOOL a4)
{
  size_t v4;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void **v13;
  const char *v14;
  uint64_t classname;
  void *__dst[3];

  v4 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4 <= 0x16)
  {
    HIBYTE(__dst[2]) = (_BYTE)a3 - (_BYTE)__src;
    v9 = __dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(v9, __src, v4);
    v9 = (void **)((char *)v9 + v4);
    goto LABEL_9;
  }
  v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17)
    v10 = v4 | 7;
  v11 = v10 + 1;
  v9 = (void **)operator new(v10 + 1);
  __dst[1] = (void *)v4;
  __dst[2] = (void *)(v11 | 0x8000000000000000);
  __dst[0] = v9;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)v9 = 0;
  v12 = (char *)HIBYTE(__dst[2]);
  if (SHIBYTE(__dst[2]) >= 0)
    v13 = __dst;
  else
    v13 = (void **)__dst[0];
  if (SHIBYTE(__dst[2]) < 0)
    v12 = (char *)__dst[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v13, &v12[(_QWORD)v13]);
  if (SHIBYTE(__dst[2]) >= 0)
    v14 = (const char *)__dst;
  else
    v14 = (const char *)__dst[0];
  classname = std::__get_classname(v14, a4);
  if (SHIBYTE(__dst[2]) < 0)
    operator delete(__dst[0]);
  return classname;
}

void sub_1BF3BE828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  unint64_t v40;
  __int128 v41;
  char *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  char *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  char *v56;
  char v57;
  char *v58;
  char v59;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = (_QWORD *)(a1 + 64);
    v5 = *(_BYTE **)(a1 + 72);
    v16 = *(_QWORD *)(a1 + 80);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16)
        goto LABEL_24;
      v17 = (_BYTE *)*v6;
      v18 = (unint64_t)&v5[-*v6];
      v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        v20 = v16 - (_QWORD)v17;
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
          v21 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v12 = operator new(v21);
          v13 = &v12[v18];
          v14 = &v12[v21];
          v12[v18] = v2;
          v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17)
            goto LABEL_49;
        }
        else
        {
          v12 = 0;
          v13 = &v5[-*v6];
          v14 = 0;
          *(_BYTE *)v18 = a2;
          v15 = v18 + 1;
          if (v5 == v17)
            goto LABEL_49;
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            v38 = (__int128 *)(v5 - 16);
            v39 = &v12[v5 - 16 - v17];
            v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28)
              goto LABEL_86;
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          v42 = &v5[-v28 - 8];
          v43 = &v12[v42 - v17];
          v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v45 = *(_QWORD *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_86;
        }
LABEL_80:
        v56 = v13 - 1;
        do
        {
          v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16)
      goto LABEL_24;
    v23 = (_BYTE *)*v6;
    v24 = (unint64_t)&v5[-*v6];
    v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0)
      goto LABEL_89;
    v26 = v16 - (_QWORD)v23;
    if (2 * v26 > v25)
      v25 = 2 * v26;
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v12 = operator new(v27);
      v13 = &v12[v24];
      v14 = &v12[v27];
      v12[v24] = v2;
      v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(_QWORD *)(a1 + 64) = v13;
        *(_QWORD *)(a1 + 72) = v15;
        *(_QWORD *)(a1 + 80) = v14;
        if (!v5)
          goto LABEL_88;
        goto LABEL_87;
      }
    }
    else
    {
      v12 = 0;
      v13 = &v5[-*v6];
      v14 = 0;
      *(_BYTE *)v24 = a2;
      v15 = v24 + 1;
      if (v5 == v23)
        goto LABEL_49;
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        v46 = (__int128 *)(v5 - 16);
        v47 = &v12[v5 - 16 - v23];
        v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29)
          goto LABEL_86;
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      v50 = &v5[-v29 - 8];
      v51 = &v12[v50 - v23];
      v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v53 = *(_QWORD *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_86;
    }
LABEL_84:
    v58 = v13 - 1;
    do
    {
      v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v5 = *(_BYTE **)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *v5 = v2;
    v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  v6 = (_QWORD *)(a1 + 64);
  v7 = *(_BYTE **)(a1 + 64);
  v8 = v5 - v7;
  v9 = v5 - v7 + 1;
  if (v9 < 0)
    goto LABEL_89;
  v10 = v4 - (_QWORD)v7;
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    v12 = operator new(v11);
    v13 = &v12[v8];
    v14 = &v12[v11];
    v12[v8] = v2;
    v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7)
      goto LABEL_49;
  }
  else
  {
    v12 = 0;
    v13 = (char *)(v5 - v7);
    v14 = 0;
    *(_BYTE *)v8 = v2;
    v15 = v8 + 1;
    if (v5 == v7)
      goto LABEL_49;
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20)
    goto LABEL_76;
  if (v8 < 0x20)
  {
    v22 = 0;
    goto LABEL_55;
  }
  v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  v30 = (__int128 *)(v5 - 16);
  v31 = &v12[v5 - 16 - v7];
  v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    v34 = &v5[-v22 - 8];
    v35 = &v12[v34 - v7];
    v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v37 = *(_QWORD *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_86;
LABEL_76:
    v54 = v13 - 1;
    do
    {
      v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  v5 = (_BYTE *)*v6;
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v15;
  *(_QWORD *)(a1 + 80) = v14;
  if (v5)
LABEL_87:
    operator delete(v5);
LABEL_88:
  *(_QWORD *)(a1 + 72) = v15;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t v3;
  _OWORD *v7;
  _BYTE *v8;
  char *v9;
  __int128 *v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char *v17;
  void **v18;
  void *__p[3];

  v3 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3 > 0x16)
  {
    v14 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v14 = v3 | 7;
    v15 = v14 + 1;
    v7 = operator new(v14 + 1);
    __p[1] = (void *)v3;
    __p[2] = (void *)(v15 | 0x8000000000000000);
    __p[0] = v7;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v8 = v7;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  v7 = __p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v3 < 0x20 || (unint64_t)v7 - a2 < 0x20)
  {
    v8 = v7;
    v9 = (char *)a2;
  }
  else
  {
    v8 = (char *)v7 + (v3 & 0xFFFFFFFFFFFFFFE0);
    v9 = (char *)(a2 + (v3 & 0xFFFFFFFFFFFFFFE0));
    v10 = (__int128 *)(a2 + 16);
    v11 = v7 + 1;
    v12 = v3 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      *v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 32;
    }
    while (v12);
    if (v3 == (v3 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v16 = *v9++;
    *v8++ = v16;
  }
  while (v9 != a3);
LABEL_16:
  *v8 = 0;
  v17 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0)
    v18 = __p;
  else
    v18 = (void **)__p[0];
  if (SHIBYTE(__p[2]) < 0)
    v17 = (char *)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v18, &v17[(_QWORD)v18]);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
}

void sub_1BF3BEE3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B89BF4](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BF3BEE90(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  void **v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  void **v16;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[48 * v3];
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = &v7[48 * v6];
  v10 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((_QWORD *)v8 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v11 = v8 + 48;
  v12 = (void **)*a1;
  v13 = (void **)a1[1];
  if (v13 != *a1)
  {
    do
    {
      v14 = *((_OWORD *)v13 - 3);
      *((_QWORD *)v8 - 4) = *(v13 - 4);
      *((_OWORD *)v8 - 3) = v14;
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 6) = 0;
      v15 = *(_OWORD *)(v13 - 3);
      *((_QWORD *)v8 - 1) = *(v13 - 1);
      *(_OWORD *)(v8 - 24) = v15;
      v8 -= 48;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      *(v13 - 3) = 0;
      v13 -= 6;
    }
    while (v13 != v12);
    v13 = (void **)*a1;
    v16 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while (1)
    {
      if (v16 == v13)
        goto LABEL_22;
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if ((*((char *)v16 - 25) & 0x80000000) == 0)
          goto LABEL_14;
      }
      else if ((*((char *)v16 - 25) & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(*(v16 - 6));
LABEL_14:
      v16 -= 6;
    }
  }
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
LABEL_22:
  if (v13)
    operator delete(v13);
  return v11;
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8;
  int v9;
  _QWORD *v14;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  void *v17;
  std::__node<char> *v18;
  std::__node<char> *v19;

  v8 = __mexp_end;
  v9 = __mexp_begin;
  v14 = operator new(0x10uLL);
  end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  v17 = operator new(0x38uLL);
  LODWORD(first) = this->__loop_count_;
  v18 = __s->__first_;
  *(_QWORD *)v17 = &unk_1E7900E20;
  *((_QWORD *)v17 + 1) = v18;
  *((_QWORD *)v17 + 2) = v14;
  *((_QWORD *)v17 + 3) = __min;
  *((_QWORD *)v17 + 4) = __max;
  *((_DWORD *)v17 + 10) = (_DWORD)first;
  *((_DWORD *)v17 + 11) = v9;
  *((_DWORD *)v17 + 12) = v8;
  *((_BYTE *)v17 + 52) = __greedy;
  __s->__first_ = 0;
  v19 = (std::__node<char> *)operator new(0x10uLL);
  v19->__vftable = (std::__node<char>_vtbl *)&unk_1E7900EB0;
  v19[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v19;
  this->__end_ = (std::__owns_one_state<char> *)*((_QWORD *)v17 + 2);
  __s->__first_ = (std::__node<char> *)v17;
  this->__loop_count_ = (_DWORD)first + 1;
}

void sub_1BF3BF2A4(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);

  std::__loop<char>::~__loop(v1);
  _Unwind_Resume(a1);
}

void sub_1BF3BF2B8(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B89BF4](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BF3BF328(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B89BF4](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BF3BF374(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E7900E80;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E7900E80;
  v2 = __p[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = __p[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  operator delete(__p);
}

uint64_t std::__loop<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;

  v2 = *(unsigned int *)(result + 40);
  v3 = *(_QWORD *)(a2 + 56);
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 != -991)
  {
    *v4 = 0;
    if (!*(_QWORD *)(result + 32))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_28;
    }
    if (*(_QWORD *)(result + 24))
    {
      *(_DWORD *)a2 = -994;
      *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
      *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
      v20 = *(_DWORD *)(result + 44);
      v21 = *(_DWORD *)(result + 48);
      if (v20 == v21)
        return result;
      v22 = (v21 - 1);
      v23 = (v20 - 1);
      v24 = *(_QWORD *)(a2 + 24);
      v25 = *(_QWORD *)(a2 + 32);
      v26 = v22 - v23;
      if ((unint64_t)(v22 - v23) >= 2)
      {
        v27 = (v26 & 0xFFFFFFFFFFFFFFFELL) + v23;
        v28 = v25 + 24 * v23 + 24;
        v29 = v26 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(_QWORD *)(v28 - 24) = v24;
          *(_QWORD *)(v28 - 16) = v24;
          *(_QWORD *)v28 = v24;
          *(_QWORD *)(v28 + 8) = v24;
          *(_BYTE *)(v28 - 8) = 0;
          *(_BYTE *)(v28 + 16) = 0;
          v28 += 48;
          v29 -= 2;
        }
        while (v29);
        if (v26 == (v26 & 0xFFFFFFFFFFFFFFFELL))
          return result;
      }
      else
      {
        v27 = v23;
      }
      v30 = v22 - v27;
      v31 = (_BYTE *)(v25 + 24 * v27 + 16);
      do
      {
        *((_QWORD *)v31 - 2) = v24;
        *((_QWORD *)v31 - 1) = v24;
        *v31 = 0;
        v31 += 24;
        --v30;
      }
      while (v30);
      return result;
    }
LABEL_26:
    *(_DWORD *)a2 = -992;
    return result;
  }
  v5 = *v4 + 1;
  *v4 = v5;
  v6 = *(_QWORD *)(result + 24);
  v7 = *(_QWORD *)(result + 32);
  v8 = v5 < v7;
  if (v5 < v7 && v5 >= v6)
    v8 = v5 < v7 && *(_QWORD *)(v3 + 16 * v2 + 8) != *(_QWORD *)(a2 + 16);
  if (v8 && v5 >= v6)
    goto LABEL_26;
  *(_DWORD *)a2 = -994;
  if (!v8)
  {
LABEL_28:
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
  v12 = *(_DWORD *)(result + 44);
  v13 = *(_DWORD *)(result + 48);
  if (v12 == v13)
    return result;
  v14 = (v13 - 1);
  v15 = (v12 - 1);
  v16 = *(_QWORD *)(a2 + 24);
  v17 = *(_QWORD *)(a2 + 32);
  v18 = v14 - v15;
  if ((unint64_t)(v14 - v15) < 2)
  {
    v19 = v15;
LABEL_39:
    v34 = v14 - v19;
    v35 = (_BYTE *)(v17 + 24 * v19 + 16);
    do
    {
      *((_QWORD *)v35 - 2) = v16;
      *((_QWORD *)v35 - 1) = v16;
      *v35 = 0;
      v35 += 24;
      --v34;
    }
    while (v34);
    return result;
  }
  v19 = (v18 & 0xFFFFFFFFFFFFFFFELL) + v15;
  v32 = v17 + 24 * v15 + 24;
  v33 = v18 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    *(_QWORD *)(v32 - 24) = v16;
    *(_QWORD *)(v32 - 16) = v16;
    *(_QWORD *)v32 = v16;
    *(_QWORD *)(v32 + 8) = v16;
    *(_BYTE *)(v32 - 8) = 0;
    *(_BYTE *)(v32 + 16) = 0;
    v32 += 48;
    v33 -= 2;
  }
  while (v33);
  if (v18 != (v18 & 0xFFFFFFFFFFFFFFFELL))
    goto LABEL_39;
  return result;
}

uint64_t std::__loop<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  *(_DWORD *)a3 = -994;
  if (*(unsigned __int8 *)(result + 52) == a2)
  {
    *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 8);
  v3 = *(_DWORD *)(result + 44);
  *(_QWORD *)(*(_QWORD *)(a3 + 56) + 16 * *(unsigned int *)(result + 40) + 8) = *(_QWORD *)(a3 + 16);
  v4 = *(_DWORD *)(result + 48);
  if (v3 != v4)
  {
    v5 = (v4 - 1);
    v6 = (v3 - 1);
    v7 = *(_QWORD *)(a3 + 24);
    v8 = *(_QWORD *)(a3 + 32);
    v9 = v5 - v6;
    if ((unint64_t)(v5 - v6) < 2)
    {
      v10 = v6;
LABEL_9:
      v13 = v5 - v10;
      v14 = (_BYTE *)(v8 + 24 * v10 + 16);
      do
      {
        *((_QWORD *)v14 - 2) = v7;
        *((_QWORD *)v14 - 1) = v7;
        *v14 = 0;
        v14 += 24;
        --v13;
      }
      while (v13);
      return result;
    }
    v10 = (v9 & 0xFFFFFFFFFFFFFFFELL) + v6;
    v11 = v8 + 24 * v6 + 24;
    v12 = v9 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(_QWORD *)(v11 - 24) = v7;
      *(_QWORD *)(v11 - 16) = v7;
      *(_QWORD *)v11 = v7;
      *(_QWORD *)(v11 + 8) = v7;
      *(_BYTE *)(v11 - 8) = 0;
      *(_BYTE *)(v11 + 16) = 0;
      v11 += 48;
      v12 -= 2;
    }
    while (v12);
    if (v9 != (v9 & 0xFFFFFFFFFFFFFFFELL))
      goto LABEL_9;
  }
  return result;
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E7900E80;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E7900E80;
  v2 = __p[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = __p[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  operator delete(__p);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E7900E80;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E7900E80;
  v2 = __p[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = __p[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  operator delete(__p);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B89BF4](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BF3BF944(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(uint64_t a1, uint64_t a2, char *a3)
{
  char *v6;
  char *v7;
  int v8;
  std::basic_regex<char> *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  std::basic_regex<char> *v15;
  std::__owns_one_state<char> *v16;
  int v17;
  std::basic_regex<char> *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>((std::basic_regex<char> *)a1, (char *)a2, a3);
  v7 = v6;
  if (v6 != (char *)a2 || v6 == a3)
    return v7;
  if ((char *)(a2 + 1) == a3)
    return (char *)a2;
  if (*(_BYTE *)a2 != 92)
    return (char *)a2;
  v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 40)
  {
    v9 = (std::basic_regex<char> *)(a2 + 2);
    if ((*(_BYTE *)(a1 + 24) & 2) != 0)
    {
      v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      v10 = operator new(0x18uLL);
      v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      v12 = *(_QWORD *)(a1 + 56);
      v13 = *(_QWORD *)(v12 + 8);
      *v10 = &unk_1E7900D90;
      v10[1] = v13;
      *((_DWORD *)v10 + 4) = v11;
      *(_QWORD *)(v12 + 8) = v10;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (std::basic_regex<char> *)a3)
        goto LABEL_25;
      v15 = v9;
      v16 = *(std::__owns_one_state<char> **)(a1 + 56);
      v17 = *(_DWORD *)(a1 + 28);
      v18 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, v15, a3);
      if (v18 == v15)
        break;
      v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, v18, (std::basic_regex<char> *)a3, v16, (v17 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    while (v9 != v15);
    if ((char *)&v15->__traits_.__loc_.__locale_ + 1 == a3
      || LOBYTE(v15->__traits_.__loc_.__locale_) != 92
      || BYTE1(v15->__traits_.__loc_.__locale_) != 41)
    {
LABEL_25:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    v7 = (char *)v15 + 2 * (BYTE1(v15->__traits_.__loc_.__locale_) == 41);
    if ((*(_BYTE *)(a1 + 24) & 2) == 0)
    {
      v19 = operator new(0x18uLL);
      v20 = *(_QWORD *)(a1 + 56);
      v21 = *(_QWORD *)(v20 + 8);
      *v19 = &unk_1E7900DD8;
      v19[1] = v21;
      *((_DWORD *)v19 + 4) = v11;
      *(_QWORD *)(v20 + 8) = v19;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return v7;
    }
    return v7;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8)
    return (char *)a2;
  if ((v8 - 48) > *(_DWORD *)(a1 + 28))
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v8 - 48);
  return (char *)(a2 + 2);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  std::basic_regex<char> *v6;
  int locale_low;
  std::basic_regex<char> *v9;
  int v10;
  int v11;
  std::basic_regex<char> *v12;
  int v13;
  std::basic_regex<char> *v14;
  int v15;
  int v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;

  v6 = this;
  if (this == a3)
    return v6;
  locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return (std::basic_regex<char> *)((char *)v6 + 1);
  }
  if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3
    || locale_low != 92
    || BYTE1(this->__traits_.__loc_.__locale_) != 123)
  {
    return v6;
  }
  v9 = (std::basic_regex<char> *)((char *)this + 2 * (BYTE1(this->__traits_.__loc_.__locale_) == 123));
  if (v9 == a3)
    goto LABEL_43;
  v10 = LOBYTE(v9->__traits_.__loc_.__locale_);
  if ((v10 & 0xF8) != 0x30 && (v10 & 0xFE) != 0x38)
    goto LABEL_43;
  v11 = v10 - 48;
  v12 = (std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1);
  if ((std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1) == a3)
  {
LABEL_16:
    v12 = a3;
  }
  else
  {
    while (1)
    {
      v13 = LOBYTE(v12->__traits_.__loc_.__locale_);
      if ((v13 & 0xF8) != 0x30 && (v13 & 0xFE) != 0x38)
        break;
      if (v11 >= 214748364)
        goto LABEL_43;
      v11 = v13 + 10 * v11 - 48;
      v12 = (std::basic_regex<char> *)((char *)v12 + 1);
      if (v12 == a3)
        goto LABEL_16;
    }
  }
  if (v12 == v9)
    goto LABEL_43;
  if (v12 == a3)
    goto LABEL_41;
  v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 1);
  v15 = LOBYTE(v12->__traits_.__loc_.__locale_);
  if (v15 != 44)
  {
    if (v14 != a3 && v15 == 92 && LOBYTE(v14->__traits_.__loc_.__locale_) == 125)
    {
      v19 = (unsigned __int8 *)&v12->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v11, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v19;
    }
    goto LABEL_41;
  }
  if (v14 == a3)
    goto LABEL_41;
  v16 = LOBYTE(v14->__traits_.__loc_.__locale_);
  if ((v16 & 0xF8) == 0x30 || (v16 & 0xFE) == 0x38)
  {
    v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2);
    if ((std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2) == a3)
      goto LABEL_41;
    v17 = v16 - 48;
    while (1)
    {
      v16 = LOBYTE(v14->__traits_.__loc_.__locale_);
      if ((v16 & 0xF8) != 0x30 && (v16 & 0xFE) != 0x38)
        break;
      if (v17 >= 214748364)
        goto LABEL_43;
      v17 = v16 + 10 * v17 - 48;
      v14 = (std::basic_regex<char> *)((char *)v14 + 1);
      if (v14 == a3)
        goto LABEL_41;
    }
  }
  else
  {
    v17 = -1;
  }
  if (v14 == a3
    || (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1) == a3
    || v16 != 92
    || BYTE1(v14->__traits_.__loc_.__locale_) != 125)
  {
LABEL_41:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  }
  v18 = (unsigned __int8 *)v14 + 2 * (BYTE1(v14->__traits_.__loc_.__locale_) == 125);
  if (v17 != -1)
  {
    if (v17 >= v11)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v17, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v18;
    }
LABEL_43:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return (std::basic_regex<char> *)v18;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  int v5;
  char *v6;
  int v9;
  std::__node<char> *v10;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if (a2 == a3)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  v6 = a2 + 1;
  v5 = *a2;
  if (a2 + 1 == a3 && v5 == 36)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  if ((v5 - 46) > 0x2E || ((1 << (v5 - 46)) & 0x600000000001) == 0)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
    return a2 + 1;
  }
  else
  {
    if (v6 != a3 && v5 == 92)
    {
      v9 = *v6;
      if ((v9 - 36) <= 0x3A && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
        return a2 + 2;
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
    }
    if (v5 != 46)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
    v10 = (std::__node<char> *)operator new(0x10uLL);
    end = this->__end_;
    first = end->__first_;
    v10->__vftable = (std::__node<char>_vtbl *)&unk_1E7900F88;
    v10[1].__vftable = (std::__node<char>_vtbl *)first;
    end->__first_ = v10;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return a2 + 1;
  }
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  _BYTE *v2;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > this->__marked_count_)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  std::basic_regex<char> *v8;
  int locale_low;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  std::basic_regex<char> *v22;
  std::basic_regex<char> *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>((std::basic_regex<char> *)a1, a2, a3);
  if (v8 == a2
    && (v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(a1, a2, a3), v8 == a2))
  {
    if (a2 != a3 && LOBYTE(a2->__traits_.__loc_.__locale_) == 46)
    {
      v14 = operator new(0x10uLL);
      v15 = *(_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(v15 + 8);
      *v14 = &unk_1E7900F88;
      v14[1] = v16;
      *(_QWORD *)(v15 + 8) = v14;
LABEL_14:
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v8, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(a1, (char *)a2, (char *)a3);
    if (v8 != a2)
      goto LABEL_25;
  }
  else if (v8 != a2)
  {
    goto LABEL_25;
  }
  if (v8 == a3)
  {
LABEL_25:
    if (v8 != a2)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v8, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    return a2;
  }
  locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  switch(locale_low)
  {
    case '$':
      v10 = operator new(0x18uLL);
      v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v12 = *(_QWORD *)(a1 + 56);
      goto LABEL_13;
    case '(':
      if ((*(_BYTE *)(a1 + 24) & 2) != 0)
      {
        v19 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        v18 = operator new(0x18uLL);
        v19 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v19;
        v20 = *(_QWORD *)(a1 + 56);
        v21 = *(_QWORD *)(v20 + 8);
        *v18 = &unk_1E7900D90;
        v18[1] = v21;
        *((_DWORD *)v18 + 4) = v19;
        *(_QWORD *)(v20 + 8) = v18;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      ++*(_DWORD *)(a1 + 36);
      v22 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v22 == a3 || (v23 = v22, LOBYTE(v22->__traits_.__loc_.__locale_) != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      {
        v24 = operator new(0x18uLL);
        v25 = *(_QWORD *)(a1 + 56);
        v26 = *(_QWORD *)(v25 + 8);
        *v24 = &unk_1E7900DD8;
        v24[1] = v26;
        *((_DWORD *)v24 + 4) = v19;
        *(_QWORD *)(v25 + 8) = v24;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      v8 = (std::basic_regex<char> *)((char *)&v23->__traits_.__loc_.__locale_ + 1);
      goto LABEL_25;
    case '^':
      v10 = operator new(0x18uLL);
      v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v12 = *(_QWORD *)(a1 + 56);
LABEL_13:
      v17 = *(_QWORD *)(v12 + 8);
      *v10 = v13 + 16;
      v10[1] = v17;
      *((_BYTE *)v10 + 16) = v11;
      *(_QWORD *)(v12 + 8) = v10;
      goto LABEL_14;
  }
  return a2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3)
    return this;
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return this;
    case ')':
      if (a1->__open_count_)
        return this;
      break;
    default:
      break;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  std::basic_regex<char>::value_type *v4;
  std::basic_regex<char>::value_type v5;
  std::basic_regex<char>::value_type *result;
  _BOOL4 v7;
  uint64_t v8;

  v3 = this;
  if (this == a3)
    return (std::basic_regex<char>::value_type *)v3;
  v4 = (char *)&this->__traits_.__loc_.__locale_ + 1;
  if ((std::basic_regex<char> *)((char *)&v3->__traits_.__loc_.__locale_ + 1) == a3
    || LOBYTE(v3->__traits_.__loc_.__locale_) != 92)
  {
    return (std::basic_regex<char>::value_type *)v3;
  }
  v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      return (char *)v3 + 2;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        result = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v4, (std::basic_regex<char>::value_type *)a3, 0);
      }
      else
      {
        v7 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v5);
        v8 = 2;
        if (!v7)
          v8 = 0;
        result = (char *)v3 + v8;
      }
      break;
  }
  return result;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, std::vector<std::csub_match> *this, int a5)
{
  int v9;
  int v10;
  const std::vector<std::csub_match>::value_type *v11;
  int v12;
  const char *i;
  std::vector<std::csub_match>::pointer begin;
  std::sub_match<const char *> *first;
  std::sub_match<const char *> *second;
  uint64_t result;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  v10 = *(_DWORD *)(a1 + 28);
  this[1].__begin_ = a3;
  v11 = (const std::vector<std::csub_match>::value_type *)&this[1];
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  std::vector<std::sub_match<char const*>>::assign(this, (v10 + 1), (std::vector<std::csub_match>::const_reference)&this[1]);
  this[2].__begin_ = a2;
  this[2].__end_ = a2;
  LOBYTE(this[2].__end_cap_.__value_) = 0;
  *(std::pair<const char *, const char *> *)&this[3].__begin_ = v11->std::pair<const char *, const char *>;
  LOBYTE(this[3].__end_cap_.__value_) = this[1].__end_cap_.__value_;
  if ((v9 & 0x800) == 0)
    this[4].__end_ = a2;
  LOBYTE(this[4].__begin_) = 1;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
  {
    if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0) & 1) != 0)goto LABEL_28;
    goto LABEL_13;
  }
  if (*(_DWORD *)(a1 + 28))
  {
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))goto LABEL_28;
LABEL_13:
    if (a2 != a3 && (v9 & 0x40) == 0)
    {
      v12 = v9 | 0x80;
      for (i = (char *)&a2->first + 1; i != (const char *)a3; ++i)
      {
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
        if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
        {
          if (*(_DWORD *)(a1 + 28))
          {
            if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28;
          }
          else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)i, (uint64_t)a3, (uint64_t *)this, v12, 0) & 1) != 0)
          {
            goto LABEL_28;
          }
        }
        else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0) & 1) != 0)
        {
          goto LABEL_28;
        }
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      }
      std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
      {
        if (*(_DWORD *)(a1 + 28))
        {
          if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28;
        }
        else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a3, (uint64_t)a3, (uint64_t *)this, v12, 0) & 1) != 0)
        {
          goto LABEL_28;
        }
      }
      else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0) & 1) != 0)
      {
        goto LABEL_28;
      }
    }
    result = 0;
    this->__end_ = this->__begin_;
    return result;
  }
  if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0) & 1) == 0)goto LABEL_13;
LABEL_28:
  if (this->__end_ == this->__begin_)
    begin = (std::vector<std::csub_match>::pointer)v11;
  else
    begin = this->__begin_;
  first = (std::sub_match<const char *> *)begin->first;
  this[2].__end_ = (std::vector<std::csub_match>::pointer)begin->first;
  LOBYTE(this[2].__end_cap_.__value_) = this[2].__begin_ != first;
  second = (std::sub_match<const char *> *)begin->second;
  this[3].__begin_ = second;
  LOBYTE(this[3].__end_cap_.__value_) = second != this[3].__end_;
  return 1;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(std::vector<std::ssub_match> *this, uint64_t a2, std::sub_match<std::__wrap_iter<const char *>> *a3, uint64_t *a4, char a5)
{
  uint64_t v10;
  unint64_t v11;
  std::vector<std::ssub_match>::pointer begin;
  std::sub_match<std::__wrap_iter<const char *>> *end;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  std::vector<std::ssub_match>::pointer v25;
  std::sub_match<std::__wrap_iter<const char *>> *v26;

  v10 = a4[6];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  begin = this->__begin_;
  end = this->__end_;
  v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  if (v11 <= v14)
  {
    if (v11 < v14)
    {
      end = (std::vector<std::ssub_match>::pointer)((char *)begin + 8 * ((a4[1] - *a4) >> 3));
      this->__end_ = end;
    }
  }
  else
  {
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(this, v11 - v14);
    begin = this->__begin_;
    end = this->__end_;
  }
  if (end != begin)
  {
    v15 = 0;
    v16 = 0;
    v18 = *a4;
    v17 = a4[1];
    do
    {
      v19 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3);
      v20 = (_QWORD *)(v18 + v15 * 24);
      if (v19 <= v16)
        v21 = a4 + 3;
      else
        v21 = v20;
      begin[v15].first.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *v21 - v10);
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v16)
        v22 = (uint64_t)(a4 + 3);
      else
        v22 = *a4 + v15 * 24;
      this->__begin_[v15].second.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *(_QWORD *)(v22 + 8) - v10);
      v18 = *a4;
      v17 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v17 - *a4) >> 3) <= v16)
        v23 = (uint64_t)(a4 + 3);
      else
        v23 = *a4 + v15 * 24;
      v24 = *(_BYTE *)(v23 + 16);
      begin = this->__begin_;
      v25 = this->__end_;
      this->__begin_[v15].matched = v24;
      ++v16;
      ++v15;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)begin) >> 3));
  }
  this[1].__begin_ = a3;
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  v26 = (std::sub_match<std::__wrap_iter<const char *>> *)(a2 + a4[6] - v10);
  this[2].__begin_ = v26;
  this[2].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[7] - v10);
  LOBYTE(this[2].__end_cap_.__value_) = *((_BYTE *)a4 + 64);
  this[3].__begin_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[9] - v10);
  this[3].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[10] - v10);
  LOBYTE(this[3].__end_cap_.__value_) = *((_BYTE *)a4 + 88);
  if ((a5 & 1) == 0)
    this[4].__end_ = v26;
  LOBYTE(this[4].__begin_) = *((_BYTE *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  std::vector<std::pair<unsigned long, const char *>> *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  __int128 v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void **v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  void *v72;
  void *v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  void *v79;
  uint64_t v80;
  __int128 v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void **v85;
  void **v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t *v92;
  uint64_t v93;
  char v94;
  _BYTE v97[96];
  __int128 v98;
  __int128 v99;
  __int128 v100;

  v99 = 0u;
  v100 = 0u;
  v98 = 0u;
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
  {
LABEL_79:
    v85 = (void **)*((_QWORD *)&v98 + 1);
    v86 = (void **)v99;
    *((_QWORD *)&v100 + 1) = 0;
    v87 = v99 - *((_QWORD *)&v98 + 1);
    if ((_QWORD)v99 - *((_QWORD *)&v98 + 1) < 0x11uLL)
      goto LABEL_81;
    do
    {
LABEL_80:
      operator delete(*v85);
      v86 = (void **)v99;
      v85 = (void **)(*((_QWORD *)&v98 + 1) + 8);
      *((_QWORD *)&v98 + 1) = v85;
      v87 = v99 - (_QWORD)v85;
    }
    while ((_QWORD)v99 - (_QWORD)v85 > 0x10uLL);
    goto LABEL_81;
  }
  *(_DWORD *)v97 = 0;
  memset(&v97[8], 0, 85);
  std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v98);
  v11 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (((_QWORD)v100 + *((_QWORD *)&v100 + 1)) / 0x2AuLL))
      + 96 * (((_QWORD)v100 + *((_QWORD *)&v100 + 1)) % 0x2AuLL);
  v12 = *(_OWORD *)&v97[16];
  *(_OWORD *)v11 = *(_OWORD *)v97;
  *(_OWORD *)(v11 + 16) = v12;
  *(_QWORD *)(v11 + 40) = 0;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  memset(&v97[32], 0, 24);
  *(_QWORD *)(v11 + 56) = 0;
  *(_QWORD *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 72) = 0;
  memset(&v97[56], 0, 24);
  v13 = *(_QWORD *)&v97[80];
  *(_QWORD *)(v11 + 85) = *(_QWORD *)&v97[85];
  *(_QWORD *)(v11 + 80) = v13;
  v15 = *((_QWORD *)&v100 + 1);
  v14 = v100;
  v16 = ++*((_QWORD *)&v100 + 1);
  v17 = *((_QWORD *)&v98 + 1);
  v18 = *(unsigned int *)(a1 + 32);
  v19 = v100 + v15;
  v20 = 8 * (v19 / 0x2A);
  v21 = 96 * (v19 % 0x2A);
  v22 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + v20) + v21;
  *(_DWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = a2;
  *(_QWORD *)(*(_QWORD *)(v17 + v20) + v21 + 16) = a2;
  *(_QWORD *)(*(_QWORD *)(v17 + v20) + v21 + 24) = a3;
  v23 = *(_QWORD *)(v17 + v20) + v21;
  v26 = *(_QWORD *)(v23 + 56);
  v24 = (std::vector<std::pair<unsigned long, const char *>> *)(v23 + 56);
  v25 = v26;
  v27 = ((uint64_t)v24->__end_ - v26) >> 4;
  v92 = a4;
  if (v18 <= v27)
  {
    if (v18 < v27)
      v24->__end_ = (std::vector<std::pair<unsigned long, const char *>>::pointer)(v25 + 16 * v18);
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(v24, v18 - v27);
    v16 = *((_QWORD *)&v100 + 1);
    v14 = v100;
    v17 = *((_QWORD *)&v98 + 1);
  }
  v93 = 0;
  v94 = 0;
  v28 = 0;
  v29 = v14 + v16 - 1;
  v30 = 8 * (v29 / 0x2A);
  v31 = 96 * (v29 % 0x2A);
  *(_QWORD *)(*(_QWORD *)(v17 + v30) + v31 + 80) = v6;
  v32 = a3 - a2;
  v33 = *(_QWORD *)(v17 + v30) + v31;
  *(_DWORD *)(v33 + 88) = a5;
  *(_BYTE *)(v33 + 92) = a6;
  while (2)
  {
    if ((++v28 & 0xFFF) == 0 && (int)(v28 >> 12) >= (int)v32)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    v35 = v16 + v100 - 1;
    v36 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (v35 / 0x2A));
    v37 = v35 % 0x2A;
    v38 = v36 + 96 * (v35 % 0x2A);
    v40 = (_QWORD *)(v38 + 80);
    v39 = *(_QWORD *)(v38 + 80);
    if (v39)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v39 + 16))(v39, v36 + 96 * v37);
    switch(*(_DWORD *)v38)
    {
      case 0xFFFFFC18:
        v41 = *(_QWORD *)(v36 + 96 * v37 + 16);
        if ((a5 & 0x20) != 0 && v41 == a2 || (a5 & 0x1000) != 0 && v41 != a3)
          goto LABEL_21;
        v65 = v41 - *(_QWORD *)(v36 + 96 * v37 + 8);
        v66 = v93;
        if ((v94 & (v93 >= v65)) == 0)
          v66 = v65;
        if (v66 == v32)
        {
          v67 = (void **)*((_QWORD *)&v98 + 1);
          v68 = v99;
          if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          {
            *((_QWORD *)&v100 + 1) = 0;
            v82 = 0;
          }
          else
          {
            v69 = (_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * ((unint64_t)v100 / 0x2A));
            v70 = (_QWORD *)(*v69 + 96 * ((unint64_t)v100 % 0x2A));
            v71 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * ((*((_QWORD *)&v100 + 1) + (_QWORD)v100) / 0x2AuLL))
                + 96 * ((*((_QWORD *)&v100 + 1) + (_QWORD)v100) % 0x2AuLL);
            if (v70 != (_QWORD *)v71)
            {
              do
              {
                v72 = (void *)v70[7];
                if (v72)
                {
                  v70[8] = v72;
                  operator delete(v72);
                }
                v73 = (void *)v70[4];
                if (v73)
                {
                  v70[5] = v73;
                  operator delete(v73);
                }
                v70 += 12;
                if ((_QWORD *)((char *)v70 - *v69) == (_QWORD *)4032)
                {
                  v74 = (_QWORD *)v69[1];
                  ++v69;
                  v70 = v74;
                }
              }
              while (v70 != (_QWORD *)v71);
              v67 = (void **)*((_QWORD *)&v98 + 1);
              v68 = v99;
            }
            *((_QWORD *)&v100 + 1) = 0;
            v82 = v68 - (_QWORD)v67;
            if (v82 >= 0x11)
            {
              do
              {
                operator delete(*v67);
                v67 = (void **)(*((_QWORD *)&v98 + 1) + 8);
                *((_QWORD *)&v98 + 1) = v67;
                v82 = v99 - (_QWORD)v67;
              }
              while ((_QWORD)v99 - (_QWORD)v67 > 0x10uLL);
            }
          }
          if (v82 >> 3 == 1)
          {
            v83 = 21;
          }
          else
          {
            if (v82 >> 3 != 2)
            {
LABEL_76:
              v94 = 1;
              v93 = a3 - a2;
              goto LABEL_8;
            }
            v83 = 42;
          }
          *(_QWORD *)&v100 = v83;
          goto LABEL_76;
        }
        v93 = v66;
        v75 = *((_QWORD *)&v100 + 1) + v100 - 1;
        v76 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (v75 / 0x2A));
        v77 = v75 % 0x2A;
        v78 = *(void **)(v76 + 96 * (v75 % 0x2A) + 56);
        if (v78)
        {
          *(_QWORD *)(v76 + 96 * v77 + 64) = v78;
          operator delete(v78);
        }
        v79 = *(void **)(v76 + 96 * v77 + 32);
        if (v79)
        {
          *(_QWORD *)(v76 + 96 * v77 + 40) = v79;
          operator delete(v79);
        }
        v80 = 42 * ((uint64_t)(v99 - *((_QWORD *)&v98 + 1)) >> 3) - 1;
        v81 = v100;
        --*((_QWORD *)&v100 + 1);
        if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          v80 = 0;
        if ((unint64_t)(v80 - (*((_QWORD *)&v81 + 1) + v81) + 1) >= 0x54)
        {
          operator delete(*(void **)(v99 - 8));
          *(_QWORD *)&v99 = v99 - 8;
        }
        v94 = 1;
LABEL_8:
        v16 = *((_QWORD *)&v100 + 1);
        if (*((_QWORD *)&v100 + 1))
          continue;
        if ((v94 & 1) != 0)
        {
          v84 = *v92;
          *(_QWORD *)v84 = a2;
          *(_QWORD *)(v84 + 8) = a2 + v93;
          v6 = 1;
          *(_BYTE *)(v84 + 16) = 1;
          goto LABEL_79;
        }
        v6 = 0;
        v85 = (void **)*((_QWORD *)&v98 + 1);
        v86 = (void **)v99;
        *((_QWORD *)&v100 + 1) = 0;
        v87 = v99 - *((_QWORD *)&v98 + 1);
        if ((_QWORD)v99 - *((_QWORD *)&v98 + 1) >= 0x11uLL)
          goto LABEL_80;
LABEL_81:
        v88 = v87 >> 3;
        if (v88 == 1)
        {
          v89 = 21;
LABEL_85:
          *(_QWORD *)&v100 = v89;
        }
        else if (v88 == 2)
        {
          v89 = 42;
          goto LABEL_85;
        }
        if (v85 != v86)
        {
          do
          {
            v90 = *v85++;
            operator delete(v90);
          }
          while (v85 != v86);
          if ((_QWORD)v99 != *((_QWORD *)&v98 + 1))
            *(_QWORD *)&v99 = v99 + ((*((_QWORD *)&v98 + 1) - v99 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
        if ((_QWORD)v98)
          operator delete((void *)v98);
        return v6;
      case 0xFFFFFC19:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_8;
      case 0xFFFFFC1D:
        v49 = v100;
        if (!(_QWORD)v100)
        {
          std::deque<std::__state<char>>::__add_front_capacity((uint64_t)&v98);
          v49 = v100;
        }
        v50 = (_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (v49 / 0x2A));
        v51 = *v50 + 96 * (v49 % 0x2A);
        if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          v51 = 0;
        if (v51 == *v50)
          v51 = *(v50 - 1) + 4032;
        v52 = *(_OWORD *)(v38 + 16);
        *(_OWORD *)(v51 - 96) = *(_OWORD *)v38;
        *(_OWORD *)(v51 - 80) = v52;
        v53 = v36 + 96 * v37;
        *(_QWORD *)(v51 - 56) = 0;
        *(_QWORD *)(v51 - 48) = 0;
        *(_QWORD *)(v51 - 64) = 0;
        *(_OWORD *)(v51 - 64) = *(_OWORD *)(v53 + 32);
        *(_QWORD *)(v51 - 48) = *(_QWORD *)(v53 + 48);
        *(_QWORD *)(v53 + 32) = 0;
        *(_QWORD *)(v53 + 40) = 0;
        *(_QWORD *)(v53 + 48) = 0;
        *(_QWORD *)(v51 - 40) = 0;
        *(_QWORD *)(v51 - 32) = 0;
        *(_QWORD *)(v51 - 24) = 0;
        *(_OWORD *)(v51 - 40) = *(_OWORD *)(v53 + 56);
        *(_QWORD *)(v51 - 24) = *(_QWORD *)(v53 + 72);
        *(_QWORD *)(v53 + 56) = 0;
        *(_QWORD *)(v53 + 64) = 0;
        *(_QWORD *)(v53 + 72) = 0;
        v54 = *v40;
        *(_QWORD *)(v51 - 11) = *(_QWORD *)(v38 + 85);
        *(_QWORD *)(v51 - 16) = v54;
        v55 = *((_QWORD *)&v100 + 1);
        *(_QWORD *)&v100 = v100 - 1;
        ++*((_QWORD *)&v100 + 1);
        v56 = v55 + v100;
        v57 = (v55 + (uint64_t)v100) / 0x2AuLL;
        v43 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * v57);
        v44 = v56 - 42 * v57;
        v45 = *(void **)(v43 + 96 * v44 + 56);
        if (!v45)
          goto LABEL_23;
        goto LABEL_22;
      case 0xFFFFFC1F:
LABEL_21:
        v42 = *((_QWORD *)&v100 + 1) + v100 - 1;
        v43 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (v42 / 0x2A));
        v44 = v42 % 0x2A;
        v45 = *(void **)(v43 + 96 * (v42 % 0x2A) + 56);
        if (v45)
        {
LABEL_22:
          *(_QWORD *)(v43 + 96 * v44 + 64) = v45;
          operator delete(v45);
        }
LABEL_23:
        v46 = *(void **)(v43 + 96 * v44 + 32);
        if (v46)
        {
          *(_QWORD *)(v43 + 96 * v44 + 40) = v46;
          operator delete(v46);
        }
        v47 = 42 * ((uint64_t)(v99 - *((_QWORD *)&v98 + 1)) >> 3) - 1;
        v48 = v100;
        --*((_QWORD *)&v100 + 1);
        if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          v47 = 0;
        if ((unint64_t)(v47 - (*((_QWORD *)&v48 + 1) + v48) + 1) >= 0x54)
        {
          operator delete(*(void **)(v99 - 8));
          *(_QWORD *)&v99 = v99 - 8;
        }
        goto LABEL_8;
      case 0xFFFFFC20:
        *(_QWORD *)&v58 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v58 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v97[64] = v58;
        *(_OWORD *)&v97[80] = v58;
        *(_OWORD *)&v97[32] = v58;
        *(_OWORD *)&v97[48] = v58;
        *(_OWORD *)v97 = v58;
        *(_OWORD *)&v97[16] = v58;
        std::__state<char>::__state((uint64_t)v97, (__int128 *)(v36 + 96 * v37));
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*v40 + 24))(*v40, 1, v36 + 96 * v37);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(**(_QWORD **)&v97[80] + 24))(*(_QWORD *)&v97[80], 0, v97);
        v59 = *((_QWORD *)&v98 + 1);
        if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          v60 = 0;
        else
          v60 = 42 * ((uint64_t)(v99 - *((_QWORD *)&v98 + 1)) >> 3) - 1;
        v61 = *((_QWORD *)&v100 + 1) + v100;
        if (v60 == *((_QWORD *)&v100 + 1) + (_QWORD)v100)
        {
          std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v98);
          v59 = *((_QWORD *)&v98 + 1);
          v61 = *((_QWORD *)&v100 + 1) + v100;
        }
        v62 = *(_QWORD *)(v59 + 8 * (v61 / 0x2A)) + 96 * (v61 % 0x2A);
        v63 = *(_OWORD *)&v97[16];
        *(_OWORD *)v62 = *(_OWORD *)v97;
        *(_OWORD *)(v62 + 16) = v63;
        *(_QWORD *)(v62 + 40) = 0;
        *(_QWORD *)(v62 + 48) = 0;
        *(_QWORD *)(v62 + 32) = 0;
        *(_OWORD *)(v62 + 32) = *(_OWORD *)&v97[32];
        *(_QWORD *)(v62 + 48) = *(_QWORD *)&v97[48];
        memset(&v97[32], 0, 24);
        *(_QWORD *)(v62 + 56) = 0;
        *(_QWORD *)(v62 + 64) = 0;
        *(_QWORD *)(v62 + 72) = 0;
        *(_OWORD *)(v62 + 56) = *(_OWORD *)&v97[56];
        *(_QWORD *)(v62 + 72) = *(_QWORD *)&v97[72];
        memset(&v97[56], 0, 24);
        v64 = *(_QWORD *)&v97[80];
        *(_QWORD *)(v62 + 85) = *(_QWORD *)&v97[85];
        *(_QWORD *)(v62 + 80) = v64;
        ++*((_QWORD *)&v100 + 1);
        if (*(_QWORD *)&v97[56])
        {
          *(_QWORD *)&v97[64] = *(_QWORD *)&v97[56];
          operator delete(*(void **)&v97[56]);
        }
        if (*(_QWORD *)&v97[32])
        {
          *(_QWORD *)&v97[40] = *(_QWORD *)&v97[32];
          operator delete(*(void **)&v97[32]);
        }
        goto LABEL_8;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
  }
}

void sub_1BF3C1170(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_1BF3C1184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  std::__state<char>::~__state((uint64_t *)va);
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v11 - 144));
  _Unwind_Resume(a1);
}

void sub_1BF3C11CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_1BF3C11E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  const char *v20;
  BOOL v21;
  uint64_t v22;
  char *v23;
  char *v24;
  const char *v25;
  char *v26;
  void *v27;
  void *v28;
  __int128 v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  const char *v33;
  const char *v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  char *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  unsigned int v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  void *v50;
  char *v51;
  char *v52;
  char *v53;
  void *v54;
  void *v55;
  uint64_t *v57;
  const char *v58;
  const char *v59;
  char v60;
  _BYTE v62[96];
  std::vector<std::csub_match>::value_type __x;
  _BYTE v64[40];
  void *v65[2];
  _BYTE v66[40];
  char *v67;
  char *v68;
  unint64_t v69;

  v67 = 0;
  v68 = 0;
  v69 = 0;
  *(_DWORD *)&v66[36] = -1431655766;
  *(_QWORD *)v64 = 0xAAAAAAAA00000000;
  memset(&v64[8], 0, 32);
  *(_OWORD *)v65 = 0u;
  memset(v66, 0, 36);
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
    goto LABEL_63;
  __x.second = a3;
  *(_QWORD *)&__x.matched = 0xAAAAAAAAAAAAAA00;
  __x.first = a3;
  *(_DWORD *)v62 = 0;
  memset(&v62[8], 0, 85);
  v68 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v67, (uint64_t)v62);
  if (*(_QWORD *)&v62[56])
  {
    *(_QWORD *)&v62[64] = *(_QWORD *)&v62[56];
    operator delete(*(void **)&v62[56]);
  }
  if (*(_QWORD *)&v62[32])
  {
    *(_QWORD *)&v62[40] = *(_QWORD *)&v62[32];
    operator delete(*(void **)&v62[32]);
  }
  v12 = v68;
  *((_DWORD *)v68 - 24) = 0;
  *((_QWORD *)v12 - 11) = a2;
  *((_QWORD *)v12 - 10) = a2;
  *((_QWORD *)v12 - 9) = a3;
  v13 = *((_QWORD *)v12 - 8);
  v14 = *(unsigned int *)(a1 + 28);
  v15 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v12 - 7) - v13) >> 3);
  if (v14 <= v15)
  {
    if (v14 < v15)
      *((_QWORD *)v12 - 7) = v13 + 24 * v14;
  }
  else
  {
    std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v12 - 64), v14 - v15, &__x);
    v12 = v68;
  }
  v16 = *((_QWORD *)v12 - 5);
  v17 = *(unsigned int *)(a1 + 32);
  v18 = (*((_QWORD *)v12 - 4) - v16) >> 4;
  v57 = a4;
  if (v17 <= v18)
  {
    if (v17 < v18)
      *((_QWORD *)v12 - 4) = v16 + 16 * v17;
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v12 - 40), v17 - v18);
    v12 = v68;
  }
  v60 = 0;
  v19 = 0;
  v20 = (const char *)(a3 - a2);
  *((_QWORD *)v12 - 2) = v6;
  *((_DWORD *)v12 - 2) = a5;
  v59 = 0;
  *(v12 - 4) = a6;
  v58 = a3;
  do
  {
    v21 = (++v19 & 0xFFF) != 0 || (int)(v19 >> 12) < (int)v20;
    if (!v21)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    v23 = v12 - 16;
    v22 = *((_QWORD *)v12 - 2);
    v24 = v12 - 96;
    if (v22)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v22 + 16))(v22, v12 - 96);
    switch(*(_DWORD *)v24)
    {
      case 0xFFFFFC18:
        v25 = (const char *)*((_QWORD *)v12 - 10);
        if ((a5 & 0x20) != 0 && v25 == a2 || (a5 & 0x1000) != 0 && v25 != v58)
          goto LABEL_29;
        v33 = &v25[-*((_QWORD *)v12 - 11)];
        v34 = v59;
        if ((v60 & ((uint64_t)v59 >= (uint64_t)v33)) == 0)
        {
          v35 = *((_OWORD *)v12 - 5);
          *(_OWORD *)v64 = *(_OWORD *)v24;
          *(_OWORD *)&v64[16] = v35;
          if (v64 != v24)
          {
            std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>((char **)&v64[32], *((char **)v12 - 8), *((char **)v12 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v12 - 7) - *((_QWORD *)v12 - 8)) >> 3));
            std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((uint64_t)v66, *((const double **)v12 - 5), *((const double **)v12 - 4), (uint64_t)(*((_QWORD *)v12 - 4) - *((_QWORD *)v12 - 5)) >> 4);
          }
          v36 = *(_QWORD *)v23;
          *(_QWORD *)&v66[29] = *(_QWORD *)(v12 - 11);
          *(_QWORD *)&v66[24] = v36;
          v34 = v33;
        }
        v37 = v68;
        if (v34 == v20)
        {
          v38 = v67;
          while (v37 != v38)
          {
            v39 = (void *)*((_QWORD *)v37 - 5);
            if (v39)
            {
              *((_QWORD *)v37 - 4) = v39;
              operator delete(v39);
            }
            v40 = (void *)*((_QWORD *)v37 - 8);
            if (v40)
            {
              *((_QWORD *)v37 - 7) = v40;
              operator delete(v40);
            }
            v37 -= 96;
          }
          v68 = v38;
          v60 = 1;
          v59 = v20;
        }
        else
        {
          v59 = v34;
          v41 = (void *)*((_QWORD *)v68 - 5);
          if (v41)
          {
            *((_QWORD *)v68 - 4) = v41;
            operator delete(v41);
          }
          v42 = (void *)*((_QWORD *)v37 - 8);
          if (v42)
          {
            *((_QWORD *)v37 - 7) = v42;
            operator delete(v42);
          }
          v68 = v37 - 96;
          v60 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_29:
        v26 = v68;
        v27 = (void *)*((_QWORD *)v68 - 5);
        if (v27)
        {
          *((_QWORD *)v68 - 4) = v27;
          operator delete(v27);
        }
        v28 = (void *)*((_QWORD *)v26 - 8);
        if (v28)
        {
          *((_QWORD *)v26 - 7) = v28;
          operator delete(v28);
        }
        v68 = v26 - 96;
        break;
      case 0xFFFFFC20:
        *(_QWORD *)&v29 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v62[64] = v29;
        *(_OWORD *)&v62[80] = v29;
        *(_OWORD *)&v62[32] = v29;
        *(_OWORD *)&v62[48] = v29;
        *(_OWORD *)v62 = v29;
        *(_OWORD *)&v62[16] = v29;
        std::__state<char>::__state((uint64_t)v62, (__int128 *)v12 - 6);
        (*(void (**)(_QWORD, uint64_t, char *))(**(_QWORD **)v23 + 24))(*(_QWORD *)v23, 1, v12 - 96);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(**(_QWORD **)&v62[80] + 24))(*(_QWORD *)&v62[80], 0, v62);
        v30 = v68;
        if ((unint64_t)v68 >= v69)
        {
          v68 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v67, (uint64_t)v62);
          if (*(_QWORD *)&v62[56])
          {
            *(_QWORD *)&v62[64] = *(_QWORD *)&v62[56];
            operator delete(*(void **)&v62[56]);
          }
        }
        else
        {
          v31 = *(_OWORD *)&v62[16];
          *(_OWORD *)v68 = *(_OWORD *)v62;
          *((_OWORD *)v30 + 1) = v31;
          *((_QWORD *)v30 + 4) = 0;
          *((_QWORD *)v30 + 5) = 0;
          *((_QWORD *)v30 + 6) = 0;
          *((_QWORD *)v30 + 7) = 0;
          *((_OWORD *)v30 + 2) = *(_OWORD *)&v62[32];
          *((_QWORD *)v30 + 6) = *(_QWORD *)&v62[48];
          memset(&v62[32], 0, 24);
          *((_QWORD *)v30 + 8) = 0;
          *((_QWORD *)v30 + 9) = 0;
          *(_OWORD *)(v30 + 56) = *(_OWORD *)&v62[56];
          *((_QWORD *)v30 + 9) = *(_QWORD *)&v62[72];
          memset(&v62[56], 0, 24);
          v32 = *(_QWORD *)&v62[80];
          *(_QWORD *)(v30 + 85) = *(_QWORD *)&v62[85];
          *((_QWORD *)v30 + 10) = v32;
          v68 = v30 + 96;
        }
        if (*(_QWORD *)&v62[32])
        {
          *(_QWORD *)&v62[40] = *(_QWORD *)&v62[32];
          operator delete(*(void **)&v62[32]);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    v12 = v68;
  }
  while (v67 != v68);
  if ((v60 & 1) == 0)
  {
LABEL_63:
    v49 = 0;
    v50 = *(void **)v66;
    if (!*(_QWORD *)v66)
      goto LABEL_65;
    goto LABEL_64;
  }
  v43 = *v57;
  *(_QWORD *)v43 = a2;
  *(_QWORD *)(v43 + 8) = &v59[(_QWORD)a2];
  *(_BYTE *)(v43 + 16) = 1;
  if (v65[0] != *(void **)&v64[32])
  {
    v44 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v65[0] - *(_QWORD *)&v64[32]) >> 3);
    v45 = (_BYTE *)(*(_QWORD *)&v64[32] + 16);
    v46 = 1;
    do
    {
      v47 = v43 + 24 * v46;
      *(_OWORD *)v47 = *((_OWORD *)v45 - 1);
      v48 = *v45;
      v45 += 24;
      *(_BYTE *)(v47 + 16) = v48;
      v21 = v44 > v46++;
    }
    while (v21);
  }
  v49 = 1;
  v50 = *(void **)v66;
  if (*(_QWORD *)v66)
  {
LABEL_64:
    *(_QWORD *)&v66[8] = v50;
    operator delete(v50);
  }
LABEL_65:
  if (*(_QWORD *)&v64[32])
  {
    v65[0] = *(void **)&v64[32];
    operator delete(*(void **)&v64[32]);
  }
  v51 = v67;
  if (v67)
  {
    v52 = v68;
    v53 = v67;
    if (v68 != v67)
    {
      do
      {
        v54 = (void *)*((_QWORD *)v52 - 5);
        if (v54)
        {
          *((_QWORD *)v52 - 4) = v54;
          operator delete(v54);
        }
        v55 = (void *)*((_QWORD *)v52 - 8);
        if (v55)
        {
          *((_QWORD *)v52 - 7) = v55;
          operator delete(v55);
        }
        v52 -= 96;
      }
      while (v52 != v51);
      v53 = v67;
    }
    v68 = v51;
    operator delete(v53);
  }
  return v49;
}

void sub_1BF3C17A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  std::__state<char>::~__state(&a35);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v35 - 120));
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::clear(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  char *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    v11 = 0;
  }
  else
  {
    v4 = a1[4];
    v5 = &v2[v4 / 0x2A];
    v6 = (char *)*v5 + 96 * (v4 % 0x2A);
    v7 = (unint64_t)v2[(a1[5] + v4) / 0x2A] + 96 * ((a1[5] + v4) % 0x2A);
    if (v6 != (char *)v7)
    {
      do
      {
        v8 = (void *)*((_QWORD *)v6 + 7);
        if (v8)
        {
          *((_QWORD *)v6 + 8) = v8;
          operator delete(v8);
        }
        v9 = (void *)*((_QWORD *)v6 + 4);
        if (v9)
        {
          *((_QWORD *)v6 + 5) = v9;
          operator delete(v9);
        }
        v6 += 96;
        if (v6 - (_BYTE *)*v5 == 4032)
        {
          v10 = (char *)v5[1];
          ++v5;
          v6 = v10;
        }
      }
      while (v6 != (char *)v7);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
    a1[5] = 0;
    v11 = (char *)v3 - (char *)v2;
    if (v11 >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v12 = a1[2];
        v2 = (void **)(a1[1] + 8);
        a1[1] = v2;
        v11 = v12 - (_QWORD)v2;
      }
      while (v11 > 0x10);
    }
  }
  if (v11 >> 3 == 1)
  {
    v13 = 21;
  }
  else
  {
    if (v11 >> 3 != 2)
      return;
    v13 = 42;
  }
  a1[4] = v13;
}

void **std::deque<std::__state<char>>::~deque[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  _BYTE *v5;
  _BYTE *v6;

  std::deque<std::__state<char>>::clear(a1);
  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    v6 = a1[1];
    v5 = a1[2];
    if (v5 != v6)
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::deque<std::__state<char>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  BOOL v38;
  int64_t v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  void *v89;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v32 = (v5 - v9) >> 2;
      if (v5 == v9)
        v32 = 1;
      if (!(v32 >> 61))
      {
        v33 = v32 >> 2;
        v34 = 8 * v32;
        v35 = (char *)operator new(8 * v32);
        v36 = &v35[8 * v33];
        v37 = &v35[v34];
        v39 = v5 - v7;
        v38 = v5 == v7;
        v5 = v36;
        if (!v38)
        {
          v5 = &v36[v39 & 0xFFFFFFFFFFFFFFF8];
          v40 = v39 - 8;
          if ((unint64_t)(v39 - 8) >= 0x38)
          {
            v73 = &v35[8 * v33];
            v41 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              v74 = (v40 >> 3) + 1;
              v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              v41 = &v36[v75];
              v7 += v75;
              v76 = (__int128 *)(v6 + 3);
              v77 = v73 + 16;
              v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v41 = &v35[8 * v33];
          }
          do
          {
            v80 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v41 = v80;
            v41 += 8;
          }
          while (v41 != v5);
        }
        goto LABEL_74;
      }
LABEL_85:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v89 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v89);
      return;
    }
    v89 = operator new(0xFC0uLL);
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v89);
    v42 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v42 + 1);
    v8 = *v42;
    *(_QWORD *)(a1 + 8) = v42 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v43 = (v5 - v9) >> 2;
      if (v5 == v9)
        v43 = 1;
      if (!(v43 >> 61))
      {
        v44 = v43 >> 2;
        v45 = 8 * v43;
        v35 = (char *)operator new(8 * v43);
        v36 = &v35[8 * v44];
        v37 = &v35[v45];
        v46 = v5 - v7;
        v38 = v5 == v7;
        v5 = v36;
        if (!v38)
        {
          v5 = &v36[v46 & 0xFFFFFFFFFFFFFFF8];
          v47 = v46 - 8;
          if ((unint64_t)(v46 - 8) >= 0x38)
          {
            v81 = &v35[8 * v44];
            v48 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              v82 = (v47 >> 3) + 1;
              v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              v48 = &v36[v83];
              v7 += v83;
              v84 = (__int128 *)(v42 + 3);
              v85 = v81 + 16;
              v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v48 = &v35[8 * v44];
          }
          do
          {
            v88 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v48 = v88;
            v48 += 8;
          }
          while (v48 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v35;
        *(_QWORD *)(a1 + 8) = v36;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v37;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_85;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_85;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFC0uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v30 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v49 = 1;
      else
        v49 = v20 >> 2;
      if (v49 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v27 = (char *)operator new(8 * v49);
      v28 = &v27[8 * v49];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v27;
      *(_QWORD *)v27 = v30;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v31 = v21 + 2;
      if (v21 >= -1)
        v31 = v21 + 1;
      v27 -= 8 * (v31 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    goto LABEL_49;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
  {
    do
    {
LABEL_49:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v25)
            v57 = 1;
          else
            v57 = (v28 - v25) >> 2;
          if (v57 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v58 = (char *)operator new(8 * v57);
          v59 = v58;
          v60 = (v57 + 3) >> 2;
          v27 = &v58[8 * v60];
          v61 = v29 - v25;
          v38 = v29 == v25;
          v29 = v27;
          if (!v38)
          {
            v29 = &v27[v61 & 0xFFFFFFFFFFFFFFF8];
            v62 = v61 - 8;
            v63 = &v58[8 * v60];
            v64 = v25;
            if (v62 < 0x38)
              goto LABEL_89;
            v65 = 8 * v60;
            v63 = &v58[8 * v60];
            v64 = v25;
            if ((unint64_t)(v63 - v25) < 0x20)
              goto LABEL_89;
            v66 = (v62 >> 3) + 1;
            v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
            v63 = &v27[v67];
            v64 = &v25[v67];
            v68 = (__int128 *)(v25 + 16);
            v69 = &v58[v65 + 16];
            v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v71 = *v68;
              *((_OWORD *)v69 - 1) = *(v68 - 1);
              *(_OWORD *)v69 = v71;
              v68 += 2;
              v69 += 32;
              v70 -= 4;
            }
            while (v70);
            if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_89:
              do
              {
                v72 = *(_QWORD *)v64;
                v64 += 8;
                *(_QWORD *)v63 = v72;
                v63 += 8;
              }
              while (v63 != v29);
            }
          }
          v28 = &v58[8 * v57];
          operator delete(v25);
          v25 = v59;
        }
        else
        {
          v53 = (v28 - v29) >> 3;
          if (v53 >= -1)
            v54 = v53 + 1;
          else
            v54 = v53 + 2;
          v55 = v54 >> 1;
          v27 = &v25[8 * (v54 >> 1)];
          v56 = v25;
          if (v29 != v25)
          {
            memmove(v27, v25, v29 - v25);
            v56 = v29;
          }
          v29 = (char *)v56 + 8 * v55;
        }
      }
      v52 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v27 - 1) = v52;
      v27 -= 8;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
  }
LABEL_45:
  v51 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v27;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v51)
    operator delete(v51);
}

void sub_1BF3C1F10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_22;
  v5 = *a1;
  v6 = a1[1];
  if (v6 > *a1)
  {
    v7 = (v6 - *a1) >> 3;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v6[-8 * v9];
    v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      v4 = a1[1];
    }
    v13 = &v4[8 * v10];
    v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  v14 = (v4 - v5) >> 2;
  if (v4 == v5)
    v14 = 1;
  if (v14 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v15 = v14 >> 2;
  v16 = 8 * v14;
  v17 = (char *)operator new(8 * v14);
  v18 = &v17[8 * v15];
  v20 = v4 - v6;
  v19 = v4 == v6;
  v4 = v18;
  if (!v19)
  {
    v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        v31 = *(_QWORD *)v6;
        v6 += 8;
        *(_QWORD *)v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    v23 = &v17[8 * v15];
    v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20)
      goto LABEL_19;
    v24 = (v21 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[v25];
    v26 = &v6[v25];
    v27 = (__int128 *)(v6 + 16);
    v28 = v23 + 16;
    v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_19;
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    v4 = a1[2];
  }
LABEL_22:
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(void **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    v7 = a1[2];
    v6 = a1[3];
    if (v7 >= v6)
    {
      v13 = v6 - v4;
      v12 = v13 == 0;
      v14 = v13 >> 2;
      if (v12)
        v14 = 1;
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = (v14 + 3) >> 2;
      v16 = 8 * v14;
      v17 = (char *)operator new(8 * v14);
      v5 = &v17[8 * v15];
      v18 = v5;
      v19 = v7 - v4;
      if (v7 != v4)
      {
        v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        v20 = v19 - 8;
        v21 = &v17[8 * v15];
        v22 = v4;
        if (v20 < 0x38)
          goto LABEL_27;
        v23 = &v17[8 * v15];
        v21 = v23;
        v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20)
          goto LABEL_27;
        v24 = (v20 >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = &v5[v25];
        v22 = &v4[v25];
        v26 = (__int128 *)(v4 + 16);
        v27 = v23 + 16;
        v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            v30 = *(_QWORD *)v22;
            v22 += 8;
            *(_QWORD *)v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        v5 = (char *)a1[1];
      }
    }
    else
    {
      v8 = (v6 - v7) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v11 = &v7[8 * (v9 >> 1)];
      v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    v5 = (char *)a1[1];
  }
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void std::deque<std::__state<char>>::__add_front_capacity(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  BOOL v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  void *v46;
  void *v47;

  v3 = *(uint64_t **)(a1 + 8);
  v2 = *(uint64_t **)(a1 + 16);
  v4 = v2 - v3;
  if (v2 == v3)
    v5 = 0;
  else
    v5 = 42 * v4 - 1;
  v6 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v5 - (*(_QWORD *)(a1 + 40) + v6)) >= 0x2A)
  {
    *(_QWORD *)(a1 + 32) = v6 + 42;
    v47 = (void *)*(v2 - 1);
    *(_QWORD *)(a1 + 16) = v2 - 1;
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
    return;
  }
  v7 = *(uint64_t **)(a1 + 24);
  v8 = *(uint64_t **)a1;
  v9 = (uint64_t)v7 - *(_QWORD *)a1;
  if (v4 < v9 >> 3)
  {
    if (v3 == v8)
    {
      v47 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v47);
      v43 = *(_QWORD *)(a1 + 16);
      v47 = *(void **)(v43 - 8);
      *(_QWORD *)(a1 + 16) = v43 - 8;
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
      if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
        goto LABEL_9;
    }
    else
    {
      v47 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
      if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
      {
LABEL_9:
        v10 = 21;
LABEL_45:
        *(_QWORD *)(a1 + 32) = v10;
        return;
      }
    }
    v10 = *(_QWORD *)(a1 + 32) + 42;
    goto LABEL_45;
  }
  if (v7 == v8)
    v11 = 1;
  else
    v11 = v9 >> 2;
  if (v11 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v12 = (char *)operator new(8 * v11);
  v13 = operator new(0xFC0uLL);
  v14 = v13;
  if (v11)
  {
    v15 = &v12[8 * v11];
    *(_QWORD *)v12 = v13;
    v16 = v12 + 8;
    if (v3 != v2)
    {
LABEL_16:
      v17 = v12;
      while (1)
      {
        if (v16 == v15)
        {
          if (v17 <= v12)
          {
            if (v16 == v12)
              v26 = 1;
            else
              v26 = (v16 - v12) >> 2;
            if (v26 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v27 = (char *)operator new(8 * v26);
            v28 = v27;
            v29 = v26 >> 2;
            v18 = &v27[8 * (v26 >> 2)];
            v31 = v16 - v17;
            v30 = v16 == v17;
            v16 = v18;
            if (!v30)
            {
              v16 = &v18[v31 & 0xFFFFFFFFFFFFFFF8];
              v32 = v31 - 8;
              if (v32 < 0x38 || (v33 = 8 * v29, (unint64_t)(&v27[8 * v29] - v17) < 0x20))
              {
                v34 = &v27[8 * (v26 >> 2)];
                v35 = v17;
                goto LABEL_35;
              }
              v37 = (v32 >> 3) + 1;
              v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
              v34 = &v18[v38];
              v35 = &v17[v38];
              v39 = (__int128 *)(v17 + 16);
              v40 = &v27[v33 + 16];
              v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v42 = *v39;
                *((_OWORD *)v40 - 1) = *(v39 - 1);
                *(_OWORD *)v40 = v42;
                v39 += 2;
                v40 += 32;
                v41 -= 4;
              }
              while (v41);
              if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_35:
                  v36 = *(_QWORD *)v35;
                  v35 += 8;
                  *(_QWORD *)v34 = v36;
                  v34 += 8;
                }
                while (v34 != v16);
              }
            }
            v15 = &v27[8 * v26];
            if (v12)
              operator delete(v12);
            v12 = v28;
            goto LABEL_18;
          }
          v20 = (v17 - v12) >> 3;
          if (v20 >= -1)
            v21 = v20 + 1;
          else
            v21 = v20 + 2;
          v22 = v21 >> 1;
          v23 = &v17[-8 * (v21 >> 1)];
          v24 = v16;
          if (v16 != v17)
          {
            memmove(v23, v17, v16 - v17);
            v24 = v17;
          }
          v25 = -v22;
          v15 = v16;
          v16 = &v23[v16 - v17];
          v18 = &v24[8 * v25];
        }
        else
        {
          v18 = v17;
        }
LABEL_18:
        v19 = *v3++;
        *(_QWORD *)v16 = v19;
        v16 += 8;
        v17 = v18;
        if (v3 == *(uint64_t **)(a1 + 16))
          goto LABEL_48;
      }
    }
  }
  else
  {
    v44 = (char *)operator new(8uLL);
    v15 = v44 + 8;
    operator delete(v12);
    v3 = *(uint64_t **)(a1 + 8);
    v45 = *(uint64_t **)(a1 + 16);
    v12 = v44;
    *(_QWORD *)v44 = v14;
    v16 = v44 + 8;
    if (v3 != v45)
      goto LABEL_16;
  }
  v18 = v12;
LABEL_48:
  v46 = *(void **)a1;
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v18;
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(a1 + 24) = v15;
  if (v16 - v18 == 8)
  {
    *(_QWORD *)(a1 + 32) = 21;
    if (v46)
LABEL_50:
      operator delete(v46);
  }
  else
  {
    *(_QWORD *)(a1 + 32) += 42;
    if (v46)
      goto LABEL_50;
  }
}

void sub_1BF3C25C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char **a1, char *a2, char *a3, size_t __sz)
{
  char *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int64_t v16;
  _QWORD *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    v18 = a1[1];
    v17 = a1 + 1;
    v14 = v18;
    v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 3);
    if (v19 >= __sz)
    {
      v24 = result;
      if (a2 != a3)
      {
        v25 = result;
        do
        {
          *(_OWORD *)v25 = *(_OWORD *)v6;
          v25[16] = v6[16];
          v24 += 24;
          v6 += 24;
          v25 += 24;
        }
        while (v6 != a3);
      }
      v16 = v24 - result;
      v14 = result;
    }
    else
    {
      v20 = &a2[24 * v19];
      if (v14 != result)
      {
        do
        {
          *(_OWORD *)result = *(_OWORD *)v6;
          result[16] = v6[16];
          v6 += 24;
          result += 24;
        }
        while (v6 != v20);
      }
      v21 = v14;
      if (v20 != a3)
      {
        v22 = v14;
        do
        {
          v23 = *(_OWORD *)v20;
          *((_QWORD *)v22 + 2) = *((_QWORD *)v20 + 2);
          *(_OWORD *)v22 = v23;
          v22 += 24;
          v20 += 24;
          v21 += 24;
        }
        while (v20 != a3);
      }
      v16 = v21 - v14;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_26;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_26:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v13 = 24 * v12;
    result = (char *)operator new(24 * v12);
    v14 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    v15 = result;
    if (v6 != a3)
    {
      result = (char *)memcpy(result, v6, 24 * ((a3 - v6 - 24) / 0x18uLL) + 24);
      v15 = &v14[24 * ((a3 - v6 - 24) / 0x18uLL) + 24];
    }
    v16 = v15 - v14;
    v17 = a1 + 1;
  }
  *v17 = &v14[v16];
  return result;
}

double *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(uint64_t a1, const double *a2, const double *a3, size_t __sz)
{
  uint64_t v8;
  double *result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double *v13;
  double *v14;
  int64_t v15;
  _QWORD *v16;
  double *v17;
  int64_t v18;
  unint64_t v19;
  const double *v20;
  unint64_t v21;
  double *v22;
  const double *v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  double *v27;
  __int128 v28;
  unint64_t v29;
  char *v30;
  const double *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  BOOL v37;
  char v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  const double *v42;
  double *v43;
  uint64_t v44;
  const double *v45;
  double *v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  BOOL v51;
  char v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  const double *v56;
  double *v57;
  uint64_t v58;
  const double *v59;
  double *v60;
  float64x2x2_t v61;
  float64x2x2_t v62;
  float64x2x2_t v63;
  float64x2x2_t v64;

  v8 = *(_QWORD *)(a1 + 16);
  result = *(double **)a1;
  if (__sz > (v8 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz >> 60)
      goto LABEL_62;
    v10 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v10 = __sz;
    v37 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v11 = 0xFFFFFFFFFFFFFFFLL;
    if (!v37)
      v11 = v10;
    if (v11 >> 60)
LABEL_62:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v12 = 2 * v11;
    result = (double *)operator new(16 * v11);
    v13 = result;
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v12];
    v14 = result;
    if (a2 != a3)
    {
      result = (double *)memcpy(result, a2, ((char *)a3 - (char *)a2) & 0xFFFFFFFFFFFFFFF0);
      v14 = (double *)((char *)v13 + (((char *)a3 - (char *)a2) & 0xFFFFFFFFFFFFFFF0));
    }
    v15 = (char *)v14 - (char *)v13;
    v16 = (_QWORD *)(a1 + 8);
    goto LABEL_29;
  }
  v17 = *(double **)(a1 + 8);
  v16 = (_QWORD *)(a1 + 8);
  v13 = v17;
  v18 = (char *)v17 - (char *)result;
  v19 = ((char *)v17 - (char *)result) >> 4;
  if (v19 >= __sz)
  {
    if (a2 == a3)
    {
      v30 = (char *)result;
    }
    else
    {
      v29 = (char *)a3 - (char *)a2 - 16;
      if (v29 < 0xF0
        || ((v47 = v29 & 0xFFFFFFFFFFFFFFF0 | 8,
             v48 = (char *)result + v47,
             v49 = (unint64_t)a2 + v47,
             v50 = (v29 & 0xFFFFFFFFFFFFFFF0) + 16,
             result + 1 < (const double *)((char *)a2 + v50))
          ? (v51 = a2 + 1 >= (double *)((char *)result + v50))
          : (v51 = 1),
            v51 ? (v52 = 0) : (v52 = 1),
            v48 > (char *)a2 ? (v53 = (unint64_t)result >= v49) : (v53 = 1),
            !v53 || (v52 & 1) != 0))
      {
        v30 = (char *)result;
        v31 = a2;
      }
      else
      {
        v54 = (v29 >> 4) + 1;
        v55 = 2 * (v54 & 0x1FFFFFFFFFFFFFFCLL);
        v30 = (char *)&result[v55];
        v31 = &a2[v55];
        v56 = a2 + 4;
        v57 = result + 4;
        v58 = v54 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v59 = v56 - 4;
          v62 = vld2q_f64(v59);
          v64 = vld2q_f64(v56);
          v60 = v57 - 4;
          vst2q_f64(v60, v62);
          vst2q_f64(v57, v64);
          v56 += 8;
          v57 += 8;
          v58 -= 4;
        }
        while (v58);
        if (v54 == (v54 & 0x1FFFFFFFFFFFFFFCLL))
          goto LABEL_28;
      }
      do
      {
        v32 = *(_QWORD *)v31;
        v33 = *((_QWORD *)v31 + 1);
        v31 += 2;
        *(_QWORD *)v30 = v32;
        *((_QWORD *)v30 + 1) = v33;
        v30 += 16;
      }
      while (v31 != a3);
    }
LABEL_28:
    v15 = v30 - (char *)result;
    v13 = result;
    goto LABEL_29;
  }
  v20 = &a2[2 * v19];
  if (v13 != result)
  {
    v21 = v18 - 16;
    if ((unint64_t)(v18 - 16) < 0xF0
      || ((v34 = v18 & 0xFFFFFFFFFFFFFFF0,
           v35 = (char *)result + v34 - 8,
           v36 = (unint64_t)a2 + v34 - 8,
           result + 1 < (const double *)((char *)a2 + v34))
        ? (v37 = a2 + 1 >= (double *)((char *)result + v34))
        : (v37 = 1),
          v37 ? (v38 = 0) : (v38 = 1),
          v35 > (char *)a2 ? (v39 = (unint64_t)result >= v36) : (v39 = 1),
          !v39 || (v38 & 1) != 0))
    {
      v22 = result;
      v23 = a2;
    }
    else
    {
      v40 = (v21 >> 4) + 1;
      v41 = 2 * (v40 & 0x1FFFFFFFFFFFFFFCLL);
      v22 = &result[v41];
      v23 = &a2[v41];
      v42 = a2 + 4;
      v43 = result + 4;
      v44 = v40 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v45 = v42 - 4;
        v61 = vld2q_f64(v45);
        v63 = vld2q_f64(v42);
        v46 = v43 - 4;
        vst2q_f64(v46, v61);
        vst2q_f64(v43, v63);
        v42 += 8;
        v43 += 8;
        v44 -= 4;
      }
      while (v44);
      if (v40 == (v40 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_18;
    }
    do
    {
      v24 = *(_QWORD *)v23;
      v25 = *((_QWORD *)v23 + 1);
      v23 += 2;
      *(_QWORD *)v22 = v24;
      *((_QWORD *)v22 + 1) = v25;
      v22 += 2;
    }
    while (v23 != v20);
  }
LABEL_18:
  v26 = v13;
  if (v20 != a3)
  {
    v27 = v13;
    do
    {
      v28 = *(_OWORD *)v20;
      v20 += 2;
      *(_OWORD *)v27 = v28;
      v27 += 2;
      v26 += 2;
    }
    while (v20 != a3);
  }
  v15 = (char *)v26 - (char *)v13;
LABEL_29:
  *v16 = (char *)v13 + v15;
  return result;
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __n)
{
  std::sub_match<std::__wrap_iter<const char *>> *value;
  std::vector<std::ssub_match>::pointer end;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  std::sub_match<std::__wrap_iter<const char *>> *v11;
  std::vector<std::ssub_match>::size_type v12;
  std::sub_match<std::__wrap_iter<const char *>> *v13;
  std::vector<std::ssub_match>::size_type v14;
  std::sub_match<std::__wrap_iter<const char *>> *v15;
  std::sub_match<std::__wrap_iter<const char *>> *v16;
  std::vector<std::ssub_match>::pointer begin;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v18;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      v11 = &end[__n];
      v12 = 24 * __n;
      do
      {
        end->first.__i_ = 0;
        end->second.__i_ = 0;
        end->matched = 0;
        ++end;
        v12 -= 24;
      }
      while (v12);
      end = v11;
    }
    this->__end_ = end;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    v7 = v6 + __n;
    if (v6 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v10 = (char *)operator new(24 * v9);
    }
    else
    {
      v10 = 0;
    }
    v13 = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v6];
    v14 = 24 * __n;
    v15 = &v13[__n];
    v16 = v13;
    do
    {
      v16->first.__i_ = 0;
      v16->second.__i_ = 0;
      v16->matched = 0;
      ++v16;
      v14 -= 24;
    }
    while (v14);
    begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        v18 = end[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
        *(_QWORD *)&v13[-1].matched = *(_QWORD *)&end[-1].matched;
        v13[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v18;
        --v13;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v15;
    this->__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v9];
    if (end)
      operator delete(end);
  }
}

uint64_t __cxx_global_var_init_126()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1BF335000);
  }
  return result;
}

uint64_t __cxx_global_var_init_127()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1BF335000);
  }
  return result;
}

uint64_t __cxx_global_var_init_128()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1BF335000);
  }
  return result;
}

_QWORD *support::log::delegate::context::create@<X0>(support::log::delegate::context *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v5;
  _QWORD *result;

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v5 = operator new(0x10uLL);
  *v5 = off_1E79010E0;
  v5[1] = this;
  *a2 = v5;
  result = operator new(0x20uLL);
  *result = off_1E7901338;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[1] = result;
  return result;
}

void sub_1BF3C2D6C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *support::log::delegate::context::context(_QWORD *this, void *a2)
{
  *this = off_1E79010E0;
  this[1] = a2;
  return this;
}

{
  *this = off_1E79010E0;
  this[1] = a2;
  return this;
}

uint64_t support::log::delegate::delegate(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *a2;
  v2 = a2[1];
  *(_QWORD *)result = &unk_1E7901100;
  *(_QWORD *)(result + 8) = v3;
  *(_QWORD *)(result + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(result + 24) = 1;
  return result;
}

uint64_t support::log::delegate::get_context@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  if (*(_BYTE *)(this + 24))
  {
    v2 = *(_QWORD *)(this + 16);
    *(_QWORD *)a2 = *(_QWORD *)(this + 8);
    *(_QWORD *)(a2 + 8) = v2;
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 16);
      do
        v4 = __ldxr(v3);
      while (__stxr(v4 + 1, v3));
    }
    *(_BYTE *)(a2 + 16) = 1;
  }
  return this;
}

uint64_t support::log::manager::parameters::parameters(uint64_t result, char a2)
{
  *(_QWORD *)result = &off_1E7901130;
  *(_BYTE *)(result + 8) = a2;
  return result;
}

{
  *(_QWORD *)result = &off_1E7901130;
  *(_BYTE *)(result + 8) = a2;
  return result;
}

uint64_t support::log::manager::parameters::parameters(uint64_t this)
{
  *(_QWORD *)this = &off_1E7901130;
  *(_BYTE *)(this + 8) = 3;
  return this;
}

{
  *(_QWORD *)this = &off_1E7901130;
  *(_BYTE *)(this + 8) = 3;
  return this;
}

uint64_t support::log::manager::parameters::set_defaults(uint64_t this)
{
  *(_BYTE *)(this + 8) = 3;
  return this;
}

uint64_t support::log::manager::manager(uint64_t a1, std::string *a2, uint64_t a3, _QWORD *a4)
{
  std::string *v7;
  const char *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string::value_type __s[23];
  char v17;
  std::string v18;

  *(_QWORD *)a1 = off_1E7901148;
  *(_QWORD *)(a1 + 8) = 850045863;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  v18 = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  v17 = 12;
  strcpy(__s, ".log_manager");
  v7 = std::string::append(&v18, __s, 0xCuLL);
  v8 = (const char *)(a1 + 72);
  v9 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)&v7->__r_.__value_.__l + 2);
  *(_OWORD *)(a1 + 72) = v9;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if ((v17 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_8:
    operator delete(v18.__r_.__value_.__l.__data_);
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
      goto LABEL_4;
    goto LABEL_9;
  }
  operator delete(*(void **)__s);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_8;
LABEL_3:
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    goto LABEL_4;
LABEL_9:
  v8 = *(const char **)v8;
LABEL_4:
  *(_QWORD *)(a1 + 96) = os_log_create("com.apple.telephony.basebandservices", v8);
  *(_QWORD *)(a1 + 104) = &off_1E7901130;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a3 + 8);
  *(_QWORD *)(a1 + 120) = a1 + 120;
  *(_QWORD *)(a1 + 128) = a1 + 120;
  *(_QWORD *)(a1 + 136) = 0;
  v10 = a4[2];
  if (v10)
  {
    v12 = *a4;
    v11 = (uint64_t *)a4[1];
    v13 = *v11;
    *(_QWORD *)(v13 + 8) = *(_QWORD *)(*a4 + 8);
    **(_QWORD **)(v12 + 8) = v13;
    v14 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(v14 + 8) = v11;
    *v11 = v14;
    *(_QWORD *)(a1 + 120) = v12;
    *(_QWORD *)(v12 + 8) = a1 + 120;
    *(_QWORD *)(a1 + 136) = v10;
    a4[2] = 0;
  }
  return a1;
}

void sub_1BF3C2FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::mutex *v21;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      std::mutex::~mutex(v21);
      _Unwind_Resume(a1);
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  std::mutex::~mutex(v21);
  _Unwind_Resume(a1);
}

uint64_t support::log::manager::manager(uint64_t a1, std::string *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::string __p;

  __p = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  v15 = (uint64_t)&v15;
  v16 = &v15;
  v17 = 0;
  support::log::manager::manager(a1, &__p, a3, &v15);
  if (v17)
  {
    v6 = v15;
    v7 = v16;
    v8 = *v16;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v15 + 8);
    **(_QWORD **)(v6 + 8) = v8;
    v17 = 0;
    if (v7 != &v15)
    {
      do
      {
        v10 = (uint64_t *)v7[1];
        v9 = v7[2];
        v7[2] = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        operator delete(v7);
        v7 = v10;
      }
      while (v10 != &v15);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*a4)
      return a1;
    goto LABEL_10;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (*a4)
  {
LABEL_10:
    std::mutex::lock((std::mutex *)(a1 + 8));
    v11 = operator new(0x18uLL);
    v12 = *a4;
    *a4 = 0;
    v13 = *(_QWORD *)(a1 + 120);
    v11[1] = a1 + 120;
    v11[2] = v12;
    *v11 = v13;
    *(_QWORD *)(v13 + 8) = v11;
    *(_QWORD *)(a1 + 120) = v11;
    ++*(_QWORD *)(a1 + 136);
    std::mutex::unlock((std::mutex *)(a1 + 8));
  }
  return a1;
}

{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::string __p;

  __p = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  v15 = (uint64_t)&v15;
  v16 = &v15;
  v17 = 0;
  support::log::manager::manager(a1, &__p, a3, &v15);
  if (v17)
  {
    v6 = v15;
    v7 = v16;
    v8 = *v16;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v15 + 8);
    **(_QWORD **)(v6 + 8) = v8;
    v17 = 0;
    if (v7 != &v15)
    {
      do
      {
        v10 = (uint64_t *)v7[1];
        v9 = v7[2];
        v7[2] = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        operator delete(v7);
        v7 = v10;
      }
      while (v10 != &v15);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*a4)
      return a1;
    goto LABEL_10;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (*a4)
  {
LABEL_10:
    std::mutex::lock((std::mutex *)(a1 + 8));
    v11 = operator new(0x18uLL);
    v12 = *a4;
    *a4 = 0;
    v13 = *(_QWORD *)(a1 + 120);
    v11[1] = a1 + 120;
    v11[2] = v12;
    *v11 = v13;
    *(_QWORD *)(v13 + 8) = v11;
    *(_QWORD *)(a1 + 120) = v11;
    ++*(_QWORD *)(a1 + 136);
    std::mutex::unlock((std::mutex *)(a1 + 8));
  }
  return a1;
}

void sub_1BF3C317C(_Unwind_Exception *a1)
{
  support::log::manager *v1;
  std::mutex *v2;

  std::mutex::unlock(v2);
  support::log::manager::~manager(v1);
  _Unwind_Resume(a1);
}

void sub_1BF3C31A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::list<std::unique_ptr<support::log::delegate>>::~list(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *std::list<std::unique_ptr<support::log::delegate>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v7 = (uint64_t *)v3[1];
        v6 = v3[2];
        v3[2] = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v3);
        v3 = v7;
      }
      while (v7 != a1);
    }
  }
  return a1;
}

void support::log::manager::add_delegate(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  std::mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (_QWORD *)a1;
  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v5 = operator new(0x18uLL);
  v6 = *a2;
  *a2 = 0;
  v7 = v3[15];
  v3 += 15;
  v5[1] = v3;
  v5[2] = v6;
  *v5 = v7;
  *(_QWORD *)(v7 + 8) = v5;
  *v3 = v5;
  ++v3[2];
  std::mutex::unlock(v4);
}

void sub_1BF3C32B0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void support::log::manager::~manager(support::log::manager *this)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(_QWORD *)this = off_1E7901148;
  if (*((_QWORD *)this + 17))
  {
    v2 = (char *)this + 120;
    v3 = *((_QWORD *)this + 15);
    v4 = (char *)*((_QWORD *)this + 16);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 + 1);
        v6 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(_QWORD *)this = off_1E7901148;
  if (*((_QWORD *)this + 17))
  {
    v2 = (char *)this + 120;
    v3 = *((_QWORD *)this + 15);
    v4 = (char *)*((_QWORD *)this + 16);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 + 1);
        v6 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(_QWORD *)this = off_1E7901148;
  if (*((_QWORD *)this + 17))
  {
    v2 = (char *)this + 120;
    v3 = *((_QWORD *)this + 15);
    v4 = (char *)*((_QWORD *)this + 16);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 + 1);
        v6 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  operator delete(this);
}

void sub_1BF3C34A8(_Unwind_Exception *a1)
{
  support::log::manager *v1;
  std::mutex *v2;

  std::mutex::unlock(v2);
  support::log::manager::~manager(v1);
  _Unwind_Resume(a1);
}

void sub_1BF3C34CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::list<std::unique_ptr<support::log::delegate>>::~list(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void support::log::manager::create(std::string *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  void *v8;
  _QWORD *v9;
  std::string __p;

  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  v8 = operator new(0x90uLL);
  __p = *a1;
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  support::log::manager::manager((uint64_t)v8, &__p, a2, a3);
  *a4 = v8;
  v9 = operator new(0x20uLL);
  *v9 = off_1E7901420;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = v8;
  a4[1] = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF3C365C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void support::log::manager::create(std::string *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  void *v8;
  _QWORD *v9;
  std::string __p;

  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  v8 = operator new(0x90uLL);
  __p = *a1;
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  support::log::manager::manager((uint64_t)v8, &__p, a2, a3);
  *a4 = v8;
  v9 = operator new(0x20uLL);
  *v9 = off_1E7901420;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = v8;
  a4[1] = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF3C3770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t support::log::manager::get_level(support::log::manager *this)
{
  return *((unsigned __int8 *)this + 112);
}

void support::log::manager::set_level(uint64_t a1, unsigned int a2)
{
  std::mutex *v4;
  NSObject *v5;
  unint64_t v6;
  const char *v7;
  const char *v8;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v5 = *(NSObject **)(a1 + 96);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(unsigned __int8 *)(a1 + 112);
    if (v6 > 6)
    {
      v7 = "???";
      if (a2 > 6)
        goto LABEL_4;
    }
    else
    {
      if (a2 > 6)
      {
LABEL_4:
        v8 = "???";
LABEL_7:
        v9 = 136315394;
        v10 = v7;
        v11 = 2080;
        v12 = v8;
        _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "setting log level %s -> %s", (uint8_t *)&v9, 0x16u);
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  *(_BYTE *)(a1 + 112) = a2;
  std::mutex::unlock(v4);
}

uint64_t support::log::manager::get_log_buffer(support::log::manager *this)
{
  char *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;

  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (qword_1EF57D058)
    goto LABEL_2;
  v1 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v1 + 1) = 0;
  *((_QWORD *)v1 + 2) = 0;
  *(_QWORD *)v1 = off_1E7901388;
  *((_QWORD *)v1 + 3) = off_1E79013D8;
  v2 = (uint64_t)(v1 + 24);
  *((_QWORD *)v1 + 4) = 850045863;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *((_QWORD *)v1 + 14) = 0;
  *((_QWORD *)v1 + 13) = 0;
  *((_QWORD *)v1 + 11) = 0;
  *((_QWORD *)v1 + 12) = v1 + 104;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  v3 = (std::__shared_weak_count *)off_1EF57D060;
  qword_1EF57D058 = (uint64_t)(v1 + 24);
  off_1EF57D060 = v1;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
LABEL_2:
    v2 = qword_1EF57D058;
    v1 = (char *)off_1EF57D060;
    if (!off_1EF57D060)
      goto LABEL_11;
  }
  v6 = (unint64_t *)(v1 + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
LABEL_11:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  std::mutex::lock((std::mutex *)(v2 + 8));
  v8 = *(_QWORD *)(v2 + 136);
  if (v8)
  {
    v9 = (_QWORD *)(v2 + 128);
    v10 = *(void ***)(v2 + 104);
    v11 = (*(_QWORD **)((char *)v10 + ((*(_QWORD *)(v2 + 128) >> 6) & 0x3FFFFFFFFFFFFF8)))[*(_QWORD *)(v2 + 128) & 0x1FFLL];
    v12 = *(_QWORD *)(v2 + 128) + 1;
    *(_QWORD *)(v2 + 128) = v12;
    *(_QWORD *)(v2 + 136) = v8 - 1;
    if (v12 >= 0x400)
    {
      operator delete(*v10);
      *(_QWORD *)(v2 + 104) += 8;
      v13 = -512;
LABEL_25:
      *v9 += v13;
    }
  }
  else
  {
    v14 = malloc_type_malloc(0x400uLL, 0x45F1E4C6uLL);
    v11 = (uint64_t)v14;
    if (v14)
    {
      v16 = (uint64_t **)(v2 + 80);
      v15 = *(uint64_t **)(v2 + 80);
      if (!v15)
      {
        v17 = (uint64_t **)(v2 + 80);
LABEL_22:
        v19 = (uint64_t *)operator new(0x28uLL);
        v19[4] = v11;
        *v19 = 0;
        v19[1] = 0;
        v19[2] = (uint64_t)v17;
        *v16 = v19;
        v20 = **(_QWORD **)(v2 + 72);
        if (v20)
        {
          *(_QWORD *)(v2 + 72) = v20;
          v19 = *v16;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 80), v19);
        v9 = (_QWORD *)(v2 + 88);
        v13 = 1;
        goto LABEL_25;
      }
      while (1)
      {
        while (1)
        {
          v17 = (uint64_t **)v15;
          v18 = v15[4];
          if ((unint64_t)v14 >= v18)
            break;
          v15 = *v17;
          v16 = v17;
          if (!*v17)
            goto LABEL_22;
        }
        if (v18 >= (unint64_t)v14)
          break;
        v15 = v17[1];
        if (!v15)
        {
          v16 = v17 + 1;
          goto LABEL_22;
        }
      }
    }
  }
  std::mutex::unlock((std::mutex *)(v2 + 8));
  if (!v1)
    return v11;
  v21 = (unint64_t *)(v1 + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
    return v11;
  (*(void (**)(char *))(*(_QWORD *)v1 + 16))(v1);
  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v1);
  return v11;
}

void sub_1BF3C3B48(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  _Unwind_Resume(a1);
}

void support::log::manager::release_log_buffer(support::log::manager *this, char *a2)
{
  char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::mutex *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  _QWORD *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  int64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  void *v58;
  void *v59;
  unint64_t v60;
  char *v61;
  void *v62;
  char *v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  BOOL v69;
  int64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  unint64_t v74;
  char *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  unint64_t v82;
  char *v83;
  char *v84;
  unint64_t v85;
  int64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 *v93;
  char *v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  unint64_t v105;
  uint64_t v106;
  __int128 *v107;
  _OWORD *v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  size_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  __int128 *v126;
  _OWORD *v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  int64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  __int128 *v146;
  _OWORD *v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  std::runtime_error *exception;
  void *v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count *v154;

  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (!qword_1EF57D058)
  {
    v3 = (char *)operator new(0xA8uLL);
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
    *(_QWORD *)v3 = off_1E7901388;
    *((_QWORD *)v3 + 3) = off_1E79013D8;
    v4 = (uint64_t)(v3 + 24);
    *((_QWORD *)v3 + 4) = 850045863;
    *(_OWORD *)(v3 + 40) = 0u;
    *(_OWORD *)(v3 + 56) = 0u;
    *(_OWORD *)(v3 + 72) = 0u;
    *((_QWORD *)v3 + 14) = 0;
    *((_QWORD *)v3 + 13) = 0;
    *((_QWORD *)v3 + 11) = 0;
    *((_QWORD *)v3 + 12) = v3 + 104;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    v5 = (std::__shared_weak_count *)off_1EF57D060;
    qword_1EF57D058 = (uint64_t)(v3 + 24);
    off_1EF57D060 = v3;
    if (!v5)
    {
LABEL_9:
      v8 = (unint64_t *)(v3 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      goto LABEL_11;
    }
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v4 = qword_1EF57D058;
  v3 = (char *)off_1EF57D060;
  if (off_1EF57D060)
    goto LABEL_9;
LABEL_11:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  v12 = *(_QWORD **)(v4 + 80);
  v11 = v4 + 80;
  v10 = v12;
  if (!v12)
    goto LABEL_22;
  v13 = (_QWORD *)v11;
  do
  {
    v14 = v10[4];
    v15 = v14 >= (unint64_t)a2;
    if (v14 >= (unint64_t)a2)
      v16 = v10;
    else
      v16 = v10 + 1;
    if (v15)
      v13 = v10;
    v10 = (_QWORD *)*v16;
  }
  while (*v16);
  if (v13 == (_QWORD *)v11 || v13[4] > (unint64_t)a2)
LABEL_22:
    v13 = (_QWORD *)v11;
  if (!v3)
    goto LABEL_27;
  v17 = (unint64_t *)(v3 + 8);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
  {
LABEL_27:
    if (v13 != (_QWORD *)v11)
      goto LABEL_28;
LABEL_32:
    free(a2);
    return;
  }
  (*(void (**)(char *))(*(_QWORD *)v3 + 16))(v3);
  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v3);
  if (v13 == (_QWORD *)v11)
    goto LABEL_32;
LABEL_28:
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (qword_1EF57D058)
    goto LABEL_29;
  v19 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v19 + 1) = 0;
  *((_QWORD *)v19 + 2) = 0;
  *(_QWORD *)v19 = off_1E7901388;
  *((_QWORD *)v19 + 3) = off_1E79013D8;
  *((_QWORD *)v19 + 4) = 850045863;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_OWORD *)(v19 + 56) = 0u;
  *(_OWORD *)(v19 + 72) = 0u;
  *((_QWORD *)v19 + 14) = 0;
  *((_QWORD *)v19 + 13) = 0;
  *((_QWORD *)v19 + 11) = 0;
  *((_QWORD *)v19 + 12) = v19 + 104;
  *(_OWORD *)(v19 + 120) = 0u;
  *(_OWORD *)(v19 + 136) = 0u;
  *(_OWORD *)(v19 + 152) = 0u;
  v20 = (std::__shared_weak_count *)off_1EF57D060;
  qword_1EF57D058 = (uint64_t)(v19 + 24);
  off_1EF57D060 = v19;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
LABEL_29:
    v19 = (char *)off_1EF57D060;
    v153 = (std::__shared_weak_count *)off_1EF57D060;
    if (!off_1EF57D060)
      goto LABEL_41;
    goto LABEL_39;
  }
  v153 = (std::__shared_weak_count *)v19;
LABEL_39:
  v23 = (unint64_t *)(v19 + 8);
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
LABEL_41:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (!qword_1EF57D058)
  {
    v25 = (char *)operator new(0xA8uLL);
    *((_QWORD *)v25 + 1) = 0;
    *((_QWORD *)v25 + 2) = 0;
    *(_QWORD *)v25 = off_1E7901388;
    *((_QWORD *)v25 + 3) = off_1E79013D8;
    v26 = (uint64_t)(v25 + 24);
    *((_QWORD *)v25 + 4) = 850045863;
    *(_OWORD *)(v25 + 40) = 0u;
    *(_OWORD *)(v25 + 56) = 0u;
    *(_OWORD *)(v25 + 72) = 0u;
    *((_QWORD *)v25 + 14) = 0;
    *((_QWORD *)v25 + 13) = 0;
    *((_QWORD *)v25 + 11) = 0;
    *((_QWORD *)v25 + 12) = v25 + 104;
    *(_OWORD *)(v25 + 120) = 0u;
    *(_OWORD *)(v25 + 136) = 0u;
    *(_OWORD *)(v25 + 152) = 0u;
    v27 = (std::__shared_weak_count *)off_1EF57D060;
    qword_1EF57D058 = (uint64_t)(v25 + 24);
    off_1EF57D060 = v25;
    if (!v27)
    {
      v154 = (std::__shared_weak_count *)v25;
LABEL_50:
      v30 = (unint64_t *)(v25 + 8);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      goto LABEL_52;
    }
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v26 = qword_1EF57D058;
  v25 = (char *)off_1EF57D060;
  v154 = (std::__shared_weak_count *)off_1EF57D060;
  if (off_1EF57D060)
    goto LABEL_50;
LABEL_52:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  v32 = (std::mutex *)(v26 + 8);
  std::mutex::lock((std::mutex *)(v26 + 8));
  v33 = *(_QWORD **)(v26 + 80);
  if (!v33)
    goto LABEL_186;
  v34 = v26 + 80;
  do
  {
    v35 = v33[4];
    v36 = v35 >= (unint64_t)a2;
    if (v35 >= (unint64_t)a2)
      v37 = v33;
    else
      v37 = v33 + 1;
    if (v36)
      v34 = (uint64_t)v33;
    v33 = (_QWORD *)*v37;
  }
  while (*v37);
  if (v34 == v26 + 80 || *(_QWORD *)(v34 + 32) > (unint64_t)a2)
  {
LABEL_186:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "attempting to put back a buffer the instance does not own");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v38 = *(char **)(v26 + 112);
  v39 = *(char **)(v26 + 104);
  v40 = v38 - v39;
  if (v38 == v39)
    v41 = 0;
  else
    v41 = ((v38 - v39) << 6) - 1;
  v43 = *(_QWORD *)(v26 + 128);
  v42 = *(_QWORD *)(v26 + 136);
  v44 = v42 + v43;
  if (v41 == v42 + v43)
  {
    if (v43 >= 0x200)
    {
      *(_QWORD *)(v26 + 128) = v43 - 512;
      v45 = v39 + 8;
      v46 = *(_QWORD *)v39;
      *(_QWORD *)(v26 + 104) = v39 + 8;
      if (v38 != *(char **)(v26 + 120))
      {
LABEL_157:
        *(_QWORD *)v38 = v46;
        goto LABEL_158;
      }
      v47 = *(char **)(v26 + 96);
      if (v45 > v47)
      {
        v48 = (v45 - v47) >> 3;
        if (v48 >= -1)
          v49 = v48 + 1;
        else
          v49 = v48 + 2;
        v50 = v49 >> 1;
        v51 = -v50;
        v52 = &v45[-8 * v50];
        v53 = v38 - v45;
        if (v38 != v45)
        {
          memmove(&v45[-8 * v50], v45, v38 - v45);
          v38 = *(char **)(v26 + 104);
        }
        v54 = &v38[8 * v51];
        v38 = &v52[v53];
        *(_QWORD *)(v26 + 104) = v54;
        *(_QWORD *)(v26 + 112) = &v52[v53];
        goto LABEL_157;
      }
      if (v38 == v47)
        v66 = 1;
      else
        v66 = (v38 - v47) >> 2;
      if (!(v66 >> 61))
      {
        v67 = (char *)operator new(8 * v66);
        v68 = &v67[8 * (v66 >> 2)];
        v70 = v38 - v45;
        v69 = v38 == v45;
        v38 = v68;
        if (v69)
          goto LABEL_155;
        v38 = &v68[v70 & 0xFFFFFFFFFFFFFFF8];
        v71 = v70 - 8;
        if (v71 >= 0x38)
        {
          v123 = &v67[8 * (v66 >> 2)];
          v72 = v123;
          if ((unint64_t)(v123 - v45) >= 0x20)
          {
            v124 = (v71 >> 3) + 1;
            v125 = 8 * (v124 & 0x3FFFFFFFFFFFFFFCLL);
            v72 = &v68[v125];
            v45 += v125;
            v126 = (__int128 *)(v39 + 24);
            v127 = v123 + 16;
            v128 = v124 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v129 = *v126;
              *(v127 - 1) = *(v126 - 1);
              *v127 = v129;
              v126 += 2;
              v127 += 2;
              v128 -= 4;
            }
            while (v128);
            if (v124 == (v124 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_155:
              *(_QWORD *)(v26 + 96) = v67;
              *(_QWORD *)(v26 + 104) = v68;
              *(_QWORD *)(v26 + 112) = v38;
              *(_QWORD *)(v26 + 120) = &v67[8 * v66];
              if (v47)
              {
                operator delete(v47);
                v38 = *(char **)(v26 + 112);
              }
              goto LABEL_157;
            }
          }
        }
        else
        {
          v72 = &v67[8 * (v66 >> 2)];
        }
        do
        {
          v130 = *(_QWORD *)v45;
          v45 += 8;
          *(_QWORD *)v72 = v130;
          v72 += 8;
        }
        while (v72 != v38);
        goto LABEL_155;
      }
LABEL_188:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    v55 = v40 >> 3;
    v56 = *(char **)(v26 + 120);
    v57 = *(char **)(v26 + 96);
    if (v40 >> 3 >= (unint64_t)((v56 - v57) >> 3))
    {
      if (v56 == v57)
        v60 = 1;
      else
        v60 = (v56 - v57) >> 2;
      if (!(v60 >> 61))
      {
        v61 = (char *)operator new(8 * v60);
        v62 = operator new(0x1000uLL);
        v63 = &v61[8 * v55];
        v64 = &v61[8 * v60];
        if (v55 == v60)
        {
          v152 = v62;
          if (v40 < 1)
          {
            if (v38 == v39)
              v74 = 1;
            else
              v74 = v40 >> 2;
            if (v74 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v63 = (char *)operator new(8 * v74);
            v64 = &v63[8 * v74];
            operator delete(v61);
            v39 = *(char **)(v26 + 104);
            v38 = *(char **)(v26 + 112);
            v61 = v63;
          }
          else
          {
            v65 = v55 + 2;
            if (v55 >= -1)
              v65 = v55 + 1;
            v63 -= 8 * (v65 >> 1);
          }
          v62 = v152;
        }
        *(_QWORD *)v63 = v62;
        v75 = v63 + 8;
        if (v38 != v39)
        {
          do
          {
            if (v63 == v61)
            {
              if (v75 >= v64)
              {
                if (v64 == v61)
                  v82 = 1;
                else
                  v82 = (v64 - v61) >> 2;
                if (v82 >> 61)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v83 = (char *)operator new(8 * v82);
                v84 = v83;
                v85 = (v82 + 3) >> 2;
                v63 = &v83[8 * v85];
                v86 = v75 - v61;
                v69 = v75 == v61;
                v75 = v63;
                if (!v69)
                {
                  v75 = &v63[v86 & 0xFFFFFFFFFFFFFFF8];
                  v87 = v86 - 8;
                  v88 = &v83[8 * v85];
                  v89 = v61;
                  if (v87 < 0x38)
                    goto LABEL_192;
                  v90 = 8 * v85;
                  v88 = &v83[8 * v85];
                  v89 = v61;
                  if ((unint64_t)(v88 - v61) < 0x20)
                    goto LABEL_192;
                  v91 = (v87 >> 3) + 1;
                  v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
                  v88 = &v63[v92];
                  v89 = &v61[v92];
                  v93 = (__int128 *)(v61 + 16);
                  v94 = &v83[v90 + 16];
                  v95 = v91 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v96 = *v93;
                    *((_OWORD *)v94 - 1) = *(v93 - 1);
                    *(_OWORD *)v94 = v96;
                    v93 += 2;
                    v94 += 32;
                    v95 -= 4;
                  }
                  while (v95);
                  if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_192:
                    do
                    {
                      v97 = *(_QWORD *)v89;
                      v89 += 8;
                      *(_QWORD *)v88 = v97;
                      v88 += 8;
                    }
                    while (v88 != v75);
                  }
                }
                v64 = &v83[8 * v82];
                operator delete(v61);
                v61 = v84;
              }
              else
              {
                v78 = (v64 - v75) >> 3;
                if (v78 >= -1)
                  v79 = v78 + 1;
                else
                  v79 = v78 + 2;
                v80 = v79 >> 1;
                v63 = &v61[8 * (v79 >> 1)];
                v81 = v61;
                if (v75 != v61)
                {
                  memmove(v63, v61, v75 - v61);
                  v81 = v75;
                }
                v75 = (char *)v81 + 8 * v80;
              }
            }
            v77 = *((_QWORD *)v38 - 1);
            v38 -= 8;
            *((_QWORD *)v63 - 1) = v77;
            v63 -= 8;
          }
          while (v38 != *(char **)(v26 + 104));
        }
        v76 = *(void **)(v26 + 96);
        *(_QWORD *)(v26 + 96) = v61;
        *(_QWORD *)(v26 + 104) = v63;
        *(_QWORD *)(v26 + 112) = v75;
        *(_QWORD *)(v26 + 120) = v64;
        v32 = (std::mutex *)(v26 + 8);
        if (v76)
          operator delete(v76);
        goto LABEL_159;
      }
      goto LABEL_188;
    }
    v58 = operator new(0x1000uLL);
    v59 = v58;
    if (v56 != v38)
    {
      *(_QWORD *)v38 = v58;
LABEL_158:
      *(_QWORD *)(v26 + 112) += 8;
LABEL_159:
      v39 = *(char **)(v26 + 104);
      v42 = *(_QWORD *)(v26 + 136);
      v44 = *(_QWORD *)(v26 + 128) + v42;
      goto LABEL_160;
    }
    if (v39 == v57)
    {
      if (v38 == v39)
        v98 = 1;
      else
        v98 = (v56 - v39) >> 2;
      if (v98 >> 61)
        goto LABEL_188;
      v99 = (char *)operator new(8 * v98);
      v100 = (v98 + 3) >> 2;
      v73 = &v99[8 * v100];
      v101 = v73;
      if (v38 != v39)
      {
        v101 = &v73[8 * v55];
        v102 = &v99[8 * v100];
        v103 = v39;
        if ((unint64_t)(v40 - 8) < 0x38)
          goto LABEL_193;
        v104 = &v99[8 * v100];
        v102 = v104;
        v103 = v39;
        if ((unint64_t)(v104 - v39) < 0x20)
          goto LABEL_193;
        v105 = ((unint64_t)(v40 - 8) >> 3) + 1;
        v106 = 8 * (v105 & 0x3FFFFFFFFFFFFFFCLL);
        v102 = &v73[v106];
        v103 = &v39[v106];
        v107 = (__int128 *)(v39 + 16);
        v108 = v104 + 16;
        v109 = v105 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v110 = *v107;
          *(v108 - 1) = *(v107 - 1);
          *v108 = v110;
          v107 += 2;
          v108 += 2;
          v109 -= 4;
        }
        while (v109);
        if (v105 != (v105 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_193:
          do
          {
            v111 = *(_QWORD *)v103;
            v103 += 8;
            *(_QWORD *)v102 = v111;
            v102 += 8;
          }
          while (v102 != v101);
        }
      }
      *(_QWORD *)(v26 + 96) = v99;
      *(_QWORD *)(v26 + 104) = v73;
      *(_QWORD *)(v26 + 112) = v101;
      *(_QWORD *)(v26 + 120) = &v99[8 * v98];
      if (v39)
      {
        operator delete(v39);
        v73 = *(char **)(v26 + 104);
      }
    }
    else
    {
      v73 = v39;
    }
    *((_QWORD *)v73 - 1) = v59;
    v112 = *(char **)(v26 + 104);
    v113 = *(char **)(v26 + 112);
    *(_QWORD *)(v26 + 104) = v112 - 8;
    v114 = *((_QWORD *)v112 - 1);
    *(_QWORD *)(v26 + 104) = v112;
    if (v113 != *(char **)(v26 + 120))
    {
LABEL_142:
      *(_QWORD *)v113 = v114;
      goto LABEL_158;
    }
    v115 = *(char **)(v26 + 96);
    if (v112 > v115)
    {
      v116 = (v112 - v115) >> 3;
      if (v116 >= -1)
        v117 = v116 + 1;
      else
        v117 = v116 + 2;
      v118 = v117 >> 1;
      v119 = -v118;
      v120 = &v112[-8 * v118];
      v121 = v113 - v112;
      if (v121)
      {
        memmove(&v112[-8 * v118], v112, v121);
        v112 = *(char **)(v26 + 104);
      }
      v122 = &v120[v121];
      *(_QWORD *)(v26 + 104) = &v112[8 * v119];
      *(_QWORD *)(v26 + 112) = v122;
      *(_QWORD *)v122 = v114;
      goto LABEL_158;
    }
    if (v113 == v115)
      v136 = 1;
    else
      v136 = (v113 - v115) >> 2;
    if (v136 >> 61)
      goto LABEL_188;
    v137 = (char *)operator new(8 * v136);
    v138 = &v137[8 * (v136 >> 2)];
    v139 = v113 - v112;
    v69 = v113 == v112;
    v113 = v138;
    if (!v69)
    {
      v113 = &v138[v139 & 0xFFFFFFFFFFFFFFF8];
      v140 = v139 - 8;
      if (v140 < 0x38)
      {
        v141 = &v137[8 * (v136 >> 2)];
        do
        {
LABEL_183:
          v150 = *(_QWORD *)v112;
          v112 += 8;
          *(_QWORD *)v141 = v150;
          v141 += 8;
        }
        while (v141 != v113);
        goto LABEL_184;
      }
      v142 = &v137[8 * (v136 >> 2)];
      v141 = v142;
      if ((unint64_t)(v142 - v112) < 0x20)
        goto LABEL_183;
      v143 = (v140 >> 3) + 1;
      v144 = 8 * (v143 & 0x3FFFFFFFFFFFFFFCLL);
      v141 = &v138[v144];
      v145 = &v112[v144];
      v146 = (__int128 *)(v112 + 16);
      v147 = v142 + 16;
      v148 = v143 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v149 = *v146;
        *(v147 - 1) = *(v146 - 1);
        *v147 = v149;
        v146 += 2;
        v147 += 2;
        v148 -= 4;
      }
      while (v148);
      v112 = v145;
      if (v143 != (v143 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_183;
    }
LABEL_184:
    *(_QWORD *)(v26 + 96) = v137;
    *(_QWORD *)(v26 + 104) = v138;
    *(_QWORD *)(v26 + 112) = v113;
    *(_QWORD *)(v26 + 120) = &v137[8 * v136];
    if (v115)
    {
      operator delete(v115);
      v113 = *(char **)(v26 + 112);
    }
    goto LABEL_142;
  }
LABEL_160:
  *(_QWORD *)(*(_QWORD *)&v39[(v44 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v44 & 0x1FF)) = a2;
  *(_QWORD *)(v26 + 136) = v42 + 1;
  std::mutex::unlock(v32);
  if (!v154)
    goto LABEL_164;
  v131 = (unint64_t *)&v154->__shared_owners_;
  do
    v132 = __ldaxr(v131);
  while (__stlxr(v132 - 1, v131));
  if (!v132)
  {
    ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
    std::__shared_weak_count::__release_weak(v154);
    v133 = v153;
    if (!v153)
      return;
  }
  else
  {
LABEL_164:
    v133 = v153;
    if (!v153)
      return;
  }
  v134 = (unint64_t *)&v133->__shared_owners_;
  do
    v135 = __ldaxr(v134);
  while (__stlxr(v135 - 1, v134));
  if (!v135)
  {
    ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
    std::__shared_weak_count::__release_weak(v133);
  }
}

void sub_1BF3C46DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, std::mutex *a10, char a11, uint64_t a12, char a13)
{
  void *v13;

  operator delete(__p);
  operator delete(v13);
  std::mutex::unlock(a10);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void support::log::manager::add_delegates(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::mutex *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 != a2)
  {
    v5 = (std::mutex *)(a1 + 8);
    v6 = a1 + 120;
    do
    {
      std::mutex::lock(v5);
      v7 = operator new(0x18uLL);
      v8 = *(_QWORD *)(v2 + 16);
      *(_QWORD *)(v2 + 16) = 0;
      v7[1] = v6;
      v7[2] = v8;
      v9 = *(_QWORD *)(a1 + 120);
      *v7 = v9;
      *(_QWORD *)(v9 + 8) = v7;
      *(_QWORD *)(a1 + 120) = v7;
      ++*(_QWORD *)(a1 + 136);
      std::mutex::unlock(v5);
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2 != a2);
  }
}

void sub_1BF3C4848(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void support::log::manager::set_defaults(support::log::manager *this)
{
  std::mutex *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  *((_BYTE *)this + 112) = 3;
  if (*((_QWORD *)this + 17))
  {
    v3 = (char *)this + 120;
    v4 = *((_QWORD *)this + 15);
    v5 = (char *)*((_QWORD *)this + 16);
    v6 = *(_QWORD *)v5;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v6;
    *((_QWORD *)this + 17) = 0;
    if (v5 != (char *)this + 120)
    {
      do
      {
        v8 = (char *)*((_QWORD *)v5 + 1);
        v7 = *((_QWORD *)v5 + 2);
        *((_QWORD *)v5 + 2) = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v3);
    }
  }
  std::mutex::unlock(v2);
}

void support::log::manager::message_delegates(support::log::manager *a1, uint64_t a2, char *a3)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)((char *)a1 + 120);
  v5 = *((_QWORD *)a1 + 16);
  if ((support::log::manager *)v5 != (support::log::manager *)((char *)a1 + 120))
  {
    do
    {
      a1 = (support::log::manager *)(***(uint64_t (****)(_QWORD, uint64_t, char *))(v5 + 16))(*(_QWORD *)(v5 + 16), a2, a3);
      v5 = *(_QWORD *)(v5 + 8);
    }
    while ((_QWORD *)v5 != v4);
  }
  support::log::manager::release_log_buffer(a1, a3);
}

void support::log::stdout_delegate::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0x20uLL);
  v5 = v4;
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    v4[1] = v6;
    v4[2] = v7;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    *((_BYTE *)v4 + 24) = 1;
    std::__shared_weak_count::__release_weak(v7);
    *v5 = &off_1E7901178;
    std::__shared_weak_count::__release_weak(v7);
    *a2 = v5;
  }
  else
  {
    v4[1] = v6;
    v4[2] = 0;
    *((_BYTE *)v4 + 24) = 1;
    *v4 = &off_1E7901178;
    *a2 = v4;
  }
}

uint64_t support::log::stdout_delegate::stdout_delegate(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = &unk_1E7901100;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v3;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *(_BYTE *)(a1 + 24) = 1;
    std::__shared_weak_count::__release_weak(v3);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  *(_QWORD *)a1 = &off_1E7901178;
  return a1;
}

{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = &unk_1E7901100;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v3;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *(_BYTE *)(a1 + 24) = 1;
    std::__shared_weak_count::__release_weak(v3);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  *(_QWORD *)a1 = &off_1E7901178;
  return a1;
}

double support::log::stdout_delegate::create@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v3;
  double result;

  *a1 = 0xAAAAAAAAAAAAAAAALL;
  v3 = operator new(0x20uLL);
  result = 0.0;
  *v3 = 0u;
  v3[1] = 0u;
  *(_QWORD *)v3 = &off_1E7901178;
  *a1 = v3;
  return result;
}

void support::log::stdout_delegate::message(uint64_t a1, uint64_t a2, const char *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v8[3];

  if (a3)
  {
    memset(v8, 170, sizeof(v8));
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 24))(v8);
    if (LOBYTE(v8[2]))
    {
      if (!v8[1])
        return;
      v4 = std::__shared_weak_count::lock((std::__shared_weak_count *)v8[1]);
      if (v4)
      {
        v5 = v4;
        if (v8[0])
          fprintf((FILE *)*MEMORY[0x1E0C80C20], "%s\n", a3);
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C20], "%s\n", a3);
    }
    if (LOBYTE(v8[2]))
    {
      if (v8[1])
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v8[1]);
    }
  }
}

support::log::manager_global *support::log::manager_global::manager_global(support::log::manager_global *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t (**v11)(support::log::manager::parameters *__hidden);
  char v12;
  std::string __p;

  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&__p, "global");
  v10 = 0;
  v11 = &off_1E7901130;
  v12 = 3;
  v8 = (uint64_t)&v8;
  v9 = &v8;
  support::log::manager::manager((uint64_t)this, &__p, (uint64_t)&v11, &v8);
  if (v10)
  {
    v2 = v8;
    v3 = v9;
    v4 = *v9;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v8 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    v10 = 0;
    if (v3 != &v8)
    {
      do
      {
        v7 = (uint64_t *)v3[1];
        v6 = v3[2];
        v3[2] = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v3);
        v3 = v7;
      }
      while (v7 != &v8);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)this = off_1E79011A8;
  return this;
}

void sub_1BF3C4D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::list<std::unique_ptr<support::log::delegate>>::~list(&a9);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *support::log::client::descriptor::descriptor(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t descriptor_instance;

  *a1 = off_1E79011D8;
  descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance(a2, a3);
  a1[1] = descriptor_instance;
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance + 8;
  a1[4] = descriptor_instance + 32;
  a1[5] = descriptor_instance + 56;
  return a1;
}

{
  uint64_t descriptor_instance;

  *a1 = off_1E79011D8;
  descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance(a2, a3);
  a1[1] = descriptor_instance;
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance + 8;
  a1[4] = descriptor_instance + 32;
  a1[5] = descriptor_instance + 56;
  return a1;
}

uint64_t support::log::global_client_descriptor_manager::get_descriptor_instance(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string *p_dst;
  uint64_t v9;
  uint64_t v10;
  const std::string::value_type *v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  char *v17;
  const char *v18;
  const char *v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint64_t **v27;
  uint64_t *v28;
  void *v29;
  void **v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  const void **v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const void **v39;
  void **v40;
  char *v41;
  std::string *v42;
  float v43;
  _QWORD *v44;
  _QWORD *v45;
  _BOOL8 v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t prime;
  void *v50;
  void *v51;
  uint64_t v52;
  _QWORD **v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *i;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint8x8_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  void *v71;
  std::string v72;
  std::string v73;
  void *__p[3];
  std::string __dst;

  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_5);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_5))
  {
    *(_OWORD *)&qword_1ED70FF50 = 0u;
    *(_OWORD *)&qword_1ED70FF40 = 0u;
    dword_1ED70FF60 = 1065353216;
    __cxa_guard_release(&_MergedGlobals_5);
  }
  std::mutex::lock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
  memset(__p, 170, sizeof(__p));
  v5 = *(char *)(a1 + 23);
  if (v5 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 23);
  else
    v6 = *(_QWORD *)(a1 + 8);
  v7 = v6 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v6 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v7 >= 0x17)
  {
    v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v9 = v7 | 7;
    v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v6 + 1;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v6 + 1;
    if (!v6)
      goto LABEL_16;
  }
  if (v5 >= 0)
    v11 = (const std::string::value_type *)a1;
  else
    v11 = *(const std::string::value_type **)a1;
  memmove(p_dst, v11, v6);
LABEL_16:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v6) = 44;
  v12 = *(char *)(a2 + 23);
  if (v12 >= 0)
    v13 = (const std::string::value_type *)a2;
  else
    v13 = *(const std::string::value_type **)a2;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(a2 + 23);
  else
    v14 = *(_QWORD *)(a2 + 8);
  v15 = std::string::append(&__dst, v13, v14);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  __p[2] = (void *)v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p))
      goto LABEL_156;
  }
  else if (std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p))
  {
    goto LABEL_156;
  }
  v17 = (char *)operator new(0x40uLL);
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v73, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v73 = *(std::string *)a1;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v72 = *(std::string *)a2;
  *(_QWORD *)v17 = off_1E7901308;
  v18 = v17 + 8;
  *(std::string *)(v17 + 8) = v73;
  memset(&v73, 0, sizeof(v73));
  *(std::string *)(v17 + 32) = v72;
  memset(&v72, 0, sizeof(v72));
  if (v17[31] < 0)
  {
    v18 = *(const char **)v18;
    v19 = v17 + 32;
    if ((v17[55] & 0x80000000) == 0)
      goto LABEL_34;
  }
  else
  {
    v19 = v17 + 32;
    if ((v17[55] & 0x80000000) == 0)
      goto LABEL_34;
  }
  v19 = *(const char **)v19;
LABEL_34:
  *((_QWORD *)v17 + 7) = os_log_create(v18, v19);
  if (SHIBYTE(__p[2]) >= 0)
    v20 = (uint64_t *)__p;
  else
    v20 = (uint64_t *)__p[0];
  if (SHIBYTE(__p[2]) >= 0)
    v21 = HIBYTE(__p[2]);
  else
    v21 = (unint64_t)__p[1];
  v22 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&__dst, v20, v21);
  v23 = v22;
  v24 = qword_1ED70FF48;
  if (qword_1ED70FF48)
  {
    v25 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1ED70FF48);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      v26 = v22;
      if (v22 >= qword_1ED70FF48)
        v26 = v22 % qword_1ED70FF48;
    }
    else
    {
      v26 = (qword_1ED70FF48 - 1) & v22;
    }
    v27 = *(uint64_t ***)(qword_1ED70FF40 + 8 * v26);
    if (v27)
    {
      v28 = *v27;
      if (*v27)
      {
        if (SHIBYTE(__p[2]) >= 0)
          v29 = (void *)HIBYTE(__p[2]);
        else
          v29 = __p[1];
        if (SHIBYTE(__p[2]) >= 0)
          v30 = __p;
        else
          v30 = (void **)__p[0];
        if (v25.u32[0] < 2uLL)
        {
          while (1)
          {
            v36 = v28[1];
            if (v36 == v23)
            {
              v37 = *((unsigned __int8 *)v28 + 39);
              if ((v37 & 0x80u) == 0)
                v38 = (void *)*((unsigned __int8 *)v28 + 39);
              else
                v38 = (void *)v28[3];
              if (v38 == v29)
              {
                v39 = (const void **)(v28 + 2);
                if ((v37 & 0x80) != 0)
                {
                  if (!memcmp(*v39, v30, v28[3]))
                    goto LABEL_154;
                }
                else
                {
                  if (!*((_BYTE *)v28 + 39))
                    goto LABEL_154;
                  v40 = v30;
                  while (*(unsigned __int8 *)v39 == *(unsigned __int8 *)v40)
                  {
                    v39 = (const void **)((char *)v39 + 1);
                    v40 = (void **)((char *)v40 + 1);
                    if (!--v37)
                      goto LABEL_154;
                  }
                }
              }
            }
            else if ((v36 & (v24 - 1)) != v26)
            {
              goto LABEL_90;
            }
            v28 = (uint64_t *)*v28;
            if (!v28)
              goto LABEL_90;
          }
        }
        do
        {
          v31 = v28[1];
          if (v31 == v23)
          {
            v32 = *((unsigned __int8 *)v28 + 39);
            if ((v32 & 0x80u) == 0)
              v33 = (void *)*((unsigned __int8 *)v28 + 39);
            else
              v33 = (void *)v28[3];
            if (v33 == v29)
            {
              v34 = (const void **)(v28 + 2);
              if ((v32 & 0x80) != 0)
              {
                if (!memcmp(*v34, v30, v28[3]))
                  goto LABEL_154;
              }
              else
              {
                if (!*((_BYTE *)v28 + 39))
                  goto LABEL_154;
                v35 = v30;
                while (*(unsigned __int8 *)v34 == *(unsigned __int8 *)v35)
                {
                  v34 = (const void **)((char *)v34 + 1);
                  v35 = (void **)((char *)v35 + 1);
                  if (!--v32)
                    goto LABEL_154;
                }
              }
            }
          }
          else
          {
            if (v31 >= v24)
              v31 %= v24;
            if (v31 != v26)
              break;
          }
          v28 = (uint64_t *)*v28;
        }
        while (v28);
      }
    }
  }
  else
  {
    v26 = 0xAAAAAAAAAAAAAAAALL;
  }
LABEL_90:
  __dst.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAA00;
  v41 = (char *)operator new(0x30uLL);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&qword_1ED70FF50;
  *(_QWORD *)v41 = 0;
  *((_QWORD *)v41 + 1) = v23;
  v42 = (std::string *)(v41 + 16);
  if (SHIBYTE(__p[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v42, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)&v42->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *((void **)v41 + 4) = __p[2];
  }
  *((_QWORD *)v41 + 5) = v17;
  __dst.__r_.__value_.__s.__data_[16] = 1;
  v43 = (float)(unint64_t)(qword_1ED70FF58 + 1);
  if (!v24 || (float)(*(float *)&dword_1ED70FF60 * (float)v24) < v43)
  {
    v46 = 1;
    if (v24 >= 3)
      v46 = (v24 & (v24 - 1)) != 0;
    v47 = v46 | (2 * v24);
    v48 = vcvtps_u32_f32(v43 / *(float *)&dword_1ED70FF60);
    if (v47 <= v48)
      prime = v48;
    else
      prime = v47;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v24 = qword_1ED70FF48;
    if (prime > qword_1ED70FF48)
      goto LABEL_107;
    if (prime >= qword_1ED70FF48)
      goto LABEL_140;
    v60 = vcvtps_u32_f32((float)(unint64_t)qword_1ED70FF58 / *(float *)&dword_1ED70FF60);
    if ((unint64_t)qword_1ED70FF48 < 3
      || (v61 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1ED70FF48), v61.i16[0] = vaddlv_u8(v61), v61.u32[0] > 1uLL))
    {
      v60 = std::__next_prime(v60);
    }
    else
    {
      v62 = 1 << -(char)__clz(v60 - 1);
      if (v60 >= 2)
        v60 = v62;
    }
    if (prime <= v60)
      prime = v60;
    if (prime >= v24)
    {
      v24 = qword_1ED70FF48;
    }
    else
    {
      if (prime)
      {
LABEL_107:
        if (prime >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v50 = operator new(8 * prime);
        v51 = (void *)qword_1ED70FF40;
        qword_1ED70FF40 = (uint64_t)v50;
        if (v51)
          operator delete(v51);
        v52 = 0;
        qword_1ED70FF48 = prime;
        do
          *(_QWORD *)(qword_1ED70FF40 + 8 * v52++) = 0;
        while (prime != v52);
        v53 = (_QWORD **)qword_1ED70FF50;
        if (!qword_1ED70FF50)
          goto LABEL_139;
        v54 = *(_QWORD *)(qword_1ED70FF50 + 8);
        v55 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v56 = v54 & v55;
          *(_QWORD *)(qword_1ED70FF40 + 8 * v56) = &qword_1ED70FF50;
          for (i = *v53; *v53; i = *v53)
          {
            v58 = i[1] & v55;
            if (v58 == v56)
            {
              v53 = (_QWORD **)i;
            }
            else if (*(_QWORD *)(qword_1ED70FF40 + 8 * v58))
            {
              *v53 = (_QWORD *)*i;
              v59 = 8 * v58;
              *i = **(_QWORD **)(qword_1ED70FF40 + v59);
              **(_QWORD **)(qword_1ED70FF40 + v59) = i;
            }
            else
            {
              *(_QWORD *)(qword_1ED70FF40 + 8 * v58) = v53;
              v53 = (_QWORD **)i;
              v56 = v58;
            }
          }
LABEL_139:
          v24 = prime;
          goto LABEL_140;
        }
        if (v54 >= prime)
          v54 %= prime;
        *(_QWORD *)(qword_1ED70FF40 + 8 * v54) = &qword_1ED70FF50;
        v63 = *v53;
        if (!*v53)
          goto LABEL_139;
        while (1)
        {
          v65 = v63[1];
          if (v65 >= prime)
            v65 %= prime;
          if (v65 == v54)
            goto LABEL_133;
          if (*(_QWORD *)(qword_1ED70FF40 + 8 * v65))
          {
            *v53 = (_QWORD *)*v63;
            v64 = 8 * v65;
            *v63 = **(_QWORD **)(qword_1ED70FF40 + v64);
            **(_QWORD **)(qword_1ED70FF40 + v64) = v63;
            v63 = v53;
LABEL_133:
            v53 = (_QWORD **)v63;
            v63 = (_QWORD *)*v63;
            if (!v63)
              goto LABEL_139;
          }
          else
          {
            *(_QWORD *)(qword_1ED70FF40 + 8 * v65) = v53;
            v53 = (_QWORD **)v63;
            v63 = (_QWORD *)*v63;
            v54 = v65;
            if (!v63)
              goto LABEL_139;
          }
        }
      }
      v71 = (void *)qword_1ED70FF40;
      qword_1ED70FF40 = 0;
      if (v71)
        operator delete(v71);
      v24 = 0;
      qword_1ED70FF48 = 0;
    }
LABEL_140:
    v66 = v24 - 1;
    if ((v24 & (v24 - 1)) != 0)
    {
      if (v23 >= v24)
      {
        v26 = v23 % v24;
        v44 = *(_QWORD **)(qword_1ED70FF40 + 8 * (v23 % v24));
        v45 = (_QWORD *)__dst.__r_.__value_.__r.__words[0];
        if (v44)
          goto LABEL_96;
      }
      else
      {
        v26 = v23;
        v44 = *(_QWORD **)(qword_1ED70FF40 + 8 * v23);
        v45 = (_QWORD *)__dst.__r_.__value_.__r.__words[0];
        if (v44)
          goto LABEL_96;
      }
    }
    else
    {
      v26 = v66 & v23;
      v44 = *(_QWORD **)(qword_1ED70FF40 + 8 * (v66 & v23));
      v45 = (_QWORD *)__dst.__r_.__value_.__r.__words[0];
      if (v44)
        goto LABEL_96;
    }
LABEL_142:
    *v45 = qword_1ED70FF50;
    qword_1ED70FF50 = __dst.__r_.__value_.__r.__words[0];
    *(_QWORD *)(qword_1ED70FF40 + 8 * v26) = &qword_1ED70FF50;
    if (*(_QWORD *)__dst.__r_.__value_.__l.__data_)
    {
      v67 = *(_QWORD *)(*(_QWORD *)__dst.__r_.__value_.__l.__data_ + 8);
      if ((v24 & (v24 - 1)) != 0)
      {
        if (v67 >= v24)
          v67 %= v24;
      }
      else
      {
        v67 &= v24 - 1;
      }
      *(_QWORD *)(qword_1ED70FF40 + 8 * v67) = __dst.__r_.__value_.__r.__words[0];
    }
    goto LABEL_153;
  }
  v44 = *(_QWORD **)(qword_1ED70FF40 + 8 * v26);
  v45 = (_QWORD *)__dst.__r_.__value_.__r.__words[0];
  if (!v44)
    goto LABEL_142;
LABEL_96:
  *v45 = *v44;
  *v44 = __dst.__r_.__value_.__r.__words[0];
LABEL_153:
  ++qword_1ED70FF58;
LABEL_154:
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v72.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_156:
      v68 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p);
      if (v68)
        goto LABEL_157;
LABEL_162:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
  }
  else if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_156;
  }
  operator delete(v73.__r_.__value_.__l.__data_);
  v68 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p);
  if (!v68)
    goto LABEL_162;
LABEL_157:
  v69 = v68[5];
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  std::mutex::unlock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
  return v69;
}

void sub_1BF3C5684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)&a29);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a21 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a28 & 0x80000000) == 0)
    {
LABEL_8:
      std::mutex::unlock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
      _Unwind_Resume(a1);
    }
LABEL_7:
    operator delete(a23);
    std::mutex::unlock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
    _Unwind_Resume(a1);
  }
  operator delete(a16);
  if ((a28 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL support::log::client::descriptor::operator==(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

_QWORD *support::log::client::client(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t descriptor_instance;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *__p[2];
  uint64_t v15;
  void *v16[2];
  uint64_t v17;

  *a1 = off_1E79011F8;
  *(_OWORD *)v16 = *(_OWORD *)a2;
  v17 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v15 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  a1[1] = off_1E79011D8;
  descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance((uint64_t)v16, (uint64_t)__p);
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance;
  a1[4] = descriptor_instance + 8;
  a1[5] = descriptor_instance + 32;
  a1[6] = descriptor_instance + 56;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v17) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(v16[0]);
    if (a4)
      goto LABEL_4;
LABEL_7:
    pthread_mutex_lock(&ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance);
    if (!qword_1EF57D0A8)
    {
      v7 = operator new(0xA8uLL);
      v7[1] = 0;
      v7[2] = 0;
      *v7 = off_1E7901470;
      a4 = (uint64_t)(v7 + 3);
      support::log::manager_global::manager_global((support::log::manager_global *)(v7 + 3));
      v8 = (std::__shared_weak_count *)off_1EF57D0B0;
      qword_1EF57D0A8 = (uint64_t)(v7 + 3);
      off_1EF57D0B0 = v7;
      if (!v8)
        goto LABEL_15;
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    a4 = qword_1EF57D0A8;
    v7 = off_1EF57D0B0;
    if (!off_1EF57D0B0)
    {
LABEL_17:
      pthread_mutex_unlock(&ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance);
      a1[7] = a4;
      a1[8] = v7;
      goto LABEL_18;
    }
LABEL_15:
    v11 = v7 + 1;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    goto LABEL_17;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v17) < 0)
    goto LABEL_6;
LABEL_3:
  if (!a4)
    goto LABEL_7;
LABEL_4:
  a1[7] = 0;
  a1[8] = 0;
LABEL_18:
  a1[9] = a4;
  return a1;
}

void sub_1BF3C5978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__shared_weak_count *v21;
  void *v23;

  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v23);
  pthread_mutex_unlock(&ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance);
  _Unwind_Resume(a1);
}

_QWORD *support::log::client::client(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t descriptor_instance;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v10;
  unint64_t v11;
  void *__p[2];
  uint64_t v13;
  void *v14[2];
  uint64_t v15;

  *a1 = off_1E79011F8;
  *(_OWORD *)v14 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v13 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  a1[1] = off_1E79011D8;
  descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance((uint64_t)v14, (uint64_t)__p);
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance;
  a1[4] = descriptor_instance + 8;
  a1[5] = descriptor_instance + 32;
  a1[6] = descriptor_instance + 56;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(v14[0]);
    v7 = *a4;
    v8 = a4[1];
    a1[7] = *a4;
    a1[8] = v8;
    if (!v8)
      goto LABEL_4;
    goto LABEL_7;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15) < 0)
    goto LABEL_6;
LABEL_3:
  v7 = *a4;
  v8 = a4[1];
  a1[7] = *a4;
  a1[8] = v8;
  if (!v8)
  {
LABEL_4:
    a1[9] = v7;
    return a1;
  }
LABEL_7:
  v10 = (unint64_t *)(v8 + 8);
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  a1[9] = a1[7];
  return a1;
}

void sub_1BF3C5AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

_QWORD *support::log::client::client(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *__p[2];
  uint64_t v6;
  void *v7[2];
  uint64_t v8;

  *(_OWORD *)v7 = *(_OWORD *)a2;
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v6 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  support::log::client::client(a1, (uint64_t)v7, (uint64_t)__p, 0);
  if (SHIBYTE(v6) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v8) & 0x80000000) == 0)
      return a1;
  }
  else if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(v7[0]);
  return a1;
}

{
  void *__p[2];
  uint64_t v6;
  void *v7[2];
  uint64_t v8;

  *(_OWORD *)v7 = *(_OWORD *)a2;
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v6 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  support::log::client::client(a1, (uint64_t)v7, (uint64_t)__p, 0);
  if (SHIBYTE(v6) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v8) & 0x80000000) == 0)
      return a1;
  }
  else if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(v7[0]);
  return a1;
}

void sub_1BF3C5BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1BF3C5CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t support::log::client::get_manager(support::log::client *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t support::log::client::get_descriptor(support::log::client *this)
{
  return (uint64_t)this + 8;
}

void support::log::stdout_delegate::~stdout_delegate(support::log::stdout_delegate *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &unk_1E7901100;
  if (*((_BYTE *)this + 24))
  {
    v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (v1)
      std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &unk_1E7901100;
  if (*((_BYTE *)this + 24))
  {
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (v2)
      std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(this);
}

BOOL support::log::manager::should_log(uint64_t a1, unsigned int a2, os_log_t oslog)
{
  return *(unsigned __int8 *)(a1 + 112) >= a2 || os_log_type_enabled(oslog, support::log::sOSLogLevel[a2]);
}

uint64_t ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t ctu::PthreadMutexGuardPolicy<support::log::buffer>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t ctu::PthreadMutexGuardPolicy<support::log::manager_global>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void support::log::manager_global::~manager_global(support::log::manager_global *this)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(_QWORD *)this = off_1E7901148;
  if (*((_QWORD *)this + 17))
  {
    v2 = (char *)this + 120;
    v3 = *((_QWORD *)this + 15);
    v4 = (char *)*((_QWORD *)this + 16);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 + 1);
        v6 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(_QWORD *)this = off_1E7901148;
  if (*((_QWORD *)this + 17))
  {
    v2 = (char *)this + 120;
    v3 = *((_QWORD *)this + 15);
    v4 = (char *)*((_QWORD *)this + 16);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 + 1);
        v6 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  operator delete(this);
}

void support::log::client::~client(support::log::client *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = off_1E79011F8;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = off_1E79011F8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(this);
  }
  else
  {
LABEL_5:
    operator delete(this);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(_QWORD *a1)
{
  _BYTE *v1;
  int v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t *result;
  uint64_t **v11;
  uint64_t *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v1 = a1;
  v2 = *((char *)a1 + 23);
  if (v2 >= 0)
    v3 = a1;
  else
    v3 = (uint64_t *)*a1;
  if (v2 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  v5 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v24, v3, v4);
  v6 = qword_1ED70FF48;
  if (!qword_1ED70FF48)
    return 0;
  v7 = v5;
  v8 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1ED70FF48);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = v5;
    if (v5 >= qword_1ED70FF48)
      v9 = v5 % qword_1ED70FF48;
  }
  else
  {
    v9 = (qword_1ED70FF48 - 1) & v5;
  }
  v11 = *(uint64_t ***)(qword_1ED70FF40 + 8 * v9);
  if (v11)
  {
    v12 = *v11;
    if (*v11)
    {
      v13 = v1[23];
      if (v13 >= 0)
        v14 = v1[23];
      else
        v14 = *((_QWORD *)v1 + 1);
      if (v13 < 0)
        v1 = *(_BYTE **)v1;
      if (v8.u32[0] < 2uLL)
      {
        v15 = qword_1ED70FF48 - 1;
        while (1)
        {
          v20 = v12[1];
          if (v20 == v7)
          {
            v21 = *((unsigned __int8 *)v12 + 39);
            if ((v21 & 0x80u) == 0)
              v22 = *((unsigned __int8 *)v12 + 39);
            else
              v22 = v12[3];
            if (v22 == v14)
            {
              if ((v21 & 0x80) != 0)
              {
                if (!memcmp((const void *)v12[2], v1, v12[3]))
                  return v12;
              }
              else
              {
                if (!*((_BYTE *)v12 + 39))
                  return v12;
                v23 = 0;
                while (*((unsigned __int8 *)v12 + v23 + 16) == v1[v23])
                {
                  if (v21 == ++v23)
                    return v12;
                }
              }
            }
          }
          else if ((v20 & v15) != v9)
          {
            return 0;
          }
          result = 0;
          v12 = (uint64_t *)*v12;
          if (!v12)
            return result;
        }
      }
      while (1)
      {
        v16 = v12[1];
        if (v16 == v7)
        {
          v17 = *((unsigned __int8 *)v12 + 39);
          if ((v17 & 0x80u) == 0)
            v18 = *((unsigned __int8 *)v12 + 39);
          else
            v18 = v12[3];
          if (v18 == v14)
          {
            if ((v17 & 0x80) != 0)
            {
              if (!memcmp((const void *)v12[2], v1, v12[3]))
                return v12;
            }
            else
            {
              if (!*((_BYTE *)v12 + 39))
                return v12;
              v19 = 0;
              while (*((unsigned __int8 *)v12 + v19 + 16) == v1[v19])
              {
                if (v17 == ++v19)
                  return v12;
              }
            }
          }
        }
        else
        {
          if (v16 >= v6)
            v16 %= v6;
          if (v16 != v9)
            return 0;
        }
        result = 0;
        v12 = (uint64_t *)*v12;
        if (!v12)
          return result;
      }
    }
  }
  return 0;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      v30 = v26 + v28;
      v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      v33 = v23 + v26 + v27 + a3;
      v34 = v33 + v24;
      v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v27 + a3 + v24 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v37 = v25 + v28 + v36;
      v38 = __ROR8__(v37, 44);
      v39 = v37 + v29;
      v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      v42 = *a2;
      v41 = a2 + 4;
      v43 = v42 - 0x4B6D499041670D8DLL * v24;
      v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v45 = *(v41 - 3);
        v46 = v43 + v34 + v30 + v45;
        v47 = v41[2];
        v48 = v41[3];
        v49 = v41[1];
        v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        v50 = v32 + v39;
        v51 = *(v41 - 2);
        v52 = *(v41 - 1);
        v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        v54 = v53 + v39 + v52;
        v55 = v53 + v45 + v51;
        v34 = v55 + v52;
        v56 = __ROR8__(v55, 44) + v53;
        v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        v35 = v56 + __ROR8__(v54 + v57, 21);
        v58 = v43 + v40 + *v41;
        v39 = v49 + v47 + v58 + v48;
        v40 = __ROR8__(v49 + v47 + v58, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        v32 = v57;
        v44 += 64;
      }
      while (v44);
      v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      v9 = a2[2];
      v8 = a2[3];
      v10 = __ROR8__(v7 + v8, 52);
      v11 = v7 + a2[1];
      v12 = __ROR8__(v11, 7);
      v13 = v11 + v9;
      v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    v18 = a2[1];
    v19 = 0xB492B66FBE98F273 * *a2;
    v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD *)(v2 + 40);
      *(_QWORD *)(v2 + 40) = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void support::log::global_client_descriptor::~global_client_descriptor(void **this)
{
  *this = off_1E7901308;
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if ((*((char *)this + 31) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(this[1]);
    return;
  }
  operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    goto LABEL_5;
}

{
  *this = off_1E7901308;
  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    if ((*((char *)this + 31) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(this[1]);
    operator delete(this);
    return;
  }
  if (*((char *)this + 31) < 0)
    goto LABEL_6;
LABEL_3:
  operator delete(this);
}

void std::__shared_ptr_pointer<support::log::delegate::context *,std::shared_ptr<support::log::delegate::context>::__shared_ptr_default_delete<support::log::delegate::context,support::log::delegate::context>,std::allocator<support::log::delegate::context>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<support::log::delegate::context *,std::shared_ptr<support::log::delegate::context>::__shared_ptr_default_delete<support::log::delegate::context,support::log::delegate::context>,std::allocator<support::log::delegate::context>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<support::log::delegate::context *,std::shared_ptr<support::log::delegate::context>::__shared_ptr_default_delete<support::log::delegate::context,support::log::delegate::context>,std::allocator<support::log::delegate::context>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF53FEF2)
    return a1 + 24;
  if (((v3 & 0x80000001BF53FEF2 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF53FEF2))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF53FEF2 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__shared_ptr_emplace<support::log::buffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E7901388;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<support::log::buffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E7901388;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<support::log::buffer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void support::log::buffer::~buffer(support::log::buffer *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;

  *(_QWORD *)this = off_1E79013D8;
  v2 = (char *)*((_QWORD *)this + 9);
  v3 = (char *)this + 80;
  if (v2 != (char *)this + 80)
  {
    do
    {
      free(*((void **)v2 + 4));
      v4 = (char *)*((_QWORD *)v2 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (char *)*((_QWORD *)v2 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  std::deque<char *>::~deque[abi:ne180100]((uint64_t)this + 96);
  std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(*((_QWORD **)this + 10));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;

  *(_QWORD *)this = off_1E79013D8;
  v2 = (char *)*((_QWORD *)this + 9);
  v3 = (char *)this + 80;
  if (v2 != (char *)this + 80)
  {
    do
    {
      free(*((void **)v2 + 4));
      v4 = (char *)*((_QWORD *)v2 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (char *)*((_QWORD *)v2 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  std::deque<char *>::~deque[abi:ne180100]((uint64_t)this + 96);
  std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(*((_QWORD **)this + 10));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  operator delete(this);
}

uint64_t std::deque<char *>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__shared_ptr_pointer<support::log::manager *,std::shared_ptr<support::log::manager>::__shared_ptr_default_delete<support::log::manager,support::log::manager>,std::allocator<support::log::manager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<support::log::manager *,std::shared_ptr<support::log::manager>::__shared_ptr_default_delete<support::log::manager,support::log::manager>,std::allocator<support::log::manager>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<support::log::manager *,std::shared_ptr<support::log::manager>::__shared_ptr_default_delete<support::log::manager,support::log::manager>,std::allocator<support::log::manager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF54007ELL)
    return a1 + 24;
  if (((v3 & 0x80000001BF54007ELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF54007ELL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF54007ELL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__shared_ptr_emplace<support::log::manager_global>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E7901470;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<support::log::manager_global>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E7901470;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<support::log::manager_global>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t __cxx_global_var_init_4()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_1BF335000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::buffer>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance, &dword_1BF335000);
  }
  return result;
}

uint64_t __cxx_global_var_init_5()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::manager_global>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance, &dword_1BF335000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1BF335000);
  }
  return result;
}

void coex::XpcClient::create(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type size;
  void *v5;
  std::string __p;

  memset(&__p, 170, sizeof(__p));
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (!size)
      goto LABEL_9;
  }
  else
  {
    __p = *(std::string *)a1;
    v3 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v3 = __p.__r_.__value_.__l.__size_;
    if (!v3)
LABEL_9:
      std::string::__assign_external(&__p, "com.apple.WirelessCoexManager", 0x1DuLL);
  }
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v5 = operator new(0x80uLL);
  coex::XpcClient::XpcClient((uint64_t)v5, (__int128 *)&__p);
  std::shared_ptr<coex::XpcClient>::shared_ptr[abi:ne180100]<coex::XpcClient,std::shared_ptr<coex::XpcClient> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<coex::XpcClient>(coex::XpcClient*)::{lambda(coex::XpcClient*)#1},void>(a2, (uint64_t)v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF3C6FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  operator delete(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t coex::XpcClient::XpcClient(uint64_t a1, __int128 *a2)
{
  _OWORD *v4;
  __int128 v5;
  NSObject *v6;
  uint64_t v8;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  _OWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v10 = 8;
  strcpy((char *)__p, "coex.xpc");
  ctu::XpcClient::XpcClient();
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "coex.xpc");
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 72), (const ctu::OsLogLogger *)&v8);
  MEMORY[0x1C3B89240](&v8);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  *(_QWORD *)a1 = &off_1E79014C0;
  v4 = (_OWORD *)(a1 + 80);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 80), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 2);
    *v4 = v5;
  }
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  v6 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 103) < 0)
      v4 = *(_OWORD **)v4;
    *(_DWORD *)buf = 136315138;
    v12 = v4;
    _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, "#I Created with name %s", buf, 0xCu);
  }
  return a1;
}

void coex::XpcClient::~XpcClient(coex::XpcClient *this)
{
  *(_QWORD *)this = &off_1E79014C0;
  std::__tree<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::__map_value_compare<WCMSendMessageId,std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::less<WCMSendMessageId>,true>,std::allocator<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>>>::destroy(*((_QWORD **)this + 14));
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  MEMORY[0x1C3B89240]((char *)this + 72);
  ctu::XpcClient::~XpcClient(this);
}

{
  *(_QWORD *)this = &off_1E79014C0;
  std::__tree<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::__map_value_compare<WCMSendMessageId,std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::less<WCMSendMessageId>,true>,std::allocator<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>>>::destroy(*((_QWORD **)this + 14));
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  MEMORY[0x1C3B89240]((char *)this + 72);
  ctu::XpcClient::~XpcClient(this);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E79014C0;
  std::__tree<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::__map_value_compare<WCMSendMessageId,std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::less<WCMSendMessageId>,true>,std::allocator<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>>>::destroy(*((_QWORD **)this + 14));
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  MEMORY[0x1C3B89240]((char *)this + 72);
  ctu::XpcClient::~XpcClient(this);
  operator delete(v2);
}

const char *coex::XpcClient::getName(coex::XpcClient *this)
{
  return "coex.xpc";
}

void coex::XpcClient::start(coex::XpcClient *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN4coex9XpcClient5startEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_9;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_9XpcClientEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  block[4] = (char *)this + 8;
  block[5] = &v4;
  v2 = (char *)this + 24;
  v1 = *((_QWORD *)this + 3);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void ___ZN4coex9XpcClient5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  const char **v2;
  xpc_connection_t mach_service;
  xpc_object_t v4;
  xpc_object_t object;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (const char **)(v1 + 80);
  if (*(char *)(v1 + 103) < 0)
  {
    mach_service = xpc_connection_create_mach_service(*v2, *(dispatch_queue_t *)(v1 + 24), 2uLL);
    if (mach_service)
      goto LABEL_3;
  }
  else
  {
    mach_service = xpc_connection_create_mach_service((const char *)v2, *(dispatch_queue_t *)(v1 + 24), 2uLL);
    if (mach_service)
    {
LABEL_3:
      v4 = mach_service;
      object = mach_service;
      goto LABEL_6;
    }
  }
  v4 = xpc_null_create();
  object = v4;
  if (!v4)
  {
    v4 = 0;
    object = xpc_null_create();
    goto LABEL_7;
  }
LABEL_6:
  xpc_retain(v4);
LABEL_7:
  ctu::XpcClient::setServer_sync();
  xpc_release(object);
  coex::XpcClient::register_sync((coex::XpcClient *)v1);
  xpc_release(v4);
}

void sub_1BF3C745C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void coex::XpcClient::register_sync(coex::XpcClient *this)
{
  NSObject *v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  _QWORD v8[5];
  xpc_object_t object;
  int v10;
  int v11;

  v2 = *((_QWORD *)this + 9);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v8[0]) = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Registering", (uint8_t *)v8, 2u);
  }
  v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v3) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v3);
      v4 = v3;
    }
    else
    {
      v4 = xpc_null_create();
    }
  }
  else
  {
    v4 = xpc_null_create();
    v3 = 0;
  }
  xpc_release(v3);
  v5 = xpc_int64_create(3);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kWCMRegisterProcess_ProcessId", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  if (v4)
  {
    xpc_retain(v4);
    v7 = v4;
  }
  else
  {
    v7 = xpc_null_create();
  }
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1174405120;
  v8[2] = ___ZN4coex9XpcClient11sendMessageE19WCMReceiveMessageIdN3xpc6objectENS_5SubIdE_block_invoke;
  v8[3] = &__block_descriptor_tmp_7_3;
  v10 = 1;
  v8[4] = this;
  object = v7;
  if (v7)
    xpc_retain(v7);
  else
    object = xpc_null_create();
  v11 = 0;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v8);
  xpc_release(object);
  xpc_release(v7);
  xpc_release(v4);
}

void coex::XpcClient::registerCommandHandler(uint64_t a1, int a2, void **a3)
{
  void *v4;
  _QWORD v5[5];
  void *aBlock;
  int v7;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 1174405120;
  v5[2] = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  v5[3] = &__block_descriptor_tmp_5_5;
  v5[4] = a1;
  v7 = a2;
  v4 = *a3;
  if (*a3)
    v4 = _Block_copy(v4);
  aBlock = v4;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v5);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  const void *v13;

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    v4 = _Block_copy(v2);
    v6 = (_QWORD *)(v3 + 112);
    v5 = *(_QWORD *)(v3 + 112);
    v7 = *(_DWORD *)(a1 + 48);
    if (v5)
      goto LABEL_7;
    goto LABEL_5;
  }
  v4 = 0;
  v6 = (_QWORD *)(v3 + 112);
  v5 = *(_QWORD *)(v3 + 112);
  v7 = *(_DWORD *)(a1 + 48);
  if (!v5)
  {
LABEL_5:
    v8 = v6;
LABEL_11:
    v10 = operator new(0x30uLL);
    v10[8] = v7;
    *((_QWORD *)v10 + 5) = 0;
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 2) = v8;
    *v6 = v10;
    v11 = **(_QWORD **)(v3 + 104);
    v12 = (uint64_t *)v10;
    if (v11)
    {
      *(_QWORD *)(v3 + 104) = v11;
      v12 = (uint64_t *)*v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 112), v12);
    ++*(_QWORD *)(v3 + 120);
    v13 = (const void *)*((_QWORD *)v10 + 5);
    *((_QWORD *)v10 + 5) = v4;
    if (!v13)
      return;
LABEL_16:
    _Block_release(v13);
    return;
  }
  while (1)
  {
LABEL_7:
    while (1)
    {
      v8 = (_QWORD *)v5;
      v9 = *(_DWORD *)(v5 + 32);
      if (v7 >= v9)
        break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_11;
    }
    if (v9 >= v7)
      break;
    v5 = v8[1];
    if (!v5)
    {
      v6 = v8 + 1;
      goto LABEL_11;
    }
  }
  v13 = (const void *)v8[5];
  v8[5] = v4;
  if (v13)
    goto LABEL_16;
}

void sub_1BF3C7810(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    _Block_release(v1);
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_40c68_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectEN4coex5SubIdEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 40);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c68_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectEN4coex5SubIdEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    _Block_release(v1);
}

void coex::XpcClient::handleServerError_sync(coex::XpcClient *a1, xpc::object *a2)
{
  NSObject *v4;
  void **v5;
  void *__p;
  char v7;
  uint8_t buf[4];
  void **v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a1 + 9);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    xpc::object::to_string(a2);
    v5 = v7 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315138;
    v9 = v5;
    _os_log_error_impl(&dword_1BF335000, v4, OS_LOG_TYPE_ERROR, "Server Error: %s", buf, 0xCu);
    if (v7 < 0)
      operator delete(__p);
  }
  if (*(_QWORD *)a2 == MEMORY[0x1E0C81258])
    coex::XpcClient::register_sync(a1);
}

_QWORD *std::shared_ptr<coex::XpcClient>::shared_ptr[abi:ne180100]<coex::XpcClient,std::shared_ptr<coex::XpcClient> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<coex::XpcClient>(coex::XpcClient*)::{lambda(coex::XpcClient*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E79015B8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 8) = a2;
    *(_QWORD *)(a2 + 16) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 8) = a2;
    *(_QWORD *)(a2 + 16) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF3C7A7C(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<coex::XpcClient> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<coex::XpcClient>(coex::XpcClient*)::{lambda(coex::XpcClient*)#1}::operator() const(coex::XpcClient*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF3C7A9C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<coex::XpcClient *,std::shared_ptr<coex::XpcClient> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<coex::XpcClient>(coex::XpcClient*)::{lambda(coex::XpcClient *)#1},std::allocator<coex::XpcClient>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<coex::XpcClient *,std::shared_ptr<coex::XpcClient> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<coex::XpcClient>(coex::XpcClient*)::{lambda(coex::XpcClient *)#1},std::allocator<coex::XpcClient>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<coex::XpcClient> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<coex::XpcClient>(coex::XpcClient*)::{lambda(coex::XpcClient*)#1}::operator() const(coex::XpcClient*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<coex::XpcClient *,std::shared_ptr<coex::XpcClient> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<coex::XpcClient>(coex::XpcClient*)::{lambda(coex::XpcClient *)#1},std::allocator<coex::XpcClient>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableINS_9XpcClientEE15make_shared_ptrIN4coex9XpcClientEEENSt3__110shared_pt"
                     "rIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableINS_9XpcClientEE15make_shared_ptrIN4coex9XpcClientEEENSt3__1"
                                "10shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableINS_9XpcClientEE15make_shared_ptrIN4coex9XpcClientEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableINS_9XpcClientEE15make_shared_ptrIN4coex9XpcClientEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<coex::XpcClient> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<coex::XpcClient>(coex::XpcClient*)::{lambda(coex::XpcClient*)#1}::operator() const(coex::XpcClient*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void std::__tree<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::__map_value_compare<WCMSendMessageId,std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::less<WCMSendMessageId>,true>,std::allocator<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>>>::destroy(_QWORD *a1)
{
  const void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::__map_value_compare<WCMSendMessageId,std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::less<WCMSendMessageId>,true>,std::allocator<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>>>::destroy(*a1);
    std::__tree<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::__map_value_compare<WCMSendMessageId,std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::less<WCMSendMessageId>,true>,std::allocator<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>>>::destroy(a1[1]);
    v2 = (const void *)a1[5];
    if (v2)
      _Block_release(v2);
    operator delete(a1);
  }
}

void BudgetData::BudgetData(BudgetData *this)
{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
}

{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
}

void BudgetData::~BudgetData(BudgetData *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)((char *)this + 8);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
  *(_QWORD *)this = v2;
  *((_QWORD *)this + 2) = 0;
  *v2 = 0;
}

{
  _QWORD *v2;

  v2 = (_QWORD *)((char *)this + 8);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
  *(_QWORD *)this = v2;
  *((_QWORD *)this + 2) = 0;
  *v2 = 0;
}

void BudgetData::BudgetData(BudgetData *this, const BudgetData *a2)
{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  if (this != a2)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *(_QWORD **)a2, (_QWORD *)a2 + 1);
}

{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  if (this != a2)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *(_QWORD **)a2, (_QWORD *)a2 + 1);
}

void sub_1BF3C7CA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1BF3C7D00(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *BudgetData::BudgetData(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  result[2] = 0;
  result[1] = 0;
  *result = result + 1;
  *result = *(_QWORD *)a2;
  *(_QWORD *)a2 = result + 1;
  v2 = result[1];
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = 0;
  if (result[2])
    v3 = (_QWORD *)(result[1] + 16);
  else
    v3 = result;
  *v3 = result + 1;
  *(_QWORD *)a2 = a2 + 8;
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;

  result[2] = 0;
  result[1] = 0;
  *result = result + 1;
  *result = *(_QWORD *)a2;
  *(_QWORD *)a2 = result + 1;
  v2 = result[1];
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = 0;
  if (result[2])
    v3 = (_QWORD *)(result[1] + 16);
  else
    v3 = result;
  *v3 = result + 1;
  *(_QWORD *)a2 = a2 + 8;
  return result;
}

uint64_t BudgetData::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

uint64_t BudgetData::get(uint64_t **a1, unsigned int a2)
{
  char v2;
  unsigned __int8 *v4;
  uint64_t **v5;
  _QWORD *v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;

  v2 = a2;
  v5 = a1 + 1;
  v4 = (unsigned __int8 *)a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = v4;
        v7 = v4[28];
        if (v7 <= a2)
          break;
        v4 = (unsigned __int8 *)*v6;
        v5 = (uint64_t **)v6;
        if (!*v6)
          goto LABEL_8;
      }
      if (v7 >= a2)
        break;
      v4 = (unsigned __int8 *)v6[1];
      if (!v4)
      {
        v5 = (uint64_t **)(v6 + 1);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_8:
    v8 = v6;
    v6 = operator new(0x28uLL);
    *((_BYTE *)v6 + 28) = v2;
    *((_BYTE *)v6 + 32) = 0;
    *((_BYTE *)v6 + 36) = 0;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *v5 = v6;
    v9 = (uint64_t *)**a1;
    v10 = v6;
    if (v9)
    {
      *a1 = v9;
      v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6[4];
}

uint64_t *BudgetData::set(uint64_t *result, unsigned int a2, int a3)
{
  char v4;
  uint64_t *v5;
  unsigned __int8 *v6;
  uint64_t **v7;
  _QWORD *v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;

  v4 = a2;
  v5 = result;
  v7 = (uint64_t **)(result + 1);
  v6 = (unsigned __int8 *)result[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = v6;
        v9 = v6[28];
        if (v9 <= a2)
          break;
        v6 = (unsigned __int8 *)*v8;
        v7 = (uint64_t **)v8;
        if (!*v8)
          goto LABEL_8;
      }
      if (v9 >= a2)
        break;
      v6 = (unsigned __int8 *)v8[1];
      if (!v6)
      {
        v7 = (uint64_t **)(v8 + 1);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v8 = result + 1;
LABEL_8:
    v10 = v8;
    v8 = operator new(0x28uLL);
    *((_BYTE *)v8 + 28) = v4;
    *((_BYTE *)v8 + 32) = 0;
    *((_BYTE *)v8 + 36) = 0;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = v10;
    *v7 = v8;
    v11 = *(_QWORD *)*v5;
    v12 = v8;
    if (v11)
    {
      *v5 = v11;
      v12 = *v7;
    }
    result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v12);
    ++v5[2];
  }
  *((_DWORD *)v8 + 8) = a3;
  *((_BYTE *)v8 + 36) = 1;
  return result;
}

void BudgetData::clear(BudgetData *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)((char *)this + 8);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
  *(_QWORD *)this = v2;
  *((_QWORD *)this + 2) = 0;
  *v2 = 0;
}

_QWORD *BudgetData::for_each(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  v2 = result + 1;
  v3 = (_QWORD *)*result;
  if ((_QWORD *)*result != result + 1)
  {
    do
    {
      v5 = *(_QWORD *)(a2 + 24);
      if (!v5)
        std::__throw_bad_function_call[abi:ne180100]();
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v5 + 48))(v5, (uint64_t)v3 + 28, v3 + 4);
      if (!(_DWORD)result)
        break;
      v6 = (_QWORD *)v3[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v3[2];
          v8 = *v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v2);
  }
  return result;
}

void std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  unsigned int v14;
  int v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t **v18;
  uint64_t v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *i;
  uint64_t ***v25;
  uint64_t *v26;
  uint64_t *v27;
  int v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t *v35;

  v4 = a2;
  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v8 = (uint64_t **)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v9 = v6[1] ? (uint64_t *)v6[1] : v6;
    if (v9)
    {
      v10 = (uint64_t *)v9[2];
      if (v10)
      {
        v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *v10 = 0;
          while (1)
          {
            v35 = (uint64_t *)v10[1];
            if (!v35)
              break;
            do
            {
              v10 = v35;
              v35 = (uint64_t *)*v35;
            }
            while (v35);
          }
        }
        else
        {
          for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
          {
            do
            {
              v10 = v11;
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        v12 = v9;
        v13 = v4;
        while (1)
        {
          v9 = v10;
          v14 = *((unsigned __int8 *)v13 + 28);
          *((_BYTE *)v12 + 28) = v14;
          v15 = *((_DWORD *)v13 + 8);
          *((_BYTE *)v12 + 36) = *((_BYTE *)v13 + 36);
          *((_DWORD *)v12 + 8) = v15;
          v16 = *v8;
          v17 = (uint64_t **)(a1 + 8);
          v18 = (uint64_t **)(a1 + 8);
          if (*v8)
            break;
LABEL_14:
          *v12 = 0;
          v12[1] = 0;
          v12[2] = (uint64_t)v17;
          *v18 = v12;
          v19 = **(_QWORD **)a1;
          if (v19)
            goto LABEL_15;
LABEL_16:
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v12);
          ++*(_QWORD *)(a1 + 16);
          if (v10)
          {
            v10 = (uint64_t *)v10[2];
            if (v10)
            {
              v22 = (uint64_t *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *v10 = 0;
                while (1)
                {
                  v23 = (uint64_t *)v10[1];
                  if (!v23)
                    break;
                  do
                  {
                    v10 = v23;
                    v23 = (uint64_t *)*v23;
                  }
                  while (v23);
                }
              }
              else
              {
                for (v10[1] = 0; v22; v22 = (uint64_t *)v10[1])
                {
                  do
                  {
                    v10 = v22;
                    v22 = (uint64_t *)*v22;
                  }
                  while (v22);
                }
              }
            }
          }
          else
          {
            v10 = 0;
          }
          v20 = (_QWORD *)v13[1];
          if (v20)
          {
            do
            {
              v4 = v20;
              v20 = (_QWORD *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              v4 = (_QWORD *)v13[2];
              v21 = *v4 == (_QWORD)v13;
              v13 = v4;
            }
            while (!v21);
          }
          if (v9)
          {
            v12 = v9;
            v13 = v4;
            if (v4 != a3)
              continue;
          }
          goto LABEL_42;
        }
        do
        {
          while (1)
          {
            v17 = (uint64_t **)v16;
            if (v14 >= *((unsigned __int8 *)v16 + 28))
              break;
            v16 = (uint64_t *)*v16;
            v18 = v17;
            if (!*v17)
              goto LABEL_14;
          }
          v16 = (uint64_t *)v16[1];
        }
        while (v16);
        v18 = v17 + 1;
        *v12 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v17;
        v17[1] = v12;
        v19 = **(_QWORD **)a1;
        if (!v19)
          goto LABEL_16;
LABEL_15:
        *(_QWORD *)a1 = v19;
        v12 = *v18;
        goto LABEL_16;
      }
LABEL_42:
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1, v9);
      if (v10)
      {
        for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
          v10 = i;
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1, v10);
      }
    }
  }
  if (v4 != a3)
  {
    v25 = (uint64_t ***)(a1 + 8);
    while (1)
    {
      v26 = (uint64_t *)operator new(0x28uLL);
      v27 = v26;
      v28 = *((_DWORD *)v4 + 9);
      *(uint64_t *)((char *)v26 + 28) = *(_QWORD *)((char *)v4 + 28);
      *((_DWORD *)v26 + 9) = v28;
      v29 = *v25;
      v30 = (uint64_t **)(a1 + 8);
      v31 = (uint64_t **)(a1 + 8);
      if (*v25)
        break;
LABEL_54:
      *v26 = 0;
      v26[1] = 0;
      v26[2] = (uint64_t)v30;
      *v31 = v26;
      v32 = **(_QWORD **)a1;
      if (v32)
        goto LABEL_55;
LABEL_56:
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v27);
      ++*(_QWORD *)(a1 + 16);
      v33 = (_QWORD *)v4[1];
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = (_QWORD *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (_QWORD *)v4[2];
          v21 = *v34 == (_QWORD)v4;
          v4 = v34;
        }
        while (!v21);
      }
      v4 = v34;
      if (v34 == a3)
        return;
    }
    do
    {
      while (1)
      {
        v30 = v29;
        if (*((unsigned __int8 *)v26 + 28) >= *((unsigned __int8 *)v29 + 28))
          break;
        v29 = (uint64_t **)*v29;
        v31 = v30;
        if (!*v30)
          goto LABEL_54;
      }
      v29 = (uint64_t **)v29[1];
    }
    while (v29);
    v31 = v30 + 1;
    *v26 = 0;
    v26[1] = 0;
    v26[2] = (uint64_t)v30;
    v30[1] = v26;
    v32 = **(_QWORD **)a1;
    if (!v32)
      goto LABEL_56;
LABEL_55:
    *(_QWORD *)a1 = v32;
    v27 = *v31;
    goto LABEL_56;
  }
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  void *v1;

  std::exception::~exception(this);
  operator delete(v1);
}

void sub_1BF3C867C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_1BF3C8860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if ((a21 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1BF3C8894(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BF3C87F4);
}

void sub_1BF3C88A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if ((a14 & 0x80000000) == 0)
    JUMPOUT(0x1BF3C8874);
  JUMPOUT(0x1BF3C886CLL);
}

void sub_1BF3C9030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,std::locale a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  void **v57;

  if (a44 < 0)
    operator delete(__p);
  std::vector<std::string>::~vector[abi:ne180100](&a57);
  std::vector<std::string>::~vector[abi:ne180100](v57);
  _Unwind_Resume(a1);
}

void sub_1BF3C92A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  _Unwind_Resume(exception_object);
}

void sub_1BF3C94EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_1BF3C9B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::list<std::string>::~list(va);
  _Unwind_Resume(a1);
}

void sub_1BF3C9B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15, uint64_t a16)
{
  void *v16;
  void *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;

  operator delete(v17);
  if (a16)
  {
    v19 = a14;
    v20 = (uint64_t)a15;
    v21 = *a15;
    *(_QWORD *)(v21 + 8) = *(_QWORD *)(a14 + 8);
    **(_QWORD **)(v19 + 8) = v21;
    a16 = 0;
    if ((uint64_t *)v20 != &a14)
    {
      do
      {
        v22 = *(uint64_t **)(v20 + 8);
        if (*(char *)(v20 + 39) < 0)
          operator delete(*(void **)(v20 + 16));
        operator delete((void *)v20);
        v20 = (uint64_t)v22;
      }
      while (v22 != &a14);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_1BF3CA0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      support::ui::NotificationInfo::~NotificationInfo(&a26);
      _Unwind_Resume(a1);
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  support::ui::NotificationInfo::~NotificationInfo(&a26);
  _Unwind_Resume(a1);
}

void sub_1BF3CA104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  support::ui::NotificationInfo::~NotificationInfo((void **)va);
  _Unwind_Resume(a1);
}

void sub_1BF3CA118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  support::ui::NotificationInfo::~NotificationInfo((void **)&a9);
  support::ui::NotificationInfo::~NotificationInfo(&a20);
  _Unwind_Resume(a1);
}

void sub_1BF3CA134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  support::ui::NotificationInfo::~NotificationInfo((void **)va1);
  _Unwind_Resume(a1);
}

void sub_1BF3CA150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  support::ui::NotificationInfo::~NotificationInfo((void **)va);
  _Unwind_Resume(a1);
}

void sub_1BF3CA304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
  {
    operator delete(__p);
    if ((a25 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a19 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a25 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a20);
  if ((a19 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a14);
  _Unwind_Resume(exception_object);
}

void sub_1BF3CAD14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,xpc_object_t object,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,xpc_object_t a26,xpc_object_t a27,char a28,uint64_t a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1BF3CAF4C(_Unwind_Exception *a1)
{
  void *v1;

  xpc_release(v1);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c16_ZTSN3xpc5arrayE(uint64_t a1, uint64_t a2)
{
  void *v3;
  xpc_object_t result;

  v3 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v3;
  if (v3)
    return xpc_retain(v3);
  result = xpc_null_create();
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c16_ZTSN3xpc5arrayE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(_QWORD *)(a1 + 32) = 0;
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE112c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;

  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
    v5 = (std::string *)(a1 + 64);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
    v5 = (std::string *)(a1 + 64);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(_OWORD *)(a2 + 64);
      v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 80);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
LABEL_6:
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), *(const std::string::value_type **)(a2 + 88), *(_QWORD *)(a2 + 96));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v7;
  }
  v8 = (std::string *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 112), *(_QWORD *)(a2 + 120));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
}

void sub_1BF3CB0DC(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v2;
  void **v3;
  void **v4;

  if (v2[111] < 0)
  {
    operator delete(*v4);
    if ((v2[87] & 0x80000000) == 0)
    {
LABEL_3:
      if ((v2[63] & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((v2[87] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  if ((v2[63] & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE112c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 87) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 63) & 0x80000000) == 0)
      return;
LABEL_9:
    operator delete(*(void **)(a1 + 40));
    return;
  }
LABEL_8:
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_9;
}

uint64_t TapToRadar::getMode(TapToRadar *this)
{
  return -[ABMTapToRadar getMode](+[ABMTapToRadar sharedInstance](ABMTapToRadar, "sharedInstance"), "getMode");
}

uint64_t TapToRadar::setMode(uint64_t a1)
{
  return -[ABMTapToRadar setMode:](+[ABMTapToRadar sharedInstance](ABMTapToRadar, "sharedInstance"), "setMode:", a1);
}

void TapToRadar::createRadarIfPossible(xpc_object_t *a1, uint64_t a2)
{
  xpc_object_t value;
  unsigned int v5;
  xpc_object_t v6;
  const char *v7;
  xpc_object_t v8;
  const char *v9;
  xpc_object_t v10;
  const char *v11;
  char v12;
  void *v13;
  std::string *v14;
  void *size;
  const void *v16;
  size_t v17;
  int v18;
  size_t v19;
  std::string::size_type v20;
  size_t v21;
  std::string *p_dst;
  void **v23;
  xpc_object_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  NSObject *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  std::string *v36;
  void *v37;
  config::hw *v38;
  ABMTapToRadar *v39;
  uint64_t v40;
  ABMTapToRadar *v41;
  uint64_t v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  __int128 v48;
  std::string __dst;
  std::string v50;
  void *__p[3];
  std::string v52;
  void *v53[3];
  unsigned int v54;
  uint8_t buf[8];
  uint64_t v56;
  void (*v57)(uint64_t);
  void *v58;
  __int128 *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  if (((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
    && -[ABMTapToRadar getMode](+[ABMTapToRadar sharedInstance](ABMTapToRadar, "sharedInstance"), "getMode"))
  {
    v54 = -1431655766;
    value = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x1E0CFB010]);
    *(_QWORD *)buf = value;
    if (value)
      xpc_retain(value);
    else
      *(_QWORD *)buf = xpc_null_create();
    v5 = xpc::dyn_cast_or_default((xpc *)buf, (const object *)7);
    xpc_release(*(xpc_object_t *)buf);
    v54 = v5;
    memset(v53, 170, sizeof(v53));
    v6 = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x1E0CFB370]);
    *(_QWORD *)buf = v6;
    if (v6)
      xpc_retain(v6);
    else
      *(_QWORD *)buf = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)buf, (const object *)"", v7);
    xpc_release(*(xpc_object_t *)buf);
    memset(&v52, 170, sizeof(v52));
    v8 = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x1E0CFB930]);
    *(_QWORD *)buf = v8;
    if (v8)
      xpc_retain(v8);
    else
      *(_QWORD *)buf = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)buf, (const object *)"", v9);
    xpc_release(*(xpc_object_t *)buf);
    memset(__p, 170, sizeof(__p));
    v10 = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x1E0CFB770]);
    *(_QWORD *)buf = v10;
    if (v10)
      xpc_retain(v10);
    else
      *(_QWORD *)buf = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)buf, (const object *)"", v11);
    xpc_release(*(xpc_object_t *)buf);
    memset(&v50, 170, sizeof(v50));
    v12 = HIBYTE(__p[2]);
    if (SHIBYTE(__p[2]) >= 0)
      v13 = (void *)HIBYTE(__p[2]);
    else
      v13 = __p[1];
    v14 = (std::string *)__p;
    if (!v13)
    {
      v14 = &v52;
      v12 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
    }
    if (v12 < 0)
    {
      if (v13)
        size = __p[1];
      else
        size = (void *)v52.__r_.__value_.__l.__size_;
      std::string::__init_copy_ctor_external(&v50, v14->__r_.__value_.__l.__data_, (std::string::size_type)size);
    }
    else
    {
      v50 = *v14;
    }
    v16 = (const void *)*MEMORY[0x1E0D01A20];
    v17 = strlen((const char *)*MEMORY[0x1E0D01A20]);
    v18 = SHIBYTE(v53[2]);
    if (SHIBYTE(v53[2]) >= 0)
      v19 = HIBYTE(v53[2]);
    else
      v19 = (size_t)v53[1];
    v20 = v19 + v17;
    memset(&__dst, 170, sizeof(__dst));
    if (v19 + v17 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v21 = v17;
    if (v20 > 0x16)
    {
      v25 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v25 = v20 | 7;
      v26 = v25 + 1;
      p_dst = (std::string *)operator new(v25 + 1);
      __dst.__r_.__value_.__l.__size_ = v20;
      __dst.__r_.__value_.__r.__words[2] = v26 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      if (!v21)
      {
LABEL_34:
        if (v19)
        {
          if (v18 >= 0)
            v23 = v53;
          else
            v23 = (void **)v53[0];
          memmove((char *)p_dst + v21, v23, v19);
        }
        p_dst->__r_.__value_.__s.__data_[v21 + v19] = 0;
        v24 = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x1E0CFB780]);
        *(_QWORD *)buf = v24;
        if (v24)
          xpc_retain(v24);
        else
          *(_QWORD *)buf = xpc_null_create();
        v27 = xpc::dyn_cast_or_default((xpc *)buf, 0);
        xpc_release(*(xpc_object_t *)buf);
        {
          __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
        }
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        v56 = 0x40000000;
        v57 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
        v58 = &__block_descriptor_tmp_13_2;
        v59 = &GetABMLogServer(void)::sLogServer;
        if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
        {
          v29 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
          v48 = GetABMLogServer(void)::sLogServer;
          if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
            goto LABEL_51;
        }
        else
        {
          dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, buf);
          v29 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
          v48 = GetABMLogServer(void)::sLogServer;
          if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
            goto LABEL_51;
        }
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldxr(p_shared_owners);
        while (__stxr(v31 + 1, p_shared_owners));
LABEL_51:
        v32 = *((_QWORD *)GetGlobalLogger((uint64_t *)&v48) + 4);
        if (!v29)
          goto LABEL_55;
        v33 = (unint64_t *)&v29->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
          if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
            goto LABEL_59;
        }
        else
        {
LABEL_55:
          if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
            goto LABEL_59;
        }
        v35 = -[ABMTapToRadar getMode](+[ABMTapToRadar sharedInstance](ABMTapToRadar, "sharedInstance"), "getMode");
        v36 = &v50;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v36 = (std::string *)v50.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v35;
        LOWORD(v56) = 1024;
        *(_DWORD *)((char *)&v56 + 2) = v54;
        HIWORD(v56) = 2080;
        v57 = (void (*)(uint64_t))v36;
        LOWORD(v58) = 1024;
        *(_DWORD *)((char *)&v58 + 2) = v27;
        _os_log_impl(&dword_1BF335000, v32, OS_LOG_TYPE_DEFAULT, "#I check TTR: mode[%d], radar type[%d], title[%s], MTBF=%d", buf, 0x1Eu);
LABEL_59:
        v37 = (void *)HIBYTE(v53[2]);
        if (SHIBYTE(v53[2]) < 0)
          v37 = v53[1];
        if (!v37)
          goto LABEL_90;
        v38 = (config::hw *)-[ABMTapToRadar checkNotificationCriteria:::](+[ABMTapToRadar sharedInstance](ABMTapToRadar, "sharedInstance"), "checkNotificationCriteria:::", &v54, &v50, v27);
        if (!(_DWORD)v38)
          goto LABEL_90;
        if ((config::hw::watch(v38) & 1) == 0)
        {
          v41 = +[ABMTapToRadar sharedInstance](ABMTapToRadar, "sharedInstance");
          v42 = v54;
          if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v47, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
          else
            v47 = v52;
          -[ABMTapToRadar showUserNotification:dumpReason:](v41, "showUserNotification:dumpReason:", v42, &v47);
          if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v47.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_91;
            goto LABEL_77;
          }
          goto LABEL_90;
        }
        v39 = +[ABMTapToRadar sharedInstance](ABMTapToRadar, "sharedInstance");
        v40 = v54;
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v46, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
          if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(&v45, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
LABEL_72:
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v44, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
            else
              v44 = __dst;
            if (*(char *)(a2 + 23) < 0)
              std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
            else
              v43 = *(std::string *)a2;
            -[ABMTapToRadar showNotification:::::](v39, "showNotification:::::", v40, &v46, &v45, &v44, &v43);
            if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v43.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_88:
                if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_89;
LABEL_98:
                operator delete(v45.__r_.__value_.__l.__data_);
                if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_99;
LABEL_90:
                if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_91;
                goto LABEL_77;
              }
            }
            else if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_88;
            }
            operator delete(v44.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_89:
              if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_90;
LABEL_99:
              operator delete(v46.__r_.__value_.__l.__data_);
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_91:
                if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_92:
                  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
                  {
LABEL_93:
                    if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_94:
                      if ((SHIBYTE(v53[2]) & 0x80000000) == 0)
                        return;
LABEL_81:
                      operator delete(v53[0]);
                      return;
                    }
LABEL_80:
                    operator delete(v52.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v53[2]) & 0x80000000) == 0)
                      return;
                    goto LABEL_81;
                  }
LABEL_79:
                  operator delete(__p[0]);
                  if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_94;
                  goto LABEL_80;
                }
LABEL_78:
                operator delete(v50.__r_.__value_.__l.__data_);
                if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
                  goto LABEL_93;
                goto LABEL_79;
              }
LABEL_77:
              operator delete(__dst.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_92;
              goto LABEL_78;
            }
            goto LABEL_98;
          }
        }
        else
        {
          v46 = v50;
        }
        v45 = v50;
        goto LABEL_72;
      }
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      p_dst = &__dst;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v19 + v17;
      if (!v17)
        goto LABEL_34;
    }
    memcpy(p_dst, v16, v21);
    goto LABEL_34;
  }
}

void sub_1BF3CB998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  uint64_t v63;

  if (a35 < 0)
    operator delete(__p);
  if (a50 < 0)
  {
    operator delete(a45);
    if ((a56 & 0x80000000) == 0)
      goto LABEL_5;
  }
  else if ((a56 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a63 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  operator delete(a51);
  if ((a63 & 0x80000000) == 0)
  {
LABEL_7:
    if (*(char *)(v63 - 177) < 0)
      operator delete(*(void **)(v63 - 200));
    if (*(char *)(v63 - 153) < 0)
      operator delete(*(void **)(v63 - 176));
    _Unwind_Resume(a1);
  }
LABEL_6:
  operator delete(a58);
  goto LABEL_7;
}

std::string *std::vector<std::string>::__emplace_back_slow_path<std::string const&>(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  std::string *v10;
  std::string *v11;
  __int128 v12;
  char *v13;
  void **v14;
  std::string *v16;
  std::string *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (std::string *)&v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 1;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    v11 = v10 + 1;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    v10[-1].__r_.__value_.__r.__words[2] = *((_QWORD *)v4 - 1);
    *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v12;
    --v10;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = (char *)v10;
  a1[1] = (char *)v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_1BF3CBD70(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t util::convert<int>(const std::string *a1, _DWORD *a2, int a3)
{
  uint64_t v6;
  const char *v7;
  std::string::size_type size;
  size_t __idx;

  if ((SHIBYTE(a1->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    LODWORD(v6) = strcasecmp((const char *)a1, "false");
    if (!(_DWORD)v6)
      goto LABEL_29;
    LODWORD(v6) = strcasecmp((const char *)a1, "off");
    if (!(_DWORD)v6)
      goto LABEL_29;
    LODWORD(v6) = strcasecmp((const char *)a1, "no");
    if (!(_DWORD)v6)
      goto LABEL_29;
    if (strcasecmp((const char *)a1, "true")
      && strcasecmp((const char *)a1, "on")
      && strcasecmp((const char *)a1, "yes")
      && strcasecmp((const char *)a1, "full")
      && strcasecmp((const char *)a1, "streaming"))
    {
      v7 = (const char *)a1;
      if (!strcasecmp((const char *)a1, "lite"))
        goto LABEL_30;
      goto LABEL_21;
    }
LABEL_28:
    LODWORD(v6) = 1;
    goto LABEL_29;
  }
  v7 = (const char *)a1->__r_.__value_.__r.__words[0];
  LODWORD(v6) = strcasecmp(a1->__r_.__value_.__l.__data_, "false");
  if (!(_DWORD)v6)
    goto LABEL_29;
  LODWORD(v6) = strcasecmp(v7, "off");
  if (!(_DWORD)v6)
    goto LABEL_29;
  LODWORD(v6) = strcasecmp(v7, "no");
  if (!(_DWORD)v6)
    goto LABEL_29;
  if (!strcasecmp(v7, "true")
    || !strcasecmp(v7, "on")
    || !strcasecmp(v7, "yes")
    || !strcasecmp(v7, "full")
    || !strcasecmp(v7, "streaming"))
  {
    goto LABEL_28;
  }
  if (!strcasecmp(v7, "lite"))
  {
LABEL_30:
    LODWORD(v6) = 2;
    goto LABEL_29;
  }
LABEL_21:
  if (!strcasecmp(v7, "background"))
    goto LABEL_30;
  __idx = 0xAAAAAAAAAAAAAAAALL;
  v6 = std::stol(a1, &__idx, a3);
  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  if (__idx != size || v6 < (uint64_t)0xFFFFFFFF80000000 || v6 > 0x7FFFFFFF)
    return 0;
LABEL_29:
  *a2 = v6;
  return 1;
}

uint64_t sub_1BF3CBFC4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  return 0;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(uint64_t a1, uint64_t a2, int a3)
{
  const std::locale *v6;
  uint64_t v7;
  char *v8;

  v6 = (const std::locale *)MEMORY[0x1C3B89E10]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x1E0DE4A90]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E0DE4C08]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (char *)a2;
  else
    v8 = *(char **)a2;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 8);
  if (&v8[v7] != std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(a1, v8, &v8[v7]))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_1BF3CC08C(_Unwind_Exception *a1)
{
  std::locale *v1;
  uint64_t v2;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_1BF3CC0A8(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unsigned int v12;

  v6 = operator new(8uLL);
  *v6 = &unk_1E79008E0;
  v7 = operator new(0x10uLL);
  v7[1] = v6;
  v8 = operator new(0x20uLL);
  *v8 = &unk_1E7900938;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  if (!v9)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
    v12 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v12 <= 0x3F)
    {
LABEL_6:
      if (!v12)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
      if (v12 != 16)
      {
        if (v12 != 32)
LABEL_19:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
        return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, a2, a3);
    }
  }
  else
  {
LABEL_5:
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
    v12 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v12 <= 0x3F)
      goto LABEL_6;
  }
  if (v12 == 64)
    return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
  if (v12 == 128)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v12 != 256)
    goto LABEL_19;
  return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
}

void sub_1BF3CC270(_Unwind_Exception *a1)
{
  void *v1;
  void (__cdecl ***v2)(std::__owns_one_state<char> *__hidden);

  operator delete(v1);
  operator delete(v2);
  (*(void (**)(void *))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1BF3CC2AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(v2 + 8))(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  char *v7;
  std::basic_regex<char> *v8;
  std::__owns_one_state<char> *v9;
  unsigned int marked_count;
  std::basic_regex<char> *v11;
  std::__node<char> *v12;
  std::__owns_one_state<char> *v13;
  std::__node<char> *first;
  std::__node<char> *v15;
  std::__node<char> *v16;
  std::__node<char> *v17;
  std::__node<char> *v18;
  std::__node<char> *v19;
  std::__node<char> *v20;
  std::__owns_one_state<char> *v21;
  std::basic_regex<char> *v22;
  char *v23;
  std::__owns_one_state<char> *v24;
  unsigned int v25;
  std::basic_regex<char> *v26;
  std::__node<char> *v27;
  std::__owns_one_state<char> *v28;
  std::__node<char> *v29;

  end = a1->__end_;
  v7 = a2;
  while (1)
  {
    v8 = (std::basic_regex<char> *)v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v7, a3);
    if (v8 == (std::basic_regex<char> *)v7)
      break;
LABEL_2:
    if (v7 == (char *)v8)
      goto LABEL_6;
  }
  v9 = a1->__end_;
  marked_count = a1->__marked_count_;
  v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, (std::basic_regex<char> *)a3);
  if (v8 != v11)
  {
    v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v11, (std::basic_regex<char> *)a3, v9, marked_count + 1, a1->__marked_count_ + 1);
    goto LABEL_2;
  }
LABEL_6:
  if (v8 != (std::basic_regex<char> *)a2)
  {
    if (v8 != (std::basic_regex<char> *)a3)
      goto LABEL_14;
    return a3;
  }
  v12 = (std::__node<char> *)operator new(0x10uLL);
  v13 = a1->__end_;
  first = v13->__first_;
  v12[1].__vftable = (std::__node<char>_vtbl *)first;
  v13->__first_ = v12;
  a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  if (v8 != (std::basic_regex<char> *)a3)
  {
LABEL_14:
    if (LOBYTE(v8->__traits_.__loc_.__locale_) != 124)
      return (char *)v8;
    v21 = a1->__end_;
    v22 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    v23 = (char *)&v8->__traits_.__loc_.__locale_ + 1;
    while (1)
    {
      v8 = (std::basic_regex<char> *)v23;
      v23 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v23, a3);
      if (v8 == (std::basic_regex<char> *)v23)
      {
        v24 = a1->__end_;
        v25 = a1->__marked_count_;
        v26 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, (std::basic_regex<char> *)a3);
        if (v8 == v26)
        {
LABEL_11:
          if (v8 == v22)
          {
            v27 = (std::__node<char> *)operator new(0x10uLL);
            v28 = a1->__end_;
            v29 = v28->__first_;
            v27[1].__vftable = (std::__node<char>_vtbl *)v29;
            v28->__first_ = v27;
            a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
          }
          v15 = (std::__node<char> *)operator new(0x18uLL);
          v16 = v21->__first_;
          v15[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
          v15[2].__vftable = (std::__node<char>_vtbl *)v16;
          v15->__vftable = (std::__node<char>_vtbl *)&unk_1E7900EF8;
          end->__first_ = v15;
          v21->__first_ = 0;
          v17 = (std::__node<char> *)operator new(0x10uLL);
          v18 = a1->__end_->__first_;
          v17[1].__vftable = (std::__node<char>_vtbl *)v18;
          v21->__first_ = v17;
          a1->__end_->__first_ = 0;
          v19 = (std::__node<char> *)operator new(0x10uLL);
          v20 = v21->__first_;
          v19->__vftable = (std::__node<char>_vtbl *)&unk_1E7900F40;
          v19[1].__vftable = (std::__node<char>_vtbl *)v20;
          a1->__end_->__first_ = v19;
          a1->__end_ = (std::__owns_one_state<char> *)v21->__first_;
          if (v8 == (std::basic_regex<char> *)a3)
            return a3;
          goto LABEL_14;
        }
        v23 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v26, (std::basic_regex<char> *)a3, v24, v25 + 1, a1->__marked_count_ + 1);
      }
      if (v23 == (char *)v8)
        goto LABEL_11;
    }
  }
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  std::basic_regex<char> *v3;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  std::__owns_one_state<char> *v11;
  int v12;
  char *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v3 = (std::basic_regex<char> *)a2;
  if (a2 == a3)
    return a2;
  if (*a2 == 94)
  {
    v6 = operator new(0x18uLL);
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *v6 = &unk_1E7900A30;
    v6[1] = v9;
    *((_BYTE *)v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v3 = (std::basic_regex<char> *)((char *)v3 + 1);
  }
  if (v3 != (std::basic_regex<char> *)a3)
  {
    while (v3 != (std::basic_regex<char> *)a3)
    {
      v10 = v3;
      v11 = *(std::__owns_one_state<char> **)(a1 + 56);
      v12 = *(_DWORD *)(a1 + 28);
      v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, (uint64_t)v10, a3);
      if (v10 != v13)
      {
        v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, v11, (v12 + 1), (*(_DWORD *)(a1 + 28) + 1));
        if (v10 != (_BYTE *)v3)
          continue;
      }
      if (v10 + 1 != a3 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v14 = operator new(0x18uLL);
      v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_QWORD *)(v16 + 8);
      *v14 = &unk_1E7900A78;
      v14[1] = v17;
      *((_BYTE *)v14 + 16) = v15;
      *(_QWORD *)(v16 + 8) = v14;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  uint64_t v9;
  std::basic_regex<char> *v10;
  std::basic_regex<char> *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v7 == a2)
    goto LABEL_12;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v7, a3);
  }
  while (v8 != v7);
  if (v8 == a2)
LABEL_12:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  if (v8 == a3)
    return a3;
  while (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
  {
    v9 = *(_QWORD *)(a1 + 56);
    v10 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1), a3);
    if ((std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1) == v11)
      goto LABEL_12;
    do
    {
      v8 = v11;
      v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v11, a3);
    }
    while (v8 != v11);
    if (v8 == v10)
      goto LABEL_12;
    v12 = operator new(0x18uLL);
    v13 = *(_QWORD *)(v9 + 8);
    v12[1] = *(_QWORD *)(v6 + 8);
    v12[2] = v13;
    *v12 = &unk_1E7900EF8;
    *(_QWORD *)(v6 + 8) = v12;
    *(_QWORD *)(v9 + 8) = 0;
    v14 = operator new(0x10uLL);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v14[1] = v15;
    *(_QWORD *)(v9 + 8) = v14;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v16 = operator new(0x10uLL);
    v17 = *(_QWORD *)(v9 + 8);
    *v16 = &unk_1E7900F40;
    v16[1] = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v9 + 8);
    if (v8 == a3)
      return a3;
  }
  return v8;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = operator new(0x10uLL);
    v10 = *(_QWORD *)(v6 + 8);
    v9[1] = v10;
    *(_QWORD *)(v6 + 8) = v9;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v11 = v8;
    else
      v11 = v8 + 1;
    if (v11 == a3)
      return a3;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
    if (v8 == a3)
      v11 = v8;
    else
      v11 = v8 + 1;
    if (v11 == a3)
      return a3;
  }
  v12 = *(_QWORD *)(a1 + 56);
  do
  {
    v21 = (char *)memchr(v11, 10, a3 - v11);
    if (v21)
      v22 = v21;
    else
      v22 = a3;
    if (v22 == v11)
    {
      v13 = operator new(0x10uLL);
      v14 = *(_QWORD *)(v12 + 8);
      v13[1] = v14;
      *(_QWORD *)(v12 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v22);
    }
    v15 = operator new(0x18uLL);
    v16 = *(_QWORD *)(v12 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &unk_1E7900EF8;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v12 + 8) = 0;
    v17 = operator new(0x10uLL);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v17[1] = v18;
    *(_QWORD *)(v12 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = operator new(0x10uLL);
    v20 = *(_QWORD *)(v12 + 8);
    *v19 = &unk_1E7900F40;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    v12 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(a1 + 56) = v12;
    if (v22 == a3)
      v11 = v22;
    else
      v11 = v22 + 1;
  }
  while (v11 != a3);
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  uint64_t v6;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  _QWORD *v9;
  uint64_t v10;
  std::basic_regex<char> *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::basic_regex<char> *v21;
  std::basic_regex<char> *v22;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = operator new(0x10uLL);
    v10 = *(_QWORD *)(v6 + 8);
    v9[1] = v10;
    *(_QWORD *)(v6 + 8) = v9;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v11 = v8;
    else
      v11 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v11 == a3)
      return a3;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
    if (v8 == a3)
      v11 = v8;
    else
      v11 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v11 == a3)
      return a3;
  }
  v12 = *(_QWORD *)(a1 + 56);
  do
  {
    v21 = (std::basic_regex<char> *)memchr(v11, 10, (char *)a3 - (char *)v11);
    if (v21)
      v22 = v21;
    else
      v22 = a3;
    if (v22 == v11)
    {
      v13 = operator new(0x10uLL);
      v14 = *(_QWORD *)(v12 + 8);
      v13[1] = v14;
      *(_QWORD *)(v12 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v22);
    }
    v15 = operator new(0x18uLL);
    v16 = *(_QWORD *)(v12 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &unk_1E7900EF8;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v12 + 8) = 0;
    v17 = operator new(0x10uLL);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v17[1] = v18;
    *(_QWORD *)(v12 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = operator new(0x10uLL);
    v20 = *(_QWORD *)(v12 + 8);
    *v19 = &unk_1E7900F40;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    v12 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(a1 + 56) = v12;
    if (v22 == a3)
      v11 = v22;
    else
      v11 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
  }
  while (v11 != a3);
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  int v6;
  int v7;
  __int128 v8;
  char *v9;
  unsigned int v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unsigned int marked_count;
  std::basic_regex<char> v23;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        v17 = a2[1];
        if (v17 == 66)
        {
          v18 = (char *)operator new(0x30uLL);
          v20 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v18 = &unk_1E7900AC0;
          *((_QWORD *)v18 + 1) = v20;
          std::locale::locale((std::locale *)v18 + 2, (const std::locale *)a1);
          *(_OWORD *)(v18 + 24) = *(_OWORD *)(a1 + 8);
          v18[40] = 1;
        }
        else
        {
          if (v17 != 98)
            return v3;
          v18 = (char *)operator new(0x30uLL);
          v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v18 = &unk_1E7900AC0;
          *((_QWORD *)v18 + 1) = v19;
          std::locale::locale((std::locale *)v18 + 2, (const std::locale *)a1);
          *(_OWORD *)(v18 + 24) = *(_OWORD *)(a1 + 8);
          v18[40] = 0;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v18;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        return v3 + 2;
      }
      return v3;
    }
    if (v6 != 94)
      return v3;
    v11 = operator new(0x18uLL);
    v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v13 = *(_QWORD *)(a1 + 56);
    v14 = *(_QWORD *)(v13 + 8);
LABEL_17:
    *v11 = v15 + 16;
    v11[1] = v14;
    *((_BYTE *)v11 + 16) = v12;
    *(_QWORD *)(v13 + 8) = v11;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return ++v3;
  }
  if (v6 == 36)
  {
    v11 = operator new(0x18uLL);
    v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v13 = *(_QWORD *)(a1 + 56);
    v14 = *(_QWORD *)(v13 + 8);
    goto LABEL_17;
  }
  if (v6 != 40 || a2 + 1 == a3 || a2[1] != 63 || a2 + 2 == a3)
    return v3;
  v7 = a2[2];
  if (v7 == 33)
  {
    *(_QWORD *)&v21 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v23.__loop_count_ = v21;
    *(_OWORD *)&v23.__start_.__cntrl_ = v21;
    *(_OWORD *)&v23.__traits_.__loc_.__locale_ = v21;
    *(_OWORD *)&v23.__traits_.__col_ = v21;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v23);
    v23.__flags_ = *(_DWORD *)(a1 + 24);
    v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v23, v3 + 3, a3);
    marked_count = v23.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v23, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += marked_count;
    if (v9 == a3 || *v9 != 41)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    goto LABEL_27;
  }
  if (v7 != 61)
    return v3;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v23.__loop_count_ = v8;
  *(_OWORD *)&v23.__start_.__cntrl_ = v8;
  *(_OWORD *)&v23.__traits_.__loc_.__locale_ = v8;
  *(_OWORD *)&v23.__traits_.__col_ = v8;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v23);
  v23.__flags_ = *(_DWORD *)(a1 + 24);
  v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v23, v3 + 3, a3);
  v10 = v23.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v23, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v10;
  if (v9 == a3 || *v9 != 41)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_27:
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v23.__traits_.__loc_);
  return v9 + 1;
}

void sub_1BF3CCE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_1BF3CCE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_1BF3CCE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_1BF3CCEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  std::basic_regex<char> *v6;
  std::basic_regex<char> *result;
  std::__node<char> *v8;
  std::__owns_one_state<char> *v9;
  std::__node<char> *v10;
  std::__node<char> *v11;
  unsigned int marked_count;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  std::basic_regex<char> *v15;
  std::basic_regex<char> *v16;
  std::__node<char> *v17;
  std::__owns_one_state<char> *v18;
  std::__node<char> *v19;

  v3 = a2;
  if (a2 == a3)
    return v3;
  switch(LOBYTE(a2->__traits_.__loc_.__locale_))
  {
    case '(':
      if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1) == a3)
        goto LABEL_26;
      if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 2) != a3
        && BYTE1(a2->__traits_.__loc_.__locale_) == 63
        && BYTE2(a2->__traits_.__loc_.__locale_) == 58)
      {
        ++this->__open_count_;
        v6 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, (char *)&a2->__traits_.__loc_.__locale_ + 3, a3);
        if (v6 != a3 && LOBYTE(v6->__traits_.__loc_.__locale_) == 41)
        {
          --this->__open_count_;
          return (std::basic_regex<char> *)((char *)&v6->__traits_.__loc_.__locale_ + 1);
        }
LABEL_26:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      if ((this->__flags_ & 2) != 0)
      {
        marked_count = this->__marked_count_;
      }
      else
      {
        v11 = (std::__node<char> *)operator new(0x18uLL);
        marked_count = this->__marked_count_ + 1;
        this->__marked_count_ = marked_count;
        end = this->__end_;
        first = end->__first_;
        v11->__vftable = (std::__node<char>_vtbl *)&unk_1E7900D90;
        v11[1].__vftable = (std::__node<char>_vtbl *)first;
        LODWORD(v11[2].__vftable) = marked_count;
        end->__first_ = v11;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      ++this->__open_count_;
      v15 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, (char *)&v3->__traits_.__loc_.__locale_ + 1, a3);
      if (v15 == a3)
        goto LABEL_26;
      v16 = v15;
      if (LOBYTE(v15->__traits_.__loc_.__locale_) != 41)
        goto LABEL_26;
      if ((this->__flags_ & 2) == 0)
      {
        v17 = (std::__node<char> *)operator new(0x18uLL);
        v18 = this->__end_;
        v19 = v18->__first_;
        v17->__vftable = (std::__node<char>_vtbl *)&unk_1E7900DD8;
        v17[1].__vftable = (std::__node<char>_vtbl *)v19;
        LODWORD(v17[2].__vftable) = marked_count;
        v18->__first_ = v17;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      --this->__open_count_;
      result = (std::basic_regex<char> *)((char *)&v16->__traits_.__loc_.__locale_ + 1);
      break;
    case ')':
    case ',':
    case '-':
    case '/':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '@':
    case 'A':
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
      return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
    case '*':
    case '+':
    case '?':
      goto LABEL_25;
    case '.':
      v8 = (std::__node<char> *)operator new(0x10uLL);
      v9 = this->__end_;
      v10 = v9->__first_;
      v8->__vftable = (std::__node<char>_vtbl *)&unk_1E7900B50;
      v8[1].__vftable = (std::__node<char>_vtbl *)v10;
      v9->__first_ = v8;
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      return (std::basic_regex<char> *)((char *)v3 + 1);
    case '[':
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, (char *)a2, (char *)a3);
    case '\\':
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
    default:
      if (LOBYTE(a2->__traits_.__loc_.__locale_) == 123)
LABEL_25:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
  }
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  int v6;
  int locale_low;
  std::basic_regex<char> *v8;
  std::basic_regex<char> *v9;
  char *v10;
  size_t v11;
  char *v13;
  int v14;
  int v15;
  char *v16;
  int v17;
  int v18;
  std::basic_regex<char> *v19;
  unsigned __int8 *v20;
  BOOL v21;
  std::basic_regex<char> *v22;
  BOOL v23;
  char *v24;
  size_t v25;
  std::basic_regex<char> *v26;
  int v27;
  int v28;
  std::basic_regex<char> *v29;
  int v30;
  std::basic_regex<char> *v31;
  _BYTE *v32;

  if (this == a3)
    return this;
  v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 62)
  {
    if (locale_low == 42)
    {
      v9 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (v6)
        v21 = 1;
      else
        v21 = v9 == a3;
      if (!v21 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        v10 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        v11 = 0;
        goto LABEL_36;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v25 = 0;
      goto LABEL_45;
    }
    v8 = this;
    if (locale_low == 43)
    {
      v9 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (!v6 && v9 != a3 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        v10 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        v11 = 1;
LABEL_36:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v11, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 0);
        return (std::basic_regex<char> *)v10;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v25 = 1;
      goto LABEL_45;
    }
    return v8;
  }
  if (locale_low == 63)
  {
    v22 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    if (v6)
      v23 = 1;
    else
      v23 = v22 == a3;
    if (v23 || LOBYTE(v22->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 1);
      return v22;
    }
    else
    {
      v24 = (char *)&this->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v24;
    }
  }
  else
  {
    v8 = this;
    if (locale_low != 123)
      return v8;
    v13 = (char *)&this->__traits_.__loc_.__locale_ + 1;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_72;
    v14 = *v13;
    if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
      goto LABEL_72;
    v15 = v14 - 48;
    v16 = (char *)&this->__traits_.__loc_.__locale_ + 2;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_21:
      v16 = (char *)a3;
    }
    else
    {
      while (1)
      {
        v17 = *v16;
        if ((v17 & 0xF8) != 0x30 && (v17 & 0xFE) != 0x38)
          break;
        if (v15 >= 214748364)
          goto LABEL_72;
        v15 = v17 + 10 * v15 - 48;
        if (++v16 == (char *)a3)
          goto LABEL_21;
      }
    }
    if (v16 == v13)
      goto LABEL_72;
    if (v16 == (char *)a3)
      goto LABEL_73;
    v18 = *v16;
    if (v18 != 44)
    {
      if (v18 == 125)
      {
        v19 = (std::basic_regex<char> *)(v16 + 1);
        if (v6 || v19 == a3 || LOBYTE(v19->__traits_.__loc_.__locale_) != 63)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v15, a4, __mexp_begin, __mexp_end, 1);
          return v19;
        }
        else
        {
          v20 = (unsigned __int8 *)(v16 + 2);
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v15, a4, __mexp_begin, __mexp_end, 0);
          return (std::basic_regex<char> *)v20;
        }
      }
LABEL_72:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    }
    v26 = (std::basic_regex<char> *)(v16 + 1);
    if (v16 + 1 == (char *)a3)
      goto LABEL_72;
    v27 = LOBYTE(v26->__traits_.__loc_.__locale_);
    if (v27 == 125)
    {
      v9 = (std::basic_regex<char> *)(v16 + 2);
      if (!v6 && v9 != a3 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        v11 = v15;
        v10 = v16 + 3;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        goto LABEL_36;
      }
      v25 = v15;
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
LABEL_45:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v25, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
      return v9;
    }
    if ((v27 & 0xF8) != 0x30 && (v27 & 0xFE) != 0x38)
      goto LABEL_73;
    v28 = v27 - 48;
    v29 = (std::basic_regex<char> *)(v16 + 2);
    if (v29 == a3)
    {
LABEL_61:
      v29 = a3;
    }
    else
    {
      while (1)
      {
        v30 = LOBYTE(v29->__traits_.__loc_.__locale_);
        if ((v30 & 0xF8) != 0x30 && (v30 & 0xFE) != 0x38)
          break;
        if (v28 >= 214748364)
          goto LABEL_72;
        v28 = v30 + 10 * v28 - 48;
        v29 = (std::basic_regex<char> *)((char *)v29 + 1);
        if (v29 == a3)
          goto LABEL_61;
      }
    }
    if (v29 == v26 || v29 == a3 || LOBYTE(v29->__traits_.__loc_.__locale_) != 125)
LABEL_73:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    if (v28 < v15)
      goto LABEL_72;
    v31 = (std::basic_regex<char> *)((char *)&v29->__traits_.__loc_.__locale_ + 1);
    if (v6 || v31 == a3 || LOBYTE(v31->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v28, a4, __mexp_begin, __mexp_end, 1);
      return v31;
    }
    else
    {
      v32 = (char *)&v29->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v28, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v32;
    }
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  int v8;
  unsigned int v9;
  int v11;
  unsigned __int8 *v12;

  if (a2 == a3)
    return a2;
  v4 = a2;
  if (*a2 == 92)
  {
    v6 = a2 + 1;
    if (a2 + 1 == a3)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    v8 = *v6;
    v9 = v8 - 48;
    if (v8 == 48)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
      return a2 + 2;
    }
    if ((v8 - 49) <= 8)
    {
      v4 = a2 + 2;
      if (a2 + 2 == a3)
      {
        v4 = a3;
      }
      else
      {
        while (1)
        {
          v11 = *v4;
          if ((v11 - 48) > 9)
            break;
          if (v9 >= 0x19999999)
            goto LABEL_24;
          ++v4;
          v9 = v11 + 10 * v9 - 48;
          if (v4 == a3)
          {
            v4 = a3;
            break;
          }
        }
        if (!v9)
LABEL_24:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
      }
      if (v9 > this->__marked_count_)
        goto LABEL_24;
      std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v9);
      if (v4 != v6)
        return v4;
    }
    v4 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>((uint64_t)this, a2 + 1, a3);
    if (v6 == v4)
    {
      v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(this, a2 + 1, a3, 0);
      if (v6 == v12)
        return a2;
      else
        return v12;
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  int v5;
  char v6;
  char *v7;
  void *v8;
  char *v9;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_20;
    v5 = a2[1];
    v6 = v5 == 94;
    v7 = v5 == 94 ? a2 + 2 : a2 + 1;
    v8 = operator new(0xB0uLL);
    std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v8, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
    *(_QWORD *)(a1 + 56) = v8;
    if (v7 == a3)
      goto LABEL_20;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 93);
      ++v7;
    }
    if (v7 == a3)
      goto LABEL_20;
    do
    {
      v9 = v7;
      v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(a1, v7, a3, (uint64_t)v8);
    }
    while (v9 != v7);
    if (v9 == a3)
      goto LABEL_20;
    if (*v9 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 45);
      ++v9;
    }
    if (v9 == a3 || *v9 != 93)
LABEL_20:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v9 + 1;
  }
  return a2;
}

void sub_1BF3CD7C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *result;

  if (this == a3)
    return this;
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '{':
    case '|':
    case '}':
      return this;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
      result = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      break;
  }
  return result;
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  _DWORD *v5;
  _DWORD *v6;
  int v7;

  v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_7;
      case 'S':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_11;
      case 'W':
        v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_9;
      case 'd':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_7:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = v5[40] | 0x400;
        goto LABEL_12;
      case 's':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_11:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = v5[40] | 0x4000;
LABEL_12:
        v5[40] = v7;
        goto LABEL_13;
      case 'w':
        v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_9:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v6;
        *(_QWORD *)(a1 + 56) = v6;
        v6[40] |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, 95);
LABEL_13:
        ++v3;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_1BF3CDA14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BF3CDA28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BF3CDA3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BF3CDA50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BF3CDA64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BF3CDA78(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  std::basic_regex<char>::value_type v6;
  unsigned __int8 *result;
  unsigned int v8;
  std::basic_regex<char>::value_type v10;
  int v11;
  int v12;
  unsigned __int8 v13;
  char v14;
  unsigned __int8 v15;
  char v16;
  std::basic_regex<char>::value_type v17;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  v6 = v5;
  switch((char)v5)
  {
    case '0':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 0);
        return v4 + 1;
      }
    case 'c':
      if (v4 + 1 == a3 || (char)v4[1] < 65)
        goto LABEL_85;
      v8 = v4[1];
      if (v8 >= 0x5B && (v8 - 97) > 0x19u)
        goto LABEL_85;
      v10 = v8 & 0x1F;
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v10;
        *((_BYTE *)a4 + 1) = 0;
        return v4 + 2;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v10);
        return v4 + 2;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return v4 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return v4 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return v4 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return v4 + 1;
      }
    case 'u':
      if (v4 + 1 != a3)
      {
        v11 = v4[1];
        if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6)
        {
          v4 += 2;
          if (v4 != a3)
          {
            v12 = *v4;
            if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38 || (v12 | 0x20u) - 97 < 6)
              goto LABEL_42;
          }
        }
      }
      goto LABEL_85;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return v4 + 1;
      }
      else
      {
        v6 = 11;
LABEL_68:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return v4 + 1;
      }
    case 'x':
LABEL_42:
      if (v4 + 1 == a3)
        goto LABEL_85;
      v13 = v4[1];
      v14 = -48;
      if ((v13 & 0xF8) == 0x30 || (v13 & 0xFE) == 0x38)
        goto LABEL_47;
      v13 |= 0x20u;
      if ((v13 - 97) >= 6u)
        goto LABEL_85;
      v14 = -87;
LABEL_47:
      if (v4 + 2 == a3)
        goto LABEL_85;
      v15 = v4[2];
      v16 = -48;
      if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38)
      {
        v15 |= 0x20u;
        if ((v15 - 97) >= 6u)
LABEL_85:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        v16 = -87;
      }
      v17 = v15 + 16 * (v13 + v14) + v16;
      if (!a4)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v17);
        v4 += 3;
        return v4;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v17;
      *((_BYTE *)a4 + 1) = 0;
      result = v4 + 3;
      break;
    default:
      if ((char)v5 == 95 || ((char)v5 & 0x80000000) == 0 && (a1->__traits_.__ct_->__tab_[v5] & 0x500) != 0)
        goto LABEL_85;
      if (!a4)
        goto LABEL_68;
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v5;
      *((_BYTE *)a4 + 1) = 0;
      return v4 + 1;
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v4;
  int64_t v5;
  int v6;
  char *v7;
  char *v8;
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  char *v19;
  int v20;
  _BYTE *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  int v24;
  char *v25;
  uint64_t v26;
  int v27;
  int v28;
  std::basic_regex<char>::value_type *v29;
  char *v30;
  _BYTE *v31;
  int v32;
  void **v33;
  _BYTE *v34;
  char *v35;
  void *v37[2];
  uint64_t v38;
  void *v39[2];
  uint64_t v40;
  void *__p[2];
  uint64_t v42;
  __int128 v43;
  int64_t v44;

  v4 = a2;
  v5 = a2 - a3;
  if (a2 == a3)
    return a2;
  v6 = *a2;
  v7 = a2;
  if (v6 == 93)
    return v7;
  v8 = (char *)a4;
  v11 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v42 = 0;
  if (a2 + 1 == a3 || v6 != 91)
  {
LABEL_36:
    v27 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_39;
  }
  v12 = a2[1];
  if (v12 != 46)
  {
    if (v12 == 58)
    {
      v14 = (uint64_t)(a2 + 2);
      if (a3 - (v4 + 2) < 2)
        goto LABEL_91;
      v15 = 0;
      v16 = v5 + 4;
      v17 = (unsigned __int8 *)v4;
      v18 = v16;
      if (v4[2] == 58)
        goto LABEL_15;
      do
      {
        do
        {
          if (!v18)
            goto LABEL_91;
          v17 = (unsigned __int8 *)&v4[++v15];
          v18 = v16 + v15;
        }
        while (v4[v15 + 2] != 58);
LABEL_15:
        ;
      }
      while (v17[3] != 93);
      v19 = &v4[v15 + 2];
      if (v19 == a3)
LABEL_91:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      v20 = std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(a1, v14, v19, *(_DWORD *)(a1 + 24) & 1);
      if (!v20)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
      v13 = 0;
      *((_DWORD *)v8 + 40) |= v20;
      v8 = &v4[v15 + 4];
      v7 = v4;
      if (SHIBYTE(v42) < 0)
        goto LABEL_70;
      goto LABEL_71;
    }
    if (v12 == 61)
    {
      v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, a4);
      v13 = 0;
      v7 = v4;
      if ((SHIBYTE(v42) & 0x80000000) == 0)
        goto LABEL_71;
      goto LABEL_70;
    }
    v11 = 0;
    goto LABEL_36;
  }
  v21 = a2 + 2;
  if (a3 - (v4 + 2) < 2)
    goto LABEL_92;
  v22 = (unsigned __int8 *)(v4 + 2);
  v23 = (unsigned __int8 *)(v4 + 3);
  if (*v21 == 46)
    goto LABEL_24;
  do
  {
    do
    {
      if (a3 - 4 == v4)
        goto LABEL_92;
      ++v4;
      v22 = v23;
      v24 = *v23++;
    }
    while (v24 != 46);
LABEL_24:
    ;
  }
  while (*v23 != 93);
  if (v22 == (unsigned __int8 *)a3)
LABEL_92:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)v21, v4 + 2, (uint64_t)&v43);
  if (SHIBYTE(v42) < 0)
    operator delete(__p[0]);
  v42 = v44;
  *(_OWORD *)__p = v43;
  v25 = (char *)HIBYTE(v44);
  v11 = SHIBYTE(v44);
  v26 = *((_QWORD *)&v43 + 1);
  if (v44 < 0)
    v25 = (char *)__p[1];
  if ((unint64_t)(v25 - 1) >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  v4 = (char *)(v22 + 2);
  v27 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v44 >= 0)
    v26 = HIBYTE(v44);
  if (v26)
  {
    if (v4 == a3)
      goto LABEL_52;
    goto LABEL_51;
  }
LABEL_39:
  if ((v27 | 0x40) != 0x40)
  {
    LOBYTE(v28) = *v4;
LABEL_44:
    if (v11 < 0)
    {
      v31 = __p[0];
      __p[1] = (void *)1;
      *(_BYTE *)__p[0] = v28;
      v31[1] = 0;
      if (++v4 == a3)
        goto LABEL_52;
    }
    else
    {
      HIBYTE(v42) = 1;
      LOWORD(__p[0]) = v28;
      if (++v4 == a3)
        goto LABEL_52;
    }
    goto LABEL_51;
  }
  v28 = *v4;
  if (v28 != 92)
    goto LABEL_44;
  v29 = v4 + 1;
  if (v27)
    v30 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v29, a3, (uint64_t *)__p);
  else
    v30 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v29, (unsigned __int8 *)a3, (uint64_t)__p, (uint64_t)v8);
  v4 = v30;
  if (v30 == a3)
  {
LABEL_52:
    if (SHIBYTE(v42) < 0)
    {
      if (!__p[1])
        goto LABEL_69;
      if (__p[1] != (void *)1)
      {
        v33 = (void **)__p[0];
LABEL_68:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v8, *(char *)v33, *((char *)v33 + 1));
LABEL_69:
        v13 = 1;
        v7 = v4;
        if ((SHIBYTE(v42) & 0x80000000) == 0)
          goto LABEL_71;
        goto LABEL_70;
      }
      v33 = (void **)__p[0];
    }
    else
    {
      if (!HIBYTE(v42))
        goto LABEL_69;
      v33 = __p;
      if (HIBYTE(v42) != 1)
        goto LABEL_68;
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, *(char *)v33);
    goto LABEL_69;
  }
LABEL_51:
  v32 = *v4;
  if (v32 == 93)
    goto LABEL_52;
  v34 = v4 + 1;
  if (v4 + 1 == a3 || v32 != 45 || *v34 == 93)
    goto LABEL_52;
  v43 = 0uLL;
  v44 = 0;
  v7 = v4 + 2;
  if (v4 + 2 == a3 || *v34 != 91 || *v7 != 46)
  {
    if ((v27 | 0x40) == 0x40)
    {
      LODWORD(v34) = *v34;
      if ((_DWORD)v34 == 92)
      {
        if (v27)
          v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4 + 2, a3, (uint64_t *)&v43);
        else
          v35 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v4 + 2, (unsigned __int8 *)a3, (uint64_t)&v43, (uint64_t)v8);
        goto LABEL_81;
      }
    }
    else
    {
      LOBYTE(v34) = *v34;
    }
    HIBYTE(v44) = 1;
    LOWORD(v43) = v34;
    goto LABEL_82;
  }
  v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v4 + 3, a3, (uint64_t)&v43);
LABEL_81:
  v7 = v35;
LABEL_82:
  *(_OWORD *)v39 = *(_OWORD *)__p;
  v40 = v42;
  __p[1] = 0;
  v42 = 0;
  __p[0] = 0;
  *(_OWORD *)v37 = v43;
  v38 = v44;
  v43 = 0uLL;
  v44 = 0;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]((uint64_t)v8, (char *)v39, (uint64_t)v37);
  if (SHIBYTE(v38) < 0)
  {
    operator delete(v37[0]);
    if ((SHIBYTE(v40) & 0x80000000) == 0)
    {
LABEL_84:
      if ((SHIBYTE(v44) & 0x80000000) == 0)
        goto LABEL_85;
LABEL_89:
      operator delete((void *)v43);
      v13 = 1;
      if (SHIBYTE(v42) < 0)
        goto LABEL_70;
      goto LABEL_71;
    }
  }
  else if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
    goto LABEL_84;
  }
  operator delete(v39[0]);
  if (SHIBYTE(v44) < 0)
    goto LABEL_89;
LABEL_85:
  v13 = 1;
  if (SHIBYTE(v42) < 0)
LABEL_70:
    operator delete(__p[0]);
LABEL_71:
  if ((v13 & 1) != 0)
    return v7;
  return v8;
}

void sub_1BF3CE47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 49) < 0)
  {
    operator delete(*(void **)(v28 - 72));
    if (a28 < 0)
    {
LABEL_5:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  int v10;
  char *v11;
  void **v12;
  unint64_t v13;
  __int128 v14;
  void *v15;
  void **v16;
  void **v17;
  void *__p[3];
  void *v20[3];

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_39;
  v6 = a3 - 2;
  v7 = a2;
  v8 = a2;
  v9 = a2 + 1;
  if (*a2 != 61)
    goto LABEL_5;
LABEL_4:
  if (*v9 != 93)
  {
LABEL_5:
    while (a2 != v6)
    {
      ++v7;
      --v6;
      v8 = v9;
      v10 = *v9++;
      if (v10 == 61)
        goto LABEL_4;
    }
LABEL_39:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (v8 == a3)
    goto LABEL_39;
  memset(v20, 170, sizeof(v20));
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)a2, v7, (uint64_t)v20);
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0)
  {
    v11 = (char *)HIBYTE(v20[2]);
    if (HIBYTE(v20[2]))
    {
      memset(__p, 170, sizeof(__p));
      v12 = v20;
      goto LABEL_14;
    }
LABEL_40:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  v11 = (char *)v20[1];
  if (!v20[1])
    goto LABEL_40;
  memset(__p, 170, sizeof(__p));
  v12 = (void **)v20[0];
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)v12, &v11[(_QWORD)v12], (_BYTE **)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1])
    {
LABEL_16:
      v13 = *(_QWORD *)(a4 + 144);
      if (v13 >= *(_QWORD *)(a4 + 152))
      {
        *(_QWORD *)(a4 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a4 + 136), (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0)
          goto LABEL_37;
      }
      else
      {
        if ((HIBYTE(__p[2]) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 144), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v14 = *(_OWORD *)__p;
          *(void **)(v13 + 16) = __p[2];
          *(_OWORD *)v13 = v14;
        }
        *(_QWORD *)(a4 + 144) = v13 + 24;
        *(_QWORD *)(a4 + 144) = v13 + 24;
        if (SHIBYTE(__p[2]) < 0)
          goto LABEL_37;
      }
      goto LABEL_33;
    }
  }
  else if (HIBYTE(__p[2]))
  {
    goto LABEL_16;
  }
  v15 = (void *)HIBYTE(v20[2]);
  if (SHIBYTE(v20[2]) < 0)
    v15 = v20[1];
  if (v15 == (void *)2)
  {
    v17 = v20;
    if (SHIBYTE(v20[2]) < 0)
      v17 = (void **)v20[0];
    std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](a4, *(char *)v17, *((char *)v17 + 1));
  }
  else
  {
    if (v15 != (void *)1)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
    v16 = v20;
    if (SHIBYTE(v20[2]) < 0)
      v16 = (void **)v20[0];
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a4, *(char *)v16);
  }
  if (SHIBYTE(__p[2]) < 0)
  {
LABEL_37:
    operator delete(__p[0]);
    if (SHIBYTE(v20[2]) < 0)
      goto LABEL_38;
    return v7 + 2;
  }
LABEL_33:
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0)
    return v7 + 2;
LABEL_38:
  operator delete(v20[0]);
  return v7 + 2;
}

void sub_1BF3CE780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v13;
  unint64_t v14;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  v5 = a3 - 2;
  v6 = a2;
  v7 = a2;
  v8 = a2 + 1;
  if (*a2 != 46)
    goto LABEL_5;
LABEL_4:
  if (*v8 != 93)
  {
LABEL_5:
    while (a2 != v5)
    {
      ++v6;
      --v5;
      v7 = v8;
      v9 = *v8++;
      if (v9 == 46)
        goto LABEL_4;
    }
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (v7 == a3)
    goto LABEL_15;
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)a2, v6, (uint64_t)&v13);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v13;
  v10 = v14;
  *(_QWORD *)(a4 + 16) = v14;
  v11 = HIBYTE(v10);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a4 + 8);
  if (v11 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return v6 + 2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *result;

  if (a2 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_8;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      result = a2 + 1;
      break;
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(_QWORD *)(a4 + 8) = 1;
        a4 = *(_QWORD *)a4;
      }
      else
      {
        *(_BYTE *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_8:
        result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, a2, a3, (uint64_t *)a4);
      }
      else
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(_QWORD *)(a4 + 8) = 1;
          a4 = *(_QWORD *)a4;
        }
        else
        {
          *(_BYTE *)(a4 + 23) = 1;
        }
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 1) = 0;
        result = a2 + 1;
      }
      break;
  }
  return result;
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, uint64_t *a4)
{
  std::basic_regex<char>::value_type v5;
  std::basic_regex<char>::value_type v7;
  std::basic_regex<char>::value_type *v8;
  std::basic_regex<char>::value_type v9;
  int v10;
  std::basic_regex<char>::value_type v11;

  if (a2 == a3)
LABEL_70:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  switch(*a2)
  {
    case '"':
    case '/':
    case '\\':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v5;
        *((_BYTE *)a4 + 1) = 0;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
        return a2 + 1;
      }
    case 'a':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 7;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
        return a2 + 1;
      }
    case 'b':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
        return a2 + 1;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return a2 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return a2 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return a2 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return a2 + 1;
      }
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xF8) != 0x30)
        goto LABEL_70;
      v7 = *a2 - 48;
      v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        v8 = a3;
LABEL_42:
        if (a4)
          goto LABEL_43;
LABEL_69:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return v8;
      }
      if ((*v8 & 0xF8) != 0x30)
        goto LABEL_42;
      v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 == a3)
      {
        v8 = a3;
        if (a4)
          goto LABEL_43;
        goto LABEL_69;
      }
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      if (!a4)
        goto LABEL_69;
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v7;
      *((_BYTE *)a4 + 1) = 0;
      return v8;
  }
}

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5;
  char *v9;
  char *v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char *v25;
  size_t v26;
  std::string v27;
  char __s[24];

  v5 = (unint64_t)&a3[-a2];
  memset(__s, 170, sizeof(__s));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 <= 0x16)
  {
    __s[23] = (_BYTE)a3 - a2;
    v9 = __s;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v10 = v9;
    goto LABEL_16;
  }
  v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v16 = v5 | 7;
  v17 = v16 + 1;
  v9 = (char *)operator new(v16 + 1);
  *(_QWORD *)&__s[8] = v5;
  *(_QWORD *)&__s[16] = v17 | 0x8000000000000000;
  *(_QWORD *)__s = v9;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v5 < 0x20 || (unint64_t)&v9[-a2] < 0x20)
  {
    v10 = v9;
    v11 = (char *)a2;
    do
    {
LABEL_15:
      v18 = *v11++;
      *v10++ = v18;
    }
    while (v11 != a3);
    goto LABEL_16;
  }
  v10 = &v9[v5 & 0xFFFFFFFFFFFFFFE0];
  v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
  v12 = (__int128 *)(a2 + 16);
  v13 = v9 + 16;
  v14 = v5 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v15 = *v12;
    *(v13 - 1) = *(v12 - 1);
    *v13 = v15;
    v12 += 2;
    v13 += 2;
    v14 -= 32;
  }
  while (v14);
  if (v5 != (v5 & 0xFFFFFFFFFFFFFFE0))
    goto LABEL_15;
LABEL_16:
  *v10 = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (__s[23] < 0)
  {
    v19 = *(char **)__s;
    if (!*(_QWORD *)&__s[8])
      goto LABEL_29;
  }
  else
  {
    if (!__s[23])
      return;
    v19 = __s;
  }
  std::__get_collation_name(&v27, v19);
  *(_OWORD *)a4 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
  v20 = v27.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v27.__r_.__value_.__l + 2);
  v21 = HIBYTE(v20);
  if ((v21 & 0x80u) != 0)
    v21 = *(_QWORD *)(a4 + 8);
  if (v21)
  {
LABEL_23:
    if ((__s[23] & 0x80000000) == 0)
      return;
    v19 = *(char **)__s;
LABEL_29:
    operator delete(v19);
    return;
  }
  if (__s[23] < 0)
  {
    v19 = *(char **)__s;
    v22 = *(_QWORD *)&__s[8];
    if (*(_QWORD *)&__s[8] >= 3uLL)
      goto LABEL_29;
    goto LABEL_31;
  }
  v22 = __s[23];
  if (__s[23] < 3u)
  {
    v19 = __s;
LABEL_31:
    (*(void (**)(std::string *__return_ptr, _QWORD, char *, char *))(**(_QWORD **)(a1 + 16) + 32))(&v27, *(_QWORD *)(a1 + 16), v19, &v19[v22]);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(std::string *)a4 = v27;
    if (*(char *)(a4 + 23) < 0)
    {
      v24 = *(_QWORD *)(a4 + 8);
      if (v24 == 1 || v24 == 12)
      {
        if (__s != (char *)a4)
        {
          if (__s[23] >= 0)
            v25 = __s;
          else
            v25 = *(char **)__s;
          if (__s[23] >= 0)
            v26 = __s[23];
          else
            v26 = *(_QWORD *)&__s[8];
          std::string::__assign_no_alias<false>((void **)a4, v25, v26);
        }
      }
      else
      {
        **(_BYTE **)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
      }
    }
    else
    {
      v23 = *(unsigned __int8 *)(a4 + 23);
      if (v23 == 1 || v23 == 12)
      {
        if (__s != (char *)a4)
        {
          if (__s[23] < 0)
          {
            std::string::__assign_no_alias<true>((_QWORD *)a4, *(void **)__s, *(size_t *)&__s[8]);
          }
          else
          {
            *(_OWORD *)a4 = *(_OWORD *)__s;
            *(_QWORD *)(a4 + 16) = *(_QWORD *)&__s[16];
          }
        }
      }
      else
      {
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 23) = 0;
      }
    }
    goto LABEL_23;
  }
}

void sub_1BF3CF158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3, BOOL a4)
{
  unint64_t v4;
  _OWORD *v9;
  _BYTE *v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  void **v20;
  void **v21;
  uint64_t classname;
  void *__p[3];

  v4 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4 > 0x16)
  {
    v16 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v16 = v4 | 7;
    v17 = v16 + 1;
    v9 = operator new(v16 + 1);
    __p[1] = (void *)v4;
    __p[2] = (void *)(v17 | 0x8000000000000000);
    __p[0] = v9;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v10 = v9;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  v9 = __p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v4 < 0x20 || (unint64_t)v9 - a2 < 0x20)
  {
    v10 = v9;
    v11 = (char *)a2;
  }
  else
  {
    v10 = (char *)v9 + (v4 & 0xFFFFFFFFFFFFFFE0);
    v11 = (char *)(a2 + (v4 & 0xFFFFFFFFFFFFFFE0));
    v12 = (__int128 *)(a2 + 16);
    v13 = v9 + 1;
    v14 = v4 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v4 == (v4 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  *v10 = 0;
  v19 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0)
    v20 = __p;
  else
    v20 = (void **)__p[0];
  if (SHIBYTE(__p[2]) < 0)
    v19 = (char *)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v20, &v19[(_QWORD)v20]);
  if (SHIBYTE(__p[2]) >= 0)
    v21 = __p;
  else
    v21 = (void **)__p[0];
  classname = std::__get_classname((const char *)v21, a4);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return classname;
}

void sub_1BF3CF320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3)
{
  char *v6;
  int v8;
  std::basic_regex<char> *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  std::basic_regex<char> *v14;
  std::__owns_one_state<char> *v15;
  int v16;
  std::basic_regex<char> *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (char *)a2, a3);
  if ((char *)a2 != v6 || (char *)a2 == a3 || (char *)(a2 + 1) == a3 || *(_BYTE *)a2 != 92)
    return v6;
  v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 40)
  {
    v9 = (std::basic_regex<char> *)(a2 + 2);
    if ((*(_BYTE *)(a1 + 24) & 2) != 0)
    {
      v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      v10 = operator new(0x18uLL);
      v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      v12 = *(_QWORD *)(a1 + 56);
      v13 = *(_QWORD *)(v12 + 8);
      *v10 = &unk_1E7900D90;
      v10[1] = v13;
      *((_DWORD *)v10 + 4) = v11;
      *(_QWORD *)(v12 + 8) = v10;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (std::basic_regex<char> *)a3)
        goto LABEL_23;
      v14 = v9;
      v15 = *(std::__owns_one_state<char> **)(a1 + 56);
      v16 = *(_DWORD *)(a1 + 28);
      v17 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, v14, a3);
      if (v14 == v17)
        break;
      v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v17, (std::basic_regex<char> *)a3, v15, (v16 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    while (v14 != v9);
    if ((char *)&v14->__traits_.__loc_.__locale_ + 1 == a3
      || LOBYTE(v14->__traits_.__loc_.__locale_) != 92
      || BYTE1(v14->__traits_.__loc_.__locale_) != 41)
    {
LABEL_23:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    v6 = (char *)v14 + 2 * (BYTE1(v14->__traits_.__loc_.__locale_) == 41);
    if ((*(_BYTE *)(a1 + 24) & 2) == 0)
    {
      v18 = operator new(0x18uLL);
      v19 = *(_QWORD *)(a1 + 56);
      v20 = *(_QWORD *)(v19 + 8);
      *v18 = &unk_1E7900DD8;
      v18[1] = v20;
      *((_DWORD *)v18 + 4) = v11;
      *(_QWORD *)(v19 + 8) = v18;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return v6;
    }
    return v6;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8)
    return v6;
  if ((v8 - 48) > *(_DWORD *)(a1 + 28))
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v8 - 48);
  return (char *)(a2 + 2);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  int locale_low;
  unsigned __int8 *v9;
  std::basic_regex<char> *v10;
  int v11;
  int v12;
  std::basic_regex<char> *v13;
  int v14;
  std::basic_regex<char> *v15;
  int v16;
  int v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;

  if (this == a3)
    return this;
  locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  v9 = (unsigned __int8 *)a3;
  if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3
    || locale_low != 92
    || BYTE1(this->__traits_.__loc_.__locale_) != 123)
  {
    return this;
  }
  v10 = (std::basic_regex<char> *)((char *)this + 2 * (BYTE1(this->__traits_.__loc_.__locale_) == 123));
  if (v10 == a3)
    goto LABEL_45;
  v11 = LOBYTE(v10->__traits_.__loc_.__locale_);
  if ((v11 & 0xF8) != 0x30 && (v11 & 0xFE) != 0x38)
    goto LABEL_45;
  v12 = v11 - 48;
  v13 = (std::basic_regex<char> *)((char *)&v10->__traits_.__loc_.__locale_ + 1);
  if ((std::basic_regex<char> *)((char *)&v10->__traits_.__loc_.__locale_ + 1) == a3)
  {
LABEL_15:
    v13 = a3;
  }
  else
  {
    while (1)
    {
      v14 = LOBYTE(v13->__traits_.__loc_.__locale_);
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
        break;
      if (v12 >= 214748364)
        goto LABEL_45;
      v12 = v14 + 10 * v12 - 48;
      v13 = (std::basic_regex<char> *)((char *)v13 + 1);
      if (v13 == a3)
        goto LABEL_15;
    }
  }
  if (v13 == v10)
    goto LABEL_45;
  if (v13 == a3)
LABEL_46:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  v15 = (std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 1);
  v16 = LOBYTE(v13->__traits_.__loc_.__locale_);
  if (v16 != 44)
  {
    if (v15 != a3 && v16 == 92 && LOBYTE(v15->__traits_.__loc_.__locale_) == 125)
    {
      v19 = (unsigned __int8 *)&v13->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, v12, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v19;
    }
    goto LABEL_46;
  }
  if (v15 == a3)
    goto LABEL_46;
  v17 = LOBYTE(v15->__traits_.__loc_.__locale_);
  if ((v17 & 0xF8) == 0x30 || (v17 & 0xFE) == 0x38)
  {
    v18 = v17 - 48;
    v15 = (std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 2);
    if ((std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_37:
      v15 = a3;
      goto LABEL_40;
    }
    while (1)
    {
      v17 = LOBYTE(v15->__traits_.__loc_.__locale_);
      if ((v17 & 0xF8) != 0x30 && (v17 & 0xFE) != 0x38)
        break;
      if (v18 >= 214748364)
        goto LABEL_45;
      v18 = v17 + 10 * v18 - 48;
      v15 = (std::basic_regex<char> *)((char *)v15 + 1);
      if (v15 == a3)
        goto LABEL_37;
    }
  }
  else
  {
    v18 = -1;
  }
  if (v15 == a3)
  {
    v20 = (unsigned __int8 *)v15;
    v15 = a3;
    v9 = v20;
  }
  else if ((std::basic_regex<char> *)((char *)&v15->__traits_.__loc_.__locale_ + 1) == a3 || v17 != 92)
  {
    v9 = (unsigned __int8 *)v15;
  }
  else
  {
    v9 = (unsigned __int8 *)v15 + 2 * (BYTE1(v15->__traits_.__loc_.__locale_) == 125);
  }
LABEL_40:
  if (v15 == (std::basic_regex<char> *)v9)
    goto LABEL_46;
  if (v18 != -1)
  {
    if (v18 >= v12)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, v18, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v9;
    }
LABEL_45:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return (std::basic_regex<char> *)v9;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, char *a3)
{
  int v5;
  char *v6;
  int v9;
  std::__node<char> *v10;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if (a2 == a3)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
  v6 = a2 + 1;
  v5 = *a2;
  if (a2 + 1 == a3 && v5 == 36)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
  if ((v5 - 46) > 0x2E || ((1 << (v5 - 46)) & 0x600000000001) == 0)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
    return a2 + 1;
  }
  else if (v6 != a3
         && v5 == 92
         && (v9 = *v6, (v9 - 36) <= 0x3A)
         && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
    return a2 + 2;
  }
  else
  {
    if (*a2 != 46)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
    v10 = (std::__node<char> *)operator new(0x10uLL);
    end = this->__end_;
    first = end->__first_;
    v10->__vftable = (std::__node<char>_vtbl *)&unk_1E7900F88;
    v10[1].__vftable = (std::__node<char>_vtbl *)first;
    end->__first_ = v10;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return a2 + 1;
  }
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  std::basic_regex<char> *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int locale_low;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  std::basic_regex<char> *v22;
  std::basic_regex<char> *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
  if (v8 == a2)
  {
    v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char>::value_type *)a2, (std::basic_regex<char>::value_type *)a3);
    if (v8 == a2)
    {
      if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
      {
        v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(a1, (char *)a2, (char *)a3);
      }
      else
      {
        v9 = operator new(0x10uLL);
        v10 = *(_QWORD *)(a1 + 56);
        v11 = *(_QWORD *)(v10 + 8);
        *v9 = &unk_1E7900F88;
        v9[1] = v11;
        *(_QWORD *)(v10 + 8) = v9;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
      }
    }
  }
  if (v8 != a2 || v8 == a3)
  {
LABEL_23:
    if (v8 != a2)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v8, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    return a2;
  }
  locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  switch(locale_low)
  {
    case '$':
      v13 = operator new(0x18uLL);
      v14 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v15 = *(_QWORD *)(a1 + 56);
      goto LABEL_14;
    case '(':
      if ((*(_BYTE *)(a1 + 24) & 2) != 0)
      {
        v19 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        v18 = operator new(0x18uLL);
        v19 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v19;
        v20 = *(_QWORD *)(a1 + 56);
        v21 = *(_QWORD *)(v20 + 8);
        *v18 = &unk_1E7900D90;
        v18[1] = v21;
        *((_DWORD *)v18 + 4) = v19;
        *(_QWORD *)(v20 + 8) = v18;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      ++*(_DWORD *)(a1 + 36);
      v22 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v22 == a3 || (v23 = v22, LOBYTE(v22->__traits_.__loc_.__locale_) != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      {
        v24 = operator new(0x18uLL);
        v25 = *(_QWORD *)(a1 + 56);
        v26 = *(_QWORD *)(v25 + 8);
        *v24 = &unk_1E7900DD8;
        v24[1] = v26;
        *((_DWORD *)v24 + 4) = v19;
        *(_QWORD *)(v25 + 8) = v24;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      v8 = (std::basic_regex<char> *)((char *)&v23->__traits_.__loc_.__locale_ + 1);
      goto LABEL_23;
    case '^':
      v13 = operator new(0x18uLL);
      v14 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v15 = *(_QWORD *)(a1 + 56);
LABEL_14:
      v17 = *(_QWORD *)(v15 + 8);
      *v13 = v16 + 16;
      v13[1] = v17;
      *((_BYTE *)v13 + 16) = v14;
      *(_QWORD *)(v15 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v8, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
  }
  return a2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3)
    return this;
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return this;
    case ')':
      if (a1->__open_count_)
        return this;
      break;
    default:
      break;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3)
{
  std::basic_regex<char>::value_type *v3;
  std::basic_regex<char>::value_type *v4;
  std::basic_regex<char>::value_type v5;
  std::basic_regex<char>::value_type *result;
  _BOOL4 v7;
  uint64_t v8;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92)
    return v3;
  v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      v3 += 2;
      return v3;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        result = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4, a3, 0);
      }
      else
      {
        v7 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v5);
        v8 = 2;
        if (!v7)
          v8 = 0;
        result = &v3[v8];
      }
      break;
  }
  return result;
}

uint64_t util::convert<BOOL>(const std::string *a1, BOOL *a2, int a3)
{
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  std::string::size_type size;
  size_t __idx;

  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    v6 = (const char *)a1->__r_.__value_.__r.__words[0];
    if (strcasecmp(a1->__r_.__value_.__l.__data_, "false") && strcasecmp(v6, "off") && strcasecmp(v6, "no"))
    {
      if (!strcasecmp(v6, "true")
        || !strcasecmp(v6, "on")
        || !strcasecmp(v6, "yes")
        || !strcasecmp(v6, "full")
        || !strcasecmp(v6, "streaming")
        || !strcasecmp(v6, "lite"))
      {
        goto LABEL_28;
      }
      goto LABEL_21;
    }
LABEL_27:
    v7 = 0;
LABEL_29:
    *a2 = v7 != 0;
    return 1;
  }
  if (!strcasecmp((const char *)a1, "false")
    || !strcasecmp((const char *)a1, "off")
    || !strcasecmp((const char *)a1, "no"))
  {
    goto LABEL_27;
  }
  if (!strcasecmp((const char *)a1, "true"))
    goto LABEL_28;
  if (!strcasecmp((const char *)a1, "on"))
    goto LABEL_28;
  if (!strcasecmp((const char *)a1, "yes"))
    goto LABEL_28;
  if (!strcasecmp((const char *)a1, "full"))
    goto LABEL_28;
  if (!strcasecmp((const char *)a1, "streaming"))
    goto LABEL_28;
  v6 = (const char *)a1;
  if (!strcasecmp((const char *)a1, "lite"))
    goto LABEL_28;
LABEL_21:
  if (!strcasecmp(v6, "background"))
  {
LABEL_28:
    v7 = 1;
    goto LABEL_29;
  }
  __idx = 0xAAAAAAAAAAAAAAAALL;
  v7 = std::stol(a1, &__idx, a3);
  v8 = 0;
  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  if (__idx == size && v7 < 2)
    goto LABEL_29;
  return v8;
}

uint64_t sub_1BF3CFF1C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  return 0;
}

void OBDManager::create(char *a1@<X0>, NSObject **a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, OBDManager **a5@<X8>)
{
  OBDManager *v10;
  NSObject *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  OBDManager *v34;
  unint64_t v35;
  unsigned __int8 v36;
  NSObject *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD v41[2];
  uint64_t v42;
  std::__shared_weak_count *v43;
  dispatch_object_t object;
  OBDManager *v45;
  unint64_t v46;
  uint8_t buf[8];

  v45 = (OBDManager *)0xAAAAAAAAAAAAAAAALL;
  v46 = 0xAAAAAAAAAAAAAAAALL;
  v10 = (OBDManager *)operator new(0x80uLL);
  v11 = *a2;
  object = v11;
  if (v11)
    dispatch_retain(v11);
  v12 = a3[1];
  v42 = *a3;
  v43 = (std::__shared_weak_count *)v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *a4;
  v16 = (std::__shared_weak_count *)a4[1];
  v41[0] = v15;
  v41[1] = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  OBDManager::OBDManager((uint64_t)v10, a1, &object, &v42, v41);
  v45 = v10;
  *(_QWORD *)buf = v10;
  v19 = (std::__shared_weak_count *)operator new(0x20uLL);
  v19->__shared_owners_ = 0;
  v20 = (unint64_t *)&v19->__shared_owners_;
  v19->__vftable = (std::__shared_weak_count_vtbl *)off_1E7901828;
  v19->__shared_weak_owners_ = 0;
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
  v46 = (unint64_t)v19;
  *(_QWORD *)buf = 0;
  v21 = (std::__shared_weak_count *)*((_QWORD *)v10 + 2);
  if (v21)
  {
    if (v21->__shared_owners_ != -1)
      goto LABEL_22;
    do
      v22 = __ldxr(v20);
    while (__stxr(v22 + 1, v20));
    p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v24 = __ldxr(p_shared_weak_owners);
    while (__stxr(v24 + 1, p_shared_weak_owners));
    *((_QWORD *)v10 + 1) = v10;
    *((_QWORD *)v10 + 2) = v19;
    std::__shared_weak_count::__release_weak(v21);
  }
  else
  {
    do
      v25 = __ldxr(v20);
    while (__stxr(v25 + 1, v20));
    v26 = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    *((_QWORD *)v10 + 1) = v10;
    *((_QWORD *)v10 + 2) = v19;
  }
  do
    v28 = __ldaxr(v20);
  while (__stlxr(v28 - 1, v20));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_22:
  if (*(_QWORD *)buf)
    OBDManager::~OBDManager(*(OBDManager **)buf);
  if (v16)
  {
    v29 = (unint64_t *)&v16->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v31 = v43;
  if (v43)
  {
    v32 = (unint64_t *)&v43->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (object)
    dispatch_release(object);
  v34 = v45;
  if (v45 && OBDManager::init(v45))
  {
    v35 = v46;
    *a5 = v34;
    a5[1] = (OBDManager *)v35;
    return;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED7100E0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v37 = qword_1ED7100E0;
    if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
      goto LABEL_42;
LABEL_49:
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF335000, v37, OS_LOG_TYPE_ERROR, "Failed to create OBD Manager!", buf, 2u);
    *a5 = 0;
    a5[1] = 0;
    v38 = (std::__shared_weak_count *)v46;
    if (!v46)
      return;
    goto LABEL_43;
  }
  dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
  v37 = qword_1ED7100E0;
  if (os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
    goto LABEL_49;
LABEL_42:
  *a5 = 0;
  a5[1] = 0;
  v38 = (std::__shared_weak_count *)v46;
  if (!v46)
    return;
LABEL_43:
  v39 = (unint64_t *)&v38->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
}

void sub_1BF3D02B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF3D02CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  NSObject *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  std::unique_ptr<OBDManager>::~unique_ptr[abi:ne180100]((OBDManager **)va2);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  if (v2)
    dispatch_release(v2);
  _Unwind_Resume(a1);
}

BOOL OBDManager::init(OBDManager *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  NSObject *v11;
  void **v12;
  NSObject *v13;
  const char *v14;
  _QWORD *v16;
  _QWORD aBlock[6];
  std::__shared_weak_count *v18;
  void *v19;
  NSObject *v20;
  uint8_t buf[16];

  v2 = *((_QWORD *)this + 13);
  if (!v2)
  {
    v13 = *(NSObject **)this;
    if (!os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
      return v2 != 0;
    *(_WORD *)buf = 0;
    v14 = "Audio Manager is null pointer!";
LABEL_33:
    _os_log_error_impl(&dword_1BF335000, v13, OS_LOG_TYPE_ERROR, v14, buf, 2u);
    return v2 != 0;
  }
  v3 = (_QWORD *)*((_QWORD *)this + 8);
  if (!v3)
  {
    v13 = *(NSObject **)this;
    if (!os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
      return v2 != 0;
    *(_WORD *)buf = 0;
    v14 = "On-Body handler is not created";
    goto LABEL_33;
  }
  v4 = *((_QWORD *)this + 1);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    v3 = (_QWORD *)*((_QWORD *)this + 8);
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10OBDManager4initEv_block_invoke;
  aBlock[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10OBDManagerEE_e11_v16__0i8i12l;
  aBlock[4] = this;
  aBlock[5] = v4;
  v18 = v5;
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = _Block_copy(aBlock);
  v11 = *((_QWORD *)this + 3);
  if (v11)
    dispatch_retain(v11);
  v19 = v10;
  v20 = v11;
  v12 = (void **)v3[4];
  if ((unint64_t)v12 >= v3[5])
  {
    v16 = std::vector<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)> const&>(v3 + 3, (uint64_t)&v19);
    v11 = v20;
    v3[4] = v16;
    if (!v11)
      goto LABEL_18;
    goto LABEL_17;
  }
  if (v10)
  {
    *v12 = _Block_copy(v10);
    v12[1] = v11;
    if (!v11)
      goto LABEL_16;
    goto LABEL_15;
  }
  *v12 = 0;
  v12[1] = v11;
  if (v11)
LABEL_15:
    dispatch_retain(v11);
LABEL_16:
  v3[4] = v12 + 2;
  if (v11)
LABEL_17:
    dispatch_release(v11);
LABEL_18:
  if (v19)
    _Block_release(v19);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  return v2 != 0;
}

void sub_1BF3D04F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17)
{
  std::__shared_weak_count *v17;

  dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)>::~callback((uint64_t)&a17);
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if (!v17)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if (!v17)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v17);
  _Unwind_Resume(a1);
}

uint64_t OBDManager::OBDManager(uint64_t a1, char *__s, NSObject **a3, uint64_t *a4, _QWORD *a5)
{
  size_t v10;
  std::string::size_type v11;
  std::string *p_dst;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  queue v20;
  NSObject *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  NSObject *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  dispatch_object_t object;
  std::string __dst;
  std::string v47;
  void *__p[2];
  int64_t v49;

  v10 = strlen(__s);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    p_dst = (std::string *)operator new(v13 + 1);
    __dst.__r_.__value_.__l.__size_ = v11;
    __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v10;
  p_dst = &__dst;
  if (v10)
LABEL_8:
    memcpy(p_dst, __s, v11);
  p_dst->__r_.__value_.__s.__data_[v11] = 0;
  v15 = std::string::append(&__dst, ".", 1uLL);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = std::string::append(&v47, "OBDManager", 0xAuLL);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v49 = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (v49 >= 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)a1, "com.apple.telephony.abm", (const char *)v19);
  if (SHIBYTE(v49) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_14:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_15;
      goto LABEL_43;
    }
  }
  else if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete(v47.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_15:
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v21 = *a3;
    *(_QWORD *)(a1 + 24) = *a3;
    if (!v21)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_43:
  operator delete(__dst.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v21 = *a3;
  *(_QWORD *)(a1 + 24) = *a3;
  if (v21)
LABEL_16:
    dispatch_retain(v21);
LABEL_17:
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 64) = *a5;
  *(_WORD *)(a1 + 32) = 257;
  v22 = a5[1];
  *(_QWORD *)(a1 + 72) = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = *a4;
  *(_QWORD *)(a1 + 104) = *a4;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 1;
  *(_QWORD *)(a1 + 96) = 0;
  v26 = a4[1];
  *(_QWORD *)(a1 + 112) = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    v25 = *(_QWORD *)(a1 + 104);
  }
  if (!v25)
  {
    v21 = AudioManager::create((AudioManager *)__s, (AudioManager **)__p);
    v38 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v39 = *(std::__shared_weak_count **)(a1 + 112);
    *(_OWORD *)(a1 + 104) = v38;
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldaxr(p_shared_owners);
      while (__stlxr(v41 - 1, p_shared_owners));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v42 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v43 = (unint64_t *)((char *)__p[1] + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
  }
  if (!*(_QWORD *)(a1 + 64))
  {
    v29 = *(NSObject **)(a1 + 24);
    object = v29;
    if (v29)
      dispatch_retain(v29);
    CMOnBodyDelegate::create(&object, v20, __p);
    v30 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v31 = *(std::__shared_weak_count **)(a1 + 72);
    *(_OWORD *)(a1 + 64) = v30;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v35 = (unint64_t *)((char *)__p[1] + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v21 = object;
    if (object)
      dispatch_release(object);
  }
  *(_DWORD *)(a1 + 120) = capabilities::txpower::supportedControlInput((capabilities::txpower *)v21);
  return a1;
}

void sub_1BF3D08A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object)
{
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;

  if (object)
  {
    dispatch_release(object);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v12);
    v14 = v9[12];
    if (!v14)
    {
LABEL_3:
      v15 = v9[10];
      if (!v15)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v12);
    v14 = v9[12];
    if (!v14)
      goto LABEL_3;
  }
  dispatch_release(v14);
  v15 = v9[10];
  if (!v15)
  {
LABEL_4:
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v11);
    std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::~vector[abi:ne180100](v10);
    v16 = v9[3];
    if (!v16)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  dispatch_release(v15);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v11);
  std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::~vector[abi:ne180100](v10);
  v16 = v9[3];
  if (!v16)
  {
LABEL_5:
    v17 = (std::__shared_weak_count *)v9[2];
    if (!v17)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_11:
  dispatch_release(v16);
  v17 = (std::__shared_weak_count *)v9[2];
  if (!v17)
  {
LABEL_7:
    MEMORY[0x1C3B89240](v9);
    _Unwind_Resume(a1);
  }
LABEL_6:
  std::__shared_weak_count::__release_weak(v17);
  goto LABEL_7;
}

void sub_1BF3D0968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if (a15 < 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if (a15 < 0)
  {
LABEL_4:
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
LABEL_7:
  _Unwind_Resume(exception_object);
}

void **std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  NSObject *v5;
  const void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *((_QWORD *)v3 - 1);
        if (v5)
          dispatch_release(v5);
        v6 = (const void *)*((_QWORD *)v3 - 2);
        if (v6)
          _Block_release(v6);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void OBDManager::~OBDManager(OBDManager *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t i;
  NSObject *v10;
  const void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  NSObject *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  NSObject *v29;
  const void *v30;
  NSObject *v31;
  std::__shared_weak_count *v32;

  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = 0;
    if (v3)
    {
      dispatch_release(v3);
      v4 = *((_QWORD *)this + 12);
      *((_QWORD *)this + 12) = 0;
      if (v4)
        dispatch_release(v4);
    }
  }
  if (*((_QWORD *)this + 8))
  {
    v5 = *((_QWORD *)this + 10);
    if (v5)
    {
      dispatch_source_cancel(v5);
      v6 = *((_QWORD *)this + 10);
      *((_QWORD *)this + 10) = 0;
      if (v6)
      {
        dispatch_release(v6);
        v7 = *((_QWORD *)this + 10);
        *((_QWORD *)this + 10) = 0;
        if (v7)
          dispatch_release(v7);
      }
    }
    CMOnBodyDelegate::stopMotionDetection(*((CMOnBodyDelegate **)this + 8));
  }
  v8 = *((_QWORD *)this + 5);
  for (i = *((_QWORD *)this + 6); i != v8; i -= 16)
  {
    v10 = *(NSObject **)(i - 8);
    if (v10)
      dispatch_release(v10);
    v11 = *(const void **)(i - 16);
    if (v11)
      _Block_release(v11);
  }
  *((_QWORD *)this + 6) = v8;
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    v18 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  v21 = *((_QWORD *)this + 12);
  if (v21)
    dispatch_release(v21);
  v22 = *((_QWORD *)this + 10);
  if (v22)
    dispatch_release(v22);
  v23 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (!v23)
    goto LABEL_41;
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    v26 = (char *)*((_QWORD *)this + 5);
    if (!v26)
      goto LABEL_51;
  }
  else
  {
LABEL_41:
    v26 = (char *)*((_QWORD *)this + 5);
    if (!v26)
      goto LABEL_51;
  }
  v27 = (char *)*((_QWORD *)this + 6);
  v28 = v26;
  if (v27 != v26)
  {
    do
    {
      v29 = *((_QWORD *)v27 - 1);
      if (v29)
        dispatch_release(v29);
      v30 = (const void *)*((_QWORD *)v27 - 2);
      if (v30)
        _Block_release(v30);
      v27 -= 16;
    }
    while (v27 != v26);
    v28 = (char *)*((_QWORD *)this + 5);
  }
  *((_QWORD *)this + 6) = v26;
  operator delete(v28);
LABEL_51:
  v31 = *((_QWORD *)this + 3);
  if (v31)
    dispatch_release(v31);
  v32 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v32)
    std::__shared_weak_count::__release_weak(v32);
  JUMPOUT(0x1C3B89240);
}

void OBDManager::stopOBDTimer(OBDManager *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;

  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = 0;
    if (v3)
    {
      dispatch_release(v3);
      v4 = *((_QWORD *)this + 12);
      *((_QWORD *)this + 12) = 0;
      if (v4)
        dispatch_release(v4);
    }
  }
}

void OBDManager::stopCoreMotionCallbackWatchdog(OBDManager *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;

  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;
    if (v3)
    {
      dispatch_release(v3);
      v4 = *((_QWORD *)this + 10);
      *((_QWORD *)this + 10) = 0;
      if (v4)
        dispatch_release(v4);
    }
  }
}

void ___ZN10OBDManager4initEv_block_invoke(_QWORD *a1, unsigned int a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  NSObject *v13;
  const char *v14;
  const char *v15;
  NSObject *v16;
  int v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v10)
      {
        v13 = *(NSObject **)v7;
        if (os_log_type_enabled(*(os_log_t *)v7, OS_LOG_TYPE_DEFAULT))
        {
          if (a2 > 2)
            v14 = "Unknown";
          else
            v14 = off_1E79018B8[a2];
          v15 = "Confidence Level Unknown";
          if (a3 == 1)
            v15 = "Confidence Level High";
          if (!a3)
            v15 = "Confidence Level Low";
          v17 = 136315394;
          v18 = v14;
          v19 = 2080;
          v20 = v15;
          _os_log_impl(&dword_1BF335000, v13, OS_LOG_TYPE_DEFAULT, "#I On Body Callback: OnBody: %s, confidence: %s", (uint8_t *)&v17, 0x16u);
        }
        *(_DWORD *)(v7 + 88) = a2;
        if (*(_QWORD *)(v7 + 96))
        {
          OBDManager::startCoreMotionCallbackWatchdog((OBDManager *)v7);
        }
        else
        {
          v16 = *(NSObject **)v7;
          if (os_log_type_enabled(*(os_log_t *)v7, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v17) = 0;
            _os_log_error_impl(&dword_1BF335000, v16, OS_LOG_TYPE_ERROR, "OBD has not started yet!", (uint8_t *)&v17, 2u);
          }
        }
      }
    }
  }
}

void OBDManager::startCoreMotionCallbackWatchdog(OBDManager *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  dispatch_time_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  NSObject *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD handler[6];
  std::__shared_weak_count *v16;

  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;
    if (v3)
    {
      dispatch_release(v3);
      v4 = *((_QWORD *)this + 10);
      *((_QWORD *)this + 10) = 0;
      if (v4)
        dispatch_release(v4);
    }
  }
  v5 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, *((dispatch_queue_t *)this + 3));
  v6 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v5;
  if (v6)
  {
    dispatch_release(v6);
    v5 = *((_QWORD *)this + 10);
  }
  v7 = dispatch_time(0, 5120000000);
  dispatch_source_set_timer(v5, v7, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
  v8 = *((_QWORD *)this + 1);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v9)
  {
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }
  v12 = *((_QWORD *)this + 10);
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3321888768;
  handler[2] = ___ZN10OBDManager31startCoreMotionCallbackWatchdogEv_block_invoke;
  handler[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10OBDManagerEE_e5_v8__0l;
  handler[4] = this;
  handler[5] = v8;
  v16 = v9;
  if (v9)
  {
    v13 = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  dispatch_source_set_event_handler(v12, handler);
  dispatch_activate(*((dispatch_object_t *)this + 10));
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10OBDManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10OBDManagerEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t OBDManager::getOBDState(OBDManager *this)
{
  return *((unsigned __int8 *)this + 32);
}

_QWORD *OBDManager::registerCallback(_QWORD *a1, void **a2)
{
  _QWORD *v4;
  void *v5;
  NSObject *v6;
  _QWORD *result;

  v4 = (_QWORD *)a1[6];
  if ((unint64_t)v4 >= a1[7])
  {
    result = std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)> const&>(a1 + 5, (uint64_t)a2);
    a1[6] = result;
  }
  else
  {
    v5 = *a2;
    if (*a2)
      v5 = _Block_copy(v5);
    v6 = a2[1];
    *v4 = v5;
    v4[1] = v6;
    if (v6)
      dispatch_retain(v6);
    result = v4 + 2;
    a1[6] = v4 + 2;
  }
  return result;
}

void OBDManager::start(OBDManager *this, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 12))
  {
    v4 = *(NSObject **)this;
    if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v6) = 0;
      _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I WARNING - OBD Manager has started already!", (uint8_t *)&v6, 2u);
    }
  }
  if (*((_QWORD *)this + 8))
  {
    OBDManager::startCoreMotionCallbackWatchdog(this);
    CMOnBodyDelegate::startMotionDetection(*((CMOnBodyDelegate **)this + 8));
  }
  OBDManager::startOBDTimer((uint64_t)this, a2);
  v5 = *(NSObject **)this;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 134217984;
    v7 = a2;
    _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "#I Core Motion OnBody Detection is starting with %lld msec", (uint8_t *)&v6, 0xCu);
  }
}

void OBDManager::startOBDTimer(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  dispatch_time_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  NSObject *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[6];
  std::__shared_weak_count *v18;
  uint64_t v19;

  v4 = *(NSObject **)(a1 + 96);
  if (v4)
  {
    dispatch_source_cancel(v4);
    v5 = *(NSObject **)(a1 + 96);
    *(_QWORD *)(a1 + 96) = 0;
    if (v5)
    {
      dispatch_release(v5);
      v6 = *(NSObject **)(a1 + 96);
      *(_QWORD *)(a1 + 96) = 0;
      if (v6)
        dispatch_release(v6);
    }
  }
  v7 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, *(dispatch_queue_t *)(a1 + 24));
  v8 = *(NSObject **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v7;
  if (v8)
  {
    dispatch_release(v8);
    v7 = *(NSObject **)(a1 + 96);
  }
  v9 = dispatch_time(0, 1000000 * a2);
  dispatch_source_set_timer(v7, v9, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (v11)
  {
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
  }
  v14 = *(NSObject **)(a1 + 96);
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3321888768;
  v17[2] = ___ZN10OBDManager13startOBDTimerENSt3__16chrono8durationIxNS0_5ratioILl1ELl1000EEEEE_block_invoke;
  v17[3] = &__block_descriptor_64_e8_40c35_ZTSNSt3__18weak_ptrI10OBDManagerEE_e5_v8__0l;
  v17[4] = a1;
  v17[5] = v10;
  v18 = v11;
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v19 = a2;
  dispatch_source_set_event_handler(v14, v17);
  dispatch_activate(*(dispatch_object_t *)(a1 + 96));
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
}

void OBDManager::stop(OBDManager *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;

  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = 0;
    if (v3)
    {
      dispatch_release(v3);
      v4 = *((_QWORD *)this + 12);
      *((_QWORD *)this + 12) = 0;
      if (v4)
        dispatch_release(v4);
    }
  }
  if (*((_QWORD *)this + 8))
  {
    v5 = *((_QWORD *)this + 10);
    if (v5)
    {
      dispatch_source_cancel(v5);
      v6 = *((_QWORD *)this + 10);
      *((_QWORD *)this + 10) = 0;
      if (v6)
      {
        dispatch_release(v6);
        v7 = *((_QWORD *)this + 10);
        *((_QWORD *)this + 10) = 0;
        if (v7)
          dispatch_release(v7);
      }
    }
    CMOnBodyDelegate::stopMotionDetection(*((CMOnBodyDelegate **)this + 8));
  }
}

void ___ZN10OBDManager31startCoreMotionCallbackWatchdogEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  os_log_t *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (os_log_t *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (v6)
      {
        v9 = *v3;
        if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
        {
          v10 = 134217984;
          v11 = 5120;
          _os_log_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEFAULT, "#I WARNING - Motion did not report the callback in %llu milli-seconds", (uint8_t *)&v10, 0xCu);
        }
      }
    }
  }
}

void ___ZN10OBDManager13startOBDTimerENSt3__16chrono8durationIxNS0_5ratioILl1ELl1000EEEEE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  config::hw *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  char v13;
  char v14;
  void *v15;
  const void *v16;
  void *v17;
  char v18;
  NSObject *v19;
  dispatch_time_t v20;
  _QWORD *v21;
  uint64_t block;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  void *v25;
  void *aBlock;
  char v27;
  char v28;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = (config::hw *)std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = (std::__shared_weak_count *)v4;
      v6 = a1[5];
      v7 = (unint64_t *)((char *)v4 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (v8)
      {
        if (!v6)
          return;
      }
      else
      {
        (*(void (**)(config::hw *))(*(_QWORD *)v4 + 16))(v4);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6)
          return;
      }
      v21 = a1;
      if (config::hw::iPad(v4))
      {
        OBDManager::updateOBDState_iPad((OBDManager *)v3);
        v9 = *(_QWORD *)(v3 + 40);
        v10 = *(_QWORD *)(v3 + 48);
        if (v9 != v10)
          goto LABEL_15;
        goto LABEL_33;
      }
      OBDManager::updateOBDState_iPhone((OBDManager *)v3);
      v9 = *(_QWORD *)(v3 + 40);
      v10 = *(_QWORD *)(v3 + 48);
      if (v9 == v10)
      {
LABEL_33:
        v19 = *(NSObject **)(v3 + 96);
        v20 = dispatch_time(0, 1000000 * v21[7]);
        dispatch_source_set_timer(v19, v20, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
        return;
      }
LABEL_15:
      while (*(_QWORD *)v9)
      {
        v11 = _Block_copy(*(const void **)v9);
        v12 = *(NSObject **)(v9 + 8);
        if (v12)
          goto LABEL_17;
LABEL_18:
        v13 = *(_BYTE *)(v3 + 32);
        v14 = *(_BYTE *)(v3 + 33);
        if (v11)
        {
          v15 = _Block_copy(v11);
          v16 = v15;
          block = MEMORY[0x1E0C809B0];
          v23 = 3321888768;
          v24 = ___ZNK8dispatch8callbackIU13block_pointerFvN10OBDManager8OBDStateENS1_10TunerStateEEEclIJS2_S3_EEEvDpT__block_invoke;
          v25 = &__block_descriptor_42_e8_32c82_ZTSN8dispatch5blockIU13block_pointerFvN10OBDManager8OBDStateENS1_10TunerStateEEEE_e5_v8__0l;
          if (v15)
          {
            v17 = _Block_copy(v15);
            v18 = 0;
          }
          else
          {
            v17 = 0;
            v18 = 1;
          }
        }
        else
        {
          v16 = 0;
          v17 = 0;
          block = MEMORY[0x1E0C809B0];
          v23 = 3321888768;
          v18 = 1;
          v24 = ___ZNK8dispatch8callbackIU13block_pointerFvN10OBDManager8OBDStateENS1_10TunerStateEEEclIJS2_S3_EEEvDpT__block_invoke;
          v25 = &__block_descriptor_42_e8_32c82_ZTSN8dispatch5blockIU13block_pointerFvN10OBDManager8OBDStateENS1_10TunerStateEEEE_e5_v8__0l;
        }
        aBlock = v17;
        v27 = v13;
        v28 = v14;
        dispatch_async(v12, &block);
        if (aBlock)
          _Block_release(aBlock);
        if ((v18 & 1) == 0)
          _Block_release(v16);
        if (v12)
          dispatch_release(v12);
        if (v11)
          _Block_release(v11);
        v9 += 16;
        if (v9 == v10)
          goto LABEL_33;
      }
      v11 = 0;
      v12 = *(NSObject **)(v9 + 8);
      if (!v12)
        goto LABEL_18;
LABEL_17:
      dispatch_retain(v12);
      goto LABEL_18;
    }
  }
}

void OBDManager::updateOBDState(OBDManager *this)
{
  if (config::hw::iPad(this))
    OBDManager::updateOBDState_iPad(this);
  else
    OBDManager::updateOBDState_iPhone(this);
}

const char *OBDManager::toString(int a1)
{
  const char *v1;

  v1 = "Unknown";
  if (a1 == 1)
    v1 = "Body";
  if (a1)
    return v1;
  else
    return "Head";
}

{
  const char *v1;

  v1 = "Unknown";
  if (a1 == 1)
    v1 = "Non-Freespace";
  if (a1)
    return v1;
  else
    return "Freespace";
}

void OBDManager::setMotionParameter(uint64_t a1, ctu **a2)
{
  const void *v3;
  CFTypeID v4;
  const void *v5;
  CFTypeRef cf;

  if (*(_QWORD *)(a1 + 64))
  {
    ctu::xpc_to_cf(*a2, a2);
    v3 = cf;
    if (cf && (v4 = CFGetTypeID(cf), v4 == CFDictionaryGetTypeID()))
    {
      CFRetain(cf);
      v5 = cf;
    }
    else
    {
      v3 = 0;
      v5 = cf;
      if (!cf)
        goto LABEL_7;
    }
    CFRelease(v5);
LABEL_7:
    CMOnBodyDelegate::setThresholds(*(CMOnBodyDelegate **)(a1 + 64), v3);
    if (v3)
      CFRelease(v3);
  }
}

void sub_1BF3D18AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1BF3D18C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<void const>::~CFSharedRef(&a9);
  _Unwind_Resume(a1);
}

void OBDManager::updateOBDState_iPad(OBDManager *this)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  int v9;
  const char *v10;
  int v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *((_WORD *)this + 16) = 257;
  if (capabilities::txpower::operator&() && !*((_DWORD *)this + 22))
  {
    *((_WORD *)this + 16) = 0;
    v2 = *(NSObject **)this;
    if (!os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_DEFAULT))
      return;
  }
  else
  {
    v2 = *(NSObject **)this;
    if (!os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_DEFAULT))
      return;
  }
  v3 = *((int *)this + 22);
  if (v3 > 2)
    v4 = "Unknown";
  else
    v4 = off_1E79018B8[v3];
  v5 = "Unknown";
  v6 = "Body";
  if (*((_BYTE *)this + 32) != 1)
    v6 = "Unknown";
  if (*((_BYTE *)this + 32))
    v7 = v6;
  else
    v7 = "Head";
  if (*((_BYTE *)this + 33) == 1)
    v5 = "Non-Freespace";
  if (*((_BYTE *)this + 33))
    v8 = v5;
  else
    v8 = "Freespace";
  v9 = capabilities::txpower::operator&();
  v10 = "YES";
  v11 = 136315906;
  v12 = v4;
  v13 = 2080;
  if (!v9)
    v10 = "NO";
  v14 = v7;
  v15 = 2080;
  v16 = v8;
  v17 = 2080;
  v18 = v10;
  _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Motion Status: %s. Notifying OBD State: %s, Tuner State: %s, Motion Status as an input: %s", (uint8_t *)&v11, 0x2Au);
}

void OBDManager::updateOBDState_iPhone(OBDManager *this)
{
  OBDManager *v1;
  int v2;
  int v3;
  int v4;
  NSObject *v5;
  _BYTE *v6;
  unint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  int v15;
  const char *v16;
  int v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v1 = this;
  v27 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int8 *)(*((_QWORD *)this + 13) + 56);
  *((_BYTE *)this + 32) = 1;
  if (v2)
  {
    if (v2 == 1)
    {
      v3 = 0;
      *((_WORD *)this + 16) = 256;
      v4 = 1;
      v5 = *(NSObject **)this;
      if (!os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_DEFAULT))
        return;
      goto LABEL_15;
    }
    this = (OBDManager *)capabilities::txpower::operator&();
    if ((_DWORD)this)
    {
      if (!*((_DWORD *)v1 + 22))
        goto LABEL_13;
    }
  }
  if (capabilities::txpower::supportsMotionAlways(this)
    && capabilities::txpower::operator&()
    && !*((_DWORD *)v1 + 22))
  {
LABEL_13:
    *((_BYTE *)v1 + 32) = 0;
    v6 = (char *)v1 + 33;
LABEL_14:
    v4 = 0;
    *v6 = 0;
    v3 = 1;
    v5 = *(NSObject **)v1;
    if (!os_log_type_enabled(*(os_log_t *)v1, OS_LOG_TYPE_DEFAULT))
      return;
    goto LABEL_15;
  }
  v4 = 1;
  *((_BYTE *)v1 + 33) = 1;
  v6 = (char *)v1 + 33;
  if (!*((_DWORD *)v1 + 22))
    goto LABEL_14;
  v3 = 0;
  v5 = *(NSObject **)v1;
  if (!os_log_type_enabled(*(os_log_t *)v1, OS_LOG_TYPE_DEFAULT))
    return;
LABEL_15:
  v7 = *(char *)(*((_QWORD *)v1 + 13) + 56);
  if (v7 > 3)
  {
    v8 = "Unknown Audio Output";
    v9 = *((int *)v1 + 22);
    if (v9 > 2)
      goto LABEL_17;
LABEL_19:
    v10 = off_1E79018B8[v9];
    goto LABEL_20;
  }
  v8 = off_1E7901898[v7];
  v9 = *((int *)v1 + 22);
  if (v9 <= 2)
    goto LABEL_19;
LABEL_17:
  v10 = "Unknown";
LABEL_20:
  v11 = "Unknown";
  v12 = "Body";
  if (*((_BYTE *)v1 + 32) != 1)
    v12 = "Unknown";
  if (*((_BYTE *)v1 + 32))
    v13 = v12;
  else
    v13 = "Head";
  if (v4)
    v11 = "Non-Freespace";
  if (v3)
    v14 = "Freespace";
  else
    v14 = v11;
  v15 = capabilities::txpower::operator&();
  v17 = 136316162;
  v16 = "YES";
  v18 = v8;
  v19 = 2080;
  if (!v15)
    v16 = "NO";
  v20 = v10;
  v21 = 2080;
  v22 = v13;
  v23 = 2080;
  v24 = v14;
  v25 = 2080;
  v26 = v16;
  _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "#I Audio Output: %s, Motion Status: %s. Notifying OBD State: %s, Tuner State: %s, Motion Status as an input: %s", (uint8_t *)&v17, 0x34u);
}

_QWORD *std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)> const&>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  void *v9;
  NSObject *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  NSObject *v20;
  const void *v21;
  char *v23;
  BOOL v24;
  BOOL v25;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  double *v30;
  const double *v31;
  uint64_t v32;
  float64x2x2_t v33;

  v2 = a1[1] - *a1;
  v3 = (v2 >> 4) + 1;
  if (v3 >> 60)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v6 = a1[2] - *a1;
  if (v6 >> 3 > v3)
    v3 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (!v7)
  {
    v8 = 0;
    v9 = *(void **)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (v7 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v8 = (char *)operator new(16 * v7);
  v9 = *(void **)a2;
  if (*(_QWORD *)a2)
LABEL_12:
    v9 = _Block_copy(v9);
LABEL_13:
  v10 = *(NSObject **)(a2 + 8);
  v11 = &v8[16 * (v2 >> 4)];
  *(_QWORD *)v11 = v9;
  *((_QWORD *)v11 + 1) = v10;
  if (v10)
    dispatch_retain(v10);
  v12 = &v8[16 * v7];
  v13 = v11 + 16;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    v16 = (unint64_t)&v15[-*a1 - 16];
    if (v16 < 0xD0)
      goto LABEL_17;
    v23 = &v15[-(v16 & 0xFFFFFFFFFFFFFFF0)];
    v24 = &v8[v2 - 8 - (v16 & 0xFFFFFFFFFFFFFFF0)] >= v15 || v23 - 8 >= v11;
    v25 = !v24;
    if (v23 - 16 < &v8[v2 - 8] && &v8[v2 - (v16 & 0xFFFFFFFFFFFFFFF0) - 16] < v15 - 8)
      goto LABEL_17;
    if (v25)
      goto LABEL_17;
    v27 = (v16 >> 4) + 1;
    v28 = 16 * (v27 & 0x1FFFFFFFFFFFFFFELL);
    v17 = &v11[-v28];
    v29 = &v15[-v28];
    v30 = (double *)(v11 - 32);
    v31 = (const double *)(v15 - 32);
    v32 = v27 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v33 = vld2q_f64(v31);
      vst2q_f64(v30, v33);
      *(_OWORD *)v31 = 0uLL;
      *((_OWORD *)v31 + 1) = 0uLL;
      v31 -= 4;
      v30 -= 4;
      v32 -= 2;
    }
    while (v32);
    v11 = v17;
    v15 = v29;
    if (v27 != (v27 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_17:
      v17 = v11;
      do
      {
        v18 = *((_OWORD *)v15 - 1);
        v15 -= 16;
        *((_OWORD *)v17 - 1) = v18;
        v17 -= 16;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = v17;
    a1[1] = v13;
    a1[2] = v12;
    while (v19 != v15)
    {
      v20 = *((_QWORD *)v19 - 1);
      if (v20)
        dispatch_release(v20);
      v21 = (const void *)*((_QWORD *)v19 - 2);
      if (v21)
        _Block_release(v21);
      v19 -= 16;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

OBDManager **std::unique_ptr<OBDManager>::~unique_ptr[abi:ne180100](OBDManager **a1)
{
  OBDManager *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    OBDManager::~OBDManager(v2);
  return a1;
}

void std::__shared_ptr_pointer<OBDManager *,std::shared_ptr<OBDManager>::__shared_ptr_default_delete<OBDManager,OBDManager>,std::allocator<OBDManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

OBDManager *std::__shared_ptr_pointer<OBDManager *,std::shared_ptr<OBDManager>::__shared_ptr_default_delete<OBDManager,OBDManager>,std::allocator<OBDManager>>::__on_zero_shared(uint64_t a1)
{
  OBDManager *result;

  result = *(OBDManager **)(a1 + 24);
  if (result)
    OBDManager::~OBDManager(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<OBDManager *,std::shared_ptr<OBDManager>::__shared_ptr_default_delete<OBDManager,OBDManager>,std::allocator<OBDManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF5405A3)
    return a1 + 24;
  if (((v3 & 0x80000001BF5405A3 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF5405A3))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF5405A3 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvN10OBDManager8OBDStateENS1_10TunerStateEEEclIJS2_S3_EEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41));
}

void *__copy_helper_block_e8_32c82_ZTSN8dispatch5blockIU13block_pointerFvN10OBDManager8OBDStateENS1_10TunerStateEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c82_ZTSN8dispatch5blockIU13block_pointerFvN10OBDManager8OBDStateENS1_10TunerStateEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

void BootController::BootController(BootController *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t Controller;
  const void *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  const char *v13;
  _QWORD block[5];

  *(_QWORD *)this = off_1E79018E0;
  v13 = "boot.ctrl";
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_2;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v3 = *(_QWORD *)algn_1ED710088;
    v11 = GetABMLogServer(void)::sLogServer;
    v12 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v3 = *(_QWORD *)algn_1ED710088;
    v11 = GetABMLogServer(void)::sLogServer;
    v12 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_6;
  }
  v4 = (unint64_t *)(v3 + 8);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
LABEL_6:
  ctu::Loggable<BootController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<char const*,std::shared_ptr<ctu::LogServer>>(this, &v13, &v11);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *((_QWORD *)this + 9) = 0;
  *(_QWORD *)this = off_1E79018E0;
  *((_BYTE *)this + 80) = 1;
  Controller = TelephonyBasebandCreateController();
  v10 = (const void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = Controller;
  if (v10)
    CFRelease(v10);
}

void sub_1BF3D21B4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  const void **v2;
  const void **v3;

  v3 = v2;
  ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef(v3);
  *v1 = &unk_1E78FFC48;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  _Unwind_Resume(a1);
}

void sub_1BF3D21E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

const char *BootController::getName(BootController *this)
{
  return "boot.ctrl";
}

_QWORD *ctu::Loggable<BootController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<char const*,std::shared_ptr<ctu::LogServer>>(_QWORD *a1, const char **a2, _QWORD *a3)
{
  const char *v5;
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *__dst[2];
  unint64_t v16;

  *a1 = &unk_1E78FFC48;
  v5 = *a2;
  v6 = strlen(*a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    v16 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(v16) = v6;
  v8 = __dst;
  if (v6)
LABEL_8:
    memmove(v8, v5, (size_t)v7);
  *((_BYTE *)v7 + (_QWORD)v8) = 0;
  ctu::LoggerCommonBase::LoggerCommonBase();
  a1[1] = &unk_1E78FB900;
  a1[7] = *a3;
  v11 = a3[1];
  a1[8] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (SHIBYTE(v16) < 0)
    operator delete(__dst[0]);
  return a1;
}

void sub_1BF3D232C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const void **ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t BootController::prepare()
{
  return 1;
}

uint64_t BootController::resetModem(BootController *this)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  os_activity_scope_state_s state;

  v2 = _os_activity_create(&dword_1BF335000, "Reset baseband", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
  state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(v2, &state);
  os_activity_scope_leave(&state);
  v3 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(state.opaque[0]) = 0;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Reset baseband", (uint8_t *)&state, 2u);
  }
  v4 = TelephonyBasebandResetModem();
  if ((v4 & 1) == 0)
  {
    v5 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(state.opaque[0]) = 0;
      _os_log_error_impl(&dword_1BF335000, v5, OS_LOG_TYPE_ERROR, "Failed Resetting Modem", (uint8_t *)&state, 2u);
      if (!v2)
        return v4;
      goto LABEL_6;
    }
  }
  if (v2)
LABEL_6:
    os_release(v2);
  return v4;
}

void sub_1BF3D2490(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::os::scoped_activity::~scoped_activity((void **)va);
  _Unwind_Resume(a1);
}

uint64_t BootController::powerCycleModem(BootController *this)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  os_activity_scope_state_s state;

  v2 = _os_activity_create(&dword_1BF335000, "Powercycle baseband", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
  state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(v2, &state);
  os_activity_scope_leave(&state);
  v3 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(state.opaque[0]) = 0;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Powercycle baseband", (uint8_t *)&state, 2u);
  }
  v4 = TelephonyBasebandPowercycleModem();
  if ((v4 & 1) == 0)
  {
    v5 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(state.opaque[0]) = 0;
      _os_log_error_impl(&dword_1BF335000, v5, OS_LOG_TYPE_ERROR, "Failed to powercycle baseband", (uint8_t *)&state, 2u);
      if (!v2)
        return v4;
      goto LABEL_6;
    }
  }
  if (v2)
LABEL_6:
    os_release(v2);
  return v4;
}

void sub_1BF3D25B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::os::scoped_activity::~scoped_activity((void **)va);
  _Unwind_Resume(a1);
}

uint64_t BootController::powerOffModem(BootController *this)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  os_activity_scope_state_s state;

  v2 = _os_activity_create(&dword_1BF335000, "Poweroff baseband", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
  state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(v2, &state);
  os_activity_scope_leave(&state);
  v3 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(state.opaque[0]) = 0;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Poweroff baseband", (uint8_t *)&state, 2u);
  }
  v4 = TelephonyBasebandPowerOnModem();
  if ((v4 & 1) == 0)
  {
    v5 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(state.opaque[0]) = 0;
      _os_log_error_impl(&dword_1BF335000, v5, OS_LOG_TYPE_ERROR, "Failed to poweroff baseband", (uint8_t *)&state, 2u);
      if (!v2)
        return v4;
      goto LABEL_6;
    }
  }
  if (v2)
LABEL_6:
    os_release(v2);
  return v4;
}

void sub_1BF3D26DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::os::scoped_activity::~scoped_activity((void **)va);
  _Unwind_Resume(a1);
}

void BootController::markNonvolatileDataErased(BootController *this)
{
  NSObject *v2;
  uint8_t v3[16];

  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Marking EFS as erased", v3, 2u);
  }
  *((_BYTE *)this + 80) = 1;
}

uint64_t BootController::setManagerState(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = TelephonyBasebandSetManagerState();
  if ((v2 & 1) != 0)
    return v2;
  v3 = *(NSObject **)(a1 + 40);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    return v2;
  *(_WORD *)v5 = 0;
  _os_log_error_impl(&dword_1BF335000, v3, OS_LOG_TYPE_ERROR, "Failed to set manager state", v5, 2u);
  return v2;
}

uint64_t BootController::getManagerState(uint64_t a1)
{
  uint64_t ManagerState;
  NSObject *v3;
  uint8_t v5[16];

  ManagerState = TelephonyBasebandGetManagerState();
  if ((ManagerState & 1) != 0)
    return ManagerState;
  v3 = *(NSObject **)(a1 + 40);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    return ManagerState;
  *(_WORD *)v5 = 0;
  _os_log_error_impl(&dword_1BF335000, v3, OS_LOG_TYPE_ERROR, "Failed to get manager state", v5, 2u);
  return ManagerState;
}

BOOL BootController::setBasebandState(capabilities::radio *a1)
{
  _BOOL8 result;
  NSObject *v3;
  uint8_t v4[16];

  if (!capabilities::radio::supportsBasebandStateController(a1))
    return 1;
  if ((TelephonyBasebandSetBasebandState() & 1) != 0)
    return 1;
  v3 = *((_QWORD *)a1 + 5);
  result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_1BF335000, v3, OS_LOG_TYPE_ERROR, "Failed to set baseband state", v4, 2u);
    return 0;
  }
  return result;
}

BOOL BootController::getBasebandState(capabilities::radio *a1, _DWORD *a2)
{
  _BOOL8 result;
  NSObject *v4;
  uint8_t v5[16];

  *a2 = 0;
  if (!capabilities::radio::supportsBasebandStateController(a1))
    return 1;
  if ((TelephonyBasebandGetBasebandState() & 1) != 0)
    return 1;
  v4 = *((_QWORD *)a1 + 5);
  result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_WORD *)v5 = 0;
    _os_log_error_impl(&dword_1BF335000, v4, OS_LOG_TYPE_ERROR, "Failed to get baseband state", v5, 2u);
    return 0;
  }
  return result;
}

const char *asString(_DWORD *a1)
{
  const char *v1;

  v1 = "Unknown";
  if (*a1 == 1)
    v1 = "PoweredOn";
  if (*a1)
    return v1;
  else
    return "LowPower";
}

const char *asString(int *a1)
{
  uint64_t v1;

  v1 = *a1;
  if (v1 > 2)
    return "Unknown";
  else
    return off_1E7901970[v1];
}

void SystemState::SystemState(SystemState *this)
{
  *(_QWORD *)this = 0x200000001;
  *((_DWORD *)this + 2) = -536870144;
}

{
  *(_QWORD *)this = 0x200000001;
  *((_DWORD *)this + 2) = -536870144;
}

uint64_t SystemState::acceptSystemNotification(SystemState *this, int a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = 0;
  HIDWORD(v3) = a2;
  LODWORD(v3) = a2 + 536870288;
  switch((v3 >> 4))
  {
    case 0u:
      if (*(_DWORD *)this != 1)
        return 0;
      *((_DWORD *)this + 1) = 0;
      goto LABEL_17;
    case 1u:
      if (*(_DWORD *)this != 1)
        return 0;
      if (*((_DWORD *)this + 1))
        *((_DWORD *)this + 1) = 1;
      *(_DWORD *)this = 0;
      goto LABEL_17;
    case 2u:
      if (!*((_DWORD *)this + 1))
        goto LABEL_12;
      return 0;
    case 9u:
      if (*(_DWORD *)this || *((_DWORD *)this + 1) != 2)
        return 0;
LABEL_12:
      *(_QWORD *)this = 0x200000001;
      goto LABEL_17;
    case 0xBu:
      if (*(_DWORD *)this || *((_DWORD *)this + 1) == 2)
        return 0;
      *((_DWORD *)this + 1) = 2;
LABEL_17:
      *((_DWORD *)this + 2) = a2;
      return 1;
    default:
      return v2;
  }
}

uint64_t SystemState::getSystemNotification(SystemState *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t SystemState::getPowerState(SystemState *this)
{
  return *(unsigned int *)this;
}

uint64_t SystemState::getSleepState(SystemState *this)
{
  return *((unsigned int *)this + 1);
}

void ClientGetLogServer(_QWORD *a1@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL19ClientLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_10;
  block[4] = &qword_1ED70FFA0;
  if (_MergedGlobals_7 == -1)
  {
    v2 = *(_QWORD *)algn_1ED70FFA8;
    *a1 = qword_1ED70FFA0;
    a1[1] = v2;
    if (!v2)
      return;
  }
  else
  {
    dispatch_once(&_MergedGlobals_7, block);
    v2 = *(_QWORD *)algn_1ED70FFA8;
    *a1 = qword_1ED70FFA0;
    a1[1] = v2;
    if (!v2)
      return;
  }
  v3 = (unint64_t *)(v2 + 8);
  do
    v4 = __ldxr(v3);
  while (__stxr(v4 + 1, v3));
}

uint64_t ___ZL19ClientLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  std::ios_base *v14;
  uint64_t v15;
  _QWORD *v16;
  const char *v17;
  size_t v18;
  _QWORD *v19;
  std::__shared_weak_count_vtbl *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v30;
  void *__p;
  _OWORD v32[4];
  void *v33[2];
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;

  __p = operator new(0x20uLL);
  v32[0] = xmmword_1BF53F2A0;
  strcpy((char *)__p, "AppleBasebandManagerClientLog");
  ctu::LogServer::create();
  v2 = *(_QWORD *)(a1 + 32);
  v3 = v46;
  v46 = 0uLL;
  v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)v2 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (*((_QWORD *)&v46 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v46 + 1) + 16))(*((_QWORD *)&v46 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v46 + 1));
      if ((SHIBYTE(v32[0]) & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  if (SHIBYTE(v32[0]) < 0)
LABEL_11:
    operator delete(__p);
LABEL_12:
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v34 = v9;
  v35 = 0xAAAAAAAAAAAAAAAALL;
  v45 = v9;
  v44 = v9;
  v43 = v9;
  v42 = v9;
  v41 = v9;
  v40 = v9;
  v39 = v9;
  v38 = v9;
  v37 = v9;
  v32[3] = v9;
  *(_OWORD *)v33 = v9;
  v32[1] = v9;
  v32[2] = v9;
  v32[0] = v9;
  v10 = MEMORY[0x1E0DE4FE0];
  v11 = MEMORY[0x1E0DE4FE0] + 64;
  v36 = MEMORY[0x1E0DE4FE0] + 64;
  v12 = MEMORY[0x1E0DE4F60];
  v13 = *(void **)(MEMORY[0x1E0DE4F60] + 16);
  __p = *(void **)(MEMORY[0x1E0DE4F60] + 8);
  *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = v13;
  v14 = (std::ios_base *)((char *)&__p + *((_QWORD *)__p - 3));
  std::ios_base::init(v14, v32);
  v14[1].__vftable = 0;
  v14[1].__fmtflags_ = -1;
  __p = (void *)(v10 + 24);
  v36 = v11;
  std::streambuf::basic_streambuf();
  v15 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v32[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v33 = 0u;
  v34 = 0u;
  LODWORD(v35) = 16;
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"/tmp/ABM.", 9);
  v17 = getprogname();
  v18 = strlen(v17);
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  LOBYTE(v46) = 46;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)&v46, 1);
  getpid();
  std::ostream::operator<<();
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_1E78FED40;
  *(_QWORD *)&v46 = v20;
  v21 = (std::__shared_weak_count *)operator new(0x20uLL);
  v21->__shared_owners_ = 0;
  v22 = (unint64_t *)&v21->__shared_owners_;
  v21->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E78FEDA8;
  v21->__shared_weak_owners_ = 0;
  v21[1].__vftable = v20;
  *((_QWORD *)&v46 + 1) = v21;
  v30 = v21;
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 + 1, v22));
  ctu::LogServer::addWriter();
  if (v30)
  {
    v24 = (unint64_t *)&v30->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  ctu::LogServer::start(**(ctu::LogServer ***)(a1 + 32));
  ctu::LogServer::setEnabled(**(ctu::LogServer ***)(a1 + 32));
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  if (*((_QWORD *)&v46 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  __p = *(void **)v12;
  *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(v12 + 24);
  *(_QWORD *)&v32[0] = v15 + 16;
  if (SBYTE7(v34) < 0)
    operator delete(v33[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B89E4C](&v36);
}

void sub_1BF3D2FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v17 - 80);
  std::ostringstream::~ostringstream((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_1BF3D3068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3B89E4C](a1 + 112);
  return a1;
}

uint64_t config::hw::watch(config::hw *this)
{
  ctu::Gestalt *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;

  v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v2 = off_1ED70FC60;
  if (!off_1ED70FC60)
  {
    ctu::Gestalt::create_default_global(v1);
    v3 = (std::__shared_weak_count *)*(&off_1ED70FC60 + 1);
    off_1ED70FC60 = v13;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v2 = off_1ED70FC60;
  }
  v6 = (std::__shared_weak_count *)*(&off_1ED70FC60 + 1);
  if (*(&off_1ED70FC60 + 1))
  {
    v7 = (unint64_t *)(*(&off_1ED70FC60 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 144))(v2);
  v10 = result;
  if (v6)
  {
    v11 = (unint64_t *)&v6->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      return v10;
    }
  }
  return result;
}

void sub_1BF3D324C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF3D3268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t config::hw::iPad(config::hw *this)
{
  ctu::Gestalt *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;

  v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v2 = off_1ED70FC60;
  if (!off_1ED70FC60)
  {
    ctu::Gestalt::create_default_global(v1);
    v3 = (std::__shared_weak_count *)*(&off_1ED70FC60 + 1);
    off_1ED70FC60 = v13;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v2 = off_1ED70FC60;
  }
  v6 = (std::__shared_weak_count *)*(&off_1ED70FC60 + 1);
  if (*(&off_1ED70FC60 + 1))
  {
    v7 = (unint64_t *)(*(&off_1ED70FC60 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 136))(v2);
  v10 = result;
  if (v6)
  {
    v11 = (unint64_t *)&v6->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      return v10;
    }
  }
  return result;
}

void sub_1BF3D33CC(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF3D33E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void config::hw::product(config::hw *this)
{
  ctu::Gestalt *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v2 = off_1ED70FC60;
  if (!off_1ED70FC60)
  {
    ctu::Gestalt::create_default_global(v1);
    v3 = (std::__shared_weak_count *)*(&off_1ED70FC60 + 1);
    off_1ED70FC60 = v11;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v2 = off_1ED70FC60;
  }
  v6 = (std::__shared_weak_count *)*(&off_1ED70FC60 + 1);
  if (*(&off_1ED70FC60 + 1))
  {
    v7 = (unint64_t *)(*(&off_1ED70FC60 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1BF3D3554(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF3D3570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void config::hw::deviceMaterial(config::hw *this)
{
  ctu::Gestalt *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v2 = off_1ED70FC60;
  if (!off_1ED70FC60)
  {
    ctu::Gestalt::create_default_global(v1);
    v3 = (std::__shared_weak_count *)*(&off_1ED70FC60 + 1);
    off_1ED70FC60 = v11;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v2 = off_1ED70FC60;
  }
  v6 = (std::__shared_weak_count *)*(&off_1ED70FC60 + 1);
  if (*(&off_1ED70FC60 + 1))
  {
    v7 = (unint64_t *)(*(&off_1ED70FC60 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 104))(v2);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1BF3D36DC(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF3D36F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void config::hw::getBootArgs(std::string *a1@<X8>)
{
  ctu::Gestalt *v3;
  uint64_t v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  _QWORD *v17;
  const void *v18;
  const void *v19;
  int v20;
  const void *v21;
  unint64_t v22;
  size_t v23;
  int v24;
  int v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  __int128 v29;
  void *__p[2];
  uint64_t v31;
  _QWORD v32[5];

  memset(v32, 170, 24);
  v3 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v4 = off_1ED70FC60;
  if (!off_1ED70FC60)
  {
    ctu::Gestalt::create_default_global(v3);
    v5 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v6 = (std::__shared_weak_count *)*(&off_1ED70FC60 + 1);
    off_1ED70FC60 = v5;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = off_1ED70FC60;
  }
  v9 = (std::__shared_weak_count *)*(&off_1ED70FC60 + 1);
  v32[3] = v4;
  v32[4] = *(&off_1ED70FC60 + 1);
  if (*(&off_1ED70FC60 + 1))
  {
    v10 = (unint64_t *)(*(&off_1ED70FC60 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v4 + 112))(v32, v4);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  HIBYTE(v31) = 9;
  strcpy((char *)__p, "boot-args");
  v14 = (uint64_t *)v32[1];
  if (v32[1])
  {
    while (1)
    {
      v16 = (uint64_t **)v14;
      v19 = (const void *)v14[4];
      v17 = v14 + 4;
      v18 = v19;
      v20 = *((char *)v17 + 23);
      if (v20 >= 0)
        v21 = v17;
      else
        v21 = v18;
      if (v20 >= 0)
        v22 = *((unsigned __int8 *)v17 + 23);
      else
        v22 = v17[1];
      if (v22 >= 9)
        v23 = 9;
      else
        v23 = v22;
      v24 = memcmp(__p, v21, v23);
      if (v24)
      {
        if (v24 < 0)
          goto LABEL_18;
LABEL_32:
        v25 = memcmp(v21, __p, v23);
        if (v25)
        {
          if ((v25 & 0x80000000) == 0)
            goto LABEL_43;
        }
        else if (v22 >= 9)
        {
LABEL_43:
          v26 = (char *)v16;
          if (*((char *)v16 + 79) < 0)
            goto LABEL_44;
LABEL_42:
          v29 = *(_OWORD *)(v26 + 56);
          a1->__r_.__value_.__r.__words[2] = *((_QWORD *)v26 + 9);
          *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v29;
          goto LABEL_45;
        }
        v14 = v16[1];
        if (!v14)
        {
          v15 = v16 + 1;
          goto LABEL_39;
        }
      }
      else
      {
        if (v22 <= 9)
          goto LABEL_32;
LABEL_18:
        v14 = *v16;
        v15 = v16;
        if (!*v16)
          goto LABEL_39;
      }
    }
  }
  v15 = (uint64_t **)&v32[1];
  v16 = (uint64_t **)&v32[1];
LABEL_39:
  v26 = (char *)operator new(0x50uLL);
  *((_OWORD *)v26 + 2) = *(_OWORD *)__p;
  v27 = v31;
  __p[1] = 0;
  v31 = 0;
  __p[0] = 0;
  *((_QWORD *)v26 + 6) = v27;
  *((_QWORD *)v26 + 7) = 0;
  *((_QWORD *)v26 + 8) = 0;
  *((_QWORD *)v26 + 9) = 0;
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = 0;
  *((_QWORD *)v26 + 2) = v16;
  *v15 = (uint64_t *)v26;
  v28 = (uint64_t *)v26;
  if (*(_QWORD *)v32[0])
  {
    v32[0] = *(_QWORD *)v32[0];
    v28 = *v15;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v32[1], v28);
  ++v32[2];
  if ((v26[79] & 0x80000000) == 0)
    goto LABEL_42;
LABEL_44:
  std::string::__init_copy_ctor_external(a1, *((const std::string::value_type **)v26 + 7), *((_QWORD *)v26 + 8));
LABEL_45:
  if (SHIBYTE(v31) < 0)
    operator delete(__p[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v32[1]);
}

void sub_1BF3D39DC(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF3D39F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF3D3A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  if (a14 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a16);
  _Unwind_Resume(a1);
}

void config::hw::regionCode(config::hw *this)
{
  ctu::Gestalt *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v2 = off_1ED70FC60;
  if (!off_1ED70FC60)
  {
    ctu::Gestalt::create_default_global(v1);
    v3 = (std::__shared_weak_count *)*(&off_1ED70FC60 + 1);
    off_1ED70FC60 = v11;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v2 = off_1ED70FC60;
  }
  v6 = (std::__shared_weak_count *)*(&off_1ED70FC60 + 1);
  if (*(&off_1ED70FC60 + 1))
  {
    v7 = (unint64_t *)(*(&off_1ED70FC60 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1BF3D3B88(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF3D3BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void config::hw::regionInfo(config::hw *this)
{
  ctu::Gestalt *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v2 = off_1ED70FC60;
  if (!off_1ED70FC60)
  {
    ctu::Gestalt::create_default_global(v1);
    v3 = (std::__shared_weak_count *)*(&off_1ED70FC60 + 1);
    off_1ED70FC60 = v11;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v2 = off_1ED70FC60;
  }
  v6 = (std::__shared_weak_count *)*(&off_1ED70FC60 + 1);
  if (*(&off_1ED70FC60 + 1))
  {
    v7 = (unint64_t *)(*(&off_1ED70FC60 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1BF3D3D10(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF3D3D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t config::build::carrier(config::build *this)
{
  uint64_t result;

  result = TelephonyUtilIsCarrierBuild();
  if ((_DWORD)result)
    return TelephonyUtilIsInternalBuild() ^ 1;
  return result;
}

uint64_t config::build::internal_or_carrier(config::build *this)
{
  if ((TelephonyUtilIsInternalBuild() & 1) != 0)
    return 1;
  else
    return TelephonyUtilIsCarrierBuild();
}

void config::build::version(config::build *this)
{
  ctu::Gestalt *v1;
  void (***v2)(_QWORD);
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v2 = (void (***)(_QWORD))off_1ED70FC60;
  if (!off_1ED70FC60)
  {
    ctu::Gestalt::create_default_global(v1);
    v3 = (std::__shared_weak_count *)*(&off_1ED70FC60 + 1);
    off_1ED70FC60 = v11;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v2 = (void (***)(_QWORD))off_1ED70FC60;
  }
  v6 = (std::__shared_weak_count *)*(&off_1ED70FC60 + 1);
  if (*(&off_1ED70FC60 + 1))
  {
    v7 = (unint64_t *)(*(&off_1ED70FC60 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (**v2)(v2);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1BF3D3EE0(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF3D3EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD *)(a1 + 8));
    if (*(char *)(a1 + 79) < 0)
    {
      operator delete(*(void **)(a1 + 56));
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_4;
    }
    else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_4:
      operator delete((void *)a1);
      return;
    }
    operator delete(*(void **)(a1 + 32));
    operator delete((void *)a1);
  }
}

uint64_t __cxx_global_var_init_6()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance, &dword_1BF335000);
  }
  return result;
}

void AWDModule::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  __int128 v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13[2];
  uint64_t v14;
  __int128 block;
  void (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  uint64_t *v19;

  *a2 = 0;
  a2[1] = 0;
  if (capabilities::radio::supportsMultiClientAWD((capabilities::radio *)a1))
  {
    v4 = operator new(0xC0uLL);
    v5 = (uint64_t)v4;
    v6 = *a1;
    v7 = (std::__shared_weak_count *)a1[1];
    v13[0] = v6;
    v13[1] = (uint64_t)v7;
    if (v7)
    {
      p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
    }
    AWDModule::AWDModule(v4, v13);
    *(_QWORD *)&block = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&block + 1) = 0xAAAAAAAAAAAAAAAALL;
    std::shared_ptr<AWDModule>::shared_ptr[abi:ne180100]<AWDModule,std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule*)#1},void>(&block, v5);
    ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(block + 48);
    v10 = block;
    block = 0uLL;
    *(_OWORD *)a2 = v10;
    if (v7)
    {
      v12 = v10;
      std::__shared_weak_count::__release_weak(v7);
      *(_QWORD *)&v10 = v12;
    }
    v14 = v10;
    *(_QWORD *)&block = MEMORY[0x1E0C809B0];
    *((_QWORD *)&block + 1) = 0x40000000;
    v16 = ___ZNK3ctu20SharedSynchronizableI9AWDModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
    v17 = &__block_descriptor_tmp_30_1;
    v18 = v10 + 120;
    v19 = &v14;
    v11 = *(NSObject **)(v10 + 136);
    if (*(_QWORD *)(v10 + 144))
      dispatch_async_and_wait(v11, &block);
    else
      dispatch_sync(v11, &block);
  }
}

void sub_1BF3D41A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  va_list va;

  va_start(va, a7);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v7);
  _Unwind_Resume(a1);
}

void sub_1BF3D4210(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AWDModule::init(AWDModule *this)
{
  NSObject *v1;
  char *v2;
  AWDModule *v3;
  _QWORD block[6];

  v3 = this;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI9AWDModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  block[3] = &__block_descriptor_tmp_30_1;
  block[4] = (char *)this + 120;
  block[5] = &v3;
  v2 = (char *)this + 136;
  v1 = *((_QWORD *)this + 17);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void AWDModule::~AWDModule(AWDModule *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;

  *(_QWORD *)this = off_1E79019B8;
  *((_QWORD *)this + 6) = &unk_1E7901A28;
  std::__tree<std::__value_type<abm::stats::StatsID,std::shared_ptr<Stats>>,std::__map_value_compare<abm::stats::StatsID,std::__value_type<abm::stats::StatsID,std::shared_ptr<Stats>>,std::less<abm::stats::StatsID>,true>,std::allocator<std::__value_type<abm::stats::StatsID,std::shared_ptr<Stats>>>>::destroy(*((_QWORD **)this + 22));
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *((_QWORD *)this + 6) = off_1E7901DB8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v5 = *((_QWORD *)this + 18);
  if (v5)
    dispatch_release(v5);
  v6 = *((_QWORD *)this + 17);
  if (v6)
    dispatch_release(v6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  *(_QWORD *)this = off_1E7908A38;
  v8 = *((_QWORD *)this + 3);
  if (v8)
  {
    v9 = *((_QWORD *)this + 4);
    v10 = (void *)*((_QWORD *)this + 3);
    if (v9 != v8)
    {
      do
      {
        if (*(char *)(v9 - 1) < 0)
          operator delete(*(void **)(v9 - 24));
        v9 -= 24;
      }
      while (v9 != v8);
      v10 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v8;
    operator delete(v10);
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
}

{
  void *v1;

  AWDModule::~AWDModule(this);
  operator delete(v1);
}

_QWORD *ctu::SharedLoggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7901DB8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7901DB8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void `non-virtual thunk to'AWDModule::~AWDModule(AWDModule *this)
{
  AWDModule::~AWDModule((AWDModule *)((char *)this - 48));
}

{
  void *v1;

  AWDModule::~AWDModule((AWDModule *)((char *)this - 48));
  operator delete(v1);
}

_QWORD *AWDModule::AWDModule(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unsigned __int8 v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  NSObject *initially_inactive;
  NSObject *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  CommandDriverFactory *v20;
  uint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  _BYTE v35[16];
  __int128 block;
  void (*v37)(uint64_t);
  void *v38;
  uint64_t *v39;
  _QWORD v40[2];

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *a1 = off_1E7908A38;
    a1[1] = v3;
    a1[2] = v4;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    a1[3] = 0;
    a1[4] = 0;
    a1[5] = 0;
    std::__shared_weak_count::__release_weak(v4);
    *a1 = &unk_1E78FC4E8;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *((_OWORD *)a1 + 1) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *a1 = &unk_1E78FC4E8;
    a1[1] = v3;
  }
  *a1 = off_1E79019B8;
  a1[6] = &unk_1E7901A28;
  v9 = a1 + 6;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v35, "com.apple.telephony.abm", "awd.mod");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 0x40000000;
  v37 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v38 = &__block_descriptor_tmp_13_2;
  v39 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v12 = GetABMLogServer(void)::sLogServer;
    v11 = *(std::__shared_weak_count **)algn_1ED710088;
    if (*(_QWORD *)algn_1ED710088)
      goto LABEL_12;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v12 = GetABMLogServer(void)::sLogServer;
    v11 = *(std::__shared_weak_count **)algn_1ED710088;
    if (*(_QWORD *)algn_1ED710088)
    {
LABEL_12:
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v16 = dispatch_queue_create_with_target_V2("awd.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v16, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v16);
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = v16;
  if (v16)
  {
    dispatch_retain(v16);
    a1[18] = 0;
    dispatch_release(v16);
  }
  else
  {
    a1[18] = 0;
  }
  a1[6] = off_1E7901DB8;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&block);
  a1[7] = &unk_1E78FB900;
  a1[13] = v12;
  a1[14] = v11;
  if (v11)
  {
    v17 = (unint64_t *)&v11->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v40);
    *v9 = off_1E7901E48;
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v40);
    *v9 = off_1E7901E48;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v35);
  *a1 = off_1E79019B8;
  a1[6] = &unk_1E7901A28;
  v20 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v21 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v20);
    v22 = block;
    block = 0uLL;
    v23 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v22;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = (std::__shared_weak_count *)*((_QWORD *)&block + 1);
    if (*((_QWORD *)&block + 1))
    {
      v27 = (unint64_t *)(*((_QWORD *)&block + 1) + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v21 = off_1ED70FD08;
  }
  v29 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  v40[0] = v21;
  v40[1] = *(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v30 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 64))(v21);
  if (v29)
  {
    v32 = (unint64_t *)&v29->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  a1[23] = 0;
  a1[22] = 0;
  a1[21] = a1 + 22;
  return a1;
}

void sub_1BF3D4860(_Unwind_Exception *a1)
{
  Service *v1;
  _QWORD *v2;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  ctu::SharedLoggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v2);
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void sub_1BF3D48A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  Service *v19;
  _QWORD *v20;

  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a19);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v20);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  Service::~Service(v19);
  _Unwind_Resume(a1);
}

void sub_1BF3D48E4(_Unwind_Exception *a1)
{
  Service *v1;

  Service::~Service(v1);
  _Unwind_Resume(a1);
}

const char *AWDModule::getName(AWDModule *this)
{
  return "awd.mod";
}

_BYTE *AWDModule::getShutdownStages@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *v3;
  _BYTE *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(1uLL);
  *a1 = v3;
  *v3 = 3;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void AWDModule::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  uint64_t *v4;
  NSObject *v5;
  _QWORD v6[5];
  dispatch_group_t group;
  char v8;

  v4 = (uint64_t *)(a1 + 120);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 1174405120;
  v6[2] = ___ZN9AWDModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v6[3] = &__block_descriptor_tmp_11;
  v5 = *a3;
  v6[4] = a1;
  group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  v8 = a2;
  ctu::SharedSynchronizable<AWDModule>::execute_wrapped(v4, (uint64_t)v6);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN9AWDModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 160);
  *(_QWORD *)(v1 + 152) = 0;
  *(_QWORD *)(v1 + 160) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void AWDModule::initialize(uint64_t a1, NSObject **a2)
{
  uint64_t *v2;
  NSObject *v3;
  _QWORD v4[5];
  dispatch_group_t group;

  v2 = (uint64_t *)(a1 + 120);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 1174405120;
  v4[2] = ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v4[3] = &__block_descriptor_tmp_12_3;
  v3 = *a2;
  v4[4] = a1;
  group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(v3);
  }
  ctu::SharedSynchronizable<AWDModule>::execute_wrapped(v2, (uint64_t)v4);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void *v10;
  size_t v11;
  size_t v12;
  void **p_dst;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  const void *v19;
  size_t v20;
  size_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  const void *v27;
  size_t v28;
  size_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  const void *v35;
  size_t v36;
  size_t v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  _QWORD v43[6];
  std::__shared_weak_count *v44;
  const void *v45;
  _QWORD v46[6];
  std::__shared_weak_count *v47;
  const void *v48;
  _QWORD v49[6];
  std::__shared_weak_count *v50;
  const void *v51;
  _QWORD aBlock[6];
  std::__shared_weak_count *v53;
  const void *v54;
  void **__dst;
  size_t v56;
  unint64_t v57;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (v3 = *(_QWORD *)(v1 + 120), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (const void *)*MEMORY[0x1E0CFB858];
  v11 = strlen((const char *)*MEMORY[0x1E0CFB858]);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (void **)operator new(v14 + 1);
    v56 = v12;
    v57 = v15 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v57) = v11;
    p_dst = (void **)&__dst;
    if (!v11)
      goto LABEL_17;
  }
  memmove(p_dst, v10, v12);
LABEL_17:
  *((_BYTE *)p_dst + v12) = 0;
  v16 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_5_6;
  aBlock[4] = v1;
  aBlock[5] = v3;
  v53 = v5;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  v18 = _Block_copy(aBlock);
  v54 = v18;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v54);
  if (v18)
    _Block_release(v18);
  if (SHIBYTE(v57) < 0)
    operator delete(__dst);
  v19 = (const void *)*MEMORY[0x1E0CFBAA0];
  v20 = strlen((const char *)*MEMORY[0x1E0CFBAA0]);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = (void **)operator new(v23 + 1);
    v56 = v21;
    v57 = v24 | 0x8000000000000000;
    __dst = v22;
  }
  else
  {
    HIBYTE(v57) = v20;
    v22 = (void **)&__dst;
    if (!v20)
      goto LABEL_31;
  }
  memmove(v22, v19, v21);
LABEL_31:
  *((_BYTE *)v22 + v21) = 0;
  v49[0] = v16;
  v49[1] = 1174405120;
  v49[2] = ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_6;
  v49[3] = &__block_descriptor_tmp_7_4;
  v49[4] = v1;
  v49[5] = v3;
  v50 = v5;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  v26 = _Block_copy(v49);
  v51 = v26;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v51);
  if (v26)
    _Block_release(v26);
  if (SHIBYTE(v57) < 0)
    operator delete(__dst);
  v27 = (const void *)*MEMORY[0x1E0CFB310];
  v28 = strlen((const char *)*MEMORY[0x1E0CFB310]);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v29 = v28;
  if (v28 >= 0x17)
  {
    v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v31 = v28 | 7;
    v32 = v31 + 1;
    v30 = (void **)operator new(v31 + 1);
    v56 = v29;
    v57 = v32 | 0x8000000000000000;
    __dst = v30;
  }
  else
  {
    HIBYTE(v57) = v28;
    v30 = (void **)&__dst;
    if (!v28)
      goto LABEL_45;
  }
  memmove(v30, v27, v29);
LABEL_45:
  *((_BYTE *)v30 + v29) = 0;
  v46[0] = v16;
  v46[1] = 1174405120;
  v46[2] = ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_8;
  v46[3] = &__block_descriptor_tmp_9_4;
  v46[4] = v1;
  v46[5] = v3;
  v47 = v5;
  do
    v33 = __ldxr(p_shared_weak_owners);
  while (__stxr(v33 + 1, p_shared_weak_owners));
  v34 = _Block_copy(v46);
  v48 = v34;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v48);
  if (v34)
    _Block_release(v34);
  if (SHIBYTE(v57) < 0)
    operator delete(__dst);
  v35 = (const void *)*MEMORY[0x1E0CFB8A0];
  v36 = strlen((const char *)*MEMORY[0x1E0CFB8A0]);
  if (v36 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v37 = v36;
  if (v36 >= 0x17)
  {
    v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v39 = v36 | 7;
    v40 = v39 + 1;
    v38 = (void **)operator new(v39 + 1);
    v56 = v37;
    v57 = v40 | 0x8000000000000000;
    __dst = v38;
  }
  else
  {
    HIBYTE(v57) = v36;
    v38 = (void **)&__dst;
    if (!v36)
      goto LABEL_59;
  }
  memmove(v38, v35, v37);
LABEL_59:
  *((_BYTE *)v38 + v37) = 0;
  v43[0] = v16;
  v43[1] = 1174405120;
  v43[2] = ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_10;
  v43[3] = &__block_descriptor_tmp_11_3;
  v43[4] = v1;
  v43[5] = v3;
  v44 = v5;
  do
    v41 = __ldxr(p_shared_weak_owners);
  while (__stxr(v41 + 1, p_shared_weak_owners));
  v42 = _Block_copy(v43);
  v45 = v42;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v45);
  if (v42)
    _Block_release(v42);
  if (SHIBYTE(v57) < 0)
    operator delete(__dst);
  if (v44)
    std::__shared_weak_count::__release_weak(v44);
  if (v47)
    std::__shared_weak_count::__release_weak(v47);
  if (v50)
    std::__shared_weak_count::__release_weak(v50);
  if (v53)
    std::__shared_weak_count::__release_weak(v53);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF3D4FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39)
{
  std::__shared_weak_count *v39;
  const void *v40;
  uint64_t v41;
  std::__shared_weak_count *v43;

  if (v40)
    _Block_release(v40);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if ((*(char *)(v41 - 105) & 0x80000000) == 0)
    {
LABEL_5:
      v43 = a23;
      if (!a23)
      {
LABEL_10:
        if (a31)
          std::__shared_weak_count::__release_weak(a31);
        if (a39)
        {
          std::__shared_weak_count::__release_weak(a39);
          std::__shared_weak_count::__release_weak(v39);
          _Unwind_Resume(a1);
        }
        std::__shared_weak_count::__release_weak(v39);
        _Unwind_Resume(a1);
      }
LABEL_9:
      std::__shared_weak_count::__release_weak(v43);
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v41 - 105) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v41 - 128));
  v43 = a23;
  if (!a23)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_2(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  xpc_object_t v14;
  const void *v15;
  void *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  xpc_object_t v25;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (!v10)
      {
LABEL_25:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v32 = __ldaxr(p_shared_owners);
        while (__stlxr(v32 - 1, p_shared_owners));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v11 = (std::__shared_weak_count *)a1[6];
      if (v11)
      {
        p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v13 = __ldxr(p_shared_weak_owners);
        while (__stxr(v13 + 1, p_shared_weak_owners));
      }
      v14 = *a2;
      if (v14)
      {
        xpc_retain(v14);
        v15 = *a3;
        if (*a3)
          goto LABEL_9;
      }
      else
      {
        v14 = xpc_null_create();
        v15 = *a3;
        if (*a3)
        {
LABEL_9:
          v16 = _Block_copy(v15);
          v17 = (std::__shared_weak_count *)v7[16];
          if (!v17)
LABEL_30:
            std::__throw_bad_weak_ptr[abi:ne180100]();
          goto LABEL_13;
        }
      }
      v16 = 0;
      v17 = (std::__shared_weak_count *)v7[16];
      if (!v17)
        goto LABEL_30;
LABEL_13:
      v18 = v7[15];
      v19 = std::__shared_weak_count::lock(v17);
      if (!v19)
        goto LABEL_30;
      v20 = v19;
      v21 = operator new(0x28uLL);
      v22 = v21;
      *v21 = v10;
      v21[1] = v11;
      if (v11)
      {
        v23 = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v21[2] = v7;
      v21[3] = v14;
      v25 = xpc_null_create();
      v22[4] = v16;
      v26 = v7[17];
      v27 = (unint64_t *)&v20->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      v29 = operator new(0x18uLL);
      *v29 = v22;
      v29[1] = v18;
      v29[2] = v20;
      dispatch_async_f(v26, v29, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      do
        v30 = __ldaxr(v27);
      while (__stlxr(v30 - 1, v27));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      xpc_release(v25);
      if (v11)
        std::__shared_weak_count::__release_weak(v11);
      goto LABEL_25;
    }
  }
}

uint64_t __copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9AWDModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9AWDModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_6(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  xpc_object_t v14;
  const void *v15;
  void *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  xpc_object_t v25;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (!v10)
      {
LABEL_25:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v32 = __ldaxr(p_shared_owners);
        while (__stlxr(v32 - 1, p_shared_owners));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v11 = (std::__shared_weak_count *)a1[6];
      if (v11)
      {
        p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v13 = __ldxr(p_shared_weak_owners);
        while (__stxr(v13 + 1, p_shared_weak_owners));
      }
      v14 = *a2;
      if (v14)
      {
        xpc_retain(v14);
        v15 = *a3;
        if (*a3)
          goto LABEL_9;
      }
      else
      {
        v14 = xpc_null_create();
        v15 = *a3;
        if (*a3)
        {
LABEL_9:
          v16 = _Block_copy(v15);
          v17 = (std::__shared_weak_count *)v7[16];
          if (!v17)
LABEL_30:
            std::__throw_bad_weak_ptr[abi:ne180100]();
          goto LABEL_13;
        }
      }
      v16 = 0;
      v17 = (std::__shared_weak_count *)v7[16];
      if (!v17)
        goto LABEL_30;
LABEL_13:
      v18 = v7[15];
      v19 = std::__shared_weak_count::lock(v17);
      if (!v19)
        goto LABEL_30;
      v20 = v19;
      v21 = operator new(0x28uLL);
      v22 = v21;
      *v21 = v10;
      v21[1] = v11;
      if (v11)
      {
        v23 = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v21[2] = v7;
      v21[3] = v14;
      v25 = xpc_null_create();
      v22[4] = v16;
      v26 = v7[17];
      v27 = (unint64_t *)&v20->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      v29 = operator new(0x18uLL);
      *v29 = v22;
      v29[1] = v18;
      v29[2] = v20;
      dispatch_async_f(v26, v29, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      do
        v30 = __ldaxr(v27);
      while (__stlxr(v30 - 1, v27));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      xpc_release(v25);
      if (v11)
        std::__shared_weak_count::__release_weak(v11);
      goto LABEL_25;
    }
  }
}

void ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_8(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  xpc_object_t v14;
  const void *v15;
  void *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  xpc_object_t v25;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (!v10)
      {
LABEL_25:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v32 = __ldaxr(p_shared_owners);
        while (__stlxr(v32 - 1, p_shared_owners));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v11 = (std::__shared_weak_count *)a1[6];
      if (v11)
      {
        p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v13 = __ldxr(p_shared_weak_owners);
        while (__stxr(v13 + 1, p_shared_weak_owners));
      }
      v14 = *a2;
      if (v14)
      {
        xpc_retain(v14);
        v15 = *a3;
        if (*a3)
          goto LABEL_9;
      }
      else
      {
        v14 = xpc_null_create();
        v15 = *a3;
        if (*a3)
        {
LABEL_9:
          v16 = _Block_copy(v15);
          v17 = (std::__shared_weak_count *)v7[16];
          if (!v17)
LABEL_30:
            std::__throw_bad_weak_ptr[abi:ne180100]();
          goto LABEL_13;
        }
      }
      v16 = 0;
      v17 = (std::__shared_weak_count *)v7[16];
      if (!v17)
        goto LABEL_30;
LABEL_13:
      v18 = v7[15];
      v19 = std::__shared_weak_count::lock(v17);
      if (!v19)
        goto LABEL_30;
      v20 = v19;
      v21 = operator new(0x28uLL);
      v22 = v21;
      *v21 = v10;
      v21[1] = v11;
      if (v11)
      {
        v23 = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v21[2] = v7;
      v21[3] = v14;
      v25 = xpc_null_create();
      v22[4] = v16;
      v26 = v7[17];
      v27 = (unint64_t *)&v20->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      v29 = operator new(0x18uLL);
      *v29 = v22;
      v29[1] = v18;
      v29[2] = v20;
      dispatch_async_f(v26, v29, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      do
        v30 = __ldaxr(v27);
      while (__stlxr(v30 - 1, v27));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      xpc_release(v25);
      if (v11)
        std::__shared_weak_count::__release_weak(v11);
      goto LABEL_25;
    }
  }
}

void ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_10(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  xpc_object_t v14;
  const void *v15;
  void *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  xpc_object_t v25;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (!v10)
      {
LABEL_25:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v32 = __ldaxr(p_shared_owners);
        while (__stlxr(v32 - 1, p_shared_owners));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v11 = (std::__shared_weak_count *)a1[6];
      if (v11)
      {
        p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v13 = __ldxr(p_shared_weak_owners);
        while (__stxr(v13 + 1, p_shared_weak_owners));
      }
      v14 = *a2;
      if (v14)
      {
        xpc_retain(v14);
        v15 = *a3;
        if (*a3)
          goto LABEL_9;
      }
      else
      {
        v14 = xpc_null_create();
        v15 = *a3;
        if (*a3)
        {
LABEL_9:
          v16 = _Block_copy(v15);
          v17 = (std::__shared_weak_count *)v7[16];
          if (!v17)
LABEL_30:
            std::__throw_bad_weak_ptr[abi:ne180100]();
          goto LABEL_13;
        }
      }
      v16 = 0;
      v17 = (std::__shared_weak_count *)v7[16];
      if (!v17)
        goto LABEL_30;
LABEL_13:
      v18 = v7[15];
      v19 = std::__shared_weak_count::lock(v17);
      if (!v19)
        goto LABEL_30;
      v20 = v19;
      v21 = operator new(0x28uLL);
      v22 = v21;
      *v21 = v10;
      v21[1] = v11;
      if (v11)
      {
        v23 = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v21[2] = v7;
      v21[3] = v14;
      v25 = xpc_null_create();
      v22[4] = v16;
      v26 = v7[17];
      v27 = (unint64_t *)&v20->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      v29 = operator new(0x18uLL);
      *v29 = v22;
      v29[1] = v18;
      v29[2] = v20;
      dispatch_async_f(v26, v29, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      do
        v30 = __ldaxr(v27);
      while (__stlxr(v30 - 1, v27));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      xpc_release(v25);
      if (v11)
        std::__shared_weak_count::__release_weak(v11);
      goto LABEL_25;
    }
  }
}

void AWDModule::sendPayload_sync(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  NSObject *v17;
  _QWORD v18[4];
  void *v19;
  void *aBlock;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint8_t buf[16];

  v6 = *(_QWORD *)(a1 + 152);
  if (v6)
  {
    v9 = (std::__shared_weak_count *)a2[1];
    v21 = *a2;
    v22 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 1174405120;
    v18[2] = ___ZN9AWDModule16sendPayload_syncENSt3__110shared_ptrIN3awd10AppContextEEENS2_11PayloadTypeERKNS0_6vectorIhNS0_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
    v18[3] = &__block_descriptor_tmp_14_0;
    v12 = *(void **)a5;
    if (*(_QWORD *)a5)
      v12 = _Block_copy(v12);
    v19 = v12;
    aBlock = _Block_copy(v18);
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, void **))(*(_QWORD *)v6 + 56))(v6, &v21, a3, a4, &aBlock);
    if (aBlock)
      _Block_release(aBlock);
    v13 = v22;
    if (!v22)
      goto LABEL_13;
    v14 = (unint64_t *)&v22->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      v16 = v19;
      if (!v19)
        return;
    }
    else
    {
LABEL_13:
      v16 = v19;
      if (!v19)
        return;
    }
    _Block_release(v16);
  }
  else
  {
    v17 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF335000, v17, OS_LOG_TYPE_ERROR, "Cannot send payload because driver is unavailable", buf, 2u);
    }
    (*(void (**)(void))(*(_QWORD *)a5 + 16))();
  }
}

void sub_1BF3D5AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *aBlock, char a15)
{
  if (aBlock)
    _Block_release(aBlock);
  if (a13)
    _Block_release(a13);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN9AWDModule16sendPayload_syncENSt3__110shared_ptrIN3awd10AppContextEEENS2_11PayloadTypeERKNS0_6vectorIhNS0_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void AWDModule::enableMetricSubmission_sync(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  NSObject *v15;
  _QWORD v16[4];
  void *v17;
  void *aBlock;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint8_t buf[16];

  v5 = *(_QWORD *)(a1 + 152);
  if (v5)
  {
    v7 = (std::__shared_weak_count *)a2[1];
    v19 = *a2;
    v20 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 1174405120;
    v16[2] = ___ZN9AWDModule27enableMetricSubmission_syncENSt3__110shared_ptrIN3awd10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
    v16[3] = &__block_descriptor_tmp_15_2;
    v10 = *(void **)a4;
    if (*(_QWORD *)a4)
      v10 = _Block_copy(v10);
    v17 = v10;
    aBlock = _Block_copy(v16);
    (*(void (**)(uint64_t, uint64_t *, uint64_t, void **))(*(_QWORD *)v5 + 48))(v5, &v19, a3, &aBlock);
    if (aBlock)
      _Block_release(aBlock);
    v11 = v20;
    if (!v20)
      goto LABEL_13;
    v12 = (unint64_t *)&v20->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v14 = v17;
      if (!v17)
        return;
    }
    else
    {
LABEL_13:
      v14 = v17;
      if (!v17)
        return;
    }
    _Block_release(v14);
  }
  else
  {
    v15 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF335000, v15, OS_LOG_TYPE_ERROR, "Cannot enable metric submission because driver is unavailable", buf, 2u);
    }
    (*(void (**)(void))(*(_QWORD *)a4 + 16))();
  }
}

void sub_1BF3D5C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *aBlock, char a15)
{
  if (aBlock)
    _Block_release(aBlock);
  if (a13)
    _Block_release(a13);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN9AWDModule27enableMetricSubmission_syncENSt3__110shared_ptrIN3awd10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void AWDModule::clearConfiguration_sync(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  NSObject *v13;
  _QWORD v14[4];
  void *v15;
  void *aBlock;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint8_t buf[16];

  v4 = *(_QWORD *)(a1 + 152);
  if (v4)
  {
    v5 = (std::__shared_weak_count *)a2[1];
    v17 = *a2;
    v18 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 1174405120;
    v14[2] = ___ZN9AWDModule23clearConfiguration_syncENSt3__110shared_ptrIN3awd10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
    v14[3] = &__block_descriptor_tmp_16_0;
    v8 = *(void **)a3;
    if (*(_QWORD *)a3)
      v8 = _Block_copy(v8);
    v15 = v8;
    aBlock = _Block_copy(v14);
    (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v4 + 64))(v4, &v17, &aBlock);
    if (aBlock)
      _Block_release(aBlock);
    v9 = v18;
    if (!v18)
      goto LABEL_13;
    v10 = (unint64_t *)&v18->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      v12 = v15;
      if (!v15)
        return;
    }
    else
    {
LABEL_13:
      v12 = v15;
      if (!v15)
        return;
    }
    _Block_release(v12);
  }
  else
  {
    v13 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF335000, v13, OS_LOG_TYPE_ERROR, "Cannot clear configuration because driver is unavailable", buf, 2u);
    }
    (*(void (**)(void))(*(_QWORD *)a3 + 16))();
  }
}

void sub_1BF3D5E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *aBlock, char a15)
{
  if (aBlock)
    _Block_release(aBlock);
  if (a13)
    _Block_release(a13);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN9AWDModule23clearConfiguration_syncENSt3__110shared_ptrIN3awd10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void AWDModule::updateProperties_sync(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  NSObject *v13;
  _QWORD v14[4];
  void *v15;
  void *aBlock;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint8_t buf[16];

  v4 = *(_QWORD *)(a1 + 152);
  if (v4)
  {
    v5 = (std::__shared_weak_count *)a2[1];
    v17 = *a2;
    v18 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 1174405120;
    v14[2] = ___ZN9AWDModule21updateProperties_syncENSt3__110shared_ptrIN3awd10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
    v14[3] = &__block_descriptor_tmp_17_0;
    v8 = *(void **)a3;
    if (*(_QWORD *)a3)
      v8 = _Block_copy(v8);
    v15 = v8;
    aBlock = _Block_copy(v14);
    (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v4 + 72))(v4, &v17, &aBlock);
    if (aBlock)
      _Block_release(aBlock);
    v9 = v18;
    if (!v18)
      goto LABEL_13;
    v10 = (unint64_t *)&v18->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      v12 = v15;
      if (!v15)
        return;
    }
    else
    {
LABEL_13:
      v12 = v15;
      if (!v15)
        return;
    }
    _Block_release(v12);
  }
  else
  {
    v13 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF335000, v13, OS_LOG_TYPE_ERROR, "Cannot update properties because driver is unavailable", buf, 2u);
    }
    (*(void (**)(void))(*(_QWORD *)a3 + 16))();
  }
}

void sub_1BF3D5FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *aBlock, char a15)
{
  if (aBlock)
    _Block_release(aBlock);
  if (a13)
    _Block_release(a13);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN9AWDModule21updateProperties_syncENSt3__110shared_ptrIN3awd10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void AWDModule::queryMetric_sync(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  NSObject *v17;
  _QWORD v18[4];
  void *v19;
  void *aBlock;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint8_t buf[16];

  v6 = *(_QWORD *)(a1 + 152);
  if (v6)
  {
    v9 = (std::__shared_weak_count *)a2[1];
    v21 = *a2;
    v22 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 1174405120;
    v18[2] = ___ZN9AWDModule16queryMetric_syncENSt3__110shared_ptrIN3awd10AppContextEEENS2_10MetricInfoENS2_11TriggerInfoEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
    v18[3] = &__block_descriptor_tmp_18_2;
    v12 = *(void **)a5;
    if (*(_QWORD *)a5)
      v12 = _Block_copy(v12);
    v19 = v12;
    aBlock = _Block_copy(v18);
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, void **))(*(_QWORD *)v6 + 88))(v6, &v21, a3, a4, &aBlock);
    if (aBlock)
      _Block_release(aBlock);
    v13 = v22;
    if (!v22)
      goto LABEL_13;
    v14 = (unint64_t *)&v22->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      v16 = v19;
      if (!v19)
        return;
    }
    else
    {
LABEL_13:
      v16 = v19;
      if (!v19)
        return;
    }
    _Block_release(v16);
  }
  else
  {
    v17 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF335000, v17, OS_LOG_TYPE_ERROR, "Cannot query metric because driver is unavailable", buf, 2u);
    }
    (*(void (**)(void))(*(_QWORD *)a5 + 16))();
  }
}

void sub_1BF3D61C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *aBlock, char a15)
{
  if (aBlock)
    _Block_release(aBlock);
  if (a13)
    _Block_release(a13);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN9AWDModule16queryMetric_syncENSt3__110shared_ptrIN3awd10AppContextEEENS2_10MetricInfoENS2_11TriggerInfoEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void AWDModule::appCheckIn_sync(uint64_t a1@<X0>, unsigned int a2@<W1>, char **a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  NSObject *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t **v21;
  unsigned int v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  char *v26;
  char *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  NSObject *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  _QWORD v51[6];
  std::__shared_weak_count *v52;
  char *v53;
  std::__shared_weak_count *v54;
  void *v55;
  _QWORD v56[6];
  std::__shared_weak_count *v57;
  char *v58;
  std::__shared_weak_count *v59;
  void *v60;
  _QWORD aBlock[6];
  std::__shared_weak_count *v62;
  void *v63;
  uint8_t buf[4];
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v5 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v5 || (v48 = *(_QWORD *)(a1 + 120), (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  *a3 = (char *)0xAAAAAAAAAAAAAAAALL;
  a3[1] = (char *)0xAAAAAAAAAAAAAAAALL;
  v49 = v8;
  v13 = (char *)operator new(0x58uLL);
  v14 = v13;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  *(_QWORD *)v13 = off_1E7902030;
  v15 = v13 + 24;
  v16 = *(NSObject **)(a1 + 136);
  if (v16)
  {
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
    *((_QWORD *)v14 + 3) = v16;
    dispatch_retain(v16);
    *(_WORD *)(v14 + 33) = 0;
    *(_OWORD *)(v14 + 40) = 0u;
    *(_OWORD *)(v14 + 56) = 0u;
    *(_OWORD *)(v14 + 72) = 0u;
    v14[32] = a2;
    dispatch_release(v16);
  }
  else
  {
    *((_QWORD *)v13 + 3) = 0;
    *(_WORD *)(v13 + 33) = 0;
    *(_OWORD *)(v13 + 40) = 0u;
    *(_OWORD *)(v13 + 56) = 0u;
    *(_OWORD *)(v13 + 72) = 0u;
    v13[32] = a2;
  }
  *a3 = v15;
  a3[1] = v14;
  v17 = (unint64_t *)(v14 + 16);
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  v20 = (uint64_t **)(a1 + 176);
  v19 = *(uint64_t **)(a1 + 176);
  if (v19)
  {
    while (1)
    {
      while (1)
      {
        v21 = (uint64_t **)v19;
        v22 = *((unsigned __int8 *)v19 + 32);
        if (v22 <= a2)
          break;
        v19 = *v21;
        v20 = v21;
        if (!*v21)
          goto LABEL_21;
      }
      if (v22 >= a2)
        break;
      v19 = v21[1];
      if (!v19)
      {
        v20 = v21 + 1;
        goto LABEL_21;
      }
    }
    v26 = v15;
    v27 = v14;
    goto LABEL_26;
  }
  v21 = (uint64_t **)(a1 + 176);
LABEL_21:
  v23 = operator new(0x38uLL);
  *((_BYTE *)v23 + 32) = a2;
  *((_QWORD *)v23 + 5) = 0;
  *((_QWORD *)v23 + 6) = 0;
  *(_QWORD *)v23 = 0;
  *((_QWORD *)v23 + 1) = 0;
  *((_QWORD *)v23 + 2) = v21;
  *v20 = (uint64_t *)v23;
  v24 = **(_QWORD **)(a1 + 168);
  v25 = (uint64_t *)v23;
  if (v24)
  {
    *(_QWORD *)(a1 + 168) = v24;
    v25 = *v20;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 176), v25);
  ++*(_QWORD *)(a1 + 184);
  v26 = *a3;
  v27 = a3[1];
  if (v27)
  {
    v21 = (uint64_t **)v23;
LABEL_26:
    v28 = (unint64_t *)(v27 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    v23 = v21;
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)v23 + 6);
  *((_QWORD *)v23 + 5) = v26;
  *((_QWORD *)v23 + 6) = v27;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
      v33 = *(NSObject **)(a1 + 88);
      if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        goto LABEL_35;
      goto LABEL_34;
    }
  }
  v33 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
LABEL_34:
    *(_DWORD *)buf = 136315138;
    v65 = awd::asString();
    _os_log_impl(&dword_1BF335000, v33, OS_LOG_TYPE_DEFAULT, "#I New app checking-in: %s", buf, 0xCu);
  }
LABEL_35:
  v34 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_20;
  aBlock[4] = a1;
  aBlock[5] = v48;
  v62 = v49;
  do
    v35 = __ldxr(p_shared_weak_owners);
  while (__stxr(v35 + 1, p_shared_weak_owners));
  v63 = _Block_copy(aBlock);
  awd::AppContext::setHandler();
  if (v63)
    _Block_release(v63);
  v56[0] = v34;
  v56[1] = 1174405120;
  v56[2] = ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke_21;
  v56[3] = &__block_descriptor_tmp_23_1;
  v56[4] = a1;
  v56[5] = v48;
  v57 = v49;
  do
    v36 = __ldxr(p_shared_weak_owners);
  while (__stxr(v36 + 1, p_shared_weak_owners));
  v58 = v15;
  v59 = (std::__shared_weak_count *)v14;
  do
    v37 = __ldxr(v17);
  while (__stxr(v37 + 1, v17));
  v60 = _Block_copy(v56);
  awd::AppContext::setHandler();
  if (v60)
    _Block_release(v60);
  v51[0] = v34;
  v51[1] = 1174405120;
  v51[2] = ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke_24;
  v51[3] = &__block_descriptor_tmp_26;
  v51[4] = a1;
  v51[5] = v48;
  v52 = v49;
  do
    v38 = __ldxr(p_shared_weak_owners);
  while (__stxr(v38 + 1, p_shared_weak_owners));
  v53 = v15;
  v54 = (std::__shared_weak_count *)v14;
  do
    v39 = __ldxr(v17);
  while (__stxr(v39 + 1, v17));
  v55 = _Block_copy(v51);
  awd::AppContext::setHandler();
  if (v55)
    _Block_release(v55);
  if (*(_QWORD *)(a1 + 152))
  {
    v40 = (std::__shared_weak_count *)a3[1];
    v50 = v40;
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    awd::AwdCommandDriver::checkIn();
    if (v50)
    {
      v43 = (unint64_t *)&v50->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
        v45 = v54;
        if (!v54)
          goto LABEL_64;
LABEL_63:
        std::__shared_weak_count::__release_weak(v45);
        goto LABEL_64;
      }
    }
LABEL_62:
    v45 = v54;
    if (!v54)
      goto LABEL_64;
    goto LABEL_63;
  }
  v46 = *(NSObject **)(a1 + 88);
  if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    goto LABEL_62;
  v47 = awd::asString();
  *(_DWORD *)buf = 136315138;
  v65 = v47;
  _os_log_error_impl(&dword_1BF335000, v46, OS_LOG_TYPE_ERROR, "Cannot check in context of app %s because driver is unavailable", buf, 0xCu);
  v45 = v54;
  if (v54)
    goto LABEL_63;
LABEL_64:
  if (v52)
    std::__shared_weak_count::__release_weak(v52);
  if (v59)
    std::__shared_weak_count::__release_weak(v59);
  if (v57)
    std::__shared_weak_count::__release_weak(v57);
  if (v62)
    std::__shared_weak_count::__release_weak(v62);
  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v14);
  std::__shared_weak_count::__release_weak(v49);
}

void sub_1BF3D676C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,std::__shared_weak_count *a21,void *aBlock,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,std::__shared_weak_count *a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39)
{
  std::__shared_weak_count *v39;
  uint64_t v40;

  if (a21)
    std::__shared_weak_count::__release_weak(a21);
  if (a19)
    std::__shared_weak_count::__release_weak(a19);
  if (a31)
    std::__shared_weak_count::__release_weak(a31);
  if (a29)
    std::__shared_weak_count::__release_weak(a29);
  if (a39)
    std::__shared_weak_count::__release_weak(a39);
  std::__shared_weak_count::__release_weak(v39);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v40);
  std::__shared_weak_count::__release_weak(a10);
  _Unwind_Resume(a1);
}

void sub_1BF3D6844(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3D6860()
{
  JUMPOUT(0x1BF3D6834);
}

void ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t buf[4];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          v10 = awd::asString();
          _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, "#I Client state: %s", buf, 0xCu);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF3D696C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke_21(_QWORD *a1, uint64_t a2, int *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  int v9;
  std::__shared_weak_count *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  std::__shared_weak_count *v13;
  unsigned int AppID;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  const void *v25;
  size_t v26;
  void *v27;
  void **v28;
  const object *v29;
  uint64_t v30;
  uint64_t v31;
  CFTypeRef v32;
  CFTypeID v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  void *aBlock;
  xpc_object_t object;
  CFTypeRef cf;
  CFTypeRef v42;
  void *__dst[2];
  unint64_t v44;
  std::__shared_weak_count *v46;
  uint8_t buf[8];
  std::__shared_weak_count *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v6 = a1[4];
  v7 = std::__shared_weak_count::lock(v4);
  v46 = v7;
  if (!v7)
    return;
  if (!a1[5])
  {
    v13 = v7;
LABEL_54:
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    return;
  }
  v8 = *(NSObject **)(v6 + 88);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *a3;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v9;
    _os_log_impl(&dword_1BF335000, v8, OS_LOG_TYPE_DEFAULT, "#I Received trigger 0x%x", buf, 8u);
  }
  *(_QWORD *)buf = 0;
  v48 = 0;
  v10 = (std::__shared_weak_count *)a1[8];
  if (v10)
  {
    v48 = std::__shared_weak_count::lock(v10);
    if (v48)
      *(_QWORD *)buf = a1[7];
  }
  v11 = xpc_dictionary_create(0, 0, 0);
  if (v11 || (v11 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v11) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v11);
      v12 = v11;
    }
    else
    {
      v12 = xpc_null_create();
    }
  }
  else
  {
    v12 = xpc_null_create();
    v11 = 0;
  }
  xpc_release(v11);
  AppID = awd::AppContext::getAppID(*(awd::AppContext **)buf);
  v15 = xpc_int64_create(AppID);
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E0CFC210], v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v17 = xpc_int64_create(a3[1]);
  if (!v17)
    v17 = xpc_null_create();
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E0CFB080], v17);
  v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  v19 = xpc_int64_create(a3[2]);
  if (!v19)
    v19 = xpc_null_create();
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E0CFB108], v19);
  v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  v21 = xpc_int64_create(*a3);
  if (!v21)
    v21 = xpc_null_create();
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E0CFB038], v21);
  v22 = xpc_null_create();
  xpc_release(v21);
  xpc_release(v22);
  v23 = xpc_int64_create(*((_QWORD *)a3 + 2));
  if (!v23)
    v23 = xpc_null_create();
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E0CFB100], v23);
  v24 = xpc_null_create();
  xpc_release(v23);
  xpc_release(v24);
  v25 = (const void *)*MEMORY[0x1E0CFAFD8];
  v26 = strlen((const char *)*MEMORY[0x1E0CFAFD8]);
  if (v26 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v27 = (void *)v26;
  if (v26 >= 0x17)
  {
    v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v30 = v26 | 7;
    v31 = v30 + 1;
    v28 = (void **)operator new(v30 + 1);
    __dst[1] = v27;
    v44 = v31 | 0x8000000000000000;
    __dst[0] = v28;
LABEL_34:
    memmove(v28, v25, (size_t)v27);
    *((_BYTE *)v27 + (_QWORD)v28) = 0;
    object = v12;
    if (v12)
      goto LABEL_30;
LABEL_35:
    object = xpc_null_create();
    goto LABEL_36;
  }
  HIBYTE(v44) = v26;
  v28 = __dst;
  if (v26)
    goto LABEL_34;
  LOBYTE(__dst[0]) = 0;
  object = v12;
  if (!v12)
    goto LABEL_35;
LABEL_30:
  xpc_retain(v12);
LABEL_36:
  xpc::bridge((xpc *)&object, v29);
  v32 = cf;
  if (cf && (v33 = CFGetTypeID(cf), v33 == CFDictionaryGetTypeID()))
  {
    v42 = v32;
    CFRetain(v32);
  }
  else
  {
    v42 = 0;
  }
  aBlock = 0;
  Service::broadcastEvent(v6, (uint64_t)__dst, &v42, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (v42)
    CFRelease(v42);
  if (cf)
    CFRelease(cf);
  xpc_release(object);
  if (SHIBYTE(v44) < 0)
    operator delete(__dst[0]);
  xpc_release(v12);
  v34 = v48;
  if (v48)
  {
    v35 = (unint64_t *)&v48->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v13 = v46;
  if (v46)
    goto LABEL_54;
}

void sub_1BF3D6E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, xpc_object_t object, char a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

_QWORD *__copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9AWDModuleEE56c41_ZTSNSt3__18weak_ptrIN3awd10AppContextEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[8];
  result[7] = a2[7];
  result[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9AWDModuleEE56c41_ZTSNSt3__18weak_ptrIN3awd10AppContextEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke_24(_QWORD *a1, int *a2, int a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  uint64_t v9;
  std::__shared_weak_count *v10;
  NSObject *v11;
  int v12;
  xpc_object_t v13;
  xpc_object_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unsigned int AppID;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  const void *v34;
  size_t v35;
  void *v36;
  void **v37;
  const object *v38;
  uint64_t v39;
  uint64_t v40;
  CFTypeRef v41;
  CFTypeID v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  void *aBlock;
  xpc_object_t object;
  CFTypeRef cf;
  CFTypeRef v51;
  void *__dst[2];
  unint64_t v53;
  std::__shared_weak_count *v55;
  uint8_t buf[8];
  std::__shared_weak_count *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v5 = (std::__shared_weak_count *)a1[6];
  if (!v5)
    return;
  v9 = a1[4];
  v10 = std::__shared_weak_count::lock(v5);
  v55 = v10;
  if (!v10)
    return;
  if (!a1[5])
  {
    v15 = v10;
LABEL_62:
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    return;
  }
  v11 = *(NSObject **)(v9 + 88);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = a2[1];
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = a3;
    LOWORD(v57) = 1024;
    *(_DWORD *)((char *)&v57 + 2) = v12;
    _os_log_impl(&dword_1BF335000, v11, OS_LOG_TYPE_DEFAULT, "#I Received segment %d of metric 0x%x", buf, 0xEu);
  }
  v13 = xpc_dictionary_create(0, 0, 0);
  if (v13 || (v13 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v13) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v13);
      v14 = v13;
    }
    else
    {
      v14 = xpc_null_create();
    }
  }
  else
  {
    v14 = xpc_null_create();
    v13 = 0;
  }
  xpc_release(v13);
  *(_QWORD *)buf = 0;
  v57 = 0;
  v16 = (std::__shared_weak_count *)a1[8];
  if (v16)
  {
    v16 = std::__shared_weak_count::lock(v16);
    v57 = v16;
    if (v16)
    {
      v16 = (std::__shared_weak_count *)a1[7];
      *(_QWORD *)buf = v16;
    }
  }
  AppID = awd::AppContext::getAppID((awd::AppContext *)v16);
  v18 = xpc_int64_create(AppID);
  if (!v18)
    v18 = xpc_null_create();
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E0CFC210], v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  v20 = xpc_int64_create(a2[3]);
  if (!v20)
    v20 = xpc_null_create();
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E0CFB080], v20);
  v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  v22 = xpc_int64_create(*a2);
  if (!v22)
    v22 = xpc_null_create();
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E0CFB008], v22);
  v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  v24 = xpc_int64_create(a2[1]);
  if (!v24)
    v24 = xpc_null_create();
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E0CFAFB8], v24);
  v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  v26 = xpc_BOOL_create(*((_BYTE *)a2 + 16));
  if (!v26)
    v26 = xpc_null_create();
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E0CFAF70], v26);
  v27 = xpc_null_create();
  xpc_release(v26);
  xpc_release(v27);
  v28 = xpc_BOOL_create(*((_BYTE *)a2 + 17));
  if (!v28)
    v28 = xpc_null_create();
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E0CFB158], v28);
  v29 = xpc_null_create();
  xpc_release(v28);
  xpc_release(v29);
  if (*((_BYTE *)a2 + 24))
  {
    v30 = xpc_int64_create(a2[5]);
    if (!v30)
      v30 = xpc_null_create();
    xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E0CFB150], v30);
    v31 = xpc_null_create();
    xpc_release(v30);
    xpc_release(v31);
  }
  v32 = xpc_data_create(*(const void **)a4, *(_QWORD *)(a4 + 8) - *(_QWORD *)a4);
  if (!v32)
    v32 = xpc_null_create();
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E0CFAF78], v32);
  v33 = xpc_null_create();
  xpc_release(v32);
  xpc_release(v33);
  v34 = (const void *)*MEMORY[0x1E0CFAFB0];
  v35 = strlen((const char *)*MEMORY[0x1E0CFAFB0]);
  if (v35 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v36 = (void *)v35;
  if (v35 >= 0x17)
  {
    v39 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v39 = v35 | 7;
    v40 = v39 + 1;
    v37 = (void **)operator new(v39 + 1);
    __dst[1] = v36;
    v53 = v40 | 0x8000000000000000;
    __dst[0] = v37;
LABEL_42:
    memmove(v37, v34, (size_t)v36);
    *((_BYTE *)v36 + (_QWORD)v37) = 0;
    object = v14;
    if (v14)
      goto LABEL_38;
LABEL_43:
    object = xpc_null_create();
    goto LABEL_44;
  }
  HIBYTE(v53) = v35;
  v37 = __dst;
  if (v35)
    goto LABEL_42;
  LOBYTE(__dst[0]) = 0;
  object = v14;
  if (!v14)
    goto LABEL_43;
LABEL_38:
  xpc_retain(v14);
LABEL_44:
  xpc::bridge((xpc *)&object, v38);
  v41 = cf;
  if (cf && (v42 = CFGetTypeID(cf), v42 == CFDictionaryGetTypeID()))
  {
    v51 = v41;
    CFRetain(v41);
  }
  else
  {
    v51 = 0;
  }
  aBlock = 0;
  Service::broadcastEvent(v9, (uint64_t)__dst, &v51, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (v51)
    CFRelease(v51);
  if (cf)
    CFRelease(cf);
  xpc_release(object);
  if (SHIBYTE(v53) < 0)
    operator delete(__dst[0]);
  v43 = v57;
  if (v57)
  {
    v44 = (unint64_t *)&v57->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  xpc_release(v14);
  v15 = v55;
  if (v55)
    goto LABEL_62;
}

void sub_1BF3D7550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, xpc_object_t object, char a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7901DB8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7901DB8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF3D7900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF3D791C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<AWDModule>::shared_ptr[abi:ne180100]<AWDModule,std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E7901DF8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF3D7A38(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule*)#1}::operator() const(AWDModule*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF3D7A58(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AWDModule *,std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule *)#1},std::allocator<AWDModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<AWDModule *,std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule *)#1},std::allocator<AWDModule>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule*)#1}::operator() const(AWDModule*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<AWDModule *,std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule *)#1},std::allocator<AWDModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI9AWDModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI9AWDModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI9AWDModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI9AWDModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule*)#1}::operator() const(AWDModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedLoggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7901DB8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void ___ZNK3ctu20SharedSynchronizableI9AWDModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(**(_QWORD **)(a1 + 40) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1BF335000, v1, OS_LOG_TYPE_DEFAULT, "#I Initializing", v2, 2u);
  }
}

void ctu::SharedSynchronizable<AWDModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E7901EA0;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c37_ZTSNSt3__110shared_ptrIK9AWDModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__110shared_ptrIK9AWDModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  const void *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  char *value;
  unsigned __int8 v15;
  capabilities::abs *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  char *v23;
  char *v24;
  unsigned __int8 v25;
  xpc_object_t v26;
  void *v27;
  unint64_t *v28;
  unint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  _QWORD aBlock[6];
  void *v44;
  char *v45;
  std::__shared_weak_count *v46;
  void *v47;
  uint64_t v48[2];
  xpc_object_t object;
  void *__p[3];
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  int v54;
  char *v55;
  char *v56;
  uint64_t v57;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  v51 = 0;
  v52 = &v51;
  v53 = 0x2000000000;
  v54 = -534716414;
  if (MEMORY[0x1C3B8A86C](*(_QWORD *)(v2 + 24)) == MEMORY[0x1E0C812F8])
  {
    value = (char *)xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFC210]);
    v55 = value;
    if (value)
      xpc_retain(value);
    else
      v55 = (char *)xpc_null_create();
    v15 = xpc::dyn_cast_or_default((xpc *)&v55, (const object *)0xFFFFFFFFLL);
    xpc_release(v55);
    if (v15 != 1)
    {
      if (v15)
      {
        if ((v15 - 2) > 3u)
          goto LABEL_2;
      }
      else if ((capabilities::abs::supportsWirelessTelemetryUsingMultiClientModel(v16) & 1) == 0)
      {
        goto LABEL_2;
      }
    }
    v17 = *(_QWORD *)(v3 + 176);
    if (!v17)
      goto LABEL_35;
    v18 = v3 + 176;
    do
    {
      v19 = *(unsigned __int8 *)(v17 + 32);
      v20 = v19 >= v15;
      if (v19 >= v15)
        v21 = (uint64_t *)v17;
      else
        v21 = (uint64_t *)(v17 + 8);
      if (v20)
        v18 = v17;
      v17 = *v21;
    }
    while (*v21);
    if (v18 != v3 + 176 && *(unsigned __int8 *)(v18 + 32) <= v15)
    {
      v23 = *(char **)(v18 + 40);
      v22 = *(std::__shared_weak_count **)(v18 + 48);
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v42 = __ldxr(p_shared_owners);
        while (__stxr(v42 + 1, p_shared_owners));
      }
    }
    else
    {
LABEL_35:
      AWDModule::appCheckIn_sync(v3, v15, &v55);
      v23 = v55;
      v22 = (std::__shared_weak_count *)v56;
    }
    if (v23)
    {
      *((_DWORD *)v52 + 6) = -534716416;
      v24 = (char *)xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFB0D8]);
      v55 = v24;
      if (v24)
        xpc_retain(v24);
      else
        v55 = (char *)xpc_null_create();
      v25 = xpc::dyn_cast_or_default((xpc *)&v55, (const object *)0xFFFFFFFFLL);
      xpc_release(v55);
      memset(__p, 170, sizeof(__p));
      v26 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFAF78]);
      object = v26;
      if (v26)
        xpc_retain(v26);
      else
        object = xpc_null_create();
      v55 = 0;
      v56 = 0;
      v57 = 0;
      xpc::dyn_cast_or_default();
      if (v55)
      {
        v56 = v55;
        operator delete(v55);
      }
      xpc_release(object);
      v27 = __p[0];
      if (__p[1] != __p[0] && v25 <= 2u)
      {
        v48[0] = (uint64_t)v23;
        v48[1] = (uint64_t)v22;
        if (v22)
        {
          v28 = (unint64_t *)&v22->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__1clEv_block_invoke;
        aBlock[3] = &unk_1E7901F10;
        aBlock[5] = v3;
        v30 = *(void **)(v2 + 32);
        if (v30)
          v30 = _Block_copy(v30);
        v44 = v30;
        v45 = v23;
        v46 = v22;
        if (v22)
        {
          v31 = (unint64_t *)&v22->__shared_owners_;
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
        }
        aBlock[4] = &v51;
        v33 = _Block_copy(aBlock);
        v47 = v33;
        AWDModule::sendPayload_sync(v3, v48, v25, (uint64_t)__p, (uint64_t)&v47);
        if (v33)
          _Block_release(v33);
        if (v22)
        {
          v34 = (unint64_t *)&v22->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v36 = v46;
        if (v46)
        {
          v37 = (unint64_t *)&v46->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        if (v44)
          _Block_release(v44);
        v27 = __p[0];
      }
      if (v27)
      {
        __p[1] = v27;
        operator delete(v27);
      }
    }
    if (v22)
    {
      v39 = (unint64_t *)&v22->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
LABEL_2:
  v4 = v52;
  if (*((_DWORD *)v52 + 6) == -534716414)
  {
    v5 = (char *)xpc_null_create();
    v6 = *(_QWORD *)(v2 + 32);
    v7 = *((unsigned int *)v4 + 6);
    v55 = v5;
    v8 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, char **))(v6 + 16))(v6, v7, &v55);
    xpc_release(v55);
    xpc_release(v8);
    _Block_object_dispose(&v51, 8);
  }
  else
  {
    _Block_object_dispose(&v51, 8);
    if (!v2)
      goto LABEL_10;
  }
  v9 = *(const void **)(v2 + 32);
  if (v9)
    _Block_release(v9);
  xpc_release(*(xpc_object_t *)(v2 + 24));
  *(_QWORD *)(v2 + 24) = 0;
  v10 = *(std::__shared_weak_count **)(v2 + 8);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  operator delete((void *)v2);
LABEL_10:
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(a1);
}

void sub_1BF3D825C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *aBlock, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,xpc_object_t object,void *__p,uint64_t a24)
{
  _QWORD *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  const void *v27;
  uint64_t v28;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  const void *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;

  if (v27)
    _Block_release(v27);
  if (a18)
  {
    p_shared_owners = (unint64_t *)&a18->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
    }
  }
  if (aBlock)
    _Block_release(aBlock);
  if (a21)
  {
    v32 = (unint64_t *)&a21->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))a21->__on_zero_shared)(a21);
      std::__shared_weak_count::__release_weak(a21);
    }
  }
  if (__p)
    operator delete(__p);
  if (v26)
  {
    v34 = (unint64_t *)&v26->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  _Block_object_dispose((const void *)(v28 - 120), 8);
  v36 = *(const void **)(v25 + 32);
  if (v36)
    _Block_release(v36);
  xpc_release(*(xpc_object_t *)(v25 + 24));
  *(_QWORD *)(v25 + 24) = 0;
  v37 = *(std::__shared_weak_count **)(v25 + 8);
  if (v37)
    std::__shared_weak_count::__release_weak(v37);
  operator delete((void *)v25);
  v38 = (std::__shared_weak_count *)v24[2];
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  operator delete(v24);
  _Unwind_Resume(a1);
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__1clEv_block_invoke(_QWORD *a1, char a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  void *v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  xpc_object_t v12;
  uint64_t v13;
  xpc_object_t v14;
  _QWORD aBlock[5];
  void *v16;
  char v17;
  void *v18;
  uint64_t v19[2];
  xpc_object_t v20;

  if ((a2 & 1) != 0)
  {
    v3 = a1[5];
    v4 = (std::__shared_weak_count *)a1[8];
    v19[0] = a1[7];
    v19[1] = (uint64_t)v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__1clEv_block_invoke_2;
    aBlock[3] = &unk_1E7901ED8;
    aBlock[4] = a1[4];
    v17 = 1;
    v7 = (void *)a1[6];
    if (v7)
      v7 = _Block_copy(v7);
    v16 = v7;
    v8 = _Block_copy(aBlock);
    v18 = v8;
    AWDModule::enableMetricSubmission_sync(v3, v19, 1, (uint64_t)&v18);
    if (v8)
      _Block_release(v8);
    if (!v4)
      goto LABEL_13;
    v9 = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v11 = v16;
      if (v16)
        goto LABEL_14;
    }
    else
    {
LABEL_13:
      v11 = v16;
      if (v16)
LABEL_14:
        _Block_release(v11);
    }
  }
  else
  {
    v12 = xpc_null_create();
    v13 = a1[6];
    v20 = v12;
    v14 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v13 + 16))(v13, 3760250880, &v20);
    xpc_release(v20);
    xpc_release(v14);
  }
}

void sub_1BF3D8600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *aBlock)
{
  void *v15;
  uint64_t v16;

  xpc_release(*(xpc_object_t *)(v16 - 40));
  xpc_release(v15);
  _Unwind_Resume(a1);
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__1clEv_block_invoke_2(uint64_t a1, unsigned __int8 a2)
{
  int v3;
  uint64_t v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  xpc_object_t object;

  if (((*(_BYTE *)(a1 + 48) != 0) & a2) != 0)
    v3 = 0;
  else
    v3 = -534716416;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = xpc_null_create();
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(unsigned int *)(v4 + 24);
  object = v5;
  v8 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &object);
  xpc_release(object);
  xpc_release(v8);
}

void sub_1BF3D8700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE56c44_ZTSNSt3__110shared_ptrIN3awd10AppContextEEE(_QWORD *a1, _QWORD *a2)
{
  void *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (void *)a2[6];
  if (result)
    result = _Block_copy(result);
  v6 = a2[7];
  v5 = a2[8];
  a1[6] = result;
  a1[7] = v6;
  a1[8] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void __destroy_helper_block_e8_48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE56c44_ZTSNSt3__110shared_ptrIN3awd10AppContextEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  const void *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(const void **)(a1 + 48);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(const void **)(a1 + 48);
    if (!v5)
      return;
  }
  _Block_release(v5);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  const void *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  xpc_object_t value;
  unsigned __int8 v15;
  capabilities::abs *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  void *v25;
  void *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD v29[6];
  void *aBlock;
  uint64_t v31;
  void *v32;
  uint64_t v33[2];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  xpc_object_t v38;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  v34 = 0;
  v35 = &v34;
  v36 = 0x2000000000;
  v37 = -534716414;
  if (MEMORY[0x1C3B8A86C](*(_QWORD *)(v2 + 24)) == MEMORY[0x1E0C812F8])
  {
    value = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFC210]);
    v38 = value;
    if (value)
      xpc_retain(value);
    else
      v38 = xpc_null_create();
    v15 = xpc::dyn_cast_or_default((xpc *)&v38, (const object *)0xFFFFFFFFLL);
    xpc_release(v38);
    if (v15 != 1)
    {
      if (v15)
      {
        if (v15 - 2 > 3)
          goto LABEL_2;
      }
      else if ((capabilities::abs::supportsWirelessTelemetryUsingMultiClientModel(v16) & 1) == 0)
      {
        goto LABEL_2;
      }
    }
    v17 = *(_QWORD *)(v3 + 176);
    if (v17)
    {
      v18 = v3 + 176;
      do
      {
        v19 = *(unsigned __int8 *)(v17 + 32);
        v20 = v19 >= v15;
        if (v19 >= v15)
          v21 = (uint64_t *)v17;
        else
          v21 = (uint64_t *)(v17 + 8);
        if (v20)
          v18 = v17;
        v17 = *v21;
      }
      while (*v21);
      if (v18 != v3 + 176 && *(unsigned __int8 *)(v18 + 32) <= v15)
      {
        *((_DWORD *)v35 + 6) = -534716416;
        v22 = *(std::__shared_weak_count **)(v18 + 48);
        v33[0] = *(_QWORD *)(v18 + 40);
        v33[1] = (uint64_t)v22;
        if (v22)
        {
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldxr(p_shared_owners);
          while (__stxr(v24 + 1, p_shared_owners));
        }
        v29[0] = MEMORY[0x1E0C809B0];
        v29[1] = 1174405120;
        v29[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__2clEv_block_invoke;
        v29[3] = &unk_1E7901F80;
        v29[5] = v3;
        v25 = *(void **)(v2 + 32);
        if (v25)
          v25 = _Block_copy(v25);
        aBlock = v25;
        v31 = v18;
        v29[4] = &v34;
        v26 = _Block_copy(v29);
        v32 = v26;
        AWDModule::clearConfiguration_sync(v3, v33, (uint64_t)&v32);
        if (v26)
          _Block_release(v26);
        if (v22)
        {
          v27 = (unint64_t *)&v22->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        if (aBlock)
          _Block_release(aBlock);
      }
    }
  }
LABEL_2:
  v4 = v35;
  if (*((_DWORD *)v35 + 6) == -534716414)
  {
    v5 = xpc_null_create();
    v6 = *(_QWORD *)(v2 + 32);
    v7 = *((unsigned int *)v4 + 6);
    v38 = v5;
    v8 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &v38);
    xpc_release(v38);
    xpc_release(v8);
    _Block_object_dispose(&v34, 8);
  }
  else
  {
    _Block_object_dispose(&v34, 8);
    if (!v2)
      goto LABEL_10;
  }
  v9 = *(const void **)(v2 + 32);
  if (v9)
    _Block_release(v9);
  xpc_release(*(xpc_object_t *)(v2 + 24));
  *(_QWORD *)(v2 + 24) = 0;
  v10 = *(std::__shared_weak_count **)(v2 + 8);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  operator delete((void *)v2);
LABEL_10:
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(a1);
}

void sub_1BF3D8AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *aBlock, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  _QWORD *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  const void *v23;
  unint64_t *p_shared_owners;
  unint64_t v26;
  const void *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;

  if (v23)
    _Block_release(v23);
  if (aBlock)
    _Block_release(aBlock);
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  _Block_object_dispose(&a20, 8);
  v27 = *(const void **)(v21 + 32);
  if (v27)
    _Block_release(v27);
  xpc_release(*(xpc_object_t *)(v21 + 24));
  *(_QWORD *)(v21 + 24) = 0;
  v28 = *(std::__shared_weak_count **)(v21 + 8);
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  operator delete((void *)v21);
  v29 = (std::__shared_weak_count *)v20[2];
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  operator delete(v20);
  _Unwind_Resume(a1);
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__2clEv_block_invoke(_QWORD *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  void *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  xpc_object_t v13;
  uint64_t v14;
  xpc_object_t v15;
  _QWORD aBlock[5];
  void *v17;
  char v18;
  void *v19;
  uint64_t v20[2];
  xpc_object_t v21;

  if ((a2 & 1) != 0)
  {
    v3 = a1[5];
    v4 = a1[7];
    v5 = *(std::__shared_weak_count **)(v4 + 48);
    v20[0] = *(_QWORD *)(v4 + 40);
    v20[1] = (uint64_t)v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__2clEv_block_invoke_2;
    aBlock[3] = &unk_1E7901F48;
    aBlock[4] = a1[4];
    v18 = 1;
    v8 = (void *)a1[6];
    if (v8)
      v8 = _Block_copy(v8);
    v17 = v8;
    v9 = _Block_copy(aBlock);
    v19 = v9;
    AWDModule::enableMetricSubmission_sync(v3, v20, 0, (uint64_t)&v19);
    if (v9)
      _Block_release(v9);
    if (!v5)
      goto LABEL_13;
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      v12 = v17;
      if (v17)
        goto LABEL_14;
    }
    else
    {
LABEL_13:
      v12 = v17;
      if (v17)
LABEL_14:
        _Block_release(v12);
    }
  }
  else
  {
    v13 = xpc_null_create();
    v14 = a1[6];
    v21 = v13;
    v15 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v14 + 16))(v14, 3760250880, &v21);
    xpc_release(v21);
    xpc_release(v15);
  }
}

void sub_1BF3D8D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *aBlock)
{
  void *v15;
  uint64_t v16;

  xpc_release(*(xpc_object_t *)(v16 - 40));
  xpc_release(v15);
  _Unwind_Resume(a1);
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__2clEv_block_invoke_2(uint64_t a1, unsigned __int8 a2)
{
  int v3;
  uint64_t v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  xpc_object_t object;

  if (((*(_BYTE *)(a1 + 48) != 0) & a2) != 0)
    v3 = 0;
  else
    v3 = -534716416;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = xpc_null_create();
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(unsigned int *)(v4 + 24);
  object = v5;
  v8 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &object);
  xpc_release(object);
  xpc_release(v8);
}

void sub_1BF3D8E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 48);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 48);
  if (v1)
    _Block_release(v1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  const void *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  xpc_object_t value;
  unsigned __int8 v15;
  capabilities::abs *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t *v21;
  xpc_object_t v22;
  xpc_object_t v23;
  int v24;
  xpc_object_t v25;
  int v26;
  xpc_object_t v27;
  int v28;
  xpc_object_t v29;
  int v30;
  xpc_object_t v31;
  int v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  void *v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;
  int v41;
  _QWORD aBlock[5];
  void *v43;
  void *v44;
  _DWORD v45[4];
  uint64_t v46;
  _DWORD v47[7];
  uint64_t v48[2];
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  xpc_object_t v53[2];

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  v49 = 0;
  v50 = &v49;
  v51 = 0x2000000000;
  v52 = -534716414;
  if (MEMORY[0x1C3B8A86C](*(_QWORD *)(v2 + 24)) == MEMORY[0x1E0C812F8])
  {
    value = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFC210]);
    v53[0] = value;
    if (value)
      xpc_retain(value);
    else
      v53[0] = xpc_null_create();
    v15 = xpc::dyn_cast_or_default((xpc *)v53, (const object *)0xFFFFFFFFLL);
    xpc_release(v53[0]);
    if (v15 <= 5u
      && (((1 << v15) & 0x36) != 0
       || !v15 && capabilities::abs::supportsWirelessTelemetryUsingMultiClientModel(v16)))
    {
      v17 = *(_QWORD *)(v3 + 176);
      if (v17)
      {
        v18 = v3 + 176;
        do
        {
          v19 = *(unsigned __int8 *)(v17 + 32);
          v20 = v19 >= v15;
          if (v19 >= v15)
            v21 = (uint64_t *)v17;
          else
            v21 = (uint64_t *)(v17 + 8);
          if (v20)
            v18 = v17;
          v17 = *v21;
        }
        while (*v21);
        if (v18 != v3 + 176 && *(unsigned __int8 *)(v18 + 32) <= v15)
        {
          *((_DWORD *)v50 + 6) = -534716416;
          v22 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFB080]);
          v53[0] = v22;
          if (v22)
            xpc_retain(v22);
          else
            v53[0] = xpc_null_create();
          v41 = xpc::dyn_cast_or_default((xpc *)v53, 0);
          xpc_release(v53[0]);
          v23 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFB108]);
          v53[0] = v23;
          if (v23)
            xpc_retain(v23);
          else
            v53[0] = xpc_null_create();
          v24 = xpc::dyn_cast_or_default((xpc *)v53, 0);
          xpc_release(v53[0]);
          v25 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFB038]);
          v53[0] = v25;
          if (v25)
            xpc_retain(v25);
          else
            v53[0] = xpc_null_create();
          v26 = xpc::dyn_cast_or_default((xpc *)v53, 0);
          xpc_release(v53[0]);
          v27 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFB008]);
          v53[0] = v27;
          if (v27)
            xpc_retain(v27);
          else
            v53[0] = xpc_null_create();
          v28 = xpc::dyn_cast_or_default((xpc *)v53, 0);
          xpc_release(v53[0]);
          v29 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFAFB8]);
          v53[0] = v29;
          if (v29)
            xpc_retain(v29);
          else
            v53[0] = xpc_null_create();
          v30 = xpc::dyn_cast_or_default((xpc *)v53, 0);
          xpc_release(v53[0]);
          v31 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFB168]);
          v53[0] = v31;
          if (v31)
            xpc_retain(v31);
          else
            v53[0] = xpc_null_create();
          v32 = xpc::dyn_cast_or_default((xpc *)v53, 0);
          xpc_release(v53[0]);
          v33 = *(_QWORD *)(v18 + 40);
          v34 = *(std::__shared_weak_count **)(v18 + 48);
          v48[0] = v33;
          v48[1] = (uint64_t)v34;
          if (v34)
          {
            p_shared_owners = (unint64_t *)&v34->__shared_owners_;
            do
              v36 = __ldxr(p_shared_owners);
            while (__stxr(v36 + 1, p_shared_owners));
          }
          v47[0] = v28;
          v47[1] = v30;
          v47[2] = 0;
          v47[3] = v32;
          v47[4] = -1431699456;
          v47[5] = -1431655936;
          v47[6] = -1431655936;
          v45[0] = v26;
          v45[1] = v41;
          v45[2] = v24;
          v45[3] = -1431655766;
          v46 = 0;
          aBlock[0] = MEMORY[0x1E0C809B0];
          aBlock[1] = 1174405120;
          aBlock[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb2_ENK3__3clEv_block_invoke;
          aBlock[3] = &unk_1E7901FB8;
          aBlock[4] = &v49;
          v37 = *(void **)(v2 + 32);
          if (v37)
            v37 = _Block_copy(v37);
          v43 = v37;
          v38 = _Block_copy(aBlock);
          v44 = v38;
          AWDModule::queryMetric_sync(v3, v48, (uint64_t)v47, (uint64_t)v45, (uint64_t)&v44);
          if (v38)
            _Block_release(v38);
          if (v34)
          {
            v39 = (unint64_t *)&v34->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
          if (v43)
            _Block_release(v43);
        }
      }
    }
  }
  v4 = v50;
  if (*((_DWORD *)v50 + 6) == -534716414)
  {
    v5 = xpc_null_create();
    v6 = *(_QWORD *)(v2 + 32);
    v7 = *((unsigned int *)v4 + 6);
    v53[0] = v5;
    v8 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, v53);
    xpc_release(v53[0]);
    xpc_release(v8);
    _Block_object_dispose(&v49, 8);
  }
  else
  {
    _Block_object_dispose(&v49, 8);
    if (!v2)
      goto LABEL_10;
  }
  v9 = *(const void **)(v2 + 32);
  if (v9)
    _Block_release(v9);
  xpc_release(*(xpc_object_t *)(v2 + 24));
  *(_QWORD *)(v2 + 24) = 0;
  v10 = *(std::__shared_weak_count **)(v2 + 8);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  operator delete((void *)v2);
LABEL_10:
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(a1);
}

void sub_1BF3D93F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *aBlock)
{
  _QWORD *v16;
  uint64_t v17;
  const void *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v23;
  const void *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;

  if (v18)
    _Block_release(v18);
  if (aBlock)
    _Block_release(aBlock);
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  _Block_object_dispose((const void *)(v20 - 128), 8);
  v24 = *(const void **)(v17 + 32);
  if (v24)
    _Block_release(v24);
  xpc_release(*(xpc_object_t *)(v17 + 24));
  *(_QWORD *)(v17 + 24) = 0;
  v25 = *(std::__shared_weak_count **)(v17 + 8);
  if (v25)
    std::__shared_weak_count::__release_weak(v25);
  operator delete((void *)v17);
  v26 = (std::__shared_weak_count *)v16[2];
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb2_ENK3__3clEv_block_invoke(uint64_t a1, int a2)
{
  int v3;
  uint64_t v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  xpc_object_t object;

  if (a2)
    v3 = 0;
  else
    v3 = -534716416;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = xpc_null_create();
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(unsigned int *)(v4 + 24);
  object = v5;
  v8 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &object);
  xpc_release(object);
  xpc_release(v8);
}

void sub_1BF3D968C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  const void *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  xpc_object_t value;
  unsigned __int8 v15;
  capabilities::abs *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t *v21;
  xpc_object_t v22;
  char v23;
  xpc_object_t v24;
  char v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  void *v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD v33[5];
  void *aBlock;
  void *v35;
  uint64_t v36[2];
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  xpc_object_t v41;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  v37 = 0;
  v38 = &v37;
  v39 = 0x2000000000;
  v40 = -534716414;
  if (MEMORY[0x1C3B8A86C](*(_QWORD *)(v2 + 24)) == MEMORY[0x1E0C812F8])
  {
    value = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFC210]);
    v41 = value;
    if (value)
      xpc_retain(value);
    else
      v41 = xpc_null_create();
    v15 = xpc::dyn_cast_or_default((xpc *)&v41, (const object *)0xFFFFFFFFLL);
    xpc_release(v41);
    if (v15 <= 5u
      && (((1 << v15) & 0x36) != 0
       || !v15 && capabilities::abs::supportsWirelessTelemetryUsingMultiClientModel(v16)))
    {
      v17 = *(_QWORD *)(v3 + 176);
      if (v17)
      {
        v18 = v3 + 176;
        do
        {
          v19 = *(unsigned __int8 *)(v17 + 32);
          v20 = v19 >= v15;
          if (v19 >= v15)
            v21 = (uint64_t *)v17;
          else
            v21 = (uint64_t *)(v17 + 8);
          if (v20)
            v18 = v17;
          v17 = *v21;
        }
        while (*v21);
        if (v18 != v3 + 176 && *(unsigned __int8 *)(v18 + 32) <= v15)
        {
          *((_DWORD *)v38 + 6) = -534716416;
          v22 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFB350]);
          v41 = v22;
          if (v22)
            xpc_retain(v22);
          else
            v41 = xpc_null_create();
          v23 = xpc::dyn_cast_or_default((xpc *)&v41, 0);
          xpc_release(v41);
          v24 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFB068]);
          v41 = v24;
          if (v24)
            xpc_retain(v24);
          else
            v41 = xpc_null_create();
          v25 = xpc::dyn_cast_or_default((xpc *)&v41, 0);
          xpc_release(v41);
          LOWORD(v41) = -21846;
          BYTE2(v41) = -86;
          LOBYTE(v41) = awd::AppContext::getProperties(*(awd::AppContext **)(v18 + 40));
          BYTE1(v41) = v25;
          BYTE2(v41) = v23;
          awd::AppContext::setProperties();
          v26 = *(std::__shared_weak_count **)(v18 + 48);
          v36[0] = *(_QWORD *)(v18 + 40);
          v36[1] = (uint64_t)v26;
          if (v26)
          {
            p_shared_owners = (unint64_t *)&v26->__shared_owners_;
            do
              v28 = __ldxr(p_shared_owners);
            while (__stxr(v28 + 1, p_shared_owners));
          }
          v33[0] = MEMORY[0x1E0C809B0];
          v33[1] = 1174405120;
          v33[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb3_ENK3__4clEv_block_invoke;
          v33[3] = &unk_1E7901FF0;
          v33[4] = &v37;
          v29 = *(void **)(v2 + 32);
          if (v29)
            v29 = _Block_copy(v29);
          aBlock = v29;
          v30 = _Block_copy(v33);
          v35 = v30;
          AWDModule::updateProperties_sync(v3, v36, (uint64_t)&v35);
          if (v30)
            _Block_release(v30);
          if (v26)
          {
            v31 = (unint64_t *)&v26->__shared_owners_;
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          if (aBlock)
            _Block_release(aBlock);
        }
      }
    }
  }
  v4 = v38;
  if (*((_DWORD *)v38 + 6) == -534716414)
  {
    v5 = xpc_null_create();
    v6 = *(_QWORD *)(v2 + 32);
    v7 = *((unsigned int *)v4 + 6);
    v41 = v5;
    v8 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &v41);
    xpc_release(v41);
    xpc_release(v8);
    _Block_object_dispose(&v37, 8);
  }
  else
  {
    _Block_object_dispose(&v37, 8);
    if (!v2)
      goto LABEL_10;
  }
  v9 = *(const void **)(v2 + 32);
  if (v9)
    _Block_release(v9);
  xpc_release(*(xpc_object_t *)(v2 + 24));
  *(_QWORD *)(v2 + 24) = 0;
  v10 = *(std::__shared_weak_count **)(v2 + 8);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  operator delete((void *)v2);
LABEL_10:
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(a1);
}

void sub_1BF3D9A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  const void *v21;
  unint64_t *p_shared_owners;
  unint64_t v24;
  const void *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;

  if (v21)
    _Block_release(v21);
  if (aBlock)
    _Block_release(aBlock);
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  _Block_object_dispose(&a18, 8);
  v25 = *(const void **)(v19 + 32);
  if (v25)
    _Block_release(v25);
  xpc_release(*(xpc_object_t *)(v19 + 24));
  *(_QWORD *)(v19 + 24) = 0;
  v26 = *(std::__shared_weak_count **)(v19 + 8);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  operator delete((void *)v19);
  v27 = (std::__shared_weak_count *)v18[2];
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  operator delete(v18);
  _Unwind_Resume(a1);
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb3_ENK3__4clEv_block_invoke(uint64_t a1, int a2)
{
  int v3;
  uint64_t v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  xpc_object_t object;

  if (a2)
    v3 = 0;
  else
    v3 = -534716416;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = xpc_null_create();
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(unsigned int *)(v4 + 24);
  object = v5;
  v8 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &object);
  xpc_release(object);
  xpc_release(v8);
}

void sub_1BF3D9C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<awd::AppContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E7902030;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<awd::AppContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E7902030;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<awd::AppContext>::__on_zero_shared(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  NSObject *v8;

  v2 = (const void *)a1[10];
  if (v2)
    _Block_release(v2);
  v3 = (const void *)a1[9];
  if (v3)
    _Block_release(v3);
  v4 = (const void *)a1[8];
  if (v4)
    _Block_release(v4);
  v5 = (const void *)a1[7];
  if (v5)
    _Block_release(v5);
  v6 = (const void *)a1[6];
  if (v6)
    _Block_release(v6);
  v7 = (const void *)a1[5];
  if (v7)
    _Block_release(v7);
  v8 = a1[3];
  if (v8)
    dispatch_release(v8);
}

uint64_t __cxx_global_var_init_27()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1BF335000);
  }
  return result;
}

void NetworkingModule::create(uint64_t *a1@<X0>, NetworkingModule **a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  uint64_t v10[2];

  *a2 = (NetworkingModule *)0xAAAAAAAAAAAAAAAALL;
  a2[1] = (NetworkingModule *)0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0xC8uLL);
  v5 = (uint64_t)v4;
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  v10[0] = v6;
  v10[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  NetworkingModule::NetworkingModule((uint64_t)v4, v10);
  *a2 = (NetworkingModule *)0xAAAAAAAAAAAAAAAALL;
  a2[1] = (NetworkingModule *)0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<NetworkingModule>::shared_ptr[abi:ne180100]<NetworkingModule,std::shared_ptr<NetworkingModule> ctu::SharedSynchronizable<NetworkingModule>::make_shared_ptr<NetworkingModule>(NetworkingModule*)::{lambda(NetworkingModule*)#1},void>(a2, v5);
  ctu::Loggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)*a2 + 48);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  NetworkingModule::init(*a2);
}

void sub_1BF3D9E5C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void NetworkingModule::init(NetworkingModule *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v2 || (v3 = *((_QWORD *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = operator new(8uLL);
  *v6 = this;
  v7 = *((_QWORD *)this + 17);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = operator new(0x18uLL);
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<NetworkingModule>::execute_wrapped<NetworkingModule::init(void)::$_0>(NetworkingModule::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<NetworkingModule::init(void)::$_0,dispatch_queue_s *::default_delete<NetworkingModule::init(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t NetworkingModule::NetworkingModule(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *initially_inactive;
  NSObject *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE v20[16];
  _QWORD block[5];
  _BYTE v22[16];

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_1E7908A38;
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(_QWORD *)a1 = &unk_1E78FF318;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_1E78FF318;
    *(_QWORD *)(a1 + 8) = v3;
  }
  *(_QWORD *)a1 = off_1E7902080;
  *(_QWORD *)(a1 + 48) = &unk_1E79020F0;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v20, "com.apple.telephony.abm", "net.mod");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_2;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v11 = GetABMLogServer(void)::sLogServer;
    v10 = *(std::__shared_weak_count **)algn_1ED710088;
    if (*(_QWORD *)algn_1ED710088)
      goto LABEL_12;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v11 = GetABMLogServer(void)::sLogServer;
    v10 = *(std::__shared_weak_count **)algn_1ED710088;
    if (*(_QWORD *)algn_1ED710088)
    {
LABEL_12:
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v15 = dispatch_queue_create_with_target_V2("net.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v15, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v15);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v15;
  if (v15)
  {
    dispatch_retain(v15);
    *(_QWORD *)(a1 + 144) = 0;
    dispatch_release(v15);
  }
  else
  {
    *(_QWORD *)(a1 + 144) = 0;
  }
  *(_QWORD *)(a1 + 48) = off_1E7902210;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)block);
  *(_QWORD *)(a1 + 56) = &unk_1E78FB900;
  *(_QWORD *)(a1 + 104) = v11;
  *(_QWORD *)(a1 + 112) = v10;
  if (v10)
  {
    v16 = (unint64_t *)&v10->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
    *(_QWORD *)(a1 + 48) = off_1E79022C8;
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
    *(_QWORD *)(a1 + 48) = off_1E79022C8;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v20);
  *(_QWORD *)a1 = off_1E7902080;
  *(_QWORD *)(a1 + 48) = &unk_1E79020F0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 178) = 0u;
  return a1;
}

void sub_1BF3DA290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  Service *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v4 - 64));
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  Service::~Service(v2);
  _Unwind_Resume(a1);
}

void sub_1BF3DA2CC(_Unwind_Exception *a1)
{
  Service *v1;

  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void NetworkingModule::~NetworkingModule(NetworkingModule *this)
{
  const void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)this = off_1E7902080;
  *((_QWORD *)this + 6) = &unk_1E79020F0;
  v2 = (const void *)*((_QWORD *)this + 23);
  if (v2)
    CFRelease(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *((_QWORD *)this + 6) = off_1E7902210;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v9 = *((_QWORD *)this + 18);
  if (v9)
    dispatch_release(v9);
  v10 = *((_QWORD *)this + 17);
  if (v10)
    dispatch_release(v10);
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  *(_QWORD *)this = off_1E7908A38;
  v12 = *((_QWORD *)this + 3);
  if (v12)
  {
    v13 = *((_QWORD *)this + 4);
    v14 = (void *)*((_QWORD *)this + 3);
    if (v13 != v12)
    {
      do
      {
        if (*(char *)(v13 - 1) < 0)
          operator delete(*(void **)(v13 - 24));
        v13 -= 24;
      }
      while (v13 != v12);
      v14 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v12;
    operator delete(v14);
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
}

{
  void *v1;

  NetworkingModule::~NetworkingModule(this);
  operator delete(v1);
}

void `non-virtual thunk to'NetworkingModule::~NetworkingModule(NetworkingModule *this)
{
  NetworkingModule::~NetworkingModule((NetworkingModule *)((char *)this - 48));
}

{
  void *v1;

  NetworkingModule::~NetworkingModule((NetworkingModule *)((char *)this - 48));
  operator delete(v1);
}

void NetworkingModule::shutdown(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(8uLL);
  *v8 = v3;
  v9 = a1[17];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v9, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<NetworkingModule>::execute_wrapped<NetworkingModule::shutdown(dispatch::group_session)::$_0>(NetworkingModule::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<NetworkingModule::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<NetworkingModule::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void NetworkingModule::initialize(_QWORD *a1, dispatch_object_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *v19;
  NSObject *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  _QWORD *v28;
  NSObject *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;

  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v13);
  }
  v14 = (std::__shared_weak_count *)a1[16];
  if (!v14 || (v15 = a1[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v17 = v16;
  v18 = operator new(0x20uLL);
  *v18 = a1;
  v18[1] = v5;
  v18[2] = v7;
  v18[3] = v13;
  v19 = (unint64_t *)&v17->__shared_owners_;
  v20 = a1[17];
  do
    v21 = __ldxr(v19);
  while (__stxr(v21 + 1, v19));
  v22 = operator new(0x18uLL);
  *v22 = v18;
  v22[1] = v15;
  v22[2] = v17;
  dispatch_async_f(v20, v22, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<NetworkingModule>::execute_wrapped<NetworkingModule::initialize(dispatch::group_session)::$_0>(NetworkingModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<NetworkingModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<NetworkingModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v23 = __ldaxr(v19);
  while (__stlxr(v23 - 1, v19));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  v24 = (std::__shared_weak_count *)a1[16];
  if (!v24 || (v25 = a1[15], (v26 = std::__shared_weak_count::lock(v24)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v27 = v26;
  v28 = operator new(8uLL);
  *v28 = a1;
  v29 = a1[17];
  v30 = (unint64_t *)&v27->__shared_owners_;
  do
    v31 = __ldxr(v30);
  while (__stxr(v31 + 1, v30));
  v32 = operator new(0x18uLL);
  *v32 = v28;
  v32[1] = v25;
  v32[2] = v27;
  dispatch_async_f(v29, v32, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<NetworkingModule>::execute_wrapped<NetworkingModule::initialize(dispatch::group_session)::$_1>(NetworkingModule::initialize(dispatch::group_session)::$_1 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<NetworkingModule::initialize(dispatch::group_session)::$_1,dispatch_queue_s *::default_delete<NetworkingModule::initialize(dispatch::group_session)::$_1>>)::{lambda(void *)#1}::__invoke);
  do
    v33 = __ldaxr(v30);
  while (__stlxr(v33 - 1, v30));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void NetworkingModule::finishInitialization_sync(NetworkingModule *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  config::hw *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  const char *v10;
  size_t v11;
  void *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  CFTypeRef v23;
  const void *v24;
  size_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  NSObject *v32;
  _QWORD v33[6];
  std::__shared_weak_count *v34;
  void *aBlock;
  dispatch_object_t object;
  void *__p[2];
  unint64_t v38;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v41;
  __int128 v42;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v2 || (v3 = *((_QWORD *)this + 15), (v4 = (config::hw *)std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = (std::__shared_weak_count *)v4;
  v6 = (unint64_t *)((char *)v4 + 16);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  v8 = (unint64_t *)((char *)v4 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    (*(void (**)(config::hw *))(*(_QWORD *)v4 + 16))(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (config::hw::watch(v4))
  {
    v10 = (const char *)(*(uint64_t (**)(NetworkingModule *))(*(_QWORD *)this + 16))(this);
    v11 = strlen(v10);
    if (v11 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v12 = (void *)v11;
    if (v11 >= 0x17)
    {
      v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17)
        v14 = v11 | 7;
      v15 = v14 + 1;
      v13 = (void **)operator new(v14 + 1);
      __dst[1] = v12;
      v41 = v15 | 0x8000000000000000;
      __dst[0] = v13;
    }
    else
    {
      HIBYTE(v41) = v11;
      v13 = __dst;
      if (!v11)
        goto LABEL_18;
    }
    memmove(v13, v10, (size_t)v12);
LABEL_18:
    *((_BYTE *)v12 + (_QWORD)v13) = 0;
    cf = 0;
    AppleBasebandManager::create();
    v16 = v42;
    v42 = 0uLL;
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    *(_OWORD *)((char *)this + 152) = v16;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_27;
    v21 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      v23 = cf;
      if (!cf)
      {
LABEL_29:
        if (SHIBYTE(v41) < 0)
          operator delete(__dst[0]);
        v24 = (const void *)*MEMORY[0x1E0CFBD68];
        v25 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
        if (v25 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v26 = (void *)v25;
        if (v25 >= 0x17)
        {
          v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v25 | 7) != 0x17)
            v28 = v25 | 7;
          v29 = v28 + 1;
          v27 = operator new(v28 + 1);
          __p[1] = v26;
          v38 = v29 | 0x8000000000000000;
          __p[0] = v27;
        }
        else
        {
          HIBYTE(v38) = v25;
          v27 = __p;
          if (!v25)
          {
LABEL_39:
            *((_BYTE *)v26 + (_QWORD)v27) = 0;
            v33[0] = MEMORY[0x1E0C809B0];
            v33[1] = 3321888768;
            v33[2] = ___ZN16NetworkingModule25finishInitialization_syncEv_block_invoke;
            v33[3] = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrI16NetworkingModuleEE_e70_v24__0_shared_ptr_abm::client::Event____Event_____shared_weak_count__8l;
            v33[4] = this;
            v33[5] = v3;
            v34 = v5;
            do
              v30 = __ldxr(v6);
            while (__stxr(v30 + 1, v6));
            v31 = _Block_copy(v33);
            v32 = *((_QWORD *)this + 17);
            if (v32)
              dispatch_retain(*((dispatch_object_t *)this + 17));
            aBlock = v31;
            object = v32;
            AppleBasebandManager::setEventHandler();
            if (object)
              dispatch_release(object);
            if (aBlock)
              _Block_release(aBlock);
            if (SHIBYTE(v38) < 0)
              operator delete(__p[0]);
            AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 19));
            if (v34)
              std::__shared_weak_count::__release_weak(v34);
            goto LABEL_51;
          }
        }
        memmove(v27, v24, (size_t)v26);
        goto LABEL_39;
      }
    }
    else
    {
LABEL_27:
      v23 = cf;
      if (!cf)
        goto LABEL_29;
    }
    CFRelease(v23);
    goto LABEL_29;
  }
LABEL_51:
  NetworkingModule::applyLQMAbortPolicy_sync(this);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF3DAAB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::__shared_weak_count *v30;

  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    std::__shared_weak_count::__release_weak(v30);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v30);
  _Unwind_Resume(a1);
}

void ___ZN16NetworkingModule25finishInitialization_syncEv_block_invoke(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  NetworkingModule *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  CFTypeRef v8;
  char v9;
  size_t v10;
  void **v11;
  int v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *v15[3];
  _QWORD v16[2];
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  uint64_t v20;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (NetworkingModule *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v19 = v6;
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        abm::client::Event::getData(*a2);
        v8 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
        {
          v16[0] = 0xAAAAAAAAAAAAAAAALL;
          v16[1] = 0xAAAAAAAAAAAAAAAALL;
          ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v16, (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL);
          memset(v15, 170, sizeof(v15));
          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v20, (const char *)*MEMORY[0x1E0CFB530]);
          ctu::cf::map_adapter::getString();
          MEMORY[0x1C3B8936C](&v20);
          v9 = HIBYTE(v15[2]);
          if (SHIBYTE(v15[2]) >= 0)
            v10 = HIBYTE(v15[2]);
          else
            v10 = (size_t)v15[1];
          if (v10 == strlen((const char *)*MEMORY[0x1E0CFB980]))
          {
            if (SHIBYTE(v15[2]) >= 0)
              v11 = v15;
            else
              v11 = (void **)v15[0];
            v12 = memcmp(v11, (const void *)*MEMORY[0x1E0CFB980], v10);
            *((_BYTE *)v5 + 193) = v12 == 0;
            if (!v12)
            {
              NetworkingModule::applyBreadMode_sync(v5);
              v9 = HIBYTE(v15[2]);
            }
          }
          else
          {
            *((_BYTE *)v5 + 193) = 0;
          }
          if (v9 < 0)
            operator delete(v15[0]);
          MEMORY[0x1C3B893A8](v16);
          v8 = cf;
        }
        if (v8)
          CFRelease(v8);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF3DAD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,const void *a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  MEMORY[0x1C3B893A8](&a21);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a23);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_1BF3DAD88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void NetworkingModule::applyBreadMode_sync(NetworkingModule *this)
{
  CommandDriverFactory *v2;
  uint64_t v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  __int128 v23;

  v21 = 0xAAAAAAAAAAAAAAAALL;
  v22 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v2 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v3 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v2);
    v4 = v23;
    v23 = 0uLL;
    v5 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (*((_QWORD *)&v23 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v23 + 1) + 16))(*((_QWORD *)&v23 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v23 + 1));
      }
    }
    v3 = off_1ED70FD08;
  }
  v10 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v11 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v3 + 16))(&v19, v3);
  v21 = 0;
  v22 = 0;
  if (v20)
  {
    v22 = std::__shared_weak_count::lock(v20);
    if (v22)
      v21 = v19;
    if (v20)
      std::__shared_weak_count::__release_weak(v20);
  }
  if (!v10)
    goto LABEL_25;
  v13 = (unint64_t *)&v10->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
  {
LABEL_25:
    v15 = v21;
    if (!v21)
      goto LABEL_27;
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  v15 = v21;
  if (v21)
LABEL_26:
    (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v15 + 328))(v15, *((unsigned __int8 *)this + 192));
LABEL_27:
  v16 = v22;
  if (v22)
  {
    v17 = (unint64_t *)&v22->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1BF3DAF80(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF3DAF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF3DAFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrI16NetworkingModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrI16NetworkingModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void NetworkingModule::applyLQMAbortPolicy_sync(NetworkingModule *this)
{
  size_t v1;
  size_t v2;
  _BYTE *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  const __CFArray *v7;
  uint64_t (*v8)(uint64_t);
  char *v9;
  CFIndex v10;
  unint64_t v11;
  void *v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  NSObject *v17;
  int v18;
  std::string::size_type v19;
  std::string *v20;
  std::string *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  void *v27;
  uint64_t v28;
  id v29;
  void *v30;
  unint64_t v31;
  uint64_t v32;
  NSObject *v33;
  _BOOL4 v34;
  std::string *p_p;
  std::string::size_type v36;
  int v37;
  std::string *v38;
  std::string::size_type v39;
  int v40;
  NSObject *v41;
  std::string *v42;
  NSObject *v43;
  const char *v44;
  uint32_t v45;
  NSObject *v46;
  NSObject *v47;
  NSObject *v48;
  int v49;
  const __CFArray *v50;
  NSObject *v51;
  const char *v52;
  NSObject *v53;
  uint32_t v54;
  NSObject *v55;
  NSObject *v56;
  const char *v57;
  void *__src;
  uint64_t Count;
  CFIndex v61;
  char v62;
  uint64_t v63;
  id obj;
  void *v65;
  const __CFArray *theArray;
  CFTypeRef cf;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  std::string v72;
  std::string __p;
  xpc_object_t object;
  _QWORD v75[2];
  _BYTE buf[120];
  uint64_t v77;
  _BYTE applier[24];
  void *v79;
  std::string *v80;
  std::string v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 21))
  {
    cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    __src = (void *)*MEMORY[0x1E0CFC070];
    v1 = strlen((const char *)*MEMORY[0x1E0CFC070]);
    if (v1 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v2 = v1;
    if (v1 >= 0x17)
    {
      v5 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17)
        v5 = v1 | 7;
      v6 = v5 + 1;
      v3 = operator new(v5 + 1);
      *(_QWORD *)&buf[8] = v2;
      *(_QWORD *)&buf[16] = v6 | 0x8000000000000000;
      *(_QWORD *)buf = v3;
    }
    else
    {
      buf[23] = v1;
      v3 = buf;
      if (!v1)
      {
LABEL_12:
        v3[v2] = 0;
        NetworkingModule::getBundleIDList_sync((uint64_t)this, (uint64_t)buf, &cf);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        v7 = (const __CFArray *)cf;
        v8 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
        if (!cf)
          v8 = 0;
        if (v8)
        {
          v63 = *((_QWORD *)this + 21);
          theArray = (const __CFArray *)cf;
          if (cf)
            CFRetain(cf);
          v9 = "7_EUlPS4_E_";
          Count = CFArrayGetCount(v7);
          if (Count)
          {
            v10 = 0;
            v62 = 0;
            v11 = 0x1E0CD0000uLL;
            while (1)
            {
              memset(&__p, 170, sizeof(__p));
              CFArrayGetValueAtIndex(theArray, v10);
              memset(&v81, 0, sizeof(v81));
              ctu::cf::assign();
              __p = v81;
              if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v72, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
              else
                v72 = __p;
              v12 = (void *)NEHelperCacheCopyAppUUIDMapping();
              v13 = v12;
              if (v12)
              {
                object = v12;
              }
              else
              {
                v13 = xpc_null_create();
                object = v13;
                if (!v13)
                {
                  v14 = xpc_null_create();
                  v13 = 0;
                  goto LABEL_32;
                }
              }
              if (MEMORY[0x1C3B8A86C](v13) == MEMORY[0x1E0C812C8])
              {
                xpc_retain(v13);
                goto LABEL_33;
              }
              v14 = xpc_null_create();
LABEL_32:
              object = v14;
LABEL_33:
              xpc_release(v13);
              v15 = object;
              if (object)
              {
                xpc_retain(object);
                v16 = v15;
              }
              else
              {
                v16 = xpc_null_create();
              }
              if (MEMORY[0x1C3B8A86C](v16) == MEMORY[0x1E0C812C8])
              {
                v81.__r_.__value_.__r.__words[0] = 0;
                v81.__r_.__value_.__l.__size_ = (std::string::size_type)&v81;
                v81.__r_.__value_.__r.__words[2] = 0x3052000000;
                *(_QWORD *)&v82 = __Block_byref_object_copy__3;
                *((_QWORD *)&v82 + 1) = __Block_byref_object_dispose__3;
                v83 = 0;
                *(_QWORD *)applier = MEMORY[0x1E0C809B0];
                *(_QWORD *)&applier[8] = 3221225472;
                *(_QWORD *)&applier[16] = ___ZN20NetworkPolicyManager10uuidBridgeEN3xpc5arrayE_block_invoke;
                v79 = &unk_1E7902248;
                v80 = &v81;
                xpc_array_apply(v16, applier);
                obj = *(id *)(v81.__r_.__value_.__l.__size_ + 40);
                _Block_object_dispose(&v81, 8);
              }
              else
              {
                obj = 0;
              }
              xpc_release(v16);
              v17 = *(NSObject **)(v63 + 40);
              if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
              {
                v18 = SHIBYTE(v72.__r_.__value_.__r.__words[2]);
                v19 = v72.__r_.__value_.__r.__words[0];
                xpc::object::to_string((xpc::object *)&object);
                v20 = &v72;
                if (v18 < 0)
                  v20 = (std::string *)v19;
                v21 = &v81;
                if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v21 = (std::string *)v81.__r_.__value_.__r.__words[0];
                *(_DWORD *)applier = 136315394;
                *(_QWORD *)&applier[4] = v20;
                *(_WORD *)&applier[12] = 2080;
                *(_QWORD *)&applier[14] = v21;
                _os_log_impl(&dword_1BF335000, v17, OS_LOG_TYPE_DEFAULT, "#I UUIDs for bundleID:%s => %s", applier, 0x16u);
                if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v81.__r_.__value_.__l.__data_);
                v15 = object;
              }
              xpc_release(v15);
              if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v72.__r_.__value_.__l.__data_);
                v61 = v10;
                if (obj)
                {
LABEL_49:
                  v22 = objc_msgSend(*(id *)(v11 + 2120), "allInterfaces");
                  if (v22)
                  {
                    v23 = objc_msgSend(MEMORY[0x1E0CD0858], "routeRuleWithAction:forType:", 4, 2);
                    if (v23)
                    {
                      v77 = v23;
                      v65 = (void *)objc_msgSend(MEMORY[0x1E0CD0850], "routeRules:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v77, 1));
                      if (v65)
                      {
                        v70 = 0u;
                        v71 = 0u;
                        v68 = 0u;
                        v69 = 0u;
                        v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v68, buf, 16);
                        if (v24)
                        {
                          v25 = *(_QWORD *)v69;
                          do
                          {
                            for (i = 0; i != v24; ++i)
                            {
                              if (*(_QWORD *)v69 != v25)
                                objc_enumerationMutation(obj);
                              v27 = *(void **)(*((_QWORD *)&v68 + 1) + 8 * i);
                              v28 = objc_msgSend(*(id *)(v11 + 2120), "effectiveApplication:", v27);
                              if (v28)
                              {
                                v29 = objc_alloc(MEMORY[0x1E0CD0840]);
                                v75[0] = v28;
                                v75[1] = v22;
                                v30 = (void *)objc_msgSend(v29, "initWithOrder:result:conditions:", 0, v65, objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v75, 2));
                                if (v30)
                                {
                                  v31 = v11;
                                  v32 = objc_msgSend(*(id *)(v63 + 72), "addPolicy:", v30);
                                  v33 = *(NSObject **)(v63 + 40);
                                  v34 = os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
                                  if (v32)
                                  {
                                    if (v34)
                                    {
                                      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                        p_p = &__p;
                                      else
                                        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                                      v36 = objc_msgSend((id)objc_msgSend(v27, "UUIDString"), "UTF8String");
                                      v37 = objc_msgSend(v65, "resultType");
                                      LODWORD(v81.__r_.__value_.__l.__data_) = 136315906;
                                      *(std::string::size_type *)((char *)v81.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
                                      WORD2(v81.__r_.__value_.__r.__words[1]) = 2080;
                                      *(std::string::size_type *)((char *)&v81.__r_.__value_.__r.__words[1] + 6) = v36;
                                      HIWORD(v81.__r_.__value_.__r.__words[2]) = 1024;
                                      LODWORD(v82) = v37;
                                      WORD2(v82) = 1024;
                                      *(_DWORD *)((char *)&v82 + 6) = v32;
                                      _os_log_impl(&dword_1BF335000, v33, OS_LOG_TYPE_DEFAULT, "#I Valid policy; bundle-id:%s UUID:%s result:%u policy-id:%u",
                                        (uint8_t *)&v81,
                                        0x22u);
                                    }
                                    v62 = 1;
                                  }
                                  else if (v34)
                                  {
                                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                      v38 = &__p;
                                    else
                                      v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                    v39 = objc_msgSend((id)objc_msgSend(v27, "UUIDString"), "UTF8String");
                                    v40 = objc_msgSend(v65, "resultType");
                                    LODWORD(v81.__r_.__value_.__l.__data_) = 136315650;
                                    *(std::string::size_type *)((char *)v81.__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
                                    WORD2(v81.__r_.__value_.__r.__words[1]) = 2080;
                                    *(std::string::size_type *)((char *)&v81.__r_.__value_.__r.__words[1] + 6) = v39;
                                    HIWORD(v81.__r_.__value_.__r.__words[2]) = 1024;
                                    LODWORD(v82) = v40;
                                    _os_log_impl(&dword_1BF335000, v33, OS_LOG_TYPE_DEFAULT, "#I Invalid policy; bundle-id:%s UUID:%s result:%u ",
                                      (uint8_t *)&v81,
                                      0x1Cu);
                                  }
                                  v11 = v31;

                                }
                              }
                            }
                            v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v68, buf, 16);
                          }
                          while (v24);
                        }
                        goto LABEL_88;
                      }
                      v48 = *(NSObject **)(v63 + 40);
                      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
                      {
                        LOWORD(v81.__r_.__value_.__l.__data_) = 0;
                        v43 = v48;
                        v44 = "#I Result creation failed";
LABEL_86:
                        v45 = 2;
LABEL_87:
                        _os_log_impl(&dword_1BF335000, v43, OS_LOG_TYPE_DEFAULT, v44, (uint8_t *)&v81, v45);
                        goto LABEL_88;
                      }
                    }
                    else
                    {
                      v47 = *(NSObject **)(v63 + 40);
                      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
                      {
                        LOWORD(v81.__r_.__value_.__l.__data_) = 0;
                        v43 = v47;
                        v44 = "#I Route rule creation failed";
                        goto LABEL_86;
                      }
                    }
                  }
                  else
                  {
                    v46 = *(NSObject **)(v63 + 40);
                    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
                    {
                      LOWORD(v81.__r_.__value_.__l.__data_) = 0;
                      v43 = v46;
                      v44 = "#I Interface condition creation failed";
                      goto LABEL_86;
                    }
                  }
                  goto LABEL_88;
                }
              }
              else
              {
                v61 = v10;
                if (obj)
                  goto LABEL_49;
              }
              v41 = *(NSObject **)(v63 + 40);
              if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
              {
                v42 = &__p;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v42 = (std::string *)__p.__r_.__value_.__r.__words[0];
                LODWORD(v81.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)v81.__r_.__value_.__r.__words + 4) = (std::string::size_type)v42;
                v43 = v41;
                v44 = "#I No UUIDs available for bundle-id:%s";
                v45 = 12;
                goto LABEL_87;
              }
LABEL_88:
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(__p.__r_.__value_.__l.__data_);
                v10 = v61 + 1;
                if (v61 + 1 == Count)
                {
LABEL_90:
                  if ((v62 & 1) != 0)
                  {
                    v9 = "ZN3ctu20SharedSynchronizableI14ServiceManagerE15make_shared_ptrI17ABMServiceManagerEENSt3__110s"
                         "hared_ptrIT_EEPS7_EUlPS4_E_"
                       + 111;
                    v49 = objc_msgSend(*(id *)(v63 + 72), "apply");
                    v50 = theArray;
                    if (!theArray)
                      goto LABEL_102;
                    goto LABEL_101;
                  }
                  v49 = 0;
                  v9 = "ZN3ctu20SharedSynchronizableI14ServiceManagerE15make_shared_ptrI17ABMServiceManagerEENSt3__110sha"
                       "red_ptrIT_EEPS7_EUlPS4_E_"
                     + 111;
                  v50 = theArray;
                  if (theArray)
                    goto LABEL_101;
                  goto LABEL_102;
                }
              }
              else
              {
                v10 = v61 + 1;
                if (v61 + 1 == Count)
                  goto LABEL_90;
              }
            }
          }
          v55 = *(NSObject **)(v63 + 40);
          if (!os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
          {
            v49 = 1;
            v50 = theArray;
            if (!theArray)
              goto LABEL_102;
            goto LABEL_101;
          }
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BF335000, v55, OS_LOG_TYPE_DEFAULT, "#I Empty bundle-id list; nothing to apply", buf, 2u);
          v49 = 1;
          v50 = theArray;
          if (theArray)
LABEL_101:
            CFRelease(v50);
LABEL_102:
          v56 = *((_QWORD *)this + 11);
          if (!os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
            goto LABEL_107;
          v57 = "failed";
          if (v49)
            v57 = "successful";
          *(_DWORD *)buf = *((_QWORD *)v9 + 276);
          *(_QWORD *)&buf[4] = __src;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v57;
          v52 = "#I Applying network policy for '%s' %s ";
          v53 = v56;
          v54 = 22;
        }
        else
        {
          v51 = *((_QWORD *)this + 11);
          if (!os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
            goto LABEL_107;
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = __src;
          v52 = "#I No network policy to apply for action: %s";
          v53 = v51;
          v54 = 12;
        }
        _os_log_impl(&dword_1BF335000, v53, OS_LOG_TYPE_DEFAULT, v52, buf, v54);
LABEL_107:
        if (cf)
          CFRelease(cf);
        return;
      }
    }
    memmove(v3, __src, v2);
    goto LABEL_12;
  }
  v4 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I Network policy update is not supported", buf, 2u);
  }
}

void sub_1BF3DB9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,xpc_object_t object,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1BF3DBAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,const void *a27,const void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0)
    operator delete(__p);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(&a27);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(&a28);
  _Unwind_Resume(a1);
}

void NetworkingModule::sendVisitInfo_sync(NetworkingModule *this, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  CommandDriverFactory *v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint8_t buf[16];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = a2;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = a3;
    _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "#I Visit info: Arrival=%u Departure=%u", buf, 0xEu);
  }
  v26 = 0xAAAAAAAAAAAAAAAALL;
  v27 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v6 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v7 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v6);
    v8 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v9 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v8;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v13 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v7 = off_1ED70FD08;
  }
  v15 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v16 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v7 + 16))(&v24, v7);
  v26 = 0;
  v27 = 0;
  if (v25)
  {
    v27 = std::__shared_weak_count::lock(v25);
    if (v27)
      v26 = v24;
    if (v25)
      std::__shared_weak_count::__release_weak(v25);
  }
  if (!v15)
    goto LABEL_27;
  v18 = (unint64_t *)&v15->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_27:
    v20 = v26;
    if (!v26)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  v20 = v26;
  if (v26)
LABEL_28:
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)v20 + 368))(v20, a2, a3);
LABEL_29:
  v21 = v27;
  if (v27)
  {
    v22 = (unint64_t *)&v27->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1BF3DBD58(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  _Unwind_Resume(a1);
}

void NetworkingModule::getBundleIDList_sync(uint64_t a1@<X0>, uint64_t a2@<X1>, CFTypeRef *a3@<X8>)
{
  std::string *v5;
  std::string *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  CFTypeRef v16;
  NSObject *v17;
  const void *v18;
  size_t v19;
  std::__shared_weak_count *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  std::string *v24;
  int v25;
  void *v26;
  const char *v27;
  int v28;
  int v29;
  const void *v30;
  CFTypeID v31;
  CFTypeRef v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  int64_t v35;
  CFTypeRef cf;
  std::string v37;

  memset(&v37, 170, sizeof(v37));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v37 = *(std::string *)a2;
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = (std::string *)((char *)&v37 + HIBYTE(v37.__r_.__value_.__r.__words[2]));
  else
    v5 = (std::string *)(v37.__r_.__value_.__r.__words[0] + v37.__r_.__value_.__l.__size_);
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v37;
  else
    v6 = (std::string *)v37.__r_.__value_.__r.__words[0];
  for (; v6 != v5; v6 = (std::string *)((char *)v6 + 1))
    v6->__r_.__value_.__s.__data_[0] = __toupper(v6->__r_.__value_.__s.__data_[0]);
  cf = 0;
  if (!TelephonyUtilIsInternalBuild())
    goto LABEL_28;
  pthread_mutex_lock(&ctu::Singleton<ABMNetworkPolicy,ABMNetworkPolicy,ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>>::sInstance);
  if (qword_1EF57D138)
  {
LABEL_14:
    v8 = (std::__shared_weak_count_vtbl *)qword_1EF57D138;
    v7 = (std::__shared_weak_count *)off_1EF57D140;
    v33 = qword_1EF57D138;
    v34 = (std::__shared_weak_count *)off_1EF57D140;
    if (!off_1EF57D140)
      goto LABEL_24;
    goto LABEL_22;
  }
  v8 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  MEMORY[0x1C3B893B4](v8, CFSTR("com.apple.AppleBasebandManager.NetworkPolicy"), *MEMORY[0x1E0C9B260]);
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v7->__vftable = (std::__shared_weak_count_vtbl *)off_1E7902408;
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = v8;
  v9 = (std::__shared_weak_count *)off_1EF57D140;
  qword_1EF57D138 = (uint64_t)v8;
  off_1EF57D140 = v7;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    goto LABEL_14;
  }
  v33 = (uint64_t)v8;
  v34 = v7;
LABEL_22:
  v12 = (unint64_t *)&v7->__shared_owners_;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
LABEL_24:
  pthread_mutex_unlock(&ctu::Singleton<ABMNetworkPolicy,ABMNetworkPolicy,ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>>::sInstance);
  Preferences::getPreference<__CFArray const*>(v8, (const char *)&v37, &cf);
  if (v34)
  {
    v14 = &v34->__shared_owners_;
    do
      v15 = __ldaxr((unint64_t *)v14);
    while (__stlxr(v15 - 1, (unint64_t *)v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      v16 = cf;
      *a3 = cf;
      if (!v16)
        goto LABEL_34;
      goto LABEL_29;
    }
  }
LABEL_28:
  v16 = cf;
  *a3 = cf;
  if (!v16)
    goto LABEL_34;
LABEL_29:
  CFRetain(v16);
  if (ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get
    && CFArrayGetCount((CFArrayRef)v16))
  {
    goto LABEL_61;
  }
LABEL_34:
  v17 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v33) = 0;
    _os_log_impl(&dword_1BF335000, v17, OS_LOG_TYPE_DEFAULT, "#I getBundleIDList_sync count zero", (uint8_t *)&v33, 2u);
  }
  v18 = (const void *)*MEMORY[0x1E0CFC070];
  v19 = strlen((const char *)*MEMORY[0x1E0CFC070]);
  if (v19 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v20 = (std::__shared_weak_count *)v19;
  if (v19 >= 0x17)
  {
    v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v22 = v19 | 7;
    v23 = v22 + 1;
    v21 = (uint64_t *)operator new(v22 + 1);
    v34 = v20;
    v35 = v23 | 0x8000000000000000;
    v33 = (uint64_t)v21;
    goto LABEL_43;
  }
  HIBYTE(v35) = v19;
  v21 = &v33;
  if (v19)
LABEL_43:
    memmove(v21, v18, (size_t)v20);
  *((_BYTE *)&v20->__vftable + (_QWORD)v21) = 0;
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = &v37;
  else
    v24 = (std::string *)v37.__r_.__value_.__r.__words[0];
  v25 = SHIBYTE(v35);
  v26 = (void *)v33;
  if (v35 >= 0)
    v27 = (const char *)&v33;
  else
    v27 = (const char *)v33;
  v28 = strcasecmp((const char *)v24, v27);
  v29 = v28;
  if (v25 < 0)
  {
    operator delete(v26);
    if (v29)
      goto LABEL_61;
  }
  else if (v28)
  {
    goto LABEL_61;
  }
  v30 = *(const void **)(a1 + 184);
  if (v30)
  {
    v31 = CFGetTypeID(v30);
    if (v31 != CFArrayGetTypeID())
    {
      v32 = *a3;
      *a3 = 0;
      if (!v32)
        goto LABEL_61;
      goto LABEL_60;
    }
    CFRetain(v30);
  }
  v32 = *a3;
  *a3 = v30;
  if (v32)
LABEL_60:
    CFRelease(v32);
LABEL_61:
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
}

BOOL Preferences::getPreference<__CFArray const*>(uint64_t (***a1)(_QWORD, uint64_t), const char *a2, _QWORD *a3)
{
  const void *v5;
  const void *v6;
  CFTypeID v7;
  BOOL v8;
  _BOOL8 v9;
  uint64_t v11;

  if (a2[23] < 0)
    a2 = *(const char **)a2;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v11, a2);
  v5 = (const void *)(**a1)(a1, v11);
  v6 = v5;
  if (v5)
  {
    v7 = CFGetTypeID(v5);
    v8 = v7 == CFArrayGetTypeID();
    v9 = v8;
    if (v8)
      *a3 = v6;
    CFRelease(v6);
  }
  else
  {
    v9 = 0;
  }
  MEMORY[0x1C3B8936C](&v11);
  return v9;
}

const char *NetworkingModule::getName(NetworkingModule *this)
{
  return "net.mod";
}

uint64_t ctu::Loggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

uint64_t ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

_QWORD *ctu::Loggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7902210;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7902210;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

uint64_t ___ZN20NetworkPolicyManager10uuidBridgeEN3xpc5arrayE_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;

  if (a3 && MEMORY[0x1C3B8A86C](a3) == MEMORY[0x1E0C813A0])
  {
    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDBytes:", xpc_uuid_get_bytes(a3));
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "addObject:", v5);

  }
  return 1;
}

void ctu::Loggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF3DC650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF3DC66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<NetworkingModule>::shared_ptr[abi:ne180100]<NetworkingModule,std::shared_ptr<NetworkingModule> ctu::SharedSynchronizable<NetworkingModule>::make_shared_ptr<NetworkingModule>(NetworkingModule*)::{lambda(NetworkingModule*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E7902278;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF3DC788(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<NetworkingModule> ctu::SharedSynchronizable<NetworkingModule>::make_shared_ptr<NetworkingModule>(NetworkingModule*)::{lambda(NetworkingModule*)#1}::operator() const(NetworkingModule*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF3DC7A8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<NetworkingModule *,std::shared_ptr<NetworkingModule> ctu::SharedSynchronizable<NetworkingModule>::make_shared_ptr<NetworkingModule>(NetworkingModule*)::{lambda(NetworkingModule *)#1},std::allocator<NetworkingModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<NetworkingModule *,std::shared_ptr<NetworkingModule> ctu::SharedSynchronizable<NetworkingModule>::make_shared_ptr<NetworkingModule>(NetworkingModule*)::{lambda(NetworkingModule *)#1},std::allocator<NetworkingModule>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<NetworkingModule> ctu::SharedSynchronizable<NetworkingModule>::make_shared_ptr<NetworkingModule>(NetworkingModule*)::{lambda(NetworkingModule*)#1}::operator() const(NetworkingModule*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<NetworkingModule *,std::shared_ptr<NetworkingModule> ctu::SharedSynchronizable<NetworkingModule>::make_shared_ptr<NetworkingModule>(NetworkingModule*)::{lambda(NetworkingModule *)#1},std::allocator<NetworkingModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI16NetworkingModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI16NetworkingModuleE15make_shared_ptrIS1_EENSt3__110shared_p"
                                "trIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI16NetworkingModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI16NetworkingModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<NetworkingModule> ctu::SharedSynchronizable<NetworkingModule>::make_shared_ptr<NetworkingModule>(NetworkingModule*)::{lambda(NetworkingModule*)#1}::operator() const(NetworkingModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *ctu::SharedLoggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7902210;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7902210;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<NetworkingModule>::execute_wrapped<NetworkingModule::init(void)::$_0>(NetworkingModule::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<NetworkingModule::init(void)::$_0,dispatch_queue_s *::default_delete<NetworkingModule::init(void)::$_0>>)::{lambda(void *)#1}::__invoke(capabilities::abs *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unsigned __int8 v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  CFMutableArrayRef Mutable;
  const void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 __p;
  void (*v24)(uint64_t);
  void *v25;
  uint64_t *v26;

  v2 = *(_QWORD **)a1;
  v3 = **(_QWORD ***)a1;
  if (!capabilities::abs::supportsNetworkPolicy(a1))
    goto LABEL_25;
  v4 = operator new(0x68uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = off_1E7902308;
  v4[3] = off_1E7902358;
  v5 = v4 + 3;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  *(_QWORD *)&__p = MEMORY[0x1E0C809B0];
  *((_QWORD *)&__p + 1) = 0x40000000;
  v24 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v25 = &__block_descriptor_tmp_13_2;
  v26 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v8 = GetABMLogServer(void)::sLogServer;
    v7 = *(std::__shared_weak_count **)algn_1ED710088;
    if (*(_QWORD *)algn_1ED710088)
      goto LABEL_5;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &__p);
    v8 = GetABMLogServer(void)::sLogServer;
    v7 = *(std::__shared_weak_count **)algn_1ED710088;
    if (*(_QWORD *)algn_1ED710088)
    {
LABEL_5:
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  v4[3] = off_1E79023C8;
  HIBYTE(v24) = 10;
  strcpy((char *)&__p, "net.policy");
  ctu::LoggerCommonBase::LoggerCommonBase();
  v4[4] = &unk_1E78FB900;
  v4[10] = v8;
  v4[11] = v7;
  if (v7)
  {
    v11 = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  if (SHIBYTE(v24) < 0)
    operator delete((void *)__p);
  if (v7)
  {
    v13 = (unint64_t *)&v7->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *v5 = off_1E7902358;
  v4[12] = objc_alloc_init(MEMORY[0x1E0CD0860]);
  v15 = (std::__shared_weak_count *)v3[22];
  v3[21] = v5;
  v3[22] = v4;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v19 = (const void *)v3[23];
    v3[23] = Mutable;
    if (v19)
      CFRelease(v19);
  }
LABEL_25:
  operator delete(v2);
  v20 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  operator delete(a1);
}

void sub_1BF3DCBEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _QWORD *v17;
  void *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  uint64_t v21;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;

  *v20 = v21;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v23);
  operator delete(v18);
  v24 = (std::__shared_weak_count *)v17[2];
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<NetworkPolicyManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E7902308;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NetworkPolicyManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E7902308;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<NetworkPolicyManager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void NetworkPolicyManager::~NetworkPolicyManager(NetworkPolicyManager *this)
{
  void *v2;

  *(_QWORD *)this = off_1E7902358;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {

    *((_QWORD *)this + 9) = 0;
  }
  *(_QWORD *)this = off_1E79023C8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
}

{
  void *v2;

  *(_QWORD *)this = off_1E7902358;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {

    *((_QWORD *)this + 9) = 0;
  }
  *(_QWORD *)this = off_1E79023C8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(this);
}

uint64_t ctu::Loggable<NetworkPolicyManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<NetworkPolicyManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 10;
  strcpy(a1, "net.policy");
}

uint64_t ctu::Loggable<NetworkPolicyManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<NetworkPolicyManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E79023C8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<NetworkPolicyManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E79023C8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<NetworkingModule>::execute_wrapped<NetworkingModule::shutdown(dispatch::group_session)::$_0>(NetworkingModule::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<NetworkingModule::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<NetworkingModule::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(dispatch_group_t **__p)
{
  dispatch_group_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *__p;
  if (*__p)
  {
    if (*v2)
    {
      dispatch_group_leave(*v2);
      if (*v2)
        dispatch_release(*v2);
    }
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)__p[2];
  if (!v3)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete(__p);
  }
  else
  {
LABEL_10:
    operator delete(__p);
  }
}

void std::__shared_ptr_pointer<ABMNetworkPolicy *,std::shared_ptr<ABMNetworkPolicy>::__shared_ptr_default_delete<ABMNetworkPolicy,ABMNetworkPolicy>,std::allocator<ABMNetworkPolicy>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ABMNetworkPolicy *,std::shared_ptr<ABMNetworkPolicy>::__shared_ptr_default_delete<ABMNetworkPolicy,ABMNetworkPolicy>,std::allocator<ABMNetworkPolicy>>::__on_zero_shared(uint64_t a1)
{
  void *v1;

  if (*(_QWORD *)(a1 + 24))
  {
    v1 = (void *)MEMORY[0x1C3B893C0]();
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<ABMNetworkPolicy *,std::shared_ptr<ABMNetworkPolicy>::__shared_ptr_default_delete<ABMNetworkPolicy,ABMNetworkPolicy>,std::allocator<ABMNetworkPolicy>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF540C01)
    return a1 + 24;
  if (((v3 & 0x80000001BF540C01 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF540C01))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF540C01 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void dispatch::async<void ctu::SharedSynchronizable<NetworkingModule>::execute_wrapped<NetworkingModule::initialize(dispatch::group_session)::$_0>(NetworkingModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<NetworkingModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<NetworkingModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t *v2;
  uint64_t v3;
  const void *v4;
  size_t v5;
  size_t v6;
  void **p_dst;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  void *v14;
  const void *v15;
  size_t v16;
  size_t v17;
  void *p_p;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  const void *v25;
  size_t v26;
  size_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  void *v34;
  const void *v35;
  size_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void *v44;
  NSObject *v45;
  NSObject *v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  const void *v58;
  void *v59[2];
  unint64_t v60;
  void *__p;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  const void *v68;
  void **__dst;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  const void *v76;
  _QWORD aBlock[6];
  std::__shared_weak_count *v78;
  const void *v79;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)a1;
  v4 = (const void *)*MEMORY[0x1E0CFB860];
  v5 = strlen((const char *)*MEMORY[0x1E0CFB860]);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v70 = v6;
    v71 = v9 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v71) = v5;
  p_dst = (void **)&__dst;
  if (v5)
LABEL_8:
    memmove(p_dst, v4, v6);
  *((_BYTE *)p_dst + v6) = 0;
  v10 = (void **)MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
  aBlock[3] = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrI16NetworkingModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  aBlock[4] = v3;
  aBlock[5] = v2[1];
  v11 = (std::__shared_weak_count *)v2[2];
  v78 = v11;
  if (v11)
  {
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
  }
  v14 = _Block_copy(aBlock);
  v79 = v14;
  Service::registerCommandHandler(v3, (uint64_t)&__dst, &v79);
  if (v14)
    _Block_release(v14);
  if (SHIBYTE(v71) < 0)
    operator delete(__dst);
  v15 = (const void *)*MEMORY[0x1E0CFBBA0];
  v16 = strlen((const char *)*MEMORY[0x1E0CFBBA0]);
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v17 = v16;
  if (v16 >= 0x17)
  {
    v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v19 = v16 | 7;
    v20 = v19 + 1;
    p_p = operator new(v19 + 1);
    v62 = v17;
    v63 = v20 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_23;
  }
  HIBYTE(v63) = v16;
  p_p = &__p;
  if (v16)
LABEL_23:
    memmove(p_p, v15, v17);
  *((_BYTE *)p_p + v17) = 0;
  __dst = v10;
  v70 = 3321888768;
  v71 = (unint64_t)___ZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_22;
  v72 = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrI16NetworkingModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v73 = v3;
  v74 = v2[1];
  v21 = (std::__shared_weak_count *)v2[2];
  v75 = v21;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_weak_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = _Block_copy(&__dst);
  v76 = v24;
  Service::registerCommandHandler(v3, (uint64_t)&__p, &v76);
  if (v24)
    _Block_release(v24);
  if (SHIBYTE(v63) < 0)
    operator delete(__p);
  v25 = (const void *)*MEMORY[0x1E0CFB878];
  v26 = strlen((const char *)*MEMORY[0x1E0CFB878]);
  if (v26 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v27 = v26;
  if (v26 >= 0x17)
  {
    v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v29 = v26 | 7;
    v30 = v29 + 1;
    v28 = operator new(v29 + 1);
    v52 = v27;
    v53 = v30 | 0x8000000000000000;
    v51 = v28;
    goto LABEL_38;
  }
  HIBYTE(v53) = v26;
  v28 = &v51;
  if (v26)
LABEL_38:
    memmove(v28, v25, v27);
  *((_BYTE *)v28 + v27) = 0;
  __p = v10;
  v62 = 3321888768;
  v63 = (unint64_t)___ZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2;
  v64 = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrI16NetworkingModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v65 = v3;
  v66 = v2[1];
  v31 = (std::__shared_weak_count *)v2[2];
  v67 = v31;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_weak_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = _Block_copy(&__p);
  v68 = v34;
  Service::registerCommandHandler(v3, (uint64_t)&v51, &v68);
  if (v34)
    _Block_release(v34);
  if (SHIBYTE(v53) < 0)
    operator delete(v51);
  v35 = (const void *)*MEMORY[0x1E0CFBBA8];
  v36 = strlen((const char *)*MEMORY[0x1E0CFBBA8]);
  if (v36 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v37 = (void *)v36;
  if (v36 >= 0x17)
  {
    v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v39 = v36 | 7;
    v40 = v39 + 1;
    v38 = operator new(v39 + 1);
    v59[1] = v37;
    v60 = v40 | 0x8000000000000000;
    v59[0] = v38;
    goto LABEL_53;
  }
  HIBYTE(v60) = v36;
  v38 = v59;
  if (v36)
LABEL_53:
    memmove(v38, v35, (size_t)v37);
  *((_BYTE *)v37 + (_QWORD)v38) = 0;
  v51 = v10;
  v52 = 3321888768;
  v53 = (unint64_t)___ZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_3;
  v54 = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrI16NetworkingModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v55 = v3;
  v56 = v2[1];
  v41 = (std::__shared_weak_count *)v2[2];
  v57 = v41;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_weak_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  v44 = _Block_copy(&v51);
  v58 = v44;
  Service::registerCommandHandler(v3, (uint64_t)v59, &v58);
  if (v44)
    _Block_release(v44);
  if (SHIBYTE(v60) < 0)
    operator delete(v59[0]);
  if (v57)
    std::__shared_weak_count::__release_weak(v57);
  if (v67)
    std::__shared_weak_count::__release_weak(v67);
  if (v75)
    std::__shared_weak_count::__release_weak(v75);
  if (v78)
    std::__shared_weak_count::__release_weak(v78);
  v45 = v2[3];
  if (v45)
  {
    dispatch_group_leave(v45);
    v46 = v2[3];
    if (v46)
      dispatch_release(v46);
  }
  v47 = (std::__shared_weak_count *)v2[2];
  if (v47)
    std::__shared_weak_count::__release_weak(v47);
  operator delete(v2);
  v48 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(p_shared_owners);
    while (__stlxr(v50 - 1, p_shared_owners));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  operator delete(a1);
}

void sub_1BF3DD480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,std::__shared_weak_count *a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46)
{
  _QWORD *v46;
  _QWORD *v47;
  const void *v48;
  uint64_t v49;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  NSObject *v53;
  NSObject *v54;
  std::__shared_weak_count *v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;

  if (v48)
    _Block_release(v48);
  if (a18)
  {
    std::__shared_weak_count::__release_weak(a18);
    if ((a25 & 0x80000000) == 0)
    {
LABEL_5:
      v51 = a35;
      if (!a35)
      {
LABEL_10:
        if (a46)
          std::__shared_weak_count::__release_weak(a46);
        v52 = *(std::__shared_weak_count **)(v49 - 120);
        if (v52)
          std::__shared_weak_count::__release_weak(v52);
        v53 = v47[3];
        if (v53)
        {
          dispatch_group_leave(v53);
          v54 = v47[3];
          if (v54)
            dispatch_release(v54);
        }
        v55 = (std::__shared_weak_count *)v47[2];
        if (v55)
          std::__shared_weak_count::__release_weak(v55);
        operator delete(v47);
        v56 = (std::__shared_weak_count *)v46[2];
        if (v56)
        {
          p_shared_owners = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldaxr(p_shared_owners);
          while (__stlxr(v58 - 1, p_shared_owners));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        operator delete(v46);
        _Unwind_Resume(a1);
      }
LABEL_9:
      std::__shared_weak_count::__release_weak(v51);
      goto LABEL_10;
    }
  }
  else if ((a25 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  v51 = a35;
  if (!a35)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  xpc_object_t v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (!v10)
      {
LABEL_20:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v11 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      v13 = *a2;
      if (v13)
      {
        xpc_retain(v13);
        v14 = *a3;
        if (*a3)
          goto LABEL_8;
      }
      else
      {
        v13 = xpc_null_create();
        v14 = *a3;
        if (*a3)
        {
LABEL_8:
          v15 = _Block_copy(v14);
          v16 = (std::__shared_weak_count *)v7[16];
          if (!v16)
LABEL_25:
            std::__throw_bad_weak_ptr[abi:ne180100]();
          goto LABEL_12;
        }
      }
      v15 = 0;
      v16 = (std::__shared_weak_count *)v7[16];
      if (!v16)
        goto LABEL_25;
LABEL_12:
      v17 = v7[15];
      v18 = std::__shared_weak_count::lock(v16);
      if (!v18)
        goto LABEL_25;
      v19 = v18;
      v20 = operator new(0x28uLL);
      *v20 = v7;
      v20[1] = v10;
      v20[2] = v9;
      v20[3] = v13;
      v21 = xpc_null_create();
      v20[4] = v15;
      v22 = v7[17];
      v23 = (unint64_t *)&v19->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v25 = operator new(0x18uLL);
      *v25 = v20;
      v25[1] = v17;
      v25[2] = v19;
      dispatch_async_f(v22, v25, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16NetworkingModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
      do
        v26 = __ldaxr(v23);
      while (__stlxr(v26 - 1, v23));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      xpc_release(v21);
      goto LABEL_20;
    }
  }
}

void ___ZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_22(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  xpc_object_t v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (!v10)
      {
LABEL_20:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v11 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      v13 = *a2;
      if (v13)
      {
        xpc_retain(v13);
        v14 = *a3;
        if (*a3)
          goto LABEL_8;
      }
      else
      {
        v13 = xpc_null_create();
        v14 = *a3;
        if (*a3)
        {
LABEL_8:
          v15 = _Block_copy(v14);
          v16 = (std::__shared_weak_count *)v7[16];
          if (!v16)
LABEL_25:
            std::__throw_bad_weak_ptr[abi:ne180100]();
          goto LABEL_12;
        }
      }
      v15 = 0;
      v16 = (std::__shared_weak_count *)v7[16];
      if (!v16)
        goto LABEL_25;
LABEL_12:
      v17 = v7[15];
      v18 = std::__shared_weak_count::lock(v16);
      if (!v18)
        goto LABEL_25;
      v19 = v18;
      v20 = operator new(0x28uLL);
      *v20 = v7;
      v20[1] = v10;
      v20[2] = v9;
      v20[3] = v13;
      v21 = xpc_null_create();
      v20[4] = v15;
      v22 = v7[17];
      v23 = (unint64_t *)&v19->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v25 = operator new(0x18uLL);
      *v25 = v20;
      v25[1] = v17;
      v25[2] = v19;
      dispatch_async_f(v22, v25, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16NetworkingModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb0_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
      do
        v26 = __ldaxr(v23);
      while (__stlxr(v26 - 1, v23));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      xpc_release(v21);
      goto LABEL_20;
    }
  }
}

void ___ZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  xpc_object_t v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (!v10)
      {
LABEL_20:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v11 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      v13 = *a2;
      if (v13)
      {
        xpc_retain(v13);
        v14 = *a3;
        if (*a3)
          goto LABEL_8;
      }
      else
      {
        v13 = xpc_null_create();
        v14 = *a3;
        if (*a3)
        {
LABEL_8:
          v15 = _Block_copy(v14);
          v16 = (std::__shared_weak_count *)v7[16];
          if (!v16)
LABEL_25:
            std::__throw_bad_weak_ptr[abi:ne180100]();
          goto LABEL_12;
        }
      }
      v15 = 0;
      v16 = (std::__shared_weak_count *)v7[16];
      if (!v16)
        goto LABEL_25;
LABEL_12:
      v17 = v7[15];
      v18 = std::__shared_weak_count::lock(v16);
      if (!v18)
        goto LABEL_25;
      v19 = v18;
      v20 = operator new(0x28uLL);
      *v20 = v7;
      v20[1] = v10;
      v20[2] = v9;
      v20[3] = v13;
      v21 = xpc_null_create();
      v20[4] = v15;
      v22 = v7[17];
      v23 = (unint64_t *)&v19->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v25 = operator new(0x18uLL);
      *v25 = v20;
      v25[1] = v17;
      v25[2] = v19;
      dispatch_async_f(v22, v25, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16NetworkingModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb1_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
      do
        v26 = __ldaxr(v23);
      while (__stlxr(v26 - 1, v23));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      xpc_release(v21);
      goto LABEL_20;
    }
  }
}

void ___ZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_3(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  xpc_object_t v14;
  const void *v15;
  void *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  xpc_object_t v25;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (!v10)
      {
LABEL_25:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v32 = __ldaxr(p_shared_owners);
        while (__stlxr(v32 - 1, p_shared_owners));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v11 = (std::__shared_weak_count *)a1[6];
      if (v11)
      {
        p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v13 = __ldxr(p_shared_weak_owners);
        while (__stxr(v13 + 1, p_shared_weak_owners));
      }
      v14 = *a2;
      if (v14)
      {
        xpc_retain(v14);
        v15 = *a3;
        if (*a3)
          goto LABEL_9;
      }
      else
      {
        v14 = xpc_null_create();
        v15 = *a3;
        if (*a3)
        {
LABEL_9:
          v16 = _Block_copy(v15);
          v17 = (std::__shared_weak_count *)v7[16];
          if (!v17)
LABEL_30:
            std::__throw_bad_weak_ptr[abi:ne180100]();
          goto LABEL_13;
        }
      }
      v16 = 0;
      v17 = (std::__shared_weak_count *)v7[16];
      if (!v17)
        goto LABEL_30;
LABEL_13:
      v18 = v7[15];
      v19 = std::__shared_weak_count::lock(v17);
      if (!v19)
        goto LABEL_30;
      v20 = v19;
      v21 = operator new(0x28uLL);
      v22 = v21;
      *v21 = v7;
      v21[1] = v10;
      v21[2] = v11;
      if (v11)
      {
        v23 = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v21[3] = v14;
      v25 = xpc_null_create();
      v22[4] = v16;
      v26 = v7[17];
      v27 = (unint64_t *)&v20->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      v29 = operator new(0x18uLL);
      *v29 = v22;
      v29[1] = v18;
      v29[2] = v20;
      dispatch_async_f(v26, v29, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16NetworkingModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
      do
        v30 = __ldaxr(v27);
      while (__stlxr(v30 - 1, v27));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      xpc_release(v25);
      if (v11)
        std::__shared_weak_count::__release_weak(v11);
      goto LABEL_25;
    }
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16NetworkingModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  std::string *v5;
  xpc_object_t v6;
  NSObject *v7;
  xpc_object_t v8;
  uint64_t v9;
  xpc_object_t v10;
  uint8_t *v11;
  uint8_t *v12;
  const void *v13;
  size_t v14;
  std::string::size_type v15;
  std::string *p_p;
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  int v20;
  void *v21;
  std::string *v22;
  int v23;
  int v24;
  NSObject *v25;
  uint8_t *v26;
  xpc_object_t v27;
  uint64_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  std::string::size_type size;
  uint64_t (*v32)(uint64_t);
  uint64_t Count;
  const __CFArray *v34;
  NSObject *v35;
  xpc_object_t v36;
  uint64_t v37;
  xpc_object_t v38;
  NSObject *v39;
  xpc_object_t v40;
  uint64_t v41;
  xpc_object_t v42;
  const __CFAllocator *v43;
  unsigned int v44;
  const void *v45;
  int v46;
  NSObject *v47;
  xpc_object_t v48;
  uint64_t v49;
  xpc_object_t v50;
  const void *v51;
  __CFArray *Mutable;
  CFIndex i;
  const void *ValueAtIndex;
  const void *v55;
  xpc_object_t v56;
  NSObject *v57;
  _BOOL4 v58;
  uint8_t *v59;
  std::string *p_object;
  uint64_t v61;
  void *v62;
  _QWORD *v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint8_t *v70;
  BOOL v71;
  unint64_t *v72;
  unint64_t v73;
  xpc_object_t v74;
  uint64_t v75;
  xpc_object_t v76;
  NSObject *v77;
  xpc_object_t v78;
  uint64_t v79;
  xpc_object_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t *v84;
  std::string v85;
  CFArrayRef theArray;
  std::string object;
  xpc_object_t value;
  std::string __p;
  __CFArray *v90;
  uint8_t buf[24];
  uint64_t v92;
  CFRange v93;

  v92 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v84 = v2;
  v3 = *v2;
  v4 = *(NSObject **)(*v2 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    xpc::object::to_string((xpc::object *)(v2 + 3));
    v5 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I Add network policy: %s", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((TelephonyUtilIsInternalBuild() & 1) == 0)
  {
    v7 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1BF335000, v7, OS_LOG_TYPE_DEFAULT, "#I Modifying network policy not supported in this build variant", (uint8_t *)&__p, 2u);
    }
    v8 = xpc_null_create();
    v9 = v2[4];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v10 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, std::string *))(v9 + 16))(v9, 3760250884, &__p);
    xpc_release(__p.__r_.__value_.__l.__data_);
    xpc_release(v10);
    goto LABEL_134;
  }
  memset(buf, 170, sizeof(buf));
  v6 = xpc_dictionary_get_value((xpc_object_t)v2[3], (const char *)*MEMORY[0x1E0CFBBF0]);
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  if (v6)
    xpc_retain(v6);
  else
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  xpc_release(object.__r_.__value_.__l.__data_);
  if ((buf[23] & 0x80u) == 0)
    v11 = &buf[buf[23]];
  else
    v11 = (uint8_t *)(*(_QWORD *)buf + *(_QWORD *)&buf[8]);
  if ((buf[23] & 0x80u) == 0)
    v12 = buf;
  else
    v12 = *(uint8_t **)buf;
  for (; v12 != v11; ++v12)
    *v12 = __toupper((char)*v12);
  v13 = (const void *)*MEMORY[0x1E0CFC070];
  v14 = strlen((const char *)*MEMORY[0x1E0CFC070]);
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    p_p = (std::string *)operator new(v17 + 1);
    __p.__r_.__value_.__l.__size_ = v15;
    __p.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_31;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v14;
  p_p = &__p;
  if (v14)
LABEL_31:
    memmove(p_p, v13, v15);
  p_p->__r_.__value_.__s.__data_[v15] = 0;
  if ((buf[23] & 0x80u) == 0)
    v19 = buf;
  else
    v19 = *(uint8_t **)buf;
  v20 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  v21 = (void *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &__p;
  else
    v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v23 = strcasecmp((const char *)v19, (const char *)v22);
  v24 = v23;
  if (v20 < 0)
  {
    operator delete(v21);
    if (v24)
      goto LABEL_40;
LABEL_46:
    memset(&object, 170, sizeof(object));
    v30 = xpc_dictionary_get_value((xpc_object_t)v2[3], (const char *)*MEMORY[0x1E0CFBA28]);
    value = v30;
    if (v30)
      xpc_retain(v30);
    else
      value = xpc_null_create();
    memset(&__p, 0, sizeof(__p));
    xpc::dyn_cast_or_default();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    xpc_release(value);
    size = HIBYTE(object.__r_.__value_.__r.__words[2]);
    if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = object.__r_.__value_.__l.__size_;
    if (!size)
    {
      v35 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1BF335000, v35, OS_LOG_TYPE_DEFAULT, "#I Empty network policy bundle-id", (uint8_t *)&__p, 2u);
      }
      v36 = xpc_null_create();
      v37 = v2[4];
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
      v38 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, std::string *))(v37 + 16))(v37, 3760250882, &__p);
      xpc_release(__p.__r_.__value_.__l.__data_);
      xpc_release(v38);
LABEL_131:
      if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(object.__r_.__value_.__l.__data_);
        if (((char)buf[23] & 0x80000000) == 0)
          goto LABEL_134;
        goto LABEL_133;
      }
      goto LABEL_132;
    }
    theArray = (CFArrayRef)0xAAAAAAAAAAAAAAAALL;
    NetworkingModule::getBundleIDList_sync(v3, (uint64_t)buf, (CFTypeRef *)&theArray);
    v32 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    if (!theArray)
      v32 = 0;
    if (!v32)
    {
      v39 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1BF335000, v39, OS_LOG_TYPE_DEFAULT, "#I BUG: We should never receive a null reference for bundle-id list", (uint8_t *)&__p, 2u);
      }
      v40 = xpc_null_create();
      v41 = v2[4];
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
      v42 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, std::string *))(v41 + 16))(v41, 3760250880, &__p);
      xpc_release(__p.__r_.__value_.__l.__data_);
      xpc_release(v42);
      goto LABEL_129;
    }
    Count = CFArrayGetCount(theArray);
    if (Count)
    {
      v34 = theArray;
      if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v85, object.__r_.__value_.__l.__data_, object.__r_.__value_.__l.__size_);
      else
        v85 = object;
      v44 = CFArrayGetCount(v34);
      v43 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      __p.__r_.__value_.__r.__words[0] = 0;
      ctu::cf::convert_copy();
      v45 = (const void *)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        v93.length = v44;
        v93.location = 0;
        v46 = CFArrayContainsValue(v34, v93, __p.__r_.__value_.__l.__data_);
        CFRelease(v45);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
        if (v46)
        {
          v47 = *(NSObject **)(v3 + 88);
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p.__r_.__value_.__l.__data_) = 0;
            _os_log_impl(&dword_1BF335000, v47, OS_LOG_TYPE_DEFAULT, "#I Policy for bundle-id already exists", (uint8_t *)&__p, 2u);
          }
          v48 = xpc_null_create();
          v49 = v2[4];
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
          v50 = xpc_null_create();
          (*(void (**)(uint64_t, _QWORD, std::string *))(v49 + 16))(v49, 0, &__p);
          xpc_release(__p.__r_.__value_.__l.__data_);
          xpc_release(v50);
LABEL_129:
          if (theArray)
            CFRelease(theArray);
          goto LABEL_131;
        }
      }
      else if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v85.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      v43 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    }
    __p.__r_.__value_.__r.__words[0] = 0;
    if (ctu::cf::convert_copy())
      v51 = (const void *)__p.__r_.__value_.__r.__words[0];
    else
      v51 = 0;
    Mutable = CFArrayCreateMutable(v43, 0, MEMORY[0x1E0C9B378]);
    if (Count)
    {
      for (i = 0; i != Count; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
        v55 = ValueAtIndex;
        if (ValueAtIndex)
        {
          CFRetain(ValueAtIndex);
          CFArrayAppendValue(Mutable, v55);
          CFRelease(v55);
        }
      }
    }
    if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, object.__r_.__value_.__l.__data_, object.__r_.__value_.__l.__size_);
    else
      __p = object;
    value = 0;
    ctu::cf::convert_copy();
    v56 = value;
    if (value)
    {
      CFArrayAppendValue(Mutable, value);
      CFRelease(v56);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v57 = *(NSObject **)(v3 + 88);
    v58 = os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT);
    if (v56)
    {
      if (v58)
      {
        v59 = buf;
        if ((buf[23] & 0x80u) != 0)
          v59 = *(uint8_t **)buf;
        p_object = &object;
        if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_object = (std::string *)object.__r_.__value_.__r.__words[0];
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v59;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_object;
        HIWORD(__p.__r_.__value_.__r.__words[2]) = 2112;
        v90 = Mutable;
        _os_log_impl(&dword_1BF335000, v57, OS_LOG_TYPE_DEFAULT, "#I Add policy for action=%s bundleid=%s array=%@", (uint8_t *)&__p, 0x20u);
      }
      pthread_mutex_lock(&ctu::Singleton<ABMNetworkPolicy,ABMNetworkPolicy,ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>>::sInstance);
      v61 = qword_1EF57D138;
      if (!qword_1EF57D138)
      {
        v62 = operator new(0x18uLL);
        MEMORY[0x1C3B893B4](v62, CFSTR("com.apple.AppleBasebandManager.NetworkPolicy"), *MEMORY[0x1E0C9B260]);
        v63 = operator new(0x20uLL);
        *v63 = off_1E7902408;
        v63[1] = 0;
        v63[2] = 0;
        v63[3] = v62;
        v64 = (std::__shared_weak_count *)off_1EF57D140;
        qword_1EF57D138 = (uint64_t)v62;
        off_1EF57D140 = v63;
        if (v64)
        {
          p_shared_owners = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldaxr(p_shared_owners);
          while (__stlxr(v66 - 1, p_shared_owners));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
        v61 = qword_1EF57D138;
      }
      v67 = (std::__shared_weak_count *)off_1EF57D140;
      if (off_1EF57D140)
      {
        v68 = (unint64_t *)((char *)off_1EF57D140 + 8);
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }
      pthread_mutex_unlock(&ctu::Singleton<ABMNetworkPolicy,ABMNetworkPolicy,ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>>::sInstance);
      if ((buf[23] & 0x80u) == 0)
        v70 = buf;
      else
        v70 = *(uint8_t **)buf;
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, (const char *)v70);
      v71 = ctu::cf::plist_adapter::set<__CFArray *>(v61, Mutable, (const __CFString *)__p.__r_.__value_.__l.__data_, 1);
      MEMORY[0x1C3B8936C](&__p);
      if (v67)
      {
        v72 = (unint64_t *)&v67->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      if (v71)
      {
        v74 = xpc_null_create();
        v75 = v2[4];
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
        v76 = xpc_null_create();
        (*(void (**)(uint64_t, _QWORD, std::string *))(v75 + 16))(v75, 0, &__p);
        xpc_release(__p.__r_.__value_.__l.__data_);
        xpc_release(v76);
LABEL_125:
        if (Mutable)
          CFRelease(Mutable);
        if (v51)
          CFRelease(v51);
        goto LABEL_129;
      }
      v77 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1BF335000, v77, OS_LOG_TYPE_DEFAULT, "#I Policy addition failed with preferences update error", (uint8_t *)&__p, 2u);
      }
    }
    else if (v58)
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1BF335000, v57, OS_LOG_TYPE_DEFAULT, "#I Policy addition failed with some error", (uint8_t *)&__p, 2u);
    }
    v78 = xpc_null_create();
    v79 = v2[4];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v78;
    v80 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, std::string *))(v79 + 16))(v79, 3760250880, &__p);
    xpc_release(__p.__r_.__value_.__l.__data_);
    xpc_release(v80);
    goto LABEL_125;
  }
  if (!v23)
    goto LABEL_46;
LABEL_40:
  v25 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    v26 = buf;
    if ((buf[23] & 0x80u) != 0)
      v26 = *(uint8_t **)buf;
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
    _os_log_impl(&dword_1BF335000, v25, OS_LOG_TYPE_DEFAULT, "#I Invalid network policy action: %s", (uint8_t *)&__p, 0xCu);
  }
  v27 = xpc_null_create();
  v28 = v2[4];
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  v29 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, std::string *))(v28 + 16))(v28, 3760250882, &__p);
  xpc_release(__p.__r_.__value_.__l.__data_);
  xpc_release(v29);
LABEL_132:
  if ((char)buf[23] < 0)
LABEL_133:
    operator delete(*(void **)buf);
LABEL_134:
  _ZNSt3__110unique_ptrIZZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEvEUb_EUlvE_NS_14default_deleteIS5_EEED1B8ne180100Ev((uint64_t *)&v84);
  v81 = (std::__shared_weak_count *)a1[2];
  if (v81)
  {
    v82 = (unint64_t *)&v81->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  operator delete(a1);
}

uint64_t *_ZNSt3__110unique_ptrIZZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEvEUb_EUlvE_NS_14default_deleteIS5_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2;
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(const void **)(v2 + 32);
    if (v3)
      _Block_release(v3);
    xpc_release(*(xpc_object_t *)(v2 + 24));
    *(_QWORD *)(v2 + 24) = 0;
    v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

BOOL ctu::cf::plist_adapter::set<__CFArray *>(uint64_t a1, CFTypeRef cf, const __CFString *a3, int a4)
{
  const __CFString *v8;
  _BOOL8 v9;

  if (!cf)
    return 0;
  CFRetain(cf);
  v8 = (const __CFString *)*MEMORY[0x1E0C9B250];
  CFPreferencesSetValue(a3, cf, *(CFStringRef *)(a1 + 8), *(CFStringRef *)(a1 + 16), (CFStringRef)*MEMORY[0x1E0C9B250]);
  if (a4)
    v9 = CFPreferencesSynchronize(*(CFStringRef *)(a1 + 8), *(CFStringRef *)(a1 + 16), v8) != 0;
  else
    v9 = 1;
  CFRelease(cf);
  return v9;
}

void sub_1BF3DED4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16NetworkingModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb0_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  void **v5;
  xpc_object_t value;
  NSObject *v7;
  xpc_object_t v8;
  uint64_t v9;
  xpc_object_t v10;
  uint8_t *v11;
  uint8_t *v12;
  const void *v13;
  size_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  int v20;
  void *v21;
  void **v22;
  int v23;
  int v24;
  NSObject *v25;
  uint8_t *v26;
  xpc_object_t v27;
  uint64_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  std::string::size_type size;
  uint64_t (*v32)(uint64_t);
  uint64_t Count;
  const __CFArray *v34;
  NSObject *v35;
  xpc_object_t v36;
  uint64_t v37;
  xpc_object_t v38;
  NSObject *v39;
  xpc_object_t v40;
  uint64_t v41;
  xpc_object_t v42;
  unsigned int v43;
  const __CFAllocator *v44;
  const void *v45;
  int v46;
  int v47;
  void *v48;
  __CFArray *Mutable;
  CFIndex v50;
  const void *ValueAtIndex;
  const void *v52;
  CFTypeID v53;
  std::string::size_type v54;
  xpc_object_t v55;
  int v56;
  xpc_object_t *v57;
  uint64_t v58;
  std::string *p_object;
  int v60;
  int v61;
  int v62;
  int v63;
  BOOL v65;
  BOOL v66;
  NSObject *v67;
  uint8_t *v68;
  std::string *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count_vtbl *v71;
  NSObject *v72;
  xpc_object_t v73;
  uint64_t v74;
  xpc_object_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  uint8_t *v84;
  BOOL v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  xpc_object_t v88;
  uint64_t v89;
  xpc_object_t v90;
  void (*v91)(uint64_t, _QWORD, void **);
  uint64_t v92;
  const void *v93;
  NSObject *v94;
  xpc_object_t v95;
  uint64_t v96;
  xpc_object_t v97;
  void (*v98)(uint64_t, uint64_t, void **);
  uint64_t v99;
  const void *v100;
  uint64_t *v101;
  xpc_object_t v102[2];
  void *v103;
  std::string v104;
  CFArrayRef theArray;
  std::string object;
  void *__p[4];
  uint8_t buf[32];
  uint64_t v109;
  CFRange v110;

  v109 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v101 = v2;
  v3 = *v2;
  v4 = *(NSObject **)(*v2 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    xpc::object::to_string((xpc::object *)(v2 + 3));
    v5 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I Remove network policy: %s", buf, 0xCu);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
  if ((TelephonyUtilIsInternalBuild() & 1) == 0)
  {
    v7 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl(&dword_1BF335000, v7, OS_LOG_TYPE_DEFAULT, "#I Modifying network policy not supported in this build variant", (uint8_t *)__p, 2u);
    }
    v8 = xpc_null_create();
    v9 = v2[4];
    __p[0] = v8;
    v10 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, void **))(v9 + 16))(v9, 3760250884, __p);
    xpc_release(__p[0]);
    xpc_release(v10);
    goto LABEL_128;
  }
  memset(buf, 170, 24);
  value = xpc_dictionary_get_value((xpc_object_t)v2[3], (const char *)*MEMORY[0x1E0CFBBF0]);
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value)
    xpc_retain(value);
  else
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  xpc_release(object.__r_.__value_.__l.__data_);
  if ((buf[23] & 0x80u) == 0)
    v11 = &buf[buf[23]];
  else
    v11 = (uint8_t *)(*(_QWORD *)buf + *(_QWORD *)&buf[8]);
  if ((buf[23] & 0x80u) == 0)
    v12 = buf;
  else
    v12 = *(uint8_t **)buf;
  for (; v12 != v11; ++v12)
    *v12 = __toupper((char)*v12);
  v13 = (const void *)*MEMORY[0x1E0CFC070];
  v14 = strlen((const char *)*MEMORY[0x1E0CFC070]);
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v15 = (void *)v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    v16 = operator new(v17 + 1);
    __p[1] = v15;
    __p[2] = (void *)(v18 | 0x8000000000000000);
    __p[0] = v16;
    goto LABEL_31;
  }
  HIBYTE(__p[2]) = v14;
  v16 = __p;
  if (v14)
LABEL_31:
    memmove(v16, v13, (size_t)v15);
  *((_BYTE *)v15 + (_QWORD)v16) = 0;
  if ((buf[23] & 0x80u) == 0)
    v19 = buf;
  else
    v19 = *(uint8_t **)buf;
  v20 = SHIBYTE(__p[2]);
  v21 = __p[0];
  if (SHIBYTE(__p[2]) >= 0)
    v22 = __p;
  else
    v22 = (void **)__p[0];
  v23 = strcasecmp((const char *)v19, (const char *)v22);
  v24 = v23;
  if (v20 < 0)
  {
    operator delete(v21);
    if (v24)
      goto LABEL_40;
LABEL_46:
    memset(&object, 170, sizeof(object));
    v30 = xpc_dictionary_get_value((xpc_object_t)v2[3], (const char *)*MEMORY[0x1E0CFBA28]);
    v102[0] = v30;
    if (v30)
      xpc_retain(v30);
    else
      v102[0] = xpc_null_create();
    memset(__p, 0, 24);
    xpc::dyn_cast_or_default();
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    xpc_release(v102[0]);
    size = HIBYTE(object.__r_.__value_.__r.__words[2]);
    if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = object.__r_.__value_.__l.__size_;
    if (size)
    {
      theArray = (CFArrayRef)0xAAAAAAAAAAAAAAAALL;
      NetworkingModule::getBundleIDList_sync(v3, (uint64_t)buf, (CFTypeRef *)&theArray);
      v32 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
      if (!theArray)
        v32 = 0;
      if (v32)
      {
        Count = CFArrayGetCount(theArray);
        if (Count)
        {
          v34 = theArray;
          if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v104, object.__r_.__value_.__l.__data_, object.__r_.__value_.__l.__size_);
          else
            v104 = object;
          v43 = CFArrayGetCount(v34);
          v44 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          __p[0] = 0;
          ctu::cf::convert_copy();
          v45 = __p[0];
          if (__p[0])
          {
            v110.length = v43;
            v110.location = 0;
            v46 = CFArrayContainsValue(v34, v110, __p[0]);
            CFRelease(v45);
            if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v104.__r_.__value_.__l.__data_);
            if (v46)
            {
              __p[0] = 0;
              v47 = ctu::cf::convert_copy();
              v48 = __p[0];
              if (!v47)
                v48 = 0;
              v100 = v48;
              Mutable = CFArrayCreateMutable(v44, 0, MEMORY[0x1E0C9B378]);
              v50 = 0;
              while (1)
              {
                ValueAtIndex = CFArrayGetValueAtIndex(theArray, v50);
                v52 = ValueAtIndex;
                if (ValueAtIndex)
                {
                  v53 = CFGetTypeID(ValueAtIndex);
                  if (v53 == CFStringGetTypeID())
                    CFRetain(v52);
                  else
                    v52 = 0;
                }
                memset(__p, 0, 24);
                ctu::cf::assign();
                v103 = __p[2];
                *(_OWORD *)v102 = *(_OWORD *)__p;
                if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v54 = HIBYTE(object.__r_.__value_.__r.__words[2]);
                else
                  v54 = object.__r_.__value_.__l.__size_;
                v55 = (xpc_object_t)HIBYTE(v103);
                v56 = SHIBYTE(v103);
                if (SHIBYTE(v103) < 0)
                  v55 = v102[1];
                if ((xpc_object_t)v54 != v55)
                {
                  v66 = 0;
                  if ((SHIBYTE(v103) & 0x80000000) == 0)
                    goto LABEL_103;
                  goto LABEL_106;
                }
                v57 = SHIBYTE(v103) >= 0 ? v102 : (xpc_object_t *)v102[0];
                if ((*((_BYTE *)&object.__r_.__value_.__s + 23) & 0x80) != 0)
                  break;
                if (*((_BYTE *)&object.__r_.__value_.__s + 23))
                {
                  v58 = HIBYTE(object.__r_.__value_.__r.__words[2]) - 1;
                  p_object = &object;
                  do
                  {
                    v61 = p_object->__r_.__value_.__s.__data_[0];
                    p_object = (std::string *)((char *)p_object + 1);
                    v60 = v61;
                    v63 = *(unsigned __int8 *)v57;
                    v57 = (xpc_object_t *)((char *)v57 + 1);
                    v62 = v63;
                    v65 = v58-- != 0;
                    v66 = v60 == v62;
                  }
                  while (v60 == v62 && v65);
LABEL_102:
                  if ((v56 & 0x80000000) == 0)
                    goto LABEL_103;
                  goto LABEL_106;
                }
                v66 = 1;
                if ((SHIBYTE(v103) & 0x80000000) == 0)
                {
LABEL_103:
                  if (!v66)
                    goto LABEL_107;
                  goto LABEL_74;
                }
LABEL_106:
                operator delete(v102[0]);
                if (!v66)
                {
LABEL_107:
                  if (!v52)
                    goto LABEL_76;
                  CFRetain(v52);
                  CFArrayAppendValue(Mutable, v52);
                  CFRelease(v52);
LABEL_75:
                  CFRelease(v52);
                  goto LABEL_76;
                }
LABEL_74:
                if (v52)
                  goto LABEL_75;
LABEL_76:
                if (++v50 == Count)
                {
                  v67 = *(NSObject **)(v3 + 88);
                  if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
                  {
                    v68 = buf;
                    if ((buf[23] & 0x80u) != 0)
                      v68 = *(uint8_t **)buf;
                    v69 = &object;
                    if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v69 = (std::string *)object.__r_.__value_.__r.__words[0];
                    LODWORD(__p[0]) = 136315650;
                    *(void **)((char *)__p + 4) = v68;
                    WORD2(__p[1]) = 2080;
                    *(void **)((char *)&__p[1] + 6) = v69;
                    HIWORD(__p[2]) = 2112;
                    __p[3] = Mutable;
                    _os_log_impl(&dword_1BF335000, v67, OS_LOG_TYPE_DEFAULT, "#I Remove policy for action=%s bundleid=%s array=%@", (uint8_t *)__p, 0x20u);
                  }
                  pthread_mutex_lock(&ctu::Singleton<ABMNetworkPolicy,ABMNetworkPolicy,ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>>::sInstance);
                  if (qword_1EF57D138)
                  {
LABEL_116:
                    v71 = (std::__shared_weak_count_vtbl *)qword_1EF57D138;
                    v70 = (std::__shared_weak_count *)off_1EF57D140;
                    if (!off_1EF57D140)
                    {
LABEL_143:
                      pthread_mutex_unlock(&ctu::Singleton<ABMNetworkPolicy,ABMNetworkPolicy,ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>>::sInstance);
                      if ((buf[23] & 0x80u) == 0)
                        v84 = buf;
                      else
                        v84 = *(uint8_t **)buf;
                      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)__p, (const char *)v84);
                      v85 = ctu::cf::plist_adapter::set<__CFArray *>((uint64_t)v71, Mutable, (const __CFString *)__p[0], 1);
                      MEMORY[0x1C3B8936C](__p);
                      if (v70)
                      {
                        p_shared_owners = (unint64_t *)&v70->__shared_owners_;
                        do
                          v87 = __ldaxr(p_shared_owners);
                        while (__stlxr(v87 - 1, p_shared_owners));
                        if (!v87)
                        {
                          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                          std::__shared_weak_count::__release_weak(v70);
                        }
                      }
                      if (v85)
                      {
                        v88 = xpc_null_create();
                        v89 = v2[4];
                        __p[0] = v88;
                        v90 = xpc_null_create();
                        v91 = *(void (**)(uint64_t, _QWORD, void **))(v89 + 16);
                        v92 = v89;
                        v93 = v100;
                        v91(v92, 0, __p);
                        xpc_release(__p[0]);
                        xpc_release(v90);
                      }
                      else
                      {
                        v94 = *(NSObject **)(v3 + 88);
                        if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
                        {
                          LOWORD(__p[0]) = 0;
                          _os_log_impl(&dword_1BF335000, v94, OS_LOG_TYPE_DEFAULT, "#I Policy removal failed with preferences update error", (uint8_t *)__p, 2u);
                        }
                        v95 = xpc_null_create();
                        v96 = v2[4];
                        __p[0] = v95;
                        v97 = xpc_null_create();
                        v98 = *(void (**)(uint64_t, uint64_t, void **))(v96 + 16);
                        v99 = v96;
                        v93 = v100;
                        v98(v99, 3760250880, __p);
                        xpc_release(__p[0]);
                        xpc_release(v97);
                      }
                      if (Mutable)
                        CFRelease(Mutable);
                      if (v93)
                        CFRelease(v93);
                      goto LABEL_123;
                    }
                  }
                  else
                  {
                    v71 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
                    MEMORY[0x1C3B893B4](v71, CFSTR("com.apple.AppleBasebandManager.NetworkPolicy"), *MEMORY[0x1E0C9B260]);
                    v70 = (std::__shared_weak_count *)operator new(0x20uLL);
                    v70->__vftable = (std::__shared_weak_count_vtbl *)off_1E7902408;
                    v70->__shared_owners_ = 0;
                    v70->__shared_weak_owners_ = 0;
                    v70[1].__vftable = v71;
                    v79 = (std::__shared_weak_count *)off_1EF57D140;
                    qword_1EF57D138 = (uint64_t)v71;
                    off_1EF57D140 = v70;
                    if (v79)
                    {
                      v80 = (unint64_t *)&v79->__shared_owners_;
                      do
                        v81 = __ldaxr(v80);
                      while (__stlxr(v81 - 1, v80));
                      if (!v81)
                      {
                        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                        std::__shared_weak_count::__release_weak(v79);
                      }
                      goto LABEL_116;
                    }
                  }
                  v82 = (unint64_t *)&v70->__shared_owners_;
                  do
                    v83 = __ldxr(v82);
                  while (__stxr(v83 + 1, v82));
                  goto LABEL_143;
                }
              }
              v66 = memcmp(object.__r_.__value_.__l.__data_, v57, object.__r_.__value_.__l.__size_) == 0;
              goto LABEL_102;
            }
          }
          else if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v104.__r_.__value_.__l.__data_);
          }
        }
        v72 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl(&dword_1BF335000, v72, OS_LOG_TYPE_DEFAULT, "#I Policy for bundle-id doesn't exist", (uint8_t *)__p, 2u);
        }
        v73 = xpc_null_create();
        v74 = v2[4];
        __p[0] = v73;
        v75 = xpc_null_create();
        (*(void (**)(uint64_t, _QWORD, void **))(v74 + 16))(v74, 0, __p);
        xpc_release(__p[0]);
        xpc_release(v75);
      }
      else
      {
        v39 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl(&dword_1BF335000, v39, OS_LOG_TYPE_DEFAULT, "#I BUG: We should never receive a null reference for bundle-id list", (uint8_t *)__p, 2u);
        }
        v40 = xpc_null_create();
        v41 = v2[4];
        __p[0] = v40;
        v42 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, void **))(v41 + 16))(v41, 3760250880, __p);
        xpc_release(__p[0]);
        xpc_release(v42);
      }
LABEL_123:
      if (theArray)
        CFRelease(theArray);
    }
    else
    {
      v35 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl(&dword_1BF335000, v35, OS_LOG_TYPE_DEFAULT, "#I Empty network policy bundle-id", (uint8_t *)__p, 2u);
      }
      v36 = xpc_null_create();
      v37 = v2[4];
      __p[0] = v36;
      v38 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, void **))(v37 + 16))(v37, 3760250882, __p);
      xpc_release(__p[0]);
      xpc_release(v38);
    }
    if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(object.__r_.__value_.__l.__data_);
      if (((char)buf[23] & 0x80000000) == 0)
        goto LABEL_128;
      goto LABEL_127;
    }
    goto LABEL_126;
  }
  if (!v23)
    goto LABEL_46;
LABEL_40:
  v25 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    v26 = buf;
    if ((buf[23] & 0x80u) != 0)
      v26 = *(uint8_t **)buf;
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = v26;
    _os_log_impl(&dword_1BF335000, v25, OS_LOG_TYPE_DEFAULT, "#I Invalid network policy action: %s", (uint8_t *)__p, 0xCu);
  }
  v27 = xpc_null_create();
  v28 = v2[4];
  __p[0] = v27;
  v29 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, void **))(v28 + 16))(v28, 3760250882, __p);
  xpc_release(__p[0]);
  xpc_release(v29);
LABEL_126:
  if ((char)buf[23] < 0)
LABEL_127:
    operator delete(*(void **)buf);
LABEL_128:
  _ZNSt3__110unique_ptrIZZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEvEUb0_EUlvE_NS_14default_deleteIS5_EEED1B8ne180100Ev((uint64_t *)&v101);
  v76 = (std::__shared_weak_count *)a1[2];
  if (v76)
  {
    v77 = (unint64_t *)&v76->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  operator delete(a1);
}

uint64_t *_ZNSt3__110unique_ptrIZZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEvEUb0_EUlvE_NS_14default_deleteIS5_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2;
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(const void **)(v2 + 32);
    if (v3)
      _Block_release(v3);
    xpc_release(*(xpc_object_t *)(v2 + 24));
    *(_QWORD *)(v2 + 24) = 0;
    v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16NetworkingModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb1_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  __int128 *v5;
  xpc_object_t v6;
  uint8_t *v7;
  uint8_t *v8;
  const void *v9;
  size_t v10;
  size_t v11;
  __int128 *p_p;
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  int v16;
  void *v17;
  const char *v18;
  int v19;
  int v20;
  NSObject *v21;
  uint8_t *v22;
  xpc_object_t v23;
  uint64_t v24;
  xpc_object_t v25;
  uint64_t (*v26)(uint64_t);
  xpc_object_t v27;
  xpc_object_t v28;
  NSObject *v29;
  uint8_t *v30;
  xpc_object_t v31;
  uint64_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  const void *v35;
  uint8_t *v36;
  xpc_object_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  uint64_t *v41;
  unsigned int v42;
  xpc_object_t value;
  xpc_object_t object;
  uint8_t buf[32];
  __int128 __p;
  int64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v41 = v2;
  v3 = *v2;
  v4 = *(NSObject **)(*v2 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    xpc::object::to_string((xpc::object *)(v2 + 3));
    v5 = v47 >= 0 ? &__p : (__int128 *)__p;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I Get network policy: %s", buf, 0xCu);
    if (SHIBYTE(v47) < 0)
      operator delete((void *)__p);
  }
  memset(buf, 170, 24);
  v6 = xpc_dictionary_get_value((xpc_object_t)v2[3], (const char *)*MEMORY[0x1E0CFBBF0]);
  object = v6;
  if (v6)
    xpc_retain(v6);
  else
    object = xpc_null_create();
  __p = 0uLL;
  v47 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v47) < 0)
    operator delete((void *)__p);
  xpc_release(object);
  if ((buf[23] & 0x80u) == 0)
    v7 = &buf[buf[23]];
  else
    v7 = (uint8_t *)(*(_QWORD *)buf + *(_QWORD *)&buf[8]);
  if ((buf[23] & 0x80u) == 0)
    v8 = buf;
  else
    v8 = *(uint8_t **)buf;
  for (; v8 != v7; ++v8)
    *v8 = __toupper((char)*v8);
  v9 = (const void *)*MEMORY[0x1E0CFC070];
  v10 = strlen((const char *)*MEMORY[0x1E0CFC070]);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    p_p = (__int128 *)operator new(v13 + 1);
    *((_QWORD *)&__p + 1) = v11;
    v47 = v14 | 0x8000000000000000;
    *(_QWORD *)&__p = p_p;
    goto LABEL_27;
  }
  HIBYTE(v47) = v10;
  p_p = &__p;
  if (v10)
LABEL_27:
    memmove(p_p, v9, v11);
  *((_BYTE *)p_p + v11) = 0;
  if ((buf[23] & 0x80u) == 0)
    v15 = buf;
  else
    v15 = *(uint8_t **)buf;
  v16 = SHIBYTE(v47);
  v17 = (void *)__p;
  if (v47 >= 0)
    v18 = (const char *)&__p;
  else
    v18 = (const char *)__p;
  v19 = strcasecmp((const char *)v15, v18);
  v20 = v19;
  if (v16 < 0)
  {
    operator delete(v17);
    if (v20)
      goto LABEL_36;
  }
  else if (v19)
  {
LABEL_36:
    v21 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v22 = buf;
      if ((buf[23] & 0x80u) != 0)
        v22 = *(uint8_t **)buf;
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = v22;
      _os_log_impl(&dword_1BF335000, v21, OS_LOG_TYPE_DEFAULT, "#I Invalid network policy action: %s", (uint8_t *)&__p, 0xCu);
    }
    v23 = xpc_null_create();
    v24 = v2[4];
    *(_QWORD *)&__p = v23;
    v25 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, __int128 *))(v24 + 16))(v24, 3760250882, &__p);
    xpc_release((xpc_object_t)__p);
    xpc_release(v25);
    goto LABEL_65;
  }
  object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  NetworkingModule::getBundleIDList_sync(v3, (uint64_t)buf, (CFTypeRef *)&object);
  v26 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  if (!object)
    v26 = 0;
  if (!v26 || !CFArrayGetCount((CFArrayRef)object))
  {
    v29 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      v30 = buf;
      if ((buf[23] & 0x80u) != 0)
        v30 = *(uint8_t **)buf;
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = v30;
      _os_log_impl(&dword_1BF335000, v29, OS_LOG_TYPE_DEFAULT, "#I No network policy available for action: %s", (uint8_t *)&__p, 0xCu);
    }
    v31 = xpc_null_create();
    v32 = v2[4];
    *(_QWORD *)&__p = v31;
    v33 = xpc_null_create();
    (*(void (**)(uint64_t, _QWORD, __int128 *))(v32 + 16))(v32, 0, &__p);
    xpc_release((xpc_object_t)__p);
    xpc_release(v33);
    goto LABEL_63;
  }
  *(_QWORD *)&__p = 0xAAAAAAAAAAAAAAAALL;
  v27 = xpc_dictionary_create(0, 0, 0);
  v28 = v27;
  if (v27)
  {
    *(_QWORD *)&__p = v27;
  }
  else
  {
    v28 = xpc_null_create();
    *(_QWORD *)&__p = v28;
    if (!v28)
    {
      v34 = xpc_null_create();
      v28 = 0;
      goto LABEL_58;
    }
  }
  if (MEMORY[0x1C3B8A86C](v28) != MEMORY[0x1E0C812F8])
  {
    v34 = xpc_null_create();
LABEL_58:
    *(_QWORD *)&__p = v34;
    goto LABEL_59;
  }
  xpc_retain(v28);
LABEL_59:
  xpc_release(v28);
  ctu::cf_to_xpc((ctu *)object, v35);
  if ((buf[23] & 0x80u) == 0)
    v36 = buf;
  else
    v36 = *(uint8_t **)buf;
  xpc_dictionary_set_value((xpc_object_t)__p, (const char *)v36, value);
  v37 = value;
  value = xpc_null_create();
  xpc_release(v37);
  xpc_release(value);
  value = 0;
  v42 = 0;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v2 + 4, &v42, (void **)&__p);
  xpc_release((xpc_object_t)__p);
LABEL_63:
  if (object)
    CFRelease(object);
LABEL_65:
  if ((char)buf[23] < 0)
    operator delete(*(void **)buf);
  _ZNSt3__110unique_ptrIZZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEvEUb1_EUlvE_NS_14default_deleteIS5_EEED1B8ne180100Ev((uint64_t *)&v41);
  v38 = (std::__shared_weak_count *)a1[2];
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  operator delete(a1);
}

void sub_1BF3E01C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, xpc_object_t object,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *_ZNSt3__110unique_ptrIZZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEvEUb1_EUlvE_NS_14default_deleteIS5_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2;
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(const void **)(v2 + 32);
    if (v3)
      _Block_release(v3);
    xpc_release(*(xpc_object_t *)(v2 + 24));
    *(_QWORD *)(v2 + 24) = 0;
    v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16NetworkingModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(config::hw *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  xpc_object_t value;
  NSObject *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  xpc_object_t v11;
  uint64_t v12;
  xpc_object_t v13;
  uint64_t v14;
  xpc_object_t v15;
  uint64_t v16;
  xpc_object_t v17;
  const void *v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _BYTE object[24];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)a1;
  v4 = 3760250880;
  if (config::hw::watch(a1))
  {
    v5 = (const char *)*MEMORY[0x1E0CFB220];
    if (xpc_dictionary_get_value((xpc_object_t)v2[3], (const char *)*MEMORY[0x1E0CFB220]))
    {
      value = xpc_dictionary_get_value((xpc_object_t)v2[3], v5);
      *(_QWORD *)object = value;
      if (value)
        xpc_retain(value);
      else
        *(_QWORD *)object = xpc_null_create();
      *(_BYTE *)(v3 + 192) = xpc::dyn_cast_or_default((xpc *)object, 0);
      xpc_release(*(xpc_object_t *)object);
      v7 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        if (*(_BYTE *)(v3 + 192))
          v8 = "";
        else
          v8 = " not";
        *(_DWORD *)object = 136315138;
        *(_QWORD *)&object[4] = v8;
        _os_log_impl(&dword_1BF335000, v7, OS_LOG_TYPE_DEFAULT, "#I Device is%s Bread paired", object, 0xCu);
      }
      if (*(_BYTE *)(v3 + 193))
        NetworkingModule::applyBreadMode_sync((NetworkingModule *)v3);
      v4 = 0;
    }
    if (*(_BYTE *)(v3 + 192))
    {
      if (*(_BYTE *)(v3 + 193))
      {
        v9 = (const char *)*MEMORY[0x1E0CFB180];
        if (xpc_dictionary_get_value((xpc_object_t)v2[3], (const char *)*MEMORY[0x1E0CFB180]))
        {
          v10 = (const char *)*MEMORY[0x1E0CFB2E0];
          if (xpc_dictionary_get_value((xpc_object_t)v2[3], (const char *)*MEMORY[0x1E0CFB2E0]))
          {
            v11 = xpc_dictionary_get_value((xpc_object_t)v2[3], v9);
            *(_QWORD *)object = v11;
            if (v11)
              xpc_retain(v11);
            else
              *(_QWORD *)object = xpc_null_create();
            v12 = xpc::dyn_cast_or_default((xpc *)object, 0);
            xpc_release(*(xpc_object_t *)object);
            v13 = xpc_dictionary_get_value((xpc_object_t)v2[3], v10);
            *(_QWORD *)object = v13;
            if (v13)
              xpc_retain(v13);
            else
              *(_QWORD *)object = xpc_null_create();
            v14 = xpc::dyn_cast_or_default((xpc *)object, 0);
            xpc_release(*(xpc_object_t *)object);
            NetworkingModule::sendVisitInfo_sync((NetworkingModule *)v3, v12, v14);
            v4 = 0;
          }
        }
      }
    }
  }
  else
  {
    v4 = 3760250884;
  }
  v15 = xpc_null_create();
  v16 = v2[4];
  *(_QWORD *)object = v15;
  v17 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, _BYTE *))(v16 + 16))(v16, v4, object);
  xpc_release(*(xpc_object_t *)object);
  xpc_release(v17);
  v18 = (const void *)v2[4];
  if (v18)
    _Block_release(v18);
  xpc_release((xpc_object_t)v2[3]);
  v2[3] = 0;
  v19 = (std::__shared_weak_count *)v2[2];
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
  operator delete(v2);
  v20 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  operator delete(a1);
}

void sub_1BF3E0680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void dispatch::async<void ctu::SharedSynchronizable<NetworkingModule>::execute_wrapped<NetworkingModule::initialize(dispatch::group_session)::$_1>(NetworkingModule::initialize(dispatch::group_session)::$_1 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<NetworkingModule::initialize(dispatch::group_session)::$_1,dispatch_queue_s *::default_delete<NetworkingModule::initialize(dispatch::group_session)::$_1>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  NetworkingModule **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(NetworkingModule ***)a1;
  NetworkingModule::finishInitialization_sync(**(NetworkingModule ***)a1);
  operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete((void *)a1);
  }
  else
  {
LABEL_5:
    operator delete((void *)a1);
  }
}

void sub_1BF3E0828(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_7_0()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMNetworkPolicy,ABMNetworkPolicy,ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>>::sInstance, &dword_1BF335000);
  }
  return result;
}

uint64_t __cxx_global_var_init_8_0()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1BF335000);
  }
  return result;
}

const char *IOKitAccessoriesDelegate::getName(IOKitAccessoriesDelegate *this)
{
  return "IOKitAccessories.delegate";
}

uint64_t IOKitAccessoriesDelegate::create@<X0>(_QWORD *a1@<X0>, NSObject **a2@<X1>, std::__shared_weak_count_vtbl **a3@<X8>)
{
  std::__shared_weak_count_vtbl *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *on_zero_shared;
  unint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;
  NSObject *v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  _QWORD v27[3];
  _QWORD *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v25 = 0;
  v26 = 0;
  v6 = (std::__shared_weak_count_vtbl *)operator new(0xB8uLL);
  v7 = a1[3];
  if (!v7)
    goto LABEL_4;
  if ((_QWORD *)v7 != a1)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
LABEL_4:
    v28 = (_QWORD *)v7;
    goto LABEL_6;
  }
  v28 = v27;
  (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v27);
LABEL_6:
  v8 = *a2;
  v24 = v8;
  if (v8)
    dispatch_retain(v8);
  IOKitAccessoriesDelegate::IOKitAccessoriesDelegate((uint64_t)v6, v27, &v24);
  v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  v11->__vftable = (std::__shared_weak_count_vtbl *)off_1E79025B0;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = v6;
  on_zero_shared = (std::__shared_weak_count *)v6->__on_zero_shared;
  if (on_zero_shared)
  {
    if (on_zero_shared->__shared_owners_ != -1)
      goto LABEL_21;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
    v6->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
    std::__shared_weak_count::__release_weak(on_zero_shared);
  }
  else
  {
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    v18 = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    v6->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
  }
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v25 = v6;
  v26 = v11;
  if (v8)
    dispatch_release(v8);
  v21 = v28;
  if (v28 == v27)
  {
    v22 = 4;
    v21 = v27;
    goto LABEL_27;
  }
  if (v28)
  {
    v22 = 5;
LABEL_27:
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v21 + 8 * v22))(v21, v9, v10);
  }
  result = (*((uint64_t (**)(std::__shared_weak_count_vtbl *))v6->~__shared_weak_count + 7))(v6);
  *a3 = v6;
  a3[1] = (std::__shared_weak_count_vtbl *)v11;
  return result;
}

void sub_1BF3E0AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;

  operator delete(v15);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t IOKitAccessoriesDelegate::IOKitAccessoriesDelegate(uint64_t a1, _QWORD *a2, NSObject **a3)
{
  _QWORD *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v30;
  __int128 block;
  void (*v32)(uint64_t);
  void *v33;
  uint64_t *v34;
  _QWORD v35[3];
  _QWORD *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E7902488;
  v5 = (_QWORD *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      v36 = v35;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v35);
    }
    else
    {
      v36 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    }
  }
  else
  {
    v36 = 0;
  }
  v6 = *a3;
  if (v6)
    dispatch_retain(v6);
  v7 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
    dispatch_retain(v6);
  *(_QWORD *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 40), "com.apple.telephony.abm", v7);
  *(_QWORD *)a1 = off_1E79048A8;
  v8 = (uint64_t)v36;
  if (!v36)
    goto LABEL_13;
  if (v36 != v35)
  {
    v8 = (*(uint64_t (**)(void))(*v36 + 16))();
LABEL_13:
    *(_QWORD *)(a1 + 72) = v8;
    goto LABEL_15;
  }
  *(_QWORD *)(a1 + 72) = a1 + 48;
  (*(void (**)(_QWORD *))(v35[0] + 24))(v35);
LABEL_15:
  *(_BYTE *)(a1 + 80) = 0;
  if (v6)
    dispatch_release(v6);
  v9 = v36;
  if (v36 == v35)
  {
    v10 = 4;
    v9 = v35;
    goto LABEL_21;
  }
  if (v36)
  {
    v10 = 5;
LABEL_21:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  *(_QWORD *)a1 = off_1E7902488;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 0x40000000;
  v32 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v33 = &__block_descriptor_tmp_13_2;
  v34 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v12 = *(_QWORD *)algn_1ED710088;
    v30 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_27;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v12 = *(_QWORD *)algn_1ED710088;
    v30 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_27;
  }
  v13 = (unint64_t *)(v12 + 8);
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
LABEL_27:
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  if (!off_1ED70FA00)
  {
    ABMServer::create_default_global(&block);
    v15 = block;
    block = 0uLL;
    v16 = (std::__shared_weak_count *)*(&off_1ED70FA00 + 1);
    off_1ED70FA00 = v15;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)&block + 1);
    if (*((_QWORD *)&block + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&block + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  v22 = (std::__shared_weak_count *)*(&off_1ED70FA00 + 1);
  if (*(&off_1ED70FA00 + 1))
  {
    v23 = (unint64_t *)(*(&off_1ED70FA00 + 1) + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  ctu::iokit::Controller::create();
  if (v22)
  {
    v25 = (unint64_t *)&v22->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v30)
  {
    v27 = (unint64_t *)&v30->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 1065353216;
  return a1;
}

void sub_1BF3E0F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  AccessoriesDelegateBase *v3;
  va_list va;

  va_start(va, a3);
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  AccessoriesDelegateBase::~AccessoriesDelegateBase(v3);
  _Unwind_Resume(a1);
}

void sub_1BF3E1018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21)
{
  NSObject *v21;
  _QWORD *v22;
  _QWORD *v23;

  v23 = v22;
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v23);
  if (v21)
    dispatch_release(v21);
  if (a21 == &a18)
  {
    (*(void (**)(void))(a18 + 32))();
    _Unwind_Resume(a1);
  }
  if (!a21)
    _Unwind_Resume(a1);
  (*(void (**)(void))(*a21 + 40))();
  _Unwind_Resume(a1);
}

void IOKitAccessoriesDelegate::~IOKitAccessoriesDelegate(IOKitAccessoriesDelegate *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  IOKitAccessoriesDelegate *v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)this = off_1E7902488;
  v2 = (_QWORD *)*((_QWORD *)this + 20);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)*((_QWORD *)this + 15);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v7)
    operator delete(v7);
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)this = off_1E79048A8;
  v11 = (IOKitAccessoriesDelegate *)*((_QWORD *)this + 9);
  if (v11 == (IOKitAccessoriesDelegate *)((char *)this + 48))
  {
    v12 = 4;
    v11 = (IOKitAccessoriesDelegate *)((char *)this + 48);
  }
  else
  {
    if (!v11)
      goto LABEL_19;
    v12 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
LABEL_19:
  MEMORY[0x1C3B89240]((char *)this + 40);
  v13 = *((_QWORD *)this + 4);
  if (v13)
    dispatch_release(v13);
  v14 = *((_QWORD *)this + 3);
  if (v14)
    dispatch_release(v14);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
}

{
  void *v1;

  IOKitAccessoriesDelegate::~IOKitAccessoriesDelegate(this);
  operator delete(v1);
}

void IOKitAccessoriesDelegate::init(IOKitAccessoriesDelegate *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN24IOKitAccessoriesDelegate4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_12;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

double ___ZN24IOKitAccessoriesDelegate4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  double result;
  int v7;

  v1 = *(_QWORD *)(a1 + 32) + 104;
  v7 = 2;
  v2 = std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__emplace_unique_key_args<ctu::iokit::TelephonyIOKitPowerSource,std::piecewise_construct_t const&,std::tuple<ctu::iokit::TelephonyIOKitPowerSource&&>,std::tuple<>>(v1, 2u, &v7);
  *(_QWORD *)((char *)v2 + 20) = 0x2000000000004;
  *((_DWORD *)v2 + 7) = 0x10000;
  v7 = 8;
  v3 = std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__emplace_unique_key_args<ctu::iokit::TelephonyIOKitPowerSource,std::piecewise_construct_t const&,std::tuple<ctu::iokit::TelephonyIOKitPowerSource&&>,std::tuple<>>(v1, 8u, &v7);
  *(_QWORD *)((char *)v3 + 20) = 0x3000000000000;
  *((_DWORD *)v3 + 7) = 0;
  v7 = 4;
  v4 = std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__emplace_unique_key_args<ctu::iokit::TelephonyIOKitPowerSource,std::piecewise_construct_t const&,std::tuple<ctu::iokit::TelephonyIOKitPowerSource&&>,std::tuple<>>(v1, 4u, &v7);
  *(_QWORD *)((char *)v4 + 20) = 0x300000000000FLL;
  *((_DWORD *)v4 + 7) = 0;
  v7 = 32;
  v5 = std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__emplace_unique_key_args<ctu::iokit::TelephonyIOKitPowerSource,std::piecewise_construct_t const&,std::tuple<ctu::iokit::TelephonyIOKitPowerSource&&>,std::tuple<>>(v1, 0x20u, &v7);
  *(_QWORD *)&result = 0x3000000000010;
  *(_QWORD *)((char *)v5 + 20) = 0x3000000000010;
  *((_DWORD *)v5 + 7) = 0;
  return result;
}

void IOKitAccessoriesDelegate::start(IOKitAccessoriesDelegate *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN24IOKitAccessoriesDelegate5startEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_10_0;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN24IOKitAccessoriesDelegate5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  NSObject *v16;
  capabilities::abs *v17;
  unint64_t v18;
  void *v19;
  NSObject *v20;
  _QWORD v21[6];
  std::__shared_weak_count *v22;
  void *v23;
  dispatch_object_t v24;
  _QWORD aBlock[6];
  std::__shared_weak_count *v26;
  void *v27;
  dispatch_object_t object;
  uint8_t buf[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = *(NSObject **)(v1 + 40);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Already started", buf, 2u);
    }
  }
  else
  {
    if (v4)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Starting", buf, 2u);
    }
    *(_BYTE *)(v1 + 80) = 1;
    v5 = *(std::__shared_weak_count **)(v1 + 16);
    if (!v5 || (v6 = *(_QWORD *)(v1 + 8), (v7 = std::__shared_weak_count::lock(v5)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v8 = v7;
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v8);
    }
    v13 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN24IOKitAccessoriesDelegate5startEv_block_invoke_2;
    aBlock[3] = &__block_descriptor_tmp_5_7;
    aBlock[4] = v1;
    aBlock[5] = v6;
    v26 = v8;
    do
      v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
    v15 = _Block_copy(aBlock);
    v16 = *(NSObject **)(v1 + 24);
    if (v16)
      dispatch_retain(*(dispatch_object_t *)(v1 + 24));
    v27 = v15;
    object = v16;
    ctu::iokit::Controller::setPowerSourceCallback();
    if (object)
      dispatch_release(object);
    v17 = (capabilities::abs *)v27;
    if (v27)
      _Block_release(v27);
    if (capabilities::abs::supportsDisplayCoverAccessory(v17))
    {
      v21[0] = v13;
      v21[1] = 1174405120;
      v21[2] = ___ZN24IOKitAccessoriesDelegate5startEv_block_invoke_6;
      v21[3] = &__block_descriptor_tmp_9_5;
      v21[4] = v1;
      v21[5] = v6;
      v22 = v8;
      do
        v18 = __ldxr(p_shared_weak_owners);
      while (__stxr(v18 + 1, p_shared_weak_owners));
      v19 = _Block_copy(v21);
      v20 = *(NSObject **)(v1 + 24);
      if (v20)
        dispatch_retain(*(dispatch_object_t *)(v1 + 24));
      v23 = v19;
      v24 = v20;
      ctu::iokit::Controller::registerForDisplayCoverStateChanged();
      if (v24)
        dispatch_release(v24);
      if (v23)
        _Block_release(v23);
      if (v22)
        std::__shared_weak_count::__release_weak(v22);
    }
    if (v26)
      std::__shared_weak_count::__release_weak(v26);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_1BF3E159C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,char a25)
{
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v27;

  dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitDisplayCoverState)>::~callback((uint64_t)&a16);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    v27 = a24;
    if (!a24)
    {
LABEL_3:
      std::__shared_weak_count::__release_weak(v25);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v27 = a24;
    if (!a24)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v27);
  std::__shared_weak_count::__release_weak(v25);
  _Unwind_Resume(a1);
}

void ___ZN24IOKitAccessoriesDelegate5startEv_block_invoke_2(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t *v6;
  char v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  __int16 v11;
  uint64_t *v12;
  unint64_t v13;
  int8x8_t v14;
  uint8x8_t v15;
  unint64_t v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  _BOOL8 v23;
  void *p_p;
  unint64_t v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  void **v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  float v33;
  float v34;
  _BOOL8 v35;
  unint64_t v36;
  unint64_t v37;
  size_t prime;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  _WORD *v46;
  std::__shared_weak_count *v47;
  _QWORD *v48;
  uint64_t *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  NSObject *v54;
  _BOOL8 v55;
  void *v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _BYTE *v63;
  int64_t v64;
  unint64_t v65;
  char *v66;
  int v67;
  _DWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  int8x8_t v77;
  char *v78;
  unint64_t v79;
  uint8x8_t v80;
  unint64_t v81;
  uint64_t v82;
  _DWORD **v83;
  _DWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  __int16 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  std::ios_base *v100;
  uint64_t v101;
  std::string::size_type v102;
  std::string *p_buf;
  NSObject *v104;
  uint64_t v105;
  void **v106;
  _QWORD *v107;
  __int16 v108;
  _DWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t i;
  uint64_t v115;
  uint64_t v116;
  const void *v117;
  __int16 v118;
  uint64_t v119;
  uint64_t v120;
  NSObject *v121;
  std::string *v122;
  CFTypeRef v123;
  const void *v124;
  _WORD *v125;
  uint64_t v126;
  unint64_t *p_shared_owners;
  unint64_t v128;
  __int16 v129;
  __int16 v130;
  _QWORD *v131;
  __int16 v132;
  __int16 v133;
  __int16 v134;
  void *v136;
  void *v137;
  _WORD *v138;
  CFTypeRef cf;
  std::string v140;
  void *__p;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  unint64_t v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  void *v159;
  void *v160;
  char *v161;
  CFTypeRef v162;
  void *v163;
  void *v164;
  char *v165;
  CFTypeRef v166;
  void *v167;
  void *v168;
  _WORD *v169;
  CFTypeRef v170;
  CFTypeRef v171;
  std::__shared_weak_count *v173;
  _BYTE v174[12];
  std::string buf;
  uint64_t v176;

  v176 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v4 = a1[4];
  v5 = std::__shared_weak_count::lock(v3);
  v173 = v5;
  if (!v5)
    return;
  if (!a1[5])
  {
    v47 = v5;
    goto LABEL_286;
  }
  v171 = 0;
  v6 = *(uint64_t **)(v4 + 120);
  if (v6)
  {
    v7 = 0;
    v8 = 0;
    v134 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = (uint64_t *)(v4 + 144);
    v131 = (_QWORD *)(v4 + 160);
    v133 = -1;
    while (1)
    {
      v13 = *((unsigned int *)v6 + 4);
      if ((v13 & a2) != 0)
        break;
LABEL_7:
      v6 = (uint64_t *)*v6;
      if (!v6)
        goto LABEL_105;
    }
    v14 = *(int8x8_t *)(v4 + 152);
    if (v14)
    {
      v15 = (uint8x8_t)vcnt_s8(v14);
      v15.i16[0] = vaddlv_u8(v15);
      if (v15.u32[0] > 1uLL)
      {
        v16 = *((unsigned int *)v6 + 4);
        if (*(_QWORD *)&v14 <= v13)
          v16 = v13 % *(_QWORD *)&v14;
      }
      else
      {
        v16 = (v14.i32[0] - 1) & v13;
      }
      v17 = *(uint64_t ***)(*v12 + 8 * v16);
      if (v17)
      {
        v18 = *v17;
        if (v18)
        {
          if (v15.u32[0] < 2uLL)
          {
            v19 = *(_QWORD *)&v14 - 1;
            while (1)
            {
              v21 = v18[1];
              if (v21 == v13)
              {
                if (*((_DWORD *)v18 + 4) == (_DWORD)v13)
                  goto LABEL_6;
              }
              else if ((v21 & v19) != v16)
              {
                goto LABEL_30;
              }
              v18 = (uint64_t *)*v18;
              if (!v18)
                goto LABEL_30;
            }
          }
          do
          {
            v20 = v18[1];
            if (v20 == v13)
            {
              if (*((_DWORD *)v18 + 4) == (_DWORD)v13)
                goto LABEL_6;
            }
            else
            {
              if (v20 >= *(_QWORD *)&v14)
                v20 %= *(_QWORD *)&v14;
              if (v20 != v16)
                break;
            }
            v18 = (uint64_t *)*v18;
          }
          while (v18);
        }
      }
    }
LABEL_30:
    v22 = *(NSObject **)(v4 + 40);
    v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
    if (v23)
    {
      ctu::iokit::asString();
      p_p = &__p;
      if (v142 < 0)
        p_p = __p;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
      _os_log_impl(&dword_1BF335000, v22, OS_LOG_TYPE_DEFAULT, "#I Power Source attached: %s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(v142) < 0)
        operator delete(__p);
    }
    v133 = *((_WORD *)v6 + 10);
    v134 = *((_WORD *)v6 + 12);
    v9 = *((unsigned __int16 *)v6 + 13);
    v10 = *((_WORD *)v6 + 14);
    capabilities::abs::supportedSARFeatures((capabilities::abs *)v23);
    if (capabilities::abs::operator&())
      v11 = 2;
    else
      v11 = 1;
    v25 = *((unsigned int *)v6 + 4);
    v26 = *(_QWORD *)(v4 + 152);
    if (v26)
    {
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
      v27.i16[0] = vaddlv_u8(v27);
      if (v27.u32[0] > 1uLL)
      {
        v28 = *((unsigned int *)v6 + 4);
        if (v26 <= v25)
          v28 = v25 % v26;
      }
      else
      {
        v28 = ((_DWORD)v26 - 1) & v25;
      }
      v29 = *(void ***)(*v12 + 8 * v28);
      if (v29)
      {
        v30 = *v29;
        if (*v29)
        {
          if (v27.u32[0] < 2uLL)
          {
            while (1)
            {
              v32 = v30[1];
              if (v32 == v25)
              {
                if (*((_DWORD *)v30 + 4) == (_DWORD)v25)
                  goto LABEL_97;
              }
              else if ((v32 & (v26 - 1)) != v28)
              {
                goto LABEL_59;
              }
              v30 = (_QWORD *)*v30;
              if (!v30)
                goto LABEL_59;
            }
          }
          do
          {
            v31 = v30[1];
            if (v31 == v25)
            {
              if (*((_DWORD *)v30 + 4) == (_DWORD)v25)
                goto LABEL_97;
            }
            else
            {
              if (v31 >= v26)
                v31 %= v26;
              if (v31 != v28)
                break;
            }
            v30 = (_QWORD *)*v30;
          }
          while (v30);
        }
      }
    }
    else
    {
      v28 = 0xAAAAAAAAAAAAAAAALL;
    }
LABEL_59:
    v30 = operator new(0x20uLL);
    *v30 = 0;
    v30[1] = v25;
    *((_DWORD *)v30 + 4) = *((_DWORD *)v6 + 4);
    *((_WORD *)v30 + 10) = -1;
    *(_QWORD *)((char *)v30 + 22) = 0;
    *((_WORD *)v30 + 15) = 0;
    v33 = (float)(unint64_t)(*(_QWORD *)(v4 + 168) + 1);
    v34 = *(float *)(v4 + 176);
    if (v26 && (float)(v34 * (float)v26) >= v33)
    {
      v25 = v28;
    }
    else
    {
      v35 = (v26 & (v26 - 1)) != 0;
      if (v26 < 3)
        v35 = 1;
      v36 = v35 | (2 * v26);
      v37 = vcvtps_u32_f32(v33 / v34);
      if (v36 <= v37)
        prime = v37;
      else
        prime = v36;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v26 = *(_QWORD *)(v4 + 152);
      }
      if (prime > v26)
        goto LABEL_72;
      if (prime < v26)
      {
        v39 = vcvtps_u32_f32((float)*(unint64_t *)(v4 + 168) / *(float *)(v4 + 176));
        if (v26 < 3 || (v40 = (uint8x8_t)vcnt_s8((int8x8_t)v26), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
        {
          v39 = std::__next_prime(v39);
        }
        else
        {
          v41 = 1 << -(char)__clz(v39 - 1);
          if (v39 >= 2)
            v39 = v41;
        }
        if (prime <= v39)
          prime = v39;
        if (prime < v26)
LABEL_72:
          std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__do_rehash<true>(v4 + 144, prime);
      }
      v26 = *(_QWORD *)(v4 + 152);
      if ((v26 & (v26 - 1)) != 0)
      {
        if (v26 <= v25)
          v25 %= v26;
      }
      else
      {
        v25 = ((_DWORD)v26 - 1) & v25;
      }
    }
    v42 = *v12;
    v43 = *(_QWORD **)(*v12 + 8 * v25);
    if (v43)
    {
      *v30 = *v43;
    }
    else
    {
      *v30 = *v131;
      *v131 = v30;
      *(_QWORD *)(v42 + 8 * v25) = v131;
      if (!*v30)
      {
LABEL_96:
        ++*(_QWORD *)(v4 + 168);
LABEL_97:
        *((_WORD *)v30 + 10) = v133;
        v8 = 2;
        *((_WORD *)v30 + 11) = 2;
        *((_WORD *)v30 + 12) = v134;
        *((_WORD *)v30 + 13) = v9;
        *((_WORD *)v30 + 14) = v10;
        *((_WORD *)v30 + 15) = v11;
        v45 = *(_QWORD *)(v4 + 72);
        if (v45)
        {
          v169 = 0;
          v170 = 0;
          v167 = 0;
          v168 = 0;
          v46 = operator new(0xCuLL);
          v168 = v46 + 6;
          v169 = v46 + 6;
          *v46 = v133;
          v46[1] = 2;
          v46[2] = v134;
          v46[3] = v9;
          v46[4] = v10;
          v46[5] = v11;
          v167 = v46;
          (*(void (**)(uint64_t, CFTypeRef *, void **))(*(_QWORD *)v45 + 48))(v45, &v170, &v167);
          if (v167)
          {
            v168 = v167;
            operator delete(v167);
          }
          if (v170)
            CFRelease(v170);
          v7 = 1;
          v8 = 2;
        }
        else
        {
LABEL_6:
          v7 = 1;
        }
        goto LABEL_7;
      }
      v44 = *(_QWORD *)(*v30 + 8);
      if ((v26 & (v26 - 1)) != 0)
      {
        if (v44 >= v26)
          v44 %= v26;
      }
      else
      {
        v44 &= v26 - 1;
      }
      v43 = (_QWORD *)(*v12 + 8 * v44);
    }
    *v43 = v30;
    goto LABEL_96;
  }
  v11 = 0;
  v10 = 0;
  v9 = 0;
  v8 = 0;
  v7 = 0;
  v133 = -1;
  v134 = 0;
LABEL_105:
  v129 = v8;
  v130 = v11;
  v48 = (_QWORD *)(v4 + 160);
  v49 = *(uint64_t **)(v4 + 160);
  if (!v49)
  {
    v50 = 0;
    if ((a2 & 1) == 0)
      goto LABEL_206;
    goto LABEL_211;
  }
  v132 = v10;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  do
  {
    if (((_DWORD)v49[2] & a2) == 0)
    {
      v54 = *(NSObject **)(v4 + 40);
      v55 = os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);
      if (v55)
      {
        ctu::iokit::asString();
        v56 = &__p;
        if (v142 < 0)
          v56 = __p;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v56;
        _os_log_impl(&dword_1BF335000, v54, OS_LOG_TYPE_DEFAULT, "#I Power Source detached: %s", (uint8_t *)&buf, 0xCu);
        if (SHIBYTE(v142) < 0)
          operator delete(__p);
      }
      v57 = v9;
      *((_WORD *)v49 + 11) = 1;
      capabilities::abs::supportedSARFeatures((capabilities::abs *)v55);
      if (capabilities::abs::operator&())
        v58 = 2;
      else
        v58 = 1;
      *((_WORD *)v49 + 15) = v58;
      if (v53 < v52)
      {
        *(_DWORD *)v53 = *((_DWORD *)v49 + 4);
        v59 = (uint64_t)(v53 + 4);
        if (!*(_QWORD *)(v4 + 72))
          goto LABEL_107;
        goto LABEL_136;
      }
      v60 = (v53 - v51) >> 2;
      v61 = v60 + 1;
      if ((unint64_t)(v60 + 1) >> 62)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      if ((v52 - v51) >> 1 > v61)
        v61 = (v52 - v51) >> 1;
      if ((unint64_t)(v52 - v51) >= 0x7FFFFFFFFFFFFFFCLL)
        v62 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v62 = v61;
      if (v62)
      {
        if (v62 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v63 = operator new(4 * v62);
        v50 = &v63[4 * v60];
        *(_DWORD *)v50 = *((_DWORD *)v49 + 4);
        v59 = (uint64_t)(v50 + 4);
        v64 = v53 - v51;
        if (v53 != v51)
        {
LABEL_130:
          v65 = v64 - 4;
          if (v65 < 0xBC
            || (v70 = (v53 - 4 - v51) & 0xFFFFFFFFFFFFFFFCLL, &v63[v53 - v51 - 4 - v70] > &v63[v53 - v51 - 4])
            || &v53[-v70 - 4] > v53 - 4
            || (unint64_t)(v51 - v63) < 0x20)
          {
            v66 = v53;
            v9 = v57;
          }
          else
          {
            v71 = (v65 >> 2) + 1;
            v72 = 4 * (v71 & 0x7FFFFFFFFFFFFFF8);
            v66 = &v53[-v72];
            v50 -= v72;
            v73 = &v63[4 * v60 - 16];
            v74 = v53 - 16;
            v75 = v71 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v76 = *(_OWORD *)v74;
              *(v73 - 1) = *((_OWORD *)v74 - 1);
              *v73 = v76;
              v73 -= 2;
              v74 -= 32;
              v75 -= 8;
            }
            while (v75);
            v9 = v57;
            if (v71 == (v71 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_133:
              v52 = &v63[4 * v62];
              if (!v51)
                goto LABEL_135;
              goto LABEL_134;
            }
          }
          do
          {
            v67 = *((_DWORD *)v66 - 1);
            v66 -= 4;
            *((_DWORD *)v50 - 1) = v67;
            v50 -= 4;
          }
          while (v66 != v51);
          goto LABEL_133;
        }
      }
      else
      {
        v63 = 0;
        v50 = (char *)(4 * v60);
        *(_DWORD *)(4 * v60) = *((_DWORD *)v49 + 4);
        v59 = 4 * v60 + 4;
        v64 = v53 - v51;
        if (v53 != v51)
          goto LABEL_130;
      }
      v9 = v57;
      v52 = &v63[4 * v62];
      if (!v51)
      {
LABEL_135:
        v51 = v50;
        if (!*(_QWORD *)(v4 + 72))
        {
LABEL_107:
          v7 = 1;
          v53 = (char *)v59;
          goto LABEL_108;
        }
LABEL_136:
        v166 = v171;
        if (v171)
          CFRetain(v171);
        __p = *(void **)((char *)v49 + 20);
        LODWORD(v142) = *((_DWORD *)v49 + 7);
        v163 = 0;
        v164 = 0;
        v165 = 0;
        v68 = operator new(0xCuLL);
        v164 = v68 + 3;
        v165 = (char *)(v68 + 3);
        v68[2] = v142;
        *(_QWORD *)v68 = __p;
        v163 = v68;
        v69 = *(_QWORD *)(v4 + 72);
        if (!v69)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, CFTypeRef *, void **))(*(_QWORD *)v69 + 48))(v69, &v166, &v163);
        if (v163)
        {
          v164 = v163;
          operator delete(v163);
        }
        if (v166)
          CFRelease(v166);
        goto LABEL_107;
      }
LABEL_134:
      operator delete(v51);
      goto LABEL_135;
    }
LABEL_108:
    v49 = (uint64_t *)*v49;
  }
  while (v49);
  if (v50 == v53)
  {
    v10 = v132;
    v48 = (_QWORD *)(v4 + 160);
    if ((a2 & 1) == 0)
      goto LABEL_206;
    goto LABEL_211;
  }
  v77 = *(int8x8_t *)(v4 + 152);
  v10 = v132;
  v48 = (_QWORD *)(v4 + 160);
  if (v77)
  {
    v78 = v50;
LABEL_157:
    v79 = *(unsigned int *)v78;
    v80 = (uint8x8_t)vcnt_s8(v77);
    v80.i16[0] = vaddlv_u8(v80);
    if (v80.u32[0] > 1uLL)
    {
      v81 = *(unsigned int *)v78;
      if (*(_QWORD *)&v77 <= v79)
        v81 = v79 % *(_QWORD *)&v77;
    }
    else
    {
      v81 = (v77.i32[0] - 1) & v79;
    }
    v82 = *(_QWORD *)(v4 + 144);
    v83 = *(_DWORD ***)(v82 + 8 * v81);
    if (v83)
    {
      v84 = *v83;
      if (*v83)
      {
        v85 = *(_QWORD *)&v77 - 1;
        if (v80.u32[0] < 2uLL)
        {
          while (1)
          {
            v86 = *((_QWORD *)v84 + 1);
            if (v86 == v79)
            {
              if (v84[4] == (_DWORD)v79)
                goto LABEL_177;
            }
            else if ((v86 & v85) != v81)
            {
              goto LABEL_204;
            }
            v84 = *(_DWORD **)v84;
            if (!v84)
              goto LABEL_204;
          }
        }
        do
        {
          v87 = *((_QWORD *)v84 + 1);
          if (v87 == v79)
          {
            if (v84[4] == (_DWORD)v79)
            {
LABEL_177:
              if (v80.u32[0] > 1uLL)
              {
                if (*(_QWORD *)&v77 <= v79)
                  v79 %= *(_QWORD *)&v77;
              }
              else
              {
                v79 &= v85;
              }
              v88 = *(_QWORD **)(v82 + 8 * v79);
              do
              {
                v89 = v88;
                v88 = (_QWORD *)*v88;
              }
              while (v88 != (_QWORD *)v84);
              if (v89 == (_QWORD *)(v4 + 160))
                goto LABEL_194;
              v90 = v89[1];
              if (v80.u32[0] > 1uLL)
              {
                if (v90 >= *(_QWORD *)&v77)
                  v90 %= *(_QWORD *)&v77;
              }
              else
              {
                v90 &= v85;
              }
              if (v90 != v79)
              {
LABEL_194:
                if (!*(_QWORD *)v84)
                  goto LABEL_195;
                v91 = *(_QWORD *)(*(_QWORD *)v84 + 8);
                if (v80.u32[0] > 1uLL)
                {
                  if (v91 >= *(_QWORD *)&v77)
                    v91 %= *(_QWORD *)&v77;
                }
                else
                {
                  v91 &= v85;
                }
                if (v91 != v79)
LABEL_195:
                  *(_QWORD *)(v82 + 8 * v79) = 0;
              }
              v92 = *(_QWORD *)v84;
              if (*(_QWORD *)v84)
              {
                v93 = *(_QWORD *)(v92 + 8);
                if (v80.u32[0] > 1uLL)
                {
                  if (v93 >= *(_QWORD *)&v77)
                    v93 %= *(_QWORD *)&v77;
                }
                else
                {
                  v93 &= v85;
                }
                if (v93 != v79)
                {
                  *(_QWORD *)(*(_QWORD *)(v4 + 144) + 8 * v93) = v89;
                  v92 = *(_QWORD *)v84;
                }
              }
              *v89 = v92;
              *(_QWORD *)v84 = 0;
              --*(_QWORD *)(v4 + 168);
              operator delete(v84);
              break;
            }
          }
          else
          {
            if (v87 >= *(_QWORD *)&v77)
              v87 %= *(_QWORD *)&v77;
            if (v87 != v81)
              break;
          }
          v84 = *(_DWORD **)v84;
        }
        while (v84);
      }
    }
LABEL_204:
    while (1)
    {
      v78 += 4;
      if (v78 == v53)
        break;
      v77 = *(int8x8_t *)(v4 + 152);
      if (v77)
        goto LABEL_157;
    }
  }
  if ((a2 & 1) != 0)
  {
LABEL_211:
    if (*(_QWORD *)(v4 + 168))
    {
      v104 = *(NSObject **)(v4 + 40);
      v105 = os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v105)
      {
        ctu::iokit::asString();
        v106 = v142 >= 0 ? &__p : (void **)__p;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v106;
        _os_log_impl(&dword_1BF335000, v104, OS_LOG_TYPE_DEFAULT, "#I Power Source: %s", (uint8_t *)&buf, 0xCu);
        if (SHIBYTE(v142) < 0)
          operator delete(__p);
      }
      v107 = (_QWORD *)*v48;
      if (*v48)
      {
        do
        {
          while (((_DWORD)v107[2] & a2) != 0)
          {
            v107 = (_QWORD *)*v107;
            if (!v107)
              goto LABEL_207;
          }
          *((_WORD *)v107 + 11) = 1;
          capabilities::abs::supportedSARFeatures((capabilities::abs *)v105);
          v105 = capabilities::abs::operator&();
          if ((_DWORD)v105)
            v108 = 2;
          else
            v108 = 1;
          *((_WORD *)v107 + 15) = v108;
          if (*(_QWORD *)(v4 + 72))
          {
            v162 = v171;
            if (v171)
              CFRetain(v171);
            __p = *(void **)((char *)v107 + 20);
            LODWORD(v142) = *((_DWORD *)v107 + 7);
            v159 = 0;
            v160 = 0;
            v161 = 0;
            v109 = operator new(0xCuLL);
            v160 = v109 + 3;
            v161 = (char *)(v109 + 3);
            v109[2] = v142;
            *(_QWORD *)v109 = __p;
            v159 = v109;
            v110 = *(_QWORD *)(v4 + 72);
            if (!v110)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(uint64_t, CFTypeRef *, void **))(*(_QWORD *)v110 + 48))(v110, &v162, &v159);
            if (v159)
            {
              v160 = v159;
              operator delete(v159);
            }
            v105 = (uint64_t)v162;
            if (v162)
              CFRelease(v162);
          }
          v107 = (_QWORD *)*v107;
        }
        while (v107);
      }
      if (*(_QWORD *)(v4 + 168))
      {
        v111 = (_QWORD *)*v48;
        if (*v48)
        {
          do
          {
            v112 = (_QWORD *)*v111;
            operator delete(v111);
            v111 = v112;
          }
          while (v112);
        }
        *(_QWORD *)(v4 + 160) = 0;
        v113 = *(_QWORD *)(v4 + 152);
        if (v113)
        {
          for (i = 0; i != v113; ++i)
            *(_QWORD *)(*(_QWORD *)(v4 + 144) + 8 * i) = 0;
        }
        *(_QWORD *)(v4 + 168) = 0;
      }
    }
    goto LABEL_281;
  }
LABEL_206:
  if ((v7 & 1) == 0)
  {
LABEL_207:
    v94 = v9;
    *(_QWORD *)&v95 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v95 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v148 = 0xAAAAAAAAAAAAAAAALL;
    v158 = v95;
    v157 = v95;
    v156 = v95;
    v155 = v95;
    v154 = v95;
    v153 = v95;
    v152 = v95;
    v151 = v95;
    v150 = v95;
    v147 = v95;
    v146 = v95;
    v145 = v95;
    v144 = v95;
    v143 = v95;
    v142 = v95;
    v96 = MEMORY[0x1E0DE4FE0];
    v97 = MEMORY[0x1E0DE4FE0] + 64;
    v149 = MEMORY[0x1E0DE4FE0] + 64;
    v98 = MEMORY[0x1E0DE4F60];
    v99 = *(void **)(MEMORY[0x1E0DE4F60] + 16);
    __p = *(void **)(MEMORY[0x1E0DE4F60] + 8);
    *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = v99;
    v100 = (std::ios_base *)((char *)&__p + *((_QWORD *)__p - 3));
    std::ios_base::init(v100, &v142);
    v100[1].__vftable = 0;
    v100[1].__fmtflags_ = -1;
    __p = (void *)(v96 + 24);
    v149 = v97;
    std::streambuf::basic_streambuf();
    v101 = MEMORY[0x1E0DE4FB8];
    *(_QWORD *)&v142 = MEMORY[0x1E0DE4FB8] + 16;
    v146 = 0u;
    v147 = 0u;
    LODWORD(v148) = 16;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unexpected Power Source event: ", 31);
    std::ostream::operator<<();
    memset(&buf, 170, sizeof(buf));
    if ((v148 & 0x10) != 0)
    {
      v115 = *((_QWORD *)&v147 + 1);
      if (*((_QWORD *)&v147 + 1) < (unint64_t)v145)
      {
        *((_QWORD *)&v147 + 1) = v145;
        v115 = v145;
      }
      v116 = v101;
      v117 = (const void *)*((_QWORD *)&v144 + 1);
      v102 = v115 - *((_QWORD *)&v144 + 1);
      if ((unint64_t)(v115 - *((_QWORD *)&v144 + 1)) >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_258;
    }
    else
    {
      if ((v148 & 8) == 0)
      {
        v102 = 0;
        *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
        p_buf = &buf;
        goto LABEL_254;
      }
      v116 = v101;
      v117 = (const void *)v143;
      v102 = v144 - v143;
      if ((_QWORD)v144 - (_QWORD)v143 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_258:
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v102 >= 0x17)
    {
      v118 = v94;
      v119 = (v102 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v102 | 7) != 0x17)
        v119 = v102 | 7;
      v120 = v119 + 1;
      p_buf = (std::string *)operator new(v119 + 1);
      buf.__r_.__value_.__l.__size_ = v102;
      buf.__r_.__value_.__r.__words[2] = v120 | 0x8000000000000000;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
      v94 = v118;
      v98 = MEMORY[0x1E0DE4F60];
    }
    else
    {
      *((_BYTE *)&buf.__r_.__value_.__s + 23) = v102;
      p_buf = &buf;
      if (!v102)
        goto LABEL_253;
    }
    memmove(p_buf, v117, v102);
LABEL_253:
    v101 = v116;
LABEL_254:
    p_buf->__r_.__value_.__s.__data_[v102] = 0;
    v121 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
    {
      v122 = &buf;
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v122 = (std::string *)buf.__r_.__value_.__r.__words[0];
      *(_DWORD *)v174 = 136315138;
      *(_QWORD *)&v174[4] = v122;
      _os_log_error_impl(&dword_1BF335000, v121, OS_LOG_TYPE_ERROR, "%s", v174, 0xCu);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_262;
LABEL_256:
      v140 = buf;
    }
    else
    {
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_256;
LABEL_262:
      std::string::__init_copy_ctor_external(&v140, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
    }
    (*(void (**)(_BYTE *__return_ptr, uint64_t, std::string *, uint64_t))(*(_QWORD *)v4 + 48))(v174, v4, &v140, 5);
    v123 = v171;
    v124 = *(const void **)v174;
    v171 = *(CFTypeRef *)v174;
    *(_QWORD *)v174 = 0;
    if (v123)
    {
      CFRelease(v123);
      if (*(_QWORD *)v174)
        CFRelease(*(CFTypeRef *)v174);
    }
    if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v140.__r_.__value_.__l.__data_);
    if (*(_QWORD *)(v4 + 72))
    {
      cf = v124;
      if (v124)
        CFRetain(v124);
      v125 = operator new(0xCuLL);
      v137 = v125 + 6;
      v138 = v125 + 6;
      *v125 = v133;
      v125[1] = v129;
      v125[2] = v134;
      v125[3] = v94;
      v125[4] = v10;
      v125[5] = v130;
      v136 = v125;
      v126 = *(_QWORD *)(v4 + 72);
      if (!v126)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, CFTypeRef *, void **))(*(_QWORD *)v126 + 48))(v126, &cf, &v136);
      if (v136)
      {
        v137 = v136;
        operator delete(v136);
      }
      if (cf)
        CFRelease(cf);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    __p = *(void **)v98;
    *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(v98 + 24);
    *(_QWORD *)&v142 = v101 + 16;
    if (SBYTE7(v147) < 0)
      operator delete((void *)v146);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1C3B89E4C](&v149);
  }
LABEL_281:
  if (v50)
    operator delete(v50);
  if (v171)
    CFRelease(v171);
  v47 = v173;
  if (v173)
  {
LABEL_286:
    p_shared_owners = (unint64_t *)&v47->__shared_owners_;
    do
      v128 = __ldaxr(p_shared_owners);
    while (__stlxr(v128 - 1, p_shared_owners));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
}

void sub_1BF3E2720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62)
{
  void *v62;
  uint64_t v63;

  if (*(char *)(v63 - 105) < 0)
    operator delete(*(void **)(v63 - 128));
  std::ostringstream::~ostringstream((uint64_t)&a28);
  if (v62)
    operator delete(v62);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)(v63 - 168));
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v63 - 160);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c48_ZTSNSt3__18weak_ptrI23AccessoriesDelegateBaseEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c48_ZTSNSt3__18weak_ptrI23AccessoriesDelegateBaseEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN24IOKitAccessoriesDelegate5startEv_block_invoke_6(_QWORD *a1, unsigned int a2)
{
  std::__shared_weak_count *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t v7;
  NSObject *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  std::ios_base *v17;
  uint64_t v18;
  _QWORD *v19;
  const char *v20;
  size_t v21;
  std::string::size_type v22;
  std::string *p_dst;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  std::string *v29;
  CFTypeRef v30;
  char *v31;
  uint64_t v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  void *v35;
  void *v36;
  char *v37;
  CFTypeRef v38;
  std::string v39;
  std::string __dst;
  CFTypeRef cf;
  std::__shared_weak_count *v43;
  _BYTE v44[12];
  _BYTE buf[24];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 __p;
  __int128 v50;
  _OWORD v51[10];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = (_QWORD *)a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  v43 = v6;
  if (!v6)
    return;
  if (!a1[5])
  {
    v10 = v6;
LABEL_52:
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  cf = 0;
  if (a2 < 4)
  {
    v7 = 0x4000300010002uLL >> (16 * a2);
    v8 = v5[5];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = ctu::iokit::asString();
      _os_log_impl(&dword_1BF335000, v8, OS_LOG_TYPE_DEFAULT, "#I Display Cover event: %s", buf, 0xCu);
    }
    v9 = 0;
    if (!v5[9])
      goto LABEL_49;
LABEL_42:
    v38 = v9;
    if (v9)
      CFRetain(v9);
    v31 = (char *)operator new(0xCuLL);
    v36 = v31 + 12;
    v37 = v31 + 12;
    *(_WORD *)v31 = 13;
    *((_WORD *)v31 + 1) = v7;
    *(_QWORD *)(v31 + 4) = 0;
    v35 = v31;
    v32 = v5[9];
    if (!v32)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, CFTypeRef *, void **))(*(_QWORD *)v32 + 48))(v32, &v38, &v35);
    if (v35)
    {
      v36 = v35;
      operator delete(v35);
    }
    if (v38)
      CFRelease(v38);
    goto LABEL_49;
  }
  *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v51[0] = v11;
  v51[9] = v11;
  v51[8] = v11;
  v51[7] = v11;
  v51[6] = v11;
  v51[5] = v11;
  v51[4] = v11;
  v51[3] = v11;
  v51[2] = v11;
  v51[1] = v11;
  v50 = v11;
  __p = v11;
  v48 = v11;
  v47 = v11;
  v46 = v11;
  *(_OWORD *)&buf[8] = v11;
  v12 = MEMORY[0x1E0DE4FE0];
  v13 = MEMORY[0x1E0DE4FE0] + 64;
  v14 = (_QWORD *)MEMORY[0x1E0DE4F60];
  v15 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v16 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *((_QWORD *)&v51[0] + 1) = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)buf = v15;
  *(_QWORD *)&buf[*(_QWORD *)(v15 - 24)] = v16;
  v17 = (std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)];
  std::ios_base::init(v17, &buf[8]);
  v17[1].__vftable = 0;
  v17[1].__fmtflags_ = -1;
  *(_QWORD *)buf = v12 + 24;
  *((_QWORD *)&v51[0] + 1) = v13;
  std::streambuf::basic_streambuf();
  v18 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&buf[8] = MEMORY[0x1E0DE4FB8] + 16;
  __p = 0u;
  v50 = 0u;
  LODWORD(v51[0]) = 16;
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"Unexpected Display Cover event: ", 32);
  v20 = (const char *)ctu::iokit::asString();
  v21 = strlen(v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
  memset(&__dst, 170, sizeof(__dst));
  if ((v51[0] & 0x10) != 0)
  {
    v24 = *((_QWORD *)&v50 + 1);
    if (*((_QWORD *)&v50 + 1) < (unint64_t)v48)
    {
      *((_QWORD *)&v50 + 1) = v48;
      v24 = v48;
    }
    v25 = (const void *)*((_QWORD *)&v47 + 1);
    v22 = v24 - *((_QWORD *)&v47 + 1);
    if ((unint64_t)(v24 - *((_QWORD *)&v47 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_27;
  }
  else
  {
    if ((v51[0] & 8) == 0)
    {
      v22 = 0;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
      p_dst = &__dst;
      goto LABEL_23;
    }
    v25 = (const void *)v46;
    v22 = v47 - v46;
    if ((_QWORD)v47 - (_QWORD)v46 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_27:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v22 >= 0x17)
  {
    v26 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v26 = v22 | 7;
    v27 = v26 + 1;
    p_dst = (std::string *)operator new(v26 + 1);
    __dst.__r_.__value_.__l.__size_ = v22;
    __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_22;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v22;
  p_dst = &__dst;
  if (v22)
LABEL_22:
    memmove(p_dst, v25, v22);
LABEL_23:
  p_dst->__r_.__value_.__s.__data_[v22] = 0;
  v28 = v5[5];
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    v29 = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v29 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    *(_DWORD *)v44 = 136315138;
    *(_QWORD *)&v44[4] = v29;
    _os_log_error_impl(&dword_1BF335000, v28, OS_LOG_TYPE_ERROR, "%s", v44, 0xCu);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_25;
LABEL_31:
    std::string::__init_copy_ctor_external(&v39, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    goto LABEL_32;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_31;
LABEL_25:
  v39 = __dst;
LABEL_32:
  (*(void (**)(_BYTE *__return_ptr, _QWORD *, std::string *, uint64_t))(*v5 + 48))(v44, v5, &v39, 5);
  v30 = cf;
  v9 = *(const void **)v44;
  cf = *(CFTypeRef *)v44;
  *(_QWORD *)v44 = 0;
  if (v30)
  {
    CFRelease(v30);
    if (*(_QWORD *)v44)
      CFRelease(*(CFTypeRef *)v44);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  *(_QWORD *)buf = *v14;
  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = v14[3];
  *(_QWORD *)&buf[8] = v18 + 16;
  if (SBYTE7(v50) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3B89E4C]((char *)v51 + 8);
  LOWORD(v7) = 0;
  if (v5[9])
    goto LABEL_42;
LABEL_49:
  if (v9)
    CFRelease(v9);
  v10 = v43;
  if (v43)
    goto LABEL_52;
}

void sub_1BF3E2E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,const void *a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a25 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a33);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a26);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitDisplayCoverState)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void IOKitAccessoriesDelegate::stop(IOKitAccessoriesDelegate *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN24IOKitAccessoriesDelegate4stopEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_11_4;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN24IOKitAccessoriesDelegate4stopEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t i;
  uint8_t v9[16];
  uint8_t buf[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = *(NSObject **)(v1 + 40);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Stopping", buf, 2u);
    }
    *(_BYTE *)(v1 + 80) = 0;
    v5 = (_QWORD *)ctu::iokit::Controller::stopPowerSourceNotifications(*(ctu::iokit::Controller **)(v1 + 88));
    if (*(_QWORD *)(v1 + 168))
    {
      v5 = *(_QWORD **)(v1 + 160);
      if (v5)
      {
        do
        {
          v6 = (_QWORD *)*v5;
          operator delete(v5);
          v5 = v6;
        }
        while (v6);
      }
      *(_QWORD *)(v1 + 160) = 0;
      v7 = *(_QWORD *)(v1 + 152);
      if (v7)
      {
        for (i = 0; i != v7; ++i)
          *(_QWORD *)(*(_QWORD *)(v1 + 144) + 8 * i) = 0;
      }
      *(_QWORD *)(v1 + 168) = 0;
    }
    if (capabilities::abs::supportsDisplayCoverAccessory((capabilities::abs *)v5))
      ctu::iokit::Controller::stopDisplayCoverStateNotifications(*(ctu::iokit::Controller **)(v1 + 88));
  }
  else if (v4)
  {
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Already stopped", v9, 2u);
  }
}

void std::__shared_ptr_pointer<IOKitAccessoriesDelegate *,std::shared_ptr<IOKitAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOKitAccessoriesDelegate>(IOKitAccessoriesDelegate*)::{lambda(IOKitAccessoriesDelegate *)#1},std::allocator<IOKitAccessoriesDelegate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<IOKitAccessoriesDelegate *,std::shared_ptr<IOKitAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOKitAccessoriesDelegate>(IOKitAccessoriesDelegate*)::{lambda(IOKitAccessoriesDelegate *)#1},std::allocator<IOKitAccessoriesDelegate>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<IOKitAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOKitAccessoriesDelegate>(IOKitAccessoriesDelegate*)::{lambda(IOKitAccessoriesDelegate*)#1}::operator() const(IOKitAccessoriesDelegate*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<IOKitAccessoriesDelegate *,std::shared_ptr<IOKitAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOKitAccessoriesDelegate>(IOKitAccessoriesDelegate*)::{lambda(IOKitAccessoriesDelegate *)#1},std::allocator<IOKitAccessoriesDelegate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI24IOKitAccessoriesDelegate"
                     "EENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI24IOKitAccessor"
                                "iesDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI24IOKitAccessoriesDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI24IOKitAccessoriesDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<IOKitAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOKitAccessoriesDelegate>(IOKitAccessoriesDelegate*)::{lambda(IOKitAccessoriesDelegate*)#1}::operator() const(IOKitAccessoriesDelegate*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__emplace_unique_key_args<ctu::iokit::TelephonyIOKitPowerSource,std::piecewise_construct_t const&,std::tuple<ctu::iokit::TelephonyIOKitPowerSource&&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (v6 <= a2)
        v8 = a2 % v6;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return v10;
            }
            else if ((v12 & (v6 - 1)) != v8)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v6)
              v11 %= v6;
            if (v11 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAAALL;
  }
LABEL_22:
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v5;
  *((_DWORD *)v10 + 4) = *a3;
  *((_WORD *)v10 + 10) = -1;
  *(_QWORD *)((char *)v10 + 22) = 0;
  *((_WORD *)v10 + 15) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v6 && (float)(v14 * (float)v6) >= v13)
  {
    v5 = v8;
  }
  else
  {
    v15 = 1;
    if (v6 >= 3)
      v15 = (v6 & (v6 - 1)) != 0;
    v16 = v15 | (2 * v6);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v6 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v6)
      goto LABEL_35;
    if (prime < v6)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v6 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v6)
LABEL_35:
        std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__do_rehash<true>(a1, prime);
    }
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v5 %= v6;
    }
    else
    {
      v5 = ((_DWORD)v6 - 1) & v5;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v24 >= v6)
        v24 %= v6;
    }
    else
    {
      v24 &= v6 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1BF3E3400(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v4 = operator new(8 * a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 16;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      while (1)
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 == v9)
          goto LABEL_25;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
        {
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
LABEL_25:
          v7 = v16;
          v16 = (_QWORD *)*v16;
          if (!v16)
            return;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
          v7 = v16;
          v16 = (_QWORD *)*v16;
          v9 = v18;
          if (!v16)
            return;
        }
      }
    }
  }
}

void ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E79025F8;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c52_ZTSNSt3__110shared_ptrIK23AccessoriesDelegateBaseEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__110shared_ptrIK23AccessoriesDelegateBaseEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void CMOnBodyDelegate::create(NSObject **this@<X0>, queue a2@<0:X1>, _QWORD *a3@<X8>)
{
  char *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 v14;
  NSObject *v15;
  uint8_t v16[48];

  if ((objc_msgSend(MEMORY[0x1E0CA5690], "isOnBodyStatusDetectionAvailable") & 1) == 0)
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED7100E0 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v15 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_DEFAULT))
      {
LABEL_17:
        *a3 = 0;
        a3[1] = 0;
        return;
      }
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
      v15 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_DEFAULT))
        goto LABEL_17;
    }
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1BF335000, v15, OS_LOG_TYPE_DEFAULT, "Motion on-body detection is not available on this device", v16, 2u);
    goto LABEL_17;
  }
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  v5 = (char *)operator new(0x38uLL);
  v6 = *this;
  if (v6)
    dispatch_retain(v6);
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *((_QWORD *)v5 + 2) = v6;
  *a3 = v5;
  v7 = (std::__shared_weak_count *)operator new(0x28uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)off_1E79026C8;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  v7[1].__shared_owners_ = (uint64_t)&__block_literal_global_3;
  a3[1] = v7;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  *(_QWORD *)v5 = v5;
  *((_QWORD *)v5 + 1) = v7;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (v13)
  {
    if (!v6)
      return;
LABEL_19:
    dispatch_release(v6);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v8);
  if (v6)
    goto LABEL_19;
}

void sub_1BF3E39AC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(uint64_t a1), void *a12, uint64_t a13)
{
  uint64_t v13;
  NSObject *v14;

  __cxa_begin_catch(a1);
  v14 = *(NSObject **)(v13 + 16);
  a9 = MEMORY[0x1E0C809B0];
  a10 = 3221225472;
  a11 = _block_invoke_2;
  a12 = &__block_descriptor_40_e5_v8__0l;
  a13 = v13;
  dispatch_async(v14, &a9);
  __cxa_rethrow();
}

void sub_1BF3E39F4(_Unwind_Exception *a1)
{
  NSObject *v1;

  __cxa_end_catch();
  if (v1)
    dispatch_release(v1);
  _Unwind_Resume(a1);
}

uint64_t CMOnBodyDelegate::isSupported(CMOnBodyDelegate *this)
{
  return objc_msgSend(MEMORY[0x1E0CA5690], "isOnBodyStatusDetectionAvailable");
}

void _block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = *(NSObject **)(a2 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = _block_invoke_2;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a2;
  dispatch_async(v2, block);
}

void _block_invoke_2(uint64_t a1)
{
  CMOnBodyDelegate *v1;
  void *v2;

  v1 = *(CMOnBodyDelegate **)(a1 + 32);
  if (v1)
  {
    CMOnBodyDelegate::~CMOnBodyDelegate(v1);
    operator delete(v2);
  }
}

void CMOnBodyDelegate::CMOnBodyDelegate(CMOnBodyDelegate *this, queue a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 2) = *(_QWORD *)a2.fObj.fObj;
}

{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 2) = *(_QWORD *)a2.fObj.fObj;
}

uint64_t CMOnBodyDelegate::shutdown(CMOnBodyDelegate *this)
{
  uint64_t result;

  result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CA5690], "sharedOnBodyStatusManager"), "stopOnBodyStatusDetection");
  if (*((_QWORD *)this + 2))
    *((_QWORD *)this + 2) = 0;
  return result;
}

uint64_t CMOnBodyDelegate::stopMotionDetection(CMOnBodyDelegate *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CA5690], "sharedOnBodyStatusManager"), "stopOnBodyStatusDetection");
}

void CMOnBodyDelegate::~CMOnBodyDelegate(CMOnBodyDelegate *this)
{
  uint64_t v2;
  uint64_t i;
  NSObject *v4;
  const void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  const void *v11;
  std::__shared_weak_count *v12;

  v2 = *((_QWORD *)this + 3);
  for (i = *((_QWORD *)this + 4); i != v2; i -= 16)
  {
    v4 = *(NSObject **)(i - 8);
    if (v4)
      dispatch_release(v4);
    v5 = *(const void **)(i - 16);
    if (v5)
      _Block_release(v5);
  }
  *((_QWORD *)this + 4) = v2;
  v6 = (const void *)*((_QWORD *)this + 6);
  if (v6)
    CFRelease(v6);
  v7 = *((_QWORD *)this + 3);
  if (v7)
  {
    v8 = *((_QWORD *)this + 4);
    v9 = (void *)*((_QWORD *)this + 3);
    if (v8 != v7)
    {
      do
      {
        v10 = *(NSObject **)(v8 - 8);
        if (v10)
          dispatch_release(v10);
        v11 = *(const void **)(v8 - 16);
        if (v11)
          _Block_release(v11);
        v8 -= 16;
      }
      while (v8 != v7);
      v9 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v7;
    operator delete(v9);
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
}

void CMOnBodyDelegate::startMotionDetection(CMOnBodyDelegate *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t (*v10)(uint64_t);
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t (*v15)(uint64_t);
  unsigned __int8 v16;
  NSObject *v17;
  _QWORD v18[5];
  std::__shared_weak_count *v19;
  uint8_t buf[16];

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (!v2 || (v3 = *(_QWORD *)this, (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
    if (*((_QWORD *)this + 6))
      v15 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    else
      v15 = 0;
    if (v15)
      goto LABEL_12;
LABEL_20:
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED7100E0 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v17 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_DEFAULT))
        goto LABEL_24;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
      v17 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_DEFAULT))
        goto LABEL_24;
    }
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v17, OS_LOG_TYPE_DEFAULT, "Motion Parameter is not ready. Cannot start the motion detection!", buf, 2u);
    goto LABEL_24;
  }
  if (*((_QWORD *)this + 6))
    v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  else
    v10 = 0;
  if (!v10)
    goto LABEL_20;
LABEL_12:
  v11 = (void *)objc_msgSend(MEMORY[0x1E0CA5690], "sharedOnBodyStatusManager");
  v12 = *((_QWORD *)this + 2);
  v13 = *((_QWORD *)this + 6);
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3321888768;
  v18[2] = ___ZN16CMOnBodyDelegate20startMotionDetectionEv_block_invoke;
  v18[3] = &__block_descriptor_48_e8_32c41_ZTSNSt3__18weak_ptrI16CMOnBodyDelegateEE_e36_v24__0__CMOnBodyStatus_8__NSError_16l;
  v18[4] = v3;
  v19 = v5;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  objc_msgSend(v11, "startOnBodyStatusDetectionToQueue:withParameters:handler:", v12, v13, v18);
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
LABEL_24:
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF3E3DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  std::__shared_weak_count *v14;

  if (a14)
  {
    std::__shared_weak_count::__release_weak(a14);
    std::__shared_weak_count::__release_weak(v14);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v14);
  _Unwind_Resume(a1);
}

void ___ZN16CMOnBodyDelegate20startMotionDetectionEv_block_invoke(uint64_t a1, void *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 32);
      if (v7)
        CMOnBodyDelegate::motionCallback_sync(v7, objc_msgSend(a2, "result", v7, v5), objc_msgSend(a2, "confidence"));
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1BF3E3EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void CMOnBodyDelegate::motionCallback_sync(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v7;
  NSObject *v8;
  void *v9;
  const void *v10;
  void *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  void *v16;
  void *aBlock;
  int v18;
  int v19;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  if (v3 != v4)
  {
    while (*(_QWORD *)v3)
    {
      v7 = _Block_copy(*(const void **)v3);
      v8 = *(NSObject **)(v3 + 8);
      if (v8)
        goto LABEL_6;
LABEL_7:
      if (v7)
      {
        v9 = _Block_copy(v7);
        v10 = v9;
        v13 = MEMORY[0x1E0C809B0];
        v14 = 3321888768;
        v15 = ___ZNK8dispatch8callbackIU13block_pointerFvN16CMOnBodyDelegate14CMOnBodyResultENS1_24CMOnBodyResultConfidenceEEEclIJS2_S3_EEEvDpT__block_invoke;
        v16 = &__block_descriptor_48_e8_32c109_ZTSN8dispatch5blockIU13block_pointerFvN16CMOnBodyDelegate14CMOnBodyResultENS1_24CMOnBodyResultConfidenceEEEE_e5_v8__0l;
        if (v9)
        {
          v11 = _Block_copy(v9);
          v12 = 0;
        }
        else
        {
          v11 = 0;
          v12 = 1;
        }
      }
      else
      {
        v10 = 0;
        v11 = 0;
        v13 = MEMORY[0x1E0C809B0];
        v14 = 3321888768;
        v12 = 1;
        v15 = ___ZNK8dispatch8callbackIU13block_pointerFvN16CMOnBodyDelegate14CMOnBodyResultENS1_24CMOnBodyResultConfidenceEEEclIJS2_S3_EEEvDpT__block_invoke;
        v16 = &__block_descriptor_48_e8_32c109_ZTSN8dispatch5blockIU13block_pointerFvN16CMOnBodyDelegate14CMOnBodyResultENS1_24CMOnBodyResultConfidenceEEEE_e5_v8__0l;
      }
      aBlock = v11;
      v18 = a2;
      v19 = a3;
      dispatch_async(v8, &v13);
      if (aBlock)
        _Block_release(aBlock);
      if ((v12 & 1) == 0)
        _Block_release(v10);
      if (v8)
        dispatch_release(v8);
      if (v7)
        _Block_release(v7);
      v3 += 16;
      if (v3 == v4)
        return;
    }
    v7 = 0;
    v8 = *(NSObject **)(v3 + 8);
    if (!v8)
      goto LABEL_7;
LABEL_6:
    dispatch_retain(v8);
    goto LABEL_7;
  }
}

uint64_t __copy_helper_block_e8_32c41_ZTSNSt3__18weak_ptrI16CMOnBodyDelegateEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c41_ZTSNSt3__18weak_ptrI16CMOnBodyDelegateEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void CMOnBodyDelegate::setThresholds(CMOnBodyDelegate *this, CFTypeRef cf)
{
  const void *v3;
  uint64_t (*v4)(uint64_t);
  unsigned __int8 v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  unsigned __int8 v10;
  __int16 v11;
  __int16 v12;

  v3 = (const void *)*((_QWORD *)this + 6);
  v4 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!v3)
    v4 = 0;
  if (!v4)
  {
    if (cf)
    {
      CFRetain(cf);
      v3 = (const void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 6) = cf;
    if (v3)
      CFRelease(v3);
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CA5690], "sharedOnBodyStatusManager"), "setPropertiesWithDictionary:", cf);
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED7100E0 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v6 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_DEFAULT))
        return;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
      v6 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_DEFAULT))
        return;
    }
    v11 = 0;
    v7 = "Motion parameter is set!";
    v8 = (uint8_t *)&v11;
    goto LABEL_16;
  }
  if ((v5 & 1) == 0)
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED7100E0 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
    }
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v6 = qword_1ED7100E0;
    if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_DEFAULT))
      return;
    goto LABEL_7;
  }
  dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
  v6 = qword_1ED7100E0;
  if (os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_DEFAULT))
  {
LABEL_7:
    v12 = 0;
    v7 = "Motion parameter is already set.";
    v8 = (uint8_t *)&v12;
LABEL_16:
    _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, v7, v8, 2u);
  }
}

_QWORD *CMOnBodyDelegate::registerCallback(_QWORD *a1, void **a2)
{
  _QWORD *v4;
  void *v5;
  NSObject *v6;
  _QWORD *result;

  v4 = (_QWORD *)a1[4];
  if ((unint64_t)v4 >= a1[5])
  {
    result = std::vector<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)> const&>(a1 + 3, (uint64_t)a2);
    a1[4] = result;
  }
  else
  {
    v5 = *a2;
    if (*a2)
      v5 = _Block_copy(v5);
    v6 = a2[1];
    *v4 = v5;
    v4[1] = v6;
    if (v6)
      dispatch_retain(v6);
    result = v4 + 2;
    a1[4] = v4 + 2;
  }
  return result;
}

const char *CMOnBodyDelegate::toString(unsigned int a1)
{
  if (a1 > 2)
    return "Unknown";
  else
    return off_1E7902738[a1];
}

const char *CMOnBodyDelegate::toString(int a1)
{
  const char *v1;

  v1 = "Confidence Level Unknown";
  if (a1 == 1)
    v1 = "Confidence Level High";
  if (a1)
    return v1;
  else
    return "Confidence Level Low";
}

_QWORD *std::vector<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)> const&>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  void *v9;
  NSObject *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  NSObject *v20;
  const void *v21;
  char *v23;
  BOOL v24;
  BOOL v25;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  double *v30;
  const double *v31;
  uint64_t v32;
  float64x2x2_t v33;

  v2 = a1[1] - *a1;
  v3 = (v2 >> 4) + 1;
  if (v3 >> 60)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v6 = a1[2] - *a1;
  if (v6 >> 3 > v3)
    v3 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (!v7)
  {
    v8 = 0;
    v9 = *(void **)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (v7 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v8 = (char *)operator new(16 * v7);
  v9 = *(void **)a2;
  if (*(_QWORD *)a2)
LABEL_12:
    v9 = _Block_copy(v9);
LABEL_13:
  v10 = *(NSObject **)(a2 + 8);
  v11 = &v8[16 * (v2 >> 4)];
  *(_QWORD *)v11 = v9;
  *((_QWORD *)v11 + 1) = v10;
  if (v10)
    dispatch_retain(v10);
  v12 = &v8[16 * v7];
  v13 = v11 + 16;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    v16 = (unint64_t)&v15[-*a1 - 16];
    if (v16 < 0xD0)
      goto LABEL_17;
    v23 = &v15[-(v16 & 0xFFFFFFFFFFFFFFF0)];
    v24 = &v8[v2 - 8 - (v16 & 0xFFFFFFFFFFFFFFF0)] >= v15 || v23 - 8 >= v11;
    v25 = !v24;
    if (v23 - 16 < &v8[v2 - 8] && &v8[v2 - (v16 & 0xFFFFFFFFFFFFFFF0) - 16] < v15 - 8)
      goto LABEL_17;
    if (v25)
      goto LABEL_17;
    v27 = (v16 >> 4) + 1;
    v28 = 16 * (v27 & 0x1FFFFFFFFFFFFFFELL);
    v17 = &v11[-v28];
    v29 = &v15[-v28];
    v30 = (double *)(v11 - 32);
    v31 = (const double *)(v15 - 32);
    v32 = v27 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v33 = vld2q_f64(v31);
      vst2q_f64(v30, v33);
      *(_OWORD *)v31 = 0uLL;
      *((_OWORD *)v31 + 1) = 0uLL;
      v31 -= 4;
      v30 -= 4;
      v32 -= 2;
    }
    while (v32);
    v11 = v17;
    v15 = v29;
    if (v27 != (v27 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_17:
      v17 = v11;
      do
      {
        v18 = *((_OWORD *)v15 - 1);
        v15 -= 16;
        *((_OWORD *)v17 - 1) = v18;
        v17 -= 16;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = v17;
    a1[1] = v13;
    a1[2] = v12;
    while (v19 != v15)
    {
      v20 = *((_QWORD *)v19 - 1);
      if (v20)
        dispatch_release(v20);
      v21 = (const void *)*((_QWORD *)v19 - 2);
      if (v21)
        _Block_release(v21);
      v19 -= 16;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void std::__shared_ptr_pointer<CMOnBodyDelegate *,void({block_pointer})(CMOnBodyDelegate *),std::allocator<CMOnBodyDelegate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<CMOnBodyDelegate *,void({block_pointer})(CMOnBodyDelegate *),std::allocator<CMOnBodyDelegate>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<CMOnBodyDelegate *,void({block_pointer})(CMOnBodyDelegate *),std::allocator<CMOnBodyDelegate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF540E30)
    return a1 + 32;
  if (((v3 & 0x80000001BF540E30 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF540E30))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF540E30 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 32;
  return 0;
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvN16CMOnBodyDelegate14CMOnBodyResultENS1_24CMOnBodyResultConfidenceEEEclIJS2_S3_EEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
}

void *__copy_helper_block_e8_32c109_ZTSN8dispatch5blockIU13block_pointerFvN16CMOnBodyDelegate14CMOnBodyResultENS1_24CMOnBodyResultConfidenceEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c109_ZTSN8dispatch5blockIU13block_pointerFvN16CMOnBodyDelegate14CMOnBodyResultENS1_24CMOnBodyResultConfidenceEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

void HandDetectionManager::create(char *a1@<X0>, NSObject **a2@<X1>, NSObject **a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, HandDetectionManager **a7@<X8>)
{
  HandDetectionManager *v14;
  NSObject *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  std::__shared_weak_count *v29;
  unint64_t v30;
  unint64_t *p_shared_weak_owners;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  HandDetectionManager *v45;
  unint64_t v46;
  unsigned __int8 v47;
  NSObject *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD v52[2];
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  dispatch_object_t object;
  dispatch_object_t v58;
  HandDetectionManager *v59;
  unint64_t v60;
  uint8_t buf[8];

  v59 = (HandDetectionManager *)0xAAAAAAAAAAAAAAAALL;
  v60 = 0xAAAAAAAAAAAAAAAALL;
  v14 = (HandDetectionManager *)operator new(0xA0uLL);
  v15 = *a2;
  v58 = v15;
  if (v15)
    dispatch_retain(v15);
  v16 = *a3;
  object = v16;
  if (v16)
    dispatch_retain(v16);
  v17 = (std::__shared_weak_count *)a4[1];
  v55 = *a4;
  v56 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v20 = (std::__shared_weak_count *)a5[1];
  v53 = *a5;
  v54 = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *a6;
  v24 = (std::__shared_weak_count *)a6[1];
  v52[0] = v23;
  v52[1] = v24;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  HandDetectionManager::HandDetectionManager((uint64_t)v14, a1, &v58, &object, &v55, &v53, v52);
  v59 = v14;
  *(_QWORD *)buf = v14;
  v27 = (std::__shared_weak_count *)operator new(0x20uLL);
  v27->__shared_owners_ = 0;
  v28 = (unint64_t *)&v27->__shared_owners_;
  v27->__vftable = (std::__shared_weak_count_vtbl *)off_1E7902820;
  v27->__shared_weak_owners_ = 0;
  v27[1].__vftable = (std::__shared_weak_count_vtbl *)v14;
  v60 = (unint64_t)v27;
  *(_QWORD *)buf = 0;
  v29 = (std::__shared_weak_count *)*((_QWORD *)v14 + 2);
  if (v29)
  {
    if (v29->__shared_owners_ != -1)
      goto LABEL_27;
    do
      v30 = __ldxr(v28);
    while (__stxr(v30 + 1, v28));
    p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
    do
      v32 = __ldxr(p_shared_weak_owners);
    while (__stxr(v32 + 1, p_shared_weak_owners));
    *((_QWORD *)v14 + 1) = v14;
    *((_QWORD *)v14 + 2) = v27;
    std::__shared_weak_count::__release_weak(v29);
  }
  else
  {
    do
      v33 = __ldxr(v28);
    while (__stxr(v33 + 1, v28));
    v34 = (unint64_t *)&v27->__shared_weak_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    *((_QWORD *)v14 + 1) = v14;
    *((_QWORD *)v14 + 2) = v27;
  }
  do
    v36 = __ldaxr(v28);
  while (__stlxr(v36 - 1, v28));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
LABEL_27:
  if (*(_QWORD *)buf)
    HandDetectionManager::~HandDetectionManager(*(HandDetectionManager **)buf);
  if (v24)
  {
    v37 = (unint64_t *)&v24->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v39 = v54;
  if (v54)
  {
    v40 = (unint64_t *)&v54->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v56;
  if (v56)
  {
    v43 = (unint64_t *)&v56->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (object)
    dispatch_release(object);
  if (v58)
    dispatch_release(v58);
  v45 = v59;
  if (v59 && (HandDetectionManager::init(v59) & 1) != 0)
  {
    v46 = v60;
    *a7 = v45;
    a7[1] = (HandDetectionManager *)v46;
    return;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED7100E0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v48 = qword_1ED7100E0;
    if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
      goto LABEL_54;
LABEL_61:
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF335000, v48, OS_LOG_TYPE_ERROR, "Failed to create Power Source Manager!", buf, 2u);
    *a7 = 0;
    a7[1] = 0;
    v49 = (std::__shared_weak_count *)v60;
    if (!v60)
      return;
    goto LABEL_55;
  }
  dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
  v48 = qword_1ED7100E0;
  if (os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
    goto LABEL_61;
LABEL_54:
  *a7 = 0;
  a7[1] = 0;
  v49 = (std::__shared_weak_count *)v60;
  if (!v60)
    return;
LABEL_55:
  v50 = (unint64_t *)&v49->__shared_owners_;
  do
    v51 = __ldaxr(v50);
  while (__stlxr(v51 - 1, v50));
  if (!v51)
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
  }
}

void sub_1BF3E4A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF3E4A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, HandDetectionManager *a19)
{
  NSObject *v19;
  NSObject *v20;

  std::unique_ptr<HandDetectionManager>::~unique_ptr[abi:ne180100](&a19);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (v20)
  {
    dispatch_release(v20);
    if (!v19)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  dispatch_release(v19);
  goto LABEL_6;
}

uint64_t HandDetectionManager::init(HandDetectionManager *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  NSObject *v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  NSObject *v19;
  uint64_t **v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  _QWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  void *v27;
  NSObject *v28;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD v34[6];
  std::__shared_weak_count *v35;
  void *v36;
  _QWORD v37[6];
  std::__shared_weak_count *v38;
  void *v39;
  dispatch_object_t object;
  _QWORD v41[6];
  std::__shared_weak_count *v42;
  const void *v43;
  _QWORD aBlock[6];
  std::__shared_weak_count *v45;
  const void *v46;
  dispatch_object_t v47;
  uint8_t buf[16];

  v3 = *((_QWORD *)this + 1);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
  {
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
  }
  if (!*((_QWORD *)this + 6))
  {
    v15 = *(NSObject **)this;
    if (!os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
      goto LABEL_25;
    *(_WORD *)buf = 0;
    v16 = "Failed to create hand detection manager";
    goto LABEL_24;
  }
  if (!*((_QWORD *)this + 9))
  {
    v15 = *(NSObject **)this;
    if (!os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
      goto LABEL_25;
    *(_WORD *)buf = 0;
    v16 = "Failed to create audio manager";
    goto LABEL_24;
  }
  if (!*((_QWORD *)this + 12))
  {
    v15 = *(NSObject **)this;
    if (!os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
      goto LABEL_25;
    *(_WORD *)buf = 0;
    v16 = "Failed to create proximity sensor instance";
LABEL_24:
    _os_log_error_impl(&dword_1BF335000, v15, OS_LOG_TYPE_ERROR, v16, buf, 2u);
LABEL_25:
    v17 = 0;
    if (!v2)
      return v17;
LABEL_26:
    std::__shared_weak_count::__release_weak(v2);
    return v17;
  }
  v6 = (_QWORD *)*((_QWORD *)this + 15);
  v7 = MEMORY[0x1E0C809B0];
  if (v6)
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN20HandDetectionManager4initEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_13;
    aBlock[4] = this;
    aBlock[5] = v3;
    v45 = v2;
    if (v2)
    {
      v8 = (unint64_t *)&v2->__shared_weak_owners_;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = _Block_copy(aBlock);
    v11 = *((_QWORD *)this + 18);
    if (v11)
      dispatch_retain(*((dispatch_object_t *)this + 18));
    v46 = v10;
    v47 = v11;
    v12 = (_QWORD *)v6[4];
    if ((unint64_t)v12 >= v6[5])
    {
      v14 = std::vector<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)> const&>(v6 + 3, (uint64_t)&v46);
      goto LABEL_31;
    }
    if (v10)
    {
      v13 = _Block_copy(v10);
      v11 = v47;
      *v12 = v13;
      v12[1] = v11;
      if (!v11)
      {
LABEL_17:
        v14 = v12 + 2;
LABEL_31:
        v6[4] = v14;
        if (v47)
          dispatch_release(v47);
        if (v46)
          _Block_release(v46);
        if (v45)
          std::__shared_weak_count::__release_weak(v45);
        goto LABEL_37;
      }
    }
    else
    {
      *v12 = 0;
      v12[1] = v11;
      if (!v11)
        goto LABEL_17;
    }
    dispatch_retain(v11);
    goto LABEL_17;
  }
  v19 = *(NSObject **)this;
  if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF335000, v19, OS_LOG_TYPE_ERROR, "On-Body handler is not created", buf, 2u);
  }
LABEL_37:
  v20 = (uint64_t **)*((_QWORD *)this + 6);
  v41[0] = v7;
  v41[1] = 1174405120;
  v41[2] = ___ZN20HandDetectionManager4initEv_block_invoke_3;
  v41[3] = &__block_descriptor_tmp_5_8;
  v41[4] = this;
  v41[5] = v3;
  v42 = v2;
  if (v2)
  {
    v21 = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = _Block_copy(v41);
  v43 = v23;
  CMHandDetectionDelegate::registerCallback(v20, &v43);
  if (v23)
    _Block_release(v23);
  v24 = (_QWORD *)*((_QWORD *)this + 9);
  v37[0] = v7;
  v37[1] = 1174405120;
  v37[2] = ___ZN20HandDetectionManager4initEv_block_invoke_6;
  v37[3] = &__block_descriptor_tmp_8_3;
  v37[4] = this;
  v37[5] = v3;
  v38 = v2;
  if (v2)
  {
    v25 = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = _Block_copy(v37);
  v28 = *((_QWORD *)this + 18);
  if (v28)
    dispatch_retain(*((dispatch_object_t *)this + 18));
  v39 = v27;
  object = v28;
  v29 = (_QWORD *)v24[9];
  if ((unint64_t)v29 < v24[10])
  {
    if (v27)
    {
      v30 = _Block_copy(v27);
      v28 = object;
      *v29 = v30;
      v29[1] = v28;
      if (!v28)
      {
LABEL_51:
        v31 = v29 + 2;
        goto LABEL_53;
      }
    }
    else
    {
      *v29 = 0;
      v29[1] = v28;
      if (!v28)
        goto LABEL_51;
    }
    dispatch_retain(v28);
    goto LABEL_51;
  }
  v31 = std::vector<dispatch::callback<void({block_pointer})(AudioManager::AudioOutputState)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(AudioManager::AudioOutputState)> const&>(v24 + 8, (uint64_t)&v39);
LABEL_53:
  v24[9] = v31;
  if (object)
    dispatch_release(object);
  if (v39)
    _Block_release(v39);
  v34[0] = v7;
  v34[1] = 1174405120;
  v34[2] = ___ZN20HandDetectionManager4initEv_block_invoke_9;
  v34[3] = &__block_descriptor_tmp_13_4;
  v34[4] = this;
  v34[5] = v3;
  v35 = v2;
  if (v2)
  {
    v32 = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v36 = _Block_copy(v34);
  ctu::iokit::IOHIDController::registerProxCallback();
  if (v36)
    _Block_release(v36);
  ctu::iokit::IOHIDController::start(*((ctu::iokit::IOHIDController **)this + 12));
  if (v35)
    std::__shared_weak_count::__release_weak(v35);
  if (v38)
    std::__shared_weak_count::__release_weak(v38);
  if (v42)
    std::__shared_weak_count::__release_weak(v42);
  v17 = 1;
  if (v2)
    goto LABEL_26;
  return v17;
}

void sub_1BF3E4F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v35;

  dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)>::~callback(v33 - 128);
  v35 = *(std::__shared_weak_count **)(v33 - 136);
  if (v35)
    std::__shared_weak_count::__release_weak(v35);
  if (v32)
    std::__shared_weak_count::__release_weak(v32);
  _Unwind_Resume(a1);
}

uint64_t HandDetectionManager::HandDetectionManager(uint64_t a1, char *__s, NSObject **a3, NSObject **a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  size_t v14;
  std::string::size_type v15;
  std::string *p_dst;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  void **v23;
  NSObject *v24;
  NSObject *v25;
  queue v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  NSObject *v36;
  NSObject *v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  NSObject *v45;
  __int128 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  dispatch_object_t v61;
  dispatch_object_t v62;
  dispatch_object_t v63;
  dispatch_object_t object;
  dispatch_object_t v65;
  std::string __dst;
  std::string v67;
  void *__p[2];
  int64_t v69;

  v14 = strlen(__s);
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    p_dst = (std::string *)operator new(v17 + 1);
    __dst.__r_.__value_.__l.__size_ = v15;
    __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14;
  p_dst = &__dst;
  if (v14)
LABEL_8:
    memcpy(p_dst, __s, v15);
  p_dst->__r_.__value_.__s.__data_[v15] = 0;
  v19 = std::string::append(&__dst, ".", 1uLL);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v67.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v67, "HandDetectionManager", 0x14uLL);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v69 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (v69 >= 0)
    v23 = __p;
  else
    v23 = (void **)__p[0];
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)a1, "com.apple.telephony.abm", (const char *)v23);
  if ((SHIBYTE(v69) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_69:
    operator delete(v67.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_70;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_69;
LABEL_14:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_15;
LABEL_70:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_15:
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  v24 = *a3;
  v65 = v24;
  if (v24)
    dispatch_retain(v24);
  v25 = *a4;
  object = v25;
  if (v25)
    dispatch_retain(v25);
  CMHandDetectionDelegate::create(&v65, &object, (_QWORD *)(a1 + 48));
  if (object)
    dispatch_release(object);
  if (v65)
    dispatch_release(v65);
  *(_QWORD *)(a1 + 72) = *a5;
  v27 = a5[1];
  *(_QWORD *)(a1 + 80) = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  *(_QWORD *)(a1 + 96) = *a6;
  *(_BYTE *)(a1 + 88) = 0;
  v30 = a6[1];
  *(_QWORD *)(a1 + 104) = v30;
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  *(_QWORD *)(a1 + 120) = *a7;
  *(_BYTE *)(a1 + 112) = 0;
  v33 = a7[1];
  *(_QWORD *)(a1 + 128) = v33;
  if (v33)
  {
    v34 = (unint64_t *)(v33 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  *(_DWORD *)(a1 + 136) = 1;
  v36 = *a3;
  *(_QWORD *)(a1 + 144) = *a3;
  if (v36)
    dispatch_retain(v36);
  *(_BYTE *)(a1 + 152) = 0;
  if (!*(_QWORD *)(a1 + 72))
  {
    AudioManager::create((AudioManager *)__s, (AudioManager **)__p);
    v54 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v55 = *(std::__shared_weak_count **)(a1 + 80);
    *(_OWORD *)(a1 + 72) = v54;
    if (v55)
    {
      p_shared_owners = (unint64_t *)&v55->__shared_owners_;
      do
        v57 = __ldaxr(p_shared_owners);
      while (__stlxr(v57 - 1, p_shared_owners));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v58 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v59 = (unint64_t *)((char *)__p[1] + 8);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
  }
  if (!*(_QWORD *)(a1 + 96))
  {
    v37 = *a3;
    v63 = v37;
    if (v37)
      dispatch_retain(v37);
    v62 = 0;
    ctu::iokit::IOHIDController::create();
    v38 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v39 = *(std::__shared_weak_count **)(a1 + 104);
    *(_OWORD *)(a1 + 96) = v38;
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v42 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v43 = (unint64_t *)((char *)__p[1] + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    if (v62)
      dispatch_release(v62);
    if (v63)
      dispatch_release(v63);
  }
  if (!*(_QWORD *)(a1 + 120))
  {
    v45 = *a3;
    v61 = v45;
    if (v45)
      dispatch_retain(v45);
    CMOnBodyDelegate::create(&v61, v26, __p);
    v46 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v47 = *(std::__shared_weak_count **)(a1 + 128);
    *(_OWORD *)(a1 + 120) = v46;
    if (v47)
    {
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v50 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v51 = (unint64_t *)((char *)__p[1] + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    if (v61)
      dispatch_release(v61);
  }
  return a1;
}

void sub_1BF3E5488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, dispatch_object_t a10, dispatch_object_t a11, dispatch_object_t a12, dispatch_object_t a13)
{
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v20;
  std::__shared_weak_count *v21;

  v20 = *(NSObject **)(v13 + 144);
  if (v20)
    dispatch_release(v20);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v18);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v17);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v16);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v15);
  std::vector<dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>>::~vector[abi:ne180100](v14);
  v21 = *(std::__shared_weak_count **)(v13 + 16);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  MEMORY[0x1C3B89240](v13);
  _Unwind_Resume(a1);
}

void sub_1BF3E5558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
  {
    operator delete(__p);
    if (a25 < 0)
    {
LABEL_5:
      operator delete(a20);
      if ((a19 & 0x80000000) == 0)
LABEL_9:
        _Unwind_Resume(a1);
LABEL_8:
      operator delete(a14);
      _Unwind_Resume(a1);
    }
  }
  else if (a25 < 0)
  {
    goto LABEL_5;
  }
  if ((a19 & 0x80000000) == 0)
    goto LABEL_9;
  goto LABEL_8;
}

void **std::vector<dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  NSObject *v5;
  const void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *((_QWORD *)v3 - 1);
        if (v5)
          dispatch_release(v5);
        v6 = (const void *)*((_QWORD *)v3 - 2);
        if (v6)
          _Block_release(v6);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void HandDetectionManager::~HandDetectionManager(HandDetectionManager *this)
{
  uint64_t v2;
  uint64_t i;
  NSObject *v4;
  const void *v5;
  ctu::iokit::IOHIDController *v6;
  uint64_t **v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  NSObject *v24;
  const void *v25;
  std::__shared_weak_count *v26;
  uint64_t *v27;

  v2 = *((_QWORD *)this + 3);
  for (i = *((_QWORD *)this + 4); i != v2; i -= 16)
  {
    v4 = *(NSObject **)(i - 8);
    if (v4)
      dispatch_release(v4);
    v5 = *(const void **)(i - 16);
    if (v5)
      _Block_release(v5);
  }
  *((_QWORD *)this + 4) = v2;
  v6 = (ctu::iokit::IOHIDController *)*((_QWORD *)this + 12);
  if (v6)
    ctu::iokit::IOHIDController::stop(v6);
  v7 = (uint64_t **)*((_QWORD *)this + 6);
  if (v7)
  {
    v27 = *v7;
    ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>(v27, &v27);
    v27 = (uint64_t *)**((_QWORD **)this + 6);
    ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1}>(v27, &v27);
  }
  v8 = *((_QWORD *)this + 18);
  if (v8)
    dispatch_release(v8);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v18)
    goto LABEL_33;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    v21 = (char *)*((_QWORD *)this + 3);
    if (!v21)
      goto LABEL_43;
  }
  else
  {
LABEL_33:
    v21 = (char *)*((_QWORD *)this + 3);
    if (!v21)
      goto LABEL_43;
  }
  v22 = (char *)*((_QWORD *)this + 4);
  v23 = v21;
  if (v22 != v21)
  {
    do
    {
      v24 = *((_QWORD *)v22 - 1);
      if (v24)
        dispatch_release(v24);
      v25 = (const void *)*((_QWORD *)v22 - 2);
      if (v25)
        _Block_release(v25);
      v22 -= 16;
    }
    while (v22 != v21);
    v23 = (char *)*((_QWORD *)this + 3);
  }
  *((_QWORD *)this + 4) = v21;
  operator delete(v23);
LABEL_43:
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  JUMPOUT(0x1C3B89240);
}

void ___ZN20HandDetectionManager4initEv_block_invoke(_QWORD *a1, unsigned int a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  NSObject *v13;
  const char *v14;
  const char *v15;
  int v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v10)
      {
        *(_DWORD *)(v7 + 136) = a2;
        v13 = *(NSObject **)v7;
        if (os_log_type_enabled(*(os_log_t *)v7, OS_LOG_TYPE_DEFAULT))
        {
          if (a2 > 2)
            v14 = "Unknown";
          else
            v14 = off_1E7902890[a2];
          v15 = "Confidence Level Unknown";
          if (a3 == 1)
            v15 = "Confidence Level High";
          if (!a3)
            v15 = "Confidence Level Low";
          v16 = 136315394;
          v17 = v14;
          v18 = 2080;
          v19 = v15;
          _os_log_impl(&dword_1BF335000, v13, OS_LOG_TYPE_DEFAULT, "#I On Body Callback: OnBody: %s, confidence: %s", (uint8_t *)&v16, 0x16u);
        }
        HandDetectionManager::updateHandDetection((os_log_t *)v7);
      }
    }
  }
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrI20HandDetectionManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrI20HandDetectionManagerEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN20HandDetectionManager4initEv_block_invoke_3(_QWORD *a1, unsigned int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  const char *v12;
  int v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8)
      {
        v11 = *(NSObject **)v5;
        if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEFAULT))
        {
          if (a2 > 2)
            v12 = "Unknown Hand Detection";
          else
            v12 = off_1E79028A8[a2];
          v13 = 136315138;
          v14 = v12;
          _os_log_impl(&dword_1BF335000, v11, OS_LOG_TYPE_DEFAULT, "#I Hand Detection State: %s", (uint8_t *)&v13, 0xCu);
        }
        *(_DWORD *)(v5 + 64) = a2;
        HandDetectionManager::updateHandDetection((os_log_t *)v5);
      }
    }
  }
}

void ___ZN20HandDetectionManager4initEv_block_invoke_6(_QWORD *a1, unsigned int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  const char *v12;
  int v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8)
      {
        *(_BYTE *)(v5 + 88) = a2;
        v11 = *(NSObject **)v5;
        if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEFAULT))
        {
          if (a2 > 3)
            v12 = "Unknown Audio Output";
          else
            v12 = off_1E79028C0[(char)a2];
          v13 = 136315138;
          v14 = v12;
          _os_log_impl(&dword_1BF335000, v11, OS_LOG_TYPE_DEFAULT, "#I Audio State: %s", (uint8_t *)&v13, 0xCu);
        }
        HandDetectionManager::updateHandDetection((os_log_t *)v5);
      }
    }
  }
}

uint64_t dispatch::callback<void({block_pointer})(AudioManager::AudioOutputState)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void ___ZN20HandDetectionManager4initEv_block_invoke_9(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int isProxCovered;
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  const char *v15;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8)
      {
        isProxCovered = ctu::iokit::IOHIDController::isProxCovered(*(ctu::iokit::IOHIDController **)(v5 + 96));
        v12 = *(NSObject **)v5;
        if (!os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEBUG))
        {
          if (*(unsigned __int8 *)(v5 + 112) == isProxCovered)
            return;
          goto LABEL_10;
        }
        v15 = "Off";
        if (isProxCovered)
          v15 = "On";
        v16 = 136315394;
        v17 = v15;
        v18 = 1024;
        v19 = a2;
        _os_log_debug_impl(&dword_1BF335000, v12, OS_LOG_TYPE_DEBUG, "#D Received proximity information: %s (mask: 0x%x)", (uint8_t *)&v16, 0x12u);
        if (*(unsigned __int8 *)(v5 + 112) != isProxCovered)
        {
LABEL_10:
          *(_BYTE *)(v5 + 112) = isProxCovered;
          v13 = *(NSObject **)v5;
          if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEFAULT))
          {
            v14 = "Off";
            if (isProxCovered)
              v14 = "On";
            v16 = 136315138;
            v17 = v14;
            _os_log_impl(&dword_1BF335000, v13, OS_LOG_TYPE_DEFAULT, "#I Proximity Sensor: %s", (uint8_t *)&v16, 0xCu);
          }
          HandDetectionManager::updateHandDetection((os_log_t *)v5);
        }
      }
    }
  }
}

_QWORD *HandDetectionManager::registerCallback(_QWORD *a1, void **a2)
{
  _QWORD *v4;
  void *v5;
  NSObject *v6;
  _QWORD *result;

  v4 = (_QWORD *)a1[4];
  if ((unint64_t)v4 >= a1[5])
  {
    result = std::vector<dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)> const&>(a1 + 3, (uint64_t)a2);
    a1[4] = result;
  }
  else
  {
    v5 = *a2;
    if (*a2)
      v5 = _Block_copy(v5);
    v6 = a2[1];
    *v4 = v5;
    v4[1] = v6;
    if (v6)
      dispatch_retain(v6);
    result = v4 + 2;
    a1[4] = v4 + 2;
  }
  return result;
}

void HandDetectionManager::setMotionParameter(uint64_t a1, ctu **a2)
{
  const void *v3;
  CFTypeID v4;
  const void *v5;
  CFTypeRef cf;

  if (!*(_QWORD *)(a1 + 120))
    goto LABEL_9;
  ctu::xpc_to_cf(*a2, a2);
  v3 = cf;
  if (cf && (v4 = CFGetTypeID(cf), v4 == CFDictionaryGetTypeID()))
  {
    CFRetain(cf);
    v5 = cf;
  }
  else
  {
    v3 = 0;
    v5 = cf;
    if (!cf)
      goto LABEL_7;
  }
  CFRelease(v5);
LABEL_7:
  CMOnBodyDelegate::setThresholds(*(CMOnBodyDelegate **)(a1 + 120), v3);
  if (v3)
    CFRelease(v3);
LABEL_9:
  HandDetectionManager::updateHandDetection((os_log_t *)a1);
}

void sub_1BF3E5F44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1BF3E5F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<void const>::~CFSharedRef(&a9);
  _Unwind_Resume(a1);
}

void HandDetectionManager::setTxState(HandDetectionManager *this, int a2)
{
  NSObject *v4;
  uint64_t **v5;
  uint64_t *v6;
  const char *v7;
  NSObject *v8;
  uint8_t v9[24];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 152) = a2;
  v4 = *(NSObject **)this;
  if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_DEBUG))
  {
    v7 = "Off";
    if (a2)
      v7 = "On";
    *(_DWORD *)v9 = 136315138;
    *(_QWORD *)&v9[4] = v7;
    _os_log_debug_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEBUG, "#D Tx is %s", v9, 0xCu);
    v5 = (uint64_t **)*((_QWORD *)this + 6);
    if (v5)
      goto LABEL_3;
  }
  else
  {
    v5 = (uint64_t **)*((_QWORD *)this + 6);
    if (v5)
    {
LABEL_3:
      v6 = *v5;
      *(_QWORD *)v9 = *v5;
      if (a2)
        ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::start(void)::{lambda(void)#1}>(v6, v9);
      else
        ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>(v6, v9);
      goto LABEL_11;
    }
  }
  v8 = *(NSObject **)this;
  if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v9 = 0;
    _os_log_error_impl(&dword_1BF335000, v8, OS_LOG_TYPE_ERROR, "Handed detection instance is not created yet", v9, 2u);
  }
LABEL_11:
  HandDetectionManager::updateHandDetection((os_log_t *)this);
}

_QWORD *std::vector<dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)> const&>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  void *v9;
  NSObject *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  NSObject *v20;
  const void *v21;
  char *v23;
  BOOL v24;
  BOOL v25;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  double *v30;
  const double *v31;
  uint64_t v32;
  float64x2x2_t v33;

  v2 = a1[1] - *a1;
  v3 = (v2 >> 4) + 1;
  if (v3 >> 60)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v6 = a1[2] - *a1;
  if (v6 >> 3 > v3)
    v3 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (!v7)
  {
    v8 = 0;
    v9 = *(void **)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (v7 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v8 = (char *)operator new(16 * v7);
  v9 = *(void **)a2;
  if (*(_QWORD *)a2)
LABEL_12:
    v9 = _Block_copy(v9);
LABEL_13:
  v10 = *(NSObject **)(a2 + 8);
  v11 = &v8[16 * (v2 >> 4)];
  *(_QWORD *)v11 = v9;
  *((_QWORD *)v11 + 1) = v10;
  if (v10)
    dispatch_retain(v10);
  v12 = &v8[16 * v7];
  v13 = v11 + 16;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    v16 = (unint64_t)&v15[-*a1 - 16];
    if (v16 < 0xD0)
      goto LABEL_17;
    v23 = &v15[-(v16 & 0xFFFFFFFFFFFFFFF0)];
    v24 = &v8[v2 - 8 - (v16 & 0xFFFFFFFFFFFFFFF0)] >= v15 || v23 - 8 >= v11;
    v25 = !v24;
    if (v23 - 16 < &v8[v2 - 8] && &v8[v2 - (v16 & 0xFFFFFFFFFFFFFFF0) - 16] < v15 - 8)
      goto LABEL_17;
    if (v25)
      goto LABEL_17;
    v27 = (v16 >> 4) + 1;
    v28 = 16 * (v27 & 0x1FFFFFFFFFFFFFFELL);
    v17 = &v11[-v28];
    v29 = &v15[-v28];
    v30 = (double *)(v11 - 32);
    v31 = (const double *)(v15 - 32);
    v32 = v27 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v33 = vld2q_f64(v31);
      vst2q_f64(v30, v33);
      *(_OWORD *)v31 = 0uLL;
      *((_OWORD *)v31 + 1) = 0uLL;
      v31 -= 4;
      v30 -= 4;
      v32 -= 2;
    }
    while (v32);
    v11 = v17;
    v15 = v29;
    if (v27 != (v27 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_17:
      v17 = v11;
      do
      {
        v18 = *((_OWORD *)v15 - 1);
        v15 -= 16;
        *((_OWORD *)v17 - 1) = v18;
        v17 -= 16;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = v17;
    a1[1] = v13;
    a1[2] = v12;
    while (v19 != v15)
    {
      v20 = *((_QWORD *)v19 - 1);
      if (v20)
        dispatch_release(v20);
      v21 = (const void *)*((_QWORD *)v19 - 2);
      if (v21)
        _Block_release(v21);
      v19 -= 16;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

HandDetectionManager **std::unique_ptr<HandDetectionManager>::~unique_ptr[abi:ne180100](HandDetectionManager **a1)
{
  HandDetectionManager *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    HandDetectionManager::~HandDetectionManager(v2);
  return a1;
}

void std::__shared_ptr_pointer<HandDetectionManager *,std::shared_ptr<HandDetectionManager>::__shared_ptr_default_delete<HandDetectionManager,HandDetectionManager>,std::allocator<HandDetectionManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

HandDetectionManager *std::__shared_ptr_pointer<HandDetectionManager *,std::shared_ptr<HandDetectionManager>::__shared_ptr_default_delete<HandDetectionManager,HandDetectionManager>,std::allocator<HandDetectionManager>>::__on_zero_shared(uint64_t a1)
{
  HandDetectionManager *result;

  result = *(HandDetectionManager **)(a1 + 24);
  if (result)
    HandDetectionManager::~HandDetectionManager(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<HandDetectionManager *,std::shared_ptr<HandDetectionManager>::__shared_ptr_default_delete<HandDetectionManager,HandDetectionManager>,std::allocator<HandDetectionManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF540EDCLL)
    return a1 + 24;
  if (((v3 & 0x80000001BF540EDCLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF540EDCLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF540EDCLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void StatsAWD::create(uint64_t *a1@<X8>)
{
  StatsAWD *v3;
  uint64_t v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;

  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  v3 = (StatsAWD *)operator new(0x78uLL);
  StatsAWD::StatsAWD(v3);
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<StatsAWD>::shared_ptr[abi:ne180100]<StatsAWD,std::shared_ptr<StatsAWD> ctu::SharedSynchronizable<StatsAWD>::make_shared_ptr<StatsAWD>(StatsAWD*)::{lambda(StatsAWD*)#1},void>(a1, (uint64_t)v3);
  ctu::Loggable<StatsAWD,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a1);
  v4 = *a1;
  if (*a1)
  {
    abm::AWDHelperGetConnection(&v12);
    v5 = v12;
    v12 = 0uLL;
    v6 = *(std::__shared_weak_count **)(v4 + 112);
    *(_OWORD *)(v4 + 104) = v5;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
    if (*((_QWORD *)&v12 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1BF3E6490(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1BF3E64A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1BF3E64B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  v2 = v1;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void StatsAWD::init(StatsAWD *this)
{
  __int128 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  abm::AWDHelperGetConnection(&v9);
  v2 = v9;
  v9 = 0uLL;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  *(_OWORD *)((char *)this + 104) = v2;
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
    if (!*((_QWORD *)&v9 + 1))
      return;
  }
  else
  {
LABEL_5:
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
    if (!*((_QWORD *)&v9 + 1))
      return;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void StatsAWD::StatsAWD(StatsAWD *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  _BYTE v11[16];
  dispatch_object_t object[5];

  *(_QWORD *)this = off_1E79028F0;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v11, "com.apple.telephony.abm", "stats.awd");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  object[0] = (dispatch_object_t)MEMORY[0x1E0C809B0];
  object[1] = (dispatch_object_t)0x40000000;
  object[2] = (dispatch_object_t)___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  object[3] = (dispatch_object_t)&__block_descriptor_tmp_13_2;
  object[4] = (dispatch_object_t)&GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v3 = *(_QWORD *)algn_1ED710088;
    v9 = GetABMLogServer(void)::sLogServer;
    v10 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, object);
    v3 = *(_QWORD *)algn_1ED710088;
    v9 = GetABMLogServer(void)::sLogServer;
    v10 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_6;
  }
  v4 = (unint64_t *)(v3 + 8);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
LABEL_6:
  object[0] = 0;
  ctu::SharedSynchronizable<NetworkStatsInterface>::SharedSynchronizable((_QWORD *)this + 9, "stats.awd", QOS_CLASS_DEFAULT, object);
  if (object[0])
    dispatch_release(object[0]);
  ctu::Loggable<StatsAWD,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(this, (uint64_t)v11, &v9);
  *(_QWORD *)this = off_1E7902A50;
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v11);
  *(_QWORD *)this = off_1E79028F0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
}

void sub_1BF3E6748(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v2);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  _Unwind_Resume(a1);
}

void sub_1BF3E676C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a12);
  _Unwind_Resume(a1);
}

const char *StatsAWD::getName(StatsAWD *this)
{
  return "stats.awd";
}

void StatsAWD::~StatsAWD(StatsAWD *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;

  *(_QWORD *)this = off_1E79028F0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E79029C0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v5 = *((_QWORD *)this + 12);
  if (v5)
    dispatch_release(v5);
  v6 = *((_QWORD *)this + 11);
  if (v6)
    dispatch_release(v6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;

  *(_QWORD *)this = off_1E79028F0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E79029C0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v5 = *((_QWORD *)this + 12);
  if (v5)
    dispatch_release(v5);
  v6 = *((_QWORD *)this + 11);
  if (v6)
    dispatch_release(v6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;

  *(_QWORD *)this = off_1E79028F0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E79029C0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v5 = *((_QWORD *)this + 12);
  if (v5)
    dispatch_release(v5);
  v6 = *((_QWORD *)this + 11);
  if (v6)
    dispatch_release(v6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  operator delete(this);
}

void StatsAWD::submit(StatsAWD *this, int a2, object a3)
{
  xpc_object_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _DWORD *v10;
  xpc_object_t v11;
  NSObject *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v5 = *(xpc_object_t *)a3.fObj;
  if (*(_QWORD *)a3.fObj)
  {
    xpc_retain(*(xpc_object_t *)a3.fObj);
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v6)
LABEL_13:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    v5 = xpc_null_create();
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v6)
      goto LABEL_13;
  }
  v7 = *((_QWORD *)this + 9);
  v8 = std::__shared_weak_count::lock(v6);
  if (!v8)
    goto LABEL_13;
  v9 = v8;
  v10 = operator new(0x18uLL);
  *(_QWORD *)v10 = this;
  v10[2] = a2;
  *((_QWORD *)v10 + 2) = v5;
  v11 = xpc_null_create();
  v12 = *((_QWORD *)this + 11);
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  v15 = operator new(0x18uLL);
  *v15 = v10;
  v15[1] = v7;
  v15[2] = v9;
  dispatch_async_f(v12, v15, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<StatsAWD>::execute_wrapped<StatsAWD::submit(unsigned int,xpc::object)::$_0>(StatsAWD::submit(unsigned int,xpc::object)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<StatsAWD::submit(unsigned int,xpc::object)::$_0,dispatch_queue_s *::default_delete<StatsAWD::submit(unsigned int,xpc::object)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  xpc_release(v11);
}

void StatsAWD::submit_sync(uint64_t a1, int a2, xpc_object_t *a3)
{
  wis::MetricFactory *SharedMetricFactory;
  uint64_t v7;
  wis::MetricContainer *v8;
  xpc_object_t v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  NSObject *v14;
  NSObject *v15;
  void *v16;
  char *v17;
  uint64_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  uint64_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  uint64_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  uint64_t v28;
  xpc_object_t v29;
  int v30;
  wis *v31;
  uint64_t v32;
  int v33;
  wis *v34;
  uint64_t v35;
  int v36;
  wis *v37;
  uint64_t v38;
  xpc_object_t v39;
  int v40;
  wis *v41;
  uint64_t v42;
  int v43;
  wis *v44;
  uint64_t v45;
  _BOOL4 v46;
  wis *v47;
  uint64_t v48;
  int v49;
  wis *v50;
  uint64_t v51;
  int v52;
  wis *v53;
  uint64_t v54;
  _BOOL4 v55;
  wis *v56;
  uint64_t WISTimestamp;
  int v58;
  NSObject *v59;
  uint8_t *v60;
  wis::MetricContainer *v61;
  uint8_t buf[8];
  char v63;
  uint8_t v64[8];
  __int16 v65;
  uint8_t *v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 104))
  {
    v10 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    v11 = "Failed: AWD connection setup failed";
    v12 = v10;
    v13 = 2;
    goto LABEL_137;
  }
  SharedMetricFactory = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory((wis::MetricFactory *)a1);
  v7 = wis::MetricFactory::newMetricContainerWithIdentifier(SharedMetricFactory);
  v61 = (wis::MetricContainer *)v7;
  if (!v7)
  {
    v14 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a2;
      _os_log_debug_impl(&dword_1BF335000, v14, OS_LOG_TYPE_DEBUG, "#D Failed to get the metric of 0x%x", buf, 8u);
    }
    return;
  }
  v8 = (wis::MetricContainer *)v7;
  if (a2 <= 524463)
  {
    switch(a2)
    {
      case 524310:
        v9 = *a3;
        if (*a3)
          xpc_retain(*a3);
        else
          v9 = xpc_null_create();
        v17 = (char *)operator new(0x48uLL);
        v22 = MEMORY[0x1E0DE8338];
        *(_QWORD *)v17 = off_1E79075B8;
        *((_QWORD *)v17 + 1) = v22;
        *((_WORD *)v17 + 20) = 0;
        *((_QWORD *)v17 + 2) = 0;
        *((_QWORD *)v17 + 3) = v22;
        *((_QWORD *)v17 + 4) = v22;
        *((_DWORD *)v17 + 11) = 0;
        *((_QWORD *)v17 + 6) = v22;
        *((_QWORD *)v17 + 7) = 0;
        *((_QWORD *)v17 + 8) = 0;
        *(_QWORD *)buf = v17;
        *(_QWORD *)v64 = v9;
        if (v9 && MEMORY[0x1C3B8A86C](v9) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v9);
          v39 = v9;
        }
        else
        {
          v39 = xpc_null_create();
          *(_QWORD *)v64 = v39;
        }
        v55 = StatsAWD::fillMetric_sync(a1, (uint64_t *)buf, (xpc_object_t *)v64);
        xpc_release(v39);
        if (v55)
        {
          if ((v17[69] & 1) != 0)
          {
            WISTimestamp = *((_QWORD *)v17 + 7);
          }
          else
          {
            WISTimestamp = wis::getWISTimestamp(v56);
            *((_DWORD *)v17 + 17) |= 0x100u;
            *((_QWORD *)v17 + 7) = WISTimestamp;
          }
          wis::MetricContainer::storeMetric(v61, WISTimestamp, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
        }
        break;
      case 524365:
        v9 = *a3;
        if (*a3)
          xpc_retain(*a3);
        else
          v9 = xpc_null_create();
        v17 = (char *)operator new(0x30uLL);
        *(_QWORD *)v17 = off_1E79073D8;
        *((_QWORD *)v17 + 1) = 0;
        *((_QWORD *)v17 + 5) = 0;
        *((_QWORD *)v17 + 2) = 0;
        *((_QWORD *)v17 + 3) = 0;
        *((_DWORD *)v17 + 8) = 0;
        *(_QWORD *)buf = v17;
        *(_QWORD *)v64 = v9;
        if (v9)
        {
          xpc_retain(v9);
          v27 = v9;
        }
        else
        {
          v27 = xpc_null_create();
          *(_QWORD *)v64 = v27;
        }
        v49 = StatsAWD::fillMetric_sync(a1, (int **)buf, v64);
        xpc_release(v27);
        if (v49)
        {
          if ((v17[44] & 1) != 0)
          {
            v51 = *((_QWORD *)v17 + 1);
          }
          else
          {
            v51 = wis::getWISTimestamp(v50);
            *((_DWORD *)v17 + 11) |= 1u;
            *((_QWORD *)v17 + 1) = v51;
          }
          wis::MetricContainer::storeMetric(v61, v51, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
        }
        break;
      case 524384:
        v9 = *a3;
        if (*a3)
          xpc_retain(*a3);
        else
          v9 = xpc_null_create();
        v17 = (char *)operator new(0x30uLL);
        *(_QWORD *)v17 = off_1E79072E8;
        *((_QWORD *)v17 + 1) = 0;
        *((_QWORD *)v17 + 4) = 0;
        *((_DWORD *)v17 + 10) = 0;
        *((_QWORD *)v17 + 2) = 0;
        *(_QWORD *)(v17 + 21) = 0;
        *(_QWORD *)buf = v17;
        *(_QWORD *)v64 = v9;
        if (v9)
        {
          xpc_retain(v9);
          v20 = v9;
        }
        else
        {
          v20 = xpc_null_create();
          *(_QWORD *)v64 = v20;
        }
        v33 = StatsAWD::fillMetric_sync(a1, (uint64_t *)buf, v64);
        xpc_release(v20);
        if (v33)
        {
          if ((v17[40] & 1) != 0)
          {
            v35 = *((_QWORD *)v17 + 1);
          }
          else
          {
            v35 = wis::getWISTimestamp(v34);
            *((_DWORD *)v17 + 10) |= 1u;
            *((_QWORD *)v17 + 1) = v35;
          }
          wis::MetricContainer::storeMetric(v61, v35, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
        }
        break;
      default:
LABEL_32:
        v15 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = a2;
          _os_log_error_impl(&dword_1BF335000, v15, OS_LOG_TYPE_ERROR, "Failed to setup metric id (0x%x)", buf, 8u);
        }
        wis::MetricContainer::~MetricContainer(v8);
        goto LABEL_133;
    }
  }
  else
  {
    switch(a2)
    {
      case 524464:
        v9 = *a3;
        if (*a3)
          xpc_retain(*a3);
        else
          v9 = xpc_null_create();
        v17 = (char *)operator new(0x28uLL);
        *(_QWORD *)v17 = off_1E7908718;
        *((_QWORD *)v17 + 1) = 0;
        v18 = MEMORY[0x1E0DE8338];
        *((_QWORD *)v17 + 2) = 0;
        *((_QWORD *)v17 + 3) = v18;
        *((_QWORD *)v17 + 4) = 0;
        *(_QWORD *)buf = v17;
        *(_QWORD *)v64 = v9;
        if (v9)
        {
          xpc_retain(v9);
          v19 = v9;
        }
        else
        {
          v19 = xpc_null_create();
          *(_QWORD *)v64 = v19;
        }
        v30 = StatsAWD::fillMetric_sync(a1, (uint64_t *)buf, v64);
        xpc_release(v19);
        if (v30)
        {
          if ((v17[36] & 1) != 0)
          {
            v32 = *((_QWORD *)v17 + 1);
          }
          else
          {
            v32 = wis::getWISTimestamp(v31);
            *((_DWORD *)v17 + 9) |= 1u;
            *((_QWORD *)v17 + 1) = v32;
          }
          wis::MetricContainer::storeMetric(v61, v32, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
        }
        break;
      case 524465:
        v9 = *a3;
        if (*a3)
          xpc_retain(*a3);
        else
          v9 = xpc_null_create();
        v17 = (char *)operator new(0x28uLL);
        *((_QWORD *)v17 + 1) = 0;
        *(_QWORD *)v17 = off_1E7908790;
        *((_QWORD *)v17 + 2) = 0;
        *((_QWORD *)v17 + 3) = 0;
        *((_DWORD *)v17 + 8) = 0;
        *(_QWORD *)buf = v17;
        *(_QWORD *)v64 = v9;
        if (v9)
        {
          xpc_retain(v9);
          v23 = v9;
        }
        else
        {
          v23 = xpc_null_create();
          *(_QWORD *)v64 = v23;
        }
        v40 = StatsAWD::fillMetric_sync(a1, (uint64_t *)buf, v64);
        xpc_release(v23);
        if (v40)
        {
          if ((v17[32] & 1) != 0)
          {
            v42 = *((_QWORD *)v17 + 1);
          }
          else
          {
            v42 = wis::getWISTimestamp(v41);
            *((_DWORD *)v17 + 8) |= 1u;
            *((_QWORD *)v17 + 1) = v42;
          }
          wis::MetricContainer::storeMetric(v61, v42, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
        }
        break;
      case 524466:
        v9 = *a3;
        if (*a3)
          xpc_retain(*a3);
        else
          v9 = xpc_null_create();
        v17 = (char *)operator new(0x50uLL);
        *(_QWORD *)v17 = off_1E7908808;
        *(_OWORD *)(v17 + 8) = 0u;
        *((_QWORD *)v17 + 8) = 0;
        *((_DWORD *)v17 + 18) = 0;
        *(_OWORD *)(v17 + 24) = 0u;
        *(_OWORD *)(v17 + 40) = 0u;
        *((_DWORD *)v17 + 14) = 0;
        *(_QWORD *)buf = v17;
        *(_QWORD *)v64 = v9;
        if (v9)
        {
          xpc_retain(v9);
          v24 = v9;
        }
        else
        {
          v24 = xpc_null_create();
          *(_QWORD *)v64 = v24;
        }
        v43 = StatsAWD::fillMetric_sync(a1, (int **)buf, (void **)v64);
        xpc_release(v24);
        if (v43)
        {
          if ((v17[72] & 1) != 0)
          {
            v45 = *((_QWORD *)v17 + 1);
          }
          else
          {
            v45 = wis::getWISTimestamp(v44);
            *((_DWORD *)v17 + 18) |= 1u;
            *((_QWORD *)v17 + 1) = v45;
          }
          wis::MetricContainer::storeMetric(v61, v45, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
        }
        break;
      case 524467:
        v9 = *a3;
        if (*a3)
          xpc_retain(*a3);
        else
          v9 = xpc_null_create();
        v17 = (char *)operator new(0x68uLL);
        *(_QWORD *)v17 = off_1E7908880;
        *((_QWORD *)v17 + 1) = 0;
        v25 = MEMORY[0x1E0DE8338];
        *((_WORD *)v17 + 26) = 0;
        *((_QWORD *)v17 + 2) = v25;
        *((_QWORD *)v17 + 3) = v25;
        *((_DWORD *)v17 + 12) = 0;
        *((_QWORD *)v17 + 4) = v25;
        *((_QWORD *)v17 + 5) = v25;
        *((_QWORD *)v17 + 7) = v25;
        *((_QWORD *)v17 + 8) = v25;
        *((_QWORD *)v17 + 9) = v25;
        *((_QWORD *)v17 + 10) = 0;
        *((_QWORD *)v17 + 11) = 0;
        *((_DWORD *)v17 + 24) = 0;
        *(_QWORD *)buf = v17;
        *(_QWORD *)v64 = v9;
        if (v9)
        {
          xpc_retain(v9);
          v26 = v9;
        }
        else
        {
          v26 = xpc_null_create();
          *(_QWORD *)v64 = v26;
        }
        v46 = StatsAWD::fillMetric_sync(a1, (uint64_t *)buf, v64);
        xpc_release(v26);
        if (v46)
        {
          if ((v17[96] & 1) != 0)
          {
            v48 = *((_QWORD *)v17 + 1);
          }
          else
          {
            v48 = wis::getWISTimestamp(v47);
            *((_DWORD *)v17 + 24) |= 1u;
            *((_QWORD *)v17 + 1) = v48;
          }
          wis::MetricContainer::storeMetric(v61, v48, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
        }
        break;
      default:
        if (a2 == 524539)
        {
          v9 = *a3;
          if (*a3)
            xpc_retain(*a3);
          else
            v9 = xpc_null_create();
          v17 = (char *)operator new(0x28uLL);
          *(_QWORD *)v17 = off_1E7907450;
          *((_QWORD *)v17 + 1) = 0;
          v28 = MEMORY[0x1E0DE8338];
          *((_QWORD *)v17 + 2) = MEMORY[0x1E0DE8338];
          *((_QWORD *)v17 + 3) = v28;
          *((_QWORD *)v17 + 4) = 0;
          *(_QWORD *)buf = v17;
          *(_QWORD *)v64 = v9;
          if (v9)
          {
            xpc_retain(v9);
            v29 = v9;
          }
          else
          {
            v29 = xpc_null_create();
            *(_QWORD *)v64 = v29;
          }
          v52 = StatsAWD::fillMetric_sync(a1, (uint64_t *)buf, v64);
          xpc_release(v29);
          if (v52)
          {
            if ((v17[36] & 1) != 0)
            {
              v54 = *((_QWORD *)v17 + 1);
            }
            else
            {
              v54 = wis::getWISTimestamp(v53);
              *((_DWORD *)v17 + 9) |= 1u;
              *((_QWORD *)v17 + 1) = v54;
            }
            wis::MetricContainer::storeMetric(v61, v54, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
          }
        }
        else
        {
          if (a2 != 524584)
            goto LABEL_32;
          v9 = *a3;
          if (*a3)
            xpc_retain(*a3);
          else
            v9 = xpc_null_create();
          v17 = (char *)operator new(0x20uLL);
          *(_QWORD *)v17 = off_1E7907540;
          *((_QWORD *)v17 + 1) = 0;
          *((_QWORD *)v17 + 2) = 0;
          *((_QWORD *)v17 + 3) = 0;
          *(_QWORD *)buf = v17;
          *(_QWORD *)v64 = v9;
          if (v9)
          {
            xpc_retain(v9);
            v21 = v9;
          }
          else
          {
            v21 = xpc_null_create();
            *(_QWORD *)v64 = v21;
          }
          v36 = StatsAWD::fillMetric_sync(a1, (uint64_t *)buf, v64);
          xpc_release(v21);
          if (v36)
          {
            if ((v17[28] & 1) != 0)
            {
              v38 = *((_QWORD *)v17 + 1);
            }
            else
            {
              v38 = wis::getWISTimestamp(v37);
              *((_DWORD *)v17 + 7) |= 1u;
              *((_QWORD *)v17 + 1) = v38;
            }
            wis::MetricContainer::storeMetric(v61, v38, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
          }
        }
        break;
    }
  }
  (*(void (**)(char *))(*(_QWORD *)v17 + 8))(v17);
  xpc_release(v9);
  v58 = wis::WISServerConnection::SubmitMetric(*(wis::WISServerConnection **)(a1 + 104), v61);
  v59 = *(NSObject **)(a1 + 40);
  if (!v58)
  {
    if (!os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    v11 = "Failed to submit metric id (0x%x)";
    v12 = v59;
    v13 = 8;
LABEL_137:
    _os_log_error_impl(&dword_1BF335000, v12, OS_LOG_TYPE_ERROR, v11, buf, v13);
    return;
  }
  if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
  {
    xpc::object::to_string((xpc::object *)a3);
    v60 = v63 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)v64 = 67109378;
    *(_DWORD *)&v64[4] = a2;
    v65 = 2082;
    v66 = v60;
    _os_log_impl(&dword_1BF335000, v59, OS_LOG_TYPE_DEFAULT, "#I Submitted AWD metric (0x%x) with data: %{public}s", v64, 0x12u);
    if (v63 < 0)
    {
      v16 = *(void **)buf;
LABEL_133:
      operator delete(v16);
    }
  }
}

void sub_1BF3E763C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  xpc_release(v2);
  std::unique_ptr<wis::MetricContainer>::~unique_ptr[abi:ne180100]((wis::MetricContainer **)va);
  _Unwind_Resume(a1);
}

wis::MetricContainer **std::unique_ptr<wis::MetricContainer>::~unique_ptr[abi:ne180100](wis::MetricContainer **a1)
{
  wis::MetricContainer *v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    wis::MetricContainer::~MetricContainer(v2);
    operator delete(v3);
  }
  return a1;
}

uint64_t StatsAWD::fillMetric_sync(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  xpc_object_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  xpc_object_t value;
  NSObject *v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  xpc_object_t v18;
  int v19;
  uint64_t v20;
  xpc_object_t v21;
  char v22;
  char *v23;
  size_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  xpc_object_t *v29;
  xpc_object_t object[4];
  uint8_t buf[4];
  xpc_object_t *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = (xpc_object_t)*a3;
  v6 = MEMORY[0x1E0C812F8];
  if (*a3 && MEMORY[0x1C3B8A86C](*a3) == v6)
    xpc_retain(v5);
  else
    v5 = xpc_null_create();
  if (MEMORY[0x1C3B8A86C](v5) != v6)
  {
    v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object[0]) = 0;
      _os_log_error_impl(&dword_1BF335000, v7, OS_LOG_TYPE_ERROR, "Failed: Expected data needs to be dictionary in boot time handling", (uint8_t *)object, 2u);
    }
    goto LABEL_14;
  }
  v8 = (const char *)*MEMORY[0x1E0CFB260];
  if (!xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFB260])
    || (v9 = (const char *)*MEMORY[0x1E0CFB320], !xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFB320]))
    || (v10 = (const char *)*MEMORY[0x1E0CFB268], !xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFB268])))
  {
    v13 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
LABEL_14:
      v14 = 0;
      goto LABEL_15;
    }
    v23 = (char *)MEMORY[0x1C3B8A7D0](v5);
    memset(object, 170, 24);
    v24 = strlen(v23);
    if (v24 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v25 = (void *)v24;
    if (v24 >= 0x17)
    {
      v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17)
        v27 = v24 | 7;
      v28 = v27 + 1;
      v26 = operator new(v27 + 1);
      object[1] = v25;
      object[2] = (xpc_object_t)(v28 | 0x8000000000000000);
      object[0] = v26;
    }
    else
    {
      HIBYTE(object[2]) = v24;
      v26 = object;
      if (!v24)
        goto LABEL_32;
    }
    memcpy(v26, v23, (size_t)v25);
LABEL_32:
    *((_BYTE *)v25 + (_QWORD)v26) = 0;
    free(v23);
    v29 = object;
    if (SHIBYTE(object[2]) < 0)
      v29 = (xpc_object_t *)object[0];
    *(_DWORD *)buf = 136315138;
    v32 = v29;
    _os_log_error_impl(&dword_1BF335000, v13, OS_LOG_TYPE_ERROR, "Failed: One of elements of boot time is missing: %s", buf, 0xCu);
    if (SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
    goto LABEL_14;
  }
  v11 = *a2;
  value = xpc_dictionary_get_value(v5, v8);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  v16 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v11 + 40) |= 4u;
  *(_DWORD *)(v11 + 24) = v16;
  xpc_release(object[0]);
  v17 = *a2;
  v18 = xpc_dictionary_get_value(v5, v9);
  object[0] = v18;
  if (v18)
    xpc_retain(v18);
  else
    object[0] = xpc_null_create();
  v19 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v17 + 40) |= 2u;
  *(_QWORD *)(v17 + 16) = v19;
  xpc_release(object[0]);
  v20 = *a2;
  v21 = xpc_dictionary_get_value(v5, v10);
  object[0] = v21;
  if (v21)
    xpc_retain(v21);
  else
    object[0] = xpc_null_create();
  v22 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v20 + 40) |= 8u;
  *(_BYTE *)(v20 + 28) = v22;
  xpc_release(object[0]);
  v14 = 1;
LABEL_15:
  xpc_release(v5);
  return v14;
}

{
  xpc_object_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  xpc_object_t value;
  NSObject *v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  xpc_object_t v18;
  int v19;
  uint64_t v20;
  xpc_object_t v21;
  const char *v22;
  xpc_object_t *v23;
  void *v24;
  __int128 v25;
  xpc_object_t *v26;
  xpc_object_t v27;
  char *v28;
  size_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  xpc_object_t *v34;
  xpc_object_t object[4];
  _BYTE v36[24];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v5 = (xpc_object_t)*a3;
  v6 = MEMORY[0x1E0C812F8];
  if (*a3 && MEMORY[0x1C3B8A86C](*a3) == v6)
    xpc_retain(v5);
  else
    v5 = xpc_null_create();
  if (MEMORY[0x1C3B8A86C](v5) != v6)
  {
    v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object[0]) = 0;
      _os_log_error_impl(&dword_1BF335000, v7, OS_LOG_TYPE_ERROR, "Failed: Expected data needs to be dictionary in low power event handling", (uint8_t *)object, 2u);
    }
    goto LABEL_14;
  }
  v8 = (const char *)*MEMORY[0x1E0CFB510];
  if (!xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFB510])
    || (v9 = (const char *)*MEMORY[0x1E0CFB520], !xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFB520]))
    || (v10 = (const char *)*MEMORY[0x1E0CFB270], !xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFB270])))
  {
    v13 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
LABEL_14:
      v14 = 0;
      goto LABEL_15;
    }
    v28 = (char *)MEMORY[0x1C3B8A7D0](v5);
    memset(object, 170, 24);
    v29 = strlen(v28);
    if (v29 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v30 = (void *)v29;
    if (v29 >= 0x17)
    {
      v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v29 | 7) != 0x17)
        v32 = v29 | 7;
      v33 = v32 + 1;
      v31 = operator new(v32 + 1);
      object[1] = v30;
      object[2] = (xpc_object_t)(v33 | 0x8000000000000000);
      object[0] = v31;
    }
    else
    {
      HIBYTE(object[2]) = v29;
      v31 = object;
      if (!v29)
        goto LABEL_48;
    }
    memcpy(v31, v28, (size_t)v30);
LABEL_48:
    *((_BYTE *)v30 + (_QWORD)v31) = 0;
    free(v28);
    v34 = object;
    if (SHIBYTE(object[2]) < 0)
      v34 = (xpc_object_t *)object[0];
    *(_DWORD *)v36 = 136315138;
    *(_QWORD *)&v36[4] = v34;
    _os_log_error_impl(&dword_1BF335000, v13, OS_LOG_TYPE_ERROR, "Failed: One of elements of low power event is missing: %s", v36, 0xCu);
    if (SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
    goto LABEL_14;
  }
  v11 = *a2;
  value = xpc_dictionary_get_value(v5, v8);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  v16 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v11 + 36) |= 2u;
  *(_DWORD *)(v11 + 16) = v16;
  xpc_release(object[0]);
  v17 = *a2;
  v18 = xpc_dictionary_get_value(v5, v9);
  object[0] = v18;
  if (v18)
    xpc_retain(v18);
  else
    object[0] = xpc_null_create();
  v19 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v17 + 36) |= 4u;
  *(_DWORD *)(v17 + 20) = v19;
  xpc_release(object[0]);
  v20 = *a2;
  v21 = xpc_dictionary_get_value(v5, v10);
  *(_QWORD *)v36 = v21;
  if (v21)
    xpc_retain(v21);
  else
    *(_QWORD *)v36 = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)v36, (const object *)"", v22);
  *(_DWORD *)(v20 + 36) |= 8u;
  v23 = *(xpc_object_t **)(v20 + 24);
  if (v23 == (xpc_object_t *)MEMORY[0x1E0DE8338])
  {
    v23 = (xpc_object_t *)operator new(0x18uLL);
    *v23 = 0;
    v23[1] = 0;
    v23[2] = 0;
    *(_QWORD *)(v20 + 24) = v23;
    v24 = (void *)HIBYTE(object[2]);
    if ((*((char *)v23 + 23) & 0x80000000) == 0)
    {
LABEL_26:
      if ((v24 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v23, object[0], (size_t)object[1]);
      }
      else
      {
        v25 = *(_OWORD *)object;
        v23[2] = object[2];
        *(_OWORD *)v23 = v25;
      }
      goto LABEL_41;
    }
LABEL_29:
    if ((char)v24 >= 0)
      v26 = object;
    else
      v26 = (xpc_object_t *)object[0];
    if ((char)v24 >= 0)
      v27 = v24;
    else
      v27 = object[1];
    std::string::__assign_no_alias<false>(v23, v26, (size_t)v27);
    goto LABEL_41;
  }
  if (v23 != object)
  {
    v24 = (void *)HIBYTE(object[2]);
    if ((*((char *)v23 + 23) & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_29;
  }
LABEL_41:
  if (SHIBYTE(object[2]) < 0)
    operator delete(object[0]);
  xpc_release(*(xpc_object_t *)v36);
  v14 = 1;
LABEL_15:
  xpc_release(v5);
  return v14;
}

{
  xpc_object_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  xpc_object_t value;
  NSObject *v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  xpc_object_t v18;
  int v19;
  uint64_t v20;
  xpc_object_t v21;
  int v22;
  char *v23;
  size_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  xpc_object_t *v29;
  xpc_object_t object[4];
  uint8_t buf[4];
  xpc_object_t *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = (xpc_object_t)*a3;
  v6 = MEMORY[0x1E0C812F8];
  if (*a3 && MEMORY[0x1C3B8A86C](*a3) == v6)
    xpc_retain(v5);
  else
    v5 = xpc_null_create();
  if (MEMORY[0x1C3B8A86C](v5) != v6)
  {
    v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object[0]) = 0;
      _os_log_error_impl(&dword_1BF335000, v7, OS_LOG_TYPE_ERROR, "Failed: Expected data needs to be dictionary in wake info handling", (uint8_t *)object, 2u);
    }
    goto LABEL_14;
  }
  v8 = (const char *)*MEMORY[0x1E0CFB9C0];
  if (!xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFB9C0])
    || (v9 = (const char *)*MEMORY[0x1E0CFBD70], !xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFBD70]))
    || (v10 = (const char *)*MEMORY[0x1E0CFBC78], !xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFBC78])))
  {
    v13 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
LABEL_14:
      v14 = 0;
      goto LABEL_15;
    }
    v23 = (char *)MEMORY[0x1C3B8A7D0](v5);
    memset(object, 170, 24);
    v24 = strlen(v23);
    if (v24 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v25 = (void *)v24;
    if (v24 >= 0x17)
    {
      v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17)
        v27 = v24 | 7;
      v28 = v27 + 1;
      v26 = operator new(v27 + 1);
      object[1] = v25;
      object[2] = (xpc_object_t)(v28 | 0x8000000000000000);
      object[0] = v26;
    }
    else
    {
      HIBYTE(object[2]) = v24;
      v26 = object;
      if (!v24)
        goto LABEL_32;
    }
    memcpy(v26, v23, (size_t)v25);
LABEL_32:
    *((_BYTE *)v25 + (_QWORD)v26) = 0;
    free(v23);
    v29 = object;
    if (SHIBYTE(object[2]) < 0)
      v29 = (xpc_object_t *)object[0];
    *(_DWORD *)buf = 136315138;
    v32 = v29;
    _os_log_error_impl(&dword_1BF335000, v13, OS_LOG_TYPE_ERROR, "Failed: One of elements of wake info is missing: %s", buf, 0xCu);
    if (SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
    goto LABEL_14;
  }
  v11 = *a2;
  value = xpc_dictionary_get_value(v5, v8);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  v16 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v11 + 32) |= 2u;
  *(_DWORD *)(v11 + 16) = v16;
  xpc_release(object[0]);
  v17 = *a2;
  v18 = xpc_dictionary_get_value(v5, v9);
  object[0] = v18;
  if (v18)
    xpc_retain(v18);
  else
    object[0] = xpc_null_create();
  v19 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v17 + 32) |= 4u;
  *(_DWORD *)(v17 + 20) = v19;
  xpc_release(object[0]);
  v20 = *a2;
  v21 = xpc_dictionary_get_value(v5, v10);
  object[0] = v21;
  if (v21)
    xpc_retain(v21);
  else
    object[0] = xpc_null_create();
  v22 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v20 + 32) |= 8u;
  *(_DWORD *)(v20 + 24) = v22;
  xpc_release(object[0]);
  v14 = 1;
LABEL_15:
  xpc_release(v5);
  return v14;
}

{
  xpc_object_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  xpc_object_t value;
  const char *v12;
  NSObject *v13;
  uint64_t v14;
  void **v16;
  void **v17;
  void *v18;
  __int128 v19;
  void **v20;
  void *v21;
  uint64_t v22;
  xpc_object_t v23;
  const char *v24;
  void **v25;
  void *v26;
  __int128 v27;
  void **v28;
  void *v29;
  char *v30;
  size_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  void *__p[4];
  _BYTE object[24];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v5 = (xpc_object_t)*a3;
  v6 = MEMORY[0x1E0C812F8];
  if (*a3 && MEMORY[0x1C3B8A86C](*a3) == v6)
    xpc_retain(v5);
  else
    v5 = xpc_null_create();
  if (MEMORY[0x1C3B8A86C](v5) != v6)
  {
    v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_error_impl(&dword_1BF335000, v7, OS_LOG_TYPE_ERROR, "Failed: Expected data needs to be dictionary in bb trace handling", (uint8_t *)__p, 2u);
    }
    goto LABEL_13;
  }
  v8 = (const char *)*MEMORY[0x1E0CFB760];
  if (!xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFB760])
    || (v9 = (const char *)*MEMORY[0x1E0CFB9C8], !xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFB9C8])))
  {
    v13 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
LABEL_13:
      v14 = 0;
      goto LABEL_14;
    }
    v30 = (char *)MEMORY[0x1C3B8A7D0](v5);
    memset(__p, 170, 24);
    v31 = strlen(v30);
    if (v31 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v32 = (void *)v31;
    if (v31 >= 0x17)
    {
      v34 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v31 | 7) != 0x17)
        v34 = v31 | 7;
      v35 = v34 + 1;
      v33 = operator new(v34 + 1);
      __p[1] = v32;
      __p[2] = (void *)(v35 | 0x8000000000000000);
      __p[0] = v33;
    }
    else
    {
      HIBYTE(__p[2]) = v31;
      v33 = __p;
      if (!v31)
        goto LABEL_60;
    }
    memcpy(v33, v30, (size_t)v32);
LABEL_60:
    *((_BYTE *)v32 + (_QWORD)v33) = 0;
    free(v30);
    v36 = __p;
    if (SHIBYTE(__p[2]) < 0)
      v36 = (void **)__p[0];
    *(_DWORD *)object = 136315138;
    *(_QWORD *)&object[4] = v36;
    _os_log_error_impl(&dword_1BF335000, v13, OS_LOG_TYPE_ERROR, "Failed: One of elements of bb trace is missing: %s", object, 0xCu);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    goto LABEL_13;
  }
  v10 = *a2;
  value = xpc_dictionary_get_value(v5, v8);
  *(_QWORD *)object = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)object, (const object *)"", v12);
  *(_DWORD *)(v10 + 36) |= 2u;
  v16 = *(void ***)(v10 + 16);
  v17 = (void **)MEMORY[0x1E0DE8338];
  if (v16 == (void **)MEMORY[0x1E0DE8338])
  {
    v16 = (void **)operator new(0x18uLL);
    *v16 = 0;
    v16[1] = 0;
    v16[2] = 0;
    *(_QWORD *)(v10 + 16) = v16;
    v18 = (void *)HIBYTE(__p[2]);
    if ((*((char *)v16 + 23) & 0x80000000) == 0)
    {
LABEL_19:
      if ((v18 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v16, __p[0], (size_t)__p[1]);
      }
      else
      {
        v19 = *(_OWORD *)__p;
        v16[2] = __p[2];
        *(_OWORD *)v16 = v19;
      }
      goto LABEL_30;
    }
  }
  else
  {
    if (v16 == __p)
      goto LABEL_30;
    v18 = (void *)HIBYTE(__p[2]);
    if ((*((char *)v16 + 23) & 0x80000000) == 0)
      goto LABEL_19;
  }
  if ((char)v18 >= 0)
    v20 = __p;
  else
    v20 = (void **)__p[0];
  if ((char)v18 >= 0)
    v21 = v18;
  else
    v21 = __p[1];
  std::string::__assign_no_alias<false>(v16, v20, (size_t)v21);
LABEL_30:
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  xpc_release(*(xpc_object_t *)object);
  v22 = *a2;
  v23 = xpc_dictionary_get_value(v5, v9);
  *(_QWORD *)object = v23;
  if (v23)
    xpc_retain(v23);
  else
    *(_QWORD *)object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)object, (const object *)"", v24);
  *(_DWORD *)(v22 + 36) |= 4u;
  v25 = *(void ***)(v22 + 24);
  if (v25 == v17)
  {
    v25 = (void **)operator new(0x18uLL);
    *v25 = 0;
    v25[1] = 0;
    v25[2] = 0;
    *(_QWORD *)(v22 + 24) = v25;
    v26 = (void *)HIBYTE(__p[2]);
    if ((*((char *)v25 + 23) & 0x80000000) == 0)
    {
LABEL_38:
      if ((v26 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v25, __p[0], (size_t)__p[1]);
      }
      else
      {
        v27 = *(_OWORD *)__p;
        v25[2] = __p[2];
        *(_OWORD *)v25 = v27;
      }
      goto LABEL_49;
    }
LABEL_41:
    if ((char)v26 >= 0)
      v28 = __p;
    else
      v28 = (void **)__p[0];
    if ((char)v26 >= 0)
      v29 = v26;
    else
      v29 = __p[1];
    std::string::__assign_no_alias<false>(v25, v28, (size_t)v29);
    goto LABEL_49;
  }
  if (v25 != __p)
  {
    v26 = (void *)HIBYTE(__p[2]);
    if ((*((char *)v25 + 23) & 0x80000000) == 0)
      goto LABEL_38;
    goto LABEL_41;
  }
LABEL_49:
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  xpc_release(*(xpc_object_t *)object);
  v14 = 1;
LABEL_14:
  xpc_release(v5);
  return v14;
}

{
  xpc_object_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  xpc_object_t value;
  NSObject *v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  xpc_object_t v17;
  int v18;
  char *v19;
  size_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  xpc_object_t *v25;
  xpc_object_t object[4];
  uint8_t buf[4];
  xpc_object_t *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = (xpc_object_t)*a3;
  v6 = MEMORY[0x1E0C812F8];
  if (*a3 && MEMORY[0x1C3B8A86C](*a3) == v6)
    xpc_retain(v5);
  else
    v5 = xpc_null_create();
  if (MEMORY[0x1C3B8A86C](v5) != v6)
  {
    v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object[0]) = 0;
      _os_log_error_impl(&dword_1BF335000, v7, OS_LOG_TYPE_ERROR, "Failed: Expected data needs to be dictionary in Accessory Information reporting.", (uint8_t *)object, 2u);
    }
    goto LABEL_13;
  }
  v8 = (const char *)*MEMORY[0x1E0CFB3D0];
  if (!xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFB3D0])
    || (v9 = (const char *)*MEMORY[0x1E0CFB4F8], !xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFB4F8])))
  {
    v12 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
LABEL_13:
      v13 = 0;
      goto LABEL_14;
    }
    v19 = (char *)MEMORY[0x1C3B8A7D0](v5);
    memset(object, 170, 24);
    v20 = strlen(v19);
    if (v20 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v21 = (void *)v20;
    if (v20 >= 0x17)
    {
      v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v23 = v20 | 7;
      v24 = v23 + 1;
      v22 = operator new(v23 + 1);
      object[1] = v21;
      object[2] = (xpc_object_t)(v24 | 0x8000000000000000);
      object[0] = v22;
    }
    else
    {
      HIBYTE(object[2]) = v20;
      v22 = object;
      if (!v20)
        goto LABEL_28;
    }
    memcpy(v22, v19, (size_t)v21);
LABEL_28:
    *((_BYTE *)v21 + (_QWORD)v22) = 0;
    free(v19);
    v25 = object;
    if (SHIBYTE(object[2]) < 0)
      v25 = (xpc_object_t *)object[0];
    *(_DWORD *)buf = 136315138;
    v28 = v25;
    _os_log_error_impl(&dword_1BF335000, v12, OS_LOG_TYPE_ERROR, "Failed: One of elements is missing in Accessory Information reporting: %s", buf, 0xCu);
    if (SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
    goto LABEL_13;
  }
  v10 = *a2;
  value = xpc_dictionary_get_value(v5, v8);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  v15 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v10 + 28) |= 2u;
  *(_DWORD *)(v10 + 16) = v15;
  xpc_release(object[0]);
  v16 = *a2;
  v17 = xpc_dictionary_get_value(v5, v9);
  object[0] = v17;
  if (v17)
    xpc_retain(v17);
  else
    object[0] = xpc_null_create();
  v18 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v16 + 28) |= 4u;
  *(_DWORD *)(v16 + 20) = v18;
  xpc_release(object[0]);
  v13 = 1;
LABEL_14:
  xpc_release(v5);
  return v13;
}

void sub_1BF3E7CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

xpc_object_t xpc::dict::object_proxy::operator xpc::object@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t result;

  value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  *a2 = value;
  if (value)
    return xpc_retain(value);
  result = xpc_null_create();
  *a2 = result;
  return result;
}

BOOL StatsAWD::fillMetric_sync(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  xpc_object_t value;
  const char *v11;
  uint8_t *v12;
  uint8_t *v13;
  size_t v14;
  __int128 v15;
  uint8_t *v16;
  size_t v17;
  uint64_t v18;
  xpc_object_t v19;
  char v20;
  uint64_t v21;
  xpc_object_t v22;
  const char *v23;
  uint8_t *v24;
  size_t v25;
  __int128 v26;
  uint8_t *v27;
  size_t v28;
  uint64_t v29;
  xpc_object_t v30;
  int v31;
  uint64_t v32;
  xpc_object_t v33;
  const char *v34;
  uint8_t *v35;
  size_t v36;
  __int128 v37;
  uint8_t *v38;
  size_t v39;
  uint64_t v40;
  xpc_object_t v41;
  const char *v42;
  uint8_t *v43;
  size_t v44;
  __int128 v45;
  uint8_t *v46;
  size_t v47;
  uint64_t v48;
  xpc_object_t v49;
  const char *v50;
  uint8_t *v51;
  size_t v52;
  __int128 v53;
  uint8_t *v54;
  size_t v55;
  uint64_t v56;
  xpc_object_t v57;
  const char *v58;
  uint8_t *v59;
  size_t v60;
  __int128 v61;
  uint8_t *v62;
  size_t v63;
  uint64_t v64;
  xpc_object_t v65;
  int v66;
  uint64_t v67;
  xpc_object_t v68;
  const char *v69;
  uint8_t *v70;
  size_t v71;
  __int128 v72;
  uint8_t *v73;
  size_t v74;
  uint64_t v75;
  xpc_object_t v76;
  int v77;
  uint64_t v78;
  xpc_object_t v79;
  int v80;
  uint64_t v81;
  xpc_object_t v82;
  char v83;
  xpc_object_t object;
  uint8_t buf[16];
  uint64_t v87;

  v5 = (xpc_object_t)*a3;
  v6 = MEMORY[0x1E0C812F8];
  if (*a3 && MEMORY[0x1C3B8A86C](*a3) == v6)
    xpc_retain(v5);
  else
    v5 = xpc_null_create();
  v7 = MEMORY[0x1C3B8A86C](v5);
  if (v7 != v6)
  {
    v8 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF335000, v8, OS_LOG_TYPE_ERROR, "Invalid AWD Wake Reason Info dictionary", buf, 2u);
    }
    goto LABEL_160;
  }
  v9 = *a2;
  value = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFBF68]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&object, (const object *)"Unknown", v11);
  *(_DWORD *)(v9 + 96) |= 2u;
  v12 = *(uint8_t **)(v9 + 16);
  v13 = (uint8_t *)MEMORY[0x1E0DE8338];
  if (v12 == (uint8_t *)MEMORY[0x1E0DE8338])
  {
    v12 = (uint8_t *)operator new(0x18uLL);
    *(_QWORD *)v12 = 0;
    *((_QWORD *)v12 + 1) = 0;
    *((_QWORD *)v12 + 2) = 0;
    *(_QWORD *)(v9 + 16) = v12;
    v14 = HIBYTE(v87);
    if (((char)v12[23] & 0x80000000) == 0)
    {
LABEL_14:
      if ((v14 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v12, *(void **)buf, *(size_t *)&buf[8]);
      }
      else
      {
        v15 = *(_OWORD *)buf;
        *((_QWORD *)v12 + 2) = v87;
        *(_OWORD *)v12 = v15;
      }
      goto LABEL_25;
    }
  }
  else
  {
    if (v12 == buf)
      goto LABEL_25;
    v14 = HIBYTE(v87);
    if (((char)v12[23] & 0x80000000) == 0)
      goto LABEL_14;
  }
  if ((v14 & 0x80u) == 0)
    v16 = buf;
  else
    v16 = *(uint8_t **)buf;
  if ((v14 & 0x80u) == 0)
    v17 = v14;
  else
    v17 = *(_QWORD *)&buf[8];
  std::string::__assign_no_alias<false>((void **)v12, v16, v17);
LABEL_25:
  if (SHIBYTE(v87) < 0)
    operator delete(*(void **)buf);
  xpc_release(object);
  v18 = *a2;
  v19 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFBE58]);
  *(_QWORD *)buf = v19;
  if (v19)
    xpc_retain(v19);
  else
    *(_QWORD *)buf = xpc_null_create();
  v20 = xpc::dyn_cast_or_default((xpc *)buf, 0);
  *(_DWORD *)(v18 + 96) |= 4u;
  *(_BYTE *)(v18 + 52) = v20;
  xpc_release(*(xpc_object_t *)buf);
  v21 = *a2;
  v22 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFC018]);
  object = v22;
  if (v22)
    xpc_retain(v22);
  else
    object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&object, (const object *)"Unknown", v23);
  *(_DWORD *)(v21 + 96) |= 8u;
  v24 = *(uint8_t **)(v21 + 24);
  if (v24 == v13)
  {
    v24 = (uint8_t *)operator new(0x18uLL);
    *(_QWORD *)v24 = 0;
    *((_QWORD *)v24 + 1) = 0;
    *((_QWORD *)v24 + 2) = 0;
    *(_QWORD *)(v21 + 24) = v24;
    v25 = HIBYTE(v87);
    if (((char)v24[23] & 0x80000000) == 0)
    {
LABEL_36:
      if ((v25 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v24, *(void **)buf, *(size_t *)&buf[8]);
      }
      else
      {
        v26 = *(_OWORD *)buf;
        *((_QWORD *)v24 + 2) = v87;
        *(_OWORD *)v24 = v26;
      }
      goto LABEL_47;
    }
  }
  else
  {
    if (v24 == buf)
      goto LABEL_47;
    v25 = HIBYTE(v87);
    if (((char)v24[23] & 0x80000000) == 0)
      goto LABEL_36;
  }
  if ((v25 & 0x80u) == 0)
    v27 = buf;
  else
    v27 = *(uint8_t **)buf;
  if ((v25 & 0x80u) == 0)
    v28 = v25;
  else
    v28 = *(_QWORD *)&buf[8];
  std::string::__assign_no_alias<false>((void **)v24, v27, v28);
LABEL_47:
  if (SHIBYTE(v87) < 0)
    operator delete(*(void **)buf);
  xpc_release(object);
  v29 = *a2;
  v30 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFBEF8]);
  *(_QWORD *)buf = v30;
  if (v30)
    xpc_retain(v30);
  else
    *(_QWORD *)buf = xpc_null_create();
  v31 = xpc::dyn_cast_or_default((xpc *)buf, 0);
  *(_DWORD *)(v29 + 96) |= 0x10u;
  *(_DWORD *)(v29 + 48) = v31;
  xpc_release(*(xpc_object_t *)buf);
  v32 = *a2;
  v33 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFBD80]);
  object = v33;
  if (v33)
    xpc_retain(v33);
  else
    object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&object, (const object *)"Unknown", v34);
  *(_DWORD *)(v32 + 96) |= 0x20u;
  v35 = *(uint8_t **)(v32 + 32);
  if (v35 == v13)
  {
    v35 = (uint8_t *)operator new(0x18uLL);
    *(_QWORD *)v35 = 0;
    *((_QWORD *)v35 + 1) = 0;
    *((_QWORD *)v35 + 2) = 0;
    *(_QWORD *)(v32 + 32) = v35;
    v36 = HIBYTE(v87);
    if (((char)v35[23] & 0x80000000) == 0)
    {
LABEL_58:
      if ((v36 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v35, *(void **)buf, *(size_t *)&buf[8]);
      }
      else
      {
        v37 = *(_OWORD *)buf;
        *((_QWORD *)v35 + 2) = v87;
        *(_OWORD *)v35 = v37;
      }
      goto LABEL_69;
    }
  }
  else
  {
    if (v35 == buf)
      goto LABEL_69;
    v36 = HIBYTE(v87);
    if (((char)v35[23] & 0x80000000) == 0)
      goto LABEL_58;
  }
  if ((v36 & 0x80u) == 0)
    v38 = buf;
  else
    v38 = *(uint8_t **)buf;
  if ((v36 & 0x80u) == 0)
    v39 = v36;
  else
    v39 = *(_QWORD *)&buf[8];
  std::string::__assign_no_alias<false>((void **)v35, v38, v39);
LABEL_69:
  if (SHIBYTE(v87) < 0)
    operator delete(*(void **)buf);
  xpc_release(object);
  v40 = *a2;
  v41 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFBF00]);
  object = v41;
  if (v41)
    xpc_retain(v41);
  else
    object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&object, (const object *)"Unknown", v42);
  *(_DWORD *)(v40 + 96) |= 0x40u;
  v43 = *(uint8_t **)(v40 + 40);
  if (v43 == v13)
  {
    v43 = (uint8_t *)operator new(0x18uLL);
    *(_QWORD *)v43 = 0;
    *((_QWORD *)v43 + 1) = 0;
    *((_QWORD *)v43 + 2) = 0;
    *(_QWORD *)(v40 + 40) = v43;
    v44 = HIBYTE(v87);
    if (((char)v43[23] & 0x80000000) == 0)
    {
LABEL_77:
      if ((v44 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v43, *(void **)buf, *(size_t *)&buf[8]);
      }
      else
      {
        v45 = *(_OWORD *)buf;
        *((_QWORD *)v43 + 2) = v87;
        *(_OWORD *)v43 = v45;
      }
      goto LABEL_88;
    }
  }
  else
  {
    if (v43 == buf)
      goto LABEL_88;
    v44 = HIBYTE(v87);
    if (((char)v43[23] & 0x80000000) == 0)
      goto LABEL_77;
  }
  if ((v44 & 0x80u) == 0)
    v46 = buf;
  else
    v46 = *(uint8_t **)buf;
  if ((v44 & 0x80u) == 0)
    v47 = v44;
  else
    v47 = *(_QWORD *)&buf[8];
  std::string::__assign_no_alias<false>((void **)v43, v46, v47);
LABEL_88:
  if (SHIBYTE(v87) < 0)
    operator delete(*(void **)buf);
  xpc_release(object);
  v48 = *a2;
  v49 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFBE50]);
  object = v49;
  if (v49)
    xpc_retain(v49);
  else
    object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&object, (const object *)"Unknown", v50);
  *(_DWORD *)(v48 + 96) |= 0x80u;
  v51 = *(uint8_t **)(v48 + 56);
  if (v51 == v13)
  {
    v51 = (uint8_t *)operator new(0x18uLL);
    *(_QWORD *)v51 = 0;
    *((_QWORD *)v51 + 1) = 0;
    *((_QWORD *)v51 + 2) = 0;
    *(_QWORD *)(v48 + 56) = v51;
    v52 = HIBYTE(v87);
    if (((char)v51[23] & 0x80000000) == 0)
    {
LABEL_96:
      if ((v52 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v51, *(void **)buf, *(size_t *)&buf[8]);
      }
      else
      {
        v53 = *(_OWORD *)buf;
        *((_QWORD *)v51 + 2) = v87;
        *(_OWORD *)v51 = v53;
      }
      goto LABEL_107;
    }
  }
  else
  {
    if (v51 == buf)
      goto LABEL_107;
    v52 = HIBYTE(v87);
    if (((char)v51[23] & 0x80000000) == 0)
      goto LABEL_96;
  }
  if ((v52 & 0x80u) == 0)
    v54 = buf;
  else
    v54 = *(uint8_t **)buf;
  if ((v52 & 0x80u) == 0)
    v55 = v52;
  else
    v55 = *(_QWORD *)&buf[8];
  std::string::__assign_no_alias<false>((void **)v51, v54, v55);
LABEL_107:
  if (SHIBYTE(v87) < 0)
    operator delete(*(void **)buf);
  xpc_release(object);
  v56 = *a2;
  v57 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFBDC8]);
  object = v57;
  if (v57)
    xpc_retain(v57);
  else
    object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&object, (const object *)"Unknown", v58);
  *(_DWORD *)(v56 + 96) |= 0x100u;
  v59 = *(uint8_t **)(v56 + 64);
  if (v59 == v13)
  {
    v59 = (uint8_t *)operator new(0x18uLL);
    *(_QWORD *)v59 = 0;
    *((_QWORD *)v59 + 1) = 0;
    *((_QWORD *)v59 + 2) = 0;
    *(_QWORD *)(v56 + 64) = v59;
    v60 = HIBYTE(v87);
    if (((char)v59[23] & 0x80000000) == 0)
    {
LABEL_115:
      if ((v60 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v59, *(void **)buf, *(size_t *)&buf[8]);
      }
      else
      {
        v61 = *(_OWORD *)buf;
        *((_QWORD *)v59 + 2) = v87;
        *(_OWORD *)v59 = v61;
      }
      goto LABEL_126;
    }
  }
  else
  {
    if (v59 == buf)
      goto LABEL_126;
    v60 = HIBYTE(v87);
    if (((char)v59[23] & 0x80000000) == 0)
      goto LABEL_115;
  }
  if ((v60 & 0x80u) == 0)
    v62 = buf;
  else
    v62 = *(uint8_t **)buf;
  if ((v60 & 0x80u) == 0)
    v63 = v60;
  else
    v63 = *(_QWORD *)&buf[8];
  std::string::__assign_no_alias<false>((void **)v59, v62, v63);
LABEL_126:
  if (SHIBYTE(v87) < 0)
    operator delete(*(void **)buf);
  xpc_release(object);
  v64 = *a2;
  v65 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFBAE0]);
  *(_QWORD *)buf = v65;
  if (v65)
    xpc_retain(v65);
  else
    *(_QWORD *)buf = xpc_null_create();
  v66 = xpc::dyn_cast_or_default((xpc *)buf, 0);
  *(_DWORD *)(v64 + 96) |= 0x200u;
  *(_DWORD *)(v64 + 80) = v66;
  xpc_release(*(xpc_object_t *)buf);
  v67 = *a2;
  v68 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFBC88]);
  object = v68;
  if (v68)
    xpc_retain(v68);
  else
    object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&object, (const object *)"Unknown", v69);
  *(_DWORD *)(v67 + 96) |= 0x400u;
  v70 = *(uint8_t **)(v67 + 72);
  if (v70 == v13)
  {
    v70 = (uint8_t *)operator new(0x18uLL);
    *(_QWORD *)v70 = 0;
    *((_QWORD *)v70 + 1) = 0;
    *((_QWORD *)v70 + 2) = 0;
    *(_QWORD *)(v67 + 72) = v70;
    v71 = HIBYTE(v87);
    if (((char)v70[23] & 0x80000000) == 0)
    {
LABEL_137:
      if ((v71 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v70, *(void **)buf, *(size_t *)&buf[8]);
      }
      else
      {
        v72 = *(_OWORD *)buf;
        *((_QWORD *)v70 + 2) = v87;
        *(_OWORD *)v70 = v72;
      }
      goto LABEL_148;
    }
LABEL_140:
    if ((v71 & 0x80u) == 0)
      v73 = buf;
    else
      v73 = *(uint8_t **)buf;
    if ((v71 & 0x80u) == 0)
      v74 = v71;
    else
      v74 = *(_QWORD *)&buf[8];
    std::string::__assign_no_alias<false>((void **)v70, v73, v74);
    goto LABEL_148;
  }
  if (v70 != buf)
  {
    v71 = HIBYTE(v87);
    if (((char)v70[23] & 0x80000000) == 0)
      goto LABEL_137;
    goto LABEL_140;
  }
LABEL_148:
  if (SHIBYTE(v87) < 0)
    operator delete(*(void **)buf);
  xpc_release(object);
  v75 = *a2;
  v76 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFBD78]);
  *(_QWORD *)buf = v76;
  if (v76)
    xpc_retain(v76);
  else
    *(_QWORD *)buf = xpc_null_create();
  v77 = xpc::dyn_cast_or_default((xpc *)buf, 0);
  *(_DWORD *)(v75 + 96) |= 0x800u;
  *(_DWORD *)(v75 + 84) = v77;
  xpc_release(*(xpc_object_t *)buf);
  v78 = *a2;
  v79 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFBC80]);
  *(_QWORD *)buf = v79;
  if (v79)
    xpc_retain(v79);
  else
    *(_QWORD *)buf = xpc_null_create();
  v80 = xpc::dyn_cast_or_default((xpc *)buf, 0);
  *(_DWORD *)(v78 + 96) |= 0x1000u;
  *(_DWORD *)(v78 + 88) = v80;
  xpc_release(*(xpc_object_t *)buf);
  v81 = *a2;
  v82 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFB9D0]);
  *(_QWORD *)buf = v82;
  if (v82)
    xpc_retain(v82);
  else
    *(_QWORD *)buf = xpc_null_create();
  v83 = xpc::dyn_cast_or_default((xpc *)buf, 0);
  *(_DWORD *)(v81 + 96) |= 0x2000u;
  *(_BYTE *)(v81 + 53) = v83;
  xpc_release(*(xpc_object_t *)buf);
LABEL_160:
  xpc_release(v5);
  return v7 == v6;
}

void sub_1BF3E86DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  if (a16 < 0)
    operator delete(__p);
  xpc_release(object);
  xpc_release(v16);
  _Unwind_Resume(a1);
}

uint64_t StatsAWD::fillMetric_sync(uint64_t a1, int **a2, _QWORD *a3)
{
  xpc_object_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  size_t count;
  xpc_object_t v12;
  uint64_t v13;
  const char *v15;
  const char *v16;
  const char *v17;
  NSObject *v18;
  int *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  NSObject *v24;
  const char *v25;
  char *v26;
  size_t v27;
  size_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  xpc_object_t value;
  const char *v34;
  void **v35;
  size_t v36;
  __int128 v37;
  _BYTE *v38;
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  xpc_object_t v43;
  int v44;
  xpc_object_t v45;
  const char *v46;
  void **v47;
  size_t v48;
  __int128 v49;
  _BYTE *v50;
  size_t v51;
  uint64_t v52;
  const char *v53;
  xpc_object_t v54;
  int **v55;
  _BYTE __dst[24];
  xpc_object_t xdict;
  xpc_object_t object;
  uint64_t v59;
  _BYTE buf[12];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v5 = (xpc_object_t)*a3;
  v6 = MEMORY[0x1E0C812C8];
  if (*a3 && MEMORY[0x1C3B8A86C](*a3) == v6)
    xpc_retain(v5);
  else
    v5 = xpc_null_create();
  if (MEMORY[0x1C3B8A86C](v5) != v6)
  {
    v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__dst = 0;
      _os_log_error_impl(&dword_1BF335000, v7, OS_LOG_TYPE_ERROR, "Failed: Expected data needs to be dictionary in bb crash handling", __dst, 2u);
    }
    v8 = 0;
    goto LABEL_25;
  }
  if (v5)
  {
    xpc_retain(v5);
    object = v5;
    v9 = v5;
LABEL_12:
    xpc_retain(v9);
    goto LABEL_13;
  }
  v9 = xpc_null_create();
  object = v9;
  if (v9)
    goto LABEL_12;
  v9 = 0;
  object = xpc_null_create();
LABEL_13:
  v59 = 0;
  xpc_release(v9);
  if (v5)
  {
    xpc_retain(v5);
    v10 = v5;
  }
  else
  {
    v10 = xpc_null_create();
  }
  if (MEMORY[0x1C3B8A86C](v5) == v6)
  {
    count = xpc_array_get_count(v5);
    if (v10)
      goto LABEL_18;
LABEL_20:
    v12 = xpc_null_create();
    goto LABEL_21;
  }
  count = 0;
  if (!v10)
    goto LABEL_20;
LABEL_18:
  xpc_retain(v10);
  v12 = v10;
LABEL_21:
  xpc_release(v10);
  v13 = v59;
  if (v59 != count || object != v12)
  {
    v55 = a2;
    v15 = (const char *)*MEMORY[0x1E0CFB758];
    v16 = (const char *)*MEMORY[0x1E0CFB640];
    v17 = (const char *)*MEMORY[0x1E0CFB3E0];
    while (1)
    {
      xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)__dst = &object;
      *(_QWORD *)&__dst[8] = v13;
      xpc::array::object_proxy::operator xpc::dict((uint64_t)__dst, &xdict);
      if (MEMORY[0x1C3B8A86C](xdict) == MEMORY[0x1E0C812F8]
        && xpc_dictionary_get_value(xdict, v15)
        && xpc_dictionary_get_value(xdict, v16)
        && xpc_dictionary_get_value(xdict, v17))
      {
        v19 = *v55;
        v20 = (*v55)[7];
        v21 = (*v55)[6];
        if ((int)v21 >= v20)
        {
          if (v20 == v19[8])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v19 + 4));
            v20 = v19[7];
          }
          v19[7] = v20 + 1;
          v23 = operator new(0x28uLL);
          *v23 = off_1E7907360;
          v30 = MEMORY[0x1E0DE8338];
          v23[1] = MEMORY[0x1E0DE8338];
          v23[2] = v30;
          v23[3] = 0;
          *((_DWORD *)v23 + 8) = 0;
          v31 = *((_QWORD *)v19 + 2);
          v32 = v19[6];
          v19[6] = v32 + 1;
          *(_QWORD *)(v31 + 8 * v32) = v23;
LABEL_49:
          value = xpc_dictionary_get_value(xdict, v15);
          *(_QWORD *)buf = value;
          if (value)
            xpc_retain(value);
          else
            *(_QWORD *)buf = xpc_null_create();
          xpc::dyn_cast_or_default((xpc *)buf, (const object *)"", v34);
          *((_DWORD *)v23 + 8) |= 1u;
          v35 = (void **)v23[1];
          if (v35 == (void **)MEMORY[0x1E0DE8338])
          {
            v35 = (void **)operator new(0x18uLL);
            *v35 = 0;
            v35[1] = 0;
            v35[2] = 0;
            v23[1] = v35;
            v36 = __dst[23];
            if ((*((char *)v35 + 23) & 0x80000000) == 0)
              goto LABEL_55;
          }
          else
          {
            if (v35 == (void **)__dst)
              goto LABEL_75;
            v36 = __dst[23];
            if ((*((char *)v35 + 23) & 0x80000000) == 0)
            {
LABEL_55:
              if ((v36 & 0x80) != 0)
              {
                std::string::__assign_no_alias<true>(v35, *(void **)__dst, *(size_t *)&__dst[8]);
              }
              else
              {
                v37 = *(_OWORD *)__dst;
                v35[2] = *(void **)&__dst[16];
                *(_OWORD *)v35 = v37;
              }
              goto LABEL_75;
            }
          }
          if ((v36 & 0x80u) == 0)
            v38 = __dst;
          else
            v38 = *(_BYTE **)__dst;
          if ((v36 & 0x80u) == 0)
            v39 = v36;
          else
            v39 = *(_QWORD *)&__dst[8];
          std::string::__assign_no_alias<false>(v35, v38, v39);
LABEL_75:
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          xpc_release(*(xpc_object_t *)buf);
          v43 = xpc_dictionary_get_value(xdict, v16);
          *(_QWORD *)__dst = v43;
          if (v43)
            xpc_retain(v43);
          else
            *(_QWORD *)__dst = xpc_null_create();
          v44 = xpc::dyn_cast_or_default((xpc *)__dst, 0);
          *((_DWORD *)v23 + 8) |= 2u;
          *((_DWORD *)v23 + 6) = v44;
          xpc_release(*(xpc_object_t *)__dst);
          v45 = xpc_dictionary_get_value(xdict, v17);
          *(_QWORD *)buf = v45;
          if (v45)
            xpc_retain(v45);
          else
            *(_QWORD *)buf = xpc_null_create();
          xpc::dyn_cast_or_default((xpc *)buf, (const object *)"", v46);
          *((_DWORD *)v23 + 8) |= 4u;
          v47 = (void **)v23[2];
          if (v47 == (void **)MEMORY[0x1E0DE8338])
          {
            v47 = (void **)operator new(0x18uLL);
            *v47 = 0;
            v47[1] = 0;
            v47[2] = 0;
            v23[2] = v47;
            v48 = __dst[23];
            if ((*((char *)v47 + 23) & 0x80000000) == 0)
              goto LABEL_86;
          }
          else
          {
            if (v47 == (void **)__dst)
            {
LABEL_97:
              if ((__dst[23] & 0x80000000) != 0)
                operator delete(*(void **)__dst);
              xpc_release(*(xpc_object_t *)buf);
              v8 = 1;
              goto LABEL_30;
            }
            v48 = __dst[23];
            if ((*((char *)v47 + 23) & 0x80000000) == 0)
            {
LABEL_86:
              if ((v48 & 0x80) != 0)
              {
                std::string::__assign_no_alias<true>(v47, *(void **)__dst, *(size_t *)&__dst[8]);
              }
              else
              {
                v49 = *(_OWORD *)__dst;
                v47[2] = *(void **)&__dst[16];
                *(_OWORD *)v47 = v49;
              }
              goto LABEL_97;
            }
          }
          if ((v48 & 0x80u) == 0)
            v50 = __dst;
          else
            v50 = *(_BYTE **)__dst;
          if ((v48 & 0x80u) == 0)
            v51 = v48;
          else
            v51 = *(_QWORD *)&__dst[8];
          std::string::__assign_no_alias<false>(v47, v50, v51);
          goto LABEL_97;
        }
        v22 = *((_QWORD *)v19 + 2);
        v19[6] = v21 + 1;
        v23 = *(_QWORD **)(v22 + 8 * v21);
        if (v23)
          goto LABEL_49;
        v24 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__dst = 0;
          _os_log_error_impl(&dword_1BF335000, v24, OS_LOG_TYPE_ERROR, "Failed: Creating crash record", __dst, 2u);
        }
        v8 = 0;
      }
      else
      {
        v18 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          v53 = v17;
          v52 = a1;
          v25 = v16;
          v54 = v12;
          v26 = (char *)MEMORY[0x1C3B8A7D0](xdict);
          memset(__dst, 170, sizeof(__dst));
          v27 = strlen(v26);
          if (v27 >= 0x7FFFFFFFFFFFFFF8)
            std::string::__throw_length_error[abi:ne180100]();
          v28 = v27;
          if (v27 >= 0x17)
          {
            v40 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v27 | 7) != 0x17)
              v40 = v27 | 7;
            v41 = v40 + 1;
            v29 = operator new(v40 + 1);
            *(_QWORD *)&__dst[8] = v28;
            *(_QWORD *)&__dst[16] = v41 | 0x8000000000000000;
            *(_QWORD *)__dst = v29;
          }
          else
          {
            __dst[23] = v27;
            v29 = __dst;
            if (!v27)
              goto LABEL_69;
          }
          memcpy(v29, v26, v28);
LABEL_69:
          v29[v28] = 0;
          free(v26);
          v42 = __dst;
          if (__dst[23] < 0)
            v42 = *(_BYTE **)__dst;
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v42;
          _os_log_error_impl(&dword_1BF335000, v18, OS_LOG_TYPE_ERROR, "Failed: One of elements of bb crash is missing: %s", buf, 0xCu);
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          v8 = 0;
          v12 = v54;
          v16 = v25;
          a1 = v52;
          v17 = v53;
          goto LABEL_30;
        }
        v8 = 0;
      }
LABEL_30:
      xpc_release(xdict);
      if ((_DWORD)v8)
      {
        v13 = v59 + 1;
        v59 = v13;
        if (v13 != count || object != v12)
          continue;
      }
      goto LABEL_24;
    }
  }
  v8 = 1;
LABEL_24:
  xpc_release(v12);
  xpc_release(object);
LABEL_25:
  xpc_release(v5);
  return v8;
}

void sub_1BF3E9030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,xpc_object_t object,xpc_object_t a26)
{
  void *v26;
  void *v27;
  uint64_t v28;

  if (a24 < 0)
    operator delete(__p);
  xpc_release(*(xpc_object_t *)(v28 - 112));
  xpc_release(object);
  xpc_release(v27);
  xpc_release(a26);
  xpc_release(v26);
  _Unwind_Resume(a1);
}

uint64_t StatsAWD::fillMetric_sync(uint64_t a1, int **a2, void **a3)
{
  void *v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  xpc_object_t value;
  NSObject *v17;
  uint64_t v18;
  char *v20;
  size_t v21;
  size_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  int *v27;
  int v28;
  int *v29;
  int v30;
  int *v31;
  int v32;
  int *v33;
  int v34;
  int *v35;
  int v36;
  int *v37;
  int v38;
  void *count;
  const char *v40;
  const char *v41;
  const char *v42;
  const char *v43;
  uint64_t v44;
  int *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  xpc_object_t v52;
  int v53;
  xpc_object_t v54;
  int v55;
  xpc_object_t v56;
  int v57;
  xpc_object_t v58;
  int v59;
  NSObject *v60;
  int *v61;
  int v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  xpc_object_t object;
  xpc_object_t v67;
  uint64_t v68;
  xpc_object_t xarray;
  uint8_t buf[24];
  xpc_object_t xdict;
  uint8_t v72[4];
  uint8_t *v73;
  __int128 v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  xdict = v5;
  v6 = MEMORY[0x1E0C812F8];
  if (v5 && MEMORY[0x1C3B8A86C](v5) == v6)
    xpc_retain(v5);
  else
    xdict = xpc_null_create();
  if (MEMORY[0x1C3B8A86C]() != v6)
  {
    v7 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
LABEL_20:
      v18 = 0;
      goto LABEL_21;
    }
    *(_WORD *)buf = 0;
    v8 = "Failed: Expected data needs to be dictionary in low power stats handling";
LABEL_8:
    _os_log_error_impl(&dword_1BF335000, v7, OS_LOG_TYPE_ERROR, v8, buf, 2u);
    goto LABEL_20;
  }
  v9 = *MEMORY[0x1E0CFBBC0];
  if (!xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E0CFBBC0])
    || (v10 = *MEMORY[0x1E0CFB518], !xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E0CFB518]))
    || (v11 = *MEMORY[0x1E0CFB8B8], !xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E0CFB8B8]))
    || (v12 = *MEMORY[0x1E0CFB200], !xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E0CFB200]))
    || (v13 = *MEMORY[0x1E0CFB638], !xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E0CFB638]))
    || (v14 = *MEMORY[0x1E0CFB740], !xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E0CFB740]))
    || (v15 = *MEMORY[0x1E0CFBAD8], !xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E0CFBAD8])))
  {
    v17 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    v20 = (char *)MEMORY[0x1C3B8A7D0](xdict);
    memset(buf, 170, sizeof(buf));
    v21 = strlen(v20);
    if (v21 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v22 = v21;
    if (v21 >= 0x17)
    {
      v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v21 | 7) != 0x17)
        v24 = v21 | 7;
      v25 = v24 + 1;
      v23 = operator new(v24 + 1);
      *(_QWORD *)&buf[8] = v22;
      *(_QWORD *)&buf[16] = v25 | 0x8000000000000000;
      *(_QWORD *)buf = v23;
    }
    else
    {
      buf[23] = v21;
      v23 = buf;
      if (!v21)
        goto LABEL_30;
    }
    memcpy(v23, v20, v22);
LABEL_30:
    *((_BYTE *)v23 + v22) = 0;
    free(v20);
    v26 = buf;
    if ((buf[23] & 0x80u) != 0)
      v26 = *(uint8_t **)buf;
    LODWORD(v74) = 136315138;
    *(_QWORD *)((char *)&v74 + 4) = v26;
    _os_log_error_impl(&dword_1BF335000, v17, OS_LOG_TYPE_ERROR, "Failed: One of elements of low power stats is missing: %s", (uint8_t *)&v74, 0xCu);
    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);
    goto LABEL_20;
  }
  v65 = *MEMORY[0x1E0CFB748];
  value = xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E0CFB748]);
  if (MEMORY[0x1C3B8A86C](value) != MEMORY[0x1E0C812C8])
  {
    v7 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    *(_WORD *)buf = 0;
    v8 = "Failed: Expected data needs to be array in missed MT message handling";
    goto LABEL_8;
  }
  v64 = v15;
  v27 = *a2;
  *(_QWORD *)buf = &xdict;
  *(_QWORD *)&buf[8] = v9;
  xpc::dict::object_proxy::operator xpc::object((uint64_t)buf, &v74);
  v28 = xpc::dyn_cast_or_default((xpc *)&v74, 0);
  v27[18] |= 4u;
  v27[5] = v28;
  xpc_release((xpc_object_t)v74);
  v29 = *a2;
  *(_QWORD *)buf = &xdict;
  *(_QWORD *)&buf[8] = v10;
  xpc::dict::object_proxy::operator xpc::object((uint64_t)buf, &v74);
  v30 = xpc::dyn_cast_or_default((xpc *)&v74, 0);
  v29[18] |= 8u;
  v29[6] = v30;
  xpc_release((xpc_object_t)v74);
  v31 = *a2;
  *(_QWORD *)buf = &xdict;
  *(_QWORD *)&buf[8] = v11;
  xpc::dict::object_proxy::operator xpc::object((uint64_t)buf, &v74);
  v32 = xpc::dyn_cast_or_default((xpc *)&v74, 0);
  v31[18] |= 0x10u;
  v31[7] = v32;
  xpc_release((xpc_object_t)v74);
  v33 = *a2;
  *(_QWORD *)buf = &xdict;
  *(_QWORD *)&buf[8] = v12;
  xpc::dict::object_proxy::operator xpc::object((uint64_t)buf, &v74);
  v34 = xpc::dyn_cast_or_default((xpc *)&v74, 0);
  v33[18] |= 0x20u;
  v33[8] = v34;
  xpc_release((xpc_object_t)v74);
  v35 = *a2;
  *(_QWORD *)buf = &xdict;
  *(_QWORD *)&buf[8] = v13;
  xpc::dict::object_proxy::operator xpc::object((uint64_t)buf, &v74);
  v36 = xpc::dyn_cast_or_default((xpc *)&v74, 0);
  v35[18] |= 0x40u;
  v35[9] = v36;
  xpc_release((xpc_object_t)v74);
  v37 = *a2;
  *(_QWORD *)buf = &xdict;
  *(_QWORD *)&buf[8] = v14;
  xpc::dict::object_proxy::operator xpc::object((uint64_t)buf, &v74);
  v38 = xpc::dyn_cast_or_default((xpc *)&v74, 0);
  v37[18] |= 0x80u;
  v37[16] = v38;
  xpc_release((xpc_object_t)v74);
  xarray = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)buf = &xdict;
  *(_QWORD *)&buf[8] = v65;
  xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &xarray);
  xpc::array::array((xpc_object_t *)buf, xarray);
  xpc::array::iterator::iterator((xpc_object_t *)&v74, *(xpc_object_t *)buf, 0);
  xpc_release(*(xpc_object_t *)buf);
  xpc::array::array((xpc_object_t *)buf, xarray);
  if (MEMORY[0x1C3B8A86C](xarray) == MEMORY[0x1E0C812C8])
    count = (void *)xpc_array_get_count(xarray);
  else
    count = 0;
  xpc::array::iterator::iterator(&v67, *(xpc_object_t *)buf, count);
  xpc_release(*(xpc_object_t *)buf);
  v40 = (const char *)*MEMORY[0x1E0CFB8B0];
  v41 = (const char *)*MEMORY[0x1E0CFB750];
  v42 = (const char *)*MEMORY[0x1E0CFB1F8];
  v43 = (const char *)*MEMORY[0x1E0CFB1F0];
  v44 = *((_QWORD *)&v74 + 1);
  if (*((_QWORD *)&v74 + 1) == v68)
  {
LABEL_38:
    if ((xpc_object_t)v74 != v67)
      goto LABEL_39;
    xpc_release((xpc_object_t)v74);
    xpc_release((xpc_object_t)v74);
    v61 = *a2;
    *(_QWORD *)buf = &xdict;
    *(_QWORD *)&buf[8] = v64;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)buf, &v74);
    v62 = xpc::dyn_cast_or_default((xpc *)&v74, 0);
    v61[18] |= 2u;
    v61[4] = v62;
    xpc_release((xpc_object_t)v74);
    v18 = 1;
  }
  else
  {
LABEL_39:
    while (1)
    {
      object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)buf = &v74;
      *(_QWORD *)&buf[8] = v44;
      xpc::array::object_proxy::operator xpc::dict((uint64_t)buf, &object);
      if (MEMORY[0x1C3B8A86C](object) != v6
        || !xpc_dictionary_get_value(object, v40)
        || !xpc_dictionary_get_value(object, v41)
        || !xpc_dictionary_get_value(object, v42)
        || !xpc_dictionary_get_value(object, v43))
      {
        break;
      }
      v45 = *a2;
      v46 = (*a2)[13];
      v47 = (*a2)[12];
      if ((int)v47 >= v46)
      {
        if (v46 == v45[14])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v45 + 10));
          v46 = v45[13];
        }
        v45[13] = v46 + 1;
        v49 = operator new(0x20uLL);
        *v49 = off_1E79086A0;
        v49[1] = 0;
        v49[2] = 0;
        v49[3] = 0;
        v50 = *((_QWORD *)v45 + 5);
        v51 = v45[12];
        v45[12] = v51 + 1;
        *(_QWORD *)(v50 + 8 * v51) = v49;
      }
      else
      {
        v48 = *((_QWORD *)v45 + 5);
        v45[12] = v47 + 1;
        v49 = *(_QWORD **)(v48 + 8 * v47);
      }
      v52 = xpc_dictionary_get_value(object, v40);
      *(_QWORD *)buf = v52;
      if (v52)
        xpc_retain(v52);
      else
        *(_QWORD *)buf = xpc_null_create();
      v53 = xpc::dyn_cast_or_default((xpc *)buf, 0);
      *((_DWORD *)v49 + 7) |= 1u;
      *((_DWORD *)v49 + 2) = v53;
      xpc_release(*(xpc_object_t *)buf);
      v54 = xpc_dictionary_get_value(object, v41);
      *(_QWORD *)buf = v54;
      if (v54)
        xpc_retain(v54);
      else
        *(_QWORD *)buf = xpc_null_create();
      v55 = xpc::dyn_cast_or_default((xpc *)buf, 0);
      *((_DWORD *)v49 + 7) |= 2u;
      *((_DWORD *)v49 + 3) = v55;
      xpc_release(*(xpc_object_t *)buf);
      v56 = xpc_dictionary_get_value(object, v42);
      *(_QWORD *)buf = v56;
      if (v56)
        xpc_retain(v56);
      else
        *(_QWORD *)buf = xpc_null_create();
      v57 = xpc::dyn_cast_or_default((xpc *)buf, 0);
      *((_DWORD *)v49 + 7) |= 4u;
      *((_DWORD *)v49 + 4) = v57;
      xpc_release(*(xpc_object_t *)buf);
      v58 = xpc_dictionary_get_value(object, v43);
      *(_QWORD *)buf = v58;
      if (v58)
        xpc_retain(v58);
      else
        *(_QWORD *)buf = xpc_null_create();
      v59 = xpc::dyn_cast_or_default((xpc *)buf, 0);
      *((_DWORD *)v49 + 7) |= 8u;
      *((_DWORD *)v49 + 5) = v59;
      xpc_release(*(xpc_object_t *)buf);
      xpc_release(object);
      v44 = *((_QWORD *)&v74 + 1) + 1;
      *((_QWORD *)&v74 + 1) = v44;
      if (v44 == v68)
        goto LABEL_38;
    }
    v60 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
    {
      xpc::dict::to_debug_string((xpc::dict *)&object, buf);
      v63 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)v72 = 136315138;
      v73 = v63;
      _os_log_error_impl(&dword_1BF335000, v60, OS_LOG_TYPE_ERROR, "Failed: One of elements of missed MT message is missing: %s", v72, 0xCu);
      if ((char)buf[23] < 0)
        operator delete(*(void **)buf);
    }
    xpc_release(object);
    xpc_release(v67);
    xpc_release((xpc_object_t)v74);
    v18 = 0;
  }
  xpc_release(xarray);
LABEL_21:
  xpc_release(xdict);
  return v18;
}

void sub_1BF3E9A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t a11, xpc_object_t a12, uint64_t a13, xpc_object_t a14, xpc_object_t a15, uint64_t a16, uint64_t a17, xpc_object_t a18, uint64_t a19, uint64_t a20,xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1BF3EA074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, xpc_object_t object)
{
  void *v16;

  if (a14 < 0)
    operator delete(__p);
  xpc_release(object);
  xpc_release(v16);
  _Unwind_Resume(a1);
}

void sub_1BF3EA470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1BF3EA924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, xpc_object_t object)
{
  void *v16;

  if (a14 < 0)
    operator delete(__p);
  xpc_release(object);
  xpc_release(v16);
  _Unwind_Resume(a1);
}

void sub_1BF3EACAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

BOOL StatsAWD::fillMetric_sync(uint64_t a1, uint64_t *a2, xpc_object_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  xpc_object_t value;
  const char *v10;
  std::string *v11;
  __int128 v12;
  xpc_object_t v13;
  int v14;
  xpc_object_t v15;
  int v16;
  xpc_object_t v17;
  int v18;
  xpc_object_t v19;
  int v20;
  xpc_object_t v21;
  const char *v22;
  xpc_object_t v23;
  const char *v24;
  xpc_object_t v25;
  const char *v26;
  xpc_object_t v27;
  int v28;
  NSObject *v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  void **v34;
  void **v35;
  void *p_p;
  const char *v37;
  const char *v38;
  void **v39;
  xpc_object_t *v40;
  void **v41;
  uint64_t v42;
  void **v43;
  xpc_object_t *v44;
  void *v45;
  __int128 v46;
  void **v47;
  void *v48;
  uint64_t v49;
  int v50;
  xpc_object_t *v51;
  void *v52;
  __int128 v53;
  xpc_object_t *v54;
  xpc_object_t v55;
  uint64_t v56;
  void **v57;
  void *v58;
  __int128 v59;
  void **v60;
  void *v61;
  uint64_t v62;
  void **v63;
  void *v64;
  __int128 v65;
  void **v66;
  void *v67;
  uint64_t v68;
  uint64_t *v70;
  void *__p;
  char v72;
  void *v73[3];
  void *v74[3];
  xpc_object_t object[3];
  void *v76[4];
  std::string buf;
  const char *v78;
  __int16 v79;
  void *v80;
  __int16 v81;
  xpc_object_t *v82;
  __int16 v83;
  void **v84;
  __int16 v85;
  void **v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v6 = MEMORY[0x1C3B8A86C](*a3);
  v7 = MEMORY[0x1E0C812F8];
  if (v6 == MEMORY[0x1E0C812F8])
  {
    memset(v76, 170, 24);
    value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFB788]);
    object[0] = value;
    if (value)
      xpc_retain(value);
    else
      object[0] = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)object, (const object *)"no-reset-reason", v10);
    v11 = std::string::insert(&buf, 0, "modem reset: ", 0xDuLL);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v76[2] = (void *)v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)v76 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    xpc_release(object[0]);
    v13 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFB780]);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
    if (v13)
      xpc_retain(v13);
    else
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v14 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    xpc_release(buf.__r_.__value_.__l.__data_);
    v15 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFB040]);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
    if (v15)
      xpc_retain(v15);
    else
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v16 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    xpc_release(buf.__r_.__value_.__l.__data_);
    v17 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFC1F0]);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    if (v17)
      xpc_retain(v17);
    else
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v18 = xpc::dyn_cast_or_default((xpc *)&buf, (const object *)0xB);
    xpc_release(buf.__r_.__value_.__l.__data_);
    v19 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFC1F8]);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
    if (v19)
      xpc_retain(v19);
    else
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v20 = xpc::dyn_cast_or_default((xpc *)&buf, (const object *)0xB);
    xpc_release(buf.__r_.__value_.__l.__data_);
    memset(object, 170, sizeof(object));
    v21 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFC230]);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
    if (v21)
      xpc_retain(v21);
    else
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&buf, (const object *)"", v22);
    xpc_release(buf.__r_.__value_.__l.__data_);
    memset(v74, 170, sizeof(v74));
    v23 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFC238]);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
    if (v23)
      xpc_retain(v23);
    else
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&buf, (const object *)"", v24);
    xpc_release(buf.__r_.__value_.__l.__data_);
    memset(v73, 170, sizeof(v73));
    v25 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFC198]);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    if (v25)
      xpc_retain(v25);
    else
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&buf, (const object *)"", v26);
    xpc_release(buf.__r_.__value_.__l.__data_);
    v27 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFAFE0]);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
    if (v27)
      xpc_retain(v27);
    else
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v28 = xpc::dyn_cast_or_default((xpc *)&buf, (const object *)8);
    xpc_release(buf.__r_.__value_.__l.__data_);
    v29 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      v70 = a2;
      v30 = v6;
      v31 = v20;
      v32 = v14;
      v33 = SHIBYTE(v76[2]);
      v34 = (void **)v76[0];
      abm::asString();
      v35 = v76;
      p_p = __p;
      v37 = "NO";
      if (v33 < 0)
        v35 = v34;
      if (v16)
        v38 = "YES";
      else
        v38 = "NO";
      LOBYTE(v14) = v32;
      if (v32)
        v37 = "YES";
      v39 = (void **)v74[0];
      if (v72 >= 0)
        p_p = &__p;
      v40 = object;
      if (SHIBYTE(object[2]) < 0)
        v40 = (xpc_object_t *)object[0];
      v41 = (void **)v73[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136316674;
      if (SHIBYTE(v74[2]) >= 0)
        v39 = v74;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v35;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      if (SHIBYTE(v73[2]) >= 0)
        v41 = v73;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v37;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      v78 = v38;
      v79 = 2080;
      v80 = p_p;
      v81 = 2080;
      v82 = v40;
      v83 = 2080;
      v84 = v39;
      v85 = 2080;
      v86 = v41;
      _os_log_impl(&dword_1BF335000, v29, OS_LOG_TYPE_DEFAULT, "#I CCBasebandReset Metric Submission: Baseband Reset Reason: %s, Is MTBF: %s, Was In Voice Call: %s, RAT: %s, PLMN1: %s, PLMN2: %s, SKU: %s", (uint8_t *)&buf, 0x48u);
      if (v72 < 0)
        operator delete(__p);
      v7 = MEMORY[0x1E0C812F8];
      v20 = v31;
      v6 = v30;
      a2 = v70;
    }
    v42 = *a2;
    *(_DWORD *)(v42 + 68) = *(_DWORD *)(*a2 + 68) | 1;
    v43 = *(void ***)(v42 + 8);
    v44 = (xpc_object_t *)MEMORY[0x1E0DE8338];
    if (v43 == (void **)MEMORY[0x1E0DE8338])
    {
      v43 = (void **)operator new(0x18uLL);
      *v43 = 0;
      v43[1] = 0;
      v43[2] = 0;
      *(_QWORD *)(v42 + 8) = v43;
      v45 = (void *)HIBYTE(v76[2]);
      if ((*((char *)v43 + 23) & 0x80000000) == 0)
      {
LABEL_55:
        if ((v45 & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v43, v76[0], (size_t)v76[1]);
        }
        else
        {
          v46 = *(_OWORD *)v76;
          v43[2] = v76[2];
          *(_OWORD *)v43 = v46;
        }
        goto LABEL_66;
      }
    }
    else
    {
      if (v43 == v76)
        goto LABEL_66;
      v45 = (void *)HIBYTE(v76[2]);
      if ((*((char *)v43 + 23) & 0x80000000) == 0)
        goto LABEL_55;
    }
    if ((char)v45 >= 0)
      v47 = v76;
    else
      v47 = (void **)v76[0];
    if ((char)v45 >= 0)
      v48 = v45;
    else
      v48 = v76[1];
    std::string::__assign_no_alias<false>(v43, v47, (size_t)v48);
LABEL_66:
    v49 = *a2;
    v50 = *(_DWORD *)(*a2 + 68);
    *(_BYTE *)(v49 + 41) = v14;
    *(_BYTE *)(v49 + 40) = v16;
    *(_DWORD *)(v49 + 16) = v18;
    *(_DWORD *)(v49 + 20) = v20;
    *(_DWORD *)(v49 + 68) = v50 | 0x21E;
    v51 = *(xpc_object_t **)(v49 + 24);
    if (v51 == v44)
    {
      v51 = (xpc_object_t *)operator new(0x18uLL);
      *v51 = 0;
      v51[1] = 0;
      v51[2] = 0;
      *(_QWORD *)(v49 + 24) = v51;
      v52 = (void *)HIBYTE(object[2]);
      if ((*((char *)v51 + 23) & 0x80000000) == 0)
      {
LABEL_69:
        if ((v52 & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v51, object[0], (size_t)object[1]);
        }
        else
        {
          v53 = *(_OWORD *)object;
          v51[2] = object[2];
          *(_OWORD *)v51 = v53;
        }
        goto LABEL_80;
      }
    }
    else
    {
      if (v51 == object)
        goto LABEL_80;
      v52 = (void *)HIBYTE(object[2]);
      if ((*((char *)v51 + 23) & 0x80000000) == 0)
        goto LABEL_69;
    }
    if ((char)v52 >= 0)
      v54 = object;
    else
      v54 = (xpc_object_t *)object[0];
    if ((char)v52 >= 0)
      v55 = v52;
    else
      v55 = object[1];
    std::string::__assign_no_alias<false>(v51, v54, (size_t)v55);
LABEL_80:
    v56 = *a2;
    *(_DWORD *)(v56 + 68) = *(_DWORD *)(*a2 + 68) | 0x20;
    v57 = *(void ***)(v56 + 32);
    if (v57 == v44)
    {
      v57 = (void **)operator new(0x18uLL);
      *v57 = 0;
      v57[1] = 0;
      v57[2] = 0;
      *(_QWORD *)(v56 + 32) = v57;
      v58 = (void *)HIBYTE(v74[2]);
      if ((*((char *)v57 + 23) & 0x80000000) == 0)
      {
LABEL_83:
        if ((v58 & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v57, v74[0], (size_t)v74[1]);
        }
        else
        {
          v59 = *(_OWORD *)v74;
          v57[2] = v74[2];
          *(_OWORD *)v57 = v59;
        }
        goto LABEL_94;
      }
    }
    else
    {
      if (v57 == v74)
        goto LABEL_94;
      v58 = (void *)HIBYTE(v74[2]);
      if ((*((char *)v57 + 23) & 0x80000000) == 0)
        goto LABEL_83;
    }
    if ((char)v58 >= 0)
      v60 = v74;
    else
      v60 = (void **)v74[0];
    if ((char)v58 >= 0)
      v61 = v58;
    else
      v61 = v74[1];
    std::string::__assign_no_alias<false>(v57, v60, (size_t)v61);
LABEL_94:
    v62 = *a2;
    *(_DWORD *)(v62 + 68) = *(_DWORD *)(*a2 + 68) | 0x40;
    v63 = *(void ***)(v62 + 48);
    if (v63 == v44)
    {
      v63 = (void **)operator new(0x18uLL);
      *v63 = 0;
      v63[1] = 0;
      v63[2] = 0;
      *(_QWORD *)(v62 + 48) = v63;
      v64 = (void *)HIBYTE(v73[2]);
      if ((*((char *)v63 + 23) & 0x80000000) == 0)
      {
LABEL_97:
        if ((v64 & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v63, v73[0], (size_t)v73[1]);
        }
        else
        {
          v65 = *(_OWORD *)v73;
          v63[2] = v73[2];
          *(_OWORD *)v63 = v65;
        }
        goto LABEL_108;
      }
    }
    else
    {
      if (v63 == v73)
        goto LABEL_108;
      v64 = (void *)HIBYTE(v73[2]);
      if ((*((char *)v63 + 23) & 0x80000000) == 0)
        goto LABEL_97;
    }
    if ((char)v64 >= 0)
      v66 = v73;
    else
      v66 = (void **)v73[0];
    if ((char)v64 >= 0)
      v67 = v64;
    else
      v67 = v73[1];
    std::string::__assign_no_alias<false>(v63, v66, (size_t)v67);
LABEL_108:
    v68 = *a2;
    *(_DWORD *)(v68 + 68) = *(_DWORD *)(*a2 + 68) | 0x80;
    *(_DWORD *)(v68 + 44) = v28;
    if (SHIBYTE(v73[2]) < 0)
    {
      operator delete(v73[0]);
      if ((SHIBYTE(v74[2]) & 0x80000000) == 0)
      {
LABEL_110:
        if ((SHIBYTE(object[2]) & 0x80000000) == 0)
          goto LABEL_111;
        goto LABEL_115;
      }
    }
    else if ((SHIBYTE(v74[2]) & 0x80000000) == 0)
    {
      goto LABEL_110;
    }
    operator delete(v74[0]);
    if ((SHIBYTE(object[2]) & 0x80000000) == 0)
    {
LABEL_111:
      if ((SHIBYTE(v76[2]) & 0x80000000) == 0)
        return v6 == v7;
LABEL_116:
      operator delete(v76[0]);
      return v6 == v7;
    }
LABEL_115:
    operator delete(object[0]);
    if ((SHIBYTE(v76[2]) & 0x80000000) == 0)
      return v6 == v7;
    goto LABEL_116;
  }
  v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_error_impl(&dword_1BF335000, v8, OS_LOG_TYPE_ERROR, "Failed to get the metric information for CCBasebandReset", (uint8_t *)&buf, 2u);
  }
  return v6 == v7;
}

void sub_1BF3EB508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,xpc_object_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,xpc_object_t object,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  if (a37 < 0)
    operator delete(a32);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::Loggable<StatsAWD,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<StatsAWD,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "stats.awd");
}

uint64_t ctu::Loggable<StatsAWD,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<StatsAWD,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E79029C0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<StatsAWD,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E79029C0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

xpc_object_t *xpc::array::array(xpc_object_t *a1, xpc_object_t object)
{
  *a1 = object;
  if (object)
    xpc_retain(object);
  else
    *a1 = xpc_null_create();
  return a1;
}

xpc_object_t *xpc::array::iterator::iterator(xpc_object_t *a1, xpc_object_t object, void *a3)
{
  *a1 = object;
  if (object)
    xpc_retain(object);
  else
    *a1 = xpc_null_create();
  a1[1] = a3;
  return a1;
}

void ctu::Loggable<StatsAWD,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF3EB8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF3EB904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<StatsAWD>::shared_ptr[abi:ne180100]<StatsAWD,std::shared_ptr<StatsAWD> ctu::SharedSynchronizable<StatsAWD>::make_shared_ptr<StatsAWD>(StatsAWD*)::{lambda(StatsAWD*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E7902A00;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF3EBA20(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<StatsAWD> ctu::SharedSynchronizable<StatsAWD>::make_shared_ptr<StatsAWD>(StatsAWD*)::{lambda(StatsAWD*)#1}::operator() const(StatsAWD*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF3EBA40(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<StatsAWD *,std::shared_ptr<StatsAWD> ctu::SharedSynchronizable<StatsAWD>::make_shared_ptr<StatsAWD>(StatsAWD*)::{lambda(StatsAWD *)#1},std::allocator<StatsAWD>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<StatsAWD *,std::shared_ptr<StatsAWD> ctu::SharedSynchronizable<StatsAWD>::make_shared_ptr<StatsAWD>(StatsAWD*)::{lambda(StatsAWD *)#1},std::allocator<StatsAWD>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<StatsAWD> ctu::SharedSynchronizable<StatsAWD>::make_shared_ptr<StatsAWD>(StatsAWD*)::{lambda(StatsAWD*)#1}::operator() const(StatsAWD*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<StatsAWD *,std::shared_ptr<StatsAWD> ctu::SharedSynchronizable<StatsAWD>::make_shared_ptr<StatsAWD>(StatsAWD*)::{lambda(StatsAWD *)#1},std::allocator<StatsAWD>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI8StatsAWDE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI8StatsAWDE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI8StatsAWDE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI8StatsAWDE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<StatsAWD> ctu::SharedSynchronizable<StatsAWD>::make_shared_ptr<StatsAWD>(StatsAWD*)::{lambda(StatsAWD*)#1}::operator() const(StatsAWD*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *ctu::Loggable<StatsAWD,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  _BYTE v10[16];

  *a1 = off_1E79029C0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  a1[1] = &unk_1E78FB900;
  a1[7] = *a3;
  v5 = a3[1];
  a1[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v9);
  return a1;
}

void sub_1BF3EBBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedLoggable<StatsAWD,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E79029C0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<StatsAWD,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E79029C0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<StatsAWD>::execute_wrapped<StatsAWD::submit(unsigned int,xpc::object)::$_0>(StatsAWD::submit(unsigned int,xpc::object)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<StatsAWD::submit(unsigned int,xpc::object)::$_0,dispatch_queue_s *::default_delete<StatsAWD::submit(unsigned int,xpc::object)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  void *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  xpc_object_t object;
  uint8_t buf[16];

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)a1;
  if (*(_QWORD *)(v3 + 104))
  {
    v4 = *((_DWORD *)v2 + 2);
    v5 = (void *)v2[2];
    object = v5;
    if (v5)
      xpc_retain(v5);
    else
      object = xpc_null_create();
    StatsAWD::submit_sync(v3, v4, &object);
    xpc_release(object);
  }
  else
  {
    v6 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF335000, v6, OS_LOG_TYPE_ERROR, "Failed: AWD connection setup failed", buf, 2u);
    }
  }
  xpc_release((xpc_object_t)v2[2]);
  operator delete(v2);
  v7 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  operator delete(a1);
}

void sub_1BF3EBD7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  xpc_object_t *v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  xpc_release(object);
  xpc_release(v11[2]);
  operator delete(v11);
  v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void AnalyticsHelper::create(uint64_t *a1@<X8>)
{
  AnalyticsHelper *v3;

  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  v3 = (AnalyticsHelper *)operator new(0x80uLL);
  AnalyticsHelper::AnalyticsHelper(v3);
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<AnalyticsHelper>::shared_ptr[abi:ne180100]<AnalyticsHelper,std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper*)#1},void>(a1, (uint64_t)v3);
  ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a1);
}

void sub_1BF3EBE44(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1BF3EBE58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void AnalyticsHelper::AnalyticsHelper(AnalyticsHelper *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  _BYTE v11[16];
  dispatch_object_t object[5];

  *(_QWORD *)this = off_1E7902A90;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v11, "com.apple.telephony.abm", "stats.analytics");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  object[0] = (dispatch_object_t)MEMORY[0x1E0C809B0];
  object[1] = (dispatch_object_t)0x40000000;
  object[2] = (dispatch_object_t)___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  object[3] = (dispatch_object_t)&__block_descriptor_tmp_13_2;
  object[4] = (dispatch_object_t)&GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v3 = *(_QWORD *)algn_1ED710088;
    v9 = GetABMLogServer(void)::sLogServer;
    v10 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, object);
    v3 = *(_QWORD *)algn_1ED710088;
    v9 = GetABMLogServer(void)::sLogServer;
    v10 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_6;
  }
  v4 = (unint64_t *)(v3 + 8);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
LABEL_6:
  object[0] = 0;
  ctu::SharedSynchronizable<NetworkStatsInterface>::SharedSynchronizable((_QWORD *)this + 9, "stats.analytics", QOS_CLASS_DEFAULT, object);
  if (object[0])
    dispatch_release(object[0]);
  ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(this, (uint64_t)v11, &v9);
  *(_QWORD *)this = off_1E7902C58;
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v11);
  *(_QWORD *)this = off_1E7902A90;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 13) = (char *)this + 112;
}

void sub_1BF3EC034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v2);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  _Unwind_Resume(a1);
}

void sub_1BF3EC058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a12);
  _Unwind_Resume(a1);
}

const char *AnalyticsHelper::getName(AnalyticsHelper *this)
{
  return "stats.analytics";
}

void AnalyticsHelper::~AnalyticsHelper(char **this)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *this = (char *)off_1E7902A90;
  std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(this[14]);
  *this = (char *)off_1E7902BC8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = this[12];
  if (v2)
    dispatch_release(v2);
  v3 = this[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)this[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *this = (char *)off_1E7902A90;
  std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(this[14]);
  *this = (char *)off_1E7902BC8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = this[12];
  if (v2)
    dispatch_release(v2);
  v3 = this[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)this[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *this = (char *)off_1E7902A90;
  std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(this[14]);
  *this = (char *)off_1E7902BC8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = this[12];
  if (v2)
    dispatch_release(v2);
  v3 = this[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)this[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(this);
}

void AnalyticsHelper::describeAnalyticsCache(AnalyticsHelper *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  const char *v7;
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  const char *v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  char *v18;
  size_t v19;
  _BYTE *v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  size_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  char *v30;
  void *__dst[3];

  *(_QWORD *)(a2 + 272) = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)(a2 + 240) = v3;
  *(_OWORD *)(a2 + 256) = v3;
  *(_OWORD *)(a2 + 208) = v3;
  *(_OWORD *)(a2 + 224) = v3;
  *(_OWORD *)(a2 + 176) = v3;
  *(_OWORD *)(a2 + 192) = v3;
  *(_OWORD *)(a2 + 144) = v3;
  *(_OWORD *)(a2 + 160) = v3;
  *(_OWORD *)(a2 + 112) = v3;
  *(_OWORD *)(a2 + 128) = v3;
  *(_OWORD *)(a2 + 80) = v3;
  *(_OWORD *)(a2 + 96) = v3;
  *(_OWORD *)(a2 + 48) = v3;
  *(_OWORD *)(a2 + 64) = v3;
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v3;
  v4 = (_QWORD *)(a2 + 16);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"** analyticsData **\n", 20);
  v5 = (_QWORD *)*((_QWORD *)this + 13);
  v30 = (char *)this + 112;
  if (v5 != (_QWORD *)((char *)this + 112))
  {
    while (1)
    {
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"[", 1);
      v7 = (const char *)(v5 + 4);
      if (*((char *)v5 + 55) < 0)
        v7 = *(const char **)v7;
      v8 = strlen(v7);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"] = \n", 5);
      v10 = (_QWORD *)v5[7];
      if (v10 != v5 + 8)
        break;
LABEL_7:
      v11 = (char *)v5[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (char *)v5[2];
          v29 = *(_QWORD *)v12 == (_QWORD)v5;
          v5 = v12;
        }
        while (!v29);
      }
      v5 = v12;
      if (v12 == v30)
        return;
    }
    while (1)
    {
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<<<", 3);
      v14 = (const char *)(v10 + 4);
      if (*((char *)v10 + 55) < 0)
        v14 = *(const char **)v14;
      v15 = strlen(v14);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)">>> = ", 6);
      v18 = (char *)MEMORY[0x1C3B8A7D0](v10[7]);
      memset(__dst, 170, sizeof(__dst));
      v19 = strlen(v18);
      if (v19 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v20 = (_BYTE *)v19;
      if (v19 >= 0x17)
        break;
      HIBYTE(__dst[2]) = v19;
      v21 = __dst;
      if (v19)
        goto LABEL_20;
LABEL_21:
      v20[(_QWORD)v21] = 0;
      free(v18);
      if (SHIBYTE(__dst[2]) >= 0)
        v24 = (const char *)__dst;
      else
        v24 = (const char *)__dst[0];
      v25 = strlen(v24);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v24, v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\n", 1);
      if (SHIBYTE(__dst[2]) < 0)
      {
        operator delete(__dst[0]);
        v27 = (_QWORD *)v10[1];
        if (v27)
        {
          do
          {
LABEL_28:
            v28 = v27;
            v27 = (_QWORD *)*v27;
          }
          while (v27);
          goto LABEL_10;
        }
      }
      else
      {
        v27 = (_QWORD *)v10[1];
        if (v27)
          goto LABEL_28;
      }
      do
      {
        v28 = (_QWORD *)v10[2];
        v29 = *v28 == (_QWORD)v10;
        v10 = v28;
      }
      while (!v29);
LABEL_10:
      v10 = v28;
      if (v28 == v5 + 8)
        goto LABEL_7;
    }
    v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v22 = v19 | 7;
    v23 = v22 + 1;
    v21 = (void **)operator new(v22 + 1);
    __dst[1] = v20;
    __dst[2] = (void *)(v23 | 0x8000000000000000);
    __dst[0] = v21;
LABEL_20:
    memcpy(v21, v18, (size_t)v20);
    goto LABEL_21;
  }
}

void sub_1BF3EC4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(a10);
  _Unwind_Resume(a1);
}

void sub_1BF3EC4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(a10);
  _Unwind_Resume(a1);
}

void sub_1BF3EC4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(a10);
  _Unwind_Resume(a1);
}

void sub_1BF3EC4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(a10);
  _Unwind_Resume(a1);
}

void sub_1BF3EC4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(a10);
    _Unwind_Resume(a1);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(a10);
  _Unwind_Resume(a1);
}

void AnalyticsHelper::updateData(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t value;
  const char *v5;
  xpc_object_t v6;
  const char *v7;
  std::string::size_type size;
  void *v9;
  xpc_object_t v10;
  uint64_t v11;
  NSObject *v12;
  char *v13;
  size_t v14;
  void *v15;
  void *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t **v23;
  int v24;
  char *v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  unint64_t v32;
  size_t v33;
  int v34;
  uint64_t *v35;
  uint64_t *v36;
  BOOL v37;
  xpc_object_t v38;
  int v39;
  xpc_object_t v40;
  xpc_object_t v41;
  xpc_object_t v42;
  char *v43;
  char *v44;
  int v45;
  const void *v46;
  unint64_t v47;
  size_t v48;
  int v49;
  int v50;
  const void *v51;
  unint64_t v52;
  size_t v53;
  int v54;
  xpc_object_t v55;
  const char *v56;
  const void *v57;
  const void *v58;
  const void *v59;
  size_t v60;
  const void *v61;
  size_t v62;
  const void *v63;
  const void *v64;
  const void *v65;
  const void *v66;
  const void *v67;
  size_t v68;
  const void *v69;
  const void *v70;
  const void *v71;
  const void *v72;
  const void *v73;
  size_t v74;
  const void *v75;
  xpc_object_t v76;
  xpc_object_t v77;
  char *v78;
  uint64_t *v79;
  char *v80;
  int v81;
  const void *v82;
  unint64_t v83;
  size_t v84;
  int v85;
  int v86;
  const void *v87;
  unint64_t v88;
  size_t v89;
  int v90;
  xpc_object_t v91;
  void *v92;
  const void *v93;
  uint64_t v94;
  uint64_t v95;
  xpc_object_t *v96;
  xpc_object_t v97;
  uint64_t *v98;
  uint64_t *v99;
  _OWORD *v100;
  xpc_object_t v101;
  std::string::size_type v102;
  NSObject *v103;
  std::string *v104;
  const void **v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  std::string *v113;
  std::string::size_type v114;
  uint64_t v115;
  int v116;
  const void *v117;
  std::string::size_type v118;
  size_t v119;
  int v120;
  uint64_t *v121;
  int v122;
  const void *v123;
  size_t v124;
  size_t v125;
  int v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t *v135;
  int v136;
  const void *v137;
  size_t v138;
  char v139;
  std::string *v140;
  std::string::size_type v141;
  size_t v142;
  int v143;
  size_t v144;
  size_t v145;
  const void *v146;
  size_t v147;
  size_t v148;
  int v149;
  int v150;
  uint64_t *v151;
  uint64_t *v152;
  std::string *v153;
  __int128 v154;
  uint64_t *v155;
  uint64_t *v156;
  NSObject *v157;
  int64_t v158;
  std::string::size_type v159;
  std::string *v160;
  std::string *v161;
  std::string *v162;
  std::string::size_type v163;
  std::string::size_type v164;
  std::string *v165;
  std::string *v166;
  std::string::size_type v167;
  std::string *v168;
  std::string::size_type v169;
  std::string::size_type v170;
  std::string::size_type v171;
  uint64_t v172;
  unint64_t v173;
  std::string *v174;
  void *v175;
  void *v176;
  uint64_t **v177;
  uint64_t *v178;
  xpc_object_t xdict;
  uint64_t v180;
  std::string v181;
  std::string v182;
  const void *__s1[3];
  xpc_object_t v184;
  xpc_object_t v185;
  void *__p[3];
  std::string v187;
  xpc_object_t object[3];
  uint64_t v189;
  std::string *v190;
  std::string *v191;
  std::string *v192;
  std::string *v193;
  std::string *v194;
  char *v195;
  std::string v196;
  std::string *v197;
  int v198;
  uint64_t v199;
  _BYTE v200[12];
  __int128 buf;
  uint64_t v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  memset(&v187, 170, sizeof(v187));
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB278]);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)object, (const object *)"", v5);
  xpc_release(object[0]);
  memset(__p, 170, sizeof(__p));
  v6 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB3F0]);
  object[0] = v6;
  if (v6)
    xpc_retain(v6);
  else
    object[0] = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)object, (const object *)"None", v7);
  xpc_release(object[0]);
  size = HIBYTE(v187.__r_.__value_.__r.__words[2]);
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v187.__r_.__value_.__l.__size_;
  if (!size || (v9 = (void *)*MEMORY[0x1E0CFB9D8], !xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB9D8])))
  {
    v12 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      goto LABEL_342;
    v13 = (char *)MEMORY[0x1C3B8A7D0](*a2);
    memset(object, 170, sizeof(object));
    v14 = strlen(v13);
    if (v14 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v15 = (void *)v14;
    if (v14 >= 0x17)
    {
      v94 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v94 = v14 | 7;
      v95 = v94 + 1;
      v16 = operator new(v94 + 1);
      object[1] = v15;
      object[2] = (xpc_object_t)(v95 | 0x8000000000000000);
      object[0] = v16;
    }
    else
    {
      HIBYTE(object[2]) = v14;
      v16 = object;
      if (!v14)
        goto LABEL_191;
    }
    memcpy(v16, v13, (size_t)v15);
LABEL_191:
    *((_BYTE *)v15 + (_QWORD)v16) = 0;
    free(v13);
    v96 = object;
    if (SHIBYTE(object[2]) < 0)
      v96 = (xpc_object_t *)object[0];
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v96;
    _os_log_error_impl(&dword_1BF335000, v12, OS_LOG_TYPE_ERROR, "Input error: Failed to update AnalyticsData with %s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
    goto LABEL_342;
  }
  v10 = xpc_dictionary_create(0, 0, 0);
  v11 = MEMORY[0x1E0C812F8];
  if (v10 || (v10 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v10) == v11)
    {
      xpc_retain(v10);
      xdict = v10;
    }
    else
    {
      xdict = xpc_null_create();
    }
  }
  else
  {
    xdict = xpc_null_create();
    v10 = 0;
  }
  v180 = a1;
  xpc_release(v10);
  *((_QWORD *)&buf + 1) = 0;
  v202 = 0;
  *(_QWORD *)&buf = (char *)&buf + 8;
  v177 = (uint64_t **)(a1 + 104);
  v17 = std::__tree<std::string>::find<std::string>(a1 + 104, (const void **)&v187.__r_.__value_.__l.__data_);
  v178 = (uint64_t *)(a1 + 112);
  if ((uint64_t *)(a1 + 112) == v17)
  {
LABEL_59:
    v38 = xpc_dictionary_get_value(xdict, "ReportProcessStatus");
    goto LABEL_60;
  }
  v176 = v9;
  if (&buf == (__int128 *)(v17 + 7) || (v18 = (uint64_t *)v17[7], v19 = v17 + 8, v18 == v17 + 8))
  {
    v11 = MEMORY[0x1E0C812F8];
    goto LABEL_59;
  }
  while (2)
  {
    memset(object, 170, sizeof(object));
    std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__construct_node<std::pair<std::string const,xpc::dict> const&>(object, (uint64_t)&buf, (uint64_t)(v18 + 4));
    v20 = (uint64_t *)object[0];
    v21 = (uint64_t *)*((_QWORD *)&buf + 1);
    v22 = (uint64_t **)&buf + 1;
    v23 = (uint64_t **)&buf + 1;
    if (!*((_QWORD *)&buf + 1))
      goto LABEL_50;
    v24 = *((char *)object[0] + 55);
    if (v24 >= 0)
      v25 = (char *)object[0] + 32;
    else
      v25 = (char *)*((_QWORD *)object[0] + 4);
    if (v24 >= 0)
      v26 = *((unsigned __int8 *)object[0] + 55);
    else
      v26 = *((_QWORD *)object[0] + 5);
    do
    {
      while (1)
      {
        v22 = (uint64_t **)v21;
        v29 = v21[4];
        v27 = v21 + 4;
        v28 = (_QWORD *)v29;
        v30 = *((char *)v27 + 23);
        v31 = v30 >= 0 ? v27 : v28;
        v32 = v30 >= 0 ? *((unsigned __int8 *)v27 + 23) : v27[1];
        v33 = v32 >= v26 ? v26 : v32;
        v34 = memcmp(v25, v31, v33);
        if (v34)
          break;
        if (v26 >= v32)
          goto LABEL_48;
LABEL_34:
        v21 = *v22;
        v23 = v22;
        if (!*v22)
          goto LABEL_50;
      }
      if (v34 < 0)
        goto LABEL_34;
LABEL_48:
      v21 = v22[1];
    }
    while (v21);
    v23 = v22 + 1;
LABEL_50:
    *v20 = 0;
    v20[1] = 0;
    v20[2] = (uint64_t)v22;
    *v23 = v20;
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf = *(_QWORD *)buf;
      v20 = *v23;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&buf + 1), v20);
    ++v202;
    v35 = (uint64_t *)v18[1];
    if (v35)
    {
      do
      {
        v36 = v35;
        v35 = (uint64_t *)*v35;
      }
      while (v35);
    }
    else
    {
      do
      {
        v36 = (uint64_t *)v18[2];
        v37 = *v36 == (_QWORD)v18;
        v18 = v36;
      }
      while (!v37);
    }
    v18 = v36;
    if (v36 != v19)
      continue;
    break;
  }
  v43 = (char *)*((_QWORD *)&buf + 1);
  HIBYTE(object[2]) = 9;
  strcpy((char *)object, "EventInfo");
  v9 = v176;
  v11 = MEMORY[0x1E0C812F8];
  if (!*((_QWORD *)&buf + 1))
    goto LABEL_59;
  v44 = (char *)&buf + 8;
  while (2)
  {
    while (2)
    {
      v45 = v43[55];
      if (v45 >= 0)
        v46 = v43 + 32;
      else
        v46 = (const void *)*((_QWORD *)v43 + 4);
      if (v45 >= 0)
        v47 = v43[55];
      else
        v47 = *((_QWORD *)v43 + 5);
      if (v47 >= 9)
        v48 = 9;
      else
        v48 = v47;
      v49 = memcmp(v46, object, v48);
      if (v49)
      {
        if ((v49 & 0x80000000) == 0)
          break;
        goto LABEL_71;
      }
      if (v47 < 9)
      {
LABEL_71:
        v43 = (char *)*((_QWORD *)v43 + 1);
        if (!v43)
          goto LABEL_86;
        continue;
      }
      break;
    }
    v44 = v43;
    v43 = *(char **)v43;
    if (v43)
      continue;
    break;
  }
LABEL_86:
  if (v44 == (char *)&buf + 8)
    goto LABEL_59;
  v50 = v44[55];
  if (v50 >= 0)
    v51 = v44 + 32;
  else
    v51 = (const void *)*((_QWORD *)v44 + 4);
  if (v50 >= 0)
    v52 = v44[55];
  else
    v52 = *((_QWORD *)v44 + 5);
  if (v52 >= 9)
    v53 = 9;
  else
    v53 = v52;
  v54 = memcmp(object, v51, v53);
  if (v54)
  {
    if (v54 < 0)
      goto LABEL_59;
  }
  else if (v52 > 9)
  {
    goto LABEL_59;
  }
  v97 = (xpc_object_t)*((_QWORD *)v44 + 7);
  if (v97)
    xpc_retain(*((xpc_object_t *)v44 + 7));
  else
    v97 = xpc_null_create();
  xpc_release(xdict);
  xdict = v97;
  v38 = xpc_dictionary_get_value(v97, "ReportProcessStatus");
LABEL_60:
  object[0] = v38;
  if (v38)
    xpc_retain(v38);
  else
    object[0] = xpc_null_create();
  LOBYTE(v39) = xpc::dyn_cast_or_default((xpc *)object, (const object *)0xFF);
  xpc_release(object[0]);
  v185 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v40 = xpc_dictionary_create(0, 0, 0);
  v41 = v40;
  if (v40)
  {
    v185 = v40;
    goto LABEL_66;
  }
  v41 = xpc_null_create();
  v185 = v41;
  if (v41)
  {
LABEL_66:
    if (MEMORY[0x1C3B8A86C](v41) != v11)
    {
      v42 = xpc_null_create();
      goto LABEL_100;
    }
    xpc_retain(v41);
  }
  else
  {
    v42 = xpc_null_create();
    v41 = 0;
LABEL_100:
    v185 = v42;
  }
  xpc_release(v41);
  object[0] = a2;
  object[1] = v9;
  __s1[0] = &v185;
  __s1[1] = v9;
  xpc::dict::object_proxy::operator=((uint64_t)__s1, (uint64_t)object, &v184);
  xpc_release(v184);
  v184 = 0;
  memset(__s1, 170, sizeof(__s1));
  v55 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB3E8]);
  object[0] = v55;
  if (v55)
    xpc_retain(v55);
  else
    object[0] = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)object, (const object *)"", v56);
  xpc_release(object[0]);
  v57 = (const void *)*MEMORY[0x1E0CFB368];
  v58 = (const void *)strlen((const char *)*MEMORY[0x1E0CFB368]);
  v59 = v58;
  v60 = HIBYTE(__s1[2]);
  if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
  {
    if (v58 != (const void *)-1)
    {
      v61 = (const void *)HIBYTE(__s1[2]);
      if (HIBYTE(__s1[2]) >= (unint64_t)v58)
        v62 = (size_t)v58;
      else
        v62 = HIBYTE(__s1[2]);
      if (memcmp(__s1, v57, v62))
        goto LABEL_117;
LABEL_116:
      if (v61 != v59)
        goto LABEL_117;
LABEL_131:
      std::map<std::string,xpc::dict>::insert_or_assign[abi:ne180100]<xpc::dict>((_QWORD **)&buf, (const std::string::value_type **)__p, &v185);
      if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v182, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
      else
        v182 = v187;
      AnalyticsHelper::submitEvent(v180, (uint64_t)&v182, &buf);
      if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v182.__r_.__value_.__l.__data_);
      v39 = 1;
      goto LABEL_208;
    }
LABEL_405:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v58 == (const void *)-1)
    goto LABEL_405;
  v61 = __s1[1];
  if (__s1[1] >= v58)
    v63 = v58;
  else
    v63 = __s1[1];
  if (!memcmp(__s1[0], v57, (size_t)v63))
    goto LABEL_116;
LABEL_117:
  v64 = (const void *)*MEMORY[0x1E0CFB448];
  v65 = (const void *)strlen((const char *)*MEMORY[0x1E0CFB448]);
  v66 = v65;
  if ((v60 & 0x80) != 0)
  {
    if (v65 != (const void *)-1)
    {
      v67 = __s1[1];
      v39 = v39;
      if (__s1[1] >= v65)
        v69 = v65;
      else
        v69 = __s1[1];
      if (!memcmp(__s1[0], v64, (size_t)v69))
        goto LABEL_129;
      goto LABEL_137;
    }
LABEL_406:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v65 == (const void *)-1)
    goto LABEL_406;
  v67 = (const void *)v60;
  v39 = v39;
  if (v60 >= (unint64_t)v65)
    v68 = (size_t)v65;
  else
    v68 = v60;
  if (memcmp(__s1, v64, v68))
    goto LABEL_137;
LABEL_129:
  if (v67 == v66 && !v39)
    goto LABEL_131;
LABEL_137:
  v70 = (const void *)*MEMORY[0x1E0CFB358];
  v71 = (const void *)strlen((const char *)*MEMORY[0x1E0CFB358]);
  v72 = v71;
  if ((v60 & 0x80) == 0)
  {
    if (v71 != (const void *)-1)
    {
      v73 = (const void *)v60;
      if (v60 >= (unint64_t)v71)
        v74 = (size_t)v71;
      else
        v74 = v60;
      if (memcmp(__s1, v70, v74))
        goto LABEL_182;
      goto LABEL_149;
    }
LABEL_407:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v71 == (const void *)-1)
    goto LABEL_407;
  v73 = __s1[1];
  if (__s1[1] >= v71)
    v75 = v71;
  else
    v75 = __s1[1];
  if (memcmp(__s1[0], v70, (size_t)v75))
  {
LABEL_182:
    if ((v60 & 0x80u) == 0)
      v93 = (const void *)v60;
    else
      v93 = __s1[1];
    if (!v93)
      std::map<std::string,xpc::dict>::insert_or_assign[abi:ne180100]<xpc::dict>((_QWORD **)&buf, (const std::string::value_type **)__p, &v185);
    goto LABEL_208;
  }
LABEL_149:
  if (v73 != v72)
    goto LABEL_182;
  std::map<std::string,xpc::dict>::insert_or_assign[abi:ne180100]<xpc::dict>((_QWORD **)&buf, (const std::string::value_type **)__p, &v185);
  v76 = xpc_int64_create(0);
  if (!v76)
    v76 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "ReportProcessStatus", v76);
  v77 = xpc_null_create();
  xpc_release(v76);
  xpc_release(v77);
  HIBYTE(object[2]) = 9;
  strcpy((char *)object, "EventInfo");
  v78 = (char *)*((_QWORD *)&buf + 1);
  v79 = (uint64_t *)&buf + 1;
  if (!*((_QWORD *)&buf + 1))
    goto LABEL_202;
  v80 = (char *)&buf + 8;
  while (2)
  {
    while (2)
    {
      v81 = v78[55];
      if (v81 >= 0)
        v82 = v78 + 32;
      else
        v82 = (const void *)*((_QWORD *)v78 + 4);
      if (v81 >= 0)
        v83 = v78[55];
      else
        v83 = *((_QWORD *)v78 + 5);
      if (v83 >= 9)
        v84 = 9;
      else
        v84 = v83;
      v85 = memcmp(v82, object, v84);
      if (v85)
      {
        if ((v85 & 0x80000000) == 0)
          break;
        goto LABEL_154;
      }
      if (v83 < 9)
      {
LABEL_154:
        v78 = (char *)*((_QWORD *)v78 + 1);
        if (!v78)
          goto LABEL_169;
        continue;
      }
      break;
    }
    v80 = v78;
    v78 = *(char **)v78;
    if (v78)
      continue;
    break;
  }
LABEL_169:
  v79 = (uint64_t *)&buf + 1;
  if (v80 == (char *)&buf + 8)
    goto LABEL_202;
  v86 = v80[55];
  if (v86 >= 0)
    v87 = v80 + 32;
  else
    v87 = (const void *)*((_QWORD *)v80 + 4);
  if (v86 >= 0)
    v88 = v80[55];
  else
    v88 = *((_QWORD *)v80 + 5);
  if (v88 >= 9)
    v89 = 9;
  else
    v89 = v88;
  v90 = memcmp(object, v87, v89);
  if (v90)
  {
    if ((v90 & 0x80000000) == 0)
      goto LABEL_181;
LABEL_201:
    v79 = (uint64_t *)v80;
LABEL_202:
    v181.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)v200 = 0xAAAAAAAAAAAAAAAALL;
    v98 = std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__find_equal<std::string>((uint64_t **)&buf, v79, (uint64_t **)&v181, (uint64_t **)v200, (const void **)object);
    if (!*v98)
    {
      v99 = v98;
      v100 = operator new(0x40uLL);
      v100[2] = *(_OWORD *)object;
      v101 = object[2];
      memset(object, 0, sizeof(object));
      *((_QWORD *)v100 + 6) = v101;
      *((_QWORD *)v100 + 7) = xdict;
      xdict = xpc_null_create();
      v102 = v181.__r_.__value_.__r.__words[0];
      *(_QWORD *)v100 = 0;
      *((_QWORD *)v100 + 1) = 0;
      *((_QWORD *)v100 + 2) = v102;
      *v99 = (uint64_t)v100;
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf = *(_QWORD *)buf;
        v100 = (_OWORD *)*v99;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&buf + 1), (uint64_t *)v100);
      ++v202;
    }
    v91 = xdict;
  }
  else
  {
    if (v88 > 9)
      goto LABEL_201;
LABEL_181:
    v91 = xpc_null_create();
    v92 = (void *)*((_QWORD *)v80 + 7);
    *((_QWORD *)v80 + 7) = xdict;
    xpc_release(v92);
  }
  v39 = 0;
  xdict = v91;
LABEL_208:
  v103 = *(NSObject **)(v180 + 40);
  if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
  {
    v104 = &v187;
    if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v104 = (std::string *)v187.__r_.__value_.__r.__words[0];
    v105 = __s1;
    if (SHIBYTE(__s1[2]) < 0)
      v105 = (const void **)__s1[0];
    LODWORD(object[0]) = 136315650;
    *(xpc_object_t *)((char *)object + 4) = v104;
    WORD2(object[1]) = 2080;
    *(xpc_object_t *)((char *)&object[1] + 6) = v105;
    HIWORD(object[2]) = 1024;
    LODWORD(v189) = v39;
    _os_log_impl(&dword_1BF335000, v103, OS_LOG_TYPE_DEFAULT, "#I Updating AnalyticsData for event[%s]: command=%s, status=%d", (uint8_t *)object, 0x1Cu);
  }
  if (v39 == 1)
  {
    v106 = std::__tree<std::string>::find<std::string>((uint64_t)v177, (const void **)&v187.__r_.__value_.__l.__data_);
    if (v178 != v106)
    {
      v107 = v106;
      v108 = (uint64_t *)v106[1];
      if (v108)
      {
        do
        {
          v109 = v108;
          v108 = (uint64_t *)*v108;
        }
        while (v108);
      }
      else
      {
        v130 = v106;
        do
        {
          v109 = (uint64_t *)v130[2];
          v37 = *v109 == (_QWORD)v130;
          v130 = v109;
        }
        while (!v37);
      }
      if (*v177 == v106)
        *v177 = v109;
      v131 = *(uint64_t **)(v180 + 112);
      --*(_QWORD *)(v180 + 120);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v131, v107);
      std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy((char *)v107[8]);
      if (*((char *)v107 + 55) < 0)
        operator delete((void *)v107[4]);
      operator delete(v107);
    }
    goto LABEL_338;
  }
  v110 = v202;
  if (!v202)
    goto LABEL_338;
  v111 = v178;
  v112 = *v178;
  if (!*v178)
  {
    v121 = v178;
    if (*v177 == v178)
    {
      v132 = 0;
      v133 = v178;
      v121 = v178;
      goto LABEL_321;
    }
    goto LABEL_276;
  }
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v113 = &v187;
  else
    v113 = (std::string *)v187.__r_.__value_.__r.__words[0];
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v114 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
  else
    v114 = v187.__r_.__value_.__l.__size_;
  v115 = *v178;
  while (2)
  {
    while (1)
    {
      v116 = *(char *)(v115 + 55);
      v117 = v116 >= 0 ? (const void *)(v115 + 32) : *(const void **)(v115 + 32);
      v118 = v116 >= 0 ? *(unsigned __int8 *)(v115 + 55) : *(_QWORD *)(v115 + 40);
      v119 = v114 >= v118 ? v118 : v114;
      v120 = memcmp(v117, v113, v119);
      if (!v120)
        break;
      if (v120 < 0)
        goto LABEL_230;
LABEL_228:
      v111 = (uint64_t *)v115;
      v115 = *(_QWORD *)v115;
      if (!v115)
        goto LABEL_245;
    }
    if (v118 >= v114)
      goto LABEL_228;
LABEL_230:
    v115 = *(_QWORD *)(v115 + 8);
    if (v115)
      continue;
    break;
  }
LABEL_245:
  v121 = v178;
  if (v111 != v178)
  {
    v122 = *((char *)v111 + 55);
    if (v122 >= 0)
      v123 = v111 + 4;
    else
      v123 = (const void *)v111[4];
    if (v122 >= 0)
      v124 = *((unsigned __int8 *)v111 + 55);
    else
      v124 = v111[5];
    if (v124 >= v114)
      v125 = v114;
    else
      v125 = v124;
    v126 = memcmp(v113, v123, v125);
    if (v126)
    {
      if ((v126 & 0x80000000) == 0)
      {
LABEL_257:
        v127 = v111 + 8;
        std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy((char *)v111[8]);
        v128 = *((_QWORD *)&buf + 1);
        v111[7] = buf;
        v111[8] = v128;
        v129 = v202;
        v111[9] = v202;
        if (v129)
        {
          *(_QWORD *)(v128 + 16) = v127;
          *(_QWORD *)&buf = (char *)&buf + 8;
          *((_QWORD *)&buf + 1) = 0;
          v202 = 0;
        }
        else
        {
          v111[7] = (uint64_t)v127;
        }
        goto LABEL_338;
      }
    }
    else if (v114 >= v124)
    {
      goto LABEL_257;
    }
    v121 = v111;
  }
  v132 = *v121;
  if (*v177 == v121)
  {
    v133 = v121;
    goto LABEL_321;
  }
  if (!v132)
  {
LABEL_276:
    v133 = v121;
    do
    {
      v135 = v133;
      v133 = (uint64_t *)v133[2];
    }
    while ((uint64_t *)*v133 == v135);
    v132 = 0;
    goto LABEL_279;
  }
  v134 = (uint64_t *)*v121;
  do
  {
    v133 = v134;
    v134 = (uint64_t *)v134[1];
  }
  while (v134);
LABEL_279:
  v136 = *((char *)v133 + 55);
  if (v136 >= 0)
    v137 = v133 + 4;
  else
    v137 = (const void *)v133[4];
  if (v136 >= 0)
    v138 = *((unsigned __int8 *)v133 + 55);
  else
    v138 = v133[5];
  v139 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v140 = &v187;
  else
    v140 = (std::string *)v187.__r_.__value_.__r.__words[0];
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v141 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
  else
    v141 = v187.__r_.__value_.__l.__size_;
  if (v141 >= v138)
    v142 = v138;
  else
    v142 = v141;
  v143 = memcmp(v137, v140, v142);
  if (v143)
  {
    if (v143 < 0)
      goto LABEL_321;
LABEL_298:
    if (!v112)
    {
      v133 = v178;
      goto LABEL_329;
    }
    while (1)
    {
      v133 = (uint64_t *)v112;
      v144 = *(unsigned __int8 *)(v112 + 55);
      v145 = *(_QWORD *)(v112 + 40);
      if ((v144 & 0x80u) == 0)
        v146 = (const void *)(v112 + 32);
      else
        v146 = *(const void **)(v112 + 32);
      if ((v144 & 0x80u) == 0)
        v147 = v144;
      else
        v147 = v145;
      if (v147 >= v141)
        v148 = v141;
      else
        v148 = v147;
      v149 = memcmp(v140, v146, v148);
      if (v149)
      {
        if ((v149 & 0x80000000) == 0)
          goto LABEL_314;
      }
      else if (v141 >= v147)
      {
LABEL_314:
        v150 = memcmp(v146, v140, v148);
        if (v150)
        {
          if ((v150 & 0x80000000) == 0)
            goto LABEL_338;
        }
        else if (v147 >= v141)
        {
          goto LABEL_338;
        }
        v112 = v133[1];
        if (!v112)
        {
          v178 = v133 + 1;
          goto LABEL_329;
        }
        continue;
      }
      v112 = *v133;
      if (!*v133)
      {
        v178 = v133;
        goto LABEL_329;
      }
    }
  }
  if (v138 >= v141)
    goto LABEL_298;
LABEL_321:
  v151 = v133 + 1;
  if (!v132)
    v151 = v121;
  v178 = v151;
  if (!*v151)
  {
    if (!v132)
      v133 = v121;
    v139 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
LABEL_329:
    v152 = (uint64_t *)operator new(0x50uLL);
    v153 = (std::string *)(v152 + 4);
    if (v139 < 0)
    {
      std::string::__init_copy_ctor_external(v153, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
      v110 = v202;
    }
    else
    {
      *(_OWORD *)&v153->__r_.__value_.__l.__data_ = *(_OWORD *)&v187.__r_.__value_.__l.__data_;
      v152[6] = v187.__r_.__value_.__r.__words[2];
    }
    v154 = buf;
    v152[8] = *((_QWORD *)&buf + 1);
    v155 = v152 + 8;
    v152[7] = v154;
    v152[9] = v110;
    if (v110)
    {
      *(_QWORD *)(*((_QWORD *)&v154 + 1) + 16) = v155;
      *(_QWORD *)&buf = (char *)&buf + 8;
      *((_QWORD *)&buf + 1) = 0;
      v202 = 0;
    }
    else
    {
      v152[7] = (uint64_t)v155;
    }
    *v152 = 0;
    v152[1] = 0;
    v152[2] = (uint64_t)v133;
    *v178 = (uint64_t)v152;
    v156 = (uint64_t *)**v177;
    if (v156)
    {
      *v177 = v156;
      v152 = (uint64_t *)*v178;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v180 + 112), v152);
    ++*(_QWORD *)(v180 + 120);
  }
LABEL_338:
  v157 = *(NSObject **)(v180 + 40);
  if (!os_log_type_enabled(v157, OS_LOG_TYPE_DEBUG))
  {
    if (SHIBYTE(__s1[2]) < 0)
      goto LABEL_340;
    goto LABEL_341;
  }
  AnalyticsHelper::describeAnalyticsCache((AnalyticsHelper *)v180, (uint64_t)object);
  if ((v198 & 0x10) != 0)
  {
    v160 = v197;
    if (v197 < v194)
    {
      v197 = v194;
      v160 = v194;
    }
    v161 = v193;
  }
  else
  {
    if ((v198 & 8) == 0)
    {
      v158 = 0;
      v159 = 0;
      goto LABEL_359;
    }
    v161 = v190;
    v160 = v192;
  }
  v158 = (char *)v160 - (char *)v161;
  if (v158)
  {
    v162 = &v196;
    if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v162 = (std::string *)v196.__r_.__value_.__r.__words[0];
    v159 = (char *)v161 - (char *)v162;
  }
  else
  {
    v159 = 0;
  }
LABEL_359:
  v181 = v196;
  memset(&v196, 0, sizeof(v196));
  v163 = v159 + v158;
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
  {
    v164 = v181.__r_.__value_.__l.__size_;
    if (v181.__r_.__value_.__l.__size_ >= v163)
    {
      v165 = (std::string *)v181.__r_.__value_.__r.__words[0];
      v181.__r_.__value_.__l.__size_ = v163;
      goto LABEL_365;
    }
LABEL_363:
    std::string::append(&v181, v163 - v164, 0);
  }
  else
  {
    v164 = HIBYTE(v181.__r_.__value_.__r.__words[2]);
    if (v163 > HIBYTE(v181.__r_.__value_.__r.__words[2]))
      goto LABEL_363;
    *((_BYTE *)&v181.__r_.__value_.__s + 23) = v163 & 0x7F;
    v165 = &v181;
LABEL_365:
    v165->__r_.__value_.__s.__data_[v163] = 0;
  }
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v159 == -1)
    {
      v181.__r_.__value_.__l.__size_ = 0;
      *v181.__r_.__value_.__l.__data_ = 0;
      goto LABEL_372;
    }
LABEL_371:
    std::string::__erase_external_with_move(&v181, 0, v159);
  }
  else
  {
    if (v159 != -1)
      goto LABEL_371;
    *((_BYTE *)&v181.__r_.__value_.__s + 23) = 0;
    v181.__r_.__value_.__s.__data_[0] = 0;
  }
LABEL_372:
  v166 = &v196;
  v197 = 0;
  v167 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
  if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v168 = &v196;
  else
    v168 = (std::string *)v196.__r_.__value_.__r.__words[0];
  if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v169 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
  else
    v169 = v196.__r_.__value_.__l.__size_;
  if ((v198 & 8) != 0)
  {
    v190 = v168;
    v191 = v168;
    v197 = (std::string *)((char *)v168 + v169);
    v192 = (std::string *)((char *)v168 + v169);
  }
  if ((v198 & 0x10) != 0)
  {
    v197 = (std::string *)((char *)v168 + v169);
    if ((*((_BYTE *)&v196.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v170 = (v196.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v196.__r_.__value_.__l.__size_ < v170)
      {
        v167 = v196.__r_.__value_.__l.__size_;
        goto LABEL_385;
      }
      v196.__r_.__value_.__l.__size_ = (v196.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      v166 = (std::string *)v196.__r_.__value_.__r.__words[0];
LABEL_388:
      v166->__r_.__value_.__s.__data_[v170] = 0;
    }
    else
    {
      v170 = 22;
      if (HIBYTE(v196.__r_.__value_.__r.__words[2]) > 0x15u)
      {
        *((_BYTE *)&v196.__r_.__value_.__s + 23) = 22;
        goto LABEL_388;
      }
LABEL_385:
      std::string::append(&v196, v170 - v167, 0);
    }
    v171 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
    if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v171 = v196.__r_.__value_.__l.__size_;
    v193 = v168;
    v194 = v168;
    v195 = (char *)v168 + v171;
    if ((v198 & 3) != 0)
    {
      if (v169 >> 31)
      {
        v172 = ((v169 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v173 = 0x7FFFFFFF * ((v172 + ((v169 - 0x80000000 - v172) >> 1)) >> 30);
        v168 = (std::string *)((char *)v168 + v173 + 0x7FFFFFFF);
        v169 = v169 - v173 - 0x7FFFFFFF;
        v194 = v168;
      }
      if (v169)
        v194 = (std::string *)((char *)v168 + v169);
    }
  }
  v174 = &v181;
  if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v174 = (std::string *)v181.__r_.__value_.__r.__words[0];
  *(_DWORD *)v200 = 136315138;
  *(_QWORD *)&v200[4] = v174;
  _os_log_debug_impl(&dword_1BF335000, v157, OS_LOG_TYPE_DEBUG, "#D %s", v200, 0xCu);
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v181.__r_.__value_.__l.__data_);
  object[0] = *(xpc_object_t *)MEMORY[0x1E0DE4F50];
  v175 = *(void **)(MEMORY[0x1E0DE4F50] + 72);
  *(xpc_object_t *)((char *)object + *((_QWORD *)object[0] - 3)) = *(xpc_object_t *)(MEMORY[0x1E0DE4F50] + 64);
  object[2] = v175;
  v189 = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v196.__r_.__value_.__l.__data_);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3B89E4C](&v199);
  if (SHIBYTE(__s1[2]) < 0)
LABEL_340:
    operator delete((void *)__s1[0]);
LABEL_341:
  xpc_release(v185);
  std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(*((char **)&buf + 1));
  xpc_release(xdict);
LABEL_342:
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v187.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_346:
    operator delete(v187.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_346;
}

void sub_1BF3ED7F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,xpc_object_t object,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,xpc_object_t a48)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void xpc::dict::object_proxy::operator=(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  xpc_object_t value;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;

  value = xpc_dictionary_get_value(**(xpc_object_t **)a2, *(const char **)(a2 + 8));
  v6 = value;
  if (value)
  {
    xpc_retain(value);
  }
  else
  {
    v6 = xpc_null_create();
    if (!v6)
    {
      v7 = xpc_null_create();
      v6 = 0;
      goto LABEL_5;
    }
  }
  xpc_retain(v6);
  v7 = v6;
LABEL_5:
  xpc_dictionary_set_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8), v7);
  *a3 = v7;
  v8 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v6);
}

void std::map<std::string,xpc::dict>::insert_or_assign[abi:ne180100]<xpc::dict>(_QWORD **a1, const std::string::value_type **a2, xpc_object_t *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  const std::string::value_type *v9;
  size_t v10;
  uint64_t *v11;
  int v12;
  uint64_t *v13;
  size_t v14;
  size_t v15;
  int v16;
  int v17;
  _QWORD *v18;
  size_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t *v26;
  std::string *v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t *v31;

  v6 = (uint64_t *)(a1 + 1);
  v7 = a1[1];
  if (!v7)
    goto LABEL_41;
  v8 = *((char *)a2 + 23);
  if (v8 >= 0)
    v9 = (const std::string::value_type *)a2;
  else
    v9 = *a2;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)a2 + 23);
  else
    v10 = (size_t)a2[1];
  v11 = (uint64_t *)(a1 + 1);
  do
  {
    while (1)
    {
      v12 = *((char *)v7 + 55);
      v13 = v12 >= 0 ? v7 + 4 : (uint64_t *)v7[4];
      v14 = v12 >= 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      v15 = v10 >= v14 ? v14 : v10;
      v16 = memcmp(v13, v9, v15);
      if (v16)
        break;
      if (v14 < v10)
        goto LABEL_11;
LABEL_9:
      v11 = v7;
      v7 = (uint64_t *)*v7;
      if (!v7)
        goto LABEL_26;
    }
    if ((v16 & 0x80000000) == 0)
      goto LABEL_9;
LABEL_11:
    v7 = (uint64_t *)v7[1];
  }
  while (v7);
LABEL_26:
  if (v11 == v6)
    goto LABEL_40;
  v17 = *((char *)v11 + 55);
  if (v17 >= 0)
    v18 = v11 + 4;
  else
    v18 = (_QWORD *)v11[4];
  if (v17 >= 0)
    v19 = *((unsigned __int8 *)v11 + 55);
  else
    v19 = v11[5];
  if (v19 >= v10)
    v20 = v10;
  else
    v20 = v19;
  v21 = memcmp(v9, v18, v20);
  if (v21)
  {
    if ((v21 & 0x80000000) == 0)
      goto LABEL_38;
LABEL_40:
    v6 = v11;
LABEL_41:
    v30 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    v31 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    v24 = std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__find_equal<std::string>(a1, v6, &v31, &v30, (const void **)a2);
    if (!*v24)
    {
      v25 = (uint64_t **)v24;
      v26 = (uint64_t *)operator new(0x40uLL);
      v27 = (std::string *)(v26 + 4);
      if (*((char *)a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v27, *a2, (std::string::size_type)a2[1]);
      }
      else
      {
        *(_OWORD *)&v27->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        v26[6] = (uint64_t)a2[2];
      }
      v26[7] = (uint64_t)*a3;
      *a3 = xpc_null_create();
      v28 = v31;
      *v26 = 0;
      v26[1] = 0;
      v26[2] = (uint64_t)v28;
      *v25 = v26;
      v29 = (_QWORD *)**a1;
      if (v29)
      {
        *a1 = v29;
        v26 = *v25;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v26);
      a1[2] = (_QWORD *)((char *)a1[2] + 1);
    }
  }
  else
  {
    if (v10 < v19)
      goto LABEL_40;
LABEL_38:
    v22 = (uint64_t)*a3;
    *a3 = xpc_null_create();
    v23 = (_QWORD *)v11[7];
    v11[7] = v22;
    xpc_release(v23);
  }
}

void sub_1BF3EDC50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void AnalyticsHelper::submitEvent(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  BOOL v6;
  BOOL v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  uint64_t v11;
  const void *v12;
  size_t v13;
  const void *v14;
  const void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  NSObject *v20;
  const void **v21;
  const void ***v22;
  const void **v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t *v26;
  const void ***v27;
  const std::string::value_type *v28;
  char *v29;
  size_t v30;
  const void *v31;
  const void **v32;
  uint64_t v33;
  uint64_t v34;
  const void **v35;
  xpc_object_t v36;
  std::string v37;
  xpc_object_t object;
  const void *__dst[3];
  uint64_t *v40;
  uint64_t *v41;
  _BYTE buf[24];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
      v7 = a3[2] == 0;
    else
      v7 = 1;
    if (!v7)
    {
LABEL_12:
      object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      v8 = xpc_dictionary_create(0, 0, 0);
      v9 = v8;
      if (v8)
      {
        object = v8;
      }
      else
      {
        v9 = xpc_null_create();
        object = v9;
        if (!v9)
        {
          v10 = xpc_null_create();
          v9 = 0;
          goto LABEL_19;
        }
      }
      if (MEMORY[0x1C3B8A86C](v9) == MEMORY[0x1E0C812F8])
      {
        xpc_retain(v9);
        goto LABEL_20;
      }
      v10 = xpc_null_create();
LABEL_19:
      object = v10;
LABEL_20:
      xpc_release(v9);
      AnalyticsHelper::append(v11, (uint64_t)&object, a3);
      v12 = (const void *)*MEMORY[0x1E0CFBC90];
      v13 = strlen((const char *)*MEMORY[0x1E0CFBC90]);
      if (v13 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v14 = (const void *)v13;
      if (v13 >= 0x17)
      {
        v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17)
          v16 = v13 | 7;
        v17 = v16 + 1;
        v15 = (const void **)operator new(v16 + 1);
        __dst[1] = v14;
        __dst[2] = (const void *)(v17 | 0x8000000000000000);
        __dst[0] = v15;
      }
      else
      {
        HIBYTE(__dst[2]) = v13;
        v15 = __dst;
        if (!v13)
          goto LABEL_28;
      }
      memmove(v15, v12, (size_t)v14);
LABEL_28:
      *((_BYTE *)v14 + (_QWORD)v15) = 0;
      v18 = std::__tree<std::string>::find<std::string>(a1 + 104, __dst);
      v19 = v18;
      if (SHIBYTE(__dst[2]) < 0)
      {
        operator delete((void *)__dst[0]);
        if ((uint64_t *)(a1 + 112) == v19)
        {
LABEL_30:
          v20 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
          {
LABEL_58:
            v28 = (const std::string::value_type *)a2;
            if (*(char *)(a2 + 23) < 0)
              v28 = *(const std::string::value_type **)a2;
            v29 = (char *)MEMORY[0x1C3B8A7D0](object);
            memset(__dst, 170, sizeof(__dst));
            v30 = strlen(v29);
            if (v30 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v31 = (const void *)v30;
            if (v30 >= 0x17)
            {
              v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v30 | 7) != 0x17)
                v33 = v30 | 7;
              v34 = v33 + 1;
              v32 = (const void **)operator new(v33 + 1);
              __dst[1] = v31;
              __dst[2] = (const void *)(v34 | 0x8000000000000000);
              __dst[0] = v32;
            }
            else
            {
              HIBYTE(__dst[2]) = v30;
              v32 = __dst;
              if (!v30)
                goto LABEL_68;
            }
            memcpy(v32, v29, (size_t)v31);
LABEL_68:
            *((_BYTE *)v31 + (_QWORD)v32) = 0;
            free(v29);
            v35 = __dst;
            if (SHIBYTE(__dst[2]) < 0)
              v35 = (const void **)__dst[0];
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v28;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v35;
            _os_log_debug_impl(&dword_1BF335000, v20, OS_LOG_TYPE_DEBUG, "#D Submitting CoreAnalytics event[%s] - %s", buf, 0x16u);
            if (SHIBYTE(__dst[2]) < 0)
              operator delete((void *)__dst[0]);
          }
LABEL_48:
          if (*(char *)(a2 + 23) < 0)
            std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
          else
            v37 = *(std::string *)a2;
          v36 = object;
          if (object)
            xpc_retain(object);
          else
            v36 = xpc_null_create();
          metric::sendCoreAnalyticsEvent((const void **)&v37.__r_.__value_.__l.__data_, &v36);
          xpc_release(v36);
          v36 = 0;
          if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v37.__r_.__value_.__l.__data_);
          xpc_release(object);
          return;
        }
      }
      else if ((uint64_t *)(a1 + 112) == v18)
      {
        goto LABEL_30;
      }
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)&buf[16] = 0;
      *(_QWORD *)buf = &buf[8];
      v21 = (const void **)v19[7];
      v22 = (const void ***)(v19 + 8);
      if (v21 == (const void **)(v19 + 8))
      {
LABEL_47:
        AnalyticsHelper::append((uint64_t)v18, (uint64_t)&object, buf);
        std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(*(char **)&buf[8]);
        v20 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
          goto LABEL_58;
        goto LABEL_48;
      }
      while (1)
      {
        v40 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
        v41 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
        v18 = std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__find_equal<std::string>((uint64_t **)buf, (uint64_t *)&buf[8], &v41, &v40, v21 + 4);
        if (*v18)
        {
          v23 = (const void **)v21[1];
          if (v23)
            goto LABEL_42;
        }
        else
        {
          v24 = (uint64_t **)v18;
          memset(__dst, 170, sizeof(__dst));
          std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__construct_node<std::pair<std::string const,xpc::dict> const&>(__dst, (uint64_t)buf, (uint64_t)(v21 + 4));
          v25 = v41;
          v26 = (uint64_t *)__dst[0];
          *(_QWORD *)__dst[0] = 0;
          v26[1] = 0;
          v26[2] = (uint64_t)v25;
          *v24 = v26;
          if (**(_QWORD **)buf)
          {
            *(_QWORD *)buf = **(_QWORD **)buf;
            v26 = *v24;
          }
          v18 = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&buf[8], v26);
          ++*(_QWORD *)&buf[16];
          v23 = (const void **)v21[1];
          if (v23)
          {
            do
            {
LABEL_42:
              v27 = (const void ***)v23;
              v23 = (const void **)*v23;
            }
            while (v23);
            goto LABEL_35;
          }
        }
        do
        {
          v27 = (const void ***)v21[2];
          v6 = *v27 == v21;
          v21 = (const void **)v27;
        }
        while (!v6);
LABEL_35:
        v21 = (const void **)v27;
        if (v27 == v22)
          goto LABEL_47;
      }
    }
  }
  else
  {
    if (*(_BYTE *)(a2 + 23))
      v6 = a3[2] == 0;
    else
      v6 = 1;
    if (!v6)
      goto LABEL_12;
  }
}

void sub_1BF3EE11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, xpc_object_t object, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void AnalyticsHelper::append(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  xpc_object_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD applier[5];
  std::string v12;

  v3 = a3 + 1;
  v4 = (_QWORD *)*a3;
  if ((_QWORD *)*a3 != a3 + 1)
  {
    v6 = MEMORY[0x1E0C809B0];
    do
    {
      memset(&v12, 170, sizeof(v12));
      if (*((char *)v4 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(&v12, (const std::string::value_type *)v4[4], v4[5]);
        v7 = (xpc_object_t)v4[7];
        if (v7)
        {
LABEL_6:
          xpc_retain(v7);
          goto LABEL_9;
        }
      }
      else
      {
        v12 = *(std::string *)(v4 + 4);
        v7 = (xpc_object_t)v4[7];
        if (v7)
          goto LABEL_6;
      }
      v7 = xpc_null_create();
LABEL_9:
      applier[0] = v6;
      applier[1] = 0x40000000;
      applier[2] = ___ZN15AnalyticsHelper6appendERN3xpc4dictERNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES1_NS3_4lessISA_EENS8_INS3_4pairIKSA_S1_EEEEEE_block_invoke;
      applier[3] = &__block_descriptor_tmp_13_5;
      applier[4] = a2;
      xpc_dictionary_apply(v7, applier);
      xpc_release(v7);
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v12.__r_.__value_.__l.__data_);
        v8 = (_QWORD *)v4[1];
        if (v8)
        {
          do
          {
LABEL_13:
            v9 = v8;
            v8 = (_QWORD *)*v8;
          }
          while (v8);
          goto LABEL_3;
        }
      }
      else
      {
        v8 = (_QWORD *)v4[1];
        if (v8)
          goto LABEL_13;
      }
      do
      {
        v9 = (_QWORD *)v4[2];
        v10 = *v9 == (_QWORD)v4;
        v4 = v9;
      }
      while (!v10);
LABEL_3:
      v4 = v9;
    }
    while (v9 != v3);
  }
}

void sub_1BF3EE300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  xpc_release(v20);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ___ZN15AnalyticsHelper6appendERN3xpc4dictERNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES1_NS3_4lessISA_EENS8_INS3_4pairIKSA_S1_EEEEEE_block_invoke(uint64_t a1, char *__s, void *a3)
{
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  char v13;
  void *v14;
  void **v15;
  size_t v16;
  _QWORD v19[5];
  void *__dst[3];

  memset(__dst, 170, sizeof(__dst));
  v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    __dst[2] = (void *)(v10 | 0x8000000000000000);
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(__dst[2]) = v6;
  v8 = __dst;
  if (v6)
LABEL_8:
    memcpy(v8, __s, (size_t)v7);
  *((_BYTE *)v7 + (_QWORD)v8) = 0;
  v11 = strlen((const char *)*MEMORY[0x1E0CFB9D8]);
  v12 = (void *)v11;
  v13 = HIBYTE(__dst[2]);
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    if (v11 != -1)
    {
      v14 = (void *)HIBYTE(__dst[2]);
      v15 = __dst;
      goto LABEL_14;
    }
LABEL_27:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v11 == -1)
    goto LABEL_27;
  v15 = (void **)__dst[0];
  v14 = __dst[1];
LABEL_14:
  if (v14 >= v12)
    v16 = (size_t)v12;
  else
    v16 = (size_t)v14;
  if (!memcmp(v15, (const void *)*MEMORY[0x1E0CFB9D8], v16) && v14 == v12)
  {
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 0x40000000;
    v19[2] = ___ZN15AnalyticsHelper6appendERN3xpc4dictERNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES1_NS3_4lessISA_EENS8_INS3_4pairIKSA_S1_EEEEEE_block_invoke_2;
    v19[3] = &__block_descriptor_tmp_14;
    v19[4] = *(_QWORD *)(a1 + 32);
    xpc_dictionary_apply(a3, v19);
    v13 = HIBYTE(__dst[2]);
  }
  if (v13 < 0)
    operator delete(__dst[0]);
  return 1;
}

void sub_1BF3EE4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN15AnalyticsHelper6appendERN3xpc4dictERNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES1_NS3_4lessISA_EENS8_INS3_4pairIKSA_S1_EEEEEE_block_invoke_2(uint64_t a1, const char *a2, xpc_object_t object)
{
  xpc_object_t v5;
  xpc_object_t v6;

  if (object)
  {
    v5 = object;
    xpc_retain(object);
  }
  else
  {
    v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(**(xpc_object_t **)(a1 + 32), a2, v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  return 1;
}

void analytics::registerCallbackForTimedEventImpl(const char *a1)
{
  size_t v2;
  std::string::size_type v3;
  std::string *p_dst;
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  __int128 v8;
  unsigned __int8 v9;
  NSObject *v10;
  void **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *__p[2];
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  std::string __dst;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v17 = 0xAAAAAAAAAAAAAAAALL;
  v18 = 0xAAAAAAAAAAAAAAAALL;
  abm::AWDHelperGetConnection(&v17);
  if (!v17)
    goto LABEL_20;
  v2 = strlen(a1);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v3 = v2;
  if (v2 >= 0x17)
  {
    v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v5 = v2 | 7;
    v6 = v5 + 1;
    p_dst = (std::string *)operator new(v5 + 1);
    __dst.__r_.__value_.__l.__size_ = v3;
    __dst.__r_.__value_.__r.__words[2] = v6 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_9;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v2;
  p_dst = &__dst;
  if (v2)
LABEL_9:
    memcpy(p_dst, a1, v3);
  p_dst->__r_.__value_.__s.__data_[v3] = 0;
  v7 = std::string::insert(&__dst, 0, "com.apple.Telephony.", 0x14uLL);
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v16 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED7100E0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v10 = qword_1ED7100E0;
    if (os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_INFO))
    {
LABEL_15:
      v11 = __p;
      if (v16 < 0)
        v11 = (void **)__p[0];
      LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
      _os_log_impl(&dword_1BF335000, v10, OS_LOG_TYPE_INFO, "Register for 24h timer: event[%s]", (uint8_t *)&__dst, 0xCu);
    }
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
    v10 = qword_1ED7100E0;
    if (os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_INFO))
      goto LABEL_15;
  }
  wis::WISServerConnection::RegisterCallbackForTimer();
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
LABEL_20:
  v12 = (std::__shared_weak_count *)v18;
  if (v18)
  {
    v13 = (unint64_t *)(v18 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1BF3EE818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a20 < 0)
  {
    operator delete(__p);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void ___ZN9analytics33registerCallbackForTimedEventImplEPKcN8dispatch5queueEU13block_pointerFvNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::string __p;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  (*(void (**)(uint64_t, std::string *))(v2 + 16))(v2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF3EE8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 15;
  strcpy(a1, "stats.analytics");
}

uint64_t ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7902BC8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7902BC8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF3EEA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF3EEAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<AnalyticsHelper>::shared_ptr[abi:ne180100]<AnalyticsHelper,std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E7902C08;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF3EEBD4(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper*)#1}::operator() const(AnalyticsHelper*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF3EEBF4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AnalyticsHelper *,std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper *)#1},std::allocator<AnalyticsHelper>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<AnalyticsHelper *,std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper *)#1},std::allocator<AnalyticsHelper>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper*)#1}::operator() const(AnalyticsHelper*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<AnalyticsHelper *,std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper *)#1},std::allocator<AnalyticsHelper>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI15AnalyticsHelperE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI15AnalyticsHelperE15make_shared_ptrIS1_EENSt3__110shared_pt"
                                "rIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI15AnalyticsHelperE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI15AnalyticsHelperE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper*)#1}::operator() const(AnalyticsHelper*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  _BYTE v10[16];

  *a1 = off_1E7902BC8;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  a1[1] = &unk_1E78FB900;
  a1[7] = *a3;
  v5 = a3[1];
  a1[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v9);
  return a1;
}

void sub_1BF3EED64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedLoggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7902BC8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7902BC8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(*((_QWORD *)a1 + 1));
    std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(*((char **)a1 + 8));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(*((_QWORD *)a1 + 1));
    xpc_release(*((xpc_object_t *)a1 + 7));
    *((_QWORD *)a1 + 7) = 0;
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

xpc_object_t std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__construct_node<std::pair<std::string const,xpc::dict> const&>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  void *v8;
  xpc_object_t result;

  v5 = a2 + 8;
  memset(a1, 170, 24);
  v6 = (char *)operator new(0x40uLL);
  *a1 = v6;
  a1[1] = v5;
  *((_BYTE *)a1 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
  }
  v8 = *(void **)(a3 + 24);
  *((_QWORD *)v6 + 7) = v8;
  if (v8)
  {
    result = xpc_retain(v8);
  }
  else
  {
    result = xpc_null_create();
    *((_QWORD *)v6 + 7) = result;
  }
  *((_BYTE *)a1 + 16) = 1;
  return result;
}

void sub_1BF3EEFA4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,xpc::dict>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,xpc::dict>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__tree_node<std::__value_type<std::string,xpc::dict>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,xpc::dict>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      xpc_release(*(xpc_object_t *)(v2 + 56));
      *(_QWORD *)(v2 + 56) = 0;
      if (*(char *)(v2 + 55) < 0)
        operator delete(*(void **)(v2 + 32));
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__find_equal<std::string>(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, const void **a5)
{
  uint64_t **v8;
  int v10;
  const void *v11;
  size_t v12;
  int v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  BOOL v23;
  int v24;
  const void *v25;
  size_t v26;
  int v27;
  const void *v28;
  size_t v29;
  size_t v30;
  int v31;
  uint64_t *v32;
  uint64_t **v33;
  _QWORD *v34;
  const void *v35;
  const void *v36;
  int v37;
  const void *v38;
  size_t v39;
  size_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  int v46;
  uint64_t *v47;
  size_t v48;
  size_t v49;
  int v50;
  uint64_t *v51;
  uint64_t **v52;
  uint64_t **v53;
  _QWORD *v54;
  const void *v55;
  const void *v56;
  int v57;
  const void *v58;
  size_t v59;
  size_t v60;
  int v61;
  int v62;

  v8 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2)
    goto LABEL_23;
  v10 = *((char *)a5 + 23);
  if (v10 >= 0)
    v11 = a5;
  else
    v11 = *a5;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  v13 = *((char *)a2 + 55);
  if (v13 >= 0)
    v14 = a2 + 4;
  else
    v14 = (const void *)a2[4];
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)a2 + 55);
  else
    v15 = a2[5];
  if (v15 >= v12)
    v16 = v12;
  else
    v16 = v15;
  v17 = memcmp(v11, v14, v16);
  if (!v17)
  {
    if (v12 >= v15)
      goto LABEL_19;
LABEL_23:
    v19 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      v21 = a2;
    }
    else
    {
      if (v19)
      {
        v20 = (uint64_t *)*a2;
        do
        {
          v21 = v20;
          v20 = (uint64_t *)v20[1];
        }
        while (v20);
      }
      else
      {
        v22 = a2;
        do
        {
          v21 = (uint64_t *)v22[2];
          v23 = *v21 == (_QWORD)v22;
          v22 = v21;
        }
        while (v23);
      }
      v24 = *((char *)v21 + 55);
      if (v24 >= 0)
        v25 = v21 + 4;
      else
        v25 = (const void *)v21[4];
      if (v24 >= 0)
        v26 = *((unsigned __int8 *)v21 + 55);
      else
        v26 = v21[5];
      v27 = *((char *)a5 + 23);
      if (v27 >= 0)
        v28 = a5;
      else
        v28 = *a5;
      if (v27 >= 0)
        v29 = *((unsigned __int8 *)a5 + 23);
      else
        v29 = (size_t)a5[1];
      if (v29 >= v26)
        v30 = v26;
      else
        v30 = v29;
      v31 = memcmp(v25, v28, v30);
      if (v31)
      {
        if ((v31 & 0x80000000) == 0)
          goto LABEL_48;
      }
      else if (v26 >= v29)
      {
LABEL_48:
        v32 = *v8;
        if (!*v8)
        {
          v33 = v8;
LABEL_69:
          *a3 = (uint64_t *)v33;
          return (uint64_t *)v8;
        }
        while (1)
        {
          v33 = (uint64_t **)v32;
          v36 = (const void *)v32[4];
          v34 = v32 + 4;
          v35 = v36;
          v37 = *((char *)v34 + 23);
          if (v37 >= 0)
            v38 = v34;
          else
            v38 = v35;
          if (v37 >= 0)
            v39 = *((unsigned __int8 *)v34 + 23);
          else
            v39 = v34[1];
          if (v39 >= v29)
            v40 = v29;
          else
            v40 = v39;
          v41 = memcmp(v28, v38, v40);
          if (v41)
          {
            if (v41 < 0)
              goto LABEL_50;
LABEL_64:
            v42 = memcmp(v38, v28, v40);
            if (v42)
            {
              if ((v42 & 0x80000000) == 0)
                goto LABEL_69;
            }
            else if (v39 >= v29)
            {
              goto LABEL_69;
            }
            v8 = v33 + 1;
            v32 = v33[1];
            if (!v32)
              goto LABEL_69;
          }
          else
          {
            if (v29 >= v39)
              goto LABEL_64;
LABEL_50:
            v32 = *v33;
            v8 = v33;
            if (!*v33)
              goto LABEL_69;
          }
        }
      }
    }
    if (v19)
    {
      *a3 = v21;
      return v21 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  if (v17 < 0)
    goto LABEL_23;
LABEL_19:
  v18 = memcmp(v14, v11, v16);
  if (v18)
  {
    if ((v18 & 0x80000000) == 0)
    {
LABEL_21:
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
  }
  else if (v15 >= v12)
  {
    goto LABEL_21;
  }
  v43 = a2[1];
  if (v43)
  {
    v44 = (uint64_t *)a2[1];
    do
    {
      a4 = (uint64_t **)v44;
      v44 = (uint64_t *)*v44;
    }
    while (v44);
  }
  else
  {
    v45 = a2;
    do
    {
      a4 = (uint64_t **)v45[2];
      v23 = *a4 == v45;
      v45 = (uint64_t *)a4;
    }
    while (!v23);
  }
  if (a4 != v8)
  {
    v46 = *((char *)a4 + 55);
    if (v46 >= 0)
      v47 = (uint64_t *)(a4 + 4);
    else
      v47 = a4[4];
    if (v46 >= 0)
      v48 = *((unsigned __int8 *)a4 + 55);
    else
      v48 = (size_t)a4[5];
    if (v48 >= v12)
      v49 = v12;
    else
      v49 = v48;
    v50 = memcmp(v11, v47, v49);
    if (v50)
    {
      if ((v50 & 0x80000000) == 0)
      {
LABEL_95:
        v51 = *v8;
        if (*v8)
        {
          v52 = a3;
          while (1)
          {
            v53 = (uint64_t **)v51;
            v56 = (const void *)v51[4];
            v54 = v51 + 4;
            v55 = v56;
            v57 = *((char *)v54 + 23);
            if (v57 >= 0)
              v58 = v54;
            else
              v58 = v55;
            if (v57 >= 0)
              v59 = *((unsigned __int8 *)v54 + 23);
            else
              v59 = v54[1];
            if (v59 >= v12)
              v60 = v12;
            else
              v60 = v59;
            v61 = memcmp(v11, v58, v60);
            if (v61)
            {
              if (v61 < 0)
                goto LABEL_97;
LABEL_111:
              v62 = memcmp(v58, v11, v60);
              if (v62)
              {
                if ((v62 & 0x80000000) == 0)
                  goto LABEL_123;
              }
              else if (v59 >= v12)
              {
                goto LABEL_123;
              }
              v8 = v53 + 1;
              v51 = v53[1];
              if (!v51)
                goto LABEL_123;
            }
            else
            {
              if (v12 >= v59)
                goto LABEL_111;
LABEL_97:
              v51 = *v53;
              v8 = v53;
              if (!*v53)
                goto LABEL_123;
            }
          }
        }
        v53 = v8;
        v52 = a3;
LABEL_123:
        *v52 = (uint64_t *)v53;
        return (uint64_t *)v8;
      }
    }
    else if (v12 >= v48)
    {
      goto LABEL_95;
    }
  }
  if (v43)
  {
    *a3 = (uint64_t *)a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return (uint64_t *)a4;
}

void std::string::__erase_external_with_move(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  int v4;
  std::string::size_type size;
  std::string *v6;
  std::string::size_type v7;
  std::string::size_type v8;
  std::string::size_type v9;

  if (!__n)
    return;
  v4 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if (v4 < 0)
  {
    v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    size = this->__r_.__value_.__l.__size_;
    v7 = size - __pos;
    if (size - __pos >= __n)
      v8 = __n;
    else
      v8 = size - __pos;
    if (size - __pos <= __n)
      goto LABEL_8;
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v6 = this;
    v7 = size - __pos;
    if (size - __pos >= __n)
      v8 = __n;
    else
      v8 = HIBYTE(this->__r_.__value_.__r.__words[2]) - __pos;
    if (v7 <= __n)
      goto LABEL_8;
  }
  memmove((char *)v6 + __pos, (char *)v6 + __pos + v8, v7 - v8);
  LOBYTE(v4) = *((_BYTE *)&this->__r_.__value_.__s + 23);
LABEL_8:
  v9 = size - v8;
  if ((v4 & 0x80) != 0)
    this->__r_.__value_.__l.__size_ = v9;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = v9 & 0x7F;
  v6->__r_.__value_.__s.__data_[v9] = 0;
}

void RadioModule::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  dispatch_object_t object;
  uint64_t v46;
  std::__shared_weak_count *v47;
  __int128 v48;
  void (*v49)(uint64_t);
  void *v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0x168uLL);
  v5 = (std::__shared_weak_count *)a1[1];
  v46 = *a1;
  v47 = v5;
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = v48;
    v48 = 0uLL;
    v11 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (*((_QWORD *)&v48 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v48 + 1) + 16))(*((_QWORD *)&v48 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v48 + 1));
      }
    }
    v9 = off_1ED70FD08;
  }
  v16 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v17 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(dispatch_object_t *__return_ptr, uint64_t))(*(_QWORD *)v9 + 24))(&object, v9);
  RadioModule::RadioModule((uint64_t)v4, &v46, &object);
  *a2 = v4;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v19 = (std::__shared_weak_count *)operator new(0x20uLL);
  v19->__shared_owners_ = 0;
  v20 = (unint64_t *)&v19->__shared_owners_;
  v19->__vftable = (std::__shared_weak_count_vtbl *)off_1E7903898;
  v19->__shared_weak_owners_ = 0;
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  a2[1] = v19;
  v21 = (std::__shared_weak_count *)*((_QWORD *)v4 + 16);
  if (v21)
  {
    if (v21->__shared_owners_ != -1)
      goto LABEL_31;
    do
      v22 = __ldxr(v20);
    while (__stxr(v22 + 1, v20));
    v23 = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    *((_QWORD *)v4 + 15) = v4;
    *((_QWORD *)v4 + 16) = v19;
    std::__shared_weak_count::__release_weak(v21);
  }
  else
  {
    do
      v25 = __ldxr(v20);
    while (__stxr(v25 + 1, v20));
    v26 = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    *((_QWORD *)v4 + 15) = v4;
    *((_QWORD *)v4 + 16) = v19;
  }
  do
    v28 = __ldaxr(v20);
  while (__stlxr(v28 - 1, v20));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    v29 = (_QWORD *)*a2;
    if (!*(_QWORD *)(*a2 + 104))
      goto LABEL_47;
    goto LABEL_32;
  }
LABEL_31:
  v29 = (_QWORD *)*a2;
  if (!*(_QWORD *)(*a2 + 104))
    goto LABEL_47;
LABEL_32:
  v30 = (std::__shared_weak_count *)v29[16];
  if (!v30 || (v31 = v29[15], (v32 = std::__shared_weak_count::lock(v30)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v33 = v32;
  *(_QWORD *)&v48 = v31;
  *((_QWORD *)&v48 + 1) = v32;
  ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v29 + 7));
  v34 = v31 + 48;
  if (!v31)
    v34 = 0;
  v52 = v34;
  v53 = v33;
  v48 = 0uLL;
  ctu::TrackedLogger::registerLoggerToServer();
  v35 = v53;
  if (v53)
  {
    v36 = (unint64_t *)&v53->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
LABEL_47:
  if (object)
    dispatch_release(object);
  if (v16)
  {
    v41 = (unint64_t *)&v16->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v47)
    std::__shared_weak_count::__release_weak(v47);
  v43 = *a2;
  v44 = (uint64_t *)(*a2 + 120);
  *(_QWORD *)&v48 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v48 + 1) = 0x40000000;
  v49 = ___ZN11RadioModule4initEv_block_invoke;
  v50 = &__block_descriptor_tmp_15;
  v51 = v43;
  ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v44, (uint64_t)&v48);
}

void sub_1BF3EF7E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object, uint64_t a13, uint64_t a14, char a15)
{
  __break(1u);
}

void sub_1BF3EF848()
{
  __cxa_end_catch();
  JUMPOUT(0x1BF3EF88CLL);
}

void sub_1BF3EF858()
{
  JUMPOUT(0x1BF3EF890);
}

void sub_1BF3EF864()
{
  JUMPOUT(0x1BF3EF89CLL);
}

void sub_1BF3EF874()
{
  JUMPOUT(0x1BF3EF8A8);
}

void RadioModule::init(RadioModule *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN11RadioModule4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_15;
  v1[4] = this;
  ctu::SharedSynchronizable<RadioModule>::execute_wrapped((uint64_t *)this + 15, (uint64_t)v1);
}

uint64_t RadioModule::RadioModule(uint64_t a1, uint64_t *a2, NSObject **a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  NSObject *v11;
  void (**v12)(RadioModule *__hidden);
  const char *v13;
  unsigned __int8 v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  NSObject *initially_inactive;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  void **v28;
  uint64_t v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  void *v47;
  uint64_t Controller;
  const void *v49;
  _QWORD *v51;
  std::__shared_weak_count *v52;
  _BYTE v53[16];
  _QWORD v54[2];
  __int128 block;
  void (*v56)(uint64_t);
  void *v57;
  uint64_t *v58;

  v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_1E7908A38;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v6);
    *(_QWORD *)a1 = &unk_1E78FC4E8;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_1E78FC4E8;
    *(_QWORD *)(a1 + 8) = v5;
  }
  *(_QWORD *)a1 = off_1E7902C98;
  *(_QWORD *)(a1 + 48) = &unk_1E7902D08;
  v51 = (_QWORD *)(a1 + 48);
  v11 = *a3;
  if (v11)
  {
    dispatch_retain(v11);
    v12 = *(void (***)(RadioModule *__hidden))a1;
  }
  else
  {
    v12 = off_1E7902C98;
  }
  v13 = (const char *)((uint64_t (*)(uint64_t))v12[2])(a1);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v53, "com.apple.telephony.abm", v13);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 0x40000000;
  v56 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v57 = &__block_descriptor_tmp_13_2;
  v58 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v15 = GetABMLogServer(void)::sLogServer;
    v16 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_17;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v15 = GetABMLogServer(void)::sLogServer;
    v16 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_17;
  }
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldxr(p_shared_owners);
  while (__stxr(v18 + 1, p_shared_owners));
LABEL_17:
  if (v11)
    dispatch_retain(v11);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v20 = dispatch_queue_create_with_target_V2("radio.mod", initially_inactive, v11);
  dispatch_set_qos_class_floor(v20, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v20);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v20;
  if (v20)
    dispatch_retain(v20);
  *(_QWORD *)(a1 + 144) = v11;
  if (v11)
    dispatch_retain(v11);
  if (v20)
    dispatch_release(v20);
  if (v11)
    dispatch_release(v11);
  *(_QWORD *)(a1 + 48) = off_1E7903858;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&block);
  *(_QWORD *)(a1 + 56) = &unk_1E78FB900;
  *(_QWORD *)(a1 + 104) = v15;
  *(_QWORD *)(a1 + 112) = v16;
  if (v16)
  {
    v21 = (unint64_t *)&v16->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v54);
    *v51 = off_1E79038E8;
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 - 1, v21));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v54);
    *v51 = off_1E79038E8;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v53);
  if (v11)
    dispatch_release(v11);
  *(_QWORD *)a1 = off_1E7902C98;
  *(_QWORD *)(a1 + 175) = 0;
  *(_QWORD *)(a1 + 48) = &unk_1E7902D08;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 183) = 0;
  *(_WORD *)(a1 + 191) = 768;
  radio::RFCalibration_t::RFCalibration_t((radio::RFCalibration_t *)(a1 + 200));
  *(_QWORD *)(a1 + 248) = xpc_null_create();
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_BYTE *)(a1 + 288) = 1;
  *(_BYTE *)(a1 + 296) = 0;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 0x40000000;
  v56 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v57 = &__block_descriptor_tmp_13_2;
  v58 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v25 = *(_QWORD *)algn_1ED710088;
    v52 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_42;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v25 = *(_QWORD *)algn_1ED710088;
    v52 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_42;
  }
  v26 = (unint64_t *)(v25 + 8);
  do
    v27 = __ldxr(v26);
  while (__stxr(v27 + 1, v26));
LABEL_42:
  v28 = (void **)(a1 + 248);
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v29 = off_1ED70FA00;
  if (!off_1ED70FA00)
  {
    ABMServer::create_default_global(&block);
    v30 = block;
    block = 0uLL;
    v31 = (std::__shared_weak_count *)*(&off_1ED70FA00 + 1);
    off_1ED70FA00 = v30;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = (std::__shared_weak_count *)*((_QWORD *)&block + 1);
    if (*((_QWORD *)&block + 1))
    {
      v35 = (unint64_t *)(*((_QWORD *)&block + 1) + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v29 = off_1ED70FA00;
  }
  v37 = (std::__shared_weak_count *)*(&off_1ED70FA00 + 1);
  v54[0] = v29;
  v54[1] = *(&off_1ED70FA00 + 1);
  if (*(&off_1ED70FA00 + 1))
  {
    v38 = (unint64_t *)(*(&off_1ED70FA00 + 1) + 8);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  ctu::iokit::Controller::create();
  if (v37)
  {
    v40 = (unint64_t *)&v37->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v52)
  {
    v42 = (unint64_t *)&v52->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  *(_WORD *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 322) = 0;
  *(_QWORD *)(a1 + 328) = a1 + 328;
  *(_QWORD *)(a1 + 336) = a1 + 328;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  v44 = xpc_dictionary_create(0, 0, 0);
  if (v44 || (v44 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v44) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v44);
      v45 = v44;
    }
    else
    {
      v45 = xpc_null_create();
    }
  }
  else
  {
    v45 = xpc_null_create();
    v44 = 0;
  }
  xpc_release(v44);
  v46 = xpc_null_create();
  v47 = *v28;
  *v28 = v45;
  xpc_release(v47);
  xpc_release(v46);
  Controller = TelephonyBasebandCreateController();
  v49 = *(const void **)(a1 + 352);
  *(_QWORD *)(a1 + 352) = Controller;
  if (v49)
    CFRelease(v49);
  return a1;
}

void sub_1BF3EFFB0(_Unwind_Exception *a1, uint64_t a2, _QWORD *a3, ...)
{
  void **v3;
  xpc_object_t *v4;
  char *v5;
  va_list va;

  va_start(va, a3);
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)(v3 + 34));
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)(v3 + 32));
  xpc::dict::~dict(v4);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)(v3 + 22));
  if (*v5 < 0)
    operator delete(v3[19]);
  ctu::SharedLoggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(a3);
  Service::~Service((Service *)v3);
  _Unwind_Resume(a1);
}

void sub_1BF3F0078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  Service *v5;
  NSObject *v6;
  _QWORD *v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  va_list va2;
  uint64_t v17;
  va_list va3;

  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v15 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v7);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  if (v6)
    dispatch_release(v6);
  Service::~Service(v5);
  _Unwind_Resume(a1);
}

void xpc::dict::~dict(xpc_object_t *this)
{
  xpc_release(*this);
  *this = 0;
}

_QWORD *ctu::SharedLoggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7903858;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7903858;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void RadioModule::~RadioModule(RadioModule *this)
{
  NSObject *v2;
  const void *v3;
  uint64_t v4;
  RadioModule *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  NSObject *v19;
  NSObject *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  RadioModule *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  std::__shared_weak_count *v30;
  uint8_t v31[16];

  *(_QWORD *)this = off_1E7902C98;
  *((_QWORD *)this + 6) = &unk_1E7902D08;
  v2 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v31 = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v31, 2u);
  }
  v3 = (const void *)*((_QWORD *)this + 44);
  if (v3)
    CFRelease(v3);
  if (*((_QWORD *)this + 43))
  {
    v4 = *((_QWORD *)this + 41);
    v5 = (RadioModule *)*((_QWORD *)this + 42);
    v6 = *(_QWORD *)v5;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v6;
    *((_QWORD *)this + 43) = 0;
    if (v5 != (RadioModule *)((char *)this + 328))
    {
      do
      {
        v25 = (RadioModule *)*((_QWORD *)v5 + 1);
        v26 = (unsigned int *)*((_QWORD *)v5 + 3);
        if (v26)
        {
          v27 = v26 + 3;
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29)
            (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 24))(v26);
        }
        operator delete(v5);
        v5 = v25;
      }
      while (v25 != (RadioModule *)((char *)this + 328));
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 39);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  xpc_release(*((xpc_object_t *)this + 31));
  *((_QWORD *)this + 31) = 0;
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (!v16)
    goto LABEL_26;
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
  {
LABEL_26:
    if ((*((char *)this + 175) & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  if (*((char *)this + 175) < 0)
LABEL_27:
    operator delete(*((void **)this + 19));
LABEL_28:
  *((_QWORD *)this + 6) = off_1E7903858;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v19 = *((_QWORD *)this + 18);
  if (v19)
    dispatch_release(v19);
  v20 = *((_QWORD *)this + 17);
  if (v20)
    dispatch_release(v20);
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  *(_QWORD *)this = off_1E7908A38;
  v22 = *((_QWORD *)this + 3);
  if (v22)
  {
    v23 = *((_QWORD *)this + 4);
    v24 = (void *)*((_QWORD *)this + 3);
    if (v23 != v22)
    {
      do
      {
        if (*(char *)(v23 - 1) < 0)
          operator delete(*(void **)(v23 - 24));
        v23 -= 24;
      }
      while (v23 != v22);
      v24 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v22;
    operator delete(v24);
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v30)
    std::__shared_weak_count::__release_weak(v30);
}

{
  void *v1;

  RadioModule::~RadioModule(this);
  operator delete(v1);
}

void `non-virtual thunk to'RadioModule::~RadioModule(RadioModule *this)
{
  RadioModule::~RadioModule((RadioModule *)((char *)this - 48));
}

{
  void *v1;

  RadioModule::~RadioModule((RadioModule *)((char *)this - 48));
  operator delete(v1);
}

const char *RadioModule::getName(RadioModule *this)
{
  return "radio.mod";
}

void ___ZN11RadioModule4initEv_block_invoke(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1BF335000, v1, OS_LOG_TYPE_DEFAULT, "#I Initializing", v2, 2u);
  }
}

_BYTE *RadioModule::getShutdownStages@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *v3;
  _BYTE *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(1uLL);
  *a1 = v3;
  *v3 = 3;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void RadioModule::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  uint64_t *v4;
  NSObject *v5;
  _QWORD v6[5];
  dispatch_group_t group;
  char v8;

  v4 = (uint64_t *)(a1 + 120);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 1174405120;
  v6[2] = ___ZN11RadioModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v6[3] = &__block_descriptor_tmp_5_9;
  v5 = *a3;
  v6[4] = a1;
  group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  v8 = a2;
  ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v4, (uint64_t)v6);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN11RadioModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *i;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int j;
  unsigned int v7;
  boost::signals2::detail::connection_body_base *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = v1 + 41;
  for (i = (uint64_t *)v1[42]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = (unsigned int *)i[3];
    if (v4)
    {
      v5 = v4 + 2;
      for (j = v4[2]; j; j = v7)
      {
        v7 = __ldxr(v5);
        if (v7 == j)
        {
          if (!__stxr(j + 1, v5))
          {
            v8 = (boost::signals2::detail::connection_body_base *)i[2];
            if (v8)
              boost::signals2::detail::connection_body_base::disconnect(v8);
            do
            {
              v9 = __ldaxr(v5);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v5));
            if (!v10)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
              v11 = v4 + 3;
              do
              {
                v12 = __ldaxr(v11);
                v13 = v12 - 1;
              }
              while (__stlxr(v13, v11));
              if (!v13)
                (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
            }
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
  }
  if (v1[43])
  {
    v14 = v1[41];
    v15 = (uint64_t *)v1[42];
    v16 = *v15;
    *(_QWORD *)(v16 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v16;
    v1[43] = 0;
    if (v15 != v2)
    {
      do
      {
        v26 = (uint64_t *)v15[1];
        v27 = (unsigned int *)v15[3];
        if (v27)
        {
          v28 = v27 + 3;
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
            (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 24))(v27);
        }
        operator delete(v15);
        v15 = v26;
      }
      while (v26 != v2);
    }
  }
  v17 = (std::__shared_weak_count *)v1[35];
  v1[34] = 0;
  v1[35] = 0;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)v1[33];
  v1[32] = 0;
  v1[33] = 0;
  if (!v20)
    goto LABEL_30;
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    v23 = (std::__shared_weak_count *)v1[23];
    v1[22] = 0;
    v1[23] = 0;
    if (!v23)
      return;
  }
  else
  {
LABEL_30:
    v23 = (std::__shared_weak_count *)v1[23];
    v1[22] = 0;
    v1[23] = 0;
    if (!v23)
      return;
  }
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
}

void sub_1BF3F07BC(_Unwind_Exception *exception_object)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  do
  {
    v4 = __ldaxr(v2);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v2));
  if (!v5)
  {
    (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1);
    v6 = v1 + 3;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 24))(v1);
  }
  _Unwind_Resume(exception_object);
}

void RadioModule::initialize(_QWORD *a1, NSObject **a2)
{
  uint64_t *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD v15[5];
  dispatch_group_t group;

  v3 = a1 + 15;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1174405120;
  v15[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v15[3] = &__block_descriptor_tmp_93;
  v4 = *a2;
  v15[4] = a1;
  group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v3, (uint64_t)v15);
  v5 = (std::__shared_weak_count *)a1[16];
  if (!v5 || (v6 = a1[15], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v9 = operator new(8uLL);
  *v9 = a1;
  v10 = a1[17];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = operator new(0x18uLL);
  *v13 = v9;
  v13[1] = v6;
  v13[2] = v8;
  dispatch_async_f(v10, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::initialize(dispatch::group_session)::$_0>(RadioModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void *v10;
  size_t v11;
  size_t v12;
  void **p_dst;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  const void *v19;
  size_t v20;
  size_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  const void *v27;
  size_t v28;
  size_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  const void *v35;
  size_t v36;
  size_t v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  const void *v43;
  size_t v44;
  size_t v45;
  void **v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  const void *v51;
  size_t v52;
  size_t v53;
  void **v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  const void *v59;
  size_t v60;
  size_t v61;
  void **v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  const void *v67;
  size_t v68;
  size_t v69;
  void **v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  const void *v75;
  size_t v76;
  size_t v77;
  void **v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  const void *v83;
  size_t v84;
  size_t v85;
  void **v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  const void *v91;
  size_t v92;
  size_t v93;
  void **v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  const void *v99;
  size_t v100;
  size_t v101;
  void **v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  const void *v107;
  size_t v108;
  size_t v109;
  void **v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void *v114;
  const void *v115;
  size_t v116;
  size_t v117;
  void **v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  void *v122;
  capabilities::abs *v123;
  const void *v124;
  size_t v125;
  size_t v126;
  void **v127;
  NSObject *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  const void *v133;
  size_t v134;
  size_t v135;
  void **v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  void *v140;
  const void *v141;
  size_t v142;
  size_t v143;
  void **v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  void *v148;
  const void *v149;
  size_t v150;
  size_t v151;
  void **v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  void *v156;
  const void *v157;
  size_t v158;
  size_t v159;
  void **v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  void *v164;
  const void *v165;
  size_t v166;
  size_t v167;
  void **v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  void *v172;
  const void *v173;
  size_t v174;
  size_t v175;
  void **v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  void *v180;
  capabilities::abs *v181;
  const void *v182;
  size_t v183;
  size_t v184;
  void **v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  void *v189;
  const void *v190;
  size_t v191;
  size_t v192;
  void **v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  void *v197;
  const void *v198;
  size_t v199;
  size_t v200;
  void **v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  void *v205;
  const void *v206;
  size_t v207;
  size_t v208;
  void **v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  void *v213;
  _QWORD v214[5];
  std::__shared_weak_count *v215;
  const void *v216;
  _QWORD v217[5];
  std::__shared_weak_count *v218;
  const void *v219;
  _QWORD v220[5];
  std::__shared_weak_count *v221;
  const void *v222;
  _QWORD v223[6];
  std::__shared_weak_count *v224;
  const void *v225;
  _QWORD v226[6];
  std::__shared_weak_count *v227;
  const void *v228;
  _QWORD v229[6];
  std::__shared_weak_count *v230;
  const void *v231;
  _QWORD v232[6];
  std::__shared_weak_count *v233;
  const void *v234;
  _QWORD v235[6];
  std::__shared_weak_count *v236;
  const void *v237;
  _QWORD v238[6];
  std::__shared_weak_count *v239;
  const void *v240;
  _QWORD v241[6];
  std::__shared_weak_count *v242;
  const void *v243;
  _QWORD v244[6];
  std::__shared_weak_count *v245;
  const void *v246;
  _QWORD v247[6];
  std::__shared_weak_count *v248;
  const void *v249;
  _QWORD v250[6];
  std::__shared_weak_count *v251;
  const void *v252;
  _QWORD v253[6];
  std::__shared_weak_count *v254;
  const void *v255;
  _QWORD v256[6];
  std::__shared_weak_count *v257;
  const void *v258;
  _QWORD v259[6];
  std::__shared_weak_count *v260;
  const void *v261;
  _QWORD v262[6];
  std::__shared_weak_count *v263;
  const void *v264;
  _QWORD v265[6];
  std::__shared_weak_count *v266;
  const void *v267;
  _QWORD v268[6];
  std::__shared_weak_count *v269;
  const void *v270;
  _QWORD v271[6];
  std::__shared_weak_count *v272;
  const void *v273;
  _QWORD v274[6];
  std::__shared_weak_count *v275;
  const void *v276;
  _QWORD v277[6];
  std::__shared_weak_count *v278;
  const void *v279;
  _QWORD v280[6];
  std::__shared_weak_count *v281;
  const void *v282;
  _QWORD v283[6];
  std::__shared_weak_count *v284;
  const void *v285;
  _QWORD aBlock[6];
  std::__shared_weak_count *v287;
  const void *v288;
  void **__dst;
  size_t v290;
  unint64_t v291;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = (std::__shared_weak_count *)v1[16];
  if (!v2 || (v3 = v1[15], (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (const void *)*MEMORY[0x1E0CFB720];
  v11 = strlen((const char *)*MEMORY[0x1E0CFB720]);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (void **)operator new(v14 + 1);
    v290 = v12;
    v291 = v15 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v291) = v11;
    p_dst = (void **)&__dst;
    if (!v11)
      goto LABEL_17;
  }
  memmove(p_dst, v10, v12);
LABEL_17:
  *((_BYTE *)p_dst + v12) = 0;
  v16 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_13_6;
  aBlock[4] = v1;
  aBlock[5] = v3;
  v287 = v5;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  v18 = _Block_copy(aBlock);
  v288 = v18;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v288);
  if (v18)
    _Block_release(v18);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v19 = (const void *)*MEMORY[0x1E0CFBDB0];
  v20 = strlen((const char *)*MEMORY[0x1E0CFBDB0]);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = (void **)operator new(v23 + 1);
    v290 = v21;
    v291 = v24 | 0x8000000000000000;
    __dst = v22;
  }
  else
  {
    HIBYTE(v291) = v20;
    v22 = (void **)&__dst;
    if (!v20)
      goto LABEL_31;
  }
  memmove(v22, v19, v21);
LABEL_31:
  *((_BYTE *)v22 + v21) = 0;
  v283[0] = v16;
  v283[1] = 1174405120;
  v283[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_14;
  v283[3] = &__block_descriptor_tmp_20_0;
  v283[4] = v1;
  v283[5] = v3;
  v284 = v5;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  v26 = _Block_copy(v283);
  v285 = v26;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v285);
  if (v26)
    _Block_release(v26);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v27 = (const void *)*MEMORY[0x1E0CFBEC8];
  v28 = strlen((const char *)*MEMORY[0x1E0CFBEC8]);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v29 = v28;
  if (v28 >= 0x17)
  {
    v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v31 = v28 | 7;
    v32 = v31 + 1;
    v30 = (void **)operator new(v31 + 1);
    v290 = v29;
    v291 = v32 | 0x8000000000000000;
    __dst = v30;
  }
  else
  {
    HIBYTE(v291) = v28;
    v30 = (void **)&__dst;
    if (!v28)
      goto LABEL_45;
  }
  memmove(v30, v27, v29);
LABEL_45:
  *((_BYTE *)v30 + v29) = 0;
  v280[0] = v16;
  v280[1] = 1174405120;
  v280[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_21;
  v280[3] = &__block_descriptor_tmp_27_2;
  v280[4] = v1;
  v280[5] = v3;
  v281 = v5;
  do
    v33 = __ldxr(p_shared_weak_owners);
  while (__stxr(v33 + 1, p_shared_weak_owners));
  v34 = _Block_copy(v280);
  v282 = v34;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v282);
  if (v34)
    _Block_release(v34);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v35 = (const void *)*MEMORY[0x1E0CFBED8];
  v36 = strlen((const char *)*MEMORY[0x1E0CFBED8]);
  if (v36 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v37 = v36;
  if (v36 >= 0x17)
  {
    v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v39 = v36 | 7;
    v40 = v39 + 1;
    v38 = (void **)operator new(v39 + 1);
    v290 = v37;
    v291 = v40 | 0x8000000000000000;
    __dst = v38;
  }
  else
  {
    HIBYTE(v291) = v36;
    v38 = (void **)&__dst;
    if (!v36)
      goto LABEL_59;
  }
  memmove(v38, v35, v37);
LABEL_59:
  *((_BYTE *)v38 + v37) = 0;
  v277[0] = v16;
  v277[1] = 1174405120;
  v277[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_28;
  v277[3] = &__block_descriptor_tmp_34_0;
  v277[4] = v1;
  v277[5] = v3;
  v278 = v5;
  do
    v41 = __ldxr(p_shared_weak_owners);
  while (__stxr(v41 + 1, p_shared_weak_owners));
  v42 = _Block_copy(v277);
  v279 = v42;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v279);
  if (v42)
    _Block_release(v42);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v43 = (const void *)*MEMORY[0x1E0CFBEC0];
  v44 = strlen((const char *)*MEMORY[0x1E0CFBEC0]);
  if (v44 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v45 = v44;
  if (v44 >= 0x17)
  {
    v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v47 = v44 | 7;
    v48 = v47 + 1;
    v46 = (void **)operator new(v47 + 1);
    v290 = v45;
    v291 = v48 | 0x8000000000000000;
    __dst = v46;
  }
  else
  {
    HIBYTE(v291) = v44;
    v46 = (void **)&__dst;
    if (!v44)
      goto LABEL_73;
  }
  memmove(v46, v43, v45);
LABEL_73:
  *((_BYTE *)v46 + v45) = 0;
  v274[0] = v16;
  v274[1] = 1174405120;
  v274[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_35;
  v274[3] = &__block_descriptor_tmp_40;
  v274[4] = v1;
  v274[5] = v3;
  v275 = v5;
  do
    v49 = __ldxr(p_shared_weak_owners);
  while (__stxr(v49 + 1, p_shared_weak_owners));
  v50 = _Block_copy(v274);
  v276 = v50;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v276);
  if (v50)
    _Block_release(v50);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v51 = (const void *)*MEMORY[0x1E0CFBC40];
  v52 = strlen((const char *)*MEMORY[0x1E0CFBC40]);
  if (v52 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v53 = v52;
  if (v52 >= 0x17)
  {
    v55 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v52 | 7) != 0x17)
      v55 = v52 | 7;
    v56 = v55 + 1;
    v54 = (void **)operator new(v55 + 1);
    v290 = v53;
    v291 = v56 | 0x8000000000000000;
    __dst = v54;
  }
  else
  {
    HIBYTE(v291) = v52;
    v54 = (void **)&__dst;
    if (!v52)
      goto LABEL_87;
  }
  memmove(v54, v51, v53);
LABEL_87:
  *((_BYTE *)v54 + v53) = 0;
  v271[0] = v16;
  v271[1] = 1174405120;
  v271[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_41;
  v271[3] = &__block_descriptor_tmp_44_0;
  v271[4] = v1;
  v271[5] = v3;
  v272 = v5;
  do
    v57 = __ldxr(p_shared_weak_owners);
  while (__stxr(v57 + 1, p_shared_weak_owners));
  v58 = _Block_copy(v271);
  v273 = v58;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v273);
  if (v58)
    _Block_release(v58);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v59 = (const void *)*MEMORY[0x1E0CFBC50];
  v60 = strlen((const char *)*MEMORY[0x1E0CFBC50]);
  if (v60 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v61 = v60;
  if (v60 >= 0x17)
  {
    v63 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v60 | 7) != 0x17)
      v63 = v60 | 7;
    v64 = v63 + 1;
    v62 = (void **)operator new(v63 + 1);
    v290 = v61;
    v291 = v64 | 0x8000000000000000;
    __dst = v62;
  }
  else
  {
    HIBYTE(v291) = v60;
    v62 = (void **)&__dst;
    if (!v60)
      goto LABEL_101;
  }
  memmove(v62, v59, v61);
LABEL_101:
  *((_BYTE *)v62 + v61) = 0;
  v268[0] = v16;
  v268[1] = 1174405120;
  v268[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_45;
  v268[3] = &__block_descriptor_tmp_52_0;
  v268[4] = v1;
  v268[5] = v3;
  v269 = v5;
  do
    v65 = __ldxr(p_shared_weak_owners);
  while (__stxr(v65 + 1, p_shared_weak_owners));
  v66 = _Block_copy(v268);
  v270 = v66;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v270);
  if (v66)
    _Block_release(v66);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v67 = (const void *)*MEMORY[0x1E0CFB0A8];
  v68 = strlen((const char *)*MEMORY[0x1E0CFB0A8]);
  if (v68 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v69 = v68;
  if (v68 >= 0x17)
  {
    v71 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v68 | 7) != 0x17)
      v71 = v68 | 7;
    v72 = v71 + 1;
    v70 = (void **)operator new(v71 + 1);
    v290 = v69;
    v291 = v72 | 0x8000000000000000;
    __dst = v70;
  }
  else
  {
    HIBYTE(v291) = v68;
    v70 = (void **)&__dst;
    if (!v68)
      goto LABEL_115;
  }
  memmove(v70, v67, v69);
LABEL_115:
  *((_BYTE *)v70 + v69) = 0;
  v265[0] = v16;
  v265[1] = 1174405120;
  v265[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_53;
  v265[3] = &__block_descriptor_tmp_58_1;
  v265[4] = v1;
  v265[5] = v3;
  v266 = v5;
  do
    v73 = __ldxr(p_shared_weak_owners);
  while (__stxr(v73 + 1, p_shared_weak_owners));
  v74 = _Block_copy(v265);
  v267 = v74;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v267);
  if (v74)
    _Block_release(v74);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v75 = (const void *)*MEMORY[0x1E0CFC020];
  v76 = strlen((const char *)*MEMORY[0x1E0CFC020]);
  if (v76 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v77 = v76;
  if (v76 >= 0x17)
  {
    v79 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v76 | 7) != 0x17)
      v79 = v76 | 7;
    v80 = v79 + 1;
    v78 = (void **)operator new(v79 + 1);
    v290 = v77;
    v291 = v80 | 0x8000000000000000;
    __dst = v78;
  }
  else
  {
    HIBYTE(v291) = v76;
    v78 = (void **)&__dst;
    if (!v76)
      goto LABEL_129;
  }
  memmove(v78, v75, v77);
LABEL_129:
  *((_BYTE *)v78 + v77) = 0;
  v262[0] = v16;
  v262[1] = 1174405120;
  v262[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_59;
  v262[3] = &__block_descriptor_tmp_60;
  v262[4] = v1;
  v262[5] = v3;
  v263 = v5;
  do
    v81 = __ldxr(p_shared_weak_owners);
  while (__stxr(v81 + 1, p_shared_weak_owners));
  v82 = _Block_copy(v262);
  v264 = v82;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v264);
  if (v82)
    _Block_release(v82);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v83 = (const void *)*MEMORY[0x1E0CFB430];
  v84 = strlen((const char *)*MEMORY[0x1E0CFB430]);
  if (v84 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v85 = v84;
  if (v84 >= 0x17)
  {
    v87 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v84 | 7) != 0x17)
      v87 = v84 | 7;
    v88 = v87 + 1;
    v86 = (void **)operator new(v87 + 1);
    v290 = v85;
    v291 = v88 | 0x8000000000000000;
    __dst = v86;
  }
  else
  {
    HIBYTE(v291) = v84;
    v86 = (void **)&__dst;
    if (!v84)
      goto LABEL_143;
  }
  memmove(v86, v83, v85);
LABEL_143:
  *((_BYTE *)v86 + v85) = 0;
  v259[0] = v16;
  v259[1] = 1174405120;
  v259[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_61;
  v259[3] = &__block_descriptor_tmp_62_1;
  v259[4] = v1;
  v259[5] = v3;
  v260 = v5;
  do
    v89 = __ldxr(p_shared_weak_owners);
  while (__stxr(v89 + 1, p_shared_weak_owners));
  v90 = _Block_copy(v259);
  v261 = v90;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v261);
  if (v90)
    _Block_release(v90);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v91 = (const void *)*MEMORY[0x1E0CFBB50];
  v92 = strlen((const char *)*MEMORY[0x1E0CFBB50]);
  if (v92 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v93 = v92;
  if (v92 >= 0x17)
  {
    v95 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v92 | 7) != 0x17)
      v95 = v92 | 7;
    v96 = v95 + 1;
    v94 = (void **)operator new(v95 + 1);
    v290 = v93;
    v291 = v96 | 0x8000000000000000;
    __dst = v94;
  }
  else
  {
    HIBYTE(v291) = v92;
    v94 = (void **)&__dst;
    if (!v92)
      goto LABEL_157;
  }
  memmove(v94, v91, v93);
LABEL_157:
  *((_BYTE *)v94 + v93) = 0;
  v256[0] = v16;
  v256[1] = 1174405120;
  v256[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_63;
  v256[3] = &__block_descriptor_tmp_64_1;
  v256[4] = v1;
  v256[5] = v3;
  v257 = v5;
  do
    v97 = __ldxr(p_shared_weak_owners);
  while (__stxr(v97 + 1, p_shared_weak_owners));
  v98 = _Block_copy(v256);
  v258 = v98;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v258);
  if (v98)
    _Block_release(v98);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v99 = (const void *)*MEMORY[0x1E0CFBCE8];
  v100 = strlen((const char *)*MEMORY[0x1E0CFBCE8]);
  if (v100 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v101 = v100;
  if (v100 >= 0x17)
  {
    v103 = (v100 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v100 | 7) != 0x17)
      v103 = v100 | 7;
    v104 = v103 + 1;
    v102 = (void **)operator new(v103 + 1);
    v290 = v101;
    v291 = v104 | 0x8000000000000000;
    __dst = v102;
  }
  else
  {
    HIBYTE(v291) = v100;
    v102 = (void **)&__dst;
    if (!v100)
      goto LABEL_171;
  }
  memmove(v102, v99, v101);
LABEL_171:
  *((_BYTE *)v102 + v101) = 0;
  v253[0] = v16;
  v253[1] = 1174405120;
  v253[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_65;
  v253[3] = &__block_descriptor_tmp_66_0;
  v253[4] = v1;
  v253[5] = v3;
  v254 = v5;
  do
    v105 = __ldxr(p_shared_weak_owners);
  while (__stxr(v105 + 1, p_shared_weak_owners));
  v106 = _Block_copy(v253);
  v255 = v106;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v255);
  if (v106)
    _Block_release(v106);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v107 = (const void *)*MEMORY[0x1E0CFB688];
  v108 = strlen((const char *)*MEMORY[0x1E0CFB688]);
  if (v108 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v109 = v108;
  if (v108 >= 0x17)
  {
    v111 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v108 | 7) != 0x17)
      v111 = v108 | 7;
    v112 = v111 + 1;
    v110 = (void **)operator new(v111 + 1);
    v290 = v109;
    v291 = v112 | 0x8000000000000000;
    __dst = v110;
  }
  else
  {
    HIBYTE(v291) = v108;
    v110 = (void **)&__dst;
    if (!v108)
      goto LABEL_185;
  }
  memmove(v110, v107, v109);
LABEL_185:
  *((_BYTE *)v110 + v109) = 0;
  v250[0] = v16;
  v250[1] = 1174405120;
  v250[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_67;
  v250[3] = &__block_descriptor_tmp_68_1;
  v250[4] = v1;
  v250[5] = v3;
  v251 = v5;
  do
    v113 = __ldxr(p_shared_weak_owners);
  while (__stxr(v113 + 1, p_shared_weak_owners));
  v114 = _Block_copy(v250);
  v252 = v114;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v252);
  if (v114)
    _Block_release(v114);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v115 = (const void *)*MEMORY[0x1E0CFBFC0];
  v116 = strlen((const char *)*MEMORY[0x1E0CFBFC0]);
  if (v116 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v117 = v116;
  if (v116 >= 0x17)
  {
    v119 = (v116 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v116 | 7) != 0x17)
      v119 = v116 | 7;
    v120 = v119 + 1;
    v118 = (void **)operator new(v119 + 1);
    v290 = v117;
    v291 = v120 | 0x8000000000000000;
    __dst = v118;
  }
  else
  {
    HIBYTE(v291) = v116;
    v118 = (void **)&__dst;
    if (!v116)
      goto LABEL_199;
  }
  memmove(v118, v115, v117);
LABEL_199:
  *((_BYTE *)v118 + v117) = 0;
  v247[0] = v16;
  v247[1] = 1174405120;
  v247[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_69;
  v247[3] = &__block_descriptor_tmp_70_1;
  v247[4] = v1;
  v247[5] = v3;
  v248 = v5;
  do
    v121 = __ldxr(p_shared_weak_owners);
  while (__stxr(v121 + 1, p_shared_weak_owners));
  v122 = _Block_copy(v247);
  v249 = v122;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v249);
  if (v122)
    _Block_release(v122);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  if (capabilities::abs::supportsRFSelfTest(v123))
  {
    v124 = (const void *)*MEMORY[0x1E0CFBF48];
    v125 = strlen((const char *)*MEMORY[0x1E0CFBF48]);
    if (v125 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v126 = v125;
    if (v125 >= 0x17)
    {
      v129 = (v125 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v125 | 7) != 0x17)
        v129 = v125 | 7;
      v130 = v129 + 1;
      v127 = (void **)operator new(v129 + 1);
      v290 = v126;
      v291 = v130 | 0x8000000000000000;
      __dst = v127;
    }
    else
    {
      HIBYTE(v291) = v125;
      v127 = (void **)&__dst;
      if (!v125)
        goto LABEL_216;
    }
    memmove(v127, v124, v126);
LABEL_216:
    *((_BYTE *)v127 + v126) = 0;
    v244[0] = v16;
    v244[1] = 1174405120;
    v244[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_71;
    v244[3] = &__block_descriptor_tmp_72;
    v244[4] = v1;
    v244[5] = v3;
    v245 = v5;
    do
      v131 = __ldxr(p_shared_weak_owners);
    while (__stxr(v131 + 1, p_shared_weak_owners));
    v132 = _Block_copy(v244);
    v246 = v132;
    Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v246);
    if (v132)
      _Block_release(v132);
    if (SHIBYTE(v291) < 0)
      operator delete(__dst);
    v133 = (const void *)*MEMORY[0x1E0CFBF50];
    v134 = strlen((const char *)*MEMORY[0x1E0CFBF50]);
    if (v134 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v135 = v134;
    if (v134 >= 0x17)
    {
      v137 = (v134 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v134 | 7) != 0x17)
        v137 = v134 | 7;
      v138 = v137 + 1;
      v136 = (void **)operator new(v137 + 1);
      v290 = v135;
      v291 = v138 | 0x8000000000000000;
      __dst = v136;
    }
    else
    {
      HIBYTE(v291) = v134;
      v136 = (void **)&__dst;
      if (!v134)
        goto LABEL_230;
    }
    memmove(v136, v133, v135);
LABEL_230:
    *((_BYTE *)v136 + v135) = 0;
    v241[0] = v16;
    v241[1] = 1174405120;
    v241[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_73;
    v241[3] = &__block_descriptor_tmp_74_0;
    v241[4] = v1;
    v241[5] = v3;
    v242 = v5;
    do
      v139 = __ldxr(p_shared_weak_owners);
    while (__stxr(v139 + 1, p_shared_weak_owners));
    v140 = _Block_copy(v241);
    v243 = v140;
    Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v243);
    if (v140)
      _Block_release(v140);
    if (SHIBYTE(v291) < 0)
      operator delete(__dst);
    v141 = (const void *)*MEMORY[0x1E0CFC010];
    v142 = strlen((const char *)*MEMORY[0x1E0CFC010]);
    if (v142 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v143 = v142;
    if (v142 >= 0x17)
    {
      v145 = (v142 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v142 | 7) != 0x17)
        v145 = v142 | 7;
      v146 = v145 + 1;
      v144 = (void **)operator new(v145 + 1);
      v290 = v143;
      v291 = v146 | 0x8000000000000000;
      __dst = v144;
    }
    else
    {
      HIBYTE(v291) = v142;
      v144 = (void **)&__dst;
      if (!v142)
      {
LABEL_244:
        *((_BYTE *)v144 + v143) = 0;
        v238[0] = v16;
        v238[1] = 1174405120;
        v238[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_75;
        v238[3] = &__block_descriptor_tmp_76_0;
        v238[4] = v1;
        v238[5] = v3;
        v239 = v5;
        do
          v147 = __ldxr(p_shared_weak_owners);
        while (__stxr(v147 + 1, p_shared_weak_owners));
        v148 = _Block_copy(v238);
        v240 = v148;
        Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v240);
        if (v148)
          _Block_release(v148);
        if (SHIBYTE(v291) < 0)
          operator delete(__dst);
        if (v239)
          std::__shared_weak_count::__release_weak(v239);
        if (v242)
          std::__shared_weak_count::__release_weak(v242);
        if (v245)
          std::__shared_weak_count::__release_weak(v245);
        goto LABEL_256;
      }
    }
    memmove(v144, v141, v143);
    goto LABEL_244;
  }
  v128 = v1[11];
  if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__dst) = 0;
    _os_log_impl(&dword_1BF335000, v128, OS_LOG_TYPE_DEFAULT, "#I RF Self Test not supported", (uint8_t *)&__dst, 2u);
  }
LABEL_256:
  v149 = (const void *)*MEMORY[0x1E0CFB898];
  v150 = strlen((const char *)*MEMORY[0x1E0CFB898]);
  if (v150 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v151 = v150;
  if (v150 >= 0x17)
  {
    v153 = (v150 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v150 | 7) != 0x17)
      v153 = v150 | 7;
    v154 = v153 + 1;
    v152 = (void **)operator new(v153 + 1);
    v290 = v151;
    v291 = v154 | 0x8000000000000000;
    __dst = v152;
  }
  else
  {
    HIBYTE(v291) = v150;
    v152 = (void **)&__dst;
    if (!v150)
      goto LABEL_264;
  }
  memmove(v152, v149, v151);
LABEL_264:
  *((_BYTE *)v152 + v151) = 0;
  v235[0] = v16;
  v235[1] = 1174405120;
  v235[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_77;
  v235[3] = &__block_descriptor_tmp_78_0;
  v235[4] = v1;
  v235[5] = v3;
  v236 = v5;
  do
    v155 = __ldxr(p_shared_weak_owners);
  while (__stxr(v155 + 1, p_shared_weak_owners));
  v156 = _Block_copy(v235);
  v237 = v156;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v237);
  if (v156)
    _Block_release(v156);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v157 = (const void *)*MEMORY[0x1E0CFB5D8];
  v158 = strlen((const char *)*MEMORY[0x1E0CFB5D8]);
  if (v158 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v159 = v158;
  if (v158 >= 0x17)
  {
    v161 = (v158 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v158 | 7) != 0x17)
      v161 = v158 | 7;
    v162 = v161 + 1;
    v160 = (void **)operator new(v161 + 1);
    v290 = v159;
    v291 = v162 | 0x8000000000000000;
    __dst = v160;
  }
  else
  {
    HIBYTE(v291) = v158;
    v160 = (void **)&__dst;
    if (!v158)
      goto LABEL_278;
  }
  memmove(v160, v157, v159);
LABEL_278:
  *((_BYTE *)v160 + v159) = 0;
  v232[0] = v16;
  v232[1] = 1174405120;
  v232[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_79;
  v232[3] = &__block_descriptor_tmp_80;
  v232[4] = v1;
  v232[5] = v3;
  v233 = v5;
  do
    v163 = __ldxr(p_shared_weak_owners);
  while (__stxr(v163 + 1, p_shared_weak_owners));
  v164 = _Block_copy(v232);
  v234 = v164;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v234);
  if (v164)
    _Block_release(v164);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v165 = (const void *)*MEMORY[0x1E0CFB5E8];
  v166 = strlen((const char *)*MEMORY[0x1E0CFB5E8]);
  if (v166 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v167 = v166;
  if (v166 >= 0x17)
  {
    v169 = (v166 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v166 | 7) != 0x17)
      v169 = v166 | 7;
    v170 = v169 + 1;
    v168 = (void **)operator new(v169 + 1);
    v290 = v167;
    v291 = v170 | 0x8000000000000000;
    __dst = v168;
  }
  else
  {
    HIBYTE(v291) = v166;
    v168 = (void **)&__dst;
    if (!v166)
      goto LABEL_292;
  }
  memmove(v168, v165, v167);
LABEL_292:
  *((_BYTE *)v168 + v167) = 0;
  v229[0] = v16;
  v229[1] = 1174405120;
  v229[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_81;
  v229[3] = &__block_descriptor_tmp_82;
  v229[4] = v1;
  v229[5] = v3;
  v230 = v5;
  do
    v171 = __ldxr(p_shared_weak_owners);
  while (__stxr(v171 + 1, p_shared_weak_owners));
  v172 = _Block_copy(v229);
  v231 = v172;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v231);
  if (v172)
    _Block_release(v172);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v173 = (const void *)*MEMORY[0x1E0CFB050];
  v174 = strlen((const char *)*MEMORY[0x1E0CFB050]);
  if (v174 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v175 = v174;
  if (v174 >= 0x17)
  {
    v177 = (v174 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v174 | 7) != 0x17)
      v177 = v174 | 7;
    v178 = v177 + 1;
    v176 = (void **)operator new(v177 + 1);
    v290 = v175;
    v291 = v178 | 0x8000000000000000;
    __dst = v176;
  }
  else
  {
    HIBYTE(v291) = v174;
    v176 = (void **)&__dst;
    if (!v174)
      goto LABEL_306;
  }
  memmove(v176, v173, v175);
LABEL_306:
  *((_BYTE *)v176 + v175) = 0;
  v226[0] = v16;
  v226[1] = 1174405120;
  v226[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_83;
  v226[3] = &__block_descriptor_tmp_84;
  v226[4] = v1;
  v226[5] = v3;
  v227 = v5;
  do
    v179 = __ldxr(p_shared_weak_owners);
  while (__stxr(v179 + 1, p_shared_weak_owners));
  v180 = _Block_copy(v226);
  v228 = v180;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v228);
  if (v180)
    _Block_release(v180);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  if (capabilities::abs::supportsRFFEScanData(v181))
  {
    v182 = (const void *)*MEMORY[0x1E0CFBE38];
    v183 = strlen((const char *)*MEMORY[0x1E0CFBE38]);
    if (v183 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v184 = v183;
    if (v183 >= 0x17)
    {
      v186 = (v183 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v183 | 7) != 0x17)
        v186 = v183 | 7;
      v187 = v186 + 1;
      v185 = (void **)operator new(v186 + 1);
      v290 = v184;
      v291 = v187 | 0x8000000000000000;
      __dst = v185;
    }
    else
    {
      HIBYTE(v291) = v183;
      v185 = (void **)&__dst;
      if (!v183)
      {
LABEL_321:
        *((_BYTE *)v185 + v184) = 0;
        v223[0] = v16;
        v223[1] = 1174405120;
        v223[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_85;
        v223[3] = &__block_descriptor_tmp_86;
        v223[4] = v1;
        v223[5] = v3;
        v224 = v5;
        do
          v188 = __ldxr(p_shared_weak_owners);
        while (__stxr(v188 + 1, p_shared_weak_owners));
        v189 = _Block_copy(v223);
        v225 = v189;
        Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v225);
        if (v189)
          _Block_release(v189);
        if (SHIBYTE(v291) < 0)
          operator delete(__dst);
        if (v224)
          std::__shared_weak_count::__release_weak(v224);
        goto LABEL_329;
      }
    }
    memmove(v185, v182, v184);
    goto LABEL_321;
  }
LABEL_329:
  v190 = (const void *)*MEMORY[0x1E0CFBD58];
  v191 = strlen((const char *)*MEMORY[0x1E0CFBD58]);
  if (v191 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v192 = v191;
  if (v191 >= 0x17)
  {
    v194 = (v191 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v191 | 7) != 0x17)
      v194 = v191 | 7;
    v195 = v194 + 1;
    v193 = (void **)operator new(v194 + 1);
    v290 = v192;
    v291 = v195 | 0x8000000000000000;
    __dst = v193;
  }
  else
  {
    HIBYTE(v291) = v191;
    v193 = (void **)&__dst;
    if (!v191)
      goto LABEL_337;
  }
  memmove(v193, v190, v192);
LABEL_337:
  *((_BYTE *)v193 + v192) = 0;
  v220[0] = v16;
  v220[1] = 1174405120;
  v220[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_87;
  v220[3] = &__block_descriptor_tmp_88_0;
  v220[4] = v3;
  v221 = v5;
  do
    v196 = __ldxr(p_shared_weak_owners);
  while (__stxr(v196 + 1, p_shared_weak_owners));
  v197 = _Block_copy(v220);
  v222 = v197;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v222);
  if (v197)
    _Block_release(v197);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v198 = (const void *)*MEMORY[0x1E0CFBC58];
  v199 = strlen((const char *)*MEMORY[0x1E0CFBC58]);
  if (v199 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v200 = v199;
  if (v199 >= 0x17)
  {
    v202 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v199 | 7) != 0x17)
      v202 = v199 | 7;
    v203 = v202 + 1;
    v201 = (void **)operator new(v202 + 1);
    v290 = v200;
    v291 = v203 | 0x8000000000000000;
    __dst = v201;
  }
  else
  {
    HIBYTE(v291) = v199;
    v201 = (void **)&__dst;
    if (!v199)
      goto LABEL_351;
  }
  memmove(v201, v198, v200);
LABEL_351:
  *((_BYTE *)v201 + v200) = 0;
  v217[0] = v16;
  v217[1] = 1174405120;
  v217[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_89;
  v217[3] = &__block_descriptor_tmp_90;
  v217[4] = v3;
  v218 = v5;
  do
    v204 = __ldxr(p_shared_weak_owners);
  while (__stxr(v204 + 1, p_shared_weak_owners));
  v205 = _Block_copy(v217);
  v219 = v205;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v219);
  if (v205)
    _Block_release(v205);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v206 = (const void *)*MEMORY[0x1E0CFBC48];
  v207 = strlen((const char *)*MEMORY[0x1E0CFBC48]);
  if (v207 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v208 = v207;
  if (v207 >= 0x17)
  {
    v210 = (v207 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v207 | 7) != 0x17)
      v210 = v207 | 7;
    v211 = v210 + 1;
    v209 = (void **)operator new(v210 + 1);
    v290 = v208;
    v291 = v211 | 0x8000000000000000;
    __dst = v209;
  }
  else
  {
    HIBYTE(v291) = v207;
    v209 = (void **)&__dst;
    if (!v207)
      goto LABEL_365;
  }
  memmove(v209, v206, v208);
LABEL_365:
  *((_BYTE *)v209 + v208) = 0;
  v214[0] = v16;
  v214[1] = 1174405120;
  v214[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_91;
  v214[3] = &__block_descriptor_tmp_92;
  v214[4] = v3;
  v215 = v5;
  do
    v212 = __ldxr(p_shared_weak_owners);
  while (__stxr(v212 + 1, p_shared_weak_owners));
  v213 = _Block_copy(v214);
  v216 = v213;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v216);
  if (v213)
    _Block_release(v213);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  if (v215)
    std::__shared_weak_count::__release_weak(v215);
  if (v218)
    std::__shared_weak_count::__release_weak(v218);
  if (v221)
    std::__shared_weak_count::__release_weak(v221);
  if (v227)
    std::__shared_weak_count::__release_weak(v227);
  if (v230)
    std::__shared_weak_count::__release_weak(v230);
  if (v233)
    std::__shared_weak_count::__release_weak(v233);
  if (v236)
    std::__shared_weak_count::__release_weak(v236);
  if (v248)
    std::__shared_weak_count::__release_weak(v248);
  if (v251)
    std::__shared_weak_count::__release_weak(v251);
  if (v254)
    std::__shared_weak_count::__release_weak(v254);
  if (v257)
    std::__shared_weak_count::__release_weak(v257);
  if (v260)
    std::__shared_weak_count::__release_weak(v260);
  if (v263)
    std::__shared_weak_count::__release_weak(v263);
  if (v266)
    std::__shared_weak_count::__release_weak(v266);
  if (v269)
    std::__shared_weak_count::__release_weak(v269);
  if (v272)
    std::__shared_weak_count::__release_weak(v272);
  if (v275)
    std::__shared_weak_count::__release_weak(v275);
  if (v278)
    std::__shared_weak_count::__release_weak(v278);
  if (v281)
    std::__shared_weak_count::__release_weak(v281);
  if (v284)
    std::__shared_weak_count::__release_weak(v284);
  if (v287)
    std::__shared_weak_count::__release_weak(v287);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF3F2460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,std::__shared_weak_count *a61,uint64_t a62,uint64_t a63)
{
  std::__shared_weak_count *a69;
  std::__shared_weak_count *v69;
  const void *v70;
  uint64_t v71;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;

  if (v70)
    _Block_release(v70);
  if (a37)
    std::__shared_weak_count::__release_weak(a37);
  if (*(char *)(v71 - 105) < 0)
    operator delete(*(void **)(v71 - 128));
  if (a45)
    std::__shared_weak_count::__release_weak(a45);
  if (a53)
    std::__shared_weak_count::__release_weak(a53);
  if (a61)
    std::__shared_weak_count::__release_weak(a61);
  if (a69)
    std::__shared_weak_count::__release_weak(a69);
  if (STACK[0x2E0])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x2E0]);
  if (STACK[0x320])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x320]);
  if (STACK[0x360])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x360]);
  if (STACK[0x3A0])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x3A0]);
  if (STACK[0x3E0])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x3E0]);
  if (STACK[0x420])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x420]);
  if (STACK[0x460])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x460]);
  if (STACK[0x4A0])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x4A0]);
  if (STACK[0x4E0])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x4E0]);
  if (STACK[0x520])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x520]);
  if (STACK[0x560])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x560]);
  if (STACK[0x5A0])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x5A0]);
  v73 = *(std::__shared_weak_count **)(v71 - 208);
  if (v73)
    std::__shared_weak_count::__release_weak(v73);
  v74 = *(std::__shared_weak_count **)(v71 - 144);
  if (v74)
    std::__shared_weak_count::__release_weak(v74);
  std::__shared_weak_count::__release_weak(v69);
  _Unwind_Resume(a1);
}

void sub_1BF3F2BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;

  if (!a69)
    JUMPOUT(0x1BF3F2B30);
  JUMPOUT(0x1BF3F2B2CLL);
}

void sub_1BF3F2BF8()
{
  JUMPOUT(0x1BF3F2B30);
}

void sub_1BF3F2C00()
{
  if (!STACK[0x320])
    JUMPOUT(0x1BF3F2B48);
  JUMPOUT(0x1BF3F2B44);
}

void sub_1BF3F2C10()
{
  JUMPOUT(0x1BF3F2B48);
}

void sub_1BF3F2C18()
{
  if (!STACK[0x3A0])
    JUMPOUT(0x1BF3F2B60);
  JUMPOUT(0x1BF3F2B5CLL);
}

void sub_1BF3F2C28()
{
  JUMPOUT(0x1BF3F2B60);
}

void sub_1BF3F2C30()
{
  if (!STACK[0x420])
    JUMPOUT(0x1BF3F2B78);
  JUMPOUT(0x1BF3F2B74);
}

void sub_1BF3F2C40()
{
  JUMPOUT(0x1BF3F2B78);
}

void sub_1BF3F2C48()
{
  if (!STACK[0x4A0])
    JUMPOUT(0x1BF3F2B90);
  JUMPOUT(0x1BF3F2B8CLL);
}

void sub_1BF3F2C58()
{
  JUMPOUT(0x1BF3F2B90);
}

void sub_1BF3F2C60()
{
  if (!STACK[0x520])
    JUMPOUT(0x1BF3F2BA8);
  JUMPOUT(0x1BF3F2BA4);
}

void sub_1BF3F2C70()
{
  JUMPOUT(0x1BF3F2BA8);
}

void sub_1BF3F2C78()
{
  if (!STACK[0x5A0])
    JUMPOUT(0x1BF3F2BC0);
  JUMPOUT(0x1BF3F2BBCLL);
}

void sub_1BF3F2C88()
{
  JUMPOUT(0x1BF3F2BC0);
}

void sub_1BF3F2C90()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 144))
    JUMPOUT(0x1BF3F2BD8);
  JUMPOUT(0x1BF3F2BD4);
}

void sub_1BF3F2CA0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_14(_QWORD *a1, uint64_t a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[5];
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      if (a1[5])
      {
        v12[0] = MEMORY[0x1E0C809B0];
        v12[1] = 1174405120;
        v12[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_15;
        v12[3] = &__block_descriptor_tmp_19_1;
        v12[4] = v6;
        v9 = *a3;
        if (*a3)
          v9 = _Block_copy(v9);
        aBlock = v9;
        ctu::SharedSynchronizable<RadioModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v12);
        if (aBlock)
          _Block_release(aBlock);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_15(uint64_t a1)
{
  _QWORD *v2;
  const void *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  void *v7;
  void (**v8)(void *, std::string *);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  std::string *v12;
  __int128 v13;
  NSObject *v14;
  uint64_t *v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  void *v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  void *v23;
  void **v24;
  xpc_object_t v25;
  xpc_object_t v26;
  _QWORD v27[5];
  void *aBlock;
  void (**v29)(void *, std::string *);
  unsigned int v30;
  void *__p[4];
  std::string __dst;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 32);
  if ((*(unsigned int (**)(_QWORD *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    v3 = (const void *)*MEMORY[0x1E0CFBDB0];
    v4 = strlen((const char *)*MEMORY[0x1E0CFBDB0]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v9 = v4 | 7;
      v10 = v9 + 1;
      p_dst = (std::string *)operator new(v9 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_16:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        v11 = (char *)operator new(0x28uLL);
        strcpy(v11, " rejected; ABM is shutting down ");
        v12 = std::string::append(&__dst, v11, 0x20uLL);
        v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
        __p[2] = (void *)v12->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v13;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        operator delete(v11);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v14 = v2[11];
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
LABEL_18:
            v16 = *(_QWORD *)(a1 + 40);
            v15 = (uint64_t *)(a1 + 40);
            if (!v16)
            {
LABEL_40:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              return;
            }
LABEL_24:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v19 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v19 = __p[1];
            if (v19)
            {
              v20 = xpc_dictionary_create(0, 0, 0);
              if (v20 || (v20 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8A86C](v20) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v20);
                  v21 = v20;
                }
                else
                {
                  v21 = xpc_null_create();
                }
              }
              else
              {
                v21 = xpc_null_create();
                v20 = 0;
              }
              xpc_release(v20);
              v22 = xpc_null_create();
              v23 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
              xpc_release(v23);
              xpc_release(v22);
              if (SHIBYTE(__p[2]) >= 0)
                v24 = __p;
              else
                v24 = (void **)__p[0];
              v25 = xpc_string_create((const char *)v24);
              if (!v25)
                v25 = xpc_null_create();
              xpc_dictionary_set_value(v21, (const char *)*MEMORY[0x1E0CFB0D0], v25);
              v26 = xpc_null_create();
              xpc_release(v25);
              xpc_release(v26);
            }
            v30 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v15, &v30, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_40;
          }
        }
        else
        {
          v14 = v2[11];
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
            goto LABEL_18;
        }
        v17 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v17 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
        _os_log_impl(&dword_1BF335000, v14, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v18 = *(_QWORD *)(a1 + 40);
        v15 = (uint64_t *)(a1 + 40);
        if (!v18)
          goto LABEL_40;
        goto LABEL_24;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_16;
  }
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 1174405120;
  v27[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_16;
  v27[3] = &__block_descriptor_tmp_18_4;
  v27[4] = v2;
  v7 = *(void **)(a1 + 40);
  if (v7)
    v7 = _Block_copy(v7);
  aBlock = v7;
  v8 = (void (**)(void *, std::string *))_Block_copy(v27);
  v29 = v8;
  RadioModule::getVersion_sync((uint64_t)v2, &v29);
  if (v8)
    _Block_release(v8);
  if (aBlock)
    _Block_release(aBlock);
}

void sub_1BF3F3188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void RadioModule::getVersion_sync(uint64_t a1, void (***a2)(void *, std::string *))
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::string *v12;
  int v13;
  void (**v14)(void *, std::string *);
  std::string::size_type v15;
  unint64_t v16;
  void (**v17)(void *, std::string *);
  void *v18;
  NSObject *v19;
  CommandDriverFactory *v20;
  uint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *size;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void *v39;
  dispatch_object_t object;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  _QWORD aBlock[6];
  std::__shared_weak_count *v48;
  void *v49;
  void *v50;
  dispatch_object_t v51;
  std::string v52;

  v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v3 || (v5 = *(_QWORD *)(a1 + 120), (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
    v12 = (std::string *)(a1 + 152);
    v13 = *(char *)(a1 + 175);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_9;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    v12 = (std::string *)(a1 + 152);
    v13 = *(char *)(a1 + 175);
    if ((v13 & 0x80000000) == 0)
    {
LABEL_9:
      if (v13)
      {
        v14 = *a2;
        v52 = *v12;
        goto LABEL_14;
      }
      goto LABEL_16;
    }
  }
  v15 = *(_QWORD *)(a1 + 160);
  if (v15)
  {
    v14 = *a2;
    std::string::__init_copy_ctor_external(&v52, v12->__r_.__value_.__l.__data_, v15);
LABEL_14:
    v14[2](v14, &v52);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    goto LABEL_68;
  }
LABEL_16:
  v50 = (void *)0xAAAAAAAAAAAAAAAALL;
  v51 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule15getVersion_syncEN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_103;
  aBlock[4] = a1;
  aBlock[5] = v5;
  v48 = v7;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  v17 = *a2;
  if (*a2)
    v17 = (void (**)(void *, std::string *))_Block_copy(v17);
  v49 = v17;
  v18 = _Block_copy(aBlock);
  v19 = *(NSObject **)(a1 + 136);
  if (v19)
    dispatch_retain(v19);
  v50 = v18;
  v51 = v19;
  v45 = 0xAAAAAAAAAAAAAAAALL;
  v46 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v20 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v21 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v20);
    v22 = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = 0uLL;
    v23 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v22;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v27 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v21 = off_1ED70FD08;
  }
  v29 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  v41 = v21;
  v42 = *(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v30 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v21 + 16))(&v43, v21);
  v45 = 0;
  v46 = 0;
  if (v44)
  {
    v46 = std::__shared_weak_count::lock(v44);
    if (v46)
      v45 = v43;
    if (v44)
      std::__shared_weak_count::__release_weak(v44);
  }
  if (!v29)
    goto LABEL_46;
  v32 = (unint64_t *)&v29->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    v34 = v45;
    if (v45)
      goto LABEL_47;
  }
  else
  {
LABEL_46:
    v34 = v45;
    if (v45)
    {
LABEL_47:
      v35 = v50;
      if (v50)
        v35 = _Block_copy(v50);
      v39 = v35;
      object = v51;
      if (v51)
        dispatch_retain(v51);
      (*(void (**)(unint64_t, void **))(*(_QWORD *)v34 + 112))(v34, &v39);
      if (object)
        dispatch_release(object);
      if (v39)
        _Block_release(v39);
    }
  }
  v36 = v46;
  if (v46)
  {
    v37 = (unint64_t *)&v46->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v51)
    dispatch_release(v51);
  if (v50)
    _Block_release(v50);
  if (v49)
    _Block_release(v49);
  if (v48)
    std::__shared_weak_count::__release_weak(v48);
LABEL_68:
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF3F360C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock)
{
  std::__shared_weak_count *v24;
  uint64_t v25;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 96);
  if (aBlock)
    _Block_release(aBlock);
  if (a23)
  {
    std::__shared_weak_count::__release_weak(a23);
    std::__shared_weak_count::__release_weak(v24);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_16(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  char *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  os_unfair_lock_s *v13;
  _QWORD *v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  const void *v24;
  size_t v25;
  size_t v26;
  __int128 *p_dst;
  xpc_object_t v28;
  xpc_object_t v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  CFTypeRef v35;
  CFTypeID v36;
  const __CFDictionary *v37;
  const void *v38;
  size_t v39;
  size_t v40;
  void *p_p;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  const char *v46;
  xpc_object_t v47;
  xpc_object_t v48;
  size_t v49;
  size_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  const char *v55;
  xpc_object_t v56;
  xpc_object_t v57;
  size_t v58;
  size_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  const char *v64;
  xpc_object_t v65;
  xpc_object_t v66;
  size_t v67;
  size_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  const char *v73;
  xpc_object_t v74;
  xpc_object_t v75;
  size_t v76;
  size_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  const char *v82;
  xpc_object_t v83;
  xpc_object_t v84;
  CFTypeRef v85;
  void *__p;
  std::__shared_weak_count *v87;
  unint64_t v88;
  _QWORD v89[2];
  CFTypeRef v90;
  __int128 __dst;
  int64_t v92;
  CFTypeRef cf;
  xpc_object_t xdict;
  unsigned int v95;
  uint64_t v96;

  v4 = *(_QWORD *)(a1 + 32);
  v95 = 0;
  v5 = xpc_dictionary_create(0, 0, 0);
  v6 = v5;
  if (v5)
  {
    xdict = v5;
  }
  else
  {
    v6 = xpc_null_create();
    xdict = v6;
    if (!v6)
    {
      v7 = xpc_null_create();
      v6 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v6) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v6);
    goto LABEL_9;
  }
  v7 = xpc_null_create();
LABEL_8:
  xdict = v7;
LABEL_9:
  xpc_release(v6);
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    if (*((_BYTE *)a2 + 23))
      goto LABEL_11;
LABEL_37:
    v95 = -534716416;
    v28 = xpc_string_create("Unknown error");
    if (!v28)
      v28 = xpc_null_create();
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB0D0], v28);
    v29 = xpc_null_create();
    xpc_release(v28);
    xpc_release(v29);
    goto LABEL_150;
  }
  if (!a2[1])
    goto LABEL_37;
LABEL_11:
  v8 = (char *)operator new(0x28uLL);
  strcpy(v8, "AppleBasebandServices_Manager-1180");
  v9 = xpc_string_create(v8);
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFBAF0], v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  operator delete(v8);
  if (*((char *)a2 + 23) < 0)
    a2 = (uint64_t *)*a2;
  v11 = xpc_string_create((const char *)a2);
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB330], v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  cf = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v13 = (os_unfair_lock_s *)off_1ED70FDE8;
  if (!off_1ED70FDE8)
  {
    v14 = operator new(0x30uLL);
    MEMORY[0x1C3B893B4](v14, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x1E0C9B260]);
    v14[3] = 0;
    v14[4] = 0;
    *((_DWORD *)v14 + 10) = 0;
    std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(&__dst, (uint64_t)v14);
    v15 = __dst;
    __dst = 0uLL;
    v16 = (std::__shared_weak_count *)*(&off_1ED70FDE8 + 1);
    off_1ED70FDE8 = v15;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
    if (*((_QWORD *)&__dst + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v13 = (os_unfair_lock_s *)off_1ED70FDE8;
  }
  __p = v13;
  v87 = (std::__shared_weak_count *)*(&off_1ED70FDE8 + 1);
  if (*(&off_1ED70FDE8 + 1))
  {
    v22 = (unint64_t *)(*(&off_1ED70FDE8 + 1) + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v24 = (const void *)*MEMORY[0x1E0CFB478];
  v25 = strlen((const char *)*MEMORY[0x1E0CFB478]);
  if (v25 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v26 = v25;
  if (v25 >= 0x17)
  {
    v30 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v30 = v25 | 7;
    v31 = v30 + 1;
    p_dst = (__int128 *)operator new(v30 + 1);
    *((_QWORD *)&__dst + 1) = v26;
    v92 = v31 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_43;
  }
  HIBYTE(v92) = v25;
  p_dst = &__dst;
  if (v25)
LABEL_43:
    memmove(p_dst, v24, v26);
  *((_BYTE *)p_dst + v26) = 0;
  os_unfair_lock_lock(v13 + 10);
  Preferences::getPreference<__CFDictionary const*>(v13, (const char *)&__dst, &cf);
  os_unfair_lock_unlock(v13 + 10);
  if (SHIBYTE(v92) < 0)
  {
    operator delete((void *)__dst);
    v32 = v87;
    if (!v87)
      goto LABEL_51;
  }
  else
  {
    v32 = v87;
    if (!v87)
      goto LABEL_51;
  }
  v33 = (unint64_t *)&v32->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (v34)
  {
LABEL_51:
    v35 = cf;
    if (!cf)
      goto LABEL_60;
    goto LABEL_52;
  }
  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
  std::__shared_weak_count::__release_weak(v32);
  v35 = cf;
  if (!cf)
  {
LABEL_60:
    v42 = *(NSObject **)(v4 + 88);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__dst) = 0;
      _os_log_error_impl(&dword_1BF335000, v42, OS_LOG_TYPE_ERROR, "Failed to get ABM Shared Data", (uint8_t *)&__dst, 2u);
    }
    goto LABEL_150;
  }
LABEL_52:
  v36 = CFGetTypeID(v35);
  if (v36 != CFDictionaryGetTypeID())
    goto LABEL_60;
  v37 = (const __CFDictionary *)cf;
  v90 = cf;
  if (cf)
    CFRetain(cf);
  v89[0] = 0xAAAAAAAAAAAAAAAALL;
  v89[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v89, v37);
  v38 = (const void *)*MEMORY[0x1E0CFC208];
  v39 = strlen((const char *)*MEMORY[0x1E0CFC208]);
  if (v39 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v40 = v39;
  if (v39 >= 0x17)
  {
    v43 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v39 | 7) != 0x17)
      v43 = v39 | 7;
    v44 = v43 + 1;
    p_p = operator new(v43 + 1);
    v87 = (std::__shared_weak_count *)v40;
    v88 = v44 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_65;
  }
  HIBYTE(v88) = v39;
  p_p = &__p;
  if (v39)
LABEL_65:
    memmove(p_p, v38, v40);
  v45 = (const char *)*MEMORY[0x1E0CFB4F0];
  *((_BYTE *)p_p + v40) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v96, v45);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1C3B8936C](&v96);
  if (v92 >= 0)
    v46 = (const char *)&__dst;
  else
    v46 = (const char *)__dst;
  v47 = xpc_string_create(v46);
  if (!v47)
    v47 = xpc_null_create();
  xpc_dictionary_set_value(xdict, v45, v47);
  v48 = xpc_null_create();
  xpc_release(v47);
  xpc_release(v48);
  if (SHIBYTE(v92) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v88) & 0x80000000) == 0)
    {
LABEL_73:
      v49 = strlen((const char *)v38);
      if (v49 <= 0x7FFFFFFFFFFFFFF7)
        goto LABEL_74;
LABEL_137:
      std::string::__throw_length_error[abi:ne180100]();
    }
  }
  else if ((SHIBYTE(v88) & 0x80000000) == 0)
  {
    goto LABEL_73;
  }
  operator delete(__p);
  v49 = strlen((const char *)v38);
  if (v49 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_137;
LABEL_74:
  v50 = v49;
  if (v49 >= 0x17)
  {
    v52 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v49 | 7) != 0x17)
      v52 = v49 | 7;
    v53 = v52 + 1;
    v51 = operator new(v52 + 1);
    v87 = (std::__shared_weak_count *)v50;
    v88 = v53 | 0x8000000000000000;
    __p = v51;
    goto LABEL_80;
  }
  HIBYTE(v88) = v49;
  v51 = &__p;
  if (v49)
LABEL_80:
    memmove(v51, v38, v50);
  v54 = (const char *)*MEMORY[0x1E0CFB3C0];
  *((_BYTE *)v51 + v50) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v96, v54);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1C3B8936C](&v96);
  if (v92 >= 0)
    v55 = (const char *)&__dst;
  else
    v55 = (const char *)__dst;
  v56 = xpc_string_create(v55);
  if (!v56)
    v56 = xpc_null_create();
  xpc_dictionary_set_value(xdict, v54, v56);
  v57 = xpc_null_create();
  xpc_release(v56);
  xpc_release(v57);
  if (SHIBYTE(v92) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v88) & 0x80000000) == 0)
    {
LABEL_88:
      v58 = strlen((const char *)v38);
      if (v58 <= 0x7FFFFFFFFFFFFFF7)
        goto LABEL_89;
LABEL_140:
      std::string::__throw_length_error[abi:ne180100]();
    }
  }
  else if ((SHIBYTE(v88) & 0x80000000) == 0)
  {
    goto LABEL_88;
  }
  operator delete(__p);
  v58 = strlen((const char *)v38);
  if (v58 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_140;
LABEL_89:
  v59 = v58;
  if (v58 >= 0x17)
  {
    v61 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v58 | 7) != 0x17)
      v61 = v58 | 7;
    v62 = v61 + 1;
    v60 = operator new(v61 + 1);
    v87 = (std::__shared_weak_count *)v59;
    v88 = v62 | 0x8000000000000000;
    __p = v60;
    goto LABEL_95;
  }
  HIBYTE(v88) = v58;
  v60 = &__p;
  if (v58)
LABEL_95:
    memmove(v60, v38, v59);
  v63 = (const char *)*MEMORY[0x1E0CFB620];
  *((_BYTE *)v60 + v59) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v96, v63);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1C3B8936C](&v96);
  if (v92 >= 0)
    v64 = (const char *)&__dst;
  else
    v64 = (const char *)__dst;
  v65 = xpc_string_create(v64);
  if (!v65)
    v65 = xpc_null_create();
  xpc_dictionary_set_value(xdict, v63, v65);
  v66 = xpc_null_create();
  xpc_release(v65);
  xpc_release(v66);
  if (SHIBYTE(v92) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v88) & 0x80000000) == 0)
    {
LABEL_103:
      v67 = strlen((const char *)v38);
      if (v67 <= 0x7FFFFFFFFFFFFFF7)
        goto LABEL_104;
LABEL_143:
      std::string::__throw_length_error[abi:ne180100]();
    }
  }
  else if ((SHIBYTE(v88) & 0x80000000) == 0)
  {
    goto LABEL_103;
  }
  operator delete(__p);
  v67 = strlen((const char *)v38);
  if (v67 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_143;
LABEL_104:
  v68 = v67;
  if (v67 >= 0x17)
  {
    v70 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v67 | 7) != 0x17)
      v70 = v67 | 7;
    v71 = v70 + 1;
    v69 = operator new(v70 + 1);
    v87 = (std::__shared_weak_count *)v68;
    v88 = v71 | 0x8000000000000000;
    __p = v69;
    goto LABEL_110;
  }
  HIBYTE(v88) = v67;
  v69 = &__p;
  if (v67)
LABEL_110:
    memmove(v69, v38, v68);
  v72 = (const char *)*MEMORY[0x1E0CFB138];
  *((_BYTE *)v69 + v68) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v96, v72);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1C3B8936C](&v96);
  if (v92 >= 0)
    v73 = (const char *)&__dst;
  else
    v73 = (const char *)__dst;
  v74 = xpc_string_create(v73);
  if (!v74)
    v74 = xpc_null_create();
  xpc_dictionary_set_value(xdict, v72, v74);
  v75 = xpc_null_create();
  xpc_release(v74);
  xpc_release(v75);
  if (SHIBYTE(v92) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v88) & 0x80000000) == 0)
    {
LABEL_118:
      v76 = strlen((const char *)v38);
      if (v76 <= 0x7FFFFFFFFFFFFFF7)
        goto LABEL_119;
LABEL_146:
      std::string::__throw_length_error[abi:ne180100]();
    }
  }
  else if ((SHIBYTE(v88) & 0x80000000) == 0)
  {
    goto LABEL_118;
  }
  operator delete(__p);
  v76 = strlen((const char *)v38);
  if (v76 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_146;
LABEL_119:
  v77 = v76;
  if (v76 >= 0x17)
  {
    v79 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v76 | 7) != 0x17)
      v79 = v76 | 7;
    v80 = v79 + 1;
    v78 = operator new(v79 + 1);
    v87 = (std::__shared_weak_count *)v77;
    v88 = v80 | 0x8000000000000000;
    __p = v78;
  }
  else
  {
    HIBYTE(v88) = v76;
    v78 = &__p;
    if (!v76)
      goto LABEL_126;
  }
  memmove(v78, v38, v77);
LABEL_126:
  v81 = (const char *)*MEMORY[0x1E0CFB628];
  *((_BYTE *)v78 + v77) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v96, v81);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1C3B8936C](&v96);
  if (v92 >= 0)
    v82 = (const char *)&__dst;
  else
    v82 = (const char *)__dst;
  v83 = xpc_string_create(v82);
  if (!v83)
    v83 = xpc_null_create();
  xpc_dictionary_set_value(xdict, v81, v83);
  v84 = xpc_null_create();
  xpc_release(v83);
  xpc_release(v84);
  if (SHIBYTE(v92) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v88) & 0x80000000) == 0)
    {
LABEL_133:
      MEMORY[0x1C3B893A8](v89);
      v85 = v90;
      if (!v90)
        goto LABEL_150;
      goto LABEL_149;
    }
  }
  else if ((SHIBYTE(v88) & 0x80000000) == 0)
  {
    goto LABEL_133;
  }
  operator delete(__p);
  MEMORY[0x1C3B893A8](v89);
  v85 = v90;
  if (v90)
LABEL_149:
    CFRelease(v85);
LABEL_150:
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 40), &v95, &xdict);
  xpc_release(xdict);
}

void sub_1BF3F41E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, const void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,xpc_object_t object)
{
  uint64_t v23;

  MEMORY[0x1C3B8936C](v23 - 72);
  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x1C3B893A8](&a15);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a17);
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_21(_QWORD *a1, uint64_t a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[5];
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      if (a1[5])
      {
        v12[0] = MEMORY[0x1E0C809B0];
        v12[1] = 1174405120;
        v12[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_22;
        v12[3] = &__block_descriptor_tmp_26_0;
        v12[4] = v6;
        v9 = *a3;
        if (*a3)
          v9 = _Block_copy(v9);
        aBlock = v9;
        ctu::SharedSynchronizable<RadioModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v12);
        if (aBlock)
          _Block_release(aBlock);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_22(uint64_t a1)
{
  _QWORD *v2;
  const void *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  std::string *v12;
  __int128 v13;
  NSObject *v14;
  uint64_t *v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  void *v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  void *v23;
  void **v24;
  xpc_object_t v25;
  xpc_object_t v26;
  _QWORD aBlock[4];
  void *v28;
  void *v29;
  unsigned int v30;
  void *__p[4];
  std::string __dst;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 32);
  if ((*(unsigned int (**)(_QWORD *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    v3 = (const void *)*MEMORY[0x1E0CFBEC8];
    v4 = strlen((const char *)*MEMORY[0x1E0CFBEC8]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v9 = v4 | 7;
      v10 = v9 + 1;
      p_dst = (std::string *)operator new(v9 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_16:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        v11 = (char *)operator new(0x28uLL);
        strcpy(v11, " rejected; ABM is shutting down ");
        v12 = std::string::append(&__dst, v11, 0x20uLL);
        v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
        __p[2] = (void *)v12->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v13;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        operator delete(v11);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v14 = v2[11];
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
LABEL_18:
            v16 = *(_QWORD *)(a1 + 40);
            v15 = (uint64_t *)(a1 + 40);
            if (!v16)
            {
LABEL_40:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              return;
            }
LABEL_24:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v19 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v19 = __p[1];
            if (v19)
            {
              v20 = xpc_dictionary_create(0, 0, 0);
              if (v20 || (v20 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8A86C](v20) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v20);
                  v21 = v20;
                }
                else
                {
                  v21 = xpc_null_create();
                }
              }
              else
              {
                v21 = xpc_null_create();
                v20 = 0;
              }
              xpc_release(v20);
              v22 = xpc_null_create();
              v23 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
              xpc_release(v23);
              xpc_release(v22);
              if (SHIBYTE(__p[2]) >= 0)
                v24 = __p;
              else
                v24 = (void **)__p[0];
              v25 = xpc_string_create((const char *)v24);
              if (!v25)
                v25 = xpc_null_create();
              xpc_dictionary_set_value(v21, (const char *)*MEMORY[0x1E0CFB0D0], v25);
              v26 = xpc_null_create();
              xpc_release(v25);
              xpc_release(v26);
            }
            v30 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v15, &v30, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_40;
          }
        }
        else
        {
          v14 = v2[11];
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
            goto LABEL_18;
        }
        v17 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v17 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
        _os_log_impl(&dword_1BF335000, v14, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v18 = *(_QWORD *)(a1 + 40);
        v15 = (uint64_t *)(a1 + 40);
        if (!v18)
          goto LABEL_40;
        goto LABEL_24;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_16;
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_23;
  aBlock[3] = &__block_descriptor_tmp_25_2;
  v7 = *(void **)(a1 + 40);
  if (v7)
    v7 = _Block_copy(v7);
  v28 = v7;
  v8 = _Block_copy(aBlock);
  v29 = v8;
  RadioModule::getOperatingMode_sync((uint64_t)v2, &v29);
  if (v8)
    _Block_release(v8);
  if (v28)
    _Block_release(v28);
}

void sub_1BF3F4808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void RadioModule::getOperatingMode_sync(uint64_t a1, void **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  NSObject *v15;
  CommandDriverFactory *v16;
  uint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  NSObject *v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  void *v36;
  dispatch_object_t object;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  _QWORD aBlock[6];
  std::__shared_weak_count *v45;
  void *v46;
  void *v47;
  dispatch_object_t v48;
  uint8_t buf[16];

  v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v3 || (v5 = *(_QWORD *)(a1 + 120), (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v47 = (void *)0xAAAAAAAAAAAAAAAALL;
  v48 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule21getOperatingMode_syncEN8dispatch5blockIU13block_pointerFviEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_104_0;
  aBlock[4] = a1;
  aBlock[5] = v5;
  v45 = v7;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = *a2;
  if (*a2)
    v13 = _Block_copy(v13);
  v46 = v13;
  v14 = _Block_copy(aBlock);
  v15 = *(NSObject **)(a1 + 136);
  if (v15)
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  v47 = v14;
  v48 = v15;
  v42 = 0xAAAAAAAAAAAAAAAALL;
  v43 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v16 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v17 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v16);
    v18 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v19 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v18;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v23 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v17 = off_1ED70FD08;
  }
  v25 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  v38 = v17;
  v39 = *(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v26 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v17 + 16))(&v40, v17);
  v42 = 0;
  v43 = 0;
  if (v41)
  {
    v43 = std::__shared_weak_count::lock(v41);
    if (v43)
      v42 = v40;
    if (v41)
      std::__shared_weak_count::__release_weak(v41);
  }
  if (!v25)
    goto LABEL_39;
  v28 = (unint64_t *)&v25->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    v30 = v42;
    if (!v42)
      goto LABEL_50;
  }
  else
  {
LABEL_39:
    v30 = v42;
    if (!v42)
      goto LABEL_50;
  }
  v31 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v31, OS_LOG_TYPE_DEFAULT, "#I Request to get operating mode", buf, 2u);
  }
  v32 = v47;
  if (v47)
    v32 = _Block_copy(v47);
  v36 = v32;
  object = v48;
  if (v48)
    dispatch_retain(v48);
  (*(void (**)(unint64_t, void **))(*(_QWORD *)v30 + 160))(v30, &v36);
  if (object)
    dispatch_release(object);
  if (v36)
    _Block_release(v36);
LABEL_50:
  v33 = v43;
  if (v43)
  {
    v34 = (unint64_t *)&v43->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v48)
    dispatch_release(v48);
  if (v47)
    _Block_release(v47);
  if (v46)
    _Block_release(v46);
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF3F4C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock)
{
  std::__shared_weak_count *v24;
  uint64_t v25;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 80);
  if (aBlock)
    _Block_release(aBlock);
  if (a23)
    std::__shared_weak_count::__release_weak(a23);
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_23(uint64_t a1, int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  unsigned int v9;
  xpc_object_t xdict;

  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    xdict = v4;
  }
  else
  {
    v5 = xpc_null_create();
    xdict = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v5) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  xdict = v6;
LABEL_9:
  xpc_release(v5);
  v7 = xpc_int64_create(a2);
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB9E8], v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  v9 = (a2 >> 31) & 0xE020E002;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 32), &v9, &xdict);
  xpc_release(xdict);
}

void sub_1BF3F4E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_28(_QWORD *a1, xpc_object_t *a2, void (***a3)(void *, uint64_t, xpc_object_t *))
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  xpc_object_t value;
  int v11;
  xpc_object_t v12;
  int v13;
  xpc_object_t v14;
  char v15;
  void (**v16)(void *, uint64_t, xpc_object_t *);
  xpc_object_t v17;
  void (**v18)(void *, uint64_t, xpc_object_t *);
  xpc_object_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _QWORD v22[5];
  void *aBlock;
  int v24;
  int v25;
  char v26;
  std::__shared_weak_count *v28;
  xpc_object_t v29;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    v28 = v8;
    if (v8)
    {
      v9 = v8;
      if (a1[5])
      {
        value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFAF80]);
        v29 = value;
        if (value)
          xpc_retain(value);
        else
          v29 = xpc_null_create();
        v11 = xpc::dyn_cast_or_default((xpc *)&v29, (const object *)0x2710);
        xpc_release(v29);
        v12 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB9E8]);
        v29 = v12;
        if (v12)
          xpc_retain(v12);
        else
          v29 = xpc_null_create();
        v13 = xpc::dyn_cast_or_default((xpc *)&v29, (const object *)0xFFFFFFFFLL);
        xpc_release(v29);
        v14 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFBDD0]);
        v29 = v14;
        if (v14)
          xpc_retain(v14);
        else
          v29 = xpc_null_create();
        v15 = xpc::dyn_cast_or_default((xpc *)&v29, 0);
        xpc_release(v29);
        if (v13 < 0)
        {
          v17 = xpc_null_create();
          v18 = *a3;
          v29 = v17;
          v19 = xpc_null_create();
          v18[2](v18, 3760250882, &v29);
          xpc_release(v29);
          xpc_release(v19);
        }
        else
        {
          v22[0] = MEMORY[0x1E0C809B0];
          v22[1] = 1174405120;
          v22[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_29;
          v22[3] = &__block_descriptor_tmp_33_1;
          v22[4] = v7;
          v16 = *a3;
          if (*a3)
            v16 = (void (**)(void *, uint64_t, xpc_object_t *))_Block_copy(v16);
          aBlock = v16;
          v24 = v11;
          v25 = v13;
          v26 = v15;
          ctu::SharedSynchronizable<RadioModule>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v22);
          if (aBlock)
            _Block_release(aBlock);
        }
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1BF3F5060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  uint64_t v11;
  va_list va;

  va_start(va, a10);
  xpc_release(*(xpc_object_t *)(v11 - 56));
  xpc_release(v10);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_29(uint64_t a1)
{
  _QWORD *v2;
  const void *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  unsigned int v7;
  int v8;
  int v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  std::string *v15;
  __int128 v16;
  NSObject *v17;
  uint64_t *v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  void *v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  void *v26;
  void **v27;
  xpc_object_t v28;
  xpc_object_t v29;
  _QWORD aBlock[4];
  void *v31;
  void *v32;
  unsigned int v33;
  void *__p[4];
  std::string __dst;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 32);
  if ((*(unsigned int (**)(_QWORD *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    v3 = (const void *)*MEMORY[0x1E0CFBED8];
    v4 = strlen((const char *)*MEMORY[0x1E0CFBED8]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v12 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v12 = v4 | 7;
      v13 = v12 + 1;
      p_dst = (std::string *)operator new(v12 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_16:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        v14 = (char *)operator new(0x28uLL);
        strcpy(v14, " rejected; ABM is shutting down ");
        v15 = std::string::append(&__dst, v14, 0x20uLL);
        v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        __p[2] = (void *)v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        operator delete(v14);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v17 = v2[11];
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
LABEL_18:
            v19 = *(_QWORD *)(a1 + 40);
            v18 = (uint64_t *)(a1 + 40);
            if (!v19)
            {
LABEL_40:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              return;
            }
LABEL_24:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v22 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v22 = __p[1];
            if (v22)
            {
              v23 = xpc_dictionary_create(0, 0, 0);
              if (v23 || (v23 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8A86C](v23) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v23);
                  v24 = v23;
                }
                else
                {
                  v24 = xpc_null_create();
                }
              }
              else
              {
                v24 = xpc_null_create();
                v23 = 0;
              }
              xpc_release(v23);
              v25 = xpc_null_create();
              v26 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
              xpc_release(v26);
              xpc_release(v25);
              if (SHIBYTE(__p[2]) >= 0)
                v27 = __p;
              else
                v27 = (void **)__p[0];
              v28 = xpc_string_create((const char *)v27);
              if (!v28)
                v28 = xpc_null_create();
              xpc_dictionary_set_value(v24, (const char *)*MEMORY[0x1E0CFB0D0], v28);
              v29 = xpc_null_create();
              xpc_release(v28);
              xpc_release(v29);
            }
            v33 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v18, &v33, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_40;
          }
        }
        else
        {
          v17 = v2[11];
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            goto LABEL_18;
        }
        v20 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v20 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v20;
        _os_log_impl(&dword_1BF335000, v17, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v21 = *(_QWORD *)(a1 + 40);
        v18 = (uint64_t *)(a1 + 40);
        if (!v21)
          goto LABEL_40;
        goto LABEL_24;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_16;
  }
  v7 = *(_DWORD *)(a1 + 48);
  v8 = *(_DWORD *)(a1 + 52);
  v9 = *(unsigned __int8 *)(a1 + 56);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_30;
  aBlock[3] = &__block_descriptor_tmp_32_0;
  v10 = *(void **)(a1 + 40);
  if (v10)
    v10 = _Block_copy(v10);
  v31 = v10;
  v11 = _Block_copy(aBlock);
  v32 = v11;
  RadioModule::setOperatingMode_sync(v2, v7, v8, v9 != 0, &v32);
  if (v11)
    _Block_release(v11);
  if (v31)
    _Block_release(v31);
}

void sub_1BF3F54DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void RadioModule::setOperatingMode_sync(_QWORD *a1, unsigned int a2, uint64_t a3, int a4, void **a5)
{
  std::__shared_weak_count *v6;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  NSObject *v21;
  CommandDriverFactory *v22;
  uint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  void *v42;
  dispatch_object_t v43;
  void *v44;
  dispatch_object_t object;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  _QWORD aBlock[6];
  std::__shared_weak_count *v53;
  void *v54;
  void *v55;
  dispatch_object_t v56;
  __int128 v57;

  v6 = (std::__shared_weak_count *)a1[16];
  if (!v6 || (v11 = a1[15], (v12 = std::__shared_weak_count::lock(v6)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v13 = v12;
  p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  v55 = (void *)0xAAAAAAAAAAAAAAAALL;
  v56 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule21setOperatingMode_syncEjN5radio13OperatingModeEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_119;
  aBlock[4] = a1;
  aBlock[5] = v11;
  v53 = v13;
  do
    v18 = __ldxr(p_shared_weak_owners);
  while (__stxr(v18 + 1, p_shared_weak_owners));
  v19 = *a5;
  if (*a5)
    v19 = _Block_copy(v19);
  v54 = v19;
  v20 = _Block_copy(aBlock);
  v21 = a1[17];
  if (v21)
    dispatch_retain(v21);
  v55 = v20;
  v56 = v21;
  v50 = 0xAAAAAAAAAAAAAAAALL;
  v51 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v22 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v23 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v22);
    v24 = v57;
    v57 = 0uLL;
    v25 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v24;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
    if (*((_QWORD *)&v57 + 1))
    {
      v29 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v23 = off_1ED70FD08;
  }
  v31 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  v46 = v23;
  v47 = *(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v32 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v23 + 16))(&v48, v23);
  v50 = 0;
  v51 = 0;
  if (v49)
  {
    v51 = std::__shared_weak_count::lock(v49);
    if (v51)
      v50 = v48;
    if (v49)
      std::__shared_weak_count::__release_weak(v49);
  }
  if (!v31)
    goto LABEL_39;
  v34 = (unint64_t *)&v31->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    v36 = v50;
    if (!v50)
      goto LABEL_58;
  }
  else
  {
LABEL_39:
    v36 = v50;
    if (!v50)
      goto LABEL_58;
  }
  v37 = 1000000 * a2;
  v38 = v55;
  if (a4)
  {
    if (v55)
      v38 = _Block_copy(v55);
    v44 = v38;
    object = v56;
    if (v56)
      dispatch_retain(v56);
    (*(void (**)(unint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v36 + 152))(v36, v37, a3, &v44);
    if (object)
      dispatch_release(object);
    if (v44)
      _Block_release(v44);
  }
  else
  {
    if (v55)
      v38 = _Block_copy(v55);
    v42 = v38;
    v43 = v56;
    if (v56)
      dispatch_retain(v56);
    (*(void (**)(unint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v36 + 144))(v36, v37, a3, &v42);
    if (v43)
      dispatch_release(v43);
    if (v42)
      _Block_release(v42);
  }
LABEL_58:
  v39 = v51;
  if (v51)
  {
    v40 = (unint64_t *)&v51->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (v56)
    dispatch_release(v56);
  if (v55)
    _Block_release(v55);
  if (v54)
    _Block_release(v54);
  if (v53)
    std::__shared_weak_count::__release_weak(v53);
  std::__shared_weak_count::__release_weak(v13);
}

void sub_1BF3F5980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,void *aBlock)
{
  std::__shared_weak_count *v26;
  uint64_t v27;

  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v27 - 112);
  if (aBlock)
    _Block_release(aBlock);
  if (a25)
    std::__shared_weak_count::__release_weak(a25);
  std::__shared_weak_count::__release_weak(v26);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_30(uint64_t a1, int a2)
{
  uint64_t v3;
  xpc_object_t v4;
  uint64_t v5;
  xpc_object_t v6;
  xpc_object_t object;

  if (a2)
    v3 = 0;
  else
    v3 = 3760250880;
  v4 = xpc_null_create();
  v5 = *(_QWORD *)(a1 + 32);
  object = v4;
  v6 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v5 + 16))(v5, v3, &object);
  xpc_release(object);
  xpc_release(v6);
}

void sub_1BF3F5A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_35(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD v18[5];
  void *aBlock;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      if (!v9)
      {
LABEL_14:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 1174405120;
      v18[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_36;
      v18[3] = &__block_descriptor_tmp_39_1;
      v18[4] = v6;
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v11 = a1[5];
        v12 = (uint64_t *)(v6 + 120);
        aBlock = v10;
        v20 = v11;
        v13 = (std::__shared_weak_count *)a1[6];
        v21 = v13;
        if (!v13)
          goto LABEL_10;
      }
      else
      {
        v12 = (uint64_t *)(v6 + 120);
        aBlock = 0;
        v20 = v9;
        v13 = (std::__shared_weak_count *)a1[6];
        v21 = v13;
        if (!v13)
        {
LABEL_10:
          ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v12, (uint64_t)v18);
          if (v21)
            std::__shared_weak_count::__release_weak(v21);
          if (aBlock)
            _Block_release(aBlock);
          goto LABEL_14;
        }
      }
      p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
      do
        v15 = __ldxr(p_shared_weak_owners);
      while (__stxr(v15 + 1, p_shared_weak_owners));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_36(_QWORD *a1)
{
  _QWORD *v2;
  const void *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  void *v11;
  void *v12;
  NSObject *v13;
  CommandDriverFactory *v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  std::string *v36;
  __int128 v37;
  NSObject *v38;
  uint64_t *v39;
  uint64_t v40;
  void **v41;
  uint64_t v42;
  void *v43;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  void *v47;
  void **v48;
  xpc_object_t v49;
  xpc_object_t v50;
  void *v51;
  dispatch_object_t object;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  _QWORD aBlock[6];
  std::__shared_weak_count *v60;
  void *v61;
  void *__p[4];
  std::string __dst;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)a1[4];
  if ((*(unsigned int (**)(_QWORD *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    v3 = (const void *)*MEMORY[0x1E0CFBEC0];
    v4 = strlen((const char *)*MEMORY[0x1E0CFBEC0]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v33 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v33 = v4 | 7;
      v34 = v33 + 1;
      p_dst = (std::string *)operator new(v33 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_63:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        v35 = (char *)operator new(0x28uLL);
        strcpy(v35, " rejected; ABM is shutting down ");
        v36 = std::string::append(&__dst, v35, 0x20uLL);
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        __p[2] = (void *)v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        operator delete(v35);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v38 = v2[11];
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
          {
LABEL_65:
            v40 = a1[5];
            v39 = a1 + 5;
            if (!v40)
            {
LABEL_89:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              return;
            }
LABEL_71:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v43 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v43 = __p[1];
            if (v43)
            {
              v44 = xpc_dictionary_create(0, 0, 0);
              if (v44 || (v44 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8A86C](v44) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v44);
                  v45 = v44;
                }
                else
                {
                  v45 = xpc_null_create();
                }
              }
              else
              {
                v45 = xpc_null_create();
                v44 = 0;
              }
              xpc_release(v44);
              v46 = xpc_null_create();
              v47 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
              xpc_release(v47);
              xpc_release(v46);
              if (SHIBYTE(__p[2]) >= 0)
                v48 = __p;
              else
                v48 = (void **)__p[0];
              v49 = xpc_string_create((const char *)v48);
              if (!v49)
                v49 = xpc_null_create();
              xpc_dictionary_set_value(v45, (const char *)*MEMORY[0x1E0CFB0D0], v49);
              v50 = xpc_null_create();
              xpc_release(v49);
              xpc_release(v50);
            }
            LODWORD(v57) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v39, (unsigned int *)&v57, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_89;
          }
        }
        else
        {
          v38 = v2[11];
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
            goto LABEL_65;
        }
        v41 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v41 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v41;
        _os_log_impl(&dword_1BF335000, v38, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v42 = a1[5];
        v39 = a1 + 5;
        if (!v42)
          goto LABEL_89;
        goto LABEL_71;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_63;
  }
  __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_37;
  aBlock[3] = &__block_descriptor_tmp_38;
  v8 = a1[6];
  v7 = (std::__shared_weak_count *)a1[7];
  aBlock[4] = v2;
  aBlock[5] = v8;
  aBlock[1] = 1174405120;
  v60 = v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
  }
  v11 = (void *)a1[5];
  if (v11)
    v11 = _Block_copy(v11);
  v61 = v11;
  v12 = _Block_copy(aBlock);
  v13 = v2[17];
  if (v13)
    dispatch_retain(v13);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
  v57 = 0xAAAAAAAAAAAAAAAALL;
  v58 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v14 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v15 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v14);
    v16 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v17 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v16;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v21 = (unint64_t *)((char *)__p[1] + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v15 = off_1ED70FD08;
  }
  v23 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  v53 = v15;
  v54 = *(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v24 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v15 + 16))(&v55, v15);
  v57 = 0;
  v58 = 0;
  if (v56)
  {
    v58 = std::__shared_weak_count::lock(v56);
    if (v58)
      v57 = v55;
    if (v56)
      std::__shared_weak_count::__release_weak(v56);
  }
  if (!v23)
    goto LABEL_37;
  v26 = (unint64_t *)&v23->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    v28 = v57;
    if (v57)
      goto LABEL_38;
  }
  else
  {
LABEL_37:
    v28 = v57;
    if (v57)
    {
LABEL_38:
      v29 = (void *)__dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__r.__words[0])
        v29 = _Block_copy(__dst.__r_.__value_.__l.__data_);
      v51 = v29;
      object = (dispatch_object_t)__dst.__r_.__value_.__l.__size_;
      if (__dst.__r_.__value_.__l.__size_)
        dispatch_retain((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
      (*(void (**)(unint64_t, void **))(*(_QWORD *)v28 + 104))(v28, &v51);
      if (object)
        dispatch_release(object);
      if (v51)
        _Block_release(v51);
    }
  }
  v30 = v58;
  if (v58)
  {
    v31 = (unint64_t *)&v58->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (__dst.__r_.__value_.__l.__size_)
    dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
  if (__dst.__r_.__value_.__r.__words[0])
    _Block_release(__dst.__r_.__value_.__l.__data_);
  if (v61)
    _Block_release(v61);
  if (v60)
    std::__shared_weak_count::__release_weak(v60);
}

void sub_1BF3F61D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_37(_QWORD *a1, void **a2, ctu **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  const void *v10;
  xpc_object_t v11;
  void *v12;
  uint64_t (*v13)(uint64_t);
  NSObject *v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  uint64_t (*v18)(uint64_t);
  xpc_object_t v19;
  NSObject *v20;
  xpc_object_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unsigned int v24;
  xpc_object_t object;
  std::__shared_weak_count *v27;
  xpc_object_t buf[4];

  buf[3] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    v27 = v8;
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
        goto LABEL_21;
      v11 = xpc_null_create();
      object = v11;
      v24 = -534716416;
      v12 = *a2;
      v13 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      if (!v12)
        v13 = 0;
      if (v13)
      {
        v14 = *(NSObject **)(v7 + 88);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf[0]) = 138412290;
          *(xpc_object_t *)((char *)buf + 4) = v12;
          v15 = "%@";
          v16 = v14;
          v17 = 12;
LABEL_9:
          _os_log_error_impl(&dword_1BF335000, v16, OS_LOG_TYPE_ERROR, v15, (uint8_t *)buf, v17);
        }
      }
      else
      {
        v18 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        if (!*a3)
          v18 = 0;
        if (v18)
        {
          ctu::cf_to_xpc(*a3, v10);
          v19 = buf[0];
          if (buf[0] && MEMORY[0x1C3B8A86C](buf[0]) == MEMORY[0x1E0C812F8])
            xpc_retain(buf[0]);
          else
            v19 = xpc_null_create();
          v21 = xpc_null_create();
          object = v19;
          xpc_release(v11);
          xpc_release(v21);
          xpc_release(buf[0]);
          v24 = 0;
          goto LABEL_20;
        }
        v20 = *(NSObject **)(v7 + 88);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf[0]) = 0;
          v15 = "Empty response received with no error";
          v16 = v20;
          v17 = 2;
          goto LABEL_9;
        }
      }
LABEL_20:
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(a1 + 7, &v24, &object);
      xpc_release(object);
LABEL_21:
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1BF3F6514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_41(_QWORD *a1, uint64_t a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[5];
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      if (a1[5])
      {
        v12[0] = MEMORY[0x1E0C809B0];
        v12[1] = 1174405120;
        v12[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_42;
        v12[3] = &__block_descriptor_tmp_43_0;
        v12[4] = v6;
        v9 = *a3;
        if (*a3)
          v9 = _Block_copy(v9);
        aBlock = v9;
        ctu::SharedSynchronizable<RadioModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v12);
        if (aBlock)
          _Block_release(aBlock);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_42(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = 0;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), &v2, (void **)(v1 + 248));
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_45(_QWORD *a1, void **a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  void *v10;
  void *v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD v18[5];
  void *aBlock;
  xpc_object_t object;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_16:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 1174405120;
      v18[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_46;
      v18[3] = &__block_descriptor_tmp_51_2;
      v18[4] = v7;
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v11 = *a2;
        aBlock = v10;
        object = v11;
        if (v11)
          goto LABEL_6;
      }
      else
      {
        v11 = *a2;
        aBlock = 0;
        object = v11;
        if (v11)
        {
LABEL_6:
          xpc_retain(v11);
          v12 = (uint64_t *)(v7 + 120);
          v13 = (std::__shared_weak_count *)a1[6];
          v21 = a1[5];
          v22 = v13;
          if (!v13)
            goto LABEL_12;
          goto LABEL_10;
        }
      }
      object = xpc_null_create();
      v12 = (uint64_t *)(v7 + 120);
      v13 = (std::__shared_weak_count *)a1[6];
      v21 = a1[5];
      v22 = v13;
      if (!v13)
      {
LABEL_12:
        ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v12, (uint64_t)v18);
        if (v22)
          std::__shared_weak_count::__release_weak(v22);
        xpc_release(object);
        object = 0;
        if (aBlock)
          _Block_release(aBlock);
        goto LABEL_16;
      }
LABEL_10:
      p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
      do
        v15 = __ldxr(p_shared_weak_owners);
      while (__stxr(v15 + 1, p_shared_weak_owners));
      goto LABEL_12;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_46(_QWORD *a1)
{
  _QWORD *v2;
  const void *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  xpc_object_t v7;
  uint64_t v8;
  xpc_object_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  std::string *v13;
  __int128 v14;
  NSObject *v15;
  uint64_t *v16;
  uint64_t v17;
  CommandDriverFactory *v18;
  const void *v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::string::size_type v29;
  void *v30;
  const object *v31;
  xpc_object_t *v32;
  uint64_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  xpc_object_t v37;
  CFTypeID v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *p_shared_weak_owners;
  unint64_t v42;
  void *v43;
  void *v44;
  NSObject *v45;
  std::__shared_weak_count *size;
  unint64_t *v47;
  unint64_t v48;
  xpc_object_t v49;
  void *v50;
  xpc_object_t *v51;
  xpc_object_t v52;
  xpc_object_t v53;
  _QWORD aBlock[6];
  std::__shared_weak_count *v55;
  void *v56;
  void *v57;
  dispatch_object_t v58;
  CFTypeRef cf[3];
  xpc_object_t v60;
  std::__shared_weak_count *v61;
  xpc_object_t object[4];
  std::string __dst;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)a1[4];
  if ((*(unsigned int (**)(_QWORD *))(*v2 + 88))(v2))
  {
    memset(object, 170, 24);
    v3 = (const void *)*MEMORY[0x1E0CFBC50];
    v4 = strlen((const char *)*MEMORY[0x1E0CFBC50]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v10 = v4 | 7;
      v11 = v10 + 1;
      p_dst = (std::string *)operator new(v10 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_12:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        v12 = (char *)operator new(0x28uLL);
        strcpy(v12, " rejected; ABM is shutting down ");
        v13 = std::string::append(&__dst, v12, 0x20uLL);
        v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        object[2] = (xpc_object_t)v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)object = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        operator delete(v12);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v15 = v2[11];
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
LABEL_14:
            v17 = a1[5];
            v16 = a1 + 5;
            if (!v17)
            {
LABEL_88:
              if (SHIBYTE(object[2]) < 0)
                operator delete(object[0]);
              return;
            }
LABEL_43:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v34 = (xpc_object_t)HIBYTE(object[2]);
            if (SHIBYTE(object[2]) < 0)
              v34 = object[1];
            if (v34)
            {
              v35 = xpc_dictionary_create(0, 0, 0);
              if (v35 || (v35 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8A86C](v35) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v35);
                  v36 = v35;
                }
                else
                {
                  v36 = xpc_null_create();
                }
              }
              else
              {
                v36 = xpc_null_create();
                v35 = 0;
              }
              xpc_release(v35);
              v49 = xpc_null_create();
              v50 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
              xpc_release(v50);
              xpc_release(v49);
              if (SHIBYTE(object[2]) >= 0)
                v51 = object;
              else
                v51 = (xpc_object_t *)object[0];
              v52 = xpc_string_create((const char *)v51);
              if (!v52)
                v52 = xpc_null_create();
              xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E0CFB0D0], v52);
              v53 = xpc_null_create();
              xpc_release(v52);
              xpc_release(v53);
            }
            LODWORD(v60) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v16, (unsigned int *)&v60, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_88;
          }
        }
        else
        {
          v15 = v2[11];
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            goto LABEL_14;
        }
        v32 = object;
        if (SHIBYTE(object[2]) < 0)
          v32 = (xpc_object_t *)object[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
        _os_log_impl(&dword_1BF335000, v15, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v33 = a1[5];
        v16 = a1 + 5;
        if (!v33)
          goto LABEL_88;
        goto LABEL_43;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_12;
  }
  if (MEMORY[0x1C3B8A86C](a1[6]) == MEMORY[0x1E0C812F8])
  {
    __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
    v18 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    v19 = (const void *)off_1ED70FD08;
    if (!off_1ED70FD08)
    {
      CommandDriverFactory::create_default_global(v18);
      v20 = *(_OWORD *)object;
      object[0] = 0;
      object[1] = 0;
      v21 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
      off_1ED70FD08 = v20;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v19 = (const void *)off_1ED70FD08;
    }
    v24 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    cf[1] = v19;
    cf[2] = *((CFTypeRef *)&off_1ED70FD08 + 1);
    if (*(&off_1ED70FD08 + 1))
    {
      v25 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    (*(void (**)(xpc_object_t *__return_ptr, const void *))(*(_QWORD *)v19 + 16))(&v60, v19);
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
    if (v61)
    {
      __dst.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v61);
      if (__dst.__r_.__value_.__l.__size_)
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
      if (v61)
        std::__shared_weak_count::__release_weak(v61);
    }
    if (v24)
    {
      v27 = (unint64_t *)&v24->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v29 = __dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__r.__words[0])
    {
      v30 = (void *)a1[6];
      v60 = v30;
      if (v30)
        xpc_retain(v30);
      else
        v60 = xpc_null_create();
      xpc::bridge((xpc *)&v60, v31);
      v37 = object[0];
      if (object[0] && (v38 = CFGetTypeID(object[0]), v38 == CFDictionaryGetTypeID()))
      {
        cf[0] = v37;
        CFRetain(v37);
      }
      else
      {
        cf[0] = 0;
      }
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_47;
      aBlock[3] = &__block_descriptor_tmp_50;
      v40 = a1[7];
      v39 = (std::__shared_weak_count *)a1[8];
      aBlock[4] = v2;
      aBlock[5] = v40;
      v55 = v39;
      if (v39)
      {
        p_shared_weak_owners = (unint64_t *)&v39->__shared_weak_owners_;
        do
          v42 = __ldxr(p_shared_weak_owners);
        while (__stxr(v42 + 1, p_shared_weak_owners));
      }
      v43 = (void *)a1[5];
      if (v43)
        v43 = _Block_copy(v43);
      v56 = v43;
      v44 = _Block_copy(aBlock);
      v45 = v2[17];
      if (v45)
        dispatch_retain(v45);
      v57 = v44;
      v58 = v45;
      (*(void (**)(std::string::size_type, CFTypeRef *, void **))(*(_QWORD *)v29 + 192))(v29, cf, &v57);
      if (v58)
        dispatch_release(v58);
      if (v57)
        _Block_release(v57);
      if (cf[0])
        CFRelease(cf[0]);
      if (object[0])
        CFRelease(object[0]);
      xpc_release(v60);
      if (v56)
        _Block_release(v56);
      if (v55)
        std::__shared_weak_count::__release_weak(v55);
    }
    size = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
    if (__dst.__r_.__value_.__l.__size_)
    {
      v47 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  else
  {
    v7 = xpc_null_create();
    v8 = a1[5];
    object[0] = v7;
    v9 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v8 + 16))(v8, 3760250882, object);
    xpc_release(object[0]);
    xpc_release(v9);
  }
}

void sub_1BF3F6E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, char a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,xpc_object_t object,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1BF3F6FD8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  operator delete(v1);
  if (*(char *)(v2 - 73) < 0)
  {
    operator delete(*(void **)(v2 - 96));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1BF3F6FC8);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_47(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  NSObject *v9;
  std::__shared_weak_count *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  char *v17;
  xpc_object_t v18;
  xpc_object_t v19;
  const void *v20;
  size_t v21;
  size_t v22;
  __int128 *p_buf;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  xpc_object_t v28;
  uint64_t v29;
  xpc_object_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  const void *v33;
  xpc_object_t object;
  std::__shared_weak_count *v36;
  __int128 buf;
  unint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  v36 = v6;
  if (!v6)
    return;
  if (!a1[5])
  {
    v10 = v6;
LABEL_45:
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  v7 = *a2;
  if (*a2)
    v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  else
    v8 = 0;
  if (v8)
  {
    v9 = *(NSObject **)(v5 + 88);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v7;
      _os_log_error_impl(&dword_1BF335000, v9, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!*(_QWORD *)(v5 + 176))
    goto LABEL_38;
  v11 = xpc_dictionary_create(0, 0, 0);
  if (v11 || (v11 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v11) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v11);
      v12 = v11;
    }
    else
    {
      v12 = xpc_null_create();
    }
  }
  else
  {
    v12 = xpc_null_create();
    v11 = 0;
  }
  xpc_release(v11);
  v13 = xpc_string_create((const char *)*MEMORY[0x1E0CFB598]);
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E0CFB538], v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  v15 = xpc_string_create((const char *)*MEMORY[0x1E0CFBFA0]);
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E0CFB8D0], v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v17 = (char *)operator new(0x38uLL);
  strcpy(v17, "User requested to change Baseband field test config");
  v18 = xpc_string_create(v17);
  if (!v18)
    v18 = xpc_null_create();
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E0CFB788], v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  operator delete(v17);
  v20 = (const void *)*MEMORY[0x1E0CFB4E0];
  v21 = strlen((const char *)*MEMORY[0x1E0CFB4E0]);
  if (v21 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v22 = v21;
  if (v21 >= 0x17)
  {
    v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v24 = v21 | 7;
    v25 = v24 + 1;
    p_buf = (__int128 *)operator new(v24 + 1);
    *((_QWORD *)&buf + 1) = v22;
    v38 = v25 | 0x8000000000000000;
    *(_QWORD *)&buf = p_buf;
  }
  else
  {
    HIBYTE(v38) = v21;
    p_buf = &buf;
    if (!v21)
      goto LABEL_32;
  }
  memmove(p_buf, v20, v22);
LABEL_32:
  *((_BYTE *)p_buf + v22) = 0;
  object = v12;
  if (v12)
    xpc_retain(v12);
  else
    object = xpc_null_create();
  v33 = 0;
  Service::runCommand(v5, (uint64_t)&buf, &object, &v33);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(v38) < 0)
    operator delete((void *)buf);
  xpc_release(v12);
LABEL_38:
  if (*a2)
    v26 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  else
    v26 = 0;
  if (v26)
    v27 = 3760250880;
  else
    v27 = 0;
  v28 = xpc_null_create();
  v29 = a1[7];
  *(_QWORD *)&buf = v28;
  v30 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, __int128 *))(v29 + 16))(v29, v27, &buf);
  xpc_release((xpc_object_t)buf);
  xpc_release(v30);
  v10 = v36;
  if (v36)
    goto LABEL_45;
}

void sub_1BF3F7410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

xpc_object_t __copy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c15_ZTSN3xpc4dictE56c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  void *v5;
  void *v6;
  xpc_object_t result;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v4 = (const void *)a2[5];
  if (v4)
  {
    v5 = _Block_copy(v4);
    v6 = (void *)a2[6];
    a1[5] = v5;
    a1[6] = v6;
    if (v6)
      goto LABEL_3;
  }
  else
  {
    v6 = (void *)a2[6];
    a1[5] = 0;
    a1[6] = v6;
    if (v6)
    {
LABEL_3:
      result = xpc_retain(v6);
      v8 = a2[8];
      a1[7] = a2[7];
      a1[8] = v8;
      if (!v8)
        return result;
      goto LABEL_7;
    }
  }
  result = xpc_null_create();
  a1[6] = result;
  v8 = a2[8];
  a1[7] = a2[7];
  a1[8] = v8;
  if (!v8)
    return result;
LABEL_7:
  v9 = (unint64_t *)(v8 + 16);
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  return result;
}

void __destroy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c15_ZTSN3xpc4dictE56c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  const void *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_53(_QWORD *a1, void **a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  void *v10;
  void *v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD v18[5];
  void *aBlock;
  xpc_object_t object;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_16:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 1174405120;
      v18[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_54;
      v18[3] = &__block_descriptor_tmp_57_1;
      v18[4] = v7;
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v11 = *a2;
        aBlock = v10;
        object = v11;
        if (v11)
          goto LABEL_6;
      }
      else
      {
        v11 = *a2;
        aBlock = 0;
        object = v11;
        if (v11)
        {
LABEL_6:
          xpc_retain(v11);
          v12 = (uint64_t *)(v7 + 120);
          v13 = (std::__shared_weak_count *)a1[6];
          v21 = a1[5];
          v22 = v13;
          if (!v13)
            goto LABEL_12;
          goto LABEL_10;
        }
      }
      object = xpc_null_create();
      v12 = (uint64_t *)(v7 + 120);
      v13 = (std::__shared_weak_count *)a1[6];
      v21 = a1[5];
      v22 = v13;
      if (!v13)
      {
LABEL_12:
        ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v12, (uint64_t)v18);
        if (v22)
          std::__shared_weak_count::__release_weak(v22);
        xpc_release(object);
        object = 0;
        if (aBlock)
          _Block_release(aBlock);
        goto LABEL_16;
      }
LABEL_10:
      p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
      do
        v15 = __ldxr(p_shared_weak_owners);
      while (__stxr(v15 + 1, p_shared_weak_owners));
      goto LABEL_12;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_54(uint64_t a1)
{
  _QWORD *v2;
  const void *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  xpc_object_t v7;
  uint64_t v8;
  xpc_object_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  std::string *v13;
  __int128 v14;
  NSObject *v15;
  uint64_t *v16;
  uint64_t v17;
  CommandDriverFactory *v18;
  uint64_t v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::string::size_type v31;
  xpc_object_t value;
  const char *v33;
  std::string *v34;
  uint64_t v35;
  std::string::size_type size;
  xpc_object_t v37;
  xpc_object_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *p_shared_weak_owners;
  unint64_t v42;
  void *v43;
  void *v44;
  NSObject *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  xpc_object_t v49;
  void *v50;
  std::string *v51;
  xpc_object_t v52;
  xpc_object_t v53;
  _QWORD v54[6];
  std::__shared_weak_count *v55;
  void *v56;
  void *aBlock;
  dispatch_object_t v58;
  std::string v59;
  uint64_t v60;
  uint64_t v61;
  xpc_object_t object;
  std::__shared_weak_count *v63;
  std::string v64;
  std::string __dst;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 32);
  if ((*(unsigned int (**)(_QWORD *))(*v2 + 88))(v2))
  {
    memset(&v64, 170, sizeof(v64));
    v3 = (const void *)*MEMORY[0x1E0CFB0A8];
    v4 = strlen((const char *)*MEMORY[0x1E0CFB0A8]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v10 = v4 | 7;
      v11 = v10 + 1;
      p_dst = (std::string *)operator new(v10 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_12:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        v12 = (char *)operator new(0x28uLL);
        strcpy(v12, " rejected; ABM is shutting down ");
        v13 = std::string::append(&__dst, v12, 0x20uLL);
        v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v64.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        operator delete(v12);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v15 = v2[11];
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
LABEL_14:
            v17 = *(_QWORD *)(a1 + 40);
            v16 = (uint64_t *)(a1 + 40);
            if (!v17)
            {
LABEL_92:
              if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v64.__r_.__value_.__l.__data_);
              return;
            }
LABEL_48:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            size = HIBYTE(v64.__r_.__value_.__r.__words[2]);
            if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = v64.__r_.__value_.__l.__size_;
            if (size)
            {
              v37 = xpc_dictionary_create(0, 0, 0);
              if (v37 || (v37 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8A86C](v37) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v37);
                  v38 = v37;
                }
                else
                {
                  v38 = xpc_null_create();
                }
              }
              else
              {
                v38 = xpc_null_create();
                v37 = 0;
              }
              xpc_release(v37);
              v49 = xpc_null_create();
              v50 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
              xpc_release(v50);
              xpc_release(v49);
              if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v51 = &v64;
              else
                v51 = (std::string *)v64.__r_.__value_.__r.__words[0];
              v52 = xpc_string_create((const char *)v51);
              if (!v52)
                v52 = xpc_null_create();
              xpc_dictionary_set_value(v38, (const char *)*MEMORY[0x1E0CFB0D0], v52);
              v53 = xpc_null_create();
              xpc_release(v52);
              xpc_release(v53);
            }
            LODWORD(object) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v16, (unsigned int *)&object, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_92;
          }
        }
        else
        {
          v15 = v2[11];
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            goto LABEL_14;
        }
        v34 = &v64;
        if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v34 = (std::string *)v64.__r_.__value_.__r.__words[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
        _os_log_impl(&dword_1BF335000, v15, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v35 = *(_QWORD *)(a1 + 40);
        v16 = (uint64_t *)(a1 + 40);
        if (!v35)
          goto LABEL_92;
        goto LABEL_48;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_12;
  }
  if (MEMORY[0x1C3B8A86C](*(_QWORD *)(a1 + 48)) == MEMORY[0x1E0C812F8])
  {
    __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
    v18 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    v19 = off_1ED70FD08;
    if (!off_1ED70FD08)
    {
      CommandDriverFactory::create_default_global(v18);
      v20 = *(_OWORD *)&v64.__r_.__value_.__l.__data_;
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = 0uLL;
      v21 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
      off_1ED70FD08 = v20;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      if (v64.__r_.__value_.__l.__size_)
      {
        v24 = (unint64_t *)(v64.__r_.__value_.__l.__size_ + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          (*(void (**)(std::string::size_type))(*(_QWORD *)v64.__r_.__value_.__l.__size_ + 16))(v64.__r_.__value_.__l.__size_);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v64.__r_.__value_.__l.__size_);
        }
      }
      v19 = off_1ED70FD08;
    }
    v26 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    v60 = v19;
    v61 = *(&off_1ED70FD08 + 1);
    if (*(&off_1ED70FD08 + 1))
    {
      v27 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    (*(void (**)(xpc_object_t *__return_ptr, uint64_t))(*(_QWORD *)v19 + 16))(&object, v19);
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
    if (v63)
    {
      __dst.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v63);
      if (__dst.__r_.__value_.__l.__size_)
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)object;
      if (v63)
        std::__shared_weak_count::__release_weak(v63);
    }
    if (v26)
    {
      v29 = (unint64_t *)&v26->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v31 = __dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__r.__words[0])
    {
      memset(&v64, 170, sizeof(v64));
      value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 48), (const char *)*MEMORY[0x1E0CFB2D0]);
      object = value;
      if (value)
        xpc_retain(value);
      else
        object = xpc_null_create();
      xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v33);
      xpc_release(object);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v59, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
      else
        v59 = v64;
      v54[0] = MEMORY[0x1E0C809B0];
      v54[1] = 1174405120;
      v54[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_55;
      v54[3] = &__block_descriptor_tmp_56_0;
      v40 = *(_QWORD *)(a1 + 56);
      v39 = *(std::__shared_weak_count **)(a1 + 64);
      v54[4] = v2;
      v54[5] = v40;
      v55 = v39;
      if (v39)
      {
        p_shared_weak_owners = (unint64_t *)&v39->__shared_weak_owners_;
        do
          v42 = __ldxr(p_shared_weak_owners);
        while (__stxr(v42 + 1, p_shared_weak_owners));
      }
      v43 = *(void **)(a1 + 40);
      if (v43)
        v43 = _Block_copy(v43);
      v56 = v43;
      v44 = _Block_copy(v54);
      v45 = v2[17];
      if (v45)
        dispatch_retain(v45);
      aBlock = v44;
      v58 = v45;
      (*(void (**)(std::string::size_type, std::string *, void **))(*(_QWORD *)v31 + 216))(v31, &v59, &aBlock);
      if (v58)
        dispatch_release(v58);
      if (aBlock)
        _Block_release(aBlock);
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v59.__r_.__value_.__l.__data_);
      if (v56)
        _Block_release(v56);
      if (v55)
        std::__shared_weak_count::__release_weak(v55);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
    }
    v46 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
    if (__dst.__r_.__value_.__l.__size_)
    {
      v47 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
  }
  else
  {
    v7 = xpc_null_create();
    v8 = *(_QWORD *)(a1 + 40);
    v64.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
    v9 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, std::string *))(v8 + 16))(v8, 3760250882, &v64);
    xpc_release(v64.__r_.__value_.__l.__data_);
    xpc_release(v9);
  }
}

void sub_1BF3F7DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,xpc_object_t object)
{
  uint64_t v28;

  if (*(char *)(v28 - 105) < 0)
  {
    operator delete(*(void **)(v28 - 128));
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v28 - 96);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v28 - 96);
  _Unwind_Resume(a1);
}

void sub_1BF3F7EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF3F7EFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  xpc_release(*(xpc_object_t *)(v1 - 96));
  if (*(char *)(v1 - 105) < 0)
  {
    operator delete(*(void **)(v1 - 128));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1BF3F7F60);
}

void sub_1BF3F7F30()
{
  void *v0;
  uint64_t v1;

  xpc_release(*(xpc_object_t *)(v1 - 128));
  xpc_release(v0);
  JUMPOUT(0x1BF3F7F60);
}

void sub_1BF3F7F58(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1BF3F7F70(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  operator delete(v1);
  if (*(char *)(v2 - 73) < 0)
  {
    operator delete(*(void **)(v2 - 96));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1BF3F7F60);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_55(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  NSObject *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  xpc_object_t v15;
  uint64_t v16;
  xpc_object_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  NSObject *v22;
  _BYTE object[24];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (a1[5])
      {
        v10 = *a2;
        if (*a2)
          v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v11 = 0;
        if (v11)
        {
          v12 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)object = 138412290;
            *(_QWORD *)&object[4] = v10;
            _os_log_error_impl(&dword_1BF335000, v12, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
          }
        }
        else
        {
          v20 = *a3;
          v21 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          if (!*a3)
            v21 = 0;
          if (v21)
          {
            v22 = *(NSObject **)(v7 + 88);
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)object = 138412290;
              *(_QWORD *)&object[4] = v20;
              _os_log_impl(&dword_1BF335000, v22, OS_LOG_TYPE_DEFAULT, "#I %@", object, 0xCu);
            }
          }
        }
        if (*a2)
          v13 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v13 = 0;
        if (v13)
          v14 = 3760250880;
        else
          v14 = 0;
        v15 = xpc_null_create();
        v16 = a1[7];
        *(_QWORD *)object = v15;
        v17 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, _BYTE *))(v16 + 16))(v16, v14, object);
        xpc_release(*(xpc_object_t *)object);
        xpc_release(v17);
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1BF3F8184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_59(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = (_QWORD *)a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      if (!v9)
      {
LABEL_23:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v9 = a1[5];
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
        {
LABEL_10:
          v14 = (std::__shared_weak_count *)v6[16];
          if (!v14 || (v15 = v6[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v17 = v16;
          v18 = operator new(0x20uLL);
          *v18 = v6;
          v18[1] = v10;
          v18[2] = v9;
          v18[3] = v11;
          if (v11)
          {
            p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
            do
              v20 = __ldxr(p_shared_weak_owners);
            while (__stxr(v20 + 1, p_shared_weak_owners));
          }
          v21 = v6[17];
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          v24 = operator new(0x18uLL);
          *v24 = v18;
          v24[1] = v15;
          v24[2] = v17;
          dispatch_async_f(v21, v24, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
          do
            v25 = __ldaxr(v22);
          while (__stlxr(v25 - 1, v22));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          if (v11)
            std::__shared_weak_count::__release_weak(v11);
          goto LABEL_23;
        }
      }
      else
      {
        v10 = 0;
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
          goto LABEL_10;
      }
      v12 = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_61(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = (_QWORD *)a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      if (!v9)
      {
LABEL_23:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v9 = a1[5];
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
        {
LABEL_10:
          v14 = (std::__shared_weak_count *)v6[16];
          if (!v14 || (v15 = v6[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v17 = v16;
          v18 = operator new(0x20uLL);
          *v18 = v6;
          v18[1] = v10;
          v18[2] = v9;
          v18[3] = v11;
          if (v11)
          {
            p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
            do
              v20 = __ldxr(p_shared_weak_owners);
            while (__stxr(v20 + 1, p_shared_weak_owners));
          }
          v21 = v6[17];
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          v24 = operator new(0x18uLL);
          *v24 = v18;
          v24[1] = v15;
          v24[2] = v17;
          dispatch_async_f(v21, v24, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
          do
            v25 = __ldaxr(v22);
          while (__stlxr(v25 - 1, v22));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          if (v11)
            std::__shared_weak_count::__release_weak(v11);
          goto LABEL_23;
        }
      }
      else
      {
        v10 = 0;
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
          goto LABEL_10;
      }
      v12 = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_63(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = (_QWORD *)a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      if (!v9)
      {
LABEL_23:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v9 = a1[5];
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
        {
LABEL_10:
          v14 = (std::__shared_weak_count *)v6[16];
          if (!v14 || (v15 = v6[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v17 = v16;
          v18 = operator new(0x20uLL);
          *v18 = v6;
          v18[1] = v10;
          v18[2] = v9;
          v18[3] = v11;
          if (v11)
          {
            p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
            do
              v20 = __ldxr(p_shared_weak_owners);
            while (__stxr(v20 + 1, p_shared_weak_owners));
          }
          v21 = v6[17];
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          v24 = operator new(0x18uLL);
          *v24 = v18;
          v24[1] = v15;
          v24[2] = v17;
          dispatch_async_f(v21, v24, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
          do
            v25 = __ldaxr(v22);
          while (__stlxr(v25 - 1, v22));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          if (v11)
            std::__shared_weak_count::__release_weak(v11);
          goto LABEL_23;
        }
      }
      else
      {
        v10 = 0;
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
          goto LABEL_10;
      }
      v12 = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_65(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = (_QWORD *)a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      if (!v9)
      {
LABEL_23:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v9 = a1[5];
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
        {
LABEL_10:
          v14 = (std::__shared_weak_count *)v6[16];
          if (!v14 || (v15 = v6[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v17 = v16;
          v18 = operator new(0x20uLL);
          *v18 = v6;
          v18[1] = v10;
          v18[2] = v9;
          v18[3] = v11;
          if (v11)
          {
            p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
            do
              v20 = __ldxr(p_shared_weak_owners);
            while (__stxr(v20 + 1, p_shared_weak_owners));
          }
          v21 = v6[17];
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          v24 = operator new(0x18uLL);
          *v24 = v18;
          v24[1] = v15;
          v24[2] = v17;
          dispatch_async_f(v21, v24, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
          do
            v25 = __ldaxr(v22);
          while (__stlxr(v25 - 1, v22));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          if (v11)
            std::__shared_weak_count::__release_weak(v11);
          goto LABEL_23;
        }
      }
      else
      {
        v10 = 0;
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
          goto LABEL_10;
      }
      v12 = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_67(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = (_QWORD *)a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      if (!v9)
      {
LABEL_23:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v9 = a1[5];
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
        {
LABEL_10:
          v14 = (std::__shared_weak_count *)v6[16];
          if (!v14 || (v15 = v6[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v17 = v16;
          v18 = operator new(0x20uLL);
          *v18 = v6;
          v18[1] = v10;
          v18[2] = v9;
          v18[3] = v11;
          if (v11)
          {
            p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
            do
              v20 = __ldxr(p_shared_weak_owners);
            while (__stxr(v20 + 1, p_shared_weak_owners));
          }
          v21 = v6[17];
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          v24 = operator new(0x18uLL);
          *v24 = v18;
          v24[1] = v15;
          v24[2] = v17;
          dispatch_async_f(v21, v24, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb4_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
          do
            v25 = __ldaxr(v22);
          while (__stlxr(v25 - 1, v22));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          if (v11)
            std::__shared_weak_count::__release_weak(v11);
          goto LABEL_23;
        }
      }
      else
      {
        v10 = 0;
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
          goto LABEL_10;
      }
      v12 = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_69(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = (_QWORD *)a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      if (!v9)
      {
LABEL_23:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v9 = a1[5];
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
        {
LABEL_10:
          v14 = (std::__shared_weak_count *)v6[16];
          if (!v14 || (v15 = v6[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v17 = v16;
          v18 = operator new(0x20uLL);
          *v18 = v6;
          v18[1] = v10;
          v18[2] = v9;
          v18[3] = v11;
          if (v11)
          {
            p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
            do
              v20 = __ldxr(p_shared_weak_owners);
            while (__stxr(v20 + 1, p_shared_weak_owners));
          }
          v21 = v6[17];
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          v24 = operator new(0x18uLL);
          *v24 = v18;
          v24[1] = v15;
          v24[2] = v17;
          dispatch_async_f(v21, v24, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb5_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
          do
            v25 = __ldaxr(v22);
          while (__stlxr(v25 - 1, v22));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          if (v11)
            std::__shared_weak_count::__release_weak(v11);
          goto LABEL_23;
        }
      }
      else
      {
        v10 = 0;
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
          goto LABEL_10;
      }
      v12 = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_71(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  xpc_object_t v10;
  const void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  xpc_object_t v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  NSObject *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_26:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v10 = *a2;
      if (v10)
      {
        xpc_retain(v10);
        v11 = *a3;
        if (*a3)
          goto LABEL_6;
      }
      else
      {
        v10 = xpc_null_create();
        v11 = *a3;
        if (*a3)
        {
LABEL_6:
          v12 = _Block_copy(v11);
          v14 = a1[5];
          v13 = (std::__shared_weak_count *)a1[6];
          if (!v13)
          {
LABEL_12:
            v17 = (std::__shared_weak_count *)v7[16];
            if (!v17 || (v18 = v7[15], (v19 = std::__shared_weak_count::lock(v17)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v20 = v19;
            v21 = operator new(0x28uLL);
            *v21 = v7;
            v21[1] = v10;
            v22 = xpc_null_create();
            v21[2] = v12;
            v21[3] = v14;
            v21[4] = v13;
            if (v13)
            {
              p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
              do
                v24 = __ldxr(p_shared_weak_owners);
              while (__stxr(v24 + 1, p_shared_weak_owners));
            }
            v25 = v7[17];
            v26 = (unint64_t *)&v20->__shared_owners_;
            do
              v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
            v28 = operator new(0x18uLL);
            *v28 = v21;
            v28[1] = v18;
            v28[2] = v20;
            dispatch_async_f(v25, v28, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb6_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
            do
              v29 = __ldaxr(v26);
            while (__stlxr(v29 - 1, v26));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            if (v13)
              std::__shared_weak_count::__release_weak(v13);
            xpc_release(v22);
            goto LABEL_26;
          }
LABEL_10:
          v15 = (unint64_t *)&v13->__shared_weak_owners_;
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
          goto LABEL_12;
        }
      }
      v12 = 0;
      v14 = a1[5];
      v13 = (std::__shared_weak_count *)a1[6];
      if (!v13)
        goto LABEL_12;
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_73(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  xpc_object_t v10;
  const void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  xpc_object_t v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  NSObject *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_26:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v10 = *a2;
      if (v10)
      {
        xpc_retain(v10);
        v11 = *a3;
        if (*a3)
          goto LABEL_6;
      }
      else
      {
        v10 = xpc_null_create();
        v11 = *a3;
        if (*a3)
        {
LABEL_6:
          v12 = _Block_copy(v11);
          v14 = a1[5];
          v13 = (std::__shared_weak_count *)a1[6];
          if (!v13)
          {
LABEL_12:
            v17 = (std::__shared_weak_count *)v7[16];
            if (!v17 || (v18 = v7[15], (v19 = std::__shared_weak_count::lock(v17)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v20 = v19;
            v21 = operator new(0x28uLL);
            *v21 = v7;
            v21[1] = v10;
            v22 = xpc_null_create();
            v21[2] = v12;
            v21[3] = v14;
            v21[4] = v13;
            if (v13)
            {
              p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
              do
                v24 = __ldxr(p_shared_weak_owners);
              while (__stxr(v24 + 1, p_shared_weak_owners));
            }
            v25 = v7[17];
            v26 = (unint64_t *)&v20->__shared_owners_;
            do
              v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
            v28 = operator new(0x18uLL);
            *v28 = v21;
            v28[1] = v18;
            v28[2] = v20;
            dispatch_async_f(v25, v28, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb7_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
            do
              v29 = __ldaxr(v26);
            while (__stlxr(v29 - 1, v26));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            if (v13)
              std::__shared_weak_count::__release_weak(v13);
            xpc_release(v22);
            goto LABEL_26;
          }
LABEL_10:
          v15 = (unint64_t *)&v13->__shared_weak_owners_;
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
          goto LABEL_12;
        }
      }
      v12 = 0;
      v14 = a1[5];
      v13 = (std::__shared_weak_count *)a1[6];
      if (!v13)
        goto LABEL_12;
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_75(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  xpc_object_t v10;
  const void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  xpc_object_t v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  NSObject *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_26:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v10 = *a2;
      if (v10)
      {
        xpc_retain(v10);
        v11 = *a3;
        if (*a3)
          goto LABEL_6;
      }
      else
      {
        v10 = xpc_null_create();
        v11 = *a3;
        if (*a3)
        {
LABEL_6:
          v12 = _Block_copy(v11);
          v14 = a1[5];
          v13 = (std::__shared_weak_count *)a1[6];
          if (!v13)
          {
LABEL_12:
            v17 = (std::__shared_weak_count *)v7[16];
            if (!v17 || (v18 = v7[15], (v19 = std::__shared_weak_count::lock(v17)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v20 = v19;
            v21 = operator new(0x28uLL);
            *v21 = v7;
            v21[1] = v10;
            v22 = xpc_null_create();
            v21[2] = v12;
            v21[3] = v14;
            v21[4] = v13;
            if (v13)
            {
              p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
              do
                v24 = __ldxr(p_shared_weak_owners);
              while (__stxr(v24 + 1, p_shared_weak_owners));
            }
            v25 = v7[17];
            v26 = (unint64_t *)&v20->__shared_owners_;
            do
              v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
            v28 = operator new(0x18uLL);
            *v28 = v21;
            v28[1] = v18;
            v28[2] = v20;
            dispatch_async_f(v25, v28, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb8_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
            do
              v29 = __ldaxr(v26);
            while (__stlxr(v29 - 1, v26));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            if (v13)
              std::__shared_weak_count::__release_weak(v13);
            xpc_release(v22);
            goto LABEL_26;
          }
LABEL_10:
          v15 = (unint64_t *)&v13->__shared_weak_owners_;
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
          goto LABEL_12;
        }
      }
      v12 = 0;
      v14 = a1[5];
      v13 = (std::__shared_weak_count *)a1[6];
      if (!v13)
        goto LABEL_12;
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_77(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = (_QWORD *)a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      if (!v9)
      {
LABEL_23:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v9 = a1[5];
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
        {
LABEL_10:
          v14 = (std::__shared_weak_count *)v6[16];
          if (!v14 || (v15 = v6[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v17 = v16;
          v18 = operator new(0x20uLL);
          *v18 = v6;
          v18[1] = v10;
          v18[2] = v9;
          v18[3] = v11;
          if (v11)
          {
            p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
            do
              v20 = __ldxr(p_shared_weak_owners);
            while (__stxr(v20 + 1, p_shared_weak_owners));
          }
          v21 = v6[17];
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          v24 = operator new(0x18uLL);
          *v24 = v18;
          v24[1] = v15;
          v24[2] = v17;
          dispatch_async_f(v21, v24, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb9_E3__9EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
          do
            v25 = __ldaxr(v22);
          while (__stlxr(v25 - 1, v22));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          if (v11)
            std::__shared_weak_count::__release_weak(v11);
          goto LABEL_23;
        }
      }
      else
      {
        v10 = 0;
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
          goto LABEL_10;
      }
      v12 = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_79(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  xpc_object_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  xpc_object_t v24;
  NSObject *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (!v10)
      {
LABEL_26:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      if (*a3)
      {
        v11 = _Block_copy(*a3);
        v10 = a1[5];
        v12 = (std::__shared_weak_count *)a1[6];
        if (!v12)
          goto LABEL_10;
      }
      else
      {
        v11 = 0;
        v12 = (std::__shared_weak_count *)a1[6];
        if (!v12)
        {
LABEL_10:
          v15 = *a2;
          if (*a2)
          {
            xpc_retain(*a2);
            v16 = (std::__shared_weak_count *)v7[16];
            if (!v16)
LABEL_31:
              std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          else
          {
            v15 = xpc_null_create();
            v16 = (std::__shared_weak_count *)v7[16];
            if (!v16)
              goto LABEL_31;
          }
          v17 = v7[15];
          v18 = std::__shared_weak_count::lock(v16);
          if (!v18)
            goto LABEL_31;
          v19 = v18;
          v20 = operator new(0x28uLL);
          v21 = v20;
          *v20 = v7;
          v20[1] = v11;
          v20[2] = v10;
          v20[3] = v12;
          if (v12)
          {
            p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
            do
              v23 = __ldxr(p_shared_weak_owners);
            while (__stxr(v23 + 1, p_shared_weak_owners));
          }
          v20[4] = v15;
          v24 = xpc_null_create();
          v25 = v7[17];
          v26 = (unint64_t *)&v19->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
          v28 = operator new(0x18uLL);
          *v28 = v21;
          v28[1] = v17;
          v28[2] = v19;
          dispatch_async_f(v25, v28, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb10_E4__10EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
          do
            v29 = __ldaxr(v26);
          while (__stlxr(v29 - 1, v26));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
          xpc_release(v24);
          if (v12)
            std::__shared_weak_count::__release_weak(v12);
          goto LABEL_26;
        }
      }
      v13 = (unint64_t *)&v12->__shared_weak_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_81(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  xpc_object_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  xpc_object_t v24;
  NSObject *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (!v10)
      {
LABEL_26:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      if (*a3)
      {
        v11 = _Block_copy(*a3);
        v10 = a1[5];
        v12 = (std::__shared_weak_count *)a1[6];
        if (!v12)
          goto LABEL_10;
      }
      else
      {
        v11 = 0;
        v12 = (std::__shared_weak_count *)a1[6];
        if (!v12)
        {
LABEL_10:
          v15 = *a2;
          if (*a2)
          {
            xpc_retain(*a2);
            v16 = (std::__shared_weak_count *)v7[16];
            if (!v16)
LABEL_31:
              std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          else
          {
            v15 = xpc_null_create();
            v16 = (std::__shared_weak_count *)v7[16];
            if (!v16)
              goto LABEL_31;
          }
          v17 = v7[15];
          v18 = std::__shared_weak_count::lock(v16);
          if (!v18)
            goto LABEL_31;
          v19 = v18;
          v20 = operator new(0x28uLL);
          v21 = v20;
          *v20 = v7;
          v20[1] = v11;
          v20[2] = v10;
          v20[3] = v12;
          if (v12)
          {
            p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
            do
              v23 = __ldxr(p_shared_weak_owners);
            while (__stxr(v23 + 1, p_shared_weak_owners));
          }
          v20[4] = v15;
          v24 = xpc_null_create();
          v25 = v7[17];
          v26 = (unint64_t *)&v19->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
          v28 = operator new(0x18uLL);
          *v28 = v21;
          v28[1] = v17;
          v28[2] = v19;
          dispatch_async_f(v25, v28, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb11_E4__11EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
          do
            v29 = __ldaxr(v26);
          while (__stlxr(v29 - 1, v26));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
          xpc_release(v24);
          if (v12)
            std::__shared_weak_count::__release_weak(v12);
          goto LABEL_26;
        }
      }
      v13 = (unint64_t *)&v12->__shared_weak_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_83(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  xpc_object_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  xpc_object_t v24;
  NSObject *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (!v10)
      {
LABEL_26:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      if (*a3)
      {
        v11 = _Block_copy(*a3);
        v10 = a1[5];
        v12 = (std::__shared_weak_count *)a1[6];
        if (!v12)
          goto LABEL_10;
      }
      else
      {
        v11 = 0;
        v12 = (std::__shared_weak_count *)a1[6];
        if (!v12)
        {
LABEL_10:
          v15 = *a2;
          if (*a2)
          {
            xpc_retain(*a2);
            v16 = (std::__shared_weak_count *)v7[16];
            if (!v16)
LABEL_31:
              std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          else
          {
            v15 = xpc_null_create();
            v16 = (std::__shared_weak_count *)v7[16];
            if (!v16)
              goto LABEL_31;
          }
          v17 = v7[15];
          v18 = std::__shared_weak_count::lock(v16);
          if (!v18)
            goto LABEL_31;
          v19 = v18;
          v20 = operator new(0x28uLL);
          v21 = v20;
          *v20 = v7;
          v20[1] = v11;
          v20[2] = v10;
          v20[3] = v12;
          if (v12)
          {
            p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
            do
              v23 = __ldxr(p_shared_weak_owners);
            while (__stxr(v23 + 1, p_shared_weak_owners));
          }
          v20[4] = v15;
          v24 = xpc_null_create();
          v25 = v7[17];
          v26 = (unint64_t *)&v19->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
          v28 = operator new(0x18uLL);
          *v28 = v21;
          v28[1] = v17;
          v28[2] = v19;
          dispatch_async_f(v25, v28, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb12_E4__12EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
          do
            v29 = __ldaxr(v26);
          while (__stlxr(v29 - 1, v26));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
          xpc_release(v24);
          if (v12)
            std::__shared_weak_count::__release_weak(v12);
          goto LABEL_26;
        }
      }
      v13 = (unint64_t *)&v12->__shared_weak_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_85(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = (_QWORD *)a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      if (!v9)
      {
LABEL_23:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v9 = a1[5];
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
        {
LABEL_10:
          v14 = (std::__shared_weak_count *)v6[16];
          if (!v14 || (v15 = v6[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v17 = v16;
          v18 = operator new(0x20uLL);
          *v18 = v6;
          v18[1] = v10;
          v18[2] = v9;
          v18[3] = v11;
          if (v11)
          {
            p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
            do
              v20 = __ldxr(p_shared_weak_owners);
            while (__stxr(v20 + 1, p_shared_weak_owners));
          }
          v21 = v6[17];
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          v24 = operator new(0x18uLL);
          *v24 = v18;
          v24[1] = v15;
          v24[2] = v17;
          dispatch_async_f(v21, v24, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb13_E4__13EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
          do
            v25 = __ldaxr(v22);
          while (__stlxr(v25 - 1, v22));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          if (v11)
            std::__shared_weak_count::__release_weak(v11);
          goto LABEL_23;
        }
      }
      else
      {
        v10 = 0;
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
          goto LABEL_10;
      }
      v12 = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_87(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v6;
  int v7;
  xpc_object_t v8;
  xpc_object_t v9;
  std::__shared_weak_count *v10;
  xpc_object_t v11;
  unsigned int v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unsigned int v15;
  xpc_object_t object;
  CFTypeRef cf;
  std::__shared_weak_count *v19;

  v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v4)
    return;
  v6 = std::__shared_weak_count::lock(v4);
  v19 = v6;
  if (!v6)
    return;
  if (!*(_QWORD *)(a1 + 32))
  {
    v10 = v6;
LABEL_19:
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  cf = (CFTypeRef)TelephonyBasebandCreateController();
  v7 = TelephonyBasebandPowerDebugUnblock();
  v8 = xpc_dictionary_create(0, 0, 0);
  v9 = v8;
  if (v8)
  {
    object = v8;
  }
  else
  {
    v9 = xpc_null_create();
    object = v9;
    if (!v9)
    {
      v11 = xpc_null_create();
      v9 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x1C3B8A86C](v9) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v9);
    goto LABEL_13;
  }
  v11 = xpc_null_create();
LABEL_12:
  object = v11;
LABEL_13:
  xpc_release(v9);
  if (v7)
    v12 = 0;
  else
    v12 = -534716414;
  v15 = v12;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, &v15, &object);
  xpc_release(object);
  if (cf)
    CFRelease(cf);
  v10 = v19;
  if (v19)
    goto LABEL_19;
}

void sub_1BF3F9C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, const void *a12, __int16 a13, char a14, char a15)
{
  xpc_release(object);
  ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef(&a12);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_1BF3F9C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_89(uint64_t a1, xpc_object_t *a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  xpc_object_t value;
  std::__shared_weak_count *v9;
  int v10;
  xpc_object_t v11;
  int v12;
  xpc_object_t v13;
  int v14;
  xpc_object_t v15;
  int v16;
  xpc_object_t v17;
  int v18;
  xpc_object_t v19;
  int v20;
  xpc_object_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  int v35;
  xpc_object_t v36;
  xpc_object_t v37;
  xpc_object_t v38;
  unsigned int v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unsigned int v42;
  xpc_object_t object;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v47;

  v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v4)
    return;
  v7 = std::__shared_weak_count::lock(v4);
  v47 = v7;
  if (!v7)
    return;
  if (!*(_QWORD *)(a1 + 32))
  {
    v9 = v7;
LABEL_65:
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    return;
  }
  v44 = 0;
  v45 = 0;
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFC050]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  v10 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  v11 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFC0E0]);
  object = v11;
  if (v11)
    xpc_retain(v11);
  else
    object = xpc_null_create();
  v12 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  v13 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFC0B0]);
  object = v13;
  if (v13)
    xpc_retain(v13);
  else
    object = xpc_null_create();
  v14 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  v15 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFC0F8]);
  object = v15;
  if (v15)
    xpc_retain(v15);
  else
    object = xpc_null_create();
  v16 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  v17 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFC100]);
  object = v17;
  if (v17)
    xpc_retain(v17);
  else
    object = xpc_null_create();
  v18 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  v19 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFC118]);
  object = v19;
  if (v19)
    xpc_retain(v19);
  else
    object = xpc_null_create();
  v20 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  v21 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFC0D8]);
  object = v21;
  if (v21)
    xpc_retain(v21);
  else
    object = xpc_null_create();
  v22 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  if (v12)
    v23 = 2;
  else
    v23 = 0;
  v24 = v23 | v10;
  if (v14)
    v25 = 4;
  else
    v25 = 0;
  if (v16)
    v26 = 8;
  else
    v26 = 0;
  v27 = v24 | v25 | v26;
  if (v18)
    v28 = 16;
  else
    v28 = 0;
  if (v20)
    v29 = 32;
  else
    v29 = 0;
  v30 = v28 | v29;
  if (v22)
    v31 = 64;
  else
    v31 = 0;
  LODWORD(v44) = v27 | v30 | v31;
  v32 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB148]);
  object = v32;
  if (v32)
    xpc_retain(v32);
  else
    object = xpc_null_create();
  HIDWORD(v44) = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  v33 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB7C0]);
  object = v33;
  if (v33)
    xpc_retain(v33);
  else
    object = xpc_null_create();
  LODWORD(v45) = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  v34 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFC0B8]);
  object = v34;
  if (v34)
    xpc_retain(v34);
  else
    object = xpc_null_create();
  BYTE4(v45) = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  BYTE5(v45) = 0;
  v35 = TelephonyBasebandSetPowerDebugOptions();
  object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v36 = xpc_dictionary_create(0, 0, 0);
  v37 = v36;
  if (v36)
  {
    object = v36;
  }
  else
  {
    v37 = xpc_null_create();
    object = v37;
    if (!v37)
    {
      v38 = xpc_null_create();
      v37 = 0;
      goto LABEL_60;
    }
  }
  if (MEMORY[0x1C3B8A86C](v37) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v37);
    goto LABEL_61;
  }
  v38 = xpc_null_create();
LABEL_60:
  object = v38;
LABEL_61:
  xpc_release(v37);
  if (v35)
    v39 = 0;
  else
    v39 = -534716414;
  v42 = v39;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, &v42, &object);
  xpc_release(object);
  v9 = v47;
  if (v47)
    goto LABEL_65;
}

void sub_1BF3FA128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, char a13)
{
  xpc_release(object);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_91(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v6;
  int v7;
  xpc_object_t v8;
  xpc_object_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  unsigned int v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  unsigned int v38;
  xpc_object_t object;
  int64_t value;
  int64_t v41;
  std::__shared_weak_count *v43;

  v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v4)
    return;
  v6 = std::__shared_weak_count::lock(v4);
  v43 = v6;
  if (!v6)
    return;
  if (!*(_QWORD *)(a1 + 32))
  {
    v11 = v6;
LABEL_41:
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    return;
  }
  value = 0;
  v41 = 0;
  v7 = MEMORY[0x1C3B88790](&value);
  object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v8 = xpc_dictionary_create(0, 0, 0);
  v9 = v8;
  v10 = MEMORY[0x1E0C812F8];
  if (v8)
  {
    object = v8;
  }
  else
  {
    v9 = xpc_null_create();
    object = v9;
    if (!v9)
    {
      v12 = xpc_null_create();
      v9 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x1C3B8A86C](v9) == v10)
  {
    xpc_retain(v9);
    goto LABEL_13;
  }
  v12 = xpc_null_create();
LABEL_12:
  object = v12;
LABEL_13:
  xpc_release(v9);
  if (v7)
  {
    if (MEMORY[0x1C3B8A86C](object) == v10)
    {
      v13 = xpc_BOOL_create(value & 1);
      if (!v13)
        v13 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E0CFC050], v13);
      v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
      v15 = xpc_BOOL_create((value & 2) != 0);
      if (!v15)
        v15 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E0CFC0E0], v15);
      v16 = xpc_null_create();
      xpc_release(v15);
      xpc_release(v16);
      v17 = xpc_BOOL_create((value & 4) != 0);
      if (!v17)
        v17 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E0CFC0B0], v17);
      v18 = xpc_null_create();
      xpc_release(v17);
      xpc_release(v18);
      v19 = xpc_BOOL_create((value & 8) != 0);
      if (!v19)
        v19 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E0CFC0F8], v19);
      v20 = xpc_null_create();
      xpc_release(v19);
      xpc_release(v20);
      v21 = xpc_BOOL_create((value & 0x10) != 0);
      if (!v21)
        v21 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E0CFC100], v21);
      v22 = xpc_null_create();
      xpc_release(v21);
      xpc_release(v22);
      v23 = xpc_BOOL_create((value & 0x20) != 0);
      if (!v23)
        v23 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E0CFC118], v23);
      v24 = xpc_null_create();
      xpc_release(v23);
      xpc_release(v24);
      v25 = xpc_BOOL_create((value & 0x40) != 0);
      if (!v25)
        v25 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E0CFC0D8], v25);
      v26 = xpc_null_create();
      xpc_release(v25);
      xpc_release(v26);
      v27 = xpc_int64_create(HIDWORD(value));
      if (!v27)
        v27 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E0CFB148], v27);
      v28 = xpc_null_create();
      xpc_release(v27);
      xpc_release(v28);
      v29 = xpc_int64_create(v41);
      if (!v29)
        v29 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E0CFB7C0], v29);
      v30 = xpc_null_create();
      xpc_release(v29);
      xpc_release(v30);
      v31 = xpc_BOOL_create(SBYTE4(v41));
      if (!v31)
        v31 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E0CFC0B8], v31);
      v32 = xpc_null_create();
      xpc_release(v31);
      xpc_release(v32);
      v33 = xpc_BOOL_create(SBYTE5(v41));
      if (!v33)
        v33 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E0CFBF10], v33);
      v34 = xpc_null_create();
      xpc_release(v33);
      xpc_release(v34);
    }
    v35 = 0;
  }
  else
  {
    v35 = -534716414;
  }
  v38 = v35;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, &v38, &object);
  xpc_release(object);
  v11 = v43;
  if (v43)
    goto LABEL_41;
}

void sub_1BF3FA8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;

  xpc_release(v13);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void RadioModule::finishInitialization_sync(RadioModule *this)
{
  std::__shared_weak_count *v2;
  char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  CommandDriverFactory *v11;
  uint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  void *v27;
  NSObject *v28;
  const char *v29;
  size_t v30;
  void *v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  CFTypeRef v42;
  const void *v43;
  size_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  NSObject *v53;
  const void *v54;
  size_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  NSObject *v63;
  CommandDriverFactory *v64;
  uint64_t v65;
  __int128 v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  NSObject *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  char v88;
  char v89;
  char v90;
  char v91;
  void (*v92)(char *, char *, uint64_t);
  void (*v93)(uint64_t, _WORD *, unsigned int);
  unint64_t *v94;
  unint64_t v95;
  _QWORD *v96;
  unint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  _QWORD *v102;
  unint64_t v103;
  uint64_t **v104;
  __int128 v105;
  pthread_mutex_t *v106;
  unsigned int *v107;
  unsigned int v108;
  uint64_t *v109;
  uint64_t *v110;
  int v111;
  uint64_t **v112;
  uint64_t *v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  unsigned int *v122;
  unsigned int v123;
  _QWORD **v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  int v140;
  _QWORD *v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  int v145;
  int v146;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  int v150;
  int v151;
  int v152;
  _QWORD *v153;
  __int128 v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  unsigned int *v161;
  unsigned int v162;
  uint64_t **v163;
  unsigned int *v164;
  unsigned int *v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int *v168;
  unsigned int v169;
  unsigned int v170;
  int v171;
  unsigned int v172;
  uint64_t v173;
  BOOL v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t i;
  uint64_t v178;
  unsigned int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t **v182;
  int v183;
  int v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  BOOL v189;
  BOOL v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t **v193;
  uint64_t **v194;
  int v195;
  uint64_t ***v196;
  BOOL v197;
  BOOL v198;
  uint64_t ***v199;
  int v200;
  BOOL v201;
  int v202;
  uint64_t *v203;
  uint64_t *v204;
  int v205;
  uint64_t **v206;
  int v207;
  int v208;
  uint64_t *v209;
  uint64_t *v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  unsigned int *v217;
  unsigned int *v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int *v221;
  unsigned int v222;
  unsigned int v223;
  _QWORD *v224;
  _QWORD *v225;
  uint64_t v226;
  int *v227;
  int v228;
  uint64_t v229;
  unsigned int *v230;
  unsigned int v231;
  unsigned int v232;
  _QWORD *v233;
  uint64_t *v234;
  unsigned int *v235;
  unsigned int v236;
  unsigned int *v237;
  unsigned int *v238;
  uint64_t *v239;
  _QWORD *v240;
  _QWORD *v241;
  uint64_t *v242;
  unsigned int v243;
  uint64_t v244;
  uint64_t *v245;
  uint64_t *v246;
  uint64_t v247;
  int v248;
  BOOL v249;
  BOOL v250;
  uint64_t *v251;
  RadioModule *v252;
  int v253;
  uint64_t *v254;
  _QWORD *v255;
  uint64_t v256;
  unsigned int *v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  unsigned int *v262;
  unsigned int *v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int *v266;
  unsigned int v267;
  unsigned int v268;
  char *v269;
  char *v270;
  unsigned int *v271;
  unsigned int *v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int *v275;
  unsigned int v276;
  unsigned int v277;
  void (*v278)(__int128 *, __int128 *, uint64_t);
  std::__shared_weak_count *v279;
  std::__shared_weak_count *v280;
  std::__shared_weak_count *v281;
  std::__shared_weak_count *v282;
  int v283;
  int v284;
  unsigned int *shared_weak_owners;
  unsigned int *v286;
  unsigned int v287;
  unsigned int v288;
  uint64_t shared_owners;
  unsigned int *v290;
  unsigned int v291;
  unsigned int v292;
  unint64_t *v293;
  unint64_t v294;
  const void *v295;
  _OWORD *v296;
  uint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  unint64_t *v301;
  unint64_t v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  unsigned int *v306;
  unsigned int v307;
  unsigned int v308;
  uint64_t *v309;
  void *v310;
  void *v311;
  uint64_t v312;
  uint64_t **v313;
  std::__shared_weak_count *v314;
  std::__shared_weak_count *v315;
  uint64_t v317;
  uint64_t ***v318;
  std::__shared_weak_count *v319;
  uint64_t v320;
  std::__shared_weak_count *v321;
  uint64_t v322;
  std::__shared_weak_count *v323;
  __int128 v324;
  _QWORD v325[6];
  std::__shared_weak_count *v326;
  void *v327;
  dispatch_object_t v328;
  void *v329[2];
  unint64_t v330;
  _QWORD v331[6];
  std::__shared_weak_count *v332;
  void *v333;
  dispatch_object_t v334;
  void *__p[2];
  unint64_t v336;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v339;
  _QWORD aBlock[6];
  std::__shared_weak_count *v341;
  void *v342;
  dispatch_object_t object;
  std::__shared_weak_count *v344;
  std::__shared_weak_count *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t (*v348)(_QWORD *);
  void *v349;
  char *v350;
  void (*v351)(RadioModule *, int);
  uint64_t v352;
  dispatch_object_t v353;
  void *v354;
  std::__shared_weak_count *v355[2];
  __int128 v356;
  __int128 v357;
  uint64_t v358;
  dispatch_object_t v359;
  void *v360;
  dispatch_object_t v361;
  void *v362;
  unint64_t v363;
  unint64_t v364;
  void *v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  unint64_t v376;
  void *v377;
  uint64_t v378;
  pthread_mutex_t *v379;
  uint64_t v380;

  v380 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 15);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  v3 = (char *)this + 120;
  if (!v2 || (v5 = std::__shared_weak_count::lock(v2)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  v344 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v345 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v315 = v6;
  v11 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v12 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v11);
    v13 = v366;
    v366 = 0uLL;
    v14 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v13;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (*((_QWORD *)&v366 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v366 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v366 + 1) + 16))(*((_QWORD *)&v366 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v366 + 1));
      }
    }
    v12 = off_1ED70FD08;
  }
  v19 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  v346 = v12;
  v347 = *(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v20 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::__shared_weak_count **__return_ptr, uint64_t))(*(_QWORD *)v12 + 16))(v355, v12);
  v344 = 0;
  v345 = 0;
  if (v355[1])
  {
    v345 = std::__shared_weak_count::lock(v355[1]);
    if (v345)
      v344 = v355[0];
    if (v355[1])
      std::__shared_weak_count::__release_weak(v355[1]);
  }
  if (!v19)
    goto LABEL_33;
  v22 = (unint64_t *)&v19->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    v24 = MEMORY[0x1E0C809B0];
    v25 = (_QWORD *)&unk_1BF53B000;
    if (!v344)
      goto LABEL_44;
  }
  else
  {
LABEL_33:
    v24 = MEMORY[0x1E0C809B0];
    v25 = &unk_1BF53B000;
    if (!v344)
      goto LABEL_44;
  }
  aBlock[0] = v24;
  aBlock[1] = v25[262];
  aBlock[2] = ___ZN11RadioModule25finishInitialization_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_96;
  aBlock[4] = this;
  aBlock[5] = v4;
  v341 = v6;
  do
    v26 = __ldxr(p_shared_weak_owners);
  while (__stxr(v26 + 1, p_shared_weak_owners));
  v27 = _Block_copy(aBlock);
  v28 = *((_QWORD *)this + 17);
  if (v28)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v342 = v27;
  object = v28;
  radio::CommandDriver::watchOperatingMode();
  if (object)
    dispatch_release(object);
  if (v342)
    _Block_release(v342);
  if (v341)
    std::__shared_weak_count::__release_weak(v341);
LABEL_44:
  v29 = (const char *)(*(uint64_t (**)(RadioModule *))(*(_QWORD *)this + 16))(this);
  v30 = strlen(v29);
  if (v30 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v31 = (void *)v30;
  if (v30 >= 0x17)
  {
    v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v33 = v30 | 7;
    v34 = v33 + 1;
    v32 = (void **)operator new(v33 + 1);
    __dst[1] = v31;
    v339 = v34 | 0x8000000000000000;
    __dst[0] = v32;
  }
  else
  {
    HIBYTE(v339) = v30;
    v32 = __dst;
    if (!v30)
      goto LABEL_52;
  }
  memmove(v32, v29, (size_t)v31);
LABEL_52:
  *((_BYTE *)v31 + (_QWORD)v32) = 0;
  cf = 0;
  AppleBasebandManager::create();
  v35 = v366;
  v366 = 0uLL;
  v36 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  *((_OWORD *)this + 11) = v35;
  if (!v36)
    goto LABEL_56;
  v37 = (unint64_t *)&v36->__shared_owners_;
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 - 1, v37));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
    v39 = (std::__shared_weak_count *)*((_QWORD *)&v366 + 1);
    if (!*((_QWORD *)&v366 + 1))
      goto LABEL_60;
  }
  else
  {
LABEL_56:
    v39 = (std::__shared_weak_count *)*((_QWORD *)&v366 + 1);
    if (!*((_QWORD *)&v366 + 1))
      goto LABEL_60;
  }
  v40 = (unint64_t *)&v39->__shared_owners_;
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (v41)
  {
LABEL_60:
    v42 = cf;
    if (!cf)
      goto LABEL_62;
    goto LABEL_61;
  }
  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
  std::__shared_weak_count::__release_weak(v39);
  v42 = cf;
  if (cf)
LABEL_61:
    CFRelease(v42);
LABEL_62:
  if (SHIBYTE(v339) < 0)
    operator delete(__dst[0]);
  v43 = (const void *)*MEMORY[0x1E0CFBD68];
  v44 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  if (v44 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v45 = (void *)v44;
  if (v44 >= 0x17)
  {
    v47 = v24;
    v48 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v48 = v44 | 7;
    v49 = v48 + 1;
    v46 = operator new(v48 + 1);
    __p[1] = v45;
    v336 = v49 | 0x8000000000000000;
    __p[0] = v46;
    v24 = v47;
    v25 = &unk_1BF53B000;
  }
  else
  {
    HIBYTE(v336) = v44;
    v46 = __p;
    if (!v44)
      goto LABEL_72;
  }
  memmove(v46, v43, (size_t)v45);
LABEL_72:
  *((_BYTE *)v45 + (_QWORD)v46) = 0;
  v331[0] = v24;
  v50 = v25[262];
  v331[1] = v50;
  v331[2] = ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_97;
  v331[3] = &__block_descriptor_tmp_100_0;
  v331[4] = this;
  v331[5] = v4;
  v332 = v6;
  do
    v51 = __ldxr(p_shared_weak_owners);
  while (__stxr(v51 + 1, p_shared_weak_owners));
  v52 = _Block_copy(v331);
  v53 = *((_QWORD *)this + 17);
  if (v53)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v333 = v52;
  v334 = v53;
  AppleBasebandManager::setEventHandler();
  if (v334)
    dispatch_release(v334);
  if (v333)
    _Block_release(v333);
  if (SHIBYTE(v336) < 0)
    operator delete(__p[0]);
  v54 = (const void *)*MEMORY[0x1E0CFB9A8];
  v55 = strlen((const char *)*MEMORY[0x1E0CFB9A8]);
  if (v55 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v56 = (void *)v55;
  if (v55 >= 0x17)
  {
    v58 = v24;
    v59 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v55 | 7) != 0x17)
      v59 = v55 | 7;
    v60 = v59 + 1;
    v57 = operator new(v59 + 1);
    v329[1] = v56;
    v330 = v60 | 0x8000000000000000;
    v329[0] = v57;
    v24 = v58;
  }
  else
  {
    HIBYTE(v330) = v55;
    v57 = v329;
    if (!v55)
      goto LABEL_90;
  }
  memmove(v57, v54, (size_t)v56);
LABEL_90:
  *((_BYTE *)v56 + (_QWORD)v57) = 0;
  v325[0] = v24;
  v325[1] = v50;
  v325[2] = ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_101;
  v325[3] = &__block_descriptor_tmp_102_0;
  v325[4] = this;
  v325[5] = v4;
  v326 = v6;
  do
    v61 = __ldxr(p_shared_weak_owners);
  while (__stxr(v61 + 1, p_shared_weak_owners));
  v62 = _Block_copy(v325);
  v63 = *((_QWORD *)this + 17);
  if (v63)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v327 = v62;
  v328 = v63;
  AppleBasebandManager::setEventHandler();
  if (v328)
    dispatch_release(v328);
  if (v327)
    _Block_release(v327);
  if (SHIBYTE(v330) < 0)
    operator delete(v329[0]);
  AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 22));
  v64 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v65 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v64);
    v66 = v366;
    v366 = 0uLL;
    v67 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v66;
    if (v67)
    {
      v68 = (unint64_t *)&v67->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    v70 = (std::__shared_weak_count *)*((_QWORD *)&v366 + 1);
    if (*((_QWORD *)&v366 + 1))
    {
      v71 = (unint64_t *)(*((_QWORD *)&v366 + 1) + 8);
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    v65 = off_1ED70FD08;
  }
  v319 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v73 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v65 + 16))(&v320, v65);
  v322 = 0;
  v323 = 0;
  if (v321 && (v323 = std::__shared_weak_count::lock(v321)) != 0)
  {
    v75 = v320;
    v322 = v320;
  }
  else
  {
    v75 = 0;
  }
  v346 = v24;
  v347 = 0x40000000;
  v348 = ___ZN3ctu20SharedSynchronizableI11RadioModuleE13connect_eventIN5boost8signals26signalIFvjENS5_19optional_last_valueIvEEiNSt3__14lessIiEENS4_8functionIS7_EENSD_IFvRKNS5_10connectionEjEEENS5_5mutexEEES1_vJjEEEDTcl7connectfp_cvNSA_10shared_ptrIS1_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSQ_SS_E_block_invoke;
  v349 = &__block_descriptor_tmp_148;
  v350 = v3;
  v351 = RadioModule::handleResetSPMI_sync;
  v352 = 0;
  v76 = _Block_copy(&v346);
  v312 = v75;
  v77 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v77 || (v317 = *((_QWORD *)this + 15), (v78 = std::__shared_weak_count::lock(v77)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v79 = v78;
  v80 = *((_QWORD *)this + 17);
  v353 = v80;
  if (v76)
    v81 = _Block_copy(v76);
  else
    v81 = 0;
  v354 = v81;
  dispatch_retain(v80);
  *(_OWORD *)v355 = 0u;
  v356 = 0u;
  v359 = v80;
  if (v81)
    v81 = _Block_copy(v81);
  v360 = v81;
  dispatch_retain(v80);
  v361 = v80;
  v314 = v79;
  v311 = v76;
  if (!v81)
  {
    v362 = 0;
    dispatch_retain(v80);
    goto LABEL_135;
  }
  v82 = _Block_copy(v81);
  v362 = v82;
  dispatch_retain(v80);
  if (!v82)
  {
LABEL_135:
    dispatch_retain(v80);
    v363 = 0;
    goto LABEL_136;
  }
  v83 = _Block_copy(v82);
  dispatch_retain(v80);
  v363 = 0;
  if (!v83)
  {
LABEL_136:
    dispatch_retain(v80);
    v310 = 0;
    v88 = 1;
LABEL_137:
    dispatch_retain(v80);
    v84 = 0;
    v89 = 1;
LABEL_138:
    dispatch_retain(v80);
    v85 = 0;
    v90 = 1;
LABEL_139:
    dispatch_retain(v80);
    v86 = 0;
    v364 = (unint64_t)v80;
    v91 = 1;
    goto LABEL_140;
  }
  v84 = _Block_copy(v83);
  dispatch_retain(v80);
  v310 = v83;
  if (!v84)
  {
    v88 = 0;
    goto LABEL_137;
  }
  v85 = _Block_copy(v84);
  dispatch_retain(v80);
  if (!v85)
  {
    v88 = 0;
    v89 = 0;
    goto LABEL_138;
  }
  v86 = _Block_copy(v85);
  dispatch_retain(v80);
  if (!v86)
  {
    v88 = 0;
    v89 = 0;
    v90 = 0;
    goto LABEL_139;
  }
  v87 = _Block_copy(v86);
  dispatch_retain(v80);
  v364 = (unint64_t)v80;
  if (v87)
  {
    v88 = 0;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v365 = _Block_copy(v87);
    dispatch_retain(v80);
    dispatch_release(v80);
    _Block_release(v87);
    goto LABEL_141;
  }
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v91 = 0;
LABEL_140:
  v365 = 0;
  dispatch_retain(v80);
  dispatch_release(v80);
LABEL_141:
  dispatch_release(v80);
  if ((v91 & 1) == 0)
    _Block_release(v86);
  dispatch_release(v80);
  if ((v90 & 1) == 0)
    _Block_release(v85);
  v363 = (unint64_t)boost::function1<void,unsigned int>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})>>)::stored_vtable;
  dispatch_release(v80);
  if ((v89 & 1) == 0)
    _Block_release(v84);
  dispatch_release(v80);
  if ((v88 & 1) == 0)
    _Block_release(v310);
  *((_QWORD *)&v367 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v367 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v366 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v366 = 0;
  boost::function1<void,unsigned int>::move_assign((uint64_t)&v366, (uint64_t *)&v363);
  boost::function1<void,unsigned int>::move_assign((uint64_t)&v363, (uint64_t *)&v356 + 1);
  boost::function1<void,unsigned int>::move_assign((uint64_t)&v356 + 8, (uint64_t *)&v366);
  if ((_QWORD)v366)
  {
    if ((v366 & 1) == 0)
    {
      v92 = *(void (**)(char *, char *, uint64_t))(v366 & 0xFFFFFFFFFFFFFFFELL);
      if (v92)
        v92((char *)&v366 + 8, (char *)&v366 + 8, 2);
    }
  }
  if (v363)
  {
    if ((v363 & 1) == 0)
    {
      v93 = *(void (**)(uint64_t, _WORD *, unsigned int))(v363 & 0xFFFFFFFFFFFFFFFELL);
      if (v93)
        v93((uint64_t)&v364, &v364, 2u);
    }
    v363 = 0;
  }
  dispatch_release(v361);
  if (v362)
    _Block_release(v362);
  dispatch_release(v359);
  if (v360)
    _Block_release(v360);
  v94 = (unint64_t *)&v314->__shared_weak_owners_;
  do
    v95 = __ldxr(v94);
  while (__stxr(v95 + 1, v94));
  v96 = operator new(0x18uLL);
  *v96 = &off_1E7903E28;
  v96[1] = v317;
  v96[2] = v314;
  do
    v97 = __ldxr(v94);
  while (__stxr(v97 + 1, v94));
  v98 = operator new(0x18uLL);
  v99 = v98;
  *v98 = &off_1E7903E28;
  v98[1] = v317;
  v98[2] = v314;
  do
    v100 = __ldxr(v94);
  while (__stxr(v100 + 1, v94));
  *((_QWORD *)&v366 + 1) = v98;
  LODWORD(v366) = 2;
  v101 = v355[1];
  if (v355[1] < (std::__shared_weak_count *)v356)
  {
    v102 = operator new(0x18uLL);
    *v102 = &off_1E7903E28;
    v102[1] = v317;
    v102[2] = v314;
    do
      v103 = __ldxr(v94);
    while (__stxr(v103 + 1, v94));
    v101->__shared_owners_ = (uint64_t)v102;
    LODWORD(v101->__vftable) = 2;
    v355[1] = v101 + 1;
LABEL_172:
    (*(void (**)(_QWORD *))(*v99 + 8))(v99);
    goto LABEL_173;
  }
  v227 = std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((uint64_t *)v355, (uint64_t)&v366);
  v228 = v366 ^ ((int)v366 >> 31);
  v355[1] = (std::__shared_weak_count *)v227;
  if (v228 == 2)
  {
    v99 = (_QWORD *)*((_QWORD *)&v366 + 1);
    if (!*((_QWORD *)&v366 + 1))
      goto LABEL_173;
    goto LABEL_172;
  }
  if (v228 == 1)
  {
    v229 = v367;
    if ((_QWORD)v367)
    {
      v230 = (unsigned int *)(v367 + 12);
      do
      {
        v231 = __ldaxr(v230);
        v232 = v231 - 1;
      }
      while (__stlxr(v232, v230));
      if (!v232)
LABEL_382:
        (*(void (**)(uint64_t))(*(_QWORD *)v229 + 24))(v229);
    }
  }
  else
  {
    v229 = v367;
    if ((_QWORD)v367)
    {
      v306 = (unsigned int *)(v367 + 12);
      do
      {
        v307 = __ldaxr(v306);
        v308 = v307 - 1;
      }
      while (__stlxr(v308, v306));
      if (!v308)
        goto LABEL_382;
    }
  }
LABEL_173:
  (*(void (**)(_QWORD *))(*v96 + 8))(v96);
  std::__shared_weak_count::__release_weak(v314);
  v104 = *(uint64_t ***)(v312 + 136);
  *(_QWORD *)&v105 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v105 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v374 = v105;
  v375 = v105;
  v372 = v105;
  v373 = v105;
  v370 = v105;
  v371 = v105;
  v368 = v105;
  v369 = v105;
  v366 = v105;
  v367 = v105;
  v106 = (pthread_mutex_t *)v104[3];
  v376 = 10;
  v377 = &v366;
  v378 = 0;
  v379 = v106;
  pthread_mutex_lock(v106);
  v364 = 0xAAAAAAAAAAAAAAAALL;
  v363 = 0xAAAAAAAAAAAAAAAALL;
  v107 = (unsigned int *)v104[1];
  v318 = (uint64_t ***)v104;
  if (!v107 || (v108 = atomic_load(v107 + 2), v108 != 1))
  {
    v112 = (uint64_t **)operator new(0x20uLL);
    v113 = *v104;
    v114 = **v104;
    v313 = v112;
    v115 = operator new(0x40uLL);
    v116 = v115;
    *v115 = v115;
    v115[1] = v115;
    v115[2] = 0;
    v117 = *(_QWORD **)(v114 + 8);
    if (v117 != (_QWORD *)v114)
    {
      v118 = 0;
      v119 = v115;
      do
      {
        v120 = operator new(0x20uLL);
        v120[2] = v117[2];
        v121 = v117[3];
        v120[3] = v121;
        if (v121)
        {
          v122 = (unsigned int *)(v121 + 8);
          do
            v123 = __ldxr(v122);
          while (__stxr(v123 + 1, v122));
          v119 = (_QWORD *)*v116;
          v118 = v116[2];
        }
        *v120 = v119;
        v120[1] = v116;
        v119[1] = v120;
        *v116 = v120;
        v116[2] = ++v118;
        v117 = (_QWORD *)v117[1];
        v119 = v120;
      }
      while (v117 != (_QWORD *)v114);
    }
    v309 = v113;
    v116[3] = 0;
    v124 = (_QWORD **)(v116 + 3);
    v116[4] = 0;
    v125 = v116 + 4;
    v116[5] = 0;
    *((_BYTE *)v116 + 48) = *(_BYTE *)(v114 + 48);
    v116[3] = v116 + 4;
    v126 = *(_QWORD **)(v114 + 24);
    v127 = (_QWORD *)(v114 + 32);
    if (v126 == (_QWORD *)(v114 + 32))
    {
LABEL_185:
      *((_BYTE *)v116 + 56) = *(_BYTE *)(v114 + 56);
      v128 = *(_QWORD **)(v114 + 24);
      if (v128 != v127)
      {
        v129 = (_QWORD *)v116[3];
        v130 = v116[1];
        do
        {
          v129[6] = v130;
          v131 = v114;
          if (v128 != v127)
            v131 = v128[6];
          v132 = (_QWORD *)v128[1];
          v133 = v132;
          v134 = v128;
          if (v132)
          {
            do
            {
              v135 = v133;
              v133 = (_QWORD *)*v133;
            }
            while (v133);
          }
          else
          {
            do
            {
              v135 = (_QWORD *)v134[2];
              v189 = *v135 == (_QWORD)v134;
              v134 = v135;
            }
            while (!v189);
          }
          v136 = v114;
          if (v135 != v127)
            v136 = v135[6];
          while (v131 != v136)
          {
            v131 = *(_QWORD *)(v131 + 8);
            v130 = *(_QWORD *)(v130 + 8);
          }
          if (v132)
          {
            do
            {
              v137 = v132;
              v132 = (_QWORD *)*v132;
            }
            while (v132);
          }
          else
          {
            do
            {
              v137 = (_QWORD *)v128[2];
              v189 = *v137 == (_QWORD)v128;
              v128 = v137;
            }
            while (!v189);
          }
          v138 = (_QWORD *)v129[1];
          if (v138)
          {
            do
            {
              v139 = v138;
              v138 = (_QWORD *)*v138;
            }
            while (v138);
          }
          else
          {
            do
            {
              v139 = (_QWORD *)v129[2];
              v189 = *v139 == (_QWORD)v129;
              v129 = v139;
            }
            while (!v189);
          }
          v128 = v137;
          v129 = v139;
        }
        while (v137 != v127);
      }
      *v313 = v116;
      v313[1] = 0;
      v159 = (uint64_t *)operator new(0x18uLL);
      v104 = (uint64_t **)v318;
      v159[1] = 0x100000001;
      *v159 = (uint64_t)off_1E7903C50;
      v159[2] = (uint64_t)v116;
      v313[1] = v159;
      v313[2] = (uint64_t *)v309[2];
      v160 = v309[3];
      v313[3] = (uint64_t *)v160;
      if (v160)
      {
        v161 = (unsigned int *)(v160 + 8);
        do
          v162 = __ldxr(v161);
        while (__stxr(v162 + 1, v161));
      }
      v163 = (uint64_t **)operator new(0x18uLL);
      v163[1] = (uint64_t *)0x100000001;
      *v163 = (uint64_t *)off_1E7903BF0;
      v163[2] = (uint64_t *)v313;
      v164 = (unsigned int *)v318[1];
      *v318 = v313;
      v318[1] = v163;
      if (v164)
      {
        v165 = v164 + 2;
        do
        {
          v166 = __ldaxr(v165);
          v167 = v166 - 1;
        }
        while (__stlxr(v167, v165));
        if (!v167)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v164 + 16))(v164);
          v168 = v164 + 3;
          do
          {
            v169 = __ldaxr(v168);
            v170 = v169 - 1;
          }
          while (__stlxr(v170, v168));
          if (!v170)
            (*(void (**)(unsigned int *))(*(_QWORD *)v164 + 24))(v164);
        }
      }
      v111 = 0;
      v109 = **v318;
LABEL_269:
      v110 = (uint64_t *)v109[1];
      if (v109 == v110)
        goto LABEL_373;
      goto LABEL_270;
    }
    while (1)
    {
      v140 = *((_DWORD *)v126 + 8);
      v141 = (_QWORD *)*v125;
      v142 = v116 + 4;
      if (*v124 != v125)
      {
        v143 = (_QWORD *)*v125;
        v144 = v116 + 4;
        if (v141)
        {
          do
          {
            v142 = v143;
            v143 = (_QWORD *)v143[1];
          }
          while (v143);
        }
        else
        {
          do
          {
            v142 = (_QWORD *)v144[2];
            v189 = *v142 == (_QWORD)v144;
            v144 = v142;
          }
          while (v189);
        }
        v145 = *((_DWORD *)v126 + 10);
        v146 = *((_DWORD *)v142 + 8);
        if (v146 == v140)
        {
          if (v140 != 1)
            goto LABEL_230;
          if (*((_DWORD *)v142 + 10) >= v145)
          {
            v147 = (_QWORD *)*v125;
            v148 = v116 + 4;
            v149 = v116 + 4;
            if (v141)
              goto LABEL_234;
LABEL_241:
            v153 = operator new(0x38uLL);
            v154 = *((_OWORD *)v126 + 2);
            v153[6] = v126[6];
            *((_OWORD *)v153 + 2) = v154;
            *v153 = 0;
            v153[1] = 0;
            v153[2] = v149;
            *v148 = v153;
            v155 = (_QWORD *)**v124;
            if (v155)
            {
              *v124 = v155;
              v153 = (_QWORD *)*v148;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v116[4], v153);
            ++v116[5];
            goto LABEL_244;
          }
        }
        else if (v146 >= v140)
        {
LABEL_230:
          v148 = v116 + 4;
          v149 = v116 + 4;
          if (!v141)
            goto LABEL_241;
          v147 = (_QWORD *)*v125;
          if (v140 != 1)
          {
            v150 = *((_DWORD *)v141 + 8);
            v149 = (_QWORD *)*v125;
            while (v140 != v150)
            {
              if (v140 < v150)
              {
                v158 = *v149;
                v148 = v149;
                if (!*v149)
                  goto LABEL_241;
              }
              else
              {
                if (v150 >= v140)
                  goto LABEL_244;
                v158 = v149[1];
                if (!v158)
                  goto LABEL_240;
              }
              v150 = *(_DWORD *)(v158 + 32);
              v149 = (_QWORD *)v158;
            }
            goto LABEL_244;
          }
          while (1)
          {
LABEL_234:
            v149 = v147;
            v151 = *((_DWORD *)v147 + 8);
            if (v151 == 1)
            {
              v152 = *((_DWORD *)v147 + 10);
              if (v152 > v145)
                goto LABEL_233;
              if (v152 >= v145)
                goto LABEL_244;
            }
            else if (v151 > 1)
            {
LABEL_233:
              v147 = (_QWORD *)*v147;
              v148 = v149;
              if (!*v149)
                goto LABEL_241;
              continue;
            }
            v147 = (_QWORD *)v147[1];
            if (!v147)
            {
LABEL_240:
              v148 = v149 + 1;
              goto LABEL_241;
            }
          }
        }
      }
      if (v141)
        v149 = v142;
      else
        v149 = v116 + 4;
      if (v141)
        v148 = v142 + 1;
      else
        v148 = v116 + 4;
      if (!*v148)
        goto LABEL_241;
LABEL_244:
      v156 = (_QWORD *)v126[1];
      if (v156)
      {
        do
        {
          v157 = v156;
          v156 = (_QWORD *)*v156;
        }
        while (v156);
      }
      else
      {
        do
        {
          v157 = (_QWORD *)v126[2];
          v189 = *v157 == (_QWORD)v126;
          v126 = v157;
        }
        while (!v189);
      }
      v126 = v157;
      if (v157 == v127)
        goto LABEL_185;
    }
  }
  v109 = (uint64_t *)**v104;
  v110 = v104[2];
  v111 = 2;
  if (v110 == v109)
    goto LABEL_269;
LABEL_270:
  v171 = 0;
  v172 = v111 - 1;
  do
  {
    v175 = v110[2];
    v176 = *(uint64_t **)(v175 + 32);
    if (v176)
    {
      for (i = *v176; i != v176[1]; i += 24)
      {
        if ((*(_DWORD *)i ^ (*(int *)i >> 31)) > 1)
        {
          if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(i + 8) + 24))(*(_QWORD *)(i + 8)) & 1) != 0)
            goto LABEL_287;
        }
        else
        {
          v178 = *(_QWORD *)(i + 16);
          if (!v178 || (v179 = atomic_load((unsigned int *)(v178 + 8))) == 0)
          {
LABEL_287:
            if (*(_BYTE *)(v175 + 24))
            {
              *(_BYTE *)(v175 + 24) = 0;
              boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v175, &v366);
            }
            break;
          }
        }
      }
    }
    v173 = v110[2];
    if (*(_BYTE *)(v173 + 24))
    {
      v109 = (uint64_t *)v110[1];
      goto LABEL_273;
    }
    v180 = **v104;
    v182 = (uint64_t **)(v180 + 32);
    v181 = *(_QWORD *)(v180 + 32);
    if (!v181)
    {
      if (*(uint64_t **)(v180 + 80) != v110)
        goto LABEL_364;
      v204 = (uint64_t *)v110[1];
      v206 = (uint64_t **)(v180 + 32);
      v185 = (uint64_t *)(v180 + 32);
      if (v204 != (uint64_t *)v180)
        goto LABEL_360;
LABEL_342:
      v209 = (uint64_t *)v185[1];
      v210 = v185;
      if (v209)
      {
        do
        {
          v211 = v209;
          v209 = (uint64_t *)*v209;
        }
        while (v209);
      }
      else
      {
        do
        {
          v211 = (uint64_t *)v210[2];
          v189 = *v211 == (_QWORD)v210;
          v210 = v211;
        }
        while (!v189);
      }
      if (*(uint64_t **)(v180 + 24) == v185)
        *(_QWORD *)(v180 + 24) = v211;
      --*(_QWORD *)(v180 + 40);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v181, v185);
      operator delete(v185);
      goto LABEL_364;
    }
    v183 = *(_DWORD *)(v173 + 64);
    v184 = *(_DWORD *)(v173 + 72);
    v185 = (uint64_t *)(v180 + 32);
    v186 = *(_QWORD *)(v180 + 32);
    if (v183 == 1)
    {
      v185 = (uint64_t *)(v180 + 32);
      v187 = *(_QWORD *)(v180 + 32);
      do
      {
        while (1)
        {
          v200 = *(_DWORD *)(v187 + 32);
          v201 = v200 < 1;
          if (v200 == 1)
            v201 = *(_DWORD *)(v187 + 40) < v184;
          if (v201)
            break;
          v185 = (uint64_t *)v187;
          v187 = *(_QWORD *)v187;
          if (!v187)
            goto LABEL_302;
        }
        v187 = *(_QWORD *)(v187 + 8);
      }
      while (v187);
    }
    else
    {
      do
      {
        v188 = *(_DWORD *)(v186 + 32);
        v189 = v188 == v183;
        v190 = v188 < v183;
        if (v188 >= v183)
          v191 = (uint64_t *)v186;
        else
          v191 = (uint64_t *)(v186 + 8);
        if (v190)
          v192 = v185;
        else
          v192 = (uint64_t *)v186;
        if (v189)
        {
          v191 = (uint64_t *)v186;
          v185 = (uint64_t *)v186;
        }
        else
        {
          v185 = v192;
        }
        v186 = *v191;
      }
      while (*v191);
    }
LABEL_302:
    if ((uint64_t *)v185[6] != v110)
      goto LABEL_364;
    v193 = (uint64_t **)(v180 + 32);
    v194 = *(uint64_t ***)(v180 + 32);
    if (v183 == 1)
    {
      while (1)
      {
        v202 = *((_DWORD *)v194 + 8);
        if (v202 == 1)
        {
          if (v184 < *((_DWORD *)v194 + 10))
            goto LABEL_325;
LABEL_320:
          v194 = (uint64_t **)v194[1];
          if (!v194)
            goto LABEL_326;
        }
        else
        {
          if (v202 <= 1)
            goto LABEL_320;
LABEL_325:
          v193 = v194;
          v194 = (uint64_t **)*v194;
          if (!v194)
            goto LABEL_326;
        }
      }
    }
    do
    {
      v195 = *((_DWORD *)v194 + 8);
      v196 = (uint64_t ***)(v194 + 1);
      v197 = v183 == v195;
      v198 = v183 < v195;
      if (v183 >= v195)
        v199 = (uint64_t ***)(v194 + 1);
      else
        v199 = (uint64_t ***)v194;
      if (!v198)
        v194 = v193;
      if (v197)
        v199 = v196;
      else
        v193 = v194;
      v194 = *v199;
    }
    while (*v199);
LABEL_326:
    v203 = (uint64_t *)v180;
    if (v193 != v182)
      v203 = v193[6];
    v204 = (uint64_t *)v110[1];
    if (v204 == v203)
      goto LABEL_342;
    if (v183 == 1)
    {
      while (1)
      {
        while (1)
        {
          v206 = (uint64_t **)v181;
          v207 = *(_DWORD *)(v181 + 32);
          if (v207 == 1)
            break;
          if (v207 <= 1)
            goto LABEL_338;
LABEL_332:
          v181 = *(_QWORD *)v181;
          if (!*v206)
          {
            v182 = v206;
            goto LABEL_360;
          }
        }
        v208 = *(_DWORD *)(v181 + 40);
        if (v208 > v184)
          goto LABEL_332;
        if (v208 >= v184)
        {
          *(_QWORD *)(v181 + 48) = v204;
          goto LABEL_364;
        }
LABEL_338:
        v181 = *(_QWORD *)(v181 + 8);
        if (!v181)
        {
          v182 = v206 + 1;
          goto LABEL_360;
        }
      }
    }
    v205 = *(_DWORD *)(v181 + 32);
    if (v183 == v205)
      goto LABEL_363;
    while (v183 >= v205)
    {
      if (v205 >= v183)
        goto LABEL_363;
      v212 = *(_QWORD *)(v181 + 8);
      if (!v212)
      {
        v182 = (uint64_t **)(v181 + 8);
        goto LABEL_359;
      }
LABEL_351:
      v205 = *(_DWORD *)(v212 + 32);
      v181 = v212;
      if (v183 == v205)
      {
        *(_QWORD *)(v212 + 48) = v204;
        goto LABEL_364;
      }
    }
    v212 = *(_QWORD *)v181;
    if (*(_QWORD *)v181)
      goto LABEL_351;
    v182 = (uint64_t **)v181;
LABEL_359:
    v206 = (uint64_t **)v181;
LABEL_360:
    v181 = (uint64_t)operator new(0x38uLL);
    v213 = *(_QWORD *)(v173 + 64);
    *(_DWORD *)(v181 + 40) = *(_DWORD *)(v173 + 72);
    *(_QWORD *)(v181 + 32) = v213;
    *(_QWORD *)(v181 + 48) = 0;
    *(_QWORD *)v181 = 0;
    *(_QWORD *)(v181 + 8) = 0;
    *(_QWORD *)(v181 + 16) = v206;
    *v182 = (uint64_t *)v181;
    v214 = **(_QWORD **)(v180 + 24);
    v215 = (uint64_t *)v181;
    if (v214)
    {
      *(_QWORD *)(v180 + 24) = v214;
      v215 = *v182;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v180 + 32), v215);
    ++*(_QWORD *)(v180 + 40);
LABEL_363:
    *(_QWORD *)(v181 + 48) = v204;
LABEL_364:
    v216 = *v110;
    v109 = (uint64_t *)v110[1];
    *(_QWORD *)(v216 + 8) = v109;
    *(_QWORD *)v110[1] = v216;
    --*(_QWORD *)(v180 + 16);
    v217 = (unsigned int *)v110[3];
    v104 = (uint64_t **)v318;
    if (v217)
    {
      v218 = v217 + 2;
      do
      {
        v219 = __ldaxr(v218);
        v220 = v219 - 1;
      }
      while (__stlxr(v220, v218));
      if (!v220)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v217 + 16))(v217);
        v221 = v217 + 3;
        do
        {
          v222 = __ldaxr(v221);
          v223 = v222 - 1;
        }
        while (__stlxr(v223, v221));
        if (!v223)
          (*(void (**)(unsigned int *))(*(_QWORD *)v217 + 24))(v217);
      }
    }
    operator delete(v110);
LABEL_273:
    v174 = v109 != (uint64_t *)**v104 && v172 >= ++v171;
    v110 = v109;
  }
  while (v174);
LABEL_373:
  v104[2] = v109;
  v224 = operator new(0x50uLL);
  v224[1] = 0;
  v224[2] = 0;
  *((_BYTE *)v224 + 24) = 1;
  *((_DWORD *)v224 + 7) = 1;
  *v224 = off_1E7903CB0;
  v225 = operator new(0x38uLL);
  std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v225, (uint64_t *)v355);
  v225[3] = 0;
  v226 = *((_QWORD *)&v356 + 1);
  if (*((_QWORD *)&v356 + 1))
  {
    v225[3] = *((_QWORD *)&v356 + 1);
    if ((v226 & 1) != 0)
    {
      *((_OWORD *)v225 + 2) = v357;
      v225[6] = v358;
    }
    else
    {
      (*(void (**)(__int128 *, _QWORD *, _QWORD))(v226 & 0xFFFFFFFFFFFFFFFELL))(&v357, v225 + 4, 0);
    }
  }
  v224[4] = v225;
  v224[5] = 0;
  v233 = operator new(0x18uLL);
  v233[1] = 0x100000001;
  *v233 = off_1E7903D08;
  v233[2] = v225;
  v224[5] = v233;
  v224[6] = v104[3];
  v234 = v104[4];
  v224[7] = v234;
  if (v234)
  {
    v235 = (unsigned int *)(v234 + 1);
    do
      v236 = __ldxr(v235);
    while (__stxr(v236 + 1, v235));
  }
  *((_DWORD *)v224 + 16) = 0;
  *((_BYTE *)v224 + 68) = 0;
  v363 = (unint64_t)v224;
  v237 = (unsigned int *)operator new(0x18uLL);
  *((_QWORD *)v237 + 1) = 0x100000001;
  v238 = v237 + 2;
  *(_QWORD *)v237 = off_1E7903D68;
  *((_QWORD *)v237 + 2) = v224;
  v364 = (unint64_t)v237;
  v239 = (uint64_t *)**v104;
  v240 = operator new(0x20uLL);
  v241 = v240;
  v242 = v239 + 4;
  v240[2] = v224;
  v240[3] = v237;
  do
    v243 = __ldxr(v238);
  while (__stxr(v243 + 1, v238));
  v244 = *v239;
  *(_QWORD *)(v244 + 8) = v240;
  *v240 = v244;
  *v239 = (uint64_t)v240;
  v240[1] = v239;
  ++v239[2];
  v245 = (uint64_t *)v239[4];
  if (v245)
  {
    v246 = v239 + 4;
    v247 = v239[4];
    do
    {
      v248 = *(_DWORD *)(v247 + 32);
      v249 = v248 == 2;
      v250 = v248 < 2;
      if (v248 >= 2)
        v251 = (uint64_t *)v247;
      else
        v251 = (uint64_t *)(v247 + 8);
      if (!v250)
        v246 = (uint64_t *)v247;
      if (v249)
      {
        v251 = (uint64_t *)v247;
        v246 = (uint64_t *)v247;
      }
      v247 = *v251;
    }
    while (*v251);
    if (v246 == v242 || *((_DWORD *)v246 + 8) != 2)
    {
      v253 = *((_DWORD *)v245 + 8);
      while (v253 != 2)
      {
        if (v253 < 3)
        {
          v254 = (uint64_t *)v245[1];
          if (!v254)
          {
            v242 = v245 + 1;
            goto LABEL_410;
          }
        }
        else
        {
          v254 = (uint64_t *)*v245;
          v242 = v245;
          if (!*v245)
            goto LABEL_410;
        }
        v253 = *((_DWORD *)v254 + 8);
        v245 = v254;
      }
    }
    *((_DWORD *)v224 + 16) = 2;
    *(_QWORD *)((char *)v224 + 68) = 0xAAAAAAAAAAAAAA00;
    v252 = this;
LABEL_413:
    v257 = v237 + 3;
    do
      v258 = __ldxr(v257);
    while (__stxr(v258 + 1, v257));
    *(_QWORD *)&v324 = v224;
    *((_QWORD *)&v324 + 1) = v237;
    do
      v259 = __ldxr(v257);
    while (__stxr(v259 + 1, v257));
    do
    {
      v260 = __ldaxr(v257);
      v261 = v260 - 1;
    }
    while (__stlxr(v261, v257));
    if (!v261)
      (*(void (**)(unsigned int *))(*(_QWORD *)v237 + 24))(v237);
    v262 = (unsigned int *)v364;
    if (v364)
      goto LABEL_421;
  }
  else
  {
    v245 = v239 + 4;
LABEL_410:
    v255 = operator new(0x38uLL);
    v255[4] = 0xAAAAAA0000000002;
    *((_DWORD *)v255 + 10) = -1431655766;
    v255[6] = v241;
    *v255 = 0;
    v255[1] = 0;
    v255[2] = v245;
    *v242 = (uint64_t)v255;
    v256 = *(_QWORD *)v239[3];
    if (v256)
    {
      v239[3] = v256;
      v255 = (_QWORD *)*v242;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v239[4], v255);
    ++v239[5];
    v224 = (_QWORD *)v363;
    v237 = (unsigned int *)v364;
    *(_DWORD *)(v363 + 64) = 2;
    *(_QWORD *)((char *)v224 + 68) = 0xAAAAAAAAAAAAAA00;
    v252 = this;
    if (v237)
      goto LABEL_413;
    v324 = (unint64_t)v224;
    v262 = (unsigned int *)v364;
    if (v364)
    {
LABEL_421:
      v263 = v262 + 2;
      do
      {
        v264 = __ldaxr(v263);
        v265 = v264 - 1;
      }
      while (__stlxr(v265, v263));
      if (!v265)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v262 + 16))(v262);
        v266 = v262 + 3;
        do
        {
          v267 = __ldaxr(v266);
          v268 = v267 - 1;
        }
        while (__stlxr(v268, v266));
        if (!v268)
          (*(void (**)(unsigned int *))(*(_QWORD *)v262 + 24))(v262);
      }
    }
  }
  pthread_mutex_unlock(v379);
  v269 = (char *)v377;
  if (v377)
  {
    if (v378 - 1 >= 0)
    {
      v270 = (char *)v377 + 16 * v378;
      do
      {
        v271 = (unsigned int *)*((_QWORD *)v270 - 1);
        if (v271)
        {
          v272 = v271 + 2;
          do
          {
            v273 = __ldaxr(v272);
            v274 = v273 - 1;
          }
          while (__stlxr(v274, v272));
          if (!v274)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v271 + 16))(v271);
            v275 = v271 + 3;
            do
            {
              v276 = __ldaxr(v275);
              v277 = v276 - 1;
            }
            while (__stlxr(v277, v275));
            if (!v277)
              (*(void (**)(unsigned int *))(*(_QWORD *)v271 + 24))(v271);
          }
        }
        v270 -= 16;
      }
      while (v270 > v269);
    }
    v252 = this;
    if (v376 >= 0xB)
      operator delete(v377);
  }
  if (*((_QWORD *)&v356 + 1))
  {
    if ((BYTE8(v356) & 1) == 0)
    {
      v278 = *(void (**)(__int128 *, __int128 *, uint64_t))(*((_QWORD *)&v356 + 1) & 0xFFFFFFFFFFFFFFFELL);
      if (v278)
        v278(&v357, &v357, 2);
    }
    *((_QWORD *)&v356 + 1) = 0;
  }
  v279 = v355[0];
  if (!v355[0])
    goto LABEL_474;
  v280 = v355[1];
  v281 = v355[0];
  if (v355[1] == v355[0])
    goto LABEL_473;
  v282 = v355[1];
  while (2)
  {
    v283 = (int)v282[-1].__vftable;
    --v282;
    v284 = v283 ^ (v283 >> 31);
    if (v284 == 2)
    {
      shared_owners = v280[-1].__shared_owners_;
      if (shared_owners)
        (*(void (**)(uint64_t))(*(_QWORD *)shared_owners + 8))(shared_owners);
    }
    else if (v284 == 1)
    {
      shared_weak_owners = (unsigned int *)v280[-1].__shared_weak_owners_;
      if (shared_weak_owners)
      {
        v286 = shared_weak_owners + 3;
        do
        {
          v287 = __ldaxr(v286);
          v288 = v287 - 1;
        }
        while (__stlxr(v288, v286));
        if (!v288)
          goto LABEL_464;
      }
    }
    else
    {
      shared_weak_owners = (unsigned int *)v280[-1].__shared_weak_owners_;
      if (shared_weak_owners)
      {
        v290 = shared_weak_owners + 3;
        do
        {
          v291 = __ldaxr(v290);
          v292 = v291 - 1;
        }
        while (__stlxr(v292, v290));
        if (!v292)
LABEL_464:
          (*(void (**)(unsigned int *))(*(_QWORD *)shared_weak_owners + 24))(shared_weak_owners);
      }
    }
    v280 = v282;
    if (v282 != v279)
      continue;
    break;
  }
  v281 = v355[0];
  v252 = this;
LABEL_473:
  v355[1] = v279;
  operator delete(v281);
LABEL_474:
  dispatch_release(v353);
  if (v354)
    _Block_release(v354);
  v293 = (unint64_t *)&v314->__shared_owners_;
  do
    v294 = __ldaxr(v293);
  while (__stlxr(v294 - 1, v293));
  if (v294)
  {
    v295 = v311;
    if (!v311)
      goto LABEL_483;
LABEL_482:
    _Block_release(v295);
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
    std::__shared_weak_count::__release_weak(v314);
    v295 = v311;
    if (v311)
      goto LABEL_482;
  }
LABEL_483:
  v296 = operator new(0x20uLL);
  v296[1] = v324;
  v324 = 0uLL;
  v297 = *((_QWORD *)v252 + 41);
  *(_QWORD *)v296 = v297;
  *((_QWORD *)v296 + 1) = (char *)this + 328;
  *(_QWORD *)(v297 + 8) = v296;
  *((_QWORD *)v252 + 41) = v296;
  ++*((_QWORD *)v252 + 43);
  v298 = v323;
  if (v323)
  {
    v299 = (unint64_t *)&v323->__shared_owners_;
    do
      v300 = __ldaxr(v299);
    while (__stlxr(v300 - 1, v299));
    if (!v300)
    {
      ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
      std::__shared_weak_count::__release_weak(v298);
    }
  }
  if (v321)
    std::__shared_weak_count::__release_weak(v321);
  if (v319)
  {
    v301 = (unint64_t *)&v319->__shared_owners_;
    do
      v302 = __ldaxr(v301);
    while (__stlxr(v302 - 1, v301));
    if (!v302)
    {
      ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
      std::__shared_weak_count::__release_weak(v319);
    }
  }
  if (v326)
    std::__shared_weak_count::__release_weak(v326);
  if (v332)
    std::__shared_weak_count::__release_weak(v332);
  v303 = v345;
  if (v345)
  {
    v304 = (unint64_t *)&v345->__shared_owners_;
    do
      v305 = __ldaxr(v304);
    while (__stlxr(v305 - 1, v304));
    if (!v305)
    {
      ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
      std::__shared_weak_count::__release_weak(v303);
    }
  }
  std::__shared_weak_count::__release_weak(v315);
}

void sub_1BF3FC554(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1BF3FC560(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC56C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC578(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC584(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC590(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC59C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC5A8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC5B4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC5C0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC5CC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  boost::signals2::detail::connection_body_base *v71;
  unsigned int *v72;
  void *v73;

  if (a2)
  {
    if (*(_QWORD *)v72)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100](v72, *(_QWORD *)v72);
      operator delete(*(void **)v72);
    }
    operator delete(v72);
    boost::signals2::detail::connection_body_base::~connection_body_base(v71);
    operator delete(v73);
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&STACK[0x280]);
    boost::signals2::slot<void (),boost::function<void ()>>::~slot((uint64_t)&STACK[0x200]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})>>::~DispatchSlot((uint64_t)&a71);
    JUMPOUT(0x1BF3FCF60);
  }
  _Unwind_Resume(a1);
}

void sub_1BF3FC5F0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC5FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  if (a31)
    std::__shared_weak_count::__release_weak(a31);
  if (a43)
    std::__shared_weak_count::__release_weak(a43);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a62);
  std::__shared_weak_count::__release_weak(a14);
  _Unwind_Resume(a1);
}

void sub_1BF3FC610(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC61C()
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  JUMPOUT(0x1BF3FCDACLL);
}

void sub_1BF3FC630(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC63C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC648(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC654(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC660(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC66C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  uint64_t v13;

  if (a2)
  {
    boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::~variant((uint64_t)&STACK[0x280]);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    std::__shared_weak_count::__release_weak(a13);
    JUMPOUT(0x1BF3FCF50);
  }
  _Unwind_Resume(a1);
}

void sub_1BF3FC688(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC694(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC6A0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC6AC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC6B8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC6C4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC6D0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC6DC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC6E8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC6F4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC700(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC70C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC718(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC724(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC730(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback((uint64_t)&a60);
  if (!a59)
  {
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a62);
    std::__shared_weak_count::__release_weak(a14);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1BF3FCD84);
}

void sub_1BF3FC754(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *__p)
{
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;

  if (a2)
  {
    __cxa_begin_catch(a1);
    v12 = (unsigned int *)__p[3];
    if (v12)
    {
      v13 = v12 + 2;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 16))(v12);
        v16 = v12 + 3;
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
          (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 24))(v12);
      }
    }
    v19 = (unsigned int *)__p[1];
    if (v19)
    {
      v20 = v19 + 2;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 16))(v19);
        v23 = v19 + 3;
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
          (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 24))(v19);
      }
    }
    operator delete(__p);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1BF3FC838(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC844(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC850(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;

  if (a2)
  {
    __cxa_end_catch();
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&STACK[0x280]);
    boost::signals2::slot<void (),boost::function<void ()>>::~slot((uint64_t)&STACK[0x200]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})>>::~DispatchSlot((uint64_t)&a71);
    JUMPOUT(0x1BF3FCF60);
  }
  _Unwind_Resume(a1);
}

void sub_1BF3FC860(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC86C(_Unwind_Exception *a1, int a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a2)
  {
    __cxa_begin_catch(a1);
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy((_QWORD *)v2[4]);
    if (v2[2])
    {
      v3 = (_QWORD *)*v2;
      v4 = (uint64_t *)v2[1];
      v5 = *v4;
      *(_QWORD *)(v5 + 8) = *(_QWORD *)(*v2 + 8);
      *(_QWORD *)v3[1] = v5;
      v2[2] = 0;
      if (v4 != v2)
      {
        do
        {
          v6 = (uint64_t *)v4[1];
          v7 = (unsigned int *)v4[3];
          if (v7)
          {
            v8 = v7 + 2;
            do
            {
              v9 = __ldaxr(v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v8));
            if (!v10)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
              v11 = v7 + 3;
              do
              {
                v12 = __ldaxr(v11);
                v13 = v12 - 1;
              }
              while (__stlxr(v13, v11));
              if (!v13)
                (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
            }
          }
          operator delete(v4);
          v4 = v6;
        }
        while (v6 != v2);
      }
    }
    operator delete(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1BF3FC934(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC940(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  if (a2)
  {
    __cxa_end_catch();
    v12 = *(unsigned int **)(a12 + 8);
    if (v12)
    {
      v13 = v12 + 2;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 16))(v12);
        v16 = v12 + 3;
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
          (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 24))(v12);
      }
    }
    JUMPOUT(0x1BF3FCEB0);
  }
  _Unwind_Resume(a1);
}

void sub_1BF3FC9AC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC9B8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FC9C4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF3FCEB0);
  _Unwind_Resume(a1);
}

void sub_1BF3FC9D0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31)
{
  boost::signals2::connection::~connection((boost::signals2::connection *)&a23);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  if (a20)
    std::__shared_weak_count::__release_weak(a20);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (a31)
    std::__shared_weak_count::__release_weak(a31);
  JUMPOUT(0x1BF3FCD7CLL);
}

void sub_1BF3FC9F4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FCA00(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1BF3FCA28(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;

  if (a2)
  {
    __cxa_end_catch();
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&STACK[0x280]);
    boost::signals2::slot<void (),boost::function<void ()>>::~slot((uint64_t)&STACK[0x200]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})>>::~DispatchSlot((uint64_t)&a71);
    JUMPOUT(0x1BF3FCF60);
  }
  _Unwind_Resume(a1);
}

void sub_1BF3FCA38(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FCA44(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);

  if (a2)
  {
    __cxa_begin_catch(a1);
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
    {
      if ((v3 & 1) == 0)
      {
        v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
        if (v4)
          v4(v2 + 32, v2 + 32, 2);
      }
      *(_QWORD *)(v2 + 24) = 0;
    }
    if (*(_QWORD *)v2)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v2, *(_QWORD *)v2);
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1BF3FCAA8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FCAB4(_Unwind_Exception *a1, int a2)
{
  boost::signals2::detail::connection_body_base *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  if (a2)
  {
    __cxa_end_catch();
    v3 = (unsigned int *)*((_QWORD *)v2 + 5);
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
        v7 = v3 + 3;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
          (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
      }
    }
    boost::signals2::detail::connection_body_base::~connection_body_base(v2);
    JUMPOUT(0x1BF3FCEB0);
  }
  _Unwind_Resume(a1);
}

void sub_1BF3FCB1C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FCB28(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FCB34(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF3FCB3CLL);
  _Unwind_Resume(a1);
}

void sub_1BF3FCB48(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF3FCB50);
  _Unwind_Resume(a1);
}

void sub_1BF3FCB5C(_Unwind_Exception *a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  if (a2)
  {
    v2 = STACK[0x328];
    if (STACK[0x328])
    {
      if ((uint64_t)(STACK[0x330] - 1) >= 0)
      {
        v3 = v2 + 16 * STACK[0x330];
        do
        {
          v4 = *(unsigned int **)(v3 - 8);
          if (v4)
          {
            v5 = v4 + 2;
            do
            {
              v6 = __ldaxr(v5);
              v7 = v6 - 1;
            }
            while (__stlxr(v7, v5));
            if (!v7)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
              v8 = v4 + 3;
              do
              {
                v9 = __ldaxr(v8);
                v10 = v9 - 1;
              }
              while (__stlxr(v10, v8));
              if (!v10)
                (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
            }
          }
          v3 -= 16;
        }
        while (v3 > v2);
      }
      if (STACK[0x320] >= 0xB)
        operator delete((void *)STACK[0x328]);
    }
    JUMPOUT(0x1BF3FCF50);
  }
  _Unwind_Resume(a1);
}

void sub_1BF3FCC00(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FCC0C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF3FCC1CLL);
  _Unwind_Resume(a1);
}

void sub_1BF3FCC2C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF3FCC34);
  _Unwind_Resume(a1);
}

void sub_1BF3FCC40(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FCC5C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FCC68()
{
  JUMPOUT(0x1BF3FCC70);
}

void sub_1BF3FCC80(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46)
{
  dispatch::callback<void({block_pointer})(std::shared_ptr<abm::client::Event>)>::~callback((uint64_t)&a32);
  if (a31)
    std::__shared_weak_count::__release_weak(a31);
  if (a39 < 0)
    operator delete(__p);
  if (a46)
    std::__shared_weak_count::__release_weak(a46);
  JUMPOUT(0x1BF3FCDA4);
}

void sub_1BF3FCCAC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FCCB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::__shared_weak_count *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,...)
{
  va_list va;

  va_start(va, a57);
  dispatch::callback<void({block_pointer})(std::shared_ptr<abm::client::Event>)>::~callback((uint64_t)&a37);
  if (a36)
    std::__shared_weak_count::__release_weak(a36);
  if (a44 < 0)
    operator delete(__p);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::__shared_weak_count::__release_weak(a7);
  _Unwind_Resume(a1);
}

void sub_1BF3FCCE4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FCCF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,const void *a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a49);
  if (a55 < 0)
    operator delete(__p);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a65);
  std::__shared_weak_count::__release_weak(a14);
  _Unwind_Resume(a1);
}

void sub_1BF3FCD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a64);
  std::__shared_weak_count::__release_weak(a14);
  _Unwind_Resume(a1);
}

void sub_1BF3FCD2C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FCD38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  std::__shared_weak_count::__release_weak(a14);
  _Unwind_Resume(a1);
}

void sub_1BF3FCD4C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FCD58(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FCD64(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;

  if (a2)
  {
    boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>::~shared_ptr((uint64_t)&STACK[0x260]);
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&STACK[0x280]);
    boost::signals2::slot<void (),boost::function<void ()>>::~slot((uint64_t)&STACK[0x200]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})>>::~DispatchSlot((uint64_t)&a71);
    JUMPOUT(0x1BF3FCF60);
  }
  _Unwind_Resume(a1);
}

void sub_1BF3FCD8C()
{
  JUMPOUT(0x1BF3FCDA4);
}

void sub_1BF3FCDBC(_Unwind_Exception *a1, int a2)
{
  unint64_t v2;
  void (*v3)(unint64_t *, unint64_t *, uint64_t);

  if (a2)
  {
    boost::function1<void,unsigned int>::~function1((uint64_t *)&STACK[0x280]);
    boost::function<void ()>::~function((uint64_t *)&STACK[0x260]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})>>::~DispatchSlot((uint64_t)&STACK[0x250]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})>>::~DispatchSlot((uint64_t)&STACK[0x240]);
    v2 = STACK[0x218];
    if (STACK[0x218])
    {
      if ((v2 & 1) == 0)
      {
        v3 = *(void (**)(unint64_t *, unint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3)
          v3(&STACK[0x220], &STACK[0x220], 2);
      }
      STACK[0x218] = 0;
    }
    if (STACK[0x200])
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)&STACK[0x200], STACK[0x200]);
      operator delete((void *)STACK[0x200]);
    }
    JUMPOUT(0x1BF3FCF58);
  }
  _Unwind_Resume(a1);
}

void sub_1BF3FCE30(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FCE3C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FCE4C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FCE58(_Unwind_Exception *a1, int a2)
{
  uint64_t *v2;
  _QWORD *v3;

  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(v3);
    std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>>::~list(v2);
    operator delete(v2);
    JUMPOUT(0x1BF3FCEACLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BF3FCF2C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF3FCF38(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;

  if (!a2)
    JUMPOUT(0x1BF3FCF40);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock(&STACK[0x280]);
  boost::signals2::slot<void (),boost::function<void ()>>::~slot(&STACK[0x200]);
  ctu::DispatchSlot<dispatch::block<void({block_pointer})>>::~DispatchSlot(&a71);
  JUMPOUT(0x1BF3FCF60);
}

void ___ZN11RadioModule25finishInitialization_syncEv_block_invoke(_QWORD *a1, uint64_t *a2, const __CFDictionary **a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  const void *v15;
  size_t v16;
  void *v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  const __CFDictionary *v21;
  capabilities::abs *v22;
  capabilities::txpower *v23;
  int Int;
  NSObject *v25;
  const char *v26;
  void *aBlock;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  _BYTE buf[12];
  uint8_t v34[24];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = a1[4];
  v31 = 0;
  v32 = 0;
  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    v32 = std::__shared_weak_count::lock(v5);
    if (!v32)
      return;
    v31 = a1[5];
    if (v31)
    {
      v8 = *a2;
      v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      if (!v8)
        v9 = 0;
      if (v9)
      {
        v10 = *(NSObject **)(v4 + 88);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v34 = 138412290;
          *(_QWORD *)&v34[4] = v8;
          _os_log_error_impl(&dword_1BF335000, v10, OS_LOG_TYPE_ERROR, "%@", v34, 0xCu);
        }
        goto LABEL_9;
      }
      if (*a3
         ? ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get
         : 0)
      {
        v15 = (const void *)*MEMORY[0x1E0CFBF60];
        v16 = strlen((const char *)*MEMORY[0x1E0CFBF60]);
        if (v16 >= 0x7FFFFFFFFFFFFFF8)
          std::string::__throw_length_error[abi:ne180100]();
        v17 = (void *)v16;
        if (v16 >= 0x17)
        {
          v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v16 | 7) != 0x17)
            v19 = v16 | 7;
          v20 = v19 + 1;
          v18 = (void **)operator new(v19 + 1);
          __dst[1] = v17;
          v30 = v20 | 0x8000000000000000;
          __dst[0] = v18;
        }
        else
        {
          HIBYTE(v30) = v16;
          v18 = __dst;
          if (!v16)
            goto LABEL_27;
        }
        memmove(v18, v15, (size_t)v17);
LABEL_27:
        *((_BYTE *)v17 + (_QWORD)v18) = 0;
        v21 = *a3;
        cf = v21;
        if (v21)
          CFRetain(v21);
        aBlock = 0;
        Service::broadcastEvent(v4, (uint64_t)__dst, &cf, (const void **)&aBlock);
        if (aBlock)
          _Block_release(aBlock);
        v22 = (capabilities::abs *)cf;
        if (cf)
          CFRelease(cf);
        if (SHIBYTE(v30) < 0)
          operator delete(__dst[0]);
        v23 = (capabilities::txpower *)capabilities::abs::supportsChargerDesense(v22);
        if ((_DWORD)v23 && capabilities::txpower::supportsPowerChargerDesense(v23))
        {
          memset(v34, 170, 16);
          ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v34, *a3);
          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)buf, (const char *)*MEMORY[0x1E0CFB9E8]);
          Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v34, *(const __CFString **)buf);
          MEMORY[0x1C3B8936C](buf);
          TelephonyBasebandSetChargerDesense();
          v25 = *(NSObject **)(v4 + 88);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            v26 = "Off";
            if (!Int)
              v26 = "On";
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v26;
            _os_log_impl(&dword_1BF335000, v25, OS_LOG_TYPE_DEFAULT, "#I Charger Desense: %s", buf, 0xCu);
          }
          MEMORY[0x1C3B893A8](v34);
        }
      }
    }
  }
LABEL_9:
  v11 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_97(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  const void *v7;
  int v8;
  size_t v9;
  __int128 *v10;
  capabilities::radio *v11;
  __int128 *v12;
  __int128 *v13;
  ctu::iokit::Controller *v14;
  std::__shared_weak_count *v15;
  capabilities::abs *v16;
  RadioModule *v17;
  void (**v18)(void *, std::string *);
  capabilities::abs *v19;
  capabilities::abs *v20;
  capabilities::abs *v21;
  CommandDriverFactory *v22;
  uint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  NSObject *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  _QWORD aBlock[5];
  void (**v47)(void *, std::string *);
  uint8_t buf[16];
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  _QWORD v52[2];
  unint64_t v53;
  std::__shared_weak_count *v55;

  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  v55 = v6;
  if (!v6)
    return;
  if (!a1[5])
  {
    v15 = v6;
LABEL_82:
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    return;
  }
  v53 = 0xAAAAAAAAAAAAAAAALL;
  abm::client::Event::getData(*a2);
  v7 = (const void *)0xAAAAAAAAAAAAAAAALL;
  if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
  {
    v52[0] = 0xAAAAAAAAAAAAAAAALL;
    v52[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v52, (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL);
    v50 = 0uLL;
    v51 = 0;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v44, (const char *)*MEMORY[0x1E0CFB530]);
    ctu::cf::map_adapter::getString();
    MEMORY[0x1C3B8936C](&v44);
    if (SHIBYTE(v51) < 0)
      operator delete((void *)v50);
    v51 = v49;
    v50 = *(_OWORD *)buf;
    v8 = SHIBYTE(v49);
    if (v49 >= 0)
      v9 = HIBYTE(v51);
    else
      v9 = *((_QWORD *)&v50 + 1);
    if (v9 == strlen((const char *)*MEMORY[0x1E0CFB980])
      && (v49 >= 0 ? (v10 = &v50) : (v10 = (__int128 *)v50),
          v11 = (capabilities::radio *)memcmp(v10, (const void *)*MEMORY[0x1E0CFB980], v9),
          !(_DWORD)v11))
    {
      v16 = (capabilities::abs *)capabilities::radio::supportsBasebandStateController(v11);
      if ((_DWORD)v16)
        RadioModule::getResetProperties_sync((RadioModule *)v5);
      v17 = (RadioModule *)capabilities::abs::supportsBatteryInfoMonitoring(v16);
      if ((_DWORD)v17)
      {
        *(_WORD *)(v5 + 320) = 0;
        *(_BYTE *)(v5 + 322) = 0;
        RadioModule::monitorBatteryInfo_sync((RadioModule *)v5);
      }
      RadioModule::setRegion_sync(v17);
      RadioModule::startHealthService_sync((RadioModule *)v5);
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 0x40000000;
      aBlock[2] = ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_2;
      aBlock[3] = &__block_descriptor_tmp_98;
      aBlock[4] = v5;
      v18 = (void (**)(void *, std::string *))_Block_copy(aBlock);
      v47 = v18;
      RadioModule::getVersion_sync(v5, &v47);
      if (v18)
        _Block_release(v18);
      v20 = (capabilities::abs *)capabilities::abs::supportsCalibrationQuery(v19);
      if ((_DWORD)v20)
      {
        if (*(_BYTE *)(v5 + 192) == 3)
          RadioModule::queryFactoryCalibrationStatus_sync((RadioModule *)v5);
        if (*(_BYTE *)(v5 + 200) == 2)
          RadioModule::queryRFCalibrationStatus_sync((RadioModule *)v5);
      }
      v21 = (capabilities::abs *)capabilities::abs::supportsFieldTestConfig(v20);
      if ((_DWORD)v21)
        RadioModule::queryFieldTestConfig_sync((RadioModule *)v5);
      if (capabilities::abs::supportsResetSPMIEvent(v21))
      {
        v44 = 0xAAAAAAAAAAAAAAAALL;
        v45 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
        v22 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
        v23 = off_1ED70FD08;
        if (!off_1ED70FD08)
        {
          CommandDriverFactory::create_default_global(v22);
          v24 = *(_OWORD *)buf;
          memset(buf, 0, sizeof(buf));
          v25 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
          off_1ED70FD08 = v24;
          if (v25)
          {
            v26 = (unint64_t *)&v25->__shared_owners_;
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
          v28 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v29 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          v23 = off_1ED70FD08;
        }
        v31 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
        if (*(&off_1ED70FD08 + 1))
        {
          v32 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
        (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v23 + 16))(&v42, v23);
        v44 = 0;
        v45 = 0;
        if (v43)
        {
          v45 = std::__shared_weak_count::lock(v43);
          if (v45)
            v44 = v42;
          if (v43)
            std::__shared_weak_count::__release_weak(v43);
        }
        if (v31)
        {
          v34 = (unint64_t *)&v31->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        if (v44)
          (*(void (**)(unint64_t))(*(_QWORD *)v44 + 392))(v44);
        v36 = v45;
        if (v45)
        {
          v37 = (unint64_t *)&v45->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
            if (SHIBYTE(v51) < 0)
              goto LABEL_77;
            goto LABEL_78;
          }
        }
      }
    }
    else if (v9 == strlen((const char *)*MEMORY[0x1E0CFBB68])
           && (v8 >= 0 ? (v12 = &v50) : (v12 = (__int128 *)v50), !memcmp(v12, (const void *)*MEMORY[0x1E0CFBB68], v9))
           || v9 == strlen((const char *)*MEMORY[0x1E0CFBD98])
           && (v8 >= 0 ? (v13 = &v50) : (v13 = (__int128 *)v50), !memcmp(v13, (const void *)*MEMORY[0x1E0CFBD98], v9)))
    {
      v14 = *(ctu::iokit::Controller **)(v5 + 304);
      if (v14)
      {
        ctu::iokit::Controller::stopBatteryInfoNotifications(v14);
      }
      else
      {
        v39 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1BF335000, v39, OS_LOG_TYPE_ERROR, "Invalid fIOKitController", buf, 2u);
          if ((SHIBYTE(v51) & 0x80000000) == 0)
            goto LABEL_78;
          goto LABEL_77;
        }
      }
    }
    if (SHIBYTE(v51) < 0)
LABEL_77:
      operator delete((void *)v50);
LABEL_78:
    MEMORY[0x1C3B893A8](v52);
    v7 = (const void *)v53;
  }
  if (v7)
    CFRelease(v7);
  v15 = v55;
  if (v55)
    goto LABEL_82;
}

void sub_1BF3FD7D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  if (*(char *)(v1 - 73) < 0)
    operator delete(*(void **)(v1 - 96));
  MEMORY[0x1C3B893A8](v1 - 72);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v1 - 56));
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void RadioModule::getResetProperties_sync(RadioModule *this)
{
  NSObject *v2;
  const char *v3;
  int v4;
  int v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  NSObject *v16;
  CommandDriverFactory *v17;
  uint64_t v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  void *v36;
  dispatch_object_t object;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  _QWORD aBlock[6];
  std::__shared_weak_count *v45;
  void *v46;
  dispatch_object_t v47;
  _BYTE buf[18];
  __int16 v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 296))
  {
    v2 = *((_QWORD *)this + 11);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      if (*((_BYTE *)this + 289))
        v3 = "true";
      else
        v3 = "false";
      v4 = *((unsigned __int16 *)this + 145);
      v5 = *((_DWORD *)this + 73);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v3;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v4;
      v49 = 1024;
      v50 = v5;
      _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Baseband properties (cached):\n    Coredump supported: %s\n    PowerSequence index: %u\n    Baseband version: 0x%08x", buf, 0x18u);
    }
    return;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v6 || (v7 = *((_QWORD *)this + 15), (v8 = std::__shared_weak_count::lock(v6)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v46 = (void *)0xAAAAAAAAAAAAAAAALL;
  v47 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule23getResetProperties_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_112;
  aBlock[4] = this;
  aBlock[5] = v7;
  v45 = v9;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v15 = _Block_copy(aBlock);
  v16 = *((_QWORD *)this + 17);
  if (v16)
    dispatch_retain(v16);
  v46 = v15;
  v47 = v16;
  v42 = 0xAAAAAAAAAAAAAAAALL;
  v43 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v17 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v18 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v17);
    v19 = *(_OWORD *)buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v20 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v19;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v24 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v18 = off_1ED70FD08;
  }
  v26 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  v38 = v18;
  v39 = *(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v27 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v18 + 16))(&v40, v18);
  v42 = 0;
  v43 = 0;
  if (v41)
  {
    v43 = std::__shared_weak_count::lock(v41);
    if (v43)
      v42 = v40;
    if (v41)
      std::__shared_weak_count::__release_weak(v41);
  }
  if (!v26)
    goto LABEL_43;
  v29 = (unint64_t *)&v26->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    v31 = v42;
    if (v42)
      goto LABEL_44;
  }
  else
  {
LABEL_43:
    v31 = v42;
    if (v42)
    {
LABEL_44:
      v32 = v46;
      if (v46)
        v32 = _Block_copy(v46);
      v36 = v32;
      object = v47;
      if (v47)
        dispatch_retain(v47);
      (*(void (**)(unint64_t, void **))(*(_QWORD *)v31 + 168))(v31, &v36);
      if (object)
        dispatch_release(object);
      if (v36)
        _Block_release(v36);
    }
  }
  v33 = v43;
  if (v43)
  {
    v34 = (unint64_t *)&v43->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v47)
    dispatch_release(v47);
  if (v46)
    _Block_release(v46);
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1BF3FDC7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void RadioModule::monitorBatteryInfo_sync(RadioModule *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  NSObject *v13;
  NSObject *v14;
  unint64_t v15;
  void *v16;
  NSObject *v17;
  char v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  _QWORD v22[6];
  std::__shared_weak_count *v23;
  void *v24;
  dispatch_object_t v25;
  void *v26;
  dispatch_object_t object;
  uint8_t buf[8];
  _QWORD aBlock[6];
  std::__shared_weak_count *v30;
  uint8_t v31[16];

  if (*((_QWORD *)this + 38))
  {
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v2 || (v3 = *((_QWORD *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v5 = v4;
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v5);
    }
    memset(v31, 170, sizeof(v31));
    v10 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN11RadioModule23monitorBatteryInfo_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_113;
    aBlock[4] = this;
    aBlock[5] = v3;
    v30 = v5;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    v12 = _Block_copy(aBlock);
    v13 = *((_QWORD *)this + 17);
    if (v13)
      dispatch_retain(*((dispatch_object_t *)this + 17));
    *(_QWORD *)v31 = v12;
    *(_QWORD *)&v31[8] = v13;
    v14 = *((_QWORD *)this + 11);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF335000, v14, OS_LOG_TYPE_DEFAULT, "#I Registering for battery info updates", buf, 2u);
    }
    v22[0] = v10;
    v22[1] = 1174405120;
    v22[2] = ___ZN11RadioModule23monitorBatteryInfo_syncEv_block_invoke_114;
    v22[3] = &__block_descriptor_tmp_118_0;
    v22[4] = this;
    v22[5] = v3;
    v23 = v5;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    if (v12)
    {
      v24 = _Block_copy(v12);
      v25 = v13;
      if (!v13)
        goto LABEL_21;
    }
    else
    {
      v24 = 0;
      v25 = v13;
      if (!v13)
      {
LABEL_21:
        v16 = _Block_copy(v22);
        v17 = *((_QWORD *)this + 17);
        if (v17)
          dispatch_retain(*((dispatch_object_t *)this + 17));
        v26 = v16;
        object = v17;
        v18 = ctu::iokit::Controller::registerForBatteryInfoChange();
        if (object)
          dispatch_release(object);
        if (v26)
          _Block_release(v26);
        if ((v18 & 1) == 0 && (v19 = *((_QWORD *)this + 11), os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1BF335000, v19, OS_LOG_TYPE_ERROR, "Failed to register for battery info updates", buf, 2u);
          v20 = v25;
          if (!v25)
            goto LABEL_31;
        }
        else
        {
          v20 = v25;
          if (!v25)
          {
LABEL_31:
            if (v24)
              _Block_release(v24);
            if (v23)
              std::__shared_weak_count::__release_weak(v23);
            if (v13)
              dispatch_release(v13);
            if (v12)
              _Block_release(v12);
            if (v30)
              std::__shared_weak_count::__release_weak(v30);
            std::__shared_weak_count::__release_weak(v5);
            return;
          }
        }
        dispatch_release(v20);
        goto LABEL_31;
      }
    }
    dispatch_retain(v13);
    goto LABEL_21;
  }
  v21 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v31 = 0;
    _os_log_error_impl(&dword_1BF335000, v21, OS_LOG_TYPE_ERROR, "Invalid fIOKitController", v31, 2u);
  }
}

void sub_1BF3FE00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28)
{
  std::__shared_weak_count *v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v32;

  dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitBatteryInfo)>::~callback((uint64_t)&a19);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v29);
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v30 - 112);
    v32 = a28;
    if (!a28)
    {
LABEL_3:
      std::__shared_weak_count::__release_weak(v28);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v30 - 112);
    v32 = a28;
    if (!a28)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v32);
  std::__shared_weak_count::__release_weak(v28);
  _Unwind_Resume(a1);
}

void RadioModule::setRegion_sync(RadioModule *this)
{
  CommandDriverFactory *v1;
  uint64_t v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  config::hw *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *__p;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  __int128 v27;

  if (!capabilities::abs::shouldSetRegion(this))
    return;
  v25 = 0xAAAAAAAAAAAAAAAALL;
  v26 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v1 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v2 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v1);
    v3 = v27;
    v27 = 0uLL;
    v4 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v3;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (*((_QWORD *)&v27 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v27 + 1) + 16))(*((_QWORD *)&v27 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v27 + 1));
      }
    }
    v2 = off_1ED70FD08;
  }
  v9 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  v21 = v2;
  v22 = *(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v10 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v2 + 16))(&v23, v2);
  v25 = 0;
  v26 = 0;
  v12 = (config::hw *)v24;
  if (v24)
  {
    v26 = std::__shared_weak_count::lock(v24);
    if (v26)
      v25 = v23;
    v12 = (config::hw *)v24;
    if (v24)
      std::__shared_weak_count::__release_weak(v24);
  }
  if (!v9)
    goto LABEL_26;
  v13 = (unint64_t *)&v9->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v15 = v25;
    if (v25)
    {
LABEL_27:
      config::hw::regionCode(v12);
      (*(void (**)(unint64_t, void **))(*(_QWORD *)v15 + 304))(v15, &__p);
      if (v20 < 0)
        operator delete(__p);
    }
  }
  else
  {
LABEL_26:
    v15 = v25;
    if (v25)
      goto LABEL_27;
  }
  v16 = v26;
  if (v26)
  {
    v17 = (unint64_t *)&v26->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1BF3FE270(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF3FE28C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
  {
    operator delete(__p);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v15 - 48);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v15 - 48);
  _Unwind_Resume(a1);
}

void sub_1BF3FE2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void RadioModule::startHealthService_sync(RadioModule *this)
{
  CFMutableDictionaryRef Mutable;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  DataStallDetection *v18;
  capabilities::radio *v19;
  unsigned __int8 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  CFTypeRef v27;
  CFTypeID v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  CFTypeRef v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  CFTypeRef v40;
  CFTypeRef v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  CFTypeRef cf;
  uint64_t block;
  uint64_t v49;
  void (*v50)(uint64_t);
  void *v51;
  __int128 *v52;

  cf = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
    cf = Mutable;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  v4 = MEMORY[0x1E0C809B0];
  block = MEMORY[0x1E0C809B0];
  v49 = 0x40000000;
  v50 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v51 = &__block_descriptor_tmp_13_2;
  v52 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v5 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v45 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_8;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v5 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v45 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_8;
  }
  v6 = (unint64_t *)(v5 + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
LABEL_8:
  DataStallDetection::create((capabilities::abs *)&v45, (uint64_t *)&v46);
  v8 = v46;
  v46 = 0uLL;
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  *((_OWORD *)this + 16) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  if (*((_QWORD *)&v46 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
  if (*((_QWORD *)&v45 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      v18 = (DataStallDetection *)*((_QWORD *)this + 32);
      if (!v18)
        goto LABEL_24;
      goto LABEL_23;
    }
  }
  v18 = (DataStallDetection *)*((_QWORD *)this + 32);
  if (v18)
LABEL_23:
    DataStallDetection::start(v18);
LABEL_24:
  v19 = (capabilities::radio *)operator new(0x10uLL);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  block = v4;
  v49 = 0x40000000;
  v50 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v51 = &__block_descriptor_tmp_13_2;
  v52 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v21 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v44 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_29;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v21 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v44 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_29;
  }
  v22 = (unint64_t *)(v21 + 8);
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 + 1, v22));
LABEL_29:
  v24 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  v42 = *((_QWORD *)this + 32);
  v43 = v24;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = cf;
  if (cf && (v28 = CFGetTypeID(cf), v28 == CFDictionaryGetTypeID()))
  {
    v41 = v27;
    CFRetain(v27);
  }
  else
  {
    v41 = 0;
  }
  radio::HealthService::HealthService(v19, (uint64_t *)&v44, &v42, &v41);
  v29 = operator new(0x20uLL);
  *v29 = off_1E7903F38;
  v29[1] = 0;
  v29[2] = 0;
  v29[3] = v19;
  v30 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 34) = v19;
  *((_QWORD *)this + 35) = v29;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
      v33 = v41;
      if (!v41)
        goto LABEL_42;
      goto LABEL_41;
    }
  }
  v33 = v41;
  if (v41)
LABEL_41:
    CFRelease(v33);
LABEL_42:
  v34 = v43;
  if (v43)
  {
    v35 = (unint64_t *)&v43->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
  if (!*((_QWORD *)&v44 + 1))
    goto LABEL_51;
  v38 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (v39)
  {
LABEL_51:
    v40 = cf;
    if (!cf)
      return;
    goto LABEL_52;
  }
  ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
  std::__shared_weak_count::__release_weak(v37);
  v40 = cf;
  if (cf)
LABEL_52:
    CFRelease(v40);
}

void sub_1BF3FE710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, __int16 a11, char a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,const void *a21)
{
  _QWORD *v21;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;

  v23 = (std::__shared_weak_count *)v21[1];
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  operator delete(v21);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a21);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_2(uint64_t a1, size_t *a2)
{
  size_t *v2;
  uint64_t v3;
  void **v4;
  __int128 v5;
  size_t v6;
  uint64_t v7;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v9;
  __CFDictionary *v10;
  NSObject *v11;
  config::build *v12;
  const __CFAllocator *v13;
  char *v14;
  const __CFAllocator *v15;
  config::hw *v16;
  const __CFAllocator *v17;
  pid_t v18;
  const __CFAllocator *v19;
  capabilities::radio *v20;
  const __CFAllocator *v21;
  const __CFAllocator *v22;
  os_unfair_lock_s *v23;
  _QWORD *v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *size;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  const void *v34;
  size_t v35;
  std::string::size_type v36;
  std::string *p_p;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  std::string __p;
  CFTypeRef cf;
  std::string v45;
  CFTypeRef v46;

  v2 = a2;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = (void **)(v3 + 152);
  if ((size_t *)(v3 + 152) != a2)
  {
    if (*(char *)(v3 + 175) < 0)
    {
      if (*((char *)a2 + 23) >= 0)
      {
        v6 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (size_t *)*a2;
        v6 = v2[1];
      }
      std::string::__assign_no_alias<false>(v4, a2, v6);
    }
    else if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v4, (void *)*a2, a2[1]);
    }
    else
    {
      v5 = *(_OWORD *)a2;
      *(_QWORD *)(v3 + 168) = a2[2];
      *(_OWORD *)v4 = v5;
    }
  }
  cf = 0;
  v7 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v10 = Mutable;
  if (Mutable)
  {
    cf = Mutable;
    if (*((char *)v2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v45, (const std::string::value_type *)*v2, v2[1]);
    else
      v45 = *(std::string *)v2;
    v12 = (config::build *)ctu::cf::insert<char const*,std::string>(v10, (const __CFString **)*MEMORY[0x1E0CFB618], (uint64_t)&v45, v7, v9);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    config::build::version(v12);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v45, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v45 = __p;
    ctu::cf::insert<char const*,std::string>(v10, (const __CFString **)*MEMORY[0x1E0CFB620], (uint64_t)&v45, v7, v13);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v45.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_23;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_23:
    v14 = (char *)operator new(0x28uLL);
    strcpy(v14, "AppleBasebandServices_Manager-1180");
    std::string::__init_copy_ctor_external(&v45, v14, 0x22uLL);
    ctu::cf::insert<char const*,std::string>(v10, (const __CFString **)*MEMORY[0x1E0CFB3C8], (uint64_t)&v45, v7, v15);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    operator delete(v14);
    config::hw::product(v16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v45, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v45 = __p;
    ctu::cf::insert<char const*,std::string>(v10, (const __CFString **)*MEMORY[0x1E0CFB3C0], (uint64_t)&v45, v7, v17);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v45.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_32;
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_32;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_32:
    v18 = getpid();
    std::to_string(&__p, v18);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v45, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v45 = __p;
    v20 = (capabilities::radio *)ctu::cf::insert<char const*,std::string>(v10, (const __CFString **)*MEMORY[0x1E0CFB138], (uint64_t)&v45, v7, v19);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v45.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_39;
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_39;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_39:
    capabilities::radio::radioType(v20);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v45, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v45 = __p;
    ctu::cf::insert<char const*,std::string>(v10, (const __CFString **)*MEMORY[0x1E0CFB628], (uint64_t)&v45, v7, v21);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v45.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_46;
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_46:
    config::hw::getBootArgs(&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v45, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v45 = __p;
    ctu::cf::insert<char const*,std::string>(v10, (const __CFString **)*MEMORY[0x1E0CFB4F0], (uint64_t)&v45, v7, v22);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v45.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_53;
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_53;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_53:
    pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
    v23 = (os_unfair_lock_s *)off_1ED70FDE8;
    if (!off_1ED70FDE8)
    {
      v24 = operator new(0x30uLL);
      MEMORY[0x1C3B893B4](v24, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x1E0C9B260]);
      v24[3] = 0;
      v24[4] = 0;
      *((_DWORD *)v24 + 10) = 0;
      std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(&v45, (uint64_t)v24);
      v25 = *(_OWORD *)&v45.__r_.__value_.__l.__data_;
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = 0uLL;
      v26 = (std::__shared_weak_count *)*(&off_1ED70FDE8 + 1);
      off_1ED70FDE8 = v25;
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      size = (std::__shared_weak_count *)v45.__r_.__value_.__l.__size_;
      if (v45.__r_.__value_.__l.__size_)
      {
        v30 = (unint64_t *)(v45.__r_.__value_.__l.__size_ + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v23 = (os_unfair_lock_s *)off_1ED70FDE8;
    }
    v42 = (std::__shared_weak_count *)*(&off_1ED70FDE8 + 1);
    if (*(&off_1ED70FDE8 + 1))
    {
      v32 = (unint64_t *)(*(&off_1ED70FDE8 + 1) + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
    v34 = (const void *)*MEMORY[0x1E0CFB478];
    v35 = strlen((const char *)*MEMORY[0x1E0CFB478]);
    if (v35 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v36 = v35;
    if (v35 >= 0x17)
    {
      v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v35 | 7) != 0x17)
        v38 = v35 | 7;
      v39 = v38 + 1;
      p_p = (std::string *)operator new(v38 + 1);
      __p.__r_.__value_.__l.__size_ = v36;
      __p.__r_.__value_.__r.__words[2] = v39 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v35;
      p_p = &__p;
      if (!v35)
        goto LABEL_76;
    }
    memmove(p_p, v34, v36);
LABEL_76:
    p_p->__r_.__value_.__s.__data_[v36] = 0;
    v46 = cf;
    v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v45.__r_.__value_.__l.__size_ = (std::string::size_type)&v46;
    v45.__r_.__value_.__r.__words[2] = (std::string::size_type)v23;
    ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::setPreference<__CFDictionary *>(std::string const&,__CFDictionary *)::{lambda(void)#1}>(v23 + 6, (uint64_t *)&v45);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v42)
    {
      v40 = (unint64_t *)&v42->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    if (cf)
      CFRelease(cf);
    return;
  }
  v11 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v45.__r_.__value_.__l.__data_) = 0;
    _os_log_error_impl(&dword_1BF335000, v11, OS_LOG_TYPE_ERROR, "Failed to create dictionary to update abm domain preferences", (uint8_t *)&v45, 2u);
  }
}

void sub_1BF3FEE20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  operator delete(v23);
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a17);
  _Unwind_Resume(a1);
}

void RadioModule::queryFactoryCalibrationStatus_sync(RadioModule *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  NSObject *v12;
  CommandDriverFactory *v13;
  uint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  dispatch_object_t object;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  _QWORD aBlock[6];
  std::__shared_weak_count *v41;
  void *v42;
  dispatch_object_t v43;
  __int128 v44;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v2 || (v3 = *((_QWORD *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v42 = (void *)0xAAAAAAAAAAAAAAAALL;
  v43 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule34queryFactoryCalibrationStatus_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_120;
  aBlock[4] = this;
  aBlock[5] = v3;
  v41 = v5;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  v11 = _Block_copy(aBlock);
  v12 = *((_QWORD *)this + 17);
  if (v12)
    dispatch_retain(v12);
  v42 = v11;
  v43 = v12;
  v38 = 0xAAAAAAAAAAAAAAAALL;
  v39 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v13 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v14 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v13);
    v15 = v44;
    v44 = 0uLL;
    v16 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v15;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
    if (*((_QWORD *)&v44 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v14 = off_1ED70FD08;
  }
  v22 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  v34 = v14;
  v35 = *(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v23 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v14 + 16))(&v36, v14);
  v38 = 0;
  v39 = 0;
  if (v37)
  {
    v39 = std::__shared_weak_count::lock(v37);
    if (v39)
      v38 = v36;
    if (v37)
      std::__shared_weak_count::__release_weak(v37);
  }
  if (!v22)
    goto LABEL_37;
  v25 = (unint64_t *)&v22->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    v27 = v38;
    if (!v38)
      goto LABEL_46;
  }
  else
  {
LABEL_37:
    v27 = v38;
    if (!v38)
      goto LABEL_46;
  }
  v28 = v42;
  if (v42)
    v28 = _Block_copy(v42);
  v32 = v28;
  object = v43;
  if (v43)
    dispatch_retain(v43);
  (*(void (**)(unint64_t, void **))(*(_QWORD *)v27 + 120))(v27, &v32);
  if (object)
    dispatch_release(object);
  if (v32)
    _Block_release(v32);
LABEL_46:
  v29 = v39;
  if (v39)
  {
    v30 = (unint64_t *)&v39->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v43)
    dispatch_release(v43);
  if (v42)
    _Block_release(v42);
  if (v41)
    std::__shared_weak_count::__release_weak(v41);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF3FF25C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  std::__shared_weak_count *v24;
  uint64_t v25;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 64);
  if (a24)
    std::__shared_weak_count::__release_weak(a24);
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void RadioModule::queryRFCalibrationStatus_sync(RadioModule *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  NSObject *v12;
  CommandDriverFactory *v13;
  uint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  dispatch_object_t object;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  _QWORD aBlock[6];
  std::__shared_weak_count *v41;
  void *v42;
  dispatch_object_t v43;
  __int128 v44;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v2 || (v3 = *((_QWORD *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v42 = (void *)0xAAAAAAAAAAAAAAAALL;
  v43 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule29queryRFCalibrationStatus_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_121;
  aBlock[4] = this;
  aBlock[5] = v3;
  v41 = v5;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  v11 = _Block_copy(aBlock);
  v12 = *((_QWORD *)this + 17);
  if (v12)
    dispatch_retain(v12);
  v42 = v11;
  v43 = v12;
  v38 = 0xAAAAAAAAAAAAAAAALL;
  v39 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v13 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v14 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v13);
    v15 = v44;
    v44 = 0uLL;
    v16 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v15;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
    if (*((_QWORD *)&v44 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v14 = off_1ED70FD08;
  }
  v22 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  v34 = v14;
  v35 = *(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v23 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v14 + 16))(&v36, v14);
  v38 = 0;
  v39 = 0;
  if (v37)
  {
    v39 = std::__shared_weak_count::lock(v37);
    if (v39)
      v38 = v36;
    if (v37)
      std::__shared_weak_count::__release_weak(v37);
  }
  if (!v22)
    goto LABEL_37;
  v25 = (unint64_t *)&v22->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    v27 = v38;
    if (!v38)
      goto LABEL_46;
  }
  else
  {
LABEL_37:
    v27 = v38;
    if (!v38)
      goto LABEL_46;
  }
  v28 = v42;
  if (v42)
    v28 = _Block_copy(v42);
  v32 = v28;
  object = v43;
  if (v43)
    dispatch_retain(v43);
  (*(void (**)(unint64_t, void **))(*(_QWORD *)v27 + 128))(v27, &v32);
  if (object)
    dispatch_release(object);
  if (v32)
    _Block_release(v32);
LABEL_46:
  v29 = v39;
  if (v39)
  {
    v30 = (unint64_t *)&v39->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v43)
    dispatch_release(v43);
  if (v42)
    _Block_release(v42);
  if (v41)
    std::__shared_weak_count::__release_weak(v41);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF3FF5DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  std::__shared_weak_count *v24;
  uint64_t v25;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 64);
  if (a24)
    std::__shared_weak_count::__release_weak(a24);
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void RadioModule::queryFieldTestConfig_sync(RadioModule *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  NSObject *v12;
  CommandDriverFactory *v13;
  uint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  dispatch_object_t object;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  _QWORD aBlock[6];
  std::__shared_weak_count *v41;
  void *v42;
  dispatch_object_t v43;
  __int128 v44;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v2 || (v3 = *((_QWORD *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v42 = (void *)0xAAAAAAAAAAAAAAAALL;
  v43 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule25queryFieldTestConfig_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_122_0;
  aBlock[4] = this;
  aBlock[5] = v3;
  v41 = v5;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  v11 = _Block_copy(aBlock);
  v12 = *((_QWORD *)this + 17);
  if (v12)
    dispatch_retain(v12);
  v42 = v11;
  v43 = v12;
  v38 = 0xAAAAAAAAAAAAAAAALL;
  v39 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v13 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v14 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v13);
    v15 = v44;
    v44 = 0uLL;
    v16 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v15;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
    if (*((_QWORD *)&v44 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v14 = off_1ED70FD08;
  }
  v22 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  v34 = v14;
  v35 = *(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v23 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v14 + 16))(&v36, v14);
  v38 = 0;
  v39 = 0;
  if (v37)
  {
    v39 = std::__shared_weak_count::lock(v37);
    if (v39)
      v38 = v36;
    if (v37)
      std::__shared_weak_count::__release_weak(v37);
  }
  if (!v22)
    goto LABEL_37;
  v25 = (unint64_t *)&v22->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    v27 = v38;
    if (!v38)
      goto LABEL_46;
  }
  else
  {
LABEL_37:
    v27 = v38;
    if (!v38)
      goto LABEL_46;
  }
  v28 = v42;
  if (v42)
    v28 = _Block_copy(v42);
  v32 = v28;
  object = v43;
  if (v43)
    dispatch_retain(v43);
  (*(void (**)(unint64_t, void **))(*(_QWORD *)v27 + 184))(v27, &v32);
  if (object)
    dispatch_release(object);
  if (v32)
    _Block_release(v32);
LABEL_46:
  v29 = v39;
  if (v39)
  {
    v30 = (unint64_t *)&v39->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v43)
    dispatch_release(v43);
  if (v42)
    _Block_release(v42);
  if (v41)
    std::__shared_weak_count::__release_weak(v41);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF3FF95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  std::__shared_weak_count *v24;
  uint64_t v25;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 64);
  if (a24)
    std::__shared_weak_count::__release_weak(a24);
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void RadioModule::stopMonitoringBatteryInfo_sync(ctu::iokit::Controller **this)
{
  NSObject *v1;
  uint8_t v2[16];

  if (this[38])
  {
    ctu::iokit::Controller::stopBatteryInfoNotifications(this[38]);
  }
  else
  {
    v1 = this[11];
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v2 = 0;
      _os_log_error_impl(&dword_1BF335000, v1, OS_LOG_TYPE_ERROR, "Invalid fIOKitController", v2, 2u);
    }
  }
}

void ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_101(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  _BOOL8 v7;
  _QWORD *v8;
  NSObject *v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  NSObject *v14;
  _BYTE *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _BYTE buf[12];
  char v19;
  uint8_t v20[4];
  _BYTE *v21;
  __int16 v22;
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *(NSObject **)(v3 + 88);
        v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
        if (v7)
        {
          v8 = (_QWORD *)(v3 + 152);
          if (*(char *)(v3 + 175) < 0)
            v8 = (_QWORD *)*v8;
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v8;
          _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, "#I Baseband FW Version: %s", buf, 0xCu);
        }
        if (capabilities::abs::supportsCalibrationQuery((capabilities::abs *)v7))
        {
          v9 = *(NSObject **)(v3 + 88);
          v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
          if (v10)
          {
            v11 = capabilities::radio::supportsFactoryCalibrationV2((capabilities::radio *)v10)
                ? radio::asStringV2()
                : radio::asString();
            v12 = v11;
            radio::RFCalibration_t::toString((radio::RFCalibration_t *)(v3 + 200));
            v13 = v19 >= 0 ? buf : *(_BYTE **)buf;
            *(_DWORD *)v20 = 136315394;
            v21 = (_BYTE *)v12;
            v22 = 2080;
            v23 = v13;
            _os_log_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEFAULT, "#I \n--- Factory and RF calibration ---\n%s\n%s\n----------------------------------", v20, 0x16u);
            if (v19 < 0)
              operator delete(*(void **)buf);
          }
        }
        if (MEMORY[0x1C3B8A86C](*(_QWORD *)(v3 + 248)) == MEMORY[0x1E0C812F8])
        {
          v14 = *(NSObject **)(v3 + 88);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            xpc::object::to_string((xpc::object *)(v3 + 248));
            if (v19 >= 0)
              v15 = buf;
            else
              v15 = *(_BYTE **)buf;
            *(_DWORD *)v20 = 136315138;
            v21 = v15;
            _os_log_impl(&dword_1BF335000, v14, OS_LOG_TYPE_DEFAULT, "#I Baseband field test config:\n%s", v20, 0xCu);
            if (v19 < 0)
              operator delete(*(void **)buf);
          }
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF3FFCA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF3FFCBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF3FFCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF3FFCE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RadioModule::handleResetSPMI_sync(RadioModule *this, int a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  int v8;
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 67109120;
    LODWORD(v9) = a2;
    _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I Received request to reset SPMI with data (0x%x)", (uint8_t *)&v8, 8u);
  }
  v5 = TelephonyBasebandResetSPMI();
  v6 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = " not ";
    if (v5)
      v7 = " ";
    v8 = 136315138;
    v9 = v7;
    _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, "#I Request to reset SPMI was%ssuccessful", (uint8_t *)&v8, 0xCu);
  }
}

void RadioModule::sleep(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[17];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::sleep(dispatch::group_session)::$_0>(RadioModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void RadioModule::wake(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[17];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::wake(dispatch::group_session)::$_0>(RadioModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN11RadioModule15getVersion_syncEN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke(_QWORD *a1, std::string::size_type *a2, const __CFDictionary **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::string::size_type v10;
  uint64_t (*v11)(uint64_t);
  NSObject *v12;
  const __CFDictionary *v13;
  uint64_t (*v14)(uint64_t);
  void **v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD v19[2];
  std::__shared_weak_count *v21;
  std::string buf;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    v21 = v8;
    if (v8)
    {
      v9 = v8;
      if (a1[5])
      {
        v10 = *a2;
        v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        if (!v10)
          v11 = 0;
        if (v11)
        {
          v12 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf.__r_.__value_.__l.__data_) = 138412290;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v10;
            _os_log_error_impl(&dword_1BF335000, v12, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&buf, 0xCu);
          }
        }
        else
        {
          v13 = *a3;
          v14 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          if (!*a3)
            v14 = 0;
          if (v14)
          {
            v19[0] = 0xAAAAAAAAAAAAAAAALL;
            v19[1] = 0xAAAAAAAAAAAAAAAALL;
            ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v19, v13);
            ctu::cf::map_adapter::getString();
            v15 = (void **)(v7 + 152);
            if (*(char *)(v7 + 175) < 0)
              operator delete(*v15);
            *(_OWORD *)v15 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
            *(_QWORD *)(v7 + 168) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
            *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
            buf.__r_.__value_.__s.__data_[0] = 0;
            MEMORY[0x1C3B893A8](v19);
          }
        }
        v16 = a1[7];
        if (*(char *)(v7 + 175) < 0)
          std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v7 + 152), *(_QWORD *)(v7 + 160));
        else
          buf = *(std::string *)(v7 + 152);
        (*(void (**)(uint64_t, std::string *))(v16 + 16))(v16, &buf);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1BF4001FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1C3B893A8](&a16);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_1BF400228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF400240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[7];
  if (result)
    result = _Block_copy(result);
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 56);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void ___ZN11RadioModule21getOperatingMode_syncEN8dispatch5blockIU13block_pointerFviEEE_block_invoke(_QWORD *a1, uint64_t *a2, const __CFDictionary **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  NSObject *v12;
  const __CFDictionary *v13;
  uint64_t (*v14)(uint64_t);
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint8_t buf[24];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (a1[5])
      {
        v10 = *a2;
        v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        if (!v10)
          v11 = 0;
        if (v11)
        {
          v12 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v10;
            _os_log_error_impl(&dword_1BF335000, v12, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
          }
        }
        else
        {
          v13 = *a3;
          v14 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          if (!*a3)
            v14 = 0;
          if (v14)
          {
            memset(buf, 170, 16);
            ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, v13);
            ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E0DDF9B0]);
            MEMORY[0x1C3B893A8](buf);
          }
        }
        (*(void (**)(void))(a1[7] + 16))();
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void *__copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c43_ZTSN8dispatch5blockIU13block_pointerFviEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[7];
  if (result)
    result = _Block_copy(result);
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c43_ZTSN8dispatch5blockIU13block_pointerFviEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 56);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void ___ZN11RadioModule23getResetProperties_syncEv_block_invoke(_QWORD *a1, CFErrorRef *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  std::__shared_weak_count *v11;
  const void *v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  int v16;
  int v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count_vtbl *v19;
  NSObject *v20;
  std::string *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::string *v25;
  CFErrorRef v26;
  unint64_t *v27;
  unint64_t v28;
  const void *v29;
  size_t v30;
  size_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _BOOL4 v36;
  uint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count_vtbl *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  size_t v46;
  size_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t *v52;
  unint64_t v53;
  NSObject *v54;
  std::__shared_weak_count *v55;
  CFStringRef *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  const void *v62;
  size_t v63;
  size_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  const __CFString *v68;
  const char *v69;
  const __CFString *v70;
  const __CFAllocator *v71;
  CFNumberRef v72;
  const __CFString *v73;
  _BOOL4 v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  uint64_t (***v79)(void *, const __CFString *);
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  size_t v85;
  size_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  unsigned __int16 *v91;
  unsigned __int16 *v92;
  CFTypeID v93;
  const __CFNumber *v94;
  int v95;
  std::__shared_weak_count *v96;
  uint64_t *v97;
  unint64_t v98;
  NSObject *v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count_vtbl *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  const void *v107;
  size_t v108;
  size_t v109;
  _BYTE *v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  const char *v114;
  _BOOL4 v115;
  std::__shared_weak_count *v116;
  uint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  size_t v126;
  size_t v127;
  _BYTE *v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  std::__shared_weak_count *v132;
  uint64_t *v133;
  unint64_t v134;
  NSObject *v135;
  int v136;
  xpc_object_t v137;
  xpc_object_t v138;
  xpc_object_t v139;
  xpc_object_t v140;
  xpc_object_t v141;
  xpc_object_t v142;
  std::string *v143;
  xpc_object_t v144;
  xpc_object_t v145;
  uint64_t v146;
  const void *v147;
  size_t v148;
  size_t v149;
  _BYTE *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t *p_shared_owners;
  unint64_t v154;
  std::string *v155;
  const void *v156;
  xpc_object_t object;
  __int16 v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  CFTypeRef cf;
  std::string v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  const __CFString *v165;
  CFNumberRef v166;
  const __CFString *valuePtr;
  _BYTE buf[24];
  uint64_t v169;

  v169 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  v164 = v8;
  if (!v8)
    return;
  v163 = a1[5];
  if (!v163)
  {
    v11 = v8;
LABEL_261:
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v154 = __ldaxr(p_shared_owners);
    while (__stlxr(v154 - 1, p_shared_owners));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    return;
  }
  memset(&v162, 0, sizeof(v162));
  if (*a2)
    v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  else
    v9 = 0;
  if (v9)
  {
    std::string::__assign_external(&v162, "Failed to get reset properties", 0x1EuLL);
    v10 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v25 = &v162;
      if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v25 = (std::string *)v162.__r_.__value_.__r.__words[0];
      v26 = *a2;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v25;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v26;
      _os_log_error_impl(&dword_1BF335000, v10, OS_LOG_TYPE_ERROR, "%s\n:%@", buf, 0x16u);
    }
    CFErrorGetCode(*a2);
    goto LABEL_258;
  }
  v12 = *a3;
  cf = v12;
  if (v12)
    CFRetain(v12);
  v13 = radio::BasebandProperties::create();
  *(_QWORD *)(v7 + 288) = v13;
  if (cf)
  {
    CFRelease(cf);
    if (*(_BYTE *)(v7 + 288))
      goto LABEL_15;
LABEL_27:
    std::string::__assign_external(&v162, "Invalid reset properties", 0x18uLL);
    v20 = *(NSObject **)(v7 + 88);
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      goto LABEL_226;
    v21 = &v162;
    if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v21 = (std::string *)v162.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v21;
LABEL_269:
    _os_log_error_impl(&dword_1BF335000, v20, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
    goto LABEL_226;
  }
  if (!(_BYTE)v13)
    goto LABEL_27;
LABEL_15:
  v14 = *(NSObject **)(v7 + 88);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(v7 + 289))
      v15 = "true";
    else
      v15 = "false";
    v16 = *(unsigned __int16 *)(v7 + 290);
    v17 = *(_DWORD *)(v7 + 292);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v16;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v17;
    _os_log_impl(&dword_1BF335000, v14, OS_LOG_TYPE_DEFAULT, "#I Baseband properties:\n    Coredump supported: %s\n    PowerSequence index: %u\n    Baseband version: 0x%08x", buf, 0x18u);
  }
  if ((TelephonyUtilIsInternalBuild() & 1) == 0
    && (TelephonyUtilIsCarrierBuild() & 1) == 0
    && !TelephonyUtilIsVendorBuild())
  {
    goto LABEL_223;
  }
  LOBYTE(valuePtr) = *(_BYTE *)(v7 + 289) ^ 1;
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (qword_1ED70FAF0)
  {
LABEL_24:
    v19 = (std::__shared_weak_count_vtbl *)qword_1ED70FAF0;
    v18 = (std::__shared_weak_count *)off_1ED70FAF8;
    v159 = qword_1ED70FAF0;
    v160 = (std::__shared_weak_count *)off_1ED70FAF8;
    if (!off_1ED70FAF8)
      goto LABEL_42;
    goto LABEL_40;
  }
  v19 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  MEMORY[0x1C3B893B4](v19, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
  v18 = (std::__shared_weak_count *)operator new(0x20uLL);
  v18->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E78FFBE0;
  v18->__shared_owners_ = 0;
  v18->__shared_weak_owners_ = 0;
  v18[1].__vftable = v19;
  v22 = (std::__shared_weak_count *)off_1ED70FAF8;
  qword_1ED70FAF0 = (uint64_t)v19;
  off_1ED70FAF8 = v18;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    goto LABEL_24;
  }
  v159 = (uint64_t)v19;
  v160 = v18;
LABEL_40:
  v27 = (unint64_t *)&v18->__shared_owners_;
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
LABEL_42:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  v29 = (const void *)*MEMORY[0x1E0DDFA08];
  v30 = strlen((const char *)*MEMORY[0x1E0DDFA08]);
  if (v30 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v31 = v30;
  if (v30 >= 0x17)
  {
    v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v33 = v30 | 7;
    v34 = v33 + 1;
    v32 = operator new(v33 + 1);
    *(_QWORD *)&buf[8] = v31;
    *(_QWORD *)&buf[16] = v34 | 0x8000000000000000;
    *(_QWORD *)buf = v32;
    goto LABEL_49;
  }
  buf[23] = v30;
  v32 = buf;
  if (v30)
LABEL_49:
    memmove(v32, v29, v31);
  v32[v31] = 0;
  if (buf[23] >= 0)
    v35 = buf;
  else
    v35 = *(char **)buf;
  v36 = ctu::cf::plist_adapter::set<BOOL>((uint64_t)v19, *(unsigned __int8 *)(v7 + 289), v35, 1);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (v160)
  {
    v37 = &v160->__shared_owners_;
    do
      v38 = __ldaxr((unint64_t *)v37);
    while (__stlxr(v38 - 1, (unint64_t *)v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  if (!v36)
    goto LABEL_89;
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (qword_1ED70FAF0)
  {
LABEL_62:
    v40 = (std::__shared_weak_count_vtbl *)qword_1ED70FAF0;
    v39 = (std::__shared_weak_count *)off_1ED70FAF8;
    v159 = qword_1ED70FAF0;
    v160 = (std::__shared_weak_count *)off_1ED70FAF8;
    if (!off_1ED70FAF8)
      goto LABEL_72;
    goto LABEL_70;
  }
  v40 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  MEMORY[0x1C3B893B4](v40, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
  v39 = (std::__shared_weak_count *)operator new(0x20uLL);
  v39->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E78FFBE0;
  v39->__shared_owners_ = 0;
  v39->__shared_weak_owners_ = 0;
  v39[1].__vftable = v40;
  v41 = (std::__shared_weak_count *)off_1ED70FAF8;
  qword_1ED70FAF0 = (uint64_t)v40;
  off_1ED70FAF8 = v39;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
    goto LABEL_62;
  }
  v159 = (uint64_t)v40;
  v160 = v39;
LABEL_70:
  v44 = (unint64_t *)&v39->__shared_owners_;
  do
    v45 = __ldxr(v44);
  while (__stxr(v45 + 1, v44));
LABEL_72:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  v46 = strlen((const char *)v29);
  if (v46 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v47 = v46;
  if (v46 >= 0x17)
  {
    v49 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v46 | 7) != 0x17)
      v49 = v46 | 7;
    v50 = v49 + 1;
    v48 = operator new(v49 + 1);
    *(_QWORD *)&buf[8] = v47;
    *(_QWORD *)&buf[16] = v50 | 0x8000000000000000;
    *(_QWORD *)buf = v48;
    goto LABEL_79;
  }
  buf[23] = v46;
  v48 = buf;
  if (v46)
LABEL_79:
    memmove(v48, v29, v47);
  v48[v47] = 0;
  v51 = Preferences::getPreference<BOOL>(v40, buf, (ctu::cf *)&valuePtr);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (v160)
  {
    v52 = &v160->__shared_owners_;
    do
      v53 = __ldaxr((unint64_t *)v52);
    while (__stlxr(v53 - 1, (unint64_t *)v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  if (!v51 || valuePtr != *(unsigned __int8 *)(v7 + 289))
  {
LABEL_89:
    v54 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF335000, v54, OS_LOG_TYPE_ERROR, "Failed to save CoredumpSupported property in ABMPreferences file", buf, 2u);
    }
  }
  v158 = *(_WORD *)(v7 + 290) == 0;
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (qword_1ED70FAF0)
    goto LABEL_92;
  v56 = (CFStringRef *)operator new(0x18uLL);
  MEMORY[0x1C3B893B4](v56, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
  v55 = (std::__shared_weak_count *)operator new(0x20uLL);
  v55->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E78FFBE0;
  v55->__shared_owners_ = 0;
  v55->__shared_weak_owners_ = 0;
  v55[1].__vftable = (std::__shared_weak_count_vtbl *)v56;
  v57 = (std::__shared_weak_count *)off_1ED70FAF8;
  qword_1ED70FAF0 = (uint64_t)v56;
  off_1ED70FAF8 = v55;
  if (v57)
  {
    v58 = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
LABEL_92:
    v56 = (CFStringRef *)qword_1ED70FAF0;
    v55 = (std::__shared_weak_count *)off_1ED70FAF8;
    v159 = qword_1ED70FAF0;
    v160 = (std::__shared_weak_count *)off_1ED70FAF8;
    if (!off_1ED70FAF8)
      goto LABEL_102;
    goto LABEL_100;
  }
  v159 = (uint64_t)v56;
  v160 = v55;
LABEL_100:
  v60 = (unint64_t *)&v55->__shared_owners_;
  do
    v61 = __ldxr(v60);
  while (__stxr(v61 + 1, v60));
LABEL_102:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  v62 = (const void *)*MEMORY[0x1E0DDFA20];
  v63 = strlen((const char *)*MEMORY[0x1E0DDFA20]);
  if (v63 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v64 = v63;
  if (v63 >= 0x17)
  {
    v66 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v63 | 7) != 0x17)
      v66 = v63 | 7;
    v67 = v66 + 1;
    v65 = operator new(v66 + 1);
    *(_QWORD *)&buf[8] = v64;
    *(_QWORD *)&buf[16] = v67 | 0x8000000000000000;
    *(_QWORD *)buf = v65;
    goto LABEL_109;
  }
  buf[23] = v63;
  v65 = buf;
  if (v63)
LABEL_109:
    memmove(v65, v62, v64);
  v65[v64] = 0;
  v68 = (const __CFString *)*(unsigned __int16 *)(v7 + 290);
  if (buf[23] >= 0)
    v69 = buf;
  else
    v69 = *(const char **)buf;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v165, v69);
  v70 = v165;
  v71 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  valuePtr = v68;
  v72 = CFNumberCreate(v71, kCFNumberLongLongType, &valuePtr);
  v166 = v72;
  if (v72)
  {
    v73 = (const __CFString *)*MEMORY[0x1E0C9B250];
    CFPreferencesSetValue(v70, v72, v56[1], v56[2], (CFStringRef)*MEMORY[0x1E0C9B250]);
    v74 = CFPreferencesSynchronize(v56[1], v56[2], v73) != 0;
    CFRelease(v72);
    MEMORY[0x1C3B8936C](&v165);
    if ((buf[23] & 0x80000000) == 0)
      goto LABEL_115;
  }
  else
  {
    v74 = 0;
    MEMORY[0x1C3B8936C](&v165);
    if ((buf[23] & 0x80000000) == 0)
    {
LABEL_115:
      v75 = v160;
      if (!v160)
        goto LABEL_123;
      goto LABEL_119;
    }
  }
  operator delete(*(void **)buf);
  v75 = v160;
  if (!v160)
    goto LABEL_123;
LABEL_119:
  v76 = (unint64_t *)&v75->__shared_owners_;
  do
    v77 = __ldaxr(v76);
  while (__stlxr(v77 - 1, v76));
  if (!v77)
  {
    ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
    std::__shared_weak_count::__release_weak(v75);
  }
LABEL_123:
  if (!v74)
  {
LABEL_161:
    v99 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF335000, v99, OS_LOG_TYPE_ERROR, "Failed to save PowerSequence property in ABMPreferences file", buf, 2u);
    }
    goto LABEL_163;
  }
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (qword_1ED70FAF0)
  {
LABEL_125:
    v79 = (uint64_t (***)(void *, const __CFString *))qword_1ED70FAF0;
    v78 = (std::__shared_weak_count *)off_1ED70FAF8;
    v159 = qword_1ED70FAF0;
    v160 = (std::__shared_weak_count *)off_1ED70FAF8;
    if (!off_1ED70FAF8)
      goto LABEL_135;
    goto LABEL_133;
  }
  v79 = (uint64_t (***)(void *, const __CFString *))operator new(0x18uLL);
  MEMORY[0x1C3B893B4](v79, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
  v78 = (std::__shared_weak_count *)operator new(0x20uLL);
  v78->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E78FFBE0;
  v78->__shared_owners_ = 0;
  v78->__shared_weak_owners_ = 0;
  v78[1].__vftable = (std::__shared_weak_count_vtbl *)v79;
  v80 = (std::__shared_weak_count *)off_1ED70FAF8;
  qword_1ED70FAF0 = (uint64_t)v79;
  off_1ED70FAF8 = v78;
  if (v80)
  {
    v81 = (unint64_t *)&v80->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
    goto LABEL_125;
  }
  v159 = (uint64_t)v79;
  v160 = v78;
LABEL_133:
  v83 = (unint64_t *)&v78->__shared_owners_;
  do
    v84 = __ldxr(v83);
  while (__stxr(v84 + 1, v83));
LABEL_135:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  v85 = strlen((const char *)v62);
  if (v85 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v86 = v85;
  if (v85 >= 0x17)
  {
    v88 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v85 | 7) != 0x17)
      v88 = v85 | 7;
    v89 = v88 + 1;
    v87 = operator new(v88 + 1);
    *(_QWORD *)&buf[8] = v86;
    *(_QWORD *)&buf[16] = v89 | 0x8000000000000000;
    *(_QWORD *)buf = v87;
    goto LABEL_142;
  }
  buf[23] = v85;
  v87 = buf;
  if (v85)
LABEL_142:
    memmove(v87, v62, v86);
  v87[v86] = 0;
  if (buf[23] >= 0)
    v90 = buf;
  else
    v90 = *(const char **)buf;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&valuePtr, v90);
  v91 = (unsigned __int16 *)(**v79)(v79, valuePtr);
  v92 = v91;
  if (v91)
  {
    v93 = CFGetTypeID(v91);
    if (v93 == CFNumberGetTypeID())
      v95 = ctu::cf::assign((ctu::cf *)&v158, v92, v94);
    else
      v95 = 0;
    CFRelease(v92);
  }
  else
  {
    v95 = 0;
  }
  MEMORY[0x1C3B8936C](&valuePtr);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v96 = v160;
  if (v160)
  {
    v97 = &v160->__shared_owners_;
    do
      v98 = __ldaxr((unint64_t *)v97);
    while (__stlxr(v98 - 1, (unint64_t *)v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  if (!v95 || v158 != *(_WORD *)(v7 + 290))
    goto LABEL_161;
LABEL_163:
  LODWORD(v166) = *(_DWORD *)(v7 + 292) == 0;
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (qword_1ED70FAF0)
    goto LABEL_164;
  v101 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  MEMORY[0x1C3B893B4](v101, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
  v100 = (std::__shared_weak_count *)operator new(0x20uLL);
  v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E78FFBE0;
  v100->__shared_owners_ = 0;
  v100->__shared_weak_owners_ = 0;
  v100[1].__vftable = v101;
  v102 = (std::__shared_weak_count *)off_1ED70FAF8;
  qword_1ED70FAF0 = (uint64_t)v101;
  off_1ED70FAF8 = v100;
  if (v102)
  {
    v103 = (unint64_t *)&v102->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
LABEL_164:
    v101 = (std::__shared_weak_count_vtbl *)qword_1ED70FAF0;
    v100 = (std::__shared_weak_count *)off_1ED70FAF8;
    v159 = qword_1ED70FAF0;
    v160 = (std::__shared_weak_count *)off_1ED70FAF8;
    if (!off_1ED70FAF8)
      goto LABEL_174;
    goto LABEL_172;
  }
  v159 = (uint64_t)v101;
  v160 = v100;
LABEL_172:
  v105 = (unint64_t *)&v100->__shared_owners_;
  do
    v106 = __ldxr(v105);
  while (__stxr(v106 + 1, v105));
LABEL_174:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  v107 = (const void *)*MEMORY[0x1E0DDF9D8];
  v108 = strlen((const char *)*MEMORY[0x1E0DDF9D8]);
  if (v108 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v109 = v108;
  if (v108 >= 0x17)
  {
    v111 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v108 | 7) != 0x17)
      v111 = v108 | 7;
    v112 = v111 + 1;
    v110 = operator new(v111 + 1);
    *(_QWORD *)&buf[8] = v109;
    *(_QWORD *)&buf[16] = v112 | 0x8000000000000000;
    *(_QWORD *)buf = v110;
    goto LABEL_181;
  }
  buf[23] = v108;
  v110 = buf;
  if (v108)
LABEL_181:
    memmove(v110, v107, v109);
  v110[v109] = 0;
  v113 = *(_DWORD *)(v7 + 292);
  if (buf[23] >= 0)
    v114 = buf;
  else
    v114 = *(const char **)buf;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&valuePtr, v114);
  v115 = ctu::cf::plist_adapter::set<unsigned int>((uint64_t)v101, v113, valuePtr, 1);
  MEMORY[0x1C3B8936C](&valuePtr);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v116 = v160;
  if (v160)
  {
    v117 = &v160->__shared_owners_;
    do
      v118 = __ldaxr((unint64_t *)v117);
    while (__stlxr(v118 - 1, (unint64_t *)v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  if (!v115)
    goto LABEL_221;
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (qword_1ED70FAF0)
  {
LABEL_194:
    v120 = (std::__shared_weak_count_vtbl *)qword_1ED70FAF0;
    v119 = (std::__shared_weak_count *)off_1ED70FAF8;
    v159 = qword_1ED70FAF0;
    v160 = (std::__shared_weak_count *)off_1ED70FAF8;
    if (!off_1ED70FAF8)
      goto LABEL_204;
    goto LABEL_202;
  }
  v120 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  MEMORY[0x1C3B893B4](v120, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
  v119 = (std::__shared_weak_count *)operator new(0x20uLL);
  v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E78FFBE0;
  v119->__shared_owners_ = 0;
  v119->__shared_weak_owners_ = 0;
  v119[1].__vftable = v120;
  v121 = (std::__shared_weak_count *)off_1ED70FAF8;
  qword_1ED70FAF0 = (uint64_t)v120;
  off_1ED70FAF8 = v119;
  if (v121)
  {
    v122 = (unint64_t *)&v121->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
    goto LABEL_194;
  }
  v159 = (uint64_t)v120;
  v160 = v119;
LABEL_202:
  v124 = (unint64_t *)&v119->__shared_owners_;
  do
    v125 = __ldxr(v124);
  while (__stxr(v125 + 1, v124));
LABEL_204:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  v126 = strlen((const char *)v107);
  if (v126 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v127 = v126;
  if (v126 >= 0x17)
  {
    v129 = (v126 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v126 | 7) != 0x17)
      v129 = v126 | 7;
    v130 = v129 + 1;
    v128 = operator new(v129 + 1);
    *(_QWORD *)&buf[8] = v127;
    *(_QWORD *)&buf[16] = v130 | 0x8000000000000000;
    *(_QWORD *)buf = v128;
    goto LABEL_211;
  }
  buf[23] = v126;
  v128 = buf;
  if (v126)
LABEL_211:
    memmove(v128, v107, v127);
  v128[v127] = 0;
  v131 = Preferences::getPreference<unsigned int>(v120, buf, (ctu::cf *)&v166);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v132 = v160;
  if (v160)
  {
    v133 = &v160->__shared_owners_;
    do
      v134 = __ldaxr((unint64_t *)v133);
    while (__stlxr(v134 - 1, (unint64_t *)v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  if (!v131 || (_DWORD)v166 != *(_DWORD *)(v7 + 292))
  {
LABEL_221:
    v135 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v135, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF335000, v135, OS_LOG_TYPE_ERROR, "Failed to save BasebandVersion property in ABMPreferences file", buf, 2u);
    }
  }
LABEL_223:
  v136 = TelephonyBasebandSetBasebandProperty();
  if ((TelephonyBasebandSetBasebandProperty() & v136 & 1) != 0)
  {
    *(_BYTE *)(v7 + 296) = 1;
    goto LABEL_258;
  }
  *(_BYTE *)(v7 + 296) = 0;
  std::string::__assign_external(&v162, "Failed to send reset properties to AppleBaseband driver", 0x37uLL);
  v20 = *(NSObject **)(v7 + 88);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    v155 = &v162;
    if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v155 = (std::string *)v162.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v155;
    goto LABEL_269;
  }
LABEL_226:
  if ((TelephonyUtilIsInternalBuild() & 1) == 0
    && (TelephonyUtilIsCarrierBuild() & 1) == 0
    && !TelephonyUtilIsVendorBuild())
  {
    goto LABEL_258;
  }
  v137 = xpc_dictionary_create(0, 0, 0);
  if (v137 || (v137 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v137) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v137);
      v138 = v137;
    }
    else
    {
      v138 = xpc_null_create();
    }
  }
  else
  {
    v138 = xpc_null_create();
    v137 = 0;
  }
  xpc_release(v137);
  v139 = xpc_string_create((const char *)*MEMORY[0x1E0CFB590]);
  if (!v139)
    v139 = xpc_null_create();
  xpc_dictionary_set_value(v138, (const char *)*MEMORY[0x1E0CFB538], v139);
  v140 = xpc_null_create();
  xpc_release(v139);
  xpc_release(v140);
  v141 = xpc_string_create((const char *)*MEMORY[0x1E0CFBEA8]);
  if (!v141)
    v141 = xpc_null_create();
  xpc_dictionary_set_value(v138, (const char *)*MEMORY[0x1E0CFB8D0], v141);
  v142 = xpc_null_create();
  xpc_release(v141);
  xpc_release(v142);
  if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v143 = &v162;
  else
    v143 = (std::string *)v162.__r_.__value_.__r.__words[0];
  v144 = xpc_string_create((const char *)v143);
  if (!v144)
    v144 = xpc_null_create();
  xpc_dictionary_set_value(v138, (const char *)*MEMORY[0x1E0CFB788], v144);
  v145 = xpc_null_create();
  xpc_release(v144);
  xpc_release(v145);
  v146 = v163;
  v147 = (const void *)*MEMORY[0x1E0CFB4E0];
  v148 = strlen((const char *)*MEMORY[0x1E0CFB4E0]);
  if (v148 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v149 = v148;
  if (v148 >= 0x17)
  {
    v151 = (v148 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v148 | 7) != 0x17)
      v151 = v148 | 7;
    v152 = v151 + 1;
    v150 = operator new(v151 + 1);
    *(_QWORD *)&buf[8] = v149;
    *(_QWORD *)&buf[16] = v152 | 0x8000000000000000;
    *(_QWORD *)buf = v150;
  }
  else
  {
    buf[23] = v148;
    v150 = buf;
    if (!v148)
      goto LABEL_252;
  }
  memmove(v150, v147, v149);
LABEL_252:
  v150[v149] = 0;
  object = v138;
  if (v138)
    xpc_retain(v138);
  else
    object = xpc_null_create();
  v156 = 0;
  Service::runCommand(v146, (uint64_t)buf, &object, &v156);
  xpc_release(object);
  object = 0;
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  xpc_release(v138);
LABEL_258:
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v162.__r_.__value_.__l.__data_);
  v11 = v164;
  if (v164)
    goto LABEL_261;
}

uint64_t Preferences::getPreference<BOOL>(uint64_t (***a1)(_QWORD, uint64_t), const char *a2, ctu::cf *a3)
{
  BOOL *v5;
  BOOL *v6;
  CFTypeID v7;
  const __CFBoolean *v8;
  uint64_t v9;
  uint64_t v11;

  if (a2[23] < 0)
    a2 = *(const char **)a2;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v11, a2);
  v5 = (BOOL *)(**a1)(a1, v11);
  v6 = v5;
  if (v5)
  {
    v7 = CFGetTypeID(v5);
    if (v7 == CFBooleanGetTypeID())
      v9 = ctu::cf::assign(a3, v6, v8);
    else
      v9 = 0;
    CFRelease(v6);
  }
  else
  {
    v9 = 0;
  }
  MEMORY[0x1C3B8936C](&v11);
  return v9;
}

uint64_t Preferences::getPreference<unsigned int>(uint64_t (***a1)(_QWORD, uint64_t), const char *a2, ctu::cf *a3)
{
  unsigned int *v5;
  unsigned int *v6;
  CFTypeID v7;
  const __CFNumber *v8;
  uint64_t v9;
  uint64_t v11;

  if (a2[23] < 0)
    a2 = *(const char **)a2;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v11, a2);
  v5 = (unsigned int *)(**a1)(a1, v11);
  v6 = v5;
  if (v5)
  {
    v7 = CFGetTypeID(v5);
    if (v7 == CFNumberGetTypeID())
      v9 = ctu::cf::assign(a3, v6, v8);
    else
      v9 = 0;
    CFRelease(v6);
  }
  else
  {
    v9 = 0;
  }
  MEMORY[0x1C3B8936C](&v11);
  return v9;
}

void ___ZN11RadioModule23monitorBatteryInfo_syncEv_block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *a2;
        v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        if (!*a2)
          v9 = 0;
        v10 = *(NSObject **)(v5 + 88);
        if (v9)
        {
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            v13 = 138412290;
            v14 = v8;
            _os_log_error_impl(&dword_1BF335000, v10, OS_LOG_TYPE_ERROR, "Failed to send battery info update\n:%@", (uint8_t *)&v13, 0xCu);
          }
        }
        else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v13) = 0;
          _os_log_impl(&dword_1BF335000, v10, OS_LOG_TYPE_DEFAULT, "#I Success sending battery info update", (uint8_t *)&v13, 2u);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void ___ZN11RadioModule23monitorBatteryInfo_syncEv_block_invoke_114(_QWORD *a1, unsigned int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unsigned int v8;
  _BOOL4 v9;
  NSObject *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  CommandDriverFactory *v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  void *v31;
  NSObject *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  void *aBlock;
  dispatch_object_t object;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v47;
  _BYTE buf[18];
  __int16 v49;
  const char *v50;
  __int16 v51;
  const char *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  v47 = v6;
  if (!v6)
    return;
  v7 = v6;
  if (!a1[5])
  {
LABEL_60:
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  v8 = *(unsigned __int8 *)(v5 + 320);
  if (*(_BYTE *)(v5 + 320)
    && (v8 > 0x27 || a2 <= 0x29u)
    && (v8 < 0x28 || a2 >= 0x26u))
  {
    v9 = ((a2 >> 8) & 1) != *(unsigned __int8 *)(v5 + 321);
    v10 = *(NSObject **)(v5 + 88);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      goto LABEL_19;
  }
  else
  {
    v9 = 1;
    v10 = *(NSObject **)(v5 + 88);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      goto LABEL_19;
  }
  v11 = "TRUE";
  if ((a2 & 0x100) != 0)
    v12 = "TRUE";
  else
    v12 = "FALSE";
  *(_DWORD *)buf = 67109890;
  *(_DWORD *)&buf[4] = a2;
  if ((*(_QWORD *)&a2 & 0x10000) != 0)
    v13 = "TRUE";
  else
    v13 = "FALSE";
  *(_WORD *)&buf[8] = 2080;
  *(_QWORD *)&buf[10] = v12;
  v49 = 2080;
  if (!v9)
    v11 = "FALSE";
  v50 = v13;
  v51 = 2080;
  v52 = v11;
  _os_log_impl(&dword_1BF335000, v10, OS_LOG_TYPE_DEFAULT, "#I Battery Info Update:\n   chargeLevel:        %u\n   charging:           %s\n   fully charged:      %s\n   reportToBaseband:   %s", buf, 0x26u);
LABEL_19:
  if (!v9)
    goto LABEL_60;
  *(_WORD *)(v5 + 320) = a2;
  *(_BYTE *)(v5 + 322) = BYTE2(a2);
  v44 = 0xAAAAAAAAAAAAAAAALL;
  v45 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v14 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v15 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v14);
    v16 = *(_OWORD *)buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v17 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v16;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v21 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v15 = off_1ED70FD08;
  }
  v23 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  v40 = v15;
  v41 = *(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v24 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v15 + 16))(&v42, v15);
  v44 = 0;
  v45 = 0;
  if (v43)
  {
    v45 = std::__shared_weak_count::lock(v43);
    if (v45)
      v44 = v42;
    if (v43)
      std::__shared_weak_count::__release_weak(v43);
  }
  if (v23)
  {
    v26 = (unint64_t *)&v23->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v28 = v44;
  if (v44)
  {
    v29 = *(unsigned __int8 *)(v5 + 320);
    v30 = *(unsigned __int8 *)(v5 + 321);
    v31 = (void *)a1[7];
    if (v31)
      v31 = _Block_copy(v31);
    v32 = a1[8];
    aBlock = v31;
    object = v32;
    if (v32)
      dispatch_retain(v32);
    (*(void (**)(unint64_t, uint64_t, BOOL, void **))(*(_QWORD *)v28 + 176))(v28, v29, v30 != 0, &aBlock);
    if (object)
      dispatch_release(object);
    if (aBlock)
      _Block_release(aBlock);
  }
  v33 = v45;
  if (v45)
  {
    v34 = (unint64_t *)&v45->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v7 = v47;
  if (v47)
    goto LABEL_60;
}

void sub_1BF402130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  NSObject *v8;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (void *)a2[7];
  if (v7)
    v7 = _Block_copy(v7);
  v8 = a2[8];
  a1[7] = v7;
  a1[8] = v8;
  if (v8)
    dispatch_retain(v8);
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[8];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitBatteryInfo)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void ___ZN11RadioModule21setOperatingMode_syncEjN5radio13OperatingModeEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint8_t buf[4];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *a2;
        if (*a2)
          v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v9 = 0;
        if (v9)
        {
          v10 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v14 = v8;
            _os_log_error_impl(&dword_1BF335000, v10, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
          }
        }
        (*(void (**)(void))(a1[7] + 16))();
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF4023D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[7];
  if (result)
    result = _Block_copy(result);
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 56);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void ___ZN11RadioModule34queryFactoryCalibrationStatus_syncEv_block_invoke(_QWORD *a1, uint64_t *a2, const __CFDictionary **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  NSObject *v12;
  const __CFDictionary *v13;
  uint64_t (*v14)(uint64_t);
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint8_t buf[24];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (a1[5])
      {
        v10 = *a2;
        v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        if (!v10)
          v11 = 0;
        if (v11)
        {
          v12 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v10;
            _os_log_error_impl(&dword_1BF335000, v12, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
          }
        }
        else
        {
          v13 = *a3;
          v14 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          if (!*a3)
            v14 = 0;
          if (v14)
          {
            memset(buf, 170, 16);
            ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, v13);
            *(_BYTE *)(v7 + 192) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E0DDFA30]);
            MEMORY[0x1C3B893A8](buf);
          }
        }
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN11RadioModule29queryRFCalibrationStatus_syncEv_block_invoke(_QWORD *a1, uint64_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  NSObject *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  const void *v15;
  uint64_t (*v16)(uint64_t);
  CFTypeRef cf;
  uint8_t buf[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (a1[5])
      {
        v10 = *a2;
        v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        if (!v10)
          v11 = 0;
        if (v11)
        {
          v12 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v19 = v10;
            _os_log_error_impl(&dword_1BF335000, v12, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
          }
        }
        else
        {
          v15 = *a3;
          v16 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          if (!*a3)
            v16 = 0;
          if (v16)
          {
            cf = *a3;
            if (v15)
              CFRetain(v15);
            radio::RFCalibration_t::fill();
            if (cf)
              CFRelease(cf);
          }
        }
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1BF40277C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN11RadioModule25queryFieldTestConfig_syncEv_block_invoke(_QWORD *a1, uint64_t *a2, ctu **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  NSObject *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t (*v16)(uint64_t);
  xpc_object_t v17;
  xpc_object_t v18;
  void *v19;
  NSObject *v20;
  _BYTE *v21;
  _BYTE object[12];
  char v23;
  uint8_t buf[4];
  _BYTE *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v10 = v8;
      if (a1[5])
      {
        v11 = *a2;
        v12 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        if (!v11)
          v12 = 0;
        if (v12)
        {
          v13 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)object = 138412290;
            *(_QWORD *)&object[4] = v11;
            _os_log_error_impl(&dword_1BF335000, v13, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
          }
        }
        else
        {
          v16 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          if (!*a3)
            v16 = 0;
          if (v16)
          {
            ctu::cf_to_xpc(*a3, v9);
            v17 = *(xpc_object_t *)object;
            if (*(_QWORD *)object && MEMORY[0x1C3B8A86C](*(_QWORD *)object) == MEMORY[0x1E0C812F8])
              xpc_retain(*(xpc_object_t *)object);
            else
              v17 = xpc_null_create();
            v18 = xpc_null_create();
            v19 = *(void **)(v7 + 248);
            *(_QWORD *)(v7 + 248) = v17;
            xpc_release(v19);
            xpc_release(v18);
            xpc_release(*(xpc_object_t *)object);
            v20 = *(NSObject **)(v7 + 88);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              xpc::object::to_string((xpc::object *)(v7 + 248));
              v21 = v23 >= 0 ? object : *(_BYTE **)object;
              *(_DWORD *)buf = 136315138;
              v25 = v21;
              _os_log_impl(&dword_1BF335000, v20, OS_LOG_TYPE_DEFAULT, "#I Baseband field test config:\n%s", buf, 0xCu);
              if (v23 < 0)
                operator delete(*(void **)object);
            }
          }
        }
      }
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_1BF4029C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7903858;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7903858;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__shared_ptr_pointer<RadioModule *,std::shared_ptr<RadioModule> ctu::SharedSynchronizable<RadioModule>::make_shared_ptr<RadioModule>(RadioModule*)::{lambda(RadioModule *)#1},std::allocator<RadioModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<RadioModule *,std::shared_ptr<RadioModule> ctu::SharedSynchronizable<RadioModule>::make_shared_ptr<RadioModule>(RadioModule*)::{lambda(RadioModule *)#1},std::allocator<RadioModule>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<RadioModule> ctu::SharedSynchronizable<RadioModule>::make_shared_ptr<RadioModule>(RadioModule*)::{lambda(RadioModule*)#1}::operator() const(RadioModule*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<RadioModule *,std::shared_ptr<RadioModule> ctu::SharedSynchronizable<RadioModule>::make_shared_ptr<RadioModule>(RadioModule*)::{lambda(RadioModule *)#1},std::allocator<RadioModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI11RadioModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI11RadioModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI11RadioModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI11RadioModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<RadioModule> ctu::SharedSynchronizable<RadioModule>::make_shared_ptr<RadioModule>(RadioModule*)::{lambda(RadioModule*)#1}::operator() const(RadioModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedLoggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7903858;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  void *v31;
  void *v32;
  NSObject *v33;
  unint64_t *v34;
  unint64_t v35;
  void **v36;
  void *v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  void *v41;
  void **v42;
  xpc_object_t v43;
  xpc_object_t v44;
  std::__shared_weak_count *v45;
  const void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  void *__p[5];
  std::__shared_weak_count *v51;
  void *aBlock;
  unsigned int v53;
  std::string __dst;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    v4 = (const void *)*MEMORY[0x1E0CFC020];
    v5 = strlen((const char *)*MEMORY[0x1E0CFC020]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        __p[2] = (void *)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 1;
            if (!v2[1])
            {
LABEL_79:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              goto LABEL_81;
            }
LABEL_61:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v37 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v37 = __p[1];
            if (v37)
            {
              v38 = xpc_dictionary_create(0, 0, 0);
              if (v38 || (v38 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8A86C](v38) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v38);
                  v39 = v38;
                }
                else
                {
                  v39 = xpc_null_create();
                }
              }
              else
              {
                v39 = xpc_null_create();
                v38 = 0;
              }
              xpc_release(v38);
              v40 = xpc_null_create();
              v41 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
              xpc_release(v41);
              xpc_release(v40);
              if (SHIBYTE(__p[2]) >= 0)
                v42 = __p;
              else
                v42 = (void **)__p[0];
              v43 = xpc_string_create((const char *)v42);
              if (!v43)
                v43 = xpc_null_create();
              xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x1E0CFB0D0], v43);
              v44 = xpc_null_create();
              xpc_release(v43);
              xpc_release(v44);
            }
            v53 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, &v53, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_79;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v36 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v36 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
        _os_log_impl(&dword_1BF335000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 1;
        if (!v2[1])
          goto LABEL_79;
        goto LABEL_61;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_1ED70FD08;
  }
  v14 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v15 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
      goto LABEL_36;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_37;
    goto LABEL_52;
  }
LABEL_36:
  if (v18)
  {
LABEL_37:
    __p[0] = (void *)MEMORY[0x1E0C809B0];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__0clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_134;
    __p[4] = *((void **)v2 + 2);
    v28 = (std::__shared_weak_count *)v2[3];
    v51 = v28;
    if (v28)
    {
      p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
      do
        v30 = __ldxr(p_shared_weak_owners);
      while (__stxr(v30 + 1, p_shared_weak_owners));
    }
    v31 = (void *)v2[1];
    if (v31)
      v31 = _Block_copy(v31);
    aBlock = v31;
    v32 = _Block_copy(__p);
    v33 = v3[17];
    if (v33)
      dispatch_retain(v33);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
    (*(void (**)(std::string::size_type, std::string *))(*(_QWORD *)v18 + 224))(v18, &__dst);
    if (__dst.__r_.__value_.__l.__size_)
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    if (__dst.__r_.__value_.__r.__words[0])
      _Block_release(__dst.__r_.__value_.__l.__data_);
    if (aBlock)
      _Block_release(aBlock);
    if (v51)
      std::__shared_weak_count::__release_weak(v51);
  }
LABEL_52:
  if (v17)
  {
    v34 = (unint64_t *)&v17->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_81:
  v45 = (std::__shared_weak_count *)v2[3];
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  v46 = (const void *)v2[1];
  if (v46)
    _Block_release(v46);
  operator delete(v2);
  v47 = (std::__shared_weak_count *)a1[2];
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  operator delete(a1);
}

void sub_1BF403280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__0clEv_block_invoke(_QWORD *a1, _QWORD *a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  xpc_object_t v8;
  xpc_object_t v9;
  std::__shared_weak_count *v10;
  xpc_object_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  int v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  void *v22;
  char v23;
  xpc_object_t xdict;
  std::__shared_weak_count *v26;
  void *__p[3];

  v4 = (std::__shared_weak_count *)a1[5];
  if (!v4)
    return;
  v7 = std::__shared_weak_count::lock(v4);
  v26 = v7;
  if (!v7)
    return;
  if (!a1[4])
  {
    v10 = v7;
LABEL_29:
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  v8 = xpc_dictionary_create(0, 0, 0);
  v9 = v8;
  if (v8)
  {
    xdict = v8;
  }
  else
  {
    v9 = xpc_null_create();
    xdict = v9;
    if (!v9)
    {
      v11 = xpc_null_create();
      v9 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x1C3B8A86C](v9) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v9);
    goto LABEL_13;
  }
  v11 = xpc_null_create();
LABEL_12:
  xdict = v11;
LABEL_13:
  xpc_release(v9);
  v12 = MEMORY[0x1C3B8A86C](*a2);
  v13 = MEMORY[0x1E0C81350];
  if (v12 == MEMORY[0x1E0C81350])
  {
    v17 = *a3;
    if (v17)
      xpc_retain(v17);
    else
      v17 = xpc_null_create();
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFC228], v17);
    v18 = xpc_null_create();
    xpc_release(v17);
    xpc_release(v18);
  }
  else
  {
    memset(__p, 0, sizeof(__p));
    xpc::dyn_cast_or_default();
    if (v23 >= 0)
      v14 = (const char *)&v22;
    else
      v14 = (const char *)v22;
    v15 = xpc_string_create(v14);
    if (!v15)
      v15 = xpc_null_create();
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB2C8], v15);
    v16 = xpc_null_create();
    xpc_release(v15);
    xpc_release(v16);
    if (v23 < 0)
      operator delete(v22);
  }
  if (MEMORY[0x1C3B8A86C](*a2) == v13)
    v19 = 0;
  else
    v19 = -534716416;
  LODWORD(__p[0]) = v19;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, (unsigned int *)__p, &xdict);
  xpc_release(xdict);
  v10 = v26;
  if (v26)
    goto LABEL_29;
}

void sub_1BF4036F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  xpc_release(object);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c36_ZTSNSt3__18weak_ptrI11RadioModuleEE48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[6];
  if (result)
    result = _Block_copy(result);
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c36_ZTSNSt3__18weak_ptrI11RadioModuleEE48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 48);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  void *v31;
  void *v32;
  NSObject *v33;
  unint64_t *v34;
  unint64_t v35;
  void **v36;
  void *v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  void *v41;
  void **v42;
  xpc_object_t v43;
  xpc_object_t v44;
  std::__shared_weak_count *v45;
  const void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  void *__p[5];
  std::__shared_weak_count *v51;
  void *aBlock;
  unsigned int v53;
  std::string __dst;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    v4 = (const void *)*MEMORY[0x1E0CFB430];
    v5 = strlen((const char *)*MEMORY[0x1E0CFB430]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        __p[2] = (void *)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 1;
            if (!v2[1])
            {
LABEL_79:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              goto LABEL_81;
            }
LABEL_61:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v37 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v37 = __p[1];
            if (v37)
            {
              v38 = xpc_dictionary_create(0, 0, 0);
              if (v38 || (v38 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8A86C](v38) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v38);
                  v39 = v38;
                }
                else
                {
                  v39 = xpc_null_create();
                }
              }
              else
              {
                v39 = xpc_null_create();
                v38 = 0;
              }
              xpc_release(v38);
              v40 = xpc_null_create();
              v41 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
              xpc_release(v41);
              xpc_release(v40);
              if (SHIBYTE(__p[2]) >= 0)
                v42 = __p;
              else
                v42 = (void **)__p[0];
              v43 = xpc_string_create((const char *)v42);
              if (!v43)
                v43 = xpc_null_create();
              xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x1E0CFB0D0], v43);
              v44 = xpc_null_create();
              xpc_release(v43);
              xpc_release(v44);
            }
            v53 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, &v53, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_79;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v36 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v36 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
        _os_log_impl(&dword_1BF335000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 1;
        if (!v2[1])
          goto LABEL_79;
        goto LABEL_61;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_1ED70FD08;
  }
  v14 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v15 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
      goto LABEL_36;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_37;
    goto LABEL_52;
  }
LABEL_36:
  if (v18)
  {
LABEL_37:
    __p[0] = (void *)MEMORY[0x1E0C809B0];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__1clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_135;
    __p[4] = *((void **)v2 + 2);
    v28 = (std::__shared_weak_count *)v2[3];
    v51 = v28;
    if (v28)
    {
      p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
      do
        v30 = __ldxr(p_shared_weak_owners);
      while (__stxr(v30 + 1, p_shared_weak_owners));
    }
    v31 = (void *)v2[1];
    if (v31)
      v31 = _Block_copy(v31);
    aBlock = v31;
    v32 = _Block_copy(__p);
    v33 = v3[17];
    if (v33)
      dispatch_retain(v33);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
    (*(void (**)(std::string::size_type, std::string *))(*(_QWORD *)v18 + 264))(v18, &__dst);
    if (__dst.__r_.__value_.__l.__size_)
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    if (__dst.__r_.__value_.__r.__words[0])
      _Block_release(__dst.__r_.__value_.__l.__data_);
    if (aBlock)
      _Block_release(aBlock);
    if (v51)
      std::__shared_weak_count::__release_weak(v51);
  }
LABEL_52:
  if (v17)
  {
    v34 = (unint64_t *)&v17->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_81:
  v45 = (std::__shared_weak_count *)v2[3];
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  v46 = (const void *)v2[1];
  if (v46)
    _Block_release(v46);
  operator delete(v2);
  v47 = (std::__shared_weak_count *)a1[2];
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  operator delete(a1);
}

void sub_1BF403DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__1clEv_block_invoke(_QWORD *a1, xpc_object_t *a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  xpc_object_t v8;
  uint64_t v9;
  uint64_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  std::__shared_weak_count *v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  unsigned int v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unsigned int v23;
  xpc_object_t object;
  std::__shared_weak_count *v26;

  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    v26 = v7;
    if (v7)
    {
      if (!a1[4])
      {
        v13 = v7;
LABEL_25:
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        return;
      }
      v8 = xpc_null_create();
      object = v8;
      v9 = MEMORY[0x1C3B8A86C](*a2);
      v10 = MEMORY[0x1E0C81350];
      if (v9 == MEMORY[0x1E0C81350])
      {
        v14 = *a3;
        if (v14 && MEMORY[0x1C3B8A86C](v14) == MEMORY[0x1E0C812F8])
          xpc_retain(v14);
        else
          v14 = xpc_null_create();
        v15 = xpc_null_create();
        object = v14;
        xpc_release(v8);
        xpc_release(v15);
      }
      else
      {
        v11 = xpc_dictionary_create(0, 0, 0);
        if (v11 || (v11 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8A86C](v11) == MEMORY[0x1E0C812F8])
          {
            xpc_retain(v11);
            v12 = v11;
          }
          else
          {
            v12 = xpc_null_create();
          }
        }
        else
        {
          v12 = xpc_null_create();
          v11 = 0;
        }
        xpc_release(v11);
        v16 = xpc_null_create();
        v17 = object;
        object = v12;
        xpc_release(v17);
        xpc_release(v16);
        v18 = *a2;
        if (*a2)
          xpc_retain(*a2);
        else
          v18 = xpc_null_create();
        xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E0CFB2C8], v18);
        v19 = xpc_null_create();
        xpc_release(v18);
        xpc_release(v19);
      }
      if (MEMORY[0x1C3B8A86C](*a2) == v10)
        v20 = 0;
      else
        v20 = -534716416;
      v23 = v20;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v23, &object);
      xpc_release(object);
      v13 = v26;
      if (v26)
        goto LABEL_25;
    }
  }
}

void sub_1BF404224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  xpc_release(v11);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  void *v31;
  void *v32;
  NSObject *v33;
  unint64_t *v34;
  unint64_t v35;
  void **v36;
  void *v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  void *v41;
  void **v42;
  xpc_object_t v43;
  xpc_object_t v44;
  std::__shared_weak_count *v45;
  const void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  void *__p[5];
  std::__shared_weak_count *v51;
  void *aBlock;
  unsigned int v53;
  std::string __dst;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    v4 = (const void *)*MEMORY[0x1E0CFBB50];
    v5 = strlen((const char *)*MEMORY[0x1E0CFBB50]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        __p[2] = (void *)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 1;
            if (!v2[1])
            {
LABEL_79:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              goto LABEL_81;
            }
LABEL_61:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v37 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v37 = __p[1];
            if (v37)
            {
              v38 = xpc_dictionary_create(0, 0, 0);
              if (v38 || (v38 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8A86C](v38) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v38);
                  v39 = v38;
                }
                else
                {
                  v39 = xpc_null_create();
                }
              }
              else
              {
                v39 = xpc_null_create();
                v38 = 0;
              }
              xpc_release(v38);
              v40 = xpc_null_create();
              v41 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
              xpc_release(v41);
              xpc_release(v40);
              if (SHIBYTE(__p[2]) >= 0)
                v42 = __p;
              else
                v42 = (void **)__p[0];
              v43 = xpc_string_create((const char *)v42);
              if (!v43)
                v43 = xpc_null_create();
              xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x1E0CFB0D0], v43);
              v44 = xpc_null_create();
              xpc_release(v43);
              xpc_release(v44);
            }
            v53 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, &v53, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_79;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v36 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v36 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
        _os_log_impl(&dword_1BF335000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 1;
        if (!v2[1])
          goto LABEL_79;
        goto LABEL_61;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_1ED70FD08;
  }
  v14 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v15 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
      goto LABEL_36;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_37;
    goto LABEL_52;
  }
LABEL_36:
  if (v18)
  {
LABEL_37:
    __p[0] = (void *)MEMORY[0x1E0C809B0];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb2_ENK3__2clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_136;
    __p[4] = *((void **)v2 + 2);
    v28 = (std::__shared_weak_count *)v2[3];
    v51 = v28;
    if (v28)
    {
      p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
      do
        v30 = __ldxr(p_shared_weak_owners);
      while (__stxr(v30 + 1, p_shared_weak_owners));
    }
    v31 = (void *)v2[1];
    if (v31)
      v31 = _Block_copy(v31);
    aBlock = v31;
    v32 = _Block_copy(__p);
    v33 = v3[17];
    if (v33)
      dispatch_retain(v33);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
    (*(void (**)(std::string::size_type, std::string *))(*(_QWORD *)v18 + 280))(v18, &__dst);
    if (__dst.__r_.__value_.__l.__size_)
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    if (__dst.__r_.__value_.__r.__words[0])
      _Block_release(__dst.__r_.__value_.__l.__data_);
    if (aBlock)
      _Block_release(aBlock);
    if (v51)
      std::__shared_weak_count::__release_weak(v51);
  }
LABEL_52:
  if (v17)
  {
    v34 = (unint64_t *)&v17->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_81:
  v45 = (std::__shared_weak_count *)v2[3];
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  v46 = (const void *)v2[1];
  if (v46)
    _Block_release(v46);
  operator delete(v2);
  v47 = (std::__shared_weak_count *)a1[2];
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  operator delete(a1);
}

