void __copy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrI12TraceManagerEE56c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE72c15_ZTSN3xpc4dictE80c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE88c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE96c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  std::string::size_type v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  const void *v11;
  void *v12;
  std::string *v13;
  __int128 v14;

  v4 = *(_QWORD *)(a2 + 48);
  a1[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
  a1[2].__r_.__value_.__r.__words[0] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a2 + 64);
  a1[2].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 56);
  a1[2].__r_.__value_.__r.__words[2] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(void **)(a2 + 72);
  a1[3].__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  if (!v10)
  {
    a1[3].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v11 = *(const void **)(a2 + 80);
    a1[3].__r_.__value_.__l.__size_ = (std::string::size_type)v11;
    if (!v11)
      goto LABEL_12;
    goto LABEL_11;
  }
  xpc_retain(v10);
  v11 = *(const void **)(a2 + 80);
  a1[3].__r_.__value_.__l.__size_ = (std::string::size_type)v11;
  if (v11)
LABEL_11:
    CFRetain(v11);
LABEL_12:
  v12 = *(void **)(a2 + 88);
  if (v12)
    v12 = _Block_copy(v12);
  a1[3].__r_.__value_.__r.__words[2] = (std::string::size_type)v12;
  v13 = a1 + 4;
  if (*(char *)(a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)(a2 + 96), *(_QWORD *)(a2 + 104));
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 96);
    a1[4].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 112);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
}

void sub_1BF4D217C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  xpc_object_t *v4;
  const void **v5;
  const void *v7;

  v7 = *(const void **)(v3 + 88);
  if (v7)
    _Block_release(v7);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v5);
  xpc::dict::~dict(v4);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrI12TraceManagerEE56c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE72c15_ZTSN3xpc4dictE80c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE88c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE96c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  const void *v2;
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    v2 = *(const void **)(a1 + 88);
    if (!v2)
      goto LABEL_6;
    goto LABEL_5;
  }
  v2 = *(const void **)(a1 + 88);
  if (v2)
LABEL_5:
    _Block_release(v2);
LABEL_6:
  v3 = *(const void **)(a1 + 80);
  if (v3)
    CFRelease(v3);
  xpc_release(*(xpc_object_t *)(a1 + 72));
  *(_QWORD *)(a1 + 72) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v4)
    goto LABEL_12;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v7)
      return;
  }
  else
  {
LABEL_12:
    v7 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v7)
      return;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  xpc_object_t v9;
  uint64_t v10;
  xpc_object_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  char *v21;
  char *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::string *v27;
  NSObject *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  _QWORD *v34;
  std::string __p;
  void *aBlock;
  int v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  std::string v40;
  char v41;
  xpc_object_t v42;

  v2 = *(_QWORD **)(a1 + 32);
  __p.__r_.__value_.__r.__words[0] = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    v5 = v4;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
    if (v4 && *(_QWORD *)(a1 + 40))
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (v7)
      {
        v34 = v2;
        if ((*(char *)(a1 + 87) & 0x80000000) == 0)
          goto LABEL_8;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
        v34 = v2;
        if ((*(char *)(a1 + 87) & 0x80000000) == 0)
        {
LABEL_8:
          __p = *(std::string *)(a1 + 64);
          v8 = *(void **)(a1 + 56);
          if (!v8)
          {
LABEL_19:
            aBlock = v8;
            v37 = *(_DWORD *)(a1 + 112);
            v14 = *(std::__shared_weak_count **)(a1 + 48);
            v38 = *(_QWORD *)(a1 + 40);
            v39 = v14;
            if (v14)
            {
              p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
              do
                v16 = __ldxr(p_shared_weak_owners);
              while (__stxr(v16 + 1, p_shared_weak_owners));
            }
            if (*(char *)(a1 + 111) < 0)
              std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)(a1 + 88), *(_QWORD *)(a1 + 96));
            else
              v40 = *(std::string *)(a1 + 88);
            v41 = *(_BYTE *)(a1 + 116);
            v17 = (std::__shared_weak_count *)v2[16];
            if (!v17 || (v18 = v2[15], (v19 = std::__shared_weak_count::lock(v17)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v20 = v19;
            v21 = (char *)operator new(0x60uLL);
            v22 = v21;
            *(_QWORD *)v21 = v34;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external((std::string *)(v21 + 8), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            else
              *(std::string *)(v21 + 8) = __p;
            v23 = aBlock;
            if (aBlock)
              v23 = _Block_copy(aBlock);
            *((_QWORD *)v22 + 4) = v23;
            *((_DWORD *)v22 + 10) = v37;
            v24 = v39;
            *((_QWORD *)v22 + 6) = v38;
            *((_QWORD *)v22 + 7) = v24;
            if (v24)
            {
              v25 = (unint64_t *)&v24->__shared_weak_owners_;
              do
                v26 = __ldxr(v25);
              while (__stxr(v26 + 1, v25));
            }
            v27 = (std::string *)(v22 + 64);
            if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v27, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
            }
            else
            {
              *(_OWORD *)&v27->__r_.__value_.__l.__data_ = *(_OWORD *)&v40.__r_.__value_.__l.__data_;
              *((_QWORD *)v22 + 10) = *((_QWORD *)&v40.__r_.__value_.__l + 2);
            }
            v22[88] = v41;
            v28 = v2[17];
            v29 = (unint64_t *)&v20->__shared_owners_;
            do
              v30 = __ldxr(v29);
            while (__stxr(v30 + 1, v29));
            v31 = operator new(0x18uLL);
            *v31 = v22;
            v31[1] = v18;
            v31[2] = v20;
            dispatch_async_f(v28, v31, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI12TraceManagerE15execute_wrappedIZZNS3_24collectBasebandLogs_syncEN3xpc4dictENS_5blockIU13block_pointerFviS7_EEEEUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_);
            do
              v32 = __ldaxr(v29);
            while (__stlxr(v32 - 1, v29));
            if (v32)
            {
              if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_44;
            }
            else
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
              if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_44:
                v33 = v39;
                if (!v39)
                {
LABEL_46:
                  if (aBlock)
                    _Block_release(aBlock);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  return;
                }
LABEL_45:
                std::__shared_weak_count::__release_weak(v33);
                goto LABEL_46;
              }
            }
            operator delete(v40.__r_.__value_.__l.__data_);
            v33 = v39;
            if (!v39)
              goto LABEL_46;
            goto LABEL_45;
          }
LABEL_18:
          v8 = _Block_copy(v8);
          goto LABEL_19;
        }
      }
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 64), *(_QWORD *)(a1 + 72));
      v8 = *(void **)(a1 + 56);
      if (!v8)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  else
  {
    v5 = 0;
  }
  v9 = xpc_null_create();
  v10 = *(_QWORD *)(a1 + 56);
  v42 = v9;
  v11 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v10 + 16))(v10, 3760250880, &v42);
  xpc_release(v42);
  xpc_release(v11);
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BF4D2604(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *aBlock, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  uint64_t v20;
  void **v21;
  std::__shared_weak_count *v23;
  const void *v24;

  v23 = *(std::__shared_weak_count **)(v20 + 56);
  if (v23)
    std::__shared_weak_count::__release_weak(v23);
  v24 = *(const void **)(v20 + 32);
  if (v24)
    _Block_release(v24);
  if (*(char *)(v20 + 31) < 0)
  {
    operator delete(*v21);
    __clang_call_terminate(a1);
  }
  __clang_call_terminate(a1);
}

void __copy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;

  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(void **)(a2 + 56);
  if (v7)
    v7 = _Block_copy(v7);
  *(_QWORD *)(a1 + 56) = v7;
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v8;
  }
  v9 = (std::string *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a2 + 88), *(_QWORD *)(a2 + 96));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
}

void sub_1BF4D278C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  const void *v4;
  std::__shared_weak_count *v5;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  v4 = *(const void **)(v1 + 56);
  if (v4)
    _Block_release(v4);
  v5 = *(std::__shared_weak_count **)(v1 + 48);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 64));
    v2 = *(const void **)(a1 + 56);
    if (!v2)
      goto LABEL_8;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    goto LABEL_6;
LABEL_3:
  v2 = *(const void **)(a1 + 56);
  if (v2)
LABEL_7:
    _Block_release(v2);
LABEL_8:
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void TraceManager::start(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = v3;
  v8[1] = a1;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[17];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TraceManager>::execute_wrapped<TraceManager::start(dispatch::group_session)::$_0>(TraceManager::start(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TraceManager::start(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TraceManager::start(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void TraceManager::finishInitialization_sync(std::__shared_weak_count **this)
{
  const char *v2;
  size_t v3;
  void *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  const void *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  const void *v24;
  size_t v25;
  void *v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  NSObject *v33;
  const void *v34;
  size_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  NSObject *v42;
  const void *v43;
  size_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  NSObject *v51;
  _QWORD v52[6];
  std::__shared_weak_count *v53;
  void *v54;
  dispatch_object_t v55;
  void *v56[2];
  unint64_t v57;
  _QWORD v58[6];
  std::__shared_weak_count *v59;
  void *v60;
  dispatch_object_t object;
  void *__p[2];
  unint64_t v63;
  _QWORD aBlock[6];
  std::__shared_weak_count *v65;
  const void *v66;
  dispatch_object_t v67;
  void *v68[2];
  unint64_t v69;
  const void *v70;
  void *__dst[2];
  unint64_t v72;
  __int128 v73;

  v2 = (const char *)((uint64_t (*)(std::__shared_weak_count **))(*this)->__shared_weak_owners_)(this);
  v3 = strlen(v2);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    v5 = (void **)operator new(v6 + 1);
    __dst[1] = v4;
    v72 = v7 | 0x8000000000000000;
    __dst[0] = v5;
  }
  else
  {
    HIBYTE(v72) = v3;
    v5 = __dst;
    if (!v3)
      goto LABEL_9;
  }
  memmove(v5, v2, (size_t)v4);
LABEL_9:
  *((_BYTE *)v4 + (_QWORD)v5) = 0;
  v70 = 0;
  AppleBasebandManager::create();
  v8 = v73;
  v73 = 0uLL;
  v9 = this[20];
  *(_OWORD *)(this + 19) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
  if (!*((_QWORD *)&v73 + 1))
    goto LABEL_18;
  v13 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
  {
LABEL_18:
    v15 = v70;
    if (!v70)
      goto LABEL_20;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  v15 = v70;
  if (v70)
LABEL_19:
    CFRelease(v15);
LABEL_20:
  if (SHIBYTE(v72) < 0)
    operator delete(__dst[0]);
  v16 = this[16];
  if (!v16 || (v17 = this[15], (v18 = std::__shared_weak_count::lock(v16)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = v18;
  p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
  do
    v21 = __ldxr(p_shared_weak_owners);
  while (__stxr(v21 + 1, p_shared_weak_owners));
  v22 = (unint64_t *)&v18->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v19);
  }
  v24 = (const void *)*MEMORY[0x1E0CFBD68];
  v25 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  if (v25 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v26 = (void *)v25;
  if (v25 >= 0x17)
  {
    v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v28 = v25 | 7;
    v29 = v28 + 1;
    v27 = (void **)operator new(v28 + 1);
    v68[1] = v26;
    v69 = v29 | 0x8000000000000000;
    v68[0] = v27;
  }
  else
  {
    HIBYTE(v69) = v25;
    v27 = v68;
    if (!v25)
      goto LABEL_38;
  }
  memmove(v27, v24, (size_t)v26);
LABEL_38:
  *((_BYTE *)v26 + (_QWORD)v27) = 0;
  v30 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_60_0;
  aBlock[4] = this;
  aBlock[5] = v17;
  v65 = v19;
  do
    v31 = __ldxr(p_shared_weak_owners);
  while (__stxr(v31 + 1, p_shared_weak_owners));
  v32 = _Block_copy(aBlock);
  v33 = this[17];
  if (v33)
    dispatch_retain((dispatch_object_t)this[17]);
  v66 = v32;
  v67 = v33;
  AppleBasebandManager::setEventHandler();
  if (v67)
    dispatch_release(v67);
  if (v66)
    _Block_release(v66);
  if (SHIBYTE(v69) < 0)
    operator delete(v68[0]);
  v34 = (const void *)*MEMORY[0x1E0CFB9A8];
  v35 = strlen((const char *)*MEMORY[0x1E0CFB9A8]);
  if (v35 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v36 = (void *)v35;
  if (v35 >= 0x17)
  {
    v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v38 = v35 | 7;
    v39 = v38 + 1;
    v37 = operator new(v38 + 1);
    __p[1] = v36;
    v63 = v39 | 0x8000000000000000;
    __p[0] = v37;
  }
  else
  {
    HIBYTE(v63) = v35;
    v37 = __p;
    if (!v35)
      goto LABEL_56;
  }
  memmove(v37, v34, (size_t)v36);
LABEL_56:
  *((_BYTE *)v36 + (_QWORD)v37) = 0;
  v58[0] = v30;
  v58[1] = 1174405120;
  v58[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_61;
  v58[3] = &__block_descriptor_tmp_64_3;
  v58[4] = this;
  v58[5] = v17;
  v59 = v19;
  do
    v40 = __ldxr(p_shared_weak_owners);
  while (__stxr(v40 + 1, p_shared_weak_owners));
  v41 = _Block_copy(v58);
  v42 = this[17];
  if (v42)
    dispatch_retain((dispatch_object_t)this[17]);
  v60 = v41;
  object = v42;
  AppleBasebandManager::setEventHandler();
  if (object)
    dispatch_release(object);
  if (v60)
    _Block_release(v60);
  if (SHIBYTE(v63) < 0)
    operator delete(__p[0]);
  v43 = (const void *)*MEMORY[0x1E0CFB9B0];
  v44 = strlen((const char *)*MEMORY[0x1E0CFB9B0]);
  if (v44 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v45 = (void *)v44;
  if (v44 >= 0x17)
  {
    v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v47 = v44 | 7;
    v48 = v47 + 1;
    v46 = operator new(v47 + 1);
    v56[1] = v45;
    v57 = v48 | 0x8000000000000000;
    v56[0] = v46;
  }
  else
  {
    HIBYTE(v57) = v44;
    v46 = v56;
    if (!v44)
      goto LABEL_74;
  }
  memmove(v46, v43, (size_t)v45);
LABEL_74:
  *((_BYTE *)v45 + (_QWORD)v46) = 0;
  v52[0] = v30;
  v52[1] = 1174405120;
  v52[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_65;
  v52[3] = &__block_descriptor_tmp_67_1;
  v52[4] = this;
  v52[5] = v17;
  v53 = v19;
  do
    v49 = __ldxr(p_shared_weak_owners);
  while (__stxr(v49 + 1, p_shared_weak_owners));
  v50 = _Block_copy(v52);
  v51 = this[17];
  if (v51)
    dispatch_retain((dispatch_object_t)this[17]);
  v54 = v50;
  v55 = v51;
  AppleBasebandManager::setEventHandler();
  if (v55)
    dispatch_release(v55);
  if (v54)
    _Block_release(v54);
  if (SHIBYTE(v57) < 0)
    operator delete(v56[0]);
  AppleBasebandManager::eventsOn((AppleBasebandManager *)this[19]);
  if (v53)
    std::__shared_weak_count::__release_weak(v53);
  if (v59)
    std::__shared_weak_count::__release_weak(v59);
  if (v65)
    std::__shared_weak_count::__release_weak(v65);
  std::__shared_weak_count::__release_weak(v19);
}

void sub_1BF4D2ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45)
{
  std::__shared_weak_count *v45;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (a30)
    std::__shared_weak_count::__release_weak(a30);
  if (a45)
    std::__shared_weak_count::__release_weak(a45);
  std::__shared_weak_count::__release_weak(v45);
  _Unwind_Resume(a1);
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  const void *v9;
  const char *v10;
  void **v11;
  _BYTE *v12;
  size_t v13;
  NSObject *v14;
  _BYTE *v15;
  int v16;
  size_t v17;
  _BYTE *v18;
  const char *v19;
  _BYTE *v20;
  const void *v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  void *v30;
  void *v31;
  char *v32;
  char *v33;
  NSObject *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  const std::string::value_type *v39;
  size_t v40;
  std::string::size_type v41;
  std::string *p_buf;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  void *v48;
  std::string::size_type v49;
  xpc_object_t v50;
  xpc_object_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58;
  std::string::size_type v59;
  xpc_object_t v60;
  xpc_object_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  const char *v65;
  std::string::size_type v66;
  void *v67;
  int v68;
  size_t v69;
  void **v70;
  const void *v71;
  void **v72;
  NSObject *v73;
  void **v74;
  xpc_object_t v75;
  uint64_t v76;
  xpc_object_t v77;
  const void *v78;
  size_t v79;
  void *v80;
  void **v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  NSObject *v89;
  const void *v90;
  size_t v91;
  void *v92;
  void **v93;
  xpc_object_t v94;
  xpc_object_t v95;
  void *v96;
  uint64_t v97;
  NSObject *size;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  const void *v108;
  size_t v109;
  void *v110;
  void **v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  const void *v115;
  size_t v116;
  void *v117;
  void **v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  xpc_object_t v122;
  xpc_object_t v123;
  const void *v124;
  size_t v125;
  void *v126;
  void **v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  const void *v132;
  size_t v133;
  void *v134;
  void **v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  NSObject *v139;
  void *v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  const void *v151;
  size_t v152;
  void *v153;
  void **v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  const void *v158;
  size_t v159;
  void *v160;
  void **v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  NSObject *v165;
  xpc_object_t v166;
  uint64_t v167;
  const char *v168;
  const void *v169;
  size_t v170;
  NSObject *v171;
  void *p_p;
  uint64_t v173;
  uint64_t v174;
  const char *v175;
  xpc_object_t v176;
  xpc_object_t v177;
  NSObject *v178;
  void *v179;
  uint64_t v180;
  void *v181;
  xpc_object_t v182;
  uint64_t v183;
  size_t v184;
  void *v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  NSObject *v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  const char *v196;
  xpc_object_t v197;
  xpc_object_t v198;
  std::string *v199;
  xpc_object_t v200;
  xpc_object_t v201;
  std::string *v202;
  xpc_object_t v203;
  xpc_object_t v204;
  const char *v205;
  xpc_object_t v206;
  xpc_object_t v207;
  xpc_object_t v208;
  xpc_object_t v209;
  xpc_object_t v210;
  xpc_object_t v211;
  const char *v212;
  char Bool;
  xpc_object_t v214;
  xpc_object_t v215;
  const char *v216;
  char v217;
  xpc_object_t v218;
  xpc_object_t v219;
  const char *v220;
  char v221;
  xpc_object_t v222;
  xpc_object_t v223;
  std::__shared_weak_count *v224;
  uint64_t v225;
  std::__shared_weak_count *v226;
  std::__shared_weak_count *v227;
  unint64_t *p_shared_weak_owners;
  unint64_t v229;
  unint64_t *v230;
  unint64_t v231;
  const void *v232;
  size_t v233;
  NSObject *v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  std::__shared_weak_count *v238;
  abm::client::Event *v239;
  unint64_t *v240;
  unint64_t v241;
  unint64_t v242;
  void *v243;
  size_t v244;
  void *v245;
  void **v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  void **v250;
  std::__shared_weak_count *v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  unint64_t *p_shared_owners;
  unint64_t v256;
  char *__s;
  int Int;
  void *v259[2];
  NSObject *v260;
  xpc_object_t v261;
  _QWORD v262[5];
  _QWORD v263[2];
  void *v264[2];
  NSObject *v265;
  xpc_object_t object;
  _QWORD aBlock[5];
  _QWORD v268[2];
  _QWORD v269[2];
  void *v270[2];
  NSObject *v271;
  xpc_object_t v272;
  _QWORD v273[5];
  _QWORD v274[2];
  void *v275[2];
  NSObject *v276;
  xpc_object_t v277;
  _QWORD v278[6];
  std::__shared_weak_count *v279;
  abm::client::Event *v280;
  std::__shared_weak_count *v281;
  void *v282[2];
  NSObject *v283;
  xpc_object_t v284;
  _QWORD v285[6];
  std::__shared_weak_count *v286;
  abm::client::Event *v287;
  std::__shared_weak_count *v288;
  std::string v289;
  void *v290[2];
  unint64_t v291;
  void *v292[2];
  NSObject *v293;
  xpc_object_t v294;
  _QWORD v295[5];
  _QWORD v296[2];
  void *v297[2];
  NSObject *v298;
  xpc_object_t v299;
  _QWORD v300[6];
  std::__shared_weak_count *v301;
  abm::client::Event *v302;
  std::__shared_weak_count *v303;
  std::string v304;
  void *v305[2];
  unint64_t v306;
  _QWORD v307[6];
  std::__shared_weak_count *v308;
  uint64_t v309;
  std::__shared_weak_count *v310;
  const void *v311;
  xpc_object_t v312;
  void *__p;
  dispatch_object_t v314;
  unint64_t v315;
  void *v316[2];
  NSObject *v317;
  xpc_object_t v318;
  void *__dst[3];
  std::string v320;
  void *v321[3];
  _BYTE v322[24];
  _QWORD v323[2];
  unint64_t v324;
  uint64_t v325;
  std::__shared_weak_count *v326;
  uint64_t v327;
  std::string buf;
  uint64_t v329;

  v329 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  v326 = v6;
  if (!v6)
    return;
  v7 = v6;
  v8 = a1[5];
  v325 = v8;
  if (!v8)
  {
LABEL_476:
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v256 = __ldaxr(p_shared_owners);
    while (__stlxr(v256 - 1, p_shared_owners));
    if (!v256)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  v324 = 0xAAAAAAAAAAAAAAAALL;
  abm::client::Event::getData(*(abm::client::Event **)a2);
  v9 = (const void *)0xAAAAAAAAAAAAAAAALL;
  if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
  {
    v323[0] = 0xAAAAAAAAAAAAAAAALL;
    v323[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v323, (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL);
    memset(v322, 170, sizeof(v322));
    v10 = (const char *)*MEMORY[0x1E0CFB530];
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&buf, (const char *)*MEMORY[0x1E0CFB530]);
    ctu::cf::map_adapter::getString();
    MEMORY[0x1C3B8936C](&buf);
    v11 = (void **)(v5 + 192);
    if ((_BYTE *)(v5 + 192) != v322)
    {
      if (*(char *)(v5 + 215) < 0)
      {
        if (v322[23] >= 0)
          v12 = v322;
        else
          v12 = *(_BYTE **)v322;
        if (v322[23] >= 0)
          v13 = v322[23];
        else
          v13 = *(_QWORD *)&v322[8];
        std::string::__assign_no_alias<false>(v11, v12, v13);
      }
      else if ((v322[23] & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v11, *(void **)v322, *(size_t *)&v322[8]);
      }
      else
      {
        *(_OWORD *)v11 = *(_OWORD *)v322;
        *(_QWORD *)(v5 + 208) = *(_QWORD *)&v322[16];
      }
    }
    v14 = *(NSObject **)(v5 + 88);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15 = v322;
      if (v322[23] < 0)
        v15 = *(_BYTE **)v322;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
      _os_log_impl(&dword_1BF335000, v14, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&buf, 0xCu);
    }
    v16 = v322[23];
    if (v322[23] >= 0)
      v17 = v322[23];
    else
      v17 = *(_QWORD *)&v322[8];
    if (v17 != strlen((const char *)*MEMORY[0x1E0CFBB68])
      || (v322[23] >= 0 ? (v18 = v322) : (v18 = *(_BYTE **)v322), memcmp(v18, (const void *)*MEMORY[0x1E0CFBB68], v17)))
    {
      v19 = (const char *)*MEMORY[0x1E0CFB7F0];
      if (v17 == strlen((const char *)*MEMORY[0x1E0CFB7F0]))
      {
        v20 = v16 >= 0 ? v322 : *(_BYTE **)v322;
        if (!memcmp(v20, v19, v17))
        {
          memset(&buf, 170, 16);
          v285[0] = MEMORY[0x1E0C809B0];
          v285[1] = 1174405120;
          v285[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_49;
          v285[3] = &__block_descriptor_tmp_50_0;
          v285[4] = v5;
          v285[5] = v8;
          v286 = v7;
          v43 = (unint64_t *)&v7->__shared_owners_;
          do
            v44 = __ldxr(v43);
          while (__stxr(v44 + 1, v43));
          v45 = *(std::__shared_weak_count **)(a2 + 8);
          v287 = *(abm::client::Event **)a2;
          v288 = v45;
          if (v45)
          {
            v46 = (unint64_t *)&v45->__shared_owners_;
            do
              v47 = __ldxr(v46);
            while (__stxr(v47 + 1, v46));
          }
          v48 = _Block_copy(v285);
          v49 = *(_QWORD *)(v5 + 136);
          if (v49)
            dispatch_retain(*(dispatch_object_t *)(v5 + 136));
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
          buf.__r_.__value_.__l.__size_ = v49;
          v50 = xpc_dictionary_create(0, 0, 0);
          if (v50 || (v50 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x1C3B8A86C](v50) == MEMORY[0x1E0C812F8])
            {
              xpc_retain(v50);
              v51 = v50;
            }
            else
            {
              v51 = xpc_null_create();
            }
          }
          else
          {
            v51 = xpc_null_create();
            v50 = 0;
          }
          xpc_release(v50);
          v94 = xpc_string_create(v19);
          if (!v94)
            v94 = xpc_null_create();
          xpc_dictionary_set_value(v51, v10, v94);
          v95 = xpc_null_create();
          xpc_release(v94);
          xpc_release(v95);
          v284 = v51;
          if (v51)
            xpc_retain(v51);
          else
            v284 = xpc_null_create();
          v283 = 0;
          if (buf.__r_.__value_.__r.__words[0])
            v96 = _Block_copy(buf.__r_.__value_.__l.__data_);
          else
            v96 = 0;
          v97 = *MEMORY[0x1E0CF10F0];
          size = buf.__r_.__value_.__l.__size_;
          v282[0] = v96;
          v282[1] = (void *)buf.__r_.__value_.__l.__size_;
          if (buf.__r_.__value_.__l.__size_)
            dispatch_retain((dispatch_object_t)buf.__r_.__value_.__l.__size_);
          TraceManager::runOnHelper_sync((_QWORD *)v5, (const char *)9, v97, 0x1388u, 0, &v284, &v283, v282);
          if (size)
            dispatch_release(size);
          if (v96)
            _Block_release(v96);
          xpc_release(v284);
          v284 = 0;
          xpc_release(v51);
          if (buf.__r_.__value_.__l.__size_)
            dispatch_release((dispatch_object_t)buf.__r_.__value_.__l.__size_);
          if (buf.__r_.__value_.__r.__words[0])
            _Block_release(buf.__r_.__value_.__l.__data_);
          v99 = v288;
          if (v288)
          {
            v100 = (unint64_t *)&v288->__shared_owners_;
            do
              v101 = __ldaxr(v100);
            while (__stlxr(v101 - 1, v100));
            if (!v101)
            {
              ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
              std::__shared_weak_count::__release_weak(v99);
            }
          }
          v102 = v286;
          if (!v286)
            goto LABEL_470;
          v103 = (unint64_t *)&v286->__shared_owners_;
          do
            v104 = __ldaxr(v103);
          while (__stlxr(v104 - 1, v103));
LABEL_268:
          if (!v104)
          {
            ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
            std::__shared_weak_count::__release_weak(v102);
          }
          goto LABEL_470;
        }
      }
      v21 = (const void *)*MEMORY[0x1E0CFB980];
      if (v17 != strlen((const char *)*MEMORY[0x1E0CFB980])
        || (v16 >= 0 ? (v22 = v322) : (v22 = *(_BYTE **)v322), memcmp(v22, v21, v17)))
      {
        if (v17 == strlen((const char *)*MEMORY[0x1E0CFB588]))
        {
          v23 = v16 >= 0 ? v322 : *(_BYTE **)v322;
          if (!memcmp(v23, (const void *)*MEMORY[0x1E0CFB588], v17))
          {
            v321[0] = (void *)0xAAAAAAAAAAAAAAAALL;
            v321[1] = (void *)0xAAAAAAAAAAAAAAAALL;
            v24 = MEMORY[0x1E0C809B0];
            aBlock[0] = MEMORY[0x1E0C809B0];
            aBlock[1] = 1174405120;
            aBlock[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_55;
            aBlock[3] = &__block_descriptor_tmp_56_1;
            aBlock[4] = v5;
            v268[0] = v8;
            v268[1] = v7;
            v25 = (unint64_t *)&v7->__shared_owners_;
            do
              v26 = __ldxr(v25);
            while (__stxr(v26 + 1, v25));
            v27 = *(_QWORD *)(a2 + 8);
            v269[0] = *(_QWORD *)a2;
            v269[1] = v27;
            if (v27)
            {
              v28 = (unint64_t *)(v27 + 8);
              do
                v29 = __ldxr(v28);
              while (__stxr(v29 + 1, v28));
            }
            v30 = _Block_copy(aBlock);
            v31 = *(void **)(v5 + 136);
            if (v31)
              dispatch_retain(*(dispatch_object_t *)(v5 + 136));
            v321[0] = v30;
            v321[1] = v31;
            LODWORD(v320.__r_.__value_.__l.__data_) = -1431655766;
            v32 = (char *)std::string::basic_string[abi:ne180100]<0>(&buf, (char *)*MEMORY[0x1E0CFB028]);
            prop::bbtrace::get<diag::config::Mode>(v32, (int *)&v320);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf.__r_.__value_.__l.__data_);
            LODWORD(__dst[0]) = -1431655766;
            v33 = (char *)std::string::basic_string[abi:ne180100]<0>(&buf, (char *)*MEMORY[0x1E0CFB2D8]);
            prop::bbtrace::get<abm::traceOwnership>(v33, (int *)__dst);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf.__r_.__value_.__l.__data_);
            if (LODWORD(v320.__r_.__value_.__l.__data_) == 4 && LODWORD(__dst[0]) == 1)
            {
              v34 = *(NSObject **)(v5 + 88);
              if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                _os_log_impl(&dword_1BF335000, v34, OS_LOG_TYPE_DEFAULT, "#N Baseband is dead while Cellular Logging is running. Cellular Logging will be stopped.", (uint8_t *)&buf, 2u);
              }
              v265 = 0;
              object = xpc_null_create();
              v262[0] = v24;
              v262[1] = 1174405120;
              v262[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_57;
              v262[3] = &__block_descriptor_tmp_58_3;
              v262[4] = v5;
              dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::callback(v263, (uint64_t)v321);
              v35 = _Block_copy(v262);
              v36 = *MEMORY[0x1E0CF1170];
              v37 = *(void **)(v5 + 136);
              if (v37)
                dispatch_retain(*(dispatch_object_t *)(v5 + 136));
              v264[0] = v35;
              v264[1] = v37;
              TraceManager::runOnHelper_sync((_QWORD *)v5, (const char *)0xA, v36, 0x1388u, 1, &object, &v265, v264);
              dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v264);
              xpc_release(object);
              object = 0;
              dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v263);
            }
            else
            {
              v75 = xpc_null_create();
              v76 = *MEMORY[0x1E0CF1090];
              v260 = 0;
              v261 = v75;
              dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::callback(v259, (uint64_t)v321);
              TraceManager::runOnHelper_sync((_QWORD *)v5, (const char *)9, v76, 0x7D0u, 0, &v261, &v260, v259);
              dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v259);
              xpc_release(v261);
              v261 = 0;
            }
            dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v321);
            std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)v269);
            std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)v268);
          }
        }
LABEL_470:
        if ((v322[23] & 0x80000000) != 0)
          operator delete(*(void **)v322);
        MEMORY[0x1C3B893A8](v323);
        v9 = (const void *)v324;
        goto LABEL_473;
      }
      TraceManager::updateBasebandFWInfo((TraceManager *)v5);
      v320.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
      v320.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
      v52 = MEMORY[0x1E0C809B0];
      v278[0] = MEMORY[0x1E0C809B0];
      v278[1] = 1174405120;
      v278[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_51;
      v278[3] = &__block_descriptor_tmp_52_1;
      v278[4] = v5;
      v278[5] = v8;
      v279 = v7;
      v53 = (unint64_t *)&v7->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
      v55 = *(std::__shared_weak_count **)(a2 + 8);
      v280 = *(abm::client::Event **)a2;
      v281 = v55;
      if (v55)
      {
        v56 = (unint64_t *)&v55->__shared_owners_;
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
      }
      v58 = _Block_copy(v278);
      v59 = *(_QWORD *)(v5 + 136);
      if (v59)
        dispatch_retain(*(dispatch_object_t *)(v5 + 136));
      v320.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
      v320.__r_.__value_.__l.__size_ = v59;
      __dst[0] = (void *)0xAAAAAAAAAAAAAAAALL;
      v60 = xpc_dictionary_create(0, 0, 0);
      v61 = v60;
      if (v60)
      {
        __dst[0] = v60;
      }
      else
      {
        v61 = xpc_null_create();
        __dst[0] = v61;
        if (!v61)
        {
          v77 = xpc_null_create();
          v61 = 0;
          goto LABEL_212;
        }
      }
      if (MEMORY[0x1C3B8A86C](v61) == MEMORY[0x1E0C812F8])
      {
        xpc_retain(v61);
        goto LABEL_213;
      }
      v77 = xpc_null_create();
LABEL_212:
      __dst[0] = v77;
LABEL_213:
      xpc_release(v61);
      v122 = xpc_string_create((const char *)v21);
      if (!v122)
        v122 = xpc_null_create();
      xpc_dictionary_set_value(__dst[0], v10, v122);
      v123 = xpc_null_create();
      xpc_release(v122);
      xpc_release(v123);
      v124 = (const void *)*MEMORY[0x1E0CFB028];
      v125 = strlen((const char *)*MEMORY[0x1E0CFB028]);
      if (v125 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v126 = (void *)v125;
      if (v125 >= 0x17)
      {
        v128 = (v125 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v125 | 7) != 0x17)
          v128 = v125 | 7;
        v129 = v128 + 1;
        v127 = (void **)operator new(v128 + 1);
        v321[1] = v126;
        v321[2] = (void *)(v129 | 0x8000000000000000);
        v321[0] = v127;
      }
      else
      {
        HIBYTE(v321[2]) = v125;
        v127 = v321;
        if (!v125)
        {
LABEL_223:
          *((_BYTE *)v126 + (_QWORD)v127) = 0;
          memset(&buf, 0, sizeof(buf));
          v130 = -1431655766;
          v131 = -1431655766;
          if (prop::bbtrace::get((char *)v321, (uint64_t)&buf))
          {
            LODWORD(__p) = -1431655766;
            if (util::convert<int>(&buf, &__p, 0))
              v131 = (int)__p;
            else
              v131 = -1431655766;
          }
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          if (SHIBYTE(v321[2]) < 0)
            operator delete(v321[0]);
          v132 = (const void *)*MEMORY[0x1E0CFB2D8];
          v133 = strlen((const char *)*MEMORY[0x1E0CFB2D8]);
          if (v133 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v134 = (void *)v133;
          if (v133 >= 0x17)
          {
            v136 = (v133 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v133 | 7) != 0x17)
              v136 = v133 | 7;
            v137 = v136 + 1;
            v135 = (void **)operator new(v136 + 1);
            v321[1] = v134;
            v321[2] = (void *)(v137 | 0x8000000000000000);
            v321[0] = v135;
          }
          else
          {
            HIBYTE(v321[2]) = v133;
            v135 = v321;
            if (!v133)
            {
LABEL_239:
              *((_BYTE *)v134 + (_QWORD)v135) = 0;
              memset(&buf, 0, sizeof(buf));
              if (prop::bbtrace::get((char *)v321, (uint64_t)&buf))
              {
                LODWORD(__p) = -1431655766;
                if (util::convert<int>(&buf, &__p, 0))
                  v130 = (int)__p;
                else
                  v130 = -1431655766;
              }
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(buf.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v321[2]) & 0x80000000) == 0)
                {
LABEL_245:
                  v138 = (uint64_t *)MEMORY[0x1E0CF10A0];
                  if (v131 != 4)
                    goto LABEL_255;
LABEL_249:
                  if (v130 == 1)
                  {
                    v139 = *(NSObject **)(v5 + 88);
                    if (os_log_type_enabled(v139, OS_LOG_TYPE_DEFAULT))
                    {
                      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                      _os_log_impl(&dword_1BF335000, v139, OS_LOG_TYPE_DEFAULT, "#N Resume notification will be sent to cellular logging after all traces are started.", (uint8_t *)&buf, 2u);
                    }
                    v276 = 0;
                    v277 = xpc_null_create();
                    v273[0] = v52;
                    v273[1] = 1174405120;
                    v273[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_53;
                    v273[3] = &__block_descriptor_tmp_54;
                    v273[4] = v5;
                    dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::callback(v274, (uint64_t)&v320);
                    v140 = _Block_copy(v273);
                    v141 = *v138;
                    v142 = *(void **)(v5 + 136);
                    if (v142)
                      dispatch_retain(*(dispatch_object_t *)(v5 + 136));
                    v275[0] = v140;
                    v275[1] = v142;
                    TraceManager::runOnHelper_sync((_QWORD *)v5, (const char *)9, v141, 0x1388u, 0, &v277, &v276, v275);
                    dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v275);
                    xpc_release(v277);
                    v277 = 0;
                    dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v274);
                    goto LABEL_256;
                  }
LABEL_255:
                  v143 = *v138;
                  xpc::dict::dict((xpc::dict *)&v272, __dst);
                  v271 = 0;
                  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::callback(v270, (uint64_t)&v320);
                  TraceManager::runOnHelper_sync((_QWORD *)v5, (const char *)9, v143, 0x1388u, 0, &v272, &v271, v270);
                  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v270);
                  xpc_release(v272);
                  v272 = 0;
LABEL_256:
                  TraceManager::setupDumpLogsIndication_sync((NSObject **)v5);
                  xpc_release(__dst[0]);
                  if (v320.__r_.__value_.__l.__size_)
                    dispatch_release((dispatch_object_t)v320.__r_.__value_.__l.__size_);
                  if (v320.__r_.__value_.__r.__words[0])
                    _Block_release(v320.__r_.__value_.__l.__data_);
                  v144 = v281;
                  if (v281)
                  {
                    v145 = (unint64_t *)&v281->__shared_owners_;
                    do
                      v146 = __ldaxr(v145);
                    while (__stlxr(v146 - 1, v145));
                    if (!v146)
                    {
                      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                      std::__shared_weak_count::__release_weak(v144);
                    }
                  }
                  v102 = v279;
                  if (!v279)
                    goto LABEL_470;
                  v147 = (unint64_t *)&v279->__shared_owners_;
                  do
                    v104 = __ldaxr(v147);
                  while (__stlxr(v104 - 1, v147));
                  goto LABEL_268;
                }
              }
              else if ((SHIBYTE(v321[2]) & 0x80000000) == 0)
              {
                goto LABEL_245;
              }
              operator delete(v321[0]);
              v138 = (uint64_t *)MEMORY[0x1E0CF10A0];
              if (v131 != 4)
                goto LABEL_255;
              goto LABEL_249;
            }
          }
          memmove(v135, v132, (size_t)v134);
          goto LABEL_239;
        }
      }
      memmove(v127, v124, (size_t)v126);
      goto LABEL_223;
    }
    memset(v321, 170, sizeof(v321));
    v38 = (const char *)*MEMORY[0x1E0CFB538];
    memset(&buf, 0, sizeof(buf));
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v320, v38);
    ctu::cf::map_adapter::getString();
    MEMORY[0x1C3B8936C](&v320);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    memset(&v320, 170, sizeof(v320));
    v39 = (const std::string::value_type *)*MEMORY[0x1E0CFB058];
    v40 = strlen((const char *)*MEMORY[0x1E0CFB058]);
    if (v40 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v41 = v40;
    if (v40 >= 0x17)
    {
      v62 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v40 | 7) != 0x17)
        v62 = v40 | 7;
      v63 = v62 + 1;
      p_buf = (std::string *)operator new(v62 + 1);
      buf.__r_.__value_.__l.__size_ = v41;
      buf.__r_.__value_.__r.__words[2] = v63 | 0x8000000000000000;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    }
    else
    {
      *((_BYTE *)&buf.__r_.__value_.__s + 23) = v40;
      p_buf = &buf;
      if (!v40)
      {
LABEL_92:
        v64 = (const char *)*MEMORY[0x1E0CFB788];
        p_buf->__r_.__value_.__s.__data_[v41] = 0;
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)__dst, v64);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C3B8936C](__dst);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        v65 = (const char *)*MEMORY[0x1E0CFB010];
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&buf, (const char *)*MEMORY[0x1E0CFB010]);
        Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v323, (const __CFString *)buf.__r_.__value_.__l.__data_);
        MEMORY[0x1C3B8936C](&buf);
        v66 = HIBYTE(v320.__r_.__value_.__r.__words[2]);
        if ((v320.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v66 = v320.__r_.__value_.__l.__size_;
        if (!v66)
          std::string::__assign_external(&v320, v39);
        v67 = (void *)*MEMORY[0x1E0CFB590];
        v68 = SHIBYTE(v321[2]);
        if (SHIBYTE(v321[2]) >= 0)
          v69 = HIBYTE(v321[2]);
        else
          v69 = (size_t)v321[1];
        if (v69 != strlen((const char *)*MEMORY[0x1E0CFB590])
          || (SHIBYTE(v321[2]) >= 0 ? (v70 = v321) : (v70 = (void **)v321[0]), memcmp(v70, v67, v69)))
        {
          v71 = (const void *)*MEMORY[0x1E0CFB598];
          if (v69 != strlen((const char *)*MEMORY[0x1E0CFB598])
            || (v68 >= 0 ? (v72 = v321) : (v72 = (void **)v321[0]), memcmp(v72, v71, v69)))
          {
            v73 = *(NSObject **)(v5 + 88);
            if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
            {
              v74 = (void **)v321[0];
              if (v68 >= 0)
                v74 = v321;
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v74;
              _os_log_impl(&dword_1BF335000, v73, OS_LOG_TYPE_DEFAULT, "#I Invalid reset type [%s]", (uint8_t *)&buf, 0xCu);
            }
LABEL_466:
            if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v320.__r_.__value_.__l.__data_);
            if (SHIBYTE(v321[2]) < 0)
              operator delete(v321[0]);
            goto LABEL_470;
          }
          v314 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
          __p = (void *)0xAAAAAAAAAAAAAAAALL;
          v300[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_45;
          v300[3] = &__block_descriptor_tmp_46_2;
          v300[4] = v5;
          v300[5] = v325;
          v82 = MEMORY[0x1E0C809B0];
          v300[0] = MEMORY[0x1E0C809B0];
          v300[1] = 1174405120;
          v301 = v326;
          if (v326)
          {
            v83 = (unint64_t *)&v326->__shared_owners_;
            do
              v84 = __ldxr(v83);
            while (__stxr(v84 + 1, v83));
          }
          v85 = *(std::__shared_weak_count **)(a2 + 8);
          v302 = *(abm::client::Event **)a2;
          v303 = v85;
          if (v85)
          {
            v86 = (unint64_t *)&v85->__shared_owners_;
            do
              v87 = __ldxr(v86);
            while (__stxr(v87 + 1, v86));
          }
          v88 = _Block_copy(v300);
          v89 = *(NSObject **)(v5 + 136);
          if (v89)
            dispatch_retain(*(dispatch_object_t *)(v5 + 136));
          __p = v88;
          v314 = v89;
          v90 = (const void *)*MEMORY[0x1E0CFB028];
          v91 = strlen((const char *)*MEMORY[0x1E0CFB028]);
          if (v91 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v92 = (void *)v91;
          if (v91 >= 0x17)
          {
            v148 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v91 | 7) != 0x17)
              v148 = v91 | 7;
            v149 = v148 + 1;
            v93 = (void **)operator new(v148 + 1);
            __dst[2] = (void *)(v149 | 0x8000000000000000);
            __dst[0] = v93;
            __dst[1] = v92;
          }
          else
          {
            HIBYTE(__dst[2]) = v91;
            v93 = __dst;
            if (!v91)
            {
LABEL_274:
              *((_BYTE *)v92 + (_QWORD)v93) = 0;
              memset(&buf, 0, sizeof(buf));
              v150 = -1431655766;
              if (prop::bbtrace::get((char *)__dst, (uint64_t)&buf))
              {
                LODWORD(v327) = -1431655766;
                if (util::convert<int>(&buf, &v327, 0))
                  v150 = v327;
                else
                  v150 = -1431655766;
              }
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                operator delete(buf.__r_.__value_.__l.__data_);
              if (SHIBYTE(__dst[2]) < 0)
                operator delete(__dst[0]);
              v151 = (const void *)*MEMORY[0x1E0CFB2D8];
              v152 = strlen((const char *)*MEMORY[0x1E0CFB2D8]);
              if (v152 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              v153 = (void *)v152;
              if (v152 >= 0x17)
              {
                v155 = (v152 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v152 | 7) != 0x17)
                  v155 = v152 | 7;
                v156 = v155 + 1;
                v154 = (void **)operator new(v155 + 1);
                __dst[2] = (void *)(v156 | 0x8000000000000000);
                __dst[0] = v154;
                __dst[1] = v153;
              }
              else
              {
                HIBYTE(__dst[2]) = v152;
                v154 = __dst;
                if (!v152)
                {
LABEL_290:
                  *((_BYTE *)v153 + (_QWORD)v154) = 0;
                  memset(&buf, 0, sizeof(buf));
                  v157 = -1431655766;
                  if (prop::bbtrace::get((char *)__dst, (uint64_t)&buf))
                  {
                    LODWORD(v327) = -1431655766;
                    if (util::convert<int>(&buf, &v327, 0))
                      v157 = v327;
                    else
                      v157 = -1431655766;
                  }
                  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(buf.__r_.__value_.__l.__data_);
                  if (SHIBYTE(__dst[2]) < 0)
                    operator delete(__dst[0]);
                  v158 = (const void *)*MEMORY[0x1E0D01AE0];
                  v159 = strlen((const char *)*MEMORY[0x1E0D01AE0]);
                  if (v159 > 0x7FFFFFFFFFFFFFF7)
                    std::string::__throw_length_error[abi:ne180100]();
                  v160 = (void *)v159;
                  if (v159 >= 0x17)
                  {
                    v162 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v159 | 7) != 0x17)
                      v162 = v159 | 7;
                    v163 = v162 + 1;
                    v161 = (void **)operator new(v162 + 1);
                    __dst[2] = (void *)(v163 | 0x8000000000000000);
                    __dst[0] = v161;
                    __dst[1] = v160;
                  }
                  else
                  {
                    HIBYTE(__dst[2]) = v159;
                    v161 = __dst;
                    if (!v159)
                    {
LABEL_306:
                      *((_BYTE *)v160 + (_QWORD)v161) = 0;
                      memset(&buf, 0, sizeof(buf));
                      if (prop::bbtrace::get((char *)__dst, (uint64_t)&buf))
                      {
                        LODWORD(v327) = -1431655766;
                        if (util::convert<int>(&buf, &v327, 0))
                          v164 = v327;
                        else
                          v164 = 0;
                      }
                      else
                      {
                        v164 = 0;
                      }
                      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(buf.__r_.__value_.__l.__data_);
                        if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
                        {
LABEL_313:
                          if (v150 != 4)
                            goto LABEL_349;
LABEL_343:
                          if (v157 == 1)
                          {
                            v178 = *(NSObject **)(v5 + 88);
                            if (os_log_type_enabled(v178, OS_LOG_TYPE_DEFAULT))
                            {
                              LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                              _os_log_impl(&dword_1BF335000, v178, OS_LOG_TYPE_DEFAULT, "#N Soft reset detected while Cellular Logging is running. Cellular Logging will be paused.", (uint8_t *)&buf, 2u);
                            }
                            v299 = xpc_null_create();
                            v298 = 0;
                            v295[0] = v82;
                            v295[1] = 1174405120;
                            v295[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_47;
                            v295[3] = &__block_descriptor_tmp_48_1;
                            v295[4] = v5;
                            dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::callback(v296, (uint64_t)&__p);
                            v179 = _Block_copy(v295);
                            v180 = *MEMORY[0x1E0CF1190];
                            v181 = *(void **)(v5 + 136);
                            if (v181)
                              dispatch_retain(*(dispatch_object_t *)(v5 + 136));
                            v297[0] = v179;
                            v297[1] = v181;
                            TraceManager::runOnHelper_sync((_QWORD *)v5, (const char *)0xA, v180, 0x1388u, 1, &v299, &v298, v297);
                            dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v297);
                            xpc_release(v299);
                            v299 = 0;
                            dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v296);
LABEL_353:
                            v184 = strlen((const char *)v71);
                            if (v184 > 0x7FFFFFFFFFFFFFF7)
                              std::string::__throw_length_error[abi:ne180100]();
                            v185 = (void *)v184;
                            if (v184 >= 0x17)
                            {
                              v187 = (v184 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v184 | 7) != 0x17)
                                v187 = v184 | 7;
                              v188 = v187 + 1;
                              v186 = operator new(v187 + 1);
                              v291 = v188 | 0x8000000000000000;
                              v290[0] = v186;
                              v290[1] = v185;
                            }
                            else
                            {
                              HIBYTE(v291) = v184;
                              v186 = v290;
                              if (!v184)
                              {
LABEL_361:
                                *((_BYTE *)v185 + (_QWORD)v186) = 0;
                                if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
                                  std::string::__init_copy_ctor_external(&v289, v320.__r_.__value_.__l.__data_, v320.__r_.__value_.__l.__size_);
                                else
                                  v289 = v320;
                                TraceManager::submitTraceMetric_sync(v5, (const char *)v290, (const char *)&v289);
                                if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
                                {
                                  operator delete(v289.__r_.__value_.__l.__data_);
                                  if ((SHIBYTE(v291) & 0x80000000) == 0)
                                  {
LABEL_366:
                                    v189 = v314;
                                    if (!v314)
                                    {
LABEL_368:
                                      if (__p)
                                        _Block_release(__p);
                                      v190 = v303;
                                      if (v303)
                                      {
                                        v191 = (unint64_t *)&v303->__shared_owners_;
                                        do
                                          v192 = __ldaxr(v191);
                                        while (__stlxr(v192 - 1, v191));
                                        if (!v192)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                                          std::__shared_weak_count::__release_weak(v190);
                                        }
                                      }
                                      v193 = v301;
                                      if (v301)
                                      {
                                        v194 = (unint64_t *)&v301->__shared_owners_;
                                        do
                                          v195 = __ldaxr(v194);
                                        while (__stlxr(v195 - 1, v194));
                                        if (!v195)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
                                          std::__shared_weak_count::__release_weak(v193);
                                        }
                                      }
                                      goto LABEL_466;
                                    }
LABEL_367:
                                    dispatch_release(v189);
                                    goto LABEL_368;
                                  }
                                }
                                else if ((SHIBYTE(v291) & 0x80000000) == 0)
                                {
                                  goto LABEL_366;
                                }
                                operator delete(v290[0]);
                                v189 = v314;
                                if (!v314)
                                  goto LABEL_368;
                                goto LABEL_367;
                              }
                            }
                            memmove(v186, v71, (size_t)v185);
                            goto LABEL_361;
                          }
LABEL_349:
                          if (v157 | v150 || v164 != 3)
                          {
                            v182 = xpc_null_create();
                            v183 = *MEMORY[0x1E0CF1090];
                            v294 = v182;
                            v293 = 0;
                            dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::callback(v292, (uint64_t)&__p);
                            TraceManager::runOnHelper_sync((_QWORD *)v5, (const char *)9, v183, 0x1388u, 0, &v294, &v293, v292);
                            dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v292);
                            xpc_release(v294);
                            v294 = 0;
                          }
                          else
                          {
                            notify_post("com.apple.cellularlogging.bbreset");
                          }
                          goto LABEL_353;
                        }
                      }
                      else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
                      {
                        goto LABEL_313;
                      }
                      operator delete(__dst[0]);
                      if (v150 != 4)
                        goto LABEL_349;
                      goto LABEL_343;
                    }
                  }
                  memmove(v161, v158, (size_t)v160);
                  goto LABEL_306;
                }
              }
              memmove(v154, v151, (size_t)v153);
              goto LABEL_290;
            }
          }
          memmove(v93, v90, (size_t)v92);
          goto LABEL_274;
        }
        v78 = (const void *)*MEMORY[0x1E0CFB028];
        v79 = strlen((const char *)*MEMORY[0x1E0CFB028]);
        if (v79 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v80 = (void *)v79;
        if (v79 >= 0x17)
        {
          v105 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v79 | 7) != 0x17)
            v105 = v79 | 7;
          v106 = v105 + 1;
          v81 = (void **)operator new(v105 + 1);
          __dst[2] = (void *)(v106 | 0x8000000000000000);
          __dst[0] = v81;
          __dst[1] = v80;
        }
        else
        {
          HIBYTE(__dst[2]) = v79;
          v81 = __dst;
          if (!v79)
          {
LABEL_170:
            *((_BYTE *)v80 + (_QWORD)v81) = 0;
            memset(&buf, 0, sizeof(buf));
            v107 = -1431655766;
            if (prop::bbtrace::get((char *)__dst, (uint64_t)&buf))
            {
              LODWORD(__p) = -1431655766;
              if (util::convert<int>(&buf, &__p, 0))
                v107 = (int)__p;
              else
                v107 = -1431655766;
            }
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf.__r_.__value_.__l.__data_);
            if (SHIBYTE(__dst[2]) < 0)
              operator delete(__dst[0]);
            v108 = (const void *)*MEMORY[0x1E0CFB2D8];
            v109 = strlen((const char *)*MEMORY[0x1E0CFB2D8]);
            if (v109 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v110 = (void *)v109;
            __s = (char *)v67;
            if (v109 >= 0x17)
            {
              v112 = (v109 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v109 | 7) != 0x17)
                v112 = v109 | 7;
              v113 = v112 + 1;
              v111 = (void **)operator new(v112 + 1);
              __dst[2] = (void *)(v113 | 0x8000000000000000);
              __dst[0] = v111;
              __dst[1] = v110;
            }
            else
            {
              HIBYTE(__dst[2]) = v109;
              v111 = __dst;
              if (!v109)
              {
LABEL_186:
                *((_BYTE *)v110 + (_QWORD)v111) = 0;
                memset(&buf, 0, sizeof(buf));
                v114 = -1431655766;
                if (prop::bbtrace::get((char *)__dst, (uint64_t)&buf))
                {
                  LODWORD(__p) = -1431655766;
                  if (util::convert<int>(&buf, &__p, 0))
                    v114 = (int)__p;
                  else
                    v114 = -1431655766;
                }
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(buf.__r_.__value_.__l.__data_);
                if (SHIBYTE(__dst[2]) < 0)
                  operator delete(__dst[0]);
                v115 = (const void *)*MEMORY[0x1E0D01AE0];
                v116 = strlen((const char *)*MEMORY[0x1E0D01AE0]);
                if (v116 > 0x7FFFFFFFFFFFFFF7)
                  std::string::__throw_length_error[abi:ne180100]();
                v117 = (void *)v116;
                if (v116 >= 0x17)
                {
                  v119 = (v116 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v116 | 7) != 0x17)
                    v119 = v116 | 7;
                  v120 = v119 + 1;
                  v118 = (void **)operator new(v119 + 1);
                  __dst[2] = (void *)(v120 | 0x8000000000000000);
                  __dst[0] = v118;
                  __dst[1] = v117;
                }
                else
                {
                  HIBYTE(__dst[2]) = v116;
                  v118 = __dst;
                  if (!v116)
                  {
LABEL_202:
                    *((_BYTE *)v117 + (_QWORD)v118) = 0;
                    memset(&buf, 0, sizeof(buf));
                    if (prop::bbtrace::get((char *)__dst, (uint64_t)&buf))
                    {
                      LODWORD(__p) = -1431655766;
                      if (util::convert<int>(&buf, &__p, 0))
                        v121 = (int)__p;
                      else
                        v121 = 0;
                    }
                    else
                    {
                      v121 = 0;
                    }
                    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(buf.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
                      {
LABEL_209:
                        if (v107 != 4)
                          goto LABEL_321;
LABEL_317:
                        if (v114 == 1)
                        {
                          v165 = *(NSObject **)(v5 + 88);
                          if (os_log_type_enabled(v165, OS_LOG_TYPE_DEFAULT))
                          {
                            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                            _os_log_impl(&dword_1BF335000, v165, OS_LOG_TYPE_DEFAULT, "#N Hard reset detected while Cellular Logging is running. Cellular Logging will be paused.", (uint8_t *)&buf, 2u);
                          }
                          v166 = xpc_null_create();
                          v167 = *MEMORY[0x1E0CF1190];
                          v318 = v166;
                          v317 = 0;
                          v316[1] = 0;
                          v316[0] = 0;
                          TraceManager::runOnHelper_sync((_QWORD *)v5, (const char *)0xA, v167, 0x1388u, 1, &v318, &v317, v316);
                          xpc_release(v318);
                          v318 = 0;
LABEL_324:
                          memset(&buf, 170, sizeof(buf));
                          v168 = (const char *)*MEMORY[0x1E0CFB8D0];
                          memset(__dst, 0, sizeof(__dst));
                          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, v168);
                          ctu::cf::map_adapter::getString();
                          MEMORY[0x1C3B8936C](&__p);
                          if (SHIBYTE(__dst[2]) < 0)
                            operator delete(__dst[0]);
                          memset(__dst, 170, sizeof(__dst));
                          v169 = (const void *)*MEMORY[0x1E0CFB250];
                          v170 = strlen((const char *)*MEMORY[0x1E0CFB250]);
                          if (v170 > 0x7FFFFFFFFFFFFFF7)
                            std::string::__throw_length_error[abi:ne180100]();
                          v171 = v170;
                          if (v170 >= 0x17)
                          {
                            v173 = (v170 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v170 | 7) != 0x17)
                              v173 = v170 | 7;
                            v174 = v173 + 1;
                            p_p = operator new(v173 + 1);
                            v315 = v174 | 0x8000000000000000;
                            __p = p_p;
                            v314 = v171;
                          }
                          else
                          {
                            HIBYTE(v315) = v170;
                            p_p = &__p;
                            if (!v170)
                            {
LABEL_334:
                              v175 = (const char *)*MEMORY[0x1E0CFB370];
                              *((_BYTE *)&v171->isa + (_QWORD)p_p) = 0;
                              ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v327, v175);
                              ctu::cf::map_adapter::getString();
                              MEMORY[0x1C3B8936C](&v327);
                              if (SHIBYTE(v315) < 0)
                                operator delete(__p);
                              v176 = xpc_dictionary_create(0, 0, 0);
                              if (v176 || (v176 = xpc_null_create()) != 0)
                              {
                                if (MEMORY[0x1C3B8A86C](v176) == MEMORY[0x1E0C812F8])
                                {
                                  xpc_retain(v176);
                                  v177 = v176;
                                }
                                else
                                {
                                  v177 = xpc_null_create();
                                }
                              }
                              else
                              {
                                v177 = xpc_null_create();
                                v176 = 0;
                              }
                              xpc_release(v176);
                              if (SHIBYTE(v321[2]) >= 0)
                                v196 = (const char *)v321;
                              else
                                v196 = (const char *)v321[0];
                              v197 = xpc_string_create(v196);
                              if (!v197)
                                v197 = xpc_null_create();
                              xpc_dictionary_set_value(v177, v38, v197);
                              v198 = xpc_null_create();
                              xpc_release(v197);
                              xpc_release(v198);
                              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                v199 = &buf;
                              else
                                v199 = (std::string *)buf.__r_.__value_.__r.__words[0];
                              v200 = xpc_string_create((const char *)v199);
                              if (!v200)
                                v200 = xpc_null_create();
                              xpc_dictionary_set_value(v177, v168, v200);
                              v201 = xpc_null_create();
                              xpc_release(v200);
                              xpc_release(v201);
                              if ((v320.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                v202 = &v320;
                              else
                                v202 = (std::string *)v320.__r_.__value_.__r.__words[0];
                              v203 = xpc_string_create((const char *)v202);
                              if (!v203)
                                v203 = xpc_null_create();
                              xpc_dictionary_set_value(v177, (const char *)*MEMORY[0x1E0CFB930], v203);
                              v204 = xpc_null_create();
                              xpc_release(v203);
                              xpc_release(v204);
                              if (SHIBYTE(__dst[2]) >= 0)
                                v205 = (const char *)__dst;
                              else
                                v205 = (const char *)__dst[0];
                              v206 = xpc_string_create(v205);
                              if (!v206)
                                v206 = xpc_null_create();
                              xpc_dictionary_set_value(v177, v175, v206);
                              v207 = xpc_null_create();
                              xpc_release(v206);
                              xpc_release(v207);
                              v208 = xpc_string_create((const char *)*MEMORY[0x1E0CFBF40]);
                              if (!v208)
                                v208 = xpc_null_create();
                              xpc_dictionary_set_value(v177, (const char *)*MEMORY[0x1E0CFB0F8], v208);
                              v209 = xpc_null_create();
                              xpc_release(v208);
                              xpc_release(v209);
                              v210 = xpc_int64_create(Int);
                              if (!v210)
                                v210 = xpc_null_create();
                              xpc_dictionary_set_value(v177, v65, v210);
                              v211 = xpc_null_create();
                              xpc_release(v210);
                              xpc_release(v211);
                              v212 = (const char *)*MEMORY[0x1E0CFB780];
                              ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, (const char *)*MEMORY[0x1E0CFB780]);
                              Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v323, (const __CFString *)__p);
                              MEMORY[0x1C3B8936C](&__p);
                              v214 = xpc_BOOL_create(Bool);
                              if (!v214)
                                v214 = xpc_null_create();
                              xpc_dictionary_set_value(v177, v212, v214);
                              v215 = xpc_null_create();
                              xpc_release(v214);
                              xpc_release(v215);
                              v216 = (const char *)*MEMORY[0x1E0CFB798];
                              ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, (const char *)*MEMORY[0x1E0CFB798]);
                              v217 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v323, (const __CFString *)__p);
                              MEMORY[0x1C3B8936C](&__p);
                              v218 = xpc_BOOL_create(v217);
                              if (!v218)
                                v218 = xpc_null_create();
                              xpc_dictionary_set_value(v177, v216, v218);
                              v219 = xpc_null_create();
                              xpc_release(v218);
                              xpc_release(v219);
                              v220 = (const char *)*MEMORY[0x1E0CFB790];
                              ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, (const char *)*MEMORY[0x1E0CFB790]);
                              v221 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v323, (const __CFString *)__p);
                              MEMORY[0x1C3B8936C](&__p);
                              v222 = xpc_BOOL_create(v221);
                              if (!v222)
                                v222 = xpc_null_create();
                              xpc_dictionary_set_value(v177, v220, v222);
                              v223 = xpc_null_create();
                              xpc_release(v222);
                              xpc_release(v223);
                              v224 = *(std::__shared_weak_count **)(v5 + 128);
                              if (!v224
                                || (v225 = *(_QWORD *)(v5 + 120), (v226 = std::__shared_weak_count::lock(v224)) == 0))
                              {
                                std::__throw_bad_weak_ptr[abi:ne180100]();
                              }
                              v227 = v226;
                              p_shared_weak_owners = (unint64_t *)&v226->__shared_weak_owners_;
                              do
                                v229 = __ldxr(p_shared_weak_owners);
                              while (__stxr(v229 + 1, p_shared_weak_owners));
                              v230 = (unint64_t *)&v226->__shared_owners_;
                              do
                                v231 = __ldaxr(v230);
                              while (__stlxr(v231 - 1, v230));
                              if (!v231)
                              {
                                ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
                                std::__shared_weak_count::__release_weak(v227);
                              }
                              v232 = (const void *)*MEMORY[0x1E0CFB5F0];
                              v233 = strlen((const char *)*MEMORY[0x1E0CFB5F0]);
                              if (v233 > 0x7FFFFFFFFFFFFFF7)
                                std::string::__throw_length_error[abi:ne180100]();
                              v234 = v233;
                              if (v233 >= 0x17)
                              {
                                v236 = (v233 & 0xFFFFFFFFFFFFFFF8) + 8;
                                if ((v233 | 7) != 0x17)
                                  v236 = v233 | 7;
                                v237 = v236 + 1;
                                v235 = operator new(v236 + 1);
                                v315 = v237 | 0x8000000000000000;
                                __p = v235;
                                v314 = v234;
                              }
                              else
                              {
                                HIBYTE(v315) = v233;
                                v235 = &__p;
                                if (!v233)
                                {
LABEL_430:
                                  *((_BYTE *)&v234->isa + (_QWORD)v235) = 0;
                                  v312 = v177;
                                  if (v177)
                                    xpc_retain(v177);
                                  else
                                    v312 = xpc_null_create();
                                  v307[0] = MEMORY[0x1E0C809B0];
                                  v307[1] = 1174405120;
                                  v307[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_42;
                                  v307[3] = &__block_descriptor_tmp_44_2;
                                  v239 = *(abm::client::Event **)a2;
                                  v238 = *(std::__shared_weak_count **)(a2 + 8);
                                  v307[4] = v5;
                                  v307[5] = v239;
                                  v308 = v238;
                                  if (v238)
                                  {
                                    v240 = (unint64_t *)&v238->__shared_owners_;
                                    do
                                      v241 = __ldxr(v240);
                                    while (__stxr(v241 + 1, v240));
                                  }
                                  v309 = v225;
                                  v310 = v227;
                                  do
                                    v242 = __ldxr(p_shared_weak_owners);
                                  while (__stxr(v242 + 1, p_shared_weak_owners));
                                  v243 = _Block_copy(v307);
                                  v311 = v243;
                                  Service::runCommand(v5, (uint64_t)&__p, &v312, &v311);
                                  if (v243)
                                    _Block_release(v243);
                                  xpc_release(v312);
                                  v312 = 0;
                                  if (SHIBYTE(v315) < 0)
                                    operator delete(__p);
                                  v244 = strlen(__s);
                                  if (v244 > 0x7FFFFFFFFFFFFFF7)
                                    std::string::__throw_length_error[abi:ne180100]();
                                  v245 = (void *)v244;
                                  if (v244 >= 0x17)
                                  {
                                    v248 = (v244 & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v244 | 7) != 0x17)
                                      v248 = v244 | 7;
                                    v249 = v248 + 1;
                                    v250 = (void **)operator new(v248 + 1);
                                    v247 = __s;
                                    v246 = v250;
                                    v306 = v249 | 0x8000000000000000;
                                    v305[0] = v250;
                                    v305[1] = v245;
                                  }
                                  else
                                  {
                                    HIBYTE(v306) = v244;
                                    v246 = v305;
                                    v247 = __s;
                                    if (!v244)
                                    {
LABEL_450:
                                      *((_BYTE *)v245 + (_QWORD)v246) = 0;
                                      if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
                                        std::string::__init_copy_ctor_external(&v304, v320.__r_.__value_.__l.__data_, v320.__r_.__value_.__l.__size_);
                                      else
                                        v304 = v320;
                                      TraceManager::submitTraceMetric_sync(v5, (const char *)v305, (const char *)&v304);
                                      if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
                                      {
                                        operator delete(v304.__r_.__value_.__l.__data_);
                                        if ((SHIBYTE(v306) & 0x80000000) == 0)
                                        {
LABEL_455:
                                          v251 = v310;
                                          if (!v310)
                                            goto LABEL_457;
                                          goto LABEL_456;
                                        }
                                      }
                                      else if ((SHIBYTE(v306) & 0x80000000) == 0)
                                      {
                                        goto LABEL_455;
                                      }
                                      operator delete(v305[0]);
                                      v251 = v310;
                                      if (!v310)
                                      {
LABEL_457:
                                        v252 = v308;
                                        if (v308)
                                        {
                                          v253 = (unint64_t *)&v308->__shared_owners_;
                                          do
                                            v254 = __ldaxr(v253);
                                          while (__stlxr(v254 - 1, v253));
                                          if (!v254)
                                          {
                                            ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
                                            std::__shared_weak_count::__release_weak(v252);
                                          }
                                        }
                                        std::__shared_weak_count::__release_weak(v227);
                                        xpc_release(v177);
                                        if (SHIBYTE(__dst[2]) < 0)
                                          operator delete(__dst[0]);
                                        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(buf.__r_.__value_.__l.__data_);
                                        goto LABEL_466;
                                      }
LABEL_456:
                                      std::__shared_weak_count::__release_weak(v251);
                                      goto LABEL_457;
                                    }
                                  }
                                  memmove(v246, v247, (size_t)v245);
                                  goto LABEL_450;
                                }
                              }
                              memmove(v235, v232, (size_t)v234);
                              goto LABEL_430;
                            }
                          }
                          memmove(p_p, v169, (size_t)v171);
                          goto LABEL_334;
                        }
LABEL_321:
                        if (!(v114 | v107) && v121 == 3)
                          notify_post("com.apple.cellularlogging.bbreset");
                        goto LABEL_324;
                      }
                    }
                    else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
                    {
                      goto LABEL_209;
                    }
                    operator delete(__dst[0]);
                    if (v107 != 4)
                      goto LABEL_321;
                    goto LABEL_317;
                  }
                }
                memmove(v118, v115, (size_t)v117);
                goto LABEL_202;
              }
            }
            memmove(v111, v108, (size_t)v110);
            goto LABEL_186;
          }
        }
        memmove(v81, v78, (size_t)v80);
        goto LABEL_170;
      }
    }
    memmove(p_buf, v39, v41);
    goto LABEL_92;
  }
LABEL_473:
  if (v9)
    CFRelease(v9);
  v7 = v326;
  if (v326)
    goto LABEL_476;
}

void sub_1BF4D5250(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF4D58DC()
{
  JUMPOUT(0x1BF4D58C4);
}

void sub_1BF4D58E4()
{
  JUMPOUT(0x1BF4D58CCLL);
}

void prop::bbtrace::get<diag::config::Mode>(char *a1, int *a2)
{
  std::string __p;
  int v4;

  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get(a1, (uint64_t)&__p))
  {
    v4 = -1431655766;
    if (util::convert<int>(&__p, &v4, 0))
      *a2 = v4;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF4D5968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void prop::bbtrace::get<abm::traceOwnership>(char *a1, int *a2)
{
  std::string __p;
  int v4;

  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get(a1, (uint64_t)&__p))
  {
    v4 = -1431655766;
    if (util::convert<int>(&__p, &v4, 0))
      *a2 = v4;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF4D5A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL TraceManager::isCellullarLoggingStreamingMode(uint64_t a1, int a2, int a3, int a4)
{
  return !(a3 | a2) && a4 == 3;
}

uint64_t TraceManager::postBBResetNotification(TraceManager *this)
{
  return notify_post("com.apple.cellularlogging.bbreset");
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_42(_QWORD *a1, int a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  xpc_object_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  _QWORD *v22;
  xpc_object_t v23;
  unint64_t *v24;
  unint64_t v25;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *p_shared_owners;
  unint64_t v34;

  v4 = (std::__shared_weak_count *)a1[8];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[7];
      if (!v10)
      {
LABEL_29:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v34 = __ldaxr(p_shared_owners);
        while (__stlxr(v34 - 1, p_shared_owners));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v11 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      v13 = *a3;
      if (*a3)
      {
        xpc_retain(*a3);
        v15 = a1[5];
        v14 = (std::__shared_weak_count *)a1[6];
        if (!v14)
        {
LABEL_12:
          v18 = (std::__shared_weak_count *)v7[16];
          if (!v18 || (v19 = v7[15], (v20 = std::__shared_weak_count::lock(v18)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v21 = v20;
          v22 = operator new(0x38uLL);
          *v22 = v7;
          v22[1] = v10;
          v22[2] = v9;
          *((_DWORD *)v22 + 6) = a2;
          v22[4] = v13;
          v23 = xpc_null_create();
          v22[5] = v15;
          v22[6] = v14;
          if (v14)
          {
            v24 = (unint64_t *)&v14->__shared_owners_;
            do
              v25 = __ldxr(v24);
            while (__stxr(v25 + 1, v24));
          }
          v26 = v7[17];
          v27 = (unint64_t *)&v21->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
          v29 = operator new(0x18uLL);
          *v29 = v22;
          v29[1] = v19;
          v29[2] = v21;
          dispatch_async_f(v26, v29, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI12TraceManagerE15execute_wrappedIZZZNS3_25finishInitialization_syncEvEUb2_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
          do
            v30 = __ldaxr(v27);
          while (__stlxr(v30 - 1, v27));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
          if (v14)
          {
            v31 = (unint64_t *)&v14->__shared_owners_;
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
          }
          xpc_release(v23);
          goto LABEL_29;
        }
      }
      else
      {
        v13 = xpc_null_create();
        v15 = a1[5];
        v14 = (std::__shared_weak_count *)a1[6];
        if (!v14)
          goto LABEL_12;
      }
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      goto LABEL_12;
    }
  }
}

_QWORD *__copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrIN3abm6client5EventEEE56c37_ZTSNSt3__18weak_ptrI12TraceManagerEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[8];
  result[7] = a2[7];
  result[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrIN3abm6client5EventEEE56c37_ZTSNSt3__18weak_ptrI12TraceManagerEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_45(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1BF335000, v1, OS_LOG_TYPE_DEFAULT, "#I Abort complete", v2, 2u);
  }
}

_QWORD *__copy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrI12TraceManagerEE56c45_ZTSNSt3__110shared_ptrIN3abm6client5EventEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[8];
  result[7] = a2[7];
  result[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrI12TraceManagerEE56c45_ZTSNSt3__110shared_ptrIN3abm6client5EventEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_47(_QWORD *a1)
{
  _QWORD *v2;
  const void *v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  NSObject *v9;
  xpc_object_t object;

  v2 = (_QWORD *)a1[4];
  v9 = 0;
  object = xpc_null_create();
  v3 = (const void *)a1[5];
  if (v3)
  {
    v4 = _Block_copy(v3);
    v5 = *MEMORY[0x1E0CF1090];
    v6 = a1[6];
    v7 = v4;
    v8 = v6;
    if (!v6)
      goto LABEL_4;
    goto LABEL_3;
  }
  v4 = 0;
  v5 = *MEMORY[0x1E0CF1090];
  v6 = a1[6];
  v7 = 0;
  v8 = v6;
  if (v6)
LABEL_3:
    dispatch_retain(v6);
LABEL_4:
  TraceManager::runOnHelper_sync(v2, (const char *)9, v5, 0x1388u, 0, &object, &v9, &v7);
  if (v6)
    dispatch_release(v6);
  if (v4)
    _Block_release(v4);
  xpc_release(object);
}

void sub_1BF4D5F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  xpc_release(object);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c79_ZTSN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC6ResultEN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 40);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_40c79_ZTSN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC6ResultEN3xpc4dictEEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_49(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1BF335000, v1, OS_LOG_TYPE_DEFAULT, "#I Prepare complete", v2, 2u);
  }
}

void TraceManager::updateBasebandFWInfo(TraceManager *this)
{
  xpc_object_t v2;
  xpc_object_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const void *v12;
  size_t v13;
  void *v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  _QWORD v20[6];
  std::__shared_weak_count *v21;
  const void *v22;
  xpc_object_t object;
  void *__dst[2];
  unint64_t v25;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2 || (v2 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v2) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v2);
      v3 = v2;
    }
    else
    {
      v3 = xpc_null_create();
    }
  }
  else
  {
    v3 = xpc_null_create();
    v2 = 0;
  }
  xpc_release(v2);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v4 || (v5 = *((_QWORD *)this + 15), (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = (const void *)*MEMORY[0x1E0CFBDB0];
  v13 = strlen((const char *)*MEMORY[0x1E0CFBDB0]);
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v14 = (void *)v13;
  if (v13 >= 0x17)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    v15 = (void **)operator new(v16 + 1);
    __dst[1] = v14;
    v25 = v17 | 0x8000000000000000;
    __dst[0] = v15;
LABEL_23:
    memmove(v15, v12, (size_t)v14);
    *((_BYTE *)v14 + (_QWORD)v15) = 0;
    object = v3;
    if (v3)
      goto LABEL_19;
LABEL_24:
    object = xpc_null_create();
    goto LABEL_25;
  }
  HIBYTE(v25) = v13;
  v15 = __dst;
  if (v13)
    goto LABEL_23;
  LOBYTE(__dst[0]) = 0;
  object = v3;
  if (!v3)
    goto LABEL_24;
LABEL_19:
  xpc_retain(v3);
LABEL_25:
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 1174405120;
  v20[2] = ___ZN12TraceManager20updateBasebandFWInfoEv_block_invoke;
  v20[3] = &__block_descriptor_tmp_68_3;
  v20[4] = this;
  v20[5] = v5;
  v21 = v7;
  do
    v18 = __ldxr(p_shared_weak_owners);
  while (__stxr(v18 + 1, p_shared_weak_owners));
  v19 = _Block_copy(v20);
  v22 = v19;
  Service::runCommand((uint64_t)this, (uint64_t)__dst, &object, &v22);
  if (v19)
    _Block_release(v19);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(v25) < 0)
    operator delete(__dst[0]);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  std::__shared_weak_count::__release_weak(v7);
  xpc_release(v3);
}

void sub_1BF4D62A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, xpc_object_t object, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  std::__shared_weak_count *v24;
  const void *v25;

  if (v25)
    _Block_release(v25);
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  xpc_release(object);
  if (a23 < 0)
    operator delete(__p);
  std::__shared_weak_count::__release_weak(v24);
  xpc_release(v23);
  _Unwind_Resume(a1);
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_51(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1BF335000, v1, OS_LOG_TYPE_DEFAULT, "#I Start complete", v2, 2u);
  }
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_53(_QWORD *a1)
{
  _QWORD *v2;
  const void *v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  NSObject *v9;
  xpc_object_t object;

  v2 = (_QWORD *)a1[4];
  v9 = 0;
  object = xpc_null_create();
  v3 = (const void *)a1[5];
  if (v3)
  {
    v4 = _Block_copy(v3);
    v5 = *MEMORY[0x1E0CF11A0];
    v6 = a1[6];
    v7 = v4;
    v8 = v6;
    if (!v6)
      goto LABEL_4;
    goto LABEL_3;
  }
  v4 = 0;
  v5 = *MEMORY[0x1E0CF11A0];
  v6 = a1[6];
  v7 = 0;
  v8 = v6;
  if (v6)
LABEL_3:
    dispatch_retain(v6);
LABEL_4:
  TraceManager::runOnHelper_sync(v2, (const char *)0xA, v5, 0x1388u, 1, &object, &v9, &v7);
  if (v6)
    dispatch_release(v6);
  if (v4)
    _Block_release(v4);
  xpc_release(object);
}

void sub_1BF4D6458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_55(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1BF335000, v1, OS_LOG_TYPE_DEFAULT, "#I Abort complete", v2, 2u);
  }
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_57(_QWORD *a1)
{
  _QWORD *v2;
  const void *v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  NSObject *v9;
  xpc_object_t object;

  v2 = (_QWORD *)a1[4];
  v9 = 0;
  object = xpc_null_create();
  v3 = (const void *)a1[5];
  if (v3)
  {
    v4 = _Block_copy(v3);
    v5 = *MEMORY[0x1E0CF1090];
    v6 = a1[6];
    v7 = v4;
    v8 = v6;
    if (!v6)
      goto LABEL_4;
    goto LABEL_3;
  }
  v4 = 0;
  v5 = *MEMORY[0x1E0CF1090];
  v6 = a1[6];
  v7 = 0;
  v8 = v6;
  if (v6)
LABEL_3:
    dispatch_retain(v6);
LABEL_4:
  TraceManager::runOnHelper_sync(v2, (const char *)9, v5, 0x7D0u, 0, &object, &v9, &v7);
  if (v6)
    dispatch_release(v6);
  if (v4)
    _Block_release(v4);
  xpc_release(object);
}

void sub_1BF4D65B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_61(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  char *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  NSObject *v9;
  ctu *v10;
  NSObject *v11;
  uint64_t v12;
  ctu *v13;
  uint64_t (*v14)(uint64_t);
  std::__shared_weak_count *v15;
  abm::client::Event *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  const void *v21;
  void *v22;
  NSObject *v23;
  xpc_object_t v24;
  const char *v25;
  xpc_object_t v26;
  xpc_object_t v27;
  void *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  void *v38;
  NSObject *v39;
  NSObject *v40;
  xpc_object_t v41;
  xpc_object_t object;
  _QWORD aBlock[6];
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  __int128 __p;
  char v50;
  ctu *buf[4];

  buf[3] = *(ctu **)MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = (char *)a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  v48 = v6;
  if (!v6)
    return;
  v7 = v6;
  v8 = a1[5];
  v47 = v8;
  if (!v8)
  {
LABEL_57:
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  v9 = *((_QWORD *)v5 + 11);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    abm::client::Event::name(*(abm::client::Event **)a2);
    v10 = v50 >= 0 ? (ctu *)&__p : (ctu *)__p;
    LODWORD(buf[0]) = 136315138;
    *(ctu **)((char *)buf + 4) = v10;
    _os_log_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEFAULT, "#I Received event %s", (uint8_t *)buf, 0xCu);
    if (v50 < 0)
      operator delete((void *)__p);
  }
  if ((*(unsigned int (**)(char *))(*(_QWORD *)v5 + 88))(v5))
  {
    v11 = *((_QWORD *)v5 + 11);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *MEMORY[0x1E0CFB9A8];
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = v12;
      _os_log_impl(&dword_1BF335000, v11, OS_LOG_TYPE_DEFAULT, "#I Server going down. Skipping event %s", (uint8_t *)&__p, 0xCu);
    }
    goto LABEL_57;
  }
  buf[0] = (ctu *)0xAAAAAAAAAAAAAAAALL;
  abm::client::Event::getData(*(abm::client::Event **)a2);
  v13 = buf[0];
  v14 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!buf[0])
    v14 = 0;
  if (v14)
  {
    *(_QWORD *)&__p = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&__p + 1) = 0xAAAAAAAAAAAAAAAALL;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_62;
    aBlock[3] = &__block_descriptor_tmp_63_2;
    v16 = *(abm::client::Event **)a2;
    v15 = *(std::__shared_weak_count **)(a2 + 8);
    aBlock[4] = v5;
    aBlock[5] = v16;
    v44 = v15;
    if (v15)
    {
      v17 = (unint64_t *)&v15->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v45 = v8;
    v46 = v7;
    v19 = (unint64_t *)&v7->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v22 = _Block_copy(aBlock);
    v23 = *((_QWORD *)v5 + 17);
    if (v23)
      dispatch_retain(*((dispatch_object_t *)v5 + 17));
    *(_QWORD *)&__p = v22;
    *((_QWORD *)&__p + 1) = v23;
    ctu::cf_to_xpc(buf[0], v21);
    v24 = object;
    if (object && MEMORY[0x1C3B8A86C](object) == MEMORY[0x1E0C812F8])
      xpc_retain(object);
    else
      v24 = xpc_null_create();
    xpc_release(object);
    v25 = v5 + 168;
    if (v5[191] < 0)
      v25 = *(const char **)v25;
    v26 = xpc_string_create(v25);
    if (!v26)
      v26 = xpc_null_create();
    xpc_dictionary_set_value(v24, (const char *)*MEMORY[0x1E0CFB330], v26);
    v27 = xpc_null_create();
    xpc_release(v26);
    xpc_release(v27);
    v41 = v24;
    if (v24)
    {
      xpc_retain(v24);
      v40 = 0;
      if (v22)
        goto LABEL_33;
    }
    else
    {
      v40 = 0;
      v41 = xpc_null_create();
      if (v22)
      {
LABEL_33:
        v28 = _Block_copy(v22);
        v29 = *MEMORY[0x1E0CF10A8];
        v38 = v28;
        v39 = v23;
        if (!v23)
        {
LABEL_35:
          TraceManager::runOnHelper_sync(v5, (const char *)9, v29, 0x1388u, 1, &v41, &v40, &v38);
          if (v23)
            dispatch_release(v23);
          if (v28)
            _Block_release(v28);
          xpc_release(v41);
          v41 = 0;
          xpc_release(v24);
          if (v23)
            dispatch_release(v23);
          if (v22)
            _Block_release(v22);
          v30 = v46;
          if (v46)
          {
            v31 = (unint64_t *)&v46->__shared_owners_;
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
          v33 = v44;
          if (v44)
          {
            v34 = (unint64_t *)&v44->__shared_owners_;
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          v13 = buf[0];
          goto LABEL_54;
        }
LABEL_34:
        dispatch_retain(v23);
        goto LABEL_35;
      }
    }
    v28 = 0;
    v29 = *MEMORY[0x1E0CF10A8];
    v38 = 0;
    v39 = v23;
    if (!v23)
      goto LABEL_35;
    goto LABEL_34;
  }
LABEL_54:
  if (v13)
    CFRelease(v13);
  v7 = v48;
  if (v48)
    goto LABEL_57;
}

void sub_1BF4D6A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_62(uint64_t a1, _DWORD *a2)
{
  NSObject *v3;
  _BOOL4 v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *a2 == 0;
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Snapshot : Snapshot complete. Success = %d", (uint8_t *)v5, 8u);
  }
}

_QWORD *__copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrIN3abm6client5EventEEE56c40_ZTSNSt3__110shared_ptrI12TraceManagerEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[8];
  result[7] = a2[7];
  result[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrIN3abm6client5EventEEE56c40_ZTSNSt3__110shared_ptrI12TraceManagerEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_65(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  uint64_t v13;
  void *v14[2];
  NSObject *v15;
  xpc_object_t object;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (v8)
      {
        if (!v6)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6)
          return;
      }
      v9 = xpc_dictionary_create(0, 0, 0);
      if (v9 || (v9 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8A86C](v9) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v9);
          v10 = v9;
        }
        else
        {
          v10 = xpc_null_create();
        }
      }
      else
      {
        v10 = xpc_null_create();
        v9 = 0;
      }
      xpc_release(v9);
      v11 = xpc_string_create("Trace state for sysdiagnose");
      if (!v11)
        v11 = xpc_null_create();
      xpc_dictionary_set_value(v10, (const char *)*MEMORY[0x1E0CF10C8], v11);
      v12 = xpc_null_create();
      xpc_release(v11);
      xpc_release(v12);
      object = v10;
      if (v10)
        xpc_retain(v10);
      else
        object = xpc_null_create();
      v13 = *MEMORY[0x1E0CF1078];
      v14[1] = 0;
      v15 = 0;
      v14[0] = 0;
      TraceManager::runOnHelper_sync(v3, (const char *)9, v13, 0x1388u, 1, &object, &v15, v14);
      xpc_release(object);
      object = 0;
      xpc_release(v10);
    }
  }
}

void sub_1BF4D6E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  void *v12;

  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  xpc_release(object);
  object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void TraceManager::sleep(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[17];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TraceManager>::execute_wrapped<TraceManager::sleep(dispatch::group_session)::$_0>(TraceManager::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TraceManager::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TraceManager::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void TraceManager::wake(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[17];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TraceManager>::execute_wrapped<TraceManager::wake(dispatch::group_session)::$_0>(TraceManager::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TraceManager::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TraceManager::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN12TraceManager20updateBasebandFWInfoEv_block_invoke(_QWORD *a1, int a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t value;
  const char *v14;
  void **v15;
  xpc_object_t object;
  __int128 v17;
  uint64_t v18;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (v12)
      {
        if (a2)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
        if (a2)
          return;
      }
      if (v10)
      {
        value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFB330]);
        object = value;
        if (value)
          xpc_retain(value);
        else
          object = xpc_null_create();
        xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v14);
        v15 = (void **)(v7 + 168);
        if (*(char *)(v7 + 191) < 0)
          operator delete(*v15);
        *(_OWORD *)v15 = v17;
        *(_QWORD *)(v7 + 184) = v18;
        HIBYTE(v18) = 0;
        LOBYTE(v17) = 0;
        xpc_release(object);
      }
    }
  }
}

void sub_1BF4D7184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZN12TraceManager20initTraceHelper_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  const char *v10;
  int v11;
  size_t v12;
  const void *v13;
  const char *v14;
  NSObject *v15;
  const char *v16;
  const char *v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  uint64_t v22;
  void *v23[2];
  NSObject *v24;
  xpc_object_t object;
  uint8_t buf[16];

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (v8)
      {
        if (!v6)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6)
          return;
      }
      v9 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEFAULT, "#I Wireless helper server has started", buf, 2u);
      }
      v10 = (const char *)*MEMORY[0x1E0CFB980];
      v11 = *(char *)(v3 + 215);
      if (v11 >= 0)
        v12 = *(unsigned __int8 *)(v3 + 215);
      else
        v12 = *(_QWORD *)(v3 + 200);
      if (v12 == strlen((const char *)*MEMORY[0x1E0CFB980])
        && (v11 >= 0 ? (v13 = (const void *)(v3 + 192)) : (v13 = *(const void **)(v3 + 192)),
            !memcmp(v13, v10, v12)
         && (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB088], v14)
          || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFC248], v16)
          || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB118], v17))))
      {
        v18 = xpc_dictionary_create(0, 0, 0);
        if (v18 || (v18 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8A86C](v18) == MEMORY[0x1E0C812F8])
          {
            xpc_retain(v18);
            v19 = v18;
          }
          else
          {
            v19 = xpc_null_create();
          }
        }
        else
        {
          v19 = xpc_null_create();
          v18 = 0;
        }
        xpc_release(v18);
        v20 = xpc_string_create(v10);
        if (!v20)
          v20 = xpc_null_create();
        xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E0CFB530], v20);
        v21 = xpc_null_create();
        xpc_release(v20);
        xpc_release(v21);
        object = v19;
        if (v19)
          xpc_retain(v19);
        else
          object = xpc_null_create();
        v22 = *MEMORY[0x1E0CF10A0];
        v23[1] = 0;
        v24 = 0;
        v23[0] = 0;
        TraceManager::runOnHelper_sync((_QWORD *)v3, (const char *)9, v22, 0x1388u, 0, &object, &v24, v23);
        xpc_release(object);
        object = 0;
        xpc_release(v19);
      }
      else
      {
        v15 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BF335000, v15, OS_LOG_TYPE_DEFAULT, "#I Skipping trace start", buf, 2u);
        }
      }
    }
  }
}

void sub_1BF4D7464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  void *v12;

  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  xpc_release(object);
  object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void ___ZN12TraceManager16runOnHelper_syncEN3abm6helper6TaskIDEPKcjbN3xpc4dictEN8dispatch13group_sessionENS7_8callbackIU13block_pointerFvN12TelephonyXPC6ResultES6_EEE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (v6)
      {
        v9 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          v10 = abm::helper::asString();
          v11 = a1[10];
          v12 = 136315394;
          v13 = v10;
          v14 = 2080;
          v15 = v11;
          _os_log_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEFAULT, "#I %s:%s: complete", (uint8_t *)&v12, 0x16u);
        }
      }
    }
  }
}

void __copy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE56c30_ZTSN8dispatch13group_sessionE64c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a2[7];
  a1[7] = v7;
  if (v7)
  {
    dispatch_retain(v7);
    v8 = a1[7];
    if (v8)
      dispatch_group_enter(v8);
  }
  v9 = a2[9];
  a1[8] = a2[8];
  a1[9] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE56c30_ZTSN8dispatch13group_sessionE64c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;

  v2 = (std::__shared_weak_count *)a1[9];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = a1[7];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = a1[7];
    if (!v5)
      goto LABEL_9;
  }
  dispatch_group_leave(v5);
  v6 = a1[7];
  if (v6)
    dispatch_release(v6);
LABEL_9:
  v7 = (std::__shared_weak_count *)a1[6];
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

uint64_t ctu::Loggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E790A470;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E790A470;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::Loggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF4D78FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF4D7918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<TraceManager>::shared_ptr[abi:ne180100]<TraceManager,std::shared_ptr<TraceManager> ctu::SharedSynchronizable<TraceManager>::make_shared_ptr<TraceManager>(TraceManager*)::{lambda(TraceManager*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E790A4B0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF4D7A34(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<TraceManager> ctu::SharedSynchronizable<TraceManager>::make_shared_ptr<TraceManager>(TraceManager*)::{lambda(TraceManager*)#1}::operator() const(TraceManager*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF4D7A54(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<TraceManager *,std::shared_ptr<TraceManager> ctu::SharedSynchronizable<TraceManager>::make_shared_ptr<TraceManager>(TraceManager*)::{lambda(TraceManager *)#1},std::allocator<TraceManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<TraceManager *,std::shared_ptr<TraceManager> ctu::SharedSynchronizable<TraceManager>::make_shared_ptr<TraceManager>(TraceManager*)::{lambda(TraceManager *)#1},std::allocator<TraceManager>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<TraceManager> ctu::SharedSynchronizable<TraceManager>::make_shared_ptr<TraceManager>(TraceManager*)::{lambda(TraceManager*)#1}::operator() const(TraceManager*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<TraceManager *,std::shared_ptr<TraceManager> ctu::SharedSynchronizable<TraceManager>::make_shared_ptr<TraceManager>(TraceManager*)::{lambda(TraceManager *)#1},std::allocator<TraceManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI12TraceManagerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI12TraceManagerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT"
                                "_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI12TraceManagerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI12TraceManagerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<TraceManager> ctu::SharedSynchronizable<TraceManager>::make_shared_ptr<TraceManager>(TraceManager*)::{lambda(TraceManager*)#1}::operator() const(TraceManager*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedLoggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E790A470;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void std::__shared_ptr_pointer<BBLogTracker *,std::shared_ptr<BBLogTracker>::__shared_ptr_default_delete<BBLogTracker,BBLogTracker>,std::allocator<BBLogTracker>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<BBLogTracker *,std::shared_ptr<BBLogTracker>::__shared_ptr_default_delete<BBLogTracker,BBLogTracker>,std::allocator<BBLogTracker>>::__on_zero_shared(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 24);
  if (v1)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(v1[1]);
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<BBLogTracker *,std::shared_ptr<BBLogTracker>::__shared_ptr_default_delete<BBLogTracker,BBLogTracker>,std::allocator<BBLogTracker>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF546E92)
    return a1 + 24;
  if (((v3 & 0x80000001BF546E92 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF546E92))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF546E92 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void ___ZN3ctu20SharedSynchronizableI12TraceManagerE13connect_eventIN5boost8signals26signalIFvNS_2cf11CFSharedRefIK14__CFDictionaryEEENS5_19optional_last_valueIvEEiNSt3__14lessIiEENS4_8functionISC_EENSI_IFvRKNS5_10connectionESB_EEENS5_5mutexEEES1_vJSB_EEEDTcl7connectfp_cvNSF_10shared_ptrIS1_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSV_SX_E_block_invoke(_QWORD *a1, const void **a2)
{
  uint64_t v2;
  void (*v3)(_QWORD *, CFTypeRef *);
  _QWORD *v4;
  const void *v5;
  CFTypeRef cf;

  v3 = (void (*)(_QWORD *, CFTypeRef *))a1[5];
  v2 = a1[6];
  v4 = (_QWORD *)(a1[4] + (v2 >> 1) - 120);
  if ((v2 & 1) != 0)
    v3 = *(void (**)(_QWORD *, CFTypeRef *))(*v4 + v3);
  v5 = *a2;
  cf = v5;
  if (v5)
    CFRetain(v5);
  v3(v4, &cf);
  if (cf)
    CFRelease(cf);
}

void sub_1BF4D7CFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~slot(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 32, a1 + 32, 2);
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*(_QWORD *)a1)
  {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)a1, *(_QWORD *)a1);
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot(uint64_t a1)
{
  const void *v2;

  dispatch_release(*(dispatch_object_t *)a1);
  v2 = *(const void **)(a1 + 8);
  if (v2)
    _Block_release(v2);
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy((_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  _QWORD *v1;

  v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>::~connection_body(a1);
  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  __int128 v2;
  pthread_mutex_t *v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int i;
  unsigned int v10;
  uint64_t v11;
  char v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  char *v22;
  char *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v32;
  _OWORD v33[10];
  unint64_t v34;
  void *__p;
  uint64_t v36;
  pthread_mutex_t *v37;
  _QWORD v38[4];

  v38[3] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[8] = v2;
  v33[9] = v2;
  v33[6] = v2;
  v33[7] = v2;
  v33[4] = v2;
  v33[5] = v2;
  v33[2] = v2;
  v33[3] = v2;
  v33[0] = v2;
  v33[1] = v2;
  v3 = *(pthread_mutex_t **)(a1 + 48);
  v34 = 10;
  __p = v33;
  v36 = 0;
  v37 = v3;
  pthread_mutex_lock(v3);
  v4 = *(uint64_t **)(a1 + 32);
  if (!v4)
    goto LABEL_40;
  v5 = *v4;
  if (*v4 == v4[1])
    goto LABEL_40;
  do
  {
    memset(v38, 170, 24);
    v6 = *(_DWORD *)v5 ^ (*(int *)v5 >> 31);
    if (v6 == 2)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v5 + 8) + 16))(&v32);
      v38[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
      LODWORD(v38[0]) = 1;
      if (v32)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
          goto LABEL_26;
LABEL_19:
        v11 = *(_QWORD *)(v5 + 16);
        if (!v11)
          goto LABEL_27;
        if (!atomic_load((unsigned int *)(v11 + 8)))
          goto LABEL_27;
LABEL_21:
        v13 = 0;
        if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
          goto LABEL_30;
        goto LABEL_22;
      }
LABEL_18:
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v6 != 1)
    {
      LODWORD(v38[0]) = 0;
      v38[1] = 0;
      v38[2] = 0;
      goto LABEL_18;
    }
    v7 = *(_QWORD *)(v5 + 16);
    if (!v7)
    {
LABEL_25:
      v38[1] = 0;
      v38[2] = v7;
      LODWORD(v38[0]) = 0;
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    v8 = (unsigned int *)(v7 + 8);
    for (i = *(_DWORD *)(v7 + 8); ; i = v10)
    {
      if (!i)
      {
        v7 = 0;
        goto LABEL_25;
      }
      v10 = __ldxr(v8);
      if (v10 != i)
      {
        __clrex();
        continue;
      }
      if (!__stxr(i + 1, v8))
        break;
    }
    v38[1] = *(_QWORD *)(v5 + 8);
    v38[2] = v7;
    LODWORD(v38[0]) = 0;
    if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) != 2)
      goto LABEL_19;
LABEL_26:
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v5 + 8) + 24))(*(_QWORD *)(v5 + 8)))
      goto LABEL_21;
LABEL_27:
    if (*(_BYTE *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = 0;
      boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v33);
    }
    v13 = 1;
    if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
    {
LABEL_30:
      v14 = (unsigned int *)v38[2];
      if (v38[2])
      {
        v15 = (unsigned int *)(v38[2] + 8);
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
          v18 = v14 + 3;
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
            (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 24))(v14);
        }
      }
      goto LABEL_38;
    }
LABEL_22:
    if (v38[1])
      (*(void (**)(_QWORD))(*(_QWORD *)v38[1] + 8))(v38[1]);
LABEL_38:
    if ((v13 & 1) != 0)
      break;
    v5 += 24;
  }
  while (v5 != *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
LABEL_40:
  v21 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v37);
  v22 = (char *)__p;
  if (__p)
  {
    if (v36 - 1 >= 0)
    {
      v23 = (char *)__p + 16 * v36;
      do
      {
        v24 = (unsigned int *)*((_QWORD *)v23 - 1);
        if (v24)
        {
          v25 = v24 + 2;
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 16))(v24);
            v28 = v24 + 3;
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
              (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 24))(v24);
          }
        }
        v23 -= 16;
      }
      while (v23 > v22);
    }
    if (v34 >= 0xB)
      operator delete(__p);
  }
  return v21 != 0;
}

void sub_1BF4D848C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *(_QWORD *)(result + 40);
  v2 = (_QWORD *)(result + 32);
  *a2 = *(_QWORD *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = *(unsigned int **)(result + 40);
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
    if (v6)
    {
      v7 = v6 + 2;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
        v10 = v6 + 3;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
      }
    }
  }
  else
  {
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>>::dispose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3)
          v3(v1 + 32, v1 + 32, 2);
      }
      *(_QWORD *)(v1 + 24) = 0;
    }
    if (*(_QWORD *)v1)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v1, *(_QWORD *)v1);
      operator delete(*(void **)v1);
    }
    operator delete((void *)v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>>::get_untyped_deleter()
{
  return 0;
}

_QWORD *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  *a1 = off_1E790A670;
  v2 = (unsigned int *)a1[7];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  v9 = (unsigned int *)a1[5];
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
      v13 = v9 + 3;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
    }
  }
  *a1 = &unk_1E78FDD98;
  v16 = (unsigned int *)a1[2];
  if (v16)
  {
    v17 = v16 + 3;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16);
  }
  return a1;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>::~function(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  NSObject *v6;
  void *v7;
  const void *v8;
  const char *v9;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v9 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001BF5472DBLL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001BF5472DBLL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      v8 = (const void *)*((_QWORD *)a2 + 1);
      if (v8)
LABEL_9:
        _Block_release(v8);
    }
  }
  else
  {
    v6 = *(NSObject **)a1;
    v7 = *(void **)(a1 + 8);
    *(_QWORD *)a2 = *(_QWORD *)a1;
    if (v7)
    {
      v7 = _Block_copy(v7);
      v6 = *(NSObject **)a2;
    }
    *((_QWORD *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      v8 = *(const void **)(a1 + 8);
      if (v8)
        goto LABEL_9;
    }
  }
}

void boost::detail::function::void_function_obj_invoker1<ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>,void,ctu::cf::CFSharedRef<__CFDictionary const>>::invoke(uint64_t a1, const void **a2)
{
  const void *v2;
  const void *v3;
  NSObject *v4;
  void *v5;
  const void *v6;
  void *v7;
  const void *v8;
  void *v9;
  const void *v10;
  void *v11;
  const void *v12;
  void *v13;
  const void *v14;
  void *v15;
  const void *v16;
  char v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  void (*v21)(__int128 *, __int128 *, uint64_t);
  const void *v22;
  __int128 v23;
  uint64_t v24;
  _QWORD block[6];

  v2 = *a2;
  v22 = *a2;
  *a2 = 0;
  v4 = *(NSObject **)a1;
  v3 = *(const void **)(a1 + 8);
  if (!v3)
  {
    v6 = 0;
LABEL_10:
    v17 = 1;
    *(_QWORD *)&v23 = 0;
    if (!v2)
      goto LABEL_23;
    goto LABEL_22;
  }
  v5 = _Block_copy(v3);
  v6 = v5;
  if (!v5)
    goto LABEL_10;
  v7 = _Block_copy(v5);
  v8 = v7;
  if (!v7)
  {
    v17 = 0;
    *(_QWORD *)&v23 = 0;
    if (!v2)
      goto LABEL_23;
LABEL_22:
    CFRetain(v2);
    goto LABEL_23;
  }
  v9 = _Block_copy(v7);
  v10 = v9;
  if (v9)
  {
    v11 = _Block_copy(v9);
    v12 = v11;
    if (v11)
    {
      v13 = _Block_copy(v11);
      v14 = v13;
      if (v13)
      {
        v15 = _Block_copy(v13);
        v16 = v15;
        if (v15)
        {
          *(_QWORD *)&v23 = _Block_copy(v15);
          _Block_release(v16);
        }
        else
        {
          *(_QWORD *)&v23 = 0;
        }
        _Block_release(v14);
      }
      else
      {
        *(_QWORD *)&v23 = 0;
      }
      _Block_release(v12);
    }
    else
    {
      *(_QWORD *)&v23 = 0;
    }
    _Block_release(v10);
  }
  else
  {
    *(_QWORD *)&v23 = 0;
  }
  _Block_release(v8);
  v17 = 0;
  if (v2)
    goto LABEL_22;
LABEL_23:
  v18 = operator new(8uLL);
  *v18 = v2;
  if (v2)
    CFRetain(v2);
  v19 = (char *)operator new(0x20uLL);
  v20 = v19;
  *(_QWORD *)v19 = 0;
  if (boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>)::stored_vtable)
  {
    *(_QWORD *)v19 = boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>)::stored_vtable;
    if ((boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>)::stored_vtable & 1) != 0)
    {
      *(_OWORD *)(v19 + 8) = v23;
      *((_QWORD *)v19 + 3) = v24;
    }
    else
    {
      (*(void (**)(__int128 *, char *, _QWORD))((unint64_t)boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL))(&v23, v19 + 8, 0);
    }
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEES8__block_invoke;
  block[3] = &__block_descriptor_tmp_77_0;
  block[4] = v20;
  block[5] = v18;
  dispatch_async(v4, block);
  if (v2)
    CFRelease(v2);
  if (boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>)::stored_vtable)
  {
    if ((boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>)::stored_vtable & 1) == 0)
    {
      v21 = *(void (**)(__int128 *, __int128 *, uint64_t))((unint64_t)boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL);
      if (v21)
        v21(&v23, &v23, 2);
    }
  }
  if ((v17 & 1) == 0)
  {
    _Block_release(v6);
    v2 = v22;
  }
  if (v2)
    CFRelease(v2);
}

void sub_1BF4D8C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, uint64_t a11)
{
  const void *v11;
  void *v12;
  char v13;

  operator delete(v12);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>::~function(&a11);
  if ((v13 & 1) == 0)
    _Block_release(v11);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)&a9);
  _Unwind_Resume(a1);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEES8__block_invoke(uint64_t a1)
{
  _QWORD *v2;
  std::runtime_error_vtbl *v3;
  void (*v4)(_QWORD *, std::runtime_error *);
  uint64_t *v5;
  uint64_t v6;
  void (*v7)(uint64_t *, uint64_t *, uint64_t);
  CFTypeRef *v8;
  std::runtime_error cf;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = **(std::runtime_error_vtbl ***)(a1 + 40);
  if (v3)
    CFRetain(v3);
  if (!*v2)
  {
    std::runtime_error::runtime_error(&cf, "call to empty boost::function");
    cf.__vftable = (std::runtime_error_vtbl *)&unk_1E78FE000;
    boost::throw_exception<boost::bad_function_call>(&cf);
  }
  v4 = *(void (**)(_QWORD *, std::runtime_error *))((*v2 & 0xFFFFFFFFFFFFFFFELL) + 8);
  cf.__vftable = v3;
  v4(v2 + 1, &cf);
  if (cf.__vftable)
    CFRelease(cf.__vftable);
  v5 = *(uint64_t **)(a1 + 32);
  if (v5)
  {
    v6 = *v5;
    if (*v5)
    {
      if ((v6 & 1) == 0)
      {
        v7 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 & 0xFFFFFFFFFFFFFFFELL);
        if (v7)
          v7(v5 + 1, v5 + 1, 2);
      }
      *v5 = 0;
    }
    operator delete(v5);
  }
  v8 = *(CFTypeRef **)(a1 + 40);
  if (v8)
  {
    if (*v8)
      CFRelease(*v8);
    operator delete(v8);
  }
}

void sub_1BF4D8DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, std::runtime_error a11)
{
  std::runtime_error::~runtime_error(&a11);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  _Unwind_Resume(a1);
}

void sub_1BF4D8DD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1BF4D8DEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  void *v6;
  void *v7;
  const char *v8;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v8 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001BF54733FLL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001BF54733FLL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
LABEL_9:
        _Block_release(v7);
    }
  }
  else
  {
    v6 = *a1;
    if (*a1)
      v6 = _Block_copy(v6);
    *(_QWORD *)a2 = v6;
    if (a3 == 1)
    {
      v7 = *a1;
      if (*a1)
        goto LABEL_9;
    }
  }
}

void boost::detail::function::void_function_obj_invoker1<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>,void,ctu::cf::CFSharedRef<__CFDictionary const>>::invoke(uint64_t *a1, CFTypeRef *a2)
{
  uint64_t v2;
  CFTypeRef cf;

  v2 = *a1;
  cf = *a2;
  *a2 = 0;
  (*(void (**)(void))(v2 + 16))();
  if (cf)
    CFRelease(cf);
}

void sub_1BF4D8F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::move_assign(uint64_t result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  __int128 v7;

  if (a2 != (uint64_t *)result)
  {
    v2 = a2;
    v3 = (uint64_t *)result;
    v4 = *a2;
    if (*a2)
    {
      *(_QWORD *)result = v4;
      if ((v4 & 1) != 0)
      {
        v7 = *(_OWORD *)(a2 + 1);
        *(_QWORD *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      v5 = *(_QWORD *)result;
      if (!*(_QWORD *)result)
        return result;
      if ((v5 & 1) == 0)
      {
        v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6)
          result = v6(result + 8, result + 8, 2);
      }
      v2 = v3;
    }
    *v2 = 0;
  }
  return result;
}

void sub_1BF4D9000(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_1BF4D9010(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::~function1(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

_QWORD *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<TraceManager>>::~foreign_weak_ptr_impl(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E790A7E8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<TraceManager>>::~foreign_weak_ptr_impl(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_1E790A7E8;
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<TraceManager>>::lock(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 8);
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = 0;
LABEL_6:
  v7 = operator new(0x18uLL);
  *v7 = &off_1E790A838;
  v7[1] = v6;
  v7[2] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *a2 = v7;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *a2 = v7;
  }
}

void sub_1BF4D91CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<TraceManager>>::expired(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  return !v1 || *(_QWORD *)(v1 + 8) == -1;
}

_QWORD *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<TraceManager>>::clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E790A7E8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

_QWORD *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<TraceManager>>::~foreign_shared_ptr_impl(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_1E790A838;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<TraceManager>>::~foreign_shared_ptr_impl(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_1E790A838;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

_QWORD *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<TraceManager>>::clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E790A838;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

void ctu::SharedSynchronizable<TraceManager>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI12TraceManagerE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E790A890;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI12TraceManagerE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c41_ZTSNSt3__110shared_ptrIK12TraceManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c41_ZTSNSt3__110shared_ptrIK12TraceManagerEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ___ZN9analytics29registerCallbackForTimedEventI12TraceManagerEEvPKcNS_9TimerTypeENSt3__18weak_ptrIT_EEN8dispatch5queueEU13block_pointerFvNS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEE_block_invoke(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::string v10;

  v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      if (a1[4])
      {
        v7 = a1[6];
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          v10 = *(std::string *)a2;
        (*(void (**)(uint64_t, std::string *))(v7 + 16))(v7, &v10);
        if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v10.__r_.__value_.__l.__data_);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1BF4D9624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF4D9638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c37_ZTSNSt3__18weak_ptrI12TraceManagerEE48c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[6];
  if (result)
    result = _Block_copy(result);
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c37_ZTSNSt3__18weak_ptrI12TraceManagerEE48c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 48);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void dispatch::async<void ctu::SharedSynchronizable<TraceManager>::execute_wrapped<TraceManager::initialize(dispatch::group_session)::$_0>(TraceManager::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TraceManager::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TraceManager::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  std::__shared_weak_count ***v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(std::__shared_weak_count ****)a1;
  TraceManager::finishInitialization_sync(**(std::__shared_weak_count ****)a1);
  operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete((void *)a1);
  }
  else
  {
LABEL_5:
    operator delete((void *)a1);
  }
}

void sub_1BF4D9774(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<char const*,int>(__CFDictionary *a1, const __CFString **a2, int a3, const __CFAllocator *a4, const __CFAllocator *a5)
{
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  BOOL v11;
  CFNumberRef v12;
  int valuePtr;

  v12 = 0;
  ctu::cf::convert_copy((ctu::cf *)&v12, a2, (const char *)0x8000100, (uint64_t)a4, a5);
  v8 = v12;
  valuePtr = a3;
  v9 = CFNumberCreate(a4, kCFNumberIntType, &valuePtr);
  v10 = v9;
  v12 = v9;
  if (v8)
    v11 = v9 == 0;
  else
    v11 = 1;
  if (v11)
  {
    if (!v9)
      goto LABEL_8;
  }
  else
  {
    CFDictionaryAddValue(a1, v8, v9);
  }
  CFRelease(v10);
LABEL_8:
  if (v8)
    CFRelease(v8);
}

void sub_1BF4D986C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1BF4D9890(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI12TraceManagerE15execute_wrappedIZZNS3_16collectLogs_syncEN3xpc4dictENS_5blockIU13block_pointerFviS7_EEEEUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  uint64_t v6;
  xpc_object_t v7;
  __int128 v8;
  void *v9;
  const __CFAllocator *v10;
  const char **v11;
  uint64_t *v12;
  xpc_object_t value;
  const char *v14;
  const __CFAllocator *v15;
  __CFDictionary *v16;
  xpc_object_t v17;
  xpc_object_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  const void *v30;
  void *v31;
  NSObject *v32;
  xpc_object_t v33;
  xpc_object_t v34;
  const char *v35;
  xpc_object_t v36;
  xpc_object_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void *v44;
  NSObject *v45;
  NSObject *v46;
  xpc_object_t v47;
  std::string v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  void *v53;
  CFTypeRef cf;
  xpc_object_t aBlock;
  dispatch_object_t v56;
  xpc_object_t v57;
  xpc_object_t object;
  void *__p[2];
  __int128 v60;
  xpc_object_t v61;
  std::string v62;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 24);
  memset(&v62, 0, sizeof(v62));
  v61 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  v6 = MEMORY[0x1E0C812F8];
  if (v4)
  {
    v61 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    v61 = v5;
    if (!v5)
    {
      v7 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v5) == v6)
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v7 = xpc_null_create();
LABEL_8:
  v61 = v7;
LABEL_9:
  xpc_release(v5);
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v8;
  v60 = v8;
  v9 = *(void **)(v2 + 16);
  object = v9;
  if (v9)
    xpc_retain(v9);
  else
    object = xpc_null_create();
  abm::HelperClient::perform();
  xpc_release(object);
  object = 0;
  v11 = (const char **)MEMORY[0x1E0CF1130];
  v12 = (uint64_t *)MEMORY[0x1E0C9AE00];
  if (!LODWORD(__p[0]) && MEMORY[0x1C3B8A86C](v61) == v6)
  {
    value = xpc_dictionary_get_value(v61, *v11);
    aBlock = value;
    if (value)
      xpc_retain(value);
    else
      aBlock = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&aBlock, (const object *)"", v14);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    v62 = v48;
    *((_BYTE *)&v48.__r_.__value_.__s + 23) = 0;
    v48.__r_.__value_.__s.__data_[0] = 0;
    xpc_release(aBlock);
    if (ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)&v62, (__int128 **)(*(_QWORD *)(v3 + 288) + 48)))ctu::cf::update<char const*,BOOL>(*(__CFDictionary **)(v2 + 32), (const __CFString **)*MEMORY[0x1E0CFB798], 1, *v12, v15);
    if (ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)&v62, (__int128 **)(*(_QWORD *)(v3 + 288) + 48)))ctu::cf::update<char const*,BOOL>(*(__CFDictionary **)(v2 + 32), (const __CFString **)*MEMORY[0x1E0CFB790], 1, *v12, v10);
  }
  v16 = *(__CFDictionary **)(v2 + 32);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v48, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
  else
    v48 = v62;
  ctu::cf::insert<char const*,std::string>(v16, (const __CFString **)*MEMORY[0x1E0CFB770], (uint64_t)&v48, *v12, v10);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  v17 = xpc_string_create("");
  if (!v17)
    v17 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)(v2 + 16), *v11, v17);
  v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  v19 = *(void **)(v2 + 16);
  v57 = v19;
  if (v19)
    xpc_retain(v19);
  else
    v57 = xpc_null_create();
  aBlock = 0;
  v56 = 0;
  abm::HelperClient::perform();
  if (v56)
    dispatch_release(v56);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(v57);
  v57 = 0;
  v20 = *(std::__shared_weak_count **)(v3 + 128);
  if (!v20 || (v21 = *(_QWORD *)(v3 + 120), (v22 = std::__shared_weak_count::lock(v20)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v23 = v22;
  p_shared_weak_owners = (unint64_t *)&v22->__shared_weak_owners_;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v22->__shared_owners_;
  do
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v23);
  }
  v48.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
  v48.__r_.__value_.__l.__size_ = 1174405120;
  v48.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZZZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb0_ENK3__1clEv_block_invoke;
  v49 = &__block_descriptor_tmp_93_0;
  v50 = v3;
  v51 = v21;
  v52 = v23;
  do
    v28 = __ldxr(p_shared_weak_owners);
  while (__stxr(v28 + 1, p_shared_weak_owners));
  v29 = *(void **)(v2 + 40);
  if (v29)
    v29 = _Block_copy(v29);
  v53 = v29;
  v30 = *(const void **)(v2 + 32);
  cf = v30;
  if (v30)
    CFRetain(v30);
  v31 = _Block_copy(&v48);
  v32 = *(NSObject **)(v3 + 136);
  if (v32)
    dispatch_retain(*(dispatch_object_t *)(v3 + 136));
  v33 = xpc_dictionary_create(0, 0, 0);
  if (v33 || (v33 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v33) == v6)
    {
      xpc_retain(v33);
      v34 = v33;
    }
    else
    {
      v34 = xpc_null_create();
    }
  }
  else
  {
    v34 = xpc_null_create();
    v33 = 0;
  }
  xpc_release(v33);
  v35 = (const char *)(v2 + 48);
  if (*(char *)(v2 + 71) < 0)
    v35 = *(const char **)v35;
  v36 = xpc_string_create(v35);
  if (!v36)
    v36 = xpc_null_create();
  xpc_dictionary_set_value(v34, (const char *)*MEMORY[0x1E0CF10C8], v36);
  v37 = xpc_null_create();
  xpc_release(v36);
  xpc_release(v37);
  v47 = v34;
  if (v34)
  {
    xpc_retain(v34);
    v46 = 0;
    if (v31)
      goto LABEL_65;
  }
  else
  {
    v46 = 0;
    v47 = xpc_null_create();
    if (v31)
    {
LABEL_65:
      v38 = _Block_copy(v31);
      v39 = *MEMORY[0x1E0CF1078];
      v44 = v38;
      v45 = v32;
      if (!v32)
        goto LABEL_67;
      goto LABEL_66;
    }
  }
  v38 = 0;
  v39 = *MEMORY[0x1E0CF1078];
  v44 = 0;
  v45 = v32;
  if (v32)
LABEL_66:
    dispatch_retain(v32);
LABEL_67:
  TraceManager::runOnHelper_sync((_QWORD *)v3, (const char *)9, v39, 0, 1, &v47, &v46, &v44);
  if (v32)
    dispatch_release(v32);
  if (v38)
    _Block_release(v38);
  xpc_release(v47);
  v47 = 0;
  xpc_release(v34);
  if (v32)
    dispatch_release(v32);
  if (v31)
    _Block_release(v31);
  if (cf)
    CFRelease(cf);
  if (v53)
    _Block_release(v53);
  if (v52)
    std::__shared_weak_count::__release_weak(v52);
  std::__shared_weak_count::__release_weak(v23);
  if (SHIBYTE(v60) < 0)
    operator delete(__p[1]);
  xpc_release(v61);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  v40 = (void *)_ZZZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb0_EN3__1D1Ev(v2);
  operator delete(v40);
  v41 = (std::__shared_weak_count *)a1[2];
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  operator delete(a1);
}

void sub_1BF4D9ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,void *aBlock,CFTypeRef cf,uint64_t a25,xpc_object_t object,dispatch_object_t a27,xpc_object_t a28,xpc_object_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  void *v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;

  xpc_release(object);
  if (a36 < 0)
    operator delete(__p);
  xpc_release(*(xpc_object_t *)(v38 - 120));
  if (*(char *)(v38 - 89) < 0)
    operator delete(*(void **)(v38 - 112));
  v40 = (void *)_ZZZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb0_EN3__1D1Ev(v37);
  operator delete(v40);
  v41 = (std::__shared_weak_count *)v36[2];
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  operator delete(v36);
  _Unwind_Resume(a1);
}

void ___ZZZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb0_ENK3__1clEv_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  const void *v8;
  xpc_object_t v9;
  uint64_t v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFTypeID v17;
  const void *v18;
  void *v19;
  const void *v20;
  CFTypeRef v21;
  _QWORD v22[4];
  void *v23;
  CFTypeRef v24;
  void *aBlock;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  xpc_object_t v31;

  v2 = a1[4];
  v29 = 0;
  v30 = 0;
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3 || (v30 = std::__shared_weak_count::lock(v3)) == 0 || (v29 = a1[5]) == 0)
  {
    v9 = xpc_null_create();
    v10 = a1[7];
    v31 = v9;
    v11 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v10 + 16))(v10, 3760250880, &v31);
    xpc_release(v31);
    xpc_release(v11);
    goto LABEL_10;
  }
  v4 = (const void *)*MEMORY[0x1E0CFB738];
  v5 = strlen((const char *)*MEMORY[0x1E0CFB738]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v15 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v15 = v5 | 7;
    v16 = v15 + 1;
    v7 = (void **)operator new(v15 + 1);
    __dst[1] = v6;
    v28 = v16 | 0x8000000000000000;
    __dst[0] = v7;
LABEL_19:
    memmove(v7, v4, (size_t)v6);
    *((_BYTE *)v6 + (_QWORD)v7) = 0;
    v8 = (const void *)a1[8];
    if (!v8)
      goto LABEL_22;
    goto LABEL_20;
  }
  HIBYTE(v28) = v5;
  v7 = __dst;
  if (v5)
    goto LABEL_19;
  LOBYTE(__dst[0]) = 0;
  v8 = (const void *)a1[8];
  if (!v8)
    goto LABEL_22;
LABEL_20:
  v17 = CFGetTypeID(v8);
  if (v17 == CFDictionaryGetTypeID())
  {
    cf = v8;
    CFRetain(v8);
    goto LABEL_23;
  }
LABEL_22:
  cf = 0;
LABEL_23:
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 1174405120;
  v22[2] = ___ZZZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb0_ENK3__1clEv_block_invoke_2;
  v22[3] = &__block_descriptor_tmp_92_0;
  v18 = (const void *)a1[7];
  if (!v18)
  {
    v20 = (const void *)a1[8];
    v23 = 0;
    v24 = v20;
    if (!v20)
      goto LABEL_28;
    goto LABEL_27;
  }
  v19 = _Block_copy(v18);
  v20 = (const void *)a1[8];
  v23 = v19;
  v24 = v20;
  if (v20)
LABEL_27:
    CFRetain(v20);
LABEL_28:
  aBlock = _Block_copy(v22);
  Service::broadcastEvent(v2, (uint64_t)__dst, &cf, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v28) < 0)
  {
    operator delete(__dst[0]);
    v21 = v24;
    if (!v24)
      goto LABEL_37;
    goto LABEL_36;
  }
  v21 = v24;
  if (v24)
LABEL_36:
    CFRelease(v21);
LABEL_37:
  if (v23)
    _Block_release(v23);
LABEL_10:
  v12 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1BF4DA3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *aBlock, const void *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  const void **v22;
  uint64_t v23;

  if (aBlock)
    _Block_release(aBlock);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v22);
  if (a13)
    _Block_release(a13);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a16);
  if (a22 < 0)
  {
    operator delete(__p);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v23 - 72);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v23 - 72);
  _Unwind_Resume(a1);
}

void ___ZZZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb0_ENK3__1clEv_block_invoke_2(uint64_t a1, const void *a2)
{
  uint64_t *v2;
  xpc_object_t object;
  unsigned int v4;

  v2 = (uint64_t *)(a1 + 32);
  v4 = 0;
  ctu::cf_to_xpc(*(ctu **)(a1 + 40), a2);
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::object>(v2, &v4, &object);
  xpc_release(object);
}

void sub_1BF4DA4B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  const void *v4;
  void *v5;
  CFTypeRef result;

  v4 = *(const void **)(a2 + 32);
  if (!v4)
  {
    result = *(CFTypeRef *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = result;
    if (!result)
      return result;
    return CFRetain(result);
  }
  v5 = _Block_copy(v4);
  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 32);
  if (v3)
    _Block_release(v3);
}

CFTypeRef __copy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  const void *v7;
  void *v8;
  CFTypeRef result;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (const void *)a2[7];
  if (!v7)
  {
    result = (CFTypeRef)a2[8];
    a1[7] = 0;
    a1[8] = result;
    if (!result)
      return result;
    return CFRetain(result);
  }
  v8 = _Block_copy(v7);
  result = (CFTypeRef)a2[8];
  a1[7] = v8;
  a1[8] = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = (const void *)a1[8];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI12TraceManagerE15execute_wrappedIZZNS3_24collectBasebandLogs_syncEN3xpc4dictENS_5blockIU13block_pointerFviS7_EEEEUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  __int128 v6;
  __int128 v7;
  void *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  const char *v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t *p_shared_owners;
  unint64_t v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  void *aBlock;
  dispatch_object_t object;
  xpc_object_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  uint8_t buf[8];
  uint64_t v49;
  void (*v50)(_QWORD *, unsigned int *);
  void *v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  void *v55;
  std::string __p;
  void *v57;
  _BYTE v58[32];
  __int128 block;
  void (*v60)(uint64_t);
  void *v61;
  __int128 *v62;

  v2 = *a1;
  v42 = v2;
  v3 = *(_QWORD *)v2;
  v4 = *(NSObject **)(*(_QWORD *)v2 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I Snapshot of baseband trace complete", buf, 2u);
  }
  v5 = (const char *)(v2 + 8);
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v58 = v6;
  *(_OWORD *)&v58[16] = v6;
  if (*(char *)(v2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v58, *(const std::string::value_type **)(v2 + 8), *(_QWORD *)(v2 + 16));
  }
  else
  {
    v7 = *(_OWORD *)v5;
    *(_QWORD *)&v58[16] = *(_QWORD *)(v2 + 24);
    *(_OWORD *)v58 = v7;
  }
  v8 = *(void **)(v2 + 32);
  if (v8)
    v8 = _Block_copy(v8);
  *(_QWORD *)&v58[24] = v8;
  if (!*(_DWORD *)(v2 + 40))
  {
    _ZZZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb1_ENK3__2clEvENKUlvE_clEv((uint64_t)v58);
    goto LABEL_74;
  }
  v9 = MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  v49 = 1174405120;
  v50 = ___ZZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb1_ENK3__2clEv_block_invoke;
  v51 = &__block_descriptor_tmp_94_0;
  v11 = *(_QWORD *)(v2 + 48);
  v10 = *(std::__shared_weak_count **)(v2 + 56);
  v52 = v3;
  v53 = v11;
  v54 = v10;
  if (v10)
  {
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
  }
  v14 = *(void **)(v2 + 32);
  if (v14)
    v14 = _Block_copy(v14);
  v55 = v14;
  if ((v58[23] & 0x80000000) != 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v58, *(std::string::size_type *)&v58[8]);
  else
    __p = *(std::string *)v58;
  v15 = *(void **)&v58[24];
  if (*(_QWORD *)&v58[24])
    v15 = _Block_copy(*(const void **)&v58[24]);
  v57 = v15;
  v16 = _Block_copy(buf);
  v17 = *(NSObject **)(v3 + 136);
  if (v17)
    dispatch_retain(v17);
  v18 = xpc_dictionary_create(0, 0, 0);
  if (v18 || (v18 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v18) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v18);
      v19 = v18;
    }
    else
    {
      v19 = xpc_null_create();
    }
  }
  else
  {
    v19 = xpc_null_create();
    v18 = 0;
  }
  xpc_release(v18);
  if (*(char *)(v2 + 31) < 0)
    v5 = *(const char **)v5;
  v20 = xpc_string_create(v5);
  if (!v20)
    v20 = xpc_null_create();
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E0CF10E0], v20);
  v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  v22 = (const char *)(v2 + 64);
  if (*(char *)(v2 + 87) < 0)
    v22 = *(const char **)v22;
  v23 = xpc_string_create(v22);
  if (!v23)
    v23 = xpc_null_create();
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E0CF10F8], v23);
  v24 = xpc_null_create();
  xpc_release(v23);
  xpc_release(v24);
  v25 = xpc_int64_create(*(int *)(v2 + 40));
  if (!v25)
    v25 = xpc_null_create();
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E0CF11E8], v25);
  v26 = xpc_null_create();
  xpc_release(v25);
  xpc_release(v26);
  v27 = xpc_BOOL_create(*(_BYTE *)(v2 + 88));
  if (!v27)
    v27 = xpc_null_create();
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E0CF1070], v27);
  v28 = xpc_null_create();
  xpc_release(v27);
  xpc_release(v28);
  v46 = 0xAAAAAAAAAAAAAAAALL;
  v47 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  *(_QWORD *)&block = v9;
  *((_QWORD *)&block + 1) = 0x40000000;
  v60 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v61 = &__block_descriptor_tmp_13_2;
  v62 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v30 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    block = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_45;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v30 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    block = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_45;
  }
  v31 = (unint64_t *)(v30 + 8);
  do
    v32 = __ldxr(v31);
  while (__stxr(v32 + 1, v31));
LABEL_45:
  abm::HelperClient::create();
  v33 = (std::__shared_weak_count *)*((_QWORD *)&block + 1);
  if (!*((_QWORD *)&block + 1))
    goto LABEL_49;
  v34 = (unint64_t *)(*((_QWORD *)&block + 1) + 8);
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
    v45 = v19;
    if (v19)
    {
LABEL_50:
      xpc_retain(v19);
      if (v16)
        goto LABEL_51;
      goto LABEL_86;
    }
  }
  else
  {
LABEL_49:
    v45 = v19;
    if (v19)
      goto LABEL_50;
  }
  v45 = xpc_null_create();
  if (v16)
  {
LABEL_51:
    aBlock = _Block_copy(v16);
    object = v17;
    if (!v17)
      goto LABEL_53;
    goto LABEL_52;
  }
LABEL_86:
  aBlock = 0;
  object = v17;
  if (v17)
LABEL_52:
    dispatch_retain(v17);
LABEL_53:
  abm::HelperClient::perform();
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(v45);
  v45 = 0;
  p_shared_owners = &v47->__shared_owners_;
  do
    v37 = __ldaxr((unint64_t *)p_shared_owners);
  while (__stlxr(v37 - 1, (unint64_t *)p_shared_owners));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  xpc_release(v19);
  if (v17)
    dispatch_release(v17);
  if (v16)
    _Block_release(v16);
  if (v57)
    _Block_release(v57);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v38 = v55;
    if (!v55)
      goto LABEL_72;
    goto LABEL_71;
  }
  v38 = v55;
  if (v55)
LABEL_71:
    _Block_release(v38);
LABEL_72:
  if (v54)
    std::__shared_weak_count::__release_weak(v54);
LABEL_74:
  if (*(_QWORD *)&v58[24])
    _Block_release(*(const void **)&v58[24]);
  if ((v58[23] & 0x80000000) != 0)
    operator delete(*(void **)v58);
  _ZNSt3__110unique_ptrIZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS3_EEEEUb1_E3__2NS_14default_deleteIS9_EEED1B8ne180100Ev(&v42);
  v39 = (std::__shared_weak_count *)a1[2];
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  operator delete(a1);
}

void sub_1BF4DAC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, dispatch_object_t object, xpc_object_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,void *aBlock,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36)
{
  _QWORD *v36;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;

  if (aBlock)
    _Block_release(aBlock);
  if (a21)
    std::__shared_weak_count::__release_weak(a21);
  if (a36)
    _Block_release(a36);
  if (a35 < 0)
    operator delete(__p);
  _ZNSt3__110unique_ptrIZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS3_EEEEUb1_E3__2NS_14default_deleteIS9_EEED1B8ne180100Ev(&a9);
  v38 = (std::__shared_weak_count *)v36[2];
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  operator delete(v36);
  _Unwind_Resume(a1);
}

uint64_t *_ZNSt3__110unique_ptrIZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS3_EEEEUb1_E3__2NS_14default_deleteIS9_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  const void *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 87) < 0)
      operator delete(*(void **)(v2 + 64));
    v3 = *(std::__shared_weak_count **)(v2 + 56);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    v4 = *(const void **)(v2 + 32);
    if (v4)
      _Block_release(v4);
    if (*(char *)(v2 + 31) < 0)
      operator delete(*(void **)(v2 + 8));
    operator delete((void *)v2);
  }
  return a1;
}

void _ZZZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb1_ENK3__2clEvENKUlvE_clEv(uint64_t a1)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  const char *v7;
  xpc_object_t v8;
  xpc_object_t v9;
  unsigned int v10;
  xpc_object_t xdict;

  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    xdict = v2;
  }
  else
  {
    v3 = xpc_null_create();
    xdict = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  xdict = v4;
LABEL_9:
  xpc_release(v3);
  v5 = xpc_string_create((const char *)*MEMORY[0x1E0D01A30]);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB6A0], v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v7 = (const char *)a1;
  if (*(char *)(a1 + 23) < 0)
    v7 = *(const char **)a1;
  v8 = xpc_string_create(v7);
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB370], v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  v10 = 0;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 24), &v10, &xdict);
  xpc_release(xdict);
}

void sub_1BF4DB040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb1_ENK3__2clEv_block_invoke(_QWORD *a1, unsigned int *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v6;
  uint64_t v7;
  NSObject *v8;
  void **v9;
  xpc_object_t v10;
  uint64_t v11;
  xpc_object_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint8_t buf[4];
  void **v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1[4];
  v17 = 0;
  v18 = 0;
  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
  {
    v6 = 0;
    goto LABEL_12;
  }
  v6 = std::__shared_weak_count::lock(v4);
  v18 = v6;
  if (!v6 || (v17 = a1[5]) == 0)
  {
LABEL_12:
    v10 = xpc_null_create();
    v11 = a1[7];
    __p[0] = v10;
    v12 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, void **))(v11 + 16))(v11, 3760250880, __p);
    xpc_release(__p[0]);
    xpc_release(v12);
    if (!v6)
      return;
    goto LABEL_17;
  }
  v7 = *a2;
  v8 = *(NSObject **)(v3 + 88);
  if ((_DWORD)v7)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      TelephonyXPC::Result::toString(v7, (uint64_t)__p);
      if (v16 >= 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v20 = v9;
      _os_log_error_impl(&dword_1BF335000, v8, OS_LOG_TYPE_ERROR, "Failed to archive logs. Result: %s", buf, 0xCu);
      if (v16 < 0)
        operator delete(__p[0]);
    }
  }
  else if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__p[0]) = 0;
    _os_log_debug_impl(&dword_1BF335000, v8, OS_LOG_TYPE_DEBUG, "#D Compression is done.", (uint8_t *)__p, 2u);
  }
  _ZZZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb1_ENK3__2clEvENKUlvE_clEv((uint64_t)(a1 + 8));
LABEL_17:
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1BF4DB258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_1BF4DB29C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void *__copy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c124_ZTSZZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb1_ENK3__2clEvEUlvE_(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  std::string *v8;
  __int128 v9;
  void *result;

  v4 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(void **)(a2 + 56);
  if (v7)
    v7 = _Block_copy(v7);
  a1[7] = v7;
  v8 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 64);
    a1[10] = *(_QWORD *)(a2 + 80);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  result = *(void **)(a2 + 88);
  if (result)
    result = _Block_copy(result);
  a1[11] = result;
  return result;
}

void sub_1BF4DB340(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;
  std::__shared_weak_count *v4;

  v3 = *(const void **)(v1 + 56);
  if (v3)
    _Block_release(v3);
  v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c124_ZTSZZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb1_ENK3__2clEvEUlvE_(uint64_t a1)
{
  const void *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = *(const void **)(a1 + 88);
  if (v2)
    _Block_release(v2);
  if (*(char *)(a1 + 87) < 0)
  {
    operator delete(*(void **)(a1 + 64));
    v3 = *(const void **)(a1 + 56);
    if (!v3)
      goto LABEL_8;
    goto LABEL_7;
  }
  v3 = *(const void **)(a1 + 56);
  if (v3)
LABEL_7:
    _Block_release(v3);
LABEL_8:
  v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void dispatch::async<void ctu::SharedSynchronizable<TraceManager>::execute_wrapped<TraceManager::start(dispatch::group_session)::$_0>(TraceManager::start(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TraceManager::start(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TraceManager::start(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(dispatch_group_t **__p)
{
  dispatch_group_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *__p;
  if (*__p)
  {
    if (*v2)
    {
      dispatch_group_leave(*v2);
      if (*v2)
        dispatch_release(*v2);
    }
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)__p[2];
  if (!v3)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete(__p);
  }
  else
  {
LABEL_10:
    operator delete(__p);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI12TraceManagerE15execute_wrappedIZZZNS3_25finishInitialization_syncEvEUb2_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(_QWORD *a1)
{
  _DWORD *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void **v7;
  _DWORD *v8;
  void *__p;
  char v10;
  uint8_t buf[4];
  void **v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (_DWORD *)*a1;
  v8 = v2;
  if (v2[6])
  {
    v3 = *(NSObject **)(*(_QWORD *)v2 + 88);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      xpc::object::to_string((xpc::object *)(v2 + 8));
      v7 = v10 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 136315138;
      v12 = v7;
      _os_log_error_impl(&dword_1BF335000, v3, OS_LOG_TYPE_ERROR, "Dump state failed: %s", buf, 0xCu);
      if (v10 < 0)
        operator delete(__p);
    }
  }
  _ZNSt3__110unique_ptrIZZZN12TraceManager25finishInitialization_syncEvEUb2_EUb3_E3__4NS_14default_deleteIS2_EEED1B8ne180100Ev((uint64_t *)&v8);
  v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(a1);
}

void sub_1BF4DB59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  _ZNSt3__110unique_ptrIZZZN12TraceManager25finishInitialization_syncEvEUb2_EUb3_E3__4NS_14default_deleteIS2_EEED1B8ne180100Ev(&a9);
  v11 = (std::__shared_weak_count *)v9[2];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t *_ZNSt3__110unique_ptrIZZZN12TraceManager25finishInitialization_syncEvEUb2_EUb3_E3__4NS_14default_deleteIS2_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 48);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    xpc_release(*(xpc_object_t *)(v2 + 32));
    *(_QWORD *)(v2 + 32) = 0;
    v6 = *(std::__shared_weak_count **)(v2 + 16);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void dispatch::async<void ctu::SharedSynchronizable<TraceManager>::execute_wrapped<TraceManager::sleep(dispatch::group_session)::$_0>(TraceManager::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TraceManager::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TraceManager::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  const void *v5;
  size_t v6;
  size_t v7;
  void **p_dst;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  const void *v13;
  size_t v14;
  size_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  xpc_object_t v20;
  NSObject *v21;
  NSObject *v22;
  void **v23;
  uint64_t v24;
  NSObject *v25;
  void **v26;
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::string __p;
  void *v35;
  uint64_t v36;
  dispatch_group_t group;
  NSObject *v38;
  xpc_object_t object;
  void **__dst;
  size_t v41;
  unint64_t v42;

  v2 = *a1;
  v3 = **a1;
  v4 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I Helper sleep requested", (uint8_t *)&__p, 2u);
  }
  v5 = (const void *)*MEMORY[0x1E0CFB028];
  v6 = strlen((const char *)*MEMORY[0x1E0CFB028]);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
LABEL_70:
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = (void **)operator new(v9 + 1);
    v41 = v7;
    v42 = v10 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_10;
  }
  HIBYTE(v42) = v6;
  p_dst = (void **)&__dst;
  if (v6)
LABEL_10:
    memmove(p_dst, v5, v7);
  *((_BYTE *)p_dst + v7) = 0;
  memset(&__p, 0, sizeof(__p));
  v11 = -1431655766;
  v12 = -1431655766;
  if (prop::bbtrace::get((char *)&__dst, (uint64_t)&__p))
  {
    LODWORD(object) = -1431655766;
    if (util::convert<int>(&__p, &object, 0))
      v12 = (int)object;
    else
      v12 = -1431655766;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v42) & 0x80000000) == 0)
      goto LABEL_17;
  }
  else if ((SHIBYTE(v42) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(__dst);
LABEL_17:
  v13 = (const void *)*MEMORY[0x1E0CFB2D8];
  v14 = strlen((const char *)*MEMORY[0x1E0CFB2D8]);
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_70;
  v15 = v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    v16 = (void **)operator new(v17 + 1);
    v41 = v15;
    v42 = v18 | 0x8000000000000000;
    __dst = v16;
    goto LABEL_24;
  }
  HIBYTE(v42) = v14;
  v16 = (void **)&__dst;
  if (v14)
LABEL_24:
    memmove(v16, v13, v15);
  *((_BYTE *)v16 + v15) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get((char *)&__dst, (uint64_t)&__p))
  {
    LODWORD(object) = -1431655766;
    if (util::convert<int>(&__p, &object, 0))
      v11 = (int)object;
    else
      v11 = -1431655766;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v42) & 0x80000000) == 0)
    {
LABEL_31:
      if (v12 != 4)
        goto LABEL_42;
      goto LABEL_37;
    }
  }
  else if ((SHIBYTE(v42) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(__dst);
  if (v12 != 4)
  {
LABEL_42:
    v23 = (void **)xpc_null_create();
    v24 = *MEMORY[0x1E0CF1168];
    v25 = v2[1];
    object = v25;
    __dst = v23;
    if (v25)
    {
      dispatch_retain(v25);
      dispatch_group_enter(v25);
    }
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    TraceManager::runOnHelper_sync((_QWORD *)v3, (const char *)9, v24, 0x61A8u, 0, (xpc_object_t *)&__dst, (NSObject **)&object, (void **)&__p.__r_.__value_.__l.__data_);
    if (v25)
    {
      dispatch_group_leave(v25);
      dispatch_release(v25);
    }
    xpc_release(__dst);
    goto LABEL_61;
  }
LABEL_37:
  if (v11 != 1)
    goto LABEL_42;
  v19 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1BF335000, v19, OS_LOG_TYPE_DEFAULT, "#I Cellular Logging should be paused and the other traces will hanlde enter low power.", (uint8_t *)&__p, 2u);
  }
  v20 = xpc_null_create();
  v21 = v2[1];
  v38 = v21;
  object = v20;
  if (v21)
  {
    dispatch_retain(v21);
    dispatch_group_enter(v21);
    v22 = v2[1];
  }
  else
  {
    v22 = 0;
  }
  __p.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
  __p.__r_.__value_.__l.__size_ = 1174405120;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZZN12TraceManager5sleepEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
  v35 = &__block_descriptor_tmp_105_0;
  v36 = v3;
  group = v22;
  if (v22)
  {
    dispatch_retain(v22);
    dispatch_group_enter(v22);
  }
  v26 = (void **)_Block_copy(&__p);
  v27 = *MEMORY[0x1E0CF1190];
  v28 = *(NSObject **)(v3 + 136);
  if (v28)
    dispatch_retain(*(dispatch_object_t *)(v3 + 136));
  __dst = v26;
  v41 = (size_t)v28;
  TraceManager::runOnHelper_sync((_QWORD *)v3, (const char *)0xA, v27, 0x1388u, 1, &object, &v38, (void **)&__dst);
  if (v28)
    dispatch_release(v28);
  if (v26)
    _Block_release(v26);
  if (v21)
  {
    dispatch_group_leave(v21);
    dispatch_release(v21);
  }
  xpc_release(object);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
LABEL_61:
  v29 = v2[1];
  if (v29)
  {
    dispatch_group_leave(v29);
    v30 = v2[1];
    if (v30)
      dispatch_release(v30);
  }
  operator delete(v2);
  v31 = (std::__shared_weak_count *)a1[2];
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  operator delete(a1);
}

void sub_1BF4DBB4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, dispatch_group_t group, uint64_t a18, uint64_t a19, xpc_object_t object,xpc_object_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _QWORD *v26;
  _QWORD *v27;
  NSObject *v28;
  const void *v29;
  NSObject *v30;
  NSObject *v32;
  NSObject *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;

  if (v30)
    dispatch_release(v30);
  if (v29)
    _Block_release(v29);
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  if (v28)
  {
    dispatch_group_leave(v28);
    dispatch_release(v28);
  }
  xpc_release(object);
  v32 = v27[1];
  if (v32)
  {
    dispatch_group_leave(v32);
    v33 = v27[1];
    if (v33)
      dispatch_release(v33);
  }
  operator delete(v27);
  v34 = (std::__shared_weak_count *)v26[2];
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  operator delete(v26);
  _Unwind_Resume(a1);
}

void ___ZZN12TraceManager5sleepEN8dispatch13group_sessionEENK3__0clEv_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  xpc_object_t v3;
  uint64_t v4;
  NSObject *v5;
  void *v6[2];
  NSObject *v7;
  xpc_object_t object;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = xpc_null_create();
  v4 = *MEMORY[0x1E0CF1168];
  v5 = *(NSObject **)(a1 + 40);
  v7 = v5;
  object = v3;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  v6[0] = 0;
  v6[1] = 0;
  TraceManager::runOnHelper_sync(v2, (const char *)9, v4, 0x61A8u, 0, &object, &v7, v6);
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
  xpc_release(object);
}

void sub_1BF4DBD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  NSObject *v12;

  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  if (v12)
  {
    dispatch_group_leave(v12);
    dispatch_release(v12);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<TraceManager>::execute_wrapped<TraceManager::wake(dispatch::group_session)::$_0>(TraceManager::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TraceManager::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TraceManager::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  const void *v5;
  size_t v6;
  size_t v7;
  void **p_dst;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  const void *v13;
  size_t v14;
  size_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  NSObject *v20;
  xpc_object_t v21;
  NSObject *v22;
  void **v23;
  uint64_t v24;
  NSObject *v25;
  void **v26;
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::string __p;
  void *v34;
  uint64_t v35;
  dispatch_group_t group;
  NSObject *v37;
  xpc_object_t object;
  void **__dst;
  size_t v40;
  unint64_t v41;

  v2 = *a1;
  v3 = **a1;
  v4 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I Helper wake requested", (uint8_t *)&__p, 2u);
  }
  v5 = (const void *)*MEMORY[0x1E0CFB028];
  v6 = strlen((const char *)*MEMORY[0x1E0CFB028]);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
LABEL_61:
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = (void **)operator new(v9 + 1);
    v40 = v7;
    v41 = v10 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_10;
  }
  HIBYTE(v41) = v6;
  p_dst = (void **)&__dst;
  if (v6)
LABEL_10:
    memmove(p_dst, v5, v7);
  *((_BYTE *)p_dst + v7) = 0;
  memset(&__p, 0, sizeof(__p));
  v11 = -1431655766;
  v12 = -1431655766;
  if (prop::bbtrace::get((char *)&__dst, (uint64_t)&__p))
  {
    LODWORD(object) = -1431655766;
    if (util::convert<int>(&__p, &object, 0))
      v12 = (int)object;
    else
      v12 = -1431655766;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v41) & 0x80000000) == 0)
      goto LABEL_17;
  }
  else if ((SHIBYTE(v41) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(__dst);
LABEL_17:
  v13 = (const void *)*MEMORY[0x1E0CFB2D8];
  v14 = strlen((const char *)*MEMORY[0x1E0CFB2D8]);
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_61;
  v15 = v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    v16 = (void **)operator new(v17 + 1);
    v40 = v15;
    v41 = v18 | 0x8000000000000000;
    __dst = v16;
    goto LABEL_24;
  }
  HIBYTE(v41) = v14;
  v16 = (void **)&__dst;
  if (v14)
LABEL_24:
    memmove(v16, v13, v15);
  *((_BYTE *)v16 + v15) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get((char *)&__dst, (uint64_t)&__p))
  {
    LODWORD(object) = -1431655766;
    if (util::convert<int>(&__p, &object, 0))
      v11 = (int)object;
    else
      v11 = -1431655766;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v41) & 0x80000000) == 0)
    {
LABEL_31:
      v19 = (uint64_t *)MEMORY[0x1E0CF1148];
      if (v12 != 4)
        goto LABEL_51;
      goto LABEL_37;
    }
  }
  else if ((SHIBYTE(v41) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(__dst);
  v19 = (uint64_t *)MEMORY[0x1E0CF1148];
  if (v12 != 4)
  {
LABEL_51:
    v26 = (void **)xpc_null_create();
    v27 = *v19;
    object = 0;
    __dst = v26;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    TraceManager::runOnHelper_sync((_QWORD *)v3, (const char *)9, v27, 0x1388u, 0, (xpc_object_t *)&__dst, (NSObject **)&object, (void **)&__p.__r_.__value_.__l.__data_);
    xpc_release(__dst);
    goto LABEL_52;
  }
LABEL_37:
  if (v11 != 1)
    goto LABEL_51;
  v20 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1BF335000, v20, OS_LOG_TYPE_DEFAULT, "#I The other traces will handle exit low power first, then the Cellular Logging should be resumed.", (uint8_t *)&__p, 2u);
  }
  v21 = xpc_null_create();
  v37 = 0;
  object = v21;
  __p.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
  __p.__r_.__value_.__l.__size_ = 1174405120;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZZN12TraceManager4wakeEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
  v34 = &__block_descriptor_tmp_106;
  v35 = v3;
  v22 = v2[1];
  group = v22;
  if (v22)
  {
    dispatch_retain(v22);
    dispatch_group_enter(v22);
  }
  v23 = (void **)_Block_copy(&__p);
  v24 = *v19;
  v25 = *(NSObject **)(v3 + 136);
  if (v25)
    dispatch_retain(*(dispatch_object_t *)(v3 + 136));
  __dst = v23;
  v40 = (size_t)v25;
  TraceManager::runOnHelper_sync((_QWORD *)v3, (const char *)9, v24, 0x1388u, 0, &object, &v37, (void **)&__dst);
  if (v25)
    dispatch_release(v25);
  if (v23)
    _Block_release(v23);
  xpc_release(object);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
LABEL_52:
  v28 = v2[1];
  if (v28)
  {
    dispatch_group_leave(v28);
    v29 = v2[1];
    if (v29)
      dispatch_release(v29);
  }
  operator delete(v2);
  v30 = (std::__shared_weak_count *)a1[2];
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  operator delete(a1);
}

void sub_1BF4DC194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, dispatch_group_t group, uint64_t a18, uint64_t a19, xpc_object_t object,xpc_object_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _QWORD *v26;
  _QWORD *v27;
  const void *v28;
  NSObject *v29;
  NSObject *v31;
  NSObject *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;

  if (v29)
    dispatch_release(v29);
  if (v28)
    _Block_release(v28);
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  xpc_release(object);
  v31 = v27[1];
  if (v31)
  {
    dispatch_group_leave(v31);
    v32 = v27[1];
    if (v32)
      dispatch_release(v32);
  }
  operator delete(v27);
  v33 = (std::__shared_weak_count *)v26[2];
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  operator delete(v26);
  _Unwind_Resume(a1);
}

void ___ZZN12TraceManager4wakeEN8dispatch13group_sessionEENK3__0clEv_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  xpc_object_t v2;
  uint64_t v3;
  void *v4[2];
  NSObject *v5;
  xpc_object_t object;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = xpc_null_create();
  v3 = *MEMORY[0x1E0CF11A0];
  v5 = 0;
  object = v2;
  v4[0] = 0;
  v4[1] = 0;
  TraceManager::runOnHelper_sync(v1, (const char *)0xA, v3, 0x1388u, 1, &object, &v5, v4);
  xpc_release(object);
}

void sub_1BF4DC300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_72()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1BF335000);
  }
  return result;
}

void TransportModule::create(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;
  void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  _QWORD v43[2];
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t);
  void *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t block;
  uint64_t v53;
  _QWORD *(*v54)(uint64_t);
  void *v55;
  uint64_t v56;
  uint64_t **v57;

  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  v6 = operator new(0xE8uLL);
  v7 = v6;
  v8 = *a1;
  v9 = (std::__shared_weak_count *)a1[1];
  v44 = v8;
  v45 = v9;
  if (v9)
  {
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }
  v12 = *a2;
  v13 = (std::__shared_weak_count *)a2[1];
  v43[0] = v12;
  v43[1] = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  TransportModule::TransportModule((uint64_t)v6, &v44, v43);
  *a3 = v7;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  v16 = (std::__shared_weak_count *)operator new(0x20uLL);
  v16->__shared_owners_ = 0;
  v17 = (unint64_t *)&v16->__shared_owners_;
  v16->__vftable = (std::__shared_weak_count_vtbl *)off_1E790AE20;
  v16->__shared_weak_owners_ = 0;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  a3[1] = v16;
  v18 = (std::__shared_weak_count *)*((_QWORD *)v7 + 16);
  if (v18)
  {
    if (v18->__shared_owners_ != -1)
      goto LABEL_19;
    do
      v19 = __ldxr(v17);
    while (__stxr(v19 + 1, v17));
    v20 = (unint64_t *)&v16->__shared_weak_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    *((_QWORD *)v7 + 15) = v7;
    *((_QWORD *)v7 + 16) = v16;
    std::__shared_weak_count::__release_weak(v18);
  }
  else
  {
    do
      v22 = __ldxr(v17);
    while (__stxr(v22 + 1, v17));
    v23 = (unint64_t *)&v16->__shared_weak_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    *((_QWORD *)v7 + 15) = v7;
    *((_QWORD *)v7 + 16) = v16;
  }
  do
    v25 = __ldaxr(v17);
  while (__stlxr(v25 - 1, v17));
  if (v25)
  {
LABEL_19:
    v26 = (_QWORD *)*a3;
    if (!*(_QWORD *)(*a3 + 104))
      goto LABEL_35;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  v26 = (_QWORD *)*a3;
  if (!*(_QWORD *)(*a3 + 104))
    goto LABEL_35;
LABEL_20:
  v27 = (std::__shared_weak_count *)v26[16];
  if (!v27 || (v28 = v26[15], (v29 = std::__shared_weak_count::lock(v27)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v30 = v29;
  block = v28;
  v53 = (uint64_t)v29;
  ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v26 + 7));
  v31 = v28 + 48;
  if (!v28)
    v31 = 0;
  v46 = v31;
  v47 = (uint64_t)v30;
  block = 0;
  v53 = 0;
  ctu::TrackedLogger::registerLoggerToServer();
  v32 = (std::__shared_weak_count *)v47;
  if (v47)
  {
    v33 = (unint64_t *)(v47 + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = (std::__shared_weak_count *)v53;
  if (v53)
  {
    v36 = (unint64_t *)(v53 + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
LABEL_35:
  if (v13)
  {
    v38 = (unint64_t *)&v13->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  v40 = *a3;
  v41 = *a3 + 120;
  v46 = MEMORY[0x1E0C809B0];
  v47 = 0x40000000;
  v48 = ___ZN15TransportModule4initEv_block_invoke;
  v49 = &__block_descriptor_tmp_37;
  v50 = v40;
  v51 = &v46;
  block = MEMORY[0x1E0C809B0];
  v53 = 0x40000000;
  v54 = ___ZNK3ctu20SharedSynchronizableI15TransportModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v55 = &__block_descriptor_tmp_51_4;
  v56 = v41;
  v57 = &v51;
  v42 = *(NSObject **)(v40 + 136);
  if (*(_QWORD *)(v40 + 144))
    dispatch_async_and_wait(v42, &block);
  else
    dispatch_sync(v42, &block);
}

void sub_1BF4DC664()
{
  __break(1u);
}

void sub_1BF4DC6A8()
{
  __cxa_end_catch();
  JUMPOUT(0x1BF4DC6D0);
}

void sub_1BF4DC6B8()
{
  JUMPOUT(0x1BF4DC6D4);
}

void TransportModule::init(TransportModule *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN15TransportModule4initEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_37;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI15TransportModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_51_4;
  block[4] = (char *)this + 120;
  block[5] = &v4;
  v2 = (char *)this + 136;
  v1 = *((_QWORD *)this + 17);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

uint64_t TransportModule::TransportModule(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unsigned __int8 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  NSObject *initially_inactive;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  xpc_object_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  xpc_object_t v26;
  void *v27;
  xpc_object_t v28;
  void *v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v49;
  _BYTE v50[16];
  __int128 v51;
  uint64_t block;
  uint64_t v53;
  void (*v54)(uint64_t);
  void *v55;
  uint64_t *v56;

  v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_1E7908A38;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v6);
    *(_QWORD *)a1 = &unk_1E78FC4E8;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_1E78FC4E8;
    *(_QWORD *)(a1 + 8) = v5;
  }
  *(_QWORD *)a1 = off_1E790A9F0;
  *(_QWORD *)(a1 + 48) = &unk_1E790AA60;
  v11 = (_QWORD *)(a1 + 48);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v50, "com.apple.telephony.abm", "ipc.mod");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  block = MEMORY[0x1E0C809B0];
  v53 = 0x40000000;
  v54 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v55 = &__block_descriptor_tmp_13_2;
  v56 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v14 = GetABMLogServer(void)::sLogServer;
    v13 = *(std::__shared_weak_count **)algn_1ED710088;
    if (*(_QWORD *)algn_1ED710088)
      goto LABEL_12;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v14 = GetABMLogServer(void)::sLogServer;
    v13 = *(std::__shared_weak_count **)algn_1ED710088;
    if (*(_QWORD *)algn_1ED710088)
    {
LABEL_12:
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v18 = dispatch_queue_create_with_target_V2("ipc.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v18, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v18);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v18;
  if (v18)
  {
    dispatch_retain(v18);
    *(_QWORD *)(a1 + 144) = 0;
    dispatch_release(v18);
  }
  else
  {
    *(_QWORD *)(a1 + 144) = 0;
  }
  *(_QWORD *)(a1 + 48) = off_1E790ADE0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&block);
  *(_QWORD *)(a1 + 56) = &unk_1E78FB900;
  *(_QWORD *)(a1 + 104) = v14;
  *(_QWORD *)(a1 + 112) = v13;
  if (v13)
  {
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v51);
    *v11 = off_1E790AE70;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v51);
    *v11 = off_1E790AE70;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v50);
  *(_QWORD *)a1 = off_1E790A9F0;
  *(_QWORD *)(a1 + 48) = &unk_1E790AA60;
  *(_DWORD *)(a1 + 152) = 0;
  v22 = xpc_null_create();
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = *a3;
  *(_QWORD *)(a1 + 160) = v22;
  v23 = a3[1];
  *(_QWORD *)(a1 + 224) = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = xpc_null_create();
  v27 = v26;
  *(_DWORD *)(a1 + 152) = 1;
  if (v26)
  {
    xpc_retain(v26);
    v28 = v27;
  }
  else
  {
    v28 = xpc_null_create();
  }
  v29 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v28;
  xpc_release(v29);
  xpc_release(v27);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  block = MEMORY[0x1E0C809B0];
  v53 = 0x40000000;
  v54 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v55 = &__block_descriptor_tmp_13_2;
  v56 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v31 = GetABMLogServer(void)::sLogServer;
    v32 = *(_QWORD *)algn_1ED710088;
    v49 = *(std::__shared_weak_count **)algn_1ED710088;
    if (*(_QWORD *)algn_1ED710088)
      goto LABEL_34;
LABEL_42:
    block = v31;
    v53 = v32;
    goto LABEL_43;
  }
  dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
  v31 = GetABMLogServer(void)::sLogServer;
  v32 = *(_QWORD *)algn_1ED710088;
  v49 = *(std::__shared_weak_count **)algn_1ED710088;
  if (!*(_QWORD *)algn_1ED710088)
    goto LABEL_42;
LABEL_34:
  v33 = (unint64_t *)(v32 + 8);
  do
    v34 = __ldxr(v33);
  while (__stxr(v34 + 1, v33));
  block = v31;
  v53 = v32;
  do
    v35 = __ldxr(v33);
  while (__stxr(v35 + 1, v33));
LABEL_43:
  data::TransportService::State::create((capabilities::abs *)&block, (uint64_t)&v51);
  v36 = (std::__shared_weak_count *)v53;
  if (v53)
  {
    v37 = (unint64_t *)(v53 + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = v51;
  v51 = 0uLL;
  v40 = *(std::__shared_weak_count **)(a1 + 192);
  *(_OWORD *)(a1 + 184) = v39;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
  if (*((_QWORD *)&v51 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (v49)
  {
    v46 = (unint64_t *)&v49->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  return a1;
}

void sub_1BF4DCD14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  Service *v19;
  _QWORD *v20;
  xpc_object_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  v27 = a19;
  if (a19)
  {
    p_shared_owners = (unint64_t *)&a19->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v25);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v23);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v22);
  WakeReason::~WakeReason(v21);
  ctu::SharedLoggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v20);
  Service::~Service(v19);
  _Unwind_Resume(a1);
}

void sub_1BF4DCDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  Service *v3;
  _QWORD *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  va_list va2;
  uint64_t v14;
  uint64_t v15;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v4);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  Service::~Service(v3);
  _Unwind_Resume(a1);
}

void sub_1BF4DCDE8(_Unwind_Exception *a1)
{
  Service *v1;

  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void WakeReason::~WakeReason(xpc_object_t *this)
{
  xpc_release(this[1]);
  this[1] = 0;
}

_QWORD *ctu::SharedLoggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E790ADE0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E790ADE0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void TransportModule::~TransportModule(TransportModule *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  uint8_t v22[16];

  *(_QWORD *)this = off_1E790A9F0;
  *((_QWORD *)this + 6) = &unk_1E790AA60;
  v2 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v22 = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v22, 2u);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  xpc_release(*((xpc_object_t *)this + 20));
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 6) = off_1E790ADE0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v15 = *((_QWORD *)this + 18);
  if (v15)
    dispatch_release(v15);
  v16 = *((_QWORD *)this + 17);
  if (v16)
    dispatch_release(v16);
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  *(_QWORD *)this = off_1E7908A38;
  v18 = *((_QWORD *)this + 3);
  if (v18)
  {
    v19 = *((_QWORD *)this + 4);
    v20 = (void *)*((_QWORD *)this + 3);
    if (v19 != v18)
    {
      do
      {
        if (*(char *)(v19 - 1) < 0)
          operator delete(*(void **)(v19 - 24));
        v19 -= 24;
      }
      while (v19 != v18);
      v20 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v18;
    operator delete(v20);
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
}

{
  void *v1;

  TransportModule::~TransportModule(this);
  operator delete(v1);
}

void `non-virtual thunk to'TransportModule::~TransportModule(TransportModule *this)
{
  TransportModule::~TransportModule((TransportModule *)((char *)this - 48));
}

{
  void *v1;

  TransportModule::~TransportModule((TransportModule *)((char *)this - 48));
  operator delete(v1);
}

const char *TransportModule::getName(TransportModule *this)
{
  return "ipc.mod";
}

void ___ZN15TransportModule4initEv_block_invoke(uint64_t a1)
{
  TransportModule::configureWakeEventPktDelay_sync(*(TransportModule **)(a1 + 32));
}

void TransportModule::configureWakeEventPktDelay_sync(TransportModule *this)
{
  NSObject *v2;
  int *v3;
  char *v4;
  const char *v5;
  int v6;
  int *v7;
  char *v8;
  size_t v9;
  int v10;
  int v11;
  uint8_t buf[4];
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v11 = -1431655766;
  v9 = 4;
  if (sysctlbyname("net.link.generic.system.port_used.wake_pkt_event_delay_if_families", &v11, &v9, 0, 0))
  {
    v2 = *((_QWORD *)this + 11);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      return;
    v3 = __error();
    v4 = strerror(*v3);
    *(_DWORD *)buf = 136315138;
    v13 = v4;
    v5 = "Failed to get current sysctl value, error: (%s)";
LABEL_7:
    _os_log_error_impl(&dword_1BF335000, v2, OS_LOG_TYPE_ERROR, v5, buf, 0xCu);
    return;
  }
  v10 = v11 | 0x8000;
  v6 = sysctlbyname("net.link.generic.system.port_used.wake_pkt_event_delay_if_families", 0, 0, &v10, 4uLL);
  v2 = *((_QWORD *)this + 11);
  if (v6)
  {
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      return;
    v7 = __error();
    v8 = strerror(*v7);
    *(_DWORD *)buf = 136315138;
    v13 = v8;
    v5 = "Failed to configure in-band wake packet event, error (%s)";
    goto LABEL_7;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Successfully configured in-band wake packet event", buf, 2u);
  }
}

_BYTE *TransportModule::getShutdownStages@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *v3;
  _BYTE *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(1uLL);
  *a1 = v3;
  *v3 = 3;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void TransportModule::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  uint64_t *v4;
  NSObject *v5;
  _QWORD v6[5];
  dispatch_group_t group;
  char v8;

  v4 = (uint64_t *)(a1 + 120);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 1174405120;
  v6[2] = ___ZN15TransportModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v6[3] = &__block_descriptor_tmp_3_2;
  v5 = *a3;
  v6[4] = a1;
  group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  v8 = a2;
  ctu::SharedSynchronizable<TransportModule>::execute_wrapped(v4, (uint64_t)v6);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN15TransportModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = v1[21];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    (*(void (**)(_QWORD))(*(_QWORD *)v1[21] + 56))(v1[21]);
  }
  v3 = (std::__shared_weak_count *)v1[22];
  v1[21] = 0;
  v1[22] = 0;
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)v1[26];
    v1[25] = 0;
    v1[26] = 0;
    if (!v6)
      return;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)v1[26];
    v1[25] = 0;
    v1[26] = 0;
    if (!v6)
      return;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void std::shared_ptr<TransportService>::reset[abi:ne180100](_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void TransportModule::initialize(_QWORD *a1, NSObject **a2)
{
  uint64_t *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD v15[5];
  dispatch_group_t group;

  v3 = a1 + 15;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1174405120;
  v15[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v15[3] = &__block_descriptor_tmp_21_6;
  v4 = *a2;
  v15[4] = a1;
  group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  ctu::SharedSynchronizable<TransportModule>::execute_wrapped(v3, (uint64_t)v15);
  v5 = (std::__shared_weak_count *)a1[16];
  if (!v5 || (v6 = a1[15], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v9 = operator new(8uLL);
  *v9 = a1;
  v10 = a1[17];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = operator new(0x18uLL);
  *v13 = v9;
  v13[1] = v6;
  v13[2] = v8;
  dispatch_async_f(v10, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::initialize(dispatch::group_session)::$_0>(TransportModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  size_t v11;
  size_t v12;
  void **p_dst;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  const void *v19;
  size_t v20;
  size_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  const void *v27;
  size_t v28;
  size_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  _QWORD v35[6];
  std::__shared_weak_count *v36;
  const void *v37;
  _QWORD v38[6];
  std::__shared_weak_count *v39;
  const void *v40;
  _QWORD aBlock[6];
  std::__shared_weak_count *v42;
  const void *v43;
  void **__dst;
  size_t v45;
  unint64_t v46;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (v3 = *(_QWORD *)(v1 + 120), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = abm::kCommandNetworkInterfaceControl[0];
  v11 = strlen(abm::kCommandNetworkInterfaceControl[0]);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (void **)operator new(v14 + 1);
    v45 = v12;
    v46 = v15 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v46) = v11;
    p_dst = (void **)&__dst;
    if (!v11)
      goto LABEL_17;
  }
  memmove(p_dst, v10, v12);
LABEL_17:
  *((_BYTE *)p_dst + v12) = 0;
  v16 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_6_11;
  aBlock[4] = v1;
  aBlock[5] = v3;
  v42 = v5;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  v18 = _Block_copy(aBlock);
  v43 = v18;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v43);
  if (v18)
    _Block_release(v18);
  if (SHIBYTE(v46) < 0)
    operator delete(__dst);
  v19 = (const void *)*MEMORY[0x1E0CFBD50];
  v20 = strlen((const char *)*MEMORY[0x1E0CFBD50]);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = (void **)operator new(v23 + 1);
    v45 = v21;
    v46 = v24 | 0x8000000000000000;
    __dst = v22;
  }
  else
  {
    HIBYTE(v46) = v20;
    v22 = (void **)&__dst;
    if (!v20)
      goto LABEL_31;
  }
  memmove(v22, v19, v21);
LABEL_31:
  *((_BYTE *)v22 + v21) = 0;
  v38[0] = v16;
  v38[1] = 1174405120;
  v38[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_7;
  v38[3] = &__block_descriptor_tmp_12_8;
  v38[4] = v1;
  v38[5] = v3;
  v39 = v5;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  v26 = _Block_copy(v38);
  v40 = v26;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v40);
  if (v26)
    _Block_release(v26);
  if (SHIBYTE(v46) < 0)
    operator delete(__dst);
  v27 = (const void *)*MEMORY[0x1E0CFBD48];
  v28 = strlen((const char *)*MEMORY[0x1E0CFBD48]);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v29 = v28;
  if (v28 >= 0x17)
  {
    v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v31 = v28 | 7;
    v32 = v31 + 1;
    v30 = (void **)operator new(v31 + 1);
    v45 = v29;
    v46 = v32 | 0x8000000000000000;
    __dst = v30;
  }
  else
  {
    HIBYTE(v46) = v28;
    v30 = (void **)&__dst;
    if (!v28)
      goto LABEL_45;
  }
  memmove(v30, v27, v29);
LABEL_45:
  *((_BYTE *)v30 + v29) = 0;
  v35[0] = v16;
  v35[1] = 1174405120;
  v35[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_13;
  v35[3] = &__block_descriptor_tmp_20_6;
  v35[4] = v1;
  v35[5] = v3;
  v36 = v5;
  do
    v33 = __ldxr(p_shared_weak_owners);
  while (__stxr(v33 + 1, p_shared_weak_owners));
  v34 = _Block_copy(v35);
  v37 = v34;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v37);
  if (v34)
    _Block_release(v34);
  if (SHIBYTE(v46) < 0)
    operator delete(__dst);
  if (v36)
    std::__shared_weak_count::__release_weak(v36);
  if (v39)
    std::__shared_weak_count::__release_weak(v39);
  if (v42)
    std::__shared_weak_count::__release_weak(v42);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF4DD984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31)
{
  std::__shared_weak_count *v31;
  const void *v32;
  uint64_t v33;
  std::__shared_weak_count *v35;

  if (v32)
    _Block_release(v32);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if ((*(char *)(v33 - 105) & 0x80000000) == 0)
    {
LABEL_5:
      v35 = a23;
      if (!a23)
      {
LABEL_10:
        if (a31)
        {
          std::__shared_weak_count::__release_weak(a31);
          std::__shared_weak_count::__release_weak(v31);
          _Unwind_Resume(a1);
        }
        std::__shared_weak_count::__release_weak(v31);
        _Unwind_Resume(a1);
      }
LABEL_9:
      std::__shared_weak_count::__release_weak(v35);
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v33 - 105) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v33 - 128));
  v35 = a23;
  if (!a23)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2(_QWORD *a1, void **a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  void *v10;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  xpc_object_t object;
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 1174405120;
      v14[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_3;
      v14[3] = &__block_descriptor_tmp_4_5;
      v10 = *a2;
      v14[4] = v7;
      object = v10;
      if (v10)
      {
        xpc_retain(v10);
        v11 = *a3;
        if (!*a3)
          goto LABEL_9;
      }
      else
      {
        object = xpc_null_create();
        v11 = *a3;
        if (!*a3)
        {
LABEL_9:
          aBlock = v11;
          ctu::SharedSynchronizable<TransportModule>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v14);
          if (aBlock)
            _Block_release(aBlock);
          xpc_release(object);
          object = 0;
          goto LABEL_12;
        }
      }
      v11 = _Block_copy(v11);
      goto LABEL_9;
    }
  }
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_3(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t value;
  size_t v7;
  void **v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t object;
  void *v13[3];
  unsigned int v14;
  xpc_object_t v15[4];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = xpc_dictionary_create(0, 0, 0);
  v4 = v3;
  if (v3)
  {
    v15[0] = v3;
  }
  else
  {
    v4 = xpc_null_create();
    v15[0] = v4;
    if (!v4)
    {
      v5 = xpc_null_create();
      v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v4) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v4);
    goto LABEL_9;
  }
  v5 = xpc_null_create();
LABEL_8:
  v15[0] = v5;
LABEL_9:
  xpc_release(v4);
  v14 = -534716414;
  memset(v13, 170, sizeof(v13));
  value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E0CFAF10]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  memset(&v15[1], 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(object);
  if (SHIBYTE(v13[2]) >= 0)
    v7 = HIBYTE(v13[2]);
  else
    v7 = (size_t)v13[1];
  if (v7 != strlen(abm::kActionConfigureDataThrottling))
    goto LABEL_26;
  v8 = SHIBYTE(v13[2]) >= 0 ? v13 : (void **)v13[0];
  if (memcmp(v8, abm::kActionConfigureDataThrottling, v7))
    goto LABEL_26;
  v9 = *(xpc_object_t *)(a1 + 40);
  v11 = v9;
  if (!v9)
  {
    v9 = xpc_null_create();
    v11 = v9;
    v10 = v15[0];
    if (v15[0])
      goto LABEL_22;
LABEL_24:
    v10 = xpc_null_create();
    goto LABEL_25;
  }
  xpc_retain(v9);
  v10 = v15[0];
  if (!v15[0])
    goto LABEL_24;
LABEL_22:
  xpc_retain(v10);
LABEL_25:
  TransportModule::configureDataThrottling_sync(v2, &v11);
  v14 = 0;
  xpc_release(v10);
  xpc_release(v9);
  v11 = 0;
LABEL_26:
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 48), &v14, v15);
  if (SHIBYTE(v13[2]) < 0)
    operator delete(v13[0]);
  xpc_release(v15[0]);
}

void sub_1BF4DDDDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, xpc_object_t object, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  void *v25;

  xpc_release(v25);
  xpc_release(v24);
  if (a16 < 0)
    operator delete(__p);
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t TransportModule::configureDataThrottling_sync(uint64_t a1, xpc_object_t *a2)
{
  NSObject *v4;
  xpc_object_t value;
  unsigned int v6;
  xpc_object_t v7;
  uint64_t v8;
  uint64_t *v9;
  xpc_object_t object[6];

  v4 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(object[0]) = 0;
    _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I Configure data throttling", (uint8_t *)object, 2u);
  }
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFAF68]);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  v6 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  v7 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFAF80]);
  object[0] = v7;
  if (v7)
    xpc_retain(v7);
  else
    object[0] = xpc_null_create();
  v8 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  v9 = *(uint64_t **)(a1 + 184);
  if (v9)
  {
    object[0] = (xpc_object_t)MEMORY[0x1E0C809B0];
    object[1] = (xpc_object_t)0x40000000;
    object[2] = ___ZN4data16TransportService5State9setConfigENS0_16ThrottlingConfigE_block_invoke;
    object[3] = &__block_descriptor_tmp_25_4;
    object[4] = v9;
    object[5] = (xpc_object_t)(v6 | (unint64_t)(v8 << 32));
    ctu::SharedSynchronizable<data::TransportService::State>::execute_wrapped(v9 + 9, (uint64_t)object);
  }
  return 0;
}

void sub_1BF4DDFC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18weak_ptrI15TransportModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__18weak_ptrI15TransportModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_7(_QWORD *a1, void **a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  void *v10;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  xpc_object_t object;
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 1174405120;
      v14[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2_8;
      v14[3] = &__block_descriptor_tmp_11_10;
      v10 = *a2;
      v14[4] = v7;
      object = v10;
      if (v10)
      {
        xpc_retain(v10);
        v11 = *a3;
        if (!*a3)
          goto LABEL_9;
      }
      else
      {
        object = xpc_null_create();
        v11 = *a3;
        if (!*a3)
        {
LABEL_9:
          aBlock = v11;
          ctu::SharedSynchronizable<TransportModule>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v14);
          if (aBlock)
            _Block_release(aBlock);
          xpc_release(object);
          object = 0;
          goto LABEL_12;
        }
      }
      v11 = _Block_copy(v11);
      goto LABEL_9;
    }
  }
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2_8(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  uint64_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  const char *v9;
  xpc_object_t value;
  int v11;
  NSObject *v12;
  uint64_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  unsigned int v16;
  xpc_object_t object;
  xpc_object_t v18[2];

  v18[1] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = xpc_dictionary_create(0, 0, 0);
  v4 = v3;
  v5 = MEMORY[0x1E0C812F8];
  if (v3)
  {
    object = v3;
  }
  else
  {
    v4 = xpc_null_create();
    object = v4;
    if (!v4)
    {
      v6 = xpc_null_create();
      v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v4) != v5)
  {
    v6 = xpc_null_create();
LABEL_8:
    object = v6;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
  v16 = -534716416;
  if (MEMORY[0x1C3B8A86C](*(_QWORD *)(a1 + 40)) == v5
    && (v9 = (const char *)*MEMORY[0x1E0CFB948],
        xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E0CFB948])))
  {
    value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), v9);
    v18[0] = value;
    if (value)
      xpc_retain(value);
    else
      v18[0] = xpc_null_create();
    v11 = xpc::dyn_cast_or_default((xpc *)v18, 0);
    xpc_release(v18[0]);
    v12 = *(NSObject **)(v2 + 88);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v18[0]) = 67109120;
      HIDWORD(v18[0]) = v11;
      _os_log_impl(&dword_1BF335000, v12, OS_LOG_TYPE_DEFAULT, "#I Transport bypass enable (%u)", (uint8_t *)v18, 8u);
    }
    v13 = *(_QWORD *)(v2 + 168);
    if (v13)
    {
      if ((*(unsigned int (**)(uint64_t, BOOL))(*(_QWORD *)v13 + 72))(v13, v11 != 0))
        v16 = 0;
    }
    else if (MEMORY[0x1C3B8A86C](object) == v5)
    {
      v14 = xpc_string_create("TransportService is not ready!");
      if (!v14)
        v14 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E0CFB0D0], v14);
      v15 = xpc_null_create();
      xpc_release(v14);
      xpc_release(v15);
    }
  }
  else
  {
    if (MEMORY[0x1C3B8A86C](object) == v5)
    {
      v7 = xpc_string_create("Invalid key!");
      if (!v7)
        v7 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E0CFB0D0], v7);
      v8 = xpc_null_create();
      xpc_release(v7);
      xpc_release(v8);
    }
    v16 = -534716414;
  }
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 48), &v16, &object);
  xpc_release(object);
}

void sub_1BF4DE404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, xpc_object_t a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_13(_QWORD *a1, uint64_t a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[5];
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      if (a1[5])
      {
        v12[0] = MEMORY[0x1E0C809B0];
        v12[1] = 1174405120;
        v12[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2_14;
        v12[3] = &__block_descriptor_tmp_19_8;
        v12[4] = v6;
        v9 = *a3;
        if (*a3)
          v9 = _Block_copy(v9);
        aBlock = v9;
        ctu::SharedSynchronizable<TransportModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v12);
        if (aBlock)
          _Block_release(aBlock);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2_14(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  uint64_t v15;
  xpc_object_t v16;
  xpc_object_t xdict;
  xpc_object_t object;

  v2 = *(_QWORD *)(a1 + 32);
  xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v3 = xpc_dictionary_create(0, 0, 0);
  v4 = v3;
  if (v3)
  {
    xdict = v3;
  }
  else
  {
    v4 = xpc_null_create();
    xdict = v4;
    if (!v4)
    {
      v5 = xpc_null_create();
      v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v4) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v4);
    goto LABEL_9;
  }
  v5 = xpc_null_create();
LABEL_8:
  xdict = v5;
LABEL_9:
  xpc_release(v4);
  switch(*(_DWORD *)(v2 + 152))
  {
    case 0:
      v6 = xpc_string_create("Wake data is not supported on this device.");
      if (!v6)
        v6 = xpc_null_create();
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB0D0], v6);
      v7 = xpc_null_create();
      xpc_release(v6);
      xpc_release(v7);
      LODWORD(object) = -534716412;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), (unsigned int *)&object, &xdict);
      break;
    case 1:
      v13 = xpc_string_create("Device has not entered sleep state after bootup. So, there is no wake data yet.");
      if (!v13)
        v13 = xpc_null_create();
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB0D0], v13);
      v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
      LODWORD(object) = -534716409;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), (unsigned int *)&object, &xdict);
      break;
    case 2:
      v8 = xpc_string_create("Requested for wake data from baseband. Please try again.");
      if (!v8)
        v8 = xpc_null_create();
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB0D0], v8);
      v9 = xpc_null_create();
      xpc_release(v8);
      xpc_release(v9);
      LODWORD(object) = -534716411;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), (unsigned int *)&object, &xdict);
      break;
    case 3:
      v10 = *(xpc_object_t *)(v2 + 160);
      if (v10)
        xpc_retain(*(xpc_object_t *)(v2 + 160));
      else
        v10 = xpc_null_create();
      v15 = *(_QWORD *)(a1 + 40);
      object = v10;
      v16 = xpc_null_create();
      (*(void (**)(uint64_t, _QWORD, xpc_object_t *))(v15 + 16))(v15, 0, &object);
      xpc_release(object);
      xpc_release(v16);
      break;
    default:
      v11 = xpc_string_create("Request for wake data from baseband returned error.");
      if (!v11)
        v11 = xpc_null_create();
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB0D0], v11);
      v12 = xpc_null_create();
      xpc_release(v11);
      xpc_release(v12);
      LODWORD(object) = -534716416;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), (unsigned int *)&object, &xdict);
      break;
  }
  xpc_release(xdict);
}

void sub_1BF4DE88C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t object)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  xpc_release(a9);
  _Unwind_Resume(a1);
}

void TransportModule::claimSystemWake_sync(TransportModule *this)
{
  xpc_object_t v2;
  xpc_object_t value;
  const object *v4;
  const void *v5;
  CFTypeID v6;
  const void *v7;
  const __CFString **v8;
  xpc_object_t v9;
  const object *v10;
  const void *v11;
  CFTypeID v12;
  const void *v13;
  uint64_t v14;
  __CFDictionary *Mutable;
  const __CFAllocator *v16;
  const void *v17;
  NSObject *v18;
  xpc_object_t object;
  _BYTE cf[12];
  __int16 v21;
  const void *v22;
  __int16 v23;
  __CFDictionary *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 38) != 3)
    return;
  v2 = (xpc_object_t)*((_QWORD *)this + 20);
  if (v2)
    xpc_retain(*((xpc_object_t *)this + 20));
  else
    v2 = xpc_null_create();
  value = xpc_dictionary_get_value(v2, (const char *)*MEMORY[0x1E0CFB410]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  xpc::bridge((xpc *)&object, v4);
  v5 = *(const void **)cf;
  if (!*(_QWORD *)cf || (v6 = CFGetTypeID(*(CFTypeRef *)cf), v6 != CFStringGetTypeID()))
  {
    v5 = 0;
    v7 = *(const void **)cf;
    if (!*(_QWORD *)cf)
      goto LABEL_14;
    goto LABEL_13;
  }
  CFRetain(v5);
  v7 = *(const void **)cf;
  if (*(_QWORD *)cf)
LABEL_13:
    CFRelease(v7);
LABEL_14:
  xpc_release(object);
  v8 = (const __CFString **)*MEMORY[0x1E0CFB408];
  v9 = xpc_dictionary_get_value(v2, (const char *)*MEMORY[0x1E0CFB408]);
  object = v9;
  if (v9)
    xpc_retain(v9);
  else
    object = xpc_null_create();
  xpc::bridge((xpc *)&object, v10);
  v11 = *(const void **)cf;
  if (*(_QWORD *)cf)
  {
    v12 = CFGetTypeID(*(CFTypeRef *)cf);
    if (v12 == CFDataGetTypeID())
    {
      CFRetain(v11);
      v13 = *(const void **)cf;
      if (!*(_QWORD *)cf)
        goto LABEL_23;
      goto LABEL_22;
    }
  }
  v11 = 0;
  v13 = *(const void **)cf;
  if (*(_QWORD *)cf)
LABEL_22:
    CFRelease(v13);
LABEL_23:
  xpc_release(object);
  v14 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)cf = 0;
  ctu::cf::convert_copy((ctu::cf *)cf, v8, (const char *)0x8000100, v14, v16);
  v17 = *(const void **)cf;
  object = *(xpc_object_t *)cf;
  *(_QWORD *)cf = v11;
  if (v11)
  {
    CFRetain(v11);
    if (v17)
      CFDictionaryAddValue(Mutable, v17, v11);
    CFRelease(v11);
  }
  if (v17)
    CFRelease(v17);
  IOPMClaimSystemWakeEvent();
  v18 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)cf = 138412802;
    *(_QWORD *)&cf[4] = CFSTR("com.apple.CommCenter");
    v21 = 2112;
    v22 = v5;
    v23 = 2112;
    v24 = Mutable;
    _os_log_impl(&dword_1BF335000, v18, OS_LOG_TYPE_DEFAULT, "#I \n--- IOPM System Wake ---\nIdentity: %@\nReason: %@\nDetails: %@---", cf, 0x20u);
  }
  if (Mutable)
    CFRelease(Mutable);
  if (v11)
    CFRelease(v11);
  if (v5)
    CFRelease(v5);
  xpc_release(v2);
}

void sub_1BF4DEC28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, xpc_object_t object, char a16)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void TransportModule::submitMetric_sync(TransportModule *this, xpc_object_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  size_t v13;
  xpc_object_t value;
  BOOL v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  size_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  size_t v27;
  size_t v28;
  uint64_t v29;
  size_t v30;
  uint64_t v31;
  NSObject *v32;
  size_t v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  size_t v41;
  uint64_t v42;
  size_t v43;
  uint64_t v44;
  size_t v45;
  uint64_t v46;
  size_t v47;
  int v48;
  size_t v49;
  size_t v50;
  uint64_t v51;
  xpc_object_t v52;
  xpc_object_t v53;
  xpc_object_t v54;
  xpc_object_t v55;
  xpc_object_t v56;
  xpc_object_t v57;
  const void *v58;
  size_t v59;
  size_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  const void *v64;
  xpc_object_t v65;
  uint8_t buf[8];
  size_t v67;
  unint64_t v68;
  xpc_object_t v69;
  xpc_object_t v70;
  xpc_object_t v71;
  xpc_object_t v72;
  xpc_object_t v73;
  xpc_object_t v74;
  xpc_object_t v75;
  xpc_object_t v76;
  xpc_object_t v77;
  xpc_object_t v78;
  xpc_object_t v79;
  xpc_object_t object;
  xpc_object_t v81;
  xpc_object_t v82;
  xpc_object_t v83;
  xpc_object_t v84;
  xpc_object_t v85;
  xpc_object_t v86;
  xpc_object_t *v87;
  uint64_t v88;
  xpc_object_t v89;
  xpc_object_t v90;

  v4 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I Submitting Wake Reason Info to AWD", buf, 2u);
  }
  v5 = MEMORY[0x1C3B8A86C](*a2);
  v6 = MEMORY[0x1E0C812F8];
  if (v5 == MEMORY[0x1E0C812F8])
  {
    v8 = xpc_dictionary_create(0, 0, 0);
    if (v8 || (v8 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8A86C](v8) == v6)
      {
        xpc_retain(v8);
        v9 = v8;
      }
      else
      {
        v9 = xpc_null_create();
      }
    }
    else
    {
      v9 = xpc_null_create();
      v8 = 0;
    }
    xpc_release(v8);
    v90 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    v10 = xpc_dictionary_create(0, 0, 0);
    v11 = v10;
    if (v10)
    {
      v90 = v10;
    }
    else
    {
      v11 = xpc_null_create();
      v90 = v11;
      if (!v11)
      {
        v12 = xpc_null_create();
        v11 = 0;
        goto LABEL_19;
      }
    }
    if (MEMORY[0x1C3B8A86C](v11) == v6)
    {
      xpc_retain(v11);
      goto LABEL_20;
    }
    v12 = xpc_null_create();
LABEL_19:
    v90 = v12;
LABEL_20:
    xpc_release(v11);
    v13 = *MEMORY[0x1E0CFB458];
    value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB458]);
    v15 = value != 0;
    if (value)
    {
      *(_QWORD *)buf = a2;
      v67 = v13;
      v16 = *MEMORY[0x1E0CFBF68];
      v87 = &v90;
      v88 = v16;
      xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v89);
      xpc_release(v89);
      v89 = 0;
    }
    v17 = *MEMORY[0x1E0CFBDF0];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFBDF0]))
    {
      *(_QWORD *)buf = a2;
      v67 = v17;
      v18 = *MEMORY[0x1E0CFBE58];
      v87 = &v90;
      v88 = v18;
      xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v86);
      xpc_release(v86);
      v86 = 0;
      v15 = 1;
    }
    v19 = *MEMORY[0x1E0CFB2B8];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB2B8]))
    {
      *(_QWORD *)buf = a2;
      v67 = v19;
      v20 = *MEMORY[0x1E0CFC018];
      v87 = &v90;
      v88 = v20;
      xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v85);
      xpc_release(v85);
      v85 = 0;
      v15 = 1;
    }
    v21 = *MEMORY[0x1E0CFB7A8];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB7A8]))
    {
      *(_QWORD *)buf = a2;
      v67 = v21;
      v22 = *MEMORY[0x1E0CFBEF8];
      v87 = &v90;
      v88 = v22;
      xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v84);
      xpc_release(v84);
      v84 = 0;
      v15 = 1;
    }
    v23 = *MEMORY[0x1E0CFB410];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB410]))
    {
      *(_QWORD *)buf = a2;
      v67 = v23;
      v24 = *MEMORY[0x1E0CFBD80];
      v87 = &v90;
      v88 = v24;
      xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v83);
      xpc_release(v83);
      v83 = 0;
      v15 = 1;
    }
    v25 = (const char *)*MEMORY[0x1E0CFB7B0];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB7B0]))
    {
      *(_QWORD *)buf = a2;
      v67 = (size_t)v25;
      v26 = *MEMORY[0x1E0CFBF00];
      v87 = &v90;
      v88 = v26;
      xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v82);
      xpc_release(v82);
      v82 = 0;
      v27 = *MEMORY[0x1E0CFBB10];
      if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFBB10]))
      {
        v81 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)buf = a2;
        v67 = v27;
        xpc::dict::object_proxy::operator xpc::dict((uint64_t)buf, &v81);
        if (xpc::operator==<char const*>(*a2, v25, MEMORY[0x1E0CFB5A0]))
        {
          v28 = *MEMORY[0x1E0CFBB18];
          *(_QWORD *)buf = &v81;
          v67 = v28;
          v29 = *MEMORY[0x1E0CFBE50];
          v87 = &v90;
          v88 = v29;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &object);
          xpc_release(object);
          object = 0;
          v30 = *MEMORY[0x1E0CFB9F8];
          *(_QWORD *)buf = &v81;
          v67 = v30;
          v31 = *MEMORY[0x1E0CFBDC8];
          v87 = &v90;
          v88 = v31;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v79);
          xpc_release(v79);
          v79 = 0;
        }
        else if (xpc::operator==<char const*>(*a2, v25, MEMORY[0x1E0CFB6E8]))
        {
          v33 = *MEMORY[0x1E0CFB8F0];
          *(_QWORD *)buf = &v81;
          v67 = v33;
          v34 = *MEMORY[0x1E0CFBAE0];
          v87 = &v90;
          v88 = v34;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v78);
          xpc_release(v78);
          v78 = 0;
          v35 = *MEMORY[0x1E0CFBB20];
          *(_QWORD *)buf = &v81;
          v67 = v35;
          v36 = *MEMORY[0x1E0CFBC88];
          v87 = &v90;
          v88 = v36;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v77);
          xpc_release(v77);
          v77 = 0;
          v37 = *MEMORY[0x1E0CFBBC8];
          *(_QWORD *)buf = &v81;
          v67 = v37;
          v38 = *MEMORY[0x1E0CFBD78];
          v87 = &v90;
          v88 = v38;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v76);
          xpc_release(v76);
          v76 = 0;
          v39 = *MEMORY[0x1E0CFBDD8];
          *(_QWORD *)buf = &v81;
          v67 = v39;
          v40 = *MEMORY[0x1E0CFBC80];
          v87 = &v90;
          v88 = v40;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v75);
          xpc_release(v75);
          v75 = 0;
          v41 = *MEMORY[0x1E0CFB8E8];
          *(_QWORD *)buf = &v81;
          v67 = v41;
          v42 = *MEMORY[0x1E0CFB9D0];
          v87 = &v90;
          v88 = v42;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v74);
          xpc_release(v74);
          v74 = 0;
        }
        else if (xpc::operator==<char const*>(*a2, v25, MEMORY[0x1E0CFB6D8]))
        {
          v43 = *MEMORY[0x1E0CFB8E0];
          *(_QWORD *)buf = &v81;
          v67 = v43;
          v44 = *MEMORY[0x1E0CFBAE0];
          v87 = &v90;
          v88 = v44;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v73);
          xpc_release(v73);
          v73 = 0;
          v45 = *MEMORY[0x1E0CFBB08];
          *(_QWORD *)buf = &v81;
          v67 = v45;
          v46 = *MEMORY[0x1E0CFBC88];
          v87 = &v90;
          v88 = v46;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v72);
          xpc_release(v72);
          v72 = 0;
          v47 = *MEMORY[0x1E0CFBB00];
          *(_QWORD *)buf = &v81;
          v67 = v47;
          xpc::dict::object_proxy::operator xpc::object((uint64_t)buf, &v87);
          v48 = xpc::dyn_cast_or_default((xpc *)&v87, 0);
          xpc_release(v87);
          v70 = xpc_int64_create(v48 | 0x10000);
          if (!v70)
            v70 = xpc_null_create();
          v49 = *MEMORY[0x1E0CFBC80];
          *(_QWORD *)buf = &v90;
          v67 = v49;
          xpc::dict::object_proxy::operator=((uint64_t)buf, &v70, &v71);
          xpc_release(v71);
          v71 = 0;
          xpc_release(v70);
          v70 = 0;
          v50 = *MEMORY[0x1E0CFB8E8];
          *(_QWORD *)buf = &v81;
          v67 = v50;
          v51 = *MEMORY[0x1E0CFB9D0];
          v87 = &v90;
          v88 = v51;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v69);
          xpc_release(v69);
          v69 = 0;
        }
        xpc_release(v81);
      }
    }
    else if (!v15)
    {
      v32 = *((_QWORD *)this + 11);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1BF335000, v32, OS_LOG_TYPE_ERROR, "Wake Reason data is missing", buf, 2u);
      }
      goto LABEL_63;
    }
    v52 = xpc_string_create((const char *)*MEMORY[0x1E0CFC190]);
    if (!v52)
      v52 = xpc_null_create();
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E0CFB020], v52);
    v53 = xpc_null_create();
    xpc_release(v52);
    xpc_release(v53);
    v54 = xpc_int64_create(524467);
    if (!v54)
      v54 = xpc_null_create();
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E0CFB0E8], v54);
    v55 = xpc_null_create();
    xpc_release(v54);
    xpc_release(v55);
    v56 = v90;
    if (v90)
      xpc_retain(v90);
    else
      v56 = xpc_null_create();
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E0CFB018], v56);
    v57 = xpc_null_create();
    xpc_release(v56);
    xpc_release(v57);
    v58 = (const void *)*MEMORY[0x1E0CFB5E0];
    v59 = strlen((const char *)*MEMORY[0x1E0CFB5E0]);
    if (v59 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v60 = v59;
    if (v59 >= 0x17)
    {
      v62 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v59 | 7) != 0x17)
        v62 = v59 | 7;
      v63 = v62 + 1;
      v61 = operator new(v62 + 1);
      v67 = v60;
      v68 = v63 | 0x8000000000000000;
      *(_QWORD *)buf = v61;
    }
    else
    {
      HIBYTE(v68) = v59;
      v61 = buf;
      if (!v59)
      {
        buf[0] = 0;
        v65 = v9;
        if (v9)
        {
LABEL_55:
          xpc_retain(v9);
          goto LABEL_61;
        }
LABEL_60:
        v65 = xpc_null_create();
LABEL_61:
        v64 = 0;
        Service::runCommand((uint64_t)this, (uint64_t)buf, &v65, &v64);
        xpc_release(v65);
        v65 = 0;
        if (SHIBYTE(v68) < 0)
          operator delete(*(void **)buf);
LABEL_63:
        xpc_release(v90);
        xpc_release(v9);
        return;
      }
    }
    memmove(v61, v58, v60);
    *((_BYTE *)v61 + v60) = 0;
    v65 = v9;
    if (v9)
      goto LABEL_55;
    goto LABEL_60;
  }
  v7 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF335000, v7, OS_LOG_TYPE_ERROR, "Invalid Wake Reason dictionary", buf, 2u);
  }
}

void sub_1BF4DF69C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,xpc_object_t object)
{
  void *v30;
  uint64_t v31;

  xpc_release(*(xpc_object_t *)(v31 - 96));
  xpc_release(object);
  xpc_release(*(xpc_object_t *)(v31 - 72));
  xpc_release(v30);
  _Unwind_Resume(a1);
}

BOOL xpc::operator==<char const*>(void *a1, const char *a2, const char **a3)
{
  xpc_object_t value;
  xpc_object_t v5;
  xpc_object_t v6;
  _BOOL8 v7;

  value = xpc_dictionary_get_value(a1, a2);
  if (value)
  {
    v5 = value;
    xpc_retain(value);
  }
  else
  {
    v5 = xpc_null_create();
  }
  v6 = xpc_string_create(*a3);
  if (!v6)
    v6 = xpc_null_create();
  v7 = xpc_equal(v5, v6);
  xpc_release(v6);
  xpc_release(v5);
  return v7;
}

void sub_1BF4DF878(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  xpc_release(v2);
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void TransportModule::finishInitialization_sync(TransportModule *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const char *v10;
  size_t v11;
  void *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  const void *v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  NSObject *v62;
  NSObject *v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  NSObject *v72;
  unint64_t v73;
  void *v74;
  NSObject *v75;
  const void *v76;
  size_t v77;
  void *v78;
  void *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  const void *v83;
  size_t v84;
  void *v85;
  void *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  const void *v90;
  size_t v91;
  void *v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  const void *v97;
  size_t v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  NSObject *v103;
  uint64_t v104;
  uint64_t v105;
  NSObject *v106;
  void *v107;
  NSObject *v108;
  void *v109[2];
  unint64_t v110;
  void *v111;
  dispatch_object_t v112;
  void *v113[2];
  unint64_t v114;
  void *v115;
  dispatch_object_t v116;
  void *v117[2];
  unint64_t v118;
  void *v119;
  dispatch_object_t v120;
  void *__p[2];
  unint64_t v122;
  _QWORD v123[6];
  std::__shared_weak_count *v124;
  void *v125;
  dispatch_object_t v126;
  _QWORD v127[6];
  std::__shared_weak_count *v128;
  void *v129;
  dispatch_object_t v130;
  _QWORD v131[6];
  std::__shared_weak_count *v132;
  _QWORD v133[6];
  std::__shared_weak_count *v134;
  _QWORD aBlock[6];
  std::__shared_weak_count *v136;
  void *v137;
  dispatch_object_t object;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  __int128 v145;
  __int128 v146;
  const void *v147;
  void *__dst[2];
  unint64_t v149;
  _BYTE buf[24];
  const char *v151;
  __int128 *v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v2 || (v3 = *((_QWORD *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (const char *)(*(uint64_t (**)(TransportModule *))(*(_QWORD *)this + 16))(this);
  v11 = strlen(v10);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = (void *)v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = (void **)operator new(v14 + 1);
    __dst[1] = v12;
    v149 = v15 | 0x8000000000000000;
    __dst[0] = v13;
  }
  else
  {
    HIBYTE(v149) = v11;
    v13 = __dst;
    if (!v11)
      goto LABEL_17;
  }
  memmove(v13, v10, (size_t)v12);
LABEL_17:
  *((_BYTE *)v12 + (_QWORD)v13) = 0;
  v147 = 0;
  AppleBasebandManager::create();
  v16 = *(_OWORD *)buf;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  *(_OWORD *)((char *)this + 200) = v16;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_26;
  v21 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
  {
LABEL_26:
    v23 = v147;
    if (!v147)
      goto LABEL_28;
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  v23 = v147;
  if (v147)
LABEL_27:
    CFRelease(v23);
LABEL_28:
  if (SHIBYTE(v149) < 0)
    operator delete(__dst[0]);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  v25 = MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v151 = (const char *)&__block_descriptor_tmp_13_2;
  v152 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v26 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v145 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_35;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, buf);
    v26 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v145 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_35;
  }
  v27 = (unint64_t *)(v26 + 8);
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
LABEL_35:
  v29 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  v143 = *((_QWORD *)this + 25);
  v144 = v29;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v32 || (v33 = *((_QWORD *)this + 15), (v34 = std::__shared_weak_count::lock(v32)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v35 = v34;
  v141 = v33;
  v142 = v34;
  v36 = (unint64_t *)&v34->__shared_weak_owners_;
  do
    v37 = __ldxr(v36);
  while (__stxr(v37 + 1, v36));
  v38 = (unint64_t *)&v34->__shared_owners_;
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v35);
  }
  v40 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
  v139 = *((_QWORD *)this + 27);
  v140 = v40;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  TransportService::create((uint64_t *)&v145, &v143, &v141, &v139, &v146);
  v43 = v146;
  v146 = 0uLL;
  v44 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  *(_OWORD *)((char *)this + 168) = v43;
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
  if (*((_QWORD *)&v146 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = v140;
  if (v140)
  {
    v51 = (unint64_t *)&v140->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (v142)
    std::__shared_weak_count::__release_weak(v142);
  v53 = v144;
  if (v144)
  {
    v54 = (unint64_t *)&v144->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
  if (*((_QWORD *)&v145 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = *((_QWORD *)this + 21);
  if (!v59)
  {
    v106 = GetOsLogContext()[1];
    if (!os_log_type_enabled(v106, OS_LOG_TYPE_FAULT))
      __break(1u);
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "ABM ASSERT";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "fTransportService != NULL";
    *(_WORD *)&buf[22] = 2080;
    v151 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Serv"
           "er/Transport/TransportModule.cpp";
    LOWORD(v152) = 1024;
    *(_DWORD *)((char *)&v152 + 2) = 366;
    _os_log_fault_impl(&dword_1BF335000, v106, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", buf, 0x26u);
    __break(1u);
LABEL_214:
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (*((_DWORD *)this + 38))
  {
    aBlock[0] = v25;
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN15TransportModule25finishInitialization_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_27_6;
    aBlock[4] = this;
    aBlock[5] = v3;
    v136 = v5;
    do
      v60 = __ldxr(p_shared_weak_owners);
    while (__stxr(v60 + 1, p_shared_weak_owners));
    v61 = _Block_copy(aBlock);
    v62 = *((_QWORD *)this + 17);
    if (v62)
      dispatch_retain(*((dispatch_object_t *)this + 17));
    v137 = v61;
    object = v62;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v59 + 80))(v59, &v137);
    if (object)
      dispatch_release(object);
    if (v137)
      _Block_release(v137);
    if (v136)
      std::__shared_weak_count::__release_weak(v136);
  }
  else
  {
    v63 = *((_QWORD *)this + 11);
    if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF335000, v63, OS_LOG_TYPE_DEFAULT, "#I Wake reason is not supported by this baseband", buf, 2u);
    }
  }
  memset(buf, 170, 16);
  v133[0] = v25;
  v133[1] = 1174405120;
  v133[2] = ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_28;
  v133[3] = &__block_descriptor_tmp_30_3;
  v133[4] = this;
  v133[5] = v3;
  v134 = v5;
  do
    v64 = __ldxr(p_shared_weak_owners);
  while (__stxr(v64 + 1, p_shared_weak_owners));
  v65 = _Block_copy(v133);
  v66 = *((_QWORD *)this + 17);
  if (v66)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  *(_QWORD *)buf = v65;
  *(_QWORD *)&buf[8] = v66;
  *(_QWORD *)&v146 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v146 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v131[0] = v25;
  v131[1] = 1174405120;
  v131[2] = ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_31;
  v131[3] = &__block_descriptor_tmp_33_6;
  v131[4] = this;
  v131[5] = v3;
  v132 = v5;
  do
    v67 = __ldxr(p_shared_weak_owners);
  while (__stxr(v67 + 1, p_shared_weak_owners));
  v68 = _Block_copy(v131);
  v69 = *((_QWORD *)this + 17);
  if (v69)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  *(_QWORD *)&v146 = v68;
  *((_QWORD *)&v146 + 1) = v69;
  v129 = (void *)0xAAAAAAAAAAAAAAAALL;
  v130 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v127[0] = v25;
  v127[1] = 1174405120;
  v127[2] = ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_34;
  v127[3] = &__block_descriptor_tmp_35_4;
  v127[4] = this;
  v127[5] = v3;
  v128 = v5;
  do
    v70 = __ldxr(p_shared_weak_owners);
  while (__stxr(v70 + 1, p_shared_weak_owners));
  v71 = _Block_copy(v127);
  v72 = *((_QWORD *)this + 17);
  if (v72)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v129 = v71;
  v130 = v72;
  v125 = (void *)0xAAAAAAAAAAAAAAAALL;
  v126 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v123[0] = v25;
  v123[1] = 1174405120;
  v123[2] = ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_36;
  v123[3] = &__block_descriptor_tmp_37_2;
  v123[4] = this;
  v123[5] = v3;
  v124 = v5;
  do
    v73 = __ldxr(p_shared_weak_owners);
  while (__stxr(v73 + 1, p_shared_weak_owners));
  v74 = _Block_copy(v123);
  v75 = *((_QWORD *)this + 17);
  if (v75)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v125 = v74;
  v126 = v75;
  v76 = (const void *)*MEMORY[0x1E0CFBD68];
  v77 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  if (v77 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_214;
  v78 = (void *)v77;
  if (v77 >= 0x17)
  {
    v81 = (v77 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v77 | 7) != 0x17)
      v81 = v77 | 7;
    v82 = v81 + 1;
    v79 = operator new(v81 + 1);
    __p[1] = v78;
    v122 = v82 | 0x8000000000000000;
    __p[0] = v79;
LABEL_114:
    memmove(v79, v76, (size_t)v78);
    *((_BYTE *)v78 + (_QWORD)v79) = 0;
    v80 = (void *)v146;
    if (!(_QWORD)v146)
      goto LABEL_116;
    goto LABEL_115;
  }
  HIBYTE(v122) = v77;
  v79 = __p;
  if (v77)
    goto LABEL_114;
  LOBYTE(__p[0]) = 0;
  v80 = (void *)v146;
  if ((_QWORD)v146)
LABEL_115:
    v80 = _Block_copy(v80);
LABEL_116:
  v119 = v80;
  v120 = (dispatch_object_t)*((_QWORD *)&v146 + 1);
  if (*((_QWORD *)&v146 + 1))
    dispatch_retain(*((dispatch_object_t *)&v146 + 1));
  AppleBasebandManager::setEventHandler();
  if (v120)
    dispatch_release(v120);
  if (v119)
    _Block_release(v119);
  if (SHIBYTE(v122) < 0)
    operator delete(__p[0]);
  v83 = (const void *)*MEMORY[0x1E0CFB9A8];
  v84 = strlen((const char *)*MEMORY[0x1E0CFB9A8]);
  if (v84 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_214;
  v85 = (void *)v84;
  if (v84 >= 0x17)
  {
    v88 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v84 | 7) != 0x17)
      v88 = v84 | 7;
    v89 = v88 + 1;
    v86 = operator new(v88 + 1);
    v117[1] = v85;
    v118 = v89 | 0x8000000000000000;
    v117[0] = v86;
LABEL_132:
    memmove(v86, v83, (size_t)v85);
    *((_BYTE *)v85 + (_QWORD)v86) = 0;
    v87 = *(void **)buf;
    if (!*(_QWORD *)buf)
      goto LABEL_134;
    goto LABEL_133;
  }
  HIBYTE(v118) = v84;
  v86 = v117;
  if (v84)
    goto LABEL_132;
  LOBYTE(v117[0]) = 0;
  v87 = *(void **)buf;
  if (*(_QWORD *)buf)
LABEL_133:
    v87 = _Block_copy(v87);
LABEL_134:
  v115 = v87;
  v116 = *(dispatch_object_t *)&buf[8];
  if (*(_QWORD *)&buf[8])
    dispatch_retain(*(dispatch_object_t *)&buf[8]);
  AppleBasebandManager::setEventHandler();
  if (v116)
    dispatch_release(v116);
  if (v115)
    _Block_release(v115);
  if (SHIBYTE(v118) < 0)
    operator delete(v117[0]);
  v90 = (const void *)*MEMORY[0x1E0CFBBB0];
  v91 = strlen((const char *)*MEMORY[0x1E0CFBBB0]);
  if (v91 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_214;
  v92 = (void *)v91;
  if (v91 >= 0x17)
  {
    v95 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v91 | 7) != 0x17)
      v95 = v91 | 7;
    v96 = v95 + 1;
    v93 = operator new(v95 + 1);
    v113[1] = v92;
    v114 = v96 | 0x8000000000000000;
    v113[0] = v93;
LABEL_150:
    memmove(v93, v90, (size_t)v92);
    *((_BYTE *)v92 + (_QWORD)v93) = 0;
    v94 = v129;
    if (!v129)
      goto LABEL_152;
    goto LABEL_151;
  }
  HIBYTE(v114) = v91;
  v93 = v113;
  if (v91)
    goto LABEL_150;
  LOBYTE(v113[0]) = 0;
  v94 = v129;
  if (v129)
LABEL_151:
    v94 = _Block_copy(v94);
LABEL_152:
  v111 = v94;
  v112 = v130;
  if (v130)
    dispatch_retain(v130);
  AppleBasebandManager::setEventHandler();
  if (v112)
    dispatch_release(v112);
  if (v111)
    _Block_release(v111);
  if (SHIBYTE(v114) < 0)
    operator delete(v113[0]);
  v97 = (const void *)*MEMORY[0x1E0CFB9B0];
  v98 = strlen((const char *)*MEMORY[0x1E0CFB9B0]);
  if (v98 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_214;
  v99 = (void *)v98;
  if (v98 >= 0x17)
  {
    v104 = (v98 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v98 | 7) != 0x17)
      v104 = v98 | 7;
    v105 = v104 + 1;
    v100 = operator new(v104 + 1);
    v109[1] = v99;
    v110 = v105 | 0x8000000000000000;
    v109[0] = v100;
  }
  else
  {
    HIBYTE(v110) = v98;
    v100 = v109;
    if (!v98)
    {
      LOBYTE(v109[0]) = 0;
      v101 = v125;
      if (v125)
        goto LABEL_164;
      goto LABEL_201;
    }
  }
  memmove(v100, v97, (size_t)v99);
  *((_BYTE *)v99 + (_QWORD)v100) = 0;
  v101 = v125;
  if (v125)
  {
LABEL_164:
    v102 = _Block_copy(v101);
    v103 = v126;
    v107 = v102;
    v108 = v126;
    if (!v126)
      goto LABEL_166;
    goto LABEL_165;
  }
LABEL_201:
  v103 = v126;
  v107 = 0;
  v108 = v126;
  if (v126)
LABEL_165:
    dispatch_retain(v103);
LABEL_166:
  AppleBasebandManager::setEventHandler();
  if (v108)
    dispatch_release(v108);
  if (v107)
    _Block_release(v107);
  if (SHIBYTE(v110) < 0)
    operator delete(v109[0]);
  AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 25));
  if (v103)
    dispatch_release(v103);
  if (v101)
    _Block_release(v101);
  if (v124)
    std::__shared_weak_count::__release_weak(v124);
  if (v130)
    dispatch_release(v130);
  if (v129)
    _Block_release(v129);
  if (v128)
    std::__shared_weak_count::__release_weak(v128);
  if (*((_QWORD *)&v146 + 1))
    dispatch_release(*((dispatch_object_t *)&v146 + 1));
  if ((_QWORD)v146)
    _Block_release((const void *)v146);
  if (v132)
    std::__shared_weak_count::__release_weak(v132);
  if (*(_QWORD *)&buf[8])
    dispatch_release(*(dispatch_object_t *)&buf[8]);
  if (*(_QWORD *)buf)
    _Block_release(*(const void **)buf);
  if (v134)
    std::__shared_weak_count::__release_weak(v134);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF4E04DC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void ___ZN15TransportModule25finishInitialization_syncEv_block_invoke(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  _DWORD *v7;
  int v8;
  xpc_object_t v9;
  xpc_object_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  void *v13;
  xpc_object_t v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  void **value;
  void **v24;
  char v25;
  void **v26;
  void **v27;
  uint64_t v28;
  NSObject *v29;
  NSObject *v30;
  void **v31;
  NSObject *v32;
  void ***v33;
  const void *v34;
  size_t v35;
  void *v36;
  void **v37;
  uint64_t v38;
  uint64_t v39;
  xpc_object_t v40;
  const object *v41;
  void **v42;
  CFTypeID v43;
  NSObject *v44;
  void ***p_block;
  unint64_t *p_shared_owners;
  unint64_t v47;
  void *aBlock;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v51;
  xpc_object_t xdict;
  std::__shared_weak_count *v54;
  __int128 *p_buf;
  void **block;
  uint64_t v57;
  _QWORD *(*v58)(uint64_t);
  void *v59;
  uint64_t v60;
  __int128 **p_p_buf;
  __int128 buf;
  void (*v63)(uint64_t);
  void *v64;
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v54 = v6;
    if (v6)
    {
      if (!a1[5])
      {
        v11 = v6;
LABEL_92:
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v47 = __ldaxr(p_shared_owners);
        while (__stlxr(v47 - 1, p_shared_owners));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        return;
      }
      v7 = (_DWORD *)(v5 + 152);
      v8 = *(_DWORD *)(v5 + 152);
      v9 = *(xpc_object_t *)(v5 + 160);
      if (v9)
      {
        xpc_retain(*(xpc_object_t *)(v5 + 160));
        *v7 = *(_DWORD *)a2;
        v10 = *(xpc_object_t *)(a2 + 8);
        if (v10)
        {
LABEL_6:
          xpc_retain(v10);
          goto LABEL_10;
        }
      }
      else
      {
        v9 = xpc_null_create();
        *v7 = *(_DWORD *)a2;
        v10 = *(xpc_object_t *)(a2 + 8);
        if (v10)
          goto LABEL_6;
      }
      v10 = xpc_null_create();
LABEL_10:
      v12 = *(void **)(v5 + 160);
      *(_QWORD *)(v5 + 160) = v10;
      xpc_release(v12);
      if (v8 != 2)
        goto LABEL_91;
      if (*v7 != 3)
      {
        v15 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          WakeReason::describe((WakeReason *)&block, (_DWORD *)(v5 + 152));
          v27 = SHIBYTE(v58) >= 0 ? (void **)&block : block;
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v27;
          _os_log_error_impl(&dword_1BF335000, v15, OS_LOG_TYPE_ERROR, "Baseband wake data (Error): %s", (uint8_t *)&buf, 0xCu);
          if (SHIBYTE(v58) < 0)
            operator delete(block);
        }
        v16 = *(_QWORD *)(v5 + 184);
        if (v16)
        {
          *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
          *((_QWORD *)&buf + 1) = 0x40000000;
          v63 = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
          v64 = &__block_descriptor_tmp_27_3;
          v65 = v16;
          p_buf = &buf;
          block = (void **)MEMORY[0x1E0C809B0];
          v57 = 0x40000000;
          v58 = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
          v59 = &__block_descriptor_tmp_21_4;
          v60 = v16 + 72;
          p_p_buf = &p_buf;
          v17 = *(NSObject **)(v16 + 88);
          if (*(_QWORD *)(v16 + 96))
            dispatch_async_and_wait(v17, &block);
          else
            dispatch_sync(v17, &block);
        }
LABEL_91:
        xpc_release(v9);
        v11 = v54;
        if (!v54)
          return;
        goto LABEL_92;
      }
      v13 = *(void **)(v5 + 160);
      xdict = v13;
      if (v13)
      {
        xpc_retain(v13);
        v14 = xdict;
      }
      else
      {
        v14 = xpc_null_create();
        xdict = v14;
      }
      v18 = MEMORY[0x1C3B8A86C](v14);
      v19 = MEMORY[0x1E0C812F8];
      if (v18 == MEMORY[0x1E0C812F8])
      {
        *(_QWORD *)&buf = 0xAAAAAAAAAAAAAAAALL;
        v22 = *MEMORY[0x1E0CFBB10];
        block = &xdict;
        v57 = v22;
        xpc::dict::object_proxy::operator xpc::dict((uint64_t)&block, &buf);
        value = (void **)xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E0CFBDF0]);
        block = value;
        if (value)
          xpc_retain(value);
        else
          block = (void **)xpc_null_create();
        v21 = xpc::dyn_cast_or_default((xpc *)&block, 0);
        xpc_release(block);
        v24 = (void **)xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E0CFB7A8]);
        block = v24;
        if (v24)
          xpc_retain(v24);
        else
          block = (void **)xpc_null_create();
        v20 = xpc::dyn_cast_or_default((xpc *)&block, 0);
        xpc_release(block);
        if (MEMORY[0x1C3B8A86C](buf) == v19)
        {
          v26 = (void **)xpc_dictionary_get_value((xpc_object_t)buf, (const char *)*MEMORY[0x1E0CFB8E8]);
          block = v26;
          if (v26)
            xpc_retain(v26);
          else
            block = (void **)xpc_null_create();
          v25 = xpc::dyn_cast_or_default((xpc *)&block, 0);
          xpc_release(block);
        }
        else
        {
          v25 = 0;
        }
        xpc_release((xpc_object_t)buf);
        if ((v25 & 1) != 0)
          goto LABEL_55;
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
      v28 = *(_QWORD *)(v5 + 184);
      if (v28)
      {
        *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
        *((_QWORD *)&buf + 1) = 0x40000000;
        v63 = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
        v64 = &__block_descriptor_tmp_27_3;
        v65 = v28;
        p_buf = &buf;
        block = (void **)MEMORY[0x1E0C809B0];
        v57 = 0x40000000;
        v58 = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
        v59 = &__block_descriptor_tmp_21_4;
        v60 = v28 + 72;
        p_p_buf = &p_buf;
        v29 = *(NSObject **)(v28 + 88);
        if (*(_QWORD *)(v28 + 96))
        {
          dispatch_async_and_wait(v29, &block);
          if ((v21 & 1) == 0)
            goto LABEL_43;
LABEL_56:
          TransportModule::claimSystemWake_sync((TransportModule *)v5);
          TransportModule::notifyWakeToNetworkStack_sync((TransportModule *)v5);
          v34 = (const void *)*MEMORY[0x1E0CFB8A8];
          v35 = strlen((const char *)*MEMORY[0x1E0CFB8A8]);
          if (v35 >= 0x7FFFFFFFFFFFFFF8)
            std::string::__throw_length_error[abi:ne180100]();
          v36 = (void *)v35;
          if (v35 >= 0x17)
          {
            v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v35 | 7) != 0x17)
              v38 = v35 | 7;
            v39 = v38 + 1;
            v37 = (void **)operator new(v38 + 1);
            __dst[1] = v36;
            v51 = v39 | 0x8000000000000000;
            __dst[0] = v37;
          }
          else
          {
            HIBYTE(v51) = v35;
            v37 = __dst;
            if (!v35)
            {
LABEL_64:
              *((_BYTE *)v36 + (_QWORD)v37) = 0;
              v40 = *(xpc_object_t *)(v5 + 160);
              if (v40)
              {
                xpc_retain(*(xpc_object_t *)(v5 + 160));
                *(_QWORD *)&buf = v40;
              }
              else
              {
                v40 = xpc_null_create();
                *(_QWORD *)&buf = v40;
                if (!v40)
                {
                  v40 = 0;
                  *(_QWORD *)&buf = xpc_null_create();
LABEL_70:
                  xpc::bridge((xpc *)&buf, v41);
                  v42 = block;
                  if (block && (v43 = CFGetTypeID(block), v43 == CFDictionaryGetTypeID()))
                  {
                    cf = v42;
                    CFRetain(v42);
                  }
                  else
                  {
                    cf = 0;
                  }
                  aBlock = 0;
                  Service::broadcastEvent(v5, (uint64_t)__dst, &cf, (const void **)&aBlock);
                  if (aBlock)
                    _Block_release(aBlock);
                  if (cf)
                    CFRelease(cf);
                  if (block)
                    CFRelease(block);
                  xpc_release((xpc_object_t)buf);
                  *(_QWORD *)&buf = 0;
                  xpc_release(v40);
                  if (SHIBYTE(v51) < 0)
                    operator delete(__dst[0]);
                  v44 = *(NSObject **)(v5 + 88);
                  if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
                    goto LABEL_89;
                  WakeReason::describe((WakeReason *)&block, (_DWORD *)(v5 + 152));
                  if (SHIBYTE(v58) >= 0)
                    p_block = &block;
                  else
                    p_block = (void ***)block;
                  LODWORD(buf) = 136315138;
                  *(_QWORD *)((char *)&buf + 4) = p_block;
                  _os_log_impl(&dword_1BF335000, v44, OS_LOG_TYPE_DEFAULT, "#I Baseband wake data (Did wake AP): %s", (uint8_t *)&buf, 0xCu);
                  goto LABEL_87;
                }
              }
              xpc_retain(v40);
              goto LABEL_70;
            }
          }
          memmove(v37, v34, (size_t)v36);
          goto LABEL_64;
        }
        dispatch_sync(v29, &block);
        if ((v21 & 1) != 0)
          goto LABEL_56;
LABEL_43:
        v30 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          WakeReason::describe((WakeReason *)&block, (_DWORD *)(v5 + 152));
          v31 = SHIBYTE(v58) >= 0 ? (void **)&block : block;
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v31;
          _os_log_impl(&dword_1BF335000, v30, OS_LOG_TYPE_DEFAULT, "#I Baseband wake data (Did NOT wake AP): %s", (uint8_t *)&buf, 0xCu);
          if (SHIBYTE(v58) < 0)
            operator delete(block);
        }
        if (!v20)
          goto LABEL_90;
        v32 = *(NSObject **)(v5 + 88);
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
LABEL_89:
          TransportModule::submitMetric_sync((TransportModule *)v5, &xdict);
LABEL_90:
          xpc_release(xdict);
          goto LABEL_91;
        }
        WakeReason::describe((WakeReason *)&block, (_DWORD *)(v5 + 152));
        if (SHIBYTE(v58) >= 0)
          v33 = &block;
        else
          v33 = (void ***)block;
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v33;
        _os_log_error_impl(&dword_1BF335000, v32, OS_LOG_TYPE_ERROR, "System and Baseband wake reason mismatch: %s", (uint8_t *)&buf, 0xCu);
LABEL_87:
        if (SHIBYTE(v58) < 0)
          operator delete(block);
        goto LABEL_89;
      }
LABEL_55:
      if (v21)
        goto LABEL_56;
      goto LABEL_43;
    }
  }
}

void sub_1BF4E0DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, xpc_object_t a18, char a19, uint64_t a20,uint64_t a21,xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void TransportModule::notifyWakeToNetworkStack_sync(TransportModule *this)
{
  xpc_object_t v2;
  int v3;
  NSObject *v4;
  int *v5;
  char *v6;
  int v7;
  uint8_t buf[4];
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 38) == 3)
  {
    v2 = (xpc_object_t)*((_QWORD *)this + 20);
    if (v2)
      xpc_retain(*((xpc_object_t *)this + 20));
    else
      v2 = xpc_null_create();
    if (xpc::operator==<char const*>(MEMORY[0x1E0CFB4C0], v2, (char *)*MEMORY[0x1E0CFB410])
      && xpc::operator==<char const*>(MEMORY[0x1E0CFB5A0], v2, (char *)*MEMORY[0x1E0CFB7B0]))
    {
      v7 = 15;
      v3 = sysctlbyname("net.link.generic.system.port_used.wake_pkt_event_notify", 0, 0, &v7, 4uLL);
      v4 = *((_QWORD *)this + 11);
      if (v3)
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          v5 = __error();
          v6 = strerror(*v5);
          *(_DWORD *)buf = 136315138;
          v9 = v6;
          _os_log_error_impl(&dword_1BF335000, v4, OS_LOG_TYPE_ERROR, "Failed to notify networking stack about Baseband wake packet, error: (%s)", buf, 0xCu);
        }
      }
      else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I Notified networking stack about Baseband wake packet", buf, 2u);
      }
    }
    xpc_release(v2);
  }
}

void sub_1BF4E10B8(_Unwind_Exception *a1)
{
  void *v1;

  xpc_release(v1);
  _Unwind_Resume(a1);
}

uint64_t WakeReason::describe(WakeReason *this, _DWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  _QWORD *v15;
  xpc::object *v16;
  uint64_t v17;
  _QWORD *v18;
  void **v19;
  void *v20;
  _QWORD *v21;
  char v22;
  size_t v23;
  const void **v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  WakeReason *v29;
  void *__p[2];
  char v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *v38[2];
  __int128 v39;
  unint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v40 = 0xAAAAAAAAAAAAAAAALL;
  v50 = v4;
  v49 = v4;
  v48 = v4;
  v47 = v4;
  v46 = v4;
  v45 = v4;
  v44 = v4;
  v43 = v4;
  v42 = v4;
  *(_OWORD *)v38 = v4;
  v39 = v4;
  v36 = v4;
  v37 = v4;
  v34 = v4;
  v35 = v4;
  v5 = MEMORY[0x1E0DE4FE0];
  v6 = MEMORY[0x1E0DE4FE0] + 64;
  v41 = MEMORY[0x1E0DE4FE0] + 64;
  v7 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v33 + *(_QWORD *)(v33 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v33 + *(_QWORD *)(v33 - 24));
  std::ios_base::init(v9, &v34);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v33 = v5 + 24;
  v41 = v6;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v34 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v38 = 0u;
  v39 = 0u;
  LODWORD(v40) = 16;
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"WakeStatus:'", 12);
  switch(*a2)
  {
    case 0:
      v12 = 13;
      v13 = "kNotSupported";
      goto LABEL_8;
    case 1:
      v12 = 13;
      v13 = "kNotAvailable";
LABEL_8:
      v32 = 13;
      __p[0] = *(void **)v13;
      *(void **)((char *)__p + 5) = *(void **)(v13 + 5);
      BYTE5(__p[1]) = 0;
      break;
    case 2:
      v12 = 10;
      v32 = 10;
      LOWORD(__p[1]) = 25701;
      v14 = "kRequested";
      goto LABEL_6;
    case 3:
      v12 = 10;
      v32 = 10;
      LOWORD(__p[1]) = 25964;
      v14 = "kAvailable";
LABEL_6:
      __p[0] = *(void **)v14;
      BYTE2(__p[1]) = 0;
      break;
    case 4:
      v12 = 6;
      v32 = 6;
      strcpy((char *)__p, "kError");
      break;
    default:
      v12 = 8;
      v32 = 8;
      strcpy((char *)__p, "kInvalid");
      break;
  }
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)__p, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"'", 1);
  if (v32 < 0)
    operator delete(__p[0]);
  v17 = *((_QWORD *)a2 + 1);
  v16 = (xpc::object *)(a2 + 2);
  if (MEMORY[0x1C3B8A86C](v17) == MEMORY[0x1E0C812F8])
  {
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)" WakeData:'", 11);
    xpc::object::to_string(v16);
    v19 = v32 >= 0 ? __p : (void **)__p[0];
    v20 = v32 >= 0 ? (void *)v32 : __p[1];
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, (uint64_t)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"'", 1);
    if (v32 < 0)
    {
      operator delete(__p[0]);
      v22 = v40;
      if ((v40 & 0x10) == 0)
        goto LABEL_21;
LABEL_25:
      v25 = *((_QWORD *)&v39 + 1);
      if (*((_QWORD *)&v39 + 1) < (unint64_t)v37)
      {
        *((_QWORD *)&v39 + 1) = v37;
        v25 = v37;
      }
      v24 = (const void **)&v36 + 1;
      goto LABEL_28;
    }
  }
  v22 = v40;
  if ((v40 & 0x10) != 0)
    goto LABEL_25;
LABEL_21:
  if ((v22 & 8) == 0)
  {
    v23 = 0;
    *((_BYTE *)this + 23) = 0;
    goto LABEL_36;
  }
  v24 = (const void **)&v35;
  v25 = v36;
LABEL_28:
  v26 = *v24;
  v23 = v25 - (_QWORD)*v24;
  if (v23 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v23 >= 0x17)
  {
    v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v27 = v23 | 7;
    v28 = v27 + 1;
    v29 = (WakeReason *)operator new(v27 + 1);
    *((_QWORD *)this + 1) = v23;
    *((_QWORD *)this + 2) = v28 | 0x8000000000000000;
    *(_QWORD *)this = v29;
    this = v29;
    goto LABEL_35;
  }
  *((_BYTE *)this + 23) = v23;
  if (v23)
LABEL_35:
    memmove(this, v26, v23);
LABEL_36:
  *((_BYTE *)this + v23) = 0;
  v33 = *v7;
  *(uint64_t *)((char *)&v33 + *(_QWORD *)(v33 - 24)) = v7[3];
  *(_QWORD *)&v34 = v10 + 16;
  if (SBYTE7(v39) < 0)
    operator delete(v38[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B89E4C](&v41);
}

void sub_1BF4E14B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t dispatch::callback<void({block_pointer})(WakeReason)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_28(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  _QWORD *v8;
  NSObject *v9;
  uint64_t v10;
  const void *v11;
  size_t v12;
  void *v13;
  void **v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  const void *v19;
  size_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  const char *v26;
  size_t v27;
  std::string::size_type v28;
  std::string *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  int v33;
  size_t v34;
  void **v35;
  NSObject *v36;
  void **v37;
  CFTypeRef v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  uint64_t v41;
  const void *v42;
  int v43;
  size_t v44;
  size_t v45;
  std::string::size_type v46;
  size_t v47;
  std::string *v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  char *v52;
  uint8_t *v53;
  std::string::size_type v54;
  std::string *v55;
  __int128 v56;
  void *v57[2];
  std::string::size_type v58;
  void *__p[3];
  _QWORD v60[2];
  CFTypeRef cf;
  std::__shared_weak_count *v63;
  uint64_t v64;
  void *__dst[5];
  uint8_t buf[24];
  void *v67;
  _QWORD *v68;
  void **v69;
  std::string v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (_QWORD *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v63 = v6;
    if (v6)
    {
      if (!a1[5])
      {
        v15 = v6;
LABEL_64:
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v40 = __ldaxr(p_shared_owners);
        while (__stlxr(v40 - 1, p_shared_owners));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        return;
      }
      v7 = v5[11];
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BF335000, v7, OS_LOG_TYPE_DEFAULT, "#I --------------- ABM Transport state ---------------", buf, 2u);
      }
      v8 = (_QWORD *)v5[23];
      if (v8)
      {
        __dst[0] = (void *)MEMORY[0x1E0C809B0];
        __dst[1] = (void *)0x40000000;
        __dst[2] = ___ZNK4data16TransportService5State9dumpStateEv_block_invoke;
        __dst[3] = &__block_descriptor_tmp_26_1;
        __dst[4] = v8;
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        __p[0] = __dst;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
        v67 = &__block_descriptor_tmp_21_4;
        v68 = v8 + 9;
        v69 = __p;
        v9 = v8[11];
        if (!v8[12])
        {
          dispatch_sync(v9, buf);
          v10 = v5[21];
          if (!v10)
          {
LABEL_11:
            cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
            abm::client::Event::getData(*a2);
            v60[0] = 0xAAAAAAAAAAAAAAAALL;
            v60[1] = 0xAAAAAAAAAAAAAAAALL;
            ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v60, (const __CFDictionary *)cf);
            memset(buf, 170, sizeof(buf));
            v11 = (const void *)*MEMORY[0x1E0CFB250];
            v12 = strlen((const char *)*MEMORY[0x1E0CFB250]);
            if (v12 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v13 = (void *)v12;
            if (v12 >= 0x17)
            {
              v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v12 | 7) != 0x17)
                v16 = v12 | 7;
              v17 = v16 + 1;
              v14 = (void **)operator new(v16 + 1);
              __dst[1] = v13;
              __dst[2] = (void *)(v17 | 0x8000000000000000);
              __dst[0] = v14;
            }
            else
            {
              HIBYTE(__dst[2]) = v12;
              v14 = __dst;
              if (!v12)
              {
LABEL_20:
                v18 = (const char *)*MEMORY[0x1E0CFB370];
                *((_BYTE *)v13 + (_QWORD)v14) = 0;
                ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)__p, v18);
                ctu::cf::map_adapter::getString();
                MEMORY[0x1C3B8936C](__p);
                if (SHIBYTE(__dst[2]) < 0)
                  operator delete(__dst[0]);
                memset(__dst, 170, 24);
                v19 = (const void *)*MEMORY[0x1E0D01A30];
                v20 = strlen((const char *)*MEMORY[0x1E0D01A30]);
                if (v20 > 0x7FFFFFFFFFFFFFF7)
                  std::string::__throw_length_error[abi:ne180100]();
                v21 = (void *)v20;
                if (v20 >= 0x17)
                {
                  v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v20 | 7) != 0x17)
                    v23 = v20 | 7;
                  v24 = v23 + 1;
                  v22 = operator new(v23 + 1);
                  __p[1] = v21;
                  __p[2] = (void *)(v24 | 0x8000000000000000);
                  __p[0] = v22;
                }
                else
                {
                  HIBYTE(__p[2]) = v20;
                  v22 = __p;
                  if (!v20)
                  {
LABEL_30:
                    v25 = (const char *)*MEMORY[0x1E0CFB6A0];
                    *((_BYTE *)v21 + (_QWORD)v22) = 0;
                    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v70, v25);
                    ctu::cf::map_adapter::getString();
                    MEMORY[0x1C3B8936C](&v70);
                    if (SHIBYTE(__p[2]) < 0)
                      operator delete(__p[0]);
                    memset(__p, 170, sizeof(__p));
                    v26 = (const char *)*MEMORY[0x1E0CFB6C8];
                    v27 = strlen((const char *)*MEMORY[0x1E0CFB6C8]);
                    if (v27 > 0x7FFFFFFFFFFFFFF7)
                      std::string::__throw_length_error[abi:ne180100]();
                    v28 = v27;
                    if (v27 >= 0x17)
                    {
                      v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v27 | 7) != 0x17)
                        v30 = v27 | 7;
                      v31 = v30 + 1;
                      v29 = (std::string *)operator new(v30 + 1);
                      v70.__r_.__value_.__l.__size_ = v28;
                      v70.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
                      v70.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
                    }
                    else
                    {
                      *((_BYTE *)&v70.__r_.__value_.__s + 23) = v27;
                      v29 = &v70;
                      if (!v27)
                      {
LABEL_40:
                        v32 = (const char *)*MEMORY[0x1E0CFB548];
                        v29->__r_.__value_.__s.__data_[v28] = 0;
                        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v64, v32);
                        ctu::cf::map_adapter::getString();
                        MEMORY[0x1C3B8936C](&v64);
                        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v70.__r_.__value_.__l.__data_);
                        v33 = SHIBYTE(__p[2]);
                        if (SHIBYTE(__p[2]) >= 0)
                          v34 = HIBYTE(__p[2]);
                        else
                          v34 = (size_t)__p[1];
                        if (v34 == strlen(v26)
                          && (SHIBYTE(__p[2]) >= 0 ? (v35 = __p) : (v35 = (void **)__p[0]), !memcmp(v35, v26, v34)))
                        {
                          v41 = v5[21];
                          if (v41)
                          {
                            v42 = (const void *)*MEMORY[0x1E0D01A20];
                            v43 = SHIBYTE(__dst[2]);
                            if (SHIBYTE(__dst[2]) >= 0)
                              v44 = HIBYTE(__dst[2]);
                            else
                              v44 = (size_t)__dst[1];
                            v45 = strlen((const char *)*MEMORY[0x1E0D01A20]);
                            v46 = v44 + v45;
                            memset(&v70, 170, sizeof(v70));
                            if (v44 + v45 > 0x7FFFFFFFFFFFFFF7)
                              std::string::__throw_length_error[abi:ne180100]();
                            v47 = v45;
                            if (v46 > 0x16)
                            {
                              v49 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v46 | 7) != 0x17)
                                v49 = v46 | 7;
                              v50 = v49 + 1;
                              v48 = (std::string *)operator new(v49 + 1);
                              v70.__r_.__value_.__l.__size_ = v46;
                              v70.__r_.__value_.__r.__words[2] = v50 | 0x8000000000000000;
                              v70.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
                            }
                            else
                            {
                              memset(&v70, 0, sizeof(v70));
                              v48 = &v70;
                              *((_BYTE *)&v70.__r_.__value_.__s + 23) = v44 + v45;
                            }
                            if (v44)
                            {
                              if (v43 >= 0)
                                v51 = __dst;
                              else
                                v51 = (void **)__dst[0];
                              memmove(v48, v51, v44);
                            }
                            v52 = (char *)v48 + v44;
                            if (v47)
                              memmove(v52, v42, v47);
                            v52[v47] = 0;
                            if ((buf[23] & 0x80u) == 0)
                              v53 = buf;
                            else
                              v53 = *(uint8_t **)buf;
                            if ((buf[23] & 0x80u) == 0)
                              v54 = buf[23];
                            else
                              v54 = *(_QWORD *)&buf[8];
                            v55 = std::string::append(&v70, (const std::string::value_type *)v53, v54);
                            v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
                            v58 = v55->__r_.__value_.__r.__words[2];
                            *(_OWORD *)v57 = v56;
                            v55->__r_.__value_.__l.__size_ = 0;
                            v55->__r_.__value_.__r.__words[2] = 0;
                            v55->__r_.__value_.__r.__words[0] = 0;
                            (*(void (**)(uint64_t, void **))(*(_QWORD *)v41 + 48))(v41, v57);
                            if (SHIBYTE(v58) < 0)
                              operator delete(v57[0]);
                            if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v70.__r_.__value_.__l.__data_);
                          }
                        }
                        else
                        {
                          v36 = v5[11];
                          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
                          {
                            v37 = (void **)__p[0];
                            if (v33 >= 0)
                              v37 = __p;
                            LODWORD(v70.__r_.__value_.__l.__data_) = 136315138;
                            *(std::string::size_type *)((char *)v70.__r_.__value_.__r.__words + 4) = (std::string::size_type)v37;
                            _os_log_impl(&dword_1BF335000, v36, OS_LOG_TYPE_DEFAULT, "#I Skipping snapshot as trace filter is '%s'", (uint8_t *)&v70, 0xCu);
                          }
                        }
                        if (SHIBYTE(__p[2]) < 0)
                        {
                          operator delete(__p[0]);
                          if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
                          {
LABEL_56:
                            if (((char)buf[23] & 0x80000000) == 0)
                              goto LABEL_57;
                            goto LABEL_61;
                          }
                        }
                        else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
                        {
                          goto LABEL_56;
                        }
                        operator delete(__dst[0]);
                        if (((char)buf[23] & 0x80000000) == 0)
                        {
LABEL_57:
                          MEMORY[0x1C3B893A8](v60);
                          v38 = cf;
                          if (!cf)
                          {
LABEL_63:
                            v15 = v63;
                            if (!v63)
                              return;
                            goto LABEL_64;
                          }
LABEL_62:
                          CFRelease(v38);
                          goto LABEL_63;
                        }
LABEL_61:
                        operator delete(*(void **)buf);
                        MEMORY[0x1C3B893A8](v60);
                        v38 = cf;
                        if (!cf)
                          goto LABEL_63;
                        goto LABEL_62;
                      }
                    }
                    memmove(v29, v26, v28);
                    goto LABEL_40;
                  }
                }
                memmove(v22, v19, (size_t)v21);
                goto LABEL_30;
              }
            }
            memmove(v14, v11, (size_t)v13);
            goto LABEL_20;
          }
LABEL_10:
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
          goto LABEL_11;
        }
        dispatch_async_and_wait(v9, buf);
      }
      v10 = v5[21];
      if (!v10)
        goto LABEL_11;
      goto LABEL_10;
    }
  }
}

void sub_1BF4E1C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,const void *a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v43 - 89) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0)
      {
LABEL_8:
        if (a35 < 0)
          operator delete(a30);
        if (a43 < 0)
          operator delete(a38);
        MEMORY[0x1C3B893A8](&a22);
        ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a24);
        std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a16);
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v43 - 89) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v43 - 112));
  if ((a21 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_31(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  NSObject *v9;
  void (****v10)(void);
  uint64_t v11;
  CFTypeRef v12;
  uint64_t (*v13)(uint64_t);
  const char *v14;
  const char *v15;
  size_t v16;
  int v17;
  void *v18;
  size_t v19;
  void **v20;
  void **v21;
  void *v22;
  void **v23;
  size_t v24;
  void **v25;
  void **v26;
  uint64_t v27;
  void (**v28)(void);
  unint64_t *p_shared_owners;
  unint64_t v30;
  void *v31[2];
  char v32;
  _QWORD v33[2];
  CFTypeRef cf;
  std::__shared_weak_count *v36;
  uint64_t v37;
  void *__p[5];
  void *block[6];

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v36 = v6;
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
        goto LABEL_67;
      v8 = *(_QWORD **)(v5 + 184);
      if (v8)
      {
        __p[0] = (void *)MEMORY[0x1E0C809B0];
        __p[1] = (void *)0x40000000;
        __p[2] = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
        __p[3] = &__block_descriptor_tmp_27_3;
        __p[4] = v8;
        block[0] = (void *)MEMORY[0x1E0C809B0];
        v31[0] = __p;
        block[1] = (void *)0x40000000;
        block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
        block[3] = &__block_descriptor_tmp_21_4;
        block[4] = v8 + 9;
        block[5] = v31;
        v9 = v8[11];
        if (!v8[12])
        {
          dispatch_sync(v9, block);
          v27 = *(_QWORD *)(v5 + 168);
          v10 = (void (****)(void))(v5 + 168);
          if (v27)
          {
LABEL_8:
            cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
            abm::client::Event::getData(*a2);
            v12 = cf;
            v13 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
            if (!cf)
              v13 = 0;
            if (!v13)
              goto LABEL_65;
            v33[0] = 0xAAAAAAAAAAAAAAAALL;
            v33[1] = 0xAAAAAAAAAAAAAAAALL;
            ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v33, (const __CFDictionary *)cf);
            memset(block, 170, 24);
            v14 = (const char *)*MEMORY[0x1E0CFB530];
            HIBYTE(__p[2]) = 0;
            LOBYTE(__p[0]) = 0;
            ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v31, v14);
            ctu::cf::map_adapter::getString();
            MEMORY[0x1C3B8936C](v31);
            if (SHIBYTE(__p[2]) < 0)
              operator delete(__p[0]);
            memset(__p, 170, 24);
            v15 = (const char *)*MEMORY[0x1E0CFB538];
            v32 = 0;
            LOBYTE(v31[0]) = 0;
            ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v37, v15);
            ctu::cf::map_adapter::getString();
            MEMORY[0x1C3B8936C](&v37);
            if (v32 < 0)
              operator delete(v31[0]);
            v16 = HIBYTE(block[2]);
            v17 = SHIBYTE(block[2]);
            v18 = block[1];
            if (SHIBYTE(block[2]) >= 0)
              v19 = HIBYTE(block[2]);
            else
              v19 = (size_t)block[1];
            if (v19 == strlen((const char *)*MEMORY[0x1E0CFB7F0]))
            {
              v20 = SHIBYTE(block[2]) >= 0 ? block : (void **)block[0];
              if (!memcmp(v20, (const void *)*MEMORY[0x1E0CFB7F0], v19))
              {
                ((void (*)(void (***)(void)))(**v10)[1])(*v10);
                v28 = **v10;
LABEL_59:
                (*v28)();
                goto LABEL_60;
              }
            }
            if (v19 == strlen((const char *)*MEMORY[0x1E0CFBB68]))
            {
              v21 = v17 >= 0 ? block : (void **)block[0];
              if (!memcmp(v21, (const void *)*MEMORY[0x1E0CFBB68], v19))
              {
                v22 = SHIBYTE(__p[2]) >= 0 ? (void *)HIBYTE(__p[2]) : __p[1];
                if (v22 == (void *)strlen((const char *)*MEMORY[0x1E0CFB590]))
                {
                  v23 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
                  if (!memcmp(v23, (const void *)*MEMORY[0x1E0CFB590], (size_t)v22))
                  {
                    if ((((uint64_t (*)(void (***)(void)))(**v10)[11])(*v10) & 1) != 0)
                    {
LABEL_58:
                      v28 = **v10 + 2;
                      goto LABEL_59;
                    }
                    v16 = HIBYTE(block[2]);
                    v18 = block[1];
                    LOBYTE(v17) = HIBYTE(block[2]);
                  }
                }
              }
            }
            if ((v17 & 0x80u) == 0)
              v24 = v16;
            else
              v24 = (size_t)v18;
            if (v24 != strlen((const char *)*MEMORY[0x1E0CFBA60])
              || ((v17 & 0x80u) == 0 ? (v25 = block) : (v25 = (void **)block[0]),
                  memcmp(v25, (const void *)*MEMORY[0x1E0CFBA60], v24)))
            {
              if (v24 == strlen((const char *)*MEMORY[0x1E0CFBD30]))
              {
                v26 = (v17 & 0x80u) == 0 ? block : (void **)block[0];
                if (!memcmp(v26, (const void *)*MEMORY[0x1E0CFBD30], v24))
                {
                  ((void (*)(void (***)(void)))(**v10)[2])(*v10);
                  ((void (*)(void (***)(void)))(**v10)[7])(*v10);
                  std::shared_ptr<TransportService>::reset[abi:ne180100](v10);
                }
              }
              goto LABEL_60;
            }
            if (((unsigned int (*)(void (***)(void)))(**v10)[11])(*v10)
              && (!((unsigned int (*)(void (***)(void)))(**v10)[11])(*v10)
               || !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, (char *)*MEMORY[0x1E0CFB598])))
            {
LABEL_60:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              if (SHIBYTE(block[2]) < 0)
                operator delete(block[0]);
              MEMORY[0x1C3B893A8](v33);
              v12 = cf;
LABEL_65:
              if (v12)
                CFRelease(v12);
              goto LABEL_67;
            }
            goto LABEL_58;
          }
LABEL_67:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v30 = __ldaxr(p_shared_owners);
          while (__stlxr(v30 - 1, p_shared_owners));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        dispatch_async_and_wait(v9, block);
      }
      v11 = *(_QWORD *)(v5 + 168);
      v10 = (void (****)(void))(v5 + 168);
      if (v11)
        goto LABEL_8;
      goto LABEL_67;
    }
  }
}

void sub_1BF4E21C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, const void *a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a28 < 0)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  MEMORY[0x1C3B893A8](&a15);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a17);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_1BF4E2250()
{
  JUMPOUT(0x1BF4E2238);
}

void sub_1BF4E2258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_34(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD v11[5];
  _QWORD *v12;
  _QWORD block[6];

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (!a1[5])
        goto LABEL_9;
      v6 = *(_QWORD *)(v3 + 184);
      if (v6)
      {
        v11[0] = MEMORY[0x1E0C809B0];
        v11[1] = 0x40000000;
        v11[2] = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
        v11[3] = &__block_descriptor_tmp_27_3;
        v11[4] = v6;
        v12 = v11;
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 0x40000000;
        block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
        block[3] = &__block_descriptor_tmp_21_4;
        block[4] = v6 + 72;
        block[5] = &v12;
        v7 = *(NSObject **)(v6 + 88);
        if (!*(_QWORD *)(v6 + 96))
        {
          dispatch_sync(v7, block);
          v8 = *(_QWORD *)(v3 + 168);
          if (!v8)
          {
LABEL_9:
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v10 = __ldaxr(p_shared_owners);
            while (__stlxr(v10 - 1, p_shared_owners));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
            return;
          }
LABEL_8:
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          goto LABEL_9;
        }
        dispatch_async_and_wait(v7, block);
      }
      v8 = *(_QWORD *)(v3 + 168);
      if (!v8)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
}

void sub_1BF4E2398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_36(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  _QWORD v13[5];
  _QWORD *v14;
  uint8_t buf[8];
  uint64_t v16;
  _QWORD *(*v17)(uint64_t);
  void *v18;
  uint64_t v19;
  _QWORD *v20;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (v6)
      {
        v9 = v3[11];
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEFAULT, "#I --------------- ABM Transport state ---------------", buf, 2u);
        }
        v10 = v3[23];
        if (v10)
        {
          v13[0] = MEMORY[0x1E0C809B0];
          v13[1] = 0x40000000;
          v13[2] = ___ZNK4data16TransportService5State9dumpStateEv_block_invoke;
          v13[3] = &__block_descriptor_tmp_26_1;
          v13[4] = v10;
          v14 = v13;
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          v16 = 0x40000000;
          v17 = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
          v18 = &__block_descriptor_tmp_21_4;
          v19 = v10 + 72;
          v20 = &v14;
          v11 = *(NSObject **)(v10 + 88);
          if (!*(_QWORD *)(v10 + 96))
          {
            dispatch_sync(v11, buf);
            v12 = v3[21];
            if (!v12)
              return;
LABEL_14:
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
            return;
          }
          dispatch_async_and_wait(v11, buf);
        }
        v12 = v3[21];
        if (!v12)
          return;
        goto LABEL_14;
      }
    }
  }
}

void TransportModule::sleep(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[17];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::sleep(dispatch::group_session)::$_0>(TransportModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void TransportModule::wake(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[17];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::wake(dispatch::group_session)::$_0>(TransportModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

BOOL xpc::operator==<char const*>(const char **a1, xpc_object_t xdict, char *key)
{
  xpc_object_t value;
  xpc_object_t v5;
  xpc_object_t v6;
  _BOOL8 v7;

  value = xpc_dictionary_get_value(xdict, key);
  if (value)
  {
    v5 = value;
    xpc_retain(value);
  }
  else
  {
    v5 = xpc_null_create();
  }
  v6 = xpc_string_create(*a1);
  if (!v6)
    v6 = xpc_null_create();
  v7 = xpc_equal(v6, v5);
  xpc_release(v6);
  xpc_release(v5);
  return v7;
}

void sub_1BF4E2774(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  xpc_release(v2);
  xpc_release(v1);
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E790ADE0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E790ADE0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__shared_ptr_pointer<TransportModule *,std::shared_ptr<TransportModule> ctu::SharedSynchronizable<TransportModule>::make_shared_ptr<TransportModule>(TransportModule*)::{lambda(TransportModule *)#1},std::allocator<TransportModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<TransportModule *,std::shared_ptr<TransportModule> ctu::SharedSynchronizable<TransportModule>::make_shared_ptr<TransportModule>(TransportModule*)::{lambda(TransportModule *)#1},std::allocator<TransportModule>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<TransportModule> ctu::SharedSynchronizable<TransportModule>::make_shared_ptr<TransportModule>(TransportModule*)::{lambda(TransportModule*)#1}::operator() const(TransportModule*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<TransportModule *,std::shared_ptr<TransportModule> ctu::SharedSynchronizable<TransportModule>::make_shared_ptr<TransportModule>(TransportModule*)::{lambda(TransportModule *)#1},std::allocator<TransportModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI15TransportModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI15TransportModuleE15make_shared_ptrIS1_EENSt3__110shared_pt"
                                "rIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI15TransportModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI15TransportModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<TransportModule> ctu::SharedSynchronizable<TransportModule>::make_shared_ptr<TransportModule>(TransportModule*)::{lambda(TransportModule*)#1}::operator() const(TransportModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedLoggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E790ADE0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void ctu::SharedSynchronizable<TransportModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI15TransportModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E790AEC8;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI15TransportModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIK15TransportModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIK15TransportModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::initialize(dispatch::group_session)::$_0>(TransportModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  TransportModule **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(TransportModule ***)a1;
  TransportModule::finishInitialization_sync(**(TransportModule ***)a1);
  operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete((void *)a1);
  }
  else
  {
LABEL_5:
    operator delete((void *)a1);
  }
}

void sub_1BF4E2C64(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::sleep(dispatch::group_session)::$_0>(TransportModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *isa;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD v13[5];
  _QWORD *v14;
  dispatch_group_t block[6];

  v2 = *a1;
  v3 = **a1;
  v4 = *(NSObject **)(v3 + 184);
  if (!v4)
  {
LABEL_4:
    v6 = *(_QWORD *)(v3 + 168);
    if (!v6)
      goto LABEL_11;
    goto LABEL_5;
  }
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 0x40000000;
  v13[2] = ___ZN4data16TransportService5State13enterLowPowerEv_block_invoke;
  v13[3] = &__block_descriptor_tmp_20_3;
  v13[4] = v4;
  v14 = v13;
  block[0] = (dispatch_group_t)MEMORY[0x1E0C809B0];
  block[1] = (dispatch_group_t)0x40000000;
  block[2] = (dispatch_group_t)___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
  block[3] = (dispatch_group_t)&__block_descriptor_tmp_21_4;
  block[4] = v4 + 9;
  block[5] = (dispatch_group_t)&v14;
  isa = v4[11].isa;
  if (v4[12].isa)
  {
    dispatch_async_and_wait(isa, block);
    goto LABEL_4;
  }
  dispatch_sync(isa, block);
  v6 = *(_QWORD *)(v3 + 168);
  if (!v6)
    goto LABEL_11;
LABEL_5:
  v7 = v2[1];
  block[0] = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(v7);
  }
  (*(void (**)(uint64_t, dispatch_group_t *))(*(_QWORD *)v6 + 24))(v6, block);
  if (block[0])
  {
    dispatch_group_leave(block[0]);
    if (block[0])
      dispatch_release(block[0]);
  }
LABEL_11:
  v8 = v2[1];
  if (v8)
  {
    dispatch_group_leave(v8);
    v9 = v2[1];
    if (v9)
      dispatch_release(v9);
  }
  operator delete(v2);
  v10 = (std::__shared_weak_count *)a1[2];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  operator delete(a1);
}

void sub_1BF4E2E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, dispatch_group_t group)
{
  _QWORD *v15;
  _QWORD *v16;
  NSObject *v18;
  NSObject *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  v18 = v16[1];
  if (v18)
  {
    dispatch_group_leave(v18);
    v19 = v16[1];
    if (v19)
      dispatch_release(v19);
  }
  operator delete(v16);
  v20 = (std::__shared_weak_count *)v15[2];
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::wake(dispatch::group_session)::$_0>(TransportModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  NSObject *v13;
  _QWORD v14[5];
  _QWORD *v15;
  dispatch_group_t group;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;

  v2 = *a1;
  v3 = **a1;
  v4 = *(_QWORD *)(v3 + 184);
  if (v4)
  {
    group = (dispatch_group_t)MEMORY[0x1E0C809B0];
    v17 = 0x40000000;
    v18 = ___ZN4data16TransportService5State12exitLowPowerEv_block_invoke;
    v19 = &__block_descriptor_tmp_22_2;
    v20 = v4;
    ctu::SharedSynchronizable<data::TransportService::State>::execute_wrapped((uint64_t *)(v4 + 72), (uint64_t)&group);
  }
  if (!*(_DWORD *)(v3 + 152))
  {
    v12 = *(_QWORD *)(v3 + 184);
    if (v12)
    {
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 0x40000000;
      v14[2] = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
      v14[3] = &__block_descriptor_tmp_27_3;
      v14[4] = v12;
      v15 = v14;
      group = (dispatch_group_t)MEMORY[0x1E0C809B0];
      v17 = 0x40000000;
      v18 = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
      v19 = &__block_descriptor_tmp_21_4;
      v20 = v12 + 72;
      v21 = &v15;
      v13 = *(NSObject **)(v12 + 88);
      if (*(_QWORD *)(v12 + 96))
        dispatch_async_and_wait(v13, &group);
      else
        dispatch_sync(v13, &group);
    }
  }
  v5 = *(_QWORD *)(v3 + 168);
  if (v5)
  {
    v6 = v2[1];
    group = v6;
    if (v6)
    {
      dispatch_retain(v6);
      dispatch_group_enter(v6);
    }
    (*(void (**)(uint64_t, dispatch_group_t *))(*(_QWORD *)v5 + 32))(v5, &group);
    if (group)
    {
      dispatch_group_leave(group);
      if (group)
        dispatch_release(group);
    }
  }
  v7 = v2[1];
  if (v7)
  {
    dispatch_group_leave(v7);
    v8 = v2[1];
    if (v8)
      dispatch_release(v8);
  }
  operator delete(v2);
  v9 = (std::__shared_weak_count *)a1[2];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(a1);
}

void sub_1BF4E3054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, dispatch_group_t group)
{
  _QWORD *v15;
  _QWORD *v16;
  NSObject *v18;
  NSObject *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  v18 = v16[1];
  if (v18)
  {
    dispatch_group_leave(v18);
    v19 = v16[1];
    if (v19)
      dispatch_release(v19);
  }
  operator delete(v16);
  v20 = (std::__shared_weak_count *)v15[2];
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

const char *ABMGetProjectVersion(void)
{
  return "AppleBasebandManager-AppleBasebandServices_Manager-1180";
}

_QWORD *BasebandTransportMAV::BasebandTransportMAV(_QWORD *a1, uint64_t *a2, NSObject **a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  dispatch_object_t object;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v4 = (std::__shared_weak_count *)a2[1];
  v13 = *a2;
  v14 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *a3;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  BasebandTransport::BasebandTransport((uint64_t)a1, &v13, &object);
  if (object)
    dispatch_release(object);
  v8 = v14;
  if (v14)
  {
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *a1 = off_1E790AF08;
  return a1;
}

void sub_1BF4E319C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11)
{
  if (object)
    dispatch_release(object);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void BasebandTransportMAV::~BasebandTransportMAV(BasebandTransportMAV *this)
{
  void *v1;

  BasebandTransport::~BasebandTransport(this);
  operator delete(v1);
}

uint64_t BasebandTransportMAV::switchDIAG_sync(BasebandTransportMAV *this)
{
  NSObject *v1;
  uint8_t v3[16];

  v1 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1BF335000, v1, OS_LOG_TYPE_DEFAULT, "#I Switch succeeded", v3, 2u);
  }
  return 1;
}

void FSModule::create(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13[2];
  _QWORD v14[5];
  _QWORD *v15;
  _QWORD block[6];

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0x448uLL);
  v5 = (uint64_t)v4;
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  v13[0] = v6;
  v13[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  FSModule::FSModule((uint64_t)v4, v13);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<FSModule>::shared_ptr[abi:ne180100]<FSModule,std::shared_ptr<FSModule> ctu::SharedSynchronizable<FSModule>::make_shared_ptr<FSModule>(FSModule*)::{lambda(FSModule*)#1},void>(a2, v5);
  ctu::Loggable<FSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2 + 48);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  v10 = *a2;
  v11 = *a2 + 120;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 0x40000000;
  v14[2] = ___ZN8FSModule4initEv_block_invoke;
  v14[3] = &__block_descriptor_tmp_38;
  v14[4] = v10;
  v15 = v14;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI8FSModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_64_4;
  block[4] = v11;
  block[5] = &v15;
  v12 = *(NSObject **)(v10 + 136);
  if (*(_QWORD *)(v10 + 144))
    dispatch_async_and_wait(v12, block);
  else
    dispatch_sync(v12, block);
}

void sub_1BF4E3374(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void FSModule::init(FSModule *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN8FSModule4initEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_38;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI8FSModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_64_4;
  block[4] = (char *)this + 120;
  block[5] = &v4;
  v2 = (char *)this + 136;
  v1 = *((_QWORD *)this + 17);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void FSModule::~FSModule(FSModule *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  FSModule *v6;
  uint64_t v7;
  uint64_t v8;
  FSModule *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  const void *v19;
  NSObject *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  NSObject *v24;
  NSObject *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  std::__shared_weak_count *v30;
  uint8_t v31[16];

  *(_QWORD *)this = off_1E790AF88;
  *((_QWORD *)this + 6) = &unk_1E790AFF8;
  v2 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v31 = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v31, 2u);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 133);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (!*((_QWORD *)this + 131))
      goto LABEL_17;
  }
  else
  {
LABEL_7:
    if (!*((_QWORD *)this + 131))
      goto LABEL_17;
  }
  v6 = (FSModule *)*((_QWORD *)this + 130);
  v7 = *((_QWORD *)this + 129);
  v8 = *(_QWORD *)v6;
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(v7 + 8);
  **(_QWORD **)(v7 + 8) = v8;
  *((_QWORD *)this + 131) = 0;
  if (v6 != (FSModule *)((char *)this + 1032))
  {
    do
    {
      v9 = (FSModule *)*((_QWORD *)v6 + 1);
      v10 = (unsigned int *)*((_QWORD *)v6 + 3);
      if (v10)
      {
        v11 = v10 + 3;
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
          (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 24))(v10);
      }
      operator delete(v6);
      v6 = v9;
    }
    while (v9 != (FSModule *)((char *)this + 1032));
  }
LABEL_17:
  v14 = (void *)*((_QWORD *)this + 128);
  *((_QWORD *)this + 128) = 0;
  if (v14)
  {
    TelephonyBasebandWatchdogStop();
    operator delete(v14);
  }
  v15 = *((_QWORD *)this + 127);
  if (v15)
  {
    dispatch_resume(v15);
    v16 = *((_QWORD *)this + 127);
    if (v16)
      dispatch_release(v16);
  }
  v17 = *((_QWORD *)this + 126);
  if (v17)
    dispatch_release(v17);
  v18 = *((_QWORD *)this + 125);
  if (v18)
    dispatch_release(v18);
  v19 = (const void *)*((_QWORD *)this + 124);
  if (v19)
    _Block_release(v19);
  if (*((char *)this + 991) < 0)
    operator delete(*((void **)this + 121));
  v20 = *((_QWORD *)this + 120);
  if (v20)
    dispatch_release(v20);
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 119);
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  *((_QWORD *)this + 6) = off_1E790B538;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v24 = *((_QWORD *)this + 18);
  if (v24)
    dispatch_release(v24);
  v25 = *((_QWORD *)this + 17);
  if (v25)
    dispatch_release(v25);
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  *(_QWORD *)this = off_1E7908A38;
  v27 = *((_QWORD *)this + 3);
  if (v27)
  {
    v28 = *((_QWORD *)this + 4);
    v29 = (void *)*((_QWORD *)this + 3);
    if (v28 != v27)
    {
      do
      {
        if (*(char *)(v28 - 1) < 0)
          operator delete(*(void **)(v28 - 24));
        v28 -= 24;
      }
      while (v28 != v27);
      v29 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v27;
    operator delete(v29);
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v30)
    std::__shared_weak_count::__release_weak(v30);
}

{
  void *v1;

  FSModule::~FSModule(this);
  operator delete(v1);
}

_QWORD *ctu::SharedLoggable<FSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E790B538;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E790B538;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void `non-virtual thunk to'FSModule::~FSModule(FSModule *this)
{
  FSModule::~FSModule((FSModule *)((char *)this - 48));
}

{
  void *v1;

  FSModule::~FSModule((FSModule *)((char *)this - 48));
  operator delete(v1);
}

const char *FSModule::getName(FSModule *this)
{
  return "rfs.mod";
}

uint64_t FSModule::FSModule(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unsigned __int8 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  NSObject *initially_inactive;
  NSObject *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  NSObject *v22;
  unsigned __int8 v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  dispatch_object_t object;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[16];
  _BYTE v38[16];
  uint64_t block;
  uint64_t v40;
  void (*v41)(uint64_t);
  void *v42;
  uint64_t *v43;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_1E7908A38;
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(_QWORD *)a1 = &unk_1E78FC4E8;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_1E78FC4E8;
    *(_QWORD *)(a1 + 8) = v3;
  }
  *(_QWORD *)a1 = off_1E790AF88;
  *(_QWORD *)(a1 + 48) = &unk_1E790AFF8;
  v9 = (_QWORD *)(a1 + 48);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v37, "com.apple.telephony.abm", "rfs.mod");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  v11 = MEMORY[0x1E0C809B0];
  block = MEMORY[0x1E0C809B0];
  v40 = 0x40000000;
  v41 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v42 = &__block_descriptor_tmp_13_2;
  v43 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v13 = GetABMLogServer(void)::sLogServer;
    v12 = *(std::__shared_weak_count **)algn_1ED710088;
    v35 = GetABMLogServer(void)::sLogServer;
    v36 = *(_QWORD *)algn_1ED710088;
    if (*(_QWORD *)algn_1ED710088)
      goto LABEL_12;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v13 = GetABMLogServer(void)::sLogServer;
    v12 = *(std::__shared_weak_count **)algn_1ED710088;
    v35 = GetABMLogServer(void)::sLogServer;
    v36 = *(_QWORD *)algn_1ED710088;
    if (*(_QWORD *)algn_1ED710088)
    {
LABEL_12:
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v17 = dispatch_queue_create_with_target_V2("rfs.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v17, QOS_CLASS_USER_INITIATED, 0);
  dispatch_activate(v17);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v17;
  if (v17)
  {
    dispatch_retain(v17);
    *(_QWORD *)(a1 + 144) = 0;
    dispatch_release(v17);
  }
  else
  {
    *(_QWORD *)(a1 + 144) = 0;
  }
  *(_QWORD *)(a1 + 48) = off_1E790B538;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&block);
  *(_QWORD *)(a1 + 56) = &unk_1E78FB900;
  *(_QWORD *)(a1 + 104) = v13;
  *(_QWORD *)(a1 + 112) = v12;
  if (v12)
  {
    v18 = (unint64_t *)&v12->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v38);
    *v9 = off_1E790B5C8;
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v38);
    *v9 = off_1E790B5C8;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v37);
  *(_QWORD *)a1 = off_1E790AF88;
  *(_QWORD *)(a1 + 48) = &unk_1E790AFF8;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  *(_DWORD *)(a1 + 928) = 256;
  *(_QWORD *)(a1 + 936) = 0;
  *(_QWORD *)(a1 + 952) = 0;
  *(_QWORD *)(a1 + 944) = 0;
  *(_QWORD *)(a1 + 960) = dispatch_group_create();
  v21 = (char *)operator new(0x30uLL);
  *(_QWORD *)(a1 + 968) = v21;
  strcpy(v21, "com.apple.AppleBasebandManager.FSModuleSync");
  *(_OWORD *)(a1 + 976) = xmmword_1BF5476B0;
  *(_OWORD *)(a1 + 992) = 0u;
  v22 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
  *(_QWORD *)(a1 + 1008) = dispatch_queue_create("rfs.sched.queue", v22);
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_QWORD *)(a1 + 1032) = a1 + 1032;
  *(_QWORD *)(a1 + 1040) = a1 + 1032;
  *(_QWORD *)(a1 + 1048) = 0;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  block = v11;
  v40 = 0x40000000;
  v41 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v42 = &__block_descriptor_tmp_13_2;
  v43 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v24 = *(_QWORD *)algn_1ED710088;
    v33 = GetABMLogServer(void)::sLogServer;
    v34 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_30;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v24 = *(_QWORD *)algn_1ED710088;
    v33 = GetABMLogServer(void)::sLogServer;
    v34 = *(std::__shared_weak_count **)algn_1ED710088;
    if (!*(_QWORD *)algn_1ED710088)
      goto LABEL_30;
  }
  v25 = (unint64_t *)(v24 + 8);
  do
    v26 = __ldxr(v25);
  while (__stxr(v26 + 1, v25));
LABEL_30:
  v27 = *(NSObject **)(a1 + 136);
  object = v27;
  if (v27)
    dispatch_retain(v27);
  BasebandTransport::create((capabilities::radio *)&v33, &object, a1 + 1056);
  if (object)
    dispatch_release(object);
  v28 = v34;
  if (v34)
  {
    v29 = (unint64_t *)&v34->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  *(_DWORD *)(a1 + 1072) = 0;
  return a1;
}

void sub_1BF4E3C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, char a10)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  void **v14;
  dispatch_object_t *v15;
  NSObject *v17;

  if (object)
    dispatch_release(object);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::list<boost::signals2::connection>::~list(v12);
  std::unique_ptr<support::misc::Watchdog>::~unique_ptr[abi:ne180100](v14);
  if (*v15)
  {
    dispatch_resume(*v15);
    if (*v15)
      dispatch_release(*v15);
  }
  v17 = *(NSObject **)(v10 + 1008);
  if (v17)
    dispatch_release(v17);
  dispatch::callback<void({block_pointer})(BOOL)>::~callback(v13);
  if (*(char *)(v10 + 991) < 0)
    operator delete(*(void **)(v10 + 968));
  if (*(_QWORD *)(v10 + 960))
    dispatch_release(*(dispatch_object_t *)(v10 + 960));
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v10 + 944);
  ctu::SharedLoggable<FSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v11);
  Service::~Service((Service *)v10);
  _Unwind_Resume(a1);
}

void sub_1BF4E3CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  Service *v4;
  _QWORD *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;
  uint64_t v15;
  va_list va3;

  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v13 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v5);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  Service::~Service(v4);
  _Unwind_Resume(a1);
}

void sub_1BF4E3D30(_Unwind_Exception *a1)
{
  Service *v1;

  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void ___ZN8FSModule4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  CommandDriverFactory *v2;
  uint64_t v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  NSObject *v16;
  void *v17;
  unint64_t *p_shared_weak_owners;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  void (*v28)(_BYTE *, _BYTE *, uint64_t);
  char *v29;
  _QWORD *v30;
  void *v31;
  char *v32;
  int v33;
  int v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  int *v43;
  int v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t *v49;
  unint64_t v50;
  _OWORD *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  __int128 v66;
  _QWORD aBlock[7];
  dispatch_object_t object;
  void *v69;
  void *__p[2];
  __int128 v71;
  _BYTE v72[24];
  int v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 929))
    return;
  v2 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v3 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v2);
    v4 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v5 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v3 = off_1ED70FD08;
  }
  v61 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v8 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v3 + 40))(&v62, v3);
  v64 = 0;
  v65 = 0;
  if (v63 && (v65 = std::__shared_weak_count::lock(v63)) != 0)
  {
    v10 = v62;
    v64 = v62;
  }
  else
  {
    v10 = 0;
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN3ctu20SharedSynchronizableI8FSModuleE13connect_eventIN5boost8signals26signalIFvbENS5_19optional_last_valueIvEEiNSt3__14lessIiEENS4_8functionIS7_EENSD_IFvRKNS5_10connectionEbEEENS5_5mutexEEES1_vJbEEEDTcl7connectfp_cvNSA_10shared_ptrIS1_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSQ_SS_E_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_61_3;
  aBlock[4] = v1 + 120;
  aBlock[5] = FSModule::requestFSSyncIndication;
  aBlock[6] = 0;
  v11 = _Block_copy(aBlock);
  v12 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v12 || (v13 = *(_QWORD *)(v1 + 120), (v14 = std::__shared_weak_count::lock(v12)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v15 = v14;
  v16 = *(NSObject **)(v1 + 136);
  object = v16;
  if (v11)
    v17 = _Block_copy(v11);
  else
    v17 = 0;
  v69 = v17;
  dispatch_retain(v16);
  *(_OWORD *)__p = 0u;
  v71 = 0u;
  boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>::init_slot_function<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>((uint64_t)__p, (uint64_t)&object);
  p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
  do
    v19 = __ldxr(p_shared_weak_owners);
  while (__stxr(v19 + 1, p_shared_weak_owners));
  v20 = operator new(0x18uLL);
  *v20 = &off_1E790B628;
  v20[1] = v13;
  v20[2] = v15;
  do
    v21 = __ldxr(p_shared_weak_owners);
  while (__stxr(v21 + 1, p_shared_weak_owners));
  v22 = operator new(0x18uLL);
  v23 = v22;
  *v22 = &off_1E790B628;
  v22[1] = v13;
  v22[2] = v15;
  do
    v24 = __ldxr(p_shared_weak_owners);
  while (__stxr(v24 + 1, p_shared_weak_owners));
  v74 = v22;
  v73 = 2;
  v25 = __p[1];
  if (__p[1] < (void *)v71)
  {
    v26 = operator new(0x18uLL);
    *v26 = &off_1E790B628;
    v26[1] = v13;
    v26[2] = v15;
    do
      v27 = __ldxr(p_shared_weak_owners);
    while (__stxr(v27 + 1, p_shared_weak_owners));
    v25[1] = v26;
    *(_DWORD *)v25 = 2;
    __p[1] = v25 + 3;
LABEL_31:
    (*(void (**)(_QWORD *))(*v23 + 8))(v23);
    goto LABEL_32;
  }
  v43 = std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((uint64_t *)__p, (uint64_t)&v73);
  v44 = v73 ^ (v73 >> 31);
  __p[1] = v43;
  if (v44 == 2)
  {
    v23 = v74;
    if (!v74)
      goto LABEL_32;
    goto LABEL_31;
  }
  if (v44 == 1)
  {
    v45 = v75;
    if (!v75)
      goto LABEL_32;
    v46 = (unsigned int *)(v75 + 12);
    do
    {
      v47 = __ldaxr(v46);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v46));
    if (v48)
      goto LABEL_32;
  }
  else
  {
    v45 = v75;
    if (!v75)
      goto LABEL_32;
    v58 = (unsigned int *)(v75 + 12);
    do
    {
      v59 = __ldaxr(v58);
      v60 = v59 - 1;
    }
    while (__stlxr(v60, v58));
    if (v60)
      goto LABEL_32;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v45 + 24))(v45);
LABEL_32:
  (*(void (**)(_QWORD *))(*v20 + 8))(v20);
  std::__shared_weak_count::__release_weak(v15);
  boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::connect(*(_QWORD *)(v10 + 112), (uint64_t)__p, 0, (unint64_t *)&v66);
  if (*((_QWORD *)&v71 + 1))
  {
    if ((BYTE8(v71) & 1) == 0)
    {
      v28 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*((_QWORD *)&v71 + 1) & 0xFFFFFFFFFFFFFFFELL);
      if (v28)
        v28(v72, v72, 2);
    }
    *((_QWORD *)&v71 + 1) = 0;
  }
  v29 = (char *)__p[0];
  if (!__p[0])
    goto LABEL_64;
  v30 = __p[1];
  v31 = __p[0];
  if (__p[1] == __p[0])
    goto LABEL_63;
  v32 = (char *)__p[1];
  do
  {
    v33 = *((_DWORD *)v32 - 6);
    v32 -= 24;
    v34 = v33 ^ (v33 >> 31);
    if (v34 == 2)
    {
      v39 = *(v30 - 2);
      if (v39)
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    }
    else if (v34 == 1)
    {
      v35 = (unsigned int *)*(v30 - 1);
      if (v35)
      {
        v36 = v35 + 3;
        do
        {
          v37 = __ldaxr(v36);
          v38 = v37 - 1;
        }
        while (__stlxr(v38, v36));
        if (!v38)
          goto LABEL_47;
      }
    }
    else
    {
      v35 = (unsigned int *)*(v30 - 1);
      if (v35)
      {
        v40 = v35 + 3;
        do
        {
          v41 = __ldaxr(v40);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v40));
        if (!v42)
LABEL_47:
          (*(void (**)(unsigned int *))(*(_QWORD *)v35 + 24))(v35);
      }
    }
    v30 = v32;
  }
  while (v32 != v29);
  v31 = __p[0];
LABEL_63:
  __p[1] = v29;
  operator delete(v31);
LABEL_64:
  dispatch_release(object);
  if (v69)
    _Block_release(v69);
  v49 = (unint64_t *)&v15->__shared_owners_;
  do
    v50 = __ldaxr(v49);
  while (__stlxr(v50 - 1, v49));
  if (v50)
  {
    if (!v11)
      goto LABEL_73;
LABEL_72:
    _Block_release(v11);
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (v11)
      goto LABEL_72;
  }
LABEL_73:
  v51 = operator new(0x20uLL);
  v51[1] = v66;
  v66 = 0uLL;
  *((_QWORD *)v51 + 1) = v1 + 1032;
  v52 = *(_QWORD *)(v1 + 1032);
  *(_QWORD *)v51 = v52;
  *(_QWORD *)(v52 + 8) = v51;
  *(_QWORD *)(v1 + 1032) = v51;
  ++*(_QWORD *)(v1 + 1048);
  v53 = v65;
  if (v65)
  {
    v54 = (unint64_t *)&v65->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (v63)
    std::__shared_weak_count::__release_weak(v63);
  if (v61)
  {
    v56 = (unint64_t *)&v61->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
}

void sub_1BF4E42F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void FSModule::requestFSSyncIndication(NSObject **this, int a2)
{
  int v4;
  NSObject *v5;
  _BOOL4 v6;
  const char *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  _QWORD v11[2];
  void *v12;
  NSObject *v13;
  _QWORD aBlock[5];
  uint8_t buf[24];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = ((uint64_t (*)(NSObject **))(*this)[11].isa)(this);
  v5 = this[11];
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "#I Server going down. Skipping baseband requested rfs sync", buf, 2u);
    }
    return;
  }
  if (v6)
  {
    v7 = "false";
    if (a2)
      v7 = "true";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v7;
    _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "#I Baseband requested rfs sync with resetAfterSync = %s", buf, 0xCu);
  }
  memset(buf, 170, 16);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN8FSModule23requestFSSyncIndicationEb_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_39_2;
  aBlock[4] = this;
  v8 = _Block_copy(aBlock);
  v9 = this[17];
  if (v9)
    dispatch_retain(this[17]);
  *(_QWORD *)buf = v8;
  *(_QWORD *)&buf[8] = v9;
  if (a2)
  {
    if (v8)
    {
      v10 = _Block_copy(v8);
      v12 = v10;
      v13 = v9;
      if (!v9)
      {
LABEL_14:
        FSModule::requestFSSync(this, 2, (uint64_t)&v12);
        if (v9)
          dispatch_release(v9);
        if (v10)
          _Block_release(v10);
        goto LABEL_19;
      }
    }
    else
    {
      v10 = 0;
      v12 = 0;
      v13 = v9;
      if (!v9)
        goto LABEL_14;
    }
    dispatch_retain(v9);
    goto LABEL_14;
  }
  v11[0] = 0;
  v11[1] = 0;
  FSModule::requestFSSync(this, 2, (uint64_t)v11);
LABEL_19:
  if (v9)
    dispatch_release(v9);
  if (v8)
    _Block_release(v8);
}

void sub_1BF4E463C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

_WORD *FSModule::getShutdownStages@<X0>(_QWORD *a1@<X8>)
{
  _WORD *v3;
  _WORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(2uLL);
  *a1 = v3;
  *v3 = 768;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void FSModule::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  uint64_t *v4;
  NSObject *v5;
  _QWORD v6[5];
  dispatch_group_t group;
  char v8;

  v4 = (uint64_t *)(a1 + 120);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 1174405120;
  v6[2] = ___ZN8FSModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v6[3] = &__block_descriptor_tmp_7_9;
  v5 = *a3;
  v6[4] = a1;
  group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  v8 = a2;
  ctu::SharedSynchronizable<FSModule>::execute_wrapped(v4, (uint64_t)v6);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN8FSModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  uint64_t *v4;
  uint64_t *i;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int j;
  unsigned int v9;
  boost::signals2::detail::connection_body_base *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD block[4];
  dispatch_group_t group;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(a1 + 48) == 3)
  {
    v4 = (uint64_t *)(v1 + 1032);
    for (i = *(uint64_t **)(v1 + 1040); i != v4; i = (uint64_t *)i[1])
    {
      v6 = (unsigned int *)i[3];
      if (v6)
      {
        v7 = v6 + 2;
        for (j = v6[2]; j; j = v9)
        {
          v9 = __ldxr(v7);
          if (v9 == j)
          {
            if (!__stxr(j + 1, v7))
            {
              v10 = (boost::signals2::detail::connection_body_base *)i[2];
              if (v10)
                boost::signals2::detail::connection_body_base::disconnect(v10);
              do
              {
                v11 = __ldaxr(v7);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v7));
              if (!v12)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
                v13 = v6 + 3;
                do
                {
                  v14 = __ldaxr(v13);
                  v15 = v14 - 1;
                }
                while (__stlxr(v15, v13));
                if (!v15)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
              }
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
    }
    if (*(_QWORD *)(v1 + 1048))
    {
      v16 = *(uint64_t **)(v1 + 1040);
      v17 = *(_QWORD *)(v1 + 1032);
      v18 = *v16;
      *(_QWORD *)(v18 + 8) = *(_QWORD *)(v17 + 8);
      **(_QWORD **)(v17 + 8) = v18;
      *(_QWORD *)(v1 + 1048) = 0;
      if (v16 != v4)
      {
        do
        {
          v26 = (uint64_t *)v16[1];
          v27 = (unsigned int *)v16[3];
          if (v27)
          {
            v28 = v27 + 3;
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
              (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 24))(v27);
          }
          operator delete(v16);
          v16 = v26;
        }
        while (v26 != v4);
      }
    }
    v19 = *(void **)(v1 + 1024);
    *(_QWORD *)(v1 + 1024) = 0;
    if (v19)
    {
      TelephonyBasebandWatchdogStop();
      operator delete(v19);
    }
    v20 = *(std::__shared_weak_count **)(v1 + 1064);
    *(_OWORD *)(v1 + 1056) = 0u;
    if (!v20)
      goto LABEL_34;
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      v23 = *(std::__shared_weak_count **)(v1 + 952);
      *(_OWORD *)(v1 + 944) = 0u;
      if (!v23)
        return;
    }
    else
    {
LABEL_34:
      v23 = *(std::__shared_weak_count **)(v1 + 952);
      *(_OWORD *)(v1 + 944) = 0uLL;
      if (!v23)
        return;
    }
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  else if (!*(_BYTE *)(a1 + 48))
  {
    v2 = *(NSObject **)(v1 + 1008);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZN8FSModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_2;
    block[3] = &__block_descriptor_tmp_6_12;
    v3 = *(NSObject **)(a1 + 40);
    group = v3;
    if (v3)
    {
      dispatch_retain(v3);
      dispatch_group_enter(v3);
    }
    dispatch_async(v2, block);
    if (group)
    {
      dispatch_group_leave(group);
      if (group)
        dispatch_release(group);
    }
  }
}

void sub_1BF4E4A2C(_Unwind_Exception *exception_object)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  do
  {
    v4 = __ldaxr(v2);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v2));
  if (!v5)
  {
    (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1);
    v6 = v1 + 3;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 24))(v1);
  }
  _Unwind_Resume(exception_object);
}

void FSModule::initialize(_QWORD *a1, NSObject **a2)
{
  uint64_t *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD v15[5];
  dispatch_group_t group;

  v3 = a1 + 15;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1174405120;
  v15[2] = ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v15[3] = &__block_descriptor_tmp_29_3;
  v4 = *a2;
  v15[4] = a1;
  group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  ctu::SharedSynchronizable<FSModule>::execute_wrapped(v3, (uint64_t)v15);
  v5 = (std::__shared_weak_count *)a1[16];
  if (!v5 || (v6 = a1[15], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v9 = operator new(8uLL);
  *v9 = a1;
  v10 = a1[17];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = operator new(0x18uLL);
  *v13 = v9;
  v13[1] = v6;
  v13[2] = v8;
  dispatch_async_f(v10, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<FSModule>::execute_wrapped<FSModule::initialize(dispatch::group_session)::$_0>(FSModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<FSModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<FSModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void *v10;
  size_t v11;
  size_t v12;
  void **p_dst;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  const void *v19;
  size_t v20;
  size_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  const void *v27;
  size_t v28;
  size_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  _QWORD v35[6];
  std::__shared_weak_count *v36;
  const void *v37;
  _QWORD v38[6];
  std::__shared_weak_count *v39;
  const void *v40;
  _QWORD aBlock[6];
  std::__shared_weak_count *v42;
  const void *v43;
  void **__dst;
  size_t v45;
  unint64_t v46;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (v3 = *(_QWORD *)(v1 + 120), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (const void *)*MEMORY[0x1E0CFB5D0];
  v11 = strlen((const char *)*MEMORY[0x1E0CFB5D0]);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (void **)operator new(v14 + 1);
    v45 = v12;
    v46 = v15 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v46) = v11;
    p_dst = (void **)&__dst;
    if (!v11)
      goto LABEL_17;
  }
  memmove(p_dst, v10, v12);
LABEL_17:
  *((_BYTE *)p_dst + v12) = 0;
  v16 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_14_3;
  aBlock[4] = v1;
  aBlock[5] = v3;
  v42 = v5;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  v18 = _Block_copy(aBlock);
  v43 = v18;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v43);
  if (v18)
    _Block_release(v18);
  if (SHIBYTE(v46) < 0)
    operator delete(__dst);
  v19 = (const void *)*MEMORY[0x1E0CFBC30];
  v20 = strlen((const char *)*MEMORY[0x1E0CFBC30]);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = (void **)operator new(v23 + 1);
    v45 = v21;
    v46 = v24 | 0x8000000000000000;
    __dst = v22;
  }
  else
  {
    HIBYTE(v46) = v20;
    v22 = (void **)&__dst;
    if (!v20)
      goto LABEL_31;
  }
  memmove(v22, v19, v21);
LABEL_31:
  *((_BYTE *)v22 + v21) = 0;
  v38[0] = v16;
  v38[1] = 1174405120;
  v38[2] = ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_15;
  v38[3] = &__block_descriptor_tmp_18_7;
  v38[4] = v1;
  v38[5] = v3;
  v39 = v5;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  v26 = _Block_copy(v38);
  v40 = v26;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v40);
  if (v26)
    _Block_release(v26);
  if (SHIBYTE(v46) < 0)
    operator delete(__dst);
  v27 = (const void *)*MEMORY[0x1E0CFB5C8];
  v28 = strlen((const char *)*MEMORY[0x1E0CFB5C8]);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v29 = v28;
  if (v28 >= 0x17)
  {
    v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v31 = v28 | 7;
    v32 = v31 + 1;
    v30 = (void **)operator new(v31 + 1);
    v45 = v29;
    v46 = v32 | 0x8000000000000000;
    __dst = v30;
  }
  else
  {
    HIBYTE(v46) = v28;
    v30 = (void **)&__dst;
    if (!v28)
      goto LABEL_45;
  }
  memmove(v30, v27, v29);
LABEL_45:
  *((_BYTE *)v30 + v29) = 0;
  v35[0] = v16;
  v35[1] = 1174405120;
  v35[2] = ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_19;
  v35[3] = &__block_descriptor_tmp_28_2;
  v35[4] = v1;
  v35[5] = v3;
  v36 = v5;
  do
    v33 = __ldxr(p_shared_weak_owners);
  while (__stxr(v33 + 1, p_shared_weak_owners));
  v34 = _Block_copy(v35);
  v37 = v34;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v37);
  if (v34)
    _Block_release(v34);
  if (SHIBYTE(v46) < 0)
    operator delete(__dst);
  if (v36)
    std::__shared_weak_count::__release_weak(v36);
  if (v39)
    std::__shared_weak_count::__release_weak(v39);
  if (v42)
    std::__shared_weak_count::__release_weak(v42);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF4E4FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31)
{
  std::__shared_weak_count *v31;
  const void *v32;
  uint64_t v33;
  std::__shared_weak_count *v35;

  if (v32)
    _Block_release(v32);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if ((*(char *)(v33 - 105) & 0x80000000) == 0)
    {
LABEL_5:
      v35 = a23;
      if (!a23)
      {
LABEL_10:
        if (a31)
        {
          std::__shared_weak_count::__release_weak(a31);
          std::__shared_weak_count::__release_weak(v31);
          _Unwind_Resume(a1);
        }
        std::__shared_weak_count::__release_weak(v31);
        _Unwind_Resume(a1);
      }
LABEL_9:
      std::__shared_weak_count::__release_weak(v35);
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v33 - 105) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v33 - 128));
  v35 = a23;
  if (!a23)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_2(_QWORD *a1, void **a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  void *v10;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  void *aBlock;
  xpc_object_t object;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 1174405120;
      v14[2] = ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_3;
      v14[3] = &__block_descriptor_tmp_12_9;
      v14[4] = v7;
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v11 = *a2;
        aBlock = v10;
        object = v11;
        if (v11)
        {
LABEL_6:
          xpc_retain(v11);
          goto LABEL_9;
        }
      }
      else
      {
        v11 = *a2;
        aBlock = 0;
        object = v11;
        if (v11)
          goto LABEL_6;
      }
      object = xpc_null_create();
LABEL_9:
      ctu::SharedSynchronizable<FSModule>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v14);
      xpc_release(object);
      object = 0;
      if (aBlock)
        _Block_release(aBlock);
      goto LABEL_11;
    }
  }
}

void ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_3(uint64_t a1)
{
  _QWORD *v2;
  const void *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  xpc_object_t value;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  std::string *v15;
  __int128 v16;
  NSObject *v17;
  uint64_t *v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  void *v22;
  char v23;
  xpc_object_t *v24;
  uint64_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  int v29;
  void *v30;
  void *v31;
  const void *v32;
  void *v33;
  char v34;
  xpc_object_t v35;
  void *v36;
  xpc_object_t *v37;
  xpc_object_t v38;
  xpc_object_t v39;
  _QWORD v40[2];
  void *v41;
  NSObject *v42;
  _QWORD aBlock[4];
  void *v44;
  unsigned int v45;
  xpc_object_t object[3];
  void *v47;
  void *v48;
  char v49;
  std::string __dst;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 32);
  if ((*(unsigned int (**)(_QWORD *))(*v2 + 88))(v2))
  {
    memset(object, 170, sizeof(object));
    v3 = (const void *)*MEMORY[0x1E0CFB5D0];
    v4 = strlen((const char *)*MEMORY[0x1E0CFB5D0]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v12 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v12 = v4 | 7;
      v13 = v12 + 1;
      p_dst = (std::string *)operator new(v12 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_17:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        v14 = (char *)operator new(0x28uLL);
        strcpy(v14, " rejected; ABM is shutting down ");
        v15 = std::string::append(&__dst, v14, 0x20uLL);
        v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        object[2] = (xpc_object_t)v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)object = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        operator delete(v14);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v17 = v2[11];
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
LABEL_19:
            v19 = *(_QWORD *)(a1 + 40);
            v18 = (uint64_t *)(a1 + 40);
            if (!v19)
            {
LABEL_78:
              if (SHIBYTE(object[2]) < 0)
                operator delete(object[0]);
              return;
            }
LABEL_28:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v26 = (xpc_object_t)HIBYTE(object[2]);
            if (SHIBYTE(object[2]) < 0)
              v26 = object[1];
            if (v26)
            {
              v27 = xpc_dictionary_create(0, 0, 0);
              if (v27 || (v27 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8A86C](v27) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v27);
                  v28 = v27;
                }
                else
                {
                  v28 = xpc_null_create();
                }
              }
              else
              {
                v28 = xpc_null_create();
                v27 = 0;
              }
              xpc_release(v27);
              v35 = xpc_null_create();
              v36 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
              xpc_release(v36);
              xpc_release(v35);
              if (SHIBYTE(object[2]) >= 0)
                v37 = object;
              else
                v37 = (xpc_object_t *)object[0];
              v38 = xpc_string_create((const char *)v37);
              if (!v38)
                v38 = xpc_null_create();
              xpc_dictionary_set_value(v28, (const char *)*MEMORY[0x1E0CFB0D0], v38);
              v39 = xpc_null_create();
              xpc_release(v38);
              xpc_release(v39);
            }
            v45 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v18, &v45, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_78;
          }
        }
        else
        {
          v17 = v2[11];
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            goto LABEL_19;
        }
        v24 = object;
        if (SHIBYTE(object[2]) < 0)
          v24 = (xpc_object_t *)object[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
        _os_log_impl(&dword_1BF335000, v17, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = *(_QWORD *)(a1 + 40);
        v18 = (uint64_t *)(a1 + 40);
        if (!v25)
          goto LABEL_78;
        goto LABEL_28;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_17;
  }
  v7 = (void *)MEMORY[0x1E0C809B0];
  __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_9;
  aBlock[3] = &__block_descriptor_tmp_11_11;
  v8 = *(void **)(a1 + 40);
  if (v8)
    v8 = _Block_copy(v8);
  v44 = v8;
  v9 = _Block_copy(aBlock);
  v10 = v2[17];
  if (v10)
    dispatch_retain((dispatch_object_t)v2[17]);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v10;
  if (!*((_BYTE *)v2 + 929))
  {
    if (v9)
    {
      v20 = _Block_copy(v9);
      v21 = v20;
      object[0] = v7;
      object[1] = (xpc_object_t)1174405120;
      object[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_2;
      v47 = &__block_descriptor_tmp_66_1;
      if (v20)
      {
        v22 = _Block_copy(v20);
        v23 = 0;
LABEL_54:
        v48 = v22;
        v49 = 1;
        dispatch_async(v10, object);
        if (v48)
          _Block_release(v48);
        if ((v23 & 1) == 0)
          _Block_release(v21);
        goto LABEL_64;
      }
      v22 = 0;
    }
    else
    {
      v21 = 0;
      v22 = 0;
      object[0] = v7;
      object[1] = (xpc_object_t)1174405120;
      object[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_2;
      v47 = &__block_descriptor_tmp_66_1;
    }
    v23 = 1;
    goto LABEL_54;
  }
  value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 48), (const char *)*MEMORY[0x1E0CFBBE0]);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  v29 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  if (!v29)
  {
    v40[0] = 0;
    v40[1] = 0;
    FSModule::requestFSSync(v2, 1, (uint64_t)v40);
    if (v9)
    {
      v31 = _Block_copy(v9);
      v32 = v31;
      object[0] = v7;
      object[1] = (xpc_object_t)1174405120;
      object[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_2;
      v47 = &__block_descriptor_tmp_66_1;
      if (v31)
      {
        v33 = _Block_copy(v31);
        v34 = 0;
LABEL_60:
        v48 = v33;
        v49 = 1;
        dispatch_async(v10, object);
        if (v48)
          _Block_release(v48);
        if ((v34 & 1) == 0)
          _Block_release(v32);
        goto LABEL_64;
      }
      v33 = 0;
    }
    else
    {
      v32 = 0;
      v33 = 0;
      object[0] = v7;
      object[1] = (xpc_object_t)1174405120;
      object[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_2;
      v47 = &__block_descriptor_tmp_66_1;
    }
    v34 = 1;
    goto LABEL_60;
  }
  if (!v9)
  {
    v30 = 0;
    v41 = 0;
    v42 = v10;
    if (!v10)
      goto LABEL_40;
    goto LABEL_39;
  }
  v30 = _Block_copy(v9);
  v41 = v30;
  v42 = v10;
  if (v10)
LABEL_39:
    dispatch_retain(v10);
LABEL_40:
  FSModule::requestFSSync(v2, 1, (uint64_t)&v41);
  if (v10)
    dispatch_release(v10);
  if (v30)
    _Block_release(v30);
LABEL_64:
  if (v10)
    dispatch_release(v10);
  if (v9)
    _Block_release(v9);
  if (v44)
    _Block_release(v44);
}

void sub_1BF4E57E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *aBlock, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_9(uint64_t a1, int a2)
{
  uint64_t v3;
  xpc_object_t v4;
  uint64_t v5;
  xpc_object_t v6;
  xpc_object_t object;

  if (a2)
    v3 = 0;
  else
    v3 = 3760250880;
  v4 = xpc_null_create();
  v5 = *(_QWORD *)(a1 + 32);
  object = v4;
  v6 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v5 + 16))(v5, v3, &object);
  xpc_release(object);
  xpc_release(v6);
}

void sub_1BF4E5998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void FSModule::requestFSSync(_QWORD *a1, int a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *v14;
  unint64_t v15;
  void *v16;
  NSObject *v17;
  _QWORD v18[6];
  std::__shared_weak_count *v19;
  void *aBlock;
  dispatch_object_t object;
  int v22;

  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v7 = a1[15], (v8 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v14 = a1[126];
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 1174405120;
  v18[2] = ___ZN8FSModule13requestFSSyncEjN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke;
  v18[3] = &__block_descriptor_tmp_41_4;
  v18[4] = a1;
  v18[5] = v7;
  v19 = v9;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  v16 = *(void **)a3;
  if (*(_QWORD *)a3)
    v16 = _Block_copy(v16);
  v17 = *(NSObject **)(a3 + 8);
  aBlock = v16;
  object = v17;
  if (v17)
    dispatch_retain(v17);
  v22 = a2;
  dispatch_async(v14, v18);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
  std::__shared_weak_count::__release_weak(v9);
}

uint64_t __copy_helper_block_e8_40c32_ZTSNSt3__18weak_ptrI8FSModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c32_ZTSNSt3__18weak_ptrI8FSModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_15(_QWORD *a1, uint64_t a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[5];
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      if (a1[5])
      {
        v12[0] = MEMORY[0x1E0C809B0];
        v12[1] = 1174405120;
        v12[2] = ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_2_16;
        v12[3] = &__block_descriptor_tmp_17_5;
        v12[4] = v6;
        v9 = *a3;
        if (*a3)
          v9 = _Block_copy(v9);
        aBlock = v9;
        ctu::SharedSynchronizable<FSModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v12);
        if (aBlock)
          _Block_release(aBlock);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_2_16(uint64_t a1)
{
  uint64_t v2;
  int v3;
  _BOOL4 v4;
  NSObject *v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  unsigned int v14;
  uint8_t buf[8];
  __int16 v16;
  _BOOL4 v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 929))
  {
    v3 = BBUFSServerFlushInProgress();
    v4 = *(_BYTE *)(v2 + 931) != 0;
    v5 = *(NSObject **)(v2 + 88);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      goto LABEL_4;
    goto LABEL_3;
  }
  v4 = 0;
  v3 = 0;
  v5 = *(NSObject **)(v2 + 88);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
LABEL_3:
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v3;
    v16 = 1024;
    v17 = v4;
    _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "#I Reporting sync in progress: %d and sync not started: %d", buf, 0xEu);
  }
LABEL_4:
  *(_QWORD *)buf = 0xAAAAAAAAAAAAAAAALL;
  v6 = xpc_dictionary_create(0, 0, 0);
  v7 = v6;
  if (v6)
  {
    *(_QWORD *)buf = v6;
  }
  else
  {
    v7 = xpc_null_create();
    *(_QWORD *)buf = v7;
    if (!v7)
    {
      v8 = xpc_null_create();
      v7 = 0;
      goto LABEL_13;
    }
  }
  if (MEMORY[0x1C3B8A86C](v7) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v7);
    goto LABEL_14;
  }
  v8 = xpc_null_create();
LABEL_13:
  *(_QWORD *)buf = v8;
LABEL_14:
  xpc_release(v7);
  v9 = xpc_BOOL_create(v3);
  if (!v9)
    v9 = xpc_null_create();
  v10 = *(xpc_object_t *)buf;
  xpc_dictionary_set_value(*(xpc_object_t *)buf, (const char *)*MEMORY[0x1E0CFB438], v9);
  v11 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v11);
  v12 = xpc_BOOL_create(v4);
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(v10, (const char *)*MEMORY[0x1E0CFB440], v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  v14 = 0;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), &v14, (void **)buf);
  xpc_release(*(xpc_object_t *)buf);
}

void sub_1BF4E5E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_19(_QWORD *a1, xpc_object_t *a2, void **a3)
{
  uint64_t v5;
  xpc_object_t value;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  void *v10;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  void *aBlock;
  std::string __p;
  xpc_object_t object;
  std::string v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;

  v5 = a1[4];
  memset(&v18, 170, sizeof(v18));
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB8C8]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  v19 = 0;
  v20 = 0;
  v21 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object);
  v7 = (std::__shared_weak_count *)a1[6];
  if (!v7 || (v8 = std::__shared_weak_count::lock(v7), (v20 = v8) == 0))
  {
LABEL_20:
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_23:
    operator delete(v18.__r_.__value_.__l.__data_);
    return;
  }
  v9 = v8;
  v19 = a1[5];
  if (v19)
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 1174405120;
    v14[2] = ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_2_20;
    v14[3] = &__block_descriptor_tmp_27_7;
    v14[4] = v5;
    v10 = *a3;
    if (*a3)
      v10 = _Block_copy(v10);
    aBlock = v10;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
    else
      __p = v18;
    ctu::SharedSynchronizable<FSModule>::execute_wrapped((uint64_t *)(v5 + 120), (uint64_t)v14);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      v11 = aBlock;
      if (!aBlock)
        goto LABEL_17;
      goto LABEL_16;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    v11 = aBlock;
    if (aBlock)
LABEL_16:
      _Block_release(v11);
  }
LABEL_17:
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (v13)
    goto LABEL_20;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_23;
}

void sub_1BF4E608C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, uint64_t a17, xpc_object_t object, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (aBlock)
    _Block_release(aBlock);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v24 - 56);
  if (a24 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_2_20(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  _QWORD *v7;
  int v8;
  size_t v9;
  const void *v10;
  _QWORD *v11;
  NSObject *v12;
  xpc_object_t v13;
  xpc_object_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  std::string *v18;
  __int128 v19;
  NSObject *v20;
  uint64_t *v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  uint64_t *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  const void *v39;
  size_t v40;
  void *v41;
  void **v42;
  NSObject *v43;
  xpc_object_t v44;
  uint64_t v45;
  xpc_object_t v46;
  xpc_object_t v47;
  xpc_object_t v48;
  void *v49;
  void *v50;
  NSObject *v51;
  CommandDriverFactory *v52;
  uint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  void *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  NSObject *v74;
  CommandDriverFactory *v75;
  uint64_t v76;
  __int128 v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  void *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  xpc_object_t v94;
  void *v95;
  uint8_t *v96;
  xpc_object_t v97;
  xpc_object_t v98;
  uint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *size;
  unint64_t *v102;
  unint64_t v103;
  xpc_object_t v104;
  uint64_t v105;
  xpc_object_t v106;
  void *v107;
  dispatch_object_t v108;
  _QWORD v109[5];
  void *v110;
  void *v111;
  dispatch_object_t object;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  _QWORD aBlock[5];
  void *v120;
  const void *v121;
  void *v122[2];
  unint64_t v123;
  std::string __dst;
  uint8_t buf[24];
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 88))(v2))
  {
    memset(buf, 170, sizeof(buf));
    v3 = (const void *)*MEMORY[0x1E0CFB5C8];
    v4 = strlen((const char *)*MEMORY[0x1E0CFB5C8]);
    if (v4 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v15 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v15 = v4 | 7;
      v16 = v15 + 1;
      p_dst = (std::string *)operator new(v15 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_26:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        v17 = (char *)operator new(0x28uLL);
        strcpy(v17, " rejected; ABM is shutting down ");
        v18 = std::string::append(&__dst, v17, 0x20uLL);
        v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        *(_QWORD *)&buf[16] = *((_QWORD *)&v18->__r_.__value_.__l + 2);
        *(_OWORD *)buf = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        operator delete(v17);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v20 = *(NSObject **)(v2 + 88);
          if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
LABEL_28:
            v22 = *(_QWORD *)(a1 + 40);
            v21 = (uint64_t *)(a1 + 40);
            if (!v22)
            {
LABEL_183:
              if ((char)buf[23] < 0)
                operator delete(*(void **)buf);
              return;
            }
LABEL_34:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v25 = buf[23];
            if ((buf[23] & 0x80u) != 0)
              v25 = *(_QWORD *)&buf[8];
            if (v25)
            {
              v26 = xpc_dictionary_create(0, 0, 0);
              if (v26 || (v26 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8A86C](v26) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v26);
                  v27 = v26;
                }
                else
                {
                  v27 = xpc_null_create();
                }
              }
              else
              {
                v27 = xpc_null_create();
                v26 = 0;
              }
              xpc_release(v26);
              v94 = xpc_null_create();
              v95 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
              xpc_release(v95);
              xpc_release(v94);
              if ((buf[23] & 0x80u) == 0)
                v96 = buf;
              else
                v96 = *(uint8_t **)buf;
              v97 = xpc_string_create((const char *)v96);
              if (!v97)
                v97 = xpc_null_create();
              xpc_dictionary_set_value(v27, (const char *)*MEMORY[0x1E0CFB0D0], v97);
              v98 = xpc_null_create();
              xpc_release(v97);
              xpc_release(v98);
            }
            LODWORD(v117) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v21, (unsigned int *)&v117, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_183;
          }
        }
        else
        {
          v20 = *(NSObject **)(v2 + 88);
          if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            goto LABEL_28;
        }
        v23 = buf;
        if ((buf[23] & 0x80u) != 0)
          v23 = *(uint8_t **)buf;
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
        _os_log_impl(&dword_1BF335000, v20, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v24 = *(_QWORD *)(a1 + 40);
        v21 = (uint64_t *)(a1 + 40);
        if (!v24)
          goto LABEL_183;
        goto LABEL_34;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_26;
  }
  v7 = (_QWORD *)(a1 + 48);
  v8 = *(char *)(a1 + 71);
  if (v8 >= 0)
    v9 = *(unsigned __int8 *)(a1 + 71);
  else
    v9 = *(_QWORD *)(a1 + 56);
  if (v9 == strlen((const char *)*MEMORY[0x1E0CFB390]))
  {
    v10 = (const void *)(v8 >= 0 ? a1 + 48 : *v7);
    if (!memcmp(v10, (const void *)*MEMORY[0x1E0CFB390], v9))
    {
      if (!*(_BYTE *)(v2 + 929))
      {
        __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
        __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_21;
        aBlock[3] = &__block_descriptor_tmp_23_5;
        aBlock[4] = v2;
        v49 = *(void **)(a1 + 40);
        if (v49)
          v49 = _Block_copy(v49);
        v120 = v49;
        v50 = _Block_copy(aBlock);
        v51 = *(NSObject **)(v2 + 136);
        if (v51)
          dispatch_retain(v51);
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v51;
        v117 = 0xAAAAAAAAAAAAAAAALL;
        v118 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
        v52 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
        v53 = off_1ED70FD08;
        if (!off_1ED70FD08)
        {
          CommandDriverFactory::create_default_global(v52);
          v54 = *(_OWORD *)buf;
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          v55 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
          off_1ED70FD08 = v54;
          if (v55)
          {
            p_shared_owners = (unint64_t *)&v55->__shared_owners_;
            do
              v57 = __ldaxr(p_shared_owners);
            while (__stlxr(v57 - 1, p_shared_owners));
            if (!v57)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
          }
          v58 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v59 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 - 1, v59));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
          }
          v53 = off_1ED70FD08;
        }
        v61 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
        v113 = v53;
        v114 = *(&off_1ED70FD08 + 1);
        if (*(&off_1ED70FD08 + 1))
        {
          v62 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
          do
            v63 = __ldxr(v62);
          while (__stxr(v63 + 1, v62));
        }
        pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
        (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v53 + 16))(&v115, v53);
        v117 = 0;
        v118 = 0;
        if (v116)
        {
          v118 = std::__shared_weak_count::lock(v116);
          if (v118)
            v117 = v115;
          if (v116)
            std::__shared_weak_count::__release_weak(v116);
        }
        if (v61)
        {
          v64 = (unint64_t *)&v61->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v66 = v117;
        if (v117)
        {
          v67 = (void *)__dst.__r_.__value_.__r.__words[0];
          if (__dst.__r_.__value_.__r.__words[0])
            v67 = _Block_copy(__dst.__r_.__value_.__l.__data_);
          v111 = v67;
          object = (dispatch_object_t)__dst.__r_.__value_.__l.__size_;
          if (__dst.__r_.__value_.__l.__size_)
            dispatch_retain((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
          (*(void (**)(unint64_t, void **))(*(_QWORD *)v66 + 80))(v66, &v111);
          if (object)
            dispatch_release(object);
          if (v111)
            _Block_release(v111);
        }
        v68 = v118;
        if (v118)
        {
          v69 = (unint64_t *)&v118->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
        if (__dst.__r_.__value_.__l.__size_)
          dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
        if (__dst.__r_.__value_.__r.__words[0])
          _Block_release(__dst.__r_.__value_.__l.__data_);
        if (v120)
          _Block_release(v120);
        return;
      }
      if (!FSModule::eraseRemoteFileSystem_sync((NSObject **)v2))
      {
        v71 = 3760250880;
LABEL_200:
        v104 = xpc_null_create();
        v105 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)buf = v104;
        v106 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(v105 + 16))(v105, v71, buf);
        xpc_release(*(xpc_object_t *)buf);
        xpc_release(v106);
        return;
      }
      __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
      __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
      pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
      v29 = (uint64_t *)off_1ED70FA00;
      if (!off_1ED70FA00)
      {
        ABMServer::create_default_global(buf);
        v30 = *(_OWORD *)buf;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        v31 = (std::__shared_weak_count *)*(&off_1ED70FA00 + 1);
        off_1ED70FA00 = v30;
        if (v31)
        {
          v32 = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        v34 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v35 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        v29 = (uint64_t *)off_1ED70FA00;
      }
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
      __dst.__r_.__value_.__l.__size_ = *(&off_1ED70FA00 + 1);
      if (*(&off_1ED70FA00 + 1))
      {
        v37 = (unint64_t *)(*(&off_1ED70FA00 + 1) + 8);
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
      v39 = (const void *)*MEMORY[0x1E0CFBAD0];
      v40 = strlen((const char *)*MEMORY[0x1E0CFBAD0]);
      if (v40 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v41 = (void *)v40;
      if (v40 >= 0x17)
      {
        v99 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v40 | 7) != 0x17)
          v99 = v40 | 7;
        v100 = v99 + 1;
        v42 = (void **)operator new(v99 + 1);
        v122[1] = v41;
        v123 = v100 | 0x8000000000000000;
        v122[0] = v42;
      }
      else
      {
        HIBYTE(v123) = v40;
        v42 = v122;
        if (!v40)
          goto LABEL_192;
      }
      memmove(v42, v39, (size_t)v41);
LABEL_192:
      *((_BYTE *)v41 + (_QWORD)v42) = 0;
      v121 = 0;
      ABMServer::broadcast(v29, (uint64_t)v122, &v121);
      if (SHIBYTE(v123) < 0)
        operator delete(v122[0]);
      size = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
      if (__dst.__r_.__value_.__l.__size_)
      {
        v102 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v71 = 0;
      goto LABEL_200;
    }
  }
  if (v9 != strlen((const char *)*MEMORY[0x1E0CFC080])
    || (v8 >= 0 ? (v11 = (_QWORD *)(a1 + 48)) : (v11 = (_QWORD *)*v7),
        memcmp(v11, (const void *)*MEMORY[0x1E0CFC080], v9)))
  {
    v12 = *(NSObject **)(v2 + 88);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      if (v8 < 0)
        v7 = (_QWORD *)*v7;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v7;
      _os_log_error_impl(&dword_1BF335000, v12, OS_LOG_TYPE_ERROR, "Command [%s] not supported", buf, 0xCu);
    }
    *(_QWORD *)buf = 0xAAAAAAAAAAAAAAAALL;
    v13 = xpc_dictionary_create(0, 0, 0);
    v14 = v13;
    if (v13)
    {
      *(_QWORD *)buf = v13;
    }
    else
    {
      v14 = xpc_null_create();
      *(_QWORD *)buf = v14;
      if (!v14)
      {
        v28 = xpc_null_create();
        v14 = 0;
        goto LABEL_72;
      }
    }
    if (MEMORY[0x1C3B8A86C](v14) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v14);
LABEL_73:
      xpc_release(v14);
      v47 = xpc_string_create("Command not supported");
      if (!v47)
        v47 = xpc_null_create();
      xpc_dictionary_set_value(*(xpc_object_t *)buf, (const char *)*MEMORY[0x1E0CFB0D0], v47);
      v48 = xpc_null_create();
      xpc_release(v47);
      xpc_release(v48);
      LODWORD(__dst.__r_.__value_.__l.__data_) = -534716414;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), (unsigned int *)&__dst, (void **)buf);
      xpc_release(*(xpc_object_t *)buf);
      return;
    }
    v28 = xpc_null_create();
LABEL_72:
    *(_QWORD *)buf = v28;
    goto LABEL_73;
  }
  if (*(_BYTE *)(v2 + 929))
  {
    v43 = *(NSObject **)(v2 + 88);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF335000, v43, OS_LOG_TYPE_ERROR, "Restore carrier defaults command is not supported on this device", buf, 2u);
    }
    v44 = xpc_null_create();
    v45 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)buf = v44;
    v46 = xpc_null_create();
    (*(void (**)(uint64_t, _QWORD, uint8_t *))(v45 + 16))(v45, 0, buf);
    xpc_release(*(xpc_object_t *)buf);
    xpc_release(v46);
  }
  else
  {
    __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
    v109[0] = MEMORY[0x1E0C809B0];
    v109[1] = 1174405120;
    v109[2] = ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_24;
    v109[3] = &__block_descriptor_tmp_25_6;
    v109[4] = v2;
    v72 = *(void **)(a1 + 40);
    if (v72)
      v72 = _Block_copy(v72);
    v110 = v72;
    v73 = _Block_copy(v109);
    v74 = *(NSObject **)(v2 + 136);
    if (v74)
      dispatch_retain(v74);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v74;
    v117 = 0xAAAAAAAAAAAAAAAALL;
    v118 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
    v75 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    v76 = off_1ED70FD08;
    if (!off_1ED70FD08)
    {
      CommandDriverFactory::create_default_global(v75);
      v77 = *(_OWORD *)buf;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v78 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
      off_1ED70FD08 = v77;
      if (v78)
      {
        v79 = (unint64_t *)&v78->__shared_owners_;
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      v81 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v82 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      v76 = off_1ED70FD08;
    }
    v84 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    v113 = v76;
    v114 = *(&off_1ED70FD08 + 1);
    if (*(&off_1ED70FD08 + 1))
    {
      v85 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
      do
        v86 = __ldxr(v85);
      while (__stxr(v86 + 1, v85));
    }
    pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v76 + 16))(&v115, v76);
    v117 = 0;
    v118 = 0;
    if (v116)
    {
      v118 = std::__shared_weak_count::lock(v116);
      if (v118)
        v117 = v115;
      if (v116)
        std::__shared_weak_count::__release_weak(v116);
    }
    if (v84)
    {
      v87 = (unint64_t *)&v84->__shared_owners_;
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
    v89 = v117;
    if (v117)
    {
      v90 = (void *)__dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__r.__words[0])
        v90 = _Block_copy(__dst.__r_.__value_.__l.__data_);
      v107 = v90;
      v108 = (dispatch_object_t)__dst.__r_.__value_.__l.__size_;
      if (__dst.__r_.__value_.__l.__size_)
        dispatch_retain((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
      (*(void (**)(unint64_t, void **))(*(_QWORD *)v89 + 88))(v89, &v107);
      if (v108)
        dispatch_release(v108);
      if (v107)
        _Block_release(v107);
    }
    v91 = v118;
    if (v118)
    {
      v92 = (unint64_t *)&v118->__shared_owners_;
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    if (__dst.__r_.__value_.__l.__size_)
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    if (__dst.__r_.__value_.__r.__words[0])
      _Block_release(__dst.__r_.__value_.__l.__data_);
    if (v110)
      _Block_release(v110);
  }
}

void sub_1BF4E6D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *aBlock, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  uint64_t v30;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v30 - 128);
  if (aBlock)
    _Block_release(aBlock);
  _Unwind_Resume(a1);
}

uint64_t FSModule::eraseRemoteFileSystem_sync(NSObject **this)
{
  const char *v2;
  size_t v3;
  void *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void **v10;
  void **v12;
  void *__dst[3];
  uint8_t buf[4];
  void **v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  FSModule::handleBasebandReset_sync((FSModule *)this);
  memset(__dst, 170, sizeof(__dst));
  v2 = (const char *)MEMORY[0x1C3B883F4]();
  v3 = strlen(v2);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    v5 = (void **)operator new(v6 + 1);
    __dst[1] = v4;
    __dst[2] = (void *)(v7 | 0x8000000000000000);
    __dst[0] = v5;
    goto LABEL_8;
  }
  HIBYTE(__dst[2]) = v3;
  v5 = __dst;
  if (v3)
LABEL_8:
    memmove(v5, v2, (size_t)v4);
  *((_BYTE *)v4 + (_QWORD)v5) = 0;
  v8 = support::fs::removeDirContents((const char *)__dst, 0);
  v9 = this[11];
  if ((_DWORD)v8)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = __dst;
      if (SHIBYTE(__dst[2]) < 0)
        v10 = (void **)__dst[0];
      *(_DWORD *)buf = 136315138;
      v15 = v10;
      _os_log_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEFAULT, "#I Removed contents of %s", buf, 0xCu);
      if (SHIBYTE(__dst[2]) < 0)
        goto LABEL_17;
      return v8;
    }
  }
  else if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    v12 = __dst;
    if (SHIBYTE(__dst[2]) < 0)
      v12 = (void **)__dst[0];
    *(_DWORD *)buf = 136315138;
    v15 = v12;
    _os_log_error_impl(&dword_1BF335000, v9, OS_LOG_TYPE_ERROR, "Failed removing %s", buf, 0xCu);
    if (SHIBYTE(__dst[2]) < 0)
      goto LABEL_17;
    return v8;
  }
  if (SHIBYTE(__dst[2]) < 0)
LABEL_17:
    operator delete(__dst[0]);
  return v8;
}

void sub_1BF4E71F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ABMServer::broadcast(uint64_t *a1, uint64_t a2, const void **a3)
{
  const void *v5;
  const void *v6;
  const void *v7;
  std::string v8;

  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v5 = *a3;
    v7 = v5;
    if (!v5)
      goto LABEL_6;
    goto LABEL_5;
  }
  v8 = *(std::string *)a2;
  v5 = *a3;
  v7 = v5;
  if (v5)
LABEL_5:
    CFRetain(v5);
LABEL_6:
  v6 = 0;
  ABMServer::broadcast(a1, (uint64_t)&v8, &v7, &v6);
  if (v5)
    CFRelease(v5);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

void sub_1BF4E72DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_21(uint64_t a1, void **a2)
{
  void *v4;
  uint64_t (*v5)(uint64_t);
  NSObject *v6;
  uint64_t *v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  const void *v17;
  size_t v18;
  void *v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  xpc_object_t v28;
  uint64_t v29;
  xpc_object_t v30;
  const void *v31;
  void *__dst[2];
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  xpc_object_t buf[3];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  if (*a2)
    v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  else
    v5 = 0;
  if (v5)
  {
    v6 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 138412290;
      *(xpc_object_t *)((char *)buf + 4) = v4;
      _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, "#I Failed to trigger nonvolatile erase: %@", (uint8_t *)buf, 0xCu);
    }
    goto LABEL_37;
  }
  v34 = 0xAAAAAAAAAAAAAAAALL;
  v35 = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v7 = (uint64_t *)off_1ED70FA00;
  if (!off_1ED70FA00)
  {
    ABMServer::create_default_global(buf);
    v8 = *(_OWORD *)buf;
    memset(buf, 0, 16);
    v9 = (std::__shared_weak_count *)*(&off_1ED70FA00 + 1);
    off_1ED70FA00 = v8;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)buf[1];
    if (buf[1])
    {
      v13 = (unint64_t *)((char *)buf[1] + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v7 = (uint64_t *)off_1ED70FA00;
  }
  v34 = (unint64_t)v7;
  v35 = *(&off_1ED70FA00 + 1);
  if (*(&off_1ED70FA00 + 1))
  {
    v15 = (unint64_t *)(*(&off_1ED70FA00 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v17 = (const void *)*MEMORY[0x1E0CFBAD0];
  v18 = strlen((const char *)*MEMORY[0x1E0CFBAD0]);
  if (v18 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v19 = (void *)v18;
  if (v18 >= 0x17)
  {
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v20 = (void **)operator new(v21 + 1);
    __dst[1] = v19;
    v33 = v22 | 0x8000000000000000;
    __dst[0] = v20;
  }
  else
  {
    HIBYTE(v33) = v18;
    v20 = __dst;
    if (!v18)
      goto LABEL_30;
  }
  memmove(v20, v17, (size_t)v19);
LABEL_30:
  *((_BYTE *)v19 + (_QWORD)v20) = 0;
  v31 = 0;
  ABMServer::broadcast(v7, (uint64_t)__dst, &v31);
  if (SHIBYTE(v33) < 0)
    operator delete(__dst[0]);
  v23 = (std::__shared_weak_count *)v35;
  if (v35)
  {
    v24 = (unint64_t *)(v35 + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
LABEL_37:
  if (*a2)
    v26 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  else
    v26 = 0;
  if (v26)
    v27 = 3760250880;
  else
    v27 = 0;
  v28 = xpc_null_create();
  v29 = *(_QWORD *)(a1 + 40);
  buf[0] = v28;
  v30 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v29 + 16))(v29, v27, buf);
  xpc_release(buf[0]);
  xpc_release(v30);
}

void sub_1BF4E75E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, xpc_object_t object)
{
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  _Unwind_Resume(a1);
}

void ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_24(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  NSObject *v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  xpc_object_t v9;
  uint64_t v10;
  xpc_object_t v11;
  _BYTE object[24];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  if (*a2)
    v4 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  else
    v4 = 0;
  if (v4)
  {
    v6 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)object = 138412290;
      *(_QWORD *)&object[4] = v3;
      _os_log_error_impl(&dword_1BF335000, v6, OS_LOG_TYPE_ERROR, "Failed to trigger nonvolatile restore: %@", object, 0xCu);
      v3 = *a2;
    }
  }
  if (v3)
    v7 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  else
    v7 = 0;
  if (v7)
    v8 = 3760250880;
  else
    v8 = 0;
  v9 = xpc_null_create();
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)object = v9;
  v11 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, _BYTE *))(v10 + 16))(v10, v8, object);
  xpc_release(*(xpc_object_t *)object);
  xpc_release(v11);
}

void sub_1BF4E77A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void __copy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  void *v4;
  std::string *v5;
  __int128 v6;

  v4 = *(void **)(a2 + 40);
  if (v4)
    v4 = _Block_copy(v4);
  a1[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v4;
  v5 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1BF4E784C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 40);
  if (v3)
    _Block_release(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  const void *v2;

  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    v2 = *(const void **)(a1 + 40);
    if (!v2)
      return;
    goto LABEL_5;
  }
  v2 = *(const void **)(a1 + 40);
  if (v2)
LABEL_5:
    _Block_release(v2);
}

void FSModule::finishInitialization_sync(FSModule *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const char *v10;
  size_t v11;
  void *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  const void *v23;
  const void *v24;
  size_t v25;
  void *v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  NSObject *v33;
  const void *v34;
  size_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  NSObject *v42;
  const void *v43;
  size_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  NSObject *v51;
  _QWORD v52[5];
  std::__shared_weak_count *v53;
  void *v54;
  dispatch_object_t v55;
  void *v56[2];
  unint64_t v57;
  _QWORD v58[6];
  std::__shared_weak_count *v59;
  void *v60;
  dispatch_object_t object;
  void *__p[2];
  unint64_t v63;
  _QWORD aBlock[6];
  std::__shared_weak_count *v65;
  const void *v66;
  dispatch_object_t v67;
  void *v68[2];
  unint64_t v69;
  const void *v70;
  void *__dst[2];
  unint64_t v72;
  __int128 v73;

  if (!*((_BYTE *)this + 929))
    return;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v2 || (v3 = *((_QWORD *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (const char *)(*(uint64_t (**)(FSModule *))(*(_QWORD *)this + 16))(this);
  v11 = strlen(v10);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = (void *)v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = (void **)operator new(v14 + 1);
    __dst[1] = v12;
    v72 = v15 | 0x8000000000000000;
    __dst[0] = v13;
  }
  else
  {
    HIBYTE(v72) = v11;
    v13 = __dst;
    if (!v11)
      goto LABEL_18;
  }
  memmove(v13, v10, (size_t)v12);
LABEL_18:
  *((_BYTE *)v12 + (_QWORD)v13) = 0;
  v70 = 0;
  AppleBasebandManager::create();
  v16 = v73;
  v73 = 0uLL;
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 119);
  *((_OWORD *)this + 59) = v16;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
  if (!*((_QWORD *)&v73 + 1))
    goto LABEL_27;
  v21 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
  {
LABEL_27:
    v23 = v70;
    if (!v70)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  v23 = v70;
  if (v70)
LABEL_28:
    CFRelease(v23);
LABEL_29:
  if (SHIBYTE(v72) < 0)
    operator delete(__dst[0]);
  v24 = (const void *)*MEMORY[0x1E0CFBD68];
  v25 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  if (v25 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v26 = (void *)v25;
  if (v25 >= 0x17)
  {
    v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v28 = v25 | 7;
    v29 = v28 + 1;
    v27 = (void **)operator new(v28 + 1);
    v68[1] = v26;
    v69 = v29 | 0x8000000000000000;
    v68[0] = v27;
  }
  else
  {
    HIBYTE(v69) = v25;
    v27 = v68;
    if (!v25)
      goto LABEL_39;
  }
  memmove(v27, v24, (size_t)v26);
LABEL_39:
  *((_BYTE *)v26 + (_QWORD)v27) = 0;
  v30 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN8FSModule25finishInitialization_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_31_5;
  aBlock[4] = this;
  aBlock[5] = v3;
  v65 = v5;
  do
    v31 = __ldxr(p_shared_weak_owners);
  while (__stxr(v31 + 1, p_shared_weak_owners));
  v32 = _Block_copy(aBlock);
  v33 = *((_QWORD *)this + 17);
  if (v33)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v66 = v32;
  v67 = v33;
  AppleBasebandManager::setEventHandler();
  if (v67)
    dispatch_release(v67);
  if (v66)
    _Block_release(v66);
  if (SHIBYTE(v69) < 0)
    operator delete(v68[0]);
  v34 = (const void *)*MEMORY[0x1E0CFBF60];
  v35 = strlen((const char *)*MEMORY[0x1E0CFBF60]);
  if (v35 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v36 = (void *)v35;
  if (v35 >= 0x17)
  {
    v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v38 = v35 | 7;
    v39 = v38 + 1;
    v37 = operator new(v38 + 1);
    __p[1] = v36;
    v63 = v39 | 0x8000000000000000;
    __p[0] = v37;
  }
  else
  {
    HIBYTE(v63) = v35;
    v37 = __p;
    if (!v35)
      goto LABEL_57;
  }
  memmove(v37, v34, (size_t)v36);
LABEL_57:
  *((_BYTE *)v36 + (_QWORD)v37) = 0;
  v58[0] = v30;
  v58[1] = 1174405120;
  v58[2] = ___ZN8FSModule25finishInitialization_syncEv_block_invoke_32;
  v58[3] = &__block_descriptor_tmp_33_7;
  v58[4] = this;
  v58[5] = v3;
  v59 = v5;
  do
    v40 = __ldxr(p_shared_weak_owners);
  while (__stxr(v40 + 1, p_shared_weak_owners));
  v41 = _Block_copy(v58);
  v42 = *((_QWORD *)this + 17);
  if (v42)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v60 = v41;
  object = v42;
  AppleBasebandManager::setEventHandler();
  if (object)
    dispatch_release(object);
  if (v60)
    _Block_release(v60);
  if (SHIBYTE(v63) < 0)
    operator delete(__p[0]);
  v43 = (const void *)*MEMORY[0x1E0CFB9A8];
  v44 = strlen((const char *)*MEMORY[0x1E0CFB9A8]);
  if (v44 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v45 = (void *)v44;
  if (v44 >= 0x17)
  {
    v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v47 = v44 | 7;
    v48 = v47 + 1;
    v46 = operator new(v47 + 1);
    v56[1] = v45;
    v57 = v48 | 0x8000000000000000;
    v56[0] = v46;
    goto LABEL_74;
  }
  HIBYTE(v57) = v44;
  v46 = v56;
  if (v44)
LABEL_74:
    memmove(v46, v43, (size_t)v45);
  *((_BYTE *)v45 + (_QWORD)v46) = 0;
  v52[0] = v30;
  v52[1] = 1174405120;
  v52[2] = ___ZN8FSModule25finishInitialization_syncEv_block_invoke_34;
  v52[3] = &__block_descriptor_tmp_35_5;
  v52[4] = v3;
  v53 = v5;
  do
    v49 = __ldxr(p_shared_weak_owners);
  while (__stxr(v49 + 1, p_shared_weak_owners));
  v50 = _Block_copy(v52);
  v51 = *((_QWORD *)this + 17);
  if (v51)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v54 = v50;
  v55 = v51;
  AppleBasebandManager::setEventHandler();
  if (v55)
    dispatch_release(v55);
  if (v54)
    _Block_release(v54);
  if (SHIBYTE(v57) < 0)
    operator delete(v56[0]);
  AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 118));
  if (v53)
    std::__shared_weak_count::__release_weak(v53);
  if (v59)
    std::__shared_weak_count::__release_weak(v59);
  if (v65)
    std::__shared_weak_count::__release_weak(v65);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF4E7E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45)
{
  std::__shared_weak_count *v45;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (a30)
    std::__shared_weak_count::__release_weak(a30);
  if (a45)
  {
    std::__shared_weak_count::__release_weak(a45);
    std::__shared_weak_count::__release_weak(v45);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v45);
  _Unwind_Resume(a1);
}

void ___ZN8FSModule25finishInitialization_syncEv_block_invoke(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  const void *v8;
  const char *v9;
  int v10;
  size_t v11;
  void **v12;
  void **v13;
  void **v14;
  void **v15;
  const char *v16;
  int v17;
  size_t v18;
  void **v19;
  void **v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  void *v23[2];
  uint64_t v24;
  void *__p[3];
  void *v26[3];
  _QWORD v27[2];
  unint64_t v28;
  std::__shared_weak_count *v30;
  uint64_t v31;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v30 = v6;
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v28 = 0xAAAAAAAAAAAAAAAALL;
        abm::client::Event::getData(*a2);
        v8 = (const void *)0xAAAAAAAAAAAAAAAALL;
        if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
        {
          v27[0] = 0xAAAAAAAAAAAAAAAALL;
          v27[1] = 0xAAAAAAAAAAAAAAAALL;
          ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v27, (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL);
          memset(v26, 170, sizeof(v26));
          v9 = (const char *)*MEMORY[0x1E0CFB530];
          memset(__p, 0, sizeof(__p));
          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v23, v9);
          ctu::cf::map_adapter::getString();
          MEMORY[0x1C3B8936C](v23);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          v10 = SHIBYTE(v26[2]);
          if (SHIBYTE(v26[2]) >= 0)
            v11 = HIBYTE(v26[2]);
          else
            v11 = (size_t)v26[1];
          if (v11 == strlen((const char *)*MEMORY[0x1E0CFB980])
            && (SHIBYTE(v26[2]) >= 0 ? (v12 = v26) : (v12 = (void **)v26[0]),
                !memcmp(v12, (const void *)*MEMORY[0x1E0CFB980], v11)))
          {
            FSModule::handleBasebandBooted_sync((FSModule *)v5);
          }
          else if (v11 == strlen((const char *)*MEMORY[0x1E0CFBB68])
                 && (v10 >= 0 ? (v13 = v26) : (v13 = (void **)v26[0]),
                     !memcmp(v13, (const void *)*MEMORY[0x1E0CFBB68], v11)))
          {
            memset(__p, 170, sizeof(__p));
            v16 = (const char *)*MEMORY[0x1E0CFB538];
            v23[0] = 0;
            v23[1] = 0;
            v24 = 0;
            ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v31, v16);
            ctu::cf::map_adapter::getString();
            MEMORY[0x1C3B8936C](&v31);
            if (SHIBYTE(v24) < 0)
              operator delete(v23[0]);
            v17 = SHIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) >= 0)
              v18 = HIBYTE(__p[2]);
            else
              v18 = (size_t)__p[1];
            if (v18 == strlen((const char *)*MEMORY[0x1E0CFB590])
              && (SHIBYTE(__p[2]) >= 0 ? (v19 = __p) : (v19 = (void **)__p[0]),
                  !memcmp(v19, (const void *)*MEMORY[0x1E0CFB590], v18)))
            {
              FSModule::handleBasebandReset_sync((FSModule *)v5);
            }
            else if (v18 == strlen((const char *)*MEMORY[0x1E0CFB598]))
            {
              v20 = v17 >= 0 ? __p : (void **)__p[0];
              if (!memcmp(v20, (const void *)*MEMORY[0x1E0CFB598], v18))
              {
                *(_BYTE *)(v5 + 931) = 1;
                *(_QWORD *)(v5 + 1080) = TelephonyUtilGetSystemTime();
                *(_DWORD *)(v5 + 1072) = 5;
                *(_BYTE *)(v5 + 1088) = 1;
              }
            }
            if (SHIBYTE(__p[2]) < 0)
              operator delete(__p[0]);
          }
          else if (v11 == strlen((const char *)*MEMORY[0x1E0CFBA60])
                 && (v10 >= 0 ? (v14 = v26) : (v14 = (void **)v26[0]),
                     !memcmp(v14, (const void *)*MEMORY[0x1E0CFBA60], v11))
                 || v11 == strlen((const char *)*MEMORY[0x1E0CFBD30])
                 && (v10 >= 0 ? (v15 = v26) : (v15 = (void **)v26[0]),
                     !memcmp(v15, (const void *)*MEMORY[0x1E0CFBD30], v11)))
          {
            FSModule::handleBasebandReset_sync((FSModule *)v5);
          }
          if (SHIBYTE(v26[2]) < 0)
            operator delete(v26[0]);
          MEMORY[0x1C3B893A8](v27);
          v8 = (const void *)v28;
        }
        if (v8)
          CFRelease(v8);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF4E832C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  MEMORY[0x1C3B893A8](&a28);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v28 - 80));
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v28 - 72);
  _Unwind_Resume(a1);
}

void sub_1BF4E83D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1 - 72);
  _Unwind_Resume(a1);
}

void FSModule::handleBasebandBooted_sync(FSModule *this)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  capabilities::abs *shouldUseMinBasebandTransportIOReadSize;
  int v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v22[2];
  uint64_t v23[2];
  uint64_t v24[2];
  uint64_t v25[2];
  void *aBlock;
  int v27;
  char v28;
  __int16 v29;
  char v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  char v35;
  _BYTE v36[7];
  uint64_t v37[2];
  uint64_t v38[2];
  uint64_t v39[2];
  uint64_t v40[2];
  _QWORD v41[6];
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint8_t __dst[368];
  _BYTE buf[24];
  const char *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 928))
  {
    v2 = *((_QWORD *)this + 11);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I skipping establishing transport", buf, 2u);
    }
    goto LABEL_21;
  }
  v3 = MEMORY[0x1C3B883F4]();
  if (!v3)
  {
    GetABMLogServer(v40);
    v17 = *((_QWORD *)GetGlobalLogger(v40) + 4);
    std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)v40);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1BF335000, v17, OS_LOG_TYPE_FAULT, "failed copying default destination", buf, 2u);
    }
    GetABMLogServer(v39);
    v18 = *((_QWORD *)GetGlobalLogger(v39) + 4);
    std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)v39);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
      goto LABEL_40;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "ABM ASSERT";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "success";
    *(_WORD *)&buf[22] = 2080;
    v49 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Serve"
          "r/RFS/FSModule.cpp";
    LOWORD(v50) = 1024;
    *(_DWORD *)((char *)&v50 + 2) = 716;
    goto LABEL_39;
  }
  v4 = (void *)v3;
  v5 = BBUFSServerParametersInit();
  if ((v5 & 1) == 0)
  {
    GetABMLogServer(v38);
    v19 = *((_QWORD *)GetGlobalLogger(v38) + 4);
    std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)v38);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1BF335000, v19, OS_LOG_TYPE_FAULT, "failed preparing fs sync parameters", buf, 2u);
    }
    GetABMLogServer(v37);
    v18 = *((_QWORD *)GetGlobalLogger(v37) + 4);
    std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)v37);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
      goto LABEL_40;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "ABM ASSERT";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "success";
    *(_WORD *)&buf[22] = 2080;
    v49 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Serve"
          "r/RFS/FSModule.cpp";
    LOWORD(v50) = 1024;
    *(_DWORD *)((char *)&v50 + 2) = 722;
    goto LABEL_39;
  }
  v30 = -86;
  v29 = -21846;
  memset(v36, 170, sizeof(v36));
  shouldUseMinBasebandTransportIOReadSize = (capabilities::abs *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize((capabilities::abs *)v5);
  if ((_DWORD)shouldUseMinBasebandTransportIOReadSize)
    v7 = 0x4000;
  else
    v7 = 0x8000;
  capabilities::abs::shouldUseMinBasebandTransportIOReadCount(shouldUseMinBasebandTransportIOReadSize);
  v8 = *((_QWORD *)this + 132);
  v27 = 3;
  v28 = 1;
  v31 = 10;
  v32 = v7;
  v33 = 4;
  v34 = 0;
  v35 = 0;
  aBlock = 0;
  v9 = (*(uint64_t (**)(uint64_t, int *, void **))(*(_QWORD *)v8 + 48))(v8, &v27, &aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if ((v9 & 1) != 0)
  {
    v10 = *((_QWORD *)this + 132);
    v42 = 0;
    v43 = &v42;
    v44 = 0x2000000000;
    v45 = 0;
    v41[0] = MEMORY[0x1E0C809B0];
    v41[1] = 0x40000000;
    v41[2] = ___ZN17BasebandTransportdeEv_block_invoke;
    v41[3] = &unk_1E78FEA88;
    v41[4] = &v42;
    v41[5] = v10;
    v46 = v41;
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    v49 = (const char *)&__block_descriptor_tmp_77;
    v50 = v10 + 72;
    v51 = &v46;
    v11 = *(NSObject **)(v10 + 88);
    if (*(_QWORD *)(v10 + 96))
      dispatch_async_and_wait(v11, buf);
    else
      dispatch_sync(v11, buf);
    v12 = v43[3];
    _Block_object_dispose(&v42, 8);
    v13 = *(_OWORD *)(v12 + 16);
    *(_OWORD *)((char *)this + 568) = *(_OWORD *)v12;
    *(_OWORD *)((char *)this + 584) = v13;
    v14 = *(_OWORD *)(v12 + 32);
    v15 = *(_OWORD *)(v12 + 48);
    v16 = *(_OWORD *)(v12 + 64);
    *((_QWORD *)this + 81) = *(_QWORD *)(v12 + 80);
    *(_OWORD *)((char *)this + 616) = v15;
    *(_OWORD *)((char *)this + 632) = v16;
    *(_OWORD *)((char *)this + 600) = v14;
    memcpy(__dst, (char *)this + 560, sizeof(__dst));
    if ((BBUFSServerCreate() & 1) != 0)
    {
      if ((BBUFSServerStart() & 1) != 0)
      {
        FSModule::repeatFlushOperation_sync(this);
        *((_BYTE *)this + 928) = 1;
        free(v4);
LABEL_21:
        FSModule::restartSyncTimer_sync(this);
        return;
      }
      GetABMLogServer(v23);
      v21 = *((_QWORD *)GetGlobalLogger(v23) + 4);
      std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)v23);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1BF335000, v21, OS_LOG_TYPE_FAULT, "failed starting file server", buf, 2u);
      }
      GetABMLogServer(v22);
      v18 = *((_QWORD *)GetGlobalLogger(v22) + 4);
      std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)v22);
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
      {
LABEL_40:
        __break(1u);
        return;
      }
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "ABM ASSERT";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "success";
      *(_WORD *)&buf[22] = 2080;
      v49 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Ser"
            "ver/RFS/FSModule.cpp";
      LOWORD(v50) = 1024;
      *(_DWORD *)((char *)&v50 + 2) = 751;
    }
    else
    {
      GetABMLogServer(v25);
      v20 = *((_QWORD *)GetGlobalLogger(v25) + 4);
      std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)v25);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1BF335000, v20, OS_LOG_TYPE_FAULT, "failed creating file server", buf, 2u);
      }
      GetABMLogServer(v24);
      v18 = *((_QWORD *)GetGlobalLogger(v24) + 4);
      std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)v24);
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
        goto LABEL_40;
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "ABM ASSERT";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "success";
      *(_WORD *)&buf[22] = 2080;
      v49 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Ser"
            "ver/RFS/FSModule.cpp";
      LOWORD(v50) = 1024;
      *(_DWORD *)((char *)&v50 + 2) = 745;
    }
LABEL_39:
    _os_log_fault_impl(&dword_1BF335000, v18, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", buf, 0x26u);
    goto LABEL_40;
  }
  BasebandTransport::close(*((BasebandTransport **)this + 132));
  *(_QWORD *)buf = operator new(0x38uLL);
  *(_OWORD *)&buf[8] = xmmword_1BF5476C0;
  strcpy(*(char **)buf, "failed establishing transport for filesystem sync");
  FSModule::resetBaseband_sync(this, (uint64_t)buf);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  free(v4);
}

void sub_1BF4E8A5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF4E8A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF4E8A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF4E8A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_1BF4E8AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF4E8AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF4E8AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_1BF4E8AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void sub_1BF4E8AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock)
{
  uint64_t v18;

  if (*(char *)(v18 - 105) < 0)
  {
    operator delete(*(void **)(v18 - 128));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void FSModule::handleBasebandReset_sync(FSModule *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  dispatch_time_t v5;
  intptr_t v6;
  NSObject *v7;
  _DWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 117);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 117));
    *((_QWORD *)this + 117) = 0;
  }
  if (*((_BYTE *)this + 928))
  {
    *((_BYTE *)this + 928) = 0;
    *((_BYTE *)this + 931) = 0;
    FSModule::handleResult_sync(this, 0);
    BBUFSServerStop();
    v3 = *((_QWORD *)this + 11);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v8[0] = 67109120;
      v8[1] = 12;
      _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Waiting for BBUFSServerFlush to unblock for %d seconds", (uint8_t *)v8, 8u);
    }
    v4 = *((_QWORD *)this + 120);
    v5 = dispatch_time(0, 12000000000);
    v6 = dispatch_group_wait(v4, v5);
    v7 = *((_QWORD *)this + 11);
    if (v6)
    {
      if (os_log_type_enabled(*((os_log_t *)this + 11), OS_LOG_TYPE_ERROR))
      {
        LOWORD(v8[0]) = 0;
        _os_log_error_impl(&dword_1BF335000, v7, OS_LOG_TYPE_ERROR, "Timeout waiting for BBUFSServerFlush to unblock", (uint8_t *)v8, 2u);
      }
    }
    else if (os_log_type_enabled(*((os_log_t *)this + 11), OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8[0]) = 0;
      _os_log_impl(&dword_1BF335000, v7, OS_LOG_TYPE_DEFAULT, "#I BBUFSServerFlush unblocked", (uint8_t *)v8, 2u);
    }
    BBUFSServerRelease();
    BasebandTransport::close(*((BasebandTransport **)this + 132));
  }
}

void ___ZN8FSModule25finishInitialization_syncEv_block_invoke_32(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  abm::client::Event *v8;
  CFTypeRef v9;
  int Int;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD v13[2];
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  __CFString *v17;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v16 = v6;
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *a2;
        if (*a2)
        {
          cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
          abm::client::Event::getData(v8);
          v9 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
          if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
          {
            v13[0] = 0xAAAAAAAAAAAAAAAALL;
            v13[1] = 0xAAAAAAAAAAAAAAAALL;
            ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v13, (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL);
            ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v17, (const char *)*MEMORY[0x1E0CFB9E8]);
            Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v13, v17);
            MEMORY[0x1C3B8936C](&v17);
            if (Int == 5)
            {
              *(_QWORD *)(v5 + 1080) = TelephonyUtilGetSystemTime();
              *(_DWORD *)(v5 + 1072) = 3;
              *(_BYTE *)(v5 + 1088) = 1;
            }
            MEMORY[0x1C3B893A8](v13);
            v9 = cf;
          }
          if (v9)
            CFRelease(v9);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void ___ZN8FSModule25finishInitialization_syncEv_block_invoke_34(uint64_t a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    v2 = std::__shared_weak_count::lock(v1);
    if (v2)
    {
      v3 = v2;
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

uint64_t __copy_helper_block_e8_32c32_ZTSNSt3__18weak_ptrI8FSModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c32_ZTSNSt3__18weak_ptrI8FSModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void FSModule::sleep(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[17];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<FSModule>::execute_wrapped<FSModule::sleep(dispatch::group_session)::$_0>(FSModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<FSModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<FSModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void FSModule::wake(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[17];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<FSModule>::execute_wrapped<FSModule::wake(dispatch::group_session)::$_0>(FSModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<FSModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<FSModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void FSModule::handleResult_sync(FSModule *this, _BOOL4 a2)
{
  BOOL v2;
  void *v4;
  NSObject *v5;
  const void *v6;
  void *v7;
  const void *v8;
  NSObject *v9;
  void *v10;
  const void *v11;
  NSObject *v12;
  NSObject *v13;
  _QWORD v14[4];
  void *aBlock;
  BOOL v16;

  v2 = a2;
  if (a2)
    *((_BYTE *)this + 931) = 0;
  v4 = (void *)*((_QWORD *)this + 128);
  if (v4)
  {
    v5 = *((_QWORD *)this + 11);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v14[0]) = 0;
      _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "#I Clear watchdog timer", (uint8_t *)v14, 2u);
      v4 = (void *)*((_QWORD *)this + 128);
      *((_QWORD *)this + 128) = 0;
      if (!v4)
        goto LABEL_9;
    }
    else
    {
      *((_QWORD *)this + 128) = 0;
    }
    TelephonyBasebandWatchdogStop();
    operator delete(v4);
  }
LABEL_9:
  v6 = (const void *)*((_QWORD *)this + 124);
  if (v6 && *((_QWORD *)this + 125))
  {
    v7 = _Block_copy(v6);
    v8 = v7;
    v9 = *((_QWORD *)this + 125);
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 1174405120;
    v14[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_2;
    v14[3] = &__block_descriptor_tmp_66_1;
    if (v7)
      v10 = _Block_copy(v7);
    else
      v10 = 0;
    aBlock = v10;
    v16 = v2;
    dispatch_async(v9, v14);
    if (aBlock)
      _Block_release(aBlock);
    if (v8)
      _Block_release(v8);
    v11 = (const void *)*((_QWORD *)this + 124);
    *((_QWORD *)this + 124) = 0;
    if (v11)
      _Block_release(v11);
    v12 = *((_QWORD *)this + 125);
    *((_QWORD *)this + 125) = 0;
    if (v12)
      dispatch_release(v12);
  }
  FSModule::submitMetric_sync(this, v2);
  v13 = *((_QWORD *)this + 127);
  if (v13)
  {
    *((_QWORD *)this + 127) = 0;
    dispatch_resume(v13);
    dispatch_release(v13);
  }
}

void FSModule::submitMetric_sync(FSModule *this, BOOL a2)
{
  int v2;
  BOOL v5;
  xpc_object_t v6;
  uint64_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  uint64_t SystemTime;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  const void *v34;
  size_t v35;
  void *v36;
  void **v37;
  uint64_t v38;
  uint64_t v39;
  const void *v40;
  xpc_object_t object;
  void *__dst[2];
  unint64_t v43;

  v2 = *((_DWORD *)this + 268);
  if (!v2)
    return;
  v5 = (v2 != 5 || *((_BYTE *)this + 931) == 0) && a2;
  v6 = xpc_dictionary_create(0, 0, 0);
  v7 = MEMORY[0x1E0C812F8];
  if (v6 || (v6 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v6) == v7)
    {
      xpc_retain(v6);
      v8 = v6;
    }
    else
    {
      v8 = xpc_null_create();
    }
  }
  else
  {
    v8 = xpc_null_create();
    v6 = 0;
  }
  xpc_release(v6);
  v9 = xpc_int64_create(*((unsigned int *)this + 268));
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFB3D8], v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  SystemTime = TelephonyUtilGetSystemTime();
  v12 = xpc_uint64_create(SystemTime - *((_QWORD *)this + 135));
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFB630], v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  v14 = xpc_BOOL_create(v5);
  if (!v14)
    v14 = xpc_null_create();
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFB500], v14);
  v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  v16 = xpc_BOOL_create(*((_BYTE *)this + 1088) == 0);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFBBB8], v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  v18 = xpc_dictionary_create(0, 0, 0);
  if (v18 || (v18 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v18) == v7)
    {
      xpc_retain(v18);
      v19 = v18;
    }
    else
    {
      v19 = xpc_null_create();
    }
  }
  else
  {
    v19 = xpc_null_create();
    v18 = 0;
  }
  xpc_release(v18);
  v20 = xpc_string_create((const char *)*MEMORY[0x1E0CFB368]);
  if (!v20)
    v20 = xpc_null_create();
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E0CFB3E8], v20);
  v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  v22 = xpc_string_create((const char *)*MEMORY[0x1E0CFB328]);
  if (!v22)
    v22 = xpc_null_create();
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E0CFB278], v22);
  v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  v24 = xpc_string_create((const char *)*MEMORY[0x1E0CFB508]);
  if (!v24)
    v24 = xpc_null_create();
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E0CFB3F0], v24);
  v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  if (v8)
  {
    xpc_retain(v8);
    v26 = v8;
  }
  else
  {
    v26 = xpc_null_create();
  }
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E0CFB9D8], v26);
  v27 = xpc_null_create();
  xpc_release(v26);
  xpc_release(v27);
  v28 = xpc_dictionary_create(0, 0, 0);
  if (v28 || (v28 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v28) == v7)
    {
      xpc_retain(v28);
      v29 = v28;
    }
    else
    {
      v29 = xpc_null_create();
    }
  }
  else
  {
    v29 = xpc_null_create();
    v28 = 0;
  }
  xpc_release(v28);
  v30 = xpc_string_create((const char *)*MEMORY[0x1E0CFAFE8]);
  if (!v30)
    v30 = xpc_null_create();
  xpc_dictionary_set_value(v29, (const char *)*MEMORY[0x1E0CFB020], v30);
  v31 = xpc_null_create();
  xpc_release(v30);
  xpc_release(v31);
  if (v19)
  {
    xpc_retain(v19);
    v32 = v19;
  }
  else
  {
    v32 = xpc_null_create();
  }
  xpc_dictionary_set_value(v29, (const char *)*MEMORY[0x1E0CFB018], v32);
  v33 = xpc_null_create();
  xpc_release(v32);
  xpc_release(v33);
  v34 = (const void *)*MEMORY[0x1E0CFB5E0];
  v35 = strlen((const char *)*MEMORY[0x1E0CFB5E0]);
  if (v35 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v36 = (void *)v35;
  if (v35 >= 0x17)
  {
    v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v38 = v35 | 7;
    v39 = v38 + 1;
    v37 = (void **)operator new(v38 + 1);
    __dst[1] = v36;
    v43 = v39 | 0x8000000000000000;
    __dst[0] = v37;
LABEL_56:
    memmove(v37, v34, (size_t)v36);
    *((_BYTE *)v36 + (_QWORD)v37) = 0;
    object = v29;
    if (v29)
      goto LABEL_52;
LABEL_57:
    object = xpc_null_create();
    goto LABEL_58;
  }
  HIBYTE(v43) = v35;
  v37 = __dst;
  if (v35)
    goto LABEL_56;
  LOBYTE(__dst[0]) = 0;
  object = v29;
  if (!v29)
    goto LABEL_57;
LABEL_52:
  xpc_retain(v29);
LABEL_58:
  v40 = 0;
  Service::runCommand((uint64_t)this, (uint64_t)__dst, &object, &v40);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(v43) < 0)
    operator delete(__dst[0]);
  *((_DWORD *)this + 268) = 0;
  xpc_release(v29);
  xpc_release(v19);
  xpc_release(v8);
}

void sub_1BF4E9850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;
  void *v19;

  xpc_release(object);
  if (a17 < 0)
    operator delete(__p);
  xpc_release(v19);
  xpc_release(v18);
  xpc_release(v17);
  _Unwind_Resume(a1);
}

void ___ZN8FSModule23requestFSSyncIndicationEb_block_invoke(uint64_t a1, char a2)
{
  uint64_t v2;
  NSObject *v3;
  xpc_object_t v4;
  xpc_object_t v5;
  const char *v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  char *v11;
  xpc_object_t v12;
  xpc_object_t v13;
  const void *v14;
  size_t v15;
  size_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  xpc_object_t v28;
  uint8_t buf[8];
  size_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v2 = *(_QWORD *)(a1 + 32);
  if ((a2 & 1) == 0)
  {
    v3 = *(NSObject **)(v2 + 88);
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    v6 = "FS Sync failed, skipping baseband requested soft reset";
    goto LABEL_13;
  }
  v3 = *(NSObject **)(v2 + 88);
  if (!*(_QWORD *)(v2 + 944))
  {
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    v6 = "Invalid AppleBasebandManager pointer, unable to fulfill baseband's soft reset request";
LABEL_13:
    _os_log_error_impl(&dword_1BF335000, v3, OS_LOG_TYPE_ERROR, v6, buf, 2u);
    return;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Performing soft reset due to request from baseband", buf, 2u);
  }
  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v4) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v4);
      v5 = v4;
    }
    else
    {
      v5 = xpc_null_create();
    }
  }
  else
  {
    v5 = xpc_null_create();
    v4 = 0;
  }
  xpc_release(v4);
  v7 = xpc_string_create((const char *)*MEMORY[0x1E0CFB598]);
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0CFB538], v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  v9 = xpc_string_create((const char *)*MEMORY[0x1E0CFBFF8]);
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0CFB8D0], v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v11 = (char *)operator new(0x30uLL);
  strcpy(v11, "Baseband requested rfs sync via indication");
  v12 = xpc_string_create(v11);
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0CFB788], v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  v32 = 0xAAAAAAAAAAAAAAAALL;
  v33 = 0xAAAAAAAAAAAAAAAALL;
  v14 = (const void *)*MEMORY[0x1E0CFB4E0];
  v15 = strlen((const char *)*MEMORY[0x1E0CFB4E0]);
  if (v15 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v16 = v15;
  if (v15 >= 0x17)
  {
    v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v18 = v15 | 7;
    v19 = v18 + 1;
    v17 = operator new(v18 + 1);
    v30 = v16;
    v31 = v19 | 0x8000000000000000;
    *(_QWORD *)buf = v17;
LABEL_30:
    memmove(v17, v14, v16);
    *((_BYTE *)v17 + v16) = 0;
    v28 = v5;
    if (v5)
      goto LABEL_26;
LABEL_31:
    v28 = xpc_null_create();
    goto LABEL_32;
  }
  HIBYTE(v31) = v15;
  v17 = buf;
  if (v15)
    goto LABEL_30;
  buf[0] = 0;
  v28 = v5;
  if (!v5)
    goto LABEL_31;
LABEL_26:
  xpc_retain(v5);
LABEL_32:
  abm::client::Command::create();
  xpc_release(v28);
  if (SHIBYTE(v31) < 0)
    operator delete(*(void **)buf);
  v27 = (std::__shared_weak_count *)v33;
  if (v33)
  {
    v20 = (unint64_t *)(v33 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  AppleBasebandManager::perform();
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v24 = (std::__shared_weak_count *)v33;
  if (v33)
  {
    v25 = (unint64_t *)(v33 + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  operator delete(v11);
  xpc_release(v5);
}

void sub_1BF4E9DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, xpc_object_t object, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  void *v22;
  void *v23;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  operator delete(v23);
  xpc_release(v22);
  _Unwind_Resume(a1);
}

void ___ZN8FSModule13requestFSSyncEjN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  const void *v10;
  void *v11;
  const void *v12;
  NSObject *v13;
  void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD v17[5];
  void *aBlock;
  dispatch_object_t object;
  int v20;
  _QWORD block[4];
  void *v22;
  char v23;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (*(_QWORD *)(a1 + 40))
      {
        if (*(_BYTE *)(v3 + 928))
        {
          v6 = *(NSObject **)(v3 + 1008);
          if (v6)
          {
            dispatch_retain(*(dispatch_object_t *)(v3 + 1008));
            dispatch_suspend(v6);
          }
          v7 = *(NSObject **)(v3 + 1016);
          *(_QWORD *)(v3 + 1016) = v6;
          if (v7)
          {
            dispatch_resume(v7);
            dispatch_release(v7);
          }
          v17[0] = MEMORY[0x1E0C809B0];
          v17[1] = 1174405120;
          v17[2] = ___ZN8FSModule13requestFSSyncEjN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_2;
          v17[3] = &__block_descriptor_tmp_40_1;
          v17[4] = v3;
          v8 = *(void **)(a1 + 56);
          if (v8)
            v8 = _Block_copy(v8);
          v9 = *(NSObject **)(a1 + 64);
          aBlock = v8;
          object = v9;
          if (v9)
            dispatch_retain(v9);
          v20 = *(_DWORD *)(a1 + 72);
          ctu::SharedSynchronizable<FSModule>::execute_wrapped((uint64_t *)(v3 + 120), (uint64_t)v17);
          if (object)
            dispatch_release(object);
          if (aBlock)
            _Block_release(aBlock);
        }
        else
        {
          v10 = *(const void **)(a1 + 56);
          if (v10 && *(_QWORD *)(a1 + 64))
          {
            v11 = _Block_copy(v10);
            v12 = v11;
            v13 = *(NSObject **)(a1 + 64);
            block[0] = MEMORY[0x1E0C809B0];
            block[1] = 1174405120;
            block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_2;
            block[3] = &__block_descriptor_tmp_66_1;
            if (v11)
              v14 = _Block_copy(v11);
            else
              v14 = 0;
            v22 = v14;
            v23 = 0;
            dispatch_async(v13, block);
            if (v22)
              _Block_release(v22);
            if (v12)
              _Block_release(v12);
          }
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void ___ZN8FSModule13requestFSSyncEjN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_2(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  NSObject *v6;

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  if (v2)
    v2 = _Block_copy(v2);
  v4 = *(const void **)(v3 + 992);
  *(_QWORD *)(v3 + 992) = v2;
  if (v4)
    _Block_release(v4);
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    dispatch_retain(*(dispatch_object_t *)(a1 + 48));
  v6 = *(NSObject **)(v3 + 1000);
  *(_QWORD *)(v3 + 1000) = v5;
  if (v6)
    dispatch_release(v6);
  *(_DWORD *)(v3 + 1072) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)(v3 + 1080) = TelephonyUtilGetSystemTime();
  FSModule::requestFSSync_sync((const std::string::value_type **)v3);
}

void FSModule::requestFSSync_sync(const std::string::value_type **this)
{
  unint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::string::size_type v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  dispatch_object_t v13;
  NSObject *v14;
  NSObject *v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::string __p;
  dispatch_object_t v21;
  std::string v22;
  dispatch_object_t object;
  unint64_t v24;
  unint64_t v25;

  v24 = 0xAAAAAAAAAAAAAAAALL;
  v25 = 0xAAAAAAAAAAAAAAAALL;
  (*((void (**)(unint64_t *__return_ptr))*this + 10))(&v24);
  v2 = v24;
  if (!v24)
    goto LABEL_28;
  object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  if (*((char *)this + 991) < 0)
    std::string::__init_copy_ctor_external(&v22, this[121], (std::string::size_type)this[122]);
  else
    v22 = *(std::string *)(this + 121);
  v3 = *(_QWORD *)(v2 + 104);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
  else
    __p = v22;
  (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, std::string *, _QWORD))(*(_QWORD *)v3 + 24))(&object, v3, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_10:
      v4 = (std::__shared_weak_count *)this[16];
      if (!v4)
LABEL_34:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_14;
    }
  }
  else if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_10;
  }
  operator delete(v22.__r_.__value_.__l.__data_);
  v4 = (std::__shared_weak_count *)this[16];
  if (!v4)
    goto LABEL_34;
LABEL_14:
  v5 = (std::string::size_type)this[15];
  v6 = std::__shared_weak_count::lock(v4);
  if (!v6)
    goto LABEL_34;
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)this;
  __p.__r_.__value_.__l.__size_ = v5;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = object;
  v21 = object;
  if (object)
  {
    dispatch_retain(object);
    v14 = object;
  }
  else
  {
    v14 = 0;
  }
  v15 = this[17];
  v16 = operator new(0x20uLL);
  *v16 = this;
  v16[1] = v5;
  v16[2] = v7;
  v16[3] = v13;
  dispatch_group_notify_f(v14, v15, v16, (dispatch_function_t)dispatch::detail::group_notify<FSModule::requestFSSync_sync(void)::$_0>(dispatch_group_s *,dispatch_queue_s *,FSModule::requestFSSync_sync(void)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  std::__shared_weak_count::__release_weak(v7);
  if (object)
    dispatch_release(object);
LABEL_28:
  v17 = (std::__shared_weak_count *)v25;
  if (v25)
  {
    v18 = (unint64_t *)(v25 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1BF4EA334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,dispatch_object_t object,char a23)
{
  if (a21 < 0)
  {
    operator delete(__p);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 40);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_40c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void __copy_helper_block_e8_40c32_ZTSNSt3__18weak_ptrI8FSModuleEE56c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  NSObject *v8;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (void *)a2[7];
  if (v7)
    v7 = _Block_copy(v7);
  v8 = a2[8];
  a1[7] = v7;
  a1[8] = v8;
  if (v8)
    dispatch_retain(v8);
}

void __destroy_helper_block_e8_40c32_ZTSNSt3__18weak_ptrI8FSModuleEE56c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[8];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

uint64_t FSModule::requestFSSync_sync(void)::$_0::~$_0(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;

  v2 = *(NSObject **)(a1 + 24);
  if (v2)
    dispatch_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void FSModule::restartSyncTimer_sync(FSModule *this)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  dispatch_time_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  NSObject *v15;
  unint64_t v16;
  _QWORD v17[6];
  std::__shared_weak_count *v18;
  uint64_t v19;
  uint8_t buf[4];
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 117);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 117));
    *((_QWORD *)this + 117) = 0;
  }
  v3 = capabilities::abs::fileSystemFlushInterval((capabilities::abs *)v2);
  v4 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v21 = v3;
    _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I Automatic sync interval set to %llu seconds", buf, 0xCu);
  }
  if (v3)
  {
    v5 = dispatch_source_create(MEMORY[0x1E0C80DD0], 2uLL, 0, *((dispatch_queue_t *)this + 17));
    *((_QWORD *)this + 117) = v5;
    v6 = dispatch_time(0x8000000000000000, 1000000000 * v3);
    dispatch_source_set_timer(v5, v6, 1000000000 * v3, 0x45D964B800uLL);
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v7 || (v8 = *((_QWORD *)this + 15), (v9 = std::__shared_weak_count::lock(v7)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v10 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    v15 = *((_QWORD *)this + 117);
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 1174405120;
    v17[2] = ___ZN8FSModule21restartSyncTimer_syncEv_block_invoke;
    v17[3] = &__block_descriptor_tmp_42_0;
    v17[4] = this;
    v17[5] = v8;
    v18 = v10;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
    v19 = v3;
    dispatch_source_set_event_handler(v15, v17);
    dispatch_activate(*((dispatch_object_t *)this + 117));
    if (v18)
      std::__shared_weak_count::__release_weak(v18);
    std::__shared_weak_count::__release_weak(v10);
  }
}

void FSModule::cancelSyncTimer_sync(FSModule *this)
{
  NSObject *v2;

  v2 = *((_QWORD *)this + 117);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 117));
    *((_QWORD *)this + 117) = 0;
  }
}

void ___ZN8FSModule21restartSyncTimer_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[2];
  std::__shared_weak_count *v12;
  uint8_t buf[4];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v12 = v4;
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          v7 = a1[7];
          *(_DWORD *)buf = 134217984;
          v14 = v7;
          _os_log_impl(&dword_1BF335000, v6, OS_LOG_TYPE_DEFAULT, "#I Periodic rfs sync request timer fired. Interval = %llu sec", buf, 0xCu);
        }
        v10[0] = 0;
        v10[1] = 0;
        FSModule::requestFSSync(v3, 4, v10);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF4EA864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  dispatch::callback<void({block_pointer})(BOOL)>::~callback((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void FSModule::repeatFlushOperation_sync(FSModule *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *global_queue;
  unint64_t v12;
  _QWORD v13[5];
  dispatch_group_t group;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v2 = *((_QWORD *)this + 120);
  if (v2)
  {
    dispatch_retain(*((dispatch_object_t *)this + 120));
    dispatch_group_enter(v2);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v3 || (v4 = *((_QWORD *)this + 15), (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  global_queue = dispatch_get_global_queue(25, 0);
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 1174405120;
  v13[2] = ___ZN8FSModule25repeatFlushOperation_syncEv_block_invoke;
  v13[3] = &__block_descriptor_tmp_51_5;
  v13[4] = this;
  group = v2;
  if (v2)
  {
    dispatch_retain(v2);
    dispatch_group_enter(v2);
  }
  v15 = v4;
  v16 = v6;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  dispatch_async(global_queue, v13);
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  std::__shared_weak_count::__release_weak(v6);
  if (v2)
  {
    dispatch_group_leave(v2);
    dispatch_release(v2);
  }
}

void sub_1BF4EA9E4(_Unwind_Exception *exception_object)
{
  NSObject *v1;

  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN8FSModule25repeatFlushOperation_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  _QWORD *v10;
  NSObject *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  _QWORD v15[5];
  _QWORD v16[5];
  _QWORD v17[5];
  std::__shared_weak_count *v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v19 = v4;
    if (v4)
    {
      v5 = v4;
      if (a1[6])
      {
        v6 = BBUFSServerFlush();
        v7 = MEMORY[0x1E0C809B0];
        if (v6 && *(_BYTE *)(v3 + 520))
        {
          v17[0] = MEMORY[0x1E0C809B0];
          v17[1] = 0x40000000;
          v17[2] = ___ZN8FSModule25repeatFlushOperation_syncEv_block_invoke_2;
          v17[3] = &__block_descriptor_tmp_43_2;
          v17[4] = v3;
          ctu::SharedSynchronizable<FSModule>::execute_wrapped((uint64_t *)(v3 + 120), (uint64_t)v17);
        }
        v8 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          v9 = *(unsigned __int8 *)(v3 + 520);
          *(_DWORD *)buf = 67109376;
          v21 = v6;
          v22 = 1024;
          v23 = v9;
          _os_log_impl(&dword_1BF335000, v8, OS_LOG_TYPE_DEFAULT, "#I Flush completed with success: %d, server running: %d", buf, 0xEu);
        }
        v16[0] = v7;
        v16[1] = 0x40000000;
        v16[2] = ___ZN8FSModule25repeatFlushOperation_syncEv_block_invoke_44;
        v16[3] = &__block_descriptor_tmp_45_2;
        v16[4] = v3;
        ctu::SharedSynchronizable<FSModule>::execute_wrapped((uint64_t *)(v3 + 120), (uint64_t)v16);
        if (*(_BYTE *)(v3 + 520))
        {
          if (v6)
          {
            v15[0] = v7;
            v15[1] = 0x40000000;
            v15[2] = ___ZN8FSModule25repeatFlushOperation_syncEv_block_invoke_46;
            v15[3] = &__block_descriptor_tmp_47_3;
            v15[4] = v3;
            v10 = v15;
          }
          else
          {
            v14[0] = v7;
            v14[1] = 0x40000000;
            v14[2] = ___ZN8FSModule25repeatFlushOperation_syncEv_block_invoke_2_48;
            v14[3] = &__block_descriptor_tmp_50_1;
            v14[4] = v3;
            v10 = v14;
          }
          ctu::SharedSynchronizable<FSModule>::execute_wrapped((uint64_t *)(v3 + 120), (uint64_t)v10);
        }
        else
        {
          v11 = *(NSObject **)(v3 + 88);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1BF335000, v11, OS_LOG_TYPE_DEFAULT, "#I file server has stopped", buf, 2u);
          }
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF4EAC4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1 - 128);
  _Unwind_Resume(a1);
}

void ___ZN8FSModule25repeatFlushOperation_syncEv_block_invoke_2(uint64_t a1)
{
  FSModule::handleResult_sync(*(FSModule **)(a1 + 32), 1);
}

void ___ZN8FSModule25repeatFlushOperation_syncEv_block_invoke_44(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::string __p;
  unint64_t v8;
  unint64_t v9;
  std::string v10;

  v1 = *(_QWORD *)(a1 + 32);
  v8 = 0xAAAAAAAAAAAAAAAALL;
  v9 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v1 + 80))(&v8, v1);
  v2 = v8;
  if (!v8)
    goto LABEL_10;
  if (*(char *)(v1 + 991) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v1 + 968), *(_QWORD *)(v1 + 976));
  else
    __p = *(std::string *)(v1 + 968);
  v3 = *(_QWORD *)(v2 + 104);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v10, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v10 = __p;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v3 + 32))(v3, &v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v10.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_17;
LABEL_10:
    v4 = (std::__shared_weak_count *)v9;
    if (!v9)
      return;
    goto LABEL_11;
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_10;
LABEL_17:
  operator delete(__p.__r_.__value_.__l.__data_);
  v4 = (std::__shared_weak_count *)v9;
  if (!v9)
    return;
LABEL_11:
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_1BF4EADA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((a14 & 0x80000000) == 0)
  {
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t ___ZN8FSModule25repeatFlushOperation_syncEv_block_invoke_46(uint64_t a1)
{
  return FSModule::repeatFlushOperation_sync(*(FSModule **)(a1 + 32));
}

void ___ZN8FSModule25repeatFlushOperation_syncEv_block_invoke_2_48(uint64_t a1)
{
  FSModule *v1;
  void *__p;
  __int128 v3;

  v1 = *(FSModule **)(a1 + 32);
  __p = operator new(0x28uLL);
  v3 = xmmword_1BF5428A0;
  strcpy((char *)__p, "filesystem flush operation failed");
  FSModule::resetBaseband_sync(v1, (uint64_t)&__p);
  if (SHIBYTE(v3) < 0)
    operator delete(__p);
}

void sub_1BF4EAE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void FSModule::resetBaseband_sync(FSModule *a1, uint64_t a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  const char *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  const void *v13;
  size_t v14;
  void *v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  xpc_object_t object;
  void *__dst[2];
  unint64_t v22;

  FSModule::handleResult_sync(a1, 0);
  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v4) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v4);
      v5 = v4;
    }
    else
    {
      v5 = xpc_null_create();
    }
  }
  else
  {
    v5 = xpc_null_create();
    v4 = 0;
  }
  xpc_release(v4);
  v6 = xpc_string_create((const char *)*MEMORY[0x1E0CFB590]);
  if (!v6)
    v6 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0CFB538], v6);
  v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  v8 = xpc_string_create((const char *)*MEMORY[0x1E0CFC098]);
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0CFB8D0], v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  if (*(char *)(a2 + 23) >= 0)
    v10 = (const char *)a2;
  else
    v10 = *(const char **)a2;
  v11 = xpc_string_create(v10);
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0CFB788], v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  v13 = (const void *)*MEMORY[0x1E0CFB4E0];
  v14 = strlen((const char *)*MEMORY[0x1E0CFB4E0]);
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v15 = (void *)v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    v16 = (void **)operator new(v17 + 1);
    __dst[1] = v15;
    v22 = v18 | 0x8000000000000000;
    __dst[0] = v16;
LABEL_24:
    memmove(v16, v13, (size_t)v15);
    *((_BYTE *)v15 + (_QWORD)v16) = 0;
    object = v5;
    if (v5)
      goto LABEL_20;
    goto LABEL_25;
  }
  HIBYTE(v22) = v14;
  v16 = __dst;
  if (v14)
    goto LABEL_24;
  LOBYTE(__dst[0]) = 0;
  object = v5;
  if (v5)
  {
LABEL_20:
    xpc_retain(v5);
    goto LABEL_26;
  }
LABEL_25:
  object = xpc_null_create();
LABEL_26:
  v19 = 0;
  Service::runCommand((uint64_t)a1, (uint64_t)__dst, &object, &v19);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(v22) < 0)
    operator delete(__dst[0]);
  xpc_release(v5);
}

void sub_1BF4EB158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  xpc_release(object);
  if (a17 < 0)
    operator delete(__p);
  xpc_release(v17);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c32_ZTSNSt3__18weak_ptrI8FSModuleEE(_QWORD *a1, _QWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = a1[5];
    if (v5)
      dispatch_group_enter(v5);
  }
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c32_ZTSNSt3__18weak_ptrI8FSModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  NSObject *v4;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(NSObject **)(a1 + 40);
  if (v3)
  {
    dispatch_group_leave(v3);
    v4 = *(NSObject **)(a1 + 40);
    if (v4)
      dispatch_release(v4);
  }
}

uint64_t ctu::Loggable<FSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<FSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<FSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<FSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E790B538;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<FSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E790B538;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::Loggable<FSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF4EB4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF4EB4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<FSModule>::shared_ptr[abi:ne180100]<FSModule,std::shared_ptr<FSModule> ctu::SharedSynchronizable<FSModule>::make_shared_ptr<FSModule>(FSModule*)::{lambda(FSModule*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E790B578;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF4EB5F4(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<FSModule> ctu::SharedSynchronizable<FSModule>::make_shared_ptr<FSModule>(FSModule*)::{lambda(FSModule*)#1}::operator() const(FSModule*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF4EB614(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<FSModule *,std::shared_ptr<FSModule> ctu::SharedSynchronizable<FSModule>::make_shared_ptr<FSModule>(FSModule*)::{lambda(FSModule *)#1},std::allocator<FSModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<FSModule *,std::shared_ptr<FSModule> ctu::SharedSynchronizable<FSModule>::make_shared_ptr<FSModule>(FSModule*)::{lambda(FSModule *)#1},std::allocator<FSModule>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<FSModule> ctu::SharedSynchronizable<FSModule>::make_shared_ptr<FSModule>(FSModule*)::{lambda(FSModule*)#1}::operator() const(FSModule*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<FSModule *,std::shared_ptr<FSModule> ctu::SharedSynchronizable<FSModule>::make_shared_ptr<FSModule>(FSModule*)::{lambda(FSModule *)#1},std::allocator<FSModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI8FSModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI8FSModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI8FSModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI8FSModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<FSModule> ctu::SharedSynchronizable<FSModule>::make_shared_ptr<FSModule>(FSModule*)::{lambda(FSModule*)#1}::operator() const(FSModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedLoggable<FSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E790B538;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

uint64_t ___ZN3ctu20SharedSynchronizableI8FSModuleE13connect_eventIN5boost8signals26signalIFvbENS5_19optional_last_valueIvEEiNSt3__14lessIiEENS4_8functionIS7_EENSD_IFvRKNS5_10connectionEbEEENS5_5mutexEEES1_vJbEEEDTcl7connectfp_cvNSA_10shared_ptrIS1_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSQ_SS_E_block_invoke(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[5];
  v2 = a1[6];
  v3 = (_QWORD *)(a1[4] + (v2 >> 1) - 120);
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

_QWORD *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<FSModule>>::~foreign_weak_ptr_impl(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E790B628;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<FSModule>>::~foreign_weak_ptr_impl(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_1E790B628;
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<FSModule>>::lock(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 8);
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = 0;
LABEL_6:
  v7 = operator new(0x18uLL);
  *v7 = &off_1E790B678;
  v7[1] = v6;
  v7[2] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *a2 = v7;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *a2 = v7;
  }
}

void sub_1BF4EB8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<FSModule>>::expired(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  return !v1 || *(_QWORD *)(v1 + 8) == -1;
}

_QWORD *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<FSModule>>::clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E790B628;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

_QWORD *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<FSModule>>::~foreign_shared_ptr_impl(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_1E790B678;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<FSModule>>::~foreign_shared_ptr_impl(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_1E790B678;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

_QWORD *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<FSModule>>::clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E790B678;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

void ctu::SharedSynchronizable<FSModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI8FSModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E790B6D0;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI8FSModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c36_ZTSNSt3__110shared_ptrIK8FSModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__110shared_ptrIK8FSModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void dispatch::async<void ctu::SharedSynchronizable<FSModule>::execute_wrapped<FSModule::initialize(dispatch::group_session)::$_0>(FSModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<FSModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<FSModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  FSModule **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(FSModule ***)a1;
  FSModule::finishInitialization_sync(**(FSModule ***)a1);
  operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete((void *)a1);
  }
  else
  {
LABEL_5:
    operator delete((void *)a1);
  }
}

void sub_1BF4EBD08(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<FSModule>::execute_wrapped<FSModule::sleep(dispatch::group_session)::$_0>(FSModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<FSModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<FSModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *a1;
  v4 = **a1;
  v3 = (*a1)[1];
  *(_BYTE *)(v4 + 930) = 1;
  if (v3)
  {
    dispatch_group_leave(v3);
    v5 = v2[1];
    if (v5)
      dispatch_release(v5);
  }
  operator delete(v2);
  v6 = (std::__shared_weak_count *)a1[2];
  if (!v6)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    operator delete(a1);
  }
  else
  {
LABEL_8:
    operator delete(a1);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<FSModule>::execute_wrapped<FSModule::wake(dispatch::group_session)::$_0>(FSModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<FSModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<FSModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *a1;
  v4 = **a1;
  v3 = (*a1)[1];
  *(_BYTE *)(v4 + 930) = 0;
  if (v3)
  {
    dispatch_group_leave(v3);
    v5 = v2[1];
    if (v5)
      dispatch_release(v5);
  }
  operator delete(v2);
  v6 = (std::__shared_weak_count *)a1[2];
  if (!v6)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    operator delete(a1);
  }
  else
  {
LABEL_8:
    operator delete(a1);
  }
}

void dispatch::detail::group_notify<FSModule::requestFSSync_sync(void)::$_0>(dispatch_group_s *,dispatch_queue_s *,FSModule::requestFSSync_sync(void)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t *__p)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  capabilities::abs *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20;
  NSObject *v21;
  CommandDriverFactory *v22;
  uint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  CFTypeRef v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  NSObject *v42;
  std::__shared_weak_count *v43;
  CFTypeRef cf;
  std::__shared_weak_count *v45;
  _QWORD aBlock[6];
  std::__shared_weak_count *v47;
  dispatch_object_t object[2];
  __int128 buf;
  void (*v50)(_QWORD *);
  void *v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_73;
  v3 = *__p;
  v4 = (capabilities::abs *)std::__shared_weak_count::lock(v2);
  if (!v4)
    goto LABEL_73;
  v5 = (std::__shared_weak_count *)v4;
  if (__p[1])
  {
    v6 = MEMORY[0x1E0C809B0];
    if (!*(_BYTE *)(v3 + 930))
    {
      v7 = capabilities::abs::fileSystemFlushTimeout(v4);
      v8 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 134217984;
        *(_QWORD *)((char *)&buf + 4) = v7;
        _os_log_impl(&dword_1BF335000, v8, OS_LOG_TYPE_DEFAULT, "#I Created rfs sync watchdog timer; timeout=%llu sec",
          (uint8_t *)&buf,
          0xCu);
      }
      *(_QWORD *)&buf = v6;
      *((_QWORD *)&buf + 1) = 1174405120;
      v50 = ___ZZN8FSModule18requestFSSync_syncEvENK3__0clEv_block_invoke;
      v51 = &__block_descriptor_tmp_70_3;
      v10 = __p[1];
      v9 = (std::__shared_weak_count *)__p[2];
      v52 = v3;
      v53 = v10;
      v54 = v9;
      if (v9)
      {
        p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
        do
          v12 = __ldxr(p_shared_weak_owners);
        while (__stxr(v12 + 1, p_shared_weak_owners));
      }
      v55 = v7;
      v13 = operator new(0x10uLL);
      v14 = _Block_copy(&buf);
      *v13 = "Watchdog timed out";
      TelephonyBasebandWatchdogStart();
      if (v14)
        _Block_release(v14);
      v15 = *(void **)(v3 + 1024);
      *(_QWORD *)(v3 + 1024) = v13;
      if (v15)
      {
        TelephonyBasebandWatchdogStop();
        operator delete(v15);
      }
      if (v54)
        std::__shared_weak_count::__release_weak(v54);
    }
    aBlock[0] = v6;
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZZN8FSModule18requestFSSync_syncEvENK3__0clEv_block_invoke_71;
    aBlock[3] = &__block_descriptor_tmp_74_1;
    v17 = __p[1];
    v16 = (std::__shared_weak_count *)__p[2];
    aBlock[4] = v3;
    aBlock[5] = v17;
    v47 = v16;
    if (v16)
    {
      v18 = (unint64_t *)&v16->__shared_weak_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v20 = _Block_copy(aBlock);
    v21 = *(NSObject **)(v3 + 136);
    if (v21)
      dispatch_retain(*(dispatch_object_t *)(v3 + 136));
    v22 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    v23 = off_1ED70FD08;
    if (!off_1ED70FD08)
    {
      CommandDriverFactory::create_default_global(v22);
      v24 = *(_OWORD *)object;
      object[0] = 0;
      object[1] = 0;
      v25 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
      off_1ED70FD08 = v24;
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v28 = (std::__shared_weak_count *)object[1];
      if (object[1])
      {
        v29 = (unint64_t *)&object[1][1];
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v23 = off_1ED70FD08;
    }
    v31 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    if (*(&off_1ED70FD08 + 1))
    {
      v32 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    (*(void (**)(CFTypeRef *__return_ptr, uint64_t))(*(_QWORD *)v23 + 40))(&cf, v23);
    if (v45)
    {
      v34 = std::__shared_weak_count::lock(v45);
      if (v34)
        v35 = cf;
      else
        v35 = 0;
      if (v45)
        std::__shared_weak_count::__release_weak(v45);
      if (!v31)
        goto LABEL_48;
    }
    else
    {
      v34 = 0;
      v35 = 0;
      if (!v31)
        goto LABEL_48;
    }
    v36 = (unint64_t *)&v31->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
      if (v35)
      {
LABEL_49:
        cf = 0;
        if (v20)
        {
          object[0] = (dispatch_object_t)_Block_copy(v20);
          object[1] = v21;
          if (!v21)
          {
LABEL_52:
            (*(void (**)(CFTypeRef, CFTypeRef *, dispatch_object_t *))(*(_QWORD *)v35 + 48))(v35, &cf, object);
            if (object[1])
              dispatch_release(object[1]);
            if (object[0])
              _Block_release(object[0]);
            if (cf)
              CFRelease(cf);
            goto LABEL_58;
          }
        }
        else
        {
          object[0] = 0;
          object[1] = v21;
          if (!v21)
            goto LABEL_52;
        }
        dispatch_retain(v21);
        goto LABEL_52;
      }
LABEL_58:
      if (v34)
      {
        v38 = (unint64_t *)&v34->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      if (v21)
        dispatch_release(v21);
      if (v20)
        _Block_release(v20);
      if (v47)
        std::__shared_weak_count::__release_weak(v47);
      goto LABEL_69;
    }
LABEL_48:
    if (v35)
      goto LABEL_49;
    goto LABEL_58;
  }
LABEL_69:
  v40 = (unint64_t *)&v5->__shared_owners_;
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_73:
  v42 = __p[3];
  if (v42)
    dispatch_release(v42);
  v43 = (std::__shared_weak_count *)__p[2];
  if (v43)
    std::__shared_weak_count::__release_weak(v43);
  operator delete(__p);
}

void sub_1BF4EC2EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *aBlock, dispatch_object_t object,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZN8FSModule18requestFSSync_syncEvENK3__0clEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD v14[6];
  std::__shared_weak_count *v15;
  uint64_t v16;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      if (v6)
      {
        v14[0] = MEMORY[0x1E0C809B0];
        v14[1] = 1174405120;
        v14[2] = ___ZZN8FSModule18requestFSSync_syncEvENK3__0clEv_block_invoke_2;
        v14[3] = &__block_descriptor_tmp_69_1;
        v14[4] = v3;
        v14[5] = v6;
        v15 = v4;
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        v16 = a1[7];
        ctu::SharedSynchronizable<FSModule>::execute_wrapped((uint64_t *)(v3 + 120), (uint64_t)v14);
        v9 = v15;
        if (v15)
        {
          v10 = (unint64_t *)&v15->__shared_owners_;
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
      }
      v12 = (unint64_t *)&v5->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

uint64_t ___ZZN8FSModule18requestFSSync_syncEvENK3__0clEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  _QWORD *v9;
  std::string::size_type v10;
  std::string *p_dst;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::string __p;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  void *v30[2];
  __int128 v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  std::string __dst;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v32 = 0xAAAAAAAAAAAAAAAALL;
  v42 = v2;
  v41 = v2;
  v40 = v2;
  v39 = v2;
  v38 = v2;
  v37 = v2;
  v36 = v2;
  v35 = v2;
  v34 = v2;
  v31 = v2;
  v29 = v2;
  *(_OWORD *)v30 = v2;
  v27 = v2;
  v28 = v2;
  v26 = v2;
  v3 = MEMORY[0x1E0DE4FE0];
  v4 = MEMORY[0x1E0DE4FE0] + 64;
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v5 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v25 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v25 + *(_QWORD *)(v25 - 24)) = v6;
  v7 = (std::ios_base *)((char *)&v25 + *(_QWORD *)(v25 - 24));
  std::ios_base::init(v7, &v26);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  v25 = v3 + 24;
  v33 = v4;
  std::streambuf::basic_streambuf();
  v8 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v26 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v30 = 0u;
  v31 = 0u;
  LODWORD(v32) = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"RFS sync watchdog timer expired; timeout=",
    41);
  v9 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" sec", 4);
  if ((v32 & 0x10) != 0)
  {
    v12 = *((_QWORD *)&v31 + 1);
    if (*((_QWORD *)&v31 + 1) < (unint64_t)v29)
    {
      *((_QWORD *)&v31 + 1) = v29;
      v12 = v29;
    }
    v13 = (const void *)*((_QWORD *)&v28 + 1);
    v10 = v12 - *((_QWORD *)&v28 + 1);
    if ((unint64_t)(v12 - *((_QWORD *)&v28 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_20;
  }
  else
  {
    if ((v32 & 8) == 0)
    {
      v10 = 0;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
      p_dst = &__dst;
      goto LABEL_14;
    }
    v13 = (const void *)v27;
    v10 = v28 - v27;
    if ((_QWORD)v28 - (_QWORD)v27 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_20:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v10 >= 0x17)
  {
    v14 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v14 = v10 | 7;
    v15 = v14 + 1;
    p_dst = (std::string *)operator new(v14 + 1);
    __dst.__r_.__value_.__l.__size_ = v10;
    __dst.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_13;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v10;
  p_dst = &__dst;
  if (v10)
LABEL_13:
    memmove(p_dst, v13, v10);
LABEL_14:
  p_dst->__r_.__value_.__s.__data_[v10] = 0;
  FSModule::resetBaseband_sync((FSModule *)v1, (uint64_t)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v23 = 0xAAAAAAAAAAAAAAAALL;
  v24 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v1 + 80))(&v23, v1);
  v16 = v23;
  if (v23)
  {
    if (*(char *)(v1 + 991) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v1 + 968), *(_QWORD *)(v1 + 976));
    else
      __p = *(std::string *)(v1 + 968);
    v17 = *(_QWORD *)(v16 + 104);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      __dst = __p;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v17 + 32))(v17, &__dst);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_27;
LABEL_33:
      operator delete(__p.__r_.__value_.__l.__data_);
      v18 = (std::__shared_weak_count *)v24;
      if (!v24)
        goto LABEL_34;
      goto LABEL_28;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_33;
  }
LABEL_27:
  v18 = (std::__shared_weak_count *)v24;
  if (!v24)
    goto LABEL_34;
LABEL_28:
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_34:
  v25 = *v5;
  *(uint64_t *)((char *)&v25 + *(_QWORD *)(v25 - 24)) = v5[3];
  *(_QWORD *)&v26 = v8 + 16;
  if (SBYTE7(v31) < 0)
    operator delete(v30[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B89E4C](&v33);
}

void sub_1BF4EC93C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::ostringstream::~ostringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_1BF4EC988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF4EC99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  if (*(char *)(v6 - 89) < 0)
  {
    operator delete(*(void **)(v6 - 112));
    std::ostringstream::~ostringstream((uint64_t)va);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__110shared_ptrI8FSModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__110shared_ptrI8FSModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ___ZZN8FSModule18requestFSSync_syncEvENK3__0clEv_block_invoke_71(_QWORD *a1, _QWORD *a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t (*v10)(uint64_t);
  void *v11;
  uint64_t (*v12)(uint64_t);
  NSObject *v13;
  char Bool;
  NSObject *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::string v22;
  uint8_t buf[16];
  std::__shared_weak_count *v25;
  void *__p[4];

  __p[3] = *(void **)MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    v25 = v8;
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_30:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      if (*a2)
        v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      else
        v10 = 0;
      if (v10)
      {
        __p[0] = operator new(0x30uLL);
        *(_OWORD *)&__p[1] = xmmword_1BF545B40;
        strcpy((char *)__p[0], "Failed to issue rfs sync command to baseband");
        FSModule::resetBaseband_sync((FSModule *)v7, (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        goto LABEL_30;
      }
      v11 = *a3;
      v12 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      if (!*a3)
        v12 = 0;
      if (!v12)
        goto LABEL_30;
      v13 = *(NSObject **)(v7 + 88);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p[0]) = 138412290;
        *(void **)((char *)__p + 4) = v11;
        _os_log_impl(&dword_1BF335000, v13, OS_LOG_TYPE_DEFAULT, "#I %@", (uint8_t *)__p, 0xCu);
        v11 = *a3;
      }
      memset(__p, 170, 16);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)__p, (const __CFDictionary *)v11);
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)buf, (const char *)*MEMORY[0x1E0DDF918]);
      Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)__p, *(const __CFString **)buf);
      MEMORY[0x1C3B8936C](buf);
      *(_BYTE *)(v7 + 1088) = Bool;
      if ((Bool & 1) == 0)
      {
        v15 = *(NSObject **)(v7 + 88);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BF335000, v15, OS_LOG_TYPE_DEFAULT, "#I No new data to sync; skipping rfs sync", buf, 2u);
        }
        memset(buf, 170, sizeof(buf));
        (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(_QWORD *)v7 + 80))(buf, v7);
        v16 = *(_QWORD *)buf;
        if (*(_QWORD *)buf)
        {
          if (*(char *)(v7 + 991) < 0)
            std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)(v7 + 968), *(_QWORD *)(v7 + 976));
          else
            v22 = *(std::string *)(v7 + 968);
          ServiceManager::releasePowerAssertion(v16, (uint64_t)&v22);
          if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v22.__r_.__value_.__l.__data_);
        }
        FSModule::handleResult_sync((FSModule *)v7, 1);
        v17 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v18 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
      }
      FSModule::restartSyncTimer_sync((FSModule *)v7);
      MEMORY[0x1C3B893A8](__p);
      v9 = v25;
      if (v25)
        goto LABEL_30;
    }
  }
}

void sub_1BF4ECD80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  MEMORY[0x1C3B893A8](&a20);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_1BF4ECE04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_56()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1BF335000);
  }
  return result;
}

uint64_t __cxx_global_var_init_57()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1BF335000);
  }
  return result;
}

uint64_t __cxx_global_var_init_58()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1BF335000);
  }
  return result;
}

void PowerBudget::PowerBudget(PowerBudget *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
}

{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
}

void PowerBudget::PowerBudget(PowerBudget *this, NSDictionary *a2)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  PowerBudget::fill((id *)this, a2);
}

{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  PowerBudget::fill((id *)this, a2);
}

void sub_1BF4ECF48(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)v1 = v3;
  _Unwind_Resume(a1);
}

void PowerBudget::fill(id *this, NSDictionary *a2)
{
  NSUInteger v4;
  uint64_t **v5;
  uint64_t i;
  void *v7;
  id v8;
  int v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t **v13;
  void *v14;
  void **v15;
  char v16;
  char v17;
  void *v18;
  void **v19;
  char v20;
  char v21;
  void *v22;
  void **v23;
  char v24;
  char v25;
  void *v26;
  void **v27;
  char v28;
  char v29;
  unsigned int v30;
  _BYTE *v31;
  void *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *__p[2];
  char v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];

  this[3] = 0;
  if (a2)
  {
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v4 = -[NSDictionary countByEnumeratingWithState:objects:count:](a2, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
    if (v4)
    {
      v36 = *MEMORY[0x1E0D09958];
      v37 = *(_QWORD *)v41;
      v34 = *MEMORY[0x1E0D09970];
      v35 = *MEMORY[0x1E0D09960];
      v5 = (uint64_t **)(this + 1);
      do
      {
        for (i = 0; i != v4; ++i)
        {
          if (*(_QWORD *)v41 != v37)
            objc_enumerationMutation(a2);
          v7 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * i);
          v8 = -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", v7);
          if (v8)
          {
            v9 = objc_msgSend(v8, "integerValue");
            if ((objc_msgSend(v7, "isEqualToString:", v36) & 1) != 0)
            {
              v10 = 1;
              v11 = *v5;
              v12 = (uint64_t **)(this + 1);
              v13 = (uint64_t **)(this + 1);
              if (*v5)
                goto LABEL_54;
LABEL_58:
              v31 = operator new(0x28uLL);
              v31[28] = v10;
              v31[32] = 0;
              v31[36] = 0;
              *(_QWORD *)v31 = 0;
              *((_QWORD *)v31 + 1) = 0;
              *((_QWORD *)v31 + 2) = v13;
              *v12 = (uint64_t *)v31;
              v32 = *(void **)*this;
              v33 = (uint64_t *)v31;
              if (v32)
              {
                *this = v32;
                v33 = *v12;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)this[1], v33);
              this[2] = (char *)this[2] + 1;
              goto LABEL_6;
            }
            if ((objc_msgSend(v7, "isEqualToString:", v35) & 1) != 0)
            {
              v10 = 0;
              v11 = *v5;
              v12 = (uint64_t **)(this + 1);
              v13 = (uint64_t **)(this + 1);
              if (*v5)
                goto LABEL_54;
              goto LABEL_58;
            }
            if ((objc_msgSend(v7, "isEqualToString:", v34) & 1) != 0)
            {
              v10 = 2;
              v11 = *v5;
              v12 = (uint64_t **)(this + 1);
              v13 = (uint64_t **)(this + 1);
              if (*v5)
                goto LABEL_54;
              goto LABEL_58;
            }
            v14 = (void *)MEMORY[0x1E0CB3940];
            PowerBudget::asString(10, (char *)__p);
            if (v39 >= 0)
              v15 = __p;
            else
              v15 = (void **)__p[0];
            v16 = objc_msgSend(v7, "isEqualToString:", objc_msgSend(v14, "stringWithUTF8String:", v15));
            v17 = v16;
            if (v39 < 0)
            {
              operator delete(__p[0]);
              if ((v17 & 1) != 0)
              {
LABEL_25:
                v10 = 10;
                v11 = *v5;
                v12 = (uint64_t **)(this + 1);
                v13 = (uint64_t **)(this + 1);
                if (*v5)
                  goto LABEL_54;
                goto LABEL_58;
              }
            }
            else if ((v16 & 1) != 0)
            {
              goto LABEL_25;
            }
            v18 = (void *)MEMORY[0x1E0CB3940];
            PowerBudget::asString(11, (char *)__p);
            if (v39 >= 0)
              v19 = __p;
            else
              v19 = (void **)__p[0];
            v20 = objc_msgSend(v7, "isEqualToString:", objc_msgSend(v18, "stringWithUTF8String:", v19));
            v21 = v20;
            if (v39 < 0)
            {
              operator delete(__p[0]);
              if ((v21 & 1) != 0)
              {
LABEL_33:
                v10 = 11;
                v11 = *v5;
                v12 = (uint64_t **)(this + 1);
                v13 = (uint64_t **)(this + 1);
                if (*v5)
                  goto LABEL_54;
                goto LABEL_58;
              }
            }
            else if ((v20 & 1) != 0)
            {
              goto LABEL_33;
            }
            v22 = (void *)MEMORY[0x1E0CB3940];
            PowerBudget::asString(12, (char *)__p);
            if (v39 >= 0)
              v23 = __p;
            else
              v23 = (void **)__p[0];
            v24 = objc_msgSend(v7, "isEqualToString:", objc_msgSend(v22, "stringWithUTF8String:", v23));
            v25 = v24;
            if (v39 < 0)
            {
              operator delete(__p[0]);
              if ((v25 & 1) != 0)
              {
LABEL_41:
                v10 = 12;
                v11 = *v5;
                v12 = (uint64_t **)(this + 1);
                v13 = (uint64_t **)(this + 1);
                if (*v5)
                  goto LABEL_54;
                goto LABEL_58;
              }
            }
            else if ((v24 & 1) != 0)
            {
              goto LABEL_41;
            }
            v26 = (void *)MEMORY[0x1E0CB3940];
            PowerBudget::asString(13, (char *)__p);
            if (v39 >= 0)
              v27 = __p;
            else
              v27 = (void **)__p[0];
            v28 = objc_msgSend(v7, "isEqualToString:", objc_msgSend(v26, "stringWithUTF8String:", v27));
            v29 = v28;
            if (v39 < 0)
            {
              operator delete(__p[0]);
              if ((v29 & 1) != 0)
              {
LABEL_51:
                v10 = 13;
                v11 = *v5;
                v12 = (uint64_t **)(this + 1);
                v13 = (uint64_t **)(this + 1);
                if (!*v5)
                  goto LABEL_58;
                while (1)
                {
LABEL_54:
                  while (1)
                  {
                    v13 = (uint64_t **)v11;
                    v30 = *((unsigned __int8 *)v11 + 28);
                    if (v30 <= v10)
                      break;
                    v11 = *v13;
                    v12 = v13;
                    if (!*v13)
                      goto LABEL_58;
                  }
                  if (v30 >= v10)
                    break;
                  v11 = v13[1];
                  if (!v11)
                  {
                    v12 = v13 + 1;
                    goto LABEL_58;
                  }
                }
                v31 = v13;
LABEL_6:
                *((_DWORD *)v31 + 8) = v9;
                v31[36] = 1;
                continue;
              }
            }
            else if ((v28 & 1) != 0)
            {
              goto LABEL_51;
            }
          }
        }
        v4 = -[NSDictionary countByEnumeratingWithState:objects:count:](a2, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
      }
      while (v4);
    }
  }
}

void sub_1BF4ED38C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BF4ED3FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)v1 = v3;
  _Unwind_Resume(a1);
}

void PowerBudget::~PowerBudget(PowerBudget *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)((char *)this + 8);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
  *(_QWORD *)this = v2;
  *((_QWORD *)this + 2) = 0;
  *v2 = 0;

  *((_QWORD *)this + 3) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = v2;
}

{
  _QWORD *v2;

  v2 = (_QWORD *)((char *)this + 8);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
  *(_QWORD *)this = v2;
  *((_QWORD *)this + 2) = 0;
  *v2 = 0;

  *((_QWORD *)this + 3) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = v2;
}

void PowerBudget::PowerBudget(PowerBudget *this, const PowerBudget *a2)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (a2 != this)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *(_QWORD **)a2, (_QWORD *)a2 + 1);
  *((_QWORD *)this + 3) = objc_msgSend(*((id *)a2 + 3), "copy");
}

{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (a2 != this)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *(_QWORD **)a2, (_QWORD *)a2 + 1);
  *((_QWORD *)this + 3) = objc_msgSend(*((id *)a2 + 3), "copy");
}

void sub_1BF4ED538(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)v1 = v2;
  _Unwind_Resume(a1);
}

void sub_1BF4ED5B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)v1 = v2;
  _Unwind_Resume(a1);
}

uint64_t PowerBudget::PowerBudget(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v6;
  __int128 v7;

  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  v7 = 0u;
  v6 = &v7;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a1)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  if (&v6 != (__int128 **)a2)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(a2, v6, &v7);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v6, (_QWORD *)v7);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v4;
  return a1;
}

void sub_1BF4ED684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  uint64_t v11;
  uint64_t v12;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a10, a11);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v11, *(_QWORD **)(v11 + 8));
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)v11 = v12;
  _Unwind_Resume(a1);
}

uint64_t PowerBudget::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));

    *(_QWORD *)(a1 + 24) = objc_msgSend(*(id *)(a2 + 24), "copy");
  }
  return a1;
}

void PowerBudget::PowerBudget(PowerBudget *this, BudgetData *a2)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 3) = 0;
  if (a2 != this)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *(_QWORD **)a2, (_QWORD *)a2 + 1);
}

{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 3) = 0;
  if (a2 != this)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *(_QWORD **)a2, (_QWORD *)a2 + 1);
}

void sub_1BF4ED75C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)v1 = v2;
  _Unwind_Resume(a1);
}

void PowerBudget::fill(id *this, id *a2)
{

  this[3] = 0;
  if (a2 != this)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *a2, a2 + 1);
}

void sub_1BF4ED820(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)v1 = v2;
  _Unwind_Resume(a1);
}

_QWORD *PowerBudget::PowerBudget(_QWORD *a1, _QWORD *a2)
{
  a1[1] = 0;
  *a1 = a1 + 1;
  a1[2] = 0;
  a1[3] = 0;
  a1[3] = 0;
  if (a2 != a1)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)a1, (_QWORD *)*a2, a2 + 1);
  return a1;
}

{
  a1[1] = 0;
  *a1 = a1 + 1;
  a1[2] = 0;
  a1[3] = 0;
  a1[3] = 0;
  if (a2 != a1)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)a1, (_QWORD *)*a2, a2 + 1);
  return a1;
}

void sub_1BF4ED898(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)v1 = v2;
  _Unwind_Resume(a1);
}

void PowerBudget::fill(uint64_t a1, uint64_t a2)
{

  *(_QWORD *)(a1 + 24) = 0;
  if (a2 != a1)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
}

void sub_1BF4ED95C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)v1 = v2;
  _Unwind_Resume(a1);
}

id PowerBudget::getNSDict(id *this)
{
  _QWORD *v2;
  id *v3;
  _QWORD *v4;
  id *v5;
  id *v6;
  BOOL v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];

  this[3] = 0;
  v10[0] = off_1E790B7D0;
  v10[1] = this;
  v2 = v10;
  v11 = v10;
  v3 = (id *)*this;
  if (*this == this + 1)
  {
    v8 = 4;
    goto LABEL_17;
  }
  v4 = v10;
  while ((*(unsigned int (**)(_QWORD *, uint64_t, id *))(*v4 + 48))(v4, (uint64_t)v3 + 28, v3 + 4))
  {
    v5 = (id *)v3[1];
    v6 = v3;
    if (v5)
    {
      do
      {
        v3 = v5;
        v5 = (id *)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        v3 = (id *)v6[2];
        v7 = *v3 == v6;
        v6 = v3;
      }
      while (!v7);
    }
    if (v3 == this + 1)
      break;
    v4 = v11;
    if (!v11)
      std::__throw_bad_function_call[abi:ne180100]();
  }
  v2 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v2 = v10;
    goto LABEL_17;
  }
  if (v11)
  {
    v8 = 5;
LABEL_17:
    (*(void (**)(void))(*v2 + 8 * v8))();
  }
  return this[3];
}

void sub_1BF4EDAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void PowerBudget::getData(PowerBudget *this@<X0>, PowerBudget *a2@<X8>)
{
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)a2 = (char *)a2 + 8;
  if (a2 != this)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)a2, *(_QWORD **)this, (_QWORD *)this + 1);
}

void sub_1BF4EDB24(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t PowerBudget::get(uint64_t **a1, unsigned int a2)
{
  char v2;
  unsigned __int8 *v4;
  uint64_t **v5;
  _QWORD *v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;

  v2 = a2;
  v5 = a1 + 1;
  v4 = (unsigned __int8 *)a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = v4;
        v7 = v4[28];
        if (v7 <= a2)
          break;
        v4 = (unsigned __int8 *)*v6;
        v5 = (uint64_t **)v6;
        if (!*v6)
          goto LABEL_8;
      }
      if (v7 >= a2)
        break;
      v4 = (unsigned __int8 *)v6[1];
      if (!v4)
      {
        v5 = (uint64_t **)(v6 + 1);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_8:
    v8 = v6;
    v6 = operator new(0x28uLL);
    *((_BYTE *)v6 + 28) = v2;
    *((_BYTE *)v6 + 32) = 0;
    *((_BYTE *)v6 + 36) = 0;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *v5 = v6;
    v9 = (uint64_t *)**a1;
    v10 = v6;
    if (v9)
    {
      *a1 = v9;
      v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6[4];
}

uint64_t *PowerBudget::set(uint64_t *result, unsigned int a2, int a3)
{
  char v3;
  uint64_t *v5;
  unsigned __int8 *v6;
  uint64_t **v7;
  _QWORD *v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;

  if (a2 <= 0xD)
  {
    v3 = a2;
    if (((1 << a2) & 0x3C07) != 0)
    {
      v5 = result;
      v7 = (uint64_t **)(result + 1);
      v6 = (unsigned __int8 *)result[1];
      if (v6)
      {
        while (1)
        {
          while (1)
          {
            v8 = v6;
            v9 = v6[28];
            if (v9 <= a2)
              break;
            v6 = (unsigned __int8 *)*v8;
            v7 = (uint64_t **)v8;
            if (!*v8)
              goto LABEL_10;
          }
          if (v9 >= a2)
            break;
          v6 = (unsigned __int8 *)v8[1];
          if (!v6)
          {
            v7 = (uint64_t **)(v8 + 1);
            goto LABEL_10;
          }
        }
      }
      else
      {
        v8 = result + 1;
LABEL_10:
        v10 = v8;
        v8 = operator new(0x28uLL);
        *((_BYTE *)v8 + 28) = v3;
        *((_BYTE *)v8 + 32) = 0;
        *((_BYTE *)v8 + 36) = 0;
        *v8 = 0;
        v8[1] = 0;
        v8[2] = v10;
        *v7 = v8;
        v11 = *(_QWORD *)*v5;
        v12 = v8;
        if (v11)
        {
          *v5 = v11;
          v12 = *v7;
        }
        result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v12);
        ++v5[2];
      }
      *((_DWORD *)v8 + 8) = a3;
      *((_BYTE *)v8 + 36) = 1;
    }
  }
  return result;
}

void PowerBudget::asString(int a1@<W0>, char *a2@<X8>)
{
  char *v2;
  id *v3;
  const char *v4;
  size_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  const char *v10;
  size_t v11;
  std::string::size_type v12;
  std::string *p_dst;
  const char *v14;
  size_t v15;
  std::string::size_type v16;
  std::string *v17;
  const char *v18;
  size_t v19;
  std::string::size_type v20;
  std::string *v21;
  const char *v22;
  size_t v23;
  std::string::size_type v24;
  std::string *v25;
  uint64_t v26;
  uint64_t v27;
  std::string *v28;
  __int128 v29;
  size_t v30;
  std::string *v31;
  uint64_t v32;
  uint64_t v33;
  std::string *v34;
  __int128 v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  std::string *v39;
  __int128 v40;
  size_t v41;
  uint64_t v42;
  uint64_t v43;
  std::string *v44;
  __int128 v45;
  size_t v46;
  __int128 v47;
  std::string __dst;
  std::string v49;

  v2 = a2;
  switch(a1)
  {
    case 0:
      v3 = (id *)MEMORY[0x1E0D09960];
      goto LABEL_5;
    case 1:
      v3 = (id *)MEMORY[0x1E0D09958];
      goto LABEL_5;
    case 2:
      v3 = (id *)MEMORY[0x1E0D09970];
LABEL_5:
      v4 = (const char *)objc_msgSend(*v3, "UTF8String");
      v5 = strlen(v4);
      if (v5 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v6 = v5;
      if (v5 >= 0x17)
      {
        v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v5 | 7) != 0x17)
          v7 = v5 | 7;
        v8 = v7 + 1;
        v9 = (char *)operator new(v7 + 1);
        *((_QWORD *)v2 + 1) = v6;
        *((_QWORD *)v2 + 2) = v8 | 0x8000000000000000;
        *(_QWORD *)v2 = v9;
        v2 = v9;
      }
      else
      {
        v2[23] = v5;
        if (!v5)
          goto LABEL_13;
      }
      memmove(v2, v4, v6);
LABEL_13:
      v2[v6] = 0;
      return;
    case 10:
      v10 = (const char *)objc_msgSend((id)*MEMORY[0x1E0D09988], "UTF8String");
      v11 = strlen(v10);
      if (v11 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_56;
      v12 = v11;
      if (v11 >= 0x17)
      {
        v26 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17)
          v26 = v11 | 7;
        v27 = v26 + 1;
        p_dst = (std::string *)operator new(v26 + 1);
        __dst.__r_.__value_.__l.__size_ = v12;
        __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11;
        p_dst = &__dst;
        if (!v11)
          goto LABEL_35;
      }
      memmove(p_dst, v10, v12);
LABEL_35:
      p_dst->__r_.__value_.__s.__data_[v12] = 0;
      v28 = std::string::append(&__dst, ".", 1uLL);
      v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      v30 = strlen((const char *)*MEMORY[0x1E0CFB300]);
      v31 = std::string::append(&v49, (const std::string::value_type *)*MEMORY[0x1E0CFB300], v30);
      goto LABEL_51;
    case 11:
      v14 = (const char *)objc_msgSend((id)*MEMORY[0x1E0D09988], "UTF8String");
      v15 = strlen(v14);
      if (v15 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_56;
      v16 = v15;
      if (v15 >= 0x17)
      {
        v32 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17)
          v32 = v15 | 7;
        v33 = v32 + 1;
        v17 = (std::string *)operator new(v32 + 1);
        __dst.__r_.__value_.__l.__size_ = v16;
        __dst.__r_.__value_.__r.__words[2] = v33 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v15;
        v17 = &__dst;
        if (!v15)
          goto LABEL_40;
      }
      memmove(v17, v14, v16);
LABEL_40:
      v17->__r_.__value_.__s.__data_[v16] = 0;
      v34 = std::string::append(&__dst, ".", 1uLL);
      v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      v36 = strlen((const char *)*MEMORY[0x1E0CFB2E8]);
      v31 = std::string::append(&v49, (const std::string::value_type *)*MEMORY[0x1E0CFB2E8], v36);
      goto LABEL_51;
    case 12:
      v18 = (const char *)objc_msgSend((id)*MEMORY[0x1E0D09988], "UTF8String");
      v19 = strlen(v18);
      if (v19 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_56;
      v20 = v19;
      if (v19 >= 0x17)
      {
        v37 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v19 | 7) != 0x17)
          v37 = v19 | 7;
        v38 = v37 + 1;
        v21 = (std::string *)operator new(v37 + 1);
        __dst.__r_.__value_.__l.__size_ = v20;
        __dst.__r_.__value_.__r.__words[2] = v38 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v19;
        v21 = &__dst;
        if (!v19)
          goto LABEL_45;
      }
      memmove(v21, v18, v20);
LABEL_45:
      v21->__r_.__value_.__s.__data_[v20] = 0;
      v39 = std::string::append(&__dst, ".", 1uLL);
      v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      v41 = strlen((const char *)*MEMORY[0x1E0CFB2F0]);
      v31 = std::string::append(&v49, (const std::string::value_type *)*MEMORY[0x1E0CFB2F0], v41);
      goto LABEL_51;
    case 13:
      v22 = (const char *)objc_msgSend((id)*MEMORY[0x1E0D09988], "UTF8String");
      v23 = strlen(v22);
      if (v23 > 0x7FFFFFFFFFFFFFF7)
LABEL_56:
        std::string::__throw_length_error[abi:ne180100]();
      v24 = v23;
      if (v23 >= 0x17)
      {
        v42 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v23 | 7) != 0x17)
          v42 = v23 | 7;
        v43 = v42 + 1;
        v25 = (std::string *)operator new(v42 + 1);
        __dst.__r_.__value_.__l.__size_ = v24;
        __dst.__r_.__value_.__r.__words[2] = v43 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v23;
        v25 = &__dst;
        if (!v23)
          goto LABEL_50;
      }
      memmove(v25, v22, v24);
LABEL_50:
      v25->__r_.__value_.__s.__data_[v24] = 0;
      v44 = std::string::append(&__dst, ".", 1uLL);
      v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      v46 = strlen((const char *)*MEMORY[0x1E0CFB2F8]);
      v31 = std::string::append(&v49, (const std::string::value_type *)*MEMORY[0x1E0CFB2F8], v46);
LABEL_51:
      v47 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      *((_QWORD *)v2 + 2) = *((_QWORD *)&v31->__r_.__value_.__l + 2);
      *(_OWORD *)v2 = v47;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v49.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
      }
      else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        return;
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
      return;
    default:
      a2[23] = 7;
      strcpy(a2, "Unknown");
      return;
  }
}

void sub_1BF4EE210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a15 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_1BF4EE288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    JUMPOUT(0x1BF4EE278);
  JUMPOUT(0x1BF4EE268);
}

uint64_t PowerBudget::to_string@<X0>(PowerBudget *this@<X0>, _BYTE *a2@<X8>)
{
  __int128 v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  BOOL v11;
  uint64_t v12;
  size_t v13;
  _BYTE *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  void *__src[2];
  void *__p[2];
  __int128 v27;
  __int128 v28;
  _OWORD v29[9];
  unint64_t v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v30 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v29[7] = v4;
  v29[8] = v4;
  v29[5] = v4;
  v29[6] = v4;
  v29[3] = v4;
  v29[4] = v4;
  v29[1] = v4;
  v29[2] = v4;
  v28 = v4;
  v29[0] = v4;
  *(_OWORD *)__p = v4;
  v27 = v4;
  v24 = v4;
  *(_OWORD *)__src = v4;
  v22 = v4;
  v23 = v4;
  v21 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"{ ", 2);
  v31[0] = off_1E790B850;
  v31[1] = &v21;
  v5 = v31;
  v32 = v31;
  v8 = *(char **)this;
  v6 = (char *)this + 8;
  v7 = v8;
  if (v8 == v6)
  {
    v12 = 4;
  }
  else
  {
    while ((*(unsigned int (**)(_QWORD *, char *, _QWORD *))(*v5 + 48))(v5, v7 + 28, (_QWORD *)v7 + 4))
    {
      v9 = (char *)*((_QWORD *)v7 + 1);
      v10 = v7;
      if (v9)
      {
        do
        {
          v7 = v9;
          v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v7 = (char *)*((_QWORD *)v10 + 2);
          v11 = *(_QWORD *)v7 == (_QWORD)v10;
          v10 = v7;
        }
        while (!v11);
      }
      if (v7 == v6)
        break;
      v5 = v32;
      if (!v32)
        std::__throw_bad_function_call[abi:ne180100]();
    }
    v5 = v32;
    if (v32 == v31)
    {
      v12 = 4;
      v5 = v31;
    }
    else
    {
      if (!v32)
        goto LABEL_17;
      v12 = 5;
    }
  }
  (*(void (**)(void))(*v5 + 8 * v12))();
LABEL_17:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"}", 1);
  if ((BYTE8(v28) & 0x10) != 0)
  {
    v14 = (_BYTE *)v28;
    if ((void *)v28 < __src[1])
    {
      *(void **)&v28 = __src[1];
      v14 = __src[1];
    }
    v15 = __src[0];
    v13 = v14 - (char *)__src[0];
    if ((unint64_t)(v14 - (char *)__src[0]) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_34;
  }
  else
  {
    if ((BYTE8(v28) & 8) == 0)
    {
      v13 = 0;
      a2[23] = 0;
      goto LABEL_30;
    }
    v15 = (const void *)*((_QWORD *)&v23 + 1);
    v13 = *((_QWORD *)&v24 + 1) - *((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v24 + 1) - *((_QWORD *)&v23 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_34:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v13 >= 0x17)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    v18 = operator new(v16 + 1);
    *((_QWORD *)a2 + 1) = v13;
    *((_QWORD *)a2 + 2) = v17 | 0x8000000000000000;
    *(_QWORD *)a2 = v18;
    a2 = v18;
    goto LABEL_29;
  }
  a2[23] = v13;
  if (v13)
LABEL_29:
    memmove(a2, v15, v13);
LABEL_30:
  a2[v13] = 0;
  *(_QWORD *)&v21 = *MEMORY[0x1E0DE4F50];
  v19 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&v21 + *(_QWORD *)(v21 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v22 = v19;
  *((_QWORD *)&v22 + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v27) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3B89E4C](v29);
}

void sub_1BF4EE550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF4EE564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;

  v11 = *(_QWORD **)(v9 - 64);
  if (v11 == (_QWORD *)(v9 - 88))
  {
    v12 = 4;
    v11 = (_QWORD *)(v9 - 88);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<PowerBudget::getNSDict(void)::$_0,std::allocator<PowerBudget::getNSDict(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E790B7D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<PowerBudget::getNSDict(void)::$_0,std::allocator<PowerBudget::getNSDict(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E790B7D0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<PowerBudget::getNSDict(void)::$_0,std::allocator<PowerBudget::getNSDict(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::operator()(uint64_t a1, char *a2, unsigned int *a3)
{
  uint64_t v5;
  id v6;
  unint64_t v7;

  if (*((_BYTE *)a3 + 4))
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(id *)(v5 + 24);
    if (!v6)
    {
      v6 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      *(_QWORD *)(v5 + 24) = v6;
      v7 = *a2;
      if (v7 > 2)
        return 1;
      goto LABEL_4;
    }
    v7 = *a2;
    if (v7 <= 2)
LABEL_4:
      objc_msgSend(v6, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *a3), **((_QWORD **)&unk_1E790B8C0 + v7));
  }
  return 1;
}

uint64_t std::__function::__func<PowerBudget::getNSDict(void)::$_0,std::allocator<PowerBudget::getNSDict(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN11PowerBudget9getNSDictEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN11PowerBudget9getNSDictEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN11PowerBudget9getNSDictEvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN11PowerBudget9getNSDictEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<PowerBudget::getNSDict(void)::$_0,std::allocator<PowerBudget::getNSDict(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::target_type()
{
}

_QWORD *std::__function::__func<PowerBudget::to_string(void)::$_0,std::allocator<PowerBudget::to_string(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E790B850;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<PowerBudget::to_string(void)::$_0,std::allocator<PowerBudget::to_string(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E790B850;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<PowerBudget::to_string(void)::$_0,std::allocator<PowerBudget::to_string(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::operator()(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  _QWORD *v3;
  void **v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *__p[2];
  unsigned __int8 v10;

  if (!*(_BYTE *)(a3 + 4))
    return 1;
  v3 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  PowerBudget::asString(*a2, (char *)__p);
  v4 = (v10 & 0x80u) == 0 ? __p : (void **)__p[0];
  v5 = (v10 & 0x80u) == 0 ? (void *)v10 : __p[1];
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, (uint64_t)v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" = ", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", ", 2);
  if (((char)v10 & 0x80000000) == 0)
    return 1;
  operator delete(__p[0]);
  return 1;
}

void sub_1BF4EE834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<PowerBudget::to_string(void)::$_0,std::allocator<PowerBudget::to_string(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK11PowerBudget9to_stringEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK11PowerBudget9to_stringEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK11PowerBudget9to_stringEvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK11PowerBudget9to_stringEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<PowerBudget::to_string(void)::$_0,std::allocator<PowerBudget::to_string(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::target_type()
{
}

void sub_1BF4EEAA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1BF4EEAD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BF4EECE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  const void *v8;
  va_list va;
  const void *v10;
  va_list va1;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v10 = va_arg(va2, const void *);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef((const void **)va2);

  _Unwind_Resume(a1);
}

void sub_1BF4EEDE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  void *v10;
  void *v11;

  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(&a9);
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(&a10);

  _Unwind_Resume(a1);
}

void *__copy_helper_atomic_property_(void **a1, const void **a2)
{
  void *result;

  *a1 = _Block_copy(*a2);
  result = _Block_copy(a2[1]);
  a1[1] = result;
  return result;
}

void __assign_helper_atomic_property_(uint64_t a1, const void **a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v4 = _Block_copy(*a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;

  v6 = _Block_copy(a2[1]);
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;

}

void sub_1BF4EEF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

const char *CoreAccessoriesDelegate::getName(CoreAccessoriesDelegate *this)
{
  return "CoreAccessories.delegate";
}

uint64_t CoreAccessoriesDelegate::create@<X0>(_QWORD *a1@<X0>, NSObject **a2@<X1>, std::__shared_weak_count_vtbl **a3@<X8>)
{
  std::__shared_weak_count_vtbl *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *on_zero_shared;
  unint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;
  NSObject *v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  _QWORD v27[3];
  _QWORD *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v25 = 0;
  v26 = 0;
  v6 = (std::__shared_weak_count_vtbl *)operator new(0x90uLL);
  v7 = a1[3];
  if (!v7)
    goto LABEL_4;
  if ((_QWORD *)v7 != a1)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
LABEL_4:
    v28 = (_QWORD *)v7;
    goto LABEL_6;
  }
  v28 = v27;
  (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v27);
LABEL_6:
  v8 = *a2;
  v24 = v8;
  if (v8)
    dispatch_retain(v8);
  CoreAccessoriesDelegate::CoreAccessoriesDelegate((uint64_t)v6, v27, &v24);
  v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  v11->__vftable = (std::__shared_weak_count_vtbl *)off_1E790BA80;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = v6;
  on_zero_shared = (std::__shared_weak_count *)v6->__on_zero_shared;
  if (on_zero_shared)
  {
    if (on_zero_shared->__shared_owners_ != -1)
      goto LABEL_21;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
    v6->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
    std::__shared_weak_count::__release_weak(on_zero_shared);
  }
  else
  {
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    v18 = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    v6->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
  }
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v25 = v6;
  v26 = v11;
  if (v8)
    dispatch_release(v8);
  v21 = v28;
  if (v28 == v27)
  {
    v22 = 4;
    v21 = v27;
    goto LABEL_27;
  }
  if (v28)
  {
    v22 = 5;
LABEL_27:
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v21 + 8 * v22))(v21, v9, v10);
  }
  result = (*((uint64_t (**)(std::__shared_weak_count_vtbl *))v6->~__shared_weak_count + 7))(v6);
  *a3 = v6;
  a3[1] = (std::__shared_weak_count_vtbl *)v11;
  return result;
}

void sub_1BF4EF1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;

  operator delete(v15);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t CoreAccessoriesDelegate::CoreAccessoriesDelegate(uint64_t a1, _QWORD *a2, NSObject **a3)
{
  _QWORD *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E790B8E8;
  v5 = (_QWORD *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      v14 = v13;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v13);
    }
    else
    {
      v14 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    }
  }
  else
  {
    v14 = 0;
  }
  v6 = *a3;
  if (v6)
    dispatch_retain(v6);
  v7 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
    dispatch_retain(v6);
  *(_QWORD *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 40), "com.apple.telephony.abm", v7);
  *(_QWORD *)a1 = off_1E79048A8;
  v8 = (uint64_t)v14;
  if (!v14)
    goto LABEL_13;
  if (v14 != v13)
  {
    v8 = (*(uint64_t (**)(void))(*v14 + 16))();
LABEL_13:
    *(_QWORD *)(a1 + 72) = v8;
    goto LABEL_15;
  }
  *(_QWORD *)(a1 + 72) = a1 + 48;
  (*(void (**)(_QWORD *))(v13[0] + 24))(v13);
LABEL_15:
  *(_BYTE *)(a1 + 80) = 0;
  if (v6)
    dispatch_release(v6);
  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
    goto LABEL_21;
  }
  if (v14)
  {
    v10 = 5;
LABEL_21:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  *(_QWORD *)a1 = off_1E790B8E8;
  v11 = operator new(0x20uLL);
  v11[1] = 0;
  v11[2] = 0;
  *v11 = off_1E790BAD0;
  v11[3] = 0;
  *(_QWORD *)(a1 + 88) = v11 + 3;
  *(_QWORD *)(a1 + 96) = v11;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  return a1;
}

void sub_1BF4EF450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  NSObject *v13;
  _QWORD *v14;
  _QWORD *v15;

  v15 = v14;
  ctu::SharedLoggable<AccessoriesDelegateBase,ctu::OsLogLogger>::~SharedLoggable(v15);
  if (v13)
    dispatch_release(v13);
  if (a13 == &a10)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(a1);
  }
  if (!a13)
    _Unwind_Resume(a1);
  (*(void (**)(void))(*a13 + 40))();
  _Unwind_Resume(a1);
}

void CoreAccessoriesDelegate::~CoreAccessoriesDelegate(CoreAccessoriesDelegate *this)
{
  void **v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  CoreAccessoriesDelegate *v7;
  uint64_t v8;
  void **v9;
  NSObject *v10;
  NSObject *v11;
  std::__shared_weak_count *v12;

  *(_QWORD *)this = off_1E790B8E8;
  v2 = (void **)*((_QWORD *)this + 15);
  if (v2)
  {
    do
    {
      v9 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v9;
    }
    while (v9);
  }
  v3 = (void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
    operator delete(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *(_QWORD *)this = off_1E79048A8;
  v7 = (CoreAccessoriesDelegate *)*((_QWORD *)this + 9);
  if (v7 == (CoreAccessoriesDelegate *)((char *)this + 48))
  {
    v8 = 4;
    v7 = (CoreAccessoriesDelegate *)((char *)this + 48);
  }
  else
  {
    if (!v7)
      goto LABEL_17;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_17:
  MEMORY[0x1C3B89240]((char *)this + 40);
  v10 = *((_QWORD *)this + 4);
  if (v10)
    dispatch_release(v10);
  v11 = *((_QWORD *)this + 3);
  if (v11)
    dispatch_release(v11);
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
}

{
  void *v1;

  CoreAccessoriesDelegate::~CoreAccessoriesDelegate(this);
  operator delete(v1);
}

void CoreAccessoriesDelegate::init(CoreAccessoriesDelegate *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 3221225472;
  v1[2] = ___ZN23CoreAccessoriesDelegate4initEv_block_invoke;
  v1[3] = &__block_descriptor_40_e5_v8__0l;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN23CoreAccessoriesDelegate4initEv_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  void **v17;
  void *v18;
  void *v19;
  AccessoryDetection *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_QWORD *, const void **);
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  _QWORD aBlock[6];
  std::__shared_weak_count *v33;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = (std::__shared_weak_count *)v1[2];
  if (!v2 || (v3 = v1[1], (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN23CoreAccessoriesDelegate4initEv_block_invoke_2;
  aBlock[3] = &__block_descriptor_56_ea8_32c49_ZTSKZZN23CoreAccessoriesDelegate4initEvEUb_E3__0_e160_v40__0_CFSharedRef_const___CFString______CFString__8_CFSharedRef_const___CFString______CFString__16i24i28_CFSharedRef_const___CFDictionary______CFDictionary__32l;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  aBlock[4] = v1;
  aBlock[5] = v3;
  v33 = v5;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = _Block_copy(aBlock);
  std::__shared_weak_count::__release_weak(v5);
  v25 = v10;
  v26 = 3321888768;
  v27 = ___ZN23CoreAccessoriesDelegate4initEv_block_invoke_110;
  v28 = &__block_descriptor_56_ea8_32c49_ZTSKZZN23CoreAccessoriesDelegate4initEvEUb_E3__1_e52_v16__0_CFSharedRef_const___CFString______CFString__8l;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v29 = v1;
  v30 = v3;
  v31 = v5;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  v16 = _Block_copy(&v25);
  std::__shared_weak_count::__release_weak(v5);
  v17 = (void **)v1[11];
  v18 = _Block_copy(v13);
  v19 = _Block_copy(v16);
  v20 = [AccessoryDetection alloc];
  v21 = _Block_copy(v18);
  v22 = _Block_copy(v19);
  if (v20)
  {
    v23 = -[AccessoryDetection initWithCallback:](v20, "initWithCallback:", v21, v22, v25, v26, v27, v28, v29, v30);
  }
  else
  {

    v23 = 0;
  }
  v24 = *v17;
  *v17 = (void *)v23;

  if (v31)
    std::__shared_weak_count::__release_weak(v31);
  if (v33)
    std::__shared_weak_count::__release_weak(v33);

  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF4EF878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  std::__shared_weak_count *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  std::__shared_weak_count *v28;

  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    v28 = a22;
    if (!a22)
    {
LABEL_3:

      std::__shared_weak_count::__release_weak(v22);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v28 = a22;
    if (!a22)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v28);

  std::__shared_weak_count::__release_weak(v22);
  _Unwind_Resume(a1);
}

void ___ZN23CoreAccessoriesDelegate4initEv_block_invoke_2(_QWORD *a1, const void **a2, const void **a3, int a4, int a5, const void **a6)
{
  std::__shared_weak_count *v7;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD v21[5];
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef cf;
  int v25;
  int v26;

  v7 = (std::__shared_weak_count *)a1[6];
  if (v7)
  {
    v13 = a1[4];
    v14 = std::__shared_weak_count::lock(v7);
    if (v14)
    {
      v15 = v14;
      if (a1[5])
      {
        v21[0] = MEMORY[0x1E0C809B0];
        v21[1] = 3321888768;
        v21[2] = ___ZZZN23CoreAccessoriesDelegate4initEvEUb_ENK3__0clEN3ctu2cf11CFSharedRefIK10__CFStringEES6_27ACCEndpoint_TransportType_t20ACCConnection_Type_tNS3_IK14__CFDictionaryEE_block_invoke;
        v21[3] = &__block_descriptor_72_ea8_40c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE48c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE56c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_e5_v8__0l;
        v16 = *a2;
        v21[4] = v13;
        v22 = v16;
        if (v16)
          CFRetain(v16);
        v17 = *a3;
        v23 = v17;
        if (v17)
          CFRetain(v17);
        v18 = *a6;
        cf = v18;
        if (v18)
          CFRetain(v18);
        v25 = a4;
        v26 = a5;
        ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)(v13 + 8), (uint64_t)v21);
        if (cf)
          CFRelease(cf);
        if (v23)
          CFRelease(v23);
        if (v22)
          CFRelease(v22);
      }
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

uint64_t __copy_helper_block_ea8_32c49_ZTSKZZN23CoreAccessoriesDelegate4initEvEUb_E3__0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_OWORD *)(result + 32) = *(_OWORD *)(a2 + 32);
  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_32c49_ZTSKZZN23CoreAccessoriesDelegate4initEvEUb_E3__0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN23CoreAccessoriesDelegate4initEv_block_invoke_110(_QWORD *a1, const void **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  const void *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD v11[5];
  CFTypeRef cf;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v11[0] = MEMORY[0x1E0C809B0];
        v11[1] = 3321888768;
        v11[2] = ___ZZZN23CoreAccessoriesDelegate4initEvEUb_ENK3__1clEN3ctu2cf11CFSharedRefIK10__CFStringEE_block_invoke;
        v11[3] = &__block_descriptor_48_ea8_40c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE_e5_v8__0l;
        v8 = *a2;
        v11[4] = v5;
        cf = v8;
        if (v8)
          CFRetain(v8);
        ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)(v5 + 8), (uint64_t)v11);
        if (cf)
          CFRelease(cf);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

uint64_t __copy_helper_block_ea8_32c49_ZTSKZZN23CoreAccessoriesDelegate4initEvEUb_E3__1(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_OWORD *)(result + 32) = *(_OWORD *)(a2 + 32);
  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_32c49_ZTSKZZN23CoreAccessoriesDelegate4initEvEUb_E3__1(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void CoreAccessoriesDelegate::start(CoreAccessoriesDelegate *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 3221225472;
  v1[2] = ___ZN23CoreAccessoriesDelegate5startEv_block_invoke;
  v1[3] = &__block_descriptor_40_e5_v8__0l;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN23CoreAccessoriesDelegate5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  uint8_t v5[16];
  uint8_t buf[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = *(NSObject **)(v1 + 40);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Already started", v5, 2u);
    }
  }
  else
  {
    if (v4)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Starting", buf, 2u);
    }
    *(_BYTE *)(v1 + 80) = 1;
    objc_msgSend(**(id **)(v1 + 88), "start");
  }
}

void CoreAccessoriesDelegate::stop(CoreAccessoriesDelegate *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 3221225472;
  v1[2] = ___ZN23CoreAccessoriesDelegate4stopEv_block_invoke;
  v1[3] = &__block_descriptor_40_e5_v8__0l;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN23CoreAccessoriesDelegate4stopEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  void **v5;
  uint64_t v6;
  uint64_t i;
  void **v8;
  __int16 v9[8];
  uint8_t buf[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = *(NSObject **)(v1 + 40);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Stopping", buf, 2u);
    }
    *(_BYTE *)(v1 + 80) = 0;
    objc_msgSend(**(id **)(v1 + 88), "stop");
    if (*(_QWORD *)(v1 + 128))
    {
      v5 = *(void ***)(v1 + 120);
      if (v5)
      {
        do
        {
          v8 = (void **)*v5;
          if (*((char *)v5 + 39) < 0)
            operator delete(v5[2]);
          operator delete(v5);
          v5 = v8;
        }
        while (v8);
      }
      *(_QWORD *)(v1 + 120) = 0;
      v6 = *(_QWORD *)(v1 + 112);
      if (v6)
      {
        for (i = 0; i != v6; ++i)
          *(_QWORD *)(*(_QWORD *)(v1 + 104) + 8 * i) = 0;
      }
      *(_QWORD *)(v1 + 128) = 0;
    }
  }
  else if (v4)
  {
    v9[0] = 0;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I Already stopped", (uint8_t *)v9, 2u);
  }
}

void ___ZZZN23CoreAccessoriesDelegate4initEvEUb_ENK3__0clEN3ctu2cf11CFSharedRefIK10__CFStringEES6_27ACCEndpoint_TransportType_t20ACCConnection_Type_tNS3_IK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  const void *v2;
  _QWORD *v3;
  uint64_t (*v4)(uint64_t);
  std::string::size_type v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  NSObject *v9;
  std::string::size_type v10;
  uint64_t v11;
  const char *v12;
  uint64_t (*v13)(uint64_t);
  std::string::size_type v14;
  uint64_t (*v15)(uint64_t);
  uint64_t (*v16)(uint64_t);
  char *v17;
  __int16 v18;
  __int16 v19;
  const __CFNumber *v20;
  __int16 v21;
  __int16 v22;
  CFTypeRef v23;
  _WORD *v24;
  uint64_t v25;
  int v26;
  const void *v27;
  const void *v28;
  const __CFString *v29;
  const __CFString *v30;
  CFTypeID v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const __CFNumber *v35;
  CFTypeID v36;
  char v37;
  std::string::size_type v38;
  const void *v39;
  const __CFNumber *Value;
  CFTypeID v41;
  const void *v42;
  __int16 v43;
  __int16 v44;
  char v45;
  std::string *v46;
  std::string::size_type size;
  std::string *v48;
  std::string::value_type *v49;
  std::string::size_type v50;
  std::string::size_type v51;
  uint64_t *v52;
  void *v53;
  void *v54;
  _WORD *v55;
  CFTypeRef cf;
  std::string v57;
  std::string v58;
  char *v59;
  __int128 v60;
  void *v61;
  __int128 v62;
  void *v63;
  __int128 v64;
  const void *v65;
  void *v66;
  __int128 v67;
  const void *v68;
  void *__p;
  __int128 v70;
  char *v71;
  __int128 v72;
  void *v73[3];
  CFTypeRef v74;
  std::string buf;
  const char *v76;
  __int16 v77;
  uint64_t v78;
  uint64_t v79;

  v2 = 0;
  v79 = *MEMORY[0x1E0C80C00];
  v74 = 0;
  v3 = *(_QWORD **)(a1 + 32);
  if (*(_QWORD *)(a1 + 40))
    v4 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
  else
    v4 = 0;
  if (v4
    || (HIBYTE(v73[2]) = 21,
        strcpy((char *)v73, "Invalid endpoint UUID"),
        (*(void (**)(std::string *__return_ptr, _QWORD *, void **, uint64_t))(*v3 + 48))(&buf, v3, v73, 5),
        v2 = (const void *)buf.__r_.__value_.__r.__words[0],
        v74 = (CFTypeRef)buf.__r_.__value_.__r.__words[0],
        buf.__r_.__value_.__r.__words[0] = 0,
        (SHIBYTE(v73[2]) & 0x80000000) == 0))
  {
    v5 = *(_QWORD *)(a1 + 48);
    if (v5)
      v6 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
    else
      v6 = 0;
    if (v6)
      goto LABEL_10;
LABEL_21:
    v71 = (char *)operator new(0x19uLL);
    v72 = xmmword_1BF53F3F0;
    strcpy(v71, "Invalid connection UUID");
    (*(void (**)(std::string *__return_ptr, _QWORD *, char **, uint64_t))(*v3 + 48))(&buf, v3, &v71, 5);
    v14 = buf.__r_.__value_.__r.__words[0];
    v74 = (CFTypeRef)buf.__r_.__value_.__r.__words[0];
    buf.__r_.__value_.__r.__words[0] = 0;
    if (v2)
    {
      CFRelease(v2);
      if (buf.__r_.__value_.__r.__words[0])
        CFRelease(buf.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v72) < 0)
    {
      operator delete(v71);
      if (*(_QWORD *)(a1 + 56))
        v16 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      else
        v16 = 0;
      if (v16)
        goto LABEL_41;
    }
    else
    {
      if (*(_QWORD *)(a1 + 56))
        v15 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      else
        v15 = 0;
      if (v15)
        goto LABEL_41;
    }
    v2 = (const void *)v14;
    goto LABEL_35;
  }
  operator delete(v73[0]);
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    v13 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
  else
    v13 = 0;
  if (!v13)
    goto LABEL_21;
LABEL_10:
  v7 = *(_QWORD *)(a1 + 56);
  v8 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!v7)
    v8 = 0;
  if (!v8)
  {
LABEL_35:
    __p = operator new(0x20uLL);
    v70 = xmmword_1BF53F2A0;
    strcpy((char *)__p, "Invalid connection properties");
    (*(void (**)(std::string *__return_ptr, _QWORD *, void **, uint64_t))(*v3 + 48))(&buf, v3, &__p, 5);
    v74 = (CFTypeRef)buf.__r_.__value_.__r.__words[0];
    buf.__r_.__value_.__r.__words[0] = 0;
    if (v2)
    {
      CFRelease(v2);
      if (buf.__r_.__value_.__r.__words[0])
        CFRelease(buf.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v70) & 0x80000000) == 0)
      goto LABEL_41;
    v17 = (char *)__p;
    goto LABEL_40;
  }
  if (!v4)
    goto LABEL_41;
  v9 = v3[5];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(_QWORD *)(a1 + 40);
    v11 = *(unsigned int *)(a1 + 64);
    if (v11 > 0xD)
      v12 = "Unknown";
    else
      v12 = transportTypeToString(ACCEndpoint_TransportType_t)::transportTypes[v11];
    LODWORD(buf.__r_.__value_.__l.__data_) = 138413058;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v10;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v5;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
    v76 = v12;
    v77 = 2112;
    v78 = v7;
    _os_log_impl(&dword_1BF335000, v9, OS_LOG_TYPE_DEFAULT, "#I Accessory attached:\n    endpoint UUID:      %@\n    connection UUID:    %@\n    transport:         %s\n    properties:        \n%@", (uint8_t *)&buf, 0x2Au);
  }
  v26 = *(_DWORD *)(a1 + 64);
  if (v26 == 13)
  {
    v33 = *(const void **)(a1 + 56);
    v65 = v33;
    if (v33)
    {
      CFRetain(v33);
      LODWORD(buf.__r_.__value_.__l.__data_) = 0;
      if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
      {
        v39 = (const void *)*MEMORY[0x1E0D15400];
        if (CFDictionaryContainsKey((CFDictionaryRef)v33, (const void *)*MEMORY[0x1E0D15400]))
        {
          Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v33, v39);
          v20 = Value;
          if (!Value)
          {
            v42 = v33;
            v18 = 0;
            v19 = 0;
            goto LABEL_102;
          }
          v41 = CFGetTypeID(Value);
          if (v41 == CFNumberGetTypeID() && CFNumberGetValue(v20, kCFNumberIntType, &buf))
          {
            v42 = v33;
            v18 = 0;
            v22 = -1;
            v43 = 2056;
            v44 = 3;
            v19 = 0;
            LOWORD(v20) = 0;
            v21 = 0;
            v45 = 0;
            switch(buf.__r_.__value_.__s.__data_[0])
            {
              case 0x39:
              case 0x93:
                v44 = 0;
                v18 = 3;
                v43 = 2055;
                goto LABEL_166;
              case 0x3A:
              case 0x3B:
              case 0x3C:
              case 0x3D:
              case 0x3E:
              case 0x3F:
              case 0x40:
              case 0x41:
              case 0x46:
              case 0x47:
              case 0x48:
              case 0x49:
              case 0x4A:
              case 0x4B:
              case 0x4F:
              case 0x50:
              case 0x51:
              case 0x52:
              case 0x59:
              case 0x5A:
              case 0x5B:
              case 0x5C:
              case 0x5D:
              case 0x5E:
              case 0x5F:
              case 0x60:
              case 0x61:
              case 0x62:
              case 0x63:
              case 0x64:
              case 0x65:
              case 0x66:
              case 0x67:
              case 0x68:
              case 0x69:
              case 0x6A:
              case 0x6B:
              case 0x6C:
              case 0x6D:
              case 0x6E:
              case 0x6F:
              case 0x70:
              case 0x71:
              case 0x73:
              case 0x74:
              case 0x75:
              case 0x76:
              case 0x77:
              case 0x78:
              case 0x79:
              case 0x7A:
              case 0x7B:
              case 0x7C:
              case 0x7D:
              case 0x7E:
              case 0x7F:
              case 0x82:
              case 0x83:
              case 0x84:
              case 0x86:
              case 0x87:
              case 0x89:
              case 0x8A:
              case 0x8B:
              case 0x8C:
              case 0x8D:
              case 0x8E:
              case 0x8F:
              case 0x90:
              case 0x91:
              case 0x92:
                break;
              case 0x42:
                v44 = 0;
                v18 = 3;
                v43 = 2053;
                goto LABEL_166;
              case 0x43:
              case 0x44:
              case 0x45:
              case 0x85:
                v18 = 0;
                v43 = 2050;
                goto LABEL_166;
              case 0x4C:
              case 0x4D:
              case 0x4E:
                v18 = 0;
                v43 = 2049;
                goto LABEL_165;
              case 0x53:
              case 0x54:
              case 0x55:
              case 0x81:
                v18 = 0;
                v43 = 2048;
                v44 = 2;
                goto LABEL_166;
              case 0x56:
                v18 = 0;
                v43 = 2051;
                goto LABEL_165;
              case 0x57:
                v18 = 0;
                v43 = 2052;
LABEL_165:
                v44 = 1;
                goto LABEL_166;
              case 0x58:
                v18 = 0;
                v43 = 2052;
                v44 = 4;
                goto LABEL_166;
              case 0x72:
                goto LABEL_166;
              case 0x80:
                v18 = 0;
                v43 = 2057;
                v44 = 4;
                goto LABEL_166;
              case 0x88:
                v44 = 0;
                v18 = 3;
                v43 = 2054;
LABEL_166:
                LOWORD(v20) = v18;
                v45 = 1;
                v21 = 2;
                v19 = 3;
                v18 = v44;
                v22 = v43;
                break;
              default:
                v19 = 0;
                LOWORD(v20) = 0;
                v21 = 0;
                v45 = 0;
                break;
            }
LABEL_103:
            if (v42)
              CFRelease(v42);
            if ((v45 & 1) == 0)
            {
              v63 = operator new(0x28uLL);
              v64 = xmmword_1BF544D40;
              strcpy((char *)v63, "Error parsing NFC Accessory properties");
              (*(void (**)(std::string *__return_ptr, _QWORD *, void **, uint64_t))(*v3 + 48))(&buf, v3, &v63, 5);
              v74 = (CFTypeRef)buf.__r_.__value_.__r.__words[0];
              buf.__r_.__value_.__r.__words[0] = 0;
              if (v2)
              {
                CFRelease(v2);
                if (buf.__r_.__value_.__r.__words[0])
                  CFRelease(buf.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v64) < 0)
                operator delete(v63);
              goto LABEL_42;
            }
            goto LABEL_118;
          }
        }
      }
    }
    else
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 0;
    }
    v42 = v33;
    v18 = 0;
    v19 = 0;
    LOWORD(v20) = 0;
LABEL_102:
    v21 = 0;
    v45 = 0;
    v22 = -1;
    goto LABEL_103;
  }
  if (v26 != 7)
  {
    if (v26 == 5)
    {
      v27 = *(const void **)(a1 + 56);
      v68 = v27;
      if (!v27
        || (CFRetain(v27),
            !ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get))
      {
        v19 = 0;
        LOWORD(v20) = 0;
        v21 = 0;
        v37 = 0;
        v22 = -1;
        if (!v27)
          goto LABEL_116;
        goto LABEL_115;
      }
      v28 = (const void *)*MEMORY[0x1E0D153E0];
      if (CFDictionaryContainsKey((CFDictionaryRef)v27, (const void *)*MEMORY[0x1E0D153E0])
        && (v29 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v27, v28), (v30 = v29) != 0)
        && (v31 = CFGetTypeID(v29), v31 == CFStringGetTypeID()))
      {
        if (CFStringCompare(v30, CFSTR("A1749"), 0) == kCFCompareEqualTo)
        {
          LOWORD(v20) = 0;
          v19 = 1;
          v22 = 1;
          goto LABEL_156;
        }
        if (CFStringCompare(v30, CFSTR("A1605"), 0) == kCFCompareEqualTo
          || CFStringCompare(v30, CFSTR("A1717"), 0) == kCFCompareEqualTo)
        {
          LOWORD(v20) = 0;
          v22 = 5;
          goto LABEL_155;
        }
        if (CFStringCompare(v30, CFSTR("A1748"), 0) == kCFCompareEqualTo)
        {
          LOWORD(v20) = 0;
          v22 = 2;
          goto LABEL_155;
        }
        v19 = -1;
      }
      else
      {
        v19 = 0;
      }
      v34 = (const void *)*MEMORY[0x1E0D153F0];
      if (CFDictionaryContainsKey((CFDictionaryRef)v27, (const void *)*MEMORY[0x1E0D153F0]))
      {
        v35 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v27, v34);
        v20 = v35;
        if (!v35)
        {
LABEL_114:
          v21 = 0;
          v37 = 0;
          v22 = -1;
          goto LABEL_115;
        }
        v36 = CFGetTypeID(v35);
        if (v36 == CFStringGetTypeID())
        {
          if (CFStringCompare((CFStringRef)v20, CFSTR("B292"), 0))
          {
            if (CFStringCompare((CFStringRef)v20, CFSTR("A2308"), 0)
              && CFStringCompare((CFStringRef)v20, CFSTR("A2309"), 0))
            {
              LOWORD(v20) = 0;
              v21 = 0;
              v37 = 0;
              v19 = -1;
              v22 = -1;
LABEL_115:
              CFRelease(v27);
LABEL_116:
              if ((v37 & 1) == 0)
              {
                v66 = operator new(0x30uLL);
                v67 = xmmword_1BF544D60;
                strcpy((char *)v66, "Error parsing Generic Accessory properties");
                (*(void (**)(std::string *__return_ptr, _QWORD *, void **, uint64_t))(*v3 + 48))(&buf, v3, &v66, 5);
                v74 = (CFTypeRef)buf.__r_.__value_.__r.__words[0];
                buf.__r_.__value_.__r.__words[0] = 0;
                if (v2)
                {
                  CFRelease(v2);
                  if (buf.__r_.__value_.__r.__words[0])
                    CFRelease(buf.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v67) < 0)
                  operator delete(v66);
                v18 = 0;
                goto LABEL_42;
              }
              v18 = 0;
              goto LABEL_118;
            }
            LOWORD(v20) = 0;
            v22 = 12;
            v19 = 4;
LABEL_156:
            v37 = 1;
            v21 = 2;
            goto LABEL_115;
          }
          LOWORD(v20) = 2;
          v22 = 4;
LABEL_155:
          v19 = 1;
          goto LABEL_156;
        }
      }
      LOWORD(v20) = 0;
      goto LABEL_114;
    }
    v59 = (char *)operator new(0x28uLL);
    v60 = xmmword_1BF545700;
    strcpy(v59, "Unsupported accessory transport type");
    (*(void (**)(std::string *__return_ptr, _QWORD *, char **, uint64_t))(*v3 + 48))(&buf, v3, &v59, 5);
    v74 = (CFTypeRef)buf.__r_.__value_.__r.__words[0];
    buf.__r_.__value_.__r.__words[0] = 0;
    if (v2)
    {
      CFRelease(v2);
      if (buf.__r_.__value_.__r.__words[0])
        CFRelease(buf.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v60) < 0)
    {
      v17 = v59;
LABEL_40:
      operator delete(v17);
    }
LABEL_41:
    v18 = 0;
    v19 = 0;
    LOWORD(v20) = 0;
    v21 = 0;
    v22 = -1;
    goto LABEL_42;
  }
  if (*(_DWORD *)(a1 + 68) == 3)
  {
    v32 = *(const void **)(a1 + 56);
    if (v32)
    {
      CFRetain(*(CFTypeRef *)(a1 + 56));
      CFRelease(v32);
    }
    v18 = 0;
    LOWORD(v20) = 0;
    v21 = 2;
    v22 = 12;
    v19 = 4;
  }
  else
  {
    v61 = operator new(0x28uLL);
    v62 = xmmword_1BF544D50;
    strcpy((char *)v61, "Unsupported AID Bus connection type");
    (*(void (**)(std::string *__return_ptr, _QWORD *, void **, uint64_t))(*v3 + 48))(&buf, v3, &v61, 5);
    v38 = buf.__r_.__value_.__r.__words[0];
    v74 = (CFTypeRef)buf.__r_.__value_.__r.__words[0];
    buf.__r_.__value_.__r.__words[0] = 0;
    if (v2)
    {
      CFRelease(v2);
      if (buf.__r_.__value_.__r.__words[0])
        CFRelease(buf.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v62) < 0)
      operator delete(v61);
    v18 = 0;
    v19 = 0;
    LOWORD(v20) = 0;
    v21 = 0;
    v22 = -1;
    v2 = (const void *)v38;
  }
LABEL_118:
  memset(&buf, 0, sizeof(buf));
  ctu::cf::assign();
  v58 = buf;
  if (!std::__hash_table<std::__hash_value_type<std::string,abm::AccessoryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,abm::AccessoryInfo>>>::find<std::string>(v3 + 13, (uint64_t)&v58))
  {
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
    v52 = std::__hash_table<std::__hash_value_type<std::string,abm::AccessoryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,abm::AccessoryInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v3 + 13), (uint64_t)&v58, (__int128 **)&buf);
    *((_WORD *)v52 + 20) = v22;
    *((_WORD *)v52 + 21) = v21;
    *((_WORD *)v52 + 22) = 0;
    *((_WORD *)v52 + 23) = (_WORD)v20;
    *((_WORD *)v52 + 24) = v18;
    *((_WORD *)v52 + 25) = v19;
    if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_144;
  }
  *((_BYTE *)&buf.__r_.__value_.__s + 23) = 21;
  strcpy((char *)&buf, "Duplicate accessory: ");
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v46 = &v58;
  else
    v46 = (std::string *)v58.__r_.__value_.__r.__words[0];
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  else
    size = v58.__r_.__value_.__l.__size_;
  v48 = std::string::append(&buf, (const std::string::value_type *)v46, size);
  v49 = (std::string::value_type *)v48->__r_.__value_.__r.__words[0];
  v50 = v48->__r_.__value_.__l.__size_;
  v51 = v48->__r_.__value_.__r.__words[2];
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if ((v51 & 0x8000000000000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v57, v49, v50);
  }
  else
  {
    v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
    v57.__r_.__value_.__l.__size_ = v50;
    v57.__r_.__value_.__r.__words[2] = v51;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD *, std::string *, uint64_t))(*v3 + 48))(&buf, v3, &v57, 5);
  v74 = (CFTypeRef)buf.__r_.__value_.__r.__words[0];
  buf.__r_.__value_.__r.__words[0] = 0;
  if (v2)
  {
    CFRelease(v2);
    if (buf.__r_.__value_.__r.__words[0])
      CFRelease(buf.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v57.__r_.__value_.__l.__data_);
    if ((v51 & 0x8000000000000000) == 0)
    {
LABEL_143:
      if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_42;
      goto LABEL_144;
    }
  }
  else if ((v51 & 0x8000000000000000) == 0)
  {
    goto LABEL_143;
  }
  operator delete(v49);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
LABEL_144:
    operator delete(v58.__r_.__value_.__l.__data_);
LABEL_42:
  v23 = v74;
  if (v3[9])
  {
    cf = v74;
    if (v74)
      CFRetain(v74);
    v24 = operator new(0xCuLL);
    v54 = v24 + 6;
    v55 = v24 + 6;
    *v24 = v22;
    v24[1] = v21;
    v24[2] = 0;
    v24[3] = (_WORD)v20;
    v24[4] = v18;
    v24[5] = v19;
    v53 = v24;
    v25 = v3[9];
    if (!v25)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, CFTypeRef *, void **))(*(_QWORD *)v25 + 48))(v25, &cf, &v53);
    if (v53)
    {
      v54 = v53;
      operator delete(v53);
    }
    if (cf)
      CFRelease(cf);
  }
  if (v23)
    CFRelease(v23);
}

void sub_1BF4F09E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

CFTypeRef __copy_helper_block_ea8_40c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE48c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE56c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  const void *v5;
  CFTypeRef result;

  v4 = (const void *)a2[5];
  a1[5] = v4;
  if (v4)
    CFRetain(v4);
  v5 = (const void *)a2[6];
  a1[6] = v5;
  if (v5)
    CFRetain(v5);
  result = (CFTypeRef)a2[7];
  a1[7] = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_ea8_40c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE48c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE56c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)a1[7];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[6];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[5];
  if (v4)
    CFRelease(v4);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,abm::AccessoryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,abm::AccessoryInfo>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,abm::AccessoryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,abm::AccessoryInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, __int128 **a3)
{
  _BYTE *v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  std::string *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  void *v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  size_t v42;
  size_t v43;
  size_t v44;
  _QWORD *i;
  size_t v46;
  uint64_t v47;
  unint64_t v48;
  uint8x8_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  size_t v53;
  uint64_t v54;
  void *v55;
  unint64_t v56;
  _QWORD v58[2];
  unint64_t v59;

  v4 = (_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v7 = v6;
  }
  v8 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v58, (uint64_t *)a2, v7);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v12 = v8;
      if (v8 >= v10)
        v12 = v8 % v10;
    }
    else
    {
      v12 = (v10 - 1) & v8;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v12);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v4[23];
        if (v15 >= 0)
          v16 = v4[23];
        else
          v16 = *((_QWORD *)v4 + 1);
        if (v15 < 0)
          v4 = *(_BYTE **)v4;
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v9)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v4, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v4[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v10 - 1)) != v12)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v9)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v4, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v4[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v10)
              v17 %= v10;
            if (v17 != v12)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    v12 = 0xAAAAAAAAAAAAAAAALL;
  }
LABEL_51:
  v25 = (_QWORD *)(a1 + 16);
  v59 = 0xAAAAAAAAAAAAAA00;
  v26 = (char *)operator new(0x38uLL);
  v58[0] = v26;
  v58[1] = a1 + 16;
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = v9;
  v27 = (std::string *)(v26 + 16);
  v28 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    *((_QWORD *)v26 + 4) = *((_QWORD *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  *((_WORD *)v26 + 20) = -1;
  *(_QWORD *)(v26 + 42) = 0;
  *((_WORD *)v26 + 25) = 0;
  LOBYTE(v59) = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v10 || (float)(v31 * (float)v10) < v30)
  {
    v34 = 1;
    if (v10 >= 3)
      v34 = (v10 & (v10 - 1)) != 0;
    v35 = v34 | (2 * v10);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if (prime > v10)
    {
LABEL_68:
      if (prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v38 = operator new(8 * prime);
      v39 = *(void **)a1;
      *(_QWORD *)a1 = v38;
      if (v39)
        operator delete(v39);
      v40 = 0;
      *(_QWORD *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v40++) = 0;
      while (prime != v40);
      v41 = (_QWORD *)*v25;
      if (!*v25)
        goto LABEL_100;
      v42 = v41[1];
      v43 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v44 = v42 & v43;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v44) = v25;
        for (i = (_QWORD *)*v41; *v41; i = (_QWORD *)*v41)
        {
          v46 = i[1] & v43;
          if (v46 == v44)
          {
            v41 = i;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v46))
          {
            *v41 = *i;
            v47 = 8 * v46;
            *i = **(_QWORD **)(*(_QWORD *)a1 + v47);
            **(_QWORD **)(*(_QWORD *)a1 + v47) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v46) = v41;
            v41 = i;
            v44 = v46;
          }
        }
        goto LABEL_100;
      }
      if (v42 >= prime)
        v42 %= prime;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = v25;
      v51 = (_QWORD *)*v41;
      if (!*v41)
      {
LABEL_100:
        v10 = prime;
        v54 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_101;
        goto LABEL_116;
      }
      while (1)
      {
        v53 = v51[1];
        if (v53 >= prime)
          v53 %= prime;
        if (v53 == v42)
          goto LABEL_94;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v53))
        {
          *v41 = *v51;
          v52 = 8 * v53;
          *v51 = **(_QWORD **)(*(_QWORD *)a1 + v52);
          **(_QWORD **)(*(_QWORD *)a1 + v52) = v51;
          v51 = v41;
LABEL_94:
          v41 = v51;
          v51 = (_QWORD *)*v51;
          if (!v51)
            goto LABEL_100;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v53) = v41;
          v41 = v51;
          v51 = (_QWORD *)*v51;
          v42 = v53;
          if (!v51)
            goto LABEL_100;
        }
      }
    }
    if (prime < v10)
    {
      v48 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v49 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v49.i16[0] = vaddlv_u8(v49), v49.u32[0] > 1uLL))
      {
        v48 = std::__next_prime(v48);
      }
      else
      {
        v50 = 1 << -(char)__clz(v48 - 1);
        if (v48 >= 2)
          v48 = v50;
      }
      if (prime <= v48)
        prime = v48;
      if (prime < v10)
      {
        if (!prime)
        {
          v55 = *(void **)a1;
          *(_QWORD *)a1 = 0;
          if (v55)
            operator delete(v55);
          v10 = 0;
          *(_QWORD *)(a1 + 8) = 0;
          v54 = -1;
          goto LABEL_116;
        }
        goto LABEL_68;
      }
      v10 = *(_QWORD *)(a1 + 8);
    }
    v54 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
LABEL_101:
      if (v9 >= v10)
      {
        v12 = v9 % v10;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        v33 = (_QWORD *)v58[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v12 = v9;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        v33 = (_QWORD *)v58[0];
        if (v32)
          goto LABEL_57;
      }
LABEL_117:
      *v33 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v58[0];
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v25;
      if (*(_QWORD *)v58[0])
      {
        v56 = *(_QWORD *)(*(_QWORD *)v58[0] + 8);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v56 >= v10)
            v56 %= v10;
        }
        else
        {
          v56 &= v10 - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v56) = v58[0];
      }
      goto LABEL_123;
    }
LABEL_116:
    v12 = v54 & v9;
    v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v54 & v9));
    v33 = (_QWORD *)v58[0];
    if (v32)
      goto LABEL_57;
    goto LABEL_117;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
  v33 = (_QWORD *)v58[0];
  if (!v32)
    goto LABEL_117;
LABEL_57:
  *v33 = *v32;
  *v32 = v58[0];
LABEL_123:
  v14 = (uint64_t *)v58[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1BF4F14B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,abm::AccessoryInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,abm::AccessoryInfo>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1BF4F14C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,abm::AccessoryInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,abm::AccessoryInfo>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,abm::AccessoryInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,abm::AccessoryInfo>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

void ___ZZZN23CoreAccessoriesDelegate4initEvEUb_ENK3__1clEN3ctu2cf11CFSharedRefIK10__CFStringEE_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  _QWORD *v5;
  uint64_t *v6;
  __int16 v7;
  uint64_t *v8;
  uint64_t *v9;
  int8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  const void *v13;
  __int16 v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  char *v26;
  CFTypeRef cf;
  void *__p;
  __int128 v29;
  void *v30[2];
  uint64_t v31;
  void *v32[2];
  char v33;
  CFTypeRef v34;
  uint8_t buf[16];
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v34 = 0;
  v1 = *(_QWORD **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
  if (!v2)
    v3 = 0;
  if (v3)
  {
    v4 = v1[5];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v2;
      _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I Accessory detached:\n    UUID:          %@\n", buf, 0xCu);
    }
    memset(buf, 0, sizeof(buf));
    v36 = 0;
    ctu::cf::assign();
    *(_OWORD *)v30 = *(_OWORD *)buf;
    v31 = v36;
    v5 = v1 + 13;
    if (std::__hash_table<std::__hash_value_type<std::string,abm::AccessoryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,abm::AccessoryInfo>>>::find<std::string>(v1 + 13, (uint64_t)v30))
    {
      *(_QWORD *)buf = v30;
      v6 = std::__hash_table<std::__hash_value_type<std::string,abm::AccessoryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,abm::AccessoryInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v1 + 13), (uint64_t)v30, (__int128 **)buf);
      v7 = *((_WORD *)v6 + 20);
      v23 = *(uint64_t *)((char *)v6 + 44);
      v8 = std::__hash_table<std::__hash_value_type<std::string,abm::AccessoryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,abm::AccessoryInfo>>>::find<std::string>(v1 + 13, (uint64_t)v30);
      if (v8)
      {
        v9 = v8;
        v10 = (int8x8_t)v1[14];
        v11 = v8[1];
        v12 = (uint8x8_t)vcnt_s8(v10);
        v12.i16[0] = vaddlv_u8(v12);
        if (v12.u32[0] > 1uLL)
        {
          if (v11 >= *(_QWORD *)&v10)
            v11 %= *(_QWORD *)&v10;
        }
        else
        {
          v11 &= *(_QWORD *)&v10 - 1;
        }
        v15 = *(uint64_t **)(*v5 + 8 * v11);
        do
        {
          v16 = v15;
          v15 = (uint64_t *)*v15;
        }
        while (v15 != v8);
        if (v16 == v1 + 15)
          goto LABEL_33;
        v17 = v16[1];
        if (v12.u32[0] > 1uLL)
        {
          if (v17 >= *(_QWORD *)&v10)
            v17 %= *(_QWORD *)&v10;
        }
        else
        {
          v17 &= *(_QWORD *)&v10 - 1;
        }
        if (v17 != v11)
        {
LABEL_33:
          if (!*v8)
            goto LABEL_34;
          v18 = *(_QWORD *)(*v8 + 8);
          if (v12.u32[0] > 1uLL)
          {
            if (v18 >= *(_QWORD *)&v10)
              v18 %= *(_QWORD *)&v10;
          }
          else
          {
            v18 &= *(_QWORD *)&v10 - 1;
          }
          if (v18 != v11)
LABEL_34:
            *(_QWORD *)(*v5 + 8 * v11) = 0;
        }
        v19 = *v8;
        if (*v8)
        {
          v20 = *(_QWORD *)(v19 + 8);
          if (v12.u32[0] > 1uLL)
          {
            if (v20 >= *(_QWORD *)&v10)
              v20 %= *(_QWORD *)&v10;
          }
          else
          {
            v20 &= *(_QWORD *)&v10 - 1;
          }
          if (v20 != v11)
          {
            *(_QWORD *)(*v5 + 8 * v20) = v16;
            v19 = *v8;
          }
        }
        *v16 = v19;
        *v8 = 0;
        --v1[16];
        if (*((char *)v8 + 39) < 0)
          operator delete((void *)v8[2]);
        operator delete(v9);
      }
      v13 = 0;
      v14 = 1;
      if ((SHIBYTE(v31) & 0x80000000) == 0)
        goto LABEL_46;
    }
    else
    {
      __p = operator new(0x40uLL);
      v29 = xmmword_1BF547AF0;
      strcpy((char *)__p, "Invalid UUID, could not find in cached accessory dictionary");
      (*(void (**)(uint8_t *__return_ptr, _QWORD *, void **, uint64_t))(*v1 + 48))(buf, v1, &__p, 5);
      v13 = *(const void **)buf;
      v34 = *(CFTypeRef *)buf;
      *(_QWORD *)buf = 0;
      if (SHIBYTE(v29) < 0)
        operator delete(__p);
      v14 = 0;
      v23 = 0;
      v7 = -1;
      if ((SHIBYTE(v31) & 0x80000000) == 0)
      {
LABEL_46:
        if (!v1[9])
          goto LABEL_54;
        goto LABEL_47;
      }
    }
    operator delete(v30[0]);
    if (!v1[9])
      goto LABEL_54;
    goto LABEL_47;
  }
  v33 = 12;
  strcpy((char *)v32, "Invalid UUID");
  (*(void (**)(uint8_t *__return_ptr, _QWORD *, void **, uint64_t))(*v1 + 48))(buf, v1, v32, 5);
  v13 = *(const void **)buf;
  v34 = *(CFTypeRef *)buf;
  *(_QWORD *)buf = 0;
  if (v33 < 0)
    operator delete(v32[0]);
  v14 = 0;
  v23 = 0;
  v7 = -1;
  if (v1[9])
  {
LABEL_47:
    cf = v13;
    if (v13)
      CFRetain(v13);
    v21 = (char *)operator new(0xCuLL);
    v25 = v21 + 12;
    v26 = v21 + 12;
    *(_WORD *)v21 = v7;
    *((_WORD *)v21 + 1) = v14;
    *(_QWORD *)(v21 + 4) = v23;
    v24 = v21;
    v22 = v1[9];
    if (!v22)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, CFTypeRef *, void **))(*(_QWORD *)v22 + 48))(v22, &cf, &v24);
    if (v24)
    {
      v25 = v24;
      operator delete(v24);
    }
    if (cf)
      CFRelease(cf);
  }
LABEL_54:
  if (v34)
    CFRelease(v34);
}

void sub_1BF4F195C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)(v27 - 72));
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_ea8_40c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_ea8_40c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    CFRelease(v1);
}

void std::__shared_ptr_pointer<CoreAccessoriesDelegate *,std::shared_ptr<CoreAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<CoreAccessoriesDelegate>(CoreAccessoriesDelegate*)::{lambda(CoreAccessoriesDelegate *)#1},std::allocator<CoreAccessoriesDelegate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<CoreAccessoriesDelegate *,std::shared_ptr<CoreAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<CoreAccessoriesDelegate>(CoreAccessoriesDelegate*)::{lambda(CoreAccessoriesDelegate *)#1},std::allocator<CoreAccessoriesDelegate>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<CoreAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<CoreAccessoriesDelegate>(CoreAccessoriesDelegate*)::{lambda(CoreAccessoriesDelegate*)#1}::operator() const(CoreAccessoriesDelegate*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<CoreAccessoriesDelegate *,std::shared_ptr<CoreAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<CoreAccessoriesDelegate>(CoreAccessoriesDelegate*)::{lambda(CoreAccessoriesDelegate *)#1},std::allocator<CoreAccessoriesDelegate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI23CoreAccessoriesDelegateE"
                     "ENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI23CoreAccessori"
                                "esDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI23CoreAccessoriesDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI23CoreAccessoriesDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<CoreAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<CoreAccessoriesDelegate>(CoreAccessoriesDelegate*)::{lambda(CoreAccessoriesDelegate*)#1}::operator() const(CoreAccessoriesDelegate*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_emplace<AccessoryDetectionManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E790BAD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AccessoryDetectionManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E790BAD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<AccessoryDetectionManager>::__on_zero_shared(uint64_t a1)
{

}

const char *HealthEventDB::getName(HealthEventDB *this)
{
  return "HealthEventDB";
}

uint64_t HealthEventDB::addHealthEvent(HealthEventDB *this, const HealthEvent *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v11;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  void **v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    HealthEvent::asString(a2, __p);
    v11 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v15 = v11;
    _os_log_debug_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEBUG, "#D Adding health event: %s", buf, 0xCu);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  v6 = *((_QWORD *)this + 10);
  v5 = *((_QWORD *)this + 11);
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3) == *((_QWORD *)this + 14))
  {
    if (v5 != v6)
    {
      *(_OWORD *)(*((_QWORD *)this + 13) + 8) = *(_OWORD *)((char *)a2 + 8);
      v7 = *((_QWORD *)this + 13) + 24;
      *((_QWORD *)this + 13) = v7;
      if (v7 == *((_QWORD *)this + 11))
      {
        v7 = *((_QWORD *)this + 10);
        *((_QWORD *)this + 13) = v7;
      }
      *((_QWORD *)this + 12) = v7;
    }
  }
  else
  {
    v8 = *((_QWORD *)this + 13);
    *(_QWORD *)v8 = &unk_1E7905D90;
    *(_OWORD *)(v8 + 8) = *(_OWORD *)((char *)a2 + 8);
    v9 = *((_QWORD *)this + 13) + 24;
    *((_QWORD *)this + 13) = v9;
    if (v9 == *((_QWORD *)this + 11))
      *((_QWORD *)this + 13) = *((_QWORD *)this + 10);
    ++*((_QWORD *)this + 14);
  }
  HealthEventDB::commitToDisk(this);
  return 1;
}

void HealthEventDB::commitToDisk(HealthEventDB *this)
{
  const __CFAllocator *v2;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v4;
  CFMutableArrayRef v5;
  __CFArray *v6;
  CFMutableArrayRef v7;
  const __CFAllocator *v8;
  __CFArray *v9;
  uint64_t v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  const __CFAllocator *v16;
  os_unfair_lock_s *v17;
  _QWORD *v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  CFTypeRef v31;
  void *__p[2];
  char v33;
  CFTypeRef cf;
  CFTypeRef v35;
  CFTypeRef v36;
  __int128 valuePtr;
  os_unfair_lock_s *v38;
  CFTypeRef v39;

  v35 = 0;
  v36 = 0;
  cf = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = Mutable;
  if (Mutable)
    v36 = Mutable;
  v5 = CFArrayCreateMutable(v2, 0, MEMORY[0x1E0C9B378]);
  v6 = v5;
  if (v5)
    v35 = v5;
  v7 = CFArrayCreateMutable(v2, 0, MEMORY[0x1E0C9B378]);
  v9 = v7;
  if (v7)
    cf = v7;
  if (*((_QWORD *)this + 14))
  {
    v10 = *((_QWORD *)this + 12);
    if (v10)
    {
      while (1)
      {
        LOBYTE(__p[0]) = *(_BYTE *)(v10 + 8);
        *(_QWORD *)&valuePtr = *(_QWORD *)(v10 + 16);
        v11 = CFNumberCreate(v2, kCFNumberSInt8Type, __p);
        v12 = CFNumberCreate(v2, kCFNumberSInt64Type, &valuePtr);
        v13 = v12;
        if (v11
           ? ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get
           : 0)
        {
          if (v12
             ? ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get
             : 0)
          {
            break;
          }
        }
        if (v12)
          goto LABEL_22;
LABEL_23:
        if (v11)
          CFRelease(v11);
        v10 += 24;
        if (v10 == *((_QWORD *)this + 11))
          v10 = *((_QWORD *)this + 10);
        if (!v10 || v10 == *((_QWORD *)this + 13))
          goto LABEL_29;
      }
      if (v11)
      {
        CFRetain(v11);
        CFArrayAppendValue(v6, v11);
        CFRelease(v11);
      }
      if (!v13)
        goto LABEL_23;
      CFRetain(v13);
      CFArrayAppendValue(v9, v13);
      CFRelease(v13);
LABEL_22:
      CFRelease(v13);
      goto LABEL_23;
    }
  }
LABEL_29:
  ctu::cf::insert<char const*,__CFArray *>(v4, (const __CFString **)"HealthEventTypes", v6, (uint64_t)v2, v8);
  ctu::cf::insert<char const*,__CFArray *>((__CFDictionary *)v36, (const __CFString **)"HealthEventTimes", cf, (uint64_t)v2, v16);
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v17 = (os_unfair_lock_s *)off_1ED70FDE8;
  if (!off_1ED70FDE8)
  {
    v18 = operator new(0x30uLL);
    MEMORY[0x1C3B893B4](v18, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x1E0C9B260]);
    v18[3] = 0;
    v18[4] = 0;
    *((_DWORD *)v18 + 10) = 0;
    std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(&valuePtr, (uint64_t)v18);
    v19 = valuePtr;
    valuePtr = 0uLL;
    v20 = (std::__shared_weak_count *)*(&off_1ED70FDE8 + 1);
    off_1ED70FDE8 = v19;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (std::__shared_weak_count *)*((_QWORD *)&valuePtr + 1);
    if (*((_QWORD *)&valuePtr + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&valuePtr + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v17 = (os_unfair_lock_s *)off_1ED70FDE8;
  }
  v26 = (std::__shared_weak_count *)*(&off_1ED70FDE8 + 1);
  if (*(&off_1ED70FDE8 + 1))
  {
    v27 = (unint64_t *)(*(&off_1ED70FDE8 + 1) + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v33 = 13;
  strcpy((char *)__p, "HealthEventDB");
  v38 = v17;
  v39 = v36;
  *(_QWORD *)&valuePtr = __p;
  *((_QWORD *)&valuePtr + 1) = &v39;
  ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::setPreference<__CFDictionary *>(std::string const&,__CFDictionary *)::{lambda(void)#1}>(v17 + 6, (uint64_t *)&valuePtr);
  if (v33 < 0)
    operator delete(__p[0]);
  if (!v26)
    goto LABEL_50;
  v29 = (unint64_t *)&v26->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (v30)
  {
LABEL_50:
    v31 = cf;
    if (!cf)
      goto LABEL_52;
    goto LABEL_51;
  }
  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
  std::__shared_weak_count::__release_weak(v26);
  v31 = cf;
  if (cf)
LABEL_51:
    CFRelease(v31);
LABEL_52:
  if (v35)
    CFRelease(v35);
  if (v36)
    CFRelease(v36);
}

void sub_1BF4F2064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12, const void *a13, const void *a14)
{
  void *v14;

  operator delete(v14);
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef(&a12);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef(&a13);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a14);
  _Unwind_Resume(a1);
}

uint64_t HealthEventDB::addHealthEvent(HealthEventDB *a1, char a2)
{
  _BYTE v5[8];
  _QWORD *v6;
  std::string __p;
  void *v8;
  unint64_t v9;
  uint64_t *v10;
  std::string v11;

  v9 = 0xAAAAAAAAAAAAAAAALL;
  Timestamp::Timestamp((Timestamp *)v5);
  Timestamp::asString((uint64_t)v5, 0, 9, &__p);
  v8 = &unk_1E7905D90;
  LOBYTE(v9) = a2;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v11, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v11 = __p;
  v10 = Timestamp::convert((uint64_t)&v11);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v11.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_8:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_6;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_8;
LABEL_6:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v5, v6);
  HealthEventDB::addHealthEvent(a1, (const HealthEvent *)&v8);
  return 1;
}

void sub_1BF4F221C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if ((a18 & 0x80000000) == 0)
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a10, a11);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_1BF4F2280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t HealthEventDB::getHealthEvents(HealthEventDB *this)
{
  return (uint64_t)this + 80;
}

void HealthEventDB::HealthEventDB(HealthEventDB *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  _BYTE v10[16];
  _QWORD block[5];

  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v10, "com.apple.telephony.abm", "HealthEventDB");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_2;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v3 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v9 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v3 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v9 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_6;
  }
  v4 = (unint64_t *)(v3 + 8);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
LABEL_6:
  ctu::Loggable<HealthEventDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(this, (uint64_t)v10, &v9);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  *(_QWORD *)this = off_1E790BB20;
  *((_DWORD *)this + 18) = 128;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 14) = 0;
  HealthEventDB::initFromDisk(this);
}

void sub_1BF4F2434(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  boost::circular_buffer<HealthEvent,std::allocator<HealthEvent>>::~circular_buffer(v3);
  *v1 = off_1E790BBC8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  _Unwind_Resume(a1);
}

void sub_1BF4F2460(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  _Unwind_Resume(a1);
}

_QWORD *ctu::Loggable<HealthEventDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  _BYTE v10[16];

  *a1 = off_1E790BBC8;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  a1[1] = &unk_1E78FB900;
  a1[7] = *a3;
  v5 = a3[1];
  a1[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v9);
  return a1;
}

void sub_1BF4F2528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

void HealthEventDB::initFromDisk(HealthEventDB *this)
{
  uint64_t v2;
  char *v3;
  char *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);
  uint64_t v8;
  void (***v9)(_QWORD);
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  CFTypeRef v24;
  const __CFArray *v25;
  const __CFArray *v26;
  uint64_t (*v27)(uint64_t);
  unsigned int Count;
  unsigned int v29;
  uint64_t v30;
  CFIndex i;
  uint64_t v32;
  uint64_t v33;
  signed __int8 *ValueAtIndex;
  signed __int8 *v35;
  CFTypeID v36;
  const __CFNumber *v37;
  uint64_t *v38;
  uint64_t *v39;
  CFTypeID v40;
  const __CFNumber *v41;
  char v42;
  __CFString *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  const __CFArray *v49;
  const __CFArray *v50;
  CFTypeRef v51;
  void *__p[2];
  char v53;
  CFTypeRef cf;
  __CFString *v55;

  v2 = *((unsigned int *)this + 18);
  if ((_DWORD)v2)
    v3 = (char *)operator new(24 * v2);
  else
    v3 = 0;
  v4 = &v3[24 * v2];
  v5 = (void (***)(_QWORD))*((_QWORD *)this + 10);
  v6 = (void (***)(_QWORD))*((_QWORD *)this + 11);
  *((_QWORD *)this + 10) = v3;
  *((_QWORD *)this + 11) = v4;
  v7 = (void (***)(_QWORD))*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v3;
  *((_QWORD *)this + 13) = v3;
  v8 = *((_QWORD *)this + 14);
  for (*((_QWORD *)this + 14) = 0; v8; --v8)
  {
    v9 = v7 + 3;
    (**v7)(v7);
    if (v9 == v6)
      v7 = v5;
    else
      v7 = v9;
  }
  if (v5)
    operator delete(v5);
  cf = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v10 = off_1ED70FDE8;
  if (!off_1ED70FDE8)
  {
    v11 = operator new(0x30uLL);
    MEMORY[0x1C3B893B4](v11, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x1E0C9B260]);
    v11[3] = 0;
    v11[4] = 0;
    *((_DWORD *)v11 + 10) = 0;
    std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(__p, (uint64_t)v11);
    v12 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v13 = (std::__shared_weak_count *)*(&off_1ED70FDE8 + 1);
    off_1ED70FDE8 = v12;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v17 = (unint64_t *)((char *)__p[1] + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v10 = off_1ED70FDE8;
  }
  v19 = (std::__shared_weak_count *)*(&off_1ED70FDE8 + 1);
  if (*(&off_1ED70FDE8 + 1))
  {
    v20 = (unint64_t *)(*(&off_1ED70FDE8 + 1) + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v53 = 13;
  strcpy((char *)__p, "HealthEventDB");
  os_unfair_lock_lock((os_unfair_lock_t)(v10 + 40));
  Preferences::getPreference<__CFDictionary const*>((uint64_t (***)(_QWORD, uint64_t))v10, (const char *)__p, &cf);
  os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 40));
  if (v53 < 0)
    operator delete(__p[0]);
  if (!v19)
    goto LABEL_32;
  v22 = (unint64_t *)&v19->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
  {
LABEL_32:
    v24 = cf;
    v51 = cf;
    if (!cf)
      goto LABEL_34;
    goto LABEL_33;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  v24 = cf;
  v51 = cf;
  if (cf)
LABEL_33:
    CFRetain(v24);
LABEL_34:
  __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)__p, (const __CFDictionary *)v24);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v55, "HealthEventTypes");
  v25 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)__p, v55);
  MEMORY[0x1C3B8936C](&v55);
  v50 = v25;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v55, "HealthEventTimes");
  v26 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)__p, v55);
  MEMORY[0x1C3B8936C](&v55);
  v49 = v26;
  v27 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  if (!v25)
    v27 = 0;
  if (v27)
  {
    Count = CFArrayGetCount(v25);
    v29 = CFArrayGetCount(v26);
    v30 = v29 >= Count ? Count : v29;
    if ((_DWORD)v30)
    {
      for (i = 0; i != v30; ++i)
      {
        v48 = 0;
        v55 = 0;
        ValueAtIndex = (signed __int8 *)CFArrayGetValueAtIndex(v25, i);
        v35 = ValueAtIndex;
        if (ValueAtIndex)
        {
          v36 = CFGetTypeID(ValueAtIndex);
          if (v36 == CFNumberGetTypeID() && (ctu::cf::assign((ctu::cf *)&v48, v35, v37) & 1) != 0)
          {
            v38 = (uint64_t *)CFArrayGetValueAtIndex(v26, i);
            v39 = v38;
            if (v38)
            {
              v40 = CFGetTypeID(v38);
              if (v40 == CFNumberGetTypeID())
              {
                if (ctu::cf::assign((ctu::cf *)&v55, v39, v41))
                {
                  v42 = v48;
                  v43 = v55;
                  v45 = *((_QWORD *)this + 10);
                  v44 = *((_QWORD *)this + 11);
                  if (0xAAAAAAAAAAAAAAABLL * ((v44 - v45) >> 3) == *((_QWORD *)this + 14))
                  {
                    if (v44 != v45)
                    {
                      v46 = *((_QWORD *)this + 13);
                      *(_BYTE *)(v46 + 8) = v48;
                      *(_QWORD *)(v46 + 16) = v43;
                      v47 = *((_QWORD *)this + 13) + 24;
                      *((_QWORD *)this + 13) = v47;
                      if (v47 == *((_QWORD *)this + 11))
                      {
                        v47 = *((_QWORD *)this + 10);
                        *((_QWORD *)this + 13) = v47;
                      }
                      *((_QWORD *)this + 12) = v47;
                    }
                  }
                  else
                  {
                    v32 = *((_QWORD *)this + 13);
                    *(_QWORD *)v32 = &unk_1E7905D90;
                    *(_BYTE *)(v32 + 8) = v42;
                    *(_QWORD *)(v32 + 16) = v43;
                    v33 = *((_QWORD *)this + 13) + 24;
                    *((_QWORD *)this + 13) = v33;
                    if (v33 == *((_QWORD *)this + 11))
                      *((_QWORD *)this + 13) = *((_QWORD *)this + 10);
                    ++*((_QWORD *)this + 14);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v26)
    CFRelease(v26);
  if (v25)
    CFRelease(v25);
  MEMORY[0x1C3B893A8](__p);
  if (v24)
    CFRelease(v24);
}

void sub_1BF4F29D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  operator delete(v22);
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  _Unwind_Resume(a1);
}

void HealthEventDB::~HealthEventDB(HealthEventDB *this)
{
  unint64_t v2;
  void (***v3)(_QWORD);
  void (***v4)(_QWORD);
  void *v5;

  *(_QWORD *)this = off_1E790BB20;
  if (*((_QWORD *)this + 14))
  {
    v2 = 0;
    v3 = (void (***)(_QWORD))*((_QWORD *)this + 12);
    do
    {
      (**v3)(v3);
      v4 = (void (***)(_QWORD))*((_QWORD *)this + 11);
      v3 = (void (***)(_QWORD))(*((_QWORD *)this + 12) + 24);
      *((_QWORD *)this + 12) = v3;
      if (v3 == v4)
      {
        v3 = (void (***)(_QWORD))*((_QWORD *)this + 10);
        *((_QWORD *)this + 12) = v3;
      }
      ++v2;
    }
    while (v2 < *((_QWORD *)this + 14));
  }
  v5 = (void *)*((_QWORD *)this + 10);
  if (v5)
    operator delete(v5);
  *(_QWORD *)this = off_1E790BBC8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
}

{
  unint64_t v2;
  void (***v3)(_QWORD);
  void (***v4)(_QWORD);
  void *v5;

  *(_QWORD *)this = off_1E790BB20;
  if (*((_QWORD *)this + 14))
  {
    v2 = 0;
    v3 = (void (***)(_QWORD))*((_QWORD *)this + 12);
    do
    {
      (**v3)(v3);
      v4 = (void (***)(_QWORD))*((_QWORD *)this + 11);
      v3 = (void (***)(_QWORD))(*((_QWORD *)this + 12) + 24);
      *((_QWORD *)this + 12) = v3;
      if (v3 == v4)
      {
        v3 = (void (***)(_QWORD))*((_QWORD *)this + 10);
        *((_QWORD *)this + 12) = v3;
      }
      ++v2;
    }
    while (v2 < *((_QWORD *)this + 14));
  }
  v5 = (void *)*((_QWORD *)this + 10);
  if (v5)
    operator delete(v5);
  *(_QWORD *)this = off_1E790BBC8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(this);
}

uint64_t ctu::Loggable<HealthEventDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<HealthEventDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<HealthEventDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<HealthEventDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E790BBC8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<HealthEventDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E790BBC8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::cf::insert<char const*,__CFArray *>(__CFDictionary *a1, const __CFString **a2, const void *a3, uint64_t a4, const __CFAllocator *a5)
{
  CFTypeRef v7;
  CFTypeRef cf;

  cf = 0;
  ctu::cf::convert_copy((ctu::cf *)&cf, a2, (const char *)0x8000100, a4, a5);
  v7 = cf;
  cf = a3;
  if (a3)
  {
    CFRetain(a3);
    if (v7)
      CFDictionaryAddValue(a1, v7, a3);
    CFRelease(a3);
  }
  if (v7)
    CFRelease(v7);
}

void sub_1BF4F2DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a9);
  _Unwind_Resume(a1);
}

void sub_1BF4F2DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_18()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1BF335000);
  }
  return result;
}

void AppleBasebandManagerInitServer(const char *a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *size;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  size_t v28;
  std::string::size_type v29;
  std::string *p_dst;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  std::string *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::string __dst;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51[3];
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  std::string v57;

  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  v55 = *a2;
  v56 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (std::__shared_weak_count *)a2[3];
  v53 = a2[2];
  v54 = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (std::__shared_weak_count *)a2[5];
  v51[2] = a2[4];
  v52 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (v4)
  {
    v51[0] = v4;
    v51[1] = (uint64_t)v5;
    if (v5)
    {
      v14 = (unint64_t *)&v5->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    abm::AWDHelperSetConnection(v51);
    if (v5)
    {
      v16 = (unint64_t *)&v5->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  v49 = 0xAAAAAAAAAAAAAAAALL;
  v50 = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v18 = (uint64_t *)off_1ED70FA00;
  if (!off_1ED70FA00)
  {
    ABMServer::create_default_global(&v57);
    v19 = *(_OWORD *)&v57.__r_.__value_.__l.__data_;
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = 0uLL;
    v20 = (std::__shared_weak_count *)*(&off_1ED70FA00 + 1);
    off_1ED70FA00 = v19;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    size = (std::__shared_weak_count *)v57.__r_.__value_.__l.__size_;
    if (v57.__r_.__value_.__l.__size_)
    {
      v24 = (unint64_t *)(v57.__r_.__value_.__l.__size_ + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v18 = (uint64_t *)off_1ED70FA00;
  }
  v49 = (unint64_t)v18;
  v50 = *(&off_1ED70FA00 + 1);
  if (*(&off_1ED70FA00 + 1))
  {
    v26 = (unint64_t *)(*(&off_1ED70FA00 + 1) + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  if (!v18)
    goto LABEL_47;
  v28 = strlen(a1);
  if (v28 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v29 = v28;
  if (v28 >= 0x17)
  {
    v33 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v33 = v28 | 7;
    v34 = v33 + 1;
    p_dst = (std::string *)operator new(v33 + 1);
    __dst.__r_.__value_.__l.__size_ = v29;
    __dst.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_43:
    memcpy(p_dst, a1, v29);
    p_dst->__r_.__value_.__s.__data_[v29] = 0;
    v31 = *v18;
    v32 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_39;
LABEL_44:
    std::string::__init_copy_ctor_external(&v57, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    goto LABEL_45;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v28;
  p_dst = &__dst;
  if (v28)
    goto LABEL_43;
  __dst.__r_.__value_.__s.__data_[0] = 0;
  v31 = *v18;
  v32 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_44;
LABEL_39:
  v57 = __dst;
LABEL_45:
  ABMServerInternal::init(v31, (uint64_t)&v57, (uint64_t)a2);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v57.__r_.__value_.__l.__data_);
    if ((v32 & 0x80000000) == 0)
      goto LABEL_47;
  }
  else if ((v32 & 0x80000000) == 0)
  {
    goto LABEL_47;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_47:
  abm::asString();
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &v57;
  else
    v35 = (std::string *)v57.__r_.__value_.__r.__words[0];
  syslog(5, "%s hosting ABM with profile: %s", a1, (const char *)v35);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  v36 = (std::__shared_weak_count *)v50;
  if (v50)
  {
    v37 = (unint64_t *)(v50 + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = v52;
  if (v52)
  {
    v40 = (unint64_t *)&v52->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v54;
  if (!v54)
    goto LABEL_66;
  v43 = (unint64_t *)&v54->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
    v45 = v56;
    if (!v56)
      return;
  }
  else
  {
LABEL_66:
    v45 = v56;
    if (!v56)
      return;
  }
  v46 = (unint64_t *)&v45->__shared_owners_;
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
}

void sub_1BF4F3210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  uint64_t v21;

  operator delete(__p);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v21 - 96);
  _Unwind_Resume(a1);
}

BOOL AppleBasebandManagerStartServer(NSObject *a1)
{
  ABMServerInternal **v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BOOL8 result;
  _BOOL8 v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;

  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v2 = (ABMServerInternal **)off_1ED70FA00;
  if (!off_1ED70FA00)
  {
    ABMServer::create_default_global(&v17);
    v3 = v17;
    v17 = 0uLL;
    v4 = (std::__shared_weak_count *)*(&off_1ED70FA00 + 1);
    off_1ED70FA00 = v3;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
    if (*((_QWORD *)&v17 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v2 = (ABMServerInternal **)off_1ED70FA00;
  }
  v10 = (std::__shared_weak_count *)*(&off_1ED70FA00 + 1);
  if (*(&off_1ED70FA00 + 1))
  {
    v11 = (unint64_t *)(*(&off_1ED70FA00 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  result = ABMServerInternal::start(*v2, a1);
  v14 = result;
  if (v10)
  {
    v15 = (unint64_t *)&v10->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v14;
    }
  }
  return result;
}

void sub_1BF4F3408(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  _Unwind_Resume(a1);
}

BOOL AppleBasebandManagerStopServer(NSObject *a1)
{
  ABMServerInternal **v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BOOL8 result;
  _BOOL8 v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;

  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v2 = (ABMServerInternal **)off_1ED70FA00;
  if (!off_1ED70FA00)
  {
    ABMServer::create_default_global(&v17);
    v3 = v17;
    v17 = 0uLL;
    v4 = (std::__shared_weak_count *)*(&off_1ED70FA00 + 1);
    off_1ED70FA00 = v3;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
    if (*((_QWORD *)&v17 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v2 = (ABMServerInternal **)off_1ED70FA00;
  }
  v10 = (std::__shared_weak_count *)*(&off_1ED70FA00 + 1);
  if (*(&off_1ED70FA00 + 1))
  {
    v11 = (unint64_t *)(*(&off_1ED70FA00 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  result = ABMServerInternal::stop(*v2, a1);
  v14 = result;
  if (v10)
  {
    v15 = (unint64_t *)&v10->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v14;
    }
  }
  return result;
}

void sub_1BF4F357C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  _Unwind_Resume(a1);
}

BOOL AppleBasebandManagerShutdownServer(NSObject *a1)
{
  ABMServerInternal **v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BOOL8 result;
  _BOOL8 v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;

  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v2 = (ABMServerInternal **)off_1ED70FA00;
  if (!off_1ED70FA00)
  {
    ABMServer::create_default_global(&v17);
    v3 = v17;
    v17 = 0uLL;
    v4 = (std::__shared_weak_count *)*(&off_1ED70FA00 + 1);
    off_1ED70FA00 = v3;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
    if (*((_QWORD *)&v17 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v2 = (ABMServerInternal **)off_1ED70FA00;
  }
  v10 = (std::__shared_weak_count *)*(&off_1ED70FA00 + 1);
  if (*(&off_1ED70FA00 + 1))
  {
    v11 = (unint64_t *)(*(&off_1ED70FA00 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  result = ABMServerInternal::shutdown(*v2, a1);
  v14 = result;
  if (v10)
  {
    v15 = (unint64_t *)&v10->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v14;
    }
  }
  return result;
}

void sub_1BF4F36F0(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  _Unwind_Resume(a1);
}

uint64_t AppleBasebandManagerGetProfile()
{
  return 3;
}

uint64_t __cxx_global_var_init_19()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1BF335000);
  }
  return result;
}

uint64_t TransportService::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned __int8 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *shared_owners;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  __int128 v56;
  uint8_t buf[8];
  uint64_t v58;
  void (*v59)(uint64_t);
  void *v60;
  __int128 *v61;
  uint64_t v62[2];
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;

  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  v58 = 0x40000000;
  v59 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v60 = &__block_descriptor_tmp_13_2;
  v61 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v11 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v56 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, buf);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v56 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_6;
  }
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
LABEL_6:
  v14 = *((_QWORD *)GetGlobalLogger((uint64_t *)&v56) + 4);
  if (!v11)
    goto LABEL_10;
  v15 = (unint64_t *)&v11->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
  {
LABEL_10:
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      goto LABEL_12;
    goto LABEL_11;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
LABEL_11:
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v14, OS_LOG_TYPE_DEFAULT, "#I IPC: Creating QMI transport service...", buf, 2u);
  }
LABEL_12:
  *a5 = 0xAAAAAAAAAAAAAAAALL;
  a5[1] = 0xAAAAAAAAAAAAAAAALL;
  v18 = *a1;
  v17 = a1[1];
  v19 = (std::__shared_weak_count *)operator new(0x1D0uLL);
  v20 = v19;
  v19->__shared_owners_ = 0;
  v21 = (unint64_t *)&v19->__shared_owners_;
  v19->__shared_weak_owners_ = 0;
  v19->__vftable = (std::__shared_weak_count_vtbl *)off_1E790C120;
  *(_QWORD *)buf = v18;
  v58 = v17;
  if (v17)
  {
    v22 = (unint64_t *)(v17 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = (std::__shared_weak_count *)a2[1];
  v65 = *a2;
  v66 = v24;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = (std::__shared_weak_count_vtbl *)&v19[1];
  v28 = *a3;
  v29 = (std::__shared_weak_count *)a3[1];
  v63 = v28;
  v64 = v29;
  if (v29)
  {
    p_shared_weak_owners = (unint64_t *)&v29->__shared_weak_owners_;
    do
      v31 = __ldxr(p_shared_weak_owners);
    while (__stxr(v31 + 1, p_shared_weak_owners));
  }
  v32 = *a4;
  v33 = (std::__shared_weak_count *)a4[1];
  v62[0] = v32;
  v62[1] = (uint64_t)v33;
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  QMITransportService::QMITransportService((uint64_t)&v19[1], buf, &v65, &v63, v62);
  if (v33)
  {
    v38 = (unint64_t *)&v33->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v64)
    std::__shared_weak_count::__release_weak(v64);
  v40 = v66;
  if (v66)
  {
    v41 = (unint64_t *)&v66->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = (std::__shared_weak_count *)v58;
  if (v58)
  {
    v44 = (unint64_t *)(v58 + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
      shared_owners = (std::__shared_weak_count *)v20[4].__shared_owners_;
      if (shared_owners)
        goto LABEL_41;
      do
LABEL_49:
        v50 = __ldxr(v21);
      while (__stxr(v50 + 1, v21));
      v51 = (unint64_t *)&v20->__shared_weak_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
      v20[4].__vftable = v27;
      v20[4].__shared_owners_ = (uint64_t)v20;
      goto LABEL_53;
    }
  }
  shared_owners = (std::__shared_weak_count *)v20[4].__shared_owners_;
  if (!shared_owners)
    goto LABEL_49;
LABEL_41:
  if (shared_owners->__shared_owners_ != -1)
    goto LABEL_56;
  do
    v47 = __ldxr(v21);
  while (__stxr(v47 + 1, v21));
  v48 = (unint64_t *)&v20->__shared_weak_owners_;
  do
    v49 = __ldxr(v48);
  while (__stxr(v49 + 1, v48));
  v20[4].__vftable = v27;
  v20[4].__shared_owners_ = (uint64_t)v20;
  std::__shared_weak_count::__release_weak(shared_owners);
  do
LABEL_53:
    v53 = __ldaxr(v21);
  while (__stlxr(v53 - 1, v21));
  if (!v53)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
LABEL_56:
  v54 = v20[5].__shared_owners_;
  *a5 = (char *)v20 + 128;
  a5[1] = v20;
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v54 + 96))(&v20[5].__shared_owners_, v36, v37);
}

void sub_1BF4F3B28(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1BF4F3B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  void *v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v5 - 80);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::__shared_weak_count::~__shared_weak_count(v3);
  operator delete(v7);
  _Unwind_Resume(a1);
}

void sub_1BF4F3B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t QMITransportService::QMITransportService(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  NSObject *initially_inactive;
  NSObject *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _BYTE v28[16];
  _BYTE v29[16];
  _BYTE v30[16];

  *(_QWORD *)a1 = off_1E790BC08;
  *(_QWORD *)(a1 + 104) = &unk_1E790BCB8;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v28, "com.apple.telephony.abm", "ipc.svc.qmi");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v11 = dispatch_queue_create_with_target_V2("ipc.svc.qmi", initially_inactive, 0);
  dispatch_set_qos_class_floor(v11, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v11);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v11;
  if (v11)
  {
    dispatch_retain(v11);
    *(_QWORD *)(a1 + 96) = 0;
    dispatch_release(v11);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_QWORD *)a1 = off_1E790C0E0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v30);
  *(_QWORD *)(a1 + 8) = &unk_1E78FB900;
  *(_QWORD *)(a1 + 56) = *a2;
  v12 = a2[1];
  *(_QWORD *)(a1 + 64) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v29);
  *(_QWORD *)a1 = off_1E790C170;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v28);
  v15 = *a5;
  v16 = (std::__shared_weak_count *)a5[1];
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 104) = &unk_1E790C060;
    *(_QWORD *)(a1 + 112) = v15;
    *(_QWORD *)(a1 + 120) = v16;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 104) = &unk_1E790C060;
    *(_QWORD *)(a1 + 112) = v15;
    *(_QWORD *)(a1 + 120) = 0;
  }
  *(_QWORD *)a1 = off_1E790BC08;
  *(_QWORD *)(a1 + 104) = &unk_1E790BCB8;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  QMux::QMux((QMux *)(a1 + 176));
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = a1 + 224;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = a1 + 248;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = *a3;
  v21 = a3[1];
  *(_QWORD *)(a1 + 296) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *(_QWORD *)(a1 + 304) = *a4;
  v24 = a4[1];
  *(_QWORD *)(a1 + 312) = v24;
  if (v24)
  {
    v25 = (unint64_t *)(v24 + 16);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *(_BYTE *)(a1 + 432) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  std::string::append((std::string *)(a1 + 408), 0x100uLL, 0);
  return a1;
}

void sub_1BF4F3E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object, uint64_t a13, QMux *a14, uint64_t a15, uint64_t a16, uint64_t a17, TransportService *a18)
{
  uint64_t v18;
  _QWORD **v19;
  void **v20;
  void **v21;
  _QWORD **v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  void **v26;
  void **v27;
  NSObject *v28;
  std::__shared_weak_count *v29;

  if (*(char *)(v18 + 431) < 0)
    operator delete(*v20);
  v28 = *(NSObject **)(v18 + 400);
  if (v28)
    dispatch_release(v28);
  dispatch::callback<void({block_pointer})(WakeReason)>::~callback(v25);
  std::unique_ptr<support::misc::Watchdog>::~unique_ptr[abi:ne180100](v21);
  std::unique_ptr<support::misc::Watchdog>::~unique_ptr[abi:ne180100](v24);
  std::deque<dispatch::group_session>::~deque[abi:ne180100](v23);
  v29 = *(std::__shared_weak_count **)(v18 + 312);
  if (v29)
    std::__shared_weak_count::__release_weak(v29);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](a13);
  std::vector<std::shared_ptr<qmi::ServerAccepter>>::~vector[abi:ne180100](v27);
  std::__tree<QMux>::destroy(*v22);
  std::__tree<QMux>::destroy(*v19);
  std::vector<QMux>::~vector[abi:ne180100](v26);
  QMux::~QMux(a14);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](a15);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](a16);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](a17);
  TransportService::~TransportService(a18);
  ctu::SharedLoggable<QMITransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable((_QWORD *)v18);
  _Unwind_Resume(a1);
}

void sub_1BF4F3F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  _QWORD *v21;
  uint64_t v22;

  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v22 - 96));
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a21);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v21);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a19);
  _Unwind_Resume(a1);
}

const char *QMITransportService::getName(QMITransportService *this)
{
  return "ipc.svc.qmi";
}

void **std::vector<std::shared_ptr<qmi::ServerAccepter>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **std::vector<QMux>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
        QMux::~QMux((QMux *)(v3 - 16));
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void TransportService::~TransportService(TransportService *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = &unk_1E790C060;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

_QWORD *ctu::SharedLoggable<QMITransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E790C0E0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E790C0E0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void QMITransportService::~QMITransportService(QMITransportService *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  const void *v5;
  void *v6;
  void *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  NSObject *v33;
  NSObject *v34;
  std::__shared_weak_count *v35;
  uint8_t v36[16];

  *(_QWORD *)this = off_1E790BC08;
  *((_QWORD *)this + 13) = &unk_1E790BCB8;
  QMITransportService::shutdown_sync(this);
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v36 = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v36, 2u);
    if ((*((char *)this + 431) & 0x80000000) == 0)
    {
LABEL_3:
      v3 = *((_QWORD *)this + 50);
      if (!v3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((*((char *)this + 431) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*((void **)this + 51));
  v3 = *((_QWORD *)this + 50);
  if (v3)
LABEL_4:
    dispatch_release(v3);
LABEL_5:
  v4 = *((_QWORD *)this + 49);
  if (v4)
    dispatch_release(v4);
  v5 = (const void *)*((_QWORD *)this + 48);
  if (v5)
    _Block_release(v5);
  v6 = (void *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v6)
  {
    TelephonyBasebandWatchdogStop();
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v7)
  {
    TelephonyBasebandWatchdogStop();
    operator delete(v7);
  }
  std::deque<dispatch::group_session>::~deque[abi:ne180100]((uint64_t)this + 320);
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 39);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *((_QWORD *)this + 33);
  if (v12)
  {
    v13 = *((_QWORD *)this + 34);
    v14 = (void *)*((_QWORD *)this + 33);
    if (v13 != v12)
    {
      do
      {
        v15 = *(std::__shared_weak_count **)(v13 - 8);
        if (v15)
        {
          v16 = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v13 -= 16;
      }
      while (v13 != v12);
      v14 = (void *)*((_QWORD *)this + 33);
    }
    *((_QWORD *)this + 34) = v12;
    operator delete(v14);
  }
  std::__tree<QMux>::destroy(*((_QWORD **)this + 31));
  std::__tree<QMux>::destroy(*((_QWORD **)this + 28));
  v18 = *((_QWORD *)this + 24);
  if (v18)
  {
    v19 = *((_QWORD *)this + 25);
    v20 = (void *)*((_QWORD *)this + 24);
    if (v19 != v18)
    {
      do
        QMux::~QMux((QMux *)(v19 - 16));
      while (v19 != v18);
      v20 = (void *)*((_QWORD *)this + 24);
    }
    *((_QWORD *)this + 25) = v18;
    operator delete(v20);
  }
  QMux::~QMux((QMITransportService *)((char *)this + 176));
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  *((_QWORD *)this + 13) = &unk_1E790C060;
  v30 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  *(_QWORD *)this = off_1E790C0E0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v33 = *((_QWORD *)this + 12);
  if (v33)
    dispatch_release(v33);
  v34 = *((_QWORD *)this + 11);
  if (v34)
    dispatch_release(v34);
  v35 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v35)
    std::__shared_weak_count::__release_weak(v35);
}

{
  void *v1;

  QMITransportService::~QMITransportService(this);
  operator delete(v1);
}

void QMITransportService::shutdown_sync(QMITransportService *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t i;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  _QWORD v20[2];

  QMITransportService::cancelWakeRequest_sync(this);
  v2 = (char *)*((_QWORD *)this + 27);
  v3 = (char *)this + 224;
  if (v2 != (char *)this + 224)
  {
    do
    {
      v14 = *((_QWORD *)v2 + 5);
      v20[0] = *((_QWORD *)v2 + 4);
      v20[1] = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      QMux::shutdown((QMux *)v20);
      QMux::~QMux((QMux *)v20);
      v17 = (char *)*((_QWORD *)v2 + 1);
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = *(char **)v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (char *)*((_QWORD *)v2 + 2);
          v19 = *(_QWORD *)v18 == (_QWORD)v2;
          v2 = v18;
        }
        while (!v19);
      }
      v2 = v18;
    }
    while (v18 != v3);
  }
  v4 = *((_QWORD *)this + 20);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
    *((_QWORD *)this + 20) = 0;
    *((_QWORD *)this + 21) = 0;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (*((_QWORD *)this + 18))
  {
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
    *((_QWORD *)this + 18) = 0;
    *((_QWORD *)this + 19) = 0;
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v12 = *((_QWORD *)this + 24);
  for (i = *((_QWORD *)this + 25); i != v12; QMux::~QMux((QMux *)(i - 16)))
    ;
  *((_QWORD *)this + 25) = v12;
  std::__tree<QMux>::destroy(*((_QWORD **)this + 28));
  v13 = (_QWORD *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 27) = v3;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  std::__tree<QMux>::destroy(v13);
  *((_QWORD *)this + 30) = (char *)this + 248;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
}

void sub_1BF4F45FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  QMux::~QMux((QMux *)&a9);
  _Unwind_Resume(a1);
}

const char *`non-virtual thunk to'QMITransportService::getName(QMITransportService *this)
{
  return "ipc.svc.qmi";
}

void QMITransportService::cancelWakeRequest_sync(QMITransportService *this)
{
  NSObject *v2;
  NSObject *v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  const void *v7;
  void *v8;
  NSObject *v9;
  xpc_object_t v10;
  xpc_object_t v11;
  const char *v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  const void *v18;
  void *v19;
  NSObject *v20;
  uint64_t block;
  uint64_t v22;
  void (*v23)(uint64_t);
  void *v24;
  void *aBlock;
  int v26;
  xpc_object_t object;

  v2 = *((_QWORD *)this + 50);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *((_QWORD *)this + 50);
    *((_QWORD *)this + 50) = 0;
    if (v3)
      dispatch_release(v3);
    if (*((_QWORD *)this + 48) && *((_QWORD *)this + 49))
    {
      if (*((char *)this + 431) < 0)
      {
        if (*((_QWORD *)this + 52))
          goto LABEL_8;
      }
      else if (*((_BYTE *)this + 431))
      {
LABEL_8:
        v4 = xpc_dictionary_create(0, 0, 0);
        if (v4 || (v4 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8A86C](v4) == MEMORY[0x1E0C812F8])
          {
            xpc_retain(v4);
            v5 = v4;
          }
          else
          {
            v5 = xpc_null_create();
          }
        }
        else
        {
          v5 = xpc_null_create();
          v4 = 0;
        }
        xpc_release(v4);
        v10 = xpc_string_create((const char *)*MEMORY[0x1E0CFB4B8]);
        if (!v10)
          v10 = xpc_null_create();
        xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0CFB2B8], v10);
        v11 = xpc_null_create();
        xpc_release(v10);
        xpc_release(v11);
        v12 = (char *)this + 408;
        if (*((char *)this + 431) < 0)
          v12 = *(const char **)v12;
        v13 = xpc_string_create(v12);
        if (!v13)
          v13 = xpc_null_create();
        xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0CFB458], v13);
        v14 = xpc_null_create();
        xpc_release(v13);
        xpc_release(v14);
        v15 = xpc_BOOL_create(*((_BYTE *)this + 432));
        if (!v15)
          v15 = xpc_null_create();
        xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0CFBDF0], v15);
        v16 = xpc_null_create();
        xpc_release(v15);
        xpc_release(v16);
        if (v5)
        {
          xpc_retain(v5);
          v17 = v5;
          v18 = (const void *)*((_QWORD *)this + 48);
          if (v18)
          {
LABEL_38:
            v19 = _Block_copy(v18);
            goto LABEL_41;
          }
        }
        else
        {
          v17 = xpc_null_create();
          v18 = (const void *)*((_QWORD *)this + 48);
          if (v18)
            goto LABEL_38;
        }
        v19 = 0;
LABEL_41:
        v20 = *((_QWORD *)this + 49);
        block = MEMORY[0x1E0C809B0];
        v22 = 1174405120;
        v23 = ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJS1_EEEvDpT__block_invoke;
        v24 = &__block_descriptor_tmp_108;
        if (v19)
        {
          aBlock = _Block_copy(v19);
          v26 = 3;
          object = v17;
          if (v17)
          {
LABEL_43:
            xpc_retain(v17);
LABEL_46:
            dispatch_async(v20, &block);
            xpc_release(object);
            object = 0;
            if (aBlock)
              _Block_release(aBlock);
            if (v19)
              _Block_release(v19);
            xpc_release(v17);
            xpc_release(v5);
            return;
          }
        }
        else
        {
          aBlock = 0;
          v26 = 3;
          object = v17;
          if (v17)
            goto LABEL_43;
        }
        object = xpc_null_create();
        goto LABEL_46;
      }
      v6 = xpc_null_create();
      v7 = (const void *)*((_QWORD *)this + 48);
      if (v7)
        v8 = _Block_copy(v7);
      else
        v8 = 0;
      v9 = *((_QWORD *)this + 49);
      block = MEMORY[0x1E0C809B0];
      v22 = 1174405120;
      v23 = ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJS1_EEEvDpT__block_invoke;
      v24 = &__block_descriptor_tmp_108;
      if (v8)
      {
        aBlock = _Block_copy(v8);
        v26 = 4;
        object = v6;
        if (v6)
        {
LABEL_19:
          xpc_retain(v6);
LABEL_22:
          dispatch_async(v9, &block);
          xpc_release(object);
          object = 0;
          if (aBlock)
            _Block_release(aBlock);
          if (v8)
            _Block_release(v8);
          xpc_release(v6);
          return;
        }
      }
      else
      {
        aBlock = 0;
        v26 = 4;
        object = v6;
        if (v6)
          goto LABEL_19;
      }
      object = xpc_null_create();
      goto LABEL_22;
    }
  }
}

void QMITransportService::shutdown(QMITransportService *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN19QMITransportService8shutdownEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_39;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19QMITransportServiceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_82_0;
  block[4] = (char *)this + 72;
  block[5] = &v4;
  v2 = (char *)this + 88;
  v1 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void ___ZN19QMITransportService8shutdownEv_block_invoke(uint64_t a1)
{
  QMITransportService::shutdown_sync(*(QMITransportService **)(a1 + 32));
}

void `non-virtual thunk to'QMITransportService::shutdown(QMITransportService *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN19QMITransportService8shutdownEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_39;
  v3[4] = (char *)this - 104;
  v4 = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19QMITransportServiceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_82_0;
  block[4] = (char *)this - 32;
  block[5] = &v4;
  v2 = (char *)this - 16;
  v1 = *((_QWORD *)this - 2);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void QMITransportService::init(QMITransportService *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN19QMITransportService4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_11_12;
  v1[4] = this;
  ctu::SharedSynchronizable<QMITransportService>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void ___ZN19QMITransportService4initEv_block_invoke(uint64_t a1)
{
  NSObject *v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  capabilities::ipc *v21;
  capabilities::pci *v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  __int128 v26;
  std::ios_base *v27;
  std::string::size_type v28;
  std::string *v29;
  uint64_t v30;
  const void **v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *size;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  std::string::size_type v43;
  std::string::size_type v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  std::string::size_type v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  std::string::size_type *v55;
  unint64_t *v56;
  unint64_t v57;
  char *v58;
  std::string::size_type v59;
  std::string::size_type v60;
  unint64_t *v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  QMux *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  QMux *v73;
  uint64_t *v74;
  NSObject *v75;
  Registry *v76;
  uint64_t ServerConnection;
  __int128 v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  __int128 v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  NSObject *v95;
  const char *v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t *v99;
  uint64_t **v100;
  uint64_t **v101;
  _BYTE *v102;
  size_t v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t v106;
  int v107;
  uint64_t *v108;
  size_t v109;
  size_t v110;
  int v111;
  char *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  int v138;
  BOOL v139;
  _QWORD *v140;
  _QWORD *v141;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v143;
  __CFDictionary *v144;
  const __CFAllocator *v145;
  const __CFAllocator *v146;
  const __CFAllocator *v147;
  const __CFAllocator *v148;
  const __CFAllocator *v149;
  const __CFAllocator *v150;
  const __CFAllocator *v151;
  const __CFAllocator *v152;
  const __CFAllocator *v153;
  const __CFAllocator *v154;
  const __CFAllocator *v155;
  const __CFAllocator *v156;
  const __CFAllocator *v157;
  const __CFAllocator *v158;
  const __CFAllocator *v159;
  const __CFAllocator *v160;
  const __CFAllocator *v161;
  const __CFAllocator *v162;
  const __CFAllocator *v163;
  const __CFAllocator *v164;
  const __CFAllocator *v165;
  const __CFAllocator *v166;
  const __CFAllocator *v167;
  const __CFAllocator *v168;
  const __CFAllocator *v169;
  const __CFAllocator *v170;
  const __CFAllocator *v171;
  const __CFAllocator *v172;
  const __CFAllocator *v173;
  const __CFAllocator *v174;
  const __CFAllocator *v175;
  const __CFAllocator *v176;
  const __CFAllocator *v177;
  const __CFAllocator *v178;
  const __CFAllocator *v179;
  const __CFAllocator *v180;
  capabilities::ipc *v181;
  const __CFAllocator *v182;
  _QWORD *v183;
  int v184;
  uint64_t v185;
  __int128 v186;
  std::string::size_type v187;
  std::string *v188;
  uint64_t v189;
  const void **v190;
  const void *v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  __int128 v195;
  std::string::size_type v196;
  std::string *v197;
  uint64_t v198;
  const void **v199;
  const void *v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  __int128 v204;
  std::string::size_type v205;
  std::string *v206;
  uint64_t v207;
  const void **v208;
  const void *v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  _QWORD *v213;
  _QWORD *v214;
  CFTypeID v215;
  const __CFDictionary *v216;
  uint64_t v217;
  uint64_t **v218;
  uint64_t *v219;
  uint64_t **v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unsigned int v231;
  uint64_t v232;
  _QWORD v233[5];
  char **v234;
  char *v235[2];
  CFTypeRef cf;
  uint64_t **v237;
  uint64_t *v238;
  uint64_t v239;
  std::__shared_weak_count *v240;
  std::__shared_weak_count *v241;
  std::string v242;
  std::string v243;
  _BYTE buf[112];
  _BYTE v245[160];
  unint64_t v246;
  __CFDictionary *v247;
  _QWORD v248[5];
  __int128 v249;
  uint64_t v250;
  std::string v251;
  std::string __dst[2];

  v230 = *(_QWORD *)(a1 + 32);
  v1 = *(NSObject **)(v230 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v1, OS_LOG_TYPE_DEFAULT, "#I ----------------- Setting up ----------------", buf, 2u);
  }
  v2 = (std::__shared_weak_count *)operator new(0x30uLL);
  v2->__shared_owners_ = 0;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)off_1E790C1D0;
  v3 = v2 + 1;
  v5 = *(_QWORD *)(v230 + 304);
  v4 = *(std::__shared_weak_count **)(v230 + 312);
  if (!v4)
  {
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E790C220;
    v2[1].__shared_owners_ = v5;
    v2[1].__shared_weak_owners_ = 0;
    v9 = *(std::__shared_weak_count **)(v230 + 136);
    *(_QWORD *)(v230 + 128) = v3;
    *(_QWORD *)(v230 + 136) = v2;
    if (v9)
      goto LABEL_9;
LABEL_16:
    v240 = v2 + 1;
    v241 = v2;
LABEL_17:
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    goto LABEL_19;
  }
  v6 = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E790C220;
  v2[1].__shared_owners_ = v5;
  v2[1].__shared_weak_owners_ = (uint64_t)v4;
  do
    v8 = __ldxr(v6);
  while (__stxr(v8 + 1, v6));
  std::__shared_weak_count::__release_weak(v4);
  v9 = *(std::__shared_weak_count **)(v230 + 136);
  *(_QWORD *)(v230 + 128) = v3;
  *(_QWORD *)(v230 + 136) = v2;
  if (!v9)
    goto LABEL_16;
LABEL_9:
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  v2 = *(std::__shared_weak_count **)(v230 + 136);
  v240 = *(std::__shared_weak_count **)(v230 + 128);
  v241 = v2;
  if (v2)
    goto LABEL_17;
LABEL_19:
  RouterIPCController::create((uint64_t *)&v240, (uint64_t *)buf);
  v14 = *(_OWORD *)buf;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  v15 = *(std::__shared_weak_count **)(v230 + 152);
  *(_OWORD *)(v230 + 144) = v14;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v19 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (capabilities::ipc *)v241;
  if (v241)
    std::__shared_weak_count::__release_weak(v241);
  v22 = (capabilities::pci *)capabilities::ipc::supportsPCI(v21);
  v23 = (_QWORD *)v230;
  if ((_DWORD)v22)
  {
    v231 = capabilities::pci::controlChannelCount(v22);
    if (v231)
    {
      v24 = *MEMORY[0x1E0DE4F60];
      v227 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v229 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v221 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v25 = 1;
      v225 = MEMORY[0x1E0DE4FE0] + 64;
      v223 = MEMORY[0x1E0DE4FB8] + 16;
      while (1)
      {
        *(_QWORD *)&v26 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v245[120] = v26;
        *(_OWORD *)&v245[136] = v26;
        *(_OWORD *)&v245[88] = v26;
        *(_OWORD *)&v245[104] = v26;
        *(_OWORD *)&v245[56] = v26;
        *(_OWORD *)&v245[72] = v26;
        *(_OWORD *)&v245[24] = v26;
        *(_OWORD *)&v245[40] = v26;
        *(_QWORD *)&buf[104] = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v245[8] = v26;
        *(_OWORD *)&buf[72] = v26;
        *(_OWORD *)&buf[88] = v26;
        *(_OWORD *)&buf[40] = v26;
        *(_OWORD *)&buf[56] = v26;
        *(_OWORD *)&buf[8] = v26;
        *(_OWORD *)&buf[24] = v26;
        *(_QWORD *)v245 = v225;
        *(_QWORD *)buf = v229;
        *(_QWORD *)&buf[*(_QWORD *)(v229 - 24)] = v227;
        v27 = (std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)];
        std::ios_base::init(v27, &buf[8]);
        v27[1].__vftable = 0;
        v27[1].__fmtflags_ = -1;
        *(_QWORD *)buf = MEMORY[0x1E0DE4FE0] + 24;
        *(_QWORD *)v245 = MEMORY[0x1E0DE4FE0] + 64;
        std::streambuf::basic_streambuf();
        *(_QWORD *)&buf[8] = v223;
        memset(&buf[72], 0, 32);
        *(_DWORD *)&buf[104] = 16;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"qmux", 4);
        std::ostream::operator<<();
        memset(__dst, 170, 24);
        if ((buf[104] & 0x10) != 0)
        {
          v30 = *(_QWORD *)&buf[96];
          v31 = (const void **)&buf[48];
          if (*(_QWORD *)&buf[96] < *(_QWORD *)&buf[56])
          {
            *(_QWORD *)&buf[96] = *(_QWORD *)&buf[56];
            v30 = *(_QWORD *)&buf[56];
            v31 = (const void **)&buf[48];
          }
        }
        else
        {
          if ((buf[104] & 8) == 0)
          {
            v28 = 0;
            *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = 0;
            v29 = __dst;
            goto LABEL_49;
          }
          v30 = *(_QWORD *)&buf[40];
          v31 = (const void **)&buf[24];
        }
        v32 = *v31;
        v28 = v30 - (_QWORD)*v31;
        if (v28 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v28 >= 0x17)
          break;
        *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = v30 - *(_BYTE *)v31;
        v29 = __dst;
        if (v28)
          goto LABEL_48;
LABEL_49:
        v29->__r_.__value_.__s.__data_[v28] = 0;
        v251.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
        v251.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
        QMux::QMux((QMux *)&v251);
        RouterIPCController::createQMuxChannels(v23[18], (uint64_t)__dst, 1, (QMux *)&v249);
        v35 = v249;
        if (*((_QWORD *)&v249 + 1))
        {
          v36 = (unint64_t *)(*((_QWORD *)&v249 + 1) + 8);
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
        size = (std::__shared_weak_count *)v251.__r_.__value_.__l.__size_;
        *(_OWORD *)&v251.__r_.__value_.__l.__data_ = v35;
        if (!size)
          goto LABEL_56;
        v39 = (unint64_t *)&size->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
          QMux::~QMux((QMux *)&v249);
          v42 = (char *)v23[25];
          v41 = v23[26];
          v43 = v251.__r_.__value_.__r.__words[0];
          if ((unint64_t)v42 >= v41)
          {
LABEL_62:
            v48 = (char *)v23[24];
            v49 = (v42 - v48) >> 4;
            v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 60)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v51 = v251.__r_.__value_.__l.__size_;
            v52 = v41 - (_QWORD)v48;
            if (v52 >> 3 > v50)
              v50 = v52 >> 3;
            if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF0)
              v53 = 0xFFFFFFFFFFFFFFFLL;
            else
              v53 = v50;
            if (v53)
            {
              if (v53 >> 60)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v54 = (char *)operator new(16 * v53);
              v55 = (std::string::size_type *)&v54[16 * v49];
              *v55 = v43;
              v55[1] = v51;
              if (v51)
              {
LABEL_71:
                v56 = (unint64_t *)(v51 + 8);
                do
                  v57 = __ldxr(v56);
                while (__stxr(v57 + 1, v56));
                v23 = (_QWORD *)v230;
                v48 = *(char **)(v230 + 192);
                v42 = *(char **)(v230 + 200);
                v58 = &v54[16 * v53];
                v47 = v55 + 2;
                if (v42 == v48)
                {
LABEL_77:
                  v23[24] = v55;
                  v23[25] = v47;
                  v23[26] = v58;
LABEL_85:
                  if (v48)
                    operator delete(v48);
                  goto LABEL_87;
                }
                do
                {
LABEL_79:
                  v59 = *((_QWORD *)v42 - 2);
                  v42 -= 16;
                  *(v55 - 2) = v59;
                  v55 -= 2;
                  v60 = *((_QWORD *)v42 + 1);
                  v55[1] = v60;
                  if (v60)
                  {
                    v61 = (unint64_t *)(v60 + 8);
                    do
                      v62 = __ldxr(v61);
                    while (__stxr(v62 + 1, v61));
                  }
                }
                while (v42 != v48);
                v48 = (char *)v23[24];
                v63 = (char *)v23[25];
                v23[24] = v55;
                v23[25] = v47;
                v23[26] = v58;
                while (v63 != v48)
                  QMux::~QMux((QMux *)(v63 - 16));
                goto LABEL_85;
              }
            }
            else
            {
              v54 = 0;
              v55 = (std::string::size_type *)(16 * v49);
              *v55 = v43;
              v55[1] = v51;
              if (v51)
                goto LABEL_71;
            }
            v23 = (_QWORD *)v230;
            v58 = &v54[16 * v53];
            v47 = v55 + 2;
            if (v42 == v48)
              goto LABEL_77;
            goto LABEL_79;
          }
        }
        else
        {
LABEL_56:
          QMux::~QMux((QMux *)&v249);
          v42 = (char *)v23[25];
          v41 = v23[26];
          v43 = v251.__r_.__value_.__r.__words[0];
          if ((unint64_t)v42 >= v41)
            goto LABEL_62;
        }
        *(_QWORD *)v42 = v43;
        v44 = v251.__r_.__value_.__l.__size_;
        *((_QWORD *)v42 + 1) = v251.__r_.__value_.__l.__size_;
        if (v44)
        {
          v45 = (unint64_t *)(v44 + 8);
          do
            v46 = __ldxr(v45);
          while (__stxr(v46 + 1, v45));
        }
        v47 = v42 + 16;
LABEL_87:
        v23[25] = v47;
        std::__tree<QMux>::__emplace_unique_key_args<QMux,QMux const&>((uint64_t **)(v230 + 216), (QMux *)&v251, (uint64_t *)&v251);
        if (v25 != v231)
          std::__tree<QMux>::__emplace_unique_key_args<QMux,QMux const&>((uint64_t **)(v230 + 240), (QMux *)&v251, (uint64_t *)&v251);
        QMux::~QMux((QMux *)&v251);
        if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst[0].__r_.__value_.__l.__data_);
        *(_QWORD *)buf = v24;
        *(_QWORD *)&buf[*(_QWORD *)(v24 - 24)] = v221;
        *(_QWORD *)&buf[8] = MEMORY[0x1E0DE4FB8] + 16;
        if ((buf[95] & 0x80000000) != 0)
          operator delete(*(void **)&buf[72]);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1C3B89E4C](v245);
        ++v25;
        v23 = (_QWORD *)v230;
        if (v25 > v231)
          goto LABEL_93;
      }
      v33 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v28 | 7) != 0x17)
        v33 = v28 | 7;
      v34 = v33 + 1;
      v29 = (std::string *)operator new(v33 + 1);
      __dst[0].__r_.__value_.__l.__size_ = v28;
      __dst[0].__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
      __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
LABEL_48:
      memmove(v29, v32, v28);
      goto LABEL_49;
    }
LABEL_93:
    v64 = v23[18];
    buf[23] = 12;
    strcpy(buf, "qmux_control");
    RouterIPCController::createQMuxChannels(v64, (uint64_t)buf, 1, (QMux *)__dst);
    v65 = *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_;
    if (__dst[0].__r_.__value_.__l.__size_)
    {
      v66 = (unint64_t *)(__dst[0].__r_.__value_.__l.__size_ + 8);
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
    }
    v68 = v23;
    v69 = (QMux *)(v23 + 22);
    v70 = (std::__shared_weak_count *)v68[23];
    *((_OWORD *)v68 + 11) = v65;
    if (!v70)
      goto LABEL_100;
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
      QMux::~QMux((QMux *)__dst);
      if ((buf[23] & 0x80000000) == 0)
        goto LABEL_102;
    }
    else
    {
LABEL_100:
      QMux::~QMux((QMux *)__dst);
      if ((buf[23] & 0x80000000) == 0)
      {
LABEL_102:
        std::__tree<QMux>::__emplace_unique_key_args<QMux,QMux const&>((uint64_t **)(v230 + 216), v69, (uint64_t *)v69);
        v73 = v69;
        v74 = (uint64_t *)v69;
        v23 = (_QWORD *)v230;
        std::__tree<QMux>::__emplace_unique_key_args<QMux,QMux const&>((uint64_t **)(v230 + 240), v73, v74);
        goto LABEL_103;
      }
    }
    operator delete(*(void **)buf);
    goto LABEL_102;
  }
LABEL_103:
  v75 = v23[5];
  if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v75, OS_LOG_TYPE_DEFAULT, "#I ----------------- QMux channels created ----------------", buf, 2u);
  }
  RouterIPCController::activate(*(RouterIPCController **)(v230 + 144));
  v76 = *(Registry **)(v230 + 112);
  if (v76)
  {
    ServerConnection = Registry::getServerConnection(v76);
    v78 = *(_OWORD *)buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v79 = *(std::__shared_weak_count **)(v230 + 168);
    *(_OWORD *)(v230 + 160) = v78;
    if (!v79)
      goto LABEL_110;
    v80 = (unint64_t *)&v79->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
      v82 = *(std::__shared_weak_count **)&buf[8];
      if (!*(_QWORD *)&buf[8])
        goto LABEL_114;
    }
    else
    {
LABEL_110:
      v82 = *(std::__shared_weak_count **)&buf[8];
      if (!*(_QWORD *)&buf[8])
        goto LABEL_114;
    }
    v83 = (unint64_t *)&v82->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
      v85 = v230;
      if (*(_QWORD *)(v230 + 160))
        goto LABEL_140;
LABEL_115:
      v86 = v85;
      v87 = *(NSObject **)(v85 + 40);
      if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1BF335000, v87, OS_LOG_TYPE_ERROR, "No QMI server connection exists in the registry, creating one to ensure XPC server functionality", buf, 2u);
      }
      _ZNSt3__115allocate_sharedB8ne180100I19QMIServerConnectionNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((uint64_t *)buf);
      v88 = *(_OWORD *)buf;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v89 = *(std::__shared_weak_count **)(v86 + 168);
      *(_OWORD *)(v86 + 160) = v88;
      if (!v89)
        goto LABEL_121;
      v90 = (unint64_t *)&v89->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
        v92 = *(std::__shared_weak_count **)&buf[8];
        if (!*(_QWORD *)&buf[8])
          goto LABEL_125;
      }
      else
      {
LABEL_121:
        v92 = *(std::__shared_weak_count **)&buf[8];
        if (!*(_QWORD *)&buf[8])
          goto LABEL_125;
      }
      v93 = (unint64_t *)&v92->__shared_owners_;
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
        v85 = v230;
        if (!*(_QWORD *)(v230 + 160))
        {
LABEL_126:
          v95 = *(NSObject **)(v85 + 40);
          if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            v96 = "Unable to allocate a QMI Server Connection, exiting QMI Server setup";
LABEL_130:
            _os_log_error_impl(&dword_1BF335000, v95, OS_LOG_TYPE_ERROR, v96, buf, 2u);
            return;
          }
          return;
        }
LABEL_140:
        v238 = 0;
        v239 = 0;
        v237 = &v238;
        v97 = *(_QWORD **)(v85 + 216);
        v98 = (_QWORD *)(v85 + 224);
        if (v97 != (_QWORD *)(v85 + 224))
        {
          do
          {
            QMux::getName((QMux *)(v97 + 4));
            v99 = v238;
            v100 = &v238;
            v101 = &v238;
            if (v238)
            {
              if (buf[23] >= 0)
                v102 = buf;
              else
                v102 = *(_BYTE **)buf;
              if (buf[23] >= 0)
                v103 = buf[23];
              else
                v103 = *(_QWORD *)&buf[8];
              while (1)
              {
                v101 = (uint64_t **)v99;
                v106 = v99[4];
                v104 = v99 + 4;
                v105 = (uint64_t *)v106;
                v107 = *((char *)v104 + 23);
                if (v107 >= 0)
                  v108 = v104;
                else
                  v108 = v105;
                if (v107 >= 0)
                  v109 = *((unsigned __int8 *)v104 + 23);
                else
                  v109 = v104[1];
                if (v109 >= v103)
                  v110 = v103;
                else
                  v110 = v109;
                v111 = memcmp(v102, v108, v110);
                if (v111)
                {
                  if (v111 < 0)
                    goto LABEL_150;
LABEL_164:
                  ServerConnection = memcmp(v108, v102, v110);
                  if ((_DWORD)ServerConnection)
                  {
                    if ((ServerConnection & 0x80000000) == 0)
                      goto LABEL_174;
                  }
                  else if (v109 >= v103)
                  {
LABEL_174:
                    v112 = (char *)v101;
                    v115 = v97[4];
                    v114 = v97[5];
                    if (v114)
                      goto LABEL_175;
                    goto LABEL_177;
                  }
                  v99 = v101[1];
                  if (!v99)
                  {
                    v100 = v101 + 1;
                    break;
                  }
                }
                else
                {
                  if (v103 >= v109)
                    goto LABEL_164;
LABEL_150:
                  v99 = *v101;
                  v100 = v101;
                  if (!*v101)
                    break;
                }
              }
            }
            v112 = (char *)operator new(0x48uLL);
            *((_OWORD *)v112 + 2) = *(_OWORD *)buf;
            *((_QWORD *)v112 + 6) = *(_QWORD *)&buf[16];
            memset(buf, 0, 24);
            QMux::QMux((QMux *)(v112 + 56));
            *(_QWORD *)v112 = 0;
            *((_QWORD *)v112 + 1) = 0;
            *((_QWORD *)v112 + 2) = v101;
            *v100 = (uint64_t *)v112;
            v113 = (uint64_t *)v112;
            if (*v237)
            {
              v237 = (uint64_t **)*v237;
              v113 = *v100;
            }
            ServerConnection = (uint64_t)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v238, v113);
            ++v239;
            v115 = v97[4];
            v114 = v97[5];
            if (v114)
            {
LABEL_175:
              v116 = (unint64_t *)(v114 + 8);
              do
                v117 = __ldxr(v116);
              while (__stxr(v117 + 1, v116));
            }
LABEL_177:
            v118 = (std::__shared_weak_count *)*((_QWORD *)v112 + 8);
            *((_QWORD *)v112 + 7) = v115;
            *((_QWORD *)v112 + 8) = v114;
            if (!v118)
              goto LABEL_181;
            v119 = (unint64_t *)&v118->__shared_owners_;
            do
              v120 = __ldaxr(v119);
            while (__stlxr(v120 - 1, v119));
            if (!v120)
            {
              ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
              std::__shared_weak_count::__release_weak(v118);
              if ((buf[23] & 0x80000000) == 0)
              {
LABEL_182:
                v121 = (_QWORD *)v97[1];
                v85 = v230;
                if (v121)
                  goto LABEL_186;
                goto LABEL_188;
              }
            }
            else
            {
LABEL_181:
              if ((buf[23] & 0x80000000) == 0)
                goto LABEL_182;
            }
            operator delete(*(void **)buf);
            v121 = (_QWORD *)v97[1];
            v85 = v230;
            if (v121)
            {
              do
              {
LABEL_186:
                v122 = v121;
                v121 = (_QWORD *)*v121;
              }
              while (v121);
              goto LABEL_142;
            }
            do
            {
LABEL_188:
              v122 = (_QWORD *)v97[2];
              v139 = *v122 == (_QWORD)v97;
              v97 = v122;
            }
            while (!v139);
LABEL_142:
            v97 = v122;
          }
          while (v122 != v98);
        }
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v249 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v250 = 0x5AAAAAAAAAAAAAALL;
        *(_QWORD *)&v249 = 0xAAAA003278756D71;
        memset(&v248[4], 170, 7);
        v123 = capabilities::ipc::supportsPCI((capabilities::ipc *)ServerConnection);
        if ((v123 & 1) != 0 || config::hw::watch((config::hw *)v123))
        {
          if ((SHIBYTE(v250) & 0x80000000) == 0)
          {
            v124 = 0x3178756D71;
LABEL_198:
            v126 = v124 & 0xFFFFFFFFFFFFLL | 0xAAAA000000000000;
            HIBYTE(v250) = 12;
            v127 = (char *)&v249;
            goto LABEL_201;
          }
          v125 = 0x3178756D71;
        }
        else
        {
          if ((SHIBYTE(v250) & 0x80000000) == 0)
          {
            v124 = 0x3278756D71;
            goto LABEL_198;
          }
          v125 = 0x3278756D71;
        }
        v126 = v125 & 0xFFFFFFFFFFFFLL | 0xAAAA000000000000;
        *((_QWORD *)&v249 + 1) = 12;
        v127 = (char *)v249;
LABEL_201:
        strcpy(v127, "qmux_control");
        memset(v248, 170, 24);
        v128 = (_QWORD *)*v98;
        if (*v98)
        {
          do
          {
            v129 = v128;
            v128 = (_QWORD *)v128[1];
          }
          while (v128);
        }
        else
        {
          v130 = v98;
          do
          {
            v129 = (_QWORD *)v130[2];
            v139 = *v129 == (_QWORD)v130;
            v130 = v129;
          }
          while (v139);
        }
        QMux::getName((QMux *)(v129 + 4));
        if (v98 != *(_QWORD **)(v85 + 216))
        {
          v131 = v98;
          do
          {
            v132 = (_QWORD *)*v131;
            v133 = v131;
            if (*v131)
            {
              do
              {
                v134 = v132;
                v132 = (_QWORD *)v132[1];
              }
              while (v132);
            }
            else
            {
              do
              {
                v134 = (_QWORD *)v133[2];
                v139 = *v134 == (_QWORD)v133;
                v133 = v134;
              }
              while (v139);
            }
            QMux::getName((QMux *)(v134 + 4));
            if (SHIBYTE(v248[2]) < 0)
              operator delete((void *)v248[0]);
            v248[2] = *(_QWORD *)&buf[16];
            *(_OWORD *)v248 = *(_OWORD *)buf;
            v135 = HIBYTE(*(_QWORD *)&buf[16]);
            if (buf[23] < 0)
              v135 = v248[1];
            if (v135 != 12)
              break;
            v136 = buf[23] >= 0 ? v248 : (_QWORD *)v248[0];
            v137 = *v136;
            v138 = *((_DWORD *)v136 + 2);
            v139 = v137 == 0x6E6F635F78756D71 && v138 == 1819243124;
            if (!v139)
              break;
            v140 = (_QWORD *)*v131;
            if (*v131)
            {
              do
              {
                v141 = v140;
                v140 = (_QWORD *)v140[1];
              }
              while (v140);
            }
            else
            {
              do
              {
                v141 = (_QWORD *)v131[2];
                v139 = *v141 == (_QWORD)v131;
                v131 = v141;
              }
              while (v139);
            }
            v131 = v141;
          }
          while (v141 != *(_QWORD **)(v230 + 216));
        }
        v247 = 0;
        v232 = *MEMORY[0x1E0C9AE00];
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v144 = Mutable;
        if (Mutable)
          v247 = Mutable;
        if (SHIBYTE(v250) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v249, *((std::string::size_type *)&v249 + 1));
        }
        else
        {
          *(_OWORD *)buf = v249;
          *(_QWORD *)&buf[16] = v250;
        }
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"cellmonitor", (uint64_t)buf, v232, v143);
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if ((SHIBYTE(v250) & 0x80000000) == 0)
            goto LABEL_238;
        }
        else if ((SHIBYTE(v250) & 0x80000000) == 0)
        {
LABEL_238:
          *(_OWORD *)buf = v249;
          *(_QWORD *)&buf[16] = v250;
          goto LABEL_241;
        }
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v249, *((std::string::size_type *)&v249 + 1));
LABEL_241:
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"radio", (uint64_t)buf, v232, v145);
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if ((SHIBYTE(v250) & 0x80000000) == 0)
            goto LABEL_243;
        }
        else if ((SHIBYTE(v250) & 0x80000000) == 0)
        {
LABEL_243:
          *(_OWORD *)buf = v249;
          *(_QWORD *)&buf[16] = v250;
          goto LABEL_246;
        }
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v249, *((std::string::size_type *)&v249 + 1));
LABEL_246:
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"audio", (uint64_t)buf, v232, v146);
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if ((SHIBYTE(v250) & 0x80000000) == 0)
            goto LABEL_248;
        }
        else if ((SHIBYTE(v250) & 0x80000000) == 0)
        {
LABEL_248:
          *(_OWORD *)buf = v249;
          *(_QWORD *)&buf[16] = v250;
          goto LABEL_251;
        }
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v249, *((std::string::size_type *)&v249 + 1));
LABEL_251:
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"voice", (uint64_t)buf, v232, v147);
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if ((SHIBYTE(v248[2]) & 0x80000000) == 0)
            goto LABEL_253;
        }
        else if ((SHIBYTE(v248[2]) & 0x80000000) == 0)
        {
LABEL_253:
          *(_OWORD *)buf = *(_OWORD *)v248;
          *(_QWORD *)&buf[16] = v248[2];
          goto LABEL_256;
        }
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v248[0], v248[1]);
LABEL_256:
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"sms", (uint64_t)buf, v232, v148);
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if ((SHIBYTE(v250) & 0x80000000) == 0)
            goto LABEL_258;
        }
        else if ((SHIBYTE(v250) & 0x80000000) == 0)
        {
LABEL_258:
          *(_OWORD *)buf = v249;
          *(_QWORD *)&buf[16] = v250;
          goto LABEL_261;
        }
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v249, *((std::string::size_type *)&v249 + 1));
LABEL_261:
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"location", (uint64_t)buf, v232, v149);
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if ((SHIBYTE(v250) & 0x80000000) == 0)
            goto LABEL_263;
        }
        else if ((SHIBYTE(v250) & 0x80000000) == 0)
        {
LABEL_263:
          *(_OWORD *)buf = v249;
          *(_QWORD *)&buf[16] = v250;
          goto LABEL_266;
        }
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v249, *((std::string::size_type *)&v249 + 1));
LABEL_266:
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"sim", (uint64_t)buf, v232, v150);
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if ((SHIBYTE(v250) & 0x80000000) == 0)
            goto LABEL_268;
        }
        else if ((SHIBYTE(v250) & 0x80000000) == 0)
        {
LABEL_268:
          *(_OWORD *)buf = v249;
          *(_QWORD *)&buf[16] = v250;
          goto LABEL_271;
        }
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v249, *((std::string::size_type *)&v249 + 1));
LABEL_271:
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"ims", (uint64_t)buf, v232, v151);
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if ((SHIBYTE(v250) & 0x80000000) == 0)
            goto LABEL_273;
        }
        else if ((SHIBYTE(v250) & 0x80000000) == 0)
        {
LABEL_273:
          *(_OWORD *)buf = v249;
          *(_QWORD *)&buf[16] = v250;
          goto LABEL_276;
        }
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v249, *((std::string::size_type *)&v249 + 1));
LABEL_276:
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"coex", (uint64_t)buf, v232, v152);
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if ((SHIBYTE(v250) & 0x80000000) == 0)
            goto LABEL_278;
        }
        else if ((SHIBYTE(v250) & 0x80000000) == 0)
        {
LABEL_278:
          *(_OWORD *)buf = v249;
          *(_QWORD *)&buf[16] = v250;
          goto LABEL_281;
        }
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v249, *((std::string::size_type *)&v249 + 1));
LABEL_281:
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"phonebook", (uint64_t)buf, v232, v153);
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if ((SHIBYTE(v250) & 0x80000000) == 0)
            goto LABEL_283;
        }
        else if ((SHIBYTE(v250) & 0x80000000) == 0)
        {
LABEL_283:
          *(_OWORD *)buf = v249;
          *(_QWORD *)&buf[16] = v250;
          goto LABEL_286;
        }
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v249, *((std::string::size_type *)&v249 + 1));
LABEL_286:
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"vinyl", (uint64_t)buf, v232, v154);
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if ((SHIBYTE(v250) & 0x80000000) == 0)
            goto LABEL_288;
        }
        else if ((SHIBYTE(v250) & 0x80000000) == 0)
        {
LABEL_288:
          *(_OWORD *)buf = v249;
          *(_QWORD *)&buf[16] = v250;
          goto LABEL_291;
        }
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v249, *((std::string::size_type *)&v249 + 1));
LABEL_291:
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"eos", (uint64_t)buf, v232, v155);
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if ((SHIBYTE(v250) & 0x80000000) == 0)
            goto LABEL_293;
        }
        else if ((SHIBYTE(v250) & 0x80000000) == 0)
        {
LABEL_293:
          *(_OWORD *)buf = v249;
          *(_QWORD *)&buf[16] = v250;
          goto LABEL_296;
        }
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v249, *((std::string::size_type *)&v249 + 1));
LABEL_296:
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"diag", (uint64_t)buf, v232, v156);
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if ((SHIBYTE(v250) & 0x80000000) == 0)
            goto LABEL_298;
        }
        else if ((SHIBYTE(v250) & 0x80000000) == 0)
        {
LABEL_298:
          *(_OWORD *)buf = v249;
          *(_QWORD *)&buf[16] = v250;
          goto LABEL_301;
        }
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v249, *((std::string::size_type *)&v249 + 1));
LABEL_301:
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"bsp", (uint64_t)buf, v232, v157);
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if ((SHIBYTE(v250) & 0x80000000) == 0)
            goto LABEL_303;
        }
        else if ((SHIBYTE(v250) & 0x80000000) == 0)
        {
LABEL_303:
          *(_OWORD *)buf = v249;
          *(_QWORD *)&buf[16] = v250;
          goto LABEL_306;
        }
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v249, *((std::string::size_type *)&v249 + 1));
LABEL_306:
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"dms", (uint64_t)buf, v232, v158);
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if ((SHIBYTE(v250) & 0x80000000) == 0)
            goto LABEL_308;
        }
        else if ((SHIBYTE(v250) & 0x80000000) == 0)
        {
LABEL_308:
          *(_OWORD *)buf = v249;
          *(_QWORD *)&buf[16] = v250;
          goto LABEL_311;
        }
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v249, *((std::string::size_type *)&v249 + 1));
LABEL_311:
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"awd", (uint64_t)buf, v232, v159);
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if ((SHIBYTE(v250) & 0x80000000) == 0)
            goto LABEL_313;
        }
        else if ((SHIBYTE(v250) & 0x80000000) == 0)
        {
LABEL_313:
          *(_OWORD *)buf = v249;
          *(_QWORD *)&buf[16] = v250;
          goto LABEL_316;
        }
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v249, *((std::string::size_type *)&v249 + 1));
LABEL_316:
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"cat", (uint64_t)buf, v232, v160);
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if ((SHIBYTE(v250) & 0x80000000) == 0)
            goto LABEL_318;
        }
        else if ((SHIBYTE(v250) & 0x80000000) == 0)
        {
LABEL_318:
          *(_OWORD *)buf = v249;
          *(_QWORD *)&buf[16] = v250;
          goto LABEL_321;
        }
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v249, *((std::string::size_type *)&v249 + 1));
LABEL_321:
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"elqm", (uint64_t)buf, v232, v161);
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if ((SHIBYTE(v250) & 0x80000000) == 0)
            goto LABEL_323;
        }
        else if ((SHIBYTE(v250) & 0x80000000) == 0)
        {
LABEL_323:
          *(_OWORD *)buf = v249;
          *(_QWORD *)&buf[16] = v250;
          goto LABEL_326;
        }
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v249, *((std::string::size_type *)&v249 + 1));
LABEL_326:
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"pdc", (uint64_t)buf, v232, v162);
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if ((SHIBYTE(v250) & 0x80000000) == 0)
            goto LABEL_328;
        }
        else if ((SHIBYTE(v250) & 0x80000000) == 0)
        {
LABEL_328:
          *(_OWORD *)buf = v249;
          *(_QWORD *)&buf[16] = v250;
          goto LABEL_331;
        }
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v249, *((std::string::size_type *)&v249 + 1));
LABEL_331:
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"dsd", (uint64_t)buf, v232, v163);
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if ((SHIBYTE(v250) & 0x80000000) == 0)
            goto LABEL_333;
        }
        else if ((SHIBYTE(v250) & 0x80000000) == 0)
        {
LABEL_333:
          *(_OWORD *)buf = v249;
          *(_QWORD *)&buf[16] = v250;
          goto LABEL_336;
        }
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v249, *((std::string::size_type *)&v249 + 1));
LABEL_336:
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"antenna", (uint64_t)buf, v232, v164);
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if ((SHIBYTE(v250) & 0x80000000) == 0)
            goto LABEL_338;
        }
        else if ((SHIBYTE(v250) & 0x80000000) == 0)
        {
LABEL_338:
          *(_OWORD *)buf = v249;
          *(_QWORD *)&buf[16] = v250;
          goto LABEL_341;
        }
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v249, *((std::string::size_type *)&v249 + 1));
LABEL_341:
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"p2p", (uint64_t)buf, v232, v165);
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if ((SHIBYTE(v250) & 0x80000000) == 0)
            goto LABEL_343;
        }
        else if ((SHIBYTE(v250) & 0x80000000) == 0)
        {
LABEL_343:
          *(_OWORD *)buf = v249;
          *(_QWORD *)&buf[16] = v250;
          goto LABEL_346;
        }
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v249, *((std::string::size_type *)&v249 + 1));
LABEL_346:
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"at", (uint64_t)buf, v232, v166);
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if ((SHIBYTE(v250) & 0x80000000) == 0)
            goto LABEL_348;
        }
        else if ((SHIBYTE(v250) & 0x80000000) == 0)
        {
LABEL_348:
          *(_OWORD *)buf = v249;
          *(_QWORD *)&buf[16] = v250;
          goto LABEL_351;
        }
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v249, *((std::string::size_type *)&v249 + 1));
LABEL_351:
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"media", (uint64_t)buf, v232, v167);
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if ((SHIBYTE(v250) & 0x80000000) == 0)
            goto LABEL_353;
        }
        else if ((SHIBYTE(v250) & 0x80000000) == 0)
        {
LABEL_353:
          *(_OWORD *)buf = v249;
          *(_QWORD *)&buf[16] = v250;
          goto LABEL_356;
        }
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v249, *((std::string::size_type *)&v249 + 1));
LABEL_356:
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"wda", (uint64_t)buf, v232, v168);
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if ((SHIBYTE(v250) & 0x80000000) == 0)
            goto LABEL_358;
        }
        else if ((SHIBYTE(v250) & 0x80000000) == 0)
        {
LABEL_358:
          *(_OWORD *)buf = v249;
          *(_QWORD *)&buf[16] = v250;
          goto LABEL_361;
        }
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v249, *((std::string::size_type *)&v249 + 1));
LABEL_361:
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"dfs", (uint64_t)buf, v232, v169);
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if ((SHIBYTE(v250) & 0x80000000) == 0)
            goto LABEL_363;
        }
        else if ((SHIBYTE(v250) & 0x80000000) == 0)
        {
LABEL_363:
          *(_OWORD *)buf = v249;
          *(_QWORD *)&buf[16] = v250;
          goto LABEL_366;
        }
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v249, *((std::string::size_type *)&v249 + 1));
LABEL_366:
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"ssctl", (uint64_t)buf, v232, v170);
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if ((SHIBYTE(v250) & 0x80000000) == 0)
            goto LABEL_368;
        }
        else if ((SHIBYTE(v250) & 0x80000000) == 0)
        {
LABEL_368:
          *(_OWORD *)buf = v249;
          *(_QWORD *)&buf[16] = v250;
          goto LABEL_371;
        }
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v249, *((std::string::size_type *)&v249 + 1));
LABEL_371:
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"stw", (uint64_t)buf, v232, v171);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        *(_QWORD *)buf = v126;
        *(_QWORD *)&buf[8] = 0xAAAAAAAAAAAAAAAALL;
        *(_DWORD *)&buf[16] = v248[4];
        *(_DWORD *)&buf[19] = *(_DWORD *)((char *)&v248[4] + 3);
        buf[23] = 5;
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"registration", (uint64_t)buf, v232, v172);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        *(_QWORD *)buf = v126;
        *(_QWORD *)&buf[8] = 0xAAAAAAAAAAAAAAAALL;
        *(_DWORD *)&buf[16] = v248[4];
        *(_DWORD *)&buf[19] = *(_DWORD *)((char *)&v248[4] + 3);
        buf[23] = 5;
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"ussd", (uint64_t)buf, v232, v173);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        *(_QWORD *)buf = v126;
        *(_QWORD *)&buf[8] = 0xAAAAAAAAAAAAAAAALL;
        *(_DWORD *)&buf[16] = v248[4];
        *(_DWORD *)&buf[19] = *(_DWORD *)((char *)&v248[4] + 3);
        buf[23] = 5;
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"supp", (uint64_t)buf, v232, v174);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        *(_QWORD *)buf = v126;
        *(_QWORD *)&buf[8] = 0xAAAAAAAAAAAAAAAALL;
        *(_DWORD *)&buf[16] = v248[4];
        *(_DWORD *)&buf[19] = *(_DWORD *)((char *)&v248[4] + 3);
        buf[23] = 5;
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"settings", (uint64_t)buf, v232, v175);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        *(_QWORD *)buf = v126;
        *(_QWORD *)&buf[8] = 0xAAAAAAAAAAAAAAAALL;
        *(_DWORD *)&buf[16] = v248[4];
        *(_DWORD *)&buf[19] = *(_DWORD *)((char *)&v248[4] + 3);
        buf[23] = 5;
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"desense", (uint64_t)buf, v232, v176);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        ctu::cf::insert<char const*,char const*>(v144, (const __CFString **)"logchan", (const __CFString **)"qmux1", v232, v177);
        ctu::cf::insert<char const*,char const*>(v144, (const __CFString **)"dormancy", (const __CFString **)"qmux1", v232, v178);
        ctu::cf::insert<char const*,char const*>(v144, (const __CFString **)"aqm", (const __CFString **)"qmux1", v232, v179);
        v181 = (capabilities::ipc *)ctu::cf::insert<char const*,char const*>(v144, (const __CFString **)"subscriber", (const __CFString **)"qmux1", v232, v180);
        if (!capabilities::ipc::supportsPCI(v181))
          goto LABEL_388;
        if (SHIBYTE(v250) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v249, *((std::string::size_type *)&v249 + 1));
        }
        else
        {
          *(_OWORD *)buf = v249;
          *(_QWORD *)&buf[16] = v250;
        }
        ctu::cf::insert<char const*,std::string>(v144, (const __CFString **)"debug_ipc", (uint64_t)buf, v232, v182);
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          v183 = *(_QWORD **)(v230 + 216);
          if (v183 != v98)
            goto LABEL_389;
        }
        else
        {
LABEL_388:
          v183 = *(_QWORD **)(v230 + 216);
          if (v183 != v98)
          {
LABEL_389:
            v184 = 0;
            v185 = *MEMORY[0x1E0DE4F50];
            v226 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
            v228 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
            v222 = v98;
            v224 = MEMORY[0x1E0DE4FB8] + 16;
            while (1)
            {
              v246 = 0xAAAAAAAAAAAAAAAALL;
              *(_QWORD *)&v186 = 0xAAAAAAAAAAAAAAAALL;
              *((_QWORD *)&v186 + 1) = 0xAAAAAAAAAAAAAAAALL;
              *(_OWORD *)&v245[128] = v186;
              *(_OWORD *)&v245[144] = v186;
              *(_OWORD *)&v245[96] = v186;
              *(_OWORD *)&v245[112] = v186;
              *(_OWORD *)&v245[64] = v186;
              *(_OWORD *)&v245[80] = v186;
              *(_OWORD *)&v245[32] = v186;
              *(_OWORD *)&v245[48] = v186;
              *(_OWORD *)v245 = v186;
              *(_OWORD *)&v245[16] = v186;
              *(_OWORD *)&buf[80] = v186;
              *(_OWORD *)&buf[96] = v186;
              *(_OWORD *)&buf[48] = v186;
              *(_OWORD *)&buf[64] = v186;
              *(_OWORD *)&buf[16] = v186;
              *(_OWORD *)&buf[32] = v186;
              *(_OWORD *)buf = v186;
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)"coredump_", 9);
              ++v184;
              std::ostream::operator<<();
              if ((v245[8] & 0x10) != 0)
              {
                v189 = *(_QWORD *)v245;
                v190 = (const void **)&buf[64];
                if (*(_QWORD *)v245 < *(_QWORD *)&buf[72])
                {
                  *(_QWORD *)v245 = *(_QWORD *)&buf[72];
                  v189 = *(_QWORD *)&buf[72];
                  v190 = (const void **)&buf[64];
                }
              }
              else
              {
                if ((v245[8] & 8) == 0)
                {
                  v187 = 0;
                  *((_BYTE *)&v243.__r_.__value_.__s + 23) = 0;
                  v188 = &v243;
                  goto LABEL_405;
                }
                v189 = *(_QWORD *)&buf[56];
                v190 = (const void **)&buf[40];
              }
              v191 = *v190;
              v187 = v189 - (_QWORD)*v190;
              if (v187 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              if (v187 >= 0x17)
                break;
              *((_BYTE *)&v243.__r_.__value_.__s + 23) = v189 - *(_BYTE *)v190;
              v188 = &v243;
              if (v187)
                goto LABEL_404;
LABEL_405:
              v188->__r_.__value_.__s.__data_[v187] = 0;
              QMux::getName((QMux *)(v183 + 4));
              v194 = SHIBYTE(v243.__r_.__value_.__r.__words[2]);
              if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(__dst, v243.__r_.__value_.__l.__data_, v243.__r_.__value_.__l.__size_);
              else
                __dst[0] = v243;
              if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v251, v242.__r_.__value_.__l.__data_, v242.__r_.__value_.__l.__size_);
              else
                v251 = v242;
              ctu::cf::insert<std::string,std::string>();
              if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v251.__r_.__value_.__l.__data_);
                if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_413:
                  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_424;
                  goto LABEL_414;
                }
              }
              else if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                goto LABEL_413;
              }
              operator delete(__dst[0].__r_.__value_.__l.__data_);
              if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
              {
LABEL_424:
                operator delete(v242.__r_.__value_.__l.__data_);
                if ((v194 & 0x80000000) == 0)
                  goto LABEL_415;
                goto LABEL_425;
              }
LABEL_414:
              if ((v194 & 0x80000000) == 0)
                goto LABEL_415;
LABEL_425:
              operator delete(v243.__r_.__value_.__l.__data_);
LABEL_415:
              *(_QWORD *)buf = v185;
              *(_QWORD *)&buf[*(_QWORD *)(v185 - 24)] = v228;
              *(_QWORD *)&buf[16] = v226;
              *(_QWORD *)&buf[24] = v224;
              if ((buf[111] & 0x80000000) != 0)
                operator delete(*(void **)&buf[88]);
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x1C3B89E4C](&v245[16]);
              v246 = 0xAAAAAAAAAAAAAAAALL;
              *(_QWORD *)&v195 = 0xAAAAAAAAAAAAAAAALL;
              *((_QWORD *)&v195 + 1) = 0xAAAAAAAAAAAAAAAALL;
              *(_OWORD *)&v245[128] = v195;
              *(_OWORD *)&v245[144] = v195;
              *(_OWORD *)&v245[96] = v195;
              *(_OWORD *)&v245[112] = v195;
              *(_OWORD *)&v245[64] = v195;
              *(_OWORD *)&v245[80] = v195;
              *(_OWORD *)&v245[32] = v195;
              *(_OWORD *)&v245[48] = v195;
              *(_OWORD *)v245 = v195;
              *(_OWORD *)&v245[16] = v195;
              *(_OWORD *)&buf[80] = v195;
              *(_OWORD *)&buf[96] = v195;
              *(_OWORD *)&buf[48] = v195;
              *(_OWORD *)&buf[64] = v195;
              *(_OWORD *)&buf[16] = v195;
              *(_OWORD *)&buf[32] = v195;
              *(_OWORD *)buf = v195;
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)"data_", 5);
              std::ostream::operator<<();
              if ((v245[8] & 0x10) != 0)
              {
                v198 = *(_QWORD *)v245;
                v199 = (const void **)&buf[64];
                if (*(_QWORD *)v245 < *(_QWORD *)&buf[72])
                {
                  *(_QWORD *)v245 = *(_QWORD *)&buf[72];
                  v198 = *(_QWORD *)&buf[72];
                  v199 = (const void **)&buf[64];
                }
              }
              else
              {
                if ((v245[8] & 8) == 0)
                {
                  v196 = 0;
                  *((_BYTE *)&v243.__r_.__value_.__s + 23) = 0;
                  v197 = &v243;
                  goto LABEL_435;
                }
                v198 = *(_QWORD *)&buf[56];
                v199 = (const void **)&buf[40];
              }
              v200 = *v199;
              v196 = v198 - (_QWORD)*v199;
              if (v196 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              if (v196 >= 0x17)
              {
                v201 = (v196 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v196 | 7) != 0x17)
                  v201 = v196 | 7;
                v202 = v201 + 1;
                v197 = (std::string *)operator new(v201 + 1);
                v243.__r_.__value_.__l.__size_ = v196;
                v243.__r_.__value_.__r.__words[2] = v202 | 0x8000000000000000;
                v243.__r_.__value_.__r.__words[0] = (std::string::size_type)v197;
LABEL_434:
                memmove(v197, v200, v196);
                goto LABEL_435;
              }
              *((_BYTE *)&v243.__r_.__value_.__s + 23) = v198 - *(_BYTE *)v199;
              v197 = &v243;
              if (v196)
                goto LABEL_434;
LABEL_435:
              v197->__r_.__value_.__s.__data_[v196] = 0;
              QMux::getName((QMux *)(v183 + 4));
              v203 = SHIBYTE(v243.__r_.__value_.__r.__words[2]);
              if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(__dst, v243.__r_.__value_.__l.__data_, v243.__r_.__value_.__l.__size_);
              else
                __dst[0] = v243;
              if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v251, v242.__r_.__value_.__l.__data_, v242.__r_.__value_.__l.__size_);
              else
                v251 = v242;
              ctu::cf::insert<std::string,std::string>();
              if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v251.__r_.__value_.__l.__data_);
                if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_443:
                  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_454;
                  goto LABEL_444;
                }
              }
              else if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                goto LABEL_443;
              }
              operator delete(__dst[0].__r_.__value_.__l.__data_);
              if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
              {
LABEL_454:
                operator delete(v242.__r_.__value_.__l.__data_);
                if ((v203 & 0x80000000) == 0)
                  goto LABEL_445;
                goto LABEL_455;
              }
LABEL_444:
              if ((v203 & 0x80000000) == 0)
                goto LABEL_445;
LABEL_455:
              operator delete(v243.__r_.__value_.__l.__data_);
LABEL_445:
              *(_QWORD *)buf = v185;
              *(_QWORD *)&buf[*(_QWORD *)(v185 - 24)] = v228;
              *(_QWORD *)&buf[16] = v226;
              *(_QWORD *)&buf[24] = MEMORY[0x1E0DE4FB8] + 16;
              if ((buf[111] & 0x80000000) != 0)
                operator delete(*(void **)&buf[88]);
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x1C3B89E4C](&v245[16]);
              v246 = 0xAAAAAAAAAAAAAAAALL;
              *(_QWORD *)&v204 = 0xAAAAAAAAAAAAAAAALL;
              *((_QWORD *)&v204 + 1) = 0xAAAAAAAAAAAAAAAALL;
              *(_OWORD *)&v245[128] = v204;
              *(_OWORD *)&v245[144] = v204;
              *(_OWORD *)&v245[96] = v204;
              *(_OWORD *)&v245[112] = v204;
              *(_OWORD *)&v245[64] = v204;
              *(_OWORD *)&v245[80] = v204;
              *(_OWORD *)&v245[32] = v204;
              *(_OWORD *)&v245[48] = v204;
              *(_OWORD *)v245 = v204;
              *(_OWORD *)&v245[16] = v204;
              *(_OWORD *)&buf[80] = v204;
              *(_OWORD *)&buf[96] = v204;
              *(_OWORD *)&buf[48] = v204;
              *(_OWORD *)&buf[64] = v204;
              *(_OWORD *)&buf[16] = v204;
              *(_OWORD *)&buf[32] = v204;
              *(_OWORD *)buf = v204;
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)"qos_", 4);
              std::ostream::operator<<();
              if ((v245[8] & 0x10) != 0)
              {
                v207 = *(_QWORD *)v245;
                v208 = (const void **)&buf[64];
                if (*(_QWORD *)v245 < *(_QWORD *)&buf[72])
                {
                  *(_QWORD *)v245 = *(_QWORD *)&buf[72];
                  v207 = *(_QWORD *)&buf[72];
                  v208 = (const void **)&buf[64];
                }
              }
              else
              {
                if ((v245[8] & 8) == 0)
                {
                  v205 = 0;
                  *((_BYTE *)&v243.__r_.__value_.__s + 23) = 0;
                  v206 = &v243;
                  goto LABEL_465;
                }
                v207 = *(_QWORD *)&buf[56];
                v208 = (const void **)&buf[40];
              }
              v209 = *v208;
              v205 = v207 - (_QWORD)*v208;
              if (v205 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              if (v205 >= 0x17)
              {
                v210 = (v205 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v205 | 7) != 0x17)
                  v210 = v205 | 7;
                v211 = v210 + 1;
                v206 = (std::string *)operator new(v210 + 1);
                v243.__r_.__value_.__l.__size_ = v205;
                v243.__r_.__value_.__r.__words[2] = v211 | 0x8000000000000000;
                v243.__r_.__value_.__r.__words[0] = (std::string::size_type)v206;
LABEL_464:
                memmove(v206, v209, v205);
                goto LABEL_465;
              }
              *((_BYTE *)&v243.__r_.__value_.__s + 23) = v207 - *(_BYTE *)v208;
              v206 = &v243;
              if (v205)
                goto LABEL_464;
LABEL_465:
              v206->__r_.__value_.__s.__data_[v205] = 0;
              QMux::getName((QMux *)(v183 + 4));
              v144 = v247;
              v212 = SHIBYTE(v243.__r_.__value_.__r.__words[2]);
              if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(__dst, v243.__r_.__value_.__l.__data_, v243.__r_.__value_.__l.__size_);
              else
                __dst[0] = v243;
              if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v251, v242.__r_.__value_.__l.__data_, v242.__r_.__value_.__l.__size_);
              else
                v251 = v242;
              ctu::cf::insert<std::string,std::string>();
              if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v251.__r_.__value_.__l.__data_);
                if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_473:
                  if ((SHIBYTE(v242.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_474;
                  goto LABEL_485;
                }
              }
              else if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                goto LABEL_473;
              }
              operator delete(__dst[0].__r_.__value_.__l.__data_);
              if ((SHIBYTE(v242.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_474:
                if (v212 < 0)
                  goto LABEL_486;
                goto LABEL_475;
              }
LABEL_485:
              operator delete(v242.__r_.__value_.__l.__data_);
              if (v212 < 0)
LABEL_486:
                operator delete(v243.__r_.__value_.__l.__data_);
LABEL_475:
              *(_QWORD *)buf = v185;
              *(_QWORD *)&buf[*(_QWORD *)(v185 - 24)] = v228;
              *(_QWORD *)&buf[16] = v226;
              *(_QWORD *)&buf[24] = MEMORY[0x1E0DE4FB8] + 16;
              if ((buf[111] & 0x80000000) != 0)
                operator delete(*(void **)&buf[88]);
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x1C3B89E4C](&v245[16]);
              v213 = (_QWORD *)v183[1];
              if (v213)
              {
                do
                {
                  v214 = v213;
                  v213 = (_QWORD *)*v213;
                }
                while (v213);
              }
              else
              {
                do
                {
                  v214 = (_QWORD *)v183[2];
                  v139 = *v214 == (_QWORD)v183;
                  v183 = v214;
                }
                while (!v139);
              }
              v183 = v214;
              if (v214 == v222)
                goto LABEL_488;
            }
            v192 = (v187 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v187 | 7) != 0x17)
              v192 = v187 | 7;
            v193 = v192 + 1;
            v188 = (std::string *)operator new(v192 + 1);
            v243.__r_.__value_.__l.__size_ = v187;
            v243.__r_.__value_.__r.__words[2] = v193 | 0x8000000000000000;
            v243.__r_.__value_.__r.__words[0] = (std::string::size_type)v188;
LABEL_404:
            memmove(v188, v191, v187);
            goto LABEL_405;
          }
        }
LABEL_488:
        if (v144)
        {
          v215 = CFGetTypeID(v144);
          if (v215 == CFDictionaryGetTypeID())
          {
            cf = v144;
            CFRetain(v144);
            v216 = v144;
          }
          else
          {
            v216 = 0;
            cf = 0;
          }
          CFRelease(v144);
        }
        else
        {
          v216 = 0;
          cf = 0;
        }
        if (SHIBYTE(v248[2]) < 0)
        {
          operator delete((void *)v248[0]);
          if ((SHIBYTE(v250) & 0x80000000) == 0)
            goto LABEL_496;
        }
        else if ((SHIBYTE(v250) & 0x80000000) == 0)
        {
LABEL_496:
          v217 = MEMORY[0x1E0C809B0];
          v233[0] = MEMORY[0x1E0C809B0];
          v233[1] = 1174405120;
          v233[2] = ___ZN19QMITransportService4initEv_block_invoke_7;
          v233[3] = &__block_descriptor_tmp_9_9;
          v235[0] = 0;
          v235[1] = 0;
          v233[4] = v230;
          v234 = v235;
          v218 = v237;
          if (v237 != &v238)
          {
            do
            {
              std::__tree<std::__value_type<std::string,QMux>,std::__map_value_compare<std::string,std::__value_type<std::string,QMux>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,QMux>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,QMux> const&>((uint64_t *)&v234, (uint64_t)v235, (const void **)v218 + 4, (uint64_t)(v218 + 4));
              v219 = v218[1];
              if (v219)
              {
                do
                {
                  v220 = (uint64_t **)v219;
                  v219 = (uint64_t *)*v219;
                }
                while (v219);
              }
              else
              {
                do
                {
                  v220 = (uint64_t **)v218[2];
                  v139 = *v220 == (uint64_t *)v218;
                  v218 = v220;
                }
                while (!v139);
              }
              v218 = v220;
            }
            while (v220 != &v238);
          }
          *(_QWORD *)buf = v217;
          *(_QWORD *)&buf[8] = 0x40000000;
          *(_QWORD *)&buf[16] = ___ZN3ctu2cf8for_eachINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_EEvPK14__CFDictionaryU13block_pointerFvRKT_RKT0_E_block_invoke;
          *(_QWORD *)&buf[24] = &unk_1E790C370;
          *(_QWORD *)&buf[32] = v233;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
          CFDictionaryApplyFunction(v216, (CFDictionaryApplierFunction)ctu::cf::DictApplyFunction, __dst);
          *(_QWORD *)buf = xpc_connection_create_mach_service("com.apple.commcenter.atcs.xpc", *(dispatch_queue_t *)(*(_QWORD *)(v230 + 160) + 24), 1uLL);
          if (!*(_QWORD *)buf)
            *(_QWORD *)buf = xpc_null_create();
          (*(void (**)(_QWORD, uint64_t, _BYTE *))(**(_QWORD **)(v230 + 160) + 16))(*(_QWORD *)(v230 + 160), v230 + 264, buf);
          xpc_release(*(xpc_object_t *)buf);
          std::__tree<std::__value_type<std::string,QMux>,std::__map_value_compare<std::string,std::__value_type<std::string,QMux>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,QMux>>>::destroy(v235[0]);
          if (cf)
            CFRelease(cf);
          std::__tree<std::__value_type<std::string,QMux>,std::__map_value_compare<std::string,std::__value_type<std::string,QMux>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,QMux>>>::destroy((char *)v238);
          return;
        }
        operator delete((void *)v249);
        goto LABEL_496;
      }
LABEL_125:
      v85 = v230;
      if (!*(_QWORD *)(v230 + 160))
        goto LABEL_126;
      goto LABEL_140;
    }
LABEL_114:
    v85 = v230;
    if (*(_QWORD *)(v230 + 160))
      goto LABEL_140;
    goto LABEL_115;
  }
  v95 = *(NSObject **)(v230 + 40);
  if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    v96 = "Invalid registry, skipping QMI Server setup";
    goto LABEL_130;
  }
}

void sub_1BF4F6FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char *a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (a54 < 0)
    operator delete(__p);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v54 - 232));
  if (*(char *)(v54 - 201) < 0)
    operator delete(*(void **)(v54 - 224));
  if (*(char *)(v54 - 161) < 0)
    operator delete(*(void **)(v54 - 184));
  std::__tree<std::__value_type<std::string,QMux>,std::__map_value_compare<std::string,std::__value_type<std::string,QMux>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,QMux>>>::destroy(a33);
  _Unwind_Resume(a1);
}

void ___ZN19QMITransportService4initEv_block_invoke_7(_QWORD *a1, uint64_t **a2, const void **a3)
{
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  int v8;
  const void *v9;
  size_t v10;
  _QWORD *v11;
  int v12;
  uint64_t *v13;
  size_t v14;
  size_t v15;
  int v16;
  int v17;
  const void *v18;
  size_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  NSObject *v25;
  int v26;
  uint64_t **v27;
  uint64_t v28;
  void **v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;
  __int128 v47;
  char *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void *__p;
  std::__shared_weak_count *v59;
  char v60;
  _QWORD v61[2];
  _QWORD v62[3];
  _QWORD *v63;
  _BYTE buf[22];
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v5 = a1 + 6;
  v6 = (uint64_t *)a1[6];
  v7 = (_QWORD *)a1[4];
  if (!v6)
    goto LABEL_36;
  v8 = *((char *)a3 + 23);
  if (v8 >= 0)
    v9 = a3;
  else
    v9 = *a3;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)a3 + 23);
  else
    v10 = (size_t)a3[1];
  v11 = a1 + 6;
  do
  {
    while (1)
    {
      v12 = *((char *)v6 + 55);
      v13 = v12 >= 0 ? v6 + 4 : (uint64_t *)v6[4];
      v14 = v12 >= 0 ? *((unsigned __int8 *)v6 + 55) : v6[5];
      v15 = v10 >= v14 ? v14 : v10;
      v16 = memcmp(v13, v9, v15);
      if (v16)
        break;
      if (v14 >= v10)
        goto LABEL_23;
LABEL_9:
      v6 = (uint64_t *)v6[1];
      if (!v6)
        goto LABEL_24;
    }
    if (v16 < 0)
      goto LABEL_9;
LABEL_23:
    v11 = v6;
    v6 = (uint64_t *)*v6;
  }
  while (v6);
LABEL_24:
  if (v11 == v5)
    goto LABEL_36;
  v17 = *((char *)v11 + 55);
  if (v17 >= 0)
    v18 = v11 + 4;
  else
    v18 = (const void *)v11[4];
  if (v17 >= 0)
    v19 = *((unsigned __int8 *)v11 + 55);
  else
    v19 = v11[5];
  if (v19 >= v10)
    v20 = v10;
  else
    v20 = v19;
  v21 = memcmp(v9, v18, v20);
  if (!v21)
  {
    if (v10 >= v19)
      goto LABEL_37;
LABEL_36:
    v11 = (_QWORD *)a1[5];
    goto LABEL_37;
  }
  if (v21 < 0)
    goto LABEL_36;
LABEL_37:
  v22 = v11[8];
  v61[0] = v11[7];
  v61[1] = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = v7[5];
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    v26 = *((char *)a2 + 23);
    v27 = (uint64_t **)*a2;
    QMux::getName((QMux *)v61);
    v28 = (uint64_t)(v26 >= 0 ? a2 : v27);
    v29 = v60 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v28;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v29;
    _os_log_impl(&dword_1BF335000, v25, OS_LOG_TYPE_DEFAULT, "#I Mapping service %s to QMux %s", buf, 0x16u);
    if (v60 < 0)
      operator delete(__p);
  }
  *(_QWORD *)buf = *(_QWORD *)(v7[20] + 24);
  v30 = (std::__shared_weak_count *)operator new(0x30uLL);
  v30->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v30->__shared_owners_;
  v30->__shared_weak_owners_ = 0;
  v30->__vftable = (std::__shared_weak_count_vtbl *)off_1E790C278;
  v32 = &v30[1].__vftable;
  qmi::QMuxServerAccepter::QMuxServerAccepter();
  __p = &v30[1];
  v59 = v30;
  v62[0] = off_1E790C2C8;
  v62[1] = sValidateConnection;
  v63 = v62;
  qmi::QMuxServerAccepter::setValidationStrategy();
  v33 = v63;
  if (v63 == v62)
  {
    v34 = 4;
    v33 = v62;
LABEL_53:
    (*(void (**)(void))(*v33 + 8 * v34))();
  }
  else if (v63)
  {
    v34 = 5;
    goto LABEL_53;
  }
  *(_QWORD *)buf = v30 + 1;
  *(_QWORD *)&buf[8] = v30;
  do
    v35 = __ldxr(p_shared_owners);
  while (__stxr(v35 + 1, p_shared_owners));
  v37 = (char *)v7[34];
  v36 = v7[35];
  if ((unint64_t)v37 >= v36)
  {
    v38 = (char *)v7[33];
    v39 = (v37 - v38) >> 4;
    v40 = v39 + 1;
    if ((unint64_t)(v39 + 1) >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v41 = v36 - (_QWORD)v38;
    if (v41 >> 3 > v40)
      v40 = v41 >> 3;
    if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
      v42 = 0xFFFFFFFFFFFFFFFLL;
    else
      v42 = v40;
    if (v42 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v43 = (char *)operator new(16 * v42);
    v44 = &v43[16 * v39];
    *(_QWORD *)v44 = v32;
    *((_QWORD *)v44 + 1) = v30;
    v45 = &v43[16 * v42];
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v46 = v44 + 16;
    if (v37 == v38)
    {
      v7[33] = v44;
      v7[34] = v46;
      v7[35] = v45;
    }
    else
    {
      do
      {
        v47 = *((_OWORD *)v37 - 1);
        v37 -= 16;
        *((_OWORD *)v44 - 1) = v47;
        v44 -= 16;
        *(_QWORD *)v37 = 0;
        *((_QWORD *)v37 + 1) = 0;
      }
      while (v37 != v38);
      v37 = (char *)v7[33];
      v48 = (char *)v7[34];
      v7[33] = v44;
      v7[34] = v46;
      v7[35] = v45;
      while (v48 != v37)
      {
        v49 = (std::__shared_weak_count *)*((_QWORD *)v48 - 1);
        if (v49)
        {
          v50 = (unint64_t *)&v49->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        v48 -= 16;
      }
    }
    if (v37)
      operator delete(v37);
    v52 = *(std::__shared_weak_count **)&buf[8];
    v7[34] = v46;
    if (v52)
    {
      v53 = (unint64_t *)&v52->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
  }
  else
  {
    *(_QWORD *)v37 = v32;
    *((_QWORD *)v37 + 1) = v30;
    v7[34] = v37 + 16;
  }
  v55 = v59;
  if (v59)
  {
    v56 = (unint64_t *)&v59->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  QMux::~QMux((QMux *)v61);
}

void sub_1BF4F77B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  QMux::~QMux((QMux *)va);
  _Unwind_Resume(a1);
}

void sub_1BF4F77C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
    {
      std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
      QMux::~QMux((QMux *)&a13);
      _Unwind_Resume(a1);
    }
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  QMux::~QMux((QMux *)&a13);
  _Unwind_Resume(a1);
}

uint64_t sValidateConnection(void *a1)
{
  xpc_object_t v1;
  xpc_object_t v2;
  xpc_object_t v3;
  _xpc_connection_s *remote_connection;
  pid_t pid;
  pid_t v6;
  uint64_t v7;
  xpc_object_t value;
  xpc_object_t v9;
  char v10;
  unsigned __int8 v11;
  NSObject *v12;
  void *v14;
  void **v15;
  xpc_object_t object;
  void *v17[3];
  xpc_object_t xdict;
  void *__p[3];
  pid_t v20;
  __int16 v21;
  pid_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = a1;
    xpc_retain(a1);
    xdict = v1;
  }
  else
  {
    v1 = xpc_null_create();
    xdict = v1;
    if (!v1)
    {
      v2 = xpc_null_create();
      v1 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8A86C](v1) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v1);
    goto LABEL_9;
  }
  v2 = xpc_null_create();
LABEL_8:
  xdict = v2;
LABEL_9:
  xpc_release(v1);
  v3 = xdict;
  remote_connection = xpc_dictionary_get_remote_connection(xdict);
  pid = xpc_connection_get_pid(remote_connection);
  v6 = getpid();
  if (v6 != pid)
  {
    memset(v17, 170, sizeof(v17));
    value = xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E0DDCEF8]);
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    memset(__p, 0, sizeof(__p));
    xpc::dyn_cast_or_default();
    xpc_release(object);
    v9 = xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E0DDCF18]);
    __p[0] = v9;
    if (v9)
      xpc_retain(v9);
    else
      __p[0] = xpc_null_create();
    v10 = xpc::dyn_cast_or_default((xpc *)__p, 0);
    xpc_release(__p[0]);
    v7 = hasBasebandEntitlement(&xdict, v10 == 3);
    if ((v7 & 1) == 0)
    {
      {
        GetOsLogContext(void)::sOsLogContext = 0;
        qword_1ED7100E0 = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
      }
      if (GetOsLogContext(void)::onceToken == -1)
      {
        v12 = qword_1ED7100E0;
        if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_FAULT))
          goto LABEL_21;
LABEL_26:
        v14 = (void *)qmi::asShortString();
        v15 = v17;
        LODWORD(__p[0]) = 136446978;
        if (SHIBYTE(v17[2]) < 0)
          v15 = (void **)v17[0];
        *(void **)((char *)__p + 4) = v15;
        WORD2(__p[1]) = 2080;
        *(void **)((char *)&__p[1] + 6) = v14;
        HIWORD(__p[2]) = 1024;
        v20 = pid;
        v21 = 1024;
        v22 = v6;
        _os_log_fault_impl(&dword_1BF335000, v12, OS_LOG_TYPE_FAULT, "QMI client '%{public}s' lacks entitlements for svc '%s', remote pid = %d our pid = %d", (uint8_t *)__p, 0x22u);
        if ((SHIBYTE(v17[2]) & 0x80000000) == 0)
          goto LABEL_23;
        goto LABEL_22;
      }
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
      v12 = qword_1ED7100E0;
      if (os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_FAULT))
        goto LABEL_26;
    }
LABEL_21:
    if ((SHIBYTE(v17[2]) & 0x80000000) == 0)
    {
LABEL_23:
      v3 = xdict;
      goto LABEL_24;
    }
LABEL_22:
    operator delete(v17[0]);
    goto LABEL_23;
  }
  v7 = 1;
LABEL_24:
  xpc_release(v3);
  return v7;
}

void sub_1BF4F7B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, xpc_object_t object, xpc_object_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t *__copy_helper_block_e8_40c120_ZTSNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE4QMuxNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEEE(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  const void **v4;
  const void ***v5;
  const void **v6;
  const void ***v7;
  BOOL v8;

  result[6] = 0;
  v2 = (uint64_t)(result + 6);
  result[5] = (uint64_t)(result + 6);
  v3 = result + 5;
  result[7] = 0;
  v4 = *(const void ***)(a2 + 40);
  v5 = (const void ***)(a2 + 48);
  if (v4 != (const void **)(a2 + 48))
  {
    do
    {
      result = std::__tree<std::__value_type<std::string,QMux>,std::__map_value_compare<std::string,std::__value_type<std::string,QMux>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,QMux>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,QMux> const&>(v3, v2, v4 + 4, (uint64_t)(v4 + 4));
      v6 = (const void **)v4[1];
      if (v6)
      {
        do
        {
          v7 = (const void ***)v6;
          v6 = (const void **)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (const void ***)v4[2];
          v8 = *v7 == v4;
          v4 = (const void **)v7;
        }
        while (!v8);
      }
      v4 = (const void **)v7;
    }
    while (v7 != v5);
  }
  return result;
}

void sub_1BF4F7CA8(_Unwind_Exception *a1)
{
  char **v1;

  std::__tree<std::__value_type<std::string,QMux>,std::__map_value_compare<std::string,std::__value_type<std::string,QMux>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,QMux>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c120_ZTSNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE4QMuxNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEEE(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,QMux>,std::__map_value_compare<std::string,std::__value_type<std::string,QMux>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,QMux>>>::destroy(*(char **)(a1 + 48));
}

void `non-virtual thunk to'QMITransportService::init(QMITransportService *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN19QMITransportService4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_11_12;
  v1[4] = (char *)this - 104;
  ctu::SharedSynchronizable<QMITransportService>::execute_wrapped((uint64_t *)this - 4, (uint64_t)v1);
}

BOOL QMITransportService::engage(QMITransportService *this)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  capabilities::abs *v15;
  unint64_t v16;
  int64_t v17;
  NSObject *v18;
  dispatch_time_t v19;
  intptr_t v20;
  NSObject *v21;
  NSObject *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  char *v25;
  size_t v26;
  void *v27;
  void **v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  void *aBlock;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v39;
  QMITransportService *v40;
  unint64_t *v41;
  dispatch_group_t *p_group;
  void **v43;
  void **v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  dispatch_group_t group;
  void *__p[2];
  uint64_t v49;
  unsigned __int8 v50;
  __int128 block;
  void *v52;
  void *v53;
  char *v54;
  QMITransportService **v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v50 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v49 = 0;
  v2 = dispatch_group_create();
  v3 = v2;
  group = v2;
  if (v2)
  {
    dispatch_retain(v2);
    dispatch_group_enter(v3);
  }
  v5 = *((_QWORD *)this + 9);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  v45 = 0xAAAAAAAAAAAAAAAALL;
  v46 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  if (!v4 || (v6 = std::__shared_weak_count::lock(v4)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v45 = v5;
  v46 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v40 = this;
  v41 = &v45;
  p_group = &group;
  v43 = (void **)&v50;
  v44 = __p;
  v12 = MEMORY[0x1E0C809B0];
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 0x40000000;
  v52 = ___ZNK3ctu20SharedSynchronizableI19QMITransportServiceE20execute_wrapped_syncIZNS1_6engageEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  v53 = &__block_descriptor_tmp_86_0;
  v54 = (char *)this + 72;
  v55 = &v40;
  v13 = *((_QWORD *)this + 11);
  if (!*((_QWORD *)this + 12))
  {
    dispatch_sync(v13, &block);
    v14 = v46;
    if (!v46)
      goto LABEL_14;
    goto LABEL_13;
  }
  dispatch_async_and_wait(v13, &block);
  v14 = v46;
  if (v46)
LABEL_13:
    std::__shared_weak_count::__release_weak(v14);
LABEL_14:
  v15 = (capabilities::abs *)group;
  if (group)
  {
    dispatch_group_leave(group);
    v15 = (capabilities::abs *)group;
    if (group)
      dispatch_release(group);
  }
  v16 = capabilities::abs::engageTimeoutScalingFactor(v15);
  v17 = 27000000000;
  if (is_mul_ok(v16, 0x649534E00uLL))
  {
    v17 = 27000000000 * v16;
  }
  else
  {
    v18 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      LODWORD(block) = 134217984;
      *(_QWORD *)((char *)&block + 4) = 27000000000;
      _os_log_error_impl(&dword_1BF335000, v18, OS_LOG_TYPE_ERROR, "Scaled transport timeout overflowed, falling back to unscaled value %llu", (uint8_t *)&block, 0xCu);
    }
  }
  LOBYTE(v45) = -86;
  v19 = dispatch_time(0, v17);
  v20 = dispatch_group_wait(v3, v19);
  LOBYTE(v45) = v20 != 0;
  if (v20)
  {
    v21 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      LOWORD(block) = 0;
      _os_log_error_impl(&dword_1BF335000, v21, OS_LOG_TYPE_ERROR, "----------------- Timeout ----------------", (uint8_t *)&block, 2u);
    }
  }
  v40 = (QMITransportService *)&v50;
  v41 = &v45;
  p_group = (dispatch_group_t *)this;
  v43 = __p;
  *(_QWORD *)&block = v12;
  *((_QWORD *)&block + 1) = 0x40000000;
  v52 = ___ZNK3ctu20SharedSynchronizableI19QMITransportServiceE20execute_wrapped_syncIZNS1_6engageEvE3__1EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  v53 = &__block_descriptor_tmp_89_0;
  v54 = (char *)this + 72;
  v55 = &v40;
  v22 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12))
  {
    dispatch_async_and_wait(v22, &block);
    if (v50)
    {
LABEL_26:
      block = 0uLL;
      v23 = (std::__shared_weak_count *)*((_QWORD *)this + 39);
      if (!v23)
        goto LABEL_48;
      *((_QWORD *)&block + 1) = std::__shared_weak_count::lock(v23);
      if (!*((_QWORD *)&block + 1))
        goto LABEL_53;
      v24 = *((_QWORD *)this + 38);
      *(_QWORD *)&block = v24;
      if (!v24)
      {
LABEL_48:
        v32 = (std::__shared_weak_count *)*((_QWORD *)&block + 1);
        if (*((_QWORD *)&block + 1))
        {
          v33 = (unint64_t *)(*((_QWORD *)&block + 1) + 8);
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
LABEL_53:
        v29 = v50;
        if (!v3)
          goto LABEL_55;
        goto LABEL_54;
      }
      v25 = abm::kEventTransportIsReady[0];
      v26 = strlen(abm::kEventTransportIsReady[0]);
      if (v26 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v27 = (void *)v26;
      if (v26 >= 0x17)
      {
        v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v26 | 7) != 0x17)
          v30 = v26 | 7;
        v31 = v30 + 1;
        v28 = (void **)operator new(v30 + 1);
        __dst[1] = v27;
        v39 = v31 | 0x8000000000000000;
        __dst[0] = v28;
      }
      else
      {
        HIBYTE(v39) = v26;
        v28 = __dst;
        if (!v26)
          goto LABEL_42;
      }
      memmove(v28, v25, (size_t)v27);
LABEL_42:
      *((_BYTE *)v27 + (_QWORD)v28) = 0;
      aBlock = 0;
      cf = 0;
      Service::broadcastEvent(v24, (uint64_t)__dst, &cf, (const void **)&aBlock);
      if (aBlock)
        _Block_release(aBlock);
      if (cf)
        CFRelease(cf);
      if (SHIBYTE(v39) < 0)
        operator delete(__dst[0]);
      goto LABEL_48;
    }
  }
  else
  {
    dispatch_sync(v22, &block);
    if (v50)
      goto LABEL_26;
  }
  v29 = 0;
  if (v3)
LABEL_54:
    dispatch_release(v3);
LABEL_55:
  if (SHIBYTE(v49) < 0)
    operator delete(__p[0]);
  return v29 != 0;
}

void sub_1BF4F814C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,dispatch_group_t group,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL `non-virtual thunk to'QMITransportService::engage(QMITransportService *this)
{
  return QMITransportService::engage((QMITransportService *)((char *)this - 104));
}

BOOL QMITransportService::recover(QMITransportService *this)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  dispatch_time_t v7;
  intptr_t v8;
  NSObject *v9;
  NSObject *v10;
  int v11;
  QMITransportService *v13;
  dispatch_group_t *p_group;
  QMITransportService *v15;
  void **v16;
  dispatch_group_t group;
  void *__p[2];
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t block;
  uint64_t v22;
  void (*v23)(uint64_t);
  void *v24;
  char *v25;
  QMITransportService **v26;

  v20 = 0;
  v19 = 0x10AAAAAAAAAAAA00;
  *(_OWORD *)__p = *(_OWORD *)"Recovery failure";
  v2 = dispatch_group_create();
  v3 = v2;
  group = v2;
  if (v2)
  {
    dispatch_retain(v2);
    dispatch_group_enter(v3);
  }
  v13 = this;
  p_group = &group;
  v15 = (QMITransportService *)&v20;
  v4 = MEMORY[0x1E0C809B0];
  block = MEMORY[0x1E0C809B0];
  v22 = 0x40000000;
  v23 = ___ZNK3ctu20SharedSynchronizableI19QMITransportServiceE20execute_wrapped_syncIZNS1_7recoverEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  v24 = &__block_descriptor_tmp_90_0;
  v25 = (char *)this + 72;
  v26 = &v13;
  v5 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12))
  {
    dispatch_async_and_wait(v5, &block);
    v6 = group;
    if (!group)
      goto LABEL_9;
  }
  else
  {
    dispatch_sync(v5, &block);
    v6 = group;
    if (!group)
      goto LABEL_9;
  }
  dispatch_group_leave(v6);
  if (group)
    dispatch_release(group);
LABEL_9:
  v7 = dispatch_time(0, 27000000000);
  v8 = dispatch_group_wait(v3, v7);
  LOBYTE(group) = v8 != 0;
  if (v8)
  {
    v9 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      LOWORD(block) = 0;
      _os_log_error_impl(&dword_1BF335000, v9, OS_LOG_TYPE_ERROR, "----------------- Timeout ----------------", (uint8_t *)&block, 2u);
    }
  }
  v13 = (QMITransportService *)&v20;
  p_group = &group;
  v15 = this;
  v16 = __p;
  block = v4;
  v22 = 0x40000000;
  v23 = ___ZNK3ctu20SharedSynchronizableI19QMITransportServiceE20execute_wrapped_syncIZNS1_7recoverEvE3__1EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  v24 = &__block_descriptor_tmp_92_1;
  v25 = (char *)this + 72;
  v26 = &v13;
  v10 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12))
  {
    dispatch_async_and_wait(v10, &block);
    v11 = v20;
    if (!v3)
      goto LABEL_15;
    goto LABEL_14;
  }
  dispatch_sync(v10, &block);
  v11 = v20;
  if (v3)
LABEL_14:
    dispatch_release(v3);
LABEL_15:
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  return v11 != 0;
}

BOOL `non-virtual thunk to'QMITransportService::recover(QMITransportService *this)
{
  return QMITransportService::recover((QMITransportService *)((char *)this - 104));
}

void QMITransportService::enterLowPower(uint64_t a1, NSObject **a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  _QWORD v9[5];
  _QWORD v10[5];
  dispatch_group_t group;
  _QWORD *v12;
  uint64_t block;
  uint64_t v14;
  _QWORD *(*v15)(uint64_t);
  void *v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = a1 + 72;
  v4 = MEMORY[0x1E0C809B0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1174405120;
  v10[2] = ___ZN19QMITransportService13enterLowPowerEN8dispatch13group_sessionE_block_invoke;
  v10[3] = &__block_descriptor_tmp_13_11;
  v5 = *a2;
  v10[4] = a1;
  group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  v12 = v10;
  block = v4;
  v14 = 0x40000000;
  v15 = ___ZNK3ctu20SharedSynchronizableI19QMITransportServiceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v16 = &__block_descriptor_tmp_82_0;
  v17 = v3;
  v18 = &v12;
  v6 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(a1 + 96))
    dispatch_async_and_wait(v6, &block);
  else
    dispatch_sync(v6, &block);
  v9[0] = v4;
  v9[1] = 0x40000000;
  v9[2] = ___ZN19QMITransportService13enterLowPowerEN8dispatch13group_sessionE_block_invoke_14;
  v9[3] = &__block_descriptor_tmp_22_7;
  v9[4] = a1;
  v12 = v9;
  block = v4;
  v14 = 0x40000000;
  v15 = ___ZNK3ctu20SharedSynchronizableI19QMITransportServiceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v16 = &__block_descriptor_tmp_82_0;
  v17 = v3;
  v18 = &v12;
  v7 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(a1 + 96))
  {
    dispatch_async_and_wait(v7, &block);
    v8 = group;
    if (!group)
      return;
  }
  else
  {
    dispatch_sync(v7, &block);
    v8 = group;
    if (!group)
      return;
  }
  dispatch_group_leave(v8);
  if (group)
    dispatch_release(group);
}

void ___ZN19QMITransportService13enterLowPowerEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  char *v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  BOOL v36;
  int64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  unint64_t v41;
  char *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  unint64_t v49;
  char *v50;
  char *v51;
  unint64_t v52;
  int64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  char *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  unint64_t v73;
  uint64_t v74;
  __int128 *v75;
  _OWORD *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  int64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  __int128 *v93;
  _OWORD *v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  NSObject *v100;
  NSObject *v101;
  const void *v102;
  void *v103;
  const void *v104;
  NSObject *v105;
  void *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  int64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  __int128 *v119;
  _OWORD *v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v125;
  _QWORD block[4];
  void *aBlock;
  int v128;

  v1 = a1;
  v2 = *(_QWORD **)(a1 + 32);
  v4 = (char *)v2[41];
  v3 = (char *)v2[42];
  v5 = v3 - v4;
  v6 = v4;
  if (v3 == v4)
    v7 = 0;
  else
    v7 = ((v3 - v4) << 6) - 1;
  v8 = v2[44];
  v9 = v2[45] + v8;
  if (v7 == v9)
  {
    if (v8 >= 0x200)
    {
      v2[44] = v8 - 512;
      v10 = v4 + 8;
      v11 = *(_QWORD *)v4;
      v2[41] = v4 + 8;
      if (v3 != (char *)v2[43])
      {
LABEL_93:
        *(_QWORD *)v3 = v11;
        goto LABEL_94;
      }
      v12 = (char *)v2[40];
      if (v10 > v12)
      {
        v13 = (v10 - v12) >> 3;
        if (v13 >= -1)
          v14 = v13 + 1;
        else
          v14 = v13 + 2;
        v15 = v14 >> 1;
        v16 = -v15;
        v17 = &v10[-8 * v15];
        v18 = v3 - v10;
        if (v3 != v10)
        {
          memmove(&v10[-8 * v15], v10, v3 - v10);
          v3 = (char *)v2[41];
        }
        v19 = &v3[8 * v16];
        v3 = &v17[v18];
        v2[41] = v19;
        v2[42] = &v17[v18];
        goto LABEL_93;
      }
      v31 = (v3 - v12) >> 2;
      if (v3 == v12)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v37 = v3 - v10;
        v36 = v3 == v10;
        v3 = v35;
        if (v36)
          goto LABEL_91;
        v3 = &v35[v37 & 0xFFFFFFFFFFFFFFF8];
        v38 = v37 - 8;
        if ((unint64_t)(v37 - 8) >= 0x38)
        {
          v90 = &v34[8 * v32];
          v39 = v90;
          if ((unint64_t)(v90 - v10) >= 0x20)
          {
            v91 = (v38 >> 3) + 1;
            v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
            v39 = &v35[v92];
            v10 += v92;
            v93 = (__int128 *)(v4 + 24);
            v94 = v90 + 16;
            v95 = v91 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v96 = *v93;
              *(v94 - 1) = *(v93 - 1);
              *v94 = v96;
              v93 += 2;
              v94 += 2;
              v95 -= 4;
            }
            while (v95);
            if (v91 == (v91 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              v2[40] = v34;
              v2[41] = v35;
              v2[42] = v3;
              v2[43] = &v34[v33];
              if (v12)
              {
                operator delete(v12);
                v3 = (char *)v2[42];
              }
              goto LABEL_93;
            }
          }
        }
        else
        {
          v39 = &v34[8 * v32];
        }
        do
        {
          v97 = *(_QWORD *)v10;
          v10 += 8;
          *(_QWORD *)v39 = v97;
          v39 += 8;
        }
        while (v39 != v3);
        goto LABEL_91;
      }
LABEL_123:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    v20 = (char *)v2[43];
    v21 = (char *)v2[40];
    if (v5 >> 3 >= (unint64_t)((v20 - v21) >> 3))
    {
      v125 = v5 >> 3;
      if (v20 == v21)
        v24 = 1;
      else
        v24 = (v20 - v21) >> 2;
      if (!(v24 >> 61))
      {
        v25 = (char *)operator new(8 * v24);
        v26 = operator new(0x1000uLL);
        v27 = &v25[8 * v125];
        v28 = &v25[8 * v24];
        if (v125 == v24)
        {
          v29 = v26;
          if (v5 < 1)
          {
            if (v3 == v4)
              v41 = 1;
            else
              v41 = v5 >> 2;
            if (v41 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v27 = (char *)operator new(8 * v41);
            v28 = &v27[8 * v41];
            operator delete(v25);
            v6 = (char *)v2[41];
            v3 = (char *)v2[42];
            v25 = v27;
          }
          else
          {
            v30 = v125 + 2;
            if (v125 >= -1)
              v30 = v125 + 1;
            v27 -= 8 * (v30 >> 1);
          }
          v26 = v29;
        }
        *(_QWORD *)v27 = v26;
        v42 = v27 + 8;
        if (v3 != v6)
        {
          do
          {
            if (v27 == v25)
            {
              if (v42 >= v28)
              {
                if (v28 == v25)
                  v49 = 1;
                else
                  v49 = (v28 - v25) >> 2;
                if (v49 >> 61)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v50 = (char *)operator new(8 * v49);
                v51 = v50;
                v52 = (v49 + 3) >> 2;
                v27 = &v50[8 * v52];
                v53 = v42 - v25;
                v36 = v42 == v25;
                v42 = v27;
                if (!v36)
                {
                  v42 = &v27[v53 & 0xFFFFFFFFFFFFFFF8];
                  v54 = v53 - 8;
                  v55 = &v50[8 * v52];
                  v56 = v25;
                  if (v54 < 0x38)
                    goto LABEL_127;
                  v57 = 8 * v52;
                  v55 = &v50[8 * v52];
                  v56 = v25;
                  if ((unint64_t)(v55 - v25) < 0x20)
                    goto LABEL_127;
                  v58 = (v54 >> 3) + 1;
                  v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
                  v55 = &v27[v59];
                  v56 = &v25[v59];
                  v60 = (__int128 *)(v25 + 16);
                  v61 = &v50[v57 + 16];
                  v62 = v58 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v63 = *v60;
                    *((_OWORD *)v61 - 1) = *(v60 - 1);
                    *(_OWORD *)v61 = v63;
                    v60 += 2;
                    v61 += 32;
                    v62 -= 4;
                  }
                  while (v62);
                  if (v58 != (v58 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_127:
                    do
                    {
                      v64 = *(_QWORD *)v56;
                      v56 += 8;
                      *(_QWORD *)v55 = v64;
                      v55 += 8;
                    }
                    while (v55 != v42);
                  }
                }
                v28 = &v50[8 * v49];
                operator delete(v25);
                v25 = v51;
              }
              else
              {
                v45 = (v28 - v42) >> 3;
                if (v45 >= -1)
                  v46 = v45 + 1;
                else
                  v46 = v45 + 2;
                v47 = v46 >> 1;
                v27 = &v25[8 * (v46 >> 1)];
                v48 = v25;
                if (v42 != v25)
                {
                  memmove(v27, v25, v42 - v25);
                  v48 = v42;
                }
                v42 = (char *)v48 + 8 * v47;
              }
            }
            v44 = *((_QWORD *)v3 - 1);
            v3 -= 8;
            *((_QWORD *)v27 - 1) = v44;
            v27 -= 8;
          }
          while (v3 != (char *)v2[41]);
        }
        v43 = (void *)v2[40];
        v2[40] = v25;
        v2[41] = v27;
        v2[42] = v42;
        v2[43] = v28;
        v1 = a1;
        if (v43)
          operator delete(v43);
        goto LABEL_95;
      }
      goto LABEL_123;
    }
    v22 = operator new(0x1000uLL);
    v23 = v22;
    if (v20 != v3)
    {
      *(_QWORD *)v3 = v22;
LABEL_94:
      v2[42] += 8;
LABEL_95:
      v6 = (char *)v2[41];
      v9 = v2[45] + v2[44];
      goto LABEL_96;
    }
    if (v4 == v21)
    {
      v65 = (v20 - v4) >> 2;
      if (v3 == v4)
        v65 = 1;
      if (v65 >> 61)
        goto LABEL_123;
      v66 = (v65 + 3) >> 2;
      v67 = 8 * v65;
      v68 = (char *)operator new(8 * v65);
      v40 = &v68[8 * v66];
      v69 = v40;
      if (v3 != v4)
      {
        v69 = &v40[8 * (v5 >> 3)];
        v70 = &v68[8 * v66];
        v71 = v4;
        if ((unint64_t)(v5 - 8) < 0x38)
          goto LABEL_128;
        v72 = &v68[8 * v66];
        v70 = v72;
        v71 = v4;
        if ((unint64_t)(v72 - v4) < 0x20)
          goto LABEL_128;
        v73 = ((unint64_t)(v5 - 8) >> 3) + 1;
        v74 = 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
        v70 = &v40[v74];
        v71 = &v4[v74];
        v75 = (__int128 *)(v4 + 16);
        v76 = v72 + 16;
        v77 = v73 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v78 = *v75;
          *(v76 - 1) = *(v75 - 1);
          *v76 = v78;
          v75 += 2;
          v76 += 2;
          v77 -= 4;
        }
        while (v77);
        if (v73 != (v73 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_128:
          do
          {
            v79 = *(_QWORD *)v71;
            v71 += 8;
            *(_QWORD *)v70 = v79;
            v70 += 8;
          }
          while (v70 != v69);
        }
      }
      v2[40] = v68;
      v2[41] = v40;
      v2[42] = v69;
      v2[43] = &v68[v67];
      if (v4)
      {
        operator delete(v4);
        v40 = (char *)v2[41];
      }
    }
    else
    {
      v40 = v4;
    }
    *((_QWORD *)v40 - 1) = v23;
    v80 = (char *)v2[41];
    v81 = (char *)v2[42];
    v2[41] = v80 - 8;
    v82 = *((_QWORD *)v80 - 1);
    v2[41] = v80;
    if (v81 != (char *)v2[43])
    {
LABEL_78:
      *(_QWORD *)v81 = v82;
      goto LABEL_94;
    }
    v83 = (char *)v2[40];
    if (v80 > v83)
    {
      v84 = (v80 - v83) >> 3;
      if (v84 >= -1)
        v85 = v84 + 1;
      else
        v85 = v84 + 2;
      v86 = v85 >> 1;
      v87 = -v86;
      v88 = &v80[-8 * v86];
      v89 = v81 - v80;
      if (v81 != v80)
      {
        memmove(&v80[-8 * v86], v80, v81 - v80);
        v80 = (char *)v2[41];
      }
      v2[41] = &v80[8 * v87];
      v2[42] = &v88[v89];
      *(_QWORD *)&v88[v89] = v82;
      goto LABEL_94;
    }
    v107 = (v81 - v83) >> 2;
    if (v81 == v83)
      v107 = 1;
    if (v107 >> 61)
      goto LABEL_123;
    v108 = v107 >> 2;
    v109 = 8 * v107;
    v110 = (char *)operator new(8 * v107);
    v111 = &v110[8 * v108];
    v112 = v81 - v80;
    v36 = v81 == v80;
    v81 = v111;
    if (!v36)
    {
      v81 = &v111[v112 & 0xFFFFFFFFFFFFFFF8];
      v113 = v112 - 8;
      if ((unint64_t)(v112 - 8) < 0x38)
      {
        v114 = &v110[8 * v108];
        do
        {
LABEL_119:
          v123 = *(_QWORD *)v80;
          v80 += 8;
          *(_QWORD *)v114 = v123;
          v114 += 8;
        }
        while (v114 != v81);
        goto LABEL_120;
      }
      v115 = &v110[8 * v108];
      v114 = v115;
      if ((unint64_t)(v115 - v80) < 0x20)
        goto LABEL_119;
      v116 = (v113 >> 3) + 1;
      v117 = 8 * (v116 & 0x3FFFFFFFFFFFFFFCLL);
      v114 = &v111[v117];
      v118 = &v80[v117];
      v119 = (__int128 *)(v80 + 16);
      v120 = v115 + 16;
      v121 = v116 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v122 = *v119;
        *(v120 - 1) = *(v119 - 1);
        *v120 = v122;
        v119 += 2;
        v120 += 2;
        v121 -= 4;
      }
      while (v121);
      v80 = v118;
      if (v116 != (v116 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_119;
    }
LABEL_120:
    v2[40] = v110;
    v2[41] = v111;
    v2[42] = v81;
    v2[43] = &v110[v109];
    if (v83)
    {
      operator delete(v83);
      v81 = (char *)v2[42];
    }
    goto LABEL_78;
  }
LABEL_96:
  v98 = *(_QWORD *)&v6[(v9 >> 6) & 0x3FFFFFFFFFFFFF8];
  v99 = v9 & 0x1FF;
  v100 = *(NSObject **)(v1 + 40);
  *(_QWORD *)(v98 + 8 * v99) = v100;
  if (v100)
  {
    dispatch_retain(v100);
    v101 = *(NSObject **)(v98 + 8 * v99);
    if (v101)
      dispatch_group_enter(v101);
  }
  ++v2[45];
  v102 = (const void *)v2[48];
  if (v102 && v2[49])
  {
    v103 = _Block_copy(v102);
    v104 = v103;
    v105 = v2[49];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJNS1_6StatusEEEEvDpT__block_invoke;
    block[3] = &__block_descriptor_tmp_93_1;
    if (v103)
      v106 = _Block_copy(v103);
    else
      v106 = 0;
    aBlock = v106;
    v128 = 2;
    dispatch_async(v105, block);
    if (aBlock)
      _Block_release(aBlock);
    if (v104)
      _Block_release(v104);
  }
}

void sub_1BF4F8C94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZN19QMITransportService13enterLowPowerEN8dispatch13group_sessionE_block_invoke_14(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _BYTE *v3;
  NSObject *v4;
  NSObject *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  NSObject *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD block[5];
  _QWORD v14[2];
  uint64_t (*v15)(uint64_t, QMux *);
  void *v16;
  uint64_t v17;
  dispatch_object_t object;
  uint8_t buf[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v2, OS_LOG_TYPE_DEFAULT, "#I ----------------- Entering Low Power ----------------", buf, 2u);
  }
  *(_BYTE *)(v1 + 432) = 0;
  if (*(char *)(v1 + 431) < 0)
  {
    *(_QWORD *)(v1 + 416) = 0;
    v3 = *(_BYTE **)(v1 + 408);
  }
  else
  {
    v3 = (_BYTE *)(v1 + 408);
    *(_BYTE *)(v1 + 431) = 0;
  }
  *v3 = 0;
  v4 = dispatch_group_create();
  v5 = v4;
  v6 = *(_QWORD **)(v1 + 240);
  v7 = (_QWORD *)(v1 + 248);
  v8 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 1174405120;
  v15 = ___ZN19QMITransportService13enterLowPowerEN8dispatch13group_sessionE_block_invoke_16;
  v16 = &__block_descriptor_tmp_18_8;
  v17 = v1;
  object = v4;
  if (v4)
    dispatch_retain(v4);
  if (v6 != v7)
  {
    do
    {
      v15((uint64_t)v14, (QMux *)(v6 + 4));
      v10 = (_QWORD *)v6[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v6[2];
          v12 = *v11 == (_QWORD)v6;
          v6 = v11;
        }
        while (!v12);
      }
      v6 = v11;
    }
    while (v11 != v7);
  }
  v9 = *(NSObject **)(v1 + 88);
  block[0] = v8;
  block[1] = 0x40000000;
  block[2] = ___ZN19QMITransportService13enterLowPowerEN8dispatch13group_sessionE_block_invoke_19;
  block[3] = &__block_descriptor_tmp_21_7;
  block[4] = v1;
  dispatch_group_notify(v5, v9, block);
  if (object)
    dispatch_release(object);
  if (v5)
    dispatch_release(v5);
}

void sub_1BF4F8E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, dispatch_object_t object)
{
  NSObject *v20;

  if (object)
  {
    dispatch_release(object);
    if (!v20)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v20)
  {
    goto LABEL_3;
  }
  dispatch_release(v20);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN19QMITransportService13enterLowPowerEN8dispatch13group_sessionE_block_invoke_16(uint64_t a1, QMux *a2)
{
  NSObject *v3;
  void *p_p;
  void *__p;
  char v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    QMux::getName(a2);
    if (v7 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315394;
    v9 = "enterLowPower_block_invoke";
    v10 = 2080;
    v11 = p_p;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I %s: Power Down %s", buf, 0x16u);
    if (v7 < 0)
      operator delete(__p);
  }
  return QMux::enterPowerMode();
}

void ___ZN19QMITransportService13enterLowPowerEN8dispatch13group_sessionE_block_invoke_19(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  _QWORD v23[2];
  uint64_t (*v24)(uint64_t, QMux *);
  void *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint8_t buf[4];
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD **)(a1 + 32);
  v2 = &v27;
  v27 = 0;
  v28 = &v27;
  v29 = 0x2000000000;
  v30 = 0;
  v3 = (_QWORD *)v1[30];
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 0x40000000;
  v24 = ___ZN19QMITransportService13enterLowPowerEN8dispatch13group_sessionE_block_invoke_2;
  v25 = &unk_1E790BE00;
  v26 = &v27;
  if (v3 == v1 + 31)
  {
    v4 = v1[5];
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      goto LABEL_4;
    goto LABEL_3;
  }
  do
  {
    v24((uint64_t)v23, (QMux *)(v3 + 4));
    v20 = (_QWORD *)v3[1];
    if (v20)
    {
      do
      {
        v21 = v20;
        v20 = (_QWORD *)*v20;
      }
      while (v20);
    }
    else
    {
      do
      {
        v21 = (_QWORD *)v3[2];
        v22 = *v21 == (_QWORD)v3;
        v3 = v21;
      }
      while (!v22);
    }
    v3 = v21;
  }
  while (v21 != v1 + 31);
  v2 = v28;
  v4 = v1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
LABEL_3:
    v5 = v2[3];
    v6 = v1[32];
    *(_DWORD *)buf = 134218240;
    v34 = v5;
    v35 = 2048;
    v36 = v6;
    _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I QMux powered down %zd of %zd QMux's", buf, 0x16u);
    v2 = v28;
  }
LABEL_4:
  if (v1[32] == v2[3])
  {
    v7 = (std::__shared_weak_count *)v1[10];
    if (!v7 || (v8 = v1[9], (v9 = std::__shared_weak_count::lock(v7)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v10 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    v15 = (_QWORD *)v1[18];
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
    v32 = 0;
    v17 = operator new(0x20uLL);
    *v17 = &off_1E790C5D8;
    v17[1] = v1;
    v17[2] = v8;
    v17[3] = v10;
    v32 = v17;
    RouterIPCController::sleep(v15, v31);
    v18 = v32;
    if (v32 == v31)
    {
      v19 = 4;
      v18 = v31;
    }
    else
    {
      if (!v32)
      {
LABEL_29:
        std::__shared_weak_count::__release_weak(v10);
        goto LABEL_30;
      }
      v19 = 5;
    }
    (*(void (**)(void))(*v18 + 8 * v19))();
    goto LABEL_29;
  }
LABEL_30:
  _Block_object_dispose(&v27, 8);
}

void sub_1BF4F9204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22)
{
  std::__shared_weak_count *v22;
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a22;
  if (a22 == v23)
  {
    v26 = 4;
    v25 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  std::__shared_weak_count::__release_weak(v22);
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1BF4F9260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BF4F9278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN19QMITransportService13enterLowPowerEN8dispatch13group_sessionE_block_invoke_2(uint64_t a1, QMux *this)
{
  uint64_t result;

  result = QMux::isPoweredDown(this);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += result;
  return result;
}

void `non-virtual thunk to'QMITransportService::enterLowPower(uint64_t a1, NSObject **a2)
{
  QMITransportService::enterLowPower(a1 - 104, a2);
}

BOOL QMITransportService::tearDown(QMITransportService *this)
{
  char *v2;
  uint64_t v3;
  NSObject *v4;
  char *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  dispatch_time_t v9;
  intptr_t v10;
  NSObject *v11;
  NSObject *v12;
  int v13;
  QMITransportService *v15;
  dispatch_group_t *p_group;
  QMITransportService *v17;
  void **v18;
  dispatch_group_t group;
  _QWORD v20[5];
  void *__p[2];
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t block;
  uint64_t v25;
  void *v26;
  void *v27;
  char *v28;
  QMITransportService **v29;

  v23 = 0;
  v22 = 0x11AAAAAAAAAA0065;
  *(_OWORD *)__p = *(_OWORD *)"Tear down failure";
  v2 = (char *)this + 72;
  v3 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 0x40000000;
  v20[2] = ___ZN19QMITransportService8tearDownEv_block_invoke;
  v20[3] = &__block_descriptor_tmp_24_3;
  v20[4] = this;
  v15 = (QMITransportService *)v20;
  block = MEMORY[0x1E0C809B0];
  v25 = 0x40000000;
  v26 = ___ZNK3ctu20SharedSynchronizableI19QMITransportServiceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v27 = &__block_descriptor_tmp_82_0;
  v28 = (char *)this + 72;
  v29 = &v15;
  v5 = (char *)this + 88;
  v4 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v5 + 1))
  {
    dispatch_async_and_wait(v4, &block);
    v6 = dispatch_group_create();
    group = v6;
    if (!v6)
      goto LABEL_4;
    goto LABEL_3;
  }
  dispatch_sync(v4, &block);
  v6 = dispatch_group_create();
  group = v6;
  if (v6)
  {
LABEL_3:
    dispatch_retain(v6);
    dispatch_group_enter(v6);
  }
LABEL_4:
  v15 = this;
  p_group = &group;
  v17 = (QMITransportService *)&v23;
  block = v3;
  v25 = 0x40000000;
  v26 = ___ZNK3ctu20SharedSynchronizableI19QMITransportServiceE20execute_wrapped_syncIZNS1_8tearDownEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  v27 = &__block_descriptor_tmp_95;
  v28 = v2;
  v29 = &v15;
  v7 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12))
  {
    dispatch_async_and_wait(v7, &block);
    v8 = group;
    if (!group)
      goto LABEL_12;
  }
  else
  {
    dispatch_sync(v7, &block);
    v8 = group;
    if (!group)
      goto LABEL_12;
  }
  dispatch_group_leave(v8);
  if (group)
    dispatch_release(group);
LABEL_12:
  v9 = dispatch_time(0, 27000000000);
  v10 = dispatch_group_wait(v6, v9);
  LOBYTE(group) = v10 != 0;
  if (v10)
  {
    v11 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(block) = 0;
      _os_log_error_impl(&dword_1BF335000, v11, OS_LOG_TYPE_ERROR, "----------------- Timeout ----------------", (uint8_t *)&block, 2u);
    }
  }
  v15 = (QMITransportService *)&v23;
  p_group = &group;
  v17 = this;
  v18 = __p;
  block = v3;
  v25 = 0x40000000;
  v26 = ___ZNK3ctu20SharedSynchronizableI19QMITransportServiceE20execute_wrapped_syncIZNS1_8tearDownEvE3__1EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  v27 = &__block_descriptor_tmp_97;
  v28 = v2;
  v29 = &v15;
  v12 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12))
  {
    dispatch_async_and_wait(v12, &block);
    v13 = v23;
    if (!v6)
      goto LABEL_18;
    goto LABEL_17;
  }
  dispatch_sync(v12, &block);
  v13 = v23;
  if (v6)
LABEL_17:
    dispatch_release(v6);
LABEL_18:
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
  return v13 != 0;
}

void ___ZN19QMITransportService8tearDownEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  int64x2_t v6;
  void *v7;
  void *v8;

  v1 = *(_QWORD *)(a1 + 32);
  QMITransportService::cancelWakeRequest_sync((QMITransportService *)v1);
  if (*(_QWORD *)(v1 + 360))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(v1 + 328) + ((*(_QWORD *)(v1 + 352) >> 6) & 0x3FFFFFFFFFFFFF8));
    v3 = *(_QWORD *)(v1 + 352) & 0x1FFLL;
    v4 = *(NSObject **)(v2 + 8 * v3);
    if (v4)
    {
      dispatch_group_leave(v4);
      v5 = *(NSObject **)(v2 + 8 * v3);
      if (v5)
        dispatch_release(v5);
    }
    v6 = vaddq_s64(*(int64x2_t *)(v1 + 352), (int64x2_t)xmmword_1BF547DC0);
    *(int64x2_t *)(v1 + 352) = v6;
    if (v6.i64[0] >= 0x400uLL)
    {
      operator delete(**(void ***)(v1 + 328));
      *(_QWORD *)(v1 + 328) += 8;
      *(_QWORD *)(v1 + 352) -= 512;
    }
    v7 = *(void **)(v1 + 368);
    *(_QWORD *)(v1 + 368) = 0;
    if (v7)
    {
      TelephonyBasebandWatchdogStop();
      operator delete(v7);
    }
    v8 = *(void **)(v1 + 376);
    *(_QWORD *)(v1 + 376) = 0;
    if (v8)
    {
      TelephonyBasebandWatchdogStop();
      operator delete(v8);
    }
  }
}

BOOL `non-virtual thunk to'QMITransportService::tearDown(QMITransportService *this)
{
  return QMITransportService::tearDown((QMITransportService *)((char *)this - 104));
}

void QMITransportService::exitLowPower(uint64_t a1, NSObject **a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  _QWORD v8[5];
  dispatch_group_t group;
  _QWORD *v10;
  _QWORD block[6];

  v3 = a1 + 72;
  v4 = MEMORY[0x1E0C809B0];
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1174405120;
  v8[2] = ___ZN19QMITransportService12exitLowPowerEN8dispatch13group_sessionE_block_invoke;
  v8[3] = &__block_descriptor_tmp_25_7;
  v5 = *a2;
  v8[4] = a1;
  group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  v10 = v8;
  block[0] = v4;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19QMITransportServiceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_82_0;
  block[4] = v3;
  block[5] = &v10;
  v6 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(a1 + 96))
  {
    dispatch_async_and_wait(v6, block);
    v7 = group;
    if (!group)
      return;
  }
  else
  {
    dispatch_sync(v6, block);
    v7 = group;
    if (!group)
      return;
  }
  dispatch_group_leave(v7);
  if (group)
    dispatch_release(group);
}

void ___ZN19QMITransportService12exitLowPowerEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  QMITransportService *v2;
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  NSObject *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint8_t buf[8];
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = *(QMITransportService **)(a1 + 32);
  v3 = *((_QWORD *)v2 + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I ----------------- Exiting Low Power ----------------", buf, 2u);
  }
  QMITransportService::updateWakeReason_sync(v2);
  v4 = dispatch_group_create();
  v5 = (std::__shared_weak_count *)*((_QWORD *)v2 + 10);
  if (!v5 || (v6 = *((_QWORD *)v2 + 9), (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  v13 = (_QWORD *)*((_QWORD *)v2 + 18);
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v15 = *(NSObject **)(a1 + 40);
  if (v15)
  {
    dispatch_retain(v15);
    dispatch_group_enter(v15);
  }
  if (v4)
    dispatch_retain(v4);
  v21 = 0;
  v16 = operator new(0x30uLL);
  *v16 = &off_1E790C758;
  v16[1] = v2;
  v16[2] = v6;
  v16[3] = v8;
  v16[4] = v15;
  if (v15)
  {
    dispatch_retain(v15);
    dispatch_group_enter(v15);
  }
  v16[5] = v4;
  v21 = v16;
  RouterIPCController::wake(v13, v20);
  v17 = v21;
  if (v21 == v20)
  {
    v18 = 4;
    v17 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_24;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_24:
  if (v15)
  {
    dispatch_group_leave(v15);
    dispatch_release(v15);
  }
  std::__shared_weak_count::__release_weak(v8);
  if (v4)
    dispatch_release(v4);
}

void sub_1BF4F9940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  NSObject *v19;
  std::__shared_weak_count *v20;
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a19;
  if (a19 == v21)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  _ZZZN19QMITransportService12exitLowPowerEN8dispatch13group_sessionEEUb1_EN3__7D1Ev(&a10);
  std::__shared_weak_count::__release_weak(v20);
  if (!v19)
    _Unwind_Resume(a1);
  dispatch_release(v19);
  _Unwind_Resume(a1);
}

void QMITransportService::updateWakeReason_sync(QMITransportService *this)
{
  _QWORD *v2;
  char SystemWakeReason;
  NSObject *v4;
  char v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)((char *)this + 408);
  if ((*((char *)this + 431) & 0x80000000) == 0)
  {
    SystemWakeReason = TelephonyUtilGetSystemWakeReason();
    v4 = *((_QWORD *)this + 5);
    if ((SystemWakeReason & 1) != 0)
      goto LABEL_3;
LABEL_9:
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v6) = 0;
      _os_log_error_impl(&dword_1BF335000, v4, OS_LOG_TYPE_ERROR, "Failed to fetch system wake reason", (uint8_t *)&v6, 2u);
      if (!*((_QWORD *)this + 48))
        return;
      goto LABEL_11;
    }
LABEL_10:
    if (!*((_QWORD *)this + 48))
      return;
    goto LABEL_11;
  }
  v5 = TelephonyUtilGetSystemWakeReason();
  v4 = *((_QWORD *)this + 5);
  if ((v5 & 1) == 0)
    goto LABEL_9;
LABEL_3:
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    goto LABEL_10;
  if (*((char *)this + 431) < 0)
    v2 = (_QWORD *)*v2;
  v6 = 136315138;
  v7 = v2;
  _os_log_impl(&dword_1BF335000, v4, OS_LOG_TYPE_DEFAULT, "#I System wake reason: %s", (uint8_t *)&v6, 0xCu);
  if (*((_QWORD *)this + 48))
  {
LABEL_11:
    if (*((_QWORD *)this + 49))
      QMITransportService::getWakeReason_sync(this, 2);
  }
}

_QWORD *_ZZZN19QMITransportService12exitLowPowerEN8dispatch13group_sessionEEUb1_EN3__7D1Ev(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;

  v2 = a1[4];
  if (v2)
    dispatch_release(v2);
  v3 = a1[3];
  if (v3)
  {
    dispatch_group_leave(v3);
    v4 = a1[3];
    if (v4)
      dispatch_release(v4);
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void `non-virtual thunk to'QMITransportService::exitLowPower(uint64_t a1, NSObject **a2)
{
  QMITransportService::exitLowPower(a1 - 104, a2);
}

void QMITransportService::dumpState(QMITransportService *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN19QMITransportService9dumpStateEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_27_8;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19QMITransportServiceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_82_0;
  block[4] = (char *)this + 72;
  block[5] = &v4;
  v2 = (char *)this + 88;
  v1 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void ___ZN19QMITransportService9dumpStateEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  NSObject *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  uint8_t v7[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(v1 + 216);
  if (v2 != (_QWORD *)(v1 + 224))
  {
    do
    {
      QMux::dumpState((QMux *)(v2 + 4));
      v4 = (_QWORD *)v2[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)v2[2];
          v6 = *v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != (_QWORD *)(v1 + 224));
  }
  v3 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I ----------------- Dump State ----------------", v7, 2u);
  }
}

void `non-virtual thunk to'QMITransportService::dumpState(QMITransportService *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN19QMITransportService9dumpStateEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_27_8;
  v3[4] = (char *)this - 104;
  v4 = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19QMITransportServiceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_82_0;
  block[4] = (char *)this - 32;
  block[5] = &v4;
  v2 = (char *)this - 16;
  v1 = *((_QWORD *)this - 2);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void QMITransportService::reportPowerDownMessages_sync(QMITransportService *this)
{
  xpc_object_t v2;
  uint64_t v3;
  xpc_object_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  BOOL v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  xpc_object_t v12;
  xpc_object_t v13;
  std::__shared_weak_count *v14;
  xpc_object_t v15;
  xpc_object_t v16;
  uint64_t v17;
  char *v18;
  size_t v19;
  void *v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  const void *v26;
  xpc_object_t v27;
  void *__dst[2];
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  _QWORD v32[2];
  void (*v33)(uint64_t, QMux *);
  void *v34;
  xpc_object_t object;

  v2 = xpc_array_create(0, 0);
  v3 = MEMORY[0x1E0C812C8];
  if (v2 || (v2 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v2) == v3)
    {
      xpc_retain(v2);
      v4 = v2;
    }
    else
    {
      v4 = xpc_null_create();
    }
  }
  else
  {
    v4 = xpc_null_create();
    v2 = 0;
  }
  xpc_release(v2);
  v5 = (char *)*((_QWORD *)this + 30);
  v32[0] = MEMORY[0x1E0C809B0];
  v32[1] = 1174405120;
  v33 = ___ZN19QMITransportService28reportPowerDownMessages_syncEv_block_invoke;
  v34 = &__block_descriptor_tmp_28_3;
  object = v4;
  if (v4)
  {
    xpc_retain(v4);
    v6 = (char *)this + 248;
    if (v5 == (char *)this + 248)
      goto LABEL_11;
  }
  else
  {
    object = xpc_null_create();
    v6 = (char *)this + 248;
    if (v5 == (char *)this + 248)
      goto LABEL_11;
  }
  do
  {
    v33((uint64_t)v32, (QMux *)(v5 + 32));
    v7 = (char *)*((_QWORD *)v5 + 1);
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = *(char **)v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v8 = (char *)*((_QWORD *)v5 + 2);
        v9 = *(_QWORD *)v8 == (_QWORD)v5;
        v5 = v8;
      }
      while (!v9);
    }
    v5 = v8;
  }
  while (v8 != v6);
LABEL_11:
  if (MEMORY[0x1C3B8A86C](v4) != v3)
    goto LABEL_12;
  if (!xpc_array_get_count(v4))
    goto LABEL_12;
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 39);
  if (!v10)
    goto LABEL_12;
  v11 = std::__shared_weak_count::lock(v10);
  v31 = v11;
  if (!v11)
    goto LABEL_12;
  v30 = *((_QWORD *)this + 38);
  if (!v30)
  {
    v14 = v11;
LABEL_48:
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    goto LABEL_12;
  }
  v12 = xpc_dictionary_create(0, 0, 0);
  if (v12 || (v12 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v12) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v12);
      v13 = v12;
    }
    else
    {
      v13 = xpc_null_create();
    }
  }
  else
  {
    v13 = xpc_null_create();
    v12 = 0;
  }
  xpc_release(v12);
  if (v4)
  {
    xpc_retain(v4);
    v15 = v4;
  }
  else
  {
    v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, abm::kKeyPowerDownMessageList[0], v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v17 = v30;
  v18 = abm::kCommandSetPowerDownMessageList[0];
  v19 = strlen(abm::kCommandSetPowerDownMessageList[0]);
  if (v19 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v20 = (void *)v19;
  if (v19 >= 0x17)
  {
    v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v22 = v19 | 7;
    v23 = v22 + 1;
    v21 = (void **)operator new(v22 + 1);
    __dst[1] = v20;
    v29 = v23 | 0x8000000000000000;
    __dst[0] = v21;
    goto LABEL_41;
  }
  HIBYTE(v29) = v19;
  v21 = __dst;
  if (v19)
LABEL_41:
    memmove(v21, v18, (size_t)v20);
  *((_BYTE *)v20 + (_QWORD)v21) = 0;
  v27 = v13;
  if (v13)
    xpc_retain(v13);
  else
    v27 = xpc_null_create();
  v26 = 0;
  Service::runCommand(v17, (uint64_t)__dst, &v27, &v26);
  xpc_release(v27);
  v27 = 0;
  if (SHIBYTE(v29) < 0)
    operator delete(__dst[0]);
  xpc_release(v13);
  v14 = v31;
  if (v31)
    goto LABEL_48;
LABEL_12:
  xpc_release(object);
  object = 0;
  xpc_release(v4);
}

void sub_1BF4FA0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,xpc_object_t a23)
{
  void *v23;
  void *v24;

  xpc_release(object);
  if (a16 < 0)
    operator delete(__p);
  xpc_release(v24);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  xpc_release(a23);
  a23 = 0;
  xpc_release(v23);
  _Unwind_Resume(a1);
}

void ___ZN19QMITransportService28reportPowerDownMessages_syncEv_block_invoke(uint64_t a1, QMux *this)
{
  _QWORD *v3;
  uint64_t v4;
  int64_t v5;
  int64_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD v16[3];

  memset(v16, 170, sizeof(v16));
  QMux::getQMIPowerDownMessages(this);
  v3 = (_QWORD *)v16[0];
  if ((_QWORD *)v16[0] != &v16[1])
  {
    v4 = MEMORY[0x1E0C812F8];
    do
    {
      v5 = *((unsigned __int8 *)v3 + 26);
      v6 = *((unsigned __int16 *)v3 + 14);
      v7 = xpc_dictionary_create(0, 0, 0);
      if (v7 || (v7 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8A86C](v7) == v4)
        {
          xpc_retain(v7);
          v8 = v7;
        }
        else
        {
          v8 = xpc_null_create();
        }
      }
      else
      {
        v8 = xpc_null_create();
        v7 = 0;
      }
      xpc_release(v7);
      v9 = xpc_int64_create(v5);
      if (!v9)
        v9 = xpc_null_create();
      xpc_dictionary_set_value(v8, abm::kKeyPowerDownMessageQMISvc[0], v9);
      v10 = xpc_null_create();
      xpc_release(v9);
      xpc_release(v10);
      v11 = xpc_int64_create(v6);
      if (!v11)
        v11 = xpc_null_create();
      xpc_dictionary_set_value(v8, abm::kKeyPowerDownMessageId[0], v11);
      v12 = xpc_null_create();
      xpc_release(v11);
      xpc_release(v12);
      xpc_array_append_value(*(xpc_object_t *)(a1 + 32), v8);
      xpc_release(v8);
      v13 = (_QWORD *)v3[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v3[2];
          v15 = *v14 == (_QWORD)v3;
          v3 = v14;
        }
        while (!v15);
      }
      v3 = v14;
    }
    while (v14 != &v16[1]);
  }
  std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy((_QWORD *)v16[1]);
}

void sub_1BF4FA384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  void *v11;

  xpc_release(v11);
  std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(a11);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMITransportService::reportPowerDownMessages_sync(QMITransportService *this)
{
  QMITransportService::reportPowerDownMessages_sync((QMITransportService *)((char *)this - 104));
}

uint64_t QMITransportService::enableBypass(QMITransportService *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'QMITransportService::enableBypass(QMITransportService *this)
{
  return 0;
}

void QMITransportService::registerForWakeReason(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  NSObject *v6;
  _QWORD v7[5];
  void *aBlock;
  dispatch_object_t object;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN19QMITransportService21registerForWakeReasonEN8dispatch8callbackIU13block_pointerFv10WakeReasonEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_29_4;
  v7[4] = a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = (uint64_t *)(a1 + 72);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  ctu::SharedSynchronizable<QMITransportService>::execute_wrapped(v5, (uint64_t)v7);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN19QMITransportService21registerForWakeReasonEN8dispatch8callbackIU13block_pointerFv10WakeReasonEEE_block_invoke(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  const void *v4;
  NSObject *v5;
  NSObject *v6;

  v3 = a1[4];
  v2 = (void *)a1[5];
  if (v2)
    v2 = _Block_copy(v2);
  v4 = *(const void **)(v3 + 384);
  *(_QWORD *)(v3 + 384) = v2;
  if (v4)
    _Block_release(v4);
  v5 = a1[6];
  if (v5)
    dispatch_retain(v5);
  v6 = *(NSObject **)(v3 + 392);
  *(_QWORD *)(v3 + 392) = v5;
  if (v6)
    dispatch_release(v6);
}

void __copy_helper_block_e8_40c57_ZTSN8dispatch8callbackIU13block_pointerFv10WakeReasonEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 40);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_40c57_ZTSN8dispatch8callbackIU13block_pointerFv10WakeReasonEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void `non-virtual thunk to'QMITransportService::registerForWakeReason(uint64_t a1, uint64_t a2)
{
  QMITransportService::registerForWakeReason(a1 - 104, a2);
}

void QMITransportService::getWakeReason_sync(QMITransportService *this, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  CommandDriverFactory *v12;
  uint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  NSObject *v24;
  NSObject *v25;
  unint64_t v26;
  void *v27;
  NSObject *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD v32[6];
  std::__shared_weak_count *v33;
  int v34;
  void *aBlock;
  dispatch_object_t object;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  uint8_t buf[16];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v3 || (v5 = *((_QWORD *)this + 9), (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v41 = 0xAAAAAAAAAAAAAAAALL;
  v42 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v12 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v13 = off_1ED70FD08;
  if (!off_1ED70FD08)
  {
    CommandDriverFactory::create_default_global(v12);
    v14 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v15 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
    off_1ED70FD08 = v14;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v13 = off_1ED70FD08;
  }
  v18 = (std::__shared_weak_count *)*(&off_1ED70FD08 + 1);
  v37 = v13;
  v38 = *(&off_1ED70FD08 + 1);
  if (*(&off_1ED70FD08 + 1))
  {
    v19 = (unint64_t *)(*(&off_1ED70FD08 + 1) + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v13 + 16))(&v39, v13);
  v41 = 0;
  v42 = 0;
  if (v40)
  {
    v42 = std::__shared_weak_count::lock(v40);
    if (v42)
      v41 = v39;
    if (v40)
      std::__shared_weak_count::__release_weak(v40);
  }
  if (!v18)
    goto LABEL_28;
  v21 = (unint64_t *)&v18->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    v23 = v41;
    v24 = *((_QWORD *)this + 5);
    v25 = v24;
    if (v41)
    {
LABEL_29:
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        --a2;
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = a2;
        _os_log_impl(&dword_1BF335000, v24, OS_LOG_TYPE_DEFAULT, "#I Sending request to get wake reason. Remaining-attempts=%u", buf, 8u);
      }
      v32[0] = MEMORY[0x1E0C809B0];
      v32[1] = 1174405120;
      v32[2] = ___ZN19QMITransportService18getWakeReason_syncEj_block_invoke;
      v32[3] = &__block_descriptor_tmp_32_5;
      v32[4] = this;
      v32[5] = v5;
      v33 = v7;
      do
        v26 = __ldxr(p_shared_weak_owners);
      while (__stxr(v26 + 1, p_shared_weak_owners));
      v34 = a2;
      v27 = _Block_copy(v32);
      v28 = *((_QWORD *)this + 11);
      if (v28)
        dispatch_retain(v28);
      aBlock = v27;
      object = v28;
      (*(void (**)(unint64_t, void **))(*(_QWORD *)v23 + 136))(v23, &aBlock);
      if (object)
        dispatch_release(object);
      if (aBlock)
        _Block_release(aBlock);
      if (v33)
      {
        std::__shared_weak_count::__release_weak(v33);
        v29 = v42;
        if (!v42)
          goto LABEL_49;
        goto LABEL_45;
      }
LABEL_44:
      v29 = v42;
      if (!v42)
        goto LABEL_49;
      goto LABEL_45;
    }
  }
  else
  {
LABEL_28:
    v23 = v41;
    v24 = *((_QWORD *)this + 5);
    v25 = v24;
    if (v41)
      goto LABEL_29;
  }
  if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    goto LABEL_44;
  *(_WORD *)buf = 0;
  _os_log_error_impl(&dword_1BF335000, v24, OS_LOG_TYPE_ERROR, "Failed to get radio command driver!", buf, 2u);
  v29 = v42;
  if (!v42)
    goto LABEL_49;
LABEL_45:
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
LABEL_49:
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF4FA934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN19QMITransportService18getWakeReason_syncEj_block_invoke(uint64_t a1, _QWORD *a2, ctu **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  const char *v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  const void *v21;
  uint64_t (*v22)(uint64_t);
  int v23;
  NSObject *v24;
  NSObject *v25;
  dispatch_time_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  NSObject *v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  uint64_t (*v32)(uint64_t);
  xpc_object_t v33;
  xpc_object_t v34;
  const void *v35;
  void *v36;
  const void *v37;
  void *v38;
  NSObject *v39;
  void *v40;
  NSObject *v41;
  void *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  _QWORD handler[6];
  std::__shared_weak_count *v46;
  int v47;
  xpc_object_t v48;
  xpc_object_t xdict;
  std::__shared_weak_count *v51;
  xpc_object_t object;
  uint64_t v53;
  void (*v54)(uint64_t);
  void *v55;
  void *aBlock;
  int v57;
  xpc_object_t v58;

  v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = std::__shared_weak_count::lock(v4);
    v51 = v8;
    if (v8)
    {
      if (!*(_QWORD *)(a1 + 40))
      {
        v12 = v8;
LABEL_82:
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v44 = __ldaxr(p_shared_owners);
        while (__stlxr(v44 - 1, p_shared_owners));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
        return;
      }
      xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      v9 = xpc_dictionary_create(0, 0, 0);
      v10 = v9;
      v11 = MEMORY[0x1E0C812F8];
      if (v9)
      {
        xdict = v9;
      }
      else
      {
        v10 = xpc_null_create();
        xdict = v10;
        if (!v10)
        {
          v13 = xpc_null_create();
          v10 = 0;
          goto LABEL_12;
        }
      }
      if (MEMORY[0x1C3B8A86C](v10) == v11)
      {
        xpc_retain(v10);
        goto LABEL_13;
      }
      v13 = xpc_null_create();
LABEL_12:
      xdict = v13;
LABEL_13:
      xpc_release(v10);
      v14 = xpc_string_create((const char *)*MEMORY[0x1E0CFB4B8]);
      if (!v14)
        v14 = xpc_null_create();
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB2B8], v14);
      v15 = xpc_null_create();
      xpc_release(v14);
      xpc_release(v15);
      v16 = (const char *)(v7 + 408);
      if (*(char *)(v7 + 431) < 0)
        v16 = *(const char **)v16;
      v17 = xpc_string_create(v16);
      if (!v17)
        v17 = xpc_null_create();
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB458], v17);
      v18 = xpc_null_create();
      xpc_release(v17);
      xpc_release(v18);
      v19 = xpc_BOOL_create(*(_BYTE *)(v7 + 432));
      if (!v19)
        v19 = xpc_null_create();
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFBDF0], v19);
      v20 = xpc_null_create();
      xpc_release(v19);
      xpc_release(v20);
      if (*a2)
        v22 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      else
        v22 = 0;
      if (v22)
        goto LABEL_25;
      v32 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      if (!*a3)
        v32 = 0;
      if (!v32)
      {
LABEL_25:
        v23 = *(_DWORD *)(a1 + 56);
        if (v23)
        {
          v24 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, *(dispatch_queue_t *)(v7 + 88));
          v25 = *(NSObject **)(v7 + 400);
          *(_QWORD *)(v7 + 400) = v24;
          if (v25)
          {
            dispatch_release(v25);
            v24 = *(NSObject **)(v7 + 400);
          }
          if (v24)
          {
            v26 = dispatch_time(0, 1000000000);
            dispatch_source_set_timer(v24, v26, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
            handler[0] = MEMORY[0x1E0C809B0];
            handler[2] = ___ZN19QMITransportService18getWakeReason_syncEj_block_invoke_2;
            handler[3] = &__block_descriptor_tmp_30_4;
            v28 = *(_QWORD *)(a1 + 40);
            v27 = *(std::__shared_weak_count **)(a1 + 48);
            handler[4] = v7;
            handler[5] = v28;
            v29 = *(NSObject **)(v7 + 400);
            handler[1] = 1174405120;
            v46 = v27;
            if (v27)
            {
              p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
              do
                v31 = __ldxr(p_shared_weak_owners);
              while (__stxr(v31 + 1, p_shared_weak_owners));
            }
            v47 = *(_DWORD *)(a1 + 56);
            dispatch_source_set_event_handler(v29, handler);
            dispatch_activate(*(dispatch_object_t *)(v7 + 400));
            if (v46)
              std::__shared_weak_count::__release_weak(v46);
          }
          goto LABEL_81;
        }
      }
      else
      {
        ctu::cf_to_xpc(*a3, v21);
        v33 = object;
        if (object && MEMORY[0x1C3B8A86C](object) == v11)
          xpc_retain(object);
        else
          v33 = xpc_null_create();
        xpc_release(object);
        v48 = v33;
        if (v33)
          xpc_retain(v33);
        else
          v48 = xpc_null_create();
        abm::ParseWakeDataEureka(&v48, &xdict);
        xpc_release(v48);
        v48 = 0;
        xpc_release(v33);
        v23 = 1;
      }
      if (*(_QWORD *)(v7 + 384) && *(_QWORD *)(v7 + 392))
      {
        if (*(char *)(v7 + 431) < 0)
        {
          if (((*(_QWORD *)(v7 + 416) == 0) & ~v23) == 0)
            goto LABEL_49;
        }
        else if (((*(_BYTE *)(v7 + 431) == 0) & ~v23) == 0)
        {
LABEL_49:
          v34 = xdict;
          if (xdict)
            xpc_retain(xdict);
          else
            v34 = xpc_null_create();
          v37 = *(const void **)(v7 + 384);
          if (v37)
            v38 = _Block_copy(v37);
          else
            v38 = 0;
          v41 = *(NSObject **)(v7 + 392);
          object = (xpc_object_t)MEMORY[0x1E0C809B0];
          v53 = 1174405120;
          v54 = ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJS1_EEEvDpT__block_invoke;
          v55 = &__block_descriptor_tmp_108;
          if (v38)
            v42 = _Block_copy(v38);
          else
            v42 = 0;
          aBlock = v42;
          v57 = 3;
          v58 = v34;
          if (v34)
            xpc_retain(v34);
          else
            v58 = xpc_null_create();
          dispatch_async(v41, &object);
          xpc_release(v58);
          v58 = 0;
          if (aBlock)
            _Block_release(aBlock);
          if (v38)
            _Block_release(v38);
LABEL_80:
          xpc_release(v34);
          goto LABEL_81;
        }
        v34 = xpc_null_create();
        v35 = *(const void **)(v7 + 384);
        if (v35)
          v36 = _Block_copy(v35);
        else
          v36 = 0;
        v39 = *(NSObject **)(v7 + 392);
        object = (xpc_object_t)MEMORY[0x1E0C809B0];
        v53 = 1174405120;
        v54 = ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJS1_EEEvDpT__block_invoke;
        v55 = &__block_descriptor_tmp_108;
        if (v36)
          v40 = _Block_copy(v36);
        else
          v40 = 0;
        aBlock = v40;
        v57 = 4;
        v58 = v34;
        if (v34)
          xpc_retain(v34);
        else
          v58 = xpc_null_create();
        dispatch_async(v39, &object);
        xpc_release(v58);
        v58 = 0;
        if (aBlock)
          _Block_release(aBlock);
        if (v36)
          _Block_release(v36);
        goto LABEL_80;
      }
LABEL_81:
      xpc_release(xdict);
      v12 = v51;
      if (!v51)
        return;
      goto LABEL_82;
    }
  }
}

void sub_1BF4FAF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, xpc_object_t object, xpc_object_t a19, char a20)
{
  void *v20;

  xpc_release(object);
  xpc_release(v20);
  xpc_release(a19);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void ___ZN19QMITransportService18getWakeReason_syncEj_block_invoke_2(uint64_t a1)
{
  std::__shared_weak_count *v2;
  dispatch_source_t *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    v3 = *(dispatch_source_t **)(a1 + 32);
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (*(_QWORD *)(a1 + 40))
      {
        dispatch_source_cancel(v3[50]);
        v6 = v3[50];
        v3[50] = 0;
        if (v6)
          dispatch_release(v6);
        QMITransportService::getWakeReason_sync((QMITransportService *)v3, *(_DWORD *)(a1 + 56));
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF4FB0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c44_ZTSNSt3__18weak_ptrI19QMITransportServiceEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSNSt3__18weak_ptrI19QMITransportServiceEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t QMITransportService::shouldTeardownOnWillReset(QMITransportService *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'QMITransportService::shouldTeardownOnWillReset(QMITransportService *this)
{
  return 0;
}

uint64_t ctu::Loggable<QMITransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<QMITransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "ipc.svc.qmi");
}

uint64_t ctu::Loggable<QMITransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

void ATCSAssertsToABMAssert(NSObject *a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  NSObject *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  _BYTE buf[24];
  const char *v20;
  __int128 *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  v3 = MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v20 = (const char *)&__block_descriptor_tmp_13_2;
  v21 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce != -1)
    goto LABEL_26;
  v4 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
  v18 = GetABMLogServer(void)::sLogServer;
  if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
  {
LABEL_4:
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    goto LABEL_6;
  }
  while (1)
  {
LABEL_6:
    v7 = *((_QWORD *)GetGlobalLogger((uint64_t *)&v18) + 4);
    if (v4)
    {
      v8 = (unint64_t *)&v4->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      v10 = (*((uint64_t (**))a1->isa + 2))(a1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v10;
      _os_log_fault_impl(&dword_1BF335000, v7, OS_LOG_TYPE_FAULT, "%s", buf, 0xCu);
    }
    {
      __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
    }
    *(_QWORD *)buf = v3;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
    v20 = (const char *)&__block_descriptor_tmp_13_2;
    v21 = &GetABMLogServer(void)::sLogServer;
    if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
    {
      v12 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
      v17 = GetABMLogServer(void)::sLogServer;
      if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
        goto LABEL_18;
    }
    else
    {
      dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, buf);
      v12 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
      v17 = GetABMLogServer(void)::sLogServer;
      if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
        goto LABEL_18;
    }
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
LABEL_18:
    a1 = *((_QWORD *)GetGlobalLogger((uint64_t *)&v17) + 4);
    if (v12)
    {
      v15 = (unint64_t *)&v12->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (os_log_type_enabled(a1, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "ABM ASSERT";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "false";
      *(_WORD *)&buf[22] = 2080;
      v20 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Ser"
            "ver/Transport/QMI/Service/QMITransportService.cpp";
      LOWORD(v21) = 1024;
      *(_DWORD *)((char *)&v21 + 2) = 63;
      _os_log_fault_impl(&dword_1BF335000, a1, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", buf, 0x26u);
    }
    __break(1u);
LABEL_26:
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, buf);
    v4 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v18 = GetABMLogServer(void)::sLogServer;
    if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_4;
  }
}

void sub_1BF4FB474(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void QMIParserErrorToABMAssert(int a1, int a2, const unsigned __int8 *a3, int a4)
{
  NSObject *v4;
  unsigned __int8 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  unint64_t *v13;
  unint64_t v14;
  unsigned __int8 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  _BYTE buf[24];
  const char *v24;
  __int128 *v25;
  uint64_t v26;

  LODWORD(v4) = a4;
  v26 = *MEMORY[0x1E0C80C00];
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  v8 = MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v24 = (const char *)&__block_descriptor_tmp_13_2;
  v25 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce != -1)
    goto LABEL_26;
  v9 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
  v22 = GetABMLogServer(void)::sLogServer;
  if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
  {
LABEL_4:
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    goto LABEL_6;
  }
  while (1)
  {
LABEL_6:
    v12 = *((_QWORD *)GetGlobalLogger((uint64_t *)&v22) + 4);
    if (v9)
    {
      v13 = (unint64_t *)&v9->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = a1;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = a2;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&buf[16] = (_DWORD)v4;
      _os_log_fault_impl(&dword_1BF335000, v12, OS_LOG_TYPE_FAULT, "QMI parsing error in message with msgId=0x%04x during tlvId=0x%02x (tlv_len=%u)", buf, 0x14u);
    }
    {
      __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
    }
    *(_QWORD *)buf = v8;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
    v24 = (const char *)&__block_descriptor_tmp_13_2;
    v25 = &GetABMLogServer(void)::sLogServer;
    if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
    {
      v16 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
      v21 = GetABMLogServer(void)::sLogServer;
      if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
        goto LABEL_18;
    }
    else
    {
      dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, buf);
      v16 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
      v21 = GetABMLogServer(void)::sLogServer;
      if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
        goto LABEL_18;
    }
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
LABEL_18:
    v4 = *((_QWORD *)GetGlobalLogger((uint64_t *)&v21) + 4);
    if (v16)
    {
      v19 = (unint64_t *)&v16->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "ABM ASSERT";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "false";
      *(_WORD *)&buf[22] = 2080;
      v24 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Ser"
            "ver/Transport/QMI/Service/QMITransportService.cpp";
      LOWORD(v25) = 1024;
      *(_DWORD *)((char *)&v25 + 2) = 68;
      _os_log_fault_impl(&dword_1BF335000, v4, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", buf, 0x26u);
    }
    __break(1u);
LABEL_26:
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, buf);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v22 = GetABMLogServer(void)::sLogServer;
    if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_4;
  }
}

void sub_1BF4FB7F4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void QMIWriteErrorToABMAssert(int a1, _DWORD *a2, NSObject *a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  unsigned __int8 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  _BYTE buf[24];
  const char *v24;
  __int128 *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  v7 = MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v24 = (const char *)&__block_descriptor_tmp_13_2;
  v25 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce != -1)
    goto LABEL_26;
  v8 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
  v22 = GetABMLogServer(void)::sLogServer;
  if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
  {
LABEL_4:
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    goto LABEL_6;
  }
  while (1)
  {
LABEL_6:
    v11 = *((_QWORD *)GetGlobalLogger((uint64_t *)&v22) + 4);
    if (v8)
    {
      v12 = (unint64_t *)&v8->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
    {
      v14 = a2[2] - *a2;
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = a1;
      *(_WORD *)&buf[8] = 2048;
      *(_QWORD *)&buf[10] = a3;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v14;
      _os_log_fault_impl(&dword_1BF335000, v11, OS_LOG_TYPE_FAULT, "QMI serialization error in message with msgId=0x%04x (%td bytes written to buf of size %u bytes)", buf, 0x18u);
    }
    {
      __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
    }
    *(_QWORD *)buf = v7;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
    v24 = (const char *)&__block_descriptor_tmp_13_2;
    v25 = &GetABMLogServer(void)::sLogServer;
    if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
    {
      v16 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
      v21 = GetABMLogServer(void)::sLogServer;
      if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
        goto LABEL_18;
    }
    else
    {
      dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, buf);
      v16 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
      v21 = GetABMLogServer(void)::sLogServer;
      if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
        goto LABEL_18;
    }
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
LABEL_18:
    a3 = *((_QWORD *)GetGlobalLogger((uint64_t *)&v21) + 4);
    if (v16)
    {
      v19 = (unint64_t *)&v16->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (os_log_type_enabled(a3, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "ABM ASSERT";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "false";
      *(_WORD *)&buf[22] = 2080;
      v24 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Ser"
            "ver/Transport/QMI/Service/QMITransportService.cpp";
      LOWORD(v25) = 1024;
      *(_DWORD *)((char *)&v25 + 2) = 74;
      _os_log_fault_impl(&dword_1BF335000, a3, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", buf, 0x26u);
    }
    __break(1u);
LABEL_26:
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, buf);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v22 = GetABMLogServer(void)::sLogServer;
    if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_4;
  }
}

void sub_1BF4FBB84(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::deque<dispatch::group_session>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  dispatch_group_t *v6;
  uint64_t v7;
  dispatch_group_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 40) = 0;
    v9 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = &v2[v4 >> 9];
    v6 = (dispatch_group_t *)((char *)*v5 + 8 * (v4 & 0x1FF));
    v7 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v4) >> 6) & 0x3FFFFFFFFFFFFF8))
       + 8 * ((*(_QWORD *)(a1 + 40) + v4) & 0x1FF);
    if (v6 != (dispatch_group_t *)v7)
    {
      do
      {
        if (*v6)
        {
          dispatch_group_leave(*v6);
          if (*v6)
            dispatch_release(*v6);
        }
        if ((char *)++v6 - (_BYTE *)*v5 == 4096)
        {
          v8 = (dispatch_group_t *)v5[1];
          ++v5;
          v6 = v8;
        }
      }
      while (v6 != (dispatch_group_t *)v7);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
    *(_QWORD *)(a1 + 40) = 0;
    v9 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v3 = *(void ***)(a1 + 16);
        v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
        *(_QWORD *)(a1 + 8) = v2;
        v9 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
  }
  v10 = v9 >> 3;
  if (v10 == 1)
  {
    v11 = 256;
    goto LABEL_18;
  }
  if (v10 == 2)
  {
    v11 = 512;
LABEL_18:
    *(_QWORD *)(a1 + 32) = v11;
  }
  if (v2 != v3)
  {
    do
    {
      v12 = *v2++;
      operator delete(v12);
    }
    while (v2 != v3);
    v14 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16);
    if (v13 != v14)
      *(_QWORD *)(a1 + 16) = v13 + ((v14 - v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *ctu::Loggable<QMITransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E790C0E0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<QMITransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E790C0E0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::cf::insert<std::string,std::string>()
{
  ctu::cf::convert_copy();
  ctu::cf::convert_copy();
}

void sub_1BF4FBE70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1BF4FBE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QMITransportService>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E790C120;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMITransportService>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E790C120;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<QMITransportService>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ctu::SharedLoggable<QMITransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E790C0E0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void std::__tree<QMux>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<QMux>::destroy(*a1);
    std::__tree<QMux>::destroy(a1[1]);
    QMux::~QMux((QMux *)(a1 + 4));
    operator delete(a1);
  }
}

void std::__shared_ptr_emplace<ABMResetInvoker>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E790C1D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ABMResetInvoker>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E790C1D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<ABMResetInvoker>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ABMResetInvoker::~ABMResetInvoker(ABMResetInvoker *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = off_1E790C220;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = off_1E790C220;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(this);
}

void ABMResetInvoker::reset(std::__shared_weak_count **this, const char *a2, int a3)
{
  capabilities::coredump *v6;
  xpc_object_t v7;
  uint64_t v8;
  xpc_object_t v9;
  uint64_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  const void *v15;
  size_t v16;
  std::string::size_type v17;
  std::string *p_dst;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  size_t v22;
  size_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  void **v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  const void *v35;
  size_t v36;
  size_t v37;
  void *p_p;
  uint64_t v39;
  uint64_t v40;
  const std::string::value_type *v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  const char *p_buf;
  xpc_object_t v46;
  xpc_object_t v47;
  unsigned __int8 v48;
  unsigned __int8 v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *size;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  xpc_object_t v60;
  xpc_object_t v61;
  unsigned __int8 v62;
  NSObject *v63;
  std::__shared_weak_count *v64;
  const char **v65;
  xpc_object_t v66;
  xpc_object_t v67;
  xpc_object_t v68;
  xpc_object_t v69;
  xpc_object_t v70;
  xpc_object_t v71;
  uint64_t v72;
  const void *v73;
  size_t v74;
  size_t v75;
  __int128 *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  const void *v81;
  xpc_object_t v82[3];
  xpc_object_t v83;
  __int128 v84;
  void *__p;
  size_t v86;
  int64_t v87;
  void *v88[2];
  unsigned __int8 v89;
  void *v90;
  size_t v91;
  int64_t v92;
  std::string __dst;
  std::string v94;
  std::string v95;
  _QWORD v96[3];
  __int128 buf;
  int64_t v98;
  void *v99;
  __int128 *v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  capabilities::coredump::recoveryForControlMessageTimeout((capabilities::coredump *)this);
  v6 = (capabilities::coredump *)capabilities::coredump::operator&();
  if (!(_DWORD)v6)
    goto LABEL_93;
  v7 = xpc_dictionary_create(0, 0, 0);
  v8 = MEMORY[0x1E0C812F8];
  if (v7 || (v7 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v7) == v8)
    {
      xpc_retain(v7);
      v9 = v7;
    }
    else
    {
      v9 = xpc_null_create();
    }
  }
  else
  {
    v9 = xpc_null_create();
    v7 = 0;
  }
  xpc_release(v7);
  v10 = MEMORY[0x1C3B8A86C](v9);
  if (v10 == v8)
  {
    memset(v96, 170, sizeof(v96));
    Timestamp::Timestamp((Timestamp *)v96);
    v11 = xpc_string_create(a2);
    if (!v11)
      v11 = xpc_null_create();
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E0CF10C8], v11);
    v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    v13 = xpc_null_create();
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E0CF1010], v13);
    v14 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v13);
    v15 = (const void *)*MEMORY[0x1E0D01A30];
    v16 = strlen((const char *)*MEMORY[0x1E0D01A30]);
    if (v16 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v17 = v16;
    if (v16 >= 0x17)
    {
      v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v19 = v16 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v17;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v16;
      p_dst = &__dst;
      if (!v16)
      {
LABEL_19:
        p_dst->__r_.__value_.__s.__data_[v17] = 0;
        v21 = (const void *)*MEMORY[0x1E0D01A20];
        v22 = strlen((const char *)*MEMORY[0x1E0D01A20]);
        if (v22 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v23 = v22;
        if (v22 >= 0x17)
        {
          v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v22 | 7) != 0x17)
            v25 = v22 | 7;
          v26 = v25 + 1;
          v24 = operator new(v25 + 1);
          v91 = v23;
          v92 = v26 | 0x8000000000000000;
          v90 = v24;
        }
        else
        {
          HIBYTE(v92) = v22;
          v24 = &v90;
          if (!v22)
          {
LABEL_27:
            *((_BYTE *)v24 + v23) = 0;
            if (v92 >= 0)
              v27 = (const std::string::value_type *)&v90;
            else
              v27 = (const std::string::value_type *)v90;
            if (v92 >= 0)
              v28 = HIBYTE(v92);
            else
              v28 = v91;
            v29 = std::string::append(&__dst, v27, v28);
            v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
            v94.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v30;
            v29->__r_.__value_.__l.__size_ = 0;
            v29->__r_.__value_.__r.__words[2] = 0;
            v29->__r_.__value_.__r.__words[0] = 0;
            Timestamp::asString((uint64_t)v96, 0, 9, v88);
            if ((v89 & 0x80u) == 0)
              v31 = v88;
            else
              v31 = (void **)v88[0];
            if ((v89 & 0x80u) == 0)
              v32 = v89;
            else
              v32 = (std::string::size_type)v88[1];
            v33 = std::string::append(&v94, (const std::string::value_type *)v31, v32);
            v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
            v95.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v34;
            v33->__r_.__value_.__l.__size_ = 0;
            v33->__r_.__value_.__r.__words[2] = 0;
            v33->__r_.__value_.__r.__words[0] = 0;
            v35 = (const void *)*MEMORY[0x1E0D01A10];
            v36 = strlen((const char *)*MEMORY[0x1E0D01A10]);
            if (v36 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v37 = v36;
            if (v36 >= 0x17)
            {
              v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v36 | 7) != 0x17)
                v39 = v36 | 7;
              v40 = v39 + 1;
              p_p = operator new(v39 + 1);
              v86 = v37;
              v87 = v40 | 0x8000000000000000;
              __p = p_p;
            }
            else
            {
              HIBYTE(v87) = v36;
              p_p = &__p;
              if (!v36)
              {
LABEL_47:
                *((_BYTE *)p_p + v37) = 0;
                if (v87 >= 0)
                  v41 = (const std::string::value_type *)&__p;
                else
                  v41 = (const std::string::value_type *)__p;
                if (v87 >= 0)
                  v42 = HIBYTE(v87);
                else
                  v42 = v86;
                v43 = std::string::append(&v95, v41, v42);
                v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
                v98 = v43->__r_.__value_.__r.__words[2];
                buf = v44;
                v43->__r_.__value_.__l.__size_ = 0;
                v43->__r_.__value_.__r.__words[2] = 0;
                v43->__r_.__value_.__r.__words[0] = 0;
                if (v98 >= 0)
                  p_buf = (const char *)&buf;
                else
                  p_buf = (const char *)buf;
                v46 = xpc_string_create(p_buf);
                if (!v46)
                  v46 = xpc_null_create();
                xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E0CF1000], v46);
                v47 = xpc_null_create();
                xpc_release(v46);
                xpc_release(v47);
                if (SHIBYTE(v98) < 0)
                {
                  operator delete((void *)buf);
                  if ((SHIBYTE(v87) & 0x80000000) == 0)
                  {
LABEL_60:
                    if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_61;
                    goto LABEL_69;
                  }
                }
                else if ((SHIBYTE(v87) & 0x80000000) == 0)
                {
                  goto LABEL_60;
                }
                operator delete(__p);
                if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_61:
                  if (((char)v89 & 0x80000000) == 0)
                    goto LABEL_62;
                  goto LABEL_70;
                }
LABEL_69:
                operator delete(v95.__r_.__value_.__l.__data_);
                if (((char)v89 & 0x80000000) == 0)
                {
LABEL_62:
                  if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_63;
                  goto LABEL_71;
                }
LABEL_70:
                operator delete(v88[0]);
                if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_63:
                  if ((SHIBYTE(v92) & 0x80000000) == 0)
                    goto LABEL_64;
                  goto LABEL_72;
                }
LABEL_71:
                operator delete(v94.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v92) & 0x80000000) == 0)
                {
LABEL_64:
                  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_65;
                  goto LABEL_73;
                }
LABEL_72:
                operator delete(v90);
                if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_65:
                  v95.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
                  v95.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
                  if ((v48 & 1) != 0)
                    goto LABEL_74;
LABEL_142:
                  {
                    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
                  }
LABEL_74:
                  *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
                  *((_QWORD *)&buf + 1) = 0x40000000;
                  v98 = (int64_t)___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
                  v99 = &__block_descriptor_tmp_13_2;
                  v100 = &GetABMLogServer(void)::sLogServer;
                  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
                  {
                    v50 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
                    v84 = GetABMLogServer(void)::sLogServer;
                    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
                      goto LABEL_78;
                  }
                  else
                  {
                    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &buf);
                    v50 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
                    v84 = GetABMLogServer(void)::sLogServer;
                    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
                      goto LABEL_78;
                  }
                  v51 = (unint64_t *)(v50 + 8);
                  do
                    v52 = __ldxr(v51);
                  while (__stxr(v52 + 1, v51));
LABEL_78:
                  abm::HelperClient::create();
                  if (!*((_QWORD *)&v84 + 1))
                    goto LABEL_82;
                  v53 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
                  do
                    v54 = __ldaxr(v53);
                  while (__stlxr(v54 - 1, v53));
                  if (!v54)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v84 + 1) + 16))(*((_QWORD *)&v84 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v84 + 1));
                    v83 = v9;
                    if (v9)
                      goto LABEL_83;
                  }
                  else
                  {
LABEL_82:
                    v83 = v9;
                    if (v9)
                    {
LABEL_83:
                      xpc_retain(v9);
                      goto LABEL_86;
                    }
                  }
                  v83 = xpc_null_create();
LABEL_86:
                  v82[1] = 0;
                  v82[2] = 0;
                  abm::HelperClient::perform();
                  xpc_release(v83);
                  v83 = 0;
                  size = (std::__shared_weak_count *)v95.__r_.__value_.__l.__size_;
                  if (v95.__r_.__value_.__l.__size_)
                  {
                    v56 = (unint64_t *)(v95.__r_.__value_.__l.__size_ + 8);
                    do
                      v57 = __ldaxr(v56);
                    while (__stlxr(v57 - 1, v56));
                    if (!v57)
                    {
                      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                      std::__shared_weak_count::__release_weak(size);
                    }
                  }
                  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v96, (_QWORD *)v96[1]);
                  goto LABEL_92;
                }
LABEL_73:
                operator delete(__dst.__r_.__value_.__l.__data_);
                v95.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
                v95.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
                if ((v49 & 1) != 0)
                  goto LABEL_74;
                goto LABEL_142;
              }
            }
            memmove(p_p, v35, v37);
            goto LABEL_47;
          }
        }
        memmove(v24, v21, v23);
        goto LABEL_27;
      }
    }
    memmove(p_dst, v15, v17);
    goto LABEL_19;
  }
LABEL_92:
  xpc_release(v9);
  if (v10 != v8)
    return;
LABEL_93:
  capabilities::coredump::recoveryForControlMessageTimeout(v6);
  if (!capabilities::coredump::operator&())
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED7100E0 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v63 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
        return;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
      v63 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
        return;
    }
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = a2;
    _os_log_error_impl(&dword_1BF335000, v63, OS_LOG_TYPE_ERROR, "WARNING! A MESSAGE TIMED OUT BUT WE'RE SKIPPING MODEM RESET: %s", (uint8_t *)&buf, 0xCu);
    return;
  }
  v58 = this[2];
  if (!v58)
    return;
  v59 = std::__shared_weak_count::lock(v58);
  v96[1] = v59;
  if (!v59)
    return;
  v96[0] = this[1];
  if (!v96[0])
  {
    v64 = v59;
LABEL_130:
    p_shared_owners = (unint64_t *)&v64->__shared_owners_;
    do
      v80 = __ldaxr(p_shared_owners);
    while (__stlxr(v80 - 1, p_shared_owners));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
    return;
  }
  v60 = xpc_dictionary_create(0, 0, 0);
  if (v60 || (v60 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v60) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v60);
      v61 = v60;
    }
    else
    {
      v61 = xpc_null_create();
    }
  }
  else
  {
    v61 = xpc_null_create();
    v60 = 0;
  }
  xpc_release(v60);
  v65 = (const char **)MEMORY[0x1E0CFB590];
  if (!a3)
    v65 = (const char **)MEMORY[0x1E0CFB598];
  v66 = xpc_string_create(*v65);
  if (!v66)
    v66 = xpc_null_create();
  xpc_dictionary_set_value(v61, (const char *)*MEMORY[0x1E0CFB538], v66);
  v67 = xpc_null_create();
  xpc_release(v66);
  xpc_release(v67);
  v68 = xpc_string_create((const char *)*MEMORY[0x1E0CFC000]);
  if (!v68)
    v68 = xpc_null_create();
  xpc_dictionary_set_value(v61, (const char *)*MEMORY[0x1E0CFB8D0], v68);
  v69 = xpc_null_create();
  xpc_release(v68);
  xpc_release(v69);
  v70 = xpc_string_create(a2);
  if (!v70)
    v70 = xpc_null_create();
  xpc_dictionary_set_value(v61, (const char *)*MEMORY[0x1E0CFB788], v70);
  v71 = xpc_null_create();
  xpc_release(v70);
  xpc_release(v71);
  v72 = v96[0];
  v73 = (const void *)*MEMORY[0x1E0CFB4E0];
  v74 = strlen((const char *)*MEMORY[0x1E0CFB4E0]);
  if (v74 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v75 = v74;
  if (v74 >= 0x17)
  {
    v77 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v74 | 7) != 0x17)
      v77 = v74 | 7;
    v78 = v77 + 1;
    v76 = (__int128 *)operator new(v77 + 1);
    *((_QWORD *)&buf + 1) = v75;
    v98 = v78 | 0x8000000000000000;
    *(_QWORD *)&buf = v76;
    goto LABEL_123;
  }
  HIBYTE(v98) = v74;
  v76 = &buf;
  if (v74)
LABEL_123:
    memmove(v76, v73, v75);
  *((_BYTE *)v76 + v75) = 0;
  v82[0] = v61;
  if (v61)
    xpc_retain(v61);
  else
    v82[0] = xpc_null_create();
  v81 = 0;
  Service::runCommand(v72, (uint64_t)&buf, v82, &v81);
  xpc_release(v82[0]);
  v82[0] = 0;
  if (SHIBYTE(v98) < 0)
    operator delete((void *)buf);
  xpc_release(v61);
  v64 = (std::__shared_weak_count *)v96[1];
  if (v96[1])
    goto LABEL_130;
}

void sub_1BF4FCB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, char a12, uint64_t a13, xpc_object_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ABMResetInvoker::dumpSystemLogOnly(ABMResetInvoker *this, const char *a2)
{
  xpc_object_t v3;
  xpc_object_t v4;
  const void *v5;
  size_t v6;
  size_t v7;
  void **p_dst;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  xpc_object_t v12;
  xpc_object_t v13;
  const char *v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  xpc_object_t v30;
  std::__shared_weak_count *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  void *__p[2];
  uint64_t v35;
  void **__dst;
  uint64_t v37;
  int64_t v38;
  void *v39;
  __int128 *v40;

  v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8A86C](v3) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v3);
      v4 = v3;
    }
    else
    {
      v4 = xpc_null_create();
    }
  }
  else
  {
    v4 = xpc_null_create();
    v3 = 0;
  }
  xpc_release(v3);
  __p[0] = 0;
  __p[1] = 0;
  v35 = 0;
  v5 = (const void *)*MEMORY[0x1E0CFB178];
  v6 = strlen((const char *)*MEMORY[0x1E0CFB178]);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = (void **)operator new(v9 + 1);
    v37 = v7;
    v38 = v10 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_14;
  }
  HIBYTE(v38) = v6;
  p_dst = (void **)&__dst;
  if (v6)
LABEL_14:
    memmove(p_dst, v5, v7);
  *((_BYTE *)p_dst + v7) = 0;
  prop::systemlogs::get((char *)&__dst, (uint64_t)__p);
  if (SHIBYTE(v38) < 0)
    operator delete(__dst);
  if (v35 >= 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  v12 = xpc_string_create((const char *)v11);
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E0CF0FF8], v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  Timestamp::Timestamp((Timestamp *)&v32);
  Timestamp::asString((uint64_t)&v32, 0, 9, &__dst);
  if (v38 >= 0)
    v14 = (const char *)&__dst;
  else
    v14 = (const char *)__dst;
  v15 = xpc_string_create(v14);
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E0CF10E0], v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  if (SHIBYTE(v38) < 0)
    operator delete(__dst);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v32, v33);
  v17 = xpc_string_create(a2);
  if (!v17)
    v17 = xpc_null_create();
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E0CF10C8], v17);
  v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  v19 = xpc_BOOL_create(0);
  if (!v19)
    v19 = xpc_null_create();
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E0CF1188], v19);
  v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  v32 = 0xAAAAAAAAAAAAAAAALL;
  v33 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF335000);
  }
  __dst = (void **)MEMORY[0x1E0C809B0];
  v37 = 0x40000000;
  v38 = (int64_t)___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v39 = &__block_descriptor_tmp_13_2;
  v40 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v22 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v31 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_38;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &__dst);
    v22 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v31 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_38;
  }
  v23 = (unint64_t *)(v22 + 8);
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
LABEL_38:
  abm::HelperClient::create();
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
      v30 = v4;
      if (v4)
        goto LABEL_43;
LABEL_45:
      v30 = xpc_null_create();
      goto LABEL_46;
    }
  }
  v30 = v4;
  if (!v4)
    goto LABEL_45;
LABEL_43:
  xpc_retain(v4);
LABEL_46:
  abm::HelperClient::perform();
  xpc_release(v30);
  v27 = v33;
  if (v33)
  {
    v28 = (unint64_t *)&v33->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      if ((SHIBYTE(v35) & 0x80000000) == 0)
        goto LABEL_52;
      goto LABEL_51;
    }
  }
  if (SHIBYTE(v35) < 0)
LABEL_51:
    operator delete(__p[0]);
LABEL_52:
  xpc_release(v4);
}

void sub_1BF4FD298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;

  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  xpc_release(object);
  object = 0;
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  if (a22 < 0)
    operator delete(__p);
  xpc_release(v28);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<QMux>::__emplace_unique_key_args<QMux,QMux const&>(uint64_t **a1, QMux *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  QMux *v9;
  uint64_t *result;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v8 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x30uLL);
    v12 = v11;
    v13 = a3[1];
    v11[4] = *a3;
    v11[5] = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v8;
    *v6 = v11;
    v16 = (uint64_t *)**a1;
    if (v16)
    {
      *a1 = v16;
      v12 = *v6;
    }
    result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return result;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v9 = (QMux *)(v5 + 4);
      if (!QMux::operator<(a2, (QMux *)(v5 + 4)))
        break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_10;
    }
    result = (uint64_t *)QMux::operator<(v9, a2);
    if (!(_DWORD)result)
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_10;
  }
  if (!*v6)
    goto LABEL_10;
  return result;
}

BOOL QMux::operator<(QMux *a1, QMux *a2)
{
  int v3;
  void *v4;
  unsigned __int8 v5;
  size_t v6;
  void **v7;
  size_t v8;
  _QWORD *v9;
  size_t v10;
  int v11;
  _QWORD v13[2];
  unsigned __int8 v14;
  void *__p[2];
  unsigned __int8 v16;

  QMux::getName(a1);
  QMux::getName(a2);
  v3 = (char)v14;
  v4 = (void *)v13[0];
  v5 = v16;
  if ((v16 & 0x80u) == 0)
    v6 = v16;
  else
    v6 = (size_t)__p[1];
  if ((v16 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v8 = v14;
  else
    v8 = v13[1];
  if ((v14 & 0x80u) == 0)
    v9 = v13;
  else
    v9 = (_QWORD *)v13[0];
  if (v8 >= v6)
    v10 = v6;
  else
    v10 = v8;
  v11 = memcmp(v7, v9, v10);
  if (v3 < 0)
  {
    operator delete(v4);
    if ((v16 & 0x80) == 0)
      goto LABEL_18;
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_18;
  }
  operator delete(__p[0]);
LABEL_18:
  if (v11)
    return v11 < 0;
  else
    return v6 < v8;
}

void sub_1BF4FD564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,QMux>,std::__map_value_compare<std::string,std::__value_type<std::string,QMux>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,QMux>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,QMux>,std::__map_value_compare<std::string,std::__value_type<std::string,QMux>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,QMux>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,QMux>,std::__map_value_compare<std::string,std::__value_type<std::string,QMux>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,QMux>>>::destroy(*((_QWORD *)a1 + 1));
    QMux::~QMux((QMux *)(a1 + 56));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void std::__shared_ptr_emplace<qmi::QMuxServerAccepter>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E790C278;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<qmi::QMuxServerAccepter>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E790C278;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<qmi::QMuxServerAccepter>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::__function::__func<BOOL (*)(void *),std::allocator<BOOL (*)(void *)>,BOOL ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E790C2C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(void *),std::allocator<BOOL (*)(void *)>,BOOL ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E790C2C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(void *),std::allocator<BOOL (*)(void *)>,BOOL ()(void *)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

uint64_t std::__function::__func<BOOL (*)(void *),std::allocator<BOOL (*)(void *)>,BOOL ()(void *)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF548085)
    return a1 + 8;
  if (((v3 & 0x80000001BF548085 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF548085))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF548085 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<BOOL (*)(void *),std::allocator<BOOL (*)(void *)>,BOOL ()(void *)>::target_type()
{
}

uint64_t *std::__tree<std::__value_type<std::string,QMux>,std::__map_value_compare<std::string,std::__value_type<std::string,QMux>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,QMux>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,QMux> const&>(uint64_t *result, uint64_t a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  int v9;
  const void *v10;
  size_t v11;
  int v12;
  const void *v13;
  size_t v14;
  size_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t **v19;
  BOOL v20;
  int v21;
  uint64_t *v22;
  size_t v23;
  int v24;
  const void *v25;
  size_t v26;
  size_t v27;
  uint64_t *v28;
  uint64_t **v29;
  _QWORD *v30;
  const void *v31;
  const void *v32;
  int v33;
  const void *v34;
  size_t v35;
  size_t v36;
  int v37;
  uint64_t **v38;
  uint64_t *v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  int v45;
  uint64_t *v46;
  size_t v47;
  size_t v48;
  int v49;
  uint64_t *v50;
  uint64_t *v51;
  std::string *v52;
  _QWORD *v53;
  const void *v54;
  const void *v55;
  int v56;
  const void *v57;
  size_t v58;
  size_t v59;
  int v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;

  v6 = (uint64_t **)a2;
  v7 = result;
  v8 = (uint64_t **)(result + 1);
  if (result + 1 == (uint64_t *)a2)
    goto LABEL_23;
  v9 = *((char *)a3 + 23);
  if (v9 >= 0)
    v10 = a3;
  else
    v10 = *a3;
  if (v9 >= 0)
    v11 = *((unsigned __int8 *)a3 + 23);
  else
    v11 = (size_t)a3[1];
  v12 = *(char *)(a2 + 55);
  if (v12 >= 0)
    v13 = (const void *)(a2 + 32);
  else
    v13 = *(const void **)(a2 + 32);
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(a2 + 55);
  else
    v14 = *(_QWORD *)(a2 + 40);
  if (v14 >= v11)
    v15 = v11;
  else
    v15 = v14;
  result = (uint64_t *)memcmp(v10, v13, v15);
  if (!(_DWORD)result)
  {
    if (v11 >= v14)
      goto LABEL_19;
LABEL_23:
    v16 = *v6;
    if ((uint64_t **)*v7 == v6)
    {
      v18 = v6;
    }
    else
    {
      if (v16)
      {
        v17 = *v6;
        do
        {
          v18 = (uint64_t **)v17;
          v17 = (uint64_t *)v17[1];
        }
        while (v17);
      }
      else
      {
        v19 = v6;
        do
        {
          v18 = (uint64_t **)v19[2];
          v20 = *v18 == (uint64_t *)v19;
          v19 = v18;
        }
        while (v20);
      }
      v21 = *((char *)v18 + 55);
      if (v21 >= 0)
        v22 = (uint64_t *)(v18 + 4);
      else
        v22 = v18[4];
      if (v21 >= 0)
        v23 = *((unsigned __int8 *)v18 + 55);
      else
        v23 = (size_t)v18[5];
      v24 = *((char *)a3 + 23);
      if (v24 >= 0)
        v25 = a3;
      else
        v25 = *a3;
      if (v24 >= 0)
        v26 = *((unsigned __int8 *)a3 + 23);
      else
        v26 = (size_t)a3[1];
      if (v26 >= v23)
        v27 = v23;
      else
        v27 = v26;
      result = (uint64_t *)memcmp(v22, v25, v27);
      if ((_DWORD)result)
      {
        if ((result & 0x80000000) == 0)
          goto LABEL_48;
      }
      else if (v23 >= v26)
      {
LABEL_48:
        v28 = *v8;
        v29 = v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_100;
        while (1)
        {
          v6 = (uint64_t **)v28;
          v32 = (const void *)v28[4];
          v30 = v28 + 4;
          v31 = v32;
          v33 = *((char *)v30 + 23);
          if (v33 >= 0)
            v34 = v30;
          else
            v34 = v31;
          if (v33 >= 0)
            v35 = *((unsigned __int8 *)v30 + 23);
          else
            v35 = v30[1];
          if (v35 >= v26)
            v36 = v26;
          else
            v36 = v35;
          v37 = memcmp(v25, v34, v36);
          if (v37)
          {
            if (v37 < 0)
              goto LABEL_50;
LABEL_64:
            result = (uint64_t *)memcmp(v34, v25, v36);
            if ((_DWORD)result)
            {
              if ((result & 0x80000000) == 0)
                return result;
            }
            else if (v35 >= v26)
            {
              return result;
            }
            v28 = v6[1];
            if (!v28)
            {
LABEL_69:
              v29 = v6 + 1;
              goto LABEL_100;
            }
          }
          else
          {
            if (v26 >= v35)
              goto LABEL_64;
LABEL_50:
            v28 = *v6;
            v29 = v6;
            if (!*v6)
              goto LABEL_100;
          }
        }
      }
    }
    if (v16)
      v38 = v18;
    else
      v38 = v6;
    if (v16)
      v29 = v18 + 1;
    else
      v29 = v6;
    if (*v29)
      return result;
    v6 = v38;
    goto LABEL_100;
  }
  if ((result & 0x80000000) != 0)
    goto LABEL_23;
LABEL_19:
  result = (uint64_t *)memcmp(v13, v10, v15);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v14 >= v11)
  {
    return result;
  }
  v29 = v6 + 1;
  v39 = v6[1];
  if (v39)
  {
    do
    {
      v29 = (uint64_t **)v39;
      v39 = (uint64_t *)*v39;
      v6 = v29;
      v40 = v29;
    }
    while (v39);
  }
  else
  {
    v40 = v6;
    do
    {
      v41 = (uint64_t *)v40;
      v40 = (uint64_t **)v40[2];
    }
    while (*v40 != v41);
  }
  if (v40 == v8)
    goto LABEL_100;
  v44 = v40[4];
  v42 = (uint64_t *)(v40 + 4);
  v43 = v44;
  v45 = *((char *)v42 + 23);
  if (v45 >= 0)
    v46 = v42;
  else
    v46 = v43;
  if (v45 >= 0)
    v47 = *((unsigned __int8 *)v42 + 23);
  else
    v47 = v42[1];
  if (v47 >= v11)
    v48 = v11;
  else
    v48 = v47;
  v49 = memcmp(v10, v46, v48);
  if (v49)
  {
    if (v49 < 0)
      goto LABEL_100;
LABEL_99:
    v50 = *v8;
    v29 = v8;
    v6 = v8;
    if (!*v8)
      goto LABEL_100;
    while (1)
    {
      v6 = (uint64_t **)v50;
      v55 = (const void *)v50[4];
      v53 = v50 + 4;
      v54 = v55;
      v56 = *((char *)v53 + 23);
      if (v56 >= 0)
        v57 = v53;
      else
        v57 = v54;
      if (v56 >= 0)
        v58 = *((unsigned __int8 *)v53 + 23);
      else
        v58 = v53[1];
      if (v58 >= v11)
        v59 = v11;
      else
        v59 = v58;
      v60 = memcmp(v10, v57, v59);
      if (v60)
      {
        if (v60 < 0)
          goto LABEL_102;
LABEL_116:
        result = (uint64_t *)memcmp(v57, v10, v59);
        if ((_DWORD)result)
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v58 >= v11)
        {
          return result;
        }
        v50 = v6[1];
        if (!v50)
          goto LABEL_69;
      }
      else
      {
        if (v11 >= v58)
          goto LABEL_116;
LABEL_102:
        v50 = *v6;
        v29 = v6;
        if (!*v6)
          goto LABEL_100;
      }
    }
  }
  if (v11 >= v47)
    goto LABEL_99;
LABEL_100:
  v51 = (uint64_t *)operator new(0x48uLL);
  v52 = (std::string *)(v51 + 4);
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v52, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&v52->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    v51[6] = *(_QWORD *)(a4 + 16);
  }
  v61 = *(_QWORD *)(a4 + 32);
  v51[7] = *(_QWORD *)(a4 + 24);
  v51[8] = v61;
  if (v61)
  {
    v62 = (unint64_t *)(v61 + 8);
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  *v51 = 0;
  v51[1] = 0;
  v51[2] = (uint64_t)v6;
  *v29 = v51;
  v64 = *(_QWORD *)*v7;
  if (v64)
  {
    *v7 = v64;
    v51 = *v29;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[1], v51);
  ++v7[2];
  return result;
}

void sub_1BF4FDAEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZN3ctu2cf8for_eachINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_EEvPK14__CFDictionaryU13block_pointerFvRKT_RKT0_E_block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *__p[2];
  uint64_t v3;
  void *v4[2];
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 32);
  ctu::cf::assign();
  *(_OWORD *)v4 = 0uLL;
  v5 = 0;
  v6 = 0uLL;
  v7 = 0;
  ctu::cf::assign();
  v3 = 0;
  *(_OWORD *)__p = 0uLL;
  (*(void (**)(uint64_t, void **, void **))(v1 + 16))(v1, v4, __p);
  if ((SHIBYTE(v3) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v5) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v4[0]);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v5) < 0)
    goto LABEL_5;
}

void sub_1BF4FDBB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(a9);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::cf::DictApplyFunction(ctu::cf *this, const void *a2, const void *a3, void *a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
}

void ctu::SharedSynchronizable<QMITransportService>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19QMITransportServiceE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E790C398;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI19QMITransportServiceE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c48_ZTSNSt3__110shared_ptrIK19QMITransportServiceEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c48_ZTSNSt3__110shared_ptrIK19QMITransportServiceEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_1BF4FDF1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  if (a14 == v14)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<QMITransportService::engage(void)::$_0::operator() const(void)::{lambda(BOOL,std::string)#1},std::allocator<QMITransportService::engage(void)::$_0::operator() const(void)::{lambda(BOOL,std::string)#1}>,void ()(BOOL,std::string)>::~__func(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &off_1E790C3F8;
  v2 = a1[4];
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = a1[4];
    if (v3)
      dispatch_release(v3);
  }
  v4 = (std::__shared_weak_count *)a1[3];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void std::__function::__func<QMITransportService::engage(void)::$_0::operator() const(void)::{lambda(BOOL,std::string)#1},std::allocator<QMITransportService::engage(void)::$_0::operator() const(void)::{lambda(BOOL,std::string)#1}>,void ()(BOOL,std::string)>::~__func(_QWORD *__p)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *__p = &off_1E790C3F8;
  v2 = __p[4];
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = __p[4];
    if (v3)
      dispatch_release(v3);
  }
  v4 = (std::__shared_weak_count *)__p[3];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(__p);
}

char *std::__function::__func<QMITransportService::engage(void)::$_0::operator() const(void)::{lambda(BOOL,std::string)#1},std::allocator<QMITransportService::engage(void)::$_0::operator() const(void)::{lambda(BOOL,std::string)#1}>,void ()(BOOL,std::string)>::__clone(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;

  v2 = (char *)operator new(0x38uLL);
  v3 = v2;
  *(_QWORD *)v2 = &off_1E790C3F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)v2 + 3) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(NSObject **)(a1 + 32);
  *((_QWORD *)v2 + 4) = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(v7);
  }
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a1 + 40);
  return v3;
}

__n128 std::__function::__func<QMITransportService::engage(void)::$_0::operator() const(void)::{lambda(BOOL,std::string)#1},std::allocator<QMITransportService::engage(void)::$_0::operator() const(void)::{lambda(BOOL,std::string)#1}>,void ()(BOOL,std::string)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;
  NSObject *v8;
  __n128 result;

  *(_QWORD *)a2 = &off_1E790C3F8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(NSObject **)(a1 + 32);
  *(_QWORD *)(a2 + 32) = v7;
  if (v7)
  {
    dispatch_retain(v7);
    v8 = *(NSObject **)(a2 + 32);
    if (v8)
      dispatch_group_enter(v8);
  }
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

void std::__function::__func<QMITransportService::engage(void)::$_0::operator() const(void)::{lambda(BOOL,std::string)#1},std::allocator<QMITransportService::engage(void)::$_0::operator() const(void)::{lambda(BOOL,std::string)#1}>,void ()(BOOL,std::string)>::destroy(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  v2 = *(NSObject **)(a1 + 32);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 32);
    if (v3)
      dispatch_release(v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 24);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void std::__function::__func<QMITransportService::engage(void)::$_0::operator() const(void)::{lambda(BOOL,std::string)#1},std::allocator<QMITransportService::engage(void)::$_0::operator() const(void)::{lambda(BOOL,std::string)#1}>,void ()(BOOL,std::string)>::destroy_deallocate(_QWORD *__p)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  v2 = __p[4];
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = __p[4];
    if (v3)
      dispatch_release(v3);
  }
  v4 = (std::__shared_weak_count *)__p[3];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(__p);
}

void std::__function::__func<QMITransportService::engage(void)::$_0::operator() const(void)::{lambda(BOOL,std::string)#1},std::allocator<QMITransportService::engage(void)::$_0::operator() const(void)::{lambda(BOOL,std::string)#1}>,void ()(BOOL,std::string)>::operator()(_QWORD *a1, char *a2, uint64_t a3)
{
  char v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p[2];
  uint64_t v14;
  _QWORD v15[4];
  char v16;
  _QWORD block[6];

  v4 = *a2;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v14 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v16 = v4;
  v5 = (std::__shared_weak_count *)a1[3];
  if (!v5)
    goto LABEL_10;
  v6 = a1[1];
  v7 = std::__shared_weak_count::lock(v5);
  if (!v7)
    goto LABEL_10;
  v8 = v7;
  if (a1[2])
  {
    v9 = a1[6];
    v15[0] = a1[5];
    v15[1] = &v16;
    v15[2] = v9;
    v15[3] = __p;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableI19QMITransportServiceE20execute_wrapped_syncIZZZNS1_6engageEvENK3__0clEvENKUlbNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEE_clEbSB_EUlvE_EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSE__block_invoke;
    block[3] = &__block_descriptor_tmp_87;
    block[4] = v6 + 72;
    block[5] = v15;
    v10 = *(NSObject **)(v6 + 88);
    if (*(_QWORD *)(v6 + 96))
      dispatch_async_and_wait(v10, block);
    else
      dispatch_sync(v10, block);
  }
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
LABEL_10:
    if ((SHIBYTE(v14) & 0x80000000) == 0)
      return;
LABEL_13:
    operator delete(__p[0]);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (SHIBYTE(v14) < 0)
    goto LABEL_13;
}

uint64_t std::__function::__func<QMITransportService::engage(void)::$_0::operator() const(void)::{lambda(BOOL,std::string)#1},std::allocator<QMITransportService::engage(void)::$_0::operator() const(void)::{lambda(BOOL,std::string)#1}>,void ()(BOOL,std::string)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN19QMITransportService6engageEvENK3$_0clEvEUlbNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN19QMITransportService6engageEvENK3$_0clEvEUlbNSt3__112basic_stringIcNS1_11char_traits"
                                "IcEENS1_9allocatorIcEEEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN19QMITransportService6engageEvENK3$_0clEvEUlbNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN19QMITransportService6engageEvENK3$_0clEvEUlbNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<QMITransportService::engage(void)::$_0::operator() const(void)::{lambda(BOOL,std::string)#1},std::allocator<QMITransportService::engage(void)::$_0::operator() const(void)::{lambda(BOOL,std::string)#1}>,void ()(BOOL,std::string)>::target_type()
{
}

void ___ZNK3ctu20SharedSynchronizableI19QMITransportServiceE20execute_wrapped_syncIZNS1_6engageEvE3__1EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  int v4;
  NSObject *v5;
  uint64_t *v6;
  NSObject *v7;
  uint64_t *v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_BYTE **)v1;
  if (**(_BYTE **)v1)
  {
    v4 = **(unsigned __int8 **)(v1 + 8);
    *v3 = v4 ^ 1;
    if (!v4)
    {
      v5 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v9) = 0;
        _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "#I ----------------- Engaged ----------------", (uint8_t *)&v9, 2u);
      }
      return;
    }
  }
  else
  {
    *v3 = 0;
  }
  v6 = *(uint64_t **)(v1 + 24);
  if (*((char *)v6 + 23) < 0)
    v6 = (uint64_t *)*v6;
  (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(v2 + 128) + 16))(*(_QWORD *)(v2 + 128), v6, 1);
  v7 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    v8 = *(uint64_t **)(v1 + 24);
    if (*((char *)v8 + 23) < 0)
      v8 = (uint64_t *)*v8;
    v9 = 136315138;
    v10 = v8;
    _os_log_error_impl(&dword_1BF335000, v7, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v9, 0xCu);
  }
}

void ___ZNK3ctu20SharedSynchronizableI19QMITransportServiceE20execute_wrapped_syncIZNS1_7recoverEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  dispatch_object_t *v14;
  NSObject *v15;
  uint64_t v16;
  uint8_t *v17;
  uint8_t *v18;
  uint64_t v19;
  uint8_t v20[24];
  uint8_t *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD **)(a1 + 40);
  v2 = (_QWORD *)*v1;
  v3 = *(NSObject **)(*v1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v20 = 0;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I ----------------- Recovering ----------------", v20, 2u);
  }
  v4 = (std::__shared_weak_count *)v2[10];
  if (!v4 || (v5 = v2[9], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = (_QWORD *)v2[18];
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v14 = (dispatch_object_t *)v1[1];
  v15 = *v14;
  if (*v14)
  {
    dispatch_retain(*v14);
    dispatch_group_enter(v15);
  }
  v16 = v1[2];
  v21 = 0;
  v17 = (uint8_t *)operator new(0x30uLL);
  *(_QWORD *)v17 = &off_1E790C4E8;
  *((_QWORD *)v17 + 1) = v2;
  *((_QWORD *)v17 + 2) = v5;
  *((_QWORD *)v17 + 3) = v7;
  *((_QWORD *)v17 + 4) = v15;
  *((_QWORD *)v17 + 5) = v16;
  v21 = v17;
  RouterIPCController::recover(v12, v20);
  v18 = v21;
  if (v21 == v20)
  {
    v19 = 4;
    v18 = v20;
    goto LABEL_19;
  }
  if (v21)
  {
    v19 = 5;
LABEL_19:
    (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
  }
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF4FE6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  std::__shared_weak_count *v12;
  uint64_t *v13;
  uint64_t *v15;
  uint64_t v16;

  v15 = a12;
  if (a12 == v13)
  {
    v16 = 4;
    v15 = &a9;
  }
  else
  {
    if (!a12)
    {
      std::__shared_weak_count::__release_weak(v12);
      _Unwind_Resume(a1);
    }
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
  std::__shared_weak_count::__release_weak(v12);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<QMITransportService::recover(void)::$_0::operator() const(void)::{lambda(BOOL)#1},std::allocator<QMITransportService::recover(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &off_1E790C4E8;
  v2 = a1[4];
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = a1[4];
    if (v3)
      dispatch_release(v3);
  }
  v4 = (std::__shared_weak_count *)a1[3];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void std::__function::__func<QMITransportService::recover(void)::$_0::operator() const(void)::{lambda(BOOL)#1},std::allocator<QMITransportService::recover(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func(_QWORD *__p)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *__p = &off_1E790C4E8;
  v2 = __p[4];
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = __p[4];
    if (v3)
      dispatch_release(v3);
  }
  v4 = (std::__shared_weak_count *)__p[3];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(__p);
}

char *std::__function::__func<QMITransportService::recover(void)::$_0::operator() const(void)::{lambda(BOOL)#1},std::allocator<QMITransportService::recover(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;

  v2 = (char *)operator new(0x30uLL);
  v3 = v2;
  *(_QWORD *)v2 = &off_1E790C4E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)v2 + 3) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(NSObject **)(a1 + 32);
  *((_QWORD *)v2 + 4) = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(v7);
  }
  *((_QWORD *)v3 + 5) = *(_QWORD *)(a1 + 40);
  return v3;
}

void std::__function::__func<QMITransportService::recover(void)::$_0::operator() const(void)::{lambda(BOOL)#1},std::allocator<QMITransportService::recover(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;
  NSObject *v8;

  *(_QWORD *)a2 = &off_1E790C4E8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(NSObject **)(a1 + 32);
  *(_QWORD *)(a2 + 32) = v7;
  if (v7)
  {
    dispatch_retain(v7);
    v8 = *(NSObject **)(a2 + 32);
    if (v8)
      dispatch_group_enter(v8);
  }
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
}

void std::__function::__func<QMITransportService::recover(void)::$_0::operator() const(void)::{lambda(BOOL)#1},std::allocator<QMITransportService::recover(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::destroy(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  v2 = *(NSObject **)(a1 + 32);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 32);
    if (v3)
      dispatch_release(v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 24);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void std::__function::__func<QMITransportService::recover(void)::$_0::operator() const(void)::{lambda(BOOL)#1},std::allocator<QMITransportService::recover(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::destroy_deallocate(_QWORD *__p)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  v2 = __p[4];
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = __p[4];
    if (v3)
      dispatch_release(v3);
  }
  v4 = (std::__shared_weak_count *)__p[3];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(__p);
}

void std::__function::__func<QMITransportService::recover(void)::$_0::operator() const(void)::{lambda(BOOL)#1},std::allocator<QMITransportService::recover(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::operator()(_QWORD *a1, char *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[2];
  char v11;
  _QWORD block[6];

  v11 = *a2;
  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v4 = a1[1];
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      if (a1[2])
      {
        v10[0] = a1[5];
        v10[1] = &v11;
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 0x40000000;
        block[2] = ___ZNK3ctu20SharedSynchronizableI19QMITransportServiceE20execute_wrapped_syncIZZZNS1_7recoverEvENK3__0clEvENKUlbE_clEbEUlvE_EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
        block[3] = &__block_descriptor_tmp_91_1;
        block[4] = v4 + 72;
        block[5] = v10;
        v7 = *(NSObject **)(v4 + 88);
        if (*(_QWORD *)(v4 + 96))
          dispatch_async_and_wait(v7, block);
        else
          dispatch_sync(v7, block);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

uint64_t std::__function::__func<QMITransportService::recover(void)::$_0::operator() const(void)::{lambda(BOOL)#1},std::allocator<QMITransportService::recover(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN19QMITransportService7recoverEvENK3$_0clEvEUlbE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN19QMITransportService7recoverEvENK3$_0clEvEUlbE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN19QMITransportService7recoverEvENK3$_0clEvEUlbE_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN19QMITransportService7recoverEvENK3$_0clEvEUlbE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<QMITransportService::recover(void)::$_0::operator() const(void)::{lambda(BOOL)#1},std::allocator<QMITransportService::recover(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::target_type()
{
}

uint64_t ___ZNK3ctu20SharedSynchronizableI19QMITransportServiceE20execute_wrapped_syncIZZZNS1_7recoverEvENK3__0clEvENKUlbE_clEbEUlvE_EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t result)
{
  ***(_BYTE ***)(result + 40) = **(_BYTE **)(*(_QWORD *)(result + 40) + 8);
  return result;
}

void ___ZNK3ctu20SharedSynchronizableI19QMITransportServiceE20execute_wrapped_syncIZNS1_7recoverEvE3__1EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  int v4;
  NSObject *v5;
  uint64_t *v6;
  NSObject *v7;
  uint64_t *v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_BYTE **)v1;
  if (**(_BYTE **)v1)
  {
    v4 = **(unsigned __int8 **)(v1 + 8);
    *v3 = v4 ^ 1;
    if (!v4)
    {
      v5 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v9) = 0;
        _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "#I ----------------- Recovered ----------------", (uint8_t *)&v9, 2u);
      }
      return;
    }
  }
  else
  {
    *v3 = 0;
  }
  v6 = *(uint64_t **)(v1 + 24);
  if (*((char *)v6 + 23) < 0)
    v6 = (uint64_t *)*v6;
  (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(v2 + 128) + 16))(*(_QWORD *)(v2 + 128), v6, 1);
  v7 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    v8 = *(uint64_t **)(v1 + 24);
    if (*((char *)v8 + 23) < 0)
      v8 = (uint64_t *)*v8;
    v9 = 136315138;
    v10 = v8;
    _os_log_error_impl(&dword_1BF335000, v7, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v9, 0xCu);
  }
}

void ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJNS1_6StatusEEEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  xpc_object_t object;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_DWORD *)(a1 + 40);
  object = xpc_null_create();
  (*(void (**)(uint64_t, int *))(v1 + 16))(v1, &v2);
  xpc_release(object);
}

void sub_1BF4FECA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFv10WakeReasonEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFv10WakeReasonEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

_QWORD *_ZNSt3__110__function6__funcIZZZN19QMITransportService13enterLowPowerEN8dispatch13group_sessionEEUb_EUb0_E3__4NS_9allocatorIS5_EEFvbEED1Ev(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E790C5D8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void _ZNSt3__110__function6__funcIZZZN19QMITransportService13enterLowPowerEN8dispatch13group_sessionEEUb_EUb0_E3__4NS_9allocatorIS5_EEFvbEED0Ev(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_1E790C5D8;
  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

char *_ZNKSt3__110__function6__funcIZZZN19QMITransportService13enterLowPowerEN8dispatch13group_sessionEEUb_EUb0_E3__4NS_9allocatorIS5_EEFvbEE7__cloneEv(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E790C5D8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZZN19QMITransportService13enterLowPowerEN8dispatch13group_sessionEEUb_EUb0_E3__4NS_9allocatorIS5_EEFvbEE7__cloneEPNS0_6__baseIS8_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E790C5D8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void _ZNSt3__110__function6__funcIZZZN19QMITransportService13enterLowPowerEN8dispatch13group_sessionEEUb_EUb0_E3__4NS_9allocatorIS5_EEFvbEE7destroyEv(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void _ZNSt3__110__function6__funcIZZZN19QMITransportService13enterLowPowerEN8dispatch13group_sessionEEUb_EUb0_E3__4NS_9allocatorIS5_EEFvbEE18destroy_deallocateEv(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZZZN19QMITransportService13enterLowPowerEN8dispatch13group_sessionEEUb_EUb0_E3__4NS_9allocatorIS5_EEFvbEEclEOb(_QWORD *a1, char *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[2];
  char v11;
  _QWORD block[6];

  v11 = *a2;
  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v4 = a1[1];
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      if (a1[2])
      {
        v10[0] = v4;
        v10[1] = &v11;
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 0x40000000;
        block[2] = ___ZNK3ctu20SharedSynchronizableI19QMITransportServiceE20execute_wrapped_syncIZZZZNS1_13enterLowPowerEN8dispatch13group_sessionEEUb_EUb0_ENK3__4clEbEUlvE_EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
        block[3] = &__block_descriptor_tmp_94_1;
        block[4] = v4 + 72;
        block[5] = v10;
        v7 = *(NSObject **)(v4 + 88);
        if (*(_QWORD *)(v4 + 96))
          dispatch_async_and_wait(v7, block);
        else
          dispatch_sync(v7, block);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

uint64_t _ZNKSt3__110__function6__funcIZZZN19QMITransportService13enterLowPowerEN8dispatch13group_sessionEEUb_EUb0_E3__4NS_9allocatorIS5_EEFvbEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZZN19QMITransportService13enterLowPowerEN8dispatch13group_sessionEEUb_EUb0_E3$_4")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZZN19QMITransportService13enterLowPowerEN8dispatch13group_sessionEEUb_EUb0_E3$_4" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZZN19QMITransportService13enterLowPowerEN8dispatch13group_sessionEEUb_EUb0_E3$_4"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZZN19QMITransportService13enterLowPowerEN8dispatch13group_sessionEEUb_EUb0_E3$_4" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZZZN19QMITransportService13enterLowPowerEN8dispatch13group_sessionEEUb_EUb0_E3__4NS_9allocatorIS5_EEFvbEE11target_typeEv()
{
  return &_ZTIZZZN19QMITransportService13enterLowPowerEN8dispatch13group_sessionEEUb_EUb0_E3__4;
}

void ___ZNK3ctu20SharedSynchronizableI19QMITransportServiceE20execute_wrapped_syncIZZZZNS1_13enterLowPowerEN8dispatch13group_sessionEEUb_EUb0_ENK3__4clEbEUlvE_EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1)
{
  int64x2_t **v1;
  int64x2_t *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  int64x2_t v7;
  void *v8;
  void *v9;
  NSObject *v10;
  __int16 v11[8];
  uint8_t buf[16];

  v1 = *(int64x2_t ***)(a1 + 40);
  v2 = *v1;
  if ((*v1)[22].i64[1])
  {
    v3 = *(_QWORD *)(v2[20].i64[1] + (((unint64_t)v2[22].i64[0] >> 6) & 0x3FFFFFFFFFFFFF8));
    v4 = v2[22].i64[0] & 0x1FF;
    v5 = *(NSObject **)(v3 + 8 * v4);
    if (v5)
    {
      dispatch_group_leave(v5);
      v6 = *(NSObject **)(v3 + 8 * v4);
      if (v6)
        dispatch_release(v6);
    }
    v7 = vaddq_s64(v2[22], (int64x2_t)xmmword_1BF547DC0);
    v2[22] = v7;
    if (v7.i64[0] >= 0x400uLL)
    {
      operator delete(*(void **)v2[20].i64[1]);
      v2[20].i64[1] += 8;
      v2[22].i64[0] -= 512;
    }
    v8 = (void *)v2[23].i64[0];
    v2[23].i64[0] = 0;
    if (v8)
    {
      TelephonyBasebandWatchdogStop();
      operator delete(v8);
    }
    v9 = (void *)v2[23].i64[1];
    v2[23].i64[1] = 0;
    if (v9)
    {
      TelephonyBasebandWatchdogStop();
      operator delete(v9);
    }
  }
  v10 = v2[2].i64[1];
  if (v1[1]->i8[0])
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF335000, v10, OS_LOG_TYPE_DEFAULT, "#I ----------------- Low Power ----------------", buf, 2u);
    }
  }
  else if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    v11[0] = 0;
    _os_log_error_impl(&dword_1BF335000, v10, OS_LOG_TYPE_ERROR, "-------------- Enter Low Power Failure -------------", (uint8_t *)v11, 2u);
  }
}

void ___ZNK3ctu20SharedSynchronizableI19QMITransportServiceE20execute_wrapped_syncIZNS1_8tearDownEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  dispatch_object_t *v14;
  NSObject *v15;
  uint64_t v16;
  uint8_t *v17;
  uint8_t *v18;
  uint64_t v19;
  uint8_t v20[24];
  uint8_t *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD **)(a1 + 40);
  v2 = (_QWORD *)*v1;
  v3 = *(NSObject **)(*v1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v20 = 0;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I ----------------- Tearing Down ----------------", v20, 2u);
  }
  v4 = (std::__shared_weak_count *)v2[10];
  if (!v4 || (v5 = v2[9], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = (_QWORD *)v2[18];
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v14 = (dispatch_object_t *)v1[1];
  v15 = *v14;
  if (*v14)
  {
    dispatch_retain(*v14);
    dispatch_group_enter(v15);
  }
  v16 = v1[2];
  v21 = 0;
  v17 = (uint8_t *)operator new(0x30uLL);
  *(_QWORD *)v17 = &off_1E790C698;
  *((_QWORD *)v17 + 1) = v2;
  *((_QWORD *)v17 + 2) = v5;
  *((_QWORD *)v17 + 3) = v7;
  *((_QWORD *)v17 + 4) = v15;
  *((_QWORD *)v17 + 5) = v16;
  v21 = v17;
  RouterIPCController::teardown(v12, v20);
  v18 = v21;
  if (v21 == v20)
  {
    v19 = 4;
    v18 = v20;
    goto LABEL_19;
  }
  if (v21)
  {
    v19 = 5;
LABEL_19:
    (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
  }
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF4FF2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  std::__shared_weak_count *v12;
  uint64_t *v13;
  uint64_t *v15;
  uint64_t v16;

  v15 = a12;
  if (a12 == v13)
  {
    v16 = 4;
    v15 = &a9;
  }
  else
  {
    if (!a12)
    {
      std::__shared_weak_count::__release_weak(v12);
      _Unwind_Resume(a1);
    }
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
  std::__shared_weak_count::__release_weak(v12);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<QMITransportService::tearDown(void)::$_0::operator() const(void)::{lambda(BOOL)#1},std::allocator<QMITransportService::tearDown(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &off_1E790C698;
  v2 = a1[4];
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = a1[4];
    if (v3)
      dispatch_release(v3);
  }
  v4 = (std::__shared_weak_count *)a1[3];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void std::__function::__func<QMITransportService::tearDown(void)::$_0::operator() const(void)::{lambda(BOOL)#1},std::allocator<QMITransportService::tearDown(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func(_QWORD *__p)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *__p = &off_1E790C698;
  v2 = __p[4];
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = __p[4];
    if (v3)
      dispatch_release(v3);
  }
  v4 = (std::__shared_weak_count *)__p[3];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(__p);
}

char *std::__function::__func<QMITransportService::tearDown(void)::$_0::operator() const(void)::{lambda(BOOL)#1},std::allocator<QMITransportService::tearDown(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;

  v2 = (char *)operator new(0x30uLL);
  v3 = v2;
  *(_QWORD *)v2 = &off_1E790C698;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)v2 + 3) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(NSObject **)(a1 + 32);
  *((_QWORD *)v2 + 4) = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(v7);
  }
  *((_QWORD *)v3 + 5) = *(_QWORD *)(a1 + 40);
  return v3;
}

void std::__function::__func<QMITransportService::tearDown(void)::$_0::operator() const(void)::{lambda(BOOL)#1},std::allocator<QMITransportService::tearDown(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;
  NSObject *v8;

  *(_QWORD *)a2 = &off_1E790C698;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(NSObject **)(a1 + 32);
  *(_QWORD *)(a2 + 32) = v7;
  if (v7)
  {
    dispatch_retain(v7);
    v8 = *(NSObject **)(a2 + 32);
    if (v8)
      dispatch_group_enter(v8);
  }
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
}

void std::__function::__func<QMITransportService::tearDown(void)::$_0::operator() const(void)::{lambda(BOOL)#1},std::allocator<QMITransportService::tearDown(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::destroy(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  v2 = *(NSObject **)(a1 + 32);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 32);
    if (v3)
      dispatch_release(v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 24);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void std::__function::__func<QMITransportService::tearDown(void)::$_0::operator() const(void)::{lambda(BOOL)#1},std::allocator<QMITransportService::tearDown(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::destroy_deallocate(_QWORD *__p)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  v2 = __p[4];
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = __p[4];
    if (v3)
      dispatch_release(v3);
  }
  v4 = (std::__shared_weak_count *)__p[3];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(__p);
}

void std::__function::__func<QMITransportService::tearDown(void)::$_0::operator() const(void)::{lambda(BOOL)#1},std::allocator<QMITransportService::tearDown(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::operator()(_QWORD *a1, char *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[2];
  char v11;
  _QWORD block[6];

  v11 = *a2;
  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v4 = a1[1];
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      if (a1[2])
      {
        v10[0] = a1[5];
        v10[1] = &v11;
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 0x40000000;
        block[2] = ___ZNK3ctu20SharedSynchronizableI19QMITransportServiceE20execute_wrapped_syncIZZZNS1_8tearDownEvENK3__0clEvENKUlbE_clEbEUlvE_EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
        block[3] = &__block_descriptor_tmp_96_0;
        block[4] = v4 + 72;
        block[5] = v10;
        v7 = *(NSObject **)(v4 + 88);
        if (*(_QWORD *)(v4 + 96))
          dispatch_async_and_wait(v7, block);
        else
          dispatch_sync(v7, block);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

uint64_t std::__function::__func<QMITransportService::tearDown(void)::$_0::operator() const(void)::{lambda(BOOL)#1},std::allocator<QMITransportService::tearDown(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN19QMITransportService8tearDownEvENK3$_0clEvEUlbE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN19QMITransportService8tearDownEvENK3$_0clEvEUlbE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN19QMITransportService8tearDownEvENK3$_0clEvEUlbE_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN19QMITransportService8tearDownEvENK3$_0clEvEUlbE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<QMITransportService::tearDown(void)::$_0::operator() const(void)::{lambda(BOOL)#1},std::allocator<QMITransportService::tearDown(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::target_type()
{
}

uint64_t ___ZNK3ctu20SharedSynchronizableI19QMITransportServiceE20execute_wrapped_syncIZZZNS1_8tearDownEvENK3__0clEvENKUlbE_clEbEUlvE_EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t result)
{
  ***(_BYTE ***)(result + 40) = **(_BYTE **)(*(_QWORD *)(result + 40) + 8);
  return result;
}

void ___ZNK3ctu20SharedSynchronizableI19QMITransportServiceE20execute_wrapped_syncIZNS1_8tearDownEvE3__1EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  int v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_BYTE **)v1;
  if (**(_BYTE **)v1)
  {
    v4 = **(unsigned __int8 **)(v1 + 8);
    *v3 = v4 ^ 1;
    if (!v4)
    {
      v5 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v8) = 0;
        _os_log_impl(&dword_1BF335000, v5, OS_LOG_TYPE_DEFAULT, "#I ----------------- Offline ----------------", (uint8_t *)&v8, 2u);
      }
      return;
    }
  }
  else
  {
    *v3 = 0;
  }
  v6 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    v7 = *(uint64_t **)(v1 + 24);
    if (*((char *)v7 + 23) < 0)
      v7 = (uint64_t *)*v7;
    v8 = 136315138;
    v9 = v7;
    _os_log_error_impl(&dword_1BF335000, v6, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v8, 0xCu);
  }
}

_QWORD *_ZNSt3__110__function6__funcIZZN19QMITransportService12exitLowPowerEN8dispatch13group_sessionEEUb1_E3__7NS_9allocatorIS5_EEFvbEED1Ev(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;

  *a1 = &off_1E790C758;
  v2 = a1[5];
  if (v2)
    dispatch_release(v2);
  v3 = a1[4];
  if (v3)
  {
    dispatch_group_leave(v3);
    v4 = a1[4];
    if (v4)
      dispatch_release(v4);
  }
  v5 = (std::__shared_weak_count *)a1[3];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void _ZNSt3__110__function6__funcIZZN19QMITransportService12exitLowPowerEN8dispatch13group_sessionEEUb1_E3__7NS_9allocatorIS5_EEFvbEED0Ev(_QWORD *__p)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;

  *__p = &off_1E790C758;
  v2 = __p[5];
  if (v2)
    dispatch_release(v2);
  v3 = __p[4];
  if (v3)
  {
    dispatch_group_leave(v3);
    v4 = __p[4];
    if (v4)
      dispatch_release(v4);
  }
  v5 = (std::__shared_weak_count *)__p[3];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  operator delete(__p);
}

char *_ZNKSt3__110__function6__funcIZZN19QMITransportService12exitLowPowerEN8dispatch13group_sessionEEUb1_E3__7NS_9allocatorIS5_EEFvbEE7__cloneEv(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;
  NSObject *v8;

  v2 = (char *)operator new(0x30uLL);
  v3 = v2;
  *(_QWORD *)v2 = &off_1E790C758;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)v2 + 3) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(NSObject **)(a1 + 32);
  *((_QWORD *)v2 + 4) = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(v7);
  }
  v8 = *(NSObject **)(a1 + 40);
  *((_QWORD *)v3 + 5) = v8;
  if (v8)
    dispatch_retain(v8);
  return v3;
}

void _ZNKSt3__110__function6__funcIZZN19QMITransportService12exitLowPowerEN8dispatch13group_sessionEEUb1_E3__7NS_9allocatorIS5_EEFvbEE7__cloneEPNS0_6__baseIS8_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;

  *(_QWORD *)a2 = &off_1E790C758;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(NSObject **)(a1 + 32);
  *(_QWORD *)(a2 + 32) = v7;
  if (v7)
  {
    dispatch_retain(v7);
    v8 = *(NSObject **)(a2 + 32);
    if (v8)
      dispatch_group_enter(v8);
  }
  v9 = *(NSObject **)(a1 + 40);
  *(_QWORD *)(a2 + 40) = v9;
  if (v9)
    dispatch_retain(v9);
}

void _ZNSt3__110__function6__funcIZZN19QMITransportService12exitLowPowerEN8dispatch13group_sessionEEUb1_E3__7NS_9allocatorIS5_EEFvbEE7destroyEv(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;

  v2 = a1[5];
  if (v2)
    dispatch_release(v2);
  v3 = a1[4];
  if (v3)
  {
    dispatch_group_leave(v3);
    v4 = a1[4];
    if (v4)
      dispatch_release(v4);
  }
  v5 = (std::__shared_weak_count *)a1[3];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

void _ZNSt3__110__function6__funcIZZN19QMITransportService12exitLowPowerEN8dispatch13group_sessionEEUb1_E3__7NS_9allocatorIS5_EEFvbEE18destroy_deallocateEv(_QWORD *__p)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;

  v2 = __p[5];
  if (v2)
    dispatch_release(v2);
  v3 = __p[4];
  if (v3)
  {
    dispatch_group_leave(v3);
    v4 = __p[4];
    if (v4)
      dispatch_release(v4);
  }
  v5 = (std::__shared_weak_count *)__p[3];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZZN19QMITransportService12exitLowPowerEN8dispatch13group_sessionEEUb1_E3__7NS_9allocatorIS5_EEFvbEEclEOb(_QWORD *a1, char *a2)
{
  std::__shared_weak_count *v3;
  char v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD v15[5];
  dispatch_object_t object;
  dispatch_group_t group;
  char v18;
  _QWORD *v19;
  _QWORD block[6];

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v4 = *a2;
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (!a1[2])
      {
LABEL_16:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      v8 = MEMORY[0x1E0C809B0];
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 1174405120;
      v15[2] = ___ZZZN19QMITransportService12exitLowPowerEN8dispatch13group_sessionEEUb1_ENK3__7clEb_block_invoke;
      v15[3] = &__block_descriptor_tmp_107;
      v18 = v4;
      v9 = a1[5];
      v15[4] = v5;
      object = v9;
      if (v9)
        dispatch_retain(v9);
      v10 = a1[4];
      group = v10;
      if (v10)
      {
        dispatch_retain(v10);
        dispatch_group_enter(v10);
      }
      v19 = v15;
      block[0] = v8;
      block[1] = 0x40000000;
      block[2] = ___ZNK3ctu20SharedSynchronizableI19QMITransportServiceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
      block[3] = &__block_descriptor_tmp_82_0;
      block[4] = v5 + 72;
      block[5] = &v19;
      v11 = *(NSObject **)(v5 + 88);
      if (*(_QWORD *)(v5 + 96))
      {
        dispatch_async_and_wait(v11, block);
        v12 = group;
        if (!group)
        {
LABEL_14:
          if (object)
            dispatch_release(object);
          goto LABEL_16;
        }
      }
      else
      {
        dispatch_sync(v11, block);
        v12 = group;
        if (!group)
          goto LABEL_14;
      }
      dispatch_group_leave(v12);
      if (group)
        dispatch_release(group);
      goto LABEL_14;
    }
  }
}

uint64_t _ZNKSt3__110__function6__funcIZZN19QMITransportService12exitLowPowerEN8dispatch13group_sessionEEUb1_E3__7NS_9allocatorIS5_EEFvbEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN19QMITransportService12exitLowPowerEN8dispatch13group_sessionEEUb1_E3$_7")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN19QMITransportService12exitLowPowerEN8dispatch13group_sessionEEUb1_E3$_7" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN19QMITransportService12exitLowPowerEN8dispatch13group_sessionEEUb1_E3$_7"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN19QMITransportService12exitLowPowerEN8dispatch13group_sessionEEUb1_E3$_7" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZZN19QMITransportService12exitLowPowerEN8dispatch13group_sessionEEUb1_E3__7NS_9allocatorIS5_EEFvbEE11target_typeEv()
{
  return &_ZTIZZN19QMITransportService12exitLowPowerEN8dispatch13group_sessionEEUb1_E3__7;
}

void ___ZZZN19QMITransportService12exitLowPowerEN8dispatch13group_sessionEEUb1_ENK3__7clEb_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  NSObject *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD v17[2];
  void (*v18)(uint64_t, QMux *);
  void *v19;
  uint8_t *v20;
  uint64_t v21;
  uint8_t buf[8];
  uint8_t *v23;
  uint64_t v24;
  char v25;
  _QWORD block[5];
  dispatch_group_t group;
  _QWORD v28[2];
  uint64_t (*v29)(uint64_t, QMux *);
  void *v30;
  uint64_t v31;
  dispatch_object_t v32;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(a1 + 56))
  {
    v3 = *(_QWORD **)(v1 + 240);
    v4 = (_QWORD *)(v1 + 248);
    v5 = MEMORY[0x1E0C809B0];
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 1174405120;
    v29 = ___ZZZN19QMITransportService12exitLowPowerEN8dispatch13group_sessionEEUb1_ENK3__7clEb_block_invoke_2;
    v30 = &__block_descriptor_tmp_98_0;
    v6 = *(NSObject **)(a1 + 40);
    v31 = v1;
    v32 = v6;
    if (v6)
      dispatch_retain(v6);
    if (v3 != v4)
    {
      do
      {
        v29((uint64_t)v28, (QMux *)(v3 + 4));
        v10 = (_QWORD *)v3[1];
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = (_QWORD *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (_QWORD *)v3[2];
            v12 = *v11 == (_QWORD)v3;
            v3 = v11;
          }
          while (!v12);
        }
        v3 = v11;
      }
      while (v11 != v4);
    }
    v7 = *(NSObject **)(v1 + 88);
    block[0] = v5;
    block[1] = 1174405120;
    block[2] = ___ZZZN19QMITransportService12exitLowPowerEN8dispatch13group_sessionEEUb1_ENK3__7clEb_block_invoke_99;
    block[3] = &__block_descriptor_tmp_102_1;
    v9 = *(NSObject **)(a1 + 40);
    v8 = *(NSObject **)(a1 + 48);
    block[4] = v1;
    group = v8;
    if (v8)
    {
      dispatch_retain(v8);
      dispatch_group_enter(v8);
    }
    dispatch_group_notify(v9, v7, block);
    if (group)
    {
      dispatch_group_leave(group);
      if (group)
        dispatch_release(group);
    }
    if (v32)
      dispatch_release(v32);
  }
  else
  {
    v13 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF335000, v13, OS_LOG_TYPE_ERROR, "----------------- Exit Low Power Failure ----------------", buf, 2u);
    }
    *(_QWORD *)buf = 0;
    v23 = buf;
    v24 = 0x2000000000;
    v25 = 0;
    v14 = *(_QWORD **)(v1 + 240);
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 0x40000000;
    v18 = ___ZZZN19QMITransportService12exitLowPowerEN8dispatch13group_sessionEEUb1_ENK3__7clEb_block_invoke_103;
    v19 = &unk_1E790C848;
    v20 = buf;
    v21 = v1;
    if (v14 == (_QWORD *)(v1 + 248))
      goto LABEL_31;
    do
    {
      v18((uint64_t)v17, (QMux *)(v14 + 4));
      v15 = (_QWORD *)v14[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v14[2];
          v12 = *v16 == (_QWORD)v14;
          v14 = v16;
        }
        while (!v12);
      }
      v14 = v16;
    }
    while (v16 != (_QWORD *)(v1 + 248));
    if (!v23[24])
LABEL_31:
      (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(v1 + 128) + 16))(*(_QWORD *)(v1 + 128), "Exit Low Power Failure", 1);
    _Block_object_dispose(buf, 8);
  }
}

void sub_1BF4FFF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BF4FFF28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  NSObject *v3;

  v3 = *(NSObject **)(v1 - 72);
  if (!v3)
    _Unwind_Resume(exception_object);
  dispatch_release(v3);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZZZN19QMITransportService12exitLowPowerEN8dispatch13group_sessionEEUb1_ENK3__7clEb_block_invoke_2(uint64_t a1, QMux *a2)
{
  NSObject *v3;
  void *p_p;
  void *__p;
  char v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    QMux::getName(a2);
    if (v7 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315394;
    v9 = "operator()_block_invoke_2";
    v10 = 2080;
    v11 = p_p;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I %s: Power up %s", buf, 0x16u);
    if (v7 < 0)
      operator delete(__p);
  }
  return QMux::enterPowerMode();
}

void ___ZZZN19QMITransportService12exitLowPowerEN8dispatch13group_sessionEEUb1_ENK3__7clEb_block_invoke_99(uint64_t a1)
{
  QMITransportService *v1;
  _QWORD *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  _QWORD v9[2];
  uint64_t (*v10)(uint64_t, QMux *);
  void *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = *(QMITransportService **)(a1 + 32);
  v13 = 0;
  v14 = &v13;
  v15 = 0x2000000000;
  v16 = 0;
  v2 = (_QWORD *)*((_QWORD *)v1 + 30);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v10 = ___ZZZN19QMITransportService12exitLowPowerEN8dispatch13group_sessionEEUb1_ENK3__7clEb_block_invoke_2_100;
  v11 = &unk_1E790C7F0;
  v12 = &v13;
  if (v2 != (_QWORD *)((char *)v1 + 248))
  {
    do
    {
      v10((uint64_t)v9, (QMux *)(v2 + 4));
      v6 = (_QWORD *)v2[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v2[2];
          v8 = *v7 == (_QWORD)v2;
          v2 = v7;
        }
        while (!v8);
      }
      v2 = v7;
    }
    while (v7 != (_QWORD *)((char *)v1 + 248));
  }
  v3 = *((_QWORD *)v1 + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = v14[3];
    v5 = *((_QWORD *)v1 + 32);
    *(_DWORD *)buf = 134218240;
    v18 = v4;
    v19 = 2048;
    v20 = v5;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I QMux exited low-power: %zd of %zd QMux's", buf, 0x16u);
    v3 = *((_QWORD *)v1 + 5);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF335000, v3, OS_LOG_TYPE_DEFAULT, "#I ----------------- Awake ----------------", buf, 2u);
  }
  QMITransportService::reportPowerDownMessages_sync(v1);
  _Block_object_dispose(&v13, 8);
}

void sub_1BF5001F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BF50020C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZZZN19QMITransportService12exitLowPowerEN8dispatch13group_sessionEEUb1_ENK3__7clEb_block_invoke_2_100(uint64_t a1, QMux *this)
{
  uint64_t result;

  result = QMux::isPoweredDown(this);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += result ^ 1;
  return result;
}

void ___ZZZN19QMITransportService12exitLowPowerEN8dispatch13group_sessionEEUb1_ENK3__7clEb_block_invoke_103(uint64_t a1, QMux *this)
{
  uint64_t v4;
  std::string *v5;
  __int128 v6;
  NSObject *v7;
  void **v8;
  void *__p[2];
  int64_t v10;
  std::string v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 40);
  if (QMux::isRunning(this))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    QMux::getName(this);
    v5 = std::string::append(&v11, " failed to power down", 0x15uLL);
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v10 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
    v7 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = __p;
      if (v10 < 0)
        v8 = (void **)__p[0];
      LODWORD(v11.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v11.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
      _os_log_error_impl(&dword_1BF335000, v7, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v11, 0xCu);
    }
    QMux::invokeReset();
    if (SHIBYTE(v10) < 0)
      operator delete(__p[0]);
  }
}

void sub_1BF5003A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c21_ZTSN8dispatch5groupE48c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;

  v4 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
    dispatch_retain(v4);
  v5 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
  {
    dispatch_retain(v5);
    v6 = *(NSObject **)(a1 + 48);
    if (v6)
      dispatch_group_enter(v6);
  }
}

void __destroy_helper_block_e8_40c21_ZTSN8dispatch5groupE48c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 48);
    if (v3)
      dispatch_release(v3);
  }
  v4 = *(NSObject **)(a1 + 40);
  if (v4)
    dispatch_release(v4);
}

void ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJS1_EEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  void *v3;
  int v4;
  xpc_object_t object;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_DWORD *)(a1 + 40);
  v3 = *(void **)(a1 + 48);
  v4 = v2;
  object = v3;
  if (v3)
    xpc_retain(v3);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, int *))(v1 + 16))(v1, &v4);
  xpc_release(object);
}

void sub_1BF5004E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFv10WakeReasonEEE40c16_ZTS10WakeReason(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  xpc_object_t result;

  v4 = *(void **)(a2 + 32);
  if (v4)
    v4 = _Block_copy(v4);
  *(_QWORD *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v5 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    return xpc_retain(v5);
  result = xpc_null_create();
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFv10WakeReasonEEE40c16_ZTS10WakeReason(uint64_t a1)
{
  const void *v2;

  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  v2 = *(const void **)(a1 + 32);
  if (v2)
    _Block_release(v2);
}

uint64_t __cxx_global_var_init_33()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1BF335000);
  }
  return result;
}

uint64_t _GLOBAL__sub_I_QMITransportService_cpp()
{
  BOOL (*v0)(unsigned __int16, unsigned __int16, const unsigned __int8 *, unint64_t);

  _ATCSException::setExceptionHandler();
  qmi::MessageBase::setParsingErrorHandler((qmi::MessageBase *)QMIParserErrorToABMAssert, v0);
  return qmi::MutableMessageBase::setWriteErrorHandler();
}

void util::strip_non_printable(std::string *this)
{
  std::string *v1;
  std::string::size_type size;
  std::string *v3;
  std::string *v4;
  std::string::size_type v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  std::string::size_type v12;
  int v13;
  std::string *v14;
  char *v15;
  std::string::size_type v16;
  std::string::size_type v17;

  v1 = this;
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v3 = this;
  else
    v3 = (std::string *)this->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  if (size)
  {
    v4 = (std::string *)((char *)v3 + size);
    v5 = size - 1;
    v6 = MEMORY[0x1E0C80978];
    while (1)
    {
      v7 = v3->__r_.__value_.__s.__data_[0];
      if ((v7 & 0x80000000) != 0)
        break;
      v8 = *(_DWORD *)(v6 + 4 * v7 + 60);
      if ((v8 & 0x40000) == 0 || (v8 & 0x4000) != 0)
        goto LABEL_15;
LABEL_8:
      v3 = (std::string *)((char *)v3 + 1);
      --v5;
      if (v3 == v4)
        goto LABEL_28;
    }
    if (__maskrune(v3->__r_.__value_.__s.__data_[0], 0x40000uLL) && !__maskrune(v7, 0x4000uLL))
      goto LABEL_8;
LABEL_15:
    if (v3 != v4 && (std::string *)((char *)&v3->__r_.__value_.__l.__data_ + 1) != v4)
    {
      v9 = 1;
      v4 = v3;
      while (1)
      {
        v10 = v3->__r_.__value_.__s.__data_[v9];
        if ((v10 & 0x80000000) != 0)
        {
          if (!__maskrune(v3->__r_.__value_.__s.__data_[v9], 0x40000uLL) || __maskrune(v10, 0x4000uLL))
            goto LABEL_19;
        }
        else
        {
          v11 = *(_DWORD *)(v6 + 4 * v10 + 60);
          if ((v11 & 0x40000) == 0 || (v11 & 0x4000) != 0)
            goto LABEL_19;
        }
        v4->__r_.__value_.__s.__data_[0] = v3->__r_.__value_.__s.__data_[v9];
        v4 = (std::string *)((char *)v4 + 1);
LABEL_19:
        ++v9;
        if (!--v5)
          goto LABEL_28;
      }
    }
  }
  v4 = v3;
LABEL_28:
  v12 = HIBYTE(v1->__r_.__value_.__r.__words[2]);
  v13 = (char)v12;
  v14 = (std::string *)v1->__r_.__value_.__r.__words[0];
  v15 = (char *)(v1->__r_.__value_.__r.__words[0] + v1->__r_.__value_.__l.__size_);
  if ((v12 & 0x80u) != 0)
  {
    v16 = v1->__r_.__value_.__r.__words[0];
  }
  else
  {
    v15 = (char *)v1 + v12;
    v16 = (std::string::size_type)v1;
  }
  if ((v12 & 0x80u) != 0)
    v12 = v1->__r_.__value_.__l.__size_;
  v17 = (std::string::size_type)v4 - v16;
  if (v12 < (unint64_t)v4 - v16)
    std::string::__throw_out_of_range[abi:ne180100]();
  if (v15 - (char *)v4 == -1)
  {
    if (v13 < 0)
    {
      v1->__r_.__value_.__l.__size_ = v17;
      v1 = v14;
    }
    else
    {
      *((_BYTE *)&v1->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
    v1->__r_.__value_.__s.__data_[v17] = 0;
  }
  else
  {
    std::string::__erase_external_with_move(v1, v17, v15 - (char *)v4);
  }
}

uint64_t util::convert_garbage(uint64_t result)
{
  int v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;

  v1 = *(char *)(result + 23);
  if (v1 >= 0)
    v2 = (_BYTE *)result;
  else
    v2 = *(_BYTE **)result;
  if (v1 >= 0)
    v3 = *(unsigned __int8 *)(result + 23);
  else
    v3 = *(_QWORD *)(result + 8);
  if (v3)
  {
    v4 = MEMORY[0x1E0C80978];
    do
    {
      v5 = (char)*v2;
      if ((v5 & 0x80000000) != 0)
      {
        result = __maskrune((char)*v2, 0x40000uLL);
        if ((_DWORD)result)
          goto LABEL_10;
        result = __maskrune(v5, 0x4000uLL);
        if ((_DWORD)result)
          goto LABEL_10;
      }
      else
      {
        v6 = *(_DWORD *)(v4 + 4 * v5 + 60);
        if ((v6 & 0x40000) != 0)
          goto LABEL_10;
        result = v6 & 0x4000;
        if ((v6 & 0x4000) != 0)
          goto LABEL_10;
      }
      *v2 = 32;
LABEL_10:
      ++v2;
      --v3;
    }
    while (v3);
  }
  return result;
}

void util::strip_pattern(char *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  int v5;
  int v6;
  std::string *v7;
  std::string *v8;
  int64_t v9;
  std::string::size_type v10;
  char *v11;
  uint64_t size;
  std::string::size_type v13;
  std::string::size_type v14;
  int v15;
  std::string *v16;
  int v17;
  char *v18;
  int64_t v19;
  int64_t v20;
  char *v21;
  int v22;
  std::string *v23;
  int64_t v24;
  char *v25;
  char *v26;
  char *v27;
  int v28;
  std::string *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  std::string::size_type v33;
  int v34;
  std::string *v35;
  int v36;
  char *v37;
  int64_t v38;
  int64_t v39;
  char *v40;
  int v41;
  std::string *v42;
  int64_t v43;
  char *v44;
  char *v45;

  memset(a3, 170, sizeof(std::string));
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  v5 = a1[23];
  v6 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
  v7 = (std::string *)a3->__r_.__value_.__r.__words[0];
  if (v6 >= 0)
    v8 = a3;
  else
    v8 = (std::string *)a3->__r_.__value_.__r.__words[0];
  if (v5 >= 0)
    v9 = a1[23];
  else
    v9 = *((_QWORD *)a1 + 1);
  v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if (v5 >= 0)
    v11 = a1;
  else
    v11 = *(char **)a1;
  if (!v9)
  {
    v13 = 0;
    goto LABEL_20;
  }
  if (v6 >= 0)
    size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  else
    size = a3->__r_.__value_.__l.__size_;
  if (size >= v9)
  {
    v27 = (char *)v8 + size;
    v28 = *v11;
    v29 = v8;
    do
    {
      v30 = size - v9;
      if (v30 == -1)
        break;
      v31 = (char *)memchr(v29, v28, v30 + 1);
      if (!v31)
        break;
      v32 = v31;
      if (!memcmp(v31, v11, v9))
      {
        if (v32 != v27)
        {
          v13 = v32 - (char *)v8;
          if (v32 - (char *)v8 != -1)
          {
            if (v9 == -1)
            {
              while (1)
              {
                v33 = a3->__r_.__value_.__l.__size_;
                if ((v10 & 0x80u) == 0)
                  v33 = v10;
                if (v33 < v13)
                  break;
                if ((char)v10 < 0)
                {
                  a3->__r_.__value_.__l.__size_ = v13;
                }
                else
                {
                  *((_BYTE *)&a3->__r_.__value_.__s + 23) = v13 & 0x7F;
                  v7 = a3;
                }
                v7->__r_.__value_.__s.__data_[v13] = 0;
                v34 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
                v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                v7 = (std::string *)a3->__r_.__value_.__r.__words[0];
                if (v34 >= 0)
                  v35 = a3;
                else
                  v35 = (std::string *)a3->__r_.__value_.__r.__words[0];
                v36 = a1[23];
                if (v36 >= 0)
                  v37 = a1;
                else
                  v37 = *(char **)a1;
                if (v36 >= 0)
                  v38 = a1[23];
                else
                  v38 = *((_QWORD *)a1 + 1);
                if (v38)
                {
                  if (v34 >= 0)
                    v39 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                  else
                    v39 = a3->__r_.__value_.__l.__size_;
                  if (v39 < v38)
                    return;
                  v40 = (char *)v35 + v39;
                  v41 = *v37;
                  v42 = v35;
                  while (1)
                  {
                    v43 = v39 - v38;
                    if (v43 == -1)
                      return;
                    v44 = (char *)memchr(v42, v41, v43 + 1);
                    if (!v44)
                      return;
                    v45 = v44;
                    if (!memcmp(v44, v37, v38))
                      break;
                    v42 = (std::string *)(v45 + 1);
                    v39 = v40 - (v45 + 1);
                    if (v39 < v38)
                      return;
                  }
                  if (v45 == v40)
                    return;
                  v13 = v45 - (char *)v35;
                  if (v45 - (char *)v35 == -1)
                    return;
                }
                else
                {
                  v13 = 0;
                }
              }
            }
            else
            {
LABEL_20:
              while (1)
              {
                v14 = (v10 & 0x80u) == 0 ? v10 : a3->__r_.__value_.__l.__size_;
                if (v14 < v13)
                  break;
                std::string::__erase_external_with_move(a3, v13, v9);
                v15 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
                v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                if (v15 >= 0)
                  v16 = a3;
                else
                  v16 = (std::string *)a3->__r_.__value_.__r.__words[0];
                v17 = a1[23];
                if (v17 >= 0)
                  v18 = a1;
                else
                  v18 = *(char **)a1;
                if (v17 >= 0)
                  v19 = a1[23];
                else
                  v19 = *((_QWORD *)a1 + 1);
                if (v19)
                {
                  if (v15 >= 0)
                    v20 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                  else
                    v20 = a3->__r_.__value_.__l.__size_;
                  if (v20 < v19)
                    return;
                  v21 = (char *)v16 + v20;
                  v22 = *v18;
                  v23 = v16;
                  while (1)
                  {
                    v24 = v20 - v19;
                    if (v24 == -1)
                      return;
                    v25 = (char *)memchr(v23, v22, v24 + 1);
                    if (!v25)
                      return;
                    v26 = v25;
                    if (!memcmp(v25, v18, v19))
                      break;
                    v23 = (std::string *)(v26 + 1);
                    v20 = v21 - (v26 + 1);
                    if (v20 < v19)
                      return;
                  }
                  if (v26 == v21)
                    return;
                  v13 = v26 - (char *)v16;
                  if (v26 - (char *)v16 == -1)
                    return;
                }
                else
                {
                  v13 = 0;
                }
              }
            }
            std::string::__throw_out_of_range[abi:ne180100]();
          }
        }
        return;
      }
      v29 = (std::string *)(v32 + 1);
      size = v27 - (v32 + 1);
    }
    while (size >= v9);
  }
}

void sub_1BF500B5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *util::strip_leading_trailing@<X0>(_QWORD *result@<X0>, void **a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  void *v10;
  size_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v4 = *((unsigned __int8 *)result + 23);
  v5 = (_QWORD *)*result;
  v6 = result[1];
  if ((v4 & 0x80u) == 0)
    v7 = result;
  else
    v7 = (_QWORD *)*result;
  if ((v4 & 0x80u) == 0)
    v8 = *((unsigned __int8 *)result + 23);
  else
    v8 = result[1];
  v9 = *((char *)a2 + 23);
  if (v9 >= 0)
    v10 = a2;
  else
    v10 = *a2;
  if (v9 >= 0)
    v11 = *((unsigned __int8 *)a2 + 23);
  else
    v11 = (size_t)a2[1];
  if (!v8)
    goto LABEL_26;
  v12 = result;
  v13 = 0;
  if (!v11)
  {
    v14 = v8 - 1;
    if ((v4 & 0x80) == 0)
      goto LABEL_28;
    goto LABEL_24;
  }
  while (1)
  {
    result = memchr(v10, *((char *)v7 + v13), v11);
    if (!result)
      break;
    if (v8 == ++v13)
      goto LABEL_26;
  }
  if (v13 == -1)
  {
LABEL_26:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  do
  {
    if (!v8)
    {
      v14 = -1;
      if ((v4 & 0x80) == 0)
        goto LABEL_28;
LABEL_24:
      if (v6 >= v13)
      {
        v4 = v6;
        v12 = v5;
        goto LABEL_29;
      }
LABEL_41:
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    result = memchr(v10, *((char *)v7 + --v8), v11);
  }
  while (result);
  v14 = v8;
  if ((v4 & 0x80) != 0)
    goto LABEL_24;
LABEL_28:
  if (v13 > v4)
    goto LABEL_41;
LABEL_29:
  v15 = v14 - v13 + 1;
  if (v4 - v13 >= v15)
    v16 = v15;
  else
    v16 = v4 - v13;
  if (v16 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v16 >= 0x17)
  {
    v17 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v17 = v16 | 7;
    v18 = v17 + 1;
    v19 = operator new(v17 + 1);
    a3[1] = v16;
    a3[2] = v18 | 0x8000000000000000;
    *a3 = v19;
    a3 = v19;
    goto LABEL_39;
  }
  *((_BYTE *)a3 + 23) = v16;
  if (v16)
LABEL_39:
    result = memmove(a3, (char *)v12 + v13, v16);
  *((_BYTE *)a3 + v16) = 0;
  return result;
}

uint64_t util::to_upper(uint64_t result)
{
  uint64_t v1;
  int v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;

  v1 = *(unsigned __int8 *)(result + 23);
  v2 = (char)v1;
  v3 = (_BYTE *)(result + v1);
  if (v2 >= 0)
    v4 = v3;
  else
    v4 = (_BYTE *)(*(_QWORD *)result + *(_QWORD *)(result + 8));
  if (v2 >= 0)
    v5 = (_BYTE *)result;
  else
    v5 = *(_BYTE **)result;
  for (; v5 != v4; ++v5)
  {
    result = __toupper((char)*v5);
    *v5 = result;
  }
  return result;
}

BOOL util::equal_nocase(const char *a1, const char *a2)
{
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  return strcasecmp(a1, a2) == 0;
}

void util::strip_non_alpha(std::string *a1)
{
  std::string::size_type size;
  char *v3;
  char *v4;
  std::string::size_type v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  int v11;
  std::string::size_type v12;
  char *v13;
  std::string *v14;
  std::string::size_type v15;

  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v3 = (char *)a1;
  else
    v3 = (char *)a1->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_21;
  v4 = &v3[size];
  v5 = size - 1;
  v6 = MEMORY[0x1E0C80978];
  while (1)
  {
    v7 = *v3;
    if ((v7 & 0x80000000) != 0)
    {
      if (!__maskrune(v7, 0x100uLL))
        break;
      goto LABEL_9;
    }
    if ((*(_DWORD *)(v6 + 4 * v7 + 60) & 0x100) == 0)
      break;
LABEL_9:
    ++v3;
    --v5;
    if (v3 == v4)
      goto LABEL_22;
  }
  if (v3 != v4 && v3 + 1 != v4)
  {
    v8 = 1;
    v4 = v3;
    while (1)
    {
      v9 = v3[v8];
      if ((v9 & 0x80000000) == 0)
        break;
      if (__maskrune(v9, 0x100uLL))
        goto LABEL_16;
LABEL_17:
      ++v8;
      if (!--v5)
        goto LABEL_22;
    }
    if ((*(_DWORD *)(v6 + 4 * v9 + 60) & 0x100) == 0)
      goto LABEL_17;
LABEL_16:
    *v4++ = v3[v8];
    goto LABEL_17;
  }
LABEL_21:
  v4 = v3;
LABEL_22:
  v10 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  v11 = (char)v10;
  v12 = a1->__r_.__value_.__r.__words[0];
  v13 = (char *)(a1->__r_.__value_.__r.__words[0] + a1->__r_.__value_.__l.__size_);
  if ((v10 & 0x80u) != 0)
  {
    v14 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  else
  {
    v13 = (char *)a1 + v10;
    v14 = a1;
  }
  if ((v10 & 0x80u) != 0)
    v10 = a1->__r_.__value_.__l.__size_;
  v15 = v4 - (char *)v14;
  if (v10 < v4 - (char *)v14)
    std::string::__throw_out_of_range[abi:ne180100]();
  if (v13 - v4 == -1)
  {
    if (v11 < 0)
    {
      a1->__r_.__value_.__l.__size_ = v15;
      *(_BYTE *)(v12 + v15) = 0;
    }
    else
    {
      *((_BYTE *)&a1->__r_.__value_.__s + 23) = v15 & 0x7F;
      a1->__r_.__value_.__s.__data_[v15] = 0;
    }
  }
  else
  {
    std::string::__erase_external_with_move(a1, v15, v13 - v4);
  }
}

void util::readPlistToCFDictionary(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v2;
  const __CFAllocator *v4;
  __CFError *v5;
  __CFError *v6;
  uint64_t (*v7)(uint64_t);
  __CFError *v8;
  __CFReadStream *v9;
  uint64_t (*v10)(uint64_t);
  CFPropertyListRef v11;
  unsigned __int8 v12;
  NSObject *v13;
  CFIndex Code;
  void **v15;
  void *__p[2];
  uint64_t v17;
  CFErrorRef error[4];
  uint8_t buf[24];
  void **v20;
  uint64_t v21;

  v2 = (const char *)a1;
  v21 = *MEMORY[0x1E0C80C00];
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (*(char *)(a1 + 23) < 0)
    v2 = *(const char **)a1;
  v5 = (__CFError *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2, 0x8000100u);
  error[3] = v5;
  v6 = CFURLCreateWithFileSystemPath(v4, (CFStringRef)v5, kCFURLPOSIXPathStyle, 0);
  error[2] = v6;
  *a2 = 0;
  v7 = ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get;
  if (!v6)
    v7 = 0;
  if (!v7)
    goto LABEL_18;
  v8 = CFReadStreamCreateWithFile(v4, v6);
  v9 = v8;
  error[1] = v8;
  v10 = ctu::SharedRef<__CFReadStream,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFReadStream>::get;
  if (!v8)
    v10 = 0;
  if (!v10
    || (CFReadStreamOpen(v8),
        error[0] = 0,
        v11 = CFPropertyListCreateWithStream(v4, v9, 0, 1uLL, 0, error),
        *a2 = v11,
        CFReadStreamClose(v9),
        !error[0]))
  {
LABEL_16:
    if (!v9)
      goto LABEL_18;
    goto LABEL_17;
  }
  CFErrorGetDomain(error[0]);
  memset(buf, 0, sizeof(buf));
  ctu::cf::assign();
  *(_OWORD *)__p = *(_OWORD *)buf;
  v17 = *(_QWORD *)&buf[16];
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED7100E0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
  }
  if (GetOsLogContext(void)::onceToken != -1)
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
    v13 = qword_1ED7100E0;
    if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
      goto LABEL_13;
LABEL_26:
    Code = CFErrorGetCode(error[0]);
    v15 = __p;
    if (v17 < 0)
      v15 = (void **)__p[0];
    *(_DWORD *)buf = 138412802;
    *(_QWORD *)&buf[4] = v6;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = Code;
    *(_WORD *)&buf[22] = 2080;
    v20 = v15;
    _os_log_error_impl(&dword_1BF335000, v13, OS_LOG_TYPE_ERROR, "Failed to create %@ PropertyList: %ld: %s", buf, 0x20u);
    goto LABEL_13;
  }
  v13 = qword_1ED7100E0;
  if (os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
    goto LABEL_26;
LABEL_13:
  CFRelease(error[0]);
  *a2 = 0;
  if (v11)
    CFRelease(v11);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
    goto LABEL_16;
  operator delete(__p[0]);
  if (v9)
LABEL_17:
    CFRelease(v9);
LABEL_18:
  if (v6)
    CFRelease(v6);
  if (v5)
    CFRelease(v5);
}

void sub_1BF5011E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t ctu::SharedRef<__CFReadStream,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFReadStream>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

const void **ctu::cf::CFSharedRef<__CFReadStream>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFURL const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void util::moveDirContent(const void **a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int filtered_files;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  int v17;
  size_t v18;
  unint64_t v19;
  std::string *p_dst;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  std::string *v24;
  std::string::size_type size;
  std::string *v26;
  __int128 v27;
  int is_directory;
  int v29;
  size_t v30;
  unint64_t v31;
  std::string *v32;
  unsigned __int8 v33;
  NSObject *v34;
  int v35;
  size_t v36;
  unint64_t v37;
  std::string *v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  std::string *v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const void *v56;
  std::string *v57;
  std::string::size_type v58;
  std::string *v59;
  __int128 v60;
  std::string *p_p;
  unsigned __int8 v62;
  NSObject *v63;
  void **v64;
  void **v65;
  char *v66;
  __int128 v67;
  int v68;
  size_t v69;
  unint64_t v70;
  std::string *p_buf;
  uint64_t v72;
  uint64_t v73;
  const void *v74;
  std::string *v75;
  std::string::size_type v76;
  std::string *v77;
  __int128 v78;
  int v79;
  size_t v80;
  unint64_t v81;
  std::string *v82;
  uint64_t v83;
  uint64_t v84;
  const void *v85;
  std::string *v86;
  std::string::size_type v87;
  std::string *v88;
  __int128 v89;
  char v90;
  unsigned __int8 v91;
  NSObject *v92;
  int v93;
  size_t v94;
  unint64_t v95;
  std::string *v96;
  NSObject *v97;
  int v98;
  size_t v99;
  unint64_t v100;
  std::string *v101;
  uint64_t v102;
  uint64_t v103;
  const void *v104;
  std::string *v105;
  std::string::size_type v106;
  std::string *v107;
  __int128 v108;
  std::string *v109;
  std::string *v110;
  uint64_t v111;
  uint64_t v112;
  const void *v113;
  std::string *v114;
  std::string::size_type v115;
  std::string *v116;
  __int128 v117;
  std::string *v118;
  std::string *v119;
  std::string::size_type v120;
  int v121;
  char *v124;
  std::locale v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  uint64_t v130;
  std::string v131;
  void *v132[2];
  std::string::size_type v133;
  std::string __dst;
  std::string __p;
  std::locale v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  char *v142;
  void **v143;
  uint64_t v144;
  uint8_t v145[4];
  std::string *v146;
  __int16 v147;
  std::string *v148;
  std::string buf;
  std::string v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  v142 = 0;
  v143 = 0;
  v144 = 0;
  std::locale::locale(&v136, (const std::locale *)a5);
  v137 = *(_OWORD *)(a5 + 8);
  v138 = *(_OWORD *)(a5 + 24);
  v8 = *(std::__shared_weak_count **)(a5 + 48);
  v139 = *(_QWORD *)(a5 + 40);
  v140 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v141 = *(_QWORD *)(a5 + 56);
  filtered_files = ctu::fs::get_filtered_files();
  v12 = v140;
  if (!v140)
    goto LABEL_8;
  v13 = (unint64_t *)&v140->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    std::locale::~locale(&v136);
    if (filtered_files)
    {
LABEL_9:
      v15 = v142;
      v124 = (char *)v143;
      if (v142 != (char *)v143)
      {
        if (a4)
        {
          while (1)
          {
            memset(&v150, 170, sizeof(v150));
            if (v15[23] < 0)
            {
              std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
            }
            else
            {
              v16 = *(_OWORD *)v15;
              v150.__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
              *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v16;
            }
            v17 = *((char *)a1 + 23);
            if (v17 >= 0)
              v18 = *((unsigned __int8 *)a1 + 23);
            else
              v18 = (size_t)a1[1];
            v19 = v18 + 1;
            memset(&__dst, 170, sizeof(__dst));
            if (v18 + 1 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            if (v19 >= 0x17)
            {
              v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v19 | 7) != 0x17)
                v21 = v19 | 7;
              v22 = v21 + 1;
              p_dst = (std::string *)operator new(v21 + 1);
              __dst.__r_.__value_.__l.__size_ = v18 + 1;
              __dst.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
            }
            else
            {
              memset(&__dst, 0, sizeof(__dst));
              p_dst = &__dst;
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v18 + 1;
              if (!v18)
                goto LABEL_30;
            }
            if (v17 >= 0)
              v23 = a1;
            else
              v23 = *a1;
            memmove(p_dst, v23, v18);
LABEL_30:
            *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v18) = 47;
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v24 = &v150;
            else
              v24 = (std::string *)v150.__r_.__value_.__r.__words[0];
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v150.__r_.__value_.__r.__words[2]);
            else
              size = v150.__r_.__value_.__l.__size_;
            v26 = std::string::append(&__dst, (const std::string::value_type *)v24, size);
            v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v27;
            v26->__r_.__value_.__l.__size_ = 0;
            v26->__r_.__value_.__r.__words[2] = 0;
            v26->__r_.__value_.__r.__words[0] = 0;
            is_directory = ctu::fs::is_directory();
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__p.__r_.__value_.__l.__data_);
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_38:
                if (is_directory)
                  goto LABEL_39;
                goto LABEL_48;
              }
            }
            else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_38;
            }
            operator delete(__dst.__r_.__value_.__l.__data_);
            if (is_directory)
            {
LABEL_39:
              v29 = *((char *)a1 + 23);
              if (v29 >= 0)
                v30 = *((unsigned __int8 *)a1 + 23);
              else
                v30 = (size_t)a1[1];
              v31 = v30 + 1;
              memset(&__dst, 170, sizeof(__dst));
              if (v30 + 1 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              if (v31 >= 0x17)
              {
                v39 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v31 | 7) != 0x17)
                  v39 = v31 | 7;
                v40 = v39 + 1;
                v32 = (std::string *)operator new(v39 + 1);
                __dst.__r_.__value_.__l.__size_ = v30 + 1;
                __dst.__r_.__value_.__r.__words[2] = v40 | 0x8000000000000000;
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
              }
              else
              {
                memset(&__dst, 0, sizeof(__dst));
                v32 = &__dst;
                *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v30 + 1;
                if (!v30)
                  goto LABEL_65;
              }
              if (v29 >= 0)
                v41 = a1;
              else
                v41 = *a1;
              memmove(v32, v41, v30);
LABEL_65:
              *(_WORD *)((char *)&v32->__r_.__value_.__l.__data_ + v30) = 47;
              if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v42 = &v150;
              else
                v42 = (std::string *)v150.__r_.__value_.__r.__words[0];
              if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v43 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
              else
                v43 = v150.__r_.__value_.__l.__size_;
              v44 = std::string::append(&__dst, (const std::string::value_type *)v42, v43);
              v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v45;
              v44->__r_.__value_.__l.__size_ = 0;
              v44->__r_.__value_.__r.__words[2] = 0;
              v44->__r_.__value_.__r.__words[0] = 0;
              v46 = std::string::append(&__p, "/", 1uLL);
              v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
              v133 = v46->__r_.__value_.__r.__words[2];
              *(_OWORD *)v132 = v47;
              v46->__r_.__value_.__l.__size_ = 0;
              v46->__r_.__value_.__r.__words[2] = 0;
              v46->__r_.__value_.__r.__words[0] = 0;
              if (*(char *)(a2 + 23) < 0)
                std::string::__init_copy_ctor_external(&v131, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
              else
                v131 = *(std::string *)a2;
              std::locale::locale(&v125, (const std::locale *)a5);
              v126 = *(_OWORD *)(a5 + 8);
              v127 = *(_OWORD *)(a5 + 24);
              v48 = *(std::__shared_weak_count **)(a5 + 48);
              v128 = *(_QWORD *)(a5 + 40);
              v129 = v48;
              if (v48)
              {
                v49 = (unint64_t *)&v48->__shared_owners_;
                do
                  v50 = __ldxr(v49);
                while (__stxr(v50 + 1, v49));
              }
              v130 = *(_QWORD *)(a5 + 56);
              util::moveDirContent(v132, &v131, a3, (a4 - 1), &v125);
              v51 = v129;
              if (!v129)
                goto LABEL_81;
              v52 = (unint64_t *)&v129->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
                std::locale::~locale(&v125);
                if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_82;
              }
              else
              {
LABEL_81:
                std::locale::~locale(&v125);
                if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_82:
                  if ((SHIBYTE(v133) & 0x80000000) == 0)
                    goto LABEL_83;
LABEL_88:
                  operator delete(v132[0]);
                  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_84;
                  goto LABEL_89;
                }
              }
              operator delete(v131.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v133) & 0x80000000) == 0)
              {
LABEL_83:
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_84;
                goto LABEL_89;
              }
              goto LABEL_88;
            }
LABEL_48:
            {
              GetOsLogContext(void)::sOsLogContext = 0;
              qword_1ED7100E0 = 0;
              __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
            }
            if (GetOsLogContext(void)::onceToken == -1)
            {
              v34 = qword_1ED7100E0;
              if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
                goto LABEL_91;
            }
            else
            {
              dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
              v34 = qword_1ED7100E0;
              if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
                goto LABEL_91;
            }
            v35 = *((char *)a1 + 23);
            if (v35 >= 0)
              v36 = *((unsigned __int8 *)a1 + 23);
            else
              v36 = (size_t)a1[1];
            v37 = v36 + 1;
            memset(&__dst, 170, sizeof(__dst));
            if (v36 + 1 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            if (v37 >= 0x17)
            {
              v121 = v35;
              v54 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v37 | 7) != 0x17)
                v54 = v37 | 7;
              v55 = v54 + 1;
              v38 = (std::string *)operator new(v54 + 1);
              __dst.__r_.__value_.__l.__size_ = v36 + 1;
              __dst.__r_.__value_.__r.__words[2] = v55 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
              v35 = v121;
            }
            else
            {
              memset(&__dst, 0, sizeof(__dst));
              v38 = &__dst;
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v36 + 1;
              if (!v36)
                goto LABEL_100;
            }
            if (v35 >= 0)
              v56 = a1;
            else
              v56 = *a1;
            memmove(v38, v56, v36);
LABEL_100:
            *(_WORD *)((char *)&v38->__r_.__value_.__l.__data_ + v36) = 47;
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v57 = &v150;
            else
              v57 = (std::string *)v150.__r_.__value_.__r.__words[0];
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v58 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
            else
              v58 = v150.__r_.__value_.__l.__size_;
            v59 = std::string::append(&__dst, (const std::string::value_type *)v57, v58);
            v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v60;
            v59->__r_.__value_.__l.__size_ = 0;
            v59->__r_.__value_.__r.__words[2] = 0;
            v59->__r_.__value_.__r.__words[0] = 0;
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a4;
            _os_log_error_impl(&dword_1BF335000, v34, OS_LOG_TYPE_ERROR, "%s is not a directory. So, skip to move it with the depth (%d)", (uint8_t *)&buf, 0x12u);
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_84:
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_90;
              goto LABEL_91;
            }
LABEL_89:
            operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_90:
              operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_91:
            if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v150.__r_.__value_.__l.__data_);
            v15 += 24;
            if (v15 == v124)
              goto LABEL_118;
          }
        }
        while (1)
        {
          memset(&v150, 170, sizeof(v150));
          if (v15[23] < 0)
          {
            std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
          }
          else
          {
            v67 = *(_OWORD *)v15;
            v150.__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
            *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v67;
          }
          memset(&__p, 170, sizeof(__p));
          v68 = *(char *)(a2 + 23);
          if (v68 >= 0)
            v69 = *(unsigned __int8 *)(a2 + 23);
          else
            v69 = *(_QWORD *)(a2 + 8);
          v70 = v69 + 1;
          memset(&buf, 170, sizeof(buf));
          if (v69 + 1 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v70 >= 0x17)
          {
            v72 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v70 | 7) != 0x17)
              v72 = v70 | 7;
            v73 = v72 + 1;
            p_buf = (std::string *)operator new(v72 + 1);
            buf.__r_.__value_.__l.__size_ = v69 + 1;
            buf.__r_.__value_.__r.__words[2] = v73 | 0x8000000000000000;
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
          }
          else
          {
            memset(&buf, 0, sizeof(buf));
            p_buf = &buf;
            *((_BYTE *)&buf.__r_.__value_.__s + 23) = v69 + 1;
            if (!v69)
              goto LABEL_148;
          }
          if (v68 >= 0)
            v74 = (const void *)a2;
          else
            v74 = *(const void **)a2;
          memmove(p_buf, v74, v69);
LABEL_148:
          *(_WORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v69) = 47;
          if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v75 = &v150;
          else
            v75 = (std::string *)v150.__r_.__value_.__r.__words[0];
          if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v76 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
          else
            v76 = v150.__r_.__value_.__l.__size_;
          v77 = std::string::append(&buf, (const std::string::value_type *)v75, v76);
          v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
          __dst.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v78;
          v77->__r_.__value_.__l.__size_ = 0;
          v77->__r_.__value_.__r.__words[2] = 0;
          v77->__r_.__value_.__r.__words[0] = 0;
          ctu::fs::get_unique_filename();
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_156;
          }
          else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_156;
          }
          operator delete(buf.__r_.__value_.__l.__data_);
LABEL_156:
          v79 = *((char *)a1 + 23);
          if (v79 >= 0)
            v80 = *((unsigned __int8 *)a1 + 23);
          else
            v80 = (size_t)a1[1];
          v81 = v80 + 1;
          memset(&buf, 170, sizeof(buf));
          if (v80 + 1 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v81 >= 0x17)
          {
            v83 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v81 | 7) != 0x17)
              v83 = v81 | 7;
            v84 = v83 + 1;
            v82 = (std::string *)operator new(v83 + 1);
            buf.__r_.__value_.__l.__size_ = v80 + 1;
            buf.__r_.__value_.__r.__words[2] = v84 | 0x8000000000000000;
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
          }
          else
          {
            memset(&buf, 0, sizeof(buf));
            v82 = &buf;
            *((_BYTE *)&buf.__r_.__value_.__s + 23) = v80 + 1;
            if (!v80)
              goto LABEL_170;
          }
          if (v79 >= 0)
            v85 = a1;
          else
            v85 = *a1;
          memmove(v82, v85, v80);
LABEL_170:
          *(_WORD *)((char *)&v82->__r_.__value_.__l.__data_ + v80) = 47;
          if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v86 = &v150;
          else
            v86 = (std::string *)v150.__r_.__value_.__r.__words[0];
          if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v87 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
          else
            v87 = v150.__r_.__value_.__l.__size_;
          v88 = std::string::append(&buf, (const std::string::value_type *)v86, v87);
          v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
          __dst.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v89;
          v88->__r_.__value_.__l.__size_ = 0;
          v88->__r_.__value_.__r.__words[2] = 0;
          v88->__r_.__value_.__r.__words[0] = 0;
          v90 = ctu::fs::rename();
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_178:
              if ((v90 & 1) == 0)
                goto LABEL_193;
              goto LABEL_179;
            }
          }
          else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_178;
          }
          operator delete(buf.__r_.__value_.__l.__data_);
          if ((v90 & 1) == 0)
          {
LABEL_193:
            {
              GetOsLogContext(void)::sOsLogContext = 0;
              qword_1ED7100E0 = 0;
              __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
            }
            if (GetOsLogContext(void)::onceToken == -1)
            {
              v97 = qword_1ED7100E0;
              if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
                goto LABEL_243;
LABEL_196:
              v98 = *((char *)a1 + 23);
              if (v98 >= 0)
                v99 = *((unsigned __int8 *)a1 + 23);
              else
                v99 = (size_t)a1[1];
              v100 = v99 + 1;
              memset(&buf, 170, sizeof(buf));
              if (v99 + 1 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              if (v100 >= 0x17)
              {
                v111 = (v100 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v100 | 7) != 0x17)
                  v111 = v100 | 7;
                v112 = v111 + 1;
                v101 = (std::string *)operator new(v111 + 1);
                buf.__r_.__value_.__l.__size_ = v99 + 1;
                buf.__r_.__value_.__r.__words[2] = v112 | 0x8000000000000000;
                buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v101;
              }
              else
              {
                memset(&buf, 0, sizeof(buf));
                v101 = &buf;
                *((_BYTE *)&buf.__r_.__value_.__s + 23) = v99 + 1;
                if (!v99)
                  goto LABEL_230;
              }
              if (v98 >= 0)
                v113 = a1;
              else
                v113 = *a1;
              memmove(v101, v113, v99);
LABEL_230:
              *(_WORD *)((char *)&v101->__r_.__value_.__l.__data_ + v99) = 47;
              if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v114 = &v150;
              else
                v114 = (std::string *)v150.__r_.__value_.__r.__words[0];
              if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v115 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
              else
                v115 = v150.__r_.__value_.__l.__size_;
              v116 = std::string::append(&buf, (const std::string::value_type *)v114, v115);
              v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
              __dst.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v117;
              v116->__r_.__value_.__l.__size_ = 0;
              v116->__r_.__value_.__r.__words[2] = 0;
              v116->__r_.__value_.__r.__words[0] = 0;
              v118 = &__dst;
              if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v118 = (std::string *)__dst.__r_.__value_.__r.__words[0];
              v119 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v119 = (std::string *)__p.__r_.__value_.__r.__words[0];
              *(_DWORD *)v145 = 136315394;
              v146 = v118;
              v147 = 2080;
              v148 = v119;
              _os_log_error_impl(&dword_1BF335000, v97, OS_LOG_TYPE_ERROR, "Failed to move %s -> %s", v145, 0x16u);
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              {
LABEL_241:
                operator delete(__dst.__r_.__value_.__l.__data_);
                if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_243;
                goto LABEL_242;
              }
LABEL_221:
              if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_243;
LABEL_242:
              operator delete(buf.__r_.__value_.__l.__data_);
              goto LABEL_243;
            }
            dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
            v97 = qword_1ED7100E0;
            if (os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
              goto LABEL_196;
            goto LABEL_243;
          }
LABEL_179:
          {
            GetOsLogContext(void)::sOsLogContext = 0;
            qword_1ED7100E0 = 0;
            __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
          }
          if (GetOsLogContext(void)::onceToken == -1)
          {
            v92 = qword_1ED7100E0;
            if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_DEFAULT))
              goto LABEL_243;
LABEL_182:
            v93 = *((char *)a1 + 23);
            if (v93 >= 0)
              v94 = *((unsigned __int8 *)a1 + 23);
            else
              v94 = (size_t)a1[1];
            v95 = v94 + 1;
            memset(&buf, 170, sizeof(buf));
            if (v94 + 1 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            if (v95 >= 0x17)
            {
              v102 = (v95 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v95 | 7) != 0x17)
                v102 = v95 | 7;
              v103 = v102 + 1;
              v96 = (std::string *)operator new(v102 + 1);
              buf.__r_.__value_.__l.__size_ = v94 + 1;
              buf.__r_.__value_.__r.__words[2] = v103 | 0x8000000000000000;
              buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v96;
            }
            else
            {
              memset(&buf, 0, sizeof(buf));
              v96 = &buf;
              *((_BYTE *)&buf.__r_.__value_.__s + 23) = v94 + 1;
              if (!v94)
                goto LABEL_210;
            }
            if (v93 >= 0)
              v104 = a1;
            else
              v104 = *a1;
            memmove(v96, v104, v94);
LABEL_210:
            *(_WORD *)((char *)&v96->__r_.__value_.__l.__data_ + v94) = 47;
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v105 = &v150;
            else
              v105 = (std::string *)v150.__r_.__value_.__r.__words[0];
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v106 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
            else
              v106 = v150.__r_.__value_.__l.__size_;
            v107 = std::string::append(&buf, (const std::string::value_type *)v105, v106);
            v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
            __dst.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v108;
            v107->__r_.__value_.__l.__size_ = 0;
            v107->__r_.__value_.__r.__words[2] = 0;
            v107->__r_.__value_.__r.__words[0] = 0;
            v109 = &__dst;
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v109 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            v110 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v110 = (std::string *)__p.__r_.__value_.__r.__words[0];
            *(_DWORD *)v145 = 136315394;
            v146 = v109;
            v147 = 2080;
            v148 = v110;
            _os_log_impl(&dword_1BF335000, v92, OS_LOG_TYPE_DEFAULT, "Moved %s -> %s", v145, 0x16u);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_241;
            goto LABEL_221;
          }
          dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
          v92 = qword_1ED7100E0;
          if (os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_DEFAULT))
            goto LABEL_182;
LABEL_243:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
LABEL_247:
              operator delete(v150.__r_.__value_.__l.__data_);
          }
          else if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
          {
            goto LABEL_247;
          }
          v15 += 24;
          if (v15 == v124)
            goto LABEL_118;
        }
      }
      goto LABEL_118;
    }
  }
  else
  {
LABEL_8:
    std::locale::~locale(&v136);
    if (filtered_files)
      goto LABEL_9;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED7100E0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v63 = qword_1ED7100E0;
    if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
      goto LABEL_118;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
    v63 = qword_1ED7100E0;
    if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
      goto LABEL_118;
  }
  v120 = (std::string::size_type)a1;
  if (*((char *)a1 + 23) < 0)
    v120 = (std::string::size_type)*a1;
  LODWORD(v150.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)v150.__r_.__value_.__r.__words + 4) = v120;
  _os_log_error_impl(&dword_1BF335000, v63, OS_LOG_TYPE_ERROR, "Failed to find a content in %s", (uint8_t *)&v150, 0xCu);
LABEL_118:
  if (a3)
    ctu::fs::remove_dir();
  v64 = (void **)v142;
  if (v142)
  {
    v65 = v143;
    v66 = v142;
    if (v143 != (void **)v142)
    {
      do
      {
        if (*((char *)v65 - 1) < 0)
          operator delete(*(v65 - 3));
        v65 -= 3;
      }
      while (v65 != v64);
      v66 = v142;
    }
    v143 = v64;
    operator delete(v66);
  }
}

void sub_1BF50230C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::locale a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,std::locale a58)
{
  uint64_t v58;

  if (a57 < 0)
    operator delete(__p);
  if (*(char *)(v58 - 105) < 0)
    operator delete(*(void **)(v58 - 128));
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v58 - 216));
  _Unwind_Resume(a1);
}

void util::generateSHA256(const char *a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, unsigned __int8 **a4@<X8>)
{
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  __int128 v10;
  const char *v11;
  int v12;
  unint64_t v13;
  ssize_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  const char *v17;
  uint8_t *p_c;
  NSObject *v19;
  uint32_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  int *v23;
  char *v24;
  int v25;
  int v26;
  unsigned __int8 v27;
  NSObject *v28;
  int *v29;
  char *v30;
  int v31;
  int v32;
  CC_SHA256_CTX c;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v8 = (unsigned __int8 *)operator new(0x20uLL);
  a4[1] = v8 + 32;
  a4[2] = v8 + 32;
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *a4 = v8;
  if (!a2)
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED7100E0 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v16 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
        return;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
      v16 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
        return;
    }
    LOWORD(c.count[0]) = 0;
    v17 = "dataIn Buffer is NULL";
    p_c = (uint8_t *)&c;
    v19 = v16;
    v20 = 2;
LABEL_20:
    _os_log_error_impl(&dword_1BF335000, v19, OS_LOG_TYPE_ERROR, v17, p_c, v20);
    return;
  }
  v9 = v8;
  *(_QWORD *)&c.wbuf[14] = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&c.wbuf[6] = v10;
  *(_OWORD *)&c.wbuf[10] = v10;
  *(_OWORD *)&c.hash[6] = v10;
  *(_OWORD *)&c.wbuf[2] = v10;
  *(_OWORD *)c.count = v10;
  *(_OWORD *)&c.hash[2] = v10;
  if (!ctu::fs::get_file_size())
    return;
  CC_SHA256_Init(&c);
  v11 = a1;
  if (a1[23] < 0)
    v11 = *(const char **)a1;
  v12 = open(v11, 0);
  if (v12 >= 1)
  {
    v13 = 0;
    while (1)
    {
      v14 = read(v12, a2, a3);
      if (v14 == -1)
        break;
      CC_SHA256_Update(&c, a2, v14);
      v13 += v14;
      if (v13 >= 0xAAAAAAAAAAAAAAAALL)
        goto LABEL_24;
    }
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED7100E0 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v28 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
      {
LABEL_24:
        CC_SHA256_Final(v9, &c);
        close(v12);
        return;
      }
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
      v28 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
        goto LABEL_24;
    }
    if (a1[23] < 0)
      a1 = *(const char **)a1;
    v29 = __error();
    v30 = strerror(*v29);
    v31 = *__error();
    v32 = *__error();
    *(_DWORD *)buf = 136315906;
    v35 = a1;
    v36 = 2080;
    v37 = v30;
    v38 = 1024;
    v39 = v31;
    v40 = 1024;
    v41 = v32;
    _os_log_error_impl(&dword_1BF335000, v28, OS_LOG_TYPE_ERROR, "Failed to read: %s : %s (%d,0x%x)", buf, 0x22u);
    goto LABEL_24;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED7100E0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v22 = qword_1ED7100E0;
    if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
      return;
    goto LABEL_17;
  }
  dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
  v22 = qword_1ED7100E0;
  if (os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
  {
LABEL_17:
    if (a1[23] < 0)
      a1 = *(const char **)a1;
    v23 = __error();
    v24 = strerror(*v23);
    v25 = *__error();
    v26 = *__error();
    *(_DWORD *)buf = 136315906;
    v35 = a1;
    v36 = 2080;
    v37 = v24;
    v38 = 1024;
    v39 = v25;
    v40 = 1024;
    v41 = v26;
    v17 = "Failed to open: %s : %s (%d, 0x%x)";
    p_c = buf;
    v19 = v22;
    v20 = 34;
    goto LABEL_20;
  }
}

void sub_1BF502964(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1BF50297C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1BF502994(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1BF5029AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1BF5029C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

BOOL util::markPurgeableFile(uint64_t *a1)
{
  uint64_t *v1;
  int v2;
  int v3;
  int v4;
  unsigned __int8 v5;
  uint64_t v6;
  _BOOL8 result;
  int *v8;
  char *v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  int *v15;
  char *v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t *v19;
  __int16 v20;
  _BYTE v21[14];
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v1 = a1;
  v24 = *MEMORY[0x1E0C80C00];
  v17 = 65541;
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    v2 = open((const char *)a1, 0);
    if ((v2 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_11:
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED7100E0 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v14 = qword_1ED7100E0;
      result = os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
      v14 = qword_1ED7100E0;
      result = os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
    }
    if (*((char *)v1 + 23) < 0)
      v1 = (uint64_t *)*v1;
    v15 = __error();
    v16 = strerror(*v15);
    *(_DWORD *)buf = 136315394;
    v19 = v1;
    v20 = 2080;
    *(_QWORD *)v21 = v16;
    v10 = "Failed to open %s : %s";
    v11 = v14;
    v12 = 22;
    goto LABEL_17;
  }
  v2 = open((const char *)*a1, 0);
  if (v2 < 0)
    goto LABEL_11;
LABEL_3:
  v3 = v2;
  v4 = ffsctl(v2, 0xC0084A44uLL, &v17, 0);
  close(v3);
  if (!v4)
    return 1;
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED7100E0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v6 = qword_1ED7100E0;
    result = os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR);
    if (result)
    {
LABEL_7:
      if (*((char *)v1 + 23) < 0)
        v1 = (uint64_t *)*v1;
      v8 = __error();
      v9 = strerror(*v8);
      *(_DWORD *)buf = 136315906;
      v19 = v1;
      v20 = 1024;
      *(_DWORD *)v21 = v4;
      *(_WORD *)&v21[4] = 2080;
      *(_QWORD *)&v21[6] = v9;
      v22 = 2048;
      v23 = v17;
      v10 = "Failed to mark %s as purgeable %d (%s) (flags 0x%llx)";
      v11 = v6;
      v12 = 38;
LABEL_17:
      _os_log_error_impl(&dword_1BF335000, v11, OS_LOG_TYPE_ERROR, v10, buf, v12);
      return 0;
    }
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
    v6 = qword_1ED7100E0;
    result = os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR);
    if (result)
      goto LABEL_7;
  }
  return result;
}

BOOL util::checkLogFileAge(uint64_t a1, int64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  std::sub_match<const char *> *v6;
  std::sub_match<std::__wrap_iter<const char *>> *v7;
  int v8;
  int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  char *v16;
  __int128 *v17;
  _OWORD *v18;
  unint64_t v19;
  __int128 v20;
  _BOOL8 v21;
  void *v22;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  char *v32;
  __int128 *v33;
  _OWORD *v34;
  unint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  char *v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  char *v58;
  __int128 *v59;
  _OWORD *v60;
  unint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  char *v71;
  __int128 *v72;
  _OWORD *v73;
  unint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  _BYTE *v82;
  _BYTE *v83;
  char *v84;
  __int128 *v85;
  _OWORD *v86;
  unint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  time_t v92;
  std::string v93;
  _BYTE v94[40];
  __int128 v95;
  uint64_t v96;
  unint64_t v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  tm __p;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v95 = 0xAAAAAAAAAAAAAAAALL;
  v97 = 0xAAAAAAAAAAAAAA00;
  v99 = v4;
  v96 = 0;
  v98 = 0uLL;
  LOBYTE(v99) = 0;
  BYTE8(v99) = 0;
  v100 = 0;
  memset(v94, 0, sizeof(v94));
  v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = (std::sub_match<const char *> *)a1;
  else
    v6 = *(std::sub_match<const char *> **)a1;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a1 + 8);
  v7 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v6 + v5);
  v103 = 0xAAAAAAAAAAAAAA00;
  __p.tm_gmtoff = 0xAAAAAAAAAAAAAAAALL;
  v106 = v4;
  __p.tm_zone = 0;
  v102 = 0;
  v104 = 0;
  v105 = 0;
  LOBYTE(v106) = 0;
  BYTE8(v106) = 0;
  v107 = 0;
  memset(&__p, 0, 41);
  v8 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a3, v6, (std::sub_match<const char *> *)((char *)v6 + v5), (std::vector<std::csub_match> *)&__p, 4160);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)v94, (uint64_t)v6, v7, (uint64_t *)&__p.tm_sec, 0);
  if (*(_QWORD *)&__p.tm_sec)
  {
    *(_QWORD *)&__p.tm_hour = *(_QWORD *)&__p.tm_sec;
    operator delete(*(void **)&__p.tm_sec);
  }
  if ((_BYTE)v99)
    v9 = 0;
  else
    v9 = v8;
  if (v9 != 1)
  {
    v21 = 0;
    v22 = *(void **)v94;
    if (!*(_QWORD *)v94)
      return v21;
LABEL_23:
    *(_QWORD *)&v94[8] = v22;
    operator delete(v22);
    return v21;
  }
  memset(&__p, 0, sizeof(__p));
  v10 = *(_QWORD *)v94;
  if (!*(_BYTE *)(*(_QWORD *)v94 + 40))
  {
    memset(&v93, 0, sizeof(v93));
    goto LABEL_33;
  }
  v12 = *(_QWORD *)(*(_QWORD *)v94 + 24);
  v11 = *(char **)(*(_QWORD *)v94 + 32);
  v13 = (unint64_t)&v11[-v12];
  if ((unint64_t)&v11[-v12] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v13 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v11 - v12;
    v14 = &v93;
    if ((char *)v12 != v11)
      goto LABEL_16;
LABEL_29:
    *v14 = 0;
    goto LABEL_33;
  }
  v24 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v13 | 7) != 0x17)
    v24 = v13 | 7;
  v25 = v24 + 1;
  v14 = operator new(v24 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v11[-v12];
  v93.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  if ((char *)v12 == v11)
    goto LABEL_29;
LABEL_16:
  if (v13 < 0x20 || (unint64_t)&v14[-v12] < 0x20)
  {
    v15 = v14;
    v16 = (char *)v12;
  }
  else
  {
    v15 = &v14[v13 & 0xFFFFFFFFFFFFFFE0];
    v16 = (char *)(v12 + (v13 & 0xFFFFFFFFFFFFFFE0));
    v17 = (__int128 *)(v12 + 16);
    v18 = v14 + 16;
    v19 = v13 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v20 = *v17;
      *(v18 - 1) = *(v17 - 1);
      *v18 = v20;
      v17 += 2;
      v18 += 2;
      v19 -= 32;
    }
    while (v19);
    if (v13 == (v13 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_32;
  }
  do
  {
    v26 = *v16++;
    *v15++ = v26;
  }
  while (v16 != v11);
LABEL_32:
  *v15 = 0;
LABEL_33:
  util::convert<int>(&v93, &__p.tm_year, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    __p.tm_year -= 1900;
    if (*(_BYTE *)(v10 + 64))
      goto LABEL_35;
LABEL_45:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_53;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  __p.tm_year -= 1900;
  if (!*(_BYTE *)(v10 + 64))
    goto LABEL_45;
LABEL_35:
  v28 = *(_QWORD *)(v10 + 48);
  v27 = *(char **)(v10 + 56);
  v29 = (unint64_t)&v27[-v28];
  if ((unint64_t)&v27[-v28] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v29 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v27 - v28;
    v30 = &v93;
    if ((char *)v28 != v27)
      goto LABEL_38;
LABEL_49:
    *v30 = 0;
    goto LABEL_53;
  }
  v37 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v29 | 7) != 0x17)
    v37 = v29 | 7;
  v38 = v37 + 1;
  v30 = operator new(v37 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v27[-v28];
  v93.__r_.__value_.__r.__words[2] = v38 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
  if ((char *)v28 == v27)
    goto LABEL_49;
LABEL_38:
  if (v29 < 0x20 || (unint64_t)&v30[-v28] < 0x20)
  {
    v31 = v30;
    v32 = (char *)v28;
  }
  else
  {
    v31 = &v30[v29 & 0xFFFFFFFFFFFFFFE0];
    v32 = (char *)(v28 + (v29 & 0xFFFFFFFFFFFFFFE0));
    v33 = (__int128 *)(v28 + 16);
    v34 = v30 + 16;
    v35 = v29 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v36 = *v33;
      *(v34 - 1) = *(v33 - 1);
      *v34 = v36;
      v33 += 2;
      v34 += 2;
      v35 -= 32;
    }
    while (v35);
    if (v29 == (v29 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_52;
  }
  do
  {
    v39 = *v32++;
    *v31++ = v39;
  }
  while (v32 != v27);
LABEL_52:
  *v31 = 0;
LABEL_53:
  util::convert<int>(&v93, &__p.tm_mon, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    --__p.tm_mon;
    if (*(_BYTE *)(v10 + 88))
      goto LABEL_55;
LABEL_65:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_73;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  --__p.tm_mon;
  if (!*(_BYTE *)(v10 + 88))
    goto LABEL_65;
LABEL_55:
  v41 = *(_QWORD *)(v10 + 72);
  v40 = *(char **)(v10 + 80);
  v42 = (unint64_t)&v40[-v41];
  if ((unint64_t)&v40[-v41] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v42 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v40 - v41;
    v43 = &v93;
    if ((char *)v41 != v40)
      goto LABEL_58;
LABEL_69:
    *v43 = 0;
    goto LABEL_73;
  }
  v50 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v42 | 7) != 0x17)
    v50 = v42 | 7;
  v51 = v50 + 1;
  v43 = operator new(v50 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v40[-v41];
  v93.__r_.__value_.__r.__words[2] = v51 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
  if ((char *)v41 == v40)
    goto LABEL_69;
LABEL_58:
  if (v42 < 0x20 || (unint64_t)&v43[-v41] < 0x20)
  {
    v44 = v43;
    v45 = (char *)v41;
  }
  else
  {
    v44 = &v43[v42 & 0xFFFFFFFFFFFFFFE0];
    v45 = (char *)(v41 + (v42 & 0xFFFFFFFFFFFFFFE0));
    v46 = (__int128 *)(v41 + 16);
    v47 = v43 + 16;
    v48 = v42 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v49 = *v46;
      *(v47 - 1) = *(v46 - 1);
      *v47 = v49;
      v46 += 2;
      v47 += 2;
      v48 -= 32;
    }
    while (v48);
    if (v42 == (v42 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_72;
  }
  do
  {
    v52 = *v45++;
    *v44++ = v52;
  }
  while (v45 != v40);
LABEL_72:
  *v44 = 0;
LABEL_73:
  util::convert<int>(&v93, (_DWORD *)((unint64_t)&__p | 0xC), 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v10 + 112))
      goto LABEL_75;
LABEL_85:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_93;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(_BYTE *)(v10 + 112))
    goto LABEL_85;
LABEL_75:
  v54 = *(_QWORD *)(v10 + 96);
  v53 = *(char **)(v10 + 104);
  v55 = (unint64_t)&v53[-v54];
  if ((unint64_t)&v53[-v54] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v55 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v53 - v54;
    v56 = &v93;
    if ((char *)v54 != v53)
      goto LABEL_78;
LABEL_89:
    *v56 = 0;
    goto LABEL_93;
  }
  v63 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v55 | 7) != 0x17)
    v63 = v55 | 7;
  v64 = v63 + 1;
  v56 = operator new(v63 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v53[-v54];
  v93.__r_.__value_.__r.__words[2] = v64 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  if ((char *)v54 == v53)
    goto LABEL_89;
LABEL_78:
  if (v55 < 0x20 || (unint64_t)&v56[-v54] < 0x20)
  {
    v57 = v56;
    v58 = (char *)v54;
  }
  else
  {
    v57 = &v56[v55 & 0xFFFFFFFFFFFFFFE0];
    v58 = (char *)(v54 + (v55 & 0xFFFFFFFFFFFFFFE0));
    v59 = (__int128 *)(v54 + 16);
    v60 = v56 + 16;
    v61 = v55 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v62 = *v59;
      *(v60 - 1) = *(v59 - 1);
      *v60 = v62;
      v59 += 2;
      v60 += 2;
      v61 -= 32;
    }
    while (v61);
    if (v55 == (v55 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_92;
  }
  do
  {
    v65 = *v58++;
    *v57++ = v65;
  }
  while (v58 != v53);
LABEL_92:
  *v57 = 0;
LABEL_93:
  util::convert<int>(&v93, &__p.tm_hour, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v10 + 136))
      goto LABEL_95;
LABEL_105:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_113;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(_BYTE *)(v10 + 136))
    goto LABEL_105;
LABEL_95:
  v67 = *(_QWORD *)(v10 + 120);
  v66 = *(char **)(v10 + 128);
  v68 = (unint64_t)&v66[-v67];
  if ((unint64_t)&v66[-v67] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v68 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v66 - v67;
    v69 = &v93;
    if ((char *)v67 != v66)
      goto LABEL_98;
LABEL_109:
    *v69 = 0;
    goto LABEL_113;
  }
  v76 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v68 | 7) != 0x17)
    v76 = v68 | 7;
  v77 = v76 + 1;
  v69 = operator new(v76 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v66[-v67];
  v93.__r_.__value_.__r.__words[2] = v77 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
  if ((char *)v67 == v66)
    goto LABEL_109;
LABEL_98:
  if (v68 < 0x20 || (unint64_t)&v69[-v67] < 0x20)
  {
    v70 = v69;
    v71 = (char *)v67;
  }
  else
  {
    v70 = &v69[v68 & 0xFFFFFFFFFFFFFFE0];
    v71 = (char *)(v67 + (v68 & 0xFFFFFFFFFFFFFFE0));
    v72 = (__int128 *)(v67 + 16);
    v73 = v69 + 16;
    v74 = v68 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v75 = *v72;
      *(v73 - 1) = *(v72 - 1);
      *v73 = v75;
      v72 += 2;
      v73 += 2;
      v74 -= 32;
    }
    while (v74);
    if (v68 == (v68 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_112;
  }
  do
  {
    v78 = *v71++;
    *v70++ = v78;
  }
  while (v71 != v66);
LABEL_112:
  *v70 = 0;
LABEL_113:
  util::convert<int>(&v93, &__p.tm_min, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v10 + 160))
      goto LABEL_115;
LABEL_125:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_133;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(_BYTE *)(v10 + 160))
    goto LABEL_125;
LABEL_115:
  v80 = *(_QWORD *)(v10 + 144);
  v79 = *(char **)(v10 + 152);
  v81 = (unint64_t)&v79[-v80];
  if ((unint64_t)&v79[-v80] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v81 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v79 - v80;
    v82 = &v93;
    if ((char *)v80 != v79)
      goto LABEL_118;
LABEL_129:
    *v82 = 0;
    goto LABEL_133;
  }
  v89 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v81 | 7) != 0x17)
    v89 = v81 | 7;
  v90 = v89 + 1;
  v82 = operator new(v89 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v79[-v80];
  v93.__r_.__value_.__r.__words[2] = v90 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
  if ((char *)v80 == v79)
    goto LABEL_129;
LABEL_118:
  if (v81 < 0x20 || (unint64_t)&v82[-v80] < 0x20)
  {
    v83 = v82;
    v84 = (char *)v80;
  }
  else
  {
    v83 = &v82[v81 & 0xFFFFFFFFFFFFFFE0];
    v84 = (char *)(v80 + (v81 & 0xFFFFFFFFFFFFFFE0));
    v85 = (__int128 *)(v80 + 16);
    v86 = v82 + 16;
    v87 = v81 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v88 = *v85;
      *(v86 - 1) = *(v85 - 1);
      *v86 = v88;
      v85 += 2;
      v86 += 2;
      v87 -= 32;
    }
    while (v87);
    if (v81 == (v81 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_132;
  }
  do
  {
    v91 = *v84++;
    *v83++ = v91;
  }
  while (v84 != v79);
LABEL_132:
  *v83 = 0;
LABEL_133:
  util::convert<int>(&v93, &__p, 10);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  __p.tm_isdst = -1;
  v92 = mktime(&__p);
  v93.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  v93.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday((timeval *)&v93, 0);
  v21 = (int64_t)(v93.__r_.__value_.__r.__words[0] - v92) > a2;
  v22 = *(void **)v94;
  if (*(_QWORD *)v94)
    goto LABEL_23;
  return v21;
}

void sub_1BF503530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void util::findBasebandLogInfoFile(const void **a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v3;
  __int128 v5;
  int v6;
  size_t v7;
  int v8;
  size_t size;
  unint64_t v10;
  void **v11;
  const void *v12;
  char *v13;
  std::string *v14;
  timespec v15;
  const char *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  DIR *v21;
  DIR *v22;
  dirent *v23;
  _DWORD *v24;
  void **v28;
  void *v29;
  _DWORD *v30;
  char *v34;
  uint64_t v35;
  int v36;
  int v38;
  size_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  std::string *v44;
  _OWORD *v45;
  _OWORD *v46;
  __int128 *v47;
  void *__dst[3];
  std::string v49;
  stat v50;

  *a3 = 0;
  a3[1] = 0;
  v46 = a3;
  a3[2] = 0;
  v3 = *a2;
  v47 = a2[1];
  if (v3 == v47)
    return;
  while (1)
  {
    memset(&v49, 170, sizeof(v49));
    if (*((char *)v3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
    }
    else
    {
      v5 = *v3;
      v49.__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v5;
    }
    v6 = *((char *)a1 + 23);
    if (v6 >= 0)
      v7 = *((unsigned __int8 *)a1 + 23);
    else
      v7 = (size_t)a1[1];
    v8 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    else
      size = v49.__r_.__value_.__l.__size_;
    v10 = size + v7;
    memset(__dst, 170, sizeof(__dst));
    if (size + v7 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v10 <= 0x16)
    {
      memset(__dst, 0, sizeof(__dst));
      v11 = __dst;
      HIBYTE(__dst[2]) = size + v7;
      if (!v7)
        goto LABEL_20;
LABEL_16:
      if (v6 >= 0)
        v12 = a1;
      else
        v12 = *a1;
      memmove(v11, v12, v7);
      goto LABEL_20;
    }
    v18 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v18 = v10 | 7;
    v19 = v18 + 1;
    v11 = (void **)operator new(v18 + 1);
    __dst[1] = (void *)(size + v7);
    __dst[2] = (void *)(v19 | 0x8000000000000000);
    __dst[0] = v11;
    if (v7)
      goto LABEL_16;
LABEL_20:
    v13 = (char *)v11 + v7;
    if (size)
    {
      if (v8 >= 0)
        v14 = &v49;
      else
        v14 = (std::string *)v49.__r_.__value_.__r.__words[0];
      memmove(v13, v14, size);
    }
    v13[size] = 0;
    v15.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v15.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&v50.st_blksize = v15;
    *(timespec *)v50.st_qspare = v15;
    v50.st_birthtimespec = v15;
    *(timespec *)&v50.st_size = v15;
    v50.st_mtimespec = v15;
    v50.st_ctimespec = v15;
    *(timespec *)&v50.st_uid = v15;
    v50.st_atimespec = v15;
    *(timespec *)&v50.st_dev = v15;
    if (SHIBYTE(__dst[2]) >= 0)
      v16 = (const char *)__dst;
    else
      v16 = (const char *)__dst[0];
    if (stat(v16, &v50)
      || (SHIBYTE(__dst[2]) >= 0 ? (v20 = (const char *)__dst) : (v20 = (const char *)__dst[0]),
          v21 = opendir(v20),
          (v22 = v21) == 0))
    {
      v17 = HIBYTE(__dst[2]);
      goto LABEL_30;
    }
    v23 = readdir(v21);
    closedir(v22);
    v17 = HIBYTE(__dst[2]);
    if (v23)
      break;
LABEL_30:
    if (v17 < 0)
    {
      operator delete(__dst[0]);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
LABEL_59:
        operator delete(v49.__r_.__value_.__l.__data_);
    }
    else if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_59;
    }
    v3 = (__int128 *)((char *)v3 + 24);
    if (v3 == v47)
      return;
  }
  if ((HIBYTE(__dst[2]) & 0x80) == 0)
  {
    if (HIBYTE(__dst[2]) <= 4u)
      goto LABEL_99;
    v24 = (_DWORD *)((char *)__dst + HIBYTE(__dst[2]) - 5);
    if (*v24 == 1885626669 && *((_BYTE *)__dst + HIBYTE(__dst[2]) - 1) == 108)
      goto LABEL_79;
    if (*v24 == 1935962413 && *((_BYTE *)__dst + HIBYTE(__dst[2]) - 1) == 115)
      goto LABEL_79;
    if (*v24 == 1634296877 && *((_BYTE *)__dst + HIBYTE(__dst[2]) - 1) == 103)
      goto LABEL_79;
    if (HIBYTE(__dst[2]) < 9u)
      goto LABEL_99;
    v28 = __dst;
    v29 = (void *)HIBYTE(__dst[2]);
    goto LABEL_74;
  }
  v29 = __dst[1];
  if (__dst[1] < (void *)5)
    goto LABEL_99;
  v28 = (void **)__dst[0];
  v30 = (char *)__dst[1] + (unint64_t)__dst[0] - 5;
  if ((*v30 != 1885626669 || *((_BYTE *)__dst[1] + (unint64_t)__dst[0] - 1) != 108)
    && (*v30 != 1935962413 || *((_BYTE *)__dst[1] + (unint64_t)__dst[0] - 1) != 115)
    && (*v30 != 1634296877 || *((_BYTE *)__dst[1] + (unint64_t)__dst[0] - 1) != 103))
  {
    if (__dst[1] < (void *)9)
LABEL_99:
      std::string::__throw_out_of_range[abi:ne180100]();
LABEL_74:
    v34 = (char *)v28 + (_QWORD)v29;
    v35 = *(_QWORD *)(v34 - 9);
    v36 = *(v34 - 1);
    if (v35 == 0x636172742D62622DLL && v36 == 101)
      goto LABEL_79;
    goto LABEL_30;
  }
LABEL_79:
  v38 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  else
    v39 = v49.__r_.__value_.__l.__size_;
  v40 = v39 + 9;
  memset(&v50, 170, 24);
  if (v39 + 9 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v40 >= 0x17)
  {
    v42 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v42 = v40 | 7;
    v43 = v42 + 1;
    v41 = operator new(v42 + 1);
    v50.st_ino = v39 + 9;
    *(_QWORD *)&v50.st_uid = v43 | 0x8000000000000000;
    *(_QWORD *)&v50.st_dev = v41;
  }
  else
  {
    memset(&v50, 0, 24);
    v41 = &v50;
    HIBYTE(v50.st_gid) = v39 + 9;
    if (!v39)
      goto LABEL_93;
  }
  if (v38 >= 0)
    v44 = &v49;
  else
    v44 = (std::string *)v49.__r_.__value_.__r.__words[0];
  memmove(v41, v44, v39);
LABEL_93:
  strcpy((char *)v41 + v39, "/info.txt");
  v45 = v46;
  *v46 = *(_OWORD *)&v50.st_dev;
  *((_QWORD *)v45 + 2) = *(_QWORD *)&v50.st_uid;
  if ((v17 & 0x80) == 0)
  {
    if ((v38 & 0x80) == 0)
      return;
LABEL_97:
    operator delete(v49.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__dst[0]);
  if ((*((_BYTE *)&v49.__r_.__value_.__s + 23) & 0x80) != 0)
    goto LABEL_97;
}

void sub_1BF503A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  _Unwind_Resume(exception_object);
}

BOOL util::isDumpForSysdiagnose(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  int v3;
  size_t v4;
  unint64_t v5;
  const void **v6;
  std::string::value_type *v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  const void **v12;
  std::string *v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t v16;
  _BOOL4 FilteredFiles;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _BOOL8 v21;
  void **v22;
  void **v23;
  void *v24;
  int v25;
  size_t size;
  int v27;
  size_t v28;
  unint64_t v29;
  void **v30;
  const void *v31;
  char *v32;
  std::string *v33;
  void **v34;
  uint64_t v35;
  int v36;
  void *v37;
  char *v38;
  void **v39;
  char *v40;
  unsigned __int8 v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 v50;
  NSObject *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  void **v55;
  void **v56;
  void *v57;
  std::string *v59;
  void *v60;
  void **v61;
  uint64_t v62;
  std::string v63;
  std::locale v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::string v70;
  std::string v71;
  _BYTE v72[48];
  __int128 v73;
  void *v74;
  void **v75;
  uint64_t v76;
  void *__dst[4];
  void *__p[76];

  __p[73] = *(void **)MEMORY[0x1E0C80C00];
  v74 = 0;
  v75 = 0;
  v76 = 0;
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v72[32] = v2;
  v73 = v2;
  *(_OWORD *)v72 = v2;
  *(_OWORD *)&v72[16] = v2;
  v3 = *(char *)(a2 + 23);
  if (v3 >= 0)
    v4 = *(unsigned __int8 *)(a2 + 23);
  else
    v4 = *(_QWORD *)(a2 + 8);
  v5 = v4 + 2;
  memset(&v71, 170, sizeof(v71));
  if (v4 + 2 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (const void **)a2;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v11 = operator new(v9 + 1);
    v71.__r_.__value_.__l.__size_ = v4 + 2;
    v71.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    v71.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    *v11 = 10798;
    v8 = (std::string::value_type *)(v11 + 1);
  }
  else
  {
    v71.__r_.__value_.__r.__words[2] = 0;
    *((_BYTE *)&v71.__r_.__value_.__s + 23) = v4 + 2;
    v8 = &v71.__r_.__value_.__s.__data_[2];
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = 0x2A2EuLL;
    if (!v4)
      goto LABEL_15;
  }
  if (v3 >= 0)
    v12 = v6;
  else
    v12 = (const void **)*v6;
  memmove(v8, v12, v4);
LABEL_15:
  v8[v4] = 0;
  v13 = std::string::append(&v71, ".*", 2uLL);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  __p[2] = (void *)v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v72, (uint64_t)__p, 0);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_17;
LABEL_20:
    operator delete(v71.__r_.__value_.__l.__data_);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_21;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_20;
LABEL_17:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
LABEL_18:
    v70 = *(std::string *)a1;
    goto LABEL_22;
  }
LABEL_21:
  std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
LABEL_22:
  std::locale::locale(&v64, (const std::locale *)v72);
  v65 = *(_OWORD *)&v72[8];
  v66 = *(_OWORD *)&v72[24];
  v67 = *(_QWORD *)&v72[40];
  v68 = (std::__shared_weak_count *)v73;
  if ((_QWORD)v73)
  {
    v15 = (unint64_t *)(v73 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v69 = *((_QWORD *)&v73 + 1);
  FilteredFiles = support::fs::getFilteredFiles((const char *)&v70, (uint64_t)&v64, (uint64_t)&v74, 0);
  v18 = v68;
  if (!v68)
    goto LABEL_29;
  p_shared_owners = (unint64_t *)&v68->__shared_owners_;
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    std::locale::~locale(&v64);
    if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_30:
      if (FilteredFiles)
        goto LABEL_31;
LABEL_35:
      v21 = 0;
      goto LABEL_116;
    }
  }
  else
  {
LABEL_29:
    std::locale::~locale(&v64);
    if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_30;
  }
  operator delete(v70.__r_.__value_.__l.__data_);
  if (!FilteredFiles)
    goto LABEL_35;
LABEL_31:
  memset(&v71, 170, sizeof(v71));
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v63 = *(std::string *)a1;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v60, (uint64_t)v74, (uint64_t)v75, 0xAAAAAAAAAAAAAAABLL * (((char *)v75 - (_BYTE *)v74) >> 3));
  util::findBasebandLogInfoFile((const void **)&v63.__r_.__value_.__l.__data_, (__int128 **)&v60, &v71);
  v22 = (void **)v60;
  if (v60)
  {
    v23 = v61;
    v24 = v60;
    if (v61 != v60)
    {
      do
      {
        if (*((char *)v23 - 1) < 0)
          operator delete(*(v23 - 3));
        v23 -= 3;
      }
      while (v23 != v22);
      v24 = v60;
    }
    v61 = v22;
    operator delete(v24);
  }
  if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v25 = SHIBYTE(v71.__r_.__value_.__r.__words[2]);
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    else
      size = v71.__r_.__value_.__l.__size_;
    if (size)
      goto LABEL_50;
LABEL_97:
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED7100E0 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v47 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_DEFAULT))
        goto LABEL_103;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
      v47 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_DEFAULT))
        goto LABEL_103;
    }
    if (*((char *)v6 + 23) < 0)
      v6 = (const void **)*v6;
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = v6;
    _os_log_impl(&dword_1BF335000, v47, OS_LOG_TYPE_DEFAULT, "No baseband info file found for %s", (uint8_t *)__p, 0xCu);
LABEL_103:
    v21 = 0;
    if ((v25 & 0x80) != 0)
      goto LABEL_115;
    goto LABEL_116;
  }
  operator delete(v63.__r_.__value_.__l.__data_);
  v25 = SHIBYTE(v71.__r_.__value_.__r.__words[2]);
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
  else
    size = v71.__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_97;
LABEL_50:
  memset(__p, 170, 0x240uLL);
  v27 = *(char *)(a1 + 23);
  if (v27 >= 0)
    v28 = *(unsigned __int8 *)(a1 + 23);
  else
    v28 = *(_QWORD *)(a1 + 8);
  v29 = v28 + size;
  memset(__dst, 170, 24);
  if (v28 + size > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v29 <= 0x16)
  {
    memset(__dst, 0, 24);
    v30 = __dst;
    HIBYTE(__dst[2]) = v28 + size;
    if (!v28)
      goto LABEL_60;
    goto LABEL_56;
  }
  v48 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v29 | 7) != 0x17)
    v48 = v29 | 7;
  v49 = v48 + 1;
  v30 = (void **)operator new(v48 + 1);
  __dst[1] = (void *)(v28 + size);
  __dst[2] = (void *)(v49 | 0x8000000000000000);
  __dst[0] = v30;
  if (v28)
  {
LABEL_56:
    if (v27 >= 0)
      v31 = (const void *)a1;
    else
      v31 = *(const void **)a1;
    memmove(v30, v31, v28);
  }
LABEL_60:
  v32 = (char *)v30 + v28;
  if (v25 >= 0)
    v33 = &v71;
  else
    v33 = (std::string *)v71.__r_.__value_.__r.__words[0];
  memmove(v32, v33, size);
  v32[size] = 0;
  std::ifstream::basic_ifstream(__p);
  if (SHIBYTE(__dst[2]) < 0)
  {
    operator delete(__dst[0]);
    if (__p[17])
      goto LABEL_65;
LABEL_110:
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED7100E0 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v51 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
      {
LABEL_113:
        v21 = 0;
        goto LABEL_114;
      }
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
      v51 = qword_1ED7100E0;
      if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_ERROR))
        goto LABEL_113;
    }
    v59 = (std::string *)v71.__r_.__value_.__r.__words[0];
    if (v25 >= 0)
      v59 = &v71;
    LODWORD(__dst[0]) = 136315138;
    *(void **)((char *)__dst + 4) = v59;
    _os_log_error_impl(&dword_1BF335000, v51, OS_LOG_TYPE_ERROR, "Failed to open info file: %s", (uint8_t *)__dst, 0xCu);
    goto LABEL_113;
  }
  if (!__p[17])
    goto LABEL_110;
LABEL_65:
  std::istream::seekg();
  memset(__dst, 170, 24);
  v34 = __dst;
  support::fs::readCurrentLine(__p, __dst);
  v35 = HIBYTE(__dst[2]);
  v36 = SHIBYTE(__dst[2]);
  v37 = __dst[0];
  if (SHIBYTE(__dst[2]) < 0)
  {
    v35 = (uint64_t)__dst[1];
    v34 = (void **)__dst[0];
  }
  v38 = (char *)v34 + v35;
  if (v35 >= 35)
  {
    v39 = v34;
    do
    {
      v40 = (char *)memchr(v39, 98, v35 - 34);
      if (!v40)
        break;
      if (*(_QWORD *)v40 == 0x6320676F6C206262
        && *((_QWORD *)v40 + 1) == 0x6F697463656C6C6FLL
        && *((_QWORD *)v40 + 2) == 0x20726F66202D206ELL
        && *((_QWORD *)v40 + 3) == 0x6E67616964737973
        && *(_QWORD *)(v40 + 27) == 0x65736F6E67616964)
      {
        goto LABEL_85;
      }
      v39 = (void **)(v40 + 1);
      v35 = v38 - (char *)v39;
    }
    while (v38 - (char *)v39 > 34);
  }
  v40 = v38;
LABEL_85:
  v21 = v40 != v38 && v40 - (char *)v34 != -1;
  if (v36 < 0)
    operator delete(v37);
LABEL_114:
  __p[0] = *(void **)MEMORY[0x1E0DE4F40];
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1C3B89C6C](&__p[2]);
  std::istream::~istream();
  MEMORY[0x1C3B89E4C](&__p[53]);
  if ((*((_BYTE *)&v71.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_115:
    operator delete(v71.__r_.__value_.__l.__data_);
LABEL_116:
  v52 = (std::__shared_weak_count *)v73;
  if ((_QWORD)v73)
  {
    v53 = (unint64_t *)(v73 + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  std::locale::~locale((std::locale *)v72);
  v55 = (void **)v74;
  if (v74)
  {
    v56 = v75;
    v57 = v74;
    if (v75 != v74)
    {
      do
      {
        if (*((char *)v56 - 1) < 0)
          operator delete(*(v56 - 3));
        v56 -= 3;
      }
      while (v56 != v55);
      v57 = v74;
    }
    v75 = v55;
    operator delete(v57);
  }
  return v21;
}

void sub_1BF5042F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,std::locale a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,char a50)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a31);
  std::vector<std::string>::~vector[abi:ne180100](&a40);
  _Unwind_Resume(a1);
}

void sub_1BF504350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::locale a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43)
{
  std::vector<std::string>::~vector[abi:ne180100](&a10);
  if (a18 < 0)
    operator delete(a13);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a34);
  std::vector<std::string>::~vector[abi:ne180100](&a43);
  _Unwind_Resume(a1);
}

void sub_1BF504374(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::locale a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a17);
  if (a30 < 0)
    JUMPOUT(0x1BF50438CLL);
  JUMPOUT(0x1BF504390);
}

void sub_1BF5043A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a55 < 0)
  {
    operator delete(__p);
    if (a33 < 0)
    {
LABEL_5:
      operator delete(a28);
      std::vector<std::string>::~vector[abi:ne180100](&a43);
      _Unwind_Resume(a1);
    }
  }
  else if (a33 < 0)
  {
    goto LABEL_5;
  }
  std::vector<std::string>::~vector[abi:ne180100](&a43);
  _Unwind_Resume(a1);
}

void sub_1BF504404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40)
{
  std::vector<std::string>::~vector[abi:ne180100](&a40);
  _Unwind_Resume(a1);
}

void util::findLastLogDumpTimestamp(util *this@<X0>, const char *__s@<X1>, const char *a3@<X2>, int a4@<W3>, char *a5@<X4>, std::string *a6@<X8>)
{
  unsigned int v8;
  std::string *v10;
  size_t v11;
  size_t v12;
  __int128 *p_dst;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  size_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _BOOL4 FilteredFiles;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  __n128 v31;
  unint64_t v32;
  uint64_t v33;
  const void **v34;
  __int128 v35;
  int64_t size;
  std::string::size_type v37;
  int v38;
  std::string *v39;
  std::string *v40;
  std::string *v41;
  int64_t v42;
  __int128 v43;
  std::string::size_type v44;
  std::sub_match<const char *> *v45;
  int v46;
  std::string::size_type v47;
  std::string *v48;
  _BYTE *p_end_cap;
  std::vector<std::ssub_match>::pointer begin;
  std::__wrap_iter<const char *>::iterator_type i;
  const char **p_i;
  const char *v53;
  unint64_t v54;
  __int128 *v55;
  __int128 *v56;
  const char *v57;
  __int128 *v58;
  _OWORD *v59;
  unint64_t v60;
  __int128 v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  int v65;
  std::sub_match<std::__wrap_iter<const char *>> *v66;
  char *v67;
  int v68;
  std::string *v69;
  int64_t v70;
  char *v71;
  char *v72;
  char *v73;
  int v74;
  std::string *v75;
  int64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  size_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  _BOOL4 isDumpForSysdiagnose;
  unsigned __int8 v88;
  NSObject *v89;
  std::string *v90;
  char v91;
  char v92;
  int64_t v93;
  std::string *v94;
  size_t v95;
  unint64_t *v96;
  unint64_t v97;
  _BOOL4 v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  const void **v108;
  const void **v109;
  const void **v110;
  unsigned int v111;
  char *v113;
  const void **v115;
  std::string *v116;
  BOOL v117;
  std::locale v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  uint64_t v123;
  std::string v124;
  std::string v125;
  void *v126[2];
  unint64_t v127;
  std::vector<std::ssub_match> v128[2];
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  std::string v136;
  std::string v137;
  std::locale v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  uint64_t v143;
  void *__p[2];
  unint64_t v145;
  _BYTE v146[48];
  __int128 v147;
  _BYTE v148[48];
  __int128 v149;
  void *v150[3];
  const void **v151;
  const void **v152;
  uint64_t v153;
  __int128 __dst;
  _BYTE v155[32];
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;

  v8 = a3;
  v10 = a6;
  v163 = *MEMORY[0x1E0C80C00];
  a6->__r_.__value_.__r.__words[0] = 0;
  a6->__r_.__value_.__l.__size_ = 0;
  a6->__r_.__value_.__r.__words[2] = 0;
  v151 = 0;
  v152 = 0;
  v153 = 0;
  memset(v150, 170, sizeof(v150));
  v11 = strlen(__s);
  v116 = v10;
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (__int128 *)operator new(v14 + 1);
    *((_QWORD *)&__dst + 1) = v12;
    *(_QWORD *)v155 = v15 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  v155[7] = v11;
  p_dst = &__dst;
  if (v11)
LABEL_8:
    memcpy(p_dst, __s, v12);
  *((_BYTE *)p_dst + v12) = 0;
  v16 = std::string::append((std::string *)&__dst, ".*", 2uLL);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v150[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)v150 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((v155[7] & 0x80000000) != 0)
    operator delete((void *)__dst);
  *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v148[32] = v18;
  v149 = v18;
  *(_OWORD *)v148 = v18;
  *(_OWORD *)&v148[16] = v18;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v148, (uint64_t)v150, 0);
  *(_QWORD *)&v19 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v146[32] = v19;
  v147 = v19;
  *(_OWORD *)v146 = v19;
  *(_OWORD *)&v146[16] = v19;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)v146, "(\\d{4})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{3})", 0);
  v20 = strlen((const char *)this);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = (void *)v20;
  v117 = a5 == 0;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = operator new(v23 + 1);
    v145 = v24 | 0x8000000000000000;
    __p[0] = v22;
    __p[1] = v21;
    goto LABEL_18;
  }
  HIBYTE(v145) = v20;
  v22 = __p;
  if (v20)
LABEL_18:
    memcpy(v22, this, (size_t)v21);
  *((_BYTE *)v21 + (_QWORD)v22) = 0;
  std::locale::locale(&v138, (const std::locale *)v148);
  v139 = *(_OWORD *)&v148[8];
  v140 = *(_OWORD *)&v148[24];
  v141 = *(_QWORD *)&v148[40];
  v142 = (std::__shared_weak_count *)v149;
  if ((_QWORD)v149)
  {
    v25 = (unint64_t *)(v149 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v143 = *((_QWORD *)&v149 + 1);
  FilteredFiles = support::fs::getFilteredFiles((const char *)__p, (uint64_t)&v138, (uint64_t)&v151, 0);
  v28 = v142;
  if (!v142)
    goto LABEL_26;
  p_shared_owners = (unint64_t *)&v142->__shared_owners_;
  do
    v30 = __ldaxr(p_shared_owners);
  while (__stlxr(v30 - 1, p_shared_owners));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    std::locale::~locale(&v138);
    if ((SHIBYTE(v145) & 0x80000000) == 0)
    {
LABEL_27:
      if (!FilteredFiles)
        goto LABEL_176;
      goto LABEL_31;
    }
  }
  else
  {
LABEL_26:
    std::locale::~locale(&v138);
    if ((SHIBYTE(v145) & 0x80000000) == 0)
      goto LABEL_27;
  }
  operator delete(__p[0]);
  if (!FilteredFiles)
    goto LABEL_176;
LABEL_31:
  v32 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v152 - v151));
  if (v152 == v151)
    v33 = 0;
  else
    v33 = v32;
  std::__introsort<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*,false>((uint64_t)v151, v152, v33, 1, v31);
  memset(&v137, 0, sizeof(v137));
  v34 = v151;
  v115 = v152;
  if (v151 == v152)
  {
LABEL_176:
    if (!v8)
      goto LABEL_196;
LABEL_177:
    if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v124, v10->__r_.__value_.__l.__data_, v10->__r_.__value_.__l.__size_);
    else
      v124 = *v10;
    std::locale::locale(&v118, (const std::locale *)v146);
    v119 = *(_OWORD *)&v146[8];
    v120 = *(_OWORD *)&v146[24];
    v121 = *(_QWORD *)&v146[40];
    v122 = (std::__shared_weak_count *)v147;
    if ((_QWORD)v147)
    {
      v96 = (unint64_t *)(v147 + 8);
      do
        v97 = __ldxr(v96);
      while (__stxr(v97 + 1, v96));
    }
    v123 = *((_QWORD *)&v147 + 1);
    v98 = util::checkLogFileAge((uint64_t)&v124, v8, (uint64_t)&v118);
    v99 = v122;
    if (!v122)
      goto LABEL_187;
    v100 = (unint64_t *)&v122->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
      std::locale::~locale(&v118);
      if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_188:
        if (!v98)
          goto LABEL_196;
LABEL_192:
        if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0)
        {
          *v10->__r_.__value_.__l.__data_ = 0;
          v10->__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          v10->__r_.__value_.__s.__data_[0] = 0;
          *((_BYTE *)&v10->__r_.__value_.__s + 23) = 0;
        }
        goto LABEL_196;
      }
    }
    else
    {
LABEL_187:
      std::locale::~locale(&v118);
      if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_188;
    }
    operator delete(v124.__r_.__value_.__l.__data_);
    if (!v98)
      goto LABEL_196;
    goto LABEL_192;
  }
  v111 = v8;
  v113 = a5;
  while (1)
  {
    memset(&v136, 170, sizeof(v136));
    if (*((char *)v34 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v136, (const std::string::value_type *)*v34, (std::string::size_type)v34[1]);
    }
    else
    {
      v35 = *(_OWORD *)v34;
      v136.__r_.__value_.__r.__words[2] = (std::string::size_type)v34[2];
      *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v35;
    }
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    else
      size = v137.__r_.__value_.__l.__size_;
    v37 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
    v38 = SHIBYTE(v136.__r_.__value_.__r.__words[2]);
    v39 = (std::string *)v136.__r_.__value_.__r.__words[0];
    if (size)
    {
      if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v40 = &v137;
      else
        v40 = (std::string *)v137.__r_.__value_.__r.__words[0];
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = &v136;
      else
        v41 = (std::string *)v136.__r_.__value_.__r.__words[0];
      v42 = v136.__r_.__value_.__l.__size_;
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
      if (v42 >= size)
      {
        v67 = (char *)v41 + v42;
        v68 = v40->__r_.__value_.__s.__data_[0];
        v69 = v41;
        do
        {
          v70 = v42 - size;
          if (v70 == -1)
            break;
          v71 = (char *)memchr(v69, v68, v70 + 1);
          if (!v71)
            break;
          v72 = v71;
          if (!memcmp(v71, v40, size))
          {
            if (v72 == v67 || v72 - (char *)v41 == -1)
              break;
            v65 = 3;
            v10 = v116;
            if ((v38 & 0x80) == 0)
              goto LABEL_155;
            goto LABEL_109;
          }
          v69 = (std::string *)(v72 + 1);
          v42 = v67 - (v72 + 1);
        }
        while (v42 >= size);
      }
    }
    *(_QWORD *)&v43 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v43 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v134 = v43;
    v131 = 0xAAAAAAAAAAAAAA00;
    v128[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
    v129 = 0;
    v130 = 0;
    v132 = 0;
    v133 = 0;
    LOBYTE(v134) = 0;
    BYTE8(v134) = 0;
    v135 = 0;
    memset(v128, 0, 41);
    if (v117)
    {
      v44 = v136.__r_.__value_.__l.__size_;
      v161 = v43;
      v158 = 0xAAAAAAAAAAAAAA00;
      *(_QWORD *)&v155[24] = v43;
      v156 = 0;
      v157 = 0;
      v159 = 0;
      v160 = 0;
      LOBYTE(v161) = 0;
      BYTE8(v161) = 0;
      v162 = 0;
      __dst = 0uLL;
      *(_OWORD *)v155 = 0uLL;
      if (v38 >= 0)
        v45 = (std::sub_match<const char *> *)&v136;
      else
        v45 = (std::sub_match<const char *> *)v39;
      if (v38 >= 0)
        v44 = v37;
      *(_OWORD *)&v155[9] = 0uLL;
      v10 = v116;
      v46 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v146, v45, (std::sub_match<const char *> *)((char *)v45 + v44), (std::vector<std::csub_match> *)&__dst, 0);
      v47 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v48 = &v136;
      else
        v48 = (std::string *)v136.__r_.__value_.__r.__words[0];
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v47 = v136.__r_.__value_.__l.__size_;
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v128, (uint64_t)v48, (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v48 + v47), (uint64_t *)&__dst, 0);
      if ((_QWORD)__dst)
      {
        *((_QWORD *)&__dst + 1) = __dst;
        operator delete((void *)__dst);
      }
      if (v46)
      {
        p_end_cap = &v128[1].__end_cap_;
        if (v128[0].__end_ != v128[0].__begin_)
          p_end_cap = &v128[0].__begin_->matched;
        if (!*p_end_cap)
        {
          __dst = 0uLL;
          *(_QWORD *)v155 = 0;
          if ((SHIBYTE(v116->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_119;
          goto LABEL_104;
        }
        begin = (std::vector<std::ssub_match>::pointer)&v128[1];
        if (v128[0].__end_ != v128[0].__begin_)
          begin = v128[0].__begin_;
        i = begin->first.__i_;
        p_i = &v128[0].__begin_->second.__i_;
        if (v128[0].__end_ == v128[0].__begin_)
          p_i = (const char **)&v128[1].__end_;
        v53 = *p_i;
        v54 = *p_i - i;
        if (v54 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v54 > 0x16)
        {
          v79 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v54 | 7) != 0x17)
            v79 = v54 | 7;
          v80 = v79 + 1;
          v55 = (__int128 *)operator new(v79 + 1);
          *((_QWORD *)&__dst + 1) = v54;
          *(_QWORD *)v155 = v80 | 0x8000000000000000;
          *(_QWORD *)&__dst = v55;
          if (i != v53)
          {
LABEL_77:
            if (v54 < 0x20 || (unint64_t)((char *)v55 - i) < 0x20)
            {
              v56 = v55;
              v57 = i;
            }
            else
            {
              v56 = (__int128 *)((char *)v55 + (v54 & 0xFFFFFFFFFFFFFFE0));
              v57 = &i[v54 & 0xFFFFFFFFFFFFFFE0];
              v58 = (__int128 *)(i + 16);
              v59 = v55 + 1;
              v60 = v54 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v61 = *v58;
                *(v59 - 1) = *(v58 - 1);
                *v59 = v61;
                v58 += 2;
                v59 += 2;
                v60 -= 32;
              }
              while (v60);
              if (v54 == (v54 & 0x7FFFFFFFFFFFFFE0))
              {
LABEL_118:
                *(_BYTE *)v56 = 0;
                if ((SHIBYTE(v116->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_119:
                  *(_OWORD *)&v116->__r_.__value_.__l.__data_ = __dst;
                  v116->__r_.__value_.__r.__words[2] = *(_QWORD *)v155;
                  if (!a4)
                    goto LABEL_146;
                  goto LABEL_120;
                }
LABEL_104:
                operator delete(v116->__r_.__value_.__l.__data_);
                *(_OWORD *)&v116->__r_.__value_.__l.__data_ = __dst;
                v116->__r_.__value_.__r.__words[2] = *(_QWORD *)v155;
                if (!a4)
                  goto LABEL_146;
LABEL_120:
                v82 = strlen((const char *)this);
                if (v82 > 0x7FFFFFFFFFFFFFF7)
                  std::string::__throw_length_error[abi:ne180100]();
                v83 = (void *)v82;
                if (v82 >= 0x17)
                {
                  v85 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v82 | 7) != 0x17)
                    v85 = v82 | 7;
                  v86 = v85 + 1;
                  v84 = operator new(v85 + 1);
                  v126[1] = v83;
                  v127 = v86 | 0x8000000000000000;
                  v126[0] = v84;
                }
                else
                {
                  HIBYTE(v127) = v82;
                  v84 = v126;
                  if (!v82)
                  {
                    LOBYTE(v126[0]) = 0;
                    if ((SHIBYTE(v116->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_124:
                      v125 = *v116;
LABEL_130:
                      isDumpForSysdiagnose = util::isDumpForSysdiagnose((uint64_t)v126, (uint64_t)&v125);
                      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(v125.__r_.__value_.__l.__data_);
                        if ((SHIBYTE(v127) & 0x80000000) == 0)
                        {
LABEL_132:
                          if (isDumpForSysdiagnose)
                          {
LABEL_133:
                            if ((v88 & 1) == 0
                            {
                              GetOsLogContext(void)::sOsLogContext = 0;
                              qword_1ED7100E0 = 0;
                              __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
                            }
                            if (GetOsLogContext(void)::onceToken == -1)
                            {
                              v89 = qword_1ED7100E0;
                              if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_DEFAULT))
                                goto LABEL_140;
                            }
                            else
                            {
                              dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
                              v89 = qword_1ED7100E0;
                              if (!os_log_type_enabled((os_log_t)qword_1ED7100E0, OS_LOG_TYPE_DEFAULT))
                                goto LABEL_140;
                            }
                            if ((v116->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v90 = v116;
                            else
                              v90 = (std::string *)v116->__r_.__value_.__r.__words[0];
                            LODWORD(__dst) = 136315138;
                            *(_QWORD *)((char *)&__dst + 4) = v90;
                            _os_log_impl(&dword_1BF335000, v89, OS_LOG_TYPE_DEFAULT, "Ignore dump for sysdiagnose: %s", (uint8_t *)&__dst, 0xCu);
LABEL_140:
                            if (&v137 != v116)
                            {
                              v91 = HIBYTE(v116->__r_.__value_.__r.__words[2]);
                              if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
                              {
                                if (v91 >= 0)
                                  v94 = v116;
                                else
                                  v94 = (std::string *)v116->__r_.__value_.__r.__words[0];
                                if (v91 >= 0)
                                  v95 = HIBYTE(v116->__r_.__value_.__r.__words[2]);
                                else
                                  v95 = v116->__r_.__value_.__l.__size_;
                                std::string::__assign_no_alias<false>((void **)&v137.__r_.__value_.__l.__data_, v94, v95);
                              }
                              else
                              {
                                if ((*((_BYTE *)&v116->__r_.__value_.__s + 23) & 0x80) == 0)
                                {
                                  v137 = *v116;
LABEL_169:
                                  v65 = 0;
                                  v116->__r_.__value_.__s.__data_[0] = 0;
                                  *((_BYTE *)&v116->__r_.__value_.__s + 23) = 0;
                                  goto LABEL_151;
                                }
                                std::string::__assign_no_alias<true>(&v137, v116->__r_.__value_.__l.__data_, v116->__r_.__value_.__l.__size_);
                              }
                            }
                            if (SHIBYTE(v116->__r_.__value_.__r.__words[2]) < 0)
                            {
                              v65 = 0;
                              *v116->__r_.__value_.__l.__data_ = 0;
                              v116->__r_.__value_.__l.__size_ = 0;
                              goto LABEL_151;
                            }
                            goto LABEL_169;
                          }
                          goto LABEL_146;
                        }
                      }
                      else if ((SHIBYTE(v127) & 0x80000000) == 0)
                      {
                        goto LABEL_132;
                      }
                      operator delete(v126[0]);
                      if (isDumpForSysdiagnose)
                        goto LABEL_133;
LABEL_146:
                      v65 = 2;
LABEL_151:
                      v92 = 1;
LABEL_152:
                      v117 = v92;
                      v66 = v128[0].__begin_;
                      if (v128[0].__begin_)
                        goto LABEL_153;
                      goto LABEL_154;
                    }
LABEL_129:
                    std::string::__init_copy_ctor_external(&v125, v116->__r_.__value_.__l.__data_, v116->__r_.__value_.__l.__size_);
                    goto LABEL_130;
                  }
                }
                memcpy(v84, this, (size_t)v83);
                *((_BYTE *)v83 + (_QWORD)v84) = 0;
                if ((SHIBYTE(v116->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_124;
                goto LABEL_129;
              }
            }
            do
            {
              v81 = *v57++;
              *(_BYTE *)v56 = v81;
              v56 = (__int128 *)((char *)v56 + 1);
            }
            while (v57 != v53);
            goto LABEL_118;
          }
        }
        else
        {
          v155[7] = *(_BYTE *)p_i - (_BYTE)i;
          v55 = &__dst;
          if (i != v53)
            goto LABEL_77;
        }
        *(_BYTE *)v55 = 0;
        if ((SHIBYTE(v116->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_119;
        goto LABEL_104;
      }
LABEL_150:
      v65 = 0;
      goto LABEL_151;
    }
    if (v38 >= 0)
      v39 = &v136;
    v62 = strlen(v113);
    v10 = v116;
    if (!v62)
    {
LABEL_149:
      std::string::__assign_external(&v137, v113);
      goto LABEL_150;
    }
    v63 = v62;
    v64 = v136.__r_.__value_.__l.__size_;
    if (v38 >= 0)
      v64 = v37;
    if (v64 >= v62)
    {
      v73 = (char *)v39 + v64;
      v74 = *v113;
      v75 = v39;
      do
      {
        v76 = v64 - v63;
        if (v76 == -1)
          break;
        v77 = (char *)memchr(v75, v74, v76 + 1);
        if (!v77)
          break;
        v78 = v77;
        if (!memcmp(v77, v113, v63))
        {
          v92 = 0;
          if (v78 != v73)
          {
            v93 = v78 - (char *)v39;
            v65 = 0;
            if (v93 == -1)
              goto LABEL_152;
            goto LABEL_149;
          }
          v65 = 0;
          v117 = 0;
          v66 = v128[0].__begin_;
          if (v128[0].__begin_)
            goto LABEL_153;
          goto LABEL_154;
        }
        v75 = (std::string *)(v78 + 1);
        v64 = v73 - (v78 + 1);
      }
      while (v64 >= v63);
    }
    v65 = 0;
    v117 = 0;
    v66 = v128[0].__begin_;
    if (v128[0].__begin_)
    {
LABEL_153:
      v128[0].__end_ = v66;
      operator delete(v66);
    }
LABEL_154:
    if ((*((_BYTE *)&v136.__r_.__value_.__s + 23) & 0x80) != 0)
      break;
LABEL_155:
    if (v65 != 3)
      goto LABEL_156;
LABEL_36:
    v34 += 3;
    if (v34 == v115)
      goto LABEL_175;
  }
LABEL_109:
  operator delete(v136.__r_.__value_.__l.__data_);
  if (v65 == 3)
    goto LABEL_36;
LABEL_156:
  if (!v65)
    goto LABEL_36;
LABEL_175:
  v8 = v111;
  if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_176;
  operator delete(v137.__r_.__value_.__l.__data_);
  if (v111)
    goto LABEL_177;
LABEL_196:
  v102 = (std::__shared_weak_count *)v147;
  if ((_QWORD)v147)
  {
    v103 = (unint64_t *)(v147 + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
      std::locale::~locale((std::locale *)v146);
      v105 = (std::__shared_weak_count *)v149;
      if ((_QWORD)v149)
        goto LABEL_201;
      goto LABEL_204;
    }
  }
  std::locale::~locale((std::locale *)v146);
  v105 = (std::__shared_weak_count *)v149;
  if (!(_QWORD)v149)
    goto LABEL_204;
LABEL_201:
  v106 = (unint64_t *)&v105->__shared_owners_;
  do
    v107 = __ldaxr(v106);
  while (__stlxr(v107 - 1, v106));
  if (v107)
  {
LABEL_204:
    std::locale::~locale((std::locale *)v148);
    if (SHIBYTE(v150[2]) < 0)
      goto LABEL_205;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
    std::__shared_weak_count::__release_weak(v105);
    std::locale::~locale((std::locale *)v148);
    if (SHIBYTE(v150[2]) < 0)
LABEL_205:
      operator delete(v150[0]);
  }
  v108 = v151;
  if (v151)
  {
    v109 = v152;
    v110 = v151;
    if (v152 != v151)
    {
      do
      {
        if (*((char *)v109 - 1) < 0)
          operator delete((void *)*(v109 - 3));
        v109 -= 3;
      }
      while (v109 != v108);
      v110 = v151;
    }
    v152 = v108;
    operator delete(v110);
  }
}

void sub_1BF5050F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;

  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&STACK[0x220]);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&STACK[0x260]);
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v24 - 248));
  if (*(char *)(a24 + 23) < 0)
    operator delete(*(void **)a24);
  _Unwind_Resume(a1);
}

uint64_t util::getNumberOfLogDumps(uint64_t a1, const void **a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  int v7;
  size_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  _BYTE *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  __int128 v20;
  int v21;
  size_t v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  _BYTE *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  std::sub_match<const char *> *v39;
  std::sub_match<const char *> *v40;
  __int128 v41;
  const char *second;
  std::sub_match<const char *> *first;
  int v44;
  const char *v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t *v48;
  uint64_t v49;
  char **v50;
  char *v51;
  unint64_t v52;
  _OWORD *v53;
  _BYTE *v54;
  char *v55;
  __int128 *v56;
  _OWORD *v57;
  unint64_t v58;
  __int128 v59;
  void *v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint8x8_t v71;
  unint64_t v72;
  uint64_t **v73;
  uint64_t *v74;
  char v75;
  void *v76;
  void **v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  void *v81;
  const void **v82;
  void **v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  const void **v87;
  void **v88;
  uint64_t v89;
  int v90;
  _QWORD *v91;
  float v92;
  uint64_t v93;
  _QWORD *v94;
  _BOOL8 v95;
  unint64_t v96;
  unint64_t v97;
  size_t prime;
  void *v99;
  void *v100;
  uint64_t v101;
  _QWORD **v102;
  size_t v103;
  size_t v104;
  size_t v105;
  _QWORD *i;
  size_t v107;
  uint64_t v108;
  unint64_t v109;
  uint8x8_t v110;
  uint64_t v111;
  _QWORD *v112;
  void *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  size_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  void **v125;
  void *v126;
  void **v127;
  void **v128;
  void *v129;
  void **v131;
  void *v132;
  char *v133;
  std::sub_match<const char *> *v134;
  void *v135[2];
  int64_t v136;
  std::locale v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  std::string v143;
  std::locale v144[2];
  __int128 v145;
  __int128 v146;
  __int128 v147;
  _BYTE v148[48];
  __int128 v149;
  __int128 v150;
  __int128 v151;
  unint64_t v152;
  void *v153;
  std::sub_match<const char *> *v154;
  uint64_t v155;
  _BYTE __p[48];
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  _BYTE __dst[48];
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  v153 = 0;
  v154 = 0;
  v155 = 0;
  v150 = 0u;
  v151 = 0u;
  v152 = 0xAAAAAAAA3F800000;
  v4 = (char *)operator new(0x48uLL);
  v5 = v4;
  strcpy(v4, "[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2,4}-[0-9]{3}");
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v148[32] = v6;
  v149 = v6;
  *(_OWORD *)v148 = v6;
  *(_OWORD *)&v148[16] = v6;
  v7 = *((char *)a2 + 23);
  if (v7 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  v9 = v8 + 64;
  memset(__dst, 170, 24);
  v133 = v4;
  if (v8 + 64 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v9 <= 0x16)
  {
    memset(__dst, 0, 24);
    v10 = __dst;
    __dst[23] = v8 + 64;
LABEL_10:
    if (v7 >= 0)
      v13 = a2;
    else
      v13 = *a2;
    memmove(v10, v13, v8);
    goto LABEL_14;
  }
  v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v9 | 7) != 0x17)
    v11 = v9 | 7;
  v12 = v11 + 1;
  v10 = operator new(v11 + 1);
  *(_QWORD *)&__dst[8] = v8 + 64;
  *(_QWORD *)&__dst[16] = v12 | 0x8000000000000000;
  *(_QWORD *)__dst = v10;
  if (v8)
    goto LABEL_10;
LABEL_14:
  v14 = &v10[v8];
  v15 = *(_OWORD *)v5;
  v16 = *((_OWORD *)v5 + 1);
  v17 = *((_OWORD *)v5 + 3);
  *((_OWORD *)v14 + 2) = *((_OWORD *)v5 + 2);
  *((_OWORD *)v14 + 3) = v17;
  *(_OWORD *)v14 = v15;
  *((_OWORD *)v14 + 1) = v16;
  v14[64] = 0;
  v18 = std::string::append((std::string *)__dst, ".*", 2uLL);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v148, (uint64_t)__p, 0);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_16;
  }
  else if ((__dst[23] & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(*(void **)__dst);
LABEL_16:
  *(_QWORD *)&v20 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v146 = v20;
  v147 = v20;
  v145 = v20;
  *(_OWORD *)&v144[0].__locale_ = v20;
  v21 = *((char *)a2 + 23);
  if (v21 >= 0)
    v22 = *((unsigned __int8 *)a2 + 23);
  else
    v22 = (size_t)a2[1];
  v23 = v22 + 64;
  memset(__dst, 170, 24);
  if (v22 + 64 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v23 <= 0x16)
  {
    memset(__dst, 0, 24);
    v24 = __dst;
    __dst[23] = v22 + 64;
LABEL_25:
    if (v21 >= 0)
      v27 = a2;
    else
      v27 = *a2;
    memmove(v24, v27, v22);
    goto LABEL_29;
  }
  v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v23 | 7) != 0x17)
    v25 = v23 | 7;
  v26 = v25 + 1;
  v24 = operator new(v25 + 1);
  *(_QWORD *)&__dst[8] = v22 + 64;
  *(_QWORD *)&__dst[16] = v26 | 0x8000000000000000;
  *(_QWORD *)__dst = v24;
  if (v22)
    goto LABEL_25;
LABEL_29:
  v28 = &v24[v22];
  v29 = *(_OWORD *)v5;
  v30 = *((_OWORD *)v5 + 1);
  v31 = *((_OWORD *)v5 + 3);
  *((_OWORD *)v28 + 2) = *((_OWORD *)v5 + 2);
  *((_OWORD *)v28 + 3) = v31;
  *(_OWORD *)v28 = v29;
  *((_OWORD *)v28 + 1) = v30;
  v28[64] = 0;
  v32 = std::string::append((std::string *)__dst, "(?=-*)(?!\\.json)", 0x10uLL);
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v32->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v144, (uint64_t)__p, 0);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_31;
LABEL_36:
    operator delete(*(void **)__dst);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_37;
  }
  operator delete(*(void **)__p);
  if ((__dst[23] & 0x80000000) != 0)
    goto LABEL_36;
LABEL_31:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
LABEL_32:
    v143 = *(std::string *)a1;
    goto LABEL_38;
  }
LABEL_37:
  std::string::__init_copy_ctor_external(&v143, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
LABEL_38:
  std::locale::locale(&v137, (const std::locale *)v148);
  v138 = *(_OWORD *)&v148[8];
  v139 = *(_OWORD *)&v148[24];
  v140 = *(_QWORD *)&v148[40];
  v141 = (std::__shared_weak_count *)v149;
  if ((_QWORD)v149)
  {
    v34 = (unint64_t *)(v149 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v142 = *((_QWORD *)&v149 + 1);
  support::fs::getFilteredFiles((const char *)&v143, (uint64_t)&v137, (uint64_t)&v153, 0);
  v36 = v141;
  if (!v141)
    goto LABEL_45;
  p_shared_owners = (unint64_t *)&v141->__shared_owners_;
  do
    v38 = __ldaxr(p_shared_owners);
  while (__stlxr(v38 - 1, p_shared_owners));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
    std::locale::~locale(&v137);
    if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_46:
      v40 = (std::sub_match<const char *> *)v153;
      v39 = v154;
      if (v153 == v154)
        goto LABEL_222;
      goto LABEL_50;
    }
  }
  else
  {
LABEL_45:
    std::locale::~locale(&v137);
    if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_46;
  }
  operator delete(v143.__r_.__value_.__l.__data_);
  v40 = (std::sub_match<const char *> *)v153;
  v39 = v154;
  if (v153 != v154)
  {
LABEL_50:
    v134 = v39;
    while (1)
    {
      *(_QWORD *)&v41 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v41 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v170 = v41;
      v167 = 0xAAAAAAAAAAAAAA00;
      *(_QWORD *)&__dst[40] = 0xAAAAAAAAAAAAAAAALL;
      v165 = 0;
      v166 = 0;
      v168 = 0;
      v169 = 0;
      LOBYTE(v170) = 0;
      BYTE8(v170) = 0;
      v171 = 0;
      memset(__dst, 0, 41);
      v162 = v41;
      v159 = 0xAAAAAAAAAAAAAA00;
      *(_QWORD *)&__p[40] = 0xAAAAAAAAAAAAAAAALL;
      v157 = 0;
      v158 = 0;
      v160 = 0;
      v161 = 0;
      LOBYTE(v162) = 0;
      BYTE8(v162) = 0;
      v163 = 0;
      memset(__p, 0, 41);
      second = (const char *)*((unsigned __int8 *)&v40->matched + 7);
      if ((char)second >= 0)
        first = v40;
      else
        first = (std::sub_match<const char *> *)v40->first;
      if ((char)second < 0)
        second = v40->second;
      v44 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v144, first, (std::sub_match<const char *> *)&second[(_QWORD)first], (std::vector<std::csub_match> *)__p, 0);
      v45 = (const char *)*((unsigned __int8 *)&v40->matched + 7);
      if ((char)v45 >= 0)
        v46 = (uint64_t)v40;
      else
        v46 = (uint64_t)v40->first;
      if ((char)v45 < 0)
        v45 = v40->second;
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__dst, v46, (std::sub_match<std::__wrap_iter<const char *>> *)&v45[v46], (uint64_t *)__p, 0);
      if (*(_QWORD *)__p)
      {
        *(_QWORD *)&__p[8] = *(_QWORD *)__p;
        operator delete(*(void **)__p);
      }
      if (!v44)
        goto LABEL_220;
      v47 = *(_QWORD *)&__dst[8] == *(_QWORD *)__dst ? &__dst[40] : (_BYTE *)(*(_QWORD *)__dst + 16);
      if (*v47)
        break;
      v60 = 0;
      v61 = 0;
      v62 = 0;
      v135[0] = 0;
      v135[1] = 0;
      v136 = 0;
LABEL_90:
      if ((v62 & 0x80u) == 0)
        v66 = (uint64_t *)v135;
      else
        v66 = v61;
      if ((v62 & 0x80u) == 0)
        v67 = v62;
      else
        v67 = (unint64_t)v60;
      v68 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)__p, v66, v67);
      v69 = v68;
      v70 = *((_QWORD *)&v150 + 1);
      if (!*((_QWORD *)&v150 + 1))
      {
        v72 = 0xAAAAAAAAAAAAAAAALL;
LABEL_146:
        *(_QWORD *)&__p[16] = 0xAAAAAAAAAAAAAA01;
        v91 = operator new(0x28uLL);
        *(_QWORD *)__p = v91;
        *(_QWORD *)&__p[8] = &v151;
        *v91 = 0;
        v91[1] = v69;
        *((_OWORD *)v91 + 1) = *(_OWORD *)v135;
        v91[4] = v136;
        v135[0] = 0;
        v135[1] = 0;
        v136 = 0;
        v92 = (float)(unint64_t)(*((_QWORD *)&v151 + 1) + 1);
        if (v70 && (float)(*(float *)&v152 * (float)v70) >= v92)
        {
          v39 = v134;
          v93 = v150;
          v94 = *(_QWORD **)(v150 + 8 * v72);
          if (v94)
            goto LABEL_149;
LABEL_198:
          *v91 = v151;
          *(_QWORD *)&v151 = v91;
          *(_QWORD *)(v93 + 8 * v72) = &v151;
          if (*v91)
          {
            v115 = *(_QWORD *)(*v91 + 8);
            if ((v70 & (v70 - 1)) != 0)
            {
              if (v115 >= v70)
                v115 %= v70;
            }
            else
            {
              v115 &= v70 - 1;
            }
            v94 = (_QWORD *)(v150 + 8 * v115);
LABEL_217:
            *v94 = v91;
          }
          ++*((_QWORD *)&v151 + 1);
          if (v136 < 0)
            goto LABEL_219;
          goto LABEL_220;
        }
        v95 = (v70 & (v70 - 1)) != 0;
        if (v70 < 3)
          v95 = 1;
        v96 = v95 | (2 * v70);
        v97 = vcvtps_u32_f32(v92 / *(float *)&v152);
        if (v96 <= v97)
          prime = v97;
        else
          prime = v96;
        v39 = v134;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v70 = *((_QWORD *)&v150 + 1);
        }
        if (prime <= v70)
        {
          if (prime >= v70)
            goto LABEL_196;
          v109 = vcvtps_u32_f32((float)*((unint64_t *)&v151 + 1) / *(float *)&v152);
          if (v70 < 3 || (v110 = (uint8x8_t)vcnt_s8((int8x8_t)v70), v110.i16[0] = vaddlv_u8(v110), v110.u32[0] > 1uLL))
          {
            v109 = std::__next_prime(v109);
          }
          else
          {
            v111 = 1 << -(char)__clz(v109 - 1);
            if (v109 >= 2)
              v109 = v111;
          }
          if (prime <= v109)
            prime = v109;
          if (prime < v70)
          {
            if (prime)
              goto LABEL_160;
            v113 = (void *)v150;
            *(_QWORD *)&v150 = 0;
            if (v113)
              operator delete(v113);
            v70 = 0;
            *((_QWORD *)&v150 + 1) = 0;
            v114 = -1;
            goto LABEL_197;
          }
          v70 = *((_QWORD *)&v150 + 1);
          v114 = *((_QWORD *)&v150 + 1) - 1;
          if ((*((_QWORD *)&v150 + 1) & (*((_QWORD *)&v150 + 1) - 1)) == 0)
            goto LABEL_197;
          goto LABEL_209;
        }
LABEL_160:
        if (prime >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v99 = operator new(8 * prime);
        v100 = (void *)v150;
        *(_QWORD *)&v150 = v99;
        if (v100)
          operator delete(v100);
        v101 = 0;
        *((_QWORD *)&v150 + 1) = prime;
        do
          *(_QWORD *)(v150 + 8 * v101++) = 0;
        while (prime != v101);
        v102 = (_QWORD **)v151;
        if (!(_QWORD)v151)
        {
LABEL_208:
          v70 = prime;
          v114 = prime - 1;
          if ((prime & (prime - 1)) == 0)
            goto LABEL_197;
          goto LABEL_209;
        }
        v103 = *(_QWORD *)(v151 + 8);
        v104 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v105 = v103 & v104;
          *(_QWORD *)(v150 + 8 * v105) = &v151;
          for (i = *v102; *v102; i = *v102)
          {
            v107 = i[1] & v104;
            if (v107 == v105)
            {
              v102 = (_QWORD **)i;
            }
            else if (*(_QWORD *)(v150 + 8 * v107))
            {
              *v102 = (_QWORD *)*i;
              v108 = 8 * v107;
              *i = **(_QWORD **)(v150 + v108);
              **(_QWORD **)(v150 + v108) = i;
            }
            else
            {
              *(_QWORD *)(v150 + 8 * v107) = v102;
              v102 = (_QWORD **)i;
              v105 = v107;
            }
          }
          goto LABEL_208;
        }
        if (v103 < prime)
        {
          *(_QWORD *)(v150 + 8 * v103) = &v151;
          v112 = *v102;
          if (*v102)
            goto LABEL_203;
LABEL_195:
          v70 = prime;
LABEL_196:
          v114 = v70 - 1;
          if ((v70 & (v70 - 1)) == 0)
          {
LABEL_197:
            v72 = v114 & v69;
            v93 = v150;
            v94 = *(_QWORD **)(v150 + 8 * (v114 & v69));
            if (!v94)
              goto LABEL_198;
LABEL_149:
            *v91 = *v94;
            goto LABEL_217;
          }
LABEL_209:
          if (v69 >= v70)
          {
            v72 = v69 % v70;
            v93 = v150;
            v94 = *(_QWORD **)(v150 + 8 * (v69 % v70));
            if (!v94)
              goto LABEL_198;
          }
          else
          {
            v72 = v69;
            v93 = v150;
            v94 = *(_QWORD **)(v150 + 8 * v69);
            if (!v94)
              goto LABEL_198;
          }
          goto LABEL_149;
        }
        v103 %= prime;
        *(_QWORD *)(v150 + 8 * v103) = &v151;
        v112 = *v102;
        if (!*v102)
          goto LABEL_195;
        while (1)
        {
LABEL_203:
          v117 = v112[1];
          if (v117 >= prime)
            v117 %= prime;
          if (v117 == v103)
            goto LABEL_202;
          if (*(_QWORD *)(v150 + 8 * v117))
            break;
          *(_QWORD *)(v150 + 8 * v117) = v102;
          v102 = (_QWORD **)v112;
          v112 = (_QWORD *)*v112;
          v103 = v117;
          if (!v112)
            goto LABEL_208;
        }
        *v102 = (_QWORD *)*v112;
        v116 = 8 * v117;
        *v112 = **(_QWORD **)(v150 + v116);
        **(_QWORD **)(v150 + v116) = v112;
        v112 = v102;
LABEL_202:
        v102 = (_QWORD **)v112;
        v112 = (_QWORD *)*v112;
        if (!v112)
          goto LABEL_208;
        goto LABEL_203;
      }
      v71 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v150 + 8));
      v71.i16[0] = vaddlv_u8(v71);
      if (v71.u32[0] > 1uLL)
      {
        v72 = v68;
        if (v68 >= *((_QWORD *)&v150 + 1))
          v72 = v68 % *((_QWORD *)&v150 + 1);
      }
      else
      {
        v72 = (*((_QWORD *)&v150 + 1) - 1) & v68;
      }
      v73 = *(uint64_t ***)(v150 + 8 * v72);
      if (!v73)
        goto LABEL_146;
      v74 = *v73;
      if (!*v73)
        goto LABEL_146;
      v75 = HIBYTE(v136);
      if (v136 >= 0)
        v76 = (void *)HIBYTE(v136);
      else
        v76 = v135[1];
      if (v136 >= 0)
        v77 = v135;
      else
        v77 = (void **)v135[0];
      if (v71.u32[0] >= 2uLL)
      {
        while (1)
        {
          v79 = v74[1];
          if (v79 == v69)
          {
            v80 = *((unsigned __int8 *)v74 + 39);
            if ((v80 & 0x80u) == 0)
              v81 = (void *)*((unsigned __int8 *)v74 + 39);
            else
              v81 = (void *)v74[3];
            if (v81 == v76)
            {
              v82 = (const void **)(v74 + 2);
              if ((v80 & 0x80) != 0)
              {
                if (!memcmp(*v82, v77, v74[3]))
                {
LABEL_128:
                  v39 = v134;
                  if (v75 < 0)
                    goto LABEL_219;
                  goto LABEL_220;
                }
              }
              else
              {
                if (!*((_BYTE *)v74 + 39))
                  goto LABEL_128;
                v83 = v77;
                while (*(unsigned __int8 *)v82 == *(unsigned __int8 *)v83)
                {
                  v82 = (const void **)((char *)v82 + 1);
                  v83 = (void **)((char *)v83 + 1);
                  if (!--v80)
                    goto LABEL_128;
                }
              }
            }
          }
          else
          {
            if (v79 >= v70)
              v79 %= v70;
            if (v79 != v72)
              goto LABEL_146;
          }
          v74 = (uint64_t *)*v74;
          if (!v74)
            goto LABEL_146;
        }
      }
      v78 = *((_QWORD *)&v150 + 1) - 1;
      while (1)
      {
        v84 = v74[1];
        if (v84 != v69)
        {
          if ((v84 & v78) != v72)
            goto LABEL_146;
          goto LABEL_131;
        }
        v85 = *((unsigned __int8 *)v74 + 39);
        v86 = (v85 & 0x80u) == 0 ? (void *)*((unsigned __int8 *)v74 + 39) : (void *)v74[3];
        if (v86 == v76)
          break;
LABEL_131:
        v74 = (uint64_t *)*v74;
        if (!v74)
          goto LABEL_146;
      }
      v87 = (const void **)(v74 + 2);
      if ((v85 & 0x80) == 0)
      {
        if (!*((_BYTE *)v74 + 39))
          goto LABEL_144;
        v88 = v77;
        while (*(unsigned __int8 *)v87 == *(unsigned __int8 *)v88)
        {
          v87 = (const void **)((char *)v87 + 1);
          v88 = (void **)((char *)v88 + 1);
          if (!--v85)
            goto LABEL_144;
        }
        goto LABEL_131;
      }
      v132 = v76;
      v89 = v78;
      v90 = memcmp(*v87, v77, v74[3]);
      v78 = v89;
      v76 = v132;
      if (v90)
        goto LABEL_131;
LABEL_144:
      v39 = v134;
      if (v75 < 0)
LABEL_219:
        operator delete(v135[0]);
LABEL_220:
      if (*(_QWORD *)__dst)
      {
        *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
        operator delete(*(void **)__dst);
      }
      if (++v40 == v39)
        goto LABEL_222;
    }
    v48 = (uint64_t *)&__dst[24];
    if (*(_QWORD *)&__dst[8] != *(_QWORD *)__dst)
      v48 = *(uint64_t **)__dst;
    v49 = *v48;
    v50 = (char **)(*(_QWORD *)__dst + 8);
    if (*(_QWORD *)&__dst[8] == *(_QWORD *)__dst)
      v50 = (char **)&__dst[32];
    v51 = *v50;
    v52 = (unint64_t)&(*v50)[-v49];
    if (v52 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v52 > 0x16)
    {
      v63 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v52 | 7) != 0x17)
        v63 = v52 | 7;
      v64 = v63 + 1;
      v53 = operator new(v63 + 1);
      v135[1] = (void *)v52;
      v136 = v64 | 0x8000000000000000;
      v135[0] = v53;
      if ((char *)v49 != v51)
        goto LABEL_76;
    }
    else
    {
      HIBYTE(v136) = *(_BYTE *)v50 - v49;
      v53 = v135;
      if ((char *)v49 != v51)
      {
LABEL_76:
        if (v52 < 0x20 || (unint64_t)v53 - v49 < 0x20)
        {
          v54 = v53;
          v55 = (char *)v49;
        }
        else
        {
          v54 = (char *)v53 + (v52 & 0xFFFFFFFFFFFFFFE0);
          v55 = (char *)(v49 + (v52 & 0xFFFFFFFFFFFFFFE0));
          v56 = (__int128 *)(v49 + 16);
          v57 = v53 + 1;
          v58 = v52 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v59 = *v56;
            *(v57 - 1) = *(v56 - 1);
            *v57 = v59;
            v56 += 2;
            v57 += 2;
            v58 -= 32;
          }
          while (v58);
          if (v52 == (v52 & 0x7FFFFFFFFFFFFFE0))
            goto LABEL_89;
        }
        do
        {
          v65 = *v55++;
          *v54++ = v65;
        }
        while (v55 != v51);
LABEL_89:
        *v54 = 0;
        v62 = HIBYTE(v136);
        v61 = (uint64_t *)v135[0];
        v60 = v135[1];
        goto LABEL_90;
      }
    }
    v54 = v53;
    goto LABEL_89;
  }
LABEL_222:
  v118 = *((_QWORD *)&v151 + 1);
  v119 = (std::__shared_weak_count *)v147;
  if ((_QWORD)v147)
  {
    v120 = (unint64_t *)(v147 + 8);
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  std::locale::~locale(v144);
  v122 = (std::__shared_weak_count *)v149;
  if ((_QWORD)v149)
  {
    v123 = (unint64_t *)(v149 + 8);
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  std::locale::~locale((std::locale *)v148);
  operator delete(v133);
  v125 = (void **)v151;
  if ((_QWORD)v151)
  {
    do
    {
      v131 = (void **)*v125;
      if (*((char *)v125 + 39) < 0)
        operator delete(v125[2]);
      operator delete(v125);
      v125 = v131;
    }
    while (v131);
  }
  v126 = (void *)v150;
  *(_QWORD *)&v150 = 0;
  if (v126)
    operator delete(v126);
  v127 = (void **)v153;
  if (v153)
  {
    v128 = (void **)v154;
    v129 = v153;
    if (v154 != v153)
    {
      do
      {
        if (*((char *)v128 - 1) < 0)
          operator delete(*(v128 - 3));
        v128 -= 3;
      }
      while (v128 != v127);
      v129 = v153;
    }
    v154 = (std::sub_match<const char *> *)v127;
    operator delete(v129);
  }
  return v118;
}

void sub_1BF50624C(_Unwind_Exception *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  operator delete(v2);
  std::unordered_set<std::string>::~unordered_set[abi:ne180100](&v3);
  std::vector<std::string>::~vector[abi:ne180100](&v4);
  _Unwind_Resume(a1);
}

void sub_1BF506254()
{
  __cxa_end_catch();
  JUMPOUT(0x1BF50625CLL);
}

void sub_1BF50627C(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF506284);
  JUMPOUT(0x1BF506124);
}

uint64_t std::unordered_set<std::string>::~unordered_set[abi:ne180100](uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t util::compareTwoStringsWithPattern(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  std::sub_match<const char *> *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  std::vector<std::ssub_match>::pointer begin;
  std::vector<std::ssub_match>::pointer end;
  __int128 v14;
  std::__wrap_iter<const char *>::iterator_type v15;
  std::__wrap_iter<const char *>::iterator_type i;
  unint64_t v17;
  std::sub_match<const char *> *v18;
  std::sub_match<const char *> *v19;
  _BYTE *v20;
  __int128 *v21;
  BOOL *p_matched;
  unint64_t v23;
  __int128 v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char *v29;
  char *v30;
  char *v31;
  void **v32;
  __int128 v33;
  uint64_t v34;
  std::sub_match<const char *> *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  std::vector<std::ssub_match>::pointer v39;
  std::vector<std::ssub_match>::pointer v40;
  __int128 v41;
  std::__wrap_iter<const char *>::iterator_type v42;
  std::__wrap_iter<const char *>::iterator_type v43;
  unint64_t v44;
  std::sub_match<const char *> *v45;
  std::sub_match<const char *> *v46;
  _BYTE *v47;
  __int128 *v48;
  BOOL *v49;
  unint64_t v50;
  __int128 v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  void **v62;
  char *v63;
  char *v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  char *v70;
  uint64_t v71;
  char *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  void *__p;
  char *v77;
  unint64_t v78;
  void *v79;
  char *v80;
  unint64_t v81;
  std::locale v82[2];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  std::vector<std::ssub_match> v86[2];
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  std::vector<std::csub_match> v94[2];
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;

  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v89 = 0xAAAAAAAAAAAAAA00;
  v86[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
  v92 = v5;
  v87 = 0;
  v88 = 0;
  v90 = 0;
  v91 = 0;
  LOBYTE(v92) = 0;
  BYTE8(v92) = 0;
  v93 = 0;
  memset(v86, 0, 41);
  v84 = v5;
  v85 = v5;
  *(_OWORD *)&v82[0].__locale_ = v5;
  v83 = v5;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v82, a3, 0);
  v79 = 0;
  v80 = 0;
  v81 = 0;
  __p = 0;
  v77 = 0;
  v78 = 0;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v97 = 0xAAAAAAAAAAAAAA00;
  v94[1].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAAAALL;
  v100 = v6;
  v95 = 0;
  v96 = 0;
  v98 = 0;
  v99 = 0;
  LOBYTE(v100) = 0;
  BYTE8(v100) = 0;
  v101 = 0;
  memset(v94, 0, 32);
  v7 = *(unsigned __int8 *)(a1 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (std::sub_match<const char *> *)a1;
  else
    v8 = *(std::sub_match<const char *> **)a1;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)((char *)&v94[1].__begin_ + 1) = 0uLL;
  v9 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v82, v8, (std::sub_match<const char *> *)((char *)v8 + v7), v94, 0);
  v10 = *(unsigned __int8 *)(a1 + 23);
  if ((v10 & 0x80u) == 0)
    v11 = a1;
  else
    v11 = *(_QWORD *)a1;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a1 + 8);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v86, v11, (std::sub_match<std::__wrap_iter<const char *>> *)(v11 + v10), (uint64_t *)v94, 0);
  if (v94[0].__begin_)
  {
    v94[0].__end_ = v94[0].__begin_;
    operator delete(v94[0].__begin_);
  }
  if (v9)
  {
    end = v86[0].__end_;
    begin = v86[0].__begin_;
    if (v86[0].__begin_ != v86[0].__end_)
    {
      while (1)
      {
        if (!begin->matched)
        {
          memset(v94, 0, 24);
          v25 = v80;
          if ((unint64_t)v80 >= v81)
            goto LABEL_38;
          goto LABEL_16;
        }
        i = begin->first.__i_;
        v15 = begin->second.__i_;
        v17 = v15 - begin->first.__i_;
        if (v17 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v17 > 0x16)
        {
          v26 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17)
            v26 = v17 | 7;
          v27 = v26 + 1;
          v18 = (std::sub_match<const char *> *)operator new(v26 + 1);
          v94[0].__end_ = (std::vector<std::csub_match>::pointer)v17;
          v94[0].__end_cap_.__value_ = (std::sub_match<const char *> *)(v27 | 0x8000000000000000);
          v94[0].__begin_ = v18;
          if (i == v15)
          {
LABEL_33:
            LOBYTE(v18->first) = 0;
            v25 = v80;
            if ((unint64_t)v80 >= v81)
              goto LABEL_38;
            goto LABEL_16;
          }
        }
        else
        {
          HIBYTE(v94[0].__end_cap_.__value_) = (_BYTE)v15 - LOBYTE(begin->first.__i_);
          v18 = (std::sub_match<const char *> *)v94;
          if (i == v15)
            goto LABEL_33;
        }
        if (v17 < 0x20 || (unint64_t)((char *)v18 - i) < 0x20)
          break;
        v19 = (std::sub_match<const char *> *)((char *)v18 + (v17 & 0xFFFFFFFFFFFFFFE0));
        v20 = &i[v17 & 0xFFFFFFFFFFFFFFE0];
        v21 = (__int128 *)(i + 16);
        p_matched = &v18->matched;
        v23 = v17 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v24 = *v21;
          *((_OWORD *)p_matched - 1) = *(v21 - 1);
          *(_OWORD *)p_matched = v24;
          v21 += 2;
          p_matched += 32;
          v23 -= 32;
        }
        while (v23);
        if (v17 != (v17 & 0x7FFFFFFFFFFFFFE0))
          goto LABEL_36;
LABEL_37:
        LOBYTE(v19->first) = 0;
        v25 = v80;
        if ((unint64_t)v80 >= v81)
        {
LABEL_38:
          v80 = std::vector<std::string>::__push_back_slow_path<std::string>(&v79, (uint64_t)v94);
          if (SHIBYTE(v94[0].__end_cap_.__value_) < 0)
            operator delete(v94[0].__begin_);
          goto LABEL_17;
        }
LABEL_16:
        v14 = *(_OWORD *)&v94[0].__begin_;
        *((_QWORD *)v25 + 2) = v94[0].__end_cap_.__value_;
        *(_OWORD *)v25 = v14;
        v80 = v25 + 24;
LABEL_17:
        if (++begin == end)
          goto LABEL_40;
      }
      v19 = v18;
      v20 = i;
      do
      {
LABEL_36:
        v28 = *v20++;
        LOBYTE(v19->first) = v28;
        v19 = (std::sub_match<const char *> *)((char *)v19 + 1);
      }
      while (v20 != v15);
      goto LABEL_37;
    }
LABEL_40:
    v29 = (char *)v79;
    v30 = v80;
    if (v80 - (_BYTE *)v79 != 24)
    {
      if ((char *)v79 + 24 != v80)
      {
        v31 = (char *)v79 + 23;
        do
        {
          v32 = (void **)(v31 - 23);
          if (*v31 < 0)
            operator delete(*v32);
          *(_OWORD *)v32 = *(_OWORD *)(v31 + 1);
          *(_QWORD *)(v31 - 7) = *(_QWORD *)(v31 + 17);
          v31[24] = 0;
          v31 += 24;
          *(v31 - 23) = 0;
          v29 += 24;
        }
        while (v31 + 1 != v30);
        v30 = v80;
      }
      while (v30 != v29)
      {
        if (*(v30 - 1) < 0)
          operator delete(*((void **)v30 - 3));
        v30 -= 24;
      }
      v80 = v29;
    }
    *(_QWORD *)&v33 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v33 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v97 = 0xAAAAAAAAAAAAAA00;
    v94[1].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAAAALL;
    v100 = v33;
    v95 = 0;
    v96 = 0;
    v98 = 0;
    v99 = 0;
    LOBYTE(v100) = 0;
    BYTE8(v100) = 0;
    v101 = 0;
    memset(v94, 0, 32);
    v34 = *(unsigned __int8 *)(a2 + 23);
    if ((v34 & 0x80u) == 0)
      v35 = (std::sub_match<const char *> *)a2;
    else
      v35 = *(std::sub_match<const char *> **)a2;
    if ((v34 & 0x80u) != 0)
      v34 = *(_QWORD *)(a2 + 8);
    *(_OWORD *)((char *)&v94[1].__begin_ + 1) = 0uLL;
    v36 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v82, v35, (std::sub_match<const char *> *)((char *)v35 + v34), v94, 0);
    v37 = *(unsigned __int8 *)(a2 + 23);
    if ((v37 & 0x80u) == 0)
      v38 = a2;
    else
      v38 = *(_QWORD *)a2;
    if ((v37 & 0x80u) != 0)
      v37 = *(_QWORD *)(a2 + 8);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v86, v38, (std::sub_match<std::__wrap_iter<const char *>> *)(v38 + v37), (uint64_t *)v94, 0);
    if (v94[0].__begin_)
    {
      v94[0].__end_ = v94[0].__begin_;
      operator delete(v94[0].__begin_);
    }
    if (v36)
    {
      v40 = v86[0].__end_;
      v39 = v86[0].__begin_;
      if (v86[0].__begin_ != v86[0].__end_)
      {
        while (1)
        {
          if (!v39->matched)
          {
            memset(v94, 0, 24);
            v52 = v77;
            if ((unint64_t)v77 >= v78)
              goto LABEL_89;
            goto LABEL_67;
          }
          v43 = v39->first.__i_;
          v42 = v39->second.__i_;
          v44 = v42 - v39->first.__i_;
          if (v44 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v44 > 0x16)
          {
            v53 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v44 | 7) != 0x17)
              v53 = v44 | 7;
            v54 = v53 + 1;
            v45 = (std::sub_match<const char *> *)operator new(v53 + 1);
            v94[0].__end_ = (std::vector<std::csub_match>::pointer)v44;
            v94[0].__end_cap_.__value_ = (std::sub_match<const char *> *)(v54 | 0x8000000000000000);
            v94[0].__begin_ = v45;
            if (v43 == v42)
            {
LABEL_84:
              LOBYTE(v45->first) = 0;
              v52 = v77;
              if ((unint64_t)v77 >= v78)
                goto LABEL_89;
              goto LABEL_67;
            }
          }
          else
          {
            HIBYTE(v94[0].__end_cap_.__value_) = (_BYTE)v42 - LOBYTE(v39->first.__i_);
            v45 = (std::sub_match<const char *> *)v94;
            if (v43 == v42)
              goto LABEL_84;
          }
          if (v44 < 0x20 || (unint64_t)((char *)v45 - v43) < 0x20)
            break;
          v46 = (std::sub_match<const char *> *)((char *)v45 + (v44 & 0xFFFFFFFFFFFFFFE0));
          v47 = &v43[v44 & 0xFFFFFFFFFFFFFFE0];
          v48 = (__int128 *)(v43 + 16);
          v49 = &v45->matched;
          v50 = v44 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v51 = *v48;
            *((_OWORD *)v49 - 1) = *(v48 - 1);
            *(_OWORD *)v49 = v51;
            v48 += 2;
            v49 += 32;
            v50 -= 32;
          }
          while (v50);
          if (v44 != (v44 & 0x7FFFFFFFFFFFFFE0))
            goto LABEL_87;
LABEL_88:
          LOBYTE(v46->first) = 0;
          v52 = v77;
          if ((unint64_t)v77 >= v78)
          {
LABEL_89:
            v77 = std::vector<std::string>::__push_back_slow_path<std::string>(&__p, (uint64_t)v94);
            if (SHIBYTE(v94[0].__end_cap_.__value_) < 0)
              operator delete(v94[0].__begin_);
            goto LABEL_68;
          }
LABEL_67:
          v41 = *(_OWORD *)&v94[0].__begin_;
          *((_QWORD *)v52 + 2) = v94[0].__end_cap_.__value_;
          *(_OWORD *)v52 = v41;
          v77 = v52 + 24;
LABEL_68:
          if (++v39 == v40)
            goto LABEL_91;
        }
        v46 = v45;
        v47 = v43;
        do
        {
LABEL_87:
          v55 = *v47++;
          LOBYTE(v46->first) = v55;
          v46 = (std::sub_match<const char *> *)((char *)v46 + 1);
        }
        while (v47 != v42);
        goto LABEL_88;
      }
LABEL_91:
      v57 = (char *)__p;
      v56 = v77;
      if (v77 - (_BYTE *)__p == 24)
      {
        v58 = (char *)v79;
        v59 = v80;
        v60 = 1;
        if (v79 != v80)
          goto LABEL_117;
LABEL_105:
        if (v57)
          goto LABEL_106;
LABEL_134:
        v64 = (char *)v79;
        if (v79)
          goto LABEL_135;
        goto LABEL_108;
      }
      if ((char *)__p + 24 != v77)
      {
        v61 = (char *)__p + 23;
        do
        {
          v62 = (void **)(v61 - 23);
          if (*v61 < 0)
            operator delete(*v62);
          *(_OWORD *)v62 = *(_OWORD *)(v61 + 1);
          *(_QWORD *)(v61 - 7) = *(_QWORD *)(v61 + 17);
          v61[24] = 0;
          v61 += 24;
          *(v61 - 23) = 0;
          v57 += 24;
        }
        while (v61 + 1 != v56);
        v56 = v77;
      }
      while (v56 != v57)
      {
        if (*(v56 - 1) < 0)
          operator delete(*((void **)v56 - 3));
        v56 -= 24;
      }
      v77 = v57;
      v57 = (char *)__p;
      v58 = (char *)v79;
      v59 = v80;
      v60 = 1;
      if (v79 == v80)
        goto LABEL_105;
      while (1)
      {
LABEL_117:
        v66 = v58[23];
        if ((v66 & 0x80u) == 0)
          v67 = v58[23];
        else
          v67 = *((_QWORD *)v58 + 1);
        v68 = v57[23];
        v69 = (char)v68;
        if ((v68 & 0x80u) != 0)
          v68 = *((_QWORD *)v57 + 1);
        if (v67 != v68)
          break;
        if (v69 >= 0)
          v70 = v57;
        else
          v70 = *(char **)v57;
        if ((v66 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v58, v70, *((_QWORD *)v58 + 1)))
            break;
        }
        else if (v58[23])
        {
          v71 = 0;
          while (v58[v71] == v70[v71])
          {
            if (v66 == ++v71)
              goto LABEL_116;
          }
          break;
        }
LABEL_116:
        v58 += 24;
        v57 += 24;
        if (v58 == v59)
          goto LABEL_133;
      }
    }
  }
  v60 = 0;
LABEL_133:
  v57 = (char *)__p;
  if (!__p)
    goto LABEL_134;
LABEL_106:
  v63 = v77;
  if (v77 != v57)
  {
    do
    {
      if (*(v63 - 1) < 0)
        operator delete(*((void **)v63 - 3));
      v63 -= 24;
    }
    while (v63 != v57);
    v77 = v57;
    operator delete(__p);
    v64 = (char *)v79;
    if (v79)
      goto LABEL_135;
LABEL_108:
    v65 = (std::__shared_weak_count *)v85;
    if (!(_QWORD)v85)
      goto LABEL_146;
    goto LABEL_142;
  }
  v77 = v57;
  operator delete(v57);
  v64 = (char *)v79;
  if (!v79)
    goto LABEL_108;
LABEL_135:
  v72 = v80;
  if (v80 == v64)
  {
    v80 = v64;
    operator delete(v64);
    v65 = (std::__shared_weak_count *)v85;
    if (!(_QWORD)v85)
      goto LABEL_146;
    goto LABEL_142;
  }
  do
  {
    if (*(v72 - 1) < 0)
      operator delete(*((void **)v72 - 3));
    v72 -= 24;
  }
  while (v72 != v64);
  v80 = v64;
  operator delete(v79);
  v65 = (std::__shared_weak_count *)v85;
  if ((_QWORD)v85)
  {
LABEL_142:
    p_shared_owners = (unint64_t *)&v65->__shared_owners_;
    do
      v74 = __ldaxr(p_shared_owners);
    while (__stlxr(v74 - 1, p_shared_owners));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
LABEL_146:
  std::locale::~locale(v82);
  if (v86[0].__begin_)
  {
    v86[0].__end_ = v86[0].__begin_;
    operator delete(v86[0].__begin_);
  }
  return v60;
}

void sub_1BF506ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  uint64_t v24;
  void *v26;

  v26 = *(void **)(v24 - 192);
  if (v26)
  {
    *(_QWORD *)(v24 - 184) = v26;
    operator delete(v26);
  }
  std::vector<std::string>::~vector[abi:ne180100]((void **)&a9);
  std::vector<std::string>::~vector[abi:ne180100](&a12);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a15);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 std::__introsort<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*,false>(uint64_t a1, const void **a2, uint64_t a3, char a4, __n128 result)
{
  unint64_t j;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  int v17;
  const void *v18;
  size_t v19;
  int v20;
  const void *v21;
  size_t v22;
  size_t v23;
  int v24;
  uint64_t v25;
  __n128 v26;
  __n128 *v27;
  size_t v28;
  const void *v29;
  int v30;
  const void *v31;
  size_t v32;
  size_t v33;
  int v34;
  unint64_t v35;
  const void **v36;
  const void **v37;
  const void **v38;
  const void *v39;
  const void **v40;
  size_t v41;
  size_t v42;
  int v43;
  const void *v44;
  const void **v45;
  size_t v46;
  size_t v47;
  int v48;
  const void **v49;
  __int128 v50;
  __int128 v51;
  __n128 *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  const void *v56;
  unint64_t v57;
  size_t v58;
  int v59;
  const void **v60;
  const void *v61;
  const void **v62;
  unint64_t v63;
  size_t v64;
  int v65;
  __n128 *v66;
  __n128 v67;
  __n128 v68;
  BOOL v69;
  __n128 v70;
  const void **v71;
  __n128 *v72;
  size_t v73;
  size_t v74;
  const void *v75;
  const void **v76;
  const void **v77;
  size_t v78;
  size_t v79;
  int v80;
  unint64_t v81;
  uint64_t v82;
  const void *v83;
  size_t v84;
  size_t v85;
  int v86;
  const void **k;
  const void **v88;
  const void **v89;
  size_t v90;
  size_t v91;
  int v92;
  const void *v93;
  __int128 v94;
  __int128 v95;
  __n128 *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  const void *v100;
  unint64_t v101;
  size_t v102;
  int v103;
  const void **v104;
  const void *v105;
  const void **v106;
  const void *v107;
  size_t v108;
  int v109;
  __n128 *v110;
  __n128 v111;
  int v112;
  const void *v113;
  size_t v114;
  size_t v115;
  int v116;
  __n128 *v117;
  int v118;
  const void **v119;
  size_t v120;
  int v121;
  void *v122;
  const void *v123;
  const void *v124;
  size_t v125;
  size_t v126;
  int v127;
  const void *v128;
  uint64_t v129;
  uint64_t v130;
  __n128 *v131;
  __n128 *v132;
  int v133;
  const void *v134;
  size_t v135;
  int v136;
  __n128 *v137;
  size_t v138;
  size_t v139;
  int v140;
  __n128 v141;
  __n128 *v142;
  size_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  const void *v147;
  size_t v148;
  size_t v149;
  int v150;
  int64_t v151;
  int64_t v152;
  const void **v153;
  int64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  const void **v158;
  int v159;
  const void *v160;
  unint64_t v161;
  int v162;
  const void *v163;
  unint64_t v164;
  size_t v165;
  int v166;
  BOOL v167;
  uint64_t v168;
  int v169;
  const void *v170;
  size_t v171;
  int v172;
  const void *v173;
  size_t v174;
  size_t v175;
  int v176;
  BOOL v177;
  __n128 v178;
  __int128 v179;
  unint64_t v180;
  __n128 *v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  const void *v186;
  unint64_t v187;
  int v188;
  const void *v189;
  unint64_t v190;
  size_t v191;
  int v192;
  BOOL v193;
  int v194;
  const void *v195;
  size_t v196;
  size_t v197;
  int v198;
  int64_t v199;
  uint64_t v200;
  uint64_t v201;
  __n128 *v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  const void *v206;
  size_t v207;
  int v208;
  const void *v209;
  size_t v210;
  size_t v211;
  int v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  int v217;
  const void *v218;
  size_t v219;
  int v220;
  __n128 *v221;
  size_t v222;
  size_t v223;
  int v224;
  __n128 v225;
  __n128 *v226;
  size_t v227;
  __n128 v228;
  __int128 v229;
  unint64_t v230;
  uint64_t v231;
  int v232;
  const void *v233;
  size_t v234;
  size_t v235;
  int v236;
  const void *v237;
  const void **v238;
  int v239;
  const void *v240;
  size_t v241;
  int v242;
  const void *v243;
  size_t v244;
  size_t v245;
  int v246;
  __n128 v247;
  __n128 *v248;
  size_t v249;
  uint64_t i;
  int v251;
  const void *v252;
  size_t v253;
  size_t v254;
  int v255;
  const void *v256;
  uint64_t v257;
  const void **v258;
  const void **v259;
  size_t v261;
  const void *v262;
  uint64_t v263;
  __n128 *v264;
  const void *v265;
  const void **v266;
  int64_t v267;
  const void *v268;
  const void **v269;
  const void **v270;
  __n128 v271;
  int64_t v272;

LABEL_1:
  v266 = a2 - 3;
  v269 = a2;
  v258 = a2 - 9;
  v259 = a2 - 6;
  j = a1;
  while (2)
  {
    a1 = j;
    v9 = (uint64_t)a2 - j;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - j) >> 3);
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v117 = (__n128 *)(a2 - 3);
        v118 = *((char *)a2 - 1);
        if (v118 >= 0)
          v119 = a2 - 3;
        else
          v119 = (const void **)*(a2 - 3);
        if (v118 >= 0)
          v120 = *((unsigned __int8 *)a2 - 1);
        else
          v120 = (size_t)*(a2 - 2);
        v121 = *(char *)(a1 + 23);
        v122 = *(void **)a1;
        v123 = *(const void **)(a1 + 8);
        if (v121 >= 0)
          v124 = (const void *)a1;
        else
          v124 = *(const void **)a1;
        if (v121 >= 0)
          v125 = *(unsigned __int8 *)(a1 + 23);
        else
          v125 = *(_QWORD *)(a1 + 8);
        if (v125 >= v120)
          v126 = v120;
        else
          v126 = v125;
        v127 = memcmp(v119, v124, v126);
        if (v127)
        {
          if (v127 < 0)
            return result;
        }
        else if (v120 <= v125)
        {
          return result;
        }
        v256 = *(const void **)(a1 + 16);
        v257 = (uint64_t)*(a2 - 1);
        result = *v117;
        *(__n128 *)a1 = *v117;
        *(_QWORD *)(a1 + 16) = v257;
        *(a2 - 3) = v122;
        *(a2 - 2) = v123;
        *(a2 - 1) = v256;
        return result;
      case 3uLL:
        result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, v266).n128_u64[0];
        return result;
      case 4uLL:
        result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, v266).n128_u64[0];
        return result;
      case 5uLL:
        result.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, a1 + 72, v266).n128_u64[0];
        return result;
      default:
        if (v9 <= 575)
        {
          if ((a4 & 1) != 0)
          {
            if ((const void **)a1 == a2)
              return result;
            v128 = (const void *)(a1 + 24);
            if ((const void **)(a1 + 24) == a2)
              return result;
            v129 = 0;
            v130 = a1;
            while (1)
            {
              v132 = (__n128 *)v130;
              v130 = (uint64_t)v128;
              v133 = v132[2].n128_i8[15];
              if (v133 >= 0)
                v134 = v128;
              else
                v134 = (const void *)v132[1].n128_u64[1];
              if (v133 >= 0)
                v135 = v132[2].n128_u8[15];
              else
                v135 = v132[2].n128_u64[0];
              v136 = v132[1].n128_i8[7];
              if (v136 >= 0)
                v137 = v132;
              else
                v137 = (__n128 *)v132->n128_u64[0];
              if (v136 >= 0)
                v138 = v132[1].n128_u8[7];
              else
                v138 = v132->n128_u64[1];
              if (v138 >= v135)
                v139 = v135;
              else
                v139 = v138;
              v140 = memcmp(v134, v137, v139);
              if (v140)
              {
                if (v140 < 0)
                  goto LABEL_259;
              }
              else if (v135 <= v138)
              {
                goto LABEL_259;
              }
              v141 = *(__n128 *)v130;
              v272 = *(_QWORD *)(v130 + 16);
              v271 = v141;
              if (v272 >= 0)
                v142 = &v271;
              else
                v142 = (__n128 *)v141.n128_u64[0];
              if (v272 >= 0)
                v143 = HIBYTE(v272);
              else
                v143 = v141.n128_u64[1];
              *(_QWORD *)(v130 + 16) = v132[1].n128_u64[0];
              *(__n128 *)v130 = *v132;
              v132[1].n128_u8[7] = 0;
              v132->n128_u8[0] = 0;
              v131 = (__n128 *)a1;
              if (v132 != (__n128 *)a1)
              {
                v144 = v129;
                while (1)
                {
                  v145 = a1 + v144;
                  v146 = *(char *)(a1 + v144 - 1);
                  if (v146 >= 0)
                    v147 = (const void *)(a1 + v144 - 24);
                  else
                    v147 = *(const void **)(a1 + v144 - 24);
                  if (v146 >= 0)
                    v148 = *(unsigned __int8 *)(a1 + v144 - 1);
                  else
                    v148 = *(_QWORD *)(a1 + v144 - 16);
                  if (v148 >= v143)
                    v149 = v143;
                  else
                    v149 = v148;
                  v150 = memcmp(v142, v147, v149);
                  if (v150)
                  {
                    if (v150 < 0)
                    {
                      v131 = (__n128 *)(a1 + v144);
                      break;
                    }
                  }
                  else if (v143 <= v148)
                  {
                    v131 = v132;
                    break;
                  }
                  v132 = (__n128 *)((char *)v132 - 24);
                  *(_OWORD *)v145 = *(_OWORD *)(a1 + v144 - 24);
                  *(_QWORD *)(v145 + 16) = *(_QWORD *)(a1 + v144 - 8);
                  *(_BYTE *)(v145 - 1) = 0;
                  *(_BYTE *)(v145 - 24) = 0;
                  v144 -= 24;
                  if (!v144)
                  {
                    v131 = (__n128 *)a1;
                    break;
                  }
                }
              }
              result = v271;
              v131[1].n128_u64[0] = v272;
              *v131 = result;
LABEL_259:
              v128 = (const void *)(v130 + 24);
              v129 += 24;
              if ((const void **)(v130 + 24) == v269)
                return result;
            }
          }
          if ((const void **)a1 == a2)
            return result;
          v237 = (const void *)(a1 + 24);
          if ((const void **)(a1 + 24) == a2)
            return result;
LABEL_471:
          v238 = (const void **)a1;
          a1 = (uint64_t)v237;
          v239 = *((char *)v238 + 47);
          if (v239 >= 0)
            v240 = v237;
          else
            v240 = v238[3];
          if (v239 >= 0)
            v241 = *((unsigned __int8 *)v238 + 47);
          else
            v241 = (size_t)v238[4];
          v242 = *((char *)v238 + 23);
          if (v242 >= 0)
            v243 = v238;
          else
            v243 = *v238;
          if (v242 >= 0)
            v244 = *((unsigned __int8 *)v238 + 23);
          else
            v244 = (size_t)v238[1];
          if (v244 >= v241)
            v245 = v241;
          else
            v245 = v244;
          v246 = memcmp(v240, v243, v245);
          if (v246)
          {
            if (v246 < 0)
              goto LABEL_470;
          }
          else if (v241 <= v244)
          {
            goto LABEL_470;
          }
          v247 = *(__n128 *)a1;
          v272 = *(_QWORD *)(a1 + 16);
          v271 = v247;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          if (v272 >= 0)
            v248 = &v271;
          else
            v248 = (__n128 *)v271.n128_u64[0];
          if (v272 >= 0)
            v249 = HIBYTE(v272);
          else
            v249 = v271.n128_u64[1];
          for (i = a1; ; i -= 24)
          {
            *(_OWORD *)i = *(_OWORD *)(i - 24);
            *(_QWORD *)(i + 16) = *(_QWORD *)(i - 8);
            *(_BYTE *)(i - 1) = 0;
            *(_BYTE *)(i - 24) = 0;
            v251 = *(char *)(i - 25);
            if (v251 >= 0)
              v252 = (const void *)(i - 48);
            else
              v252 = *(const void **)(i - 48);
            if (v251 >= 0)
              v253 = *(unsigned __int8 *)(i - 25);
            else
              v253 = *(_QWORD *)(i - 40);
            if (v253 >= v249)
              v254 = v249;
            else
              v254 = v253;
            v255 = memcmp(v248, v252, v254);
            if (v255)
            {
              if (v255 < 0)
              {
LABEL_469:
                result = v271;
                *(_QWORD *)(i - 8) = v272;
                *(__n128 *)(i - 24) = result;
LABEL_470:
                v237 = (const void *)(a1 + 24);
                if ((const void **)(a1 + 24) == a2)
                  return result;
                goto LABEL_471;
              }
            }
            else if (v249 <= v253)
            {
              goto LABEL_469;
            }
          }
        }
        if (!a3)
        {
          if ((const void **)a1 == a2)
            return result;
          v151 = (v10 - 2) >> 1;
          v152 = v151;
          while (1)
          {
            v154 = v152;
            if (v151 < v152)
              goto LABEL_306;
            v155 = (2 * v152) | 1;
            v156 = a1 + 24 * v155;
            v157 = 2 * v152 + 2;
            if (v157 >= (uint64_t)v10)
              goto LABEL_330;
            v158 = (const void **)(v156 + 24);
            v159 = *(char *)(v156 + 23);
            v160 = v159 >= 0 ? (const void *)(a1 + 24 * v155) : *(const void **)v156;
            v161 = v159 >= 0 ? *(unsigned __int8 *)(v156 + 23) : *(_QWORD *)(v156 + 8);
            v162 = *(char *)(v156 + 47);
            v163 = v162 >= 0 ? (const void *)(v156 + 24) : *(const void **)(v156 + 24);
            v164 = v162 >= 0 ? *(unsigned __int8 *)(v156 + 47) : *(_QWORD *)(v156 + 32);
            v165 = v164 >= v161 ? v161 : v164;
            v166 = memcmp(v160, v163, v165);
            if (v166)
              break;
            v167 = v161 >= v164;
            if (v161 == v164)
            {
              v158 = (const void **)(a1 + 24 * v155);
              v157 = (2 * v154) | 1;
              a2 = v269;
              goto LABEL_331;
            }
            a2 = v269;
            if (!v167)
              goto LABEL_330;
LABEL_331:
            v168 = a1 + 24 * v154;
            v169 = *((char *)v158 + 23);
            if (v169 >= 0)
              v170 = v158;
            else
              v170 = *v158;
            if (v169 >= 0)
              v171 = *((unsigned __int8 *)v158 + 23);
            else
              v171 = (size_t)v158[1];
            v172 = *(char *)(v168 + 23);
            if (v172 >= 0)
              v173 = (const void *)(a1 + 24 * v154);
            else
              v173 = *(const void **)v168;
            if (v172 >= 0)
              v174 = *(unsigned __int8 *)(v168 + 23);
            else
              v174 = *(_QWORD *)(v168 + 8);
            if (v174 >= v171)
              v175 = v171;
            else
              v175 = v174;
            v176 = memcmp(v170, v173, v175);
            if (v176)
            {
              v151 = (v10 - 2) >> 1;
              if (v176 < 0)
                goto LABEL_350;
            }
            else
            {
              v177 = v171 > v174;
              v151 = (v10 - 2) >> 1;
              if (!v177)
              {
LABEL_350:
                v178 = *(__n128 *)v168;
                v272 = *(_QWORD *)(v168 + 16);
                v271 = v178;
                *(_QWORD *)(v168 + 8) = 0;
                *(_QWORD *)(v168 + 16) = 0;
                *(_QWORD *)v168 = 0;
                v179 = *(_OWORD *)v158;
                *(_QWORD *)(v168 + 16) = v158[2];
                *(_OWORD *)v168 = v179;
                *((_BYTE *)v158 + 23) = 0;
                *(_BYTE *)v158 = 0;
                if (v151 >= v157)
                {
                  v180 = HIBYTE(v272);
                  v181 = &v271;
                  if (v272 < 0)
                  {
                    v180 = v271.n128_u64[1];
                    v181 = (__n128 *)v271.n128_u64[0];
                  }
                  v261 = v180;
                  v264 = v181;
                  v267 = v154;
                  while (1)
                  {
                    v183 = (2 * v157) | 1;
                    v184 = a1 + 24 * v183;
                    v157 = 2 * v157 + 2;
                    if (v157 >= (uint64_t)v10)
                      goto LABEL_378;
                    v153 = (const void **)(v184 + 24);
                    v185 = *(char *)(v184 + 23);
                    v186 = v185 >= 0 ? (const void *)(a1 + 24 * v183) : *(const void **)v184;
                    v187 = v185 >= 0 ? *(unsigned __int8 *)(v184 + 23) : *(_QWORD *)(v184 + 8);
                    v188 = *(char *)(v184 + 47);
                    v189 = v188 >= 0 ? (const void *)(v184 + 24) : *(const void **)(v184 + 24);
                    v190 = v188 >= 0 ? *(unsigned __int8 *)(v184 + 47) : *(_QWORD *)(v184 + 32);
                    v191 = v190 >= v187 ? v187 : v190;
                    v192 = memcmp(v186, v189, v191);
                    if (v192)
                      break;
                    v193 = v187 >= v190;
                    if (v187 == v190)
                    {
                      v153 = (const void **)(a1 + 24 * v183);
                      v157 = v183;
                      a2 = v269;
                      v151 = (v10 - 2) >> 1;
                      goto LABEL_379;
                    }
                    a2 = v269;
                    v151 = (v10 - 2) >> 1;
                    if (!v193)
                      goto LABEL_378;
LABEL_379:
                    v194 = *((char *)v153 + 23);
                    if (v194 >= 0)
                      v195 = v153;
                    else
                      v195 = *v153;
                    if (v194 >= 0)
                      v196 = *((unsigned __int8 *)v153 + 23);
                    else
                      v196 = (size_t)v153[1];
                    if (v261 >= v196)
                      v197 = v196;
                    else
                      v197 = v261;
                    v198 = memcmp(v195, v264, v197);
                    if (v198)
                    {
                      v154 = v267;
                      if ((v198 & 0x80000000) == 0)
                        goto LABEL_304;
                    }
                    else
                    {
                      v154 = v267;
                      if (v196 > v261)
                        goto LABEL_304;
                    }
                    v182 = *(_OWORD *)v153;
                    v158[2] = v153[2];
                    *(_OWORD *)v158 = v182;
                    *((_BYTE *)v153 + 23) = 0;
                    *(_BYTE *)v153 = 0;
                    v158 = v153;
                    if (v151 < v157)
                      goto LABEL_305;
                  }
                  a2 = v269;
                  v151 = (v10 - 2) >> 1;
                  if ((v192 & 0x80000000) == 0)
                    goto LABEL_379;
LABEL_378:
                  v153 = (const void **)(a1 + 24 * v183);
                  v157 = v183;
                  goto LABEL_379;
                }
LABEL_304:
                v153 = v158;
LABEL_305:
                result = v271;
                v153[2] = (const void *)v272;
                *(__n128 *)v153 = result;
              }
            }
LABEL_306:
            v152 = v154 - 1;
            if (!v154)
            {
              v199 = v9 / 0x18uLL;
              while (2)
              {
                if (v199 < 2)
                  goto LABEL_393;
                v200 = 0;
                v268 = *(const void **)a1;
                v270 = a2;
                v262 = *(const void **)(a1 + 16);
                v265 = *(const void **)(a1 + 8);
                *(_QWORD *)(a1 + 8) = 0;
                *(_QWORD *)(a1 + 16) = 0;
                v201 = a1;
                *(_QWORD *)a1 = 0;
LABEL_399:
                v203 = v201 + 24 * v200 + 24;
                v204 = (2 * v200) | 1;
                v200 = 2 * v200 + 2;
                if (v200 >= v199)
                  goto LABEL_397;
                v202 = (__n128 *)(v203 + 24);
                v205 = *(char *)(v203 + 23);
                if (v205 >= 0)
                  v206 = (const void *)v203;
                else
                  v206 = *(const void **)v203;
                if (v205 >= 0)
                  v207 = *(unsigned __int8 *)(v203 + 23);
                else
                  v207 = *(_QWORD *)(v203 + 8);
                v208 = *(char *)(v203 + 47);
                if (v208 >= 0)
                  v209 = (const void *)(v203 + 24);
                else
                  v209 = *(const void **)(v203 + 24);
                if (v208 >= 0)
                  v210 = *(unsigned __int8 *)(v203 + 47);
                else
                  v210 = *(_QWORD *)(v203 + 32);
                if (v210 >= v207)
                  v211 = v207;
                else
                  v211 = v210;
                v212 = memcmp(v206, v209, v211);
                if (v212)
                {
                  if ((v212 & 0x80000000) == 0)
                    goto LABEL_417;
LABEL_397:
                  v202 = (__n128 *)v203;
                  v200 = v204;
                  if ((*(char *)(v201 + 23) & 0x80000000) == 0)
                  {
LABEL_398:
                    result = *v202;
                    *(_QWORD *)(v201 + 16) = v202[1].n128_u64[0];
                    *(__n128 *)v201 = result;
                    v202[1].n128_u8[7] = 0;
                    v202->n128_u8[0] = 0;
                    v201 = (uint64_t)v202;
                    if (v200 > (uint64_t)((unint64_t)(v199 - 2) >> 1))
                    {
                      if (v202 == (__n128 *)(a2 - 3))
                      {
                        v202->n128_u64[0] = (unint64_t)v268;
                        v202->n128_u64[1] = (unint64_t)v265;
                        v202[1].n128_u64[0] = (unint64_t)v262;
                      }
                      else
                      {
                        result = *(__n128 *)(a2 - 3);
                        v202[1].n128_u64[0] = (unint64_t)*(a2 - 1);
                        *v202 = result;
                        *(a2 - 3) = v268;
                        *(a2 - 2) = v265;
                        *(a2 - 1) = v262;
                        v213 = (uint64_t)&v202[1].n128_i64[1] - a1;
                        if (v213 >= 25)
                        {
                          v214 = v213 / 0x18uLL - 2;
                          v215 = v214 >> 1;
                          v216 = a1 + 24 * (v214 >> 1);
                          v217 = *(char *)(v216 + 23);
                          if (v217 >= 0)
                            v218 = (const void *)(a1 + 24 * (v214 >> 1));
                          else
                            v218 = *(const void **)v216;
                          if (v217 >= 0)
                            v219 = *(unsigned __int8 *)(v216 + 23);
                          else
                            v219 = *(_QWORD *)(v216 + 8);
                          v220 = v202[1].n128_i8[7];
                          if (v220 >= 0)
                            v221 = v202;
                          else
                            v221 = (__n128 *)v202->n128_u64[0];
                          if (v220 >= 0)
                            v222 = v202[1].n128_u8[7];
                          else
                            v222 = v202->n128_u64[1];
                          if (v222 >= v219)
                            v223 = v219;
                          else
                            v223 = v222;
                          v224 = memcmp(v218, v221, v223);
                          if (v224)
                          {
                            if (v224 < 0)
                              goto LABEL_393;
LABEL_443:
                            v225 = *v202;
                            v272 = v202[1].n128_i64[0];
                            v271 = v225;
                            v202->n128_u64[1] = 0;
                            v202[1].n128_u64[0] = 0;
                            v202->n128_u64[0] = 0;
                            if (v272 >= 0)
                              v226 = &v271;
                            else
                              v226 = (__n128 *)v271.n128_u64[0];
                            if (v272 >= 0)
                              v227 = HIBYTE(v272);
                            else
                              v227 = v271.n128_u64[1];
                            v228 = *(__n128 *)v216;
                            v202[1].n128_u64[0] = *(_QWORD *)(v216 + 16);
                            *v202 = v228;
                            *(_BYTE *)(v216 + 23) = 0;
                            *(_BYTE *)v216 = 0;
                            if (v214 >= 2)
                            {
                              while (1)
                              {
                                v230 = v215 - 1;
                                v215 = (v215 - 1) >> 1;
                                v231 = a1 + 24 * v215;
                                v232 = *(char *)(v231 + 23);
                                if (v232 >= 0)
                                  v233 = (const void *)(a1 + 24 * v215);
                                else
                                  v233 = *(const void **)v231;
                                if (v232 >= 0)
                                  v234 = *(unsigned __int8 *)(v231 + 23);
                                else
                                  v234 = *(_QWORD *)(v231 + 8);
                                if (v227 >= v234)
                                  v235 = v234;
                                else
                                  v235 = v227;
                                v236 = memcmp(v233, v226, v235);
                                if (v236)
                                {
                                  if (v236 < 0)
                                    break;
                                }
                                else if (v234 <= v227)
                                {
                                  break;
                                }
                                v229 = *(_OWORD *)v231;
                                *(_QWORD *)(v216 + 16) = *(_QWORD *)(v231 + 16);
                                *(_OWORD *)v216 = v229;
                                *(_BYTE *)(v231 + 23) = 0;
                                *(_BYTE *)v231 = 0;
                                v216 = a1 + 24 * v215;
                                if (v230 <= 1)
                                  goto LABEL_465;
                              }
                            }
                            v231 = v216;
LABEL_465:
                            result = v271;
                            *(_QWORD *)(v231 + 16) = v272;
                            *(__n128 *)v231 = result;
                            a2 = v270;
                          }
                          else if (v219 > v222)
                          {
                            goto LABEL_443;
                          }
                        }
                      }
LABEL_393:
                      a2 -= 3;
                      v177 = (unint64_t)v199-- > 2;
                      if (!v177)
                        return result;
                      continue;
                    }
                    goto LABEL_399;
                  }
                }
                else
                {
                  if (v207 == v210 || v207 < v210)
                    goto LABEL_397;
LABEL_417:
                  if ((*(char *)(v201 + 23) & 0x80000000) == 0)
                    goto LABEL_398;
                }
                break;
              }
              operator delete(*(void **)v201);
              goto LABEL_398;
            }
          }
          a2 = v269;
          if ((v166 & 0x80000000) == 0)
            goto LABEL_331;
LABEL_330:
          v158 = (const void **)(a1 + 24 * v155);
          v157 = (2 * v154) | 1;
          goto LABEL_331;
        }
        v11 = v10 >> 1;
        v12 = a1 + 24 * (v10 >> 1);
        if ((unint64_t)v9 < 0xC01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(v12, a1, v266);
          v263 = a3 - 1;
          if ((a4 & 1) != 0)
            goto LABEL_26;
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, v12, v266);
          v13 = 24 * v11;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1 + 24, v13 + a1 - 24, v259);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1 + 48, a1 + 24 + v13, v258);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(v13 + a1 - 24, v12, (const void **)(a1 + 24 + v13));
          v14 = *(void **)a1;
          v15 = *(_OWORD *)(a1 + 8);
          v16 = *(_OWORD *)v12;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v12 + 16);
          *(_OWORD *)a1 = v16;
          *(_QWORD *)v12 = v14;
          *(_OWORD *)(v12 + 8) = v15;
          v263 = a3 - 1;
          if ((a4 & 1) != 0)
            goto LABEL_26;
        }
        v17 = *(char *)(a1 - 1);
        if (v17 >= 0)
          v18 = (const void *)(a1 - 24);
        else
          v18 = *(const void **)(a1 - 24);
        if (v17 >= 0)
          v19 = *(unsigned __int8 *)(a1 - 1);
        else
          v19 = *(_QWORD *)(a1 - 16);
        v20 = *(char *)(a1 + 23);
        if (v20 >= 0)
          v21 = (const void *)a1;
        else
          v21 = *(const void **)a1;
        if (v20 >= 0)
          v22 = *(unsigned __int8 *)(a1 + 23);
        else
          v22 = *(_QWORD *)(a1 + 8);
        if (v22 >= v19)
          v23 = v19;
        else
          v23 = v22;
        v24 = memcmp(v18, v21, v23);
        if (v24)
        {
          if ((v24 & 0x80000000) == 0)
            goto LABEL_26;
LABEL_124:
          v70 = *(__n128 *)a1;
          v272 = *(_QWORD *)(a1 + 16);
          v271 = v70;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          v71 = a2;
          if (v272 >= 0)
            v72 = &v271;
          else
            v72 = (__n128 *)v271.n128_u64[0];
          if (v272 >= 0)
            v73 = HIBYTE(v272);
          else
            v73 = v271.n128_u64[1];
          v74 = *((unsigned __int8 *)v71 - 1);
          v76 = (const void **)*(v71 - 3);
          v75 = *(v71 - 2);
          if ((v74 & 0x80u) == 0)
            v77 = v266;
          else
            v77 = (const void **)*(v71 - 3);
          if ((v74 & 0x80u) == 0)
            v78 = *((unsigned __int8 *)v71 - 1);
          else
            v78 = (size_t)*(v71 - 2);
          if (v78 >= v73)
            v79 = v73;
          else
            v79 = v78;
          v80 = memcmp(v72, v77, v79);
          if (v80)
          {
            if ((v80 & 0x80000000) == 0)
              goto LABEL_141;
          }
          else if (v73 > v78)
          {
LABEL_141:
            v81 = a1 + 24;
            do
            {
              while (1)
              {
                j = v81;
                v82 = *(unsigned __int8 *)(v81 + 23);
                v83 = (v82 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
                v84 = (v82 & 0x80u) == 0 ? v82 : *(_QWORD *)(j + 8);
                v85 = v84 >= v73 ? v73 : v84;
                v86 = memcmp(v72, v83, v85);
                v81 = j + 24;
                if (v86)
                  break;
                if (v73 > v84)
                  goto LABEL_154;
              }
            }
            while (v86 < 0);
            goto LABEL_154;
          }
          for (j = a1 + 24; j < (unint64_t)v269; j += 24)
          {
            v112 = *(char *)(j + 23);
            if (v112 >= 0)
              v113 = (const void *)j;
            else
              v113 = *(const void **)j;
            if (v112 >= 0)
              v114 = *(unsigned __int8 *)(j + 23);
            else
              v114 = *(_QWORD *)(j + 8);
            if (v114 >= v73)
              v115 = v73;
            else
              v115 = v114;
            v116 = memcmp(v72, v113, v115);
            if (v116)
            {
              if ((v116 & 0x80000000) == 0)
                break;
            }
            else if (v73 > v114)
            {
              break;
            }
          }
LABEL_154:
          k = v269;
          if (j < (unint64_t)v269)
          {
            for (k = v266; ; v75 = k[1])
            {
              if ((v74 & 0x80u) == 0)
                v89 = k;
              else
                v89 = v76;
              if ((v74 & 0x80u) == 0)
                v90 = v74;
              else
                v90 = (size_t)v75;
              if (v90 >= v73)
                v91 = v73;
              else
                v91 = v90;
              v92 = memcmp(v72, v89, v91);
              if (v92)
              {
                if (v92 < 0)
                  break;
              }
              else if (v73 <= v90)
              {
                break;
              }
              v88 = (const void **)*(k - 3);
              k -= 3;
              v76 = v88;
              v74 = *((unsigned __int8 *)k + 23);
            }
          }
          if (j < (unint64_t)k)
          {
            v93 = *(const void **)j;
            do
            {
              v94 = *(_OWORD *)(j + 8);
              v95 = *(_OWORD *)k;
              *(_QWORD *)(j + 16) = k[2];
              *(_OWORD *)j = v95;
              *k = v93;
              *(_OWORD *)(k + 1) = v94;
              if (v272 >= 0)
                v96 = &v271;
              else
                v96 = (__n128 *)v271.n128_u64[0];
              if (v272 >= 0)
                v97 = HIBYTE(v272);
              else
                v97 = v271.n128_u64[1];
              v98 = j + 24;
              do
              {
                while (1)
                {
                  j = v98;
                  v99 = *(unsigned __int8 *)(v98 + 23);
                  v93 = *(const void **)j;
                  v100 = (v99 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
                  v101 = (v99 & 0x80u) == 0 ? v99 : *(_QWORD *)(j + 8);
                  v102 = v101 >= v97 ? v97 : v101;
                  v103 = memcmp(v96, v100, v102);
                  v98 = j + 24;
                  if (v103)
                    break;
                  if (v97 > v101)
                    goto LABEL_191;
                }
              }
              while (v103 < 0);
LABEL_191:
              v104 = k - 3;
              do
              {
                while (1)
                {
                  k = v104;
                  v105 = (const void *)*((unsigned __int8 *)v104 + 23);
                  v106 = (char)v105 >= 0 ? k : (const void **)*k;
                  v107 = (char)v105 >= 0 ? v105 : k[1];
                  v108 = (unint64_t)v107 >= v97 ? v97 : (size_t)v107;
                  v109 = memcmp(v96, v106, v108);
                  v104 = k - 3;
                  if (v109)
                    break;
                  if (v97 <= (unint64_t)v107)
                    goto LABEL_171;
                }
              }
              while ((v109 & 0x80000000) == 0);
LABEL_171:
              ;
            }
            while (j < (unint64_t)k);
          }
          v110 = (__n128 *)(j - 24);
          if (j - 24 == a1)
          {
            a2 = v269;
            a3 = v263;
            if (*(char *)(j - 1) < 0)
              operator delete(*(void **)a1);
          }
          else
          {
            if (*(char *)(a1 + 23) < 0)
              operator delete(*(void **)a1);
            v111 = *v110;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(j - 8);
            *(__n128 *)a1 = v111;
            *(_BYTE *)(j - 1) = 0;
            *(_BYTE *)(j - 24) = 0;
            a2 = v269;
            a3 = v263;
          }
          a4 = 0;
          result = v271;
          *(_QWORD *)(j - 8) = v272;
          *v110 = result;
          continue;
        }
        if (v19 <= v22)
          goto LABEL_124;
LABEL_26:
        v25 = 0;
        v26 = *(__n128 *)a1;
        v272 = *(_QWORD *)(a1 + 16);
        v271 = v26;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        if (v272 >= 0)
          v27 = &v271;
        else
          v27 = (__n128 *)v271.n128_u64[0];
        if (v272 >= 0)
          v28 = HIBYTE(v272);
        else
          v28 = v271.n128_u64[1];
        while (2)
        {
          v29 = *(const void **)(a1 + v25 + 24);
          v30 = *(char *)(a1 + v25 + 47);
          if (v30 >= 0)
            v31 = (const void *)(a1 + v25 + 24);
          else
            v31 = *(const void **)(a1 + v25 + 24);
          if (v30 >= 0)
            v32 = *(unsigned __int8 *)(a1 + v25 + 47);
          else
            v32 = *(_QWORD *)(a1 + v25 + 32);
          if (v28 >= v32)
            v33 = v32;
          else
            v33 = v28;
          v34 = memcmp(v31, v27, v33);
          if (!v34)
          {
            if (v32 <= v28)
              goto LABEL_45;
LABEL_33:
            v25 += 24;
            continue;
          }
          break;
        }
        if ((v34 & 0x80000000) == 0)
          goto LABEL_33;
LABEL_45:
        v35 = a1 + v25 + 24;
        v36 = v266;
        if (v25)
        {
          do
          {
            while (1)
            {
              v37 = v36;
              v44 = (const void *)*((unsigned __int8 *)v36 + 23);
              v45 = (char)v44 >= 0 ? v37 : (const void **)*v37;
              v46 = (size_t)((char)v44 >= 0 ? v44 : v37[1]);
              v47 = v28 >= v46 ? v46 : v28;
              v48 = memcmp(v45, v27, v47);
              v36 = v37 - 3;
              if (v48)
                break;
              if (v46 > v28)
                goto LABEL_76;
            }
          }
          while (v48 < 0);
        }
        else
        {
          v37 = v269;
          if (v35 < (unint64_t)v269)
          {
            v38 = v266;
            do
            {
              while (1)
              {
                v37 = v38;
                v39 = (const void *)*((unsigned __int8 *)v38 + 23);
                v40 = (char)v39 >= 0 ? v37 : (const void **)*v37;
                v41 = (size_t)((char)v39 >= 0 ? v39 : v37[1]);
                v42 = v28 >= v41 ? v41 : v28;
                v43 = memcmp(v40, v27, v42);
                v38 = v37 - 3;
                if (!v43)
                  break;
                if (v35 >= (unint64_t)v37 || (v43 & 0x80000000) == 0)
                  goto LABEL_76;
              }
            }
            while (v35 < (unint64_t)v37 && v41 <= v28);
          }
        }
LABEL_76:
        if (v35 >= (unint64_t)v37)
        {
          j = v35;
        }
        else
        {
          v49 = v37;
          j = v35;
          do
          {
            v50 = *(_OWORD *)(j + 8);
            v51 = *(_OWORD *)v49;
            *(_QWORD *)(j + 16) = v49[2];
            *(_OWORD *)j = v51;
            *v49 = v29;
            *(_OWORD *)(v49 + 1) = v50;
            if (v272 >= 0)
              v52 = &v271;
            else
              v52 = (__n128 *)v271.n128_u64[0];
            if (v272 >= 0)
              v53 = HIBYTE(v272);
            else
              v53 = v271.n128_u64[1];
            v54 = j + 24;
            do
            {
              while (1)
              {
                j = v54;
                v55 = *(unsigned __int8 *)(v54 + 23);
                v29 = *(const void **)j;
                v56 = (v55 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
                v57 = (v55 & 0x80u) == 0 ? v55 : *(_QWORD *)(j + 8);
                v58 = v53 >= v57 ? v57 : v53;
                v59 = memcmp(v56, v52, v58);
                v54 = j + 24;
                if (v59)
                  break;
                if (v57 <= v53)
                  goto LABEL_98;
              }
            }
            while ((v59 & 0x80000000) == 0);
LABEL_98:
            v60 = v49 - 3;
            do
            {
              while (1)
              {
                v49 = v60;
                v61 = (const void *)*((unsigned __int8 *)v60 + 23);
                v62 = (char)v61 >= 0 ? v49 : (const void **)*v49;
                v63 = (unint64_t)((char)v61 >= 0 ? v61 : v49[1]);
                v64 = v53 >= v63 ? v63 : v53;
                v65 = memcmp(v62, v52, v64);
                v60 = v49 - 3;
                if (v65)
                  break;
                if (v63 > v53)
                  goto LABEL_78;
              }
            }
            while (v65 < 0);
LABEL_78:
            ;
          }
          while (j < (unint64_t)v49);
        }
        v66 = (__n128 *)(j - 24);
        if (j - 24 == a1)
        {
          a2 = v269;
          a3 = v263;
          if (*(char *)(j - 1) < 0)
            operator delete(*(void **)a1);
        }
        else
        {
          a2 = v269;
          a3 = v263;
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v67 = *v66;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(j - 8);
          *(__n128 *)a1 = v67;
          *(_BYTE *)(j - 1) = 0;
          *(_BYTE *)(j - 24) = 0;
        }
        v68 = v271;
        *(_QWORD *)(j - 8) = v272;
        *v66 = v68;
        if (v35 < (unint64_t)v37)
        {
LABEL_122:
          std::__introsort<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*,false>(a1, j - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v69 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, (const void **)(j - 24));
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(j, a2))
        {
          if (v69)
            continue;
          goto LABEL_122;
        }
        a2 = (const void **)(j - 24);
        if (!v69)
          goto LABEL_1;
        return result;
    }
  }
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, uint64_t a2, const void **a3)
{
  int v6;
  const void *v7;
  const void *v8;
  const void *v9;
  size_t v10;
  int v11;
  const void *v12;
  const void *v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;
  int v18;
  const void *v19;
  size_t v20;
  size_t v21;
  int v22;
  const void *v23;
  const void *v24;
  __n128 result;
  int v26;
  const void *v27;
  size_t v28;
  size_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const void *v34;
  size_t v35;
  const void *v36;
  size_t v37;
  size_t v38;
  int v39;
  const void *v40;
  const void *v41;
  int v42;
  const void *v43;
  size_t v44;
  int v45;
  const void *v46;
  uint64_t v47;
  const void *v48;
  size_t v49;
  size_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;

  v6 = *(char *)(a2 + 23);
  v7 = *(const void **)a2;
  v8 = *(const void **)(a2 + 8);
  if (v6 >= 0)
    v9 = (const void *)a2;
  else
    v9 = *(const void **)a2;
  if (v6 >= 0)
    v10 = *(unsigned __int8 *)(a2 + 23);
  else
    v10 = *(_QWORD *)(a2 + 8);
  v11 = *(char *)(a1 + 23);
  v13 = *(const void **)a1;
  v12 = *(const void **)(a1 + 8);
  if (v11 >= 0)
    v14 = (const void *)a1;
  else
    v14 = *(const void **)a1;
  if (v11 >= 0)
    v15 = *(unsigned __int8 *)(a1 + 23);
  else
    v15 = *(_QWORD *)(a1 + 8);
  if (v15 >= v10)
    v16 = v10;
  else
    v16 = v15;
  v17 = memcmp(v9, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0)
      goto LABEL_18;
  }
  else if (v10 > v15)
  {
LABEL_18:
    v18 = *((char *)a3 + 23);
    if (v18 >= 0)
      v19 = a3;
    else
      v19 = *a3;
    if (v18 >= 0)
      v20 = *((unsigned __int8 *)a3 + 23);
    else
      v20 = (size_t)a3[1];
    if (v10 >= v20)
      v21 = v20;
    else
      v21 = v10;
    v22 = memcmp(v19, v9, v21);
    if (v22)
    {
      if ((v22 & 0x80000000) == 0)
      {
LABEL_29:
        v23 = *(const void **)(a1 + 16);
        v24 = a3[2];
        result = *(__n128 *)a3;
        *(_OWORD *)a1 = *(_OWORD *)a3;
        *(_QWORD *)(a1 + 16) = v24;
        *a3 = v13;
        a3[1] = v12;
        a3[2] = v23;
        return result;
      }
    }
    else if (v20 > v10)
    {
      goto LABEL_29;
    }
    v31 = *(_QWORD *)(a1 + 16);
    v32 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v32;
    *(_QWORD *)a2 = v13;
    *(_QWORD *)(a2 + 8) = v12;
    *(_QWORD *)(a2 + 16) = v31;
    v33 = *((char *)a3 + 23);
    if (v33 >= 0)
      v34 = a3;
    else
      v34 = *a3;
    if (v33 >= 0)
      v35 = *((unsigned __int8 *)a3 + 23);
    else
      v35 = (size_t)a3[1];
    if (v31 >= 0)
      v36 = (const void *)a2;
    else
      v36 = v13;
    if (v31 >= 0)
      v37 = HIBYTE(v31);
    else
      v37 = (size_t)v12;
    if (v37 >= v35)
      v38 = v35;
    else
      v38 = v37;
    v39 = memcmp(v34, v36, v38);
    if (v39)
    {
      if (v39 < 0)
        return result;
    }
    else if (v35 <= v37)
    {
      return result;
    }
    result = *(__n128 *)a3;
    *(_QWORD *)(a2 + 16) = a3[2];
    *(__n128 *)a2 = result;
    *a3 = v13;
    a3[1] = v12;
    a3[2] = (const void *)v31;
    return result;
  }
  v26 = *((char *)a3 + 23);
  if (v26 >= 0)
    v27 = a3;
  else
    v27 = *a3;
  if (v26 >= 0)
    v28 = *((unsigned __int8 *)a3 + 23);
  else
    v28 = (size_t)a3[1];
  if (v10 >= v28)
    v29 = v28;
  else
    v29 = v10;
  v30 = memcmp(v27, v9, v29);
  if (v30)
  {
    if (v30 < 0)
      return result;
  }
  else if (v28 <= v10)
  {
    return result;
  }
  v40 = *(const void **)(a2 + 16);
  v41 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v41;
  *a3 = v7;
  a3[1] = v8;
  a3[2] = v40;
  v42 = *(char *)(a2 + 23);
  if (v42 >= 0)
    v43 = (const void *)a2;
  else
    v43 = *(const void **)a2;
  if (v42 >= 0)
    v44 = *(unsigned __int8 *)(a2 + 23);
  else
    v44 = *(_QWORD *)(a2 + 8);
  v45 = *(char *)(a1 + 23);
  v46 = *(const void **)a1;
  v47 = *(_QWORD *)(a1 + 8);
  if (v45 >= 0)
    v48 = (const void *)a1;
  else
    v48 = *(const void **)a1;
  if (v45 >= 0)
    v49 = *(unsigned __int8 *)(a1 + 23);
  else
    v49 = *(_QWORD *)(a1 + 8);
  if (v49 >= v44)
    v50 = v44;
  else
    v50 = v49;
  v51 = memcmp(v43, v48, v50);
  if (!v51)
  {
    if (v44 <= v49)
      return result;
    goto LABEL_84;
  }
  if ((v51 & 0x80000000) == 0)
  {
LABEL_84:
    v52 = *(_QWORD *)(a1 + 16);
    v53 = *(_QWORD *)(a2 + 16);
    result = *(__n128 *)a2;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v53;
    *(_QWORD *)a2 = v46;
    *(_QWORD *)(a2 + 8) = v47;
    *(_QWORD *)(a2 + 16) = v52;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, const void **a2)
{
  const void **v2;
  unint64_t v4;
  _BOOL8 result;
  const void **v6;
  int v7;
  const void **v8;
  size_t v9;
  int v10;
  const void *v11;
  const void *v12;
  const void *v13;
  size_t v14;
  size_t v15;
  int v16;
  const void **v17;
  const void **v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  const void *v24;
  size_t v25;
  int v26;
  const void *v27;
  size_t v28;
  size_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  __int128 *v34;
  unint64_t v35;
  int v36;
  const void *v37;
  unint64_t v38;
  size_t v39;
  int v40;
  const void *v41;
  uint64_t v42;
  const void **v43;
  __int128 v44;
  const void *v45;

  v2 = a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 3;
      v7 = *((char *)a2 - 1);
      if (v7 >= 0)
        v8 = a2 - 3;
      else
        v8 = (const void **)*(a2 - 3);
      if (v7 >= 0)
        v9 = *((unsigned __int8 *)a2 - 1);
      else
        v9 = (size_t)*(a2 - 2);
      v10 = *(char *)(a1 + 23);
      v11 = *(const void **)a1;
      v12 = *(const void **)(a1 + 8);
      if (v10 >= 0)
        v13 = (const void *)a1;
      else
        v13 = *(const void **)a1;
      if (v10 >= 0)
        v14 = *(unsigned __int8 *)(a1 + 23);
      else
        v14 = *(_QWORD *)(a1 + 8);
      if (v14 >= v9)
        v15 = v9;
      else
        v15 = v14;
      v16 = memcmp(v8, v13, v15);
      if (v16)
      {
        if (v16 < 0)
          return 1;
      }
      else if (v9 <= v14)
      {
        return 1;
      }
      v41 = *(const void **)(a1 + 16);
      v42 = (uint64_t)*(v2 - 1);
      *(_OWORD *)a1 = *(_OWORD *)v6;
      *(_QWORD *)(a1 + 16) = v42;
      *(v2 - 3) = v11;
      *(v2 - 2) = v12;
      *(v2 - 1) = v41;
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, a2 - 3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 3);
      return 1;
    default:
      v17 = (const void **)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, (const void **)(a1 + 48));
      v18 = (const void **)(a1 + 72);
      if ((const void **)(a1 + 72) == v2)
        return 1;
      v19 = 0;
      v20 = 0;
      v43 = v2;
      break;
  }
  while (2)
  {
    v23 = *((char *)v18 + 23);
    if (v23 >= 0)
      v24 = v18;
    else
      v24 = *v18;
    if (v23 >= 0)
      v25 = *((unsigned __int8 *)v18 + 23);
    else
      v25 = (size_t)v18[1];
    v26 = *((char *)v17 + 23);
    if (v26 >= 0)
      v27 = v17;
    else
      v27 = *v17;
    if (v26 >= 0)
      v28 = *((unsigned __int8 *)v17 + 23);
    else
      v28 = (size_t)v17[1];
    if (v28 >= v25)
      v29 = v25;
    else
      v29 = v28;
    v30 = memcmp(v24, v27, v29);
    if (v30)
    {
      if (v30 < 0)
        goto LABEL_25;
    }
    else if (v25 <= v28)
    {
      goto LABEL_25;
    }
    v44 = *(_OWORD *)v18;
    v45 = v18[2];
    *(_OWORD *)v18 = *(_OWORD *)v17;
    v18[2] = v17[2];
    *((_BYTE *)v17 + 23) = 0;
    *(_BYTE *)v17 = 0;
    v21 = a1;
    if (v17 == (const void **)a1)
      goto LABEL_24;
    v31 = v19;
    while (1)
    {
      v32 = a1 + v31;
      v33 = (_OWORD *)(a1 + v31 + 24);
      v34 = SHIBYTE(v45) >= 0 ? &v44 : (__int128 *)v44;
      v35 = SHIBYTE(v45) >= 0 ? HIBYTE(v45) : *((_QWORD *)&v44 + 1);
      v36 = *(char *)(v32 + 47);
      v37 = v36 >= 0 ? (const void *)(a1 + v31 + 24) : *(const void **)(a1 + v31 + 24);
      v38 = v36 >= 0 ? *(unsigned __int8 *)(v32 + 47) : *(_QWORD *)(v32 + 32);
      v39 = v38 >= v35 ? v35 : v38;
      v40 = memcmp(v34, v37, v39);
      if (!v40)
        break;
      if (v40 < 0)
      {
        v21 = (uint64_t)v17;
        goto LABEL_23;
      }
LABEL_48:
      v17 -= 3;
      *(_OWORD *)(v32 + 48) = *v33;
      *(_QWORD *)(v32 + 64) = *(_QWORD *)(a1 + v31 + 40);
      *(_BYTE *)(v32 + 47) = 0;
      *(_BYTE *)v33 = 0;
      v31 -= 24;
      if (v31 == -48)
      {
        v21 = a1;
        goto LABEL_23;
      }
    }
    if (v35 > v38)
      goto LABEL_48;
    v21 = a1 + v31 + 48;
LABEL_23:
    v2 = v43;
LABEL_24:
    v22 = v44;
    *(_QWORD *)(v21 + 16) = v45;
    *(_OWORD *)v21 = v22;
    if (++v20 == 8)
      return v18 + 3 == v2;
LABEL_25:
    v17 = v18;
    v19 += 24;
    v18 += 3;
    if (v18 != v2)
      continue;
    return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  int v8;
  const void *v9;
  size_t v10;
  int v11;
  const void *v12;
  const void *v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;
  __n128 result;
  const void *v19;
  const void *v20;
  int v21;
  const void *v22;
  size_t v23;
  int v24;
  const void *v25;
  uint64_t v26;
  const void *v27;
  size_t v28;
  size_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const void *v34;
  size_t v35;
  int v36;
  const void *v37;
  uint64_t v38;
  const void *v39;
  size_t v40;
  size_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a2, (const void **)a3);
  v8 = *((char *)a4 + 23);
  if (v8 >= 0)
    v9 = a4;
  else
    v9 = *a4;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)a4 + 23);
  else
    v10 = (size_t)a4[1];
  v11 = *(char *)(a3 + 23);
  v12 = *(const void **)a3;
  v13 = *(const void **)(a3 + 8);
  if (v11 >= 0)
    v14 = (const void *)a3;
  else
    v14 = *(const void **)a3;
  if (v11 >= 0)
    v15 = *(unsigned __int8 *)(a3 + 23);
  else
    v15 = *(_QWORD *)(a3 + 8);
  if (v15 >= v10)
    v16 = v10;
  else
    v16 = v15;
  v17 = memcmp(v9, v14, v16);
  if (v17)
  {
    if (v17 < 0)
      return result;
  }
  else if (v10 <= v15)
  {
    return result;
  }
  v19 = *(const void **)(a3 + 16);
  v20 = a4[2];
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_QWORD *)(a3 + 16) = v20;
  *a4 = v12;
  a4[1] = v13;
  a4[2] = v19;
  v21 = *(char *)(a3 + 23);
  if (v21 >= 0)
    v22 = (const void *)a3;
  else
    v22 = *(const void **)a3;
  if (v21 >= 0)
    v23 = *(unsigned __int8 *)(a3 + 23);
  else
    v23 = *(_QWORD *)(a3 + 8);
  v24 = *(char *)(a2 + 23);
  v25 = *(const void **)a2;
  v26 = *(_QWORD *)(a2 + 8);
  if (v24 >= 0)
    v27 = (const void *)a2;
  else
    v27 = *(const void **)a2;
  if (v24 >= 0)
    v28 = *(unsigned __int8 *)(a2 + 23);
  else
    v28 = *(_QWORD *)(a2 + 8);
  if (v28 >= v23)
    v29 = v23;
  else
    v29 = v28;
  v30 = memcmp(v22, v27, v29);
  if (v30)
  {
    if (v30 < 0)
      return result;
  }
  else if (v23 <= v28)
  {
    return result;
  }
  v31 = *(_QWORD *)(a2 + 16);
  v32 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v32;
  *(_QWORD *)a3 = v25;
  *(_QWORD *)(a3 + 8) = v26;
  *(_QWORD *)(a3 + 16) = v31;
  v33 = *(char *)(a2 + 23);
  if (v33 >= 0)
    v34 = (const void *)a2;
  else
    v34 = *(const void **)a2;
  if (v33 >= 0)
    v35 = *(unsigned __int8 *)(a2 + 23);
  else
    v35 = *(_QWORD *)(a2 + 8);
  v36 = *(char *)(a1 + 23);
  v37 = *(const void **)a1;
  v38 = *(_QWORD *)(a1 + 8);
  if (v36 >= 0)
    v39 = (const void *)a1;
  else
    v39 = *(const void **)a1;
  if (v36 >= 0)
    v40 = *(unsigned __int8 *)(a1 + 23);
  else
    v40 = *(_QWORD *)(a1 + 8);
  if (v40 >= v35)
    v41 = v35;
  else
    v41 = v40;
  v42 = memcmp(v34, v39, v41);
  if (!v42)
  {
    if (v35 <= v40)
      return result;
LABEL_58:
    v43 = *(_QWORD *)(a1 + 16);
    v44 = *(_QWORD *)(a2 + 16);
    result = *(__n128 *)a2;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v44;
    *(_QWORD *)a2 = v37;
    *(_QWORD *)(a2 + 8) = v38;
    *(_QWORD *)(a2 + 16) = v43;
    return result;
  }
  if ((v42 & 0x80000000) == 0)
    goto LABEL_58;
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5)
{
  int v10;
  const void *v11;
  size_t v12;
  int v13;
  const void *v14;
  const void *v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  __n128 result;
  const void *v21;
  const void *v22;
  int v23;
  const void *v24;
  size_t v25;
  int v26;
  const void *v27;
  uint64_t v28;
  const void *v29;
  size_t v30;
  size_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  const void *v36;
  size_t v37;
  int v38;
  const void *v39;
  uint64_t v40;
  const void *v41;
  size_t v42;
  size_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  const void *v48;
  size_t v49;
  int v50;
  const void *v51;
  uint64_t v52;
  const void *v53;
  size_t v54;
  size_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a2, a3, (const void **)a4);
  v10 = *((char *)a5 + 23);
  if (v10 >= 0)
    v11 = a5;
  else
    v11 = *a5;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  v13 = *(char *)(a4 + 23);
  v14 = *(const void **)a4;
  v15 = *(const void **)(a4 + 8);
  if (v13 >= 0)
    v16 = (const void *)a4;
  else
    v16 = *(const void **)a4;
  if (v13 >= 0)
    v17 = *(unsigned __int8 *)(a4 + 23);
  else
    v17 = *(_QWORD *)(a4 + 8);
  if (v17 >= v12)
    v18 = v12;
  else
    v18 = v17;
  v19 = memcmp(v11, v16, v18);
  if (v19)
  {
    if (v19 < 0)
      return result;
  }
  else if (v12 <= v17)
  {
    return result;
  }
  v21 = *(const void **)(a4 + 16);
  v22 = a5[2];
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(_QWORD *)(a4 + 16) = v22;
  *a5 = v14;
  a5[1] = v15;
  a5[2] = v21;
  v23 = *(char *)(a4 + 23);
  if (v23 >= 0)
    v24 = (const void *)a4;
  else
    v24 = *(const void **)a4;
  if (v23 >= 0)
    v25 = *(unsigned __int8 *)(a4 + 23);
  else
    v25 = *(_QWORD *)(a4 + 8);
  v26 = *(char *)(a3 + 23);
  v27 = *(const void **)a3;
  v28 = *(_QWORD *)(a3 + 8);
  if (v26 >= 0)
    v29 = (const void *)a3;
  else
    v29 = *(const void **)a3;
  if (v26 >= 0)
    v30 = *(unsigned __int8 *)(a3 + 23);
  else
    v30 = *(_QWORD *)(a3 + 8);
  if (v30 >= v25)
    v31 = v25;
  else
    v31 = v30;
  v32 = memcmp(v24, v29, v31);
  if (v32)
  {
    if (v32 < 0)
      return result;
  }
  else if (v25 <= v30)
  {
    return result;
  }
  v33 = *(_QWORD *)(a3 + 16);
  v34 = *(_QWORD *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_QWORD *)(a3 + 16) = v34;
  *(_QWORD *)a4 = v27;
  *(_QWORD *)(a4 + 8) = v28;
  *(_QWORD *)(a4 + 16) = v33;
  v35 = *(char *)(a3 + 23);
  if (v35 >= 0)
    v36 = (const void *)a3;
  else
    v36 = *(const void **)a3;
  if (v35 >= 0)
    v37 = *(unsigned __int8 *)(a3 + 23);
  else
    v37 = *(_QWORD *)(a3 + 8);
  v38 = *(char *)(a2 + 23);
  v39 = *(const void **)a2;
  v40 = *(_QWORD *)(a2 + 8);
  if (v38 >= 0)
    v41 = (const void *)a2;
  else
    v41 = *(const void **)a2;
  if (v38 >= 0)
    v42 = *(unsigned __int8 *)(a2 + 23);
  else
    v42 = *(_QWORD *)(a2 + 8);
  if (v42 >= v37)
    v43 = v37;
  else
    v43 = v42;
  v44 = memcmp(v36, v41, v43);
  if (v44)
  {
    if (v44 < 0)
      return result;
  }
  else if (v37 <= v42)
  {
    return result;
  }
  v45 = *(_QWORD *)(a2 + 16);
  v46 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v46;
  *(_QWORD *)a3 = v39;
  *(_QWORD *)(a3 + 8) = v40;
  *(_QWORD *)(a3 + 16) = v45;
  v47 = *(char *)(a2 + 23);
  if (v47 >= 0)
    v48 = (const void *)a2;
  else
    v48 = *(const void **)a2;
  if (v47 >= 0)
    v49 = *(unsigned __int8 *)(a2 + 23);
  else
    v49 = *(_QWORD *)(a2 + 8);
  v50 = *(char *)(a1 + 23);
  v51 = *(const void **)a1;
  v52 = *(_QWORD *)(a1 + 8);
  if (v50 >= 0)
    v53 = (const void *)a1;
  else
    v53 = *(const void **)a1;
  if (v50 >= 0)
    v54 = *(unsigned __int8 *)(a1 + 23);
  else
    v54 = *(_QWORD *)(a1 + 8);
  if (v54 >= v49)
    v55 = v49;
  else
    v55 = v54;
  v56 = memcmp(v48, v53, v55);
  if (v56)
  {
    if (v56 < 0)
      return result;
  }
  else if (v49 <= v54)
  {
    return result;
  }
  v57 = *(_QWORD *)(a1 + 16);
  v58 = *(_QWORD *)(a2 + 16);
  result = *(__n128 *)a2;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v58;
  *(_QWORD *)a2 = v51;
  *(_QWORD *)(a2 + 8) = v52;
  *(_QWORD *)(a2 + 16) = v57;
  return result;
}

char *std::vector<std::string>::__push_back_slow_path<std::string>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  void **v11;
  void **v12;
  __int128 v13;
  void **v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = v8 + 24;
  v11 = (void **)*a1;
  v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v13 = *(_OWORD *)(v12 - 3);
      *((_QWORD *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v13;
      v8 -= 24;
      *(v12 - 2) = 0;
      *(v12 - 1) = 0;
      *(v12 - 3) = 0;
      v12 -= 3;
    }
    while (v12 != v11);
    v12 = (void **)*a1;
    v14 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v12)
    {
      if (*((char *)v14 - 1) < 0)
        operator delete(*(v14 - 3));
      v14 -= 3;
    }
  }
  if (v12)
    operator delete(v12);
  return v10;
}

const char *abm::asString(unsigned int a1)
{
  if (a1 > 9)
    return "Unknown";
  else
    return off_1E790C910[a1];
}

{
  if (a1 > 3)
    return "Unknown";
  else
    return off_1E790C960[a1];
}

const char *abm::asString(int a1)
{
  if ((a1 - 1) > 2)
    return "Unknown";
  else
    return off_1E790C980[a1 - 1];
}

{
  if ((a1 - 1) > 2)
    return "Unknown";
  else
    return off_1E790C998[a1 - 1];
}

uint64_t *GetOsLogContext(void)
{
  unsigned __int8 v0;

  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED7100E0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
  }
  if (GetOsLogContext(void)::onceToken != -1)
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
  return &GetOsLogContext(void)::sOsLogContext;
}

void ___Z15GetOsLogContextv_block_invoke()
{
  _BYTE v0[16];

  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v0, "com.apple.telephony.abm", "global");
  ctu::OsLogContext::operator=();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v0);
}

void *GetGlobalLogger(uint64_t *a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[5];
  std::__shared_weak_count *v11;

  if ((v2 & 1) == 0
  {
    MEMORY[0x1C3B89294](&GetGlobalLogger(std::shared_ptr<ctu::LogServer>)::sLogger);
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3788], &GetGlobalLogger(std::shared_ptr<ctu::LogServer>)::sLogger, &dword_1BF335000);
  }
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1174405120;
  v10[2] = ___Z15GetGlobalLoggerNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v10[3] = &__block_descriptor_tmp_3_3;
  v3 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  v10[4] = v3;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (GetGlobalLogger(std::shared_ptr<ctu::LogServer>)::onceToken != -1)
  {
    dispatch_once(&GetGlobalLogger(std::shared_ptr<ctu::LogServer>)::onceToken, v10);
    v4 = v11;
    if (v11)
      goto LABEL_7;
    return &GetGlobalLogger(std::shared_ptr<ctu::LogServer>)::sLogger;
  }
  if (!v4)
    return &GetGlobalLogger(std::shared_ptr<ctu::LogServer>)::sLogger;
LABEL_7:
  v7 = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return &GetGlobalLogger(std::shared_ptr<ctu::LogServer>)::sLogger;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return &GetGlobalLogger(std::shared_ptr<ctu::LogServer>)::sLogger;
}

void sub_1BF50886C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___Z15GetGlobalLoggerNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _BYTE v10[16];
  _BYTE v11[48];
  uint64_t v12;
  uint64_t v13;

  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED7100E0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF335000);
  }
  if (GetOsLogContext(void)::onceToken != -1)
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_7);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v10, (const ctu::OsLogContext *)&GetOsLogContext(void)::sOsLogContext);
  MEMORY[0x1C3B89288](v11, v10, a1 + 32);
  ctu::LoggerCommonBase::operator=();
  v4 = v12;
  v3 = v13;
  if (v13)
  {
    v5 = (unint64_t *)(v13 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)qword_1ED7100C8;
  qword_1ED7100C0 = v4;
  qword_1ED7100C8 = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  ctu::StaticLogger::~StaticLogger((ctu::StaticLogger *)v11);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
}

void sub_1BF5089C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void PPMManager::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13[2];

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0x28uLL);
  v5 = v4;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = off_1E790CB30;
  v6 = v4 + 3;
  v7 = *a1;
  v8 = (std::__shared_weak_count *)a1[1];
  v13[0] = v7;
  v13[1] = (uint64_t)v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  PPMManager::PPMManager(v4 + 3, v13);
  if (!v8)
    goto LABEL_8;
  v11 = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    *a2 = v6;
    a2[1] = v5;
  }
  else
  {
LABEL_8:
    *a2 = v6;
    a2[1] = v5;
  }
}

void sub_1BF508B24(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

const char *PPMManager::getName(PPMManager *this)
{
  return "ppm.mgr";
}

_QWORD *PPMManager::PPMManager(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  NSError *v16;
  void *v17;
  NSObject *v18;
  std::string *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v26;
  std::__shared_weak_count *v27;
  std::string __p;
  id v29;
  uint8_t buf[4];
  std::string *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  v26 = *a2;
  v27 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = operator new(0x68uLL);
  v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = off_1E790CA30;
  if (v3)
  {
    v9 = (unint64_t *)&v3->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v7[3] = off_1E790CAF0;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 8;
  strcpy((char *)&__p, "ppm.hdlr");
  ctu::LoggerCommonBase::LoggerCommonBase();
  v8[4] = &unk_1E78FB900;
  v8[10] = v4;
  v8[11] = v3;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v8[3] = off_1E790CA80;
  v8[12] = 0;
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v29 = 0;
  objc_msgSend(MEMORY[0x1E0DE2D00], "sharedInstanceWithClientRepresentation:error:", CFSTR("com.apple.duet.ppm-attr.bsbd"), &v29, v26);
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = (NSError *)v29;
  v17 = (void *)v8[12];
  v8[12] = v15;

  if (v16 || !v8[12])
  {
    v18 = v8[8];
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      PPMHandler::getErrorMsg(&__p, v16);
      v19 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v31 = v19;
      _os_log_error_impl(&dword_1BF335000, v18, OS_LOG_TYPE_ERROR, "Failed to get PPM instance: %s", buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }

  v20 = (std::__shared_weak_count *)a1[1];
  *a1 = v8 + 3;
  a1[1] = v8;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v27)
  {
    v23 = (unint64_t *)&v27->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  return a1;
}

void sub_1BF508E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  void *v12;

  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

void sub_1BF508EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v23;
  void *v24;

  if (a18 < 0)
    operator delete(__p);
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v24);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

void sub_1BF508F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void PPMManager::start(PPMHandler **this)
{
  PPMHandler::start(*this);
}

void PPMHandler::start(PPMHandler *this)
{
  void *v2;
  char v3;
  NSError *v4;
  char v5;
  NSObject *v6;
  std::string *p_p;
  std::string __p;
  id v9;
  uint8_t buf[4];
  std::string *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)*((_QWORD *)this + 9);
  v9 = 0;
  v3 = objc_msgSend(v2, "activityStartedWithLevel:options:error:", &unk_1E790E1E0, 0, &v9);
  v4 = (NSError *)v9;
  if (v4)
    v5 = 0;
  else
    v5 = v3;
  if ((v5 & 1) == 0)
  {
    v6 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      PPMHandler::getErrorMsg(&__p, v4);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v11 = p_p;
      _os_log_error_impl(&dword_1BF335000, v6, OS_LOG_TYPE_ERROR, "Failed to set PPM activity started level: %s", buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }

}

void sub_1BF509058(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void PPMManager::reportTelemetry(uint64_t *a1, void **a2)
{
  uint64_t v2;
  void *v3;
  xpc_object_t object;

  v2 = *a1;
  v3 = *a2;
  object = v3;
  if (v3)
    xpc_retain(v3);
  else
    object = xpc_null_create();
  PPMHandler::reportTelemetry(v2, &object);
  xpc_release(object);
}

void sub_1BF5090C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void PPMHandler::reportTelemetry(uint64_t a1, _QWORD *a2)
{
  void *v4;
  const object *v5;
  const void *v6;
  CFTypeID v7;
  const void *v8;
  void *v9;
  NSError *v10;
  NSObject *v11;
  std::string *v12;
  std::string cf;
  id v14;
  std::string::size_type v15;
  _BYTE object[24];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (MEMORY[0x1C3B8A86C](*a2) != MEMORY[0x1E0C812F8])
    return;
  v4 = (void *)*a2;
  v15 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)object = v4;
  if (v4)
    xpc_retain(v4);
  else
    *(_QWORD *)object = xpc_null_create();
  xpc::bridge((xpc *)object, v5);
  v6 = (const void *)cf.__r_.__value_.__r.__words[0];
  if (cf.__r_.__value_.__r.__words[0])
  {
    v7 = CFGetTypeID(cf.__r_.__value_.__l.__data_);
    if (v7 == CFDictionaryGetTypeID())
    {
      v15 = cf.__r_.__value_.__r.__words[0];
      CFRetain(cf.__r_.__value_.__l.__data_);
      v8 = (const void *)cf.__r_.__value_.__r.__words[0];
LABEL_9:
      CFRelease(v8);
      goto LABEL_10;
    }
  }
  v6 = 0;
  v15 = 0;
  v8 = (const void *)cf.__r_.__value_.__r.__words[0];
  if (cf.__r_.__value_.__r.__words[0])
    goto LABEL_9;
LABEL_10:
  xpc_release(*(xpc_object_t *)object);
  v9 = *(void **)(a1 + 72);
  v14 = 0;
  objc_msgSend(v9, "pushTelemetryToPPM:error:", v6, &v14);
  v10 = (NSError *)v14;
  if (v10)
  {
    v11 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      PPMHandler::getErrorMsg(&cf, v10);
      v12 = (cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &cf
          : (std::string *)cf.__r_.__value_.__r.__words[0];
      *(_DWORD *)object = 136315138;
      *(_QWORD *)&object[4] = v12;
      _os_log_error_impl(&dword_1BF335000, v11, OS_LOG_TYPE_ERROR, "Failed to report telemetry to PPM: %s", object, 0xCu);
      if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(cf.__r_.__value_.__l.__data_);
    }
  }
  if (v6)
    CFRelease(v6);

}

void sub_1BF509288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, xpc_object_t object)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void PPMManager::shutdown(PPMHandler **this)
{
  PPMHandler::shutdown(*this);
}

void PPMHandler::shutdown(PPMHandler *this)
{
  void *v2;
  char v3;
  NSError *v4;
  char v5;
  NSObject *v6;
  void *v7;
  NSError *v8;
  char v9;
  NSObject *v10;
  std::string *v11;
  std::string *p_p;
  NSError *v13;
  std::string __p;
  id v15;
  uint8_t buf[4];
  std::string *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = (void *)*((_QWORD *)this + 9);
  v15 = 0;
  v3 = objc_msgSend(v2, "activityStoppedWithLevel:options:error:", 0, 0, &v15);
  v4 = (NSError *)v15;
  if (v4)
    v5 = 0;
  else
    v5 = v3;
  if ((v5 & 1) == 0)
  {
    v6 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      PPMHandler::getErrorMsg(&__p, v4);
      v11 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v17 = v11;
      _os_log_error_impl(&dword_1BF335000, v6, OS_LOG_TYPE_ERROR, "Failed to set PPM activity stopped level: %s", buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  v7 = (void *)*((_QWORD *)this + 9);
  v13 = v4;
  objc_msgSend(v7, "endInteraction:", &v13);
  v8 = v13;

  if (v8)
    v9 = 0;
  else
    v9 = v3;
  if ((v9 & 1) == 0)
  {
    v10 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      PPMHandler::getErrorMsg(&__p, v8);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v17 = p_p;
      _os_log_error_impl(&dword_1BF335000, v10, OS_LOG_TYPE_ERROR, "Failed to end interaction: %s", buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }

}

void sub_1BF5094C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<PPMHandler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E790CA30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PPMHandler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E790CA30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<PPMHandler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void PPMHandler::~PPMHandler(id *this)
{

  *this = off_1E790CAF0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
}

{

  *this = off_1E790CAF0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(this);
}

uint64_t ctu::Loggable<PPMHandler,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<PPMHandler,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "ppm.hdlr");
}

uint64_t ctu::Loggable<PPMHandler,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<PPMHandler,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E790CAF0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<PPMHandler,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E790CAF0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void PPMHandler::getErrorMsg(std::string *this, NSError *a2)
{
  NSError *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  NSError *v10;

  v3 = a2;
  this->__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  this->__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
  *((_BYTE *)&this->__r_.__value_.__s + 23) = 13;
  strcpy((char *)this, "Unknown error");
  if (v3)
  {
    v10 = v3;
    -[NSError localizedDescription](v3, "localizedDescription");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSError localizedFailureReason](v10, "localizedFailureReason");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      -[NSError localizedFailureReason](v10, "localizedFailureReason");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("Not found localizedFailureReason"), &stru_1E790CD10, 0);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

    }
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %@"), v4, v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v9 = objc_retainAutorelease(v8);
    std::string::__assign_external(this, (const std::string::value_type *)objc_msgSend(v9, "UTF8String"));

    v3 = v10;
  }

}

void sub_1BF509760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v16 = v15;

  if (*(char *)(v12 + 23) < 0)
    operator delete(*(void **)v12);

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<PPMManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E790CB30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PPMManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E790CB30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<PPMManager>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t APFSVolumeNeedsCryptoMigration()
{
  return MEMORY[0x1E0CF18B8]();
}

uint64_t APFSVolumeRole()
{
  return MEMORY[0x1E0CF18C0]();
}

void AudioServicesPlaySystemSound(SystemSoundID inSystemSoundID)
{
  MEMORY[0x1E0C92148](*(_QWORD *)&inSystemSoundID);
}

uint64_t BBUFSServerCopyDefaultDestination()
{
  return MEMORY[0x1E0DDF128]();
}

uint64_t BBUFSServerCreate()
{
  return MEMORY[0x1E0DDF130]();
}

uint64_t BBUFSServerFlush()
{
  return MEMORY[0x1E0DDF138]();
}

uint64_t BBUFSServerFlushInProgress()
{
  return MEMORY[0x1E0DDF140]();
}

uint64_t BBUFSServerParametersInit()
{
  return MEMORY[0x1E0DDF148]();
}

uint64_t BBUFSServerRelease()
{
  return MEMORY[0x1E0DDF150]();
}

uint64_t BBUFSServerStart()
{
  return MEMORY[0x1E0DDF160]();
}

uint64_t BBUFSServerStop()
{
  return MEMORY[0x1E0DDF168]();
}

uint64_t BBUpdaterExecCommand()
{
  return MEMORY[0x1E0DDF170]();
}

uint64_t BBUpdaterExtremeCreate()
{
  return MEMORY[0x1E0DDF178]();
}

uint64_t BBUpdaterRegisterGlobalLogSink()
{
  return MEMORY[0x1E0DDF180]();
}

uint64_t BBUpdaterSetOptions()
{
  return MEMORY[0x1E0DDF188]();
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80370](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80378](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1E0C80380](c, data, *(_QWORD *)&len);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
  MEMORY[0x1E0C97D00](theArray, range.location, range.length, applier, context);
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1E0C97D10](theArray, range.location, range.length, value);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D90]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x1E0C98350](cf);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
  MEMORY[0x1E0C983F0](theData, range.location, range.length, buffer);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1E0C98418]();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
  MEMORY[0x1E0C98508](theDict, applier, context);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98518](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98558](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1E0C98570](theDict);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
  MEMORY[0x1E0C985E8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

CFErrorRef CFErrorCreateWithUserInfoKeysAndValues(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, const void *const *userInfoKeys, const void *const *userInfoValues, CFIndex numUserInfoValues)
{
  return (CFErrorRef)MEMORY[0x1E0C98658](allocator, domain, code, userInfoKeys, userInfoValues, numUserInfoValues);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x1E0C98660](err);
}

CFErrorDomain CFErrorGetDomain(CFErrorRef err)
{
  return (CFErrorDomain)MEMORY[0x1E0C98670](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988B8]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
  MEMORY[0x1E0C988E0](center, name, object, userInfo, deliverImmediately);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  MEMORY[0x1E0C98A90](key, value, applicationID, userName, hostName);
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x1E0C98A98](applicationID, userName, hostName);
}

CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AE0](allocator, stream, streamLength, options, format, error);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
  MEMORY[0x1E0C98B10](stream);
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFReadStreamRef)MEMORY[0x1E0C98B48](alloc, fileURL);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x1E0C98B80](stream);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98BF8](rl, source, mode);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C30]();
}

Boolean CFRunLoopIsWaiting(CFRunLoopRef rl)
{
  return MEMORY[0x1E0C98C58](rl);
}

void CFRunLoopPerformBlock(CFRunLoopRef rl, CFTypeRef mode, void *block)
{
  MEMORY[0x1E0C98C80](rl, mode, block);
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98C90](rl, source, mode);
}

CFRunLoopRunResult CFRunLoopRunInMode(CFRunLoopMode mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled)
{
  return MEMORY[0x1E0C98CB0](mode, returnAfterSourceHandled, seconds);
}

CFRunLoopSourceRef CFRunLoopSourceCreate(CFAllocatorRef allocator, CFIndex order, CFRunLoopSourceContext *context)
{
  return (CFRunLoopSourceRef)MEMORY[0x1E0C98CC8](allocator, order, context);
}

void CFRunLoopStop(CFRunLoopRef rl)
{
  MEMORY[0x1E0C98D00](rl);
}

void CFRunLoopWakeUp(CFRunLoopRef rl)
{
  MEMORY[0x1E0C98D68](rl);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F10](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C99420](allocator, filePath, pathStyle, isDirectory);
}

uint64_t CacheDeleteRegisterInfoCallbacks()
{
  return MEMORY[0x1E0D09B98]();
}

uint64_t ETLDebugRegisterDelegate()
{
  return MEMORY[0x1E0DE0018]();
}

uint64_t IOPMClaimSystemWakeEvent()
{
  return MEMORY[0x1E0CBB758]();
}

uint64_t NEHelperCacheCopyAppUUIDMapping()
{
  return MEMORY[0x1E0C804F8]();
}

uint64_t SBSGetScreenLockStatus()
{
  return MEMORY[0x1E0DAB728]();
}

uint64_t TelephonyBasebandCreateController()
{
  return MEMORY[0x1E0DE2F40]();
}

uint64_t TelephonyBasebandGetBasebandState()
{
  return MEMORY[0x1E0DE2F58]();
}

uint64_t TelephonyBasebandGetManagerState()
{
  return MEMORY[0x1E0DE2F60]();
}

uint64_t TelephonyBasebandGetPowerDebugOptions()
{
  return MEMORY[0x1E0DE2F68]();
}

uint64_t TelephonyBasebandGetReset()
{
  return MEMORY[0x1E0DE2F70]();
}

uint64_t TelephonyBasebandPCITransportCreate()
{
  return MEMORY[0x1E0DE2CD8]();
}

uint64_t TelephonyBasebandPCITransportInitParameters()
{
  return MEMORY[0x1E0DE2CE0]();
}

uint64_t TelephonyBasebandPowerDebugUnblock()
{
  return MEMORY[0x1E0DE2F78]();
}

uint64_t TelephonyBasebandPowerOnModem()
{
  return MEMORY[0x1E0DE2F80]();
}

uint64_t TelephonyBasebandPowercycleModem()
{
  return MEMORY[0x1E0DE2F88]();
}

uint64_t TelephonyBasebandRegisterForReset()
{
  return MEMORY[0x1E0DE2F90]();
}

uint64_t TelephonyBasebandReportThermalData()
{
  return MEMORY[0x1E0DE2F98]();
}

uint64_t TelephonyBasebandResetModem()
{
  return MEMORY[0x1E0DE2FA0]();
}

uint64_t TelephonyBasebandResetSPMI()
{
  return MEMORY[0x1E0DE2FA8]();
}

uint64_t TelephonyBasebandSetBasebandProperty()
{
  return MEMORY[0x1E0DE2FB0]();
}

uint64_t TelephonyBasebandSetBasebandState()
{
  return MEMORY[0x1E0DE2FB8]();
}

uint64_t TelephonyBasebandSetChargerDesense()
{
  return MEMORY[0x1E0DE2FC0]();
}

uint64_t TelephonyBasebandSetManagerState()
{
  return MEMORY[0x1E0DE2FC8]();
}

uint64_t TelephonyBasebandSetPowerDebugOptions()
{
  return MEMORY[0x1E0DE2FD8]();
}

uint64_t TelephonyBasebandWatchdogStart()
{
  return MEMORY[0x1E0DE3508]();
}

uint64_t TelephonyBasebandWatchdogStop()
{
  return MEMORY[0x1E0DE3510]();
}

uint64_t TelephonyUtilDebugRegisterDelegate()
{
  return MEMORY[0x1E0DE3688]();
}

uint64_t TelephonyUtilDebugSetFlags()
{
  return MEMORY[0x1E0DE3690]();
}

uint64_t TelephonyUtilGetSystemTime()
{
  return MEMORY[0x1E0DE3518]();
}

uint64_t TelephonyUtilGetSystemWakeReason()
{
  return MEMORY[0x1E0DE3520]();
}

uint64_t TelephonyUtilIsCarrierBuild()
{
  return MEMORY[0x1E0DE3528]();
}

uint64_t TelephonyUtilIsInternalBuild()
{
  return MEMORY[0x1E0DE3530]();
}

uint64_t TelephonyUtilIsVendorBuild()
{
  return MEMORY[0x1E0DE3538]();
}

uint64_t TelephonyUtilSystemMachTime()
{
  return MEMORY[0x1E0DE3540]();
}

uint64_t TelephonyUtilTransportFree()
{
  return MEMORY[0x1E0DE3708]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
  MEMORY[0x1E0C80940](a1, a2, *(_QWORD *)&a3);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

uint64_t mav_router::device::controller::engage(mav_router::device::controller *this)
{
  return MEMORY[0x1E0DE6D98](this);
}

uint64_t capabilities::abs::shouldBoot(capabilities::abs *this)
{
  return MEMORY[0x1E0DE2FE0](this);
}

uint64_t capabilities::abs::TUDebugFlags(capabilities::abs *this)
{
  return MEMORY[0x1E0DE2FF0](this);
}

uint64_t capabilities::abs::supportsCoex(capabilities::abs *this)
{
  return MEMORY[0x1E0DE2FF8](this);
}

uint64_t capabilities::abs::getCPMSVariant(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3000](this);
}

uint64_t capabilities::abs::logScratchPath(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3008](this);
}

uint64_t capabilities::abs::logSnapshotPath(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3010](this);
}

uint64_t capabilities::abs::shouldSetRegion(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3018](this);
}

uint64_t capabilities::abs::supportsDesense(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3020](this);
}

uint64_t capabilities::abs::supportsMagSafe(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3028](this);
}

uint64_t capabilities::abs::CPMSDebounceTimer(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3048](this);
}

uint64_t capabilities::abs::LLDataInterfaceID(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3050](this);
}

uint64_t capabilities::abs::supportsCoexEur5G(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3058](this);
}

uint64_t capabilities::abs::shouldIgnoreResets(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3068](this);
}

uint64_t capabilities::abs::supportsRFSelfTest(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3070](this);
}

uint64_t capabilities::abs::supportsETSProtocol(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3078](this);
}

uint64_t capabilities::abs::supportsRadioHealth(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3080](this);
}

uint64_t capabilities::abs::dataPowerSaveEnabled(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3088](this);
}

uint64_t capabilities::abs::supportedSARFeatures(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3090](this);
}

uint64_t capabilities::abs::supportsRFFEScanData(capabilities::abs *this)
{
  return MEMORY[0x1E0DE30A0](this);
}

uint64_t capabilities::abs::QMIPacketMaxSizeBytes(capabilities::abs *this)
{
  return MEMORY[0x1E0DE30A8](this);
}

uint64_t capabilities::abs::supportsNetworkPolicy(capabilities::abs *this)
{
  return MEMORY[0x1E0DE30B8](this);
}

uint64_t capabilities::abs::thermalSensorMaxCount(capabilities::abs *this)
{
  return MEMORY[0x1E0DE30C0](this);
}

uint64_t capabilities::abs::dataFlowControlEnabled(capabilities::abs *this)
{
  return MEMORY[0x1E0DE30C8](this);
}

uint64_t capabilities::abs::defaultDataInterfaceID(capabilities::abs *this)
{
  return MEMORY[0x1E0DE30D0](this);
}

uint64_t capabilities::abs::fileSystemFlushTimeout(capabilities::abs *this)
{
  return MEMORY[0x1E0DE30D8](this);
}

uint64_t capabilities::abs::supportsChargerDesense(capabilities::abs *this)
{
  return MEMORY[0x1E0DE30E0](this);
}

uint64_t capabilities::abs::supportsResetSPMIEvent(capabilities::abs *this)
{
  return MEMORY[0x1E0DE30E8](this);
}

uint64_t capabilities::abs::dataAggregationProtocol(capabilities::abs *this)
{
  return MEMORY[0x1E0DE30F0](this);
}

uint64_t capabilities::abs::fileSystemFlushInterval(capabilities::abs *this)
{
  return MEMORY[0x1E0DE30F8](this);
}

uint64_t capabilities::abs::supportsAccessoryModule(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3100](this);
}

uint64_t capabilities::abs::supportsCMHandDetection(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3108](this);
}

uint64_t capabilities::abs::supportsFieldTestConfig(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3118](this);
}

uint64_t capabilities::abs::SMCThermalReportInterval(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3120](this);
}

uint64_t capabilities::abs::defaultSystemLogsHistory(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3128](this);
}

uint64_t capabilities::abs::supportsCalibrationQuery(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3138](this);
}

uint64_t capabilities::abs::supportsCoexGPSReporting(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3140](this);
}

uint64_t capabilities::abs::supportsSMCThermalReport(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3150](this);
}

uint64_t capabilities::abs::engageTimeoutScalingFactor(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3160](this);
}

uint64_t capabilities::abs::supportsCPMSConnectedState(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3168](this);
}

uint64_t capabilities::abs::supportsCPMSGetPowerFromBB(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3170](this);
}

uint64_t capabilities::abs::supportsEFSEraseOnBootLoop(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3178](this);
}

uint64_t capabilities::abs::dataAggregationMaxSizeBytes(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3180](this);
}

uint64_t capabilities::abs::supportsDataTransportService(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3190](this);
}

uint64_t capabilities::abs::LLDataAggregationMaxSizeBytes(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3198](this);
}

uint64_t capabilities::abs::supportsBatteryInfoMonitoring(capabilities::abs *this)
{
  return MEMORY[0x1E0DE31A0](this);
}

uint64_t capabilities::abs::supportsDisplayCoverAccessory(capabilities::abs *this)
{
  return MEMORY[0x1E0DE31A8](this);
}

uint64_t capabilities::abs::dataAggregationDatagramMaxCount(capabilities::abs *this)
{
  return MEMORY[0x1E0DE31B8](this);
}

uint64_t capabilities::abs::serviceInitTimeoutScalingFactor(capabilities::abs *this)
{
  return MEMORY[0x1E0DE31C0](this);
}

uint64_t capabilities::abs::supportsSmartConnectorAccessory(capabilities::abs *this)
{
  return MEMORY[0x1E0DE31C8](this);
}

uint64_t capabilities::abs::serviceSleepTimeoutScalingFactor(capabilities::abs *this)
{
  return MEMORY[0x1E0DE31D0](this);
}

uint64_t capabilities::abs::serviceStartTimeoutScalingFactor(capabilities::abs *this)
{
  return MEMORY[0x1E0DE31D8](this);
}

uint64_t capabilities::abs::LLDataAggregationDatagramMaxCount(capabilities::abs *this)
{
  return MEMORY[0x1E0DE31E0](this);
}

uint64_t capabilities::abs::resetAssertionTimeoutScalingFactor(capabilities::abs *this)
{
  return MEMORY[0x1E0DE31E8](this);
}

uint64_t capabilities::abs::traceTransportTimeoutScalingFactor(capabilities::abs *this)
{
  return MEMORY[0x1E0DE31F0](this);
}

uint64_t capabilities::abs::bootupAssertionTimeoutScalingFactor(capabilities::abs *this)
{
  return MEMORY[0x1E0DE31F8](this);
}

uint64_t capabilities::abs::serviceShutdownTimeoutScalingFactor(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3200](this);
}

uint64_t capabilities::abs::shutdownAssertionTimeoutScalingFactor(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3208](this);
}

uint64_t capabilities::abs::shouldUseMinBasebandTransportIOReadSize(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3210](this);
}

uint64_t capabilities::abs::shouldUseMinBasebandTransportIOReadCount(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3218](this);
}

uint64_t capabilities::abs::supportsWirelessTelemetryUsingMultiClientModel(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3220](this);
}

uint64_t capabilities::abs::operator&()
{
  return MEMORY[0x1E0DE3228]();
}

uint64_t capabilities::ipc::supportsPCI(capabilities::ipc *this)
{
  return MEMORY[0x1E0DE3250](this);
}

uint64_t capabilities::ipc::defaultLogLevel(capabilities::ipc *this)
{
  return MEMORY[0x1E0DE3258](this);
}

uint64_t capabilities::ipc::supportsIPMetadataTrailer(capabilities::ipc *this)
{
  return MEMORY[0x1E0DE3270](this);
}

uint64_t capabilities::ipc::defaultMHIConfigPayloadSizeBytes(capabilities::ipc *this)
{
  return MEMORY[0x1E0DE3278](this);
}

uint64_t capabilities::ipc::defaultPCIBinaryTraceHistorySizeMB(capabilities::ipc *this)
{
  return MEMORY[0x1E0DE3280](this);
}

uint64_t capabilities::pci::controlChannelCount(capabilities::pci *this)
{
  return MEMORY[0x1E0DE3288](this);
}

uint64_t capabilities::radio::supportsMESA(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3308](this);
}

uint64_t capabilities::radio::supportsUMTS(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3310](this);
}

uint64_t capabilities::radio::supportsDataService(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3328](this);
}

uint64_t capabilities::radio::supportsDeviceMaterial(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3330](this);
}

uint64_t capabilities::radio::supportsLowLatencyData(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3338](this);
}

uint64_t capabilities::radio::supportsMultiClientAWD(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3340](this);
}

uint64_t capabilities::radio::personalizedFirmwarePath(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3350](this);
}

uint64_t capabilities::radio::supportsAccessoryDetection(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3358](this);
}

uint64_t capabilities::radio::supportsAutomaticRadarFiling(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3368](this);
}

uint64_t capabilities::radio::supportsFactoryCalibrationV2(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3370](this);
}

uint64_t capabilities::radio::supportsBasebandStateController(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3378](this);
}

uint64_t capabilities::radio::supportsAccessoryDetectionForARTD(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3380](this);
}

uint64_t capabilities::radio::supportsAccessoryTypeDetectionForRF(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3388](this);
}

uint64_t capabilities::radio::supportsAccessoryTypeDetectionForARTD(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3390](this);
}

uint64_t capabilities::radio::ice(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3398](this);
}

uint64_t capabilities::radio::vendor(capabilities::radio *this)
{
  return MEMORY[0x1E0DE33A0](this);
}

uint64_t capabilities::radio::product(capabilities::radio *this)
{
  return MEMORY[0x1E0DE33A8](this);
}

uint64_t capabilities::radio::maverick(capabilities::radio *this)
{
  return MEMORY[0x1E0DE33B0](this);
}

uint64_t capabilities::radio::C2KDevice(capabilities::radio *this)
{
  return MEMORY[0x1E0DE33B8](this);
}

uint64_t capabilities::radio::mav20Plus(capabilities::radio *this)
{
  return MEMORY[0x1E0DE33C0](this);
}

uint64_t capabilities::radio::radioType(capabilities::radio *this)
{
  return MEMORY[0x1E0DE33D0](this);
}

uint64_t capabilities::trace::enabledByDefault(capabilities::trace *this)
{
  return MEMORY[0x1E0DE33D8](this);
}

uint64_t capabilities::trace::getCompressionMode(capabilities::trace *this)
{
  return MEMORY[0x1E0DE33E0](this);
}

uint64_t capabilities::trace::defaultFileSizeBytes(capabilities::trace *this)
{
  return MEMORY[0x1E0DE33E8](this);
}

uint64_t capabilities::trace::defaultHistorySizeMB(capabilities::trace *this)
{
  return MEMORY[0x1E0DE33F0](this);
}

uint64_t capabilities::trace::defaultSleepTraceMode(capabilities::trace *this)
{
  return MEMORY[0x1E0DE33F8](this);
}

uint64_t capabilities::trace::defaultMemoryFileMaxCount(capabilities::trace *this)
{
  return MEMORY[0x1E0DE3418](this);
}

uint64_t capabilities::trace::supportsDumpLogIndication(capabilities::trace *this)
{
  return MEMORY[0x1E0DE3420](this);
}

uint64_t capabilities::trace::supportsHighTPutByDefault(capabilities::trace *this)
{
  return MEMORY[0x1E0DE3428](this);
}

uint64_t capabilities::trace::supportsDataLoggingByDefault(capabilities::trace *this)
{
  return MEMORY[0x1E0DE3430](this);
}

uint64_t capabilities::trace::supportsDuplicateSignatureDetection(capabilities::trace *this)
{
  return MEMORY[0x1E0DE3440](this);
}

uint64_t capabilities::trace::allowed(capabilities::trace *this)
{
  return MEMORY[0x1E0DE3450](this);
}

uint64_t capabilities::txpower::supportsPPM(capabilities::txpower *this)
{
  return MEMORY[0x1E0DE3460](this);
}

uint64_t capabilities::txpower::timeoutConfig(capabilities::txpower *this)
{
  return MEMORY[0x1E0DE3468](this);
}

uint64_t capabilities::txpower::supportsMotion(capabilities::txpower *this)
{
  return MEMORY[0x1E0DE3470](this);
}

uint64_t capabilities::txpower::supportedFaceID(capabilities::txpower *this)
{
  return MEMORY[0x1E0DE3478](this);
}

uint64_t capabilities::txpower::supportsKeyboard(capabilities::txpower *this)
{
  return MEMORY[0x1E0DE3480](this);
}

uint64_t capabilities::txpower::supportsFrontCamera(capabilities::txpower *this)
{
  return MEMORY[0x1E0DE3488](this);
}

uint64_t capabilities::txpower::supportsAudioSpeaker(capabilities::txpower *this)
{
  return MEMORY[0x1E0DE3490](this);
}

uint64_t capabilities::txpower::supportsMotionAlways(capabilities::txpower *this)
{
  return MEMORY[0x1E0DE3498](this);
}

uint64_t capabilities::txpower::supportedControlInput(capabilities::txpower *this)
{
  return MEMORY[0x1E0DE34A0](this);
}

uint64_t capabilities::txpower::supportsAudioJackReport(capabilities::txpower *this)
{
  return MEMORY[0x1E0DE34A8](this);
}

uint64_t capabilities::txpower::supportsPowerChargerDesense(capabilities::txpower *this)
{
  return MEMORY[0x1E0DE34B0](this);
}

uint64_t capabilities::txpower::supportsPowerSourceDetection(capabilities::txpower *this)
{
  return MEMORY[0x1E0DE34B8](this);
}

uint64_t capabilities::txpower::supportsVideoAntennaSwitching(capabilities::txpower *this)
{
  return MEMORY[0x1E0DE34C0](this);
}

uint64_t capabilities::txpower::supportsAntennaFreeSpaceConfig(capabilities::txpower *this)
{
  return MEMORY[0x1E0DE34C8](this);
}

uint64_t capabilities::txpower::operator&()
{
  return MEMORY[0x1E0DE34D0]();
}

uint64_t capabilities::coredump::recoveryForControlMessageTimeout(capabilities::coredump *this)
{
  return MEMORY[0x1E0DE34F8](this);
}

uint64_t capabilities::coredump::operator&()
{
  return MEMORY[0x1E0DE3500]();
}

uint64_t mav_router_t::create()
{
  return MEMORY[0x1E0DE6DA0]();
}

uint64_t AppleSARHelper::callUserClientMethod(AppleSARHelper *this, uint64_t a2, const unint64_t *a3, uint64_t a4, const void *a5, uint64_t a6, unint64_t *a7, unsigned int *a8, void *a9, unint64_t a10)
{
  return MEMORY[0x1E0CFE158](this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t AppleSARHelper::create_default_global(AppleSARHelper *this)
{
  return MEMORY[0x1E0CFE160](this);
}

uint64_t AppleSARHelper::registerSARServiceCallback()
{
  return MEMORY[0x1E0CFE168]();
}

uint64_t _ATCSException::setExceptionHandler()
{
  return MEMORY[0x1E0DDCED8]();
}

uint64_t ATCSRouterIPCDriver::resetErrorState(ATCSRouterIPCDriver *this)
{
  return MEMORY[0x1E0DDCEE0](this);
}

uint64_t ATCSRouterIPCDriver::create()
{
  return MEMORY[0x1E0DDCEE8]();
}

void QMIServerConnection::QMIServerConnection(QMIServerConnection *this)
{
  MEMORY[0x1E0DDCEF0](this);
}

uint64_t AppleBasebandManager::setEventHandler()
{
  return MEMORY[0x1E0CFAEE8]();
}

uint64_t AppleBasebandManager::create()
{
  return MEMORY[0x1E0CFAEF0]();
}

uint64_t AppleBasebandManager::perform()
{
  return MEMORY[0x1E0CFAEF8]();
}

uint64_t AppleBasebandManager::eventsOn(AppleBasebandManager *this)
{
  return MEMORY[0x1E0CFAF00](this);
}

uint64_t CommandDriverFactory::setRegistry()
{
  return MEMORY[0x1E0DDF1A8]();
}

uint64_t CommandDriverFactory::create_default_global(CommandDriverFactory *this)
{
  return MEMORY[0x1E0DDF1B0](this);
}

void wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  MEMORY[0x1E0DE8210](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(wireless_diagnostics::google::protobuf::io::CodedInputStream *this)
{
  return MEMORY[0x1E0DE8230](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int *a2)
{
  return MEMORY[0x1E0DE8238](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unint64_t *a2)
{
  return MEMORY[0x1E0DE8240](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(wireless_diagnostics::google::protobuf::io::CodedInputStream *this)
{
  return MEMORY[0x1E0DE8270](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(wireless_diagnostics::google::protobuf::io::CodedInputStream *this)
{
  return MEMORY[0x1E0DE8278](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(wireless_diagnostics::google::protobuf::io::CodedOutputStream *this)
{
  return MEMORY[0x1E0DE8298](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(wireless_diagnostics::google::protobuf::io::CodedOutputStream *this)
{
  return MEMORY[0x1E0DE82B8](this);
}

uint64_t wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage()
{
  return MEMORY[0x1E0DE82E0]();
}

void wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage(wireless_diagnostics::google::protobuf::internal::LogMessage *this)
{
  MEMORY[0x1E0DE82E8](this);
}

uint64_t wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<()
{
  return MEMORY[0x1E0DE82F0]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::OnShutdown(wireless_diagnostics::google::protobuf::internal *this, void (*a2)(void))
{
  return MEMORY[0x1E0DE82F8](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=()
{
  return MEMORY[0x1E0DE8300]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::VerifyVersion(wireless_diagnostics::google::protobuf::internal *this, uint64_t a2, uint64_t a3, const char *a4)
{
  return MEMORY[0x1E0DE8340](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString()
{
  return MEMORY[0x1E0DE8348]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString()
{
  return MEMORY[0x1E0DE8380]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1E0DE8388](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1E0DE8390](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, const wireless_diagnostics::google::protobuf::MessageLite *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1E0DE83A8](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  return MEMORY[0x1E0DE83C0](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1E0DE83C8](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap()
{
  return MEMORY[0x1E0DE83E0]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *this)
{
  return MEMORY[0x1E0DE83E8](this);
}

uint64_t ApplePDPHelperInterface::getInstance(ApplePDPHelperInterface *this)
{
  return MEMORY[0x1E0CFE0C0](this);
}

uint64_t ApplePDPHelperInterface::enableMetadataTrailer(ApplePDPHelperInterface *this, uint64_t a2, BOOL *a3)
{
  return MEMORY[0x1E0CFE0C8](this, a2, a3);
}

uint64_t ApplePDPHelperInterface::enableLowPowerPDPThrottle(ApplePDPHelperInterface *this)
{
  return MEMORY[0x1E0CFE0D0](this);
}

uint64_t ApplePDPHelperInterface::activateLowPowerPDPThrottle(ApplePDPHelperInterface *this)
{
  return MEMORY[0x1E0CFE0D8](this);
}

uint64_t ApplePDPHelperInterface::getNumLowPowerPDPThrottleStats()
{
  return MEMORY[0x1E0CFE0E0]();
}

uint64_t abm::HelperClient::registerForHelperReady()
{
  return MEMORY[0x1E0CF0FD8]();
}

uint64_t abm::HelperClient::create()
{
  return MEMORY[0x1E0CF0FE0]();
}

uint64_t abm::HelperClient::perform()
{
  return MEMORY[0x1E0CF0FE8]();
}

{
  return MEMORY[0x1E0CF0FF0]();
}

uint64_t abm::AccessoryInfo::create()
{
  return MEMORY[0x1E0CFAFC8]();
}

uint64_t abm::AccessorySimulate::create()
{
  return MEMORY[0x1E0CFB1A0]();
}

uint64_t abm::AccessorySimulate::create(abm::AccessorySimulate *this)
{
  return MEMORY[0x1E0CFB1A8](this);
}

uint64_t abm::AccessorySimulate::toDict(abm::AccessorySimulate *this)
{
  return MEMORY[0x1E0CFB1B0](this);
}

uint64_t abm::trace::isSupported()
{
  return MEMORY[0x1E0D01A08]();
}

uint64_t abm::client::Command::create()
{
  return MEMORY[0x1E0CFC178]();
}

uint64_t abm::helper::asEnum(abm::helper *this, const char *a2)
{
  return MEMORY[0x1E0CF11C0](this, a2);
}

uint64_t abm::helper::asString()
{
  return MEMORY[0x1E0CF11C8]();
}

{
  return MEMORY[0x1E0CF11D0]();
}

{
  return MEMORY[0x1E0CF11D8]();
}

{
  return MEMORY[0x1E0CF11E0]();
}

uint64_t abm::asString()
{
  return MEMORY[0x1E0CFC1A0]();
}

{
  return MEMORY[0x1E0CFC1A8]();
}

{
  return MEMORY[0x1E0CFC1B0]();
}

{
  return MEMORY[0x1E0CFC1B8]();
}

{
  return MEMORY[0x1E0CFC1C0]();
}

{
  return MEMORY[0x1E0CFC1C8]();
}

{
  return MEMORY[0x1E0CFC1D0]();
}

{
  return MEMORY[0x1E0CFC1D8]();
}

{
  return MEMORY[0x1E0CFC1E0]();
}

{
  return MEMORY[0x1E0CFC1E8]();
}

uint64_t awd::AppContext::setHandler()
{
  return MEMORY[0x1E0DDF1C0]();
}

{
  return MEMORY[0x1E0DDF1C8]();
}

{
  return MEMORY[0x1E0DDF1D0]();
}

uint64_t awd::AppContext::setProperties()
{
  return MEMORY[0x1E0DDF1D8]();
}

uint64_t awd::AwdCommandDriver::checkIn()
{
  return MEMORY[0x1E0DDF1E0]();
}

uint64_t awd::asString()
{
  return MEMORY[0x1E0DDF1F8]();
}

{
  return MEMORY[0x1E0DDF208]();
}

uint64_t ctu::LogMessage::LogMessage()
{
  return MEMORY[0x1E0DE3718]();
}

uint64_t ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase()
{
  return MEMORY[0x1E0DE3720]();
}

uint64_t ctu::OsLogLogger::OsLogLogger(ctu::OsLogLogger *this, const char *a2, const char *a3)
{
  return MEMORY[0x1E0DE3730](this, a2, a3);
}

uint64_t ctu::OsLogLogger::OsLogLogger()
{
  return MEMORY[0x1E0DE3738]();
}

uint64_t ctu::OsLogLogger::OsLogLogger(ctu::OsLogLogger *this, const ctu::OsLogLogger *a2)
{
  return MEMORY[0x1E0DE3740](this, a2);
}

void ctu::OsLogLogger::~OsLogLogger(ctu::OsLogLogger *this)
{
  MEMORY[0x1E0DE3748](this);
}

uint64_t ctu::OsLogContext::OsLogContext()
{
  return MEMORY[0x1E0DE3750]();
}

uint64_t ctu::OsLogContext::OsLogContext(ctu::OsLogContext *this, const char *a2, const char *a3)
{
  return MEMORY[0x1E0DE3758](this, a2, a3);
}

uint64_t ctu::OsLogContext::OsLogContext(ctu::OsLogContext *this, const ctu::OsLogContext *a2)
{
  return MEMORY[0x1E0DE3760](this, a2);
}

void ctu::OsLogContext::~OsLogContext(ctu::OsLogContext *this)
{
  MEMORY[0x1E0DE3768](this);
}

uint64_t ctu::OsLogContext::operator=()
{
  return MEMORY[0x1E0DE3770]();
}

uint64_t ctu::StaticLogger::StaticLogger()
{
  return MEMORY[0x1E0DE3778]();
}

uint64_t ctu::StaticLogger::StaticLogger(ctu::StaticLogger *this)
{
  return MEMORY[0x1E0DE3780](this);
}

void ctu::StaticLogger::~StaticLogger(ctu::StaticLogger *this)
{
  MEMORY[0x1E0DE3788](this);
}

uint64_t ctu::TrackedLogger::registerLoggerToServer()
{
  return MEMORY[0x1E0DE3790]();
}

uint64_t ctu::split_any_copy()
{
  return MEMORY[0x1E0DE37A0]();
}

uint64_t ctu::LogMessageBuffer::takeString(ctu::LogMessageBuffer *this)
{
  return MEMORY[0x1E0DE37D8](this);
}

uint64_t ctu::LogMessageBuffer::takeMetadata(ctu::LogMessageBuffer *this)
{
  return MEMORY[0x1E0DE37E0](this);
}

uint64_t ctu::LogMessageBuffer::vprintf(ctu::LogMessageBuffer *this, const char *a2, char *a3)
{
  return MEMORY[0x1E0DE37F0](this, a2, a3);
}

uint64_t ctu::LogMessageBuffer::LogMessageBuffer(ctu::LogMessageBuffer *this)
{
  return MEMORY[0x1E0DE37F8](this);
}

void ctu::LogMessageBuffer::~LogMessageBuffer(ctu::LogMessageBuffer *this)
{
  MEMORY[0x1E0DE3800](this);
}

uint64_t ctu::LoggerCommonBase::setLogLevel()
{
  return MEMORY[0x1E0DE3810]();
}

uint64_t ctu::LoggerCommonBase::setInheritedLogLevel()
{
  return MEMORY[0x1E0DE3818]();
}

uint64_t ctu::LoggerCommonBase::LoggerCommonBase()
{
  return MEMORY[0x1E0DE3820]();
}

{
  return MEMORY[0x1E0DE3828]();
}

uint64_t ctu::LoggerCommonBase::operator=()
{
  return MEMORY[0x1E0DE3830]();
}

uint64_t ctu::XpcJetsamAssertion::createActivity()
{
  return MEMORY[0x1E0DE3840]();
}

uint64_t ctu::XpcJetsamAssertion::create_default_global(ctu::XpcJetsamAssertion *this)
{
  return MEMORY[0x1E0DE3848](this);
}

uint64_t ctu::DispatchTimerService::create()
{
  return MEMORY[0x1E0DE3850]();
}

uint64_t ctu::cf::MakeCFString::MakeCFString(ctu::cf::MakeCFString *this, const char *a2)
{
  return MEMORY[0x1E0DE3858](this, a2);
}

void ctu::cf::MakeCFString::~MakeCFString(ctu::cf::MakeCFString *this)
{
  MEMORY[0x1E0DE3860](this);
}

uint64_t ctu::cf::convert_copy(ctu::cf *this, const __CFString **a2, const char *a3, uint64_t a4, const __CFAllocator *a5)
{
  return MEMORY[0x1E0DE3868](this, a2, a3, a4, a5);
}

uint64_t ctu::cf::convert_copy()
{
  return MEMORY[0x1E0DE3870]();
}

uint64_t ctu::cf::dict_adapter::dict_adapter(ctu::cf::dict_adapter *this, const __CFDictionary *a2)
{
  return MEMORY[0x1E0DE3880](this, a2);
}

uint64_t ctu::cf::dict_adapter::dict_adapter(ctu::cf::dict_adapter *this, const ctu::cf::dict_adapter *a2)
{
  return MEMORY[0x1E0DE3888](this, a2);
}

void ctu::cf::dict_adapter::~dict_adapter(ctu::cf::dict_adapter *this)
{
  MEMORY[0x1E0DE3890](this);
}

uint64_t ctu::cf::plist_adapter::plist_adapter(ctu::cf::plist_adapter *this, const __CFString *a2, const __CFString *a3)
{
  return MEMORY[0x1E0DE3898](this, a2, a3);
}

void ctu::cf::plist_adapter::~plist_adapter(ctu::cf::plist_adapter *this)
{
  MEMORY[0x1E0DE38A0](this);
}

uint64_t ctu::cf::show(ctu::cf *this, const void *a2)
{
  return MEMORY[0x1E0DE38A8](this, a2);
}

uint64_t ctu::cf::assign()
{
  return MEMORY[0x1E0DE38B0]();
}

{
  return MEMORY[0x1E0DE38B8]();
}

{
  return MEMORY[0x1E0DE38C0]();
}

uint64_t ctu::cf::assign(ctu::cf *this, signed __int8 *a2, const __CFNumber *a3)
{
  return MEMORY[0x1E0DE38D0](this, a2, a3);
}

uint64_t ctu::cf::assign(ctu::cf *this, BOOL *a2, const __CFBoolean *a3)
{
  return MEMORY[0x1E0DE38D8](this, a2, a3);
}

uint64_t ctu::cf::assign(ctu::cf *this, int *a2, const __CFNumber *a3)
{
  return MEMORY[0x1E0DE38F0](this, a2, a3);
}

uint64_t ctu::cf::assign(ctu::cf *this, unsigned int *a2, const __CFNumber *a3)
{
  return MEMORY[0x1E0DE38F8](this, a2, a3);
}

uint64_t ctu::cf::assign(ctu::cf *this, uint64_t *a2, const __CFNumber *a3)
{
  return MEMORY[0x1E0DE3900](this, a2, a3);
}

{
  return MEMORY[0x1E0DE3918](this, a2, a3);
}

uint64_t ctu::cf::assign(ctu::cf *this, unsigned __int16 *a2, const __CFNumber *a3)
{
  return MEMORY[0x1E0DE3910](this, a2, a3);
}

uint64_t ctu::fs::remove_dir()
{
  return MEMORY[0x1E0DE3920]();
}

uint64_t ctu::fs::file_exists()
{
  return MEMORY[0x1E0DE3928]();
}

uint64_t ctu::fs::is_directory()
{
  return MEMORY[0x1E0DE3938]();
}

uint64_t ctu::fs::get_file_size()
{
  return MEMORY[0x1E0DE3940]();
}

uint64_t ctu::fs::create_directory()
{
  return MEMORY[0x1E0DE3948]();
}

uint64_t ctu::fs::get_filtered_files()
{
  return MEMORY[0x1E0DE3950]();
}

uint64_t ctu::fs::get_unique_filename()
{
  return MEMORY[0x1E0DE3958]();
}

uint64_t ctu::fs::rename()
{
  return MEMORY[0x1E0DE3970]();
}

uint64_t ctu::Clock::now_in_nanoseconds(ctu::Clock *this)
{
  return MEMORY[0x1E0DE39A8](this);
}

uint64_t ctu::iokit::Controller::setMesaQuality()
{
  return MEMORY[0x1E0DE3548]();
}

uint64_t ctu::iokit::Controller::setMesaCallback()
{
  return MEMORY[0x1E0DE3550]();
}

uint64_t ctu::iokit::Controller::queryPowerSource(ctu::iokit::Controller *this)
{
  return MEMORY[0x1E0DE3558](this);
}

uint64_t ctu::iokit::Controller::setFaceIDCallback()
{
  return MEMORY[0x1E0DE3560]();
}

uint64_t ctu::iokit::Controller::acquireMesaService(ctu::iokit::Controller *this)
{
  return MEMORY[0x1E0DE3568](this);
}

uint64_t ctu::iokit::Controller::setDisplayCallback()
{
  return MEMORY[0x1E0DE3570]();
}

uint64_t ctu::iokit::Controller::setupCameraService(ctu::iokit::Controller *this)
{
  return MEMORY[0x1E0DE3578](this);
}

uint64_t ctu::iokit::Controller::setAccessoryCallback()
{
  return MEMORY[0x1E0DE3580]();
}

uint64_t ctu::iokit::Controller::setFrontCameraCallback()
{
  return MEMORY[0x1E0DE3588]();
}

uint64_t ctu::iokit::Controller::setPowerSourceCallback()
{
  return MEMORY[0x1E0DE3590]();
}

uint64_t ctu::iokit::Controller::registerForBatteryInfoChange()
{
  return MEMORY[0x1E0DE3598]();
}

uint64_t ctu::iokit::Controller::stopBatteryInfoNotifications(ctu::iokit::Controller *this)
{
  return MEMORY[0x1E0DE35A0](this);
}

uint64_t ctu::iokit::Controller::stopPowerSourceNotifications(ctu::iokit::Controller *this)
{
  return MEMORY[0x1E0DE35A8](this);
}

uint64_t ctu::iokit::Controller::getAccessoryPrimaryPortNumber(ctu::iokit::Controller *this)
{
  return MEMORY[0x1E0DE35B0](this);
}

uint64_t ctu::iokit::Controller::stopDisplayCoverStateNotifications(ctu::iokit::Controller *this)
{
  return MEMORY[0x1E0DE35B8](this);
}

uint64_t ctu::iokit::Controller::registerForDisplayCoverStateChanged()
{
  return MEMORY[0x1E0DE35C0]();
}

uint64_t ctu::iokit::Controller::create()
{
  return MEMORY[0x1E0DE35C8]();
}

uint64_t ctu::iokit::IOHIDController::isProxCovered(ctu::iokit::IOHIDController *this)
{
  return MEMORY[0x1E0DE35D0](this);
}

uint64_t ctu::iokit::IOHIDController::queryHIDEventTrigger(ctu::iokit::IOHIDController *this)
{
  return MEMORY[0x1E0DE35D8](this);
}

uint64_t ctu::iokit::IOHIDController::registerProxCallback()
{
  return MEMORY[0x1E0DE35E0]();
}

uint64_t ctu::iokit::IOHIDController::registerKeyboardCallback()
{
  return MEMORY[0x1E0DE35E8]();
}

uint64_t ctu::iokit::IOHIDController::stop(ctu::iokit::IOHIDController *this)
{
  return MEMORY[0x1E0DE35F0](this);
}

uint64_t ctu::iokit::IOHIDController::start(ctu::iokit::IOHIDController *this)
{
  return MEMORY[0x1E0DE35F8](this);
}

uint64_t ctu::iokit::IOHIDController::create()
{
  return MEMORY[0x1E0DE3600]();
}

uint64_t ctu::iokit::IOPortUSBCController::registerCallback()
{
  return MEMORY[0x1E0DE3608]();
}

uint64_t ctu::iokit::IOPortUSBCController::create(ctu::iokit::IOPortUSBCController *this, queue a2, const char *a3, const char *a4)
{
  return MEMORY[0x1E0DE3610](this, a2.fObj.fObj, a3, a4);
}

uint64_t ctu::iokit::IOPortUSBCController::asString()
{
  return MEMORY[0x1E0DE3618]();
}

uint64_t ctu::iokit::asString()
{
  return MEMORY[0x1E0DE3620]();
}

{
  return MEMORY[0x1E0DE3628]();
}

{
  return MEMORY[0x1E0DE3630]();
}

{
  return MEMORY[0x1E0DE3638]();
}

uint64_t ctu::iokit::operator&()
{
  return MEMORY[0x1E0DE3640]();
}

uint64_t ctu::power::manager::registerListener()
{
  return MEMORY[0x1E0DE3648]();
}

uint64_t ctu::power::manager::get(ctu::power::manager *this)
{
  return MEMORY[0x1E0DE3650](this);
}

uint64_t ctu::power::manager::asCString(ctu::power::manager *this)
{
  return MEMORY[0x1E0DE3658](this);
}

uint64_t ctu::power::assertion::createInternal()
{
  return MEMORY[0x1E0DE3660]();
}

uint64_t ctu::power::assertion::assertion(ctu::power::assertion *this)
{
  return MEMORY[0x1E0DE3668](this);
}

uint64_t ctu::asChar()
{
  return MEMORY[0x1E0DE39B0]();
}

uint64_t ctu::assign()
{
  return MEMORY[0x1E0DE39B8]();
}

uint64_t ctu::Gestalt::create_default_global(ctu::Gestalt *this)
{
  return MEMORY[0x1E0DE39C0](this);
}

uint64_t ctu::tokenize()
{
  return MEMORY[0x1E0DE39C8]();
}

uint64_t ctu::LogServer::setEnabled(ctu::LogServer *this)
{
  return MEMORY[0x1E0DE39D0](this);
}

uint64_t ctu::LogServer::updateConfig()
{
  return MEMORY[0x1E0DE39D8]();
}

uint64_t ctu::LogServer::log()
{
  return MEMORY[0x1E0DE39E0]();
}

uint64_t ctu::LogServer::start(ctu::LogServer *this)
{
  return MEMORY[0x1E0DE39E8](this);
}

uint64_t ctu::LogServer::create()
{
  return MEMORY[0x1E0DE39F0]();
}

uint64_t ctu::LogServer::addWriter()
{
  return MEMORY[0x1E0DE39F8]();
}

uint64_t ctu::XpcClient::setServer_sync()
{
  return MEMORY[0x1E0DE3A00]();
}

uint64_t ctu::XpcClient::XpcClient()
{
  return MEMORY[0x1E0DE3A08]();
}

void ctu::XpcClient::~XpcClient(ctu::XpcClient *this)
{
  MEMORY[0x1E0DE3A18](this);
}

uint64_t ctu::XpcServer::setListener_sync()
{
  return MEMORY[0x1E0DE3A20]();
}

uint64_t ctu::XpcServer::startListener_sync(ctu::XpcServer *this)
{
  return MEMORY[0x1E0DE3A28](this);
}

uint64_t ctu::XpcServer::XpcServer()
{
  return MEMORY[0x1E0DE3A30]();
}

void ctu::XpcServer::~XpcServer(ctu::XpcServer *this)
{
  MEMORY[0x1E0DE3A38](this);
}

uint64_t ctu::cf_to_xpc(ctu *this, const void *a2)
{
  return MEMORY[0x1E0DE3A40](this, a2);
}

uint64_t ctu::xpc_to_cf(ctu *this, void *a2)
{
  return MEMORY[0x1E0DE3A48](this, a2);
}

uint64_t ctu::operator<<()
{
  return MEMORY[0x1E0DE3A50]();
}

{
  return MEMORY[0x1E0DE3A58]();
}

{
  return MEMORY[0x1E0DE3A60]();
}

{
  return MEMORY[0x1E0DE3A68]();
}

uint64_t pci::event::Listener::create()
{
  return MEMORY[0x1E0DE2CE8]();
}

uint64_t qmi::MessageBase::setParsingErrorHandler(qmi::MessageBase *this, BOOL (*a2)(unsigned __int16, unsigned __int16, const unsigned __int8 *, unint64_t))
{
  return MEMORY[0x1E0DE2D30](this, a2);
}

uint64_t qmi::asShortString()
{
  return MEMORY[0x1E0DE2D70]();
}

uint64_t qmi::MutableMessageBase::setWriteErrorHandler()
{
  return MEMORY[0x1E0DE2D88]();
}

uint64_t qmi::QMuxServerAccepter::setValidationStrategy()
{
  return MEMORY[0x1E0DDCF20]();
}

uint64_t qmi::QMuxServerAccepter::QMuxServerAccepter()
{
  return MEMORY[0x1E0DDCF28]();
}

uint64_t qmi::parse()
{
  return MEMORY[0x1E0DE2DC0]();
}

uint64_t qmi::asString()
{
  return MEMORY[0x1E0DE2DC8]();
}

uint64_t sar::toStringAccessory(sar *this)
{
  return MEMORY[0x1E0CFE170](this);
}

uint64_t wis::MetricFactory::getSharedMetricFactory(wis::MetricFactory *this)
{
  return MEMORY[0x1E0DD9B10](this);
}

uint64_t wis::MetricFactory::newMetricContainerWithIdentifier(wis::MetricFactory *this)
{
  return MEMORY[0x1E0DD9B18](this);
}

uint64_t wis::MetricContainer::storeMetric(wis::MetricContainer *this, uint64_t a2, uint64_t a3, const wireless_diagnostics::google::protobuf::MessageLite *a4)
{
  return MEMORY[0x1E0DD9B20](this, a2, a3, a4);
}

void wis::MetricContainer::~MetricContainer(wis::MetricContainer *this)
{
  MEMORY[0x1E0DD9B28](this);
}

uint64_t wis::getWISTimestamp(wis *this)
{
  return MEMORY[0x1E0DD9B30](this);
}

uint64_t wis::WISServerConnection::SubmitMetric(wis::WISServerConnection *this, wis::MetricContainer *a2)
{
  return MEMORY[0x1E0DD9B38](this, a2);
}

uint64_t wis::WISServerConnection::RegisterCallbackForTimer()
{
  return MEMORY[0x1E0DD9B40]();
}

uint64_t wis::WISServerConnection::RegisterQueriableMetricCallbackForIdentifier()
{
  return MEMORY[0x1E0DD9B48]();
}

uint64_t wis::WISServerConnection::WISServerConnection(wis::WISServerConnection *this)
{
  return MEMORY[0x1E0DD9B50](this);
}

void wis::WISServerConnection::~WISServerConnection(wis::WISServerConnection *this)
{
  MEMORY[0x1E0DD9B58](this);
}

uint64_t xpc::dyn_cast_or_default(xpc *this, const object *a2, const char *a3)
{
  return MEMORY[0x1E0DE3A78](this, a2, a3);
}

uint64_t xpc::dyn_cast_or_default()
{
  return MEMORY[0x1E0DE3A80]();
}

{
  return MEMORY[0x1E0DE3A88]();
}

uint64_t xpc::dyn_cast_or_default(xpc *this, const object *a2)
{
  return MEMORY[0x1E0DE3A90](this, a2);
}

{
  return MEMORY[0x1E0DE3AA0](this, a2);
}

{
  return MEMORY[0x1E0DE3AA8](this, a2);
}

{
  return MEMORY[0x1E0DE3AB0](this, a2);
}

{
  return MEMORY[0x1E0DE3AB8](this, a2);
}

{
  return MEMORY[0x1E0DE3AC0](this, a2);
}

uint64_t xpc::dyn_cast_or_default(xpc *this, const object *a2, double a3)
{
  return MEMORY[0x1E0DE3A98](this, a2, a3);
}

uint64_t xpc::bridge(xpc *this, const object *a2)
{
  return MEMORY[0x1E0DE3AC8](this, a2);
}

uint64_t QMux::invokeReset()
{
  return MEMORY[0x1E0DDCF70]();
}

uint64_t QMux::enterPowerMode()
{
  return MEMORY[0x1E0DDCF78]();
}

uint64_t QMux::setDriverAndCookie()
{
  return MEMORY[0x1E0DDCF80]();
}

uint64_t QMux::getQMIPowerDownMessages(QMux *this)
{
  return MEMORY[0x1E0DDCF88](this);
}

uint64_t QMux::stop(QMux *this)
{
  return MEMORY[0x1E0DDCF90](this);
}

uint64_t QMux::start(QMux *this)
{
  return MEMORY[0x1E0DDCF98](this);
}

uint64_t QMux::shutdown(QMux *this)
{
  return MEMORY[0x1E0DDCFA0](this);
}

uint64_t QMux::QMux()
{
  return MEMORY[0x1E0DDCFA8]();
}

void QMux::QMux(QMux *this)
{
  MEMORY[0x1E0DDCFB0](this);
}

void QMux::~QMux(QMux *this)
{
  MEMORY[0x1E0DDCFB8](this);
}

uint64_t util::writeJSON()
{
  return MEMORY[0x1E0D01AB0]();
}

uint64_t radio::asStringV2()
{
  return MEMORY[0x1E0DDF760]();
}

uint64_t radio::CommandDriver::watchClientState()
{
  return MEMORY[0x1E0DDF7B0]();
}

uint64_t radio::CommandDriver::watchOperatingMode()
{
  return MEMORY[0x1E0DDF7D8]();
}

uint64_t radio::RFCalibration_t::fill()
{
  return MEMORY[0x1E0DDF8E8]();
}

uint64_t radio::RFCalibration_t::toString(radio::RFCalibration_t *this)
{
  return MEMORY[0x1E0DDF8F0](this);
}

uint64_t radio::RFCalibration_t::RFCalibration_t(radio::RFCalibration_t *this)
{
  return MEMORY[0x1E0DDF8F8](this);
}

uint64_t radio::BasebandProperties::create()
{
  return MEMORY[0x1E0DDF948]();
}

uint64_t radio::HealthCommandDriver::LinkStats::LinkStats(radio::HealthCommandDriver::LinkStats *this)
{
  return MEMORY[0x1E0DDF970](this);
}

uint64_t radio::asString()
{
  return MEMORY[0x1E0DDFA58]();
}

{
  return MEMORY[0x1E0DDFA60]();
}

uint64_t trace::toString()
{
  return MEMORY[0x1E0D01AF0]();
}

void Factory::Factory(Factory *this)
{
  MEMORY[0x1E0DDFD48](this);
}

void Factory::~Factory(Factory *this)
{
  MEMORY[0x1E0DDFD50](this);
}

uint64_t antenna::CommandDriver::registerHandler()
{
  return MEMORY[0x1E0DDFA78]();
}

void antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(antenna::AntennaCommandDriverDelegateInterface *this)
{
  MEMORY[0x1E0DDFBF0](this);
}

uint64_t Registry::getServerConnection(Registry *this)
{
  return MEMORY[0x1E0DDFD58](this);
}

void Registry::Registry(Registry *this)
{
  MEMORY[0x1E0DDFD60](this);
}

uint64_t mav_router_t::get_channel_for_service()
{
  return MEMORY[0x1E0DE6DA8]();
}

uint64_t abm::client::Event::name(abm::client::Event *this)
{
  return MEMORY[0x1E0CFC250](this);
}

uint64_t abm::client::Event::getData(abm::client::Event *this)
{
  return MEMORY[0x1E0CFC258](this);
}

uint64_t awd::AppContext::getProperties(awd::AppContext *this)
{
  return MEMORY[0x1E0DDFC60](this);
}

uint64_t awd::AppContext::getAppID(awd::AppContext *this)
{
  return MEMORY[0x1E0DDFC68](this);
}

uint64_t ctu::LoggerCommonBase::getLogDomain(ctu::LoggerCommonBase *this)
{
  return MEMORY[0x1E0DE3AD8](this);
}

uint64_t ctu::LoggerCommonBase::getLocalLogLevel(ctu::LoggerCommonBase *this)
{
  return MEMORY[0x1E0DE3AE0](this);
}

uint64_t ctu::cf::map_adapter::copyCFDataRef(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x1E0DE3AE8](this, a2);
}

uint64_t ctu::cf::map_adapter::copyCFArrayRef(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x1E0DE3AF0](this, a2);
}

uint64_t ctu::cf::map_adapter::copyCFNumberRef(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x1E0DE3AF8](this, a2);
}

uint64_t ctu::cf::map_adapter::copyCFDictionaryRef(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x1E0DE3B00](this, a2);
}

uint64_t ctu::cf::map_adapter::getInt(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x1E0DE3B08](this, a2);
}

uint64_t ctu::cf::map_adapter::getBool(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x1E0DE3B10](this, a2);
}

uint64_t ctu::cf::map_adapter::getDouble(ctu::cf::map_adapter *this, const __CFString *a2, double a3)
{
  return MEMORY[0x1E0DE3B18](this, a2, a3);
}

uint64_t ctu::cf::map_adapter::getString()
{
  return MEMORY[0x1E0DE3B20]();
}

uint64_t ctu::LogServer::getConfig(ctu::LogServer *this)
{
  return MEMORY[0x1E0DE3B38](this);
}

uint64_t ctu::XpcServer::getListener_sync(ctu::XpcServer *this)
{
  return MEMORY[0x1E0DE3B40](this);
}

uint64_t xpc::object::to_string(xpc::object *this)
{
  return MEMORY[0x1E0DE3B48](this);
}

uint64_t QMux::isPoweredDown(QMux *this)
{
  return MEMORY[0x1E0DDD050](this);
}

uint64_t QMux::getName(QMux *this)
{
  return MEMORY[0x1E0DDD058](this);
}

uint64_t QMux::dumpState(QMux *this)
{
  return MEMORY[0x1E0DDD060](this);
}

uint64_t QMux::isRunning(QMux *this)
{
  return MEMORY[0x1E0DDD068](this);
}

uint64_t Registry::getRegistryModel(Registry *this)
{
  return MEMORY[0x1E0DDFD68](this);
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return MEMORY[0x1E0DE41D8](this, __s);
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x1E0DE4240](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1E0DE4248](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1E0DE4258](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::logic_error *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4298](this, a2);
}

void std::length_error::~length_error(std::length_error *this)
{
  MEMORY[0x1E0DE42D0](this);
}

{
  MEMORY[0x1E0DE42D8](this);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4308](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x1E0DE4320](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4330](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
  MEMORY[0x1E0DE4340](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x1E0DE43B0](this, *(_QWORD *)&__ecode);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1E0DE4438](this, __n, __c);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4470](this, __pos, __s, __n);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x1E0DE44B8](this, __c);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1E0DE44D8](this, __str);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x1E0DE4590]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x1E0DE4598]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x1E0DE45A8]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x1E0DE45B0]();
}

uint64_t std::istream::peek()
{
  return MEMORY[0x1E0DE45C8]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x1E0DE45D0]();
}

uint64_t std::istream::seekg()
{
  return MEMORY[0x1E0DE45E8]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x1E0DE45F0]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x1E0DE4608]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x1E0DE4628]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x1E0DE4698]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x1E0DE46A0]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x1E0DE46A8]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1E0DE46B0]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1E0DE46B8]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1E0DE46C8]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1E0DE46E0]();
}

{
  return MEMORY[0x1E0DE46E8]();
}

{
  return MEMORY[0x1E0DE4700]();
}

{
  return MEMORY[0x1E0DE4708]();
}

{
  return MEMORY[0x1E0DE4710]();
}

{
  return MEMORY[0x1E0DE4718]();
}

{
  return MEMORY[0x1E0DE4730]();
}

{
  return MEMORY[0x1E0DE4738]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1E0DE47A8]();
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x1E0DE47C8](__s, __icase);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1E0DE47E0]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1E0DE47E8]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1E0DE48F8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x1E0DE4910](retstr, __s);
}

uint64_t std::stol(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x1E0DE4A80](__str, __idx, *(_QWORD *)&__base);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA0](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA8](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x1E0DE4AB8](this);
}

unint64_t std::stoul(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x1E0DE4AC8](__str, __idx, *(_QWORD *)&__base);
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x1E0DE4B88](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x1E0DE4B90](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x1E0DE4B98](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x1E0DE4C50](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x1E0DE4C68](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x1E0DE4C80](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1E0DE4D28]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D58](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D60](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x1E0DE4D70](retstr, __val);
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x1E0DE4DD8](this);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

void operator delete[](void *__p)
{
  off_1E78FAE50(__p);
}

void operator delete(void *__p)
{
  off_1E78FAE58(__p);
}

void *__cdecl operator new[](size_t __sz)
{
  return (void *)off_1E78FAE60(__sz);
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E78FAE68(__sz);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1E0C80A98](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x1E0DE50B0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x1E0DE50D0]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1E0C80B50](*(_QWORD *)&a1, a2);
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C70](*(_QWORD *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C78](*(_QWORD *)&a1);
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return (os_activity_t)MEMORY[0x1E0C80FC0](dso, description, activity, *(_QWORD *)&flags);
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t analytics_send_event_lazy()
{
  return MEMORY[0x1E0D15470]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

int chmod(const char *a1, mode_t a2)
{
  return MEMORY[0x1E0C82638](a1, a2);
}

int chown(const char *a1, uid_t a2, gid_t a3)
{
  return MEMORY[0x1E0C82640](a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x1E0C82698](a1);
}

double difftime(time_t a1, time_t a2)
{
  double result;

  MEMORY[0x1E0C82B98](a1, a2);
  return result;
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x1E0C82BC0](object);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C08](queue, block);
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82C18](queue, context, work);
}

void dispatch_barrier_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82C40](queue, context, work);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D10](group, queue, block);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D38](group, queue, block);
}

void dispatch_group_notify_f(dispatch_group_t group, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82D40](group, queue, context, work);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E20](attr);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E50](label, attr, target);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x1E0C82E98](object);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

void dispatch_retain(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA8](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

void dispatch_set_qos_class_floor(dispatch_object_t object, dispatch_qos_class_t qos_class, int relative_priority)
{
  MEMORY[0x1E0C82F00](object, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F48](source, handler);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

void dispatch_suspend(dispatch_object_t object)
{
  MEMORY[0x1E0C82F88](object);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

dispatch_workloop_t dispatch_workloop_create(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x1E0C82FD8](label);
}

uint64_t dispatch_workloop_is_current()
{
  return MEMORY[0x1E0C82FE8]();
}

int fchmod(int a1, mode_t a2)
{
  return MEMORY[0x1E0C832D0](*(_QWORD *)&a1, a2);
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1E0C83300](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1E0C83370](a1);
}

int ffsctl(int a1, unint64_t a2, void *a3, unsigned int a4)
{
  return MEMORY[0x1E0C83378](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1E0C83460](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C834A0](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

void freeifaddrs(ifaddrs *a1)
{
  MEMORY[0x1E0C834D0](a1);
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x1E0C83530](a1, a2, *(_QWORD *)&a3);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1E0C83560](*(_QWORD *)&a1, a2);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x1E0C83580](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

int getifaddrs(ifaddrs **a1)
{
  return MEMORY[0x1E0C836C8](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

const char *getprogname(void)
{
  return (const char *)MEMORY[0x1E0C83778]();
}

passwd *__cdecl getpwnam(const char *a1)
{
  return (passwd *)MEMORY[0x1E0C83790](a1);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1E0C83820](a1, a2);
}

const char *__cdecl inet_ntop(int a1, const void *a2, char *a3, socklen_t a4)
{
  return (const char *)MEMORY[0x1E0C83968](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x1E0C83BB0](a1, a2);
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C83C40](a1, a2);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

uint64_t mav_router_channel_get_name_as_cstr()
{
  return MEMORY[0x1E0DE6DB0]();
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x1E0C84160](a1, a2);
}

time_t mktime(tm *a1)
{
  return MEMORY[0x1E0C841C8](a1);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1E0C843D8](*(_QWORD *)&token);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1E0C843F8](name);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1E0C84408](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyCppObjectAtomic(void *dest, const void *src, void (__cdecl *copyHelper)(void *, const void *))
{
  MEMORY[0x1E0DE7C20](dest, src, copyHelper);
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x1E0C844C0](a1);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
  MEMORY[0x1E0C84510](activity, state);
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
  MEMORY[0x1E0C84518](state);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

void os_release(void *object)
{
  MEMORY[0x1E0C84910](object);
}

uint64_t os_state_add_handler()
{
  return MEMORY[0x1E0C84940]();
}

uint64_t os_state_remove_handler()
{
  return MEMORY[0x1E0C84948]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return MEMORY[0x1E0C84CC8](a1);
}

int pthread_attr_set_qos_class_np(pthread_attr_t *__attr, qos_class_t __qos_class, int __relative_priority)
{
  return MEMORY[0x1E0C84CD0](__attr, *(_QWORD *)&__qos_class, *(_QWORD *)&__relative_priority);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1E0C84D50](a1, a2, a3, a4);
}

int pthread_join(pthread_t a1, void **a2)
{
  return MEMORY[0x1E0C84DD8](a1, a2);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E18](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int pthread_set_qos_class_self_np(qos_class_t __qos_class, int __relative_priority)
{
  return MEMORY[0x1E0C84EF0](*(_QWORD *)&__qos_class, *(_QWORD *)&__relative_priority);
}

int pthread_setname_np(const char *a1)
{
  return MEMORY[0x1E0C84F08](a1);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1E0C85000](*(_QWORD *)&a1, a2, a3);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x1E0C85008](a1);
}

BOOL remove(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return MEMORY[0x1E0C850B8](__p, __ec);
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
  MEMORY[0x1E0C85100](__from, __to, __ec);
}

void rewind(FILE *a1)
{
  MEMORY[0x1E0C85120](a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85460](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C854D8](a1, a2);
}

int statfs(const char *a1, statfs *a2)
{
  return MEMORY[0x1E0C854E0](a1, a2);
}

int statvfs(const char *a1, statvfs *a2)
{
  return MEMORY[0x1E0C854E8](a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x1E0C85500](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1E0C85548](*(_QWORD *)&__errnum);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x1E0C85558](a1, a2, a3, a4);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return MEMORY[0x1E0C85590](a1, a2, a3);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

char *__cdecl strptime(const char *a1, const char *a2, tm *a3)
{
  return (char *)MEMORY[0x1E0C855D8](a1, a2, a3);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85658](__str, __endptr, *(_QWORD *)&__base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85698](__str, __endptr, *(_QWORD *)&__base);
}

int symlink(const char *a1, const char *a2)
{
  return MEMORY[0x1E0C85718](a1, a2);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1E0C857A0](a1, a2, a3, a4, a5);
}

void syslog(int a1, const char *a2, ...)
{
  MEMORY[0x1E0C857D0](*(_QWORD *)&a1, a2);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1E0C85950](a1);
}

int unlink(const char *a1)
{
  return MEMORY[0x1E0C859B8](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1E0C859E0](*(_QWORD *)&a1);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1E0C85D40](*(_QWORD *)&__fd, __buf, __nbyte);
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
  MEMORY[0x1E0C85DE0](xarray, value);
}

BOOL xpc_array_apply(xpc_object_t xarray, xpc_array_applier_t applier)
{
  return MEMORY[0x1E0C85DF8](xarray, applier);
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C85E00](objects, count);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x1E0C85E30](xarray);
}

xpc_object_t xpc_array_get_value(xpc_object_t xarray, size_t index)
{
  return (xpc_object_t)MEMORY[0x1E0C85E90](xarray, index);
}

xpc_object_t xpc_BOOL_create(BOOL value)
{
  return (xpc_object_t)MEMORY[0x1E0C85EF0](value);
}

void xpc_connection_cancel(xpc_connection_t connection)
{
  MEMORY[0x1E0C85F68](connection);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1E0C85FB0](name, targetq, flags);
}

uint64_t xpc_connection_get_audit_token()
{
  return MEMORY[0x1E0C85FD0]();
}

pid_t xpc_connection_get_pid(xpc_connection_t connection)
{
  return MEMORY[0x1E0C86008](connection);
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
  MEMORY[0x1E0C86030](connection, message);
}

void xpc_connection_send_message_with_reply(xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
  MEMORY[0x1E0C86038](connection, message, replyq, handler);
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x1E0C86108](object);
}

uint64_t xpc_copy_entitlement_for_token()
{
  return MEMORY[0x1E0C86120]();
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return (xpc_object_t)MEMORY[0x1E0C86178](bytes, length);
}

const void *__cdecl xpc_data_get_bytes_ptr(xpc_object_t xdata)
{
  return (const void *)MEMORY[0x1E0C86198](xdata);
}

size_t xpc_data_get_length(xpc_object_t xdata)
{
  return MEMORY[0x1E0C861A8](xdata);
}

BOOL xpc_dictionary_apply(xpc_object_t xdict, xpc_dictionary_applier_t applier)
{
  return MEMORY[0x1E0C861F0](xdict, applier);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C86208](keys, values, count);
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return (xpc_object_t)MEMORY[0x1E0C86228](original);
}

xpc_connection_t xpc_dictionary_get_remote_connection(xpc_object_t xdict)
{
  return (xpc_connection_t)MEMORY[0x1E0C862B0](xdict);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1E0C862E0](xdict, key);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
  MEMORY[0x1E0C863B8](xdict, key, value);
}

xpc_object_t xpc_double_create(double value)
{
  return (xpc_object_t)MEMORY[0x1E0C863D0](value);
}

BOOL xpc_equal(xpc_object_t object1, xpc_object_t object2)
{
  return MEMORY[0x1E0C86420](object1, object2);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1E0C86520](object);
}

xpc_object_t xpc_int64_create(int64_t value)
{
  return (xpc_object_t)MEMORY[0x1E0C86568](value);
}

xpc_object_t xpc_null_create(void)
{
  return (xpc_object_t)MEMORY[0x1E0C86628]();
}

void xpc_release(xpc_object_t object)
{
  MEMORY[0x1E0C86658](object);
}

xpc_object_t xpc_retain(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x1E0C86660](object);
}

xpc_object_t xpc_string_create(const char *string)
{
  return (xpc_object_t)MEMORY[0x1E0C86720](string);
}

xpc_object_t xpc_uint64_create(uint64_t value)
{
  return (xpc_object_t)MEMORY[0x1E0C867B0](value);
}

const uint8_t *__cdecl xpc_uuid_get_bytes(xpc_object_t xuuid)
{
  return (const uint8_t *)MEMORY[0x1E0C867F8](xuuid);
}

